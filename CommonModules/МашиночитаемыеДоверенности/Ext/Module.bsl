#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;
	ПолныеИменаРегистров = Новый Массив;
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);

	МетаданныеОбъекта = Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = СтрСоединить(ПолныеИменаРегистров, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки КАК ПравилоПроверки
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО ПравилаПроверкиПолномочийПоМЧД.Доверенность = МашиночитаемыеДоверенностиКонтрагентов.Ссылка
	|ГДЕ
	|	(МашиночитаемыеДоверенностиКонтрагентов.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены
	|	И ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL)
	|	И МашиночитаемыеДоверенностиКонтрагентов.Ссылка > &МЧДКонтрагентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки КАК ПравилоПроверки
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО ПравилаПроверкиПолномочийПоМЧД.Доверенность = МашиночитаемыеДоверенностиОрганизаций.Ссылка
	|ГДЕ
	|	(МашиночитаемыеДоверенностиОрганизаций.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены
	|	И ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL)
	|	И МашиночитаемыеДоверенностиОрганизаций.Ссылка > &МЧДОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОтработаныВсеДанныеМЧДКонтрагентов = Ложь;
	ОтработаныВсеДанныеМЧДОрганизаций = Ложь;
	
	МЧДКонтрагентов = Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка();
	МЧДОрганизаций = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанныеМЧДКонтрагентов Или Не ОтработаныВсеДанныеМЧДОрганизаций Цикл
		
		Запрос.УстановитьПараметр("МЧДКонтрагентов", МЧДКонтрагентов);
		Запрос.УстановитьПараметр("МЧДОрганизаций", МЧДОрганизаций);
		
		ДанныеМЧДКонтрагентов = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ДанныеМЧДОрганизаций = Запрос.ВыполнитьПакет()[1].Выгрузить();
		
		КоличествоСтрокМЧДКонтрагентов = ДанныеМЧДКонтрагентов.Количество();
		КоличествоСтрокМЧДОрганизаций = ДанныеМЧДОрганизаций.Количество();
		
		Если КоличествоСтрокМЧДКонтрагентов < 500 Тогда
			ОтработаныВсеДанныеМЧДКонтрагентов = Истина;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций < 500 Тогда
			ОтработаныВсеДанныеМЧДОрганизаций = Истина;
		КонецЕсли;
		
		Если КоличествоСтрокМЧДКонтрагентов > 0 Тогда
			МЧДКонтрагентов = ДанныеМЧДКонтрагентов[КоличествоСтрокМЧДКонтрагентов - 1].Ссылка;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций > 0 Тогда
			МЧДОрганизаций = ДанныеМЧДОрганизаций[КоличествоСтрокМЧДОрганизаций - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДКонтрагентов.ВыгрузитьКолонку("Ссылка"));
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДОрганизаций.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъектаМЧДКонтрагентов = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъектаМЧДКонтрагентов = МетаданныеОбъектаМЧДКонтрагентов.ПолноеИмя();
	
	МетаданныеОбъектаМЧДОрганизаций = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъектаМЧДОрганизаций = МетаданныеОбъектаМЧДОрганизаций.ПолноеИмя();
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДКонтрагентов);
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДОрганизаций);
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, 
		"РегистрСведений.СертификатыУчетныхЗаписейЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			Удалить = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДатаСоздания")) Тогда
					
					ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(СсылкаНаОбъект);
					ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(СсылкаНаОбъект);
					ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(СсылкаНаОбъект);
					ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Объект, Удалить);
					
				КонецЕсли;
				
				ОбработатьДанные_СоздатьПравилоПроверкиПолномочий(СсылкаНаОбъект);
				
			КонецЕсли;
			
			Если Удалить Тогда
				ОбновлениеИнформационнойБазы.УдалитьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать машиночитаемую доверенность ЭДО: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые машиночитаемые доверенности ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция машиночитаемых доверенностей ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры

// Включает использование реестра доверенностей ФНС ЭДО.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьИспользованиеРеестраДоверенностейФНСЭДО(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьРеестрДоверенностейФНСЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		МенеджерЗначения = Константы.ИспользоватьРеестрДоверенностейФНСЭДО.СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если Не МенеджерЗначения.Значение Тогда
			МенеджерЗначения.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(МенеджерЗначения, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения =
			НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"" по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, , ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта, , ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	Списки.Вставить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций, Истина);
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.МашиночитаемыеДоверенностиОрганизаций.Чтение.Организации
	|Справочник.МашиночитаемыеДоверенностиОрганизаций.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

// Ищет сведения о доверителе для подписи.
// 
// Параметры:
//  ХешПодписи - Строка
//  ПодписанныйОбъект - СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ИНН - Строка
//  * КПП - Строка
//  
Функция СведенияОДоверителе(ХешПодписи, ПодписанныйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.Доверенность КАК МЧД
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.Доверенность.НомерДоверенности > """"
		|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭлектронныеПодписиПоМЧД.ХешПодписи = &ХешПодписи";
	
	Запрос.УстановитьПараметр("ХешПодписи", ХешПодписи);
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СправочникМЧД = ?(ТипЗнч(Выборка.МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов"),
			Справочники.МашиночитаемыеДоверенностиКонтрагентов,
			Справочники.МашиночитаемыеДоверенностиОрганизаций);
		
		СведенияМЧД = СправочникМЧД.СведенияМЧД(Выборка.МЧД);
		
		Возврат Новый Структура("ИНН, КПП", СведенияМЧД.ИННДоверителя, "");
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Компонует параметры для отбора сертификата подписываемым доверителем
// 
// Параметры:
//  ИННОрганизации - Строка
//  ОГРНОрганизации - Строка
//  СНИЛСДоверителя - Строка
//  ИдентификаторОрганизации - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ИННОрганизации - Строка
// * ОГРНОрганизации - Строка
// * СНИЛСДоверителя - Строка
// * ИдентификаторОрганизации - Строка
//
Функция ПараметрыОтбораСертификатаДляПодписанияМЧД(ИННОрганизации, ОГРНОрганизации, СНИЛСДоверителя, ИдентификаторОрганизации) Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ИННОрганизации", ИННОрганизации);
	Структура.Вставить("ОГРНОрганизации", ОГРНОрганизации);
	Структура.Вставить("СНИЛСДоверителя", СНИЛСДоверителя);
	Структура.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Возврат Структура;
	
КонецФункции

// Проверяет сертификат на принадлежность к доверителю МЧД
//
// Параметры:
//  ИННОрганизации - Строка
//  ОГРНОрганизации - Строка
//  СНИЛСДоверителя - Строка
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//  Булево - Результат сравнения
//  
Функция ЭтоСертификатДоверителя(ИННОрганизации, ОГРНОрганизации, СНИЛСДоверителя, Сертификат) Экспорт

	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	ИННПодписантаФЛ = СвойстваСубъектаСертификата.ИНН;
	ИННПодписантаЮЛ = СвойстваСубъектаСертификата.ИННЮЛ;
	ОГРНИП_Подписанта = СвойстваСубъектаСертификата.ОГРНИП;
	ОГРН_Подписанта = СвойстваСубъектаСертификата.ОГРН;
	СНИЛС_Сертификата = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -", СвойстваСубъектаСертификата.СНИЛС, "");
	СНИЛС_МЧД = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -", СНИЛСДоверителя, "");
	
	Если Не ЗначениеЗаполнено(ИННПодписантаЮЛ) Тогда
		ИННПодписантаЮЛ = Прав(СвойстваСубъектаСертификата.ИНН, 10);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНИЛС_МЧД)
		И СНИЛС_МЧД = СНИЛС_Сертификата
		И (ИННПодписантаФЛ = ИННОрганизации 
			Или ИННПодписантаЮЛ = ИННОрганизации
			Или (ЗначениеЗаполнено(ОГРНИП_Подписанта) И ОГРНИП_Подписанта = ОГРНОрганизации)
			Или (ЗначениеЗаполнено(ОГРН_Подписанта) И ОГРН_Подписанта = ОГРНОрганизации)) Тогда
		
		ЭтоСертификатДоверителя = Истина;
	
	ИначеЕсли Не ЗначениеЗаполнено(СНИЛС_МЧД)
		И (ИННПодписантаФЛ = ИННОрганизации
			Или ИННПодписантаЮЛ = ИННОрганизации
			Или (ЗначениеЗаполнено(ОГРНИП_Подписанта) И ОГРНИП_Подписанта = ОГРНОрганизации)
			Или (ЗначениеЗаполнено(ОГРН_Подписанта) И ОГРН_Подписанта = ОГРНОрганизации)) Тогда
		
		ЭтоСертификатДоверителя = Истина;
		
	Иначе
		
		ЭтоСертификатДоверителя = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоСертификатДоверителя;	
	
КонецФункции

// Возвращает признак является ли субъект сертификата физическим лицом.
// 
// Параметры:
//  СвойстваСубъекта - См. КриптографияБЭД.СвойстваСубъектаСертификата
//  СвойстваИздателя - См. КриптографияБЭД.СвойстваИздателяСертификата
// 
// Возвращаемое значение:
//  Булево - Это субъект сертификата физическое лицо
Функция ЭтоСертификатФизическогоЛица(СвойстваСубъекта, СвойстваИздателя) Экспорт
	
	ДлинаИННФизическогоЛица = 12;
	
	Если ЭтоДанныеСертификатаДолжностногоЛицаГосОрганаУЦ(
		СвойстваСубъекта, СвойстваИздателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрДлина(СвойстваСубъекта.ИНН) = ДлинаИННФизическогоЛица И СвойстваСубъекта.ОГРНИП = Неопределено;
	
КонецФункции

// Новая ошибка проверки полномочий.
// 
// Возвращаемое значение:
//  Структура - Новая ошибка проверки полномочий:
// * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 						 - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ТекстОшибки - Строка
Функция НоваяОшибкаПроверкиПолномочийПриПодписании() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Доверенность", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
	
КонецФункции

// Новая ошибка проверки полномочий.
// 
// Возвращаемое значение:
//  Структура - Новая ошибка проверки полномочий:
// * Доверенность - Строка
// * НомерДоверенности - Строка
// * ТекстОшибки - Строка
Функция НоваяОшибкаПроверкиПолномочий() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Доверенность", "");
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки на необходимость наличия доверенности на подпись.
//
// Параметры:
//  ИННДоверителя - Строка - ИНН доверителя
//  СвойстваСубъектаСертификата - см. КриптографияБЭД.СвойстваСубъектаСертификата
//  СвойстваИздателяСертификата - см. КриптографияБЭД.СвойстваИздателяСертификата
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенность(ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата) Экспорт
	
	Если ЭтоДанныеСертификатаДолжностногоЛицаГосОрганаУЦ(СвойстваСубъектаСертификата, СвойстваИздателяСертификата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоСертификатФизическогоЛица(СвойстваСубъектаСертификата, СвойстваИздателяСертификата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИННПодписанта = СвойстваСубъектаСертификата.ИНН;
	
	ДоверительИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИННДоверителя, 12);
	ПодписантИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИННПодписанта, 12);
	
	Возврат ДоверительИНН <> ПодписантИНН;
	
КонецФункции

// Находит подписи с непроверенными полномочиями МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  * ДоверенностьНайдена - Булево
//  
Функция ПодписиСОшибкамиМЧД(ПодписанныйОбъект) Экспорт
	
	Подписи = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ПротоколПроверки КАК ПротоколПроверки,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи КАК ХешПодписи,
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена КАК ПроверкаВыполнена,
		|	ЭлектронныеПодписиПоМЧД.Доверенность КАК Доверенность
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДоверенностьНайдена = ЗначениеЗаполнено(Выборка.Доверенность);
		
		ДанныеПодписи = Новый Структура();
		ДанныеПодписи.Вставить("ПодписанныйОбъект", Выборка.ПодписанныйОбъект);
		ДанныеПодписи.Вставить("ХешПодписи", Выборка.ХешПодписи);
		ДанныеПодписи.Вставить("ДоверенностьНайдена", ДоверенностьНайдена);
		ДанныеПодписи.Вставить("ОшибкаПроверкиПолномочий", Ложь);
		
		ПротоколПроверкиJSON = Выборка.ПротоколПроверки.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
		Иначе
			ПротоколПроверки = Неопределено;
		КонецЕсли;
		
		ЕстьПротоколПроверки = ПротоколПроверки <> Неопределено;
		
		Если Не ДоверенностьНайдена Тогда
			
			Подписи.Добавить(ДанныеПодписи);
			
		ИначеЕсли ЕстьПротоколПроверки Тогда
			
			Если Не ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД) Тогда
				Если Не ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех Тогда
					ДанныеПодписи.ОшибкаПроверкиПолномочий = Истина;
				КонецЕсли;
				Подписи.Добавить(ДанныеПодписи);
			КонецЕсли;
		Иначе
			Подписи.Добавить(ДанныеПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

// Проверяет является ли ссылка доверенностью контрагента.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
// 	Булево
//  
Функция ЭтоМЧДКонтрагента(МЧД) Экспорт
	Возврат ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов");
КонецФункции

// Возвращает идентификатор пространства имен пилотного формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ПилотныйФорматМЧД() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01";
КонецФункции

// Возвращает идентификатор пространства имен утвержденного в 2022г. формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_2022() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01_01";
КонецФункции

// Возвращает идентификатор пространства имен утвержденного в 2022г., формата МЧД версии 002
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_2022_Версия_002() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_02_01";
КонецФункции

// Определяет пространство имен XDTO объекта МЧД по его содержимому.
// 
// Параметры:
//  ДанныеXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаОбъектаМЧД(ДанныеXDTO) Экспорт
	
	Если ДанныеXDTO.Свойства().Получить("ИдФайл") <> Неопределено
		И СтрНайти(ДанныеXDTO.ИдФайл, ФорматыЭДО_ФНС.ПространствоИмен_МЧД()) > 0 Тогда
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ВерсФорм") = "002" Тогда
			Возврат ФорматМЧД_2022_Версия_002();
		КонецЕсли;
		
		Возврат ПилотныйФорматМЧД();
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвДов") <> Неопределено
		И РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвПолн") <> Неопределено Тогда
		
		Возврат ФорматМЧД_2022();
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.Довер") <> Неопределено
		Или РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.Передов") <> Неопределено Тогда
		
		Возврат ФорматМЧД_2022_Версия_002();
		
	ИначеЕсли ДанныеXDTO.Свойства().Получить("ИдФайл") <> Неопределено
		И СтрНайти(ДанныеXDTO.ИдФайл, ФорматыЭДО_ФНС.ПространствоИмен_МЧД_b2g()) > 0 Тогда
			
		Возврат ФорматМЧД_b2g();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  СвойстваДоверенности - см. НовыеСвойстваДоверенности
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки) Экспорт
	
	ДействительнаПоСроку = ДатаПроверки > СвойстваДоверенности.ДатаВыдачи
		И ДатаПроверки < КонецДня(СвойстваДоверенности.ДатаОкончания);
	Отозвана = СвойстваДоверенности.Отозвана И ДатаПроверки >= СвойстваДоверенности.ДатаОтзыва;
	ДействительнаПоСтатусу = СтатусыДействительнойДоверенности().Найти(СвойстваДоверенности.СтатусВРеестреФНС) <> Неопределено;
		
	Возврат ДействительнаПоСроку И СвойстваДоверенности.Верна И Не Отозвана И ДействительнаПоСтатусу;
	
КонецФункции

// Возвращает результат проверки доверенности из протокола проверки
// 
// Параметры:
//  Проверка - см. НовыйПротоколПроверкиМЧД
// 
// Возвращаемое значение:
//  Булево
//  
Функция ДоверенностьПроверенаУспешно(Проверка) Экспорт
	
	ПроверкаДоверенности = НовыйПротоколПроверкиМЧД();
	ЗаполнитьЗначенияСвойств(ПроверкаДоверенности, Проверка);
	
	Возврат НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаОтзываМЧД)
				И НЕ ПроверкаДоверенности.ПроверкаОтзываМЧД.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаПериодаДействия)
				И НЕ ПроверкаДоверенности.ПроверкаПериодаДействия.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаПодписиМЧД)
				И НЕ ПроверкаДоверенности.ПроверкаПодписиМЧД.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС)
				И НЕ ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.СопоставлениеДоверителя)
				И НЕ ПроверкаДоверенности.СопоставлениеДоверителя.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.СопоставлениеПредставителя)
				И НЕ ПроверкаДоверенности.СопоставлениеПредставителя.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.ПроверкаПолномочий)
				И НЕ ПроверкаДоверенности.ПроверкаПолномочий.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскиеДанныеПолучены)
				И НЕ ПроверкаДоверенности.РодительскиеДанныеПолучены.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре)
				И НЕ ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе)
				И НЕ ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия)
				И НЕ ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента)
				И НЕ ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять)
				И НЕ ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять.Успех)
			И НЕ (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия)
				И НЕ ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия.Успех);
	
КонецФункции

// Возвращает снилс доверителей по переданному массиву ссылок МЧД организаций
// 
// Параметры:
//  МассивМЧД - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//      * Ключ     - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - СНИЛС подписанта (только цифры)
//  
Функция ДанныеСнилсПодписантов(МассивМЧД) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеДоверенностей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивМЧД, "ЛицоБезДовФЛ_СНИЛС");
	
	Для Каждого ДанныеДоверенности Из ДанныеДоверенностей Цикл
		Результат.Вставить(ДанныеДоверенности.Ключ);
		Результат.Вставить(УбратьИзСтрокиВсеНеЦифры(ДанныеДоверенности.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ОтражениеВУчете

// Читает данные файла ЭД и формирует дерево ЭД
// 
// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  НовыйЭД - Структура
//  
Процедура ПрочитатьМЧД(ДанныеФайлаЭД, НовыйЭД) Экспорт

	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Довер.СвДов") <> Неопределено Тогда
		СведенияДоверенности = ДанныеФайлаЭД.Документ.Довер.СвДов;
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Передов.СвДовПер") <> Неопределено Тогда
		СведенияДоверенности = ДанныеФайлаЭД.Документ.Передов.СвДовПер;
	Иначе
		СведенияДоверенности = ДанныеФайлаЭД.Документ.СвДов;
	КонецЕсли;

	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
	НовыйЭД.ИД = СведенияДоверенности.НомДовер;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;

	ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов);

	СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
	СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;

	УзелСведений = СведенияДоверенности;

	СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДата.ПолныйПуть = "Дата";
	ДатаВыдДовер = УзелСведений.Свойства().Получить("ДатаВыдДовер");
	Если ДатаВыдДовер <> Неопределено Тогда
		Дата = УзелСведений.ДатаВыдДовер;
	Иначе
		Дата = УзелСведений.ДатаНач;
	КонецЕсли;
	СтрокаЭДДата.Значение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Дата);

	СтрокаЭДДНомер = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДНомер.ПолныйПуть = "Номер";
	СтрокаЭДДНомер.Значение = УзелСведений.НомДовер;

	НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;

КонецПроцедуры

// Заполняет документ учета для типа ЭД - МашиночитаемаяДоверенность.
//
// Параметры:
//  ДанныеЭлектронногоДокумента - см. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДокументыУчета 	- Неопределено,
//  				- Массив из СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  СпособОбработки - Строка
//  ОписаниеОшибки  - Строка - описание ошибки создания МЧД. Может быть выведена пользователю.
//  
Процедура ОтразитьВУчете(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки = "", ОписаниеОшибки = "") Экспорт

	СпособыОтраженияВУчете = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();
	Если Не СпособыОтраженияВУчете.Свойство(СпособОбработки) Тогда
		СпособОбработки = СпособыОтраженияВУчете.МашиночитаемыеДоверенностиКонтрагентов;
	КонецЕсли;

	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Если СпособОбработки = "МашиночитаемыеДоверенностиОрганизаций" Тогда
		СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	КонецЕсли;

	ДанныеФайла = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
	Если ДокументыУчета <> Неопределено И ДокументыУчета.Количество() > 0 Тогда
		Для Каждого МЧД Из ДокументыУчета Цикл
			РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные, МЧД);
			Если НЕ ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось записать машиночитаемую доверенность'");
				ВызватьИсключение(ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные);
		МЧД = РезультатЗагрузки.МЧД;
		Если ЗначениеЗаполнено(МЧД) Тогда
			ДокументыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МЧД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует список операций ЭД типа МашиночитаемаяДоверенность.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список операций типа документа
//  
Функция СписокОперацийТипаДокумента() Экспорт

	Операции = Новый СписокЗначений;
	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Для Каждого Способ Из Способы Цикл
		Операции.Добавить(Способ.Ключ, Способ.Значение);
	КонецЦикла;

	Возврат Операции;

КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.МашиночитаемаяДоверенность);

КонецПроцедуры

// См. ИнтеграцияЭДО.СписокОперацийТипаДокумента
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт

	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Для Каждого Способ Из Способы Цикл
			СпособыОтраженияВУчете.Добавить(
				Способ.Ключ,
				Способ.Значение,
				Способ.Ключ = "МашиночитаемыеДоверенностиКонтрагентов");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Проверяет заполнение обязательных реквизитов в файле машиночитаемой доверенности.
//
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
//  ЭтоДоверенностьОрганизации - Булево
//
// Возвращаемое значение:
//  Структура - Результат проверки:
// * ЕстьОшибки - Булево
// * ТекстОшибки - Строка
//
Функция ПроверитьКлючевыеРеквизитыДанныхФайлаДоверенности(ДанныеДоверенности, ЭтоДоверенностьОрганизации = Ложь) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьОшибки", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки", "");
	
	Если ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
	Иначе
		КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
	КонецЕсли;
	
	КлючевыеРеквизиты = КлючевыеРеквизиты + ",НомерДоверенности, ДатаВыдачи, ДатаОкончания";
	Если ЭтоДоверенностьОрганизации Тогда
		КлючевыеРеквизиты = КлючевыеРеквизиты + ",Организация, Представитель";
	КонецЕсли;
	
	КлючевыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеРеквизиты, , , Истина);
	
	ТекстОшибки = "";
	
	Для Каждого КлючевойРеквизит Из КлючевыеРеквизиты Цикл
		Если ДанныеДоверенности.Свойство(КлючевойРеквизит)
			И ЗначениеЗаполнено(ДанныеДоверенности[КлючевойРеквизит]) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КлючевойРеквизит = "Представитель" Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо создать физическое лицо - представителя доверенности.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника'") + ":  " + КлючевойРеквизит;
			КонецЕсли;
		Иначе
			ТекстОшибки = ТекстОшибки + ", " + КлючевойРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки.ТекстОшибки = ТекстОшибки;
	РезультатПроверки.ЕстьОшибки = ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Структура адреса сервера МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * АдресСервера - Строка
//  * РесурсКорняAPI - Строка
//  * ИспользоватьРасширенияAPI - Булево
//  
Функция СтруктураАдресаСервераМЧД() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресСервера",				"https://1cpoagate.1c.ru/");
	СтруктураАдреса.Вставить("РесурсКорняAPI",				"/applications/MChD/api/clientpoa");
	СтруктураАдреса.Вставить("ИспользоватьРасширенияAPI",	Истина);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирует файл заявления на отмену МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ПричинаОтмены - Строка - Причина отмены доверенности
// 
// Возвращаемое значение:
//  Структура - Подготовленный файл:
//  * ИмяФайла - Строка - Имя файла
//  * Содержимое - Строка - Содержимое файла
//
Функция ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, ПричинаОтмены) Экспорт
	
	МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту("НомерДоверенности", НомерДоверенности);
	ДвоичныеДанныеМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "XMLфайлМЧД").Получить();
	ДанныеДоверенности = ДанныеИзФайлаОбмена(ДвоичныеДанныеМЧД).ДанныеМЧД;
	
	Если ДанныеДоверенности = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось распознать двоичные данные доверенности'");
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "001");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");

	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписьXML.ЗаписатьАтрибут("НомДовер", НомерДоверенности);
	ЗаписьXML.ЗаписатьАтрибут("ПричОтз", ПричинаОтмены);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаявит");
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РосОргДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		ЗаписьXML.ЗаписатьАтрибут("ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();
				
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда

		ЗаписьXML.ЗаписатьНачалоЭлемента("ИПДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимИП", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не поддерживается отзыв с типом доверителя:'") + ДанныеДоверенности.ТипОрганизации;
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат Новый Структура("ИмяФайла, Содержимое", "revoke.xml", ЗаписьXML.Закрыть());
	
КонецФункции

// Получает номер МЧД на сервере МЧД.
// 
// Параметры:
//  ТокенДоступа - Строка - Токен доступа к серверу МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьНомерМЧД(ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеНомераМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен номер доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок = КодыОшибокДоступа();
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат регистрации:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * НомерДоверенности - Строка - Номер доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ЗарегистрироватьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.РегистрацияМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unknown-poa-type",
		СтрШаблон(
			НСтр("ru = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.signature_is_invalid",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_cn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_inner_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poa""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1.sig""
		|Content-Type: text/xml
		|
		|";
		
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает статус транзакции МЧД.
// 
// Параметры:
//  ИдентификаторТранзакции - Строка - Идентификатор транзакции
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
// 
// Возвращаемое значение:
//  Структура - Результат получения статуса транзакции МЧД:
//   * СтатусТранзакции - Строка - Статус транзакции
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ДатаВремяТранзакции - Дата, Неопределено - Дата и время транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеСтатусаТранзакцииМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус обработки с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			СтруктураОтвета.timestamp, Неопределено);
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ЗначениеЗаполнено(Результат.ДатаВремяТранзакции) Тогда
		Попытка
			Результат.ДатаВремяТранзакции = XMLЗначение(Тип("Дата"), Результат.ДатаВремяТранзакции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать дату и время транзакции'");
			СтруктураПараметров = Новый Структура("ШаблонОшибкиИзИсключения", ТекстСообщения); 
			ВывестиИЗаписатьОшибкуМЧД(СтруктураПараметров, ОтветHTTP, , "ТолькоЗаписатьВЖурналРегистрации");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Загружает и возвращает сведения доверенности с сервера МЧД.
// 
// Параметры:
//   НомерДоверенности - Строка - Номер доверенности
//   ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура:
//   * Ошибка - Булево
//   * ТекстОшибки - Строка
//   * ЧастичныеДанные - Неопределено
//   				   - см. МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
//   * ПолныеДанные - Неопределено, ДвоичныеДанные - Двоичные данные xml-файла МЧД
//   * ДатаЗагрузкиИзРеестра - Дата
// 
Функция ПолучитьСведенияДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ЧастичныеДанные", Неопределено);
	Результат.Вставить("ПолныеДанные", Неопределено);
	Результат.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;

	ЧастичныеДанные = ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа);
	
	Если ПустаяСтрока(ЧастичныеДанные.НомерДоверенности) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки
			= НСтр("ru = 'Не удалось получить данные доверенности в реестре ФНС. Повторите попытку позже'");
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ЧастичныеДанные = ЧастичныеДанные;
	
	ПолныеДанные = ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа);
							
	Если НЕ ЗначениеЗаполнено(ПолныеДанные.ДанныеВыгрузки) Тогда
		
		Результат.Ошибка = Истина;
		ШаблонОшибки = НСтр(
			"ru = 'Не удалось получить данные доверенности в реестре ФНС.
			|Возможно доверенность: %1 не выдана доверителем с ИНН: %2'"); 
		Результат.ТекстОшибки = СтрШаблон(ШаблонОшибки, НомерДоверенности, ИННДоверителя);
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ПолныеДанные = ПолныеДанные;
	Результат.ДатаЗагрузкиИзРеестра = ТекущаяДатаСеанса();
	
	Возврат Результат;
			
КонецФункции

// Получает частичные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Частичные данные доверенности:
//   * СтатусДоверенности - Строка - Статус доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * НомерДоверенности - Строка - Номер доверенности
//   * ДатаВыдачи - Дата, Неопределено - Дата выдачи доверенности
//   * ДатаОкончания - Дата, Неопределено - Дата окончания доверенности
//   * ПубличныйКлюч - Строка - Публичный ключ
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеЧастичныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate"),
			СтруктураОтвета.startDate, Неопределено);
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate"),
			СтруктураОтвета.endDate, Неопределено);
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ХешДоверенности) И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Отменяет МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат отмены:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ОтменитьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбъектДоверенность = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(СсылкаНаДоверенность);
			ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
			ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеВыгрузки,
				Новый СжатиеДанных(9));
			ОбъектДоверенность.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеПодписи,
				Новый СжатиеДанных(9));
			ОбъектДоверенность.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВидОперации = НСтр("ru = 'Отзыв доверенности.'");
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Не удалось отозвать доверенность. Подробности в журнале регистрации.'");
			ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие,
				ПодробныйТекстОшибки, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ОтменаМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор отзыва доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при отзыве доверенности на сервере МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-valid",
		СтрШаблон(
			НСтр("ru = 'Операция запрещена: данные в сертификате не совпадают с данными досрочно отзываемой доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_validation_exception",
		СтрШаблон(
			НСтр("ru = 'Электронная подпись запроса на досрочный отзыв доверенности номер ""%1"" невалидна'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/expired_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" истекла'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoked_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" уже отозвана'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_terminal_poa_status",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.revoke.revocable_poa_status_is_terminal",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как ОГРН/ОГРНИП доверителя в отзываемой доверенности не соответствуют ОГРН/ОГРНИП в сертификате электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_ogrn_or_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен ОГРН/ОГРНИП для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен СНИЛС владельца для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как СНИЛС подписанта в отзываемой доверенности не соответствуют СНИЛС в сертификате электронной подписи для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_poa_revoke_xml",
		СтрШаблон(
			НСтр("ru = 'XML-файл отзыва доверенности не соответствует XSD-схеме для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poacancel", "/poar-webapp/integration/poa/revoke");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// Запись передаваемых данных
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poaRevoke""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1""
		|Content-Type: application/octet-stream
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Возвращает URL информационной системы.
// 
// Возвращаемое значение:
//  Строка - url
// 
Функция СведенияОбИнформационнойСистеме() Экспорт
	Возврат "https://m4d.nalog.gov.ru";
КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);
	
КонецФункции

// Возвращает таблицу значений с данными результатов проверки МЧД оператором ЭДО. 
//
// Параметры:
//  ПодписанныеОбъекты - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
// 	ТаблицаЗначений:
// 	 * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 	 * Отпечаток - Строка
// 	 * ДоверенностьВерна - Булево
//
Функция РезультатыПроверокМЧДОператоромЭДО(ПодписанныеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	РезультатыПроверкиМЧД.Отпечаток КАК Отпечаток,
	|	РезультатыПроверкиМЧД.ДоверенностьВерна КАК ДоверенностьВерна
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧД
	|ГДЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект В (&ПодписанныеОбъекты)";
	
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Описывает пустую структуру сведений МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * НомерДоверенности - Строка
//  * НомерРодительскойДоверенности - Строка
//  * ИННДоверителя - строка
//  * ИННДоверителяРодительскойДоверенности - Строка
//  * ИННПредставителя - строка
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * ДатаПолученияСведений - Дата
//  * Подписана - Булево
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * ПолномочияОграничены - Булево
//  * Полномочия - Массив из См.НовыеПолномочияПредставителя
//  * ТипПередоверия - Строка
//  * ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//  * СовместныеПолномочия - Булево
//  * НесколькоПредставителей - Булево
//  * ДатаЗагрузкиИзРеестраРодительскихДанных - Дата
//  * РодительскиеДанныеМЧД - Неопределено,
//  							См. НовыеСведенияМЧД
//  
Функция НовыеСведенияМЧД() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка());
	Сведения.Вставить("НомерДоверенности", "");
	Сведения.Вставить("НомерРодительскойДоверенности", "");
	Сведения.Вставить("ИННДоверителя", "");
	Сведения.Вставить("ИННДоверителяРодительскойДоверенности", "");
	Сведения.Вставить("ИННПредставителя", "");
	Сведения.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Сведения.Вставить("Подписана", Ложь);
	Сведения.Вставить("Верна", Ложь);
	Сведения.Вставить("Отозвана", Ложь);
	Сведения.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Сведения.Вставить("ДатаПолученияСведений", Дата(1, 1, 1));
	Сведения.Вставить("ПолномочияОграничены", Истина);
	Сведения.Вставить("Полномочия", Новый Массив());
	Сведения.Вставить("ТипПередоверия", "");
	Сведения.Вставить("ПравилоПроверки", Справочники.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка());
	Сведения.Вставить("СовместныеПолномочия", Ложь);
	Сведения.Вставить("НесколькоПредставителей", Ложь);
	Сведения.Вставить("ДатаЗагрузкиИзРеестраРодительскихДанных", Дата(1, 1, 1));
	Сведения.Вставить("РодительскиеДанныеМЧД", Неопределено);
	
	Возврат Сведения;
	
КонецФункции

// Описывает пустую структуру статуса МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка - причина по которой не удалось получить данные доверенности, заполняется при Ошибка = Истина
//  * Сведения - Неопределено, см. НовыеСведенияМЧД
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыеДанныеСтатусаМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Сведения", Неопределено); 
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о статусах доверенностей контрагентов.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейКонтрагентов(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает сведения о статусах доверенностей организаций.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура См. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейОрганизаций(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает общие свойства доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	   - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * Значение - См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенностей(Доверенности) Экспорт
	
	СвойстваДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_НаимОрг КАК Доверитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиОрганизаций.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН КАК ИННПредставителя,
		|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены КАК ПолномочияОграничены
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В (&Доверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.Доверитель КАК Доверитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиКонтрагентов.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПредставительИНН КАК ИННПредставителя,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка В (&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = НовыеОбщиеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
		СвойстваДоверенностей.Вставить(Выборка.Ссылка, Свойства);
	КонецЦикла;
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает общие свойства доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  - Неопределено
//  - см. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенности(Доверенность) Экспорт
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
	ОбщиеСвойстваДоверенностей = ОбщиеСвойстваДоверенностей(Доверенности);
	Возврат ОбщиеСвойстваДоверенностей[Доверенность];
КонецФункции

// Возвращает номера актуальных доверенностей по данным доверителя и представителя.
// 
// Параметры:
//  Доверитель - Структура:
//  * ИНН - Строка
//  * КПП - Строка
//  Представитель - Структура:
//  * ИНН - Строка
//  * КПП - Строка
//  ЭлектронныйДокумент - Неопределено
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * НомераДоверенностей - Массив из Строка
//  * ОшибкиПроверкиПолномочий - Массив из см. НоваяОшибкаПроверкиПолномочий
Функция НомераДоверенностейПоУчастникам(Доверитель, Представитель, ЭлектронныйДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиКонтрагентов.Представление КАК Представление,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены КАК ПолномочияОграничены,
		|	ЕСТЬNULL(ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки,
		|		ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка)) КАК ПравилоПроверки
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
		|		ПО (ПравилаПроверкиПолномочийПоМЧД.Доверенность = МашиночитаемыеДоверенностиКонтрагентов.Ссылка)
		|ГДЕ
		|	(МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН = &ДоверительИНН
		|	ИЛИ МашиночитаемыеДоверенностиКонтрагентов.ИННДоверителяРодительскойДоверенности = &ДоверительИНН)
		|	И МашиночитаемыеДоверенностиКонтрагентов.ПредставительИНН = &ПредставительИНН
		|	И НЕ МашиночитаемыеДоверенностиКонтрагентов.ПометкаУдаления
		|ИТОГИ
		|	МАКСИМУМ(ПравилоПроверки)
		|ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("ДоверительИНН", Доверитель.ИНН);
	Запрос.УстановитьПараметр("ПредставительИНН", Представитель.ИНН);
	
	НомераДоверенностей = Новый Массив;
	Ошибки = Новый Массив();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);
		
		Если ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ТекущаяДатаСеанса()) Тогда
			
			ВозможнаАвтопроверкаПолномочий = ВозможнаАвтопроверкаПолномочий(СвойстваДоверенности);
			
			Если ВозможнаАвтопроверкаПолномочий Тогда
				
				Если Выборка.ПолномочияОграничены И ЭлектронныйДокумент <> Неопределено Тогда
					
					РезультатПроверки = ПроверитьПолномочияДоверенности(Выборка.Ссылка, ЭлектронныйДокумент);
					
					Если НЕ РезультатПроверки.Успех Тогда
						
						Ошибка = НоваяОшибкаПроверкиПолномочий();
						Ошибка.Доверенность = Выборка.Представление;
						Ошибка.НомерДоверенности = Выборка.НомерДоверенности;
						Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
						Ошибки.Добавить(Ошибка);
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НомераДоверенностей.Вставить(0, Выборка.НомерДоверенности);
				Продолжить;
				
			Иначе
				
				Ошибка = НоваяОшибкаПроверкиПолномочий();
				Ошибка.Доверенность = Выборка.Представление;
				Ошибка.НомерДоверенности = Выборка.НомерДоверенности;
				Ошибка.ТекстОшибки = ТекстОшибкиНеНастроенаАвтопроверка();
				Ошибки.Добавить(Ошибка);
				Продолжить;
				
			КонецЕсли;
				
			НомераДоверенностей.Добавить(Выборка.НомерДоверенности);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("НомераДоверенностей, ОшибкиПроверкиПолномочий", НомераДоверенностей, Ошибки);
	
КонецФункции

// Записывает результат проверки в элемент справочника машиночитаемой доверенности.
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  Результат - Булево
//  ТекстОшибки - Строка
//
Процедура ОтразитьРезультатПроверкиМЧД(МЧД, Результат, ТекстОшибки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		МЧДОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(МЧД);
		МЧДОбъект.Верна = Результат;
		МЧДОбъект.ТекстОшибкиПроверкиМЧД = ТекстОшибки;
		УстановитьПривилегированныйРежим(Истина);
		МЧДОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
		МЧДОбъект.Разблокировать();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Запись результата проверки доверенности'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки,, МЧД);
			
	КонецПопытки;
	
КонецПроцедуры

// Заполняет реквизиты подписи в объекте справочника машиночитаемые доверенности.
//
// Параметры:
//  ОбъектМЧД - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций, СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД;
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Процедура ЗаполнитьПодписанаВерна(ОбъектМЧД, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте = Ложь) Экспорт
	
	Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		РезультатПроверкиДоверенности = ПроверитьДоверенность(ДанныеДляПроверки);
		РезультатВерна = РезультатПроверкиДоверенности.Результат;
		РезультатТекстОшибки = РезультатПроверкиДоверенности.ТекстОшибки;
	Иначе   
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
		РезультатВерна = Ложь;
		РезультатТекстОшибки = "";
	КонецЕсли;
	
	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи) И ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеДоверенности);
	
	Подпись = Неопределено;
	Если ДоверенностьПодписана Тогда
		Подпись = Новый ХранилищеЗначения(ДанныеДляПроверки.ДанныеПодписи, Новый СжатиеДанных(9));
	КонецЕсли;
	
	ОбъектМЧД.ЭлектроннаяПодпись = Подпись;
	ОбъектМЧД.Подписана = ДоверенностьПодписана;
	ОбъектМЧД.Верна = РезультатВерна;
	ОбъектМЧД.ТекстОшибкиПроверкиМЧД = РезультатТекстОшибки;
			
КонецПроцедуры

// Возвращает данные файлов из архива с машиночитаемой доверенностью и подписью.
//
// Параметры:
//  ДанныеАрхива - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище.
//
// Возвращаемое значение:
//  Неопределено,Структура:
//   * ДанныеМЧД - ДвоичныеДанные - Данные файла машиночитаемой доверенности.
//   * ДанныеПодписи - ДвоичныеДанные - Данные подписи.
//
Функция ПрочитатьАрхивСДоверенностьюИПодписью(ДанныеАрхива) Экспорт
	
	Если ТипЗнч(ДанныеАрхива) = Тип("Строка") Тогда
		ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ДанныеАрхива);
	Иначе
		ДвоичныеДанныеАрхива = ДанныеАрхива;
	КонецЕсли;
	
	РезультатЧтения = ПрочитатьАрхивМЧД(ДвоичныеДанныеАрхива);
	Если РезультатЧтения.ОшибкаДоступаНаLinux Тогда
		ИсправленныеДанныАрхива = ИзменитьАтрибутыФайловАрхива(ДвоичныеДанныеАрхива, 0, 2176843776);
		Если ТипЗнч(ИсправленныеДанныАрхива) = Тип("ДвоичныеДанные") Тогда
			РезультатЧтения = ПрочитатьАрхивМЧД(ИсправленныеДанныАрхива);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать файл машиночитаемой доверенности.'");
			ПодробныйТекстОшибки = ИсправленныеДанныАрхива;
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение архива машиночитаемой доверенности'"),
				ПодробныйТекстОшибки, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЧтения.ДанныеФайлов;
	
КонецФункции

// Формирует данные доверенности для транспортного контейнера.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности
Функция ДанныеДоверенностиДляКонтейнера(Доверенность) Экспорт
	
	ИмяФайлаБезРасширения = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Доверенность);
	Реквизиты = "XMLфайлМЧД, ЭлектроннаяПодпись, ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС,
		|НомерДоверенности, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН, СведенияОбИнформационнойСистеме";
	СвойстваДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, Реквизиты);
	
	ДанныеДоверенности = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности();
	
	Если ЗначениеЗаполнено(СвойстваДоверенности.СтатусВРеестреФНС) Тогда
		
		ДанныеДоверенности.НомерДоверенности = СвойстваДоверенности.НомерДоверенности;
		ДанныеДоверенности.ДоверительИНН =
			Макс(СвойстваДоверенности.ДоверительЮЛ_ИНН, СвойстваДоверенности.ДоверительФЛ_ИНН);
		ДанныеДоверенности.СсылкаНаРеестр = СвойстваДоверенности.СведенияОбИнформационнойСистеме;
		
	Иначе
		
		ДанныеДоверенности.ЭтоФайловаяДоверенность = Истина;
		ДанныеДоверенности.Доверенность.ДвоичныеДанные = СвойстваДоверенности.XMLфайлМЧД.Получить();
		ДанныеДоверенности.Доверенность.ИмяФайла = ИмяФайлаБезРасширения + ".xml";
		ДанныеДоверенности.Подпись.ДвоичныеДанные = СвойстваДоверенности.ЭлектроннаяПодпись.Получить();
		ДанныеДоверенности.Подпись.ИмяФайла = ИмяФайлаБезРасширения + ".p7s";
		
	КонецЕсли;
	
	ДанныеДоверенности.ДатаВыдачи = СвойстваДоверенности.ДатаВыдачи;
	ДанныеДоверенности.ДатаОкончания = СвойстваДоверенности.ДатаОкончания;
	
	Возврат ДанныеДоверенности;
	
КонецФункции

// Возвращает сохраненные данные файла доверенности и электронную подпись, которой подписана доверенность.
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//
// Возвращаемое значение:
//  Структура - Данные файла доверенности и подписи:
//   * ДанныеФайла - ДвоичныеДанные
//   * ДанныеПодписи - ДвоичныеДанные
//
Функция ДанныеФайлаДоверенностиИПодписи(МЧД) Экспорт
	
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "XMLфайлМЧД,ЭлектроннаяПодпись");
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", РеквизитыМЧД.XMLфайлМЧД.Получить());
	Результат.Вставить("ДанныеПодписи", РеквизитыМЧД.ЭлектроннаяПодпись.Получить());
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные доверенности из файла обмена.
// 
// Параметры:
//  ОписаниеФайлаОбмена - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайлаОбмена) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	
	ЭлементZipФайлаДанныхДоверенности = Неопределено;
	Поток = ОписаниеФайлаОбмена.ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(Поток);
	Для Каждого Элемент Из ЧтениеZip.Элементы Цикл
		Если НРег(Элемент.Расширение) = "xml"
			И ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(Элемент.Имя) Тогда
			ЭлементZipФайлаДанныхДоверенности = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементZipФайлаДанныхДоверенности = Неопределено Тогда
		ЧтениеZip.Закрыть();
		Поток.Закрыть();
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	ВременныйКаталог = "";
	
	Попытка
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ЧтениеZip.Извлечь(ЭлементZipФайлаДанныхДоверенности, ВременныйКаталог);
		ОписаниеФайла.ИмяФайла = ЭлементZipФайлаДанныхДоверенности.Имя;
		ОписаниеФайла.ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйКаталог + ЭлементZipФайлаДанныхДоверенности.Имя);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось извлечь файл %1 из архива %2 по причине:'"),
			ЭлементZipФайлаДанныхДоверенности.Имя, ОписаниеФайлаОбмена.ИмяФайла);
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецПопытки;
	
	ЧтениеZip.Закрыть();
	Поток.Закрыть();
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Возвращает признак использования распределенного реестра доверенностей ФНС.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьРеестрДоверенностейФНС() Экспорт
	
	Возврат Константы.ИспользоватьРеестрДоверенностейФНСЭДО.Получить();
	
КонецФункции

// Возвращает признак использования возможности создавать МЧД в формате версии 002.
// 
// Возвращаемое значение:
//  Булево
Функция РазрешитьСозданиеМЧДВерсии002() Экспорт
	
	Возврат Константы.РазрешитьСозданиеМЧДВерсии002.Получить();
	
КонецФункции

#Область ПроверкаПодписи

// Возвращает вид ошибки, для документа имеющего подписи с невалидными МЧД
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
// 	
Функция ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧД() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьПодписиСНепровереннымиПолномочиямиМЧД";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документ содержит подписи с
		|непроверенными полномочиями'");
	ВидОшибки.ОписаниеРешения =
		НСтр("ru = '<a href = ""Выполните"">Выполните</a> ручную проверку полномочий'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните",
		"МашиночитаемыеДоверенностиКлиент.ОткрытьФормуПроверкиПолномочий");
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = "МашиночитаемыеДоверенностиКлиент.ОткрытьФормуПроверкиПолномочий";
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает вид ошибки для документа, имеющего подписи с непроверенными МЧД, когда доверенность не найдена.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧДДоверенностьНеНайдена() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьПодписиСНепровереннымиПолномочиямиМЧДДоверенностьНеНайдена";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось подписать документ, который подписан подписью физического лица'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Подпись контрагента должна сопровождаться доверенностью, но подходящей доверенности в программе нет'");
	ВидОшибки.ОписаниеРешения =
		НСтр("ru = 'Получите от контрагента подходящую доверенность, загрузите ее в программу и проверьте подпись;
		|проверьте полномочия вручную через карточку документа
		|или запросите у контрагента этот документ с другой подписью'");
	
	Возврат ВидОшибки;
	
КонецФункции

// Записывает результат проверки полномочий доверенности.
// 
// Параметры:
//  ДанныеПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеПроверкиПолномочий
//  
//  Возвращаемое значение:
//    Структура:
//      * Успех - Булево
//      * ТекстОшибки - Строка
//      * РезультатыПроверкиПодписи - Массив из Структура:
//  	  ** ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  	  ** ХешПодписи - Строка
//  	  ** ПроверкаПодписи - см. НовыйРезультатПроверкиПодписи
//      
Функция ЗаписатьРезультатПроверкиПолномочий(Знач ДанныеПроверки) Экспорт
	
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, "");
	Результат.Вставить("РезультатыПроверкиПодписи", Новый Массив);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Данные Из ДанныеПроверки Цикл
		
			НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Данные.ПодписанныйОбъект);
			НаборЗаписей.Отбор.ХешПодписи.Установить(Данные.ХешПодписи);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			ТребуетсяЗапись = Ложь;
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				
				ПротоколПроверкиJSON = ЗаписьНабора.ПротоколПроверки.Получить();
				
				Если ПротоколПроверкиJSON <> Неопределено Тогда
					
					ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
					ПротоколПроверки.ПроверкаМЧД[Данные.ИмяПроверки] = Данные.РезультатПроверки;
					ПротоколПроверки.ПроверкаМЧД[Данные.ИмяПроверки].ДатаПроверки = ТекущаяДатаСеанса();
					ПротоколПроверки.ПроверкаМЧД[Данные.ИмяПроверки].РучнаяПроверка = Данные.РучнаяПроверка;
					ПротоколПроверки.ПроверкаМЧД[Данные.ИмяПроверки].НомерДоверенности =
							Данные.НомерРодительскойДоверенности;
					
					ПротоколJSON = ОбщегоНазначенияБЭД.JSONСтрока(ПротоколПроверки);
					ЗаписьНабора.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколJSON, Новый СжатиеДанных(9));
					
					ТребуетсяЗапись = Истина;
					
					ЗаписьНабора.ПодписьВерна = ПротоколПроверки.ПроверкаПодписиДокумента.Успех
						И (ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД) Или Данные.РучнаяПроверка);
					ПроверкаПодписи = НовыйРезультатПроверкиПодписи();
					ПроверкаПодписи.ПроверкаВыполнена = ЗаписьНабора.ПроверкаВыполнена;
					ПроверкаПодписи.ПодписьВерна = ЗаписьНабора.ПодписьВерна;
					ПроверкаПодписи.ТребуетсяДоверенность = Истина;
					ПроверкаПодписи.ПротоколПроверки = ПротоколПроверки;
					ПроверкаПодписи.Доверенность = ЗаписьНабора.Доверенность;
					
					СтруктураРезультата = Новый Структура();
					СтруктураРезультата.Вставить("ПодписанныйОбъект", Данные.ПодписанныйОбъект);
					СтруктураРезультата.Вставить("ХешПодписи", Данные.ХешПодписи);
					СтруктураРезультата.Вставить("ПроверкаПодписи", ПроверкаПодписи);
					Результат.РезультатыПроверкиПодписи.Добавить(ПроверкаПодписи);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТребуетсяЗапись Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(Данные.ПодписанныйОбъект);
				
			КонецЕсли;
	
		КонецЦикла;
		
		Результат.Успех = Истина;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
			Результат.ТекстОшибки,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			УровеньЖурналаРегистрации.Ошибка);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость ручной проверки доверенности.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Булево
//  
Функция ДоступнаРучнаяПроверка(МЧД) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "ПолномочияОграничены");
КонецФункции

// Новый протокол проверки МЧД.
// 
// Возвращаемое значение:
//   Структура:
// 	   * Выполнена - Булево
// 	   * ОшибкаВыполнения - Строка
// 	   * ПроверкаПодписиМЧД - Неопределено - если проверка не требуется.
// 	   						- см. НовыйРезультатПроверки
// 	   * ПроверкаОтзываМЧД	- Неопределено - если проверка не требуется.
// 							- см. НовыйРезультатПроверки
//	   * ПроверкаОператором - Неопределено - если проверка не требуется.
//							- см. НовыйРезультатПроверки
// 	   * СопоставлениеПредставителя - Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
//	   * СопоставлениеДоверителя	- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
// 	   * ПроверкаПериодаДействия 	- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
// 	   * ПроверкаСтатусаВРеестреФНС	- Неопределено - если проверка не требуется.
// 							 		- см. НовыйРезультатПроверки
// 	   * ПроверкаПолномочий			- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
//	   * РодительскиеДанныеПолучены									 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьДействительнаВРеестре				 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьСоответствуетОрганизацииВДокументе - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскийПредставительСоответствуютДоверителюПередоверия - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскийПериодДействияСоответствуетДатеДокумента		 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьМоглаПередоверять					 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскиеПолномочияСоответствуютПолномочиямПередоверия	 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
Функция НовыйПротоколПроверкиМЧД() Экспорт
	
	ПротоколПроверкиМЧД = Новый Структура;
	
	ПротоколПроверкиМЧД.Вставить("Выполнена", Ложь);
	ПротоколПроверкиМЧД.Вставить("ОшибкаВыполнения", "");
	ПротоколПроверкиМЧД.Вставить("ПроверкаПодписиМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОтзываМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОператором", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеПредставителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеДоверителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаПериодаДействия", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаСтатусаВРеестреФНС", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаПолномочий", НовыйРезультатПроверки());
	
	ПротоколПроверкиМЧД.Вставить("РодительскиеДанныеПолучены", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьДействительнаВРеестре", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьСоответствуетОрганизацииВДокументе", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскийПредставительСоответствуютДоверителюПередоверия", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскийПериодДействияСоответствуетДатеДокумента", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьМоглаПередоверять", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскиеПолномочияСоответствуютПолномочиямПередоверия", НовыйРезультатПроверки());
	
	Возврат ПротоколПроверкиМЧД;
	
КонецФункции

// Возвращает сведения для проверки подписей по МЧД.
// 
// Параметры:
//  ТекущийПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  РазмерПорции - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - См. КриптографияБЭД.ХешПодписи
Функция ПорцияСведенийОПодписяхДляПроверки(ТекущийПодписанныйОбъект, РазмерПорции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗРЕШЕННЫЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи КАК ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	НЕ ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена
		|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект > &ПодписанныйОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодписанныйОбъект";
	Если РазмерПорции <> 1000 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", СтрШаблон("ПЕРВЫЕ %1", РазмерПорции));
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ТекущийПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает новые параметры проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ИННДоверителя - Строка - ИНН доверителя по данным файла электронного документа.
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * СведенияМЧД - см. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  * ПроверкаОператором - См. НовыйПротоколПроверкиОператором
//  * ТекстОшибки - Строка 
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - Неопределено
//  					-  см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ПроверятьПолномочияВручную - Булево - Признак обязательности интерактивной проверки.
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция НовыеПараметрыПроверкиПодписи() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИННДоверителя", "");
	Параметры.Вставить("СвойстваПодписи");
	Параметры.Вставить("СведенияМЧД");
	Параметры.Вставить("ПроверкаОператором");
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь); 
	Параметры.Вставить("ДанныеДляПроверки", Неопределено);
	Параметры.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает новый результат проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ПроверкаВыполнена - Булево
//  * ТребуетсяДоверенность - Булево
//  * Доверенность - Неопределено,
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * ДатаПроверки - Дата
//  * ПодписьВерна - Булево
//  * ПротоколПроверки - Неопределено
//					   - См. НовыйПротоколПроверкиПодписи
//	* ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыйРезультатПроверкиПодписи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаВыполнена", Ложь);
	Результат.Вставить("ТребуетсяДоверенность", Ложь);
	Результат.Вставить("Доверенность", Неопределено);
	Результат.Вставить("ДатаПроверки", '00010101');
	Результат.Вставить("ПодписьВерна", Ложь);
	Результат.Вставить("ПротоколПроверки", Неопределено);
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает новый протокол проверки МЧД оператором.
// 
// Возвращаемое значение:
//  Структура:
// * ДоверенностьДействительна - Булево
// * ДоверенностьДействительнаОшибка - Строка
Функция НовыйПротоколПроверкиОператором() Экспорт
	Протокол = Новый Структура;
	Протокол.Вставить("ДоверенностьДействительна", Ложь);
	Протокол.Вставить("ДоверенностьДействительнаОшибка", "");
	Возврат Протокол;
КонецФункции

// Возвращает результат проверки подписей файла сообщения электронного документа по МЧД.
// 
// Параметры:
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиПодписи
Функция ПроверитьПодпись(ПараметрыПроверки) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписи();
	Результат.ПроверкаВыполнена = Истина;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ПараметрыПроверки.ТребуетсяПроверкаМЧДНаКлиенте;
	
	СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
	ПротоколПроверки = НовыйПротоколПроверкиПодписи();
	
	ПроверкаПодписи = ПротоколПроверки.ПроверкаПодписиДокумента;
	ПроверкаПодписи.Выполнено = Истина;
	ПроверкаПодписи.ДатаПроверки = СвойстваПодписи.ДатаПроверкиПодписи;
	ПроверкаПодписи.Успех = СвойстваПодписи.ПодписьВерна;
	Если Не СвойстваПодписи.ПодписьВерна Тогда
		ПроверкаПодписи.Ошибка = СвойстваПодписи.Комментарий;
	КонецЕсли;
	
	ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
	
	ИННПредставителя = "";
	Если ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(СертификатКриптографии);
		СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(СертификатКриптографии);
	
		Результат.ТребуетсяДоверенность = ТребуетсяМашиночитаемаяДоверенность(
			ПараметрыПроверки.ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.СведенияМЧД) Тогда
		Результат.ПроверкаВыполнена = Ложь;
		ПроверкаДоверенности.Выполнена = Истина;
		ПроверкаДоверенности.ОшибкаВыполнения = ПараметрыПроверки.ТекстОшибки;
	ИначеЕсли Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			СвойстваПодписи.ДатаПодписи);
		
		ПроверкаДоверенности.Выполнена = Ложь;
		ПроверкаДоверенности.ОшибкаВыполнения = ПараметрыПроверки.ТекстОшибки;
	Иначе
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			СвойстваПодписи.ДатаПодписи);
	КонецЕсли;
	
	Результат.ПодписьВерна = ПроверкаПодписи.Успех И ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД);
	
	Результат.ПротоколПроверки = ПротоколПроверки;
	Результат.ДатаПроверки = ТекущаяДатаСеанса();
	
	Возврат Результат;
	
КонецФункции

// Записать результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
//  РезультатПроверки - См. ПроверитьПодпись
Процедура ЗаписатьРезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи, РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ПроверкаВыполнена И Не РезультатПроверки.ТребуетсяДоверенность Тогда
		ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи);
		ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
		Возврат;
	КонецЕсли;
	
	ПротоколПроверкиJSON = ОбщегоНазначенияБЭД.JSONСтрока(РезультатПроверки.ПротоколПроверки);
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	МенеджерЗаписи.Доверенность = РезультатПроверки.Доверенность;
	МенеджерЗаписи.ПроверкаВыполнена = РезультатПроверки.ПроверкаВыполнена;
	МенеджерЗаписи.ДатаПроверки = РезультатПроверки.ДатаПроверки;
	МенеджерЗаписи.ПодписьВерна = РезультатПроверки.ПодписьВерна;
	Если (ЗначениеЗаполнено(РезультатПроверки.Доверенность) И РезультатПроверки.ПроверкаВыполнена)
		ИЛИ РезультатПроверки.ПротоколПроверки.ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		МенеджерЗаписи.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколПроверкиJSON, Новый СжатиеДанных(9));
	Иначе
		МенеджерЗаписи.ПротоколПроверки = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
	
КонецПроцедуры

// Добавляет подпись в очередь на проверку по доверенности.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ВключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает результаты проверок подписей по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешиПодписей - Массив из см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - См. КриптографияБЭД.ХешПодписи
//  * Значение - См. НовыйРезультатПроверкиПодписи
Функция РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи,
		|	ЭлектронныеПодписиПоМЧД.Доверенность,
		|	ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена,
		|	ЭлектронныеПодписиПоМЧД.ДатаПроверки,
		|	ЭлектронныеПодписиПоМЧД.ПодписьВерна,
		|	ЭлектронныеПодписиПоМЧД.ПротоколПроверки
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭлектронныеПодписиПоМЧД.ХешПодписи В (&ХешиПодписей)";
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	Запрос.УстановитьПараметр("ХешиПодписей", ХешиПодписей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатПроверки = НовыйРезультатПроверкиПодписи();
		РезультатПроверки.Доверенность = Выборка.Доверенность;
		РезультатПроверки.ДатаПроверки = Выборка.ДатаПроверки;
		РезультатПроверки.ПодписьВерна = Выборка.ПодписьВерна;
		РезультатПроверки.ПроверкаВыполнена = Выборка.ПроверкаВыполнена;
		
		ПротоколПроверкиJSON = Выборка.ПротоколПроверки.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
			РезультатПроверки.ПротоколПроверки = ПротоколПроверки;
		КонецЕсли;
		
		РезультатыПроверок.Вставить(Выборка.ХешПодписи, РезультатПроверки);
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Возвращает результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  - Неопределено - если для подписи не требуется проверка по МЧД
//  - См. НовыйРезультатПроверкиПодписи
Функция РезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	ХешиПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ХешПодписи);
	РезультатыПроверок = РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей);
	Возврат РезультатыПроверок[ХешПодписи];
	
КонецФункции

#КонецОбласти

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_5

#Область МашиночитаемыеДоверенности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.9.34";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("42b6ac9c-600e-4a65-a86a-d2c54413dc1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "МашиночитаемыеДоверенности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление машиночитаемых доверенностей'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область ПравилаПроверкиПолномочий_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаПроверкиПолномочийМЧД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.9.34";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6a4332b4-de7b-497a-abcf-5b1008f3c4d7");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"Справочники.ПравилаПроверкиПолномочийМЧД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление правил проверки полномочий МЧД'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МашиночитаемыеДоверенности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область МашиночитаемыеДоверенности_ВключитьИспользованиеРеестраДоверенностейФНСЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.5.9";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ВключитьИспользованиеРеестраДоверенностейФНСЭДО";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a711cb1-24ef-4a1d-aa6b-c787fbcf178d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий =
		НСтр("ru = '1С:Обмен с контрагентами: включение использования реестра доверенностей ФНС ЭДО'");
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииПереименованийОбъектовМетаданных
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ДобавлениеИзменениеМашиночитаемыхДоверенностей",
		"Роль.ДобавлениеИзменениеМЧДОрганизацийЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ЧтениеМашиночитаемыхДоверенностей",
		"Роль.ЧтениеМЧДЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
КонецПроцедуры

// Выгружает данные доверенности в zip архив, в составе которого содержатся xml файл доверенности, подпись
// и файл визуализации.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура - Выгрузить данные доверенности:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево - Истина, если выгрузить данные не удалось.
// * ТекстОшибки - Строка - заполнено, если свойство Ошибка = Истина.
Функция ВыгрузитьДанныеДоверенности(Ссылка) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ЭлектроннаяПодпись, XMLфайлМЧД, Подписана");
	
	Если НЕ ЗначенияРеквизитов.Подписана Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Подпись = ЗначенияРеквизитов.ЭлектроннаяПодпись.Получить();
	Если Подпись = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ДвоичныеДанныеДоверенности = ЗначенияРеквизитов.XMLфайлМЧД.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
		
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатФормирования = ТабличныйДокументМЧД(ДвоичныеДанныеДоверенности);
	
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента;
	Если ТабличныйДокумент <> Неопределено Тогда
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
	
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Возвращает данные доверенности в виде строки XML.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - данные доверенности в виде строки XML.
Функция ВыгрузитьXML(Ссылка) Экспорт
	
	ХранилищеДанныхДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД");
	ДвоичныеДанныеДоверенности = ХранилищеДанныхДоверенности.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Поток = ДвоичныеДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток);
	
	СтрокаXML = ЧтениеТекста.Прочитать();
	
	ЧтениеТекста.Закрыть();
	Поток.Закрыть();
	
	Если СтрокаXML = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

// Возвращает табличный документ МЧД.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные.
//  ЭтоМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - Неопределено, ТабличныйДокумент -  табличный документ МЧД
//   * Успех - Булево - Табличный документ сформирован
Функция ТабличныйДокументМЧД(ДвоичныеДанные, ЭтоМЧДКонтрагента = Ложь) Экспорт

	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", Неопределено);
	РезультатФормирования.Вставить("Успех", Ложь);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ТекстСообщения = НСтр(
				"ru = 'Ошибка формирования табличного документа МЧД'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат РезультатФормирования;	
	КонецЕсли;				
	
	РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанные);
	Если НЕ РезультатЧтения.Успех Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	СтруктураДанных = РезультатЧтения.ДанныеМЧД;
	
	ДоверительФЛ_ФИО = "";
	ПредставительФЛ_ФИО = "";
	ДоверительФЛ_Удостоверение = "";
	ПредставительФЛ_Удостоверение = "";
	
	ЭтоПередоверие = ЗначениеЗаполнено(
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "НомерРодительскойДоверенности", ""));

	ЭтоДоверительЮрЛицо = СтруктураДанных.ТипОрганизации = "ЮЛ" ИЛИ СтруктураДанных.ТипОрганизации = "ИО";
	
	Для каждого Строка Из СтруктураДанных.ФИО Цикл
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		ИначеЕсли Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук
			Или Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ Тогда
			ДоверительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Строка Из СтруктураДанных.УдостоверенияЛичности Цикл
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_Удостоверение = ПолучитьПредставлениеУдостоверение(Строка);
		ИначеЕсли Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ Тогда
			ДоверительФЛ_Удостоверение = ПолучитьПредставлениеУдостоверение(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ИмяСправочника = ?(ЭтоМЧДКонтрагента, "Контрагенты", "Организации");
	
	Доверитель = Неопределено;
	СведенияДоверителя = Новый Структура("ИНН", 
		?(ЭтоДоверительЮрЛицо, СтруктураДанных.ДоверительЮЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
	СведенияПодписанта = Новый Структура("ИНН",
		?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Доверитель, , СведенияДоверителя);
	Подписант = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияПодписанта);
	
	СведенияПредставителя = Новый Структура("ИНН", СтруктураДанных.ПредставительФЛ_ИНН);
	ПредставительФЛ = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияПредставителя);
	
	ПредставительЮЛ = Неопределено;
	СведенияПредставителяЮЛ = Новый Структура("ИНН", СтруктураДанных.ПредставительЮЛ_ИНН);
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ПредставительЮЛ, , СведенияПредставителяЮЛ);
	
	СтруктураДанных.Вставить("ЗаголовокДолжность",
		?(ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Должность), НСтр("ru = 'Должность'"), ""));
	СтруктураДанных.Вставить("Должность", СтруктураДанных.ЛицоБезДовФЛ_Должность);
	СтруктураДанных.Вставить("ДоверительФИО", ДоверительФЛ_ФИО);
	СтруктураДанных.Вставить("ПредставительФИО", ПредставительФЛ_ФИО);
	СтруктураДанных.Вставить("ДоверительИНН", 
		?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
	СтруктураДанных.Вставить("ДоверительСНИЛС", 
		?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_СНИЛС, СтруктураДанных.ДоверительФЛ_СНИЛС));
	
	СтруктураДанных.Вставить("Подписант", Подписант);
	СтруктураДанных.Вставить("Доверитель", Доверитель);
	СтруктураДанных.Вставить("ПредставительФЛ", ПредставительФЛ);
	СтруктураДанных.Вставить("ПредставительЮЛ", ПредставительЮЛ);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("КарточкаМЧД_%1", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьШапкаПередоверие = Макет.ПолучитьОбласть("ОбластьШапкаПередоверие");
	
	ОбластьЗаголовокСведенияДоверителя = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияДоверителя");
	ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия");
	ОбластьЗаголовокСведенияОПредставителе = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителе");
	ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия");
	
	ОбластьСведенияОбОрганизацииДоверителя = Макет.ПолучитьОбласть("ОбластьСведенияОбОрганизацииДоверителя");
	ОбластьСведенияОДоверителеИП = Макет.ПолучитьОбласть("ОбластьСведенияОДоверителеИП");
	ОбластьСведенияОПодписанте = Макет.ПолучитьОбласть("ОбластьСведенияОПодписанте");
	ОбластьСведенияОДоверенномЛице = Макет.ПолучитьОбласть("ОбластьСведенияОДоверенномЛице");
	ОбластьСведенияОПредставителеИП = Макет.ПолучитьОбласть("ОбластьСведенияОПредставителеИП");
	
	ОбластьПередовериеДоверительЮлЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительЮлЛицо");
	ОбластьПередовериеДоверительФизЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительФизЛицо");
	ОбластьПередовериеДоверительИП = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительИП");
	ОбластьПередовериеПолучательПолномочийФизЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательПолномочийФизЛицо");
	ОбластьПередовериеПолучательЮлЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательЮлЛицо");
	ОбластьПередовериеПолучательИП = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательИП");
	ОбластьПередовериеДоверительФизЛицоЮЛ = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительФизЛицоЮЛ");
	
	ОбластьЗаголовокПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПолномочия");
	ОбластьПереченьПолномочий = Макет.ПолучитьОбласть("ОбластьПереченьПолномочий");
	ОбластьПредставительОрганизация = Макет.ПолучитьОбласть("ОбластьПредставительОрганизация");
	ОбластьБезПраваПередоверия = Макет.ПолучитьОбласть("ОбластьБезПраваПередоверия");
	ОбластьСПравомПередоверия = Макет.ПолучитьОбласть("ОбластьСПравомПередоверия");
	ОбластьОднократногоПередоверия = Макет.ПолучитьОбласть("ОбластьОднократногоПередоверия");
	
	ОбластьОтступ = Макет.ПолучитьОбласть("ОбластьОтступ");
	ОбластьОтступЗаполнение = Макет.ПолучитьОбласть("ОбластьОтступЗаполнение");
	ОбластьДокументУдостоверяющийЛичность = Макет.ПолучитьОбласть("ОбластьДокументУдостоверяющийЛичность");
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ОбластьШапка.Параметры.Заполнить(СтруктураДанных);
	ОбластьШапкаПередоверие.Параметры.Заполнить(СтруктураДанных);
	
	ОбластьСведенияОбОрганизацииДоверителя.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОДоверителеИП.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОПодписанте.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОПредставителеИП.Параметры.Заполнить(СтруктураДанных);
	ОбластьПредставительОрганизация.Параметры.Заполнить(СтруктураДанных);
	
	ОбластьПередовериеДоверительЮлЛицо.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеДоверительИП.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеДоверительФизЛицо.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеПолучательПолномочийФизЛицо.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеПолучательЮлЛицо.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеПолучательИП.Параметры.Заполнить(СтруктураДанных);
	ОбластьПередовериеДоверительФизЛицоЮЛ.Параметры.Заполнить(СтруктураДанных);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ЭтоПередоверие Тогда
		
		ТабличныйДокумент.Вывести(ОбластьШапкаПередоверие);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия);
		
		Если (СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
				И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ЮЛ")
			Или (СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
				И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ИО") Тогда
			ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительЮлЛицо);
			ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительФизЛицоЮЛ);
		ИначеЕсли СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
				И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ИП" Тогда
			ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительИП);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительФизЛицо);
		КонецЕсли;
		
		Если Не ЭтоДоверительЮрЛицо И ЗначениеЗаполнено(ДоверительФЛ_Удостоверение) Тогда
			ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность = 
				ДоверительФЛ_Удостоверение;
			ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия);
		
		Если (СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
				И СтруктураДанных.ТипУполномоченногоПредставителя = "ЮЛ")
			Или (СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
				И СтруктураДанных.ТипУполномоченногоПредставителя = "ИО") Тогда
			ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательЮлЛицо);
			ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательПолномочийФизЛицо);
		ИначеЕсли СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
			И СтруктураДанных.ТипУполномоченногоПредставителя = "ИП" Тогда
			ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательИП);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательПолномочийФизЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставительФЛ_Удостоверение) Тогда
			ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность =
				ПредставительФЛ_Удостоверение;
			ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияДоверителя);
		
		Если ЭтоДоверительЮрЛицо Тогда
			ТабличныйДокумент.Вывести(ОбластьСведенияОбОрганизацииДоверителя);
			ТабличныйДокумент.Вывести(ОбластьСведенияОПодписанте);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьСведенияОДоверителеИП);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОтступ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителе);
		
		Если (СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
				И СтруктураДанных.ТипУполномоченногоПредставителя = "ЮЛ")
			Или (СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
				И СтруктураДанных.ТипУполномоченногоПредставителя = "ИО") Тогда
			ТабличныйДокумент.Вывести(ОбластьПредставительОрганизация);
			ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
		ИначеЕсли СтруктураДанных.Свойство("ТипУполномоченногоПредставителя")
			И СтруктураДанных.ТипУполномоченногоПредставителя = "ИП" Тогда
			ТабличныйДокумент.Вывести(ОбластьСведенияОПредставителеИП);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставительФЛ_Удостоверение) Тогда
			ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность =
				ПредставительФЛ_Удостоверение;
			ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
		КонецЕсли;
		
	КонецЕсли;
	
	Полномочия = ПолномочияДоверенности(СтруктураДанных);
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокПолномочия);
	Для Каждого СтрокаПолномочий Из Полномочия Цикл
		ОбластьПереченьПолномочий.Параметры.ПереченьПолномочий = СтрокаПолномочий;
		ТабличныйДокумент.Вывести(ОбластьПереченьПолномочий);
	КонецЦикла;
	ТабличныйДокумент.Вывести(ОбластьОтступЗаполнение);
	
	Если СтруктураДанных.Свойство("ТипПередоверия") Тогда
		Если СтруктураДанных.ТипПередоверия = "1" Тогда
			ТабличныйДокумент.Вывести(ОбластьОднократногоПередоверия);
		ИначеЕсли СтруктураДанных.ТипПередоверия = "3" Тогда
			ТабличныйДокумент.Вывести(ОбластьСПравомПередоверия);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьБезПраваПередоверия);
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	РезультатФормирования.ПредставлениеДокумента = ТабличныйДокумент;
	РезультатФормирования.Успех = ТабличныйДокумент <> Неопределено;
	
	Возврат РезультатФормирования;
	
КонецФункции

#Область XDTO

// Возвращает объект XDTO, прочитанный из данных xml файла машиночитаемой доверенности.
// Вызывает исключение, если не удалось.
//
// Параметры:
//  ДанныеXML - ДвоичныеДанные - Двоичные данные xml файла машиночитаемой доверенности.
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ДанныеМЧД - ОбъектXDTO, Неопределено - в случае неудачного чтения данных - Неопределено
//  * ТекстОшибки - Строка
//
Функция ПрочитатьДанныеXML(Знач ДанныеXML) Экспорт
	
	Результат = Новый Структура("Успех, ДанныеМЧД, ТекстОшибки", Ложь, Неопределено, "");
	
	ИмяТипа = "Файл";
	ПространствоИмен = "";
	ВидОперации = НСтр("ru = 'Чтение данных машиночитаемой доверенности.'");
	
	Попытка
		
		ПространствоИмен = ВерсияФорматаФайлаМЧД(ДанныеXML);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки =
			НСтр("ru = 'Не удалось прочитать данные доверенности. Подробности в журнале регистрации'");
		Возврат Результат;
		
	КонецПопытки;
	
	Если ПространствоИмен = ФорматМЧД_2022()
		Или ПространствоИмен = ФорматМЧД_2022_Версия_002() Тогда
		
		ИмяТипа = "Доверенность";
		
	ИначеЕсли ПространствоИмен = ФорматМЧД_b2g() Тогда
		
		ТекстОшибки = ТекстОшибкиЗагрузкиДоверенности_B2G();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	Кодировка = ОбщегоНазначенияБЭД.КодировкаИзОбъявленияXML(ДанныеXML); // для поддержки устаревших версий МЧД
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "windows-1251";
	КонецЕсли;
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен, Кодировка);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, ИмяТипа, Кодировка);
	Результат.ДанныеМЧД = Объект;
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает пустую структуру данных доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * ИННДоверителя - Строка
Функция НовыеДанныеДоверенности() Экспорт
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителя", "");
	Возврат ДанныеДоверенности;
КонецФункции

// Дополняет массив номеров МЧД номерами, пришедшими в контейнере сообщения
// 
// Параметры:
//  НомераМЧД - Массив из Строка
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - Строка
Процедура ДополнитьНомерамиДоверенностейСообщений(НомераМЧД, ФайлСообщения, ХешПодписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МашиночитаемыеДоверенностиСообщений.Доверенность.НомерДоверенности КАК НомерДоверенности
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиСообщений КАК МашиночитаемыеДоверенностиСообщений
		|ГДЕ
		|	МашиночитаемыеДоверенностиСообщений.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И МашиночитаемыеДоверенностиСообщений.ХешПодписи = &ХешПодписи
		|	И МашиночитаемыеДоверенностиСообщений.Доверенность <> ЗНАЧЕНИЕ(Справочник.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ФайлСообщения);
	Запрос.УстановитьПараметр("ХешПодписи", ХешПодписи);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НомераМЧД.Найти(Выборка.НомерДоверенности) = Неопределено Тогда
			НомераМЧД.Добавить(Выборка.НомерДоверенности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД контрагента из ТК.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  Доверенности - см. ТранспортныеКонтейнерыЭДО.ПрочитатьКарточкуМЧД
Процедура ДобавитьДоверенностиСообщений(ПодписанныйОбъект, Доверенности) Экспорт
	
	Если Не ЗначениеЗаполнено(Доверенности) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Доверенность Из Доверенности Цикл

			ДанныеДоверенности = Доверенность.Значение;
			МенеджерЗаписи = РегистрыСведений.МашиночитаемыеДоверенностиСообщений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
			МенеджерЗаписи.ХешПодписи = Доверенность.Ключ;

			Если ДанныеДоверенности.ЭтоФайловаяДоверенность Тогда

				Попытка
					Результат = ПрочитатьДанныеXML(ДанныеДоверенности.Доверенность.ДвоичныеДанные);
				Исключение

					ШаблонОшибки = НСтр(
						"ru = 'Ошибка при чтении файла доверенности: файл %1 не соответствует формату ФНС.'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ДанныеДоверенности.Доверенность.ИмяФайла);
					ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Запись МЧД сообщений ЭДО'"),
						ПодробныйТекстОшибки, ТекстОшибки);
					ВызватьИсключение;

				КонецПопытки;
				
				Если НЕ Результат.Успех Тогда
					ВызватьИсключение Результат.ТекстОшибки;
				КонецЕсли;

				МенеджерЗаписи.ДанныеДоверенности = Новый ХранилищеЗначения(ДанныеДоверенности.Доверенность.ДвоичныеДанные,
					Новый СжатиеДанных(9));
				МенеджерЗаписи.ДанныеПодписи = Новый ХранилищеЗначения(ДанныеДоверенности.Подпись.ДвоичныеДанные,
					Новый СжатиеДанных(9));

				ФайлыМЧД = Новый Структура("ДанныеМЧД, ДанныеПодписи", ДанныеДоверенности.Доверенность.ДвоичныеДанные,
					ДанныеДоверенности.Подпись.ДвоичныеДанные);
				Результат = Справочники.МашиночитаемыеДоверенностиКонтрагентов.ЗагрузитьМЧДИзФайла(ФайлыМЧД);
				МенеджерЗаписи.Доверенность = Результат.МЧД;

			Иначе

				МенеджерЗаписи.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
				МенеджерЗаписи.ДоверительИНН = ДанныеДоверенности.ДоверительИНН;
				МенеджерЗаписи.СсылкаНаРеестр = ДанныеДоверенности.СсылкаНаРеестр;

				ДанныеМЧД = НовыеДанныеДоверенности();
				ДанныеМЧД.НомерДоверенности = МенеджерЗаписи.НомерДоверенности;
				ДанныеМЧД.ИННДоверителя = МенеджерЗаписи.ДоверительИНН;

				Результат = Справочники.МашиночитаемыеДоверенностиКонтрагентов.НайтиСоздатьМЧД(ДанныеМЧД);
				Если Не Результат.Ошибка Тогда
					МенеджерЗаписи.Доверенность = Результат.Ссылка;
				КонецЕсли;

			КонецЕсли;

			УстановитьПривилегированныйРежим(Истина);
			МенеджерЗаписи.Записать();
			УстановитьПривилегированныйРежим(Ложь);

		КонецЦикла;
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Запись МЧД сообщений ЭДО.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки,
			КраткоеПредставлениеОшибки,, ПодписанныйОбъект);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД контрагента.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  
Процедура ДобавитьДоверенностьКонтрагента(ПодписанныйОбъект, НомерДоверенности, ИННДоверителя) Экспорт
	
	ДанныеМЧД = НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = НомерДоверенности;
	ДанныеМЧД.ИННДоверителя = ИННДоверителя;
	Результат = Справочники.МашиночитаемыеДоверенностиКонтрагентов.НайтиСоздатьМЧД(ДанныеМЧД);
	Если Результат.Ошибка Тогда
		ИмяСобытия = НСтр("ru = 'Ошибка записи МЧД контрагента'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
	Иначе
		РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, Результат.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД организации.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД организации
//  
Процедура ДобавитьДоверенностьОрганизации(ПодписанныйОбъект, МЧД) Экспорт
	РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, МЧД);
КонецПроцедуры

// Записывает результат проверки МЧД в информационную базу.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект.
//  Отпечаток - Строка
//  ДоверенностьВерна - Булево
//
Процедура ЗаписатьРезультатПроверкиМЧД(ПодписанныйОбъект, Отпечаток, ДоверенностьВерна) Экспорт
	
	Если ДоверенностьВерна <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.РезультатыПроверкиМЧДОператором.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДоверенностьВерна = ДоверенностьВерна;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для отбора машиночитаемых доверенностей.
// 
// Возвращаемое значение:
//  Структура:
//   * Доверитель - ОпределяемыйТип.Организация - Организация предприятия
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования, СертификатКриптографии - Сертификат
//                  доверенного лица.
// 
Функция НовыйОтборМЧД() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Доверитель", Неопределено);
	Отбор.Вставить("Сертификат", Неопределено);
	
	Возврат Отбор;
	
КонецФункции

// Возвращает массив ссылок МЧД 
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД 
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция ПолучитьДоверенностиОрганизации(Отбор) Экспорт
	
	Доверитель = Отбор.Доверитель;
	Сертификат = Отбор.Сертификат;
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	КонецЕсли;
	
	ПредставительИНН = СвойстваСубъектаСертификата.ИНН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
	|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
	|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
	|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
	|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены КАК ПолномочияОграничены
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Организация = &Организация
	|	И МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН = &ПредставительИНН
	|	И НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления
	|	И МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС В (&СтатусВРеестреФНС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания,
	|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС,
	|	МашиночитаемыеДоверенностиОрганизаций.Верна,
	|	МашиночитаемыеДоверенностиОрганизаций.Отозвана,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва,
	|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Организация = &Организация
	|	И МашиночитаемыеДоверенностиОрганизаций.ПредставительЮЛ_ИНН = &ПредставительИНН
	|	И НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления
	|	И МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС В (&СтатусВРеестреФНС)";
	
	Запрос.УстановитьПараметр("Организация", Доверитель);
	Запрос.УстановитьПараметр("СтатусВРеестреФНС", СтатусыДействительнойДоверенности());
	Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);  
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);
		
		Если ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ТекущаяДатаСеанса()) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает ссылку на последнюю выданную МЧД. Если нет действующих доверенностей, то возвращает пустую ссылку.
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
//
// Возвращаемое значение:
//  Структура:
//  * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//    ** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании
//
Функция ПолучитьПоследнююВыданнуюДоверенностьОрганизации(Отбор, ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура("Доверенность, ОшибкиПроверкиПолномочий",
		Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка(), Новый Соответствие());
	
	ОшибкиПроверкиПолномочий = Новый Соответствие();
	
	Доверенности = ПолучитьДоверенностиОрганизации(Отбор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены КАК ПолномочияОграничены,
	|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
	|	МашиночитаемыеДоверенностиОрганизаций.Представление КАК Представление
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В (&Доверенности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ПолномочияОграничены Тогда
			
			Результат.Доверенность = Выборка.Ссылка;
			Возврат Результат;
			
		Иначе
			
			ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(Выборка.Ссылка);
			
			Если НЕ ПравилоНастроено(ПравилоПроверки) Тогда
				
				Ошибка = НоваяОшибкаПроверкиПолномочийПриПодписании();
				Ошибка.Доверенность = Выборка.Ссылка;
				Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
				Ошибка.ТекстОшибки = ТекстОшибкиНеНастроенаАвтопроверка();
				ОшибкиПроверкиПолномочий.Вставить(Выборка.Ссылка, Ошибка);
				
			Иначе
				
				РезультатПроверки = ПроверитьПолномочияДоверенности(Выборка.Ссылка, ЭлектронныйДокумент);
			
				Если РезультатПроверки.Успех Тогда
					
					Результат.Доверенность = Выборка.Ссылка;
					Возврат Результат;
					
				Иначе
					
					Ошибка = НоваяОшибкаПроверкиПолномочийПриПодписании();
					Ошибка.Доверенность = Выборка.Ссылка;
					Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
					Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
					ОшибкиПроверкиПолномочий.Вставить(Выборка.Ссылка, Ошибка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		Результат.ОшибкиПроверкиПолномочий = ОшибкиПроверкиПолномочий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить номера доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  КлючИЗначение:
//      * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - номер доверенности
Функция ПолучитьНомераДоверенностей(Доверенности) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Доверенности, "НомерДоверенности");
	
КонецФункции

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеМЧД - см. НовыеДанныеМЧД, Неопределено - Данные доверенности
//
Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено) Экспорт
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеМЧД", Ложь, "", Неопределено);

	ДвоичныеДанныеМЧД = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеМЧД = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанныеМЧД = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанныеМЧД = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;

	ВерсияФормата = ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	
	Если ВерсияФормата = ФорматМЧД_2022() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные, ЭтоДоверенностьОрганизации);
		
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.Успех = Истина;
		Результат.ДанныеМЧД = РезультатЧтения.ДанныеМЧД;
		Возврат Результат;
		
	ИначеЕсли  ВерсияФормата = ПилотныйФорматМЧД() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные);
		
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.Успех = Истина;
		Результат.ДанныеМЧД = РезультатЧтения.ДанныеМЧД;
		Возврат Результат;
		
	ИначеЕсли ВерсияФормата = ФорматМЧД_2022_Версия_002() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ВходящиеДанные, ЭтоДоверенностьОрганизации);
		
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.Успех = Истина;
		Результат.ДанныеМЧД = РезультатЧтения.ДанныеМЧД;
		Возврат Результат
		
	ИначеЕсли ВерсияФормата = ФорматМЧД_b2g() Тогда
		
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = ТекстОшибкиЗагрузкиДоверенности_B2G();
		Возврат Результат
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительна(Ссылка, ДатаПроверки) Экспорт
	
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	РезультатПроверки = ДоверенностиДействительны(Доверенности, ДатаПроверки);
	Возврат РезультатПроверки[Ссылка];

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает значение передоверия из представления реестра ФНС
//
// Параметры:
//  ЗначениеПередоверия - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция ПередовериеВозможно(ЗначениеПередоверия)
	
	ПередовериеВозможно = Ложь;
	
	Если ЗначениеПередоверия = "3" Или ЗначениеПередоверия = "1"  Тогда
		ПередовериеВозможно = Истина;
	КонецЕсли;
	
	Возврат ПередовериеВозможно;
	
КонецФункции

// Возвращает идентификатор пространства имен МЧД b2g
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_b2g()
	Возврат "ON_DOVEL";
КонецФункции

Функция ТекстОшибкиЗагрузкиДоверенности_B2G()
	Возврат НСтр("ru = 'Загружаемая доверенность, предназначена для передачи в адрес налоговых органов.
						|Такая доверенность не может быть использована при обмене с контрагентами.
						|Выберите для загрузки доверенность подходящего назначения.'");
КонецФункции

// Получает МЧД контрагента по номеру доверенности
//
// Параметры:
//  НомерДоверенности - Строка
//
// Возвращаемое значение:
//  СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
Функция ПолучитьМЧДКонтрагента(НомерДоверенности) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Доверенность
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности = &НомерДоверенности";
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Доверенность;
	
КонецФункции

// Получает родительские данные доверенности
//
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
//  НомераМЧД - Массив из строка, Неопределено
//  ЭтоМЧДКонтрагента - Булево
//
// Возвращаемое значение:
//  См. НовыеСведенияМЧД
//
Функция ПолучитьРодительскиеДанныеДоверенности(НомерДоверенности,
	ИННДоверителя, НомераМЧД = Неопределено, ЭтоМЧДКонтрагента = Ложь)
	
	Если НомераМЧД = Неопределено Тогда
		НомераМЧД = Новый Массив();
	КонецЕсли;
	
	НомераМЧД.Добавить(НомерДоверенности);
	
	СведенияДоверенности = МашиночитаемыеДоверенностиПовтИсп.ПолучитьСведенияДоверенностиНаСервереМЧД(
		НомерДоверенности, ИННДоверителя);
	
	СведенияМЧД = НовыеСведенияМЧД();
	СведенияМЧД.НомерДоверенности = НомерДоверенности;
	СведенияМЧД.ИННДоверителя = ИННДоверителя;
	СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		
	Если ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные) Тогда
		
		ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
		ДанныеДляЗагрузки.ДанныеДоверенности = СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки;
		ДанныеДляЗагрузки.ДанныеПодписи = СведенияДоверенности.ПолныеДанные.ДанныеПодписи;
		ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = СведенияДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
		
		ДатаЗагрузкиИзРеестра = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		СтатусДоверенности = 
			МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(
				СведенияДоверенности.ЧастичныеДанные.СтатусДоверенности);
		
		ДополнительныеСведения = Новый Структура(
			"СтатусВРеестреФНС, ДатаЗагрузкиИзРеестра", СтатусДоверенности, ДатаЗагрузкиИзРеестра);
			
		РезультатЗагрузки =
			МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧД(ДанныеДляЗагрузки,
				Ложь, Истина, ЭтоМЧДКонтрагента, ДополнительныеСведения);
			
		ДанныеИзФайлаОбмена = ДанныеИзФайлаОбмена(СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки);
		ДанныеДоверенности = ДанныеИзФайлаОбмена.ДанныеМЧД;
		ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(РезультатЗагрузки.Ссылка);
		ПредставительИНН = "";
		
		Если ДанныеДоверенности.Свойство("ТипУполномоченногоПредставителя") Тогда
			Если ДанныеДоверенности.ТипУполномоченногоПредставителя = "ЮЛ"
				Или ДанныеДоверенности.ТипУполномоченногоПредставителя = "ИО" Тогда
				ПредставительИНН = ДанныеДоверенности.ПредставительЮЛ_ИНН;
			Иначе
				ПредставительИНН = ДанныеДоверенности.ПредставительФЛ_ИНН;
			КонецЕсли;
		ИначеЕсли ДанныеДоверенности.Свойство("ПредставительФЛ_ИНН") 
			И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ИНН) Тогда
			ПредставительИНН = ДанныеДоверенности.ПредставительФЛ_ИНН;
		Иначе
			ПредставительИНН = ДанныеДоверенности.ПредставительЮЛ_ИНН;
		КонецЕсли;
		
		СведенияМЧД.Ссылка = РезультатЗагрузки.Ссылка;
		СведенияМЧД.СтатусВРеестреФНС = СтатусДоверенности;
		СведенияМЧД.ДатаПолученияСведений = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		СведенияМЧД.Верна = Истина;
		СведенияМЧД.ДатаВыдачи = ДанныеДоверенности.ДатаВыдачи;
		СведенияМЧД.ДатаОкончания = ДанныеДоверенности.ДатаОкончания;
		СведенияМЧД.НомерДоверенности = НомерДоверенности;
		СведенияМЧД.НомерРодительскойДоверенности = ДанныеДоверенности.НомерРодительскойДоверенности;
		СведенияМЧД.ИННДоверителя = ИННДоверителя;
		СведенияМЧД.ИННДоверителяРодительскойДоверенности = ДанныеДоверенности.ИННДоверителяРодительскойДоверенности;
		СведенияМЧД.ИННПредставителя = ПредставительИНН;
		СведенияМЧД.Полномочия = ДанныеДоверенности.Полномочия;
		СведенияМЧД.ПравилоПроверки = ПравилоПроверки;
		СведенияМЧД.ТипПередоверия = ДанныеДоверенности.ТипПередоверия;
		СведенияМЧД.Подписана = ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные.ДанныеПодписи)
			И ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки);
		
		ЗаполнитьРеквизитыОтзыва(СведенияМЧД, ДанныеДляЗагрузки);
		
		Если ЗначениеЗаполнено(СведенияМЧД.НомерРодительскойДоверенности)
			И НомераМЧД.Найти(СведенияМЧД.НомерРодительскойДоверенности) = Неопределено Тогда
			СведенияМЧД.РодительскиеДанныеМЧД = ПолучитьРодительскиеДанныеДоверенности(
				СведенияМЧД.НомерРодительскойДоверенности, СведенияМЧД.ИННДоверителяРодительскойДоверенности, НомераМЧД);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияМЧД;
	
КонецФункции

// Получает полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Полные данные доверенности:
//   * ДанныеВыгрузки - ДвоичныеДанные, Неопределено - Данные выгрузки
//   * ДанныеПодписи - ДвоичныеДанные, Неопределено - Данные подписи
//   * ДанныеПодписиЗаявленияНаОтмену - ДвоичныеДанные, Неопределено - Данные подписи заявления на отмену
//   * ДанныеАрхива - ДвоичныеДанные, Неопределено - Данные архива
//   * СтатусПолучения - Строка - Статус получения
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "")
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеПолныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеВыгрузки", Неопределено);
	Результат.Вставить("ДанныеПодписи", Неопределено);
	Результат.Вставить("ДанныеАрхива", Неопределено);
	Результат.Вставить("ДанныеПодписиЗаявленияНаОтмену", Неопределено);
	Результат.Вставить("СтатусПолучения", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус запроса данных доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении данных доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя),
		"/poar-webapp/integration/poa/" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "/" + ИННДоверителя) + "/zip");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Если НРег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		КаталогРаспаковки = "";
		Попытка
			
			Результат.ДанныеАрхива = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
			
			ОбъектЧтение = Новый ЧтениеZipФайла(Результат.ДанныеАрхива.ОткрытьПотокДляЧтения());
			Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда
				КаталогРаспаковки = ПолучитьИмяВременногоФайла();
				КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРаспаковки);
				
				СоздатьКаталог(КаталогРаспаковки);
				Для каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл
					РасширениеЭлемента = НРег(ЭлементАрхива.Расширение);
					ЭтоПрефиксФайловДоверенности = НРег(Лев(ЭлементАрхива.Имя, 4)) = "дов_";
					ЭтоПрефиксФайловЗаявленияНаОтмену = СтрНачинаетсяС(НРег(ЭлементАрхива.Имя), НРег("ЗаявОтм_"));
					ЭтоДоверенность = РасширениеЭлемента = "xml" И ЭтоПрефиксФайловДоверенности;
					ЭтоПодписьДоверенности = ЭтоРасширениеФайлаПодписи(РасширениеЭлемента)
						И ЭтоПрефиксФайловДоверенности;
					ЭтоПодписьЗаявленияНаОтмену = ЭтоРасширениеФайлаПодписи(РасширениеЭлемента)
						И ЭтоПрефиксФайловЗаявленияНаОтмену;
					Если ЭтоДоверенность Или ЭтоПодписьДоверенности Или ЭтоПодписьЗаявленияНаОтмену Тогда
						ОбъектЧтение.Извлечь(ЭлементАрхива, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						ДвоичныеДанные = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						
						Если ЭтоДоверенность Тогда
							Результат.ДанныеВыгрузки = ДвоичныеДанные;
						Иначе
							ДвоичныеДанныеBase64ИзФайла = ДвоичныеДанные;
							ДанныеПодписи = ПолучитьДвоичныеДанныеИзBase64ДвоичныхДанных(ДвоичныеДанныеBase64ИзФайла);
							Если ЭтоПодписьДоверенности Тогда
								Результат.ДанныеПодписи = ДанныеПодписи;
							Иначе
								Результат.ДанныеПодписиЗаявленияНаОтмену = ДанныеПодписи;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбъектЧтение.Закрыть();
		Исключение
			Если ЗначениеЗаполнено(КаталогРаспаковки) Тогда
				ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
			КонецЕсли;
			ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ШаблонОшибкиИзИсключения",
				НСтр("ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД: %1'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецПопытки;
		ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
		
		Если Результат.ДанныеВыгрузки = Неопределено Тогда
			ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ТекстОшибкиПоУмолчанию",
				НСтр("ru = 'Не получены данные доверенности с сервера МЧД'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОшибкиНеНастроенаАвтопроверка()
	Возврат НСтр("ru = 'Не настроены правила проверки полномочий'");
КонецФункции

Функция ТекстПодсказкиСкриптаПроверкиПолномочий() Экспорт
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(НСтр(
		"ru = '<b>Доступные параметры:</b>
		|  <b>Входные:</b>
		|  Параметры.ЭлектронныйДокумент - Ссылка на электронный документ
		|  Параметры.Доверенность - Ссылка на доверенность
		|  <b>Выходные:</b>
		|  Параметры.Результат - Структура с полями: Успех - Булево, ТекстОшибки - Строка|
		|
		|<b>Пример скрипта:</b>
		|Если Параметры.ЭлектронныйДокумент.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		|    Параметры.Результат.Успех = НЕ Параметры.ЭлектронныйДокумент.СуммаДокумента > 1000000;
		|    Если НЕ Параметры.Результат.Успех Тогда
		|        Параметры.Результат.ТекстОшибки = ""Превышена максимально разрешенная доверенностью сумма"";
		|    КонецЕсли;
		|Иначе
		|    Параметры.Результат.ТекстОшибки = ""Не разрешено подписание документов данного вида"";
		|КонецЕсли;'"));
	
КонецФункции

// Проверяет полномочия доверенности по правилам проверки.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПравилоПроверки - Неопределено,
//  				- СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// 
// Возвращаемое значение:
//  Структура:
//  * Выполнено - Булево
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  
Функция ПроверитьПолномочияДоверенности(Доверенность, ЭлектронныйДокумент, ПравилоПроверки = Неопределено)
	
	Результат = Новый Структура("Выполнено, Успех, ТекстОшибки", Ложь, Ложь, "");
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("Доверенность", Доверенность);
	ПараметрыПроверки.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Ответ = Новый Структура("Успех, ТекстОшибки", Ложь, "");
	ПараметрыПроверки.Вставить("Результат", Ответ);
	
	Если ПравилоПроверки = Неопределено Тогда
		ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(Доверенность);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПравилоПроверки) Тогда
		
		ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент);
		Результат.ТекстОшибки = НСтр("ru = 'Проверка полномочий завершилась с ошибкой. Правила настроены некорректно.'");
		Возврат Результат;
		
	КонецЕсли;
	
	Скрипт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоПроверки, "Скрипт");
	
	ТекстПолномочияНеПодтверждены = НСтр("ru = 'Полномочия не подтверждены правилами проверки'");
	
	Если ЗначениеЗаполнено(Скрипт) Тогда
		
		Попытка
			
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Скрипт, ПараметрыПроверки);
			
			Результат.Выполнено = Истина;
			Результат.Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "Успех", Ложь);
			Результат.ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "ТекстОшибки", "");
			
			Если НЕ Результат.Успех Тогда
				
				Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Результат.ТекстОшибки = ТекстПолномочияНеПодтверждены;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Проверка полномочий доверенности.'");
			ШаблонСообщения =
				Нстр("ru = 'Ошибка при выполнении алгоритма проверки полномочий доверенности: %1 для документа: %2'");
			Сообщение = СтрШаблон(ШаблонСообщения, Доверенность, ЭлектронныйДокумент);
			ПодробныйТекстОшибки = Сообщение + Символы.ПС + ТекстОшибки; 
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Сообщение);
			Результат.ТекстОшибки = НСтр("ru = 'Проверка полномочий завершилась с ошибкой.
				|Возможно правила настроены некорректно.'");
			
		КонецПопытки;
		
	Иначе // упрощенная настройка
		
		ТаблицаНастроек = Справочники.ПравилаПроверкиПолномочийМЧД.ТаблицаНастроекОтбора(ПравилоПроверки);
		ТаблицаНастроек.Колонки.Добавить("УсловиеВыполнено");
		ТаблицаНастроек.ЗаполнитьЗначения(Ложь, "УсловиеВыполнено");
		Результат.Выполнено = Истина;
		
		Если ТаблицаНастроек.Количество() > 0 Тогда
			
			МассивПолей = ТаблицаНастроек.ВыгрузитьКолонку("ИмяПоляДанных");
			ПоляСтрокой = СтрСоединить(МассивПолей, ",");
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, ПоляСтрокой);
			
			Для Каждого СтрокаТЗ Из ТаблицаНастроек Цикл
				
				СвойствоДокумента = Неопределено;
				РеквизитыДокумента.Свойство(СтрокаТЗ.ИмяПоляДанных, СвойствоДокумента);
				Список = СтрокаТЗ.Список.Получить();
				
				Если СвойствоДокумента = Неопределено Тогда
					
					ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент, ПравилоПроверки);
					Возврат Результат;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Список) Тогда
					
					Для Каждого ЭлементСписка Из Список Цикл
						
						Если СвойствоДокумента = ЭлементСписка.Значение Тогда
							СтрокаТЗ.УсловиеВыполнено = Истина;
							Продолжить;
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(СтрокаТЗ.НачальноеЗначение) = Тип("Булево") Тогда
					
					СтрокаТЗ.УсловиеВыполнено = СвойствоДокумента = СтрокаТЗ.НачальноеЗначение;
					
				ИначеЕсли ТипЗнч(СтрокаТЗ.НачальноеЗначение) = Тип("Число") Тогда
					
					СтрокаТЗ.УсловиеВыполнено =
						?(СтрокаТЗ.НачальноеЗначение = 0, Истина, СвойствоДокумента >= СтрокаТЗ.НачальноеЗначение)
						И ?(СтрокаТЗ.КонечноеЗначение = 0, Истина, СвойствоДокумента <= СтрокаТЗ.КонечноеЗначение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент, ПравилоПроверки);
			
		КонецЕсли;
		
		СтрокаТЗ = ТаблицаНастроек.Найти(Ложь, "УсловиеВыполнено");
		Результат.Успех = СтрокаТЗ = Неопределено;
		
		Если НЕ Результат.Успех Тогда
			Результат.ТекстОшибки = ТекстПолномочияНеПодтверждены;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие ограниченных полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Булево
//  
Функция ПолномочияОграничены(ДанныеДоверенности = Неопределено, Доверенность = Неопределено) Экспорт
	
	Если ДанныеДоверенности = Неопределено Тогда
		
		ДвоичныеДанныеДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "XMLфайлМЧД").Получить();
		РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанныеДоверенности);
		Если НЕ РезультатЧтения.Успех Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
		
		Если Полномочие.Код = "99" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если МашиночитаемыеДоверенностиКлиентСервер.ЭтоТекстПолныхПолномочий(Полномочие.Описание) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив со строками полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Массив из Строка
//  
Функция ПолномочияДоверенности(ДанныеДоверенности = Неопределено, Доверенность = Неопределено)
	
	Если ДанныеДоверенности = Неопределено Тогда
		
		ДвоичныеДанныеДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "XMLфайлМЧД").Получить();
		РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанныеДоверенности);
		Если НЕ РезультатЧтения.Успех Тогда
			Возврат Новый Массив();
		КонецЕсли;
		ДанныеДоверенности = РезультатЧтения.ДанныеМЧД;
		
	КонецЕсли;
	
	КодыПолномочий = Новый Массив;
	ТекстыПолномочий = Новый Массив;
	
	Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
		
		МассивПолей = Новый Массив;
		
		Для Каждого КлючИЗначение Из Полномочие Цикл
			
			Если КлючИЗначение.Ключ <> "Код" И НЕ ПустаяСтрока(КлючИЗначение.Значение) Тогда
				МассивПолей.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Полномочие.Код) И Полномочие.Код <> "99" Тогда
			
			Если МассивПолей.Количество() = 0 Тогда
				КодыПолномочий.Добавить(Полномочие.Код);
			Иначе
				МассивПолей.Вставить(0, Полномочие.Код);
			КонецЕсли;
				
		КонецЕсли;
		
		Если МассивПолей.Количество() > 0 Тогда
			ТекстыПолномочий.Добавить(СтрСоединить(МассивПолей, "; "));
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиПолномочий = Новый Массив();
	
	Если КодыПолномочий.Количество() > 0 Тогда
		СтрокиПолномочий.Добавить(НСтр("ru = 'Коды полномочий:'") + " " + СтрСоединить(КодыПолномочий, ", "));
	КонецЕсли;
	
	Если ТекстыПолномочий.Количество() > 0 Тогда
		
		Если ТекстыПолномочий.Количество() = 1 Тогда
			СтрокиПолномочий.Добавить(ТекстыПолномочий[0]);
		Иначе
			Для Счетчик = 1 По ТекстыПолномочий.Количество() Цикл
				Индекс = Счетчик-1;
				СтрокаПолномочий = СтрШаблон("%1. %2", Счетчик, ТекстыПолномочий[Индекс]);
				СтрокиПолномочий.Добавить(СтрокаПолномочий);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокиПолномочий;
	
КонецФункции

// Возвращает текстовое представление полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка
//  
Функция ТекстПолномочий(ДанныеДоверенности = Неопределено, Доверенность = Неопределено) Экспорт
	
	СтрокиПолномочий = ПолномочияДоверенности(ДанныеДоверенности, Доверенность);
	Возврат СтрСоединить(СтрокиПолномочий, Символы.ПС);
	
КонецФункции

// Формирует пустую структуру описания полномочия представителя МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	  * Код - Строка
//	  * Описание - Строка
//	  * Содержание - Строка
//	  * Пояснение - Строка
// 
Функция НовыеПолномочияПредставителя() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Код", "");
	Результат.Вставить("Описание", "");
	Результат.Вставить("Содержание", "");
	Результат.Вставить("Пояснение", "");
	
	Возврат Результат;
	
КонецФункции

// Формирует пустую структуру данных удостоверения личности субъекта МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * СерДок - Строка
//  * НомДок - Строка
//  * ДатаДок - Дата
//  * ВыдДок - Строка
//  * ВидДок - Строка
//  * КодВыдДок - Строка
//  * Владелец - ПеречислениеСсылка.СубъектыДоверенности
//  
Функция НовыеДанныеУдостоверенияЛичности()
	
	Результат = Новый Структура;
	Результат.Вставить("СерДок", "");
	Результат.Вставить("НомДок", "");
	Результат.Вставить("ДатаДок", '00010101');
	Результат.Вставить("ВыдДок", "");
	Результат.Вставить("ВидДок", "");
	Результат.Вставить("КодВыдДок", "");
	Результат.Вставить("Владелец", Перечисления.СубъектыДоверенности.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

// Заполняет данные удостоверения личности субъекта МЧД
//
// Параметры:
//  * ДанныеДоверенности - см. НовыеДанныеМЧД
//  * УдостоверениеЛичности - Структура
//  * ТипВладельца - Перечисление.СубъектыДоверенности
//
Процедура ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца)
	
	ДокументИП = НовыеДанныеУдостоверенияЛичности();
	
	ДатаДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ДатаДок", '00010101');
	ВыдДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ВыдДок", "");
	Номер = УдостоверениеЛичности.СерНомДок;
	Серия = "";
	СерияНомерДокумента = СтрРазделить(СокрЛП(УдостоверениеЛичности.СерНомДок), " ", Ложь);
	
	Если СерияНомерДокумента.Количество() > 1 Тогда
		Номер = СерияНомерДокумента[СерияНомерДокумента.Количество() - 1];
		Серия = СокрЛП(СтрЗаменить(УдостоверениеЛичности.СерНомДок, Номер, ""));
	КонецЕсли;
	
	ДокументИП.СерДок = Серия;
	ДокументИП.НомДок = Номер;
	ДокументИП.ДатаДок = ДатаДок;
	ДокументИП.ВыдДок = ВыдДок;
	ДокументИП.ВидДок = УдостоверениеЛичности.КодВидДок;
	ДокументИП.КодВыдДок = УдостоверениеЛичности.КодВыдДок;
	ДокументИП.Владелец = ТипВладельца;
	ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
	
КонецПроцедуры

// Заполняет данные о полномочиях МЧД
//
// Параметры:
//  ДанныеДоверенности - см. НовыеДанныеМЧД
//  Полномочия - СписокXDTO
//
Процедура ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия)
	
	Для Каждого Полномочие Из Полномочия Цикл 
		
		КодПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
		ОписаниеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ТекстПолн", "");
		СодержаниеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "СодержПолн", "");
		ПояснениеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ДопТекстПолн", "");
		
		Если ЗначениеЗаполнено(КодПолномочий) И ЗначениеЗаполнено(СодержаниеПолномочий)
			И Не ЗначениеЗаполнено(ОписаниеПолномочий) Тогда
			ШаблонОписания = ("%1; %2"); 
			ОписаниеПолномочий = СтрШаблон(ШаблонОписания, КодПолномочий, СодержаниеПолномочий);
			КодПолномочий = "";
			СодержаниеПолномочий = "";
		КонецЕсли;
		
		СведенияОПолномочиях = НовыеПолномочияПредставителя();
		СведенияОПолномочиях.Код = КодПолномочий;
		СведенияОПолномочиях.Описание = ОписаниеПолномочий;
		СведенияОПолномочиях.Содержание = СодержаниеПолномочий;
		СведенияОПолномочиях.Пояснение = ПояснениеПолномочий; 
		
		ДанныеДоверенности.Полномочия.Добавить(СведенияОПолномочиях);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует пустую структуру данных субъекта МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	* Фамилия - Строка -
//	* Имя - Строка -
//	* Отчество - Строка -
//	* Владелец - ПеречислениеСсылка.СубъектыДоверенности
// 
Функция НовыеДанныеСубъектаМЧД()
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("Владелец", Перечисления.СубъектыДоверенности.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

// Формирует пустую структуру данных МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	* XMLфайлМЧД - Неопределено
//				 - ХранилищеЗначения
//	* ДатаЗагрузкиИзРеестра - Дата
//	* НомерДоверенности - Строка
//	* ДатаВыдачи - Дата
//	* ДатаОкончания - Дата
//	* СрокДействия - Строка
//	* СведенияОбИнформационнойСистеме - Строка
//	* НомерРодительскойДоверенности - Строка
//	* НомерОсновнойДоверенности - Строка
//	* ИННДоверителяРодительскойДоверенности - Строка
//	* КППДоверителяРодительскойДоверенности - Строка
//	* ВозможноПередоверие - Булево
//	* ТипПередоверия - Строка
//	* ФИО - Массив из см. НовыеДанныеСубъектаМЧД
//	* Полномочия - Массив из см. НовыеПолномочияПредставителя
//	* УдостоверенияЛичности - Массив из см. НовыеДанныеУдостоверенияЛичности
//	* ТипОрганизации - Строка
//	* СовместныеПолномочия - Булево
//	* НесколькоПредставителей - Булево
//	* ДоверительЮЛ_НаимОрг - Строка
//	* ДоверительЮЛ_ИНН - Строка
//	* ДоверительЮЛ_КПП - Строка
//	* ДоверительЮЛ_ОГРН - Строка
//	* ДоверительЮЛ_Адр - Строка
//	* ЛицоБезДовФЛ_ИНН - Строка
//	* ЛицоБезДовФЛ_СНИЛС - Строка
//	* ЛицоБезДовФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ЛицоБезДовФЛ_ДатаРождения - Дата
//	* ЛицоБезДовФЛ_Должность - Строка
//	* ЛицоБезДовФЛ - Неопределено,
//				   - СправочникСсылка
//	* ЛицоБезДовЮЛ_НаимОрг - Строка
//	* ЛицоБезДовЮЛ_ИНН - Строка
//	* ЛицоБезДовЮЛ_КПП - Строка
//	* ЛицоБезДовЮЛ_ОГРН - Строка
//	* ЛицоБезДовЮЛ - Неопределено,
//				   - СправочникСсылка
//	* ДоверительЮЛ_ИностраннаяОрганизация - Булево
//	* ДоверительЮЛ_СтрРег - СправочникСсылка.СтраныМира
//	* ДоверительЮЛ_НаимРегОрг - Строка
//	* ДоверительЮЛ_РегНомер - Строка
//	* ДоверительФЛ_ИНН - Строка
//	* ДоверительФЛ_СНИЛС - Строка
//	* ДоверительФЛ_ДатаРождения - Дата
//	* ДоверительФЛ_МестоРожд - Строка
//	* ДоверительФЛ_Пол - Число - 1-мужской, 2-женский
//	* ДоверительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительЮЛ_НаимОрг - Строка
//	* ПредставительЮЛ_ИНН - Строка
//	* ПредставительЮЛ_КПП - Строка
//	* ПредставительЮЛ_ОГРН - Строка
//	* ПредставительФЛ_ИНН - Строка
//	* ПредставительФЛ_ОГРН - Строка
//	* ПредставительФЛ_СНИЛС - Строка
//	* ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительФЛ_ДатаРождения - Дата
//	* Представитель - Неопределено,
//					- СправочникСсылка
//	* Организация - Неопределено,
//				  - СправочникСсылка
// 
Функция НовыеДанныеМЧД() Экспорт

	ДанныеДоверенности = Новый Структура;

	ДанныеДоверенности.Вставить("XMLфайлМЧД", Неопределено);
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ДатаВыдачи", '00010101');
	ДанныеДоверенности.Вставить("ДатаОкончания", '00010101');
	ДанныеДоверенности.Вставить("СрокДействия", "");
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", "");
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("НомерОсновнойДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("КППДоверителяРодительскойДоверенности", "");
	
	ДанныеДоверенности.Вставить("ВозможноПередоверие", Ложь);
	ДанныеДоверенности.Вставить("ТипПередоверия", "");
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("Полномочия", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");
	ДанныеДоверенности.Вставить("СовместныеПолномочия", Ложь);
	ДанныеДоверенности.Вставить("НесколькоПредставителей", Ложь);

	ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", "");

	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", '00010101');
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", Неопределено);

	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", Неопределено);
	
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Ложь);
	ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", "");

	ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", '00010101');
	ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", 1);
	ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());

	ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", "");
	
	ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", '00010101');
	
	ДанныеДоверенности.Вставить("Представитель", Неопределено);
	ДанныеДоверенности.Вставить("Организация", Неопределено);
		
	Возврат ДанныеДоверенности;
	
КонецФункции

// Доверенности действительны.
// 
// Параметры:
//  Доверенности - Массив Из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//               - Массив Из СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение  - результат проверки:
//   * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//          - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   * Значение - Булево
//
Функция ДоверенностиДействительны(Доверенности, ДатаПроверки)
	
	РезультатПроверки = Новый Соответствие;
	СписокРеквизитов = "ДатаВыдачи, ДатаОкончания, Отозвана, ДатаОтзыва, СтатусВРеестреФНС, Верна";
	РеквизитыДоверенностей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Доверенности, СписокРеквизитов);
	Для Каждого Доверенность Из Доверенности Цикл
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, РеквизитыДоверенностей[Доверенность]);
		РезультатПроверки.Вставить(Доверенность, ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки));
	КонецЦикла;
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает гражданство участника МЧД.
// 
// Параметры:
//  СведенияПоФизическомуЛицу - ОбъектXDTO
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира
//  
Функция ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу)
	
	Гражданство = Справочники.СтраныМира.ПустаяСсылка();
	ПризнакГражданства = СведенияПоФизическомуЛицу.ПрГражд;
	
	Если ПризнакГражданства = "1" Тогда
		
		Гражданство = Справочники.СтраныМира.Россия;
		
	ИначеЕсли ПризнакГражданства = "2" Тогда
		
		КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", "");
		Гражданство = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		
	КонецЕсли;
	
	Возврат Гражданство;
	
КонецФункции

#Область БазовыйФункционалDOM

// Возвращает ДокументDOM, полученный из двоичных данных.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные или адрес временного хранилища
// 
// Возвращаемое значение:
//  ДокументDOM - Возвращаемый документ дом по входящим данным
//
Функция ПодготовитьДокументDOM(ВходящиеДанные)

	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;

	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Возврат ДокументDOM;

КонецФункции

// Возвращает найденные по выражению XPath элементы узла в виде массива
// 
// Параметры:
//  УзелВладелец - ДокументDOM
//  ТекстПоиска - Строка - выражение XPath
// 
// Возвращаемое значение:
//  Массив - Массив с найденными элементами DOM
//
Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)

	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);

	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает представление даты
// 
// Параметры:
//  ПредставлениеДаты - Строка
// 
// Возвращаемое значение:
//  Строка - представление даты
//
Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)

	Результат = ПредставлениеДаты;

	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);

	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент справочника стран мира, найденную по коду
// 
// Параметры:
//  ПредставлениеСтраны - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира, Неопределено - Найденный элемент справочника стран мира
//
Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)

	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		ДанныеОСтране = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПредставлениеСтраны);
		Если ДанныеОСтране <> Неопределено Тогда
			Результат = ДанныеОСтране.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает представление серии и номера документа в виде структуры
// 
// Параметры:
//  ПредставлениеСерияНомер - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Серия - Строка
//  * Номер - Строка
//
Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)

	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");

	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);

	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на физическое лицо по сведениям.
// 
// Параметры:
//  СписокСправочников - Строка - список справочников через запятую
//  ИНН - Строка
//  КПП - Строка
//  СНИЛС - Строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица
//  - Неопределено - если не элемент не найден в ИБ.
//
Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")

	Результат = Неопределено;

	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);

	Если МассивСправочников.Найти("Организации") <> Неопределено
		ИЛИ МассивСправочников.Найти("Контрагенты") <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтруктураПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		
		ИмяСправочника = ?(МассивСправочников.Найти("Организации") <> Неопределено, "Организации", "Контрагенты");
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, , СтруктураПоиска);
		
		Если Результат = Неопределено Тогда
			ИмяСправочника = ?(МассивСправочников.Найти("Контрагенты") <> Неопределено, "Контрагенты", "Организации");
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, , СтруктураПоиска); 
		КонецЕсли;
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		
		СведенияФизлица = Новый Структура;
		СведенияФизлица.Вставить("ИНН", ИНН);
		Результат = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизлица);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
// Параметры:
//  УзелВладелец - Строка
//  ТекстПоиска - Строка
//  ЗначениеПоУмолчанию - Строка
// 
// Возвращаемое значение:
//  - Строка 
//  - Дата
//  - СправочникСсылка
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)

	Результат = ЗначениеПоУмолчанию;

	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);

	Если ВыборкаЭлементов.Количество() = 1 Тогда

		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;

		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		КонецЕсли;

		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// Добавляет сведения об участнике МЧД в коллекцию.
// 
// Параметры:
//  ФИО - ОбъектXDTO
//  ТипУчастника - ПеречислениеСсылка.СубъектыДоверенности 
//  МассивУчастников - Массив из Структура:
//  * Фамилия - Строка
//  * Имя - Строка
//  * Отчество - Строка
//  * Владелец - ПеречислениеСсылка.СубъектыДоверенности
Процедура ДобавитьСведенияОбУчастникеМЧД(ФИО, ТипУчастника, МассивУчастников)
	
	НоваяСтрока = Новый Структура;
	НоваяСтрока.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия", ""));
	НоваяСтрока.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя", ""));
	НоваяСтрока.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество", ""));
	НоваяСтрока.Вставить("Владелец", ТипУчастника);
	МассивУчастников.Добавить(НоваяСтрока);
			
КонецПроцедуры

// Инициализирует свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//	* ДатаВыдачи - Дата
//	* ДатаОкончания - Дата
//	* Отозвана - Булево
//	* ДатаОтзыва - Дата
//	* СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//	* Верна - Булево
//	* ПолномочияОграничены - Булево
//	* ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//
Функция НовыеСвойстваДоверенности() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Свойства.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Свойства.Вставить("СтатусВРеестреФНС",
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	Свойства.Вставить("Верна", Ложь);
	Свойства.Вставить("ПолномочияОграничены", Истина);
	Свойства.Вставить("ПравилоПроверки", Справочники.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка());
	
	Возврат Свойства;
	
КонецФункции

// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеМЧД - См. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеМЧД", Ложь, "", НовыеДанныеМЧД());
	ДанныеДоверенности = Результат.ДанныеМЧД;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	ДанныеXDTO = Неопределено;
	
	Попытка
		
		РезультатЧтения = ПрочитатьДанныеXML(ДвоичныеДанные);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат
		КонецЕсли;
		
		ДанныеXDTO = РезультатЧтения.ДанныеМЧД;
		
	Исключение
		
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Возврат Результат;
		
	КонецПопытки;
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');

	Документ = ДанныеXDTO.Документ;	
	СведенияДоверенности = Документ.СвДов;
		
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");
	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");		
	ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(СведенияДоверенности.ПрПередов = "1", Истина, Ложь));
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	

	СведенияОДоверителе = Документ.СвДоверит[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипДовер);
	
	Если СведенияОДоверителе.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИО" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИнОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИПДовер;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛДовер;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрРФ);

		ЛицоБезДоверенности = СведенияДоверителя.ЛицоБезДов;
		СведенияПоФизическомуЛицу = ЛицоБезДоверенности.СвФЛ;
		СведенияОЮридическомЛице = ЛицоБезДоверенности.СвОрг;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ИННФЛ", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ИННФЛ);		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", СведенияПоФизическомуЛицу.СНИЛС);
		
		ДанныеДоверенности.Вставить(
			"ЛицоБезДовФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу.СведФЛ));
				
		ДатаРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу.СведФЛ, "ДатаРожд", 
			'00010101', "Дата");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ДатаРожд);
		Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Должность", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", Должность);		
		ЛицоБезДовЮЛ_НаимОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "НаимОрг", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ЛицоБезДовЮЛ_НаимОрг);
		ЛицоБезДовЮЛ_ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ЛицоБезДовЮЛ_ИНН);
		ЛицоБезДовЮЛ_КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "КПП", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ЛицоБезДовЮЛ_КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ОГРН", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ОГРН);

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
				ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
		КонецЕсли;

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительРук,
			ДанныеДоверенности.ФИО); 

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИО);
		ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ИННЮЛ);
		КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "КПП", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", СведенияДоверителя.СтрРег);
		НаимРегОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "НаимРегОрг", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", НаимРегОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", СведенияДоверителя.РегНомер);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрСтрРег);

		СведенияОРуководителеОбособленногоПодразделения = СведенияДоверителя.СвРукОП;
		СведенияПоФизическомуЛицу = СведенияОРуководителеОбособленногоПодразделения.СведФЛ;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОРуководителеОбособленногоПодразделения, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		МестоРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "МестоРожд", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", МестоРожд);
		Пол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Пол", 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", Пол);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительФЛ,
			ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

	КонецЕсли;

	СведенияОбУполномоченномПредставителе = Документ.СвУпПред[0];	
	ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
	ТипВладельца = ПредопределенноеЗначение("Перечисление.СубъектыДоверенности.ПредставительФЛ");
	СведенияОПредставителе = СведенияОбУполномоченномПредставителе.СвПред[0];
	ДанныеДоверенности.Вставить("ТипУполномоченногоПредставителя", ТипУполномоченногоПредставителя);
	
	Если ТипУполномоченногоПредставителя = "ЮЛ" Тогда
		
	    СведенияОрганизации = СведенияОПредставителе.СвОрг;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияОрганизации.НаимОрг);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияОрганизации.ИННЮЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", СведенияОрганизации.КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОрганизации, "ОГРН", "");
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ОГРН);
					
	ИначеЕсли ТипУполномоченногоПредставителя = "ИП" Тогда
			
		СведенияИП = СведенияОПредставителе.СведИП;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияИП.НаимИП);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияИП.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", СведенияИП.ОГРНИП);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияИП.ФИО,
			ТипВладельца,
			ДанныеДоверенности.ФИО); 
		
		СведенияПоФизическомуЛицу = СведенияИП.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);			
		
	КонецЕсли;	
	
	СведенияФизЛица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПредставителе, "СведФизЛ", Неопределено);
	
	Если СведенияФизЛица <> Неопределено Тогда
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);			
				
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияФизЛица.ФИО,
			ТипВладельца,
			ДанныеДоверенности.ФИО); 
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
	Представитель = Неопределено;
	Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
			ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
	КонецЕсли;

	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;

	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) Тогда
		Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;

	ДанныеДоверенности.Вставить("Представитель", Представитель);
		 
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	
	Для Каждого Полномочие Из Полномочия Цикл
		
		СведенияОПолномочиях = НовыеПолномочияПредставителя();
		СведенияОПолномочиях.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
		СведенияОПолномочиях.Описание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ТекстПолн", "");
		СведенияОПолномочиях.Содержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "СодержПолн", "");
		СведенияОПолномочиях.Пояснение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ДопТекстПолн", "");
		ДанныеДоверенности.Полномочия.Добавить(СведенияОПолномочиях);
		
	КонецЦикла;
	
	Результат.Успех = Истина;
	Возврат Результат; 

КонецФункции

// Возвращает данные, полученные из файла обмена в формате версии 002
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеМЧД - См. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеМЧД", Ложь, "", НовыеДанныеМЧД());
	ДанныеДоверенности = Результат.ДанныеМЧД;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	ДанныеXDTO = Неопределено;
	
	Попытка
		
		РезультатЧтения = ПрочитатьДанныеXML(ДвоичныеДанные);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		ДанныеXDTO = РезультатЧтения.ДанныеМЧД;
		
	Исключение
		
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Результат.ТекстОшибки = ТекстСообщения;
		Возврат Результат;
		
	КонецПопытки;
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Довер");

	ЭтоПередоверие = Ложь;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Передов") <> Неопределено Тогда
		Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Передов"); 
		ЭтоПередоверие = Истина;
	КонецЕсли;

	ДанныеДоверенности.Вставить("ЭтоПередоверие", ЭтоПередоверие);
	
	Если ЭтоПередоверие Тогда
		ЗаполнитьПередовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации);
	Иначе
		ЗаполнитьДовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации);
	КонецЕсли;
	
	Результат.Успех = Истина;
	Возврат Результат; 

КонецФункции

// Возвращает данные, полученные из файла обмена доверенности в формате 002
// 
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеМЧД
//  Документ - Произвольный
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
//
Процедура ЗаполнитьДовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации = Неопределено)
	
	СведенияДоверенности = Документ.СвДов;
	
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");
	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");		
	ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("ТипПередоверия", СведенияДоверенности.ПрПередов);
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	
	ДанныеДоверенности.Вставить("СовместныеПолномочия", ?(СведенияДоверенности.ПрСовмПолн = "2", Истина, Ложь));
	
	СведенияОДоверителе = Документ.СвДоверит[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипДовер);
	
	Если СведенияОДоверителе.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргДовер.СвРосОрг;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИО" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИнОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИПДовер;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛДовер;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ЛицоБезДоверенности = СведенияОДоверителе.РосОргДовер.ЛицоБезДов;
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрРФ);
		
		СведенияПоФизическомуЛицу = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвФЛ");		
		Если СведенияПоФизическомуЛицу <> Неопределено Тогда
			
			ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ИННФЛ", "");		
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ИННФЛ);		
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", СведенияПоФизическомуЛицу.СНИЛС);
			
			ДанныеДоверенности.Вставить(
				"ЛицоБезДовФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу.СведФЛ));
			
			ДатаРожд = 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
					СведенияПоФизическомуЛицу.СведФЛ, "ДатаРожд", '00010101', "Дата");
			
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ДатаРожд);
			Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Должность", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", Должность);
			
		КонецЕсли;
		
		СведенияОЮридическомЛице = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвОрг");
		Если СведенияОЮридическомЛице <> Неопределено Тогда
			ЛицоБезДовЮЛ_НаимОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "НаимОрг", "");		
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ЛицоБезДовЮЛ_НаимОрг);
			ЛицоБезДовЮЛ_ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ИННЮЛ", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ЛицоБезДовЮЛ_ИНН);
			ЛицоБезДовЮЛ_КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "КПП", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ЛицоБезДовЮЛ_КПП);
			ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ОГРН", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ОГРН);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
			ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
			ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
		КонецЕсли;
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительРук,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИО);
		ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ИННЮЛ);
		КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "КПП", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", СведенияДоверителя.СтрРег);
		НаимРегОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "НаимРегОрг", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", НаимРегОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", СведенияДоверителя.РегНомер);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрСтрРег);
		
		СведенияОРуководителеОбособленногоПодразделения = СведенияДоверителя.СвРукОП;
		СведенияПоФизическомуЛицу = СведенияОРуководителеОбособленногоПодразделения.СведФЛ;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОРуководителеОбособленногоПодразделения, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		МестоРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "МестоРожд", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", МестоРожд);
		Пол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Пол", 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", Пол);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительФЛ,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		
	КонецЕсли;
	
	СведенияОбУполномоченномПредставителе = Документ.СвУпПред[0];	
	ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
	ДанныеДоверенности.Вставить("ТипУполномоченногоПредставителя", ТипУполномоченногоПредставителя);
	ТипВладельца = ПредопределенноеЗначение("Перечисление.СубъектыДоверенности.ПредставительФЛ");
	
	ДанныеДоверенности.Вставить("ТипУполномоченногоПредставителя", ТипУполномоченногоПредставителя);
	ДанныеДоверенности.Вставить("НесколькоПредставителей", Документ.СвУпПред.Количество() > 1);
	
	Если ТипУполномоченногоПредставителя = "ЮЛ" Тогда
			
		СведенияОрганизации = СведенияОбУполномоченномПредставителе.СвОрг.СвОрг;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияОрганизации.НаимОрг);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияОрганизации.ИННЮЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", СведенияОрганизации.КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОрганизации, "ОГРН", "");
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ОГРН);
		
		
		СведенияФизЛица = СведенияОбУполномоченномПредставителе.СвОрг.СвФЛ[0];
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);			
		
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияФизЛица.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО); 
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;		

	ИначеЕсли ТипУполномоченногоПредставителя = "ИП" Тогда
					
		СведенияИП = СведенияОбУполномоченномПредставителе.СведИП;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияИП.НаимИП);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияИП.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", СведенияИП.ОГРНИП);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияИП.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО); 
		
		СведенияПоФизическомуЛицу = СведенияИП.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияИП.СНИЛС);
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;
		
	ИначеЕсли ТипУполномоченногоПредставителя = "ФЛ" Тогда
		
		СведенияФизЛица = СведенияОбУполномоченномПредставителе.СведФизЛ;
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияФизЛица.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО);
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;
	КонецЕсли;
	
	Представитель = Неопределено;
	Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
		ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
	КонецЕсли;
	
	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;
	
	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) Тогда
		Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Представитель", Представитель);
	
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия);
	
КонецПроцедуры

// Возвращает данные, полученные из файла обмена передоверия в формате 002
// 
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеМЧД
//  Документ - Произвольный
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
//
Процедура ЗаполнитьПередовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации = Неопределено)
	
	СведенияДоверенности = Документ.СвДовПер.СвПереДовер;
	
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");

	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	

	НомерРодительскойДоверенности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "СвДовПер.НомДоверN", "");	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", НомерРодительскойДоверенности);	
	ДанныеДоверенности.Вставить("ТипПередоверия", СведенияДоверенности.ПрПередов);
	ДанныеДоверенности.Вставить("УтратаПолномочийПриПередоверии", ?(СведенияДоверенности.ПрУтрПолн = "1", Истина, Ложь));
	ДанныеДоверенности.Вставить("СовместныеПолномочия", ?(СведенияДоверенности.ПрСовмПолн = "2", Истина, Ложь));
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	
	
	СведенияОбОсновнойДоверенности = Документ.СвДовПер.СвОснДовер;
	СведенияОДоверителеОсновнойДоверенности = СведенияОбОсновнойДоверенности.СвДовер0[0];
	ДанныеДоверенности.НомерОсновнойДоверенности = СведенияОбОсновнойДоверенности.НомДовер0;
	ДанныеДоверенности.НомерРодительскойДоверенности = ДанныеДоверенности.НомерОсновнойДоверенности;
	ДанныеДоверенности.Вставить("ТипДоверителяОсновнойДоверенности", СведенияОДоверителеОсновнойДоверенности.ТипДовер);
	
	Если СведенияОДоверителеОсновнойДоверенности.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.РосОргДовер;
	ИначеЕсли СведенияОДоверителеОсновнойДоверенности.ТипДовер = "ИП" Тогда
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.ИПДовер;
	Иначе
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.ФЛДовер;
	КонецЕсли;
	
	Если ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ЮЛ" Тогда
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", СведенияДоверителяОсновнойДоверенности.ИННЮЛ);
		ДанныеДоверенности.КППДоверителяРодительскойДоверенности = СведенияДоверителяОсновнойДоверенности.КПП;
	ИначеЕсли ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ИП" Тогда
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", СведенияДоверителяОсновнойДоверенности.ИННФЛ);
	ИначеЕсли ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ФЛ" Тогда
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителяОсновнойДоверенности, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", ИННФЛ);
	КонецЕсли;
	
	СведенияОДоверителе = Документ.СвЛицПередПолн[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипЛицПрдПолн);
	
	Если СведенияОДоверителе.ТипЛицПрдПолн = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргПрдПолн;
	ИначеЕсли СведенияОДоверителе.ТипЛицПрдПолн = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИППрдПолн;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛПрдПолн;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ИННДоверителяРодительскойДоверенности);
	Если ЗначениеЗаполнено(ДанныеДоверенности.КППДоверителяРодительскойДоверенности) Тогда
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.КППДоверителяРодительскойДоверенности);
	КонецЕсли;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		
		АдрРег = СведенияДоверителя.АдрРег;
		Если АдрРег <> Неопределено Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", АдрРег.АдрРФ);
		КонецЕсли;
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительРук,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительФЛ,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
	КонецЕсли;
	
	СведенияОПредставителе = Документ.СвЛицПолучПолн[0];	
	ТипПредставителя = СведенияОПредставителе.ТипПред;
	ДанныеДоверенности.Вставить("ТипУполномоченногоПредставителя", ТипПредставителя);
	ТипВладельца = ПредопределенноеЗначение("Перечисление.СубъектыДоверенности.ПредставительФЛ");

	ДанныеДоверенности.Вставить("ТипУполномоченногоПредставителя", ТипПредставителя);
	ДанныеДоверенности.Вставить("НесколькоПредставителей", Документ.СвЛицПолучПолн.Количество() > 1);
	
	Если ТипПредставителя = "ЮЛ" Тогда
		
		СведенияОрганизации = СведенияОПредставителе.СвОрг.СвОрг;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияОрганизации.НаимОрг);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияОрганизации.ИННЮЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", СведенияОрганизации.КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОрганизации, "ОГРН", "");
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ОГРН);
		
		СведенияФизЛица = СведенияОПредставителе.СвОрг.СвФЛ[0];
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);			
		
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияФизЛица.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО); 
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;		
		
		
	ИначеЕсли ТипПредставителя = "ИП" Тогда
				
		СведенияИП = СведенияОПредставителе.СведИП;
		ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СведенияИП.НаимИП);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СведенияИП.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", СведенияИП.ОГРНИП);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияИП.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО); 
		
		СведенияПоФизическомуЛицу = СведенияИП.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияИП.СНИЛС);
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;
		
	ИначеЕсли ТипПредставителя = "ФЛ" Тогда
		
		СведенияФизЛица = СведенияОПредставителе.СведФизЛ;
		
		ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияФизЛица.ФИО,
		ТипВладельца,
		ДанныеДоверенности.ФИО); 
		
		УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
		Если УдостоверениеЛичности <> Неопределено Тогда
			ЗаполнитьУдостоверениеЛичности(ДанныеДоверенности, УдостоверениеЛичности, ТипВладельца);
		КонецЕсли;		
	КонецЕсли;
	
	Представитель = Неопределено;
	Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
		ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
	КонецЕсли;
	
	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) 
		И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
		Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;
	
	Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(Представитель) Тогда
		Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Представитель", Представитель);
	
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия);
	
КонецПроцедуры

// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеМЧД - см. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные)
	
	ДанныеДоверенности = НовыеДанныеМЧД();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ДокументОбработки = ПодготовитьДокументDOM(ВходящиеДанные);
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДов");

	Если СведенияДоверенности.Количество() = 1 Тогда

		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкон", '00010101'));
		ДанныеДоверенности.Вставить("СрокДействия", ПолучитьЗначениеДокумента(ЭлементВыборки, "СрокДейст", ""));
		ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"СведСистОтм", ""));
		ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"@НомПредДовер", ""));
		ПравоПередоверияСтрока = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов");
		ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(ПравоПередоверияСтрока = "1", Истина, Ложь));
	КонецЕсли;

	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");

	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/РосОргДовер");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ФЛДовер");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИнОргДовер");

	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеДоверенности.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;

	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "@АдрРФ"));

			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@СНИЛС"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Должность"));

			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@НаимОрг"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@КПП"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ОГРН"));

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
					ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
					ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СтрРег",
				Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@НаимРегОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомер"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег"));

			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@МестоРожд"));
			ДанныеДоверенности.Вставить(
				"ДоверительФЛ_Пол", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Пол", 1));
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@ДатаРожд", '00010101'));

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		КонецЕсли;

	КонецЕсли;

	СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвУпПред");
	
	Для Каждого СтрокаМассива Из СведенияУполномоченных Цикл

		ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ПрОблПолн");
		
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			
			ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое);
			
			Если ПредставлениеВида = "99" Тогда
				
				Полномочие = НовыеПолномочияПредставителя();
				Полномочие.Описание = МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий();
				ДанныеДоверенности.Полномочия.Добавить(Полномочие);
				
			ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
				
				ВидПолномочия = Число(ПредставлениеВида);
				
				Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
					
					Полномочие = НовыеПолномочияПредставителя();
					Полномочие.Код = ПредставлениеВида;
					ДанныеДоверенности.Полномочия.Добавить(Полномочие);

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаЭлементовТекстПолномочий = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ТекстПолн");
		
		Для каждого СтрокаПолномочий Из ВыборкаЭлементовТекстПолномочий Цикл

			Полномочие = НовыеПолномочияПредставителя();
			Полномочие.Описание = СтрокаПолномочий.ТекстовоеСодержимое;
			ДанныеДоверенности.Полномочия.Добавить(Полномочие);

		КонецЦикла;
		
		ТипВладельца = Перечисления.СубъектыДоверенности.ПредставительФЛ;
		ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СвОрг");
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@НаимОрг"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@КПП"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ОГРН"));
		КонецЕсли;

		СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СведФизЛ");
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@ДатаРожд", '00010101'));

			НоваяСтрока = НовыеДанныеСубъектаМЧД();
			НоваяСтрока.Фамилия = ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Фамилия");
			НоваяСтрока.Имя = ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Имя");
			НоваяСтрока.Отчество = ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Отчество");
			НоваяСтрока.Владелец = ТипВладельца;
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);

			ДокументИП = НовыеДанныеУдостоверенияЛичности(); 
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@СерНомДок"));
			ДокументИП.СерДок = СерияНомер.Серия;
			ДокументИП.НомДок = СерияНомер.Номер;
			ДокументИП.ДатаДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ДатаДок", '00010101');
			ДокументИП.ВыдДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ВыдДок");
			ДокументИП.ВидДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВидДок");
			ДокументИП.КодВыдДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВыдДок");
			ДокументИП.Владелец = ТипВладельца;
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
		КонецЕсли;

		Представитель = Неопределено;
		Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) Тогда
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		ДанныеДоверенности.Вставить("Представитель", Представитель);

	КонецЦикла;

	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];

		НоваяСтрока = НовыеДанныеСубъектаМЧД();
		НоваяСтрока.Фамилия = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Фамилия");
		НоваяСтрока.Имя = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Имя");
		НоваяСтрока.Отчество = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Отчество");
		Если ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ;
		Иначе
			НоваяСтрока.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук;
		КонецЕсли;
		ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;

	РезультатПоиска = Неопределено;
	СтруктураПоиска = Новый Структура("ИНН, КПП");
	СтруктураПоиска.ИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	СтруктураПоиска.КПП = РеквизитыПоискаОрганизации.Получить("КПП");
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"Организации", РезультатПоиска, , СтруктураПоиска);
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Возврат Новый Структура("Успех, ТекстОшибки, ДанныеМЧД", Истина, "", ДанныеДоверенности);

КонецФункции

// Отключает проверку подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи)
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ХешПодписи.Установить(ХешПодписи);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет пространство имен файла МЧД по его содержимому.
// 
// Параметры:
//  ДвоичныеДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеМЧД.ОткрытьПотокДляЧтения());
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат ВерсияФорматаОбъектаМЧД(ДанныеXDTO);
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок доступа
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокДоступа()
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неавторизованного пользователя'"));
	Результат.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	Возврат Результат;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок отзыва
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок отзыва:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокОтзыва(НомерДоверенности)
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/not-found",
		СтрШаблон(НСтр("ru = 'Не найдена доверенность с номером ""%1""'"), НомерДоверенности));
	Возврат Результат;
	
КонецФункции

// Возвращает строку, из которой удалены все символы, не являющиеся цифрами
// 
// Параметры:
//  ИсходнаяСтрока - Строка
// 
// Возвращаемое значение:
//  Строка - Строка, состоящая только из цифр
//  
Функция УбратьИзСтрокиВсеНеЦифры(ИсходнаяСтрока)
	
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, НомерСимвола, 1);
		Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
			Результат = Результат + ТекущийСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак реестровой МЧД с необходимостью установки признака "Верна" и не требующего перезаполнения
//
//	Параметры:
//	 ДанныеДляПроверки - См.МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//	 ДанныеДоверенности - См. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
//
//	Возвращаемое значение:
//	 Булево.
//
Функция ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности) Экспорт
		
	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи)
							И ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеДоверенности);
	СтатусВРеестреФНС = Неопределено;
	ДанныеДоверенности.Свойство("СтатусВРеестреФНС", СтатусВРеестреФНС);
	ДоверительныеСтатусы = ДоверительныеСтатусыВРеестреФНС();
	
	Возврат ДоверенностьПодписана И ДоверительныеСтатусы.Найти(СтатусВРеестреФНС) <> Неопределено;
	
КонецФункции

// Возвращает признак того что МЧД нуждается в перезаполнении и перепроверке на сервере.
//
//	Параметры:
//	 Доверенность - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//	              - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//	 НовыеДанные - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//
//	Возвращаемое значение:
//	 Булево
Функция ТребуетсяПерезаполнениеМЧД(Доверенность, НовыеДанные) Экспорт
	
	Если НовыеДанные.ДанныеПодписиЗаявленияНаОтмену = Неопределено Тогда
		ДатаОтзыва = Дата(1, 1, 1);
	Иначе
		ДатаОтзыва = ЭлектроннаяПодпись.ДатаПодписания(НовыеДанные.ДанныеПодписиЗаявленияНаОтмену);
	КонецЕсли;
	
	НеЗаполненИННДоверителя = ТипЗнч(Доверенность) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов")
		И НЕ ЗначениеЗаполнено(Доверенность.ДоверительИНН);
	ТребуетсяПерезаполнение = Доверенность.ЭлектроннаяПодпись.Получить() <> НовыеДанные.ДанныеПодписи 
		Или Доверенность.XMLфайлМЧД.Получить() <> НовыеДанные.ДанныеДоверенности
		Или (ЗначениеЗаполнено(ДатаОтзыва) И Доверенность.ДатаОтзыва <> ДатаОтзыва)
		ИЛИ НеЗаполненИННДоверителя;
	
	Возврат ТребуетсяПерезаполнение;
	
КонецФункции

// Параметры:
//  Доверенность - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//	             - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//	             - См. НовыеСведенияМЧД
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
Процедура ЗаполнитьРеквизитыОтзыва(Доверенность, ДанныеДляЗагрузки) Экспорт
	
	Если ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену <> Неопределено Тогда
		ДатаОтзыва = ЭлектроннаяПодпись.ДатаПодписания(ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену);
		Если ЗначениеЗаполнено(ДатаОтзыва) Тогда
			Доверенность.ДатаОтзыва = ДатаОтзыва;
			Доверенность.Отозвана = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоверительныеСтатусыВРеестреФНС()
	
	ДоверительныеСтатусы = Новый Массив();
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия);
	
	Возврат ДоверительныеСтатусы;
	
КонецФункции

// Формирует пустую структуру данных физ лица.
// 
// Возвращаемое значение:
//  Структура:
// * ДатаРождения 		- Дата
// * ИНН 				- Строка
// * МестоРождения 		- Строка
// * Пол 				- Строка
// * СтраховойНомерПФР 	- Строка
// * ФИО 				- Строка
// * Фамилия 			- Строка
// * Имя 				- Строка
// * Отчество 			- Строка
// * Гражданство 		- СправочникСсылка.СтраныМира
// * КодФНС 			- Строка
// * Серия 				- Строка
// * Номер 				- Строка
// * ДатаВыдачи 		- Дата
// * КемВыдан 			- Строка
// * КодПодразделения 	- Строка
Функция НовыеДанныеФизЛица() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("ДатаРождения", Дата(1, 1, 1));
	Сведения.Вставить("ИНН", "");
	Сведения.Вставить("МестоРождения", "");
	Сведения.Вставить("Пол", "");
	Сведения.Вставить("СтраховойНомерПФР", "");
	Сведения.Вставить("ФИО", "");
	Сведения.Вставить("Фамилия", "");
	Сведения.Вставить("Имя", "");
	Сведения.Вставить("Отчество", "");
	Сведения.Вставить("Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	Сведения.Вставить("КодФНС", "");
	Сведения.Вставить("Серия", "");
	Сведения.Вставить("Номер", "");
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("КемВыдан", "");
	Сведения.Вставить("КодПодразделения", "");
	
	Возврат Сведения;
	
КонецФункции

// Формирует структуру с заполненными данными о физическом лице
//
//	Параметры:
//   ФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//
//	Возвращаемое значение:
//	 см. НовыеДанныеФизЛица
//
Функция ДанныеФизЛица(ФизЛицо) Экспорт
	
	Сведения = НовыеДанныеФизЛица();
	МашиночитаемыеДоверенностиПереопределяемый.ПриИзмененииДанныеФизЛица(ФизЛицо, Сведения);
	ДлинаКодаПодразделенияБезРазделителя = 6;
	Если СтрДлина(Сведения.КодПодразделения) = ДлинаКодаПодразделенияБезРазделителя Тогда
		Сведения.КодПодразделения = Лев(Сведения.КодПодразделения, 3) + "-" + Прав(Сведения.КодПодразделения, 3);
	КонецЕсли;
	Возврат Сведения;
	
КонецФункции

// Возвращает представление объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций,
//           СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Строка - Представление объекта
//
Функция ПредставлениеОбъекта(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НомерДоверенности) Тогда
		ЧастьНомераДоверенности = "*" + Прав(Объект.НомерДоверенности, 4) + " ";
	Иначе
		ЧастьНомераДоверенности = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		ДатаВыдачиСтрокой = НСтр("ru = 'от'") + " " + Формат(Объект.ДатаВыдачи, "ДЛФ=D;");
	Иначе
		ДатаВыдачиСтрокой = "";
	КонецЕсли;
	
	Представление = ЧастьНомераДоверенности + ДатаВыдачиСтрокой;
	
	Возврат Представление;
	
КонецФункции

// Возвращает сведения о статусах доверенностей.
// 
// Параметры:
//  СправочникМЧД - СправочникМенеджер.МашиночитаемыеДоверенностиКонтрагентов,
//  				СправочникМенеджер.МашиночитаемыеДоверенностиОрганизаций 
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеДоверенности Из ДанныеМЧД Цикл
		
		
		НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
		РезультатСозданияМЧД = СправочникМЧД.НайтиСоздатьМЧД(ДанныеДоверенности);
		СтатусМЧД = НовыеДанныеСтатусаМЧД();
		
		Если РезультатСозданияМЧД.Ошибка Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = РезультатСозданияМЧД.ОписаниеОшибки;
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;
		
		
		МЧД = РезультатСозданияМЧД.Ссылка;
		ЭтоМЧДКонтрагента = ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов");
		
		Реквизиты = "Подписана, СтатусВРеестреФНС, ИННДоверителяРодительскойДоверенности";
		Реквизиты = Реквизиты + ?(ЭтоМЧДКонтрагента, ", ДоверительИНН", ", ДоверительЮЛ_ИНН");
		
		ДанныеДоверенностиМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
		ЭтоНереестроваяМЧД = ДанныеДоверенностиМЧД.Подписана И НЕ ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС);
		
		Если ЭтоНереестроваяМЧД Тогда
			
			СтатусМЧД.Сведения = СправочникМЧД.СведенияМЧД(МЧД);
			
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеДоверенностиМЧД.ИННДоверителяРодительскойДоверенности)
				И ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
				ИННДоверителя = ДанныеДоверенностиМЧД.ДоверительЮЛ_ИНН;
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенностиМЧД.ИННДоверителяРодительскойДоверенности)
				И ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
				ИННДоверителя = ДанныеДоверенностиМЧД.ДоверительИНН;
			Иначе
				ИННДоверителя = ДанныеДоверенности.ИННДоверителя;
			КонецЕсли;
			
			Сведения = МашиночитаемыеДоверенностиПовтИсп.ПолучитьСведенияДоверенностиНаСервереМЧД(
				ДанныеДоверенности.НомерДоверенности, ИННДоверителя);
			
			Если Сведения.Ошибка Тогда
				
				СтатусМЧД.Ошибка = Истина;
				СтатусМЧД.ОписаниеОшибки = Сведения.ТекстОшибки;
				
				Если ЗначениеЗаполнено(МЧД) Тогда
					СтатусМЧД.Сведения = СправочникМЧД.СведенияМЧД(МЧД);
				КонецЕсли; 
				
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
				
			КонецЕсли;
			
			РезультатЗаполнения = СправочникМЧД.ЗаполнитьМЧД(МЧД, Сведения);
			
			Если РезультатЗаполнения.Ошибка Тогда
				
				СтатусМЧД.Ошибка = Истина;
				СтатусМЧД.ОписаниеОшибки = РезультатЗаполнения.ОписаниеОшибки;
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатЗаполнения.Сведения)
				И ЗначениеЗаполнено(РезультатЗаполнения.Сведения.НомерРодительскойДоверенности) Тогда
				РезультатЗаполнения.Сведения.РодительскиеДанныеМЧД = ПолучитьРодительскиеДанныеДоверенности(
					РезультатЗаполнения.Сведения.НомерРодительскойДоверенности,
					РезультатЗаполнения.Сведения.ИННДоверителяРодительскойДоверенности,
					Неопределено,
					ЭтоМЧДКонтрагента);
			КонецЕсли;
			
			СтатусМЧД.Сведения = РезультатЗаполнения.Сведения;
			СтатусМЧД.ТребуетсяПроверкаМЧДНаКлиенте = РезультатЗаполнения.ТребуетсяПроверкаМЧДНаКлиенте;
			
		КонецЕсли;
		
		Результат.Вставить(НомерДоверенности, СтатусМЧД);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Авторизуется на сервере МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат авторизации:
//   * ТокенДоступа - Строка - Токен доступа
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция АвторизоватьсяНаСервереМЧД()
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.АвторизацияНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_grant",
		НСтр("ru = 'Некорректная авторизация на сервере МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unsupported_grant_type",
		НСтр("ru = 'Некорректный тип авторизации на сервере МЧД распределенного реестра'"));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");

	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя =
			ИнтеграцияБИПБЭД.ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			ТекстОшибкиПоУмолчанию =
			 	НСтр("ru = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС'"); 
			СтруктураОтвета = Новый Структура("ТекстОшибкиПоУмолчанию", ТекстОшибкиПоУмолчанию);
			ВывестиИЗаписатьОшибкуМЧД(Неопределено, , СтруктураОтвета);
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			Тикет = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL); 
			ПараметрыРесурсаНаСервере = СтрШаблон("?ticket=%1", Тикет);
		Иначе
			Логин = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL);
			Пароль = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL);
			ПараметрыРесурсаНаСервере = СтрШаблон("?login=%1&password=%2", Логин, Пароль);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧД.Логин);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧД.Пароль);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	Попытка
		ОписаниеСоединения = ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервера, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token") Тогда
			Результат.ТокенДоступа = СтруктураОтвета.access_token;
		Иначе
			Результат.ТокенДоступа = "";
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСервераМЧД()
	
	Результат = МашиночитаемыеДоверенностиПовтИсп.СвойстваСервераМЧД();
	
	НачалоПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "://");
	КонецПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "@");
	Если НачалоПараметровАутентификации <> 0 И КонецПараметровАутентификации <> 0 Тогда
		Результат.АдресСервераБезАутентификации =
			Лев(Результат.АдресСервераБезАутентификации, НачалоПараметровАутентификации + 2)
			+ Сред(Результат.АдресСервераБезАутентификации, КонецПараметровАутентификации + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния)
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины содержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответствие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция СтруктураШаблоновОшибокМЧД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 		"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 		"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 	"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 			"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 		Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧД(
		ШаблоныОшибок,
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		РежимВыводаИЗаписи = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧД();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" И НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ИмяСобытия = НСтр("ru = 'Машиночитаемые доверенности'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИспользуетсяРежимТестирования()
	Возврат МашиночитаемыеДоверенностиПовтИсп.ИспользуетсяРежимТестирования();
КонецФункции

Функция СтатусыДействительнойДоверенности()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	
	Возврат Статусы;
	
КонецФункции

// Полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  Ссылка 	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 	- ссылка на доверенность.
//  		- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов	- ссылка на доверенность.
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, ДвоичныеДанные - Полные данные доверенности на сервере МЧД
Функция ПолныеДанныеДоверенностиНаСервереМЧД(Ссылка) Экспорт
	
	ДвоичныеДанные = Неопределено; 
	Если ТипЗнч(Ссылка.XMLфайлМЧД) <> Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = Ссылка.XMLфайлМЧД.Получить();
	Иначе
		ДвоичныеДанные = Ссылка.XMLфайлМЧД;
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда

		ДоверительИНН = ИННДоверителя(Ссылка);

		СведенияДоверенности = ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
			Ссылка.НомерДоверенности, ДоверительИНН);

		Если СведенияДоверенности.СтатусПолучения = "PENDING" Тогда
			ТекстСообщения = НСтр(
				"ru = 'Запрос данных доверенности отправлен успешно, повторите попытку загрузки через несколько минут'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СведенияДоверенности.ДанныеВыгрузки) Тогда
			Возврат Неопределено;
		КонецЕсли;

		ДвоичныеДанные = СведенияДоверенности.ДанныеВыгрузки;

		Если ДвоичныеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Просмотр карточки МЧД невозможен. 
								  |Отсутствует прикрепленный xml файл доверенности. Доверенность
								  |должна быть подписана и отправлена или загружена из реестра.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	Возврат ДвоичныеДанные;

КонецФункции

Функция ПолучитьПредставлениеФИО(СтрокаФИО)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаФИО.Фамилия) Тогда
		Представление = СтрокаФИО.Фамилия;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Имя) Тогда
		Представление = Представление + " " + СтрокаФИО.Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Отчество) Тогда
		Представление = Представление + " " + СтрокаФИО.Отчество;
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВидДок) Тогда
		ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
		Представление = ВидыДокументов.Получить(СтрокаУдостоверения.ВидДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.СерДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.СерДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.НомДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.НомДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ДатаДок) Тогда
		Представление = Представление + " " + НСтр("ru = 'выдан'") + " " + Формат(СтрокаУдостоверения.ДатаДок, "ДЛФ=ДД");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВыдДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.ВыдДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.КодВыдДок) Тогда
		Представление = Представление + ", " + НСтр("ru = 'код подразделения'") + ":" + СтрокаУдостоверения.КодВыдДок;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает новые общие свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * НомерРодительскойДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * Доверитель - Строка
//  * ДоверительИНН - Строка
//  * Представитель - Строка
//  * ПредставительИНН - Строка
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ПолномочияОграничены - Булево
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  		 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция НовыеОбщиеСвойстваДоверенности() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("НомерДоверенности", "");
	Свойства.Вставить("НомерРодительскойДоверенности", "");
	Свойства.Вставить("ДатаВыдачи", '00010101');
	Свойства.Вставить("ДатаОкончания", '00010101');
	Свойства.Вставить("Доверитель", "");
	Свойства.Вставить("ДоверительИНН", "");
	Свойства.Вставить("Представитель", "");
	Свойства.Вставить("ПредставительИНН", "");
	Свойства.Вставить("Верна", Ложь);
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", '00010101');
	Свойства.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Свойства.Вставить("ПолномочияОграничены", Ложь);
	Свойства.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка());
	
	Возврат Свойства;
	
КонецФункции

#Область ПроверкаПодписи

// Прочитать протокол проверки JSON.
// 
// Параметры:
//  ТекстJSON - Строка
// 
// Возвращаемое значение:
//  см. НовыйПротоколПроверкиПодписи
Функция ПрочитатьПротоколПроверкиJSON(ТекстJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ПротоколПроверки = ПрочитатьJSON(ЧтениеJSON,, "ДатаПроверки");
	ЧтениеJSON.Закрыть();
	ПроверкаПодписи = НовыйПротоколПроверкиПодписи();
	ПроверкаМЧД = НовыйПротоколПроверкиМЧД();
	
	Для Каждого Проверка Из ПроверкаМЧД Цикл
		Если ТипЗнч(Проверка.Значение) = Тип("Структура")
			И НЕ ПротоколПроверки.ПроверкаМЧД.Свойство(Проверка.Ключ) Тогда
			ПроверкаМЧД[Проверка.Ключ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ПроверкаМЧД, ПротоколПроверки.ПроверкаМЧД);
	ЗаполнитьЗначенияСвойств(ПроверкаПодписи, ПротоколПроверки,, "ПроверкаМЧД");
	ПроверкаПодписи.ПроверкаМЧД = ПроверкаМЧД;
	
	Возврат ПроверкаПодписи;
	
КонецФункции

// Проверяет доступность автопроверки полномочий для доверенности
// 
// Параметры:
//  СвойстваДоверенности - см. НовыеСвойстваДоверенности
// 
// Возвращаемое значение:
//  Булево
//  
Функция ВозможнаАвтопроверкаПолномочий(СвойстваДоверенности) Экспорт
	Возврат НЕ СвойстваДоверенности.ПолномочияОграничены
		ИЛИ ПравилоНастроено(СвойстваДоверенности.ПравилоПроверки);
КонецФункции

// См. МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки
Функция НовыйРезультатПроверки() Экспорт
	Возврат МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки();
КонецФункции

// Новый протокол проверки подписи.
// 
// Возвращаемое значение:
//  Структура - Новый протокол проверки подписи:
// * ВерсияПротокола - Строка
// * ПроверкаПодписиДокумента - см. НовыйРезультатПроверки
// * ПроверкаМЧД - см. НовыйПротоколПроверкиМЧД
// * ОшибкиПроверкиПолномочий - Массив из см.НоваяОшибкаПроверкиПолномочий
Функция НовыйПротоколПроверкиПодписи() Экспорт
	Протокол = Новый Структура;
	Протокол.Вставить("ВерсияПротокола", "2.0");
	Протокол.Вставить("ПроверкаПодписиДокумента", НовыйРезультатПроверки());
	Протокол.Вставить("ПроверкаМЧД", НовыйПротоколПроверкиМЧД());
	Протокол.Вставить("ОшибкиПроверкиПолномочий", Новый Массив());
	Возврат Протокол;
КонецФункции

// Заполняет протокол проверки доверенности.
// 
// Параметры:
//  ПроверкаДоверенности - См. НовыйПротоколПроверкиМЧД
//  СведенияМЧД - См. НовыеСведенияМЧД
//  СведенияРодительскойМЧД - См. НовыеСведенияМЧД
//  ДатаПодписи - Дата
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
//
Процедура ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
	СведенияМЧД, СведенияРодительскойМЧД, ДатаПодписи, ПараметрыПроверки)
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ДатаПодписиНачалоДня = НачалоДня(ДатаПодписи);
	
	ОрганизацияВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПроверки.ЭлектронныйДокумент, "Организация");
	
	ДополнительныеРеквизиты = Новый Структура("ИНН", СведенияМЧД.ИННДоверителяРодительскойДоверенности);
	ОрганизацияДоверителя = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты", , ДополнительныеРеквизиты);
	Если Не ЗначениеЗаполнено(ОрганизацияДоверителя) Тогда
		ОрганизацияДоверителя = ОбщегоНазначенияБЭД.НайтиСсылку("Организации", , ДополнительныеРеквизиты);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	РодительскиеДанныеПолучены = ПроверкаДоверенности.РодительскиеДанныеПолучены;
	РодительскиеДанныеПолучены.НомерДоверенности = 
		?(ЗначениеЗаполнено(РодительскиеДанныеПолучены.НомерДоверенности),
			РодительскиеДанныеПолучены.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	РодительскиеДанныеПолучены.Выполнено = Истина;
	РодительскиеДанныеПолучены.ДатаПроверки = ДатаПроверки;
	РодительскиеДанныеПолучены.Успех = ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных);
	
	Если Не РодительскиеДанныеПолучены.Успех Тогда
		РодительскиеДанныеПолучены.Ошибка = 
			СтрШаблон(НСтр("ru = 'Не удалось соединиться с реестром МЧД для загрузки данных доверенности ""%1"".
							|Проверьте подпись вручную позже.'"),
				СведенияРодительскойМЧД.НомерДоверенности);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ДействительнаВРеестре = ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре;
	ДействительнаВРеестре.НомерДоверенности = 
		?(ЗначениеЗаполнено(ДействительнаВРеестре.НомерДоверенности),
			ДействительнаВРеестре.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	ДействительнаВРеестре.Выполнено = Истина;
	ДействительнаВРеестре.ДатаПроверки = ДатаПроверки;
	ДействительнаВРеестре.Успех = 
		СтатусыДействительнойДоверенности().Найти(СведенияРодительскойМЧД.СтатусВРеестреФНС) <> Неопределено;
		
	Если Не ДействительнаВРеестре.Успех Тогда
		
		Если ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаОтзыва)
			И СведенияРодительскойМЧД.ДатаОтзыва < ДатаПодписиНачалоДня Тогда
				
			ДействительнаВРеестре.Ошибка = ДействительнаВРеестре.Ошибка + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'Доверенность отозвана %1'"),
					Формат(СведенияРодительскойМЧД.ДатаОтзыва, "ДЛФ=D;"));
			
		Иначе
			
			ДействительнаВРеестре.Ошибка = 
				СтрШаблон(НСтр("ru = 'На данный момент ее текущий статус: %1'"),
					СведенияРодительскойМЧД.СтатусВРеестреФНС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеОрганизацииВДокументе = ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе;
	СоответствиеОрганизацииВДокументе.НомерДоверенности = 
		?(ЗначениеЗаполнено(СоответствиеОрганизацииВДокументе.НомерДоверенности),
			СоответствиеОрганизацииВДокументе.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	СоответствиеОрганизацииВДокументе.Выполнено = Истина;
	СоответствиеОрганизацииВДокументе.ДатаПроверки = ДатаПроверки;
	СоответствиеОрганизацииВДокументе.Успех = СведенияРодительскойМЧД.ИННДоверителя = ПараметрыПроверки.ИННДоверителя;
	
	Если Не СоответствиеОрганизацииВДокументе.Успех Тогда

		Если ЗначениеЗаполнено(ОрганизацияДоверителя) Тогда
			СоответствиеОрганизацииВДокументе.Ошибка = СоответствиеОрганизацииВДокументе.Ошибка
				+ СтрШаблон(НСтр("ru = 'В доверенности: %1
									   |В документе: %2'"),
				ОрганизацияДоверителя, ОрганизацияВДокументе);
		Иначе
			СоответствиеОрганизацииВДокументе.Ошибка = СоответствиеОрганизацииВДокументе.Ошибка
				+ СтрШаблон(НСтр("ru = 'ИНН в доверенности: %1
									   |ИНН в документе: %2'"),
				СведенияРодительскойМЧД.ИННДоверителя, ПараметрыПроверки.ИННДоверителя);
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеПредставителя = ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия;
	СоответствиеПредставителя.НомерДоверенности = 
		?(ЗначениеЗаполнено(СоответствиеПредставителя.НомерДоверенности),
			СоответствиеПредставителя.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	СоответствиеПредставителя.Выполнено = Истина;
	СоответствиеПредставителя.ДатаПроверки = ДатаПроверки;
	СоответствиеПредставителя.Успех = СведенияМЧД.ИННДоверителя = СведенияРодительскойМЧД.ИННПредставителя;
	
	Если Не СоответствиеПредставителя.Успех Тогда
		СоответствиеПредставителя.Ошибка = 
			СтрШаблон(НСтр("ru = 'Представитель: ИНН %1
							|Доверитель: ИНН %2'"),
				СведенияРодительскойМЧД.ИННПредставителя, СведенияМЧД.ИННДоверителя);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПериодДействияРодителя = ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента;
	ПериодДействияРодителя.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПериодДействияРодителя.НомерДоверенности),
			ПериодДействияРодителя.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	ПериодДействияРодителя.Выполнено = Истина;
	ПериодДействияРодителя.ДатаПроверки = ДатаПроверки;
	ПериодДействияРодителя.Успех = ДатаПодписиНачалоДня >= НачалоДня(СведенияРодительскойМЧД.ДатаВыдачи)
		И ДатаПодписиНачалоДня <= НачалоДня(СведенияРодительскойМЧД.ДатаОкончания);
	Если НЕ ПериодДействияРодителя.Успех Тогда
		ПериодДействияРодителя.Ошибка =
			СтрШаблон(НСтр("ru = 'Срок действия: %1
							|Дата документа: %2'"),
				Формат(СведенияРодительскойМЧД.ДатаВыдачи, "ДЛФ=D;") + " - "
					+ Формат(СведенияРодительскойМЧД.ДатаОкончания, "ДЛФ=D;"),
				Формат(ДатаПодписиНачалоДня, "ДЛФ=D;"));
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПраваПередоверия = ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять;
	ПроверкаПраваПередоверия.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПроверкаПраваПередоверия.НомерДоверенности),
			ПроверкаПраваПередоверия.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	ПроверкаПраваПередоверия.Выполнено = Истина;
	ПроверкаПраваПередоверия.ДатаПроверки = ДатаПроверки;
	ПроверкаПраваПередоверия.Успех = ПередовериеВозможно(СведенияРодительскойМЧД.ТипПередоверия);
	
	Если Не ПроверкаПраваПередоверия.Успех Тогда
		ПроверкаПраваПередоверия.Ошибка = НСтр("ru = 'Стоит признак: Без права передоверия'");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаРодительскихПолномочий = ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия;
	ПроверкаРодительскихПолномочий.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПроверкаРодительскихПолномочий.НомерДоверенности),
			ПроверкаРодительскихПолномочий.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	ПроверкаРодительскихПолномочий.Выполнено = Истина;
	ПроверкаРодительскихПолномочий.ДатаПроверки = ДатаПроверки;
	ПроверкаРодительскихПолномочий.Успех = НЕ СведенияРодительскойМЧД.ПолномочияОграничены
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПроверки.ЭлектронныйДокумент);
	
	Если НЕ ПроверкаРодительскихПолномочий.Успех Тогда
		
		Если НЕ ПравилоНастроено(СведенияРодительскойМЧД.ПравилоПроверки) Тогда
			
			ПроверкаРодительскихПолномочий.Ошибка =
				МашиночитаемыеДоверенностиКлиентСервер.ТекстНеобходимостиРучнойПроверкиПолномочий();
			
		Иначе
			
			РезультатПроверкиПолномочий = ПроверитьПолномочияДоверенности(
				СведенияРодительскойМЧД.Ссылка, ПараметрыПроверки.ЭлектронныйДокумент);
			
			ПроверкаРодительскихПолномочий.Успех = РезультатПроверкиПолномочий.Успех;
			ПроверкаРодительскихПолномочий.Ошибка = РезультатПроверкиПолномочий.ТекстОшибки;
			
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПрошлаУспешно = РодительскиеДанныеПолучены.Успех
		И ДействительнаВРеестре.Успех
		И СоответствиеОрганизацииВДокументе.Успех
		И СоответствиеПредставителя.Успех
		И ПериодДействияРодителя.Успех
		И ПроверкаПраваПередоверия.Успех
		И ПроверкаРодительскихПолномочий.Успех;
	
	Если ПроверкаПрошлаУспешно И ЗначениеЗаполнено(СведенияРодительскойМЧД.РодительскиеДанныеМЧД) Тогда
		ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
			СведенияМЧД, СведенияРодительскойМЧД.РодительскиеДанныеМЧД, ДатаПодписи, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет протокол проверки доверенности.
// 
// Параметры:
//  ПроверкаДоверенности - См. НовыйПротоколПроверкиМЧД
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
//  ИННПредставителя - Строка
//  ДатаПодписи - Дата
Процедура ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя, ДатаПодписи)
	
	ПроверкаДоверенности.Выполнена = Истина;
	ДатаПроверки = ТекущаяДатаСеанса();
	СведенияМЧД = ПараметрыПроверки.СведенияМЧД;
	ДатаПроверки = СведенияМЧД.ДатаПолученияСведений;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	РодительскиеДанныеМЧД = СведенияМЧД.РодительскиеДанныеМЧД;
	Если Не ЗначениеЗаполнено(РодительскиеДанныеМЧД) Тогда
		ПроверкаДоверенности.РодительскиеДанныеПолучены = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе = Неопределено;
		ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия = Неопределено;
		ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять = Неопределено;
		ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия = Неопределено;
	Иначе
		ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
			СведенияМЧД, РодительскиеДанныеМЧД, ДатаПодписи, ПараметрыПроверки);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПодписиМЧД = ПроверкаДоверенности.ПроверкаПодписиМЧД;
	ПроверкаПодписиМЧД.Выполнено = Истина;
	ПроверкаПодписиМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаПодписиМЧД.Успех = СведенияМЧД.Верна;
	Если НЕ ПроверкаПодписиМЧД.Успех Тогда
		ПроверкаПодписиМЧД.Ошибка = НСтр("ru='Подпись доверенности не верифицирована'");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаОтзываМЧД = ПроверкаДоверенности.ПроверкаОтзываМЧД;
	ПроверкаОтзываМЧД.Выполнено = Истина;
	ПроверкаОтзываМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаОтзываМЧД.Успех = НЕ (СведенияМЧД.Отозвана И СведенияМЧД.ДатаОтзыва <= НачалоДня(ДатаПроверки));
	
	Если ПроверкаОтзываМЧД.Успех Тогда
		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтзыва) 
			И СведенияМЧД.ДатаОтзыва < ДатаПодписи Тогда
				ПроверкаОтзываМЧД.Успех = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверкаОтзываМЧД.Успех Тогда
		ПроверкаОтзываМЧД.Ошибка = СтрШаблон(НСтр("ru='Доверенность отозвана %1'"), СведенияМЧД.ДатаОтзыва);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ПроверкаОператором = ПараметрыПроверки.ПроверкаОператором;
	Если ЗначениеЗаполнено(ПроверкаОператором) И ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС) Тогда
		Проверка = ПроверкаДоверенности.ПроверкаОператором;
		Проверка.Выполнено = Истина;
		Проверка.ДатаПроверки = ДатаПроверки;
		Проверка.Успех = ПроверкаОператором.ДоверенностьДействительна;
		Если ПроверкаОператором.ДоверенностьДействительна Тогда
			Проверка.Ошибка = ПроверкаОператором.ДоверенностьДействительнаОшибка
		КонецЕсли; 
	Иначе
		ПроверкаДоверенности.ПроверкаОператором = Неопределено;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС) Тогда
		ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС = Неопределено
	Иначе
		
		ПроверкаСтатусаВРеестреФНС = ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС;
		ПроверкаСтатусаВРеестреФНС.Выполнено = Истина;
		ПроверкаСтатусаВРеестреФНС.ДатаПроверки = ДатаПроверки;
		ПроверкаСтатусаВРеестреФНС.Успех =
			СтатусыДействительнойДоверенности().Найти(СведенияМЧД.СтатусВРеестреФНС) <> Неопределено;

		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтзыва) 
			И СведенияМЧД.ДатаОтзыва > ДатаПодписи Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Истина;
		КонецЕсли;

		Если НЕ ПроверкаСтатусаВРеестреФНС.Успех Тогда
			ПроверкаСтатусаВРеестреФНС.Ошибка =
				СтрШаблон(НСтр("ru = 'Доверенность недействительна. Текущий статус: %1'"),
					СведенияМЧД.СтатусВРеестреФНС);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Ложь;
			ПроверкаСтатусаВРеестреФНС.Ошибка = ПараметрыПроверки.ТекстОшибки;	
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПолномочий = ПроверкаДоверенности.ПроверкаПолномочий;
	ПроверкаПолномочий.ДатаПроверки = ДатаПроверки;
	
	Если СведенияМЧД.СовместныеПолномочия Или СведенияМЧД.НесколькоПредставителей Тогда
		
		ПроверкаПолномочий.Успех = Ложь;
		
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Доверенность содержит несколько представителей.'", КодЯзыка);
		ТекстОписания = НСтр("ru = 'Автоматическая проверка таких доверенностей не поддерживается в этой версии программы.'", КодЯзыка);
		ТекстРешения = НСтр("ru = 'Отметьте вручную или запросите у контрагента документ, подписанный другой доверенностью.'", КодЯзыка);
		ПроверкаПолномочий.Ошибка = СтрШаблон("%1 %2 %3", ТекстОшибки, ТекстОписания, ТекстРешения);
	Иначе
	
		ПроверкаПолномочий.Успех = НЕ ПараметрыПроверки.СведенияМЧД.ПолномочияОграничены
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПроверки.ЭлектронныйДокумент);
	
		Если НЕ ПроверкаПолномочий.Успех Тогда
		
			Если НЕ ПравилоНастроено(ПараметрыПроверки.СведенияМЧД.ПравилоПроверки) Тогда
			
				ПроверкаПолномочий.Ошибка =
					МашиночитаемыеДоверенностиКлиентСервер.ТекстНеобходимостиРучнойПроверкиПолномочий();
			
			Иначе
			
				РезультатПроверкиПолномочий = ПроверитьПолномочияДоверенности(
					ПараметрыПроверки.СведенияМЧД.Ссылка, ПараметрыПроверки.ЭлектронныйДокумент);
			
				ПроверкаПолномочий.Успех = РезультатПроверкиПолномочий.Успех;
				ПроверкаПолномочий.Ошибка = РезультатПроверкиПолномочий.ТекстОшибки;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СопоставлениеДоверителя = ПроверкаДоверенности.СопоставлениеДоверителя;
	СопоставлениеДоверителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИННДоверителя) Тогда
		СопоставлениеДоверителя.Успех = Ложь;				
		СопоставлениеДоверителя.Ошибка = ПараметрыПроверки.ТекстОшибки; 
	ИначеЕсли СведенияМЧД.ИННДоверителя = ПараметрыПроверки.ИННДоверителя
		Или (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе) 
			И ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе.Успех) Тогда
		СопоставлениеДоверителя.Успех = Истина;
	Иначе
		СопоставлениеДоверителя.Успех = Ложь;
		СопоставлениеДоверителя.Ошибка = 
			СтрШаблон(НСтр("ru = 'ИНН %1 доверителя не соответствует ИНН %2 в содержании электронного документа.'"),
				СведенияМЧД.ИННПредставителя, ПараметрыПроверки.ИННДоверителя);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СопоставлениеПредставителя = ПроверкаДоверенности.СопоставлениеПредставителя;
	СопоставлениеПредставителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	Если Не ЗначениеЗаполнено(ИННПредставителя) Тогда
		СопоставлениеПредставителя.Успех = Ложь;
		СопоставлениеПредставителя.Ошибка = ПараметрыПроверки.ТекстОшибки;
	ИначеЕсли СведенияМЧД.ИННПредставителя = ИННПредставителя Тогда
		СопоставлениеПредставителя.Успех = Истина;
	Иначе
		СопоставлениеПредставителя.Успех = Ложь;
		СопоставлениеПредставителя.Ошибка = СтрШаблон(
			НСтр("ru = 'ИНН %1 представителя по доверенности не соответствует ИНН %2 владельца электронной подписи.'"),
				СведенияМЧД.ИННПредставителя, ИННПредставителя);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПериодаДействия = ПроверкаДоверенности.ПроверкаПериодаДействия;
	ПроверкаПериодаДействия.Выполнено = Истина;
	ПроверкаПериодаДействия.ДатаПроверки = ДатаПроверки;
	ДатаПодписиНачалоДня = НачалоДня(ДатаПодписи);
	ПроверкаПериодаДействия.Успех = ДатаПодписиНачалоДня >= НачалоДня(СведенияМЧД.ДатаВыдачи)
									И ДатаПодписиНачалоДня <= НачалоДня(СведенияМЧД.ДатаОкончания);
	Если НЕ ПроверкаПериодаДействия.Успех Тогда
		ПроверкаПериодаДействия.Ошибка =
			НСтр("ru = 'Дата подписи документа не соответствует периоду действия доверенности.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикОбновления

// Удаляет устаревшие записи регистра "Результаты проверки МЧД оператором".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыПроверкиМЧДОператором.ПодписанныйОбъект,
		|	РезультатыПроверкиМЧДОператором.Отпечаток
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиЭД КАК МашиночитаемыеДоверенностиЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧДОператором
		|		ПО МашиночитаемыеДоверенностиЭД.ЭлектронныйДокумент = РезультатыПроверкиМЧДОператором.ПодписанныйОбъект
		|ГДЕ
		|	МашиночитаемыеДоверенностиЭД.МЧД = &МЧД";
	
	Запрос.УстановитьПараметр("МЧД", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.РезультатыПроверкиМЧДОператором);
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Машиночитаемые доверенности электронных документов".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(Доверенность)
	
	НаборЗаписей = РегистрыСведений.МашиночитаемыеДоверенностиЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МЧД.Установить(Доверенность);
	ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Электронные подписи по МЧД".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.Доверенность = &Доверенность";
	
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.ЭлектронныеПодписиПоМЧД);
	
КонецПроцедуры

// Проверить необходимость удаления доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  Удалить - Булево
Процедура ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Доверенность, Удалить)
	
	Если Не ЗначениеЗаполнено(Доверенность.ДатаСоздания) Тогда
		Удалить = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет набор записей регистра сведений, полученный запросом.
// 
// Параметры:
//  Запрос - Запрос - текст запроса должен содержать все измерения регистра в выбираемых полях.
//  РегистрСведенийМенеджер - РегистрСведенийМенеджер.РезультатыПроверкиМЧДОператором
//                          - РегистрСведенийМенеджер.ЭлектронныеПодписиПоМЧД
Процедура ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрСведенийМенеджер)
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			НаборЗаписей.Отбор[Колонка.Имя].Установить(ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает правило проверки полномочий.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_СоздатьПравилоПроверкиПолномочий(Доверенность)
	
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность,
		"УдалитьСкриптПроверкиПолномочий, ПолномочияОграничены");
	
	Если НЕ РеквизитыМЧД.ПолномочияОграничены ИЛИ НЕ ЗначениеЗаполнено(РеквизитыМЧД.УдалитьСкриптПроверкиПолномочий)
		ИЛИ ЗначениеЗаполнено(РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(Доверенность)) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоОбъект = Справочники.ПравилаПроверкиПолномочийМЧД.СоздатьЭлемент();
	ПравилоОбъект.Скрипт = РеквизитыМЧД.УдалитьСкриптПроверкиПолномочий;
	ПравилоОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Доверенность = Доверенность;
	МенеджерЗаписи.ПравилоПроверки = ПравилоОбъект.Ссылка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

// Вызывается после подписания доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеВыгрузки - ДвоичныеДанные - доверенность в формате xml.
//  СвойстваПодписи - Структура - одноименная структура, полученная в результате выполнения
//                    метода см. ЭлектроннаяПодписьКлиент.Подписать.
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Истина, если требуется проверить МЧД на клиенте.
//
Процедура ВыполнитьДействияПослеПодписания(Доверенность, ДанныеВыгрузки, СвойстваПодписи, 
		ТребуетсяПроверкаМЧДНаКлиенте = Ложь) Экспорт
	
	ИмяФайлаМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Доверенность);
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектДоверенность = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(Доверенность);
		ОбъектДоверенность.ИмяФайлаВыгрузка = ИмяФайлаМЧД + ".xml";
		ОбъектДоверенность.XMLфайлМЧД = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
		ОбъектДоверенность.ДатаПодписания = СвойстваПодписи.ДатаПодписи;
		
		ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
		ДанныеДляПроверки.ДанныеДоверенности = ДанныеВыгрузки;
		ДанныеДляПроверки.ДанныеПодписи = СвойстваПодписи.Подпись;
		ЗаполнитьПодписанаВерна(ОбъектДоверенность, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте); 
		ОбъектДоверенность.Записать();
		ЗафиксироватьТранзакцию();
		ОбъектДоверенность.Разблокировать();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Подписание доверенности'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные доверенности. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
			
	КонецПопытки;
	
КонецПроцедуры

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителей(ДанныеДоверенности)
	
	Если ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = ФорматМЧД_2022() Тогда
		Возврат ИННДоверителейВУтвержденномФормате(ДанныеДоверенности);
	ИначеЕсли ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = ФорматМЧД_2022_Версия_002() Тогда
		Возврат ИННДоверителейВУтвержденномФормате_Версия_002(ДанныеДоверенности);			
	Иначе
		Возврат ИННДоверителейВПилотномФормате(ДанныеДоверенности);	
	КонецЕсли;
		
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в пилотном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителейВПилотномФормате(ДанныеДоверенности)
	
	Поток = ДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "СвДоверит"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Возврат НайтиИННДоверителей(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Поток.Закрыть();
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в утвержденном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителейВУтвержденномФормате(ДанныеДоверенности)
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	
	Доверенность = ДанныеИзФайлаОбменаВУтвержденномФормате(ДанныеДоверенности).ДанныеМЧД;
	
	Если Доверенность.ТипОрганизации = "ЮЛ" Тогда
		Результат.ИННФЛ = Доверенность.ЛицоБезДовФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИО" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИП" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ФЛ" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Результат.ИННФЛ;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица. формата версии 002
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в утвержденном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция ИННДоверителейВУтвержденномФормате_Версия_002(ДанныеДоверенности)
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	
	Доверенность = ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ДанныеДоверенности).ДанныеМЧД;
	
	Если Доверенность.ТипОрганизации = "ЮЛ" Тогда
		Результат.ИННФЛ = Доверенность.ЛицоБезДовФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИО" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ИП" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ФЛ" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Результат.ИННФЛ;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает значение атрибутов ИННФЛ, ИННЮЛ.
// 
// Параметры:
//  ЧтениеXML - ЧтениеXML
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка, 
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
Функция НайтиИННДоверителей(ЧтениеXML) 
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	
	СведенияОДоверителе = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоСведенияОДоверителе = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И (ЧтениеXML.Имя = "РосОргДовер" Или ЧтениеXML.Имя = "ИнОргДовер" Или ЧтениеXML.Имя = "ФЛДовер");
			
		Если ЭтоСведенияОДоверителе Тогда
			СведенияОДоверителе = ЧтениеXML.Имя;
		КонецЕсли;
		
		Если СведенияОДоверителе = "РосОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвФЛ", "ИННФЛ");
			
		ИначеЕсли СведенияОДоверителе = "ИнОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвРукОП", "ИННФЛ");
			
		ИначеЕсли СведенияОДоверителе = "ФЛДовер" Тогда
			
			ИННФЛ = ЧтениеXML.ЗначениеАтрибута("ИННФЛ");
			ИННЮЛ = ИННФЛ;
			
		КонецЕсли;
		
		Если ЭтоСведенияОДоверителе Тогда
			Результат.ИННФЛ = ИННФЛ;
			Результат.ИННЮЛ = ИННЮЛ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выгрузки неподписанной доверенности.
// 
// Параметры:
//  РезультатВыгрузки - Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
Функция РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки)
	
	РезультатВыгрузки.Ошибка = Истина;
	РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Выгружать в файл можно только подписанные доверенности. Подпишите и повторите выгрузку.'");
	Возврат РезультатВыгрузки;
	
КонецФункции

// Возвращает количество видов полномочий представителя МЧД.
// 
// Возвращаемое значение:
//  Число
Функция КоличествоВидовПолномочийПредставителя()
	
	Возврат 25;
	
КонецФункции

// Проверяет, принадлежит ли ИНН гос. органу, являющемуся удостоверяющим центром.
// 
// Параметры:
//  ИНН - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИННГосОрганаЯвляющегосяУдостоверяющимЦентром(Знач ИНН)
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИНН, 12);
	ИННКазначейства = "007710568760";
	ИННЦентральногоБанка = "007702235133";
	
	Возврат ИНН = ИННКазначейства Или ИНН = ИННЦентральногоБанка;
	
КонецФункции

// Проверяет, является ли сертификат сертификатом должностного лица гос. органа, являющегося удостоверяющим центром.
// 
// Параметры:
//  СвойстваСубъектаСертификата - см. КриптографияБЭД.СвойстваСубъектаСертификата
//  СвойстваИздателяСертификата - см. КриптографияБЭД.СвойстваИздателяСертификата
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоДанныеСертификатаДолжностногоЛицаГосОрганаУЦ(СвойстваСубъектаСертификата, СвойстваИздателяСертификата)
	
	ИздательГосОрганУЦ = ЭтоИННГосОрганаЯвляющегосяУдостоверяющимЦентром(СвойстваИздателяСертификата.ИНН);
	
	ОрганизацияВСубъектеЗаполнена = ЗначениеЗаполнено(СвойстваСубъектаСертификата.Организация);
	
	Возврат ИздательГосОрганУЦ И ОрганизацияВСубъектеЗаполнена;
	
КонецФункции

// Проверяет, является ли сертификат сертификатом должностного лица гос. органа, являющегося удостоверяющим центром.
// 
// Параметры:
//  Сертификат - СертификатКриптографии
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСертификатДолжностногоЛицаГосОрганаУЦ(Сертификат)
	
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
	
	Возврат ЭтоДанныеСертификатаДолжностногоЛицаГосОрганаУЦ(
		СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	
КонецФункции

#Область ПроверкаДоверенности

// Проверяет корректность оформления доверенности.
// 
// Параметры:
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатПроверкиДоверенности
Функция ПроверитьДоверенность(ДанныеДляПроверки, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатПроверкиПодписи = КриптографияБЭД.ПроверитьПодпись(Неопределено, ДанныеДляПроверки.ДанныеДоверенности,
		ДанныеДляПроверки.ДанныеПодписи, КонтекстДиагностики);
	
	Возврат РезультатПроверкиДоверенности(ДанныеДляПроверки.ДанныеДоверенности, РезультатПроверкиПодписи,
		КонтекстДиагностики);
	
КонецФункции

// Возвращает результат проверки доверенности.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные
//  РезультатПроверкиПодписи - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//    * Результат - Булево - Истина, если доверенность оформлена верно.
//    * ТекстОшибки - Строка - свойство заполнено, если Результат - Ложь.
//    * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция РезультатПроверкиДоверенности(ДанныеДоверенности, РезультатПроверкиПодписи, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки, КонтекстДиагностики", Ложь, "", КонтекстДиагностики);
	
	СоответствуетФормату = Ложь;
	ИННПодписантаФЛ = "";
	ИННПодписантаЮЛ = "";
	ИННИздателяСертификата = "";
	Сертификат = Неопределено;
	СвойстваСубъектаСертификата = Неопределено;
	СвойстваИздателяСертификата = Неопределено;
	Ошибки = Новый Массив;
	ЭтоПередоверие = Ложь;
	
	ИННДоверителей = ИННДоверителей(ДанныеДоверенности);
	
	ИННДоверителяФЛ = ИННДоверителей.ИННФЛ;
	ИННДоверителяЮЛ = ИННДоверителей.ИННЮЛ;
	
	СвойстваПодписи = РезультатПроверкиПодписи.СвойстваПодписи;
	Если СвойстваПодписи.Сертификат <> Неопределено Тогда
		Сертификат = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		СвойстваСубъектаСертификата = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
		
		Если ЗначениеЗаполнено(СвойстваСубъектаСертификата.ИННЮЛ) Тогда
			ИННПодписантаЮЛ = СвойстваСубъектаСертификата.ИННЮЛ;
			ИННПодписантаФЛ = СвойстваСубъектаСертификата.ИНН;
		Иначе
			ИННПодписантаЮЛ = Прав(СвойстваСубъектаСертификата.ИНН, 10);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписьВерна = РезультатПроверкиПодписи.СвойстваПодписи.ПодписьВерна;
	Если РезультатПроверкиПодписи.ОписаниеОшибки = "" Тогда
		СертификатДействителен = Истина;
	Иначе
		СертификатДействителен = Ложь;
		Ошибки.Добавить(РезультатПроверкиПодписи.ОписаниеОшибки);
	КонецЕсли;
	
	Попытка
		
		Результат = ПрочитатьДанныеXML(ДанныеДоверенности);
		
		Если НЕ Результат.Успех Тогда
			РезультатПроверки.ТекстОшибки = Результат.ТекстОшибки;
			Возврат РезультатПроверки;
		КонецЕсли;
		
		СоответствуетФормату = Истина;
		ДанныеXDTO = Результат.ДанныеМЧД;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Передов") <> Неопределено Тогда
			ЭтоПередоверие = Истина;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Проверка машиночитаемой доверенности.'");
		ТекстОшибки = НСтр("ru = 'Ошибка проверки файла доверенности: файл не соответствует формату ФНС.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		
		ТекстОшибки = НСтр("ru = 'Доверенность не соответствует формату ФНС.'");
		Ошибки.Добавить(ТекстОшибки);
		
	КонецПопытки;
	
	ДоверенностьПодписанаДоверителем = (ИННПодписантаФЛ = ИННДоверителяФЛ) Или ЭтоПередоверие;
	Если Не ДоверенностьПодписанаДоверителем И ЗначениеЗаполнено(ИННПодписантаФЛ)
		И ЗначениеЗаполнено(ИННДоверителяФЛ) Тогда
		ТекстОшибки = НСтр("ru = 'Доверенность подписана лицом, которое не является доверителем по данной доверенности.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ДоверенностьВыданаГосОрганомУЦ = ЭтоИННГосОрганаЯвляющегосяУдостоверяющимЦентром(ИННДоверителяЮЛ);
	ЭтоДоверенностьОтИП = ИННДоверителяФЛ = ИННДоверителяЮЛ ИЛИ НЕ ЗначениеЗаполнено(ИННДоверителяЮЛ);
	ДоверительЯвляетсяУполномоченнымПредставителемОрганизации =
		ЭтоДоверенностьОтИП
		ИЛИ (ИННПодписантаЮЛ = ИННДоверителяЮЛ)
		Или (ДоверенностьВыданаГосОрганомУЦ
		И ЭтоСертификатДолжностногоЛицаГосОрганаУЦ(Сертификат));
		
	Если Не ДоверительЯвляетсяУполномоченнымПредставителемОрганизации Тогда
		ТекстОшибки = НСтр("ru = 'Доверенность подписана лицом, которое не является уполномоченным представителем организации.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	СертификатПодписантаНеСодержитИННФизЛица = НЕ ЗначениеЗаполнено(ИННПодписантаФЛ); // выпускались по 21.09.2021
	
	РезультатПроверки.ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	РезультатПроверки.Результат = ПодписьВерна И СертификатДействителен
		И (СертификатПодписантаНеСодержитИННФизЛица ИЛИ ДоверенностьПодписанаДоверителем)
		И ДоверительЯвляетсяУполномоченнымПредставителемОрганизации И СоответствуетФормату;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

// Определяет видимость команд МЧД При получении данных динамического списка и кеширует значение в данных строки
// 
// Параметры:
//  Строки - СтрокиДинамическогоСписка
//
Процедура ОпределитьВидимостьКомандМЧДПриПолученииДанныхСпискаНаСервере(Строки) Экспорт
	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;
	ДатаПроверки = ТекущаяДатаСеанса();
	Доверенности = Новый Массив(Строки.Количество());
	Индекс = 0;
	Для Каждого ОписаниеСтрокиДинамическогоСписка Из Строки Цикл
		Доверенности[Индекс] = ОписаниеСтрокиДинамическогоСписка.Значение.Данные.Ссылка;
		Индекс = Индекс + 1;
	КонецЦикла;
	РезультатПроверки = ДоверенностиДействительны(Доверенности, ДатаПроверки);
	Для Каждого ОписаниеСтрокиДинамическогоСписка Из Строки Цикл
		ДанныеСтроки = ОписаниеСтрокиДинамическогоСписка.Значение.Данные;
		ВидимостьКомандМЧД = Новый Соответствие;
		ВидимостьКомандМЧД.Вставить("ОтменаДоверенности", РезультатПроверки[ДанныеСтроки.Ссылка]);
		ДанныеСтроки["ВидимостьКомандМЧД"] = ВидимостьКомандМЧД;
	КонецЦикла;
КонецПроцедуры

// Проверяет, является ли файл с данным расширением файлом подписи.
// 
// Параметры:
//  РасширениеФайла - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоРасширениеФайлаПодписи(РасширениеФайла)
	
	Возврат РасширенияФайловПодписи().Найти(РасширениеФайла) <> Неопределено;
	
КонецФункции

// Возвращает расширения файлов подписи.
// 
// Возвращаемое значение:
//  Массив из Строка 
Функция РасширенияФайловПодписи()
	
	МассивРасширений = Новый Массив;
	МассивРасширений.Добавить("p7s");
	МассивРасширений.Добавить("sig");
	МассивРасширений.Добавить("sign");
	МассивРасширений.Добавить("sgn");
	
	Возврат МассивРасширений;
	
КонецФункции

// Возвращает ИНН доверителя.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Строка
Функция ИННДоверителя(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН");
		ДоверительИНН = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДоверительЮЛ_ИНН), ЗначенияРеквизитов.ДоверительЮЛ_ИНН,
			ЗначенияРеквизитов.ДоверительФЛ_ИНН);
	Иначе
		ДоверительИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДоверительИНН");
	КонецЕсли;
	
	Возврат ДоверительИНН;
	
КонецФункции

// Параметры:
//  ДвоичныеДанныеАрхива - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
//  * ОшибкаДоступаНаLinux - Булево
//  * ДанныеФайлов - Неопределено,Структура:
//  ** ДанныеМЧД - ДвоичныеДанные - Данные файла машиночитаемой доверенности.
//  ** ДанныеПодписи - ДвоичныеДанные - Данные подписи.
Функция ПрочитатьАрхивМЧД(ДвоичныеДанныеАрхива)
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаДоступаНаLinux", Ложь);
	Результат.Вставить("ДанныеФайлов", Неопределено);
	
	ВидОперации = НСтр("ru = 'Чтение архива машиночитаемой доверенности'");
	ШаблонОшибки = НСтр("ru = 'Ошибка при чтении архива: %1'");
	
	ВременныйКаталог = РаботаСФайламиБЭД.ВременныйКаталог();
	
	Попытка
		ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеАрхива.ОткрытьПотокДляЧтения());
		ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
		ЧтениеZipФайла.Закрыть();
	Исключение
		КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось распаковать архив машиночитаемой доверенности по причине %1'"), КраткийТекстОшибки);
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Результат;
	КонецПопытки;
	
	ФайлыXML = НайтиФайлы(ВременныйКаталог, "*.xml", Истина);
	Если ФайлыXML.Количество() <> 1 Тогда
		Если ФайлыXML.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'нет файла xml'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				НСтр("ru = 'несколько файлов xml'"));
		КонецЕсли;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ДанныеМЧД = Новый ДвоичныеДанные(ФайлыXML[0].ПолноеИмя);
	Исключение
		Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
			Результат.ОшибкаДоступаНаLinux = Истина;
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать xml файл по причине:'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Результат;
	КонецПопытки;
	
	МассивРасширений = РасширенияФайловПодписи();
	Для Индекс = 0 По МассивРасширений.ВГраница() Цикл
		МассивРасширений[Индекс] = СтрШаблон("*.%1", МассивРасширений[Индекс]);
	КонецЦикла;
	
	ФайлыПодписей = Новый Массив;
	Для Каждого РасширениеПодписи Из МассивРасширений Цикл
		// обход ошибки платформы 60003608
		ФайлыСРасширением = НайтиФайлы(ВременныйКаталог, РасширениеПодписи, Истина);
		Для Индекс = 0 По ФайлыСРасширением.ВГраница() Цикл
			ФайлыСРасширением[Индекс] = ФайлыСРасширением[Индекс].ПолноеИмя;		
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыПодписей, ФайлыСРасширением, Истина);	
	КонецЦикла;
		
	Если ФайлыПодписей.Количество() <> 1 Тогда
		МассивПредставленийРасширений = Новый Массив;
		Для Каждого РасширениеПодписи Из МассивРасширений Цикл
			МассивПредставленийРасширений.Добавить(СтрШаблон("(%1)", РасширениеПодписи)); 
		КонецЦикла;
		СтрокаРасширений = СтрСоединить(МассивПредставленийРасширений, "; ");
		Если ФайлыПодписей.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				СтрШаблон(НСтр("ru = 'нет файла подписи %1'"), СтрокаРасширений));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				СтрШаблон(НСтр("ru = 'несколько файлов подписи %1'"), СтрокаРасширений));
		КонецЕсли;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
		Возврат Результат;
	КонецЕсли;
	ДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписей[0]);
	
	ПодписьИзBase64 = ПолучитьДвоичныеДанныеИзBase64ДвоичныхДанных(ДанныеПодписи);
	Если ЗначениеЗаполнено(ПодписьИзBase64) Тогда
		ДанныеПодписи = ПодписьИзBase64;
	КонецЕсли;
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(ВременныйКаталог);
	
	ДанныеФайлов = Новый Структура;
	ДанныеФайлов.Вставить("ДанныеМЧД", ДанныеМЧД);
	ДанныеФайлов.Вставить("ДанныеПодписи", ДанныеПодписи);
	
	Результат.ДанныеФайлов = ДанныеФайлов;
	
	Возврат Результат;
	
КонецФункции

#Область ИзменениеАтрибутовАрхива

// Исправляет значение полей архива для возможности чтения на Linux
//
// Параметры:
//  ДанныеАрхива - ДвоичныеДанные - данные zip архива.
//  ЗначениеВнутреннихАтрибутов - Число - значение поля "ВнутренниеАтрибуты" для архива (число 16 бит без знака)
//  ЗначениеВнешнихАтрибутов - Число - значение поля "ВнешниеАтрибуты" для архива (число 32 бита)
//  
// Возвращаемое значение:
// - ДвоичныеДанные - исправленный архив
// - Строка - описание ошибки, если таковая происходит при чтении архива
Функция ИзменитьАтрибутыФайловАрхива(ДанныеАрхива, ЗначениеВнутреннихАтрибутов, ЗначениеВнешнихАтрибутов)
	
	Если ТипЗнч(ДанныеАрхива) <> Тип("ДвоичныеДанные") Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для двоичных данных архива.'"),
			Строка(ТипЗнч(ДанныеАрхива)));
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Попытка
		ПроверитьЦелоеЧисло(ЗначениеВнутреннихАтрибутов, 0, 65535);
		ПроверитьЦелоеЧисло(ЗначениеВнешнихАтрибутов, 0, 4294967295);
	Исключение
		Возврат НСтр("ru = 'Ошибка при выполнении проверки полей атрибутов:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		Поток = ДанныеАрхива.ОткрытьПотокДляЧтения();
		ПотокРезультата = Новый ПотокВПамяти;
		
		ПозицияНачалаБлока = 0;
		
		ТекущаяСигнатура = ПрочитатьНатуральноеЧислоИзПотока(Поток, 4);
		ЗаписатьНатуральноеЧислоВПоток(ПотокРезультата, ТекущаяСигнатура, 4);
		
		Если ТекущаяСигнатура <> 67324752 Тогда
			ВызватьИсключение НСтр("ru = 'Неверная сигнатура архива:'") + Строка(ТекущаяСигнатура);
		КонецЕсли;
	
	
		МассивФайлов = Новый Массив;
	
		Пока Истина Цикл
			// Заголовок файла архива:
			// (1) Минимальная версия: 2 байта
			// (2) Регистр флагов: 2 байта
			// (3) Метод сжатия: 2 байта
			// (4) Время модификации файла: 2 байта
			// (5) Дата модификации файла: 2 байта
			// (6) Контрольная сумма: 4 байта
			// (7) Сжатый размер: 4 байта
			// (8) Несжатый размер: 4 байта
			// (9) Длина имени файла: 2 байта
			// (10) Длина поля дополнительных данных: 2 байта
		
			БуферЗаголовка = ПрочитатьБуферИзПотока(Поток, 26);
		
			Попытка
				// Минимальная версия
				МинимальнаяВерсия = БуферЗаголовка.ПрочитатьЦелое16(0, ПорядокБайтов.LittleEndian);
				// Регистр флагов
				РегистрФлагов = БуферЗаголовка.ПрочитатьЦелое16(2, ПорядокБайтов.LittleEndian);
				// Метод сжатия
				МетодСжатия = БуферЗаголовка.ПрочитатьЦелое16(4, ПорядокБайтов.LittleEndian);
				// Время модификации файла
				ВремяМодификацииФайла = БуферЗаголовка.ПрочитатьЦелое16(6, ПорядокБайтов.LittleEndian);
				// Дата модификации файла
				ДатаМодификацииФайла = БуферЗаголовка.ПрочитатьЦелое16(8, ПорядокБайтов.LittleEndian);
				// Контрольная сумма файла
				КонтрольнаяСумма = БуферЗаголовка.ПрочитатьЦелое32(10, ПорядокБайтов.LittleEndian);
				// Сжатый размер
				СжатыйРазмер = БуферЗаголовка.ПрочитатьЦелое32(14, ПорядокБайтов.LittleEndian);
				// Несжатый размер
				НесжатыйРазмер = БуферЗаголовка.ПрочитатьЦелое32(18, ПорядокБайтов.LittleEndian);
				// Длина имени файла
				ДлинаИмениФайла = БуферЗаголовка.ПрочитатьЦелое16(22, ПорядокБайтов.LittleEndian);
				// Длина дополнительных данных
				ДлинаДополнительныхДанных = БуферЗаголовка.ПрочитатьЦелое16(24, ПорядокБайтов.LittleEndian);
			Исключение
				ВызватьИсключение НСтр("ru = 'Ошибка при получении значений из структуры заголовка файла:'")
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		
			Если МетодСжатия = 0 Тогда
				ЕстьСжатие = Ложь;
			ИначеЕсли МетодСжатия = 8 Тогда
				ЕстьСжатие = Истина;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверное значение: %1 для метода сжатия.'"), Строка(МетодСжатия));
			КонецЕсли;
		
			Если ДлинаИмениФайла < 1 Тогда
				ВызватьИсключение НСтр("ru = 'Нулевая длина имени файла недопустима.'");
			КонецЕсли;
		
			БуферИмени = ПрочитатьБуферИзПотока(Поток, ДлинаИмениФайла);
			
			Если ДлинаДополнительныхДанных > 0 Тогда
				БуферДополнительныхДанных = ПрочитатьБуферИзПотока(Поток, ДлинаДополнительныхДанных);
			Иначе
				БуферДополнительныхДанных = Неопределено;
			КонецЕсли;
			
			ЗаписатьБуферВПоток(ПотокРезультата, БуферЗаголовка);
			ЗаписатьБуферВПоток(ПотокРезультата, БуферИмени);
			
			Если БуферДополнительныхДанных <> Неопределено Тогда
				ЗаписатьБуферВПоток(ПотокРезультата, БуферДополнительныхДанных);
			КонецЕсли;
		
			Если ЕстьСжатие Тогда
				РазмерДанныхФайла = СжатыйРазмер;
			Иначе
				РазмерДанныхФайла = НесжатыйРазмер;
			КонецЕсли;
			
			Если РазмерДанныхФайла > 0 Тогда
				ПрямоеКопированиеВПоток(Поток, ПотокРезультата, РазмерДанныхФайла);
			КонецЕсли;
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Offset", ПозицияНачалаБлока);
			ДанныеФайла.Вставить("Compress", ЕстьСжатие);
			ДанныеФайла.Вставить("MinVer", МинимальнаяВерсия);
			ДанныеФайла.Вставить("Flags", РегистрФлагов);
			ДанныеФайла.Вставить("Date", ДатаМодификацииФайла);
			ДанныеФайла.Вставить("Time", ВремяМодификацииФайла);
			ДанныеФайла.Вставить("CRC32", КонтрольнаяСумма);
			ДанныеФайла.Вставить("Name", БуферИмени);
			ДанныеФайла.Вставить("Extra", БуферДополнительныхДанных);
			
			МассивФайлов.Добавить(ДанныеФайла);
			
			ПозицияНачалаБлока = Поток.ТекущаяПозиция();
			
			ТекущаяСигнатура = ПрочитатьНатуральноеЧислоИзПотока(Поток, 4);
			ЗаписатьНатуральноеЧислоВПоток(ПотокРезультата, ТекущаяСигнатура, 4);
			
			Если ТекущаяСигнатура = 67324752 Тогда
				Продолжить;
			ИначеЕсли ТекущаяСигнатура = 33639248 Тогда
				Прервать;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная структура по сигнатуре:'") + Строка(ТекущаяСигнатура);
			КонецЕсли;
		КонецЦикла;
		
		НомерФайла = 0;
		МассивПроверки = Новый Массив;
		НачалоКаталога = ПозицияНачалаБлока;
		
		Пока Истина Цикл
			// (1) Версия для создания: 2 байта
			// (2) Минимальная версия: 2 байта
			// (3) Регистр флагов: 2 байта
			// (4) Метод сжатия: 2 байта
			// (5) Время модификации файла: 2 байта
			// (6) Дата модификации файла: 2 байта
			// (7) Контрольная сумма: 4 байта
			// (8) Сжатый размер: 4 байта
			// (9) Несжатый размер: 4 байта
			// (10) Длина имени файла: 2 байта
			// (11) Длина дополнительных данных: 2 байта
			// (12) Длина комментария: 2 байта
			// (13) Номер диска: 2 байта
			// (14) Внутренние атрибуты файла: 2 байта
			// (15) Внешние атрибуты файла: 4 байта
			// (16) Смещение до начала записи файла: 4 байта
			
			БуферЗаголовка = ПрочитатьБуферИзПотока(Поток, 42);
			
			Попытка
				// (1) Версия для создания: 2 байта
				ВерсияСозданияФайла = БуферЗаголовка.ПрочитатьЦелое16(0, ПорядокБайтов.LittleEndian);
				// (2) Минимальная версия: 2 байта
				МинимальнаяВерсия = БуферЗаголовка.ПрочитатьЦелое16(2, ПорядокБайтов.LittleEndian);
				// (3) Регистр флагов: 2 байта
				РегистрФлагов = БуферЗаголовка.ПрочитатьЦелое16(4, ПорядокБайтов.LittleEndian);
				// (4) Метод сжатия: 2 байта
				МетодСжатия = БуферЗаголовка.ПрочитатьЦелое16(6, ПорядокБайтов.LittleEndian);
				// (5) Время модификации файла: 2 байта
				ВремяМодификацииФайла = БуферЗаголовка.ПрочитатьЦелое16(8, ПорядокБайтов.LittleEndian);
				// (6) Дата модификации файла: 2 байта
				ДатаМодификацииФайла = БуферЗаголовка.ПрочитатьЦелое16(10, ПорядокБайтов.LittleEndian);
				// (7) Контрольная сумма: 4 байта
				КонтрольнаяСумма = БуферЗаголовка.ПрочитатьЦелое32(12, ПорядокБайтов.LittleEndian);
				// (8) Сжатый размер: 4 байта
				СжатыйРазмер = БуферЗаголовка.ПрочитатьЦелое32(16, ПорядокБайтов.LittleEndian);
				// (9) Несжатый размер: 4 байта
				НесжатыйРазмер = БуферЗаголовка.ПрочитатьЦелое32(20, ПорядокБайтов.LittleEndian);
				// (10) Длина имени файла: 2 байта
				ДлинаИмениФайла = БуферЗаголовка.ПрочитатьЦелое16(24, ПорядокБайтов.LittleEndian);
				// (11) Длина дополнительных данных: 2 байта
				ДлинаДополнительныхДанных = БуферЗаголовка.ПрочитатьЦелое16(26, ПорядокБайтов.LittleEndian);
				// (12) Длина комментария: 2 байта
				ДлинаКомментария = БуферЗаголовка.ПрочитатьЦелое16(28, ПорядокБайтов.LittleEndian);
				// (13) Номер диска: 2 байта
				НомерДиска = БуферЗаголовка.ПрочитатьЦелое16(30, ПорядокБайтов.LittleEndian);
				// (14) Внутренние атрибуты файла: 2 байта
				ВнутренниеАтрибуты = БуферЗаголовка.ПрочитатьЦелое16(32, ПорядокБайтов.LittleEndian);
				// (15) Внешние атрибуты файла: 4 байта
				ВнешниеАтрибуты = БуферЗаголовка.ПрочитатьЦелое32(34, ПорядокБайтов.LittleEndian);
				// (16) Смещение до начала записи файла: 4 байта
				СмещениеДоНачала = БуферЗаголовка.ПрочитатьЦелое32(38, ПорядокБайтов.LittleEndian);
			Исключение
				ВызватьИсключение НСтр("ru = 'Ошибка при чтении полей структуры каталога для файла:'")
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если МетодСжатия = 0 Тогда
				ЕстьСжатие = Ложь;
			ИначеЕсли МетодСжатия = 8 Тогда
				ЕстьСжатие = Истина;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверное значение: %1 для метода сжатия в каталоге файла.'"),
					Строка(МетодСжатия));
			КонецЕсли;
			
			Если ДлинаИмениФайла < 1 Тогда
				ВызватьИсключение НСтр("ru = 'Указана нулевая длина имени файла.'");
			КонецЕсли;
			
			БуферИмени = ПрочитатьБуферИзПотока(Поток, ДлинаИмениФайла);
			
			Если ДлинаДополнительныхДанных > 0 Тогда
				БуферДополнительныхДанных = ПрочитатьБуферИзПотока(Поток, ДлинаДополнительныхДанных);
			Иначе
				БуферДополнительныхДанных = Неопределено;
			КонецЕсли;
			
			Если ДлинаКомментария > 0 Тогда
				БуферКомментария = ПрочитатьБуферИзПотока(Поток, ДлинаКомментария);
			Иначе
				БуферКомментария = Неопределено;
			КонецЕсли;
			
			Если МассивФайлов.Количество() <= НомерФайла Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружено файлов: %1, но найдена запись каталога файла: %2.'"),
					Строка(МассивФайлов.Количество()), Строка(НомерФайла));
			КонецЕсли;
			
			ДанныеФайла = МассивФайлов[НомерФайла];
			НомерФайла = НомерФайла + 1;
			
			ДанныеФайла.Вставить("Ver", ВерсияСозданияФайла);
			ДанныеФайла.Вставить("Comment", БуферКомментария);
			ДанныеФайла.Вставить("IntAttr", ВнутренниеАтрибуты);
			ДанныеФайла.Вставить("ExtAttr", ВнешниеАтрибуты);
			
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Offset", СмещениеДоНачала, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "MinVer", МинимальнаяВерсия, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Compress", ЕстьСжатие, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Flags", РегистрФлагов, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Date", ДатаМодификацииФайла, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Time", ВремяМодификацииФайла, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "CRC32", КонтрольнаяСумма, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Name", БуферИмени, МассивПроверки);
			ПроверитьПолеСтруктурыАрхива(ДанныеФайла, "Extra", БуферДополнительныхДанных, МассивПроверки);
			
			Если МассивПроверки.Количество() > 0 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка при сравнении записи файла и записи каталога файла:'")
					+ Символы.ПС + СтрСоединить(МассивПроверки, Символы.ПС);
			КонецЕсли;
			
			// (14) Внутренние атрибуты файла: 2 байта
			БуферЗаголовка.ЗаписатьЦелое16(32, ЗначениеВнутреннихАтрибутов, ПорядокБайтов.LittleEndian);
			// (15) Внешние атрибуты файла: 4 байта
			БуферЗаголовка.ЗаписатьЦелое32(34, ЗначениеВнешнихАтрибутов, ПорядокБайтов.LittleEndian);
			
			ЗаписатьБуферВПоток(ПотокРезультата, БуферЗаголовка);
			ЗаписатьБуферВПоток(ПотокРезультата, БуферИмени);
			
			Если БуферДополнительныхДанных <> Неопределено Тогда
				ЗаписатьБуферВПоток(ПотокРезультата, БуферДополнительныхДанных);
			КонецЕсли;
			
			Если БуферКомментария <> Неопределено Тогда
				ЗаписатьБуферВПоток(ПотокРезультата, БуферКомментария);
			КонецЕсли;
			
			ПозицияНачалаБлока = Поток.ТекущаяПозиция();
			
			ТекущаяСигнатура = ПрочитатьНатуральноеЧислоИзПотока(Поток, 4);
			ЗаписатьНатуральноеЧислоВПоток(ПотокРезультата, ТекущаяСигнатура, 4);
			
			Если ТекущаяСигнатура = 33639248 Тогда
				Продолжить;
			ИначеЕсли ТекущаяСигнатура = 101010256 Тогда
				Прервать;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная структура по сигнатуре:'") + Строка(ТекущаяСигнатура);
			КонецЕсли;
		КонецЦикла;
		
		// Номер диска: 2 байта
		// Номер диска начала директории: 2 байта
		// Количество записей текущего диска: 2 байта
		// Всего записей: 2 байта
		// Размер директории: 4 байта
		// Смещение директории: 4 байта
		// Длина комментария: 2 байта
		
		БуферЗаголовка = ПрочитатьБуферИзПотока(Поток, 18);
		
		Попытка
			// Номер диска: 2 байта
			НомерДиска = БуферЗаголовка.ПрочитатьЦелое16(0, ПорядокБайтов.LittleEndian);
			// Номер диска начала директории: 2 байта
			НомерДискаНачала = БуферЗаголовка.ПрочитатьЦелое16(2, ПорядокБайтов.LittleEndian);
			// Количество записей текущего диска: 2 байта
			КоличествоЗаписейТекущегоДиска = БуферЗаголовка.ПрочитатьЦелое16(4, ПорядокБайтов.LittleEndian);
			// Всего записей: 2 байта
			КоличествоЗаписей = БуферЗаголовка.ПрочитатьЦелое16(6, ПорядокБайтов.LittleEndian);
			// Размер директории: 4 байта
			ОбщийРазмерДиректории = БуферЗаголовка.ПрочитатьЦелое32(8, ПорядокБайтов.LittleEndian);
			// Смещение директории: 4 байта
			СмещениеДиректории = БуферЗаголовка.ПрочитатьЦелое32(12, ПорядокБайтов.LittleEndian);
			// Длина комментария: 2 байта
			ДлинаКомментария = БуферЗаголовка.ПрочитатьЦелое16(16, ПорядокБайтов.LittleEndian);
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка при чтении полей из буфера окончания:'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если ДлинаКомментария > 0 Тогда
			БуферКомментария = ПрочитатьБуферИзПотока(Поток, ДлинаКомментария);
		Иначе
			БуферКомментария = Неопределено;
		КонецЕсли;
		
		ЗаписатьБуферВПоток(ПотокРезультата, БуферЗаголовка);
		
		Если БуферКомментария <> Неопределено Тогда
			ЗаписатьБуферВПоток(ПотокРезультата, БуферКомментария);
		КонецЕсли;
		
		Если СмещениеДиректории <> НачалоКаталога Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Указанное начало каталога: %1 отличается от обнаруженного: %2.'"),
				Строка(СмещениеДиректории), Строка(НачалоКаталога));
		КонецЕсли;
		
		Если ПозицияНачалаБлока - НачалоКаталога <> ОбщийРазмерДиректории Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Рассчитанный общий размер каталога: %1 отличается от указанного: %2.'"),
				Строка(ПозицияНачалаБлока - НачалоКаталога), Строка(ОбщийРазмерДиректории));
		КонецЕсли;
		
		Если Поток.Размер() <> Поток.ТекущаяПозиция() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'После окончания чтения данных позиция: %1 отличается от размера: %2.'"),
				Строка(Поток.ТекущаяПозиция()), Строка(Поток.Размер()));
		КонецЕсли;
		
		Если КоличествоЗаписей <> НомерФайла Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Указанное количество записей: %1 отличается от найденного: %2.'"),
				Строка(КоличествоЗаписей), Строка(НомерФайла));
		КонецЕсли;
		
		Если НомерФайла <> МассивФайлов.Количество() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Количество записей каталога: %1 отличается от количества файлов: %2.'"),
				 Строка(НомерФайла), Строка(МассивФайлов.Количество()));
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Поток.Закрыть();
		ПотокРезультата.Закрыть();
		
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Поток.Закрыть();
	
	НовыеДанные = ПотокРезультата.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат НовыеДанные;
КонецФункции

// Выполняет чтение натурального числа из потока (предполагается, что младший байт читается первым).
// 
// Параметры:
//  Поток - Поток,ПотокВПамяти,ФайловыйПоток - поток, из которого выполняется чтение.
//  КоличествоБайт - Число - количество байт в числе, которое будет прочитано.
// 
// Возвращаемое значение:
//  - Число - результат чтение.
// 
// Исключение:
//  В случае ошибки вызывается исключение.
Функция ПрочитатьНатуральноеЧислоИзПотока(Поток, Знач КоличествоБайт)
	
	ПроверитьПотокЧтения(Поток);
	ПроверитьЦелоеЧисло(КоличествоБайт, 1, Неопределено);
	
	Буфер = Новый БуферДвоичныхДанных(КоличествоБайт, ПорядокБайтов.LittleEndian);
	
	РазмерПотока = Поток.Размер();
	ТекущаяПозиция = Поток.ТекущаяПозиция();
	
	Если ТекущаяПозиция + КоличествоБайт > РазмерПотока Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'С позиции: %1 потока размером: %2 нельзя прочитать натуральное число длиной: %3'"),
			Строка(ТекущаяПозиция), Строка(РазмерПотока), Строка(КоличествоБайт));
	КонецЕсли;
	
	ПрочитаноБайт = Поток.Прочитать(Буфер, 0, КоличествоБайт);
	
	Если ПрочитаноБайт <> КоличествоБайт Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'С позиции: %1 потока размером: %2 было прочитано: %3 байт числа длиной: %4'"),
			Строка(ТекущаяПозиция), Строка(РазмерПотока), Строка(ПрочитаноБайт), Строка(КоличествоБайт));
	КонецЕсли;
	
	ПрочитанноеЧисло = 0;
	
	Пока КоличествоБайт > 0 Цикл
		КоличествоБайт = КоличествоБайт - 1;
		ПрочитанноеЧисло = (ПрочитанноеЧисло * 256) + Буфер[КоличествоБайт];
	КонецЦикла;
	
	Возврат ПрочитанноеЧисло;
КонецФункции

// Выполняет чтение буфера из потока (буфер создается перед чтением).
// 
// Параметры:
//  Поток - Поток - Поток, из которого будет прочитан буфер.
//  РазмерБуфера - Число - Количество байт в читаемом буфере.
// 
// Возвращаемое значение:
// - БуферДвоичныхДанных - прочитанный из потока буфер.
// 
// Исключение:
//  В случае ошибки вызывается исключение.
Функция ПрочитатьБуферИзПотока(Поток, РазмерБуфера)
	
	ПроверитьПотокЧтения(Поток);
	ПроверитьЦелоеЧисло(РазмерБуфера, 1, Неопределено);
	
	РазмерПотока = Поток.Размер();
	Позиция = Поток.ТекущаяПозиция();
	
	Если Позиция + РазмерБуфера > РазмерПотока Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В потоке размером: %1 с позиции: %2 невозможно прочитать буфет размером: %3'"),
			Строка(РазмерПотока), Строка(Позиция), Строка(РазмерБуфера));
	КонецЕсли;
	
	Буфер = Новый БуферДвоичныхДанных(РазмерБуфера, ПорядокБайтов.LittleEndian);
	ПрочитаноБайт = Поток.Прочитать(Буфер, 0, РазмерБуфера);
	
	Если ПрочитаноБайт <> РазмерБуфера Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'При чтении буфера размером: %1 с позиции: %2 прочитали только: %3'"),
			Строка(РазмерБуфера), Строка(Позиция), Строка(ПрочитаноБайт));
	КонецЕсли;
	
	Возврат Буфер;
	
КонецФункции

// Выполняет запись натурального числа в поток.
// 
// Параметры:
//  Поток - Поток - поток, в который выполняется запись.
//  ЗначениеДляЗаписи - Число - записываемое в поток значение.
//  КоличествоБайт - Число - количество байт в записываемом числе.
// 
// Исключение:
//  В случае ошибки вызывается исключение.
Процедура ЗаписатьНатуральноеЧислоВПоток(Поток, ЗначениеДляЗаписи, КоличествоБайт)
	
	ПроверитьПотокЗаписи(Поток);
	ПроверитьЦелоеЧисло(ЗначениеДляЗаписи, 0, Неопределено);
	ПроверитьЦелоеЧисло(КоличествоБайт, 1, Неопределено);
	
	Буфер = Новый БуферДвоичныхДанных(КоличествоБайт, ПорядокБайтов.LittleEndian);
	ТекущееЗначение = ЗначениеДляЗаписи;
	
	Для ИндексБайта = 0 По КоличествоБайт - 1 Цикл
		Байт = ТекущееЗначение % 256;
		ТекущееЗначение = (ТекущееЗначение - Байт) / 256;
		Буфер[ИндексБайта] = Байт;
	КонецЦикла;
	
	Если ТекущееЗначение > 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Значение: %1 нельзя записать байтами в количестве: %2'"),
			Строка(ЗначениеДляЗаписи), Строка(КоличествоБайт));
	КонецЕсли;
	
	Поток.Записать(Буфер, 0, КоличествоБайт);
	
КонецПроцедуры

// Выполняет запись буфера двоичных данных в поток.
// 
// Параметры:
//  Поток - Поток - поток, в который производится запись.
//  Буфер - БуферДвоичныхДанных - буфер, который записывается в поток.
// 
// Исключение:
//  В случае ошибки вызывается исключение.
Процедура ЗаписатьБуферВПоток(Поток, Буфер)
	
	ПроверитьПотокЗаписи(Поток);
	
	Если ТипЗнч(Буфер) <> Тип("БуферДвоичныхДанных") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для записываемого в поток буфера двоичных данных.'"),
			Строка(ТипЗнч(Буфер)));
	КонецЕсли;
	
	Поток.Записать(Буфер, 0, Буфер.Размер);
	
КонецПроцедуры

// Выполняет прямое копирование потока чтения в поток записи.
// 
// Параметры:
//  ПотокЧтения - Поток - поток, из которого выполняется чтение.
//  ПотокЗаписи - Поток - поток, в который выполняется запись.
//  КоличествоБайт - Число - количество копируемых байт.
// 
// Исключение:
//  В случае ошибки вызывается исключение.
Процедура ПрямоеКопированиеВПоток(ПотокЧтения, ПотокЗаписи, КоличествоБайт)
	
	ПроверитьПотокЧтения(ПотокЧтения);
	ПроверитьПотокЗаписи(ПотокЗаписи);
	ПроверитьЦелоеЧисло(КоличествоБайт, 0, Неопределено);
	
	Если КоличествоБайт > 0 Тогда
		ПотокЧтения.КопироватьВ(ПотокЗаписи, КоличествоБайт);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку поля в структуре на равенство значению.
// 
// Параметры:
//  Структура - Структура - содержащая проверяемое поле структура.
//  ИмяПоля - Строка - имя поля в структуре, значение которого мы проверяем.
//  ЗначениеПоля - Произвольный - значение, с которым сравнивается значение поля структуры.
//  МассивПроверки - Массив из Строка- массив для записи различий при сравнении.
// 
// Исключение:
//  В случае ошибки в значениях полей вызывается исключение.
Процедура ПроверитьПолеСтруктурыАрхива(Структура, ИмяПоля, ЗначениеПоля, МассивПроверки)
	
	Если ТипЗнч(МассивПроверки) <> Тип("Массив") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для массива записи результатов проверки.'"),
			Строка(ТипЗнч(МассивПроверки)));
	КонецЕсли;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для проверяемой структуры.'"),
			Строка(ТипЗнч(Структура))));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяПоля) <> Тип("Строка") Тогда
		МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для имени проверяемого поля.'"),
			Строка(ТипЗнч(ИмяПоля))));
		Возврат;
	КонецЕсли;
	
	РеальноеЗначение = Неопределено;
	
	Попытка
		Если НЕ Структура.Свойство(ИмяПоля, РеальноеЗначение) Тогда
			МассивПроверки.Добавить(НСтр("ru = 'В структуре нет поля:'") + ИмяПоля);
			Возврат;
		КонецЕсли;
	Исключение
		МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'Ошибка при получении значения поля: %1 из структуры:'"), ИмяПоля)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ТипЗначения = ТипЗнч(РеальноеЗначение);
	
	Если ТипЗнч(ЗначениеПоля) <> ТипЗначения Тогда
		МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'В структуре поле: %1 имеет тип: %2 отличный от: %3'"),
			ИмяПоля, Строка(ТипЗначения), Строка(ТипЗнч(ЗначениеПоля))));
		Возврат;
	КонецЕсли;
	
	Если ТипЗначения = Тип("БуферДвоичныхДанных") Тогда
		РазмерБуфера = РеальноеЗначение.Размер;
		
		Если ЗначениеПоля.Размер <> РазмерБуфера Тогда
			МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'В структуре поле: %1 содержит буфер двоичных данных размером: %2 отличный от: %3'"),
				ИмяПоля, Строка(РазмерБуфера), Строка(ЗначениеПоля.Размер)));
			Возврат;
		КонецЕсли;
		
		Для Позиция = 0 По РазмерБуфера - 1 Цикл
			Если РеальноеЗначение[Позиция] <> ЗначениеПоля[Позиция] Тогда
				МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'Байт: %1 поля: %2 в позиции: %3 отличается от: %4'"),
					Строка(РеальноеЗначение[Позиция]), ИмяПоля, Строка(Позиция), Строка(ЗначениеПоля[Позиция])));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли РеальноеЗначение <> ЗначениеПоля Тогда
		МассивПроверки.Добавить(СтрШаблон(НСтр("ru = 'В структуре поле: %1 имеет значение: %2 отличное от: %3'"),
			ИмяПоля, Строка(РеальноеЗначение), Строка(ЗначениеПоля)));
	КонецЕсли;
КонецПроцедуры

// Проверяет, что переданный поток является потоком и готов для чтения.
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный - проверяемое значение.
// 
// Исключение:
//  В случае неправильного значения вызывается исключение.
Процедура ПроверитьПотокЧтения(ПроверяемоеЗначение)
	
	ТипЗначения = ТипЗнч(ПроверяемоеЗначение);
	
	Если ТипЗначения = Тип("Поток")
		ИЛИ ТипЗначения = Тип("ПотокВПамяти")
		ИЛИ ТипЗначения = Тип("ФайловыйПоток") Тогда
		Если НЕ ПроверяемоеЗначение.ДоступноЧтение Тогда
			ВызватьИсключение НСтр("ru = 'Из переданного потока чтение невозможно.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для читаемого потока.'"), Строка(ТипЗначения));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что переданное значение является потоком, доступным для записи.
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный - проверяемое значение.
// 
// Исключение:
//  В случае неправильного значения вызывается исключение.
Процедура ПроверитьПотокЗаписи(ПроверяемоеЗначение)
	
	ТипЗначения = ТипЗнч(ПроверяемоеЗначение);
	
	Если ТипЗначения = Тип("Поток")
		ИЛИ ТипЗначения = Тип("ПотокВПамяти")
		ИЛИ ТипЗначения = Тип("ФайловыйПоток") Тогда
		Если НЕ ПроверяемоеЗначение.ДоступнаЗапись Тогда
			ВызватьИсключение НСтр("ru = 'В переданный поток запись недоступна.'");
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для потока, в который ведется запись.'"),
			Строка(ТипЗначения));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку значения на то, что оно является натуральным числом в указанном диапазоне.
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный - проверяемое значение.
//  МинимальноеЗначение - Произвольный
//  МаксимальноеЗначение - Произвольный
// 
// Исключение:
//  В случае неправильного значения вызывается исключение.
Процедура ПроверитьЦелоеЧисло(ПроверяемоеЗначение, МинимальноеЗначение = Неопределено, МаксимальноеЗначение = Неопределено)
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Число") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для натурального числа.'"),
			Строка(ТипЗнч(ПроверяемоеЗначение)));
	КонецЕсли;
	
	Если Цел(ПроверяемоеЗначение) <> ПроверяемоеЗначение Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Вместо натурального числа передано вещественное: %1'"),
			XMLСтрока(ПроверяемоеЗначение));
	КонецЕсли;
	
	Если МинимальноеЗначение <> Неопределено Тогда
		Если ТипЗнч(МинимальноеЗначение) <> Тип("Число") Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для минимального значения числа.'"),
				Строка(ТипЗнч(МинимальноеЗначение)));
		КонецЕсли;
		
		Если ПроверяемоеЗначение < МинимальноеЗначение Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Проверяемое число: %1 меньше минимального значения: %2'"),
				Строка(ПроверяемоеЗначение), Строка(МинимальноеЗначение));
		КонецЕсли;
	КонецЕсли;
	
	Если МаксимальноеЗначение <> Неопределено Тогда
		Если ТипЗнч(МаксимальноеЗначение) <> Тип("Число") Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения: %1 для максимального значения числа.'"),
				Строка(ТипЗнч(МаксимальноеЗначение)));
		КонецЕсли;
		
		Если ПроверяемоеЗначение > МаксимальноеЗначение Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Проверяемое число: %1 больше максимального значения: %2'"),
				Строка(ПроверяемоеЗначение), Строка(МаксимальноеЗначение));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Проверяет настройку правила проверки полномочий МЧД
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// 
// Возвращаемое значение:
//  Булево
Функция ПравилоНастроено(Правило) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ПравилоНастроено");
	
КонецФункции

// Обрабатывает ошибку некорректных правил проверки.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов - Доверенность
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронный документ
//  ПравилоПроверки - Неопределено, СправочникСсылка.ПравилаПроверкиПолномочийМЧД - Правило проверки
Процедура ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент, ПравилоПроверки = Неопределено)
	
	ТекстОшибки = НСтр("ru = 'Не настроены правила проверки полномочий доверенности'");
	Если ЗначениеЗаполнено(ПравилоПроверки) Тогда
		ТекстОшибки = НСтр("ru = 'Правила проверки полномочий настроены некорректно'");
	КонецЕсли;
	ВидОперации = НСтр("ru = 'Проверка полномочий доверенности.'");
	ШаблонСообщения =
		Нстр("ru = 'Ошибка при проверке полномочий доверенности: %1 для документа: %2'");
	Сообщение = СтрШаблон(ШаблонСообщения, Доверенность, ЭлектронныйДокумент);
	ПодробныйТекстОшибки = Сообщение + Символы.ПС + ТекстОшибки; 
	ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Сообщение);
	
КонецПроцедуры

// Проверяет право настройки правил проверки полномочий.
// Параметры:
// МетаданныеМЧД - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоНастройкиПравилПроверкиПолномочий(МетаданныеМЧД = Неопределено) Экспорт
	
	Возврат (МетаданныеМЧД = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов
		ИЛИ МетаданныеМЧД = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций)
		И ПравоДоступа("Изменение", МетаданныеМЧД);
	
КонецФункции

#КонецОбласти
