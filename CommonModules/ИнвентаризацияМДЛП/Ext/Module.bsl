////////////////////////////////////////////////////////////////////////////////
//
// ИнвентаризацияМДЛП: процедуры и функции подсистемы "ИнтеграцияМДЛП.Инвентаризация"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча,
	// составляющая массив полей для однозначной идентификации элемента.
	
	Типы.Добавить(Метаданные.Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. процедуры ОбновлениеИнформационнойБазыМДЛП.ПриДобавленииОбработчиковОбновления,
// ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ИнвентаризацияМДЛП.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.2.8.1";
	Обработчик.Процедура           = "Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ЗаполнитьПервоначальныеДанные";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.2.8.2";
	Обработчик.Процедура           = "Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ЗаполнитьПервоначальныеДанные";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура НачальноеЗаполнение() Экспорт
	
	Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ЗаполнитьПервоначальныеДанные();
	
КонецПроцедуры

#КонецОбласти

// Вызывается при вводе документа-уведомления на основании документа-инвентаризации.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - ДокументСсылка.ИнвентаризацияПотребительскихУпаковокМДЛП - значение, которое используется как основание для заполнения.
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.УведомлениеОбОприходованииМДЛП") Тогда
		ЗаполнитьУведомлениеОбОприходовании(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаМДЛП") Тогда
		ЗаполнитьУведомлениеОбОтпускеЛППоДокументамОтличнымОтЧека(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
		ЗаполнитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОВыбытииМДЛП") Тогда
		ЗаполнитьУведомлениеОВыбытии(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОВыдачеВОтделенияМДЛП") Тогда
		ЗаполнитьУведомлениеОВыдачеВОтделения(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОПовторномВводеВОборотМДЛП") Тогда
		ЗаполнитьУведомлениеОПовторномВводеВОборот(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП") Тогда
		ЗаполнитьУведомлениеОРозничнойПродаже(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ИнвентаризацияПотребительскихУпаковокМДЛП") Тогда
		ЗаполнитьИнвентаризацияПотребительскихУпаковок(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнвентаризацияМДЛППереопределяемый.ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДобавитьЭлементФормыДокументИнвентаризации(Знач Форма, Знач ИмяЭлементаДляРазмещения, Знач ИмяСледующегоЭлемента = "") Экспорт
	
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ДокументИнвентаризации) И Не РежимОтладки Тогда
		// Реквизит ДокументИнвентаризации заполняется программно.
		// Если значение не заполнено - элемент отображать не нужно.
		Возврат;
	КонецЕсли;
	
	ЭлементРодитель = Форма.Элементы[ИмяЭлементаДляРазмещения];
	
	СледующийЭлемент = Неопределено;
	Если ЗначениеЗаполнено(ИмяСледующегоЭлемента) Тогда
		СледующийЭлемент = Форма.Элементы[ИмяСледующегоЭлемента];
	КонецЕсли;
	
	ПолеФормыДокументИнвентаризации = Форма.Элементы.Вставить("ДокументИнвентаризации", Тип("ПолеФормы"), ЭлементРодитель, СледующийЭлемент);
	ПолеФормыДокументИнвентаризации.ПутьКДанным = "Объект.ДокументИнвентаризации";
	ПолеФормыДокументИнвентаризации.Вид = ВидПоляФормы.ПолеВвода;
	ПолеФормыДокументИнвентаризации.ТолькоПросмотр = Не РежимОтладки;
	ПолеФормыДокументИнвентаризации.АвтоМаксимальнаяШирина = Ложь;
	ПолеФормыДокументИнвентаризации.МаксимальнаяШирина = 28;
	
КонецПроцедуры

#Область Проведение

Функция ПроверитьДоступностьУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации, Отказ) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковок.НомерСтроки                          КАК НомерСтроки,
	|	НомераУпаковок.ИмяТабличнойЧасти                    КАК ИмяТабличнойЧасти,
	|	НомераУпаковок.ИмяПоля                              КАК ИмяПоля,
	
	|	НомераУпаковок.НомерУпаковки                        КАК НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки                         КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации  КАК ДокументИнвентаризации,
	|	ИнвентаризированныеУпаковки.ДокументУведомление     КАК ДокументУведомление,
	
	|	ВЫБОР
	|		КОГДА ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЕстьОшибкаНеНачатаИнвентаризацияУпаковки,
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			И ИнвентаризированныеУпаковки.ДокументУведомление <> &ДокументРезерва
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЕстьОшибкаУпаковкаОформляетсяДругимУведомлением,
	
	|	ВЫБОР
	|		КОГДА ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЕстьОшибкаУпаковкаНеТребуетОформленияУведомления,
	
	|	ЛОЖЬ                                                КАК ЕстьОшибкаУпаковкаОформляетсяУведомлениемИнвентаризации,
	|	ЛОЖЬ                                                КАК ЕстьОшибкаНеЗавершенаИнвентаризацияУпаковки
	
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &ДокументИнвентаризации
	|ГДЕ
	|	&УведомлениеСозданоНаОснованииИнвентаризации
	|	И НЕ НомераУпаковок.ГрупповаяУпаковка
	|	И (
	|		ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|		ИЛИ ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			И ИнвентаризированныеУпаковки.ДокументУведомление <> &ДокументРезерва
	|		ИЛИ ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковок.НомерСтроки                          КАК НомерСтроки,
	|	НомераУпаковок.ИмяТабличнойЧасти                    КАК ИмяТабличнойЧасти,
	|	НомераУпаковок.ИмяПоля                              КАК ИмяПоля,
	
	|	НомераУпаковок.НомерУпаковки                        КАК НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки                         КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации  КАК ДокументИнвентаризации,
	|	ИнвентаризированныеУпаковки.ДокументУведомление     КАК ДокументУведомление,
	
	|	ЛОЖЬ                                                КАК ЕстьОшибкаНеНачатаИнвентаризацияУпаковки,
	|	ЛОЖЬ                                                КАК ЕстьОшибкаУпаковкаОформляетсяДругимУведомлением,
	|	ЛОЖЬ                                                КАК ЕстьОшибкаУпаковкаНеТребуетОформленияУведомления,
	
	|	ВЫБОР
	|		КОГДА ИнвентаризированныеУпаковки.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЕстьОшибкаУпаковкаОформляетсяУведомлениемИнвентаризации,
	
	|	ВЫБОР
	|		КОГДА ИнвентаризированныеУпаковки.ДокументУведомление = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЕстьОшибкаНеЗавершенаИнвентаризацияУпаковки
	
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И НЕ ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений В (&СтатусЗавершено, &СтатусЗавершеноПринудительно)
	|ГДЕ
	|	НЕ &УведомлениеСозданоНаОснованииИнвентаризации
	|	И НЕ НомераУпаковок.ГрупповаяУпаковка
	|";
	
	Если ТипЗнч(ПараметрыОперации.МестоДеятельности) = Тип("СправочникСсылка.ОрганизацииМДЛП") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности", "ИнвентаризированныеУпаковки.МестоДеятельности.Организация = &МестоДеятельности");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УведомлениеСозданоНаОснованииИнвентаризации = ЗначениеЗаполнено(ПараметрыОперации.ДокументИнвентаризации);
	Запрос.УстановитьПараметр("УведомлениеСозданоНаОснованииИнвентаризации", УведомлениеСозданоНаОснованииИнвентаризации);
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("СтатусЗавершено", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусЗавершеноПринудительно", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.ЗавершеноПринудительно);
	Запрос.УстановитьПараметр("ДействияНеТребующиеОформленияУведомлений", ИнвентаризацияМДЛПКлиентСервер.ДействияНеТребующиеОформленияУведомлений());
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("ДокументИнвентаризации" , ПараметрыОперации.ДокументИнвентаризации);
	Если УведомлениеСозданоНаОснованииИнвентаризации Тогда
		Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперации.ДокументИнвентаризации, "ИнвентаризационнаяОпись"));
	Иначе
		Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", Неопределено);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		МаксимальноеКоличествоСообщений = 10;
		НомерСообщения = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерСообщения = НомерСообщения + 1;
			Если НомерСообщения > МаксимальноеКоличествоСообщений Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='Показаны первые %1 из %2 сообщений об ошибках.'"),
					МаксимальноеКоличествоСообщений,
					Выборка.Количество());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва);
				Прервать;
			КонецЕсли;
			
			Если Выборка.ЕстьОшибкаНеНачатаИнвентаризацияУпаковки Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 не обнаружена в документе инвентаризации %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументИнвентаризации);
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаОформляетсяДругимУведомлением Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 обрабатывается документом %2, созданным на основании инвентаризации %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументУведомление, Выборка.ДокументИнвентаризации);
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаНеТребуетОформленияУведомления Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 не отмечена как требующая обработки в документе инвентаризации %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументИнвентаризации);
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаОформляетсяУведомлениемИнвентаризации Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 обрабатывается документом %2, созданным на основании инвентаризации %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументУведомление, Выборка.ДокументИнвентаризации);
			ИначеЕсли Выборка.ЕстьОшибкаНеЗавершенаИнвентаризацияУпаковки Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает обработки документом, создаваемым на основании инвентаризации %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументИнвентаризации);
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки);
			Если Выборка.НомерСтроки = 0 Тогда
				Поле = Выборка.ИмяПоля;
			Иначе
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, Выборка.ИмяПоля);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗарезервироватьУпаковки(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	// Удалить из доступных к инвентаризации
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковк.КлючУпаковки             КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковк.МестоДеятельности        КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковк.ИнвентаризационнаяОпись  КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковк.ДокументИнвентаризации   КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                        КАК ДокументУведомление
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковк
	|		ПО
	|			ИнвентаризированныеУпаковк.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковк.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковк.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковк.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковк.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И ИнвентаризированныеУпаковк.ДокументУведомление = НЕОПРЕДЕЛЕНО
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Поставить в резерв уведомления
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                                 КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	&МестоДеятельности                                           КАК МестоДеятельности,
	|	&ИнвентаризационнаяОпись                                     КАК ИнвентаризационнаяОпись,
	|	&ДокументИнвентаризации                                      КАК ДокументИнвентаризации,
	|	&ДокументРезерва                                             КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусВыполняется                                           КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И НЕ ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные к инвентаризации
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации           КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НомераУпаковок КАК НомераУпаковок
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ДокументУведомление = &ДокументРезерва
	|	И НомераУпаковок.НомерУпаковки ЕСТЬ NULL
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МестоДеятельности"      , ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("ДокументИнвентаризации" , ПараметрыОперации.ДокументИнвентаризации);
	Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперации.ДокументИнвентаризации, "ИнвентаризационнаяОпись"));
	Запрос.УстановитьПараметр("ДокументРезерва"        , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("СтатусВыполняется"      , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Выполняется);
	Запрос.УстановитьПараметр("СтатусНеВыполнялось"    , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	Запрос.УстановитьПараметр("СтатусЗавершено"        , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("ДействияНеТребующиеОформленияУведомлений", ИнвентаризацияМДЛПКлиентСервер.ДействияНеТребующиеОформленияУведомлений());
	
	Результат = Запрос.ВыполнитьПакет();
	УдалитьИзДоступных = Результат[0].Выбрать();
	Зарезервировать    = Результат[1].Выгрузить();
	ВернутьВДоступные  = Результат[2].Выгрузить();
	
	// Удаление указанных номеров упаковок, которые еще не зарезервированы указанным документом.
	// Резервирование выполняется следующим набором.
	Запись = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьМенеджерЗаписи();
	Пока УдалитьИзДоступных.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запись, УдалитьИзДоступных);
		Запись.Удалить();
	КонецЦикла;
	
	// Резервирование указанных номеров упаковок.
	// Отбор по документу выполняет две логические функции:
	//  1. Перезапись номеров упаковок, которые указанный документ возможно уже резервировал.
	//  2. Удаление номеров упаковок, которые возможно ранее резервировал указанный документ,
	//     но сейчас их нет в выборке и их нужно Вернуть в доступные.
	// Возврат в доступные выполняется следующим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументУведомление.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Загрузить(Зарезервировать);
	Набор.Записать();
	
	// Возврат в доступные.
	// Запись номеров упаковок без замещения, т.к. удаление старых записей было выполнено предыдущим набором.
	Если ВернутьВДоступные.Количество() > 0 Тогда
		Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
		Набор.Загрузить(ВернутьВДоступные);
		Набор.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйСтатус(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	// Установить новый статус инвентаризации
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                                 КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации           КАК ДокументИнвентаризации,
	|	ИнвентаризированныеУпаковки.ДокументУведомление              КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И ИнвентаризированныеУпаковки.ДокументУведомление = &ДокументРезерва
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные к инвентаризации
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации           КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НомераУпаковок КАК НомераУпаковок
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ДокументУведомление = &ДокументРезерва
	|	И НомераУпаковок.НомерУпаковки ЕСТЬ NULL
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МестоДеятельности"      , ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("ДокументИнвентаризации" , ПараметрыОперации.ДокументИнвентаризации);
	Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперации.ДокументИнвентаризации, "ИнвентаризационнаяОпись"));
	Запрос.УстановитьПараметр("ДокументРезерва"        , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("СтатусЗавершено"        , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусНеВыполнялось"    , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	
	Результат = Запрос.ВыполнитьПакет();
	УстановитьНовыйСтатус = Результат[0].Выбрать();
	СнятьСРезерва         = Результат[1].Выбрать();
	
	// Удаление всех номеров упаковок, которые были ранее зарезервированы указанным документом.
	// Запись номеров упаковок с новыми свойствами или со свойствами до резервирования выполняется следующим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументУведомление.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Записать();
	
	// Запись номеров упаковок без замещения, т.к. удаление старых записей было выполнено предыдущим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Пока УстановитьНовыйСтатус.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), УстановитьНовыйСтатус);
	КонецЦикла;
	Пока СнятьСРезерва.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), СнятьСРезерва);
	КонецЦикла;
	Набор.Записать(Ложь);
	
КонецПроцедуры

Процедура ОтменитьОперацию(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации           КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ДокументУведомление = &ДокументРезерва
	|");
	
	Запрос.УстановитьПараметр("ДокументРезерва"    , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("СтатусЗавершено"    , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусНеВыполнялось", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Удаление всех номеров упаковок, которые были ранее зарезервированы указанным документом.
	// Запись номеров упаковок со свойствами до резервирования выполняется следующим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументУведомление.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Записать();
	
	// Запись номеров упаковок без замещения, т.к. удаление старых записей было выполнено предыдущим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
	КонецЦикла;
	Набор.Записать(Ложь);
	
КонецПроцедуры

Процедура УстановитьСтатусПриЗаписиВРеестрВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	// Удалить из доступных к инвентаризации
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковк.КлючУпаковки             КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковк.МестоДеятельности        КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковк.ИнвентаризационнаяОпись  КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковк.ДокументИнвентаризации   КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                        КАК ДокументУведомление
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковк
	|		ПО
	|			ИнвентаризированныеУпаковк.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковк.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковк.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковк.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковк.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И ИнвентаризированныеУпаковк.ДокументУведомление = НЕОПРЕДЕЛЕНО
	|ГДЕ
	|	НомераУпаковок.СтатусВыбытия <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Установить новый статус инвентаризации
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                                 КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	&МестоДеятельности                                           КАК МестоДеятельности,
	|	&ИнвентаризационнаяОпись                                     КАК ИнвентаризационнаяОпись,
	|	&ДокументИнвентаризации                                      КАК ДокументИнвентаризации,
	|	&ДокументРезерва                                             КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И НЕ ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|ГДЕ
	|	НомераУпаковок.СтатусВыбытия <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные к инвентаризации
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                     КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации           КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                             КАК СтатусДействияПоСверкеОстатков,
	|	&ДействиеПоОформлениюУведомленийПриОтменеОперации            КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НомераУпаковок КАК НомераУпаковок
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ДокументУведомление = &ДокументРезерва
	|	И (НомераУпаковок.НомерУпаковки ЕСТЬ NULL
	|		ИЛИ НомераУпаковок.СтатусВыбытия = ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота))
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МестоДеятельности"      , ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("ДокументИнвентаризации" , ПараметрыОперации.ДокументИнвентаризации);
	Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперации.ДокументИнвентаризации, "ИнвентаризационнаяОпись"));
	Запрос.УстановитьПараметр("ДокументРезерва"        , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("СтатусЗавершено"        , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусВыполняется"      , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Выполняется);
	Запрос.УстановитьПараметр("СтатусНеВыполнялось"    , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	Запрос.УстановитьПараметр("ДействияНеТребующиеОформленияУведомлений", ИнвентаризацияМДЛПКлиентСервер.ДействияНеТребующиеОформленияУведомлений());
	
	// Вычисляем действие, которое нужно установить в том случае, если операция была отменена/отклонена
	// или новая колллекция номеров упаковок не содержит старых номеров упаковок.
	Если ТипЗнч(ПараметрыОперации.ДокументРезерва) = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП") Тогда
		ДействиеПоОформлениюУведомленийПриОтменеОперации = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОВыдачеВОтделения;
	ИначеЕсли ТипЗнч(ПараметрыОперации.ДокументРезерва) = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
		ДействиеПоОформлениюУведомленийПриОтменеОперации = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОбОтпускеПоЛьготномуРецепту;
	ИначеЕсли ТипЗнч(ПараметрыОперации.ДокументРезерва) = Тип("ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП") Тогда
		ДействиеПоОформлениюУведомленийПриОтменеОперации = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОРозничнойПродаже;
	ИначеЕсли ТипЗнч(ПараметрыОперации.ДокументРезерва) = Тип("ДокументСсылка.УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаМДЛП") Тогда
		ДействиеПоОформлениюУведомленийПриОтменеОперации = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОбОтпускеЛППоДокументамОтличнымОтЧека;
	Иначе
		// В неожиданной ситуации будет установлено действие по оформлению уведомления о выбытии по различным причинам.
		ДействиеПоОформлениюУведомленийПриОтменеОперации = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОВыбытии;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДействиеПоОформлениюУведомленийПриОтменеОперации", ДействиеПоОформлениюУведомленийПриОтменеОперации);
	
	Результат = Запрос.ВыполнитьПакет();
	УдалитьИзДоступных    = Результат[0].Выбрать();
	УстановитьНовыйСтатус = Результат[1].Выгрузить();
	ВернутьВДоступные     = Результат[2].Выгрузить();
	
	// Удаление указанных номеров упаковок, которые еще не зарезервированы указанным документом.
	// Установка новых свойств выполняется следующим набором.
	Запись = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьМенеджерЗаписи();
	Пока УдалитьИзДоступных.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запись, УдалитьИзДоступных);
		Запись.Удалить();
	КонецЦикла;
	
	// Установка новых свойств указанных номеров упаковок.
	// Отбор по документу выполняет две логические функции:
	//  1. Перезапись номеров упаковок, которые указанный документ возможно уже резервировал.
	//  2. Удаление номеров упаковок, которые возможно ранее резервировал указанный документ,
	//     но сейчас их нет в выборке и их нужно Вернуть в доступные.
	// Возврат в доступные выполняется следующим набором.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументУведомление.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Загрузить(УстановитьНовыйСтатус);
	Набор.Записать();
	
	// Возврат в доступные.
	// Запись номеров упаковок без замещения, т.к. удаление старых записей было выполнено предыдущим набором.
	Если ВернутьВДоступные.Количество() > 0 Тогда
		Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
		Набор.Загрузить(ВернутьВДоступные);
		Набор.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДанныеВТаблицуНомераУпаковок(МенеджерВременныхТаблиц, ИмяИсходнойТаблицы) Экспорт
	
	ТекстЗапроса = "";
	Если МенеджерВременныхТаблиц.Таблицы.Найти("НомераУпаковок") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УНИЧТОЖИТЬ НомераУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	#ИмяИсходнойТаблицы КАК НомераУпаковок
	|", "#ИмяИсходнойТаблицы", ИмяИсходнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРезультатамиИДальнейшимиДействиямиИнвентаризации

Функция ПолучитьПаруОписанийРезультатовАнализаИнвентаризируемыхУпаковок(РезультатАнализаУпаковок) Экспорт
	
	Возврат Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ПолучитьПаруОписанийРезультатовАнализаИнвентаризируемыхУпаковок(РезультатАнализаУпаковок);
	
КонецФункции

#КонецОбласти

Процедура ДобавитьИмяВременнойТаблицыПоследнемуЗапросуПакета(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Граница = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		
		ЗапросОбъект = СхемаЗапроса.ПакетЗапросов[Граница - Индекс];
		Если ТипЗнч(ЗапросОбъект) = Тип("ЗапросВыбораСхемыЗапроса")
			И Не ЗначениеЗаполнено(ЗапросОбъект.ТаблицаДляПомещения) Тогда
			
			ЗапросОбъект.ТаблицаДляПомещения = ИмяВременнойТаблицы;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокументов

Процедура ЗаполнитьУведомлениеОбОприходовании(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОбОприходовании;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
	ДокументОбъект.Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтпускеЛППоДокументамОтличнымОтЧека(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОбОтпускеЛППоДокументамОтличнымОтЧека;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
	ДокументОбъект.ДокументыПродажи.Очистить();
	ДокументПродажи = ДокументОбъект.ДокументыПродажи.Добавить();
	ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл
		СтрокаТовара.ИдентификаторДокумента = ДокументПродажи.ИдентификаторДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОбОтпускеПоЛьготномуРецепту;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОВыбытии(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОВыбытии;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
	ДокументОбъект.Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОВыдачеВОтделения(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОВыдачеВОтделения;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОПовторномВводеВОборот(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОПовторномВводеВОборот;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОРозничнойПродаже(ДокументОбъект, ДокументОснование)
	
	ДействиеПоОформлениюУведомлений = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ОформитьУведомлениеОРозничнойПродаже;
	
	ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений);
	
	ДокументОбъект.ДокументыПродажи.Очистить();
	ДокументПродажи = ДокументОбъект.ДокументыПродажи.Добавить();
	ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл
		СтрокаТовара.ИдентификаторДокумента = ДокументПродажи.ИдентификаторДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризацияПотребительскихУпаковок(ДокументОбъект, ДокументОснование)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("ИнвентаризационнаяОпись", "Ссылка");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("МестоДеятельности");
	ЗапрашиваемыеДанные.Вставить("ДокументПроведен", "Проведен");
	
	ОсновныеДанныеДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеДанные);
	
	Если Не ОсновныеДанныеДокументаОснования.ДокументПроведен Тогда
		ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа невозможен.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОсновныеДанныеДокументаОснования.ИнвентаризационнаяОпись);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ОсновныеДанныеДокументаОснования);
	
КонецПроцедуры


Процедура ЗаполнитьУведомлениеПоУмолчанию(ДокументОбъект, ДокументОснование, ДействиеПоОформлениюУведомлений)
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаНомераУпаковокКОформлению());
	ТекстыЗапроса.Добавить(ТекстЗапросаТоварыКОформлению());
	ТекстыЗапроса.Добавить("
	|ВЫБРАТЬ
	|	НомераУпаковокКОформлению.НомерКИЗ             КАК НомерКиЗ,
	|	НомераУпаковокКОформлению.ИдентификаторСтроки  КАК ИдентификаторСтроки
	|ИЗ
	|	НомераУпаковокКОформлению КАК НомераУпаковокКОформлению
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура         КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика       КАК Характеристика,
	|	ТоварыКОформлению.Серия                КАК Серия,
	|	ТоварыКОформлению.Упаковка             КАК Упаковка,
	|	ТоварыКОформлению.GTIN                 КАК GTIN,
	|	ТоварыКОформлению.СтатусУказанияСерий  КАК СтатусУказанияСерий,
	|	ТоварыКОформлению.НомерСерии           КАК НомерСерии,
	|	ТоварыКОформлению.ГоденДо              КАК ГоденДо,
	|	ТоварыКОформлению.ИдентификаторСтроки  КАК ИдентификаторСтроки
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки
	|");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	
	ОсновныеДанныеДокументаОснования = ПодготовитьОсновныеДанныеДляЗаполнения(ДокументОснование);
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокументаОснования Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("ДействиеПоОформлениюУведомлений", ДействиеПоОформлениюУведомлений);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаНомеровУпаковок = Результаты[Результаты.ВГраница() - 1].Выбрать();
	ВыборкаТоваров         = Результаты[Результаты.ВГраница()].Выбрать();
	
	ПроверитьВозможностьВводаНаОсновании(ОсновныеДанныеДокументаОснования, ВыборкаНомеровУпаковок, ВыборкаТоваров);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ОсновныеДанныеДокументаОснования);
	
	ДокументОбъект.НомераУпаковок.Очистить();
	ДокументОбъект.Товары.Очистить();
	
	ДанныеПоКоличествуТоваров = Новый Соответствие;
	Пока ВыборкаНомеровУпаковок.Следующий() Цикл
		
		СтрокаУпаковки = ДокументОбъект.НомераУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, ВыборкаНомеровУпаковок);
		
		КоличествоТоваров = ДанныеПоКоличествуТоваров.Получить(СтрокаУпаковки.ИдентификаторСтроки);
		Если КоличествоТоваров = Неопределено Тогда
			КоличествоТоваров = 0;
		КонецЕсли;
		ДанныеПоКоличествуТоваров.Вставить(СтрокаУпаковки.ИдентификаторСтроки, КоличествоТоваров + 1);
		
	КонецЦикла;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		СтрокаТовара = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаТоваров);
		
		СтрокаТовара.Количество = ДанныеПоКоличествуТоваров.Получить(СтрокаТовара.ИдентификаторСтроки);
		ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(ДокументОбъект, СтрокаТовара, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляЗаполнения(ДокументОснование)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("ДокументИнвентаризации", "Ссылка");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("МестоДеятельности");
	ЗапрашиваемыеДанные.Вставить("ИнвентаризационнаяОпись");
	ЗапрашиваемыеДанные.Вставить("ДокументИнвентаризацииПроведен", "Проведен");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеДанные);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаНомераУпаковокКОформлению(МаксимальноеКоличествоУпаковок = 25000)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерКИЗ             КАК НомерКИЗ,
	|	НомераУпаковокДокумента.ШтрихкодBase64       КАК ШтрихкодBase64,
	|	НомераУпаковокДокумента.ИдентификаторСтроки  КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ НомераУпаковокКОформлению
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК НомераУпаковокДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковокДокумента.НомерКИЗ
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &ДокументИнвентаризации
	|			И ИнвентаризированныеУпаковки.ДокументУведомление = НЕОПРЕДЕЛЕНО
	|ГДЕ
	|	&ДокументИнвентаризацииПроведен
	|	И НомераУпаковокДокумента.Ссылка = &ДокументИнвентаризации
	|	И ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений = &ДействиеПоОформлениюУведомлений
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = МаксимальноеКоличествоУпаковок;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыКОформлению()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыДокумента.*
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераУпаковокКОформлению КАК НомераУпаковокКОформлению
	|		ПО
	|			НомераУпаковокКОформлению.ИдентификаторСтроки = ТоварыДокумента.ИдентификаторСтроки
	|ГДЕ
	|	&ДокументИнвентаризацииПроведен
	|	И ТоварыДокумента.Ссылка = &ДокументИнвентаризации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПроверитьВозможностьВводаНаОсновании(ОсновныеДанныеДокументаОснования, ВыборкаНомеровУпаковок, ВыборкаТоваров)
	
	Если Не ОсновныеДанныеДокументаОснования.ДокументИнвентаризацииПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа невозможен.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОсновныеДанныеДокументаОснования.ДокументИнвентаризации);
		
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ВыборкаНомеровУпаковок.Количество() = 0 Или ВыборкаТоваров.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Нет данных для обработки.'");
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
