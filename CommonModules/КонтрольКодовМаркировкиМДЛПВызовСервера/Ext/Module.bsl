
#Область СлужебныйПрограммныйИнтерфейс

Функция НастройкиКонтроляКМ() Экспорт
	
	Возврат КонтрольКодовМаркировкиМДЛП.НастройкиКонтроляКМ();
	
КонецФункции

Функция СвойстваРезультатаПроверкиКМСредствамиАПИМДЛП() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат СвойстваРезультатаПроверкиКМ(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП);
	
КонецФункции

Функция РезультатПроверкиКМСредствамиАПИМДЛППоУмолчанию() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат РезультатПроверкиКМПоУмолчанию(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП);
	
КонецФункции

Функция СвойстваРезультатаПроверкиКМСредствамиРВ() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат СвойстваРезультатаПроверкиКМ(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ);
	
КонецФункции

Функция РезультатПроверкиКМСредствамиРВПоУмолчанию() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат РезультатПроверкиКМПоУмолчанию(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ);
	
КонецФункции

Функция СвойстваРезультатаПроверкиКМСредствамиККТ() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат СвойстваРезультатаПроверкиКМ(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ);
	
КонецФункции

Функция РезультатПроверкиКМСредствамиККТПоУмолчанию() Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Возврат РезультатПроверкиКМПоУмолчанию(ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ);
	
КонецФункции

Функция СвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	Возврат РегистрыСведений.РезультатыПроверкиКММДЛП.ВсеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ);
	
КонецФункции

Функция РезультатПроверкиКМПоУмолчанию(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	Возврат РегистрыСведений.РезультатыПроверкиКММДЛП.РезультатПроверкиКМПоУмолчанию(КлючГруппыНастроекКонтроляКМ);
	
КонецФункции

Функция ПолучитьККТФФД12ПоОрганизацииМДЛП(Организация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Субъекты.ОрганизацияКонтрагент КАК ОрганизацияКонтрагент
	|ИЗ
	|	РегистрСведений.СубъектыОбращенияМДЛП КАК Субъекты
	|ГДЕ
	|	Субъекты.Организация = &Организация
	|	И Субъекты.СобственнаяОрганизация
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	ПрикладнаяОрганизация = Выборка.ОрганизацияКонтрагент;
	Если Не ЗначениеЗаполнено(ПрикладнаяОрганизация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульМенеджерОборудованияВызовСервера = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	РабочееМесто = МодульМенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ПодключаемоеОборудование.Ссылка КАК ИдентификаторУстройства
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Организация = &Организация
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|");
	
	Запрос.УстановитьПараметр("Организация" , ПрикладнаяОрганизация);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	ИдентификаторУстройства = Выборка.ИдентификаторУстройства;
	Если Не ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
	Если Не МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторУстройства;
	
КонецФункции

Функция РедакцияБПО() Экспорт
	
	МодульМенеджерОборудованияВызовСервера = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	
	ВерсияБиблиотеки = МодульМенеджерОборудованияВызовСервера.ВерсияБиблиотеки();
	
	Возврат Число(СтрРазделить(ВерсияБиблиотеки, ".")[0]);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Знач Комментарий, Знач Событие = "", Знач Данные = Неопределено, Знач Уровень = Неопределено) Экспорт
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияМДЛП.СобытиеЖурналаРегистрации(Событие),
		Уровень,
		,
		Данные,
		Комментарий);
	
КонецПроцедуры

#КонецОбласти
