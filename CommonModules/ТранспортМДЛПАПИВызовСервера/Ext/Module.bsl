
#Область ПрограммныйИнтерфейс

// Возвращает транспортные модули по отбору.
//
// Параметры:
//  Отбор - Структура - отбор.
// 
// Возвращаемое значение:
//  Массив - транспортные модули.
//
Функция ДоступныеТранспортныеМодули(Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииМДЛП.Ссылка                         КАК Организация,
	|	ОрганизацииМДЛП.ИдентификаторКлиента           КАК ИдентификаторКлиента,
	|	ОрганизацииМДЛП.СекретКлиента                  КАК СекретКлиента,
	|	ОрганизацииМДЛП.РегистрационныйНомерУчастника  КАК ИдентификаторОрганизации,
	|	ОрганизацииМДЛП.ДатаНачалаИспользования        КАК ДатаНачалаИспользования,
	|	ОрганизацииМДЛП.ТипАутентификации              КАК ТипАутентификации,
	|	МестаДеятельностиМДЛП.Ссылка                   КАК МестоДеятельности,
	|	МестаДеятельностиМДЛП.Идентификатор            КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК ОрганизацииМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельностиМДЛП
	|	ПО
	|		МестаДеятельностиМДЛП.Организация = ОрганизацииМДЛП.Ссылка
	|ГДЕ
	|	ОрганизацииМДЛП.СобственнаяОрганизация
	|	И НЕ ОрганизацииМДЛП.ПометкаУдаления
	|	И (ЕСТЬNULL(МестаДеятельностиМДЛП.ВестиУчетВЭтойИБ, ЛОЖЬ)
	|		ИЛИ НЕ ОрганизацииМДЛП.Резидент)
	|";
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорВыбрать = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Индекс = 0;
	Если Отбор <> Неопределено Тогда
		Для Каждого Элемент Из Отбор Цикл
			
			Если ВРег(Элемент.Поле) = ВРег("Организация") Тогда
				ОператорВыбрать.Отбор.Добавить("ОрганизацииМДЛП.Ссылка = &Параметр_" + Индекс);
			ИначеЕсли ВРег(Элемент.Поле) = ВРег("МестоДеятельности") Тогда
				ОператорВыбрать.Отбор.Добавить("МестаДеятельностиМДЛП.Ссылка = &Параметр_" + Индекс);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неподдерживаемый параметр отбора транспортных модулей МДЛП'");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Параметр_" + Индекс, Элемент.Значение);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ДоступныйТранспорт = Новый Массив;
	ПараметрыПодключенияПоИдентификаторам = Новый Соответствие;
	ПараметрыСервера = ПараметрыСервераАПИ();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПодключения = ПараметрыПодключенияПоИдентификаторам.Получить(Выборка.ИдентификаторОрганизации);
		Если ПараметрыПодключения = Неопределено Тогда
			
			ПараметрыПодключения = Новый Структура;
			ПараметрыПодключения.Вставить("Организация");
			ПараметрыПодключения.Вставить("ИдентификаторОрганизации");
			ПараметрыПодключения.Вставить("ИдентификаторКлиента");
			ПараметрыПодключения.Вставить("СекретКлиента");
			ПараметрыПодключения.Вставить("ДатаНачалаИспользования");
			ПараметрыПодключения.Вставить("ТипАутентификации");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПодключения, ПараметрыСервера, Истина);
			
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
			ПараметрыПодключения.Вставить("ПрефиксВерсии", "/api/v1/");
			Если Не ЗначениеЗаполнено(ПараметрыПодключения.ТипАутентификации) Тогда
				ПараметрыПодключения.Вставить("ТипАутентификации", Перечисления.ТипыАутентификацииМДЛП.ЭП);
			КонецЕсли;
			
			ПараметрыПодключенияПоИдентификаторам.Вставить(Выборка.ИдентификаторОрганизации, ПараметрыПодключения);
			
			ДанныеМодуля = Новый Структура;
			ДанныеМодуля.Вставить("ИдентификаторСубъектаОбращения", Выборка.ИдентификаторОрганизации);
			ДанныеМодуля.Вставить("ЗагружатьВходящиеДокументы", Истина);
			ДанныеМодуля.Вставить("ОбменНаСервере", Ложь);
			ДанныеМодуля.Вставить("МенеджерОбменаНаКлиенте", Метаданные.ОбщиеМодули.ТранспортМДЛПАПИКлиент.Имя);
			ДанныеМодуля.Вставить("Представление", ?(ЗначениеЗаполнено(Выборка.Организация), Строка(Выборка.Организация), Выборка.ИдентификаторОрганизации));
			ДанныеМодуля.Вставить("ПараметрыПодключения", ПараметрыПодключения);
			ДоступныйТранспорт.Добавить(ДанныеМодуля);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторСубъектаОбращения) Тогда
			ДанныеМодуля = Новый Структура;
			ДанныеМодуля.Вставить("ИдентификаторСубъектаОбращения", Выборка.ИдентификаторСубъектаОбращения);
			ДанныеМодуля.Вставить("ЗагружатьВходящиеДокументы", Ложь);
			ДанныеМодуля.Вставить("ОбменНаСервере", Ложь);
			ДанныеМодуля.Вставить("МенеджерОбменаНаКлиенте", Метаданные.ОбщиеМодули.ТранспортМДЛПАПИКлиент.Имя);
			
			Представление = Новый Массив;
			Если ЗначениеЗаполнено(Выборка.Организация) Тогда
				Представление.Добавить(Строка(Выборка.Организация));
				Если ЗначениеЗаполнено(Выборка.МестоДеятельности) Тогда
					Представление.Добавить(Строка(Выборка.МестоДеятельности));
				КонецЕсли;
			Иначе
				Представление.Добавить(Строка(Выборка.ИдентификаторСубъектаОбращения));
			КонецЕсли;
			
			ДанныеМодуля.Вставить("Представление", СтрСоединить(Представление, " - "));
			
			ДанныеМодуля.Вставить("ПараметрыПодключения", ПараметрыПодключения);
			ДоступныйТранспорт.Добавить(ДанныеМодуля);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныйТранспорт;
	
КонецФункции

Функция ПараметрыСервераАПИ() Экспорт
	
	Адрес = Константы.АдресСервисаМДЛП.Получить();
	Возврат ТранспортМДЛПКлиентСервер.ПолучитьПараметрыСервера(Адрес);
	
КонецФункции

Функция ВыполнитьМетодАПИ(Знач ТранспортныйМодуль, Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыМетода) <> Тип("Массив") И ТипЗнч(ПараметрыМетода) <> Тип("ФиксированныйМассив") Тогда
		ПараметрыМетода = Новый Массив;
	КонецЕсли;
	
	СписокПараметров = "";
	Для Индекс = 0 По ПараметрыМетода.ВГраница() Цикл
		СписокПараметров = СписокПараметров + ", ПараметрыМетода[" + Формат(Индекс, "ЧН=0; ЧГ=") + "]";
	КонецЦикла;
	
	Выражение = СтрШаблон("ТранспортМДЛПАПИКлиентСервер.%1(ТранспортныйМодуль%2)", ИмяМетода, СписокПараметров);
	
	Возврат Вычислить(Выражение);
	
КонецФункции

Функция ПараметрыПодключения(Организация, МестоДеятельности = Неопределено) Экспорт
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Организация));
	Если МестоДеятельности <> Неопределено Тогда
		Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", МестоДеятельности));
	КонецЕсли;
	
	ДоступныйТранспорт = ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныйТранспорт[0].ПараметрыПодключения;
	
КонецФункции

#Область ВыполнениеВДлительнойОперации

// Возвращает параметры запуска методов АПИ в длительной операции на сервере.
// (см. ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации)
//
// Параметры:
//  ИдентификаторФормы - идентификатор формы владельца длительной операции.
//
// Возвращаемое значение:
//  Параметры - Структура - параметры запуска методов АПИ в длительной операции на сервере:
//   * ПараметрыВыполненияВФоне - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
//
Функция ПараметрыЗапускаМетодовАПИВДлительнойОперации(ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПараметрыВыполненияВФоне", ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы));
	
	РежимЗапускаМетодовАПИМДЛПФоновый = Перечисления.РежимыЗапускаМетодовАПИМДЛП.Фоновый;
	
	РежимЗапускаМетодовАПИМДЛП = Константы.РежимЗапускаМетодовАПИМДЛП.Получить();
	Если Не ЗначениеЗаполнено(РежимЗапускаМетодовАПИМДЛП) Тогда
		Константы.РежимЗапускаМетодовАПИМДЛП.Установить(РежимЗапускаМетодовАПИМДЛПФоновый);
		РежимЗапускаМетодовАПИМДЛП = РежимЗапускаМетодовАПИМДЛПФоновый;
	КонецЕсли;
	
	Параметры.ПараметрыВыполненияВФоне.Вставить("ЗапуститьНеВФоне", РежимЗапускаМетодовАПИМДЛП <> РежимЗапускаМетодовАПИМДЛПФоновый);
	
	Возврат Параметры;
	
КонецФункции

Функция ВыполнитьМетодАПИ_ДлительнаяОперация(Знач ТранспортныйМодуль, Знач ИмяМетода, Знач ПараметрыМетода = Неопределено, Знач ПараметрыВыполненияВФоне = Неопределено) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТранспортныйМодуль" , ТранспортныйМодуль);
	ПараметрыПроцедуры.Вставить("ИмяМетода"          , ИмяМетода);
	ПараметрыПроцедуры.Вставить("ПараметрыМетода"    , ПараметрыМетода);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ИмяМетода;
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыВыполненияВФоне);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ТранспортМДЛПАПИВызовСервера.ВыполнитьМетодАПИ_Запустить_ДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьСообщениеВОчередьПолученияКвитанций(Знач Сообщение, Знач ИдентификаторОрганизации, Знач ОбновитьСостояниеПодтверждения) Экспорт
	
	РегистрыСведений.ОчередьПолученияКвитанцийМДЛП.ДобавитьСообщениеВОчередь(Сообщение, ИдентификаторОрганизации, ОбновитьСостояниеПодтверждения);
	
КонецПроцедуры

Функция ПолучитьДанныеСообщенийОжидающихКвитанции(Знач ИдентификаторОрганизации, ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Очередь.Сообщение                                 КАК Ссылка,
	|	Очередь.Сообщение.Операция                        КАК Операция,
	|	Очередь.Сообщение.ИдентификаторЗапроса            КАК ИдентификаторЗапроса,
	|	Очередь.Сообщение.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	РегистрСведений.ОчередьПолученияКвитанцийМДЛП КАК Очередь
	|ГДЕ
	|	Очередь.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И Очередь.РегистраторВыбытия = ЗНАЧЕНИЕ(Справочник.РегистраторыМДЛП.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если ТипыДокументов <> Неопределено Тогда
		
		// Обрабатываем только те квитанции, типы владельцев которых указаны в параметре ТипыДокументов (если параметр заполнен).
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ТИПЗНАЧЕНИЯ(Очередь.Сообщение.ВладелецФайла) В (&ТипыДокументов)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
		
	КонецЕсли;
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	Если СписокДокументов <> Неопределено Тогда
		
		// Обрабатываем только те квитанции, владельцы которых указаны в параметре СписокДокументов (если параметр заполнен).
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Очередь.Сообщение.ВладелецФайла В (&СписокДокументов)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Процедура ЗарегистрироватьКвитанцииСообщения(Знач Сообщение, Знач Квитанции) Экспорт
	
	Для Каждого Квитанция Из Квитанции Цикл
		
		Если ТипЗнч(Квитанция.ТипДокумента) = Тип("Число") Тогда
			ТекстСообщения = Квитанция.ТекстСообщения;
		Иначе
			ТекстСообщения = ИнтеграцияМДЛП.СформироватьУведомлениеОбОшибкеФиксации(Квитанция.ТекстСообщения, Сообщение.ИдентификаторЗапроса, Квитанция.ТипДокумента);
		КонецЕсли;
		
		РезультатОперации = ИнтеграцияМДЛПВызовСервера.ЗарегистрироватьВходящееСообщениеКОбработке(
			ТекстСообщения, Сообщение.ИдентификаторЗапроса, Сообщение.ИдентификаторСубъектаОбращения);
		Если РезультатОперации.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатОперации.ОписаниеОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ОчередьПолученияКвитанцийМДЛП.УдалитьСообщениеИзОчереди(Сообщение.Ссылка);
	
КонецПроцедуры

Функция ПолучитьДатуПоследнегоДокументаСписка(Знач ТипСписка, Знач ИдентификаторОрганизации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(СписокДокументов.ДатаДокумента), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокумента
	|ИЗ
	|	#СписокДокументов КАК СписокДокументов
	|ГДЕ
	|	СписокДокументов.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|");
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СписокДокументов", МетаданныеСпискаПоТипу(ТипСписка).ПолноеИмя());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ДатаДокумента;
	
КонецФункции

Функция ПолучитьГраницуЗагрузкиДокументовСписка(Знач ТипСписка, Знач ИдентификаторОрганизации) Экспорт
	
	МетаданныеГраницы = МетаданныеГраницыЗагрузкиДокументовПоТипуСписка(ТипСписка);
	
	Границы = Константы[МетаданныеГраницы.Имя].Получить().Получить();
	Если Границы <> Неопределено Тогда
		Граница = Границы.Получить(ИдентификаторОрганизации);
	Иначе
		Граница = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Граница) Тогда
		Граница = ПолучитьДатуПоследнегоДокументаСписка(ТипСписка, ИдентификаторОрганизации);
	КонецЕсли;
	
	Возврат Макс(Граница, ГраницаОперативногоХранилищаСпискаДокументов());
	
КонецФункции

Процедура УстановитьГраницуЗагрузкиДокументовСписка(Знач ТипСписка, Знач ИдентификаторОрганизации) Экспорт
	
	ДатаПоследнегоДокумента = ПолучитьДатуПоследнегоДокументаСписка(ТипСписка, ИдентификаторОрганизации);
	
	МетаданныеГраницы = МетаданныеГраницыЗагрузкиДокументовПоТипуСписка(ТипСписка);
	Границы = Константы[МетаданныеГраницы.Имя].Получить().Получить();
	Если Границы <> Неопределено Тогда
		РедактируемыеГраницы = Новый Соответствие(Границы);
	Иначе
		РедактируемыеГраницы = Новый Соответствие;
	КонецЕсли;
	
	РедактируемыеГраницы.Вставить(ИдентификаторОрганизации, Макс(ДатаПоследнегоДокумента, ГраницаОперативногоХранилищаСпискаДокументов()));
	НовыеГраницы = Новый ФиксированноеСоответствие(РедактируемыеГраницы);
	Константы[МетаданныеГраницы.Имя].Установить(Новый ХранилищеЗначения(НовыеГраницы));
	
КонецПроцедуры

Функция ГраницаОперативногоХранилищаСпискаДокументов() Экспорт
	
	КоличествоДнейХраненияДокументовВОперативномХранилищеМДЛП = 30;
	Возврат КонецДня(ТекущаяДатаСеанса() - КоличествоДнейХраненияДокументовВОперативномХранилищеМДЛП * 86400) + 1;
	
КонецФункции


Процедура ДополнитьСписокДокументов(Знач ТипСписка, Знач ПолученныеДанные) Экспорт
	
	Если ПолученныеДанные.Количество() <> 0 Тогда
		
		ДанныеДокументов = Новый ТаблицаЗначений;
		ДанныеДокументов.Колонки.Добавить("ИдентификаторЗапроса"               , ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ДанныеДокументов.Колонки.Добавить("ИдентификаторДокумента"             , ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ДанныеДокументов.Колонки.Добавить("ДатаДокумента"                      , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ДанныеДокументов.Колонки.Добавить("ИдентификаторОрганизацииОтправителя", Метаданные.ОпределяемыеТипы.ИдентификаторСубъектаОбращенияОбщийМДЛП.Тип);
		ДанныеДокументов.Колонки.Добавить("Отправитель"                        , Метаданные.ОпределяемыеТипы.ИдентификаторСубъектаОбращенияОбщийМДЛП.Тип);
		ДанныеДокументов.Колонки.Добавить("ИдентификаторОрганизации"           , Метаданные.ОпределяемыеТипы.ИдентификаторСубъектаОбращенияОбщийМДЛП.Тип);
		ДанныеДокументов.Колонки.Добавить("Получатель"                         , Метаданные.ОпределяемыеТипы.ИдентификаторСубъектаОбращенияОбщийМДЛП.Тип);
		ДанныеДокументов.Колонки.Добавить("ТипДокумента"                       , ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ДанныеДокументов.Колонки.Добавить("СтатусОбработкиДокумента"           , ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
		Для Каждого ОписаниеДокумента Из ПолученныеДанные Цикл
			Если ОписаниеДокумента["doc_status"] = "PROCESSED_DOCUMENT" Или ОписаниеДокумента["doc_status"] = "FAILED_RESULT_READY" Тогда
				Описание = ДанныеДокументов.Добавить();
				Описание.ИдентификаторОрганизации            = ОписаниеДокумента["sys_id"];
				Описание.ИдентификаторДокумента              = ОписаниеДокумента["document_id"];
				Описание.ИдентификаторЗапроса                = ОписаниеДокумента["request_id"];
				Описание.ДатаДокумента                       = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ОписаниеДокумента["date"]);
				Описание.ИдентификаторОрганизацииОтправителя = ОписаниеДокумента["sender_sys_id"];
				Описание.Отправитель                         = ОписаниеДокумента["sender"];
				Описание.Получатель                          = ОписаниеДокумента["receiver"];
				Описание.ТипДокумента                        = ОписаниеДокумента["doc_type"];
				Описание.СтатусОбработкиДокумента            = ОписаниеДокумента["processing_document_status"];
			КонецЕсли;
		КонецЦикла;
		
		ИмяПоляИдентификатора = ?(ВРег(ТипСписка) = "ВХОДЯЩИЕ", "Получатель", "Отправитель");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	&Таблица КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторДокумента
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		// Если в этой ИБ ведется учет по этому МД.
		|		КОГДА ЕСТЬNULL(МестаДеятельности.ВестиУчетВЭтойИБ, ЛОЖЬ)
		|			ТОГДА ЛОЖЬ
		// Если документ не содержит реквизитов МД. Например, документы подсистемы Импорт.
		|		КОГДА НЕ Организации.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		// При загрузке исходящего сообщения Перемещения, соединение выполняется по МД отправителю, учет по которому в этой ИБ может не вестись.
		|		КОГДА Таблица.ТипДокумента В (&ТипыДокументовПеремещения)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ               КАК ЗагрузкаНеТребуется,
		|	Таблица.*
		|ИЗ
		|	ДанныеДокументов КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		#СписокДокументов КАК ИзвестныеДокументы
		|	ПО
		|		ИзвестныеДокументы.ИдентификаторДокумента = Таблица.ИдентификаторДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		МестаДеятельности.Идентификатор = Таблица." + ИмяПоляИдентификатора + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ОрганизацииМДЛП КАК Организации
		|	ПО
		|		Организации.РегистрационныйНомерУчастника = Таблица." + ИмяПоляИдентификатора + "
		|		И Таблица." + ИмяПоляИдентификатора + " = Таблица.ИдентификаторОрганизации
		|		И Организации.ДатаНачалаИспользования < &ТекущаяДатаСеанса
		|ГДЕ
		|	ИзвестныеДокументы.ИдентификаторДокумента ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.ДатаДокумента
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СписокДокументов", МетаданныеСпискаПоТипу(ТипСписка).ПолноеИмя());
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Таблица", ДанныеДокументов);
		ТипыДокументовПеремещения = Новый Массив;
		ТипыДокументовПеремещения.Добавить(431);
		ТипыДокументовПеремещения.Добавить(470);
		Запрос.УстановитьПараметр("ТипыДокументовПеремещения", ТипыДокументовПеремещения);
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
		
		МенеджерСписка = МенеджерСпискаПоТипу(ТипСписка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерСписка.ДобавитьОписаниеДокумента(Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьЗагрузкиДокументов(Знач ТипСписка, Знач ИдентификаторОрганизации) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СписокДокументов.ДатаДокумента             КАК ДатаДокумента,
	|	СписокДокументов.ИдентификаторДокумента    КАК ИдентификаторДокумента,
	|	СписокДокументов.ИдентификаторЗапроса      КАК ИдентификаторЗапроса,
	|	СписокДокументов.ИдентификаторОрганизации  КАК ИдентификаторОрганизации
	|ИЗ
	|	#СписокДокументов КАК СписокДокументов
	|ГДЕ
	|	СписокДокументов.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И НЕ СписокДокументов.Загружен
	|	И НЕ СписокДокументов.ЗагрузкаНеТребуется
	|УПОРЯДОЧИТЬ ПО
	|	СписокДокументов.ДатаДокумента
	|";
	
	МетаданныеСписка = МетаданныеСпискаПоТипу(ТипСписка);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СписокДокументов", МетаданныеСписка.ПолноеИмя());
	
	ИгнорируемыеРеквизиты = Новый Массив;
	ИгнорируемыеРеквизиты.Добавить("ИдентификаторОрганизации");
	ИгнорируемыеРеквизиты.Добавить("ИдентификаторДокумента");
	ИгнорируемыеРеквизиты.Добавить("ИдентификаторЗапроса");
	ИгнорируемыеРеквизиты.Добавить("ДатаДокумента");
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	Для Каждого Ресурс Из МетаданныеСписка.Ресурсы Цикл
		Если ИгнорируемыеРеквизиты.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВыбираемыеПоля.Добавить(Ресурс.Имя);
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Процедура ЗарегистрироватьВходящееСообщениеКОбработке(Знач ТипСписка, Знач ДокументИзОчереди, Знач ТекстСообщения, Знач ДополнительныеПараметры) Экспорт
	
	ТипыДокументовПеремещения = Новый Массив;
	ТипыДокументовПеремещения.Добавить(431);
	ТипыДокументовПеремещения.Добавить(470);
	
	ИдентификаторСубъектаОбращения = Неопределено;
	Если ВРег(ТипСписка) = "ВХОДЯЩИЕ" Тогда
		ИдентификаторСубъектаОбращения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокументИзОчереди, "Получатель");
	ИначеЕсли ТипыДокументовПеремещения.Найти(ДокументИзОчереди.ТипДокумента) = Неопределено Тогда
		// Если не перемещение
		ИдентификаторСубъектаОбращения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокументИзОчереди, "Отправитель");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторСубъектаОбращения) Тогда
		ИдентификаторСубъектаОбращения = ДокументИзОчереди.ИдентификаторОрганизации;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Результат = ИнтеграцияМДЛПВызовСервера.ЗарегистрироватьВходящееСообщениеКОбработке(
			ТекстСообщения,
			ДокументИзОчереди.ИдентификаторЗапроса,
			ИдентификаторСубъектаОбращения,
			ДополнительныеПараметры);
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ОписаниеОшибки;
		КонецЕсли;
		
		МенеджерСпискаПоТипу(ТипСписка).ОтметитьДокументЗагружен(ДокументИзОчереди.ИдентификаторДокумента);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция УстановитьБлокировку(Знач ТипСписка, Знач ИдентификаторОрганизации) Экспорт
	
	Менеджер = МенеджерСпискаПоТипу(ТипСписка);
	
	КлючБлокировки = Менеджер.СоздатьКлючЗаписи(Новый Структура("ИдентификаторДокумента", ИдентификаторОрганизации));
	ИдентификаторБлокировки = Новый УникальныйИдентификатор;
	ЗаблокироватьДанныеДляРедактирования(КлючБлокировки,, ИдентификаторБлокировки);
	
	ПараметрыБлокировки = Новый Структура;
	ПараметрыБлокировки.Вставить("КлючБлокировки", КлючБлокировки);
	ПараметрыБлокировки.Вставить("ИдентификаторБлокировки", ИдентификаторБлокировки);
	Возврат ПараметрыБлокировки;
	
КонецФункции

Процедура СнятьБлокировку(Знач ПараметрыБлокировки) Экспорт
	
	РазблокироватьДанныеДляРедактирования(ПараметрыБлокировки.КлючБлокировки, ПараметрыБлокировки.ИдентификаторБлокировки);
	
КонецПроцедуры

Функция МенеджерСпискаПоТипу(ТипСписка)
	
	Если ВРег(ТипСписка) = "ВХОДЯЩИЕ" Тогда
		Возврат РегистрыСведений.СписокВходящихДокументовМДЛП;
	КонецЕсли;
	
	Если ВРег(ТипСписка) = "ИСХОДЯЩИЕ" Тогда
		Возврат РегистрыСведений.СписокИсходящихДокументовМДЛП;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный тип списка: %1'"), ТипСписка);
	
КонецФункции

Функция МетаданныеСпискаПоТипу(ТипСписка)
	
	Если ВРег(ТипСписка) = "ВХОДЯЩИЕ" Тогда
		Возврат Метаданные.РегистрыСведений.СписокВходящихДокументовМДЛП;
	КонецЕсли;
	
	Если ВРег(ТипСписка) = "ИСХОДЯЩИЕ" Тогда
		Возврат Метаданные.РегистрыСведений.СписокИсходящихДокументовМДЛП;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный тип списка: %1'"), ТипСписка);
	
КонецФункции

Функция МетаданныеГраницыЗагрузкиДокументовПоТипуСписка(ТипСписка)
	
	Если ВРег(ТипСписка) = "ВХОДЯЩИЕ" Тогда
		Возврат Метаданные.Константы.ГраницаЗагрузкиВходящихДокументовМДЛП;
	КонецЕсли;
	
	Если ВРег(ТипСписка) = "ИСХОДЯЩИЕ" Тогда
		Возврат Метаданные.Константы.ГраницаЗагрузкиИсходящихДокументовМДЛП;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный тип списка: %1'"), ТипСписка);
	
КонецФункции

Функция СформироватьТекстУспешнойКвитанцииДокумента(ТипДокумента, ИдентификаторЗапроса, ДатаДокумента) Экспорт
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен();
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ИмяПакета = "result";
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ДатаКвитанции = ДатаДокумента + 1; // Прибавим дате квитанции 1 секунду. Предположительно, за это время формируется квитанция документа.
	
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "accept_time", ДатаКвитанции, УстановленныеДаты);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "operation", ТипДокумента);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "operation_id", ИдентификаторЗапроса);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "operation_result", "Accepted");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "operation_comment", НСтр("ru = 'Успешное завершение операции'"));
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТипЗапросаМетодовАПИПоУмолчанию() Экспорт
	
	ТипЗапросаПоУмолчанию = Константы.ТипЗапросаМетодовАПИПоУмолчаниюМДЛП.Получить();
	Если Не ЗначениеЗаполнено(ТипЗапросаПоУмолчанию) Тогда
		ТипЗапросаПоУмолчанию = Перечисления.ТипыЗапросовМетодовАПИМДЛП.Асинхронный;
		Константы.ТипЗапросаМетодовАПИПоУмолчаниюМДЛП.Установить(ТипЗапросаПоУмолчанию);
	КонецЕсли;
	
	Возврат ТипЗапросаПоУмолчанию;
	
КонецФункции

#Область ВыполнениеВДлительнойОперацииСлужебный

Процедура ВыполнитьМетодАПИ_Запустить_ДлительнаяОперация(Знач Параметры, Знач АдресРезультатаМетодаАПИ) Экспорт
	
	Результат = ВыполнитьМетодАПИ(Параметры.ТранспортныйМодуль, Параметры.ИмяМетода, Параметры.ПараметрыМетода);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультатаМетодаАПИ);
	
КонецПроцедуры

Функция ВыполнитьМетодАПИ_ОбработатьРезультат_ДлительнаяОперация(Знач АдресРезультатаМетодаАПИ) Экспорт
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
	РезультатМетодаАПИ = ПолучитьИзВременногоХранилища(АдресРезультатаМетодаАПИ);
	ЗаполнитьЗначенияСвойств(Результат, РезультатМетодаАПИ);
	
	Результат.Вставить("АдресРезультатаМетодаАПИ", АдресРезультатаМетодаАПИ);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеАналитическихДанных

Функция ИдентификаторТипаАсинхроннойЗадачи(ТипЗадачи) Экспорт
	
	Возврат Перечисления.ТипыАсинхронныхЗадачМДЛП.ИдентификаторТипаАсинхроннойЗадачи(ТипЗадачи);
	
КонецФункции

Функция ПолучитьЗадачиИзСпискаОжиданияАсинхронныхЗадач(Отбор = Неопределено) Экспорт
	
	АсинхронныеЗадачи = РегистрыСведений.СписокОжиданияАсинхронныхЗадачМДЛП.ПолучитьЗадачи(Отбор);
	
	Результат = Новый Соответствие;
	Для Каждого АсинхроннаяЗадача Из АсинхронныеЗадачи Цикл
		Результат.Вставить(АсинхроннаяЗадача.Идентификатор, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(АсинхроннаяЗадача));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗадачуВСписокОжиданияАсинхронныхЗадач(ДанныеЗадачи) Экспорт
	
	РегистрыСведений.СписокОжиданияАсинхронныхЗадачМДЛП.ДобавитьЗадачу(ДанныеЗадачи);
	
КонецПроцедуры

Процедура УдалитьЗадачиИзСпискаОжиданияАсинхронныхЗадач(Отбор = Неопределено) Экспорт
	
	РегистрыСведений.СписокОжиданияАсинхронныхЗадачМДЛП.УдалитьЗадачи(Отбор);
	
КонецПроцедуры

Функция ВключеноЛогированиеАсинхронныхЗадач() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
#Иначе
	ПараметрЗапускаПриложения = ПараметрЗапуска;
#КонецЕсли
	
	Возврат СтрНайти(ПараметрЗапускаПриложения, "ЛогАсинхронныхЗадач") > 0
		Или СтрНайти(ПараметрЗапускаПриложения, "ЛогированиеАсинхронныхЗадач") > 0;
	
КонецФункции

Функция ПолучитьДанныеАсинхроннойЗадачиИзАрхива(ИсходныеДанные) Экспорт
	
	ПапкаНазначения = ФайловаяСистема.СоздатьВременныйКаталог("async.log");
	
	ВключеноЛогированиеАсинхронныхЗадач = ВключеноЛогированиеАсинхронныхЗадач();
	
	Результат = ИзвлечьФайлыИзАрхива(ИсходныеДанные, ПапкаНазначения, ВключеноЛогированиеАсинхронныхЗадач);
	Если Результат.Статус = "Ошибка" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		НайденныеФайлыJSON = НайтиФайлы(ПапкаНазначения, "*.json");
		НайденныеФайлыCSV = НайтиФайлы(ПапкаНазначения, "*.csv");
		Если НайденныеФайлыJSON.Количество() > 0 Тогда
			Результат = ПолучитьДанныеАсинхроннойЗадачиИзФайловJSON(НайденныеФайлыJSON);
		ИначеЕсли НайденныеФайлыCSV.Количество() > 0 Тогда
			Результат = ПолучитьДанныеАсинхроннойЗадачиИзФайловCSV(НайденныеФайлыCSV);
		Иначе
			Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
			Результат.Статус = "Ошибка";
			Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить данные из архива.'");
		КонецЕсли;
	Исключение
		Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ВключеноЛогированиеАсинхронныхЗадач Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхРезультатовМетодов

Функция ПараметрыЗагрузкиДанныхРезультатовМетода(ТипЗадачи) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипЗадачи", ТипЗадачи);
	
	Результат = ПроверитьВозможностьЗагрузкиДанныхРезультатовМетода(ТипЗадачи);
	Если Результат.Статус = "Ошибка" Тогда
		Возврат Параметры;
	КонецЕсли;
	
	МодульЗагрузки = МодульЗагрузкиДанныхРезультатовМетода(ТипЗадачи);
	ПараметрыЗагрузки = МодульЗагрузки.ПараметрыЗагрузкиДанныхРезультатовМетода(ТипЗадачи);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗагрузки, Истина);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗагрузитьДанныеРезультатовМетода(ИсходныеДанные, ПараметрыЗагрузки) Экспорт
	
	Результат = ПроверитьВозможностьЗагрузкиДанныхРезультатовМетода(ПараметрыЗагрузки.ТипЗадачи);
	Если Результат.Статус = "Ошибка" Тогда
		Возврат Результат;
	КонецЕсли;
	
	МодульЗагрузки = МодульЗагрузкиДанныхРезультатовМетода(ПараметрыЗагрузки.ТипЗадачи);
	Возврат МодульЗагрузки.ЗагрузитьДанныеРезультатовМетода(ИсходныеДанные, ПараметрыЗагрузки);
	
КонецФункции

Функция ПроверитьВозможностьЗагрузкиДанныхРезультатовМетода(ТипЗадачи) Экспорт
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
	Модуль = МодульЗагрузкиДанныхРезультатовМетода(ТипЗадачи);
	Если Модуль = Неопределено Тогда
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Механизм предварительной загрузки данных не предусмотрен для метода ""%1"".'");
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат.ОписаниеОшибки, ТипЗадачи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МодульЗагрузкиДанныхРезультатовМетода(ТипЗадачи)
	
	Если ТипЗадачи = Перечисления.ТипыАсинхронныхЗадачМДЛП.ВыгрузкаДанныхИзРеестраКИЗ Тогда
		Модуль = РегистрыСведений.ОстаткиПотребительскихУпаковокМДЛП;
	ИначеЕсли ТипЗадачи = "ЗагрузитьОстаткиГрупповыхУпаковокСинхронно" Тогда
		Модуль = РегистрыСведений.ОстаткиГрупповыхУпаковокМДЛП;
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

#КонецОбласти

Функция ИзвлечьФайлыИзАрхива(ИсходныеДанные, ПапкаНазначения, ВключеноЛогирование) Экспорт
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
	Попытка
		Поток = ИсходныеДанные.ОткрытьПотокДляЧтения();
	Исключение
		Если Не ВключеноЛогирование Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
		КонецЕсли;
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла(Поток);
	Исключение
		Поток.Закрыть();
		Если Не ВключеноЛогирование Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
		КонецЕсли;
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Для Каждого Элемент Из ЧтениеZIP.Элементы Цикл
			Если СтрНайти(Элемент.Имя, "result") > 0
			 Или Элемент.Расширение = "csv" Тогда
				ЧтениеZIP.Извлечь(Элемент, ПапкаНазначения);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ЧтениеZIP.Закрыть();
		Поток.Закрыть();
		Если Не ВключеноЛогирование Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
		КонецЕсли;
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	ЧтениеZIP.Закрыть();
	Поток.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначенияПолейСтрокиФайлаCSV(ЧтениеДанных, Разделитель) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЧтениеЗавершено"           , Ложь);
	Результат.Вставить("КоличествоПрочитанныхСтрок", 0);
	Результат.Вставить("ЗначенияПолейСтрокиФайла"  , Новый Массив);
	
	ПредыдущаяСтрокаФайла = "";
	Пока Не ЧтениеДанных.ЧтениеЗавершено Цикл
		
		Результат.КоличествоПрочитанныхСтрок = Результат.КоличествоПрочитанныхСтрок + 1;
		
		СтрокаФайла = ПредыдущаяСтрокаФайла + ЧтениеДанных.ПрочитатьСтроку();
		Если Не ЗначениеЗаполнено(СтрокаФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(СтрокаФайла, """") % 2 <> 0 Тогда
			// Строка была разорвана. Нужно соединить.
			ПредыдущаяСтрокаФайла = СтрокаФайла;
			Продолжить;
		Иначе
			ПредыдущаяСтрокаФайла = "";
		КонецЕсли;
		
		ИсходныеЗначенияПолейФайла = СтрРазделить(СтрокаФайла, Разделитель);
		ПредыдущееЗначениеПоляФайла = "";
		Для Каждого ЗначениеПоляФайла Из ИсходныеЗначенияПолейФайла Цикл
			
			ЗначениеПоляФайла = ПредыдущееЗначениеПоляФайла + ЗначениеПоляФайла;
			
			Если СтрЧислоВхождений(ЗначениеПоляФайла, """") % 2 <> 0 Тогда
				// Значение было разорвано. Нужно соединить.
				// В этом случае Разделитель не является разделителем значений, а является просто символом в значении.
				ПредыдущееЗначениеПоляФайла = ЗначениеПоляФайла + Разделитель;
				Продолжить;
			Иначе
				ПредыдущееЗначениеПоляФайла = "";
			КонецЕсли;
			
			// Убираем лишние кавычки, оставляя нужные.
			ЗначениеПоляФайла = СтрЗаменить(ЗначениеПоляФайла, """""", "@@");
			ЗначениеПоляФайла = СтрЗаменить(ЗначениеПоляФайла, """", "");
			ЗначениеПоляФайла = СтрЗаменить(ЗначениеПоляФайла, "@@", """");
			
			Результат.ЗначенияПолейСтрокиФайла.Добавить(ЗначениеПоляФайла);
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЦикла;
	
	Результат.ЧтениеЗавершено = Истина;
	Возврат Результат;
	
КонецФункции

Функция ТранспортныеНомераУпаковокДляПолученияОстатков(ИдентификаторМестаДеятельности) Экспорт
	
	МестоДеятельности = Справочники.МестаДеятельностиМДЛП.НайтиПоРеквизиту("Идентификатор", ИдентификаторМестаДеятельности);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.ОстаткиПотребительскихУпаковокМДЛП КАК ОстаткиПотребительскихУпаковокМДЛП
	|ГДЕ
	|	ОстаткиПотребительскихУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|	И ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки <> &ПустаяГрупповаяУпаковка
	|");
	
	Запрос.УстановитьПараметр("МестоДеятельности", МестоДеятельности);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерГрупповойУпаковки");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеАналитическихДанныхСлужебные

Функция ПолучитьДанныеАсинхроннойЗадачиИзФайловJSON(НайденныеФайлыJSON)
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
	ДанныеСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Новый ДвоичныеДанные(НайденныеФайлыJSON[0].ПолноеИмя));
	Данные = ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(ДанныеСтрокой, Истина);
	
	Результат.Вставить("Данные", Данные);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеАсинхроннойЗадачиИзФайловCSV(НайденныеФайлыCSV, Разделитель = ",")
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	Результат.Вставить("Данные", Новый Структура);
	Результат.Данные.Вставить("total"                        , 0);
	Результат.Данные.Вставить("КоличествоОбработанныхЗаписей", 0);
	Результат.Данные.Вставить("ОшибкиЗаписей"                , Новый Массив);
	
	Результат.Данные.Вставить("entries", Новый Массив);
	
	Попытка
		
		Для Каждого ФайлCSV Из НайденныеФайлыCSV Цикл
			
			ЧтениеДанных = Новый ЧтениеДанных(ФайлCSV.ПолноеИмя, КодировкаТекста.UTF8);
			
			РезультатПолученияИменПолей = ПолучитьЗначенияПолейСтрокиФайлаCSV(ЧтениеДанных, Разделитель);
			ИменаПолейФайла = РезультатПолученияИменПолей.ЗначенияПолейСтрокиФайла;
			КоличествоПолейФайла = ИменаПолейФайла.Количество();
			КоличествоСтрокФайла = РезультатПолученияИменПолей.КоличествоПрочитанныхСтрок;
			
			Пока Истина Цикл
				
				Попытка
					РезультатПолученияЗначений = ПолучитьЗначенияПолейСтрокиФайлаCSV(ЧтениеДанных, Разделитель);
					ЗначенияПолейСтрокиФайла = РезультатПолученияЗначений.ЗначенияПолейСтрокиФайла;
				Исключение
					Результат.Данные.ОшибкиЗаписей.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
				Если РезультатПолученияЗначений.ЧтениеЗавершено Тогда
					Прервать;
				КонецЕсли;
				
				Результат.Данные.total = Результат.Данные.total + 1;
				
				КоличествоСтрокФайла = КоличествоСтрокФайла + РезультатПолученияЗначений.КоличествоПрочитанныхСтрок;
				Если КоличествоПолейФайла <> ЗначенияПолейСтрокиФайла.Количество() Тогда
					ТекстОшибки = НСтр("ru='Обработка строки %1 файла %2: количество значений строки не соответствует количеству колонок заголовка.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КоличествоСтрокФайла, ФайлCSV.Имя);
					Результат.Данные.ОшибкиЗаписей.Добавить(ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				Попытка
					ОбработатьЗначенияПолейСтрокиФайлаCSV(ИменаПолейФайла, ЗначенияПолейСтрокиФайла, Результат.Данные.entries);
					Результат.Данные.КоличествоОбработанныхЗаписей = Результат.Данные.КоличествоОбработанныхЗаписей + 1;
				Исключение
					Результат.Данные.ОшибкиЗаписей.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
			ЧтениеДанных.Закрыть();
			
		КонецЦикла;
		
	Исключение
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьЗначенияПолейСтрокиФайлаCSV(ИменаПолейФайла, ЗначенияПолейСтрокиФайла, ДанныеЗаписей)
	
	ДанныеСтроки = Новый Структура;
	Для Индекс = 0 По ИменаПолейФайла.ВГраница() Цикл
		ДанныеСтроки.Вставить(ИменаПолейФайла[Индекс], ЗначенияПолейСтрокиФайла[Индекс]);
	КонецЦикла;
	ДанныеЗаписей.Добавить(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
