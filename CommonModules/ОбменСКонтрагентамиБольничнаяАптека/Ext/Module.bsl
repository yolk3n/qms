
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБЭД

#Область НастройкаИнтеграцииЭлектронныхДокументов

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов.
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	// Для обмена по форматам ФНС.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.ТоварнаяНакладная);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.УПД);
	
	// Для обмена по форматам CML 2.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.ЗаказТовара); // Только как исходящий документ ЗаказПоставщику.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.ОтветНаЗаказ); // Только как входящий документа ЗаказПоставщику.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.КаталогТоваров); // Только как входящий документа ЗаказПоставщику.
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО.
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	МетаданныеДокументов = Метаданные.Документы;
	МетаданныеЖурналовДокументов = Метаданные.ЖурналыДокументов;
	
	Исходящие = СоставКомандЭДО.Исходящие;
	Исходящие.Добавить(МетаданныеДокументов.ЗаказПоставщику.ПолноеИмя());
	Исходящие.Добавить(МетаданныеДокументов.ВозвратТоваровПоставщику.ПолноеИмя());
	
	Входящие = СоставКомандЭДО.Входящие;
	Входящие.Добавить(МетаданныеДокументов.ЗаказПоставщику.ПолноеИмя());
	Входящие.Добавить(МетаданныеДокументов.ПоступлениеТоваров.ПолноеИмя());
	
	БезПодписи = СоставКомандЭДО.БезПодписи;
	БезПодписи.Добавить(МетаданныеДокументов.ЗаказПоставщику.ПолноеИмя());
	БезПодписи.Добавить(МетаданныеДокументов.ПоступлениеТоваров.ПолноеИмя());
	
	Внутренние = СоставКомандЭДО.Внутренние;
	Внутренние.Добавить(МетаданныеДокументов.ВнутреннееПотреблениеТоваров.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ВнутреннееПотреблениеТоваровВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ВозвратТоваровИзОтделения.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ЗаказНаПеремещение.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ИнвентаризацияТоваровНаСкладе.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ИнвентаризацияТоваровНаСкладеВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ОприходованиеИзлишковТоваров.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ОприходованиеИзлишковТоваровВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ОтпускТоваровВОтделение.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПеремещениеТоваров.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПеремещениеТоваровМеждуОтделениями.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПотреблениеТоваровПоНазначениямВрачей.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.СписаниеНедостачТоваров.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.СписаниеНедостачТоваровВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ТребованиеОтделения.ПолноеИмя());
	
	Внутренние.Добавить(МетаданныеДокументов.ПередачаТоваровНаСторону.ПолноеИмя());
	
	Внутренние.Добавить(МетаданныеДокументов.РазмещениеТоваровПоМестамХранения.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.РазмещениеТоваровПоМестамХраненияВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПересортицаТоваров.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПересортицаТоваровВОтделении.ПолноеИмя());
	Внутренние.Добавить(МетаданныеДокументов.ПрочееОприходованиеТоваров.ПолноеИмя());
	
	Внутренние.Добавить(МетаданныеЖурналовДокументов.СкладскиеДокументы.ПолноеИмя());
	Внутренние.Добавить(МетаданныеЖурналовДокументов.СкладскиеДокументыОтделений.ПолноеИмя());
	Внутренние.Добавить(МетаданныеЖурналовДокументов.СкладскиеАкты.ПолноеИмя());
	Внутренние.Добавить(МетаданныеЖурналовДокументов.СкладскиеАктыОтделений.ПолноеИмя());
	
	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	СоставКомандЭДО.Договоры.Добавить("Справочник.ДоговорыКонтрагентов");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры.
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями.
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьПрямойОбмен.
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.РазрешеноИспользоватьВнутреннийЭДО.
Процедура РазрешеноИспользоватьВнутреннийЭДО(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО.
Процедура ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(Включать) Экспорт
	
	Включать = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииДокументовСПоддержкойДиагностикиОшибок.
Процедура ПриОпределенииОбъектовМетаданныхСПоддержкойДиагностикиОшибок(СписокЭлементов) Экспорт
	
	МетаданныеДокументов = Метаданные.Документы;
	
	// Исходящие
	СписокЭлементов.Добавить(МетаданныеДокументов.ВозвратТоваровПоставщику);
	
	// Входящие
	СписокЭлементов.Добавить(МетаданныеДокументов.ПоступлениеТоваров);
	
	// Внутренние
	СписокЭлементов.Добавить(МетаданныеДокументов.ВнутреннееПотреблениеТоваров);
	СписокЭлементов.Добавить(МетаданныеДокументов.ВнутреннееПотреблениеТоваровВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ВозвратТоваровИзОтделения);
	СписокЭлементов.Добавить(МетаданныеДокументов.ЗаказНаПеремещение);
	СписокЭлементов.Добавить(МетаданныеДокументов.ИнвентаризацияТоваровНаСкладе);
	СписокЭлементов.Добавить(МетаданныеДокументов.ИнвентаризацияТоваровНаСкладеВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ОприходованиеИзлишковТоваров);
	СписокЭлементов.Добавить(МетаданныеДокументов.ОприходованиеИзлишковТоваровВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ОтпускТоваровВОтделение);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПеремещениеТоваров);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПеремещениеТоваровМеждуОтделениями);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПотреблениеТоваровПоНазначениямВрачей);
	СписокЭлементов.Добавить(МетаданныеДокументов.СписаниеНедостачТоваров);
	СписокЭлементов.Добавить(МетаданныеДокументов.СписаниеНедостачТоваровВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ТребованиеОтделения);
	
	СписокЭлементов.Добавить(МетаданныеДокументов.РазмещениеТоваровПоМестамХранения);
	СписокЭлементов.Добавить(МетаданныеДокументов.РазмещениеТоваровПоМестамХраненияВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПересортицаТоваров);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПересортицаТоваровВОтделении);
	СписокЭлементов.Добавить(МетаданныеДокументов.ПрочееОприходованиеТоваров);
	
	СписокЭлементов.Добавить(МетаданныеДокументов.ПередачаТоваровНаСторону);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПроверкеИспользованияУведомлений.
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	Используется = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеОбъектовУчетаОбъектамПодсистемы

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений.
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления.
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если СтрНайти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
		 Или СтрНайти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС.
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0"      , Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10"     , Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18"     , Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110" , Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118" , Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ.
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеТиповЭлектронныхДокументовДокументамИБ) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктВыполненныхРабот, НСтр("ru = 'Акт выполненных работ (отправка не поддерживается)'"));
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ТоварнаяНакладная, НСтр("ru = 'Возврат товаров'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.УПД, НСтр("ru = 'Накладные, счета-фактуры'"));
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ЗаказТовара, НСтр("ru = 'Заказ поставщику'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтветНаЗаказ, НСтр("ru = 'Заказ клиента (отправка не поддерживается)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.КаталогТоваров, НСтр("ru = 'Каталог товаров (отправка не поддерживается)'"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента.
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ТоварнаяНакладная
	 Или ТипДокумента = ТипыДокументов.УПД
	Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка(), 
			Метаданные.Документы.ПоступлениеТоваров.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		
		ОписанияОбъектовУчета.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокументов

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику.
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭлектронногоДокумента) Экспорт
	
	Перем Тип, НаправлениеЭД, Организация, Контрагент;
	
	ТипыДокументов        = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипЗнч(ПараметрыЭлектронногоДокумента) = Тип("ТаблицаЗначений") Тогда
		СтрокаПараметров = ПараметрыЭлектронногоДокумента.Добавить();
	ИначеЕсли ТипЗнч(ПараметрыЭлектронногоДокумента) = Тип("Структура") Тогда
		СтрокаПараметров = ПараметрыЭлектронногоДокумента;
	КонецЕсли;
	
	Если ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорКонтрагента;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		СтрокаПараметров.ФормированиеУниверсальногоДокумента = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорКонтрагента;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		Тип = ТипыДокументов.ЗаказТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорКонтрагента;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровНаСторону")
		Или ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровНаСторону") Тогда
		
		Тип = ТипыДокументов.Внутренний;
		НаправлениеЭД = НаправленияДокументов.Внутренний;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента, ХозяйственнаяОперация");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.ДоговорКонтрагента;
			ХозяйственнаяОперация = ЗначенияРеквизитов.ХозяйственнаяОперация;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.ДоговорКонтрагента;
			ХозяйственнаяОперация = Источник.ХозяйственнаяОперация;
		КонецЕсли;
		
	ИначеЕсли
		// ДокументСсылка
		ТипИсточника = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		Или ТипИсточника = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровИзОтделения")
		Или ТипИсточника = Тип("ДокументСсылка.ЗаказНаПеремещение")
		Или ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
		Или ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладеВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		Или ТипИсточника = Тип("ДокументСсылка.ОприходованиеИзлишковТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ОтпускТоваровВОтделение")
		Или ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваровМеждуОтделениями")
		Или ТипИсточника = Тип("ДокументСсылка.ПотреблениеТоваровПоНазначениямВрачей")
		Или ТипИсточника = Тип("ДокументСсылка.СписаниеНедостачТоваров")
		Или ТипИсточника = Тип("ДокументСсылка.СписаниеНедостачТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.СписаниеНедостачТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ТребованиеОтделения")
		
		Или ТипИсточника = Тип("ДокументСсылка.РазмещениеТоваровПоМестамХранения")
		Или ТипИсточника = Тип("ДокументСсылка.РазмещениеТоваровПоМестамХраненияВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ПересортицаТоваров")
		Или ТипИсточника = Тип("ДокументСсылка.ПересортицаТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		
		// ДокументОбъект
		Или ТипИсточника = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровИзОтделения")
		Или ТипИсточника = Тип("ДокументОбъект.ЗаказНаПеремещение")
		Или ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
		Или ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладеВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.ОприходованиеИзлишковТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ОтпускТоваровВОтделение")
		Или ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваровМеждуОтделениями")
		Или ТипИсточника = Тип("ДокументОбъект.ПотреблениеТоваровПоНазначениямВрачей")
		Или ТипИсточника = Тип("ДокументОбъект.СписаниеНедостачТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.СписаниеНедостачТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.СписаниеНедостачТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ТребованиеОтделения")
		
		Или ТипИсточника = Тип("ДокументОбъект.РазмещениеТоваровПоМестамХранения")
		Или ТипИсточника = Тип("ДокументОбъект.РазмещениеТоваровПоМестамХраненияВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ПересортицаТоваров")
		Или ТипИсточника = Тип("ДокументОбъект.ПересортицаТоваровВОтделении")
		Или ТипИсточника = Тип("ДокументОбъект.ПрочееОприходованиеТоваров")
		
		Тогда
		
		Реквизиты = "Организация";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Тип           = ТипыДокументов.Внутренний;
		НаправлениеЭД = НаправленияДокументов.Внутренний;
		Организация   = ЗначенияРеквизитов.Организация;
		
	КонецЕсли;
	
	СтрокаПараметров.Тип = Тип;
	СтрокаПараметров.Направление = НаправлениеЭД;
	СтрокаПараметров.Организация = Организация;
	СтрокаПараметров.Контрагент  = Контрагент;
	СтрокаПараметров.ДоговорКонтрагента = Договор;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов.
Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеИОтражениеВУчетеДокументов

#Область УПД_2019

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	ВсеТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);
	
	Если ТипДокумента = ВсеТипыДокументов.УПД Тогда
		СтруктураЭД.Вставить("Функция", "СЧФДОП");
	ИначеЕсли ТипДокумента = ВсеТипыДокументов.СчетФактура Тогда
		СтруктураЭД.Вставить("Функция", "СЧФ");
	Иначе
		СтруктураЭД.Вставить("Функция", "ДОП");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "НалогообложениеНДС") Тогда
		ТипыБезНДС = Перечисления.ТипыНалогообложенияНДС.ТипыБезНДС();
		Если ТипыБезНДС.Найти(Основание.НалогообложениеНДС) <> Неопределено И СтруктураЭД.Функция = "СЧФДОП" Тогда
			СтруктураЭД.Функция = "ДОП";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И СтруктураЭД.Функция = "СЧФДОП" Тогда
		СтруктураЭД.Функция = "ДОП";
	КонецЕсли;
	
	Если СтруктураЭД.Функция = "СЧФДОП" Тогда
		ЗаполнитьДанныеДляСЧФДОП_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, Данные, Отказ);
	ИначеЕсли СтруктураЭД.Функция = "СЧФ" Тогда
		ЗаполнитьДанныеДляСЧФ_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, Данные, Отказ);
	Иначе
		ЗаполнитьДанныеДляДОП_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, Данные, Отказ);
	КонецЕсли;
	
	ФункцияУПД = СтруктураЭД.Функция;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУПД);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ЗаполнитьДанныеДляУПД_2019_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019.
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				
				// Первичный документ и Счет-фактура на текущий момент это один и тот же документ.
				ПервичныйДокумент = Ссылка;
				СчетФактура = Ссылка;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
		
		Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
			НайтиСоздатьПервичныйДокументПоУПД_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
		КонецЕсли;
		
		// Заполним основание в СФ.
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		
		Если ФункцияУПД = "СЧФ" Или ФункцияУПД = "СЧФДОП" Тогда
			НайтиСоздатьСчетФактуруПоУПД_2019(ДеревоДанных, СчетФактура, СпособОбработки, ОписаниеОшибки);
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				ДокументыУчета.Добавить(СчетФактура);
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументыУчета);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УПД

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУПД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ЗаполнитьДанныеДляУПД_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент.
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				
				// Первичный документ и Счет-фактура на текущий момент это один и тот же документ.
				ПервичныйДокумент = Ссылка;
				СчетФактура = Ссылка;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьПервичныйДокументПоУПД(ДеревоДанных, ПервичныйДокумент, , СпособОбработки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьСчетФактуруПоУПД(ДеревоДанных, СчетФактура);
		ДокументыУчета.Добавить(СчетФактура);
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументыУчета);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца.
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);
	
	ЗаполнитьДанныеДляПередачаТоваров_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, Данные, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ЗаполнитьДанныеДляПередачаТоваров_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров.
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	НайтиСоздатьПервичныйДокументПоПередачеТоваров(ДеревоДанных, СсылкаНаВладельца, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область CML_Форматы

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации.
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, Данные, Отказ) Экспорт
	
	ЗаполнитьДанныеУчастникаЭДО(Данные, СсылкаНаОбъект, "Организация");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Наименование", НСтр("ru = 'Реквизиты '") + СсылкаНаОбъект.Наименование);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров.
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ЗаполнитьДанныеДляЗаказТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки = Неопределено,
	ДополнительныеДанные, НайденныйОбъект = Неопределено, ОписаниеОшибки) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		СсылкаНаВладельца = ПараметрыОбработки.СсылкаНаВладельца;
		Записывать        = ПараметрыОбработки.Записывать;
		СпособОбработки   = ПараметрыОбработки.СпособОбработки;
	КонецЕсли;
	
	Если СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтветНаЗаказ Тогда
		
		НайтиСоздатьЗаказПоставщикуПоОтветуНаЗаказ(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать, НайденныйОбъект);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.РеквизитыОрганизации Тогда
		
		НайтиСоздатьКонтрагентаПоРеквизитамОрганизации(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать, НайденныйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаОтраженияВУчете

// См. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт
	
	МетаданныеДокументов = Метаданные.Документы;
	МетаданныеСправочника = Метаданные.Справочники;
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		СпособыОтраженияВУчете.Добавить(МетаданныеДокументов.ПоступлениеТоваров.Имя, МетаданныеДокументов.ПоступлениеТоваров.Представление(), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		СпособыОтраженияВУчете.Добавить(МетаданныеДокументов.ПоступлениеТоваров.Имя, НСтр("ru = 'Счет-фактура (реквизиты поступления)'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		СпособыОтраженияВУчете.Добавить(МетаданныеДокументов.ЗаказПоставщику.Имя, МетаданныеДокументов.ЗаказПоставщику.Представление(), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
		СпособыОтраженияВУчете.Добавить(МетаданныеСправочника.НоменклатураКонтрагентов.Имя, МетаданныеСправочника.НоменклатураКонтрагентов.Представление(), Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента.
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	Если Параметры.ЭтоСводныйУПД Тогда
		
		Отказ = Истина;
		Описание = НСтр("ru = 'Отражение в учете сводных счетов-фактур не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПрикладныхДанных

// См. ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП.
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, ДатаСведений = Неопределено) Экспорт
	
	ПараметрыПоиска = Новый Структура("ИНН, КПП", ИНН, КПП);
	Ссылка = ОбщегоНазначенияБЭД.НайтиСсылку(ТипОбъекта,, ПараметрыПоиска);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам.
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗагрузки = ИнициализироватьСтруктуруДанныхКонтрагента();
	
	ЗаполнитьЗначенияСвойств(ДанныеДляЗагрузки.Шапка, РеквизитыКонтрагента);
	
	ЗаполнитьСправочникКонтрагенты(Неопределено, ДанныеДляЗагрузки, Истина, Контрагент);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента.
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	ДанныеДляЗагрузки = ИнициализироватьСтруктуруДанныхКонтрагента();
	
	ЗаполнитьЗначенияСвойств(ДанныеДляЗагрузки.Шапка, СтруктураРеквизитов);
	
	ИНН_КПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ИНН_КПП");
	Если ЗначениеЗаполнено(ИНН_КПП) Тогда
		Если Не ЗначениеЗаполнено(ДанныеДляЗагрузки.Шапка.ИНН) Тогда
			ДанныеДляЗагрузки.Шапка.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП, "/") - 1);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеДляЗагрузки.Шапка.КПП) Тогда
			ДанныеДляЗагрузки.Шапка.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП, "/") + 1);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСправочникКонтрагенты(СтруктураРеквизитов.Контрагент, ДанныеДляЗагрузки, Истина, КонтрагентСсылка);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл.
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	ОсновныеДанные = ОсновныеСведенияОбУчастникеЭДО(Организация, ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОсновныеДанные);
	
	ДанныеРуководителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОсновныеДанные, "ДанныеРуководителя");
	Если ЗначениеЗаполнено(ДанныеРуководителя) Тогда
		СтруктураВозврата.Руководитель          = ДанныеРуководителя.Ссылка;
		СтруктураВозврата.ДолжностьРуководителя = ДанныеРуководителя.Должность;
	КонецЕсли;
	
	СтруктураВозврата.СвидетельствоНомер = ОсновныеДанные.СвидетельствоСерияНомер;
	СтруктураВозврата.СвидетельствоДата  = ОсновныеДанные.СвидетельствоДатаВыдачи;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,, ТекущаяДатаСеанса(), Ложь);
	Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			СтруктураВозврата.ЮридическийАдрес       = ЭлементКонтактнойИнформации.Представление;
			СтруктураВозврата.ЗначенияПолейЮрАдрес   = ЭлементКонтактнойИнформации.Значение;
		ИначеЕсли ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			СтруктураВозврата.ФактическийАдрес       = ЭлементКонтактнойИнформации.Представление;
			СтруктураВозврата.ЗначенияПолейФактАдрес = ЭлементКонтактнойИнформации.Значение
		ИначеЕсли ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			СтруктураВозврата.Телефон                = ЭлементКонтактнойИнформации.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации.
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	Если ТипЗнч(ДанныеОрганизации) <> Тип("Структура") Тогда
		ДанныеОрганизации = Новый Структура;
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
	
	ДанныеОрганизации.Вставить("Наименование"     , "");
	ДанныеОрганизации.Вставить("ИНН"              , "");
	ДанныеОрганизации.Вставить("КПП"              , "");
	ДанныеОрганизации.Вставить("ОГРН"             , "");
	ДанныеОрганизации.Вставить("ЮрФизЛицо"        , "");
	ДанныеОрганизации.Вставить("КодИМНС"          , "");
	
	ДанныеОрганизации.Вставить("Индекс"           , "");
	ДанныеОрганизации.Вставить("Регион"           , "");
	ДанныеОрганизации.Вставить("КодРегиона"       , "");
	ДанныеОрганизации.Вставить("Район"            , "");
	ДанныеОрганизации.Вставить("Город"            , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт"  , "");
	ДанныеОрганизации.Вставить("Улица"            , "");
	ДанныеОрганизации.Вставить("Дом"              , "");
	ДанныеОрганизации.Вставить("Корпус"           , "");
	ДанныеОрганизации.Вставить("Квартира"         , "");
	ДанныеОрганизации.Вставить("Телефон"          , "");
	
	ДанныеОрганизации.Вставить("Фамилия"          , "");
	ДанныеОрганизации.Вставить("Имя"              , "");
	ДанныеОрганизации.Вставить("Отчество"         , "");
	ДанныеОрганизации.Вставить("Должность"        , "");
	ДанныеОрганизации.Вставить("РуководительФизЛицо"            , "");
	ДанныеОрганизации.Вставить("РуководительОснованиеПолномочий", "");
	ДанныеОрганизации.Вставить("РуководительИНН"                , "");
	ДанныеОрганизации.Вставить("СНИЛС"                          , "");
	ДанныеОрганизации.Вставить("ДатаРождения"                   , '00010101');
	ДанныеОрганизации.Вставить("Гражданство"                    , Справочники.СтраныМира.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Организация)
	 Или ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Организация) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеДанные = ОсновныеСведенияОбУчастникеЭДО(Организация);
	ДанныеАдреса   = АдресУчастникаЭДО(Организация);
	
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ОсновныеДанные);
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ДанныеАдреса);
	
	ДанныеОрганизации.ЮрФизЛицо = ОсновныеДанные.ЮрФизЛицоСтрокой;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ВидТелефонаУчастника = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	Иначе
		ВидТелефонаУчастника = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагенты;
	КонецЕсли;
	ДанныеОрганизации.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, ВидТелефонаУчастника, ТекущаяДатаСеанса());
	
	ДанныеРуководителья = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОсновныеДанные, "ДанныеРуководителя");
	Если ЗначениеЗаполнено(ДанныеРуководителья) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ДанныеРуководителья);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП.
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	ШаблонДанныхСвидетельства = НСтр("ru = 'Свидетельство %1 от %2'");
	
	Сведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДанныхСвидетельства,
		РеквизитыСвидетельства.СвидетельствоСерияНомер,
		Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента.
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
		АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, ВидКонтактнойИнформации, ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета.
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|");
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты.
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка      КАК Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета  КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ                                  КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ                                  КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ                                  КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ                                  КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ                                  КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ                                  КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)
	|");
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо.
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	ПризнакФизЛица = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "ЮрФизЛицо") Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮрФизЛицо");
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			ПризнакФизЛица = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СведенияФизЛицаПользователя.
Процедура СведенияФизЛицаПользователя(Знач Пользователь, Знач Организация, СведенияФизЛица) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИмяПолное", "ФизическоеЛицо.Наименование");
	Реквизиты.Вставить("Должность", "ФизическоеЛицо.ДолжностьФРМР");
	
	ЗначенияРеквизитоа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, Реквизиты, Истина);
	
	СведенияФизЛица.ИмяПолное = ЗначенияРеквизитоа.ИмяПолное;
	СведенияФизЛица.Должность = ЗначенияРеквизитоа.Должность;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// См. ОбменСКонтрагентамиПереопределяемый.СуммаПрописью.
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		Валюта = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", КодВалюты);
		Результат = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		Результат = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента.
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт
	
	ИмяСвязиПоОрганизации = "Отбор.Организация";
	ИмяСвязиПоКонтрагенту = "Отбор.Контрагент";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияФормыИнтеграцияСБЭД

// Вызывется из одноименных событий форм для инициализации параметров подсистемы ЭДО.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма возникаемого события.
//
Процедура ПриСозданииНаСервере_ФормаДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
КонецПроцедуры

// Вызывется из одноименных событий форм для инициализации параметров подсистемы ЭДО.
//
Процедура ПриСозданииНаСервере_ФормаСпискаДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		Список = Форма.Список;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЖурналДокументов") Тогда
		Список = Форма.ЖурналДокументов;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО   = Элементы.ПредставлениеСостояния;
	ПараметрыПриСозданииНаСервере.ИсточникКомандЭДО     = Список;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Вызывется из одноименных событий форм для инициализации параметров подсистемы ЭДО.
//
Процедура ПриЧтенииНаСервер_ФормаДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
КонецПроцедуры

// Вызывется из одноименных событий форм для инициализации параметров подсистемы ЭДО.
//
Процедура ПослеЗаписиНаСервере_ФормаДокумента(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = Форма;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	
КонецПроцедуры

// Вызывется из одноименных событий форм для инициализации параметров подсистемы ЭДО.
//
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	ПараметрыПриИзменении.Форма                 = Форма;
	ПараметрыПриИзменении.ДокументСсылка        = Объект.Ссылка;
	ПараметрыПриИзменении.ДокументОбъект        = Форма.РеквизитФормыВЗначение("Объект");
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеИзмененияВерсииОбъекта

// Получает таблицу с ключевыми реквизитами объекта.
// 
// Параметры:
//  ИмяОбъекта - Строка - имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица ключевых реквизитов.
//
Функция КлючевыеРеквизитыОбъекта(ИмяОбъекта) Экспорт
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	Если ИмяОбъекта = "Документ.ПакетЭД" Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока                            = ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок                    = ТекПорядок;
		НовСтрока.ИмяОбъекта                 = ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти          = ?(ТекЭлемент.Ключ = "Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта           = ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта = Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Сравнивает ключевые реквизиты объекта до изменения и после изменения.
//
// Параметры:
//  Объект - ДокументОбъект - прикладной объект, запись которого инициировала вызов метода. Входной параметр.
//  СтрокаТаблицыРеквизитовРегистрации - СтрокаТаблицыЗначений - строка таблицы с реквизитами для сравнения.
//
// Возвращаемое значение:
//  Булево - Истина если значения ключевых реквизитов изменились.
//
Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации) Экспорт
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование и отражение в учете документов (служебные)
#Область ФормированиеИОтражениеВУчетеДокументовСлужебные


////////////////////////////////////////////////////////////////////////////////
// Исходящие
#Область Исходящие

Процедура ЗаполнитьДанныеДляСЧФДОП_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоВозвратуТоваровПоставщику(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	ЗаполнитьДеревоДанныхСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляСЧФ_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоВозвратуТоваровПоставщику(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляДОП_УПД_2019_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоВозвратуТоваровПоставщику(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПередачаТоваров_ИнформацияПродавца(Основание, Настройки, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоВозвратуТоваровПоставщику(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхПередачаТоваров(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляЗаказТовара(СсылкаНаОбъект, ДеревоДанных, Отказ)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоЗаказуПоставщику(СсылкаНаОбъект);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхЗаказТовара(СтруктураДанных, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляУПД_2019_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ)
	
	ДокументОснование = Неопределено;
	Для Каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоПоступлениюТоваров(ДокументОснование);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхУПД_2019_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляУПД_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ)
	
	ДокументОснование = Неопределено;
	Для Каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоПоступлениюТоваров(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхУПД_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПередачаТоваров_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ)
	
	ДокументОснование = Неопределено;
	Для Каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		СтруктураДанных = ПодготовитьСтруктуруПоПоступлениюТоваров(Основание);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоДанныхПередачаТоваров_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ);
	
КонецПроцедуры


Функция ПодготовитьСтруктуруПоВозвратуТоваровПоставщику(СсылкаНаОбъект)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка                                                  КАК Ссылка,
	|	Документ.Номер                                                   КАК Номер,
	|	Документ.Дата                                                    КАК Дата,
	|	Документ.Валюта                                                  КАК Валюта,
	|	Документ.Организация                                             КАК Организация,
	|	Документ.Контрагент                                              КАК Контрагент,
	|	Документ.Склад                                                   КАК Склад,
	|	Документ.ПодразделениеОрганизации.Наименование                   КАК ПодразделениеНаименование,
	|	Документ.Грузоотправитель                                        КАК Грузоотправитель,
	|	Документ.Грузополучатель                                         КАК Грузополучатель,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.Наименование, """")         КАК ДоговорНаименование,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.НомерДоговора, """")        КАК ДоговорНомер,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.ДатаДоговора, &ПустаяДата)  КАК ДоговорДата,
	|	Документ.СуммаДокумента                                          КАК СуммаДокумента,
	|	Документ.ЦенаВключаетНДС                                         КАК ЦенаВключаетНДС,
	|	""""                                                             КАК НомерСчетаФактуры,
	|	&ПустаяДата                                                      КАК ДатаСчетаФактуры
	
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	
	|	Товары.Ссылка                                                                      КАК Документ,
	|	Товары.НомерСтроки                                                                 КАК НомерСтроки,
	|	Товары.Номенклатура                                                                КАК Номенклатура,
	|	Товары.Номенклатура.Наименование                                                   КАК НоменклатураНаименование,
	|	Товары.Номенклатура.Код                                                            КАК НоменклатураКод,
	|	Товары.Номенклатура.Артикул                                                        КАК НоменклатураАртикул,
	|	Товары.СтавкаНДС                                                                   КАК СтавкаНДС,
	
	// Данные таможенной декларации
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)                                        КАК НомерГТД,
	|	""""                                                                               КАК СтранаПроисхожденияКод,
	
	// Ссылка потребительской упаковки нужна для формирования Идентификатора Сопоставления номенклатуры.
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДанныеНоменклатуры.Упаковка
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковка,
	
	// Единицей измерения в ЭДО считается потребительская упаковка (если она заполнена), приведенная к общему виду.
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &КодОКЕИ
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.КодОКЕИ
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаКод,
	
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &Наименование
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаНаименование,
	
	// Количество, выгружаемое в ЭДО, измеряется в потребительских упаковках (если она заполнена).
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Товары.Количество / Упаковки.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ Товары.Количество
	|	КОНЕЦ                                                                              КАК Количество_ПотребительскаяУпаковка,
	
	// Цена, выгружаемая в ЭДО, измеряется в потребительских упаковках (если она заполнена).
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Товары.Цена / Товары.Коэффициент * Упаковки.Коэффициент КАК ЧИСЛО(15,2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена / Товары.Коэффициент КАК ЧИСЛО(15,2))
	|	КОНЕЦ                                                                              КАК Цена_ПотребительскаяУпаковка,
	
	|	Товары.СуммаСНДС                                                                   КАК СуммаСНДС,
	|	Товары.СуммаНДС                                                                    КАК СуммаНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО
	|			ДанныеНоменклатуры.Ссылка = Товары.Номенклатура
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			Упаковки.Номенклатура = ДанныеНоменклатуры.Ссылка
	|			И Упаковки.ЕдиницаИзмерения = ДанныеНоменклатуры.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка"    , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ОписаниеУпаковки = ОписаниеУпаковкиЭлектронногоОбъекта();
	Для Каждого КлючИЗначение Из ОписаниеУпаковки Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("РезультатПоШапке"         , РезультатыЗапросов[0]);
	Данные.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[1]);
	
	ДанныеДляСопоставления = ДанныеДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Данные, ДанныеДляСопоставления);
	
	Возврат Данные;
	
КонецФункции

Функция ПодготовитьСтруктуруПоЗаказуПоставщику(СсылкаНаОбъект)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка                                                  КАК Ссылка,
	|	Документ.Номер                                                   КАК Номер,
	|	Документ.Дата                                                    КАК Дата,
	|	Документ.Валюта                                                  КАК Валюта,
	|	Документ.Валюта.Код                                              КАК ВалютаКод,
	|	Документ.Организация                                             КАК Организация,
	|	Документ.Контрагент                                              КАК Контрагент,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.Наименование, """")         КАК ДоговорНаименование,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.НомерДоговора, """")        КАК ДоговорНомер,
	|	ЕСТЬNULL(Документ.ДоговорКонтрагента.ДатаДоговора, &ПустаяДата)  КАК ДоговорДата,
	|	Документ.СуммаДокумента                                          КАК СуммаДокумента,
	|	Документ.ЦенаВключаетНДС                                         КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	
	|	Товары.Ссылка                                                                      КАК Документ,
	|	Товары.НомерСтроки                                                                 КАК НомерСтроки,
	|	Товары.Номенклатура                                                                КАК Номенклатура,
	|	Товары.Номенклатура.Наименование                                                   КАК НоменклатураНаименование,
	|	Товары.Номенклатура.Код                                                            КАК НоменклатураКод,
	|	Товары.Номенклатура.Артикул                                                        КАК НоменклатураАртикул,
	
	// Ссылка потребительской упаковки нужна для формирования Идентификатора Сопоставления номенклатуры.
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДанныеНоменклатуры.Упаковка
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковка,
	
	// Единицей измерения в ЭДО считается потребительская упаковка (если она заполнена), приведенная к общему виду.
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &КодОКЕИ
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.КодОКЕИ
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаКод,
	
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &Наименование
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаНаименование,
	
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &НаименованиеПолное
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаНаименованиеПолное,
	
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &МеждународноеСокращение
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаМеждународноеСокращение,
	
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА &КодОКЕИ
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.КодОКЕИ
	|	КОНЕЦ                                                                              КАК ПотребительскаяУпаковкаКодПоОКЕИ,
	
	// Количество, выгружаемое в ЭДО, измеряется в потребительских упаковках (если она заполнена).
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Товары.Количество / Упаковки.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ Товары.Количество
	|	КОНЕЦ                                                                              КАК Количество_ПотребительскаяУпаковка,
	
	// Цена, выгружаемая в ЭДО, измеряется в потребительских упаковках (если она заполнена).
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Товары.Цена / Товары.Коэффициент * Упаковки.Коэффициент КАК ЧИСЛО(15,2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена / Товары.Коэффициент КАК ЧИСЛО(15,2))
	|	КОНЕЦ                                                                              КАК Цена_ПотребительскаяУпаковка,
	
	|	Товары.Сумма                                                                       КАК Сумма,
	|	Товары.Ссылка.ЦенаВключаетНДС                                                      КАК НДСУчтеноВСумме,
	|	Товары.СуммаНДС                                                                    КАК СуммаНДС,
	|	Товары.СтавкаНДС                                                                   КАК СтавкаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО
	|			ДанныеНоменклатуры.Ссылка = Товары.Номенклатура
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			Упаковки.Номенклатура = ДанныеНоменклатуры.Ссылка
	|			И Упаковки.ЕдиницаИзмерения = ДанныеНоменклатуры.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка"    , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ОписаниеУпаковки = ОписаниеУпаковкиЭлектронногоОбъекта();
	Для Каждого КлючИЗначение Из ОписаниеУпаковки Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("РезультатПоШапке"         , РезультатыЗапросов[0]);
	Данные.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[1]);
	
	ДанныеДляСопоставления = ДанныеДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Данные, ДанныеДляСопоставления);
	
	Возврат Данные;
	
КонецФункции

Функция ПодготовитьСтруктуруПоПоступлениюТоваров(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата                            КАК Дата,
	|	ПоступлениеТоваров.Организация.НаименованиеПолное  КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваров.Организация.ИНН                 КАК ОрганизацияИНН,
	|	ПоступлениеТоваров.Организация.КПП                 КАК ОрганизацияКПП,
	|	ПоступлениеТоваров.Склад                           КАК Склад
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка = &Ссылка
	|	И ПоступлениеТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("РезультатПоШапке"         , РезультатыЗапросов[0]);
	Данные.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[1]);
	
	Возврат Данные;
	
КонецФункции


Процедура ЗаполнитьДеревоДанныхПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнятьСопоставление = Истина;
	
	РезультатПоШапке          = СтруктураДанных.РезультатПоШапке;
	РезультатПоТабличнойЧасти = СтруктураДанных.РезультатПоТабличнойЧасти;
	ТаблицаКурсовВалют        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "ТаблицаКурсовВалют");
	
	Если ЗаполнятьСопоставление Тогда
		РезультатПоСопоставлениюНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоСопоставлениюНоменклатуры");
		РезультатПоШтрихкодамКомбинаций      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамКомбинаций");
		РезультатПоШтрихкодамНоменклатуры    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамНоменклатуры");
	КонецЕсли;
	
	ДанныеШапки = РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование ЭД'"),
			НСтр("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании электронного документа.'"),
			НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в документе-основании электронного документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументОтгрузки = ДанныеШапки.Ссылка;
	
	// НомерДокумента - Файл.Документ.СвСчФакт.НомерСчФ:
	//  - порядковый номер счета-фактуры (строка 1 счета-фактуры),
	//  - документа об отгрузке товаров (выполнении работ),
	//  - передаче имущественных прав (документа об оказании услуг).
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапки.Номер, Истина, Истина));
	
	// ДатаДокумента - Файл.Документ.СвСчФакт.ДатаСчФ:
	//  - дата составления (выписки) счета-фактуры (строка 1 счета-фактуры),
	//  - документа об отгрузке товаров (выполнении работ),
	//  - передаче имущественных прав (документа об оказании услуг).
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	
	// ВалютаКод - Файл.Документ.СвСчФакт.КодОКВ:
	//  Код (строка 7 счета-фактуры).
	ВалютаРегламентированногоУчета = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета(); // Для РФ RUB
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегламентированногоУчета, "Код, НаименованиеПолное");
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты. Проверьте, что в настройках программы указана валюта регламентированного учета.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ЗначенияРеквизитов.Код, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ЗначенияРеквизитов.НаименованиеПолное);
	
	// СведенияОПродавце.
	СведенияОПродавце = ОсновныеСведенияОбУчастникеЭДО(ДанныеШапки.Организация, ДанныеШапки.Дата);
	ДанныеПродавца = ПолучитьДанныеУчастникаЭДО(СведенияОПродавце, "Юр");
	ТаблицаПродавцов = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПродавце");
	ТаблицаПродавцов.Колонки.Добавить("СведенияОбУчастнике");
	СтрокаПродавца = ТаблицаПродавцов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
	
	// СведенияОПродавце.СтруктурноеПодразделение
	Если ЗначениеЗаполнено(ДанныеШапки.ПодразделениеНаименование) Тогда
		СтрокаПродавца.СтруктурноеПодразделение = ДанныеШапки.ПодразделениеНаименование;
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковЭДО(ТаблицаПродавцов);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
	
	// СоставительДокументаНаименование
	Если ЗначениеЗаполнено(СведенияОПродавце.КПП) Тогда
		СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			СведенияОПродавце.ПолноеНаименование,
			СведенияОПродавце.ИНН,
			СведенияОПродавце.КПП);
	Иначе
		СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, ИНН %2'"),
			СведенияОПродавце.ПолноеНаименование,
			СведенияОПродавце.ИНН);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", СоставительДокумента);
	
	// СведенияОПокупателе
	ТаблицаПокупателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПокупателе");
	ТаблицаПокупателей.Колонки.Добавить("СведенияОбУчастнике");
	
	СведенияОПокупателе = ОсновныеСведенияОбУчастникеЭДО(ДанныеШапки.Контрагент, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ДанныеПокупателя = ПолучитьДанныеУчастникаЭДО(СведенияОПокупателе, "Юр");
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковЭДО(ТаблицаПокупателей);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	
	// СведенияОГрузоотправителе
	ТаблицаГрузоотправителей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузоотправителе");
	ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
	
	Если ДанныеШапки.Организация = ДанныеШапки.Грузоотправитель Тогда
		ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = ОсновныеСведенияОбУчастникеЭДО(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
		Если ЗначениеЗаполнено(СведенияОГрузоотправителе) Тогда
			ДанныеГрузоотправителя = ПолучитьДанныеУчастникаЭДО(СведенияОГрузоотправителе, "Факт");
			СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
			СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;
			СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковЭДО(ТаблицаГрузоотправителей, "Грузоотправитель");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
	
	// СведенияОГрузополучателе
	ТаблицаГрузополучателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузополучателе");
	ТаблицаГрузополучателей.Колонки.Добавить("СведенияОбУчастнике");
	
	СведенияОГрузополучателе = ОсновныеСведенияОбУчастникеЭДО(ДанныеШапки.Грузополучатель, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
		ДанныеГрузополучателя = ПолучитьДанныеУчастникаЭДО(СведенияОГрузополучателе, "Факт");
		СтрокаГрузополучателя = ТаблицаГрузополучателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаГрузополучателя, ДанныеГрузополучателя);
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковЭДО(ТаблицаГрузополучателей);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
	
	// ОснованиеОтгрузкиТоваров
	ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДоговорДата) Тогда
		
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДокументНаименование = ?(ЗначениеЗаполнено(ДанныеШапки.ДоговорНаименование), ДанныеШапки.ДоговорНаименование,НСтр("ru = 'Договор'"));
		НоваяСтрока.ДокументНомер        = ДанныеШапки.ДоговорНомер;
		НоваяСтрока.ДокументДата         = НачалоДня(ДанныеШапки.ДоговорДата);
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,, НСтр("ru = 'Необходимо указать дату договора.'"));
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗначенияРеквизитов = Новый Структура("ДокументПоступления, НомерВходящегоДокумента, ДатаВходящегоДокумента", "ДокументПоступления", "ДокументПоступления.НомерВходящегоДокумента", "ДокументПоступления.ДатаВходящегоДокумента");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, ЗначенияРеквизитов);
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументПоступления)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаВходящегоДокумента)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.НомерВходящегоДокумента) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'Входящий электронный документ'");
			НоваяСтрока.ДокументНомер        = ЗначенияРеквизитов.НомерВходящегоДокумента;
			НоваяСтрока.ДокументДата         = НачалоДня(ЗначенияРеквизитов.ДатаВходящегоДокумента);
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,, НСтр("ru = 'Необходимо указать дату документа поступления.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	КонецЕсли;
	
	// СведенияОЛицеПередавшемТовары
	МОЛСклада = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(ДанныеШапки.Склад, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(МОЛСклада.Ответственный) Тогда
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(МОЛСклада.ФИО);
		Если ЗначениеЗаполнено(МОЛСклада.Должность) И ЗначениеЗаполнено(МОЛСклада.ФИО) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(МОЛСклада.Должность));
			
		ИначеЕсли ЗначениеЗаполнено(МОЛСклада.ФИО) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СведенияОТоварах
	ТаблицаТоваровДереваДанных = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "СведенияОТоварах").СкопироватьКолонки();
	ТаблицаТоваровДереваДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ВыборкаПоДокументам = РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Если ЗаполнятьСопоставление Тогда
		ТаблицаСопоставленияНоменклатуры  = РезультатПоСопоставлениюНоменклатуры.Выгрузить();
		ШтрихкодыКомбинаций               = РезультатПоШтрихкодамКомбинаций.Выгрузить();
		ШтрихкодыНоменклатуры             = РезультатПоШтрихкодамНоменклатуры.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаКурсовВалют <> Неопределено Тогда
		КоэффициентПересчетаВалюты = КоэффициентПересчетаВалюты(ДанныеШапки, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета);
	Иначе
		КоэффициентПересчетаВалюты = 1;
	КонецЕсли;
	
	КолонкаЦенаВключаетНДС = ДанныеШапки.Владелец().Колонки.Найти("ЦенаВключаетНДС");
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) И Не ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваровДереваДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			НоваяСтрока.Признак = "1"; // Имущество
		Иначе
			НоваяСтрока.Признак = "5"; // Иное
		КонецЕсли;
		
		НоваяСтрока.ТоварНаименование            = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.НоменклатураНаименование);
		НоваяСтрока.ТоварКод                     = СтрокаТовары.НоменклатураКод;
		НоваяСтрока.ТоварАртикул                 = СтрокаТовары.НоменклатураАртикул;
		НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаНаименование);
		НоваяСтрока.Количество                   = СтрокаТовары.Количество_ПотребительскаяУпаковка;
		НоваяСтрока.НалоговаяСтавка              = СтрокаТовары.СтавкаНДС;
		
		Если КолонкаЦенаВключаетНДС <> Неопределено Тогда
			
			СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС * КоэффициентПересчетаВалюты, 2);
			СуммаНДС    = Окр(СтрокаТовары.СуммаНДС * КоэффициентПересчетаВалюты, 2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			Если ДанныеШапки.ЦенаВключаетНДС Тогда
				Цена = ?(СтрокаТовары.Количество_ПотребительскаяУпаковка = 0, 0, СуммаБезНДС / СтрокаТовары.Количество_ПотребительскаяУпаковка);
			Иначе
				Цена = СтрокаТовары.Цена_ПотребительскаяУпаковка * КоэффициентПересчетаВалюты;
			КонецЕсли;
			
		Иначе
			
			СуммаСНДС   = Окр(СтрокаТовары.Сумма * КоэффициентПересчетаВалюты, 2);
			СуммаНДС    = 0;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			Цена = СтрокаТовары.Цена_ПотребительскаяУпаковка * КоэффициентПересчетаВалюты;
			
		КонецЕсли;
		
		НоваяСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		НоваяСтрока.СуммаНалога               = СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(Цена, 2);
		
		// Сопоставление
		Если ЗаполнятьСопоставление Тогда
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ТаблицаСопоставленияНоменклатуры, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
		// СведенияОТаможеннойДекларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,, НСтр("ru = 'Не заполнен код страны происхождения'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваровДереваДанных, "Количество",,, НСтр("ru = 'Не указано количество товара.'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваровДереваДанных, "ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код потребительской упаковки.'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваровДереваДанных, "ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование потребительской упаковки.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваровДереваДанных, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	// ВсегоКОплате
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваровДереваДанных.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваровДереваДанных.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваровДереваДанных.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоКоличество", ТаблицаТоваровДереваДанных.Итог("Количество"));
	
	// СодержаниеОперации
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Товары переданы.'"));
	
	// ДатаОтгрузкиТоваров
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоШапке = СтруктураДанных.РезультатПоШапке;
	
	ДанныеШапки = РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование ЭД'"),
			НСтр("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании электронного документа.'"),
			НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в документе-основании электронного документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// НомерДокумента - Файл.Документ.СвСчФакт.НомерСчФ:
	//  - порядковый номер счета-фактуры (строка 1 счета-фактуры),
	//  - документа об отгрузке товаров (выполнении работ),
	//  - передаче имущественных прав (документа об оказании услуг).
	Если ЗначениеЗаполнено(ДанныеШапки.НомерСчетаФактуры) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.НомерСчетаФактуры);
	КонецЕсли;
	
	// ДатаДокумента - Файл.Документ.СвСчФакт.ДатаСчФ:
	//  - дата составления (выписки) счета-фактуры (строка 1 счета-фактуры),
	//  - документа об отгрузке товаров (выполнении работ),
	//  - передаче имущественных прав (документа об оказании услуг).
	Если ЗначениеЗаполнено(ДанныеШапки.ДатаСчетаФактуры) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.ДатаСчетаФактуры);
	КонецЕсли;
	
	// СсылкаСчетаФактуры.
	// Первичный документ и счет-фактура в конфигурации это один и тот де объект.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеШапки.Ссылка);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", "1");
	
	// ДокументыОснованияСчетаФактуры.
	// Первичный документ и счет-фактура в конфигурации это один и тот де объект.
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(ДанныеШапки.Ссылка);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхПередачаТоваров(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнятьСопоставление = Истина;
	
	РезультатПоШапке          = СтруктураДанных.РезультатПоШапке;
	РезультатПоТабличнойЧасти = СтруктураДанных.РезультатПоТабличнойЧасти;
	ТаблицаКурсовВалют        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "ТаблицаКурсовВалют");
	
	Если ЗаполнятьСопоставление Тогда
		РезультатПоСопоставлениюНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоСопоставлениюНоменклатуры");
		РезультатПоШтрихкодамКомбинаций      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамКомбинаций");
		РезультатПоШтрихкодамНоменклатуры    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамНоменклатуры");
	КонецЕсли;
	
	ДанныеШапки = РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование ЭД'"),
			НСтр("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании электронного документа.'"),
			НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в документе-основании электронного документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументОтгрузки = ДанныеШапки.Ссылка;
	
	// НомерТоварнойНакладной
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапки.Номер, Истина, Истина));
	
	// ДатаТоварнойНакладной
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной", ДанныеШапки.Дата);
	
	// ВалютаКод
	ВалютаРегламентированногоУчета = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета(); // Для РФ RUB
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегламентированногоУчета, "Код, НаименованиеПолное");
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты. Проверьте, что в настройках программы указана валюта регламентированного учета.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ЗначенияРеквизитов.Код, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", ЗначенияРеквизитов.НаименованиеПолное);
	
	// Поставщик
	СведенияОПоставщике = ОсновныеСведенияОбУчастникеЭДО(ДанныеШапки.Организация, ДанныеШапки.Дата);
	ДанныеПоставщика = ПолучитьДанныеУчастникаЭДО(СведенияОПоставщике, "Юр");
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДанныеПоставщика, "Поставщик");
	
	// Поставщик.СтруктурноеПодразделение
	Если ЗначениеЗаполнено(ДанныеШапки.ПодразделениеНаименование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Поставщик.СтруктурноеПодразделение", ДанныеШапки.ПодразделениеНаименование);
	КонецЕсли;
	
	// НаименованиеСоставителяДокумента
	Если ЗначениеЗаполнено(СведенияОПоставщике.КПП) Тогда
		СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			СведенияОПоставщике.ПолноеНаименование,
			СведенияОПоставщике.ИНН,
			СведенияОПоставщике.КПП);
	Иначе
		СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, ИНН %2'"),
			СведенияОПоставщике.ПолноеНаименование,
			СведенияОПоставщике.ИНН);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеСоставителяДокумента", СоставительДокумента);
	
	// Плательщик, Грузоотправитель, Грузополучатель
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Контрагент, "Плательщик", "Юр", ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Грузоотправитель, "Грузоотправитель", "Факт", ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Грузополучатель, "Грузополучатель", "Факт", ДанныеШапки.Дата);
	
	// Основание
	ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокОснованиеНаименование");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокОснованиеНомер");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокОснованиеДата");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокОснованиеДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДоговорДата) Тогда
		
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДокОснованиеНаименование = ?(ЗначениеЗаполнено(ДанныеШапки.ДоговорНаименование), ДанныеШапки.ДоговорНаименование,НСтр("ru = 'Договор'"));
		НоваяСтрока.ДокОснованиеНомер        = ДанныеШапки.ДоговорНомер;
		НоваяСтрока.ДокОснованиеДата         = НачалоДня(ДанныеШапки.ДоговорДата);
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокОснованиеДата",,, НСтр("ru = 'Необходимо указать дату договора.'"));
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗначенияРеквизитов = Новый Структура("ДокументПоступления, НомерВходящегоДокумента, ДатаВходящегоДокумента", "ДокументПоступления", "ДокументПоступления.НомерВходящегоДокумента", "ДокументПоступления.ДатаВходящегоДокумента");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, ЗначенияРеквизитов);
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДокументПоступления)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаВходящегоДокумента)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.НомерВходящегоДокумента) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокОснованиеНаименование = НСтр("ru = 'Входящий электронный документ'");
			НоваяСтрока.ДокОснованиеНомер        = ЗначенияРеквизитов.НомерВходящегоДокумента;
			НоваяСтрока.ДокОснованиеДата         = НачалоДня(ЗначенияРеквизитов.ДатаВходящегоДокумента);
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокОснованиеДата",,, НСтр("ru = 'Необходимо указать дату документа поступления (дата входящего документа).'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "Основание");
	КонецЕсли;
	
	// СведенияОЛицеПередавшемТовары
	МОЛСклада = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(ДанныеШапки.Склад, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(МОЛСклада.Ответственный) Тогда
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(МОЛСклада.ФИО);
		Если ЗначениеЗаполнено(МОЛСклада.ФИО) Тогда
			
			Если ЗначениеЗаполнено(МОЛСклада.Должность) И ЗначениеЗаполнено(МОЛСклада.ФИО) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(МОЛСклада.Должность));
				
			ИначеЕсли ЗначениеЗаполнено(МОЛСклада.ФИО) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СведенияОТоварах
	ТаблицаТоваровДереваДанных = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "ТаблицаТоваров").СкопироватьКолонки();
	ТаблицаТоваровДереваДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ВыборкаПоДокументам = РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Если ЗаполнятьСопоставление Тогда
		ТаблицаСопоставленияНоменклатуры  = РезультатПоСопоставлениюНоменклатуры.Выгрузить();
		ШтрихкодыКомбинаций               = РезультатПоШтрихкодамКомбинаций.Выгрузить();
		ШтрихкодыНоменклатуры             = РезультатПоШтрихкодамНоменклатуры.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаКурсовВалют <> Неопределено Тогда
		КоэффициентПересчетаВалюты = КоэффициентПересчетаВалюты(ДанныеШапки, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета);
	Иначе
		КоэффициентПересчетаВалюты = 1;
	КонецЕсли;
	
	КолонкаЦенаВключаетНДС = ДанныеШапки.Владелец().Колонки.Найти("ЦенаВключаетНДС");
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) И Не ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваровДереваДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.НаименованиеНоменклатуры     = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.НоменклатураНаименование);
		НоваяСтрока.КодТовара                    = СтрокаТовары.НоменклатураКод;
		НоваяСтрока.Артикул                      = СтрокаТовары.НоменклатураАртикул;
		НоваяСтрока.БазоваяЕдиницаКод            = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаНаименование);
		НоваяСтрока.МассаНетто                   = СтрокаТовары.Количество_ПотребительскаяУпаковка;
		НоваяСтрока.СтавкаНДС                    = СтрокаТовары.СтавкаНДС;
		
		Если КолонкаЦенаВключаетНДС <> Неопределено Тогда
			
			СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС * КоэффициентПересчетаВалюты, 2);
			СуммаНДС    = Окр(СтрокаТовары.СуммаНДС * КоэффициентПересчетаВалюты, 2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			Если ДанныеШапки.ЦенаВключаетНДС Тогда
				Цена = ?(СтрокаТовары.Количество_ПотребительскаяУпаковка = 0, 0, СуммаБезНДС / СтрокаТовары.Количество_ПотребительскаяУпаковка);
			Иначе
				Цена = СтрокаТовары.Цена_ПотребительскаяУпаковка * КоэффициентПересчетаВалюты;
			КонецЕсли;
			
		Иначе
			
			СуммаСНДС   = Окр(СтрокаТовары.Сумма * КоэффициентПересчетаВалюты, 2);
			СуммаНДС    = 0;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			Цена = СтрокаТовары.Цена_ПотребительскаяУпаковка * КоэффициентПересчетаВалюты;
			
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
		НоваяСтрока.СуммаНДС    = СуммаНДС;
		НоваяСтрока.СуммаСНДС   = СуммаСНДС;
		НоваяСтрока.Цена        = Окр(Цена, 2);
		
		// Сопоставление
		Если ЗаполнятьСопоставление Тогда
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ТаблицаСопоставленияНоменклатуры, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваровДереваДанных, "БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код потребительской упаковки.'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваровДереваДанных, "ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование потребительской упаковки.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваровДереваДанных, "ТаблицаТоваров");
	
	// ВсегоПоНакладной
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто", ТаблицаТоваровДереваДанных.Итог("МассаНетто"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС", ТаблицаТоваровДереваДанных.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС", ТаблицаТоваровДереваДанных.Итог("СуммаСНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС", ТаблицаТоваровДереваДанных.Итог("СуммаНДС"));
	
	// СведенияПоОтпускуГруза
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска", ДанныеШапки.Дата);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхЗаказТовара(СтруктураДанных, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнятьСопоставление = Истина;
	
	РезультатПоШапке          = СтруктураДанных.РезультатПоШапке;
	РезультатПоТабличнойЧасти = СтруктураДанных.РезультатПоТабличнойЧасти;
	
	Если ЗаполнятьСопоставление Тогда
		РезультатПоСопоставлениюНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоСопоставлениюНоменклатуры");
		РезультатПоШтрихкодамКомбинаций      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамКомбинаций");
		РезультатПоШтрихкодамНоменклатуры    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "РезультатПоШтрихкодамНоменклатуры");
	КонецЕсли;
	
	ДанныеШапки = РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование ЭД'"),
			НСтр("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании электронного документа.'"),
			НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в документе-основании электронного документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Валюта, Курс, Сумма
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеШапки.Валюта, ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", ДанныеШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс"  , КурсВалюты.Курс);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма" , ДанныеШапки.СуммаДокумента);
	
	// Покупатель, Получатель, Продавец
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Организация, "Покупатель",, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Организация, "Получатель",, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, ДанныеШапки.Контрагент, "Продавец",, ДанныеШапки.Дата);
	
	// ДокументыСделки
	ДокументыСделки = Новый ТаблицаЗначений;
	ДокументыСделки.Колонки.Добавить("Идентификатор");
	ДокументыСделки.Колонки.Добавить("Наименование");
	ДокументыСделки.Колонки.Добавить("Номер");
	ДокументыСделки.Колонки.Добавить("Дата");
	ДокументыСделки.Колонки.Добавить("ДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДоговорНомер) И ЗначениеЗаполнено(ДанныеШапки.ДоговорДата) Тогда
		
		НоваяСтрока = ДокументыСделки.Добавить();
		НоваяСтрока.Наименование  = ?(ЗначениеЗаполнено(ДанныеШапки.ДоговорНаименование), ДанныеШапки.ДоговорНаименование,НСтр("ru = 'Договор'"));
		НоваяСтрока.Номер         = ДанныеШапки.ДоговорНомер;
		НоваяСтрока.Дата          = НачалоДня(ДанныеШапки.ДоговорДата);
		НоваяСтрока.Идентификатор = НоваяСтрока.Наименование;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыСделки, "ДокументыСделки");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыСделки) Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыСделки, "ДокументыСделки");
	КонецЕсли;
	
	// Товары
	ТаблицаТоваровДереваДанных = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "Товары").СкопироватьКолонки();
	ТаблицаТоваровДереваДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ВыборкаПоДокументам = РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Если ЗаполнятьСопоставление Тогда
		ТаблицаСопоставленияНоменклатуры  = РезультатПоСопоставлениюНоменклатуры.Выгрузить();
		ШтрихкодыКомбинаций               = РезультатПоШтрихкодамКомбинаций.Выгрузить();
		ШтрихкодыНоменклатуры             = РезультатПоШтрихкодамНоменклатуры.Выгрузить();
	КонецЕсли;
	
	Пока СтрокаТовары.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваровДереваДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.НоменклатураНаименование);
		
		НоваяСтрока.Количество                            = СтрокаТовары.Количество_ПотребительскаяУпаковка;
		НоваяСтрока.Цена                                  = СтрокаТовары.Цена_ПотребительскаяУпаковка;
		НоваяСтрока.БазоваяЕдиницаКод                     = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаКод);
		НоваяСтрока.БазоваяЕдиницаНаименование            = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаНаименование);
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное      = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаНаименованиеПолное);
		НоваяСтрока.БазоваяЕдиницаМеждународноеСокращение = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаМеждународноеСокращение);
		НоваяСтрока.ЕдиницаИзмеренияКодПоОКЕИ             = СокрЛП(СтрокаТовары.ПотребительскаяУпаковкаКодПоОКЕИ);
		
		// Сопоставление
		Если ЗаполнятьСопоставление Тогда
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ТаблицаСопоставленияНоменклатуры, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваровДереваДанных, ДанныеШапки.Ссылка);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваровДереваДанных, "Товары");
	
	// РасчетныйСчет
	БанковскиеРеквизиты = БанковскиеРеквизитыУчастникаЭДО(ДанныеШапки.Организация);
	
	Если ЗначениеЗаполнено(БанковскиеРеквизиты.НомерСчета) И ЗначениеЗаполнено(БанковскиеРеквизиты.БИК) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета"                , БанковскиеРеквизиты.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование"         , БанковскиеРеквизиты.НаименованиеБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК"                  , БанковскиеРеквизиты.БИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", БанковскиеРеквизиты.КоррСчет);
		
		Если ЗначениеЗаполнено(БанковскиеРеквизиты.БанкДляРасчетов) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование"         , БанковскиеРеквизиты.НаименованиеБанкаДляРасчетов);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", БанковскиеРеквизиты.КоррСчетБанкаДляРасчетов);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК"                  , БанковскиеРеквизиты.БИКБанкаДляРасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	// ИтогоПоДокументу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаИтог"      , ТаблицаТоваровДереваДанных.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваровДереваДанных.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.ЦенаВключаетНДС", ДанныеШапки.ЦенаВключаетНДС);
	
	// ИтогиПрописью
	ИтогиПрописью = НСтр("ru='Всего наименований %1, на сумму %2'");
	ИтогиПрописью = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтогиПрописью, ТаблицаТоваровДереваДанных.Количество(), ДанныеШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью", ИтогиПрописью);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУПД_2019_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоШапке          = СтруктураДанных.РезультатПоШапке;
	РезультатПоТабличнойЧасти = СтруктураДанных.РезультатПоТабличнойЧасти;
	
	СодержаниеОперации = "-";
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное = "-";
	
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатПоШапке.Пустой() Тогда
		
		Выборка = РезультатПоШапке.Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров          = Выборка.Дата;
		ОрганизацияНаименованиеПолное = Выборка.ОрганизацияНаименованиеПолное;
		
		МОЛПолучателя = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Выборка.Склад, Выборка.Дата);
		ТоварПринял          = МОЛПолучателя.ФИО;
		ТоварПринялДолжность = МОЛПолучателя.Должность;
		
	Иначе
		
		ЕстьДокументыУчета = Ложь;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров = ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
				ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "НаименованиеПолное, Наименование");
				ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ЗначенияРеквизитовОрганизации.НаименованиеПолное), ЗначенияРеквизитовОрганизации.НаименованиеПолное, ЗначенияРеквизитовОрганизации.Наименование);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		Если ЗначениеЗаполнено(Выборка.ОрганизацияКПП) Тогда
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН,
				Выборка.ОрганизацияКПП);
		Иначе
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН);
		КонецЕсли;
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЕстьДокументыУчета Тогда
		
		СоставСодержания = Новый Массив;
		Если Не РезультатПоТабличнойЧасти.Пустой() Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
		КонецЕсли;
		
		Если СоставСодержания.Количество() Тогда
			СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
		КонецЕсли;
		
		КодИтога = "1";
		
	Иначе
		КодИтога = "1";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.КодИтога", КодИтога);
	
	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		
		Если ЗначениеЗаполнено(ТоварПринял) Тогда
			
			Если ЗначениеЗаполнено(ТоварПринялДолжность) И ЗначениеЗаполнено(ТоварПринял) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
				
			ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУПД_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоШапке          = СтруктураДанных.РезультатПоШапке;
	РезультатПоТабличнойЧасти = СтруктураДанных.РезультатПоТабличнойЧасти;
	
	СодержаниеОперации = "-";
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное = "-";
	
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатПоШапке.Пустой() Тогда
		
		Выборка = РезультатПоШапке.Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров          = Выборка.Дата;
		ОрганизацияНаименованиеПолное = Выборка.ОрганизацияНаименованиеПолное;
		
		МОЛПолучателя = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Выборка.Склад, Выборка.Дата);
		ТоварПринял          = МОЛПолучателя.ФИО;
		ТоварПринялДолжность = МОЛПолучателя.Должность;
		
	Иначе
		
		ЕстьДокументыУчета = Ложь;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров = ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
				ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "НаименованиеПолное, Наименование");
				ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ЗначенияРеквизитовОрганизации.НаименованиеПолное), ЗначенияРеквизитовОрганизации.НаименованиеПолное, ЗначенияРеквизитовОрганизации.Наименование);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		Если ЗначениеЗаполнено(Выборка.ОрганизацияКПП) Тогда
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН,
				Выборка.ОрганизацияКПП);
		Иначе
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН);
		КонецЕсли;
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЕстьДокументыУчета Тогда
		
		СоставСодержания = Новый Массив;
		Если Не РезультатПоТабличнойЧасти.Пустой() Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
		КонецЕсли;
		
		Если СоставСодержания.Количество() Тогда
			СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		
		Если ЗначениеЗаполнено(ТоварПринял) Тогда
			
			Если ЗначениеЗаполнено(ТоварПринялДолжность) И ЗначениеЗаполнено(ТоварПринял) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
				
			ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхПередачаТоваров_ИнформацияПокупателя(СтруктураДанных, ДокументОснование, ДеревоДанных, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоШапке = СтруктураДанных.РезультатПоШапке;
	
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное = "";
	
	Если Не РезультатПоШапке.Пустой() Тогда
		
		Выборка = РезультатПоШапке.Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров          = Выборка.Дата;
		ОрганизацияНаименованиеПолное = Выборка.ОрганизацияНаименованиеПолное;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров = ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
				ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "НаименованиеПолное, Наименование");
				ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ЗначенияРеквизитовОрганизации.НаименованиеПолное), ЗначенияРеквизитовОрганизации.НаименованиеПолное, ЗначенияРеквизитовОрганизации.Наименование);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		Если ЗначениеЗаполнено(Выборка.ОрганизацияКПП) Тогда
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН,
				Выборка.ОрганизацияКПП);
		Иначе
			СоставительДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное,
				Выборка.ОрганизацияИНН);
		КонецЕсли;
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ДатаПолученияТоваров);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Получение информации об участниках электронного документооборота
#Область ПолучениеИнформацииОбУчастникахЭДО

// Возвращает основную информацию участника электронного документооборота.
//
// Параметры:
//  Участник - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - участник ЭДО.
//  Дата     - Дата - дата на которую необходимо получить основную информацию по участнику ЭДО.
//
// Возвращаемое значение:
//  ОсновныеДанные - Структура - основная информация участника ЭДО.
//
Функция ОсновныеСведенияОбУчастникеЭДО(Участник, Знач Дата = Неопределено)
	
	Если Не ЗначениеЗаполнено(Участник)
	 Или ТипЗнч(Участник) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Участник) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Организации") Тогда
		Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(Участник);
	Иначе
		Реквизиты = Справочники.Контрагенты.ПолучитьРеквизитыКонтрагента(Участник);
	КонецЕсли;
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	ОсновныеДанные = Новый Структура;
	ОсновныеДанные.Вставить("Участник"                   , Участник);
	ОсновныеДанные.Вставить("ИНН"                        , Реквизиты.ИНН);
	ОсновныеДанные.Вставить("КПП"                        , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "КПП", ""));
	ОсновныеДанные.Вставить("ОГРН"                       , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "ОГРН", ""));
	ОсновныеДанные.Вставить("ОКПО"                       , Реквизиты.КодПоОКПО);
	ОсновныеДанные.Вставить("КодОКПО"                    , Реквизиты.КодПоОКПО);
	ОсновныеДанные.Вставить("КодПоОКПО"                  , Реквизиты.КодПоОКПО);
	ОсновныеДанные.Вставить("Наименование"               , Реквизиты.Наименование);
	ОсновныеДанные.Вставить("ПолноеНаименование"         , Реквизиты.Наименование);
	ОсновныеДанные.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
	ОсновныеДанные.Вставить("Представление"              , Реквизиты.Представление);
	ОсновныеДанные.Вставить("СокращенноеНаименование"    , Реквизиты.Представление);
	ОсновныеДанные.Вставить("КодИМНС"                    , "");
	ОсновныеДанные.Вставить("ЮрФизЛицо"                  , Реквизиты.ЮрФизЛицо);
	
	Если Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
	 Или Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ОсновныеДанные.Вставить("ЮрФизЛицоСтрокой", "ФизЛицо");
		
		ФИОФизЛица = ФизическиеЛицаКлиентСервер.ЧастиИмени(Реквизиты.Наименование);
		ОсновныеДанные.Вставить("Фамилия" , ФИОФизЛица.Фамилия);
		ОсновныеДанные.Вставить("Имя"     , ФИОФизЛица.Имя);
		ОсновныеДанные.Вставить("Отчество", ФИОФизЛица.Отчество);
		
	Иначе
		
		ОсновныеДанные.Вставить("ЮрФизЛицоСтрокой", "ЮрЛицо");
		
		ОсновныеДанные.Вставить("Фамилия" , "");
		ОсновныеДанные.Вставить("Имя"     , "");
		ОсновныеДанные.Вставить("Отчество", "");
		
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Организации") Тогда
		
		ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Участник, Дата);
		Руководитель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОтветственныеЛица, "Руководитель");
		Если ЗначениеЗаполнено(Руководитель) Тогда
			
			РеквизитыРуководителя = Новый Структура;
			РеквизитыРуководителя.Вставить("Наименование");
			РеквизитыРуководителя.Вставить("ИНН");
			РеквизитыРуководителя.Вставить("СНИЛС");
			РеквизитыРуководителя.Вставить("ДатаРождения");
			
			ЗначенияРеквизитовРуководителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Руководитель, РеквизитыРуководителя);
			
			ФИООтветственного = ФизическиеЛицаКлиентСервер.ЧастиИмени(ЗначенияРеквизитовРуководителя.Наименование);
			
			ДанныеРуководителя = Новый Структура;
			ДанныеРуководителя.Вставить("Ссылка"   , Руководитель);
			ДанныеРуководителя.Вставить("Фамилия"  , ФИООтветственного.Фамилия);
			ДанныеРуководителя.Вставить("Имя"      , ФИООтветственного.Имя);
			ДанныеРуководителя.Вставить("Отчество" , ФИООтветственного.Отчество);
			ДанныеРуководителя.Вставить("Должность", ОтветственныеЛица.РуководительДолжность);
			ДанныеРуководителя.Вставить("РуководительФизЛицо"            , Руководитель);
			ДанныеРуководителя.Вставить("РуководительОснованиеПолномочий", "");
			ДанныеРуководителя.Вставить("РуководительИНН"                , ЗначенияРеквизитовРуководителя.ИНН);
			ДанныеРуководителя.Вставить("СНИЛС"                          , ЗначенияРеквизитовРуководителя.СНИЛС);
			ДанныеРуководителя.Вставить("ДатаРождения"                   , ЗначенияРеквизитовРуководителя.ДатаРождения);
			ДанныеРуководителя.Вставить("Гражданство"                    , Справочники.СтраныМира.ПустаяСсылка());
			
			ОсновныеДанные.Вставить("ДанныеРуководителя", ДанныеРуководителя);
			
		Иначе
			ОсновныеДанные.Вставить("ДанныеРуководителя", Неопределено);
		КонецЕсли;
		
		ОсновныеДанные.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
		ОсновныеДанные.Вставить("Свидетельство"          , Реквизиты.Свидетельство);
		
	Иначе
		
		ОсновныеДанные.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
		ОсновныеДанные.Вставить("Свидетельство"          , "");
		ОсновныеДанные.Вставить("ДанныеРуководителя"     , Неопределено);
		
	КонецЕсли;
	
	Возврат ОсновныеДанные;
	
КонецФункции

// Возвращает сведения об адресе участника электронного документооборота.
//
// Параметры:
//  Участник  - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - участник ЭДО.
//  ВидАдреса - Строка - "Юр" или "Факт" адрес участника ЭДО.
//  Дата      - Дата - дата на которую необходимо получить адрес участника ЭДО.
//
// Возвращаемое значение:
//  ДанныеАдреса - Структура - сведения об адресе участника ЭДО.
//
Функция АдресУчастникаЭДО(Участник, Знач ВидАдреса = "Юр", Знач Дата = Неопределено)
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("ПроизвольныйАдрес", Истина);
	ДанныеАдреса.Вставить("АдресРФ"          , Истина);
	ДанныеАдреса.Вставить("АдресТекст"       , "");
	ДанныеАдреса.Вставить("АдрТекст"         , "");
	ДанныеАдреса.Вставить("Значение"         , "");
	ДанныеАдреса.Вставить("ЗначенияПолей"    , "");
	ДанныеАдреса.Вставить("Страна"           , "");
	ДанныеАдреса.Вставить("КодСтраны"        , "");
	ДанныеАдреса.Вставить("КодСтр"           , "");
	ДанныеАдреса.Вставить("Индекс"           , "");
	ДанныеАдреса.Вставить("Регион"           , "");
	ДанныеАдреса.Вставить("КодРегиона"       , "");
	ДанныеАдреса.Вставить("КодРегион"        , "");
	ДанныеАдреса.Вставить("Район"            , "");
	ДанныеАдреса.Вставить("Город"            , "");
	ДанныеАдреса.Вставить("НаселенныйПункт"  , "");
	ДанныеАдреса.Вставить("НаселПункт"       , "");
	ДанныеАдреса.Вставить("Улица"            , "");
	ДанныеАдреса.Вставить("Дом"              , "");
	ДанныеАдреса.Вставить("Корпус"           , "");
	ДанныеАдреса.Вставить("Кварт"            , "");
	ДанныеАдреса.Вставить("Квартира"         , "");
	ДанныеАдреса.Вставить("КодГАР"           , "");
	ДанныеАдреса.Вставить("АвтоматическиЗаполняемый", Новый Структура);
	
	Если Не ЗначениеЗаполнено(Участник)
	 Или ТипЗнч(Участник) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Участник) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ДанныеАдреса;
	КонецЕсли;
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Организации") Тогда
		ВидАдресаУчастника = ?(ВидАдреса = "Факт", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидАдресаУчастника = ?(ВидАдреса = "Факт", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагенты, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагенты);
	КонецЕсли;
	
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Участник, ВидАдресаУчастника, Дата, Ложь);
	Если Адрес.Количество() = 0 Тогда
		Возврат ДанныеАдреса;
	КонецЕсли;
	
	СтрокаАдреса = Адрес[0];
	
	ДанныеАдреса.АдресТекст    = СтрокаАдреса.Представление;
	ДанныеАдреса.АдрТекст      = СтрокаАдреса.Представление;
	ДанныеАдреса.Значение      = СтрокаАдреса.Значение;
	ДанныеАдреса.ЗначенияПолей = СтрокаАдреса.ЗначенияПолей;
	
	АдресВФормате = ?(ЗначениеЗаполнено(СтрокаАдреса.Значение), СтрокаАдреса.Значение, СтрокаАдреса.ЗначенияПолей);
	Если Не ЗначениеЗаполнено(АдресВФормате) Тогда
		Возврат ДанныеАдреса;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресВФормате);
	
	ДанныеАдреса.ПроизвольныйАдрес = Ложь;
	ДанныеАдреса.АдресРФ           = СтрСравнить(СведенияОбАдресе.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0;
	ДанныеАдреса.Страна            = СведенияОбАдресе.Страна;
	ДанныеАдреса.КодСтраны         = СведенияОбАдресе.КодСтраны;
	ДанныеАдреса.КодСтр            = СведенияОбАдресе.КодСтраны;
	ДанныеАдреса.Индекс            = СведенияОбАдресе.Индекс;
	ДанныеАдреса.Регион            = СведенияОбАдресе.Регион;
	ДанныеАдреса.КодРегиона        = СведенияОбАдресе.КодРегиона;
	ДанныеАдреса.КодРегион         = СведенияОбАдресе.КодРегиона;
	ДанныеАдреса.Район             = СведенияОбАдресе.Район;
	ДанныеАдреса.Город             = СведенияОбАдресе.Город;
	ДанныеАдреса.НаселенныйПункт   = СведенияОбАдресе.НаселенныйПункт;
	ДанныеАдреса.НаселПункт        = СведенияОбАдресе.НаселенныйПункт;
	ДанныеАдреса.Улица             = СведенияОбАдресе.Улица;
	ДанныеАдреса.Дом               = ?(ЗначениеЗаполнено(СведенияОбАдресе.Здание), СведенияОбАдресе.Здание.Номер, "");
	ДанныеАдреса.Корпус            = ?(ЗначениеЗаполнено(СведенияОбАдресе.Корпуса), СведенияОбАдресе.Корпуса[0].Номер, "");
	ДанныеАдреса.Квартира          = ?(ЗначениеЗаполнено(СведенияОбАдресе.Помещения), СведенияОбАдресе.Помещения[0].Номер, "");
	ДанныеАдреса.Кварт             = ДанныеАдреса.Квартира;
	
	ДанныеАдреса.АвтоматическиЗаполняемый.Вставить("ОбъектКонтактнойИнформации", Участник);
	ДанныеАдреса.АвтоматическиЗаполняемый.Вставить("ВидКонтактнойИнформации", ВидАдресаУчастника);
	
	Возврат ДанныеАдреса;
	
КонецФункции

// Возвращает контактные сведения участника электронного документооборота.
//
// Параметры:
//  Участник  - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - участник ЭДО.
//  Дата      - Дата - дата на которую необходимо получить телефон участника ЭДО.
//
// Возвращаемое значение:
//  КонтактныеСведения - Структура - контактные сведения участника ЭДО.
//
Функция КонтактныеСведенияУчастникаЭДО(Участник, Знач Дата = Неопределено)
	
	КонтактныеСведения = Новый Структура;
	КонтактныеСведения.Вставить("Телефон"         , "");
	КонтактныеСведения.Вставить("ЭлектроннаяПочта", "");
	КонтактныеСведения.Вставить("Факс"            , "");
	
	Если Не ЗначениеЗаполнено(Участник)
	 Или ТипЗнч(Участник) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Участник) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат КонтактныеСведения;
	КонецЕсли;
	
	ДатаИнформации = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Организации") Тогда
		ВидТелефон          = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ВидЭлектроннаяПочта = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ВидФакс             = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидТелефон          = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагенты;
		ВидЭлектроннаяПочта = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
		ВидФакс             = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	КонецЕсли;
	
	КонтактныеСведения.Телефон          = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Участник, ВидТелефон,, ДатаИнформации);
	КонтактныеСведения.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Участник, ВидЭлектроннаяПочта,, ДатаИнформации);
	КонтактныеСведения.Факс             = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Участник, ВидФакс,, ДатаИнформации);
	
	Возврат КонтактныеСведения;
	
КонецФункции

Функция БанковскиеРеквизитыУчастникаЭДО(Участник)
	
	БанковскиеРеквизиты = Новый Структура;
	БанковскиеРеквизиты.Вставить("Организация", Неопределено);
	БанковскиеРеквизиты.Вставить("Валюта"     , Неопределено);
	БанковскиеРеквизиты.Вставить("НомерСчета" , "");
	БанковскиеРеквизиты.Вставить("Банк"       , Неопределено);
	БанковскиеРеквизиты.Вставить("НаименованиеБанка", "");
	БанковскиеРеквизиты.Вставить("БИК"        , "");
	БанковскиеРеквизиты.Вставить("КоррСчет"   , "");
	БанковскиеРеквизиты.Вставить("АдресБанка" , "");
	БанковскиеРеквизиты.Вставить("ТекстНазначения", "");
	
	БанковскиеРеквизиты.Вставить("БанкДляРасчетов"             , Неопределено);
	БанковскиеРеквизиты.Вставить("НаименованиеБанкаДляРасчетов", "");
	БанковскиеРеквизиты.Вставить("БИКБанкаДляРасчетов"         , "");
	БанковскиеРеквизиты.Вставить("КоррСчетБанкаДляРасчетов"    , "");
	БанковскиеРеквизиты.Вставить("АдресБанкаДляРасчетов"       , "");
	
	Если Не ЗначениеЗаполнено(Участник)
	 Или ТипЗнч(Участник) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Участник) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат БанковскиеРеквизиты;
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Организации") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Участник);
		ЗаполнитьЗначенияСвойств(БанковскиеРеквизиты, Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет));
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Контрагенты") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Участник);
		ЗаполнитьЗначенияСвойств(БанковскиеРеквизиты, Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет));
	КонецЕсли;
	
	Возврат БанковскиеРеквизиты;
	
КонецФункции

Функция ПолучитьДанныеУчастникаЭДО(Знач СведенияОбУчастнике, Знач ВидАдреса = "Юр", Знач Дата = Неопределено)
	
	ДатаИнформации = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	АдресУчастника               = АдресУчастникаЭДО(СведенияОбУчастнике.Участник, ВидАдреса, ДатаИнформации);
	КонтактныеСведенияУчастника  = КонтактныеСведенияУчастникаЭДО(СведенияОбУчастнике.Участник, ДатаИнформации);
	БанковскиеРеквизитыУчастника = БанковскиеРеквизитыУчастникаЭДО(СведенияОбУчастнике.Участник);
	
	ДанныеУчастника = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	// КодОКПО
	ДанныеУчастника.Вставить("КодОКПО", СведенияОбУчастнике.ОКПО);
	
	// ТипУчастника
	ДанныеУчастника.Вставить("ТипУчастника", Новый Структура);
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		// ТипУчастника.ЮЛ
		ДанныеУчастника.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		ДанныеУчастника.ТипУчастника.ЮЛ.Вставить("ИНН"                    , СведенияОбУчастнике.ИНН);
		ДанныеУчастника.ТипУчастника.ЮЛ.Вставить("КПП"                    , СведенияОбУчастнике.КПП);
		ДанныеУчастника.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		// ТипУчастника.ИЛ
		ДанныеУчастника.ТипУчастника.Вставить("ИЛ", Новый Структура);
		ДанныеУчастника.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		
		// ТипУчастника.ИностраннаяОрганизация
		ДанныеУчастника.ТипУчастника.Вставить("ИностраннаяОрганизация", Новый Структура);
		ДанныеУчастника.ТипУчастника.ИностраннаяОрганизация.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ДанныеУчастника.ТипУчастника.ИностраннаяОрганизация.Вставить("Страна"                 , АдресУчастника.Страна);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		// ТипУчастника.ИП
		ДанныеУчастника.ТипУчастника.Вставить("ИП", Новый Структура);
		ДанныеУчастника.ТипУчастника.ИП.Вставить("ИНН"                         , СведенияОбУчастнике.ИНН);
		ДанныеУчастника.ТипУчастника.ИП.Вставить("Фамилия"                     , СведенияОбУчастнике.Фамилия);
		ДанныеУчастника.ТипУчастника.ИП.Вставить("Имя"                         , СведенияОбУчастнике.Имя);
		ДанныеУчастника.ТипУчастника.ИП.Вставить("Отчество"                    , СведенияОбУчастнике.Отчество);
		ДанныеУчастника.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", СведенияОбУчастнике.Свидетельство);
		
	Иначе
		
		// ТипУчастника.ФЛ
		ДанныеУчастника.ТипУчастника.Вставить("ФЛ", Новый Структура);
		ДанныеУчастника.ТипУчастника.ФЛ.Вставить("ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		ДанныеУчастника.ТипУчастника.ФЛ.Вставить("ИНН"               , СведенияОбУчастнике.ИНН);
		ДанныеУчастника.ТипУчастника.ФЛ.Вставить("Фамилия"           , СведенияОбУчастнике.Фамилия);
		ДанныеУчастника.ТипУчастника.ФЛ.Вставить("Имя"               , СведенияОбУчастнике.Имя);
		ДанныеУчастника.ТипУчастника.ФЛ.Вставить("Отчество"          , СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	// Руководитель
	ДанныеРуководителья = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбУчастнике, "ДанныеРуководителя");
	Если ЗначениеЗаполнено(ДанныеРуководителья)
	   И ЗначениеЗаполнено(ДанныеРуководителья.Фамилия)
	   И ЗначениеЗаполнено(ДанныеРуководителья.Имя)
	   И ЗначениеЗаполнено(ДанныеРуководителья.Должность) Тогда
		
		ДанныеУчастника.Вставить("Руководитель", Новый Структура);
		ДанныеУчастника.Руководитель.Вставить("Фамилия"  , ДанныеРуководителья.Фамилия);
		ДанныеУчастника.Руководитель.Вставить("Имя"      , ДанныеРуководителья.Имя);
		ДанныеУчастника.Руководитель.Вставить("Отчество" , ДанныеРуководителья.Отчество);
		ДанныеУчастника.Руководитель.Вставить("Должность", ДанныеРуководителья.Должность);
		
	КонецЕсли;
	
	// Адрес
	ДанныеУчастника.Вставить("Адрес", Новый Структура);
	Если АдресУчастника.ПроизвольныйАдрес Тогда
		
		// Адрес.Произвольный
		ДанныеУчастника.Адрес.Вставить("Произвольный", АдресУчастника.АдресТекст);
		
	ИначеЕсли Не АдресУчастника.АдресРФ Тогда
		
		ДанныеУчастника.Адрес.Вставить("Иностранный", Новый Структура);
		ДанныеУчастника.Адрес.Иностранный.Вставить("КодСтр"    , АдресУчастника.КодСтраны);
		ДанныеУчастника.Адрес.Иностранный.Вставить("КодСтраны" , АдресУчастника.КодСтраны);
		ДанныеУчастника.Адрес.Иностранный.Вставить("АдрТекст"  , АдресУчастника.АдресТекст);
		ДанныеУчастника.Адрес.Иностранный.Вставить("АдресТекст", АдресУчастника.АдресТекст);
		
	Иначе
		
		// Адрес.Структурированный
		ДанныеУчастника.Адрес.Вставить("Структурированный", Новый Структура);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Индекс"    , АдресУчастника.Индекс);
		ДанныеУчастника.Адрес.Структурированный.Вставить("КодРегион" , АдресУчастника.КодРегион);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Район"     , АдресУчастника.Район);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Город"     , АдресУчастника.Город);
		ДанныеУчастника.Адрес.Структурированный.Вставить("НаселПункт", АдресУчастника.НаселенныйПункт);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Улица"     , АдресУчастника.Улица);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Дом"       , АдресУчастника.Дом);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Корпус"    , АдресУчастника.Корпус);
		ДанныеУчастника.Адрес.Структурированный.Вставить("Кварт"     , АдресУчастника.Кварт);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресУчастника.АвтоматическиЗаполняемый) Тогда
		
		ОбъектКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресУчастника.АвтоматическиЗаполняемый, "ОбъектКонтактнойИнформации");
		ВидКонтактнойИнформации    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресУчастника.АвтоматическиЗаполняемый, "ВидКонтактнойИнформации");
		
		Если ЗначениеЗаполнено(ОбъектКонтактнойИнформации) И ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			
			// Адрес.АвтоматическиЗаполняемый
			ДанныеУчастника.Адрес.Вставить("АвтоматическиЗаполняемый", Новый Структура);
			ДанныеУчастника.Адрес.АвтоматическиЗаполняемый.Вставить("ОбъектКонтактнойИнформации", ОбъектКонтактнойИнформации);
			ДанныеУчастника.Адрес.АвтоматическиЗаполняемый.Вставить("ВидКонтактнойИнформации"   , ВидКонтактнойИнформации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// КонтактныеСведения, Контакт
	ДанныеУчастника.Вставить("КонтактныеСведения", Новый Структура);
	ДанныеУчастника.Вставить("Контакт", Новый Структура);
	
	Если ЗначениеЗаполнено(КонтактныеСведенияУчастника.Телефон) Тогда
		ДанныеУчастника.КонтактныеСведения.Вставить("Телефон", КонтактныеСведенияУчастника.Телефон);
		ДанныеУчастника.Контакт.Вставить("Телефон", КонтактныеСведенияУчастника.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактныеСведенияУчастника.ЭлектроннаяПочта) Тогда
		ДанныеУчастника.КонтактныеСведения.Вставить("ЭлектроннаяПочта", КонтактныеСведенияУчастника.ЭлектроннаяПочта);
		ДанныеУчастника.Контакт.Вставить("ЭлектроннаяПочта", КонтактныеСведенияУчастника.ЭлектроннаяПочта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактныеСведенияУчастника.Факс) Тогда
		ДанныеУчастника.КонтактныеСведения.Вставить("Факс", КонтактныеСведенияУчастника.Факс);
		ДанныеУчастника.Контакт.Вставить("Факс", КонтактныеСведенияУчастника.Факс);
	КонецЕсли;
	
	// БанковскиеРеквизиты
	ДанныеУчастника.Вставить("БанковскиеРеквизиты", Новый Структура);
	Если ЗначениеЗаполнено(БанковскиеРеквизитыУчастника.НомерСчета) И ЗначениеЗаполнено(БанковскиеРеквизитыУчастника.БИК) Тогда
		
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("НомерСчета"                , БанковскиеРеквизитыУчастника.НомерСчета);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("БИКБанка"                  , БанковскиеРеквизитыУчастника.БИК);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("БИК"                       , БанковскиеРеквизитыУчастника.БИК);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("НаименованиеБанка"         , БанковскиеРеквизитыУчастника.НаименованиеБанка);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("НаимБанк"                  , БанковскиеРеквизитыУчастника.НаименованиеБанка);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", БанковскиеРеквизитыУчастника.КоррСчет);
		ДанныеУчастника.БанковскиеРеквизиты.Вставить("КорСчет"                   , БанковскиеРеквизитыУчастника.КоррСчет);
		
	КонецЕсли;
	
	Возврат ДанныеУчастника;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаЭДО(ДеревоДанных, Участник, ВидУчастника, ВидАдреса = "Юр", Дата = Неопределено)
	
	Если Не ЗначениеЗаполнено(Участник)
	 Или ТипЗнч(Участник) <> Тип("СправочникСсылка.Организации") И ТипЗнч(Участник) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИнформации = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	ОсновныеДанные = ОсновныеСведенияОбУчастникеЭДО(Участник, ДатаИнформации);
	
	ДанныеУчастника = ПолучитьДанныеУчастникаЭДО(ОсновныеДанные, ВидАдреса, ДатаИнформации);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДанныеУчастника, ВидУчастника);
	
КонецПроцедуры

Процедура ДобавитьОбработкуОшибокВТаблицуУчастниковЭДО(ТаблицаУчастников, ПутьКУчастнику = "")
	
	ПутьКПолю = ?(ЗначениеЗаполнено(ПутьКУчастнику), ПутьКУчастнику + ".", "");
	
	Для Каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		
		Сведения = СтрокаТаблицы.СведенияОбУчастнике;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = ?(ЗначениеЗаполнено(ПутьКУчастнику), СтрокаТаблицы[ПутьКУчастнику], СтрокаТаблицы);
		
		Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ЮЛ.НаименованиеОрганизации", Сведения.Участник, "Объект.НаименованиеПолное");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Участник, "Объект.ИНН");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ЮЛ.КПП", Сведения.Участник, "Объект.КПП");
			
		ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИЛ.НаименованиеОрганизации", Сведения.Участник, "Объект.НаименованиеПолное");
			
		ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИП.ИНН", Сведения.Участник, "Объект.ИНН");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИП.Фамилия", Сведения.Участник, "Объект.НаименованиеПолное");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИП.Имя", Сведения.Участник, "Объект.НаименованиеПолное");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИП.Отчество", Сведения.Участник, "Объект.НаименованиеПолное");
			
			Если ТипЗнч(Сведения.Участник) = Тип("СправочникСсылка.Организации") Тогда
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "ТипУчастника.ИП.СвидетельствоОГосРегистрации", Сведения.Участник, "Объект.СвидетельствоСерияНомер");
			КонецЕсли;
			
		КонецЕсли;
		
		ПостфиксПоляАдрес = ?(ТипЗнч(Сведения.Участник) = Тип("СправочникСсылка.Контрагенты"), "Контрагенты", "Организации");
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "Адрес.АвтоматическиЗаполняемый", Сведения.Участник, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес);
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "КонтактныеСведения.Телефон", Сведения.Участник);
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "КонтактныеСведения.ЭлектроннаяПочта", Сведения.Участник);
		
		НомерСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Сведения, "НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			
			Если Сведения.Свойство("БанковскийСчетСсылка") Тогда
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "БанковскиеРеквизиты.НомерСчета", Сведения.БанковскийСчетСсылка, "Объект.НомерСчета");
			КонецЕсли;
			
			Банк = "";
			Если Сведения.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.НаименованиеБанка", Сведения.БанкСсылка, "Объект.Наименование");
				КонецЕсли;
			КонецЕсли;
			
			БИК = "";
			Если Сведения.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "БанковскиеРеквизиты.БИКБанка", Сведения.БанкСсылка, "Объект.Код");
				КонецЕсли;
			КонецЕсли;
			
			КоррСчет = "";
			Если Сведения.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "БанковскиеРеквизиты.КорреспондентскийСчетБанка", Сведения.БанкСсылка, "Объект.КоррСчет");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКПО = "";
		Если Сведения.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы, ПутьКПолю + "КодОКПО", Сведения.Участник, "Объект.КодПоОКПО");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомагательные (исходящие)
#Область ВспомагательныеИсходящие

Функция КоэффициентПересчетаВалюты(Данные, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета)
	
	КоэффициентПересчета = 1;
	Если Данные.Валюта <> ВалютаРегламентированногоУчета Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Дата", Данные.Валюта, НачалоДня(Данные.Дата));
		Массив = ТаблицаКурсовВалют.НайтиСтроки(СтруктураПоиска);
		Если Массив.Количество() > 0 Тогда
			КоэффициентПересчета = ?(Массив[0].Кратность <> 0, Массив[0].Курс / Массив[0].Кратность, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

Функция ДанныеДляСопоставленияНоменклатуры(СсылкаНаОбъект)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура       КАК Номенклатура,
	|	&ПустаяХарактеристика     КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ДанныеНоменклатуры.Упаковка.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА ДанныеНоменклатуры.Упаковка
	|		ИНАЧЕ ДанныеНоменклатуры.ЕдиницаИзмерения.КодОКЕИ
	|	КОНЕЦ                     КАК Упаковка,
	|	Товары.Ссылка.Контрагент  КАК Владелец,
	|	""""                      КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	#Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО
	|			ДанныеНоменклатуры.Ссылка = Товары.Номенклатура
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Товары", СсылкаНаОбъект.Метаданные().ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.ПривестиЗначение());
	Запрос.Выполнить();
	
	ТаблицаОтбора = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить();
	
	СопоставлениеНоменклатурыКонтрагентов.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "ДанныеНоменклатурыКонтрагентов", Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Штрихкод                                   КАК Штрихкод,
	|	Штрихкоды.Номенклатура                               КАК Номенклатура,
	|	Штрихкоды.ЕдиницаИзмерения                           КАК Упаковка,
	|	ТаблицаОтбора.Упаковка = Штрихкоды.ЕдиницаИзмерения  КАК ЭтоШтрихкодКомбинации
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО
	|			ТаблицаОтбора.Номенклатура = Штрихкоды.Номенклатура
	|ГДЕ
	|	Штрихкоды.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И Штрихкоды.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод      КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура  КАК Номенклатура
	|ИЗ
	|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыКомбинации.Штрихкод      КАК Штрихкод,
	|	ШтрихкодыКомбинации.Номенклатура  КАК Номенклатура,
	|	ШтрихкодыКомбинации.Упаковка      КАК Упаковка
	|ИЗ
	|	ШтрихкодыНоменклатуры КАК ШтрихкодыКомбинации
	|ГДЕ
	|	ШтрихкодыКомбинации.ЭтоШтрихкодКомбинации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНоменклатурыКонтрагентов.Номенклатура                           КАК Номенклатура,
	|	ДанныеНоменклатурыКонтрагентов.Упаковка                               КАК ПотребительскаяУпаковка,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.Идентификатор, """")          КАК Идентификатор,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.Артикул, """")                КАК НоменклатураАртикул,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.Наименование, """")           КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод, """")    КАК ПотребительскаяУпаковкаКод,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.ЕдиницаИзмерения, """")       КАК ПотребительскаяУпаковкаНаименование,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.СтавкаНДС, """")              КАК СтавкаНДС,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.ШтрихкодКомбинации, """")     КАК ШтрихкодКомбинации,
	|	ЕСТЬNULL(ДанныеНоменклатурыКонтрагентов.ШтрихкодыНоменклатуры, """")  КАК ШтрихкодыНоменклатуры
	|ИЗ
	|	ДанныеНоменклатурыКонтрагентов КАК ДанныеНоменклатурыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("РезультатПоШтрихкодамНоменклатуры"   , РезультатыЗапросов[1]);
	Данные.Вставить("РезультатПоШтрихкодамКомбинаций"     , РезультатыЗапросов[2]);
	Данные.Вставить("РезультатПоСопоставлениюНоменклатуры", РезультатыЗапросов[3]);
	
	Возврат Данные;
	
КонецФункции

Функция ЗаполнитьСопоставлениеНоменклатуры(Знач СтрокаТовары, ТаблицаСопоставленияНоменклатуры = Неопределено, ШтрихкодыКомбинаций = Неопределено, ШтрихкодыНоменклатуры = Неопределено)
	
	СтрокаДанныхСопоставления = СтрокаТовары;
	Если ЗначениеЗаполнено(ТаблицаСопоставленияНоменклатуры) Тогда
		
		Отбор = Новый Структура("Номенклатура, ПотребительскаяУпаковка", СтрокаТовары.Номенклатура, СтрокаТовары.ПотребительскаяУпаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставленияНоменклатуры.НайтиСтроки(Отбор);
		
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			СтрокаДанныхСопоставления = СтрокиИзНоменклатурыКонтрагентов[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("НоменклатураИБ"       , Неопределено);
	Сопоставление.Вставить("УпаковкаИБ"           , Неопределено);
	
	Сопоставление.Вставить("Идентификатор"        , "");
	Сопоставление.Вставить("Наименование"         , "");
	Сопоставление.Вставить("Артикул"              , "");
	Сопоставление.Вставить("СтавкаНДС"            , Перечисления.СтавкиНДС.ПустаяСсылка());
	Сопоставление.Вставить("ЕдиницаИзмерения"     , "");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод"  , "");
	Сопоставление.Вставить("ШтрихкодКомбинации"   , "");
	Сопоставление.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	
	ЗаполнитьЗначенияСвойств(Сопоставление, СтрокаДанныхСопоставления);
	
	Сопоставление.НоменклатураИБ      = СтрокаДанныхСопоставления.Номенклатура;
	Сопоставление.УпаковкаИБ          = СтрокаДанныхСопоставления.ПотребительскаяУпаковка;
	
	Сопоставление.Наименование        = СокрЛП(СтрокаДанныхСопоставления.НоменклатураНаименование);
	Сопоставление.Артикул             = СокрЛП(СтрокаДанныхСопоставления.НоменклатураАртикул);
	Сопоставление.ЕдиницаИзмеренияКод = СокрЛП(СтрокаДанныхСопоставления.ПотребительскаяУпаковкаКод);
	Сопоставление.ЕдиницаИзмерения    = СокрЛП(СтрокаДанныхСопоставления.ПотребительскаяУпаковкаНаименование);
	
	Если ЗначениеЗаполнено(ШтрихкодыКомбинаций) Тогда
		Отбор = Новый Структура("Номенклатура, Упаковка", СтрокаДанныхСопоставления.Номенклатура, СтрокаДанныхСопоставления.ПотребительскаяУпаковка);
		НайденныеСтроки = ШтрихкодыКомбинаций.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Сопоставление.ШтрихкодКомбинации = НайденныеСтроки[0].Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодыНоменклатуры) Тогда
		Сопоставление.ШтрихкодыНоменклатуры = Новый Массив;
		Отбор = Новый Структура("Номенклатура", СтрокаДанныхСопоставления.Номенклатура);
		НайденныеСтроки = ШтрихкодыНоменклатуры.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Сопоставление.ШтрихкодыНоменклатуры.Добавить(НайденнаяСтрока.Штрихкод);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сопоставление;
	
КонецФункции

Функция ОписаниеУпаковкиЭлектронногоОбъекта()
	
	ОписаниеУпаковки = Новый Структура;
	ОписаниеУпаковки.Вставить("КодОКЕИ"                , "778");
	ОписаниеУпаковки.Вставить("Наименование"           , "упак");
	ОписаниеУпаковки.Вставить("НаименованиеПолное"     , "Упаковка");
	ОписаниеУпаковки.Вставить("МеждународноеСокращение", "-");
	
	Возврат ОписаниеУпаковки;
	
КонецФункции

Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено)
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "Количество", СсылкаНаДокумент, "Объект.Товары.КоличествоВЕдиницахИзмерения",, "НомерСтроки");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("БазоваяЕдиницаНаименование") <> Неопределено Тогда
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаНаименование", Неопределено));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиСПустойЕдиницей, ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаНаименование", "")));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей, "БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей, "БазоваяЕдиницаНаименование", "Номенклатура", "Объект.Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВспомагательныеИсходящие

#КонецОбласти // Исходящие


////////////////////////////////////////////////////////////////////////////////
// Входящие
#Область Входящие

Процедура НайтиСоздатьПервичныйДокументПоУПД_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровПоУПД_2019(ДеревоДанных);
	
	ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьСчетФактуруПоУПД_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных);
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
	
КонецПроцедуры

Процедура НайтиСоздатьПервичныйДокументПоУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровПоУПД(ДеревоДанных);
	
	ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьСчетФактуруПоУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыПоУПД(ДеревоДанных);
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьПервичныйДокументПоПередачеТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровПоПередачеТоваров(ДеревоДанных);
	
	ЗаполнитьДокументПоступленияТоваров(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьЗаказПоставщикуПоОтветуНаЗаказ(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина, НайденныйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ЗаполнитьДокументЗаказПоставщику(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать, НайденныйОбъект);
	
КонецПроцедуры

Процедура НайтиСоздатьКонтрагентаПоРеквизитамОрганизации(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина, НайденныйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКонтрагентаПоРеквизитамОрганизации(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ЗаполнитьСправочникКонтрагенты(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать, НайденныйОбъект);
	
КонецПроцедуры


Функция ПодготовитьСтруктуруДляПоступленияТоваровПоУПД_2019(ДеревоДанных)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхПоступленияТоваров();
	
	ДанныеДляЗаполнения.Шапка.Валюта               = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеДляЗаполнения.Шапка.ВалютаВзаиморасчетов = ДанныеДляЗаполнения.Шапка.Валюта;
	
	ДанныеДляЗаполнения.Шапка.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДанныеДляЗаполнения.Шапка.ДатаВходящегоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	СведенияОПродавце         = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе       = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	
	Если СведенияОПродавце.Строки.Количество() > 1 Или СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"),
			ДанныеДляЗаполнения.Шапка.НомерВходящегоДокумента,
			Формат(ДанныеДляЗаполнения.Шапка.ДатаВходящегоДокумента, "ДЛФ=D"));
		ТекстИсключения = ТекстИсключения + Символы.ПС + НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеДляЗаполнения.Шапка.Контрагент = Контрагент;
	КонецЕсли;
	
	// Сведения о грузоотправителе
	Для Каждого СтрокаГрузоотправителя Из СведенияОГрузоотправителе.Строки Цикл
		Грузоотправитель = КонтрагентПоДаннымЭД(СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель");
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДанныеДляЗаполнения.Шапка.Грузоотправитель = Грузоотправитель;
	КонецЕсли;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		Организация = ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки");
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеДляЗаполнения.Шапка.Организация = Организация;
	КонецЕсли;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
		ШтрихкодыУпаковок = МодульЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	// Сведения о товарах
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		// Признак = 1 - имущество.
		// Признак = 5 - иное. Загружаем как товар.
		// Все остальное БА не принимает.
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		Если ЗначениеЗаполнено(Признак) И Признак <> "1" И Признак <> "5" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДляЗаполнения.Товары.Добавить();
		
		Сопоставление = СведенияОТоваре.Строки.Найти("СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.ЕдиницаИзмерения = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", СтавкаНДСПоУмолчанию(Номенклатура), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена       = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ВестиУчетПоГТД") = Истина Тогда
			
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0], "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0], "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("Код", КодСтраныПроисхождения);
					
					СтранаПроисхождения = ОбщегоНазначенияБЭД.НайтиСсылку("СтраныМира",, ПараметрыПоиска);
					
					ДанныеНомераГТД = ИнициализироватьСтруктуруДанныхНомераГТД();
					ДанныеНомераГТД.Шапка.Код                 = НомерТаможеннойДекларации;
					ДанныеНомераГТД.Шапка.СтранаПроисхождения = СтранаПроисхождения;
					
					НоваяСтрока.НомерГТД = ОбщегоНазначенияБЭД.НайтиСсылку("НомераГТД",, ДанныеНомераГТД.Шапка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.НомерГТД) Тогда
						ЗаполнитьСправочникНомераГТД(НоваяСтрока.НомерГТД, ДанныеНомераГТД);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ГосИС.ИСМП
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
			МодульЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);
		КонецЕсли;
		// Конец ГосИС.ИСМП
		
	КонецЦикла;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
		МодульЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	Для Каждого ТекСтрока Из ДанныеДляЗаполнения.Товары Цикл
		ТекСтрока.КоличествоВЕдиницахИзмерения = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			ТекКоэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоВЕдиницахИзмерения * ТекКоэффициент;
		ТекСтрока.Коэффициент = ТекКоэффициент;
	КонецЦикла;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхСчетаФактуры();
	
	// Сведения о документах-основаниях счета-фактуры
	ДанныеДляЗаполнения.Шапка.ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	
	// Сведения о входящем счете-фактуре
	ДанныеДляЗаполнения.Шапка.НомерВходящегоСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДанныеДляЗаполнения.Шапка.ДатаВходящегоСчетаФактуры  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровПоУПД(ДеревоДанных)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхПоступленияТоваров();
	
	ДанныеДляЗаполнения.Шапка.Валюта = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДанныеДляЗаполнения.Шапка.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДанныеДляЗаполнения.Шапка.ДатаВходящегоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	// Сведения о поставщике.
	Контрагент = КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеДляЗаполнения.Шапка.Контрагент = Контрагент;
	КонецЕсли;
	
	// Сведения о грузоотправителе
	Грузоотправитель = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель");
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДанныеДляЗаполнения.Шапка.Грузоотправитель = Грузоотправитель;
	КонецЕсли;
	
	// Сведения о покупателе.
	Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик");
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеДляЗаполнения.Шапка.Организация = Организация;
	КонецЕсли;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
		ШтрихкодыУпаковок = МодульЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	// Сведения о товарах
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		// Признак = 1 - имущество.
		// Признак = 5 - иное. Загружаем как товар.
		// Все остальное БА не принимает.
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		Если ЗначениеЗаполнено(Признак) И Признак <> "1" И Признак <> "5" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДляЗаполнения.Товары.Добавить();
		
		Сопоставление = СведенияОТоваре.Строки.Найти("СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.ЕдиницаИзмерения = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", СтавкаНДСПоУмолчанию(Номенклатура), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена       = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ВестиУчетПоГТД") = Истина Тогда
			
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0], "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0], "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("Код", КодСтраныПроисхождения);
					
					СтранаПроисхождения = ОбщегоНазначенияБЭД.НайтиСсылку("СтраныМира",, ПараметрыПоиска);
					
					ДанныеНомераГТД = ИнициализироватьСтруктуруДанныхНомераГТД();
					ДанныеНомераГТД.Шапка.Код                 = НомерТаможеннойДекларации;
					ДанныеНомераГТД.Шапка.СтранаПроисхождения = СтранаПроисхождения;
					
					НоваяСтрока.НомерГТД = ОбщегоНазначенияБЭД.НайтиСсылку("НомераГТД",, ДанныеНомераГТД.Шапка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.НомерГТД) Тогда
						ЗаполнитьСправочникНомераГТД(НоваяСтрока.НомерГТД, ДанныеНомераГТД);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ГосИС.ИСМП
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
			МодульЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);
		КонецЕсли;
		// Конец ГосИС.ИСМП
		
	КонецЦикла;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульЭлектронноеВзаимодействиеИСМП = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
		МодульЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	Для Каждого ТекСтрока Из ДанныеДляЗаполнения.Товары Цикл
		ТекСтрока.КоличествоВЕдиницахИзмерения = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			ТекКоэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоВЕдиницахИзмерения * ТекКоэффициент;
		ТекСтрока.Коэффициент = ТекКоэффициент;
	КонецЦикла;
	
	// ГосИС.ИСМП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	КонецЕсли;
	// Конец ГосИС.ИСМП
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыПоУПД(ДеревоДанных)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхСчетаФактуры();
	
	// Сведения о документах-основаниях счета-фактуры
	ДанныеДляЗаполнения.Шапка.ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	
	// Сведения о входящем счете-фактуре
	ДанныеДляЗаполнения.Шапка.НомерВходящегоСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДанныеДляЗаполнения.Шапка.ДатаВходящегоСчетаФактуры  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровПоПередачеТоваров(ДеревоДанных)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхПоступленияТоваров();
	
	ДанныеДляЗаполнения.Шапка.Валюта = ОбщегоНазначенияБЭД.НайтиСсылку("Валюты", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДанныеДляЗаполнения.Шапка.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной");
	ДанныеДляЗаполнения.Шапка.ДатаВходящегоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной");
	
	// Сведения о поставщике.
	Контрагент = КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеДляЗаполнения.Шапка.Контрагент = Контрагент;
	КонецЕсли;
	
	// Сведения о грузоотправителе
	Грузоотправитель = КонтрагентПоДаннымЭД(ДеревоДанных, "Грузоотправитель");
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДанныеДляЗаполнения.Шапка.Грузоотправитель = Грузоотправитель;
	КонецЕсли;
	
	// Сведения о покупателе.
	Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик");
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеДляЗаполнения.Шапка.Организация = Организация;
	КонецЕсли;
	
	// Сведения о товарах
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ДанныеДляЗаполнения.Товары.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		Сопоставление = СведенияОТоваре.Строки.Найти("ТаблицаТоваров.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.ЕдиницаИзмерения = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДанныеДляЗаполнения.Товары Цикл
		ТекСтрока.КоличествоВЕдиницахИзмерения = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			ТекКоэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоВЕдиницахИзмерения * ТекКоэффициент;
		ТекСтрока.Коэффициент = ТекКоэффициент;
	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхЗаказаПоставщику();
	
	ДанныеДляЗаполнения.Шапка.Организация         = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Организация", Тип("СправочникСсылка.Организации"));
	ДанныеДляЗаполнения.Шапка.Контрагент          = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Контрагент", Тип("СправочникСсылка.Контрагенты"));
	ДанныеДляЗаполнения.Шапка.ДоговорКонтрагента  = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ДоговорКонтрагента", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ДанныеДляЗаполнения.Шапка.Валюта              = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Валюта", Тип("СправочникСсылка.Валюты"));
	ДанныеДляЗаполнения.Шапка.ЦенаВключаетНДС     = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ЦенаВключаетНДС", Тип("Булево"));
	ДанныеДляЗаполнения.Шапка.НомерПоДаннымПоставщика = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Номер", Тип("Строка"));
	ДанныеДляЗаполнения.Шапка.ДатаПоДаннымПоставщика  = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Дата", Тип("Дата"));
	
	ДанныеТоваровЭлектронногоОбъекта = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого ДанныеТовара Из ДанныеТоваровЭлектронногоОбъекта Цикл
		
		НоваяСтрока = ДанныеДляЗаполнения.Товары.Добавить();
		
		Сопоставление = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "Сопоставление");
		
		Если ТипЗнч(Сопоставление) = Тип("Структура") Тогда
			
			// Номенклатуру можно получать из ЗагружаемыеДанные, т.к. поиск выполняется по уникальному идентификатору.
			Номенклатура = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Сопоставление, "НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			// Единицу измерения можно получать из ЗагружаемыеДанные, т.к. поиск выполняется по уникальному идентификатору.
			Упаковка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Сопоставление, "УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.ЕдиницаИзмерения = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "Количество", Тип("Число"));
		НоваяСтрока.Цена       = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "Цена", Тип("Число"));
		НоваяСтрока.Сумма      = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "Сумма", Тип("Число"));
		НоваяСтрока.СтавкаНДС  = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "СтавкаНДС", Тип("ПеречислениеСсылка.СтавкиНДС"));
		НоваяСтрока.СуммаНДС   = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "СуммаНДС", Тип("Число"));
		НоваяСтрока.СуммаСНДС  = ЗначениеРеквизитаОбъекта_CML(ДанныеТовара, ДеревоРазбора, "СуммаСНДС", Тип("Число"));
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДанныеДляЗаполнения.Товары Цикл
		ТекСтрока.КоличествоВЕдиницахИзмерения = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			ТекКоэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоВЕдиницахИзмерения * ТекКоэффициент;
		ТекСтрока.Коэффициент = ТекКоэффициент;
	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКонтрагентаПоРеквизитамОрганизации(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляЗаполнения = ИнициализироватьСтруктуруДанныхКонтрагента();
	
	// Шапка
	ДанныеДляЗаполнения.Шапка.ИНН = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ИНН", Тип("Строка"), Истина);
	ДанныеДляЗаполнения.Шапка.КПП = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "КПП", Тип("Строка"), Истина);
	
	ДанныеДляЗаполнения.Шапка.Наименование       = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "Наименование", Тип("Строка"), Истина);
	ДанныеДляЗаполнения.Шапка.ПолноеНаименование = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ОфициальноеНаименование", Тип("Строка"), Истина);
	Если ПустаяСтрока(ДанныеДляЗаполнения.Шапка.ПолноеНаименование) Тогда
		ДанныеДляЗаполнения.Шапка.ПолноеНаименование = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ПолноеНаименование", Тип("Строка"), Истина);
	КонецЕсли;
	Если ПустаяСтрока(ДанныеДляЗаполнения.Шапка.ПолноеНаименование) Тогда
		ДанныеДляЗаполнения.Шапка.ПолноеНаименование = ДанныеДляЗаполнения.Шапка.Наименование;
	КонецЕсли;
	Если ПустаяСтрока(ДанныеДляЗаполнения.Шапка.Наименование) Тогда
		ДанныеДляЗаполнения.Шапка.Наименование = ДанныеДляЗаполнения.Шапка.ПолноеНаименование;
	КонецЕсли;
	
	ЮрАдресСтруктурой = ЗначениеРеквизитаОбъекта_CML(СтрокаДляЗагрузки, ДеревоРазбора, "ИНН", Тип("Структура"), Истина);
	ДанныеДляЗаполнения.Шапка.ЮрАдрес = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЮрАдресСтруктурой, "ЗначениеРеквизита");
	
	// БанковскиеСчетаКонтрагента
	БанковскиеСчетаКонтрагента = Новый ТаблицаЗначений;
	БанковскиеСчетаКонтрагента.Колонки.Добавить("НомерСчета"  , ОбщегоНазначения.ОписаниеТипаСтрока(20));
	БанковскиеСчетаКонтрагента.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	БанковскиеСчетаКонтрагента.Колонки.Добавить("ДанныеБанка" , Новый ОписаниеТипов("ФиксированнаяСтруктура"));
	
	МассивСчетов = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет"));
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		
		НомерСчета = ЗначениеРеквизитаОбъекта_CML(ЭлементМассива, ДеревоРазбора, "НомерСчета", Тип("Строка"), Истина);
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = БанковскиеСчетаКонтрагента.Добавить();
		НоваяСтрока.Наименование = ЗначениеРеквизитаОбъекта_CML(ЭлементМассива, ДеревоРазбора, "Комментарий", Тип("Строка"), Истина);
		
		БИКБанка = ЗначениеРеквизитаОбъекта_CML(ЭлементМассива, ДеревоРазбора, "БанкБИК", Тип("Строка"), Истина);
		Если Не ЗначениеЗаполнено(БИКБанка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеБанка = Новый Структура;
		ДанныеБанка.Вставить("Код"         , БИКБанка);
		ДанныеБанка.Вставить("Наименование", ЗначениеРеквизитаОбъекта_CML(ЭлементМассива, ДеревоРазбора, "БанкНаименование", Тип("Строка"), Истина));
		ДанныеБанка.Вставить("КоррСчет"    , ЗначениеРеквизитаОбъекта_CML(ЭлементМассива, ДеревоРазбора, "БанкСчетКорр", Тип("Строка"), Истина));
		
		НоваяСтрока.ДанныеБанка = Новый ФиксированнаяСтруктура(ДанныеБанка);
		
	КонецЦикла;
	
	ДанныеДляЗаполнения.Вставить("БанковскиеСчетаКонтрагента", БанковскиеСчетаКонтрагента);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции


Функция ИнициализироватьСтруктуруДанныхПоступленияТоваров()
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("Организация"                , Справочники.Организации.ПустаяСсылка());
	ДанныеШапки.Вставить("Контрагент"                 , Справочники.Контрагенты.ПустаяСсылка());
	ДанныеШапки.Вставить("ДоговорКонтрагента"         , Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ДанныеШапки.Вставить("Склад"                      , Справочники.Склады.ПустаяСсылка());
	ДанныеШапки.Вставить("ХозяйственнаяОперация"      , Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ДанныеШапки.Вставить("Валюта"                     , Справочники.Валюты.ПустаяСсылка());
	ДанныеШапки.Вставить("ЦенаВключаетНДС"            , Ложь);
	ДанныеШапки.Вставить("НомерВходящегоДокумента"    , "");
	ДанныеШапки.Вставить("ДатаВходящегоДокумента"     , "");
	ДанныеШапки.Вставить("ПодразделениеОрганизации"   , Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ДанныеШапки.Вставить("ПредъявленСчетФактура"      , Ложь);
	ДанныеШапки.Вставить("НомерВходящегоСчетаФактуры" , "");
	ДанныеШапки.Вставить("ДатаВходящегоСчетаФактуры"  , "");
	ДанныеШапки.Вставить("Грузоотправитель"           , Справочники.Контрагенты.ПустаяСсылка());
	ДанныеШапки.Вставить("Грузополучатель"            , Справочники.Контрагенты.ПустаяСсылка());
	ДанныеШапки.Вставить("СуммаДокумента"             , 0);
	ДанныеШапки.Вставить("ИсточникФинансирования"     , Справочники.ИсточникиФинансирования.ПустаяСсылка());
	ДанныеШапки.Вставить("ВалютаВзаиморасчетов"       , Справочники.Валюты.ПустаяСсылка());
	ДанныеШапки.Вставить("ПоступлениеПоЗаказу"        , Ложь);
	ДанныеШапки.Вставить("ЗаказПоставщику"            , Документы.ЗаказПоставщику.ПустаяСсылка());
	ДанныеШапки.Вставить("Согласован"                 , Ложь);
	ДанныеШапки.Вставить("ПодотчетноеЛицо"            , Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеШапки.Вставить("Партнер"                    , Справочники.Контрагенты.ПустаяСсылка());
	ДанныеШапки.Вставить("ПринятьНДСКВычету"          , Ложь);
	ДанныеШапки.Вставить("НалогообложениеНДС"         , Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка());
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Шапка" , ДанныеШапки);
	ДанныеДляЗаполнения.Вставить("Товары", Документы.ПоступлениеТоваров.ПустаяСсылка().Товары.ВыгрузитьКолонки());
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхСчетаФактуры()
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("ДокументыОснования"        , Неопределено);
	ДанныеШапки.Вставить("НомерВходящегоСчетаФактуры", "");
	ДанныеШапки.Вставить("ДатаВходящегоСчетаФактуры" , Дата(1,1,1));
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеШапки);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхЗаказаПоставщику()
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("Организация"            , Справочники.Организации.ПустаяСсылка());
	ДанныеШапки.Вставить("Контрагент"             , Справочники.Контрагенты.ПустаяСсылка());
	ДанныеШапки.Вставить("ДоговорКонтрагента"     , Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ДанныеШапки.Вставить("Валюта"                 , Справочники.Валюты.ПустаяСсылка());
	ДанныеШапки.Вставить("ЦенаВключаетНДС"        , Ложь);
	ДанныеШапки.Вставить("НомерПоДаннымПоставщика", "");
	ДанныеШапки.Вставить("ДатаПоДаннымПоставщика" , "");
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Шапка" , ДанныеШапки);
	ДанныеДляЗаполнения.Вставить("Товары", Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки());
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхКонтрагента()
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("ИНН"                      , "");
	ДанныеШапки.Вставить("КПП"                      , "");
	ДанныеШапки.Вставить("Наименование"             , "");
	ДанныеШапки.Вставить("НаименованиеПолное"       , "");
	ДанныеШапки.Вставить("ЮрФизЛицо"                , Перечисления.ЮрФизЛицо.ПустаяСсылка());
	ДанныеШапки.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	ДанныеШапки.Вставить("КодПоОКПО"                , "");
	ДанныеШапки.Вставить("Поставщик"                , Истина);
	ДанныеШапки.Вставить("ПрочиеОтношения"          , Ложь);
	ДанныеШапки.Вставить("ЮрАдрес"                  , ""); // ЗначениеИлиПредставление (см. УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию)
	ДанныеШапки.Вставить("ФактАдрес"                , ""); // ЗначениеИлиПредставление (см. УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию)
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеШапки);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхНомераГТД()
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("Код"                , "");
	ДанныеШапки.Вставить("СтранаПроисхождения", Справочники.СтраныМира.ПустаяСсылка());
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеШапки);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции


Процедура ЗаполнитьДокументПоступленияТоваров(ДокументСсылка, ДанныеДляЗагрузки, Записывать)
	
	ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "Шапка");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		// Получены изменения по существующему документу
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ДокументОбъект);
		
	Иначе
		
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ДоговорПоНастройкеЭДО(ДокументОбъект.Контрагент, ДокументОбъект.Организация);
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
			ДокументОбъект.ДоговорКонтрагента = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьДоговорПоУмолчанию(
				ДокументОбъект.ДоговорКонтрагента,
				ДокументОбъект.Контрагент,
				ДокументОбъект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	// Вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// Заполним табличную часть Товары
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	КэшированныеЗначения = Неопределено;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ДокументОбъект));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ДокументОбъект);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого ДанныеТовара Из ДанныеДляЗагрузки.Товары Цикл
		
		СтрокаТовара = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ДанныеТовара);
		
		Если ДокументОбъект.ЦенаВключаетНДС И СтрокаТовара.Сумма <> СтрокаТовара.СуммаСНДС Тогда
			СтрокаТовара.Сумма = СтрокаТовара.СуммаСНДС;
		КонецЕсли;
		
		СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), СтрокаТовара.СерияНоменклатуры);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействийФункциональная = Новый Структура;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), ДокументОбъект.НалогообложениеНДС);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.Сумма) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСумму(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СуммаНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СуммаСНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		
		Если СтруктураДействийФункциональная.Количество() > 0 Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействийФункциональная, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Записывать Тогда
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
		ДокументОбъект.Разблокировать();
		
		ДокументСсылка = ДокументОбъект.Ссылка;
		
	Иначе
		
		ДокументСсылка = ДокументОбъект;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактура(ДокументСсылка, ДанныеДляЗагрузки, Записывать)
	
	ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "Шапка");
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ДокументыОснования) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументОсование Из ДанныеЗаполнения.ДокументыОснования Цикл
		
		ДокументОбъект = ДокументОсование.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ДокументОбъект);
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		ДокументОбъект.ПредъявленСчетФактура = Истина;
		
		Если Записывать Тогда
			
			РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
			ДокументОбъект.Разблокировать();
			
			ДокументСсылка = ДокументОбъект.Ссылка;
			
		Иначе
			
			ДокументСсылка = ДокументОбъект;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументЗаказПоставщику(ДокументСсылка, ДанныеДляЗагрузки, Записывать, НайденныйОбъект)
	
	ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "Шапка");
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		// Попробуем найти
		ПараметрыПоиска = Новый Структура("Организация, Контрагент, НомерПоДаннымПоставщика, ДатаПоДаннымПоставщика");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);
		НайденныйДок = ОбщегоНазначенияБЭД.НайтиСсылку(Метаданные.Документы.ЗаказПоставщику.Имя,, ПараметрыПоиска);
		
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда
			
			// Нашли документ, вернем ссылку, чтоб просто привязать ЭД
			
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ДокументОбъект);
			
			НайденныйОбъект = ДокументОбъект.Ссылка;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		// Получены изменения по существующему документу
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ДокументОбъект);
		
	Иначе
		
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// Вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	КэшированныеЗначения = Неопределено;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ДокументОбъект);
	
	ДокументОбъект.МаксимальныйКодСтроки = 0;
	ДокументОбъект.Товары.Очистить();
	Для Каждого ДанныеТовара Из ДанныеДляЗагрузки.Товары Цикл
		
		СтрокаТовара = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ДанныеТовара);
		
		Если ДокументОбъект.ЦенаВключаетНДС И СтрокаТовара.Сумма <> СтрокаТовара.СуммаСНДС Тогда
			СтрокаТовара.Сумма = СтрокаТовара.СуммаСНДС;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействийФункциональная = Новый Структура;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), ДокументОбъект.НалогообложениеНДС);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.Сумма) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСумму());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СуммаНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СуммаСНДС) Тогда
			СтруктураДействийФункциональная.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		
		Если СтруктураДействийФункциональная.Количество() > 0 Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействийФункциональная, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Записывать Тогда
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
		ДокументОбъект.Разблокировать();
		
		НайденныйОбъект = ДокументОбъект.Ссылка;
		
	Иначе
		
		НайденныйОбъект = ДокументОбъект;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникКонтрагенты(СправочникСсылка, ДанныеДляЗагрузки, Записывать, НайденныйОбъект)
	
	ДанныеШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "Шапка");
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(СправочникОбъект);
	Иначе
		СправочникОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		СправочникОбъект.Заполнить(ДанныеШапки);
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(СправочникОбъект, ДанныеШапки);
	
	// Наименование, НаименованиеПолное.
	Если Не ЗначениеЗаполнено(СправочникОбъект.НаименованиеПолное) Тогда
		СправочникОбъект.НаименованиеПолное = СправочникОбъект.Наименование;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СправочникОбъект.Наименование) Тогда
		СправочникОбъект.Наименование = СправочникОбъект.НаименованиеПолное;
	КонецЕсли;
	
	// ЮрФизЛицо, ЮридическоеФизическоеЛицо.
	Если Не ЗначениеЗаполнено(СправочникОбъект.ЮрФизЛицо) Тогда
		Если СтрДлина(ДанныеШапки.ИНН) = 10 Тогда
			СправочникОбъект.ЮрФизЛицо                 = Перечисления.ЮрФизЛицо.ЮрЛицо;
			СправочникОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			СправочникОбъект.ЮрФизЛицо                 = Перечисления.ЮрФизЛицо.ФизЛицо;
			СправочникОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	// Контактная информация
	Если ЗначениеЗаполнено(ДанныеШапки.ЮрАдрес) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(СправочникОбъект, ДанныеШапки.ЮрАдрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагенты);
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(СправочникОбъект, ДанныеШапки.ЮрАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагенты);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеШапки.ФактАдрес) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(СправочникОбъект, ДанныеШапки.ФактАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагенты);
	КонецЕсли;
	
	Если Не Записывать Тогда
		
		НайденныйОбъект = СправочникОбъект;
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписатьСправочник(СправочникОбъект);
		
		НайденныйОбъект = СправочникОбъект.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ДанныеБанковскихСчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "БанковскиеСчетаКонтрагента");
	Если ЗначениеЗаполнено(ДанныеБанковскихСчетов) Тогда
		
		Для Каждого ДанныеБанковскогоСчета Из ДанныеБанковскихСчетов Цикл
			
			БанковскийСчет = ОбщегоНазначенияБЭД.НайтиСсылку(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.Имя, ДанныеБанковскогоСчета.НомерСчета);
			Если ЗначениеЗаполнено(БанковскийСчет) Тогда
				Продолжить;
			КонецЕсли;
			
			БанковскийСчетОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			БанковскийСчетОбъект.Владелец = НайденныйОбъект;
			
			ПерезаполнениеЗначенийРеквизитовШапки(БанковскийСчетОбъект, ДанныеБанковскогоСчета);
			
			Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.Наименование) Тогда
				БанковскийСчетОбъект.Наименование = ДанныеБанковскогоСчета.НомерСчета;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеБанковскогоСчета.ДанныеБанка) Тогда
				
				БанкОбъект = ОбщегоНазначенияБЭД.НайтиСсылку("Банки", ДанныеБанковскогоСчета.ДанныеБанка.Код);
				Если Не ЗначениеЗаполнено(БанкОбъект) Тогда
					
					БанкОбъект = Справочники.КлассификаторБанков.СоздатьЭлемент();
					ПерезаполнениеЗначенийРеквизитовШапки(БанкОбъект, ДанныеБанковскогоСчета.ДанныеБанка);
					
					Попытка
						ЗаписатьСправочник(БанкОбъект);
					Исключение
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
				КонецЕсли;
				БанковскийСчетОбъект.Банк = БанкОбъект.Ссылка;
				
			КонецЕсли;
			
			Попытка
				ЗаписатьСправочник(БанковскийСчетОбъект);
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьСправочникНомераГТД(СправочникСсылка, ДанныеДляЗагрузки)
	
	ДанныеШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляЗагрузки, "Шапка");
	
	Код                 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШапки, "Код");
	СтранаПроисхождения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШапки, "СтранаПроисхождения");
	Если Не (ЗначениеЗаполнено(Код) И ЗначениеЗаполнено(СтранаПроисхождения)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(СправочникОбъект);
	Иначе
		СправочникОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		СправочникОбъект.Заполнить(ДанныеШапки);
	КонецЕсли;
	
	ПерезаполнениеЗначенийРеквизитовШапки(СправочникОбъект, ДанныеШапки);
	
	ЗаписатьСправочник(СправочникОбъект);
	
	СправочникСсылка = СправочникОбъект.Ссылка;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомагательные (входящие)
#Область ВспомагательныеВходящие

Функция ЗначениеРеквизитаОбъекта_CML(ДанныеЭлектронногоОбъекта, ЗагружаемыеДанные, ОписаниеПолученияРеквизита, ТипЗначения = Неопределено, ВключатьПодчиненные = Ложь)
	
	ЗначениеРеквизита = Неопределено;
	
	ЭлементДанных = ДанныеЭлектронногоОбъекта.Строки.Найти(ОписаниеПолученияРеквизита, "Реквизит", ВключатьПодчиненные);
	Если ЭлементДанных <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТипЗначения) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			
			Если ТипЗнч(ЭлементДанных.ЗначениеРеквизита) = Тип("Строка") Тогда
				
				НайденнаяСтрока = ЗагружаемыеДанные.Строки.Найти(ЭлементДанных.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) И ТипЗначения = ТипЗнч(НайденнаяСтрока.СсылкаНаОбъект) Тогда
					
					ЗначениеРеквизита = НайденнаяСтрока.СсылкаНаОбъект;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = ТипЗнч(ЭлементДанных.ЗначениеРеквизита) Тогда
				
				ЗначениеРеквизита = ЭлементДанных.ЗначениеРеквизита;
				
			КонецЕсли;
			
		Иначе
			
			ЗначениеРеквизита = ЭлементДанных.ЗначениеРеквизита;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	ИНН = "";
	КПП = "";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	
	РеквизитыПоиска = Новый Структура("ИНН, КПП", ИНН, КПП);
	Организация = ОбщегоНазначенияБЭД.НайтиСсылку("Организации",, РеквизитыПоиска);
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	ИНН = "";
	КПП = "";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	
	РеквизитыПоиска = Новый Структура("ИНН, КПП", ИНН, КПП);
	Контрагент = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",, РеквизитыПоиска);
	
	Возврат Контрагент;
	
КонецФункции

Функция ДоговорПоНастройкеЭДО(Контрагент, Организация)
	
	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов);
	
	Если Не ЕстьПравоДоступа Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументов.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Получатель = &Контрагент
		|	И НастройкиОтправкиЭлектронныхДокументов.Отправитель = &Организация
		|");
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Договор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтавкаНДСПоУмолчанию(Номенклатура, НалогообложениеНДС = Неопределено)
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "СтавкаНДС");
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ)
			 И МетаданныеОбъекта.Реквизиты.Найти(Строка.Ключ) <> Неопределено
			 И ЗначениеЗаполнено(Строка.Значение)
			 И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
			ТекущийОбъект[Строка.Ключ] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Документ, РежимЗаписи)
	
	ВидОперации = НСтр("ru = 'Запись документа в ИБ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		Документ.ОбменДанными.Загрузка = Истина;
		Документ.Записать();
	Исключение
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,, Документ.Ссылка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСправочник(Справочник)
	
	ВидОперации = НСтр("ru = 'Запись справочника в ИБ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		Справочник.Записать();
	Исключение
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,, Справочник.Ссылка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ВспомагательныеВходящие

#КонецОбласти // Входящие

#КонецОбласти // ФормированиеИОтражениеВУчетеДокументовСлужебные

////////////////////////////////////////////////////////////////////////////////
// Определение изменений версии объекта (служебные)
#Область ОпределениеИзмененияВерсииОбъектаСлужебные

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка - текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//  СтруктураКлючевыхРеквизитов - Структура - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов)
	
	Если ИмяОбъекта = "Документ.ПоступлениеТоваров" Тогда
		
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент, ДоговорКонтрагента, ХозяйственнаяОперация, ЦенаВключаетНДС, НомерВходящегоСчетаФактуры, ДатаВходящегоСчетаФактуры");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("НоменклатураПоставщика, Номенклатура, Количество, КоличествоВЕдиницахИзмерения, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровПоставщику" Тогда
		
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент, ДоговорКонтрагента, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, КоличествоВЕдиницахИзмерения, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = "Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент, ДоговорКонтрагента, ЦенаВключаетНДС";
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = "НоменклатураПоставщика, Номенклатура, Количество, КоличествоВЕдиницахИзмерения, Цена, Сумма, СуммаНДС, СтавкаНДС";
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
		+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
		|ГДЕ
		|	ТекущийОбъект.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
		+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
		+ " КАК ТекущийОбъектИмяТабличнойЧасти
		|ГДЕ
		|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru = 'Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru = 'Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
