
#Область ПрограммныйИнтерфейс

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ПараметрыПодключения - Структура
//  Команда - Строка - команда для выполнения
//  ДанныеОперации - Структура - данные операции для выполнения команды
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ПараметрыПодключения, Команда, ДанныеОперации) Экспорт;
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Неопределено, ПараметрыПодключения.ИдентификаторУстройства);
	
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	Если Команда = "CheckFiscalization" Тогда
		ФискализацияЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "PrintText" Или Команда = "PrintQRCode" Тогда
		ПечатьТекста(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "OpenShift" Тогда
		ОткрытьСмену(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "CloseShift" Тогда
		ЗакрытьСмену(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "Encash" Тогда
		Инкассация(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "OpenCashDrawer" Тогда
		ОткрытьДенежныйЯщик(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "PrintReceiptCorrection" Тогда
		ПечатьЧекаКоррекции(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" Тогда
		ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "PrintXReport" Тогда
		ОтчетБезГашения(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения); 
	ИначеЕсли Команда = "GetLineLength" Тогда
		ПолучитьШиринуСтроки(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "AnnulCheck" Тогда
		НачатьАннулированиеЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetDataKKT" Тогда
		ПолучениеПараметровККТ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetCurrentStatus" Тогда
		ПолучитьТекущееСостояние(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "OperationFN" Тогда
		ОперацияФискальногоНакопителя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "PrintCheckCopy" Тогда
		НапечататьКопиюЧека(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "OpenSessionRegistrationKM" Тогда
		ОткрытьСессиюРегистрацииКМ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "CloseSessionRegistrationKM" Тогда
		ЗакрытьСессиюРегистрацииКМ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "RequestKM" Тогда
		ЗапросКМ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetProcessingKMResult" Тогда
		ПолучитьРезультатыЗапросаКМ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "ConfirmKM" Тогда
		ПодтвердитьКМ(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "CheckFiscalizationPacket" Тогда
		ФискализацияЧекаПакетом(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	ИначеЕсли Команда = "AuthorizeSales" Или Команда = "AuthorizeRefund" Или Команда = "AuthorizeVoid" Или Команда = "PayByPaymentCardWithCashWithdrawal" Тогда 
		ВыполнитьЭквайринговуюОперацию(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда);
	ИначеЕсли Команда = "PayElectronicCertificate" Или Команда = "ReturnElectronicCertificate" Тогда 
		ВыполнитьЭквайринговуюОперациюСЭлектроннымСертификатом(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда);
	ИначеЕсли Команда = "Settlement" Тогда // Сверка итогов по картам
		ИтогиДняПоКартам(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "EmergencyVoid" Тогда // Аварийная отмена платежа
		АварийнаяОтменаОперации(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "GetCardParametrs" Тогда // Получить параметры карты 
		ПараметрыКарты(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);     
	ИначеЕсли Команда = "GetOperationByCards" Тогда // Получить параметры карты 
		ОперацииПоКартам(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "AuthorizePreSales" Или Команда = "AuthorizeVoidPreSales" Или Команда = "AuthorizeCompletion" Тогда 
		ВыполнитьЭквайринговуюОперациюПреавторизации(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	// Дисплей покупателя
	ИначеЕсли Команда = "GetOutputOptions" Тогда // Получить параметры вывода
		ПараметрыВывода(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "DisplayText" Тогда // Вывод строк на дисплей
		ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "ClearText" Тогда // Очистка дисплея
		ОчиститьДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "DisplayQRCode" Тогда // Вывод QR кода на дисплей
		ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "DisplayStatus" Тогда // Вывести статус на дисплей покупателя
		ВывестиСтатусНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "OutputHTML" Тогда // Вывести HTML на дисплей покупателя.
		ВывестиHTMLНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "DisplayInfo" Тогда // Вывести информацию на дисплей покупателя
		ВывестиИнформациюНаДисплейПокупателя(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	// Электронные весы
	ИначеЕсли Команда = "GetWeight" Тогда // Получить вес
		ПолучитьВес(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "Calibrate" Тогда // Установить вес тары
		Тарировать(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	// Выгрузка товаров в весы с печатью этикеток.
	ИначеЕсли Команда = "UploadGoods" Тогда
		ВыгрузитьТовары(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ClearBase" Тогда
		ОчиститьТоварыВВесах(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);     
	// Выгрузить изображения товаров в весы печатью этикеток.
	ИначеЕсли Команда = "UploadProductImages" Тогда
		ВыгрузитьИзображенияТоваров(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);     
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ВыгрузитьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		ЗагрузитьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		ОчиститьТаблицу(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		ИнициализацияПринтера(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ПечатьЭтикеток(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С RFID
	
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "OpenSessionRFID" ИЛИ Команда = "ОткрытьСессиюRFID" Тогда
		ОткрытьСессиюRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "CloseSessionRFID" ИЛИ Команда = "ЗакрытьСессиюRFID" Тогда
		ЗакрытьСессиюRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	// Записать данные в метку RFID 
	ИначеЕсли Команда = "SaveDataTagRFID" ИЛИ Команда = "ЗаписатьДанныеВМеткуRFID " Тогда
		ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Недопустимая команда.'"); 
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция выполняет обработку события.
//
// Параметры:
//  ОбъектДрайвера - Структура - объект драйвера.
//  ПараметрыПодключения - Структура
//  Событие - Строка - Имя события
//  Данные - Строка - Данные события
//
// Возвращаемое значение:
//  Структура
//
Функция ОбработатьСобытие(ОбъектДрайвера, ПараметрыПодключения, Событие, Данные) Экспорт;
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Неопределено, ПараметрыПодключения.ИдентификаторУстройства);
	
	Если Событие = "RFID" Тогда
		ДанныеОперации = Новый Структура("ИДПакета", Данные);
		ПолучитьДанныеМетокRFID(ПараметрыПодключения.ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДрайверПодключениеОтключение

// Начинает подключение устройства.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("Параметры"              , ПараметрыПодключения.Параметры);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОбъектаДрайвера(Оповещение, ПараметрыПодключения);
	
КонецПроцедуры

// Завершает подключение устройства
// 
// Параметры:
//  ОбъектДрайвера - ВнешняяКомпонента
//  ДополнительныеПараметры - Структура:
//   * ОповещениеПриЗавершении - ОписаниеОповещения
//   * ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьПодключениеУстройства_Завершение(ОбъектДрайвера, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ОписаниеОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
								|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ПараметрыПодключения.ОбъектДрайвера = ОбъектДрайвера;
	
	ПараметрыПодключения = ДополнительныеПараметры.ПараметрыПодключения;
	ТипОборудования = ПараметрыПодключения.ТипОборудования;
	
	Попытка
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования); 
	Исключение
		ОписаниеОшибки = НСтр("ru='Ошибка обращения к драйверу.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецПопытки;
	
	ПараметрыДрайвера = МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера();
	Попытка                         
		РевизияИнтерфейса = 2005;
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(ПараметрыДрайвера.НаименованиеДрайвера, ПараметрыДрайвера.ОписаниеДрайвера, ПараметрыДрайвера.ТипОборудования, 
			РевизияИнтерфейса, ПараметрыДрайвера.ИнтеграционныйКомпонент, ПараметрыДрайвера.ОсновнойДрайверУстановлен, ПараметрыДрайвера.URLЗагрузкиДрайвера);
		ПараметрыПодключения.РевизияИнтерфейса = РевизияИнтерфейса;
	Исключение
		ПараметрыПодключения.РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса(); 
	КонецПопытки;
	
	Если ПустаяСтрока(ПараметрыДрайвера.РевизияИнтерфейса) Или ПараметрыДрайвера.РевизияИнтерфейса = 0 Тогда
		ОписаниеОшибки = НСтр("ru='Ревизия интерфейса драйвера не определена.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПодключения.Параметры <> Неопределено Тогда
		Для Каждого Параметр Из ПараметрыПодключения.Параметры Цикл
			Если Лев(Параметр.Ключ, 2) = "P_" Тогда
				ЗначениеПараметра = Параметр.Значение;
				ИмяПараметра = Сред(Параметр.Ключ, 3);
				ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.Подключить");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		Если ТипОборудования = "ПринтерЧеков" Или ТипОборудования = "ФискальныйРегистратор" Или ТипОборудования = "ККТ" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "ЭквайринговыйТерминал" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПараметрыТерминала(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "ДисплейПокупателя" Тогда
			ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
			ПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремРезультатВыполнения) 
		КонецЕсли;
		
		Если ТипОборудования = "СканерШтрихкода" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("Штрихкод");
			ПараметрыПодключения.ИменаСобытий.Добавить("Barcode");
			ПараметрыПодключения.ИменаСобытий.Добавить("ШтрихкодBase64");
			ПараметрыПодключения.ИменаСобытий.Добавить("BarcodeBase64");
		КонецЕсли;
		
		Если ТипОборудования = "СчитывательМагнитныхКарт" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКарты");
			ПараметрыПодключения.ИменаСобытий.Добавить("TracksData");
			ПараметрыПодключения.ИменаСобытий.Добавить("ДанныеКартыBase64");
			ПараметрыПодключения.ИменаСобытий.Добавить("TrackDataBase64");
		КонецЕсли;
		
		Если ТипОборудования = "СчитывательRFID" Тогда
			ПараметрыПодключения.ИменаСобытий.Добавить("RFID");
		КонецЕсли;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Начинает отключение устройства.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения
//  ПараметрыПодключения - см. МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ПараметрыПодключения) Экспорт
	
	Попытка
		ОбъектДрайвера = ПараметрыПодключения.ОбъектДрайвера;
		ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства); 
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	Исключение
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"),"ОбъектДрайвера.Отключить");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФискальныеУстройства

// Функция осуществляет фискализацию чека пакетом.
//
Процедура ФискализацияЧекаПакетом(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" И ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда 
		
		Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Ложь, ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML); 
		
		Если Результат Тогда  
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данная команда не поддерживается.'");
	КонецЕсли;
	
КонецПроцедуры 

// Процедура осуществляет фискализацию чека.
//
Процедура ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	ДатаСеанса = МенеджерОборудованияВызовСервера.ДатаСеанса();
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3004  Тогда
			ТекущийСтатус = МенеджерОборудованияКлиент.ПроверкаКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
			// Если есть текущая проверка КМ 
			Если НЕ ПустаяСтрока(ТекущийСтатус.ИдентификаторЗапроса) Тогда
				Попытка
					ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ТекущийСтатус.ИдентификаторЗапроса, 0);
					МенеджерОборудованияКлиент.УстановитьПроверкуКодаМаркировки(ПараметрыПодключения.ИДУстройства);
				Исключение
					РезультатВыполнения.Результат = Ложь;
					ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"),"ОбъектДрайвера.ПодтвердитьКМ") + Символы.ПС + ОписаниеОшибки; 
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Если ДанныеОперации.ЕстьПерсональныеДанные Тогда
					ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXMLПерсональныеДанные
				Иначе
					ДанныеЧекаXML = ДанныеОперации.ДанныеЧекаXML;
				КонецЕсли;
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML); 
			Иначе // Версия стандарта 2.2 (ОФД 1.05)
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки); 
			КонецЕсли;
			ДанныеОперации.ДатаВремяЧека = ДатаСеанса;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.СформироватьЧек") + Символы.ПС + ОписаниеОшибки; 
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда  
			РезультатВыполнения.Результат = Истина;
			
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
			
			Если ДанныеОперации.ТестовыеЧеки <> Неопределено И ДанныеОперации.ТестовыеЧеки.Количество() > 0 Тогда
				РезультатПечатиНефискальныхДокументов = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
				ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатПечатиНефискальныхДокументов);
				РезультатВыполнения.Вставить("РезультатПечатиНефискальныхДокументов", РезультатПечатиНефискальныхДокументов);
			КонецЕсли;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
	КонецЕсли;
	
КонецПроцедуры 

// Осуществляет печать чека коррекции.
//
Процедура ПечатьЧекаКоррекции(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)   
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ДанныеОперации.ЧекКоррекцииНаККТ Тогда
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML,  ДанныеОперации.РезультатОперацииXML); 
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, 
					ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки);      
				ДанныеОперации.ДатаВремяЧека = МенеджерОборудованияКлиент.ДатаСеанса();
			КонецЕсли;  
		Иначе
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.РезультатОперацииXML);
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ДанныеОперации.Электронно, 
					ДанныеОперации.ДанныеЧекаXML, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ, ДанныеОперации.ФискальныйПризнак, ДанныеОперации.АдресСайтаПроверки); 
				ДанныеОперации.ДатаВремяЧека = МенеджерОборудованияКлиент.ДатаСеанса();
			КонецЕсли;  
		КонецЕсли;
		
		Если Результат И ДанныеОперации.СформироватьЧекКоррекцииСторно Тогда      
			ПараметрыФискализацииСторно = ДанныеОперации.ЧекКоррекцииСторно;
			Если ДанныеОперации.ЧекКоррекцииНаККТ Тогда
				Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				Иначе
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.НомерЧекаККТ, ПараметрыФискализацииСторно.НомерСменыККТ, ПараметрыФискализацииСторно.ФискальныйПризнак, ПараметрыФискализацииСторно.АдресСайтаПроверки); 
					ПараметрыФискализацииСторно.ДатаВремяЧека = МенеджерОборудованияКлиент.ДатаСеанса();
				КонецЕсли;  
			Иначе        
				Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				Иначе
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.НомерЧекаККТ, ПараметрыФискализацииСторно.НомерСменыККТ, ПараметрыФискализацииСторно.ФискальныйПризнак, ПараметрыФискализацииСторно.АдресСайтаПроверки); 
					ПараметрыФискализацииСторно.ДатаВремяЧека = МенеджерОборудованияКлиент.ДатаСеанса();
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли; 
		
		Если Результат Тогда  
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
			
	Исключение            
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка формирования коррекции на ККТ.'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет печать текста.
//
Процедура ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 2000 Тогда
		
		РезультатВыполнения.Результат = Истина;
		Попытка
			Для Каждого ТекстПечати Из ДанныеОперации.ТестовыеЧеки Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ОписаниеОшибки = "";
					ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
					РезультатВыполнения.Результат = Ложь;
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.НапечататьТекстовыйДокумент") + Символы.ПС + ОписаниеОшибки; 
		КонецПопытки;
		
	Иначе  
		
		РезультатВыполнения.Результат = Истина;
		Попытка                             
			НомерЧека  = 0; 
			НомерСмены = 0;     
			// Открытие текстового чека
			ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, Ложь, Ложь, Истина, НомерЧека, НомерСмены);
			
			ТекстЧека = ДанныеОперации.ТекстЧека;
			Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЧека) Цикл          
				ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстЧека, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
					ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
					ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
						ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
					ВремВыходныеПараметры = Новый Массив();  
					// Печать штрихкода
					Если НЕ ОбъектДрайвера.НапечататьШтрихКод(ПараметрыПодключения.ИДУстройства, ВремТипШтрихкода, ВремШтрихКод) Тогда
						Текст = НСтр("ru='<Штрихкод %ТипШтрихКода% не распечатан>'");
						Текст = СтрЗаменить(Текст, "%ТипШтрихКода%", ВремТипШтрихкода);         
						ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, Текст)
					КонецЕсли;
				Иначе                         
					// Печать тестовой строки
					Результат = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, ВыделеннаяСтрока);
				КонецЕсли;
			КонецЦикла;    
			// Закрытие текстового чека
			ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства, 0, 0, 0, 0);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Ошибка интерфейса принтера ПТК/ФР.'") + Символы.ПС + ОписаниеОшибки; 
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Инкассация(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера,  ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ДанныеЧекаXML,
				?(ДанныеОперации.ТипИнкассации = 1, ДанныеОперации.СуммаЧека, -ДанныеОперации.СуммаЧека));
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.НапечататьЧекВнесенияВыемки") + Символы.ПС + ОписаниеОшибки; 
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда  
			ДанныеОперации.СтатусСмены = 1; // Открыта
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
	КонецЕсли;
	
КонецПроцедуры   

// Процедура осуществляет закрытие смены.
//
Процедура ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		Результат = Истина;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
			Иначе
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML, 
					ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ);
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗакрытьСмену") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда  
		// Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.
		ДанныеОперации.СтатусСмены = 1; // Закрыта
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;

КонецПроцедуры 

// Процедура осуществляет открытие смены.
//
Процедура ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		ПараметрыККТ = "";
		Результат = Истина;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			ПараметрыККТ = "";
			Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"),"ОбъектДрайвера.ПолучитьПараметрыККТ") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
			Иначе
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML, 
					ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ);
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОткрытьСмену") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда  
		// Статус 1 - Закрыта, 2 - Открыта, 3 - Истекла.
		ДанныеОперации.СтатусСмены = 2; // Открыта
		ДанныеОперации.Вставить("ПараметрыККТ", ПараметрыККТ);
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Результат = Истина;
	
	Попытка
		Результат = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОткрытьДенежныйЯщик") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет формирование отчета о текущем состоянии расчетов.
//
Процедура ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Попытка
			Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
		
КонецПроцедуры

// Процедура осуществляет формирование отчет без гашения.
//
Процедура ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		Результат = Истина;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.НапечататьОтчетБезГашения") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ширину строки в символах.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//  РезультатВыполнения - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//
Процедура ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)  
	
	Если ПараметрыПодключения.Свойство("ШиринаСтроки") И ПараметрыПодключения.ШиринаСтроки > 0 Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Вставить("ШиринаСтроки", ПараметрыПодключения.ШиринаСтроки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ШиринаСтроки = 0;
		Результат = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		ПараметрыПодключения.ШиринаСтроки = ШиринаСтроки;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьШиринуСтроки") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Вставить("ШиринаСтроки", ШиринаСтроки);
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет аннулирование чека.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты 
//  ПараметрыПодключения - Структура
//  ДанныеОперации - Структура - данные операции для выполнения команды
//  РезультатВыполнения - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//
Процедура НачатьАннулированиеЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)  
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Вставить("НомерСменыККТ" , Неопределено);
	РезультатВыполнения.Вставить("НомерЧекаККТ"  , Неопределено);
	РезультатВыполнения.Вставить("СтатусСмены", 2);
	РезультатВыполнения.Вставить("ДатаВремяЧека", МенеджерОборудованияКлиент.ДатаСеанса());
	
КонецПроцедуры

Процедура ПолучениеПараметровККТ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыККТ = "";
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьПараметрыККТ") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Вставить("ПараметрыККТXML", ПараметрыККТ);
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет открытие смены.
//
Процедура ПолучитьТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, ДанныеОперации.РезультатXML);
		Иначе
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.НомерСменыККТ,
				ДанныеОперации.СтатусСмены, ДанныеОперации.РезультатXML);
		КонецЕсли;                      
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьТекущееСостояние") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
		
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет операцию с фискальным накопителем.
//
Процедура ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;
	КонецЕсли;
	
	Результат = Истина;
	Попытка
		Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ТипОперации, ДанныеОперации.ПараметрыXML);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОперацияФН") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Попытка
		ПараметрыККТ = "";
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьПараметрыККТ") + Символы.ПС + ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Если Результат Тогда  
		РезультатВыполнения.Результат = Истина;
		ДанныеОперации.Вставить("ПараметрыККТ", ПараметрыККТ);
	Иначе
		ОписаниеОшибки = "";
		ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Функция печать копию чека.
//
Процедура НапечататьКопиюЧека(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)

	Результат = Ложь;   
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'");
		Возврат;        
	КонецЕсли;
	
	Если ДанныеОперации.Свойство("Аппаратно") И ДанныеОперации.Аппаратно Тогда
		
		НомерЧека = "0";
		Если ДанныеОперации <> Неопределено И ДанныеОперации.Свойство("НомерЧека") Тогда
			НомерЧека = Строка(ДанныеОперации.НомерЧека);
		КонецЕсли;
	
		Попытка
			Результат = ОбъектДрайвера.НапечататьКопиюЧека(ПараметрыПодключения.ИДУстройства, НомерЧека);
			Если НЕ Результат Тогда
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Иначе
				// Заполнение выходных параметров.
				РезультатВыполнения.Вставить("НомерЧека", НомерЧека);
				РезультатВыполнения.Результат = Истина;
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.НапечататьКопиюЧека") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
		
	Иначе
		ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);                  
	КонецЕсли;
	
КонецПроцедуры

// Открыть сессию регистрации КМ.
//
Процедура ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Или РевизияИнтерфейса < 3004  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	Если НЕ ПустаяСтрока(ИдентификаторСессии) Тогда  
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Сессия проверки кодов маркировки уже открыта.'"); 
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.ОткрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если НЕ Результат Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Результат = Истина;
			ИдентификаторСессии = Строка(Новый УникальныйИдентификатор);
			РезультатВыполнения.Вставить("ИдентификаторСессии", ИдентификаторСессии);
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства, ИдентификаторСессии);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОткрытьСессиюРегистрацииКМ") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Закрыть сессию регистрации КМ.
//
Процедура ЗакрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ"  Или РевизияИнтерфейса < 3004  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		РезультатВыполнения.Результат = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.ЗакрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если НЕ Результат Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Результат = Истина;
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗакрытьСессиюРегистрацииКМ") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Запрос КМ.
//
Процедура ЗапросКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Или РевизияИнтерфейса < 3004  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	ТекущийСтатус = МенеджерОборудованияКлиент.ПроверкаКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
	ИдентификаторСессии  = ТекущийСтатус.ИдентификаторСессии;
	ИдентификаторЗапроса = ТекущийСтатус.ИдентификаторЗапроса;
	
	// Если нет открытой сессии - открываем автоматически. 
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		ВремРезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, ВремРезультатВыполнения);
		Если Не ВремРезультатВыполнения.Результат Тогда
			РезультатВыполнения = ВремРезультатВыполнения;
			Возврат;
		Иначе
			ИдентификаторСессии = ВремРезультатВыполнения.ИдентификаторСессии;
		КонецЕсли;
	КонецЕсли;
	
	// Если есть текущая проверка КМ 
	Если НЕ ПустаяСтрока(ИдентификаторЗапроса) Тогда
		Попытка
			ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ИдентификаторЗапроса, 0);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПодтвердитьКМ") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ИдентификаторЗапроса = ДанныеОперации.ИдентификаторЗапроса;
	РезультатОперацииXML = "";
	Попытка
		Результат = ОбъектДрайвера.ЗапросКМ(ПараметрыПодключения.ИДУстройства, ДанныеОперации.ПараметрыXML, РезультатОперацииXML);
		Если НЕ Результат Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Вставить("ИдентификаторСессии" , ИдентификаторСессии);
			РезультатВыполнения.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
			РезультатВыполнения.Вставить("ЗапросXML"   , ДанныеОперации.ПараметрыXML);
			РезультатВыполнения.Вставить("РезультатXML", РезультатОперацииXML);
			РезультатВыполнения.Результат = Истина;
			МенеджерОборудованияКлиент.УстановитьРезультатПроверкиКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства, 
				ИдентификаторСессии, ДанныеОперации, РезультатВыполнения, ИдентификаторЗапроса);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗапросКМ") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Подтвердить результаты запроса КМ.
//
Процедура ПодтвердитьКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Или РевизияИнтерфейса < 3004  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗапроса = ?(ДанныеОперации.Свойство("ИдентификаторЗапроса"), ДанныеОперации.ИдентификаторЗапроса, "");
	Выбытие = ?(ДанныеОперации.Свойство("Выбытие"), ДанныеОперации.Выбытие, Истина);
	
	Если ПустаяСтрока(ИдентификаторЗапроса) Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки =  НСтр("ru='Идентификатор запроса КМ не указан.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ИдентификаторЗапроса, ?(Выбытие, 0, 1) );
		Если НЕ Результат Тогда                             
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
			РезультатВыполнения.Результат = Истина;
			МенеджерОборудованияКлиент.УстановитьПроверкуКодаМаркировки(ПараметрыПодключения.ИдентификаторУстройства);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПодтвердитьКМ") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Получить результаты запроса КМ.
//
Процедура ПолучитьРезультатыЗапросаКМ(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Или РевизияИнтерфейса < 3004  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	СтатусЗапроса = 0;
	РезультатОперацииXML = "";
	Попытка
 		Результат = ОбъектДрайвера.ПолучитьРезультатыЗапросаКМ(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML, СтатусЗапроса);
		Если НЕ Результат Тогда                             
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			ДанныеОперации.Вставить("РезультатXML", РезультатОперацииXML);
			ДанныеОперации.Вставить("СтатусРезультатаКод", СтатусЗапроса);
			РезультатВыполнения.Результат = Истина;
		КонецЕсли;	
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьРезультатыЗапросаКМ") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЭквайринговыеТерминалы

// Процедура возвращает параметры терминале.
//
Процедура ПараметрыТерминала(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Ложь;
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			РезультатОперацииXML = "";
			Результат = ОбъектДрайвера.ПараметрыТерминала(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML);
			Если Результат Тогда
				ПараметрыТерминала = ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
				Если ПараметрыТерминала.Свойство("TerminalID") И Не ПустаяСтрока(ПараметрыТерминала.TerminalID) Тогда
					ПараметрыПодключения.ИдентификаторТерминала = ПараметрыТерминала.TerminalID;
				КонецЕсли; 
				ПараметрыПодключения.ПечатьКвитанцийНаТерминале = ПараметрыТерминала.Свойство("PrintSlipOnTerminal") И ВРег(ПараметрыТерминала.PrintSlipOnTerminal) = "TRUE"; 
				ПараметрыПодключения.КороткиеСлипЧеки = ПараметрыТерминала.Свойство("ShortSlip") И ВРег(ПараметрыТерминала.ShortSlip) = "TRUE"; 
				ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств = ПараметрыТерминала.Свойство("CashWithdrawal") И ВРег(ПараметрыТерминала.CashWithdrawal) = "TRUE"; 
				ПараметрыПодключения.ОплатаЭлектроннымиСертификатами = ПараметрыТерминала.Свойство("ElectronicCertificates") И ВРег(ПараметрыТерминала.ElectronicCertificates) = "TRUE"; 
				ПараметрыПодключения.ЧастичнаяОтмена = ПараметрыТерминала.Свойство("PartialCancellation") И ВРег(ПараметрыТерминала.PartialCancellation) = "TRUE";
				ПараметрыПодключения.ConsumerPresentedQR = ПараметрыТерминала.Свойство("ConsumerPresentedQR") И ВРег(ПараметрыТерминала.ConsumerPresentedQR) = "TRUE";
				ПараметрыПодключения.СписокОперацийПоКартам = ПараметрыТерминала.Свойство(" ListCardTransactions") И ВРег(ПараметрыТерминала.ListCardTransactions) = "TRUE";
				ПараметрыПодключения.ВозвратЭСБезКартыПоBasketID = ПараметрыТерминала.Свойство(" ReturnElectronicCertificateByBasketID") И ВРег(ПараметрыТерминала.ReturnElectronicCertificateByBasketID) = "TRUE";
				РезультатВыполнения.Результат = Истина;    
			КонецЕсли         
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПараметрыТерминала") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		Попытка
			Результат = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
			ПараметрыПодключения.ПечатьКвитанцийНаТерминале = Результат;
			РезультатВыполнения.Результат = Истина;
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПечатьКвитанцийНаТерминале") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

// Процедура выполняет получение параметров карты.
//
Процедура ПараметрыКарты(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Ложь;
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
	Если РевизияИнтерфейса > 3004 Тогда
		ОтПоследнейОперации = Ложь;
		НомерКарты = "";
		ХешНомерКарты = "";
		СсылкаНаПлатежныйСчет = "";
		ТипКарты  = "";
		СвояКарта = 0;
		Попытка              
			Если РевизияИнтерфейса >= 4000 Тогда    
				РеквизитыКартыQR = ?(ДанныеОперации.Свойство("РеквизитыКартыQR"), ДанныеОперации.РеквизитыКартыQR, "");   
				Если Не ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
					ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					РезультатВыполнения.Результат = Ложь;
					Возврат;   
				КонецЕсли;
				Результат = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, РеквизитыКартыQR, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, СсылкаНаПлатежныйСчет, ТипКарты, СвояКарта);
			ИначеЕсли РевизияИнтерфейса >= 3007 Тогда
				Результат = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, СсылкаНаПлатежныйСчет, ТипКарты, СвояКарта);
			Иначе
				Результат = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства, ОтПоследнейОперации, НомерКарты, ХешНомерКарты, ТипКарты, СвояКарта);
			КонецЕсли;
			Если Результат Тогда
				РезультатВыполнения.Вставить("НомерКарты"   , НомерКарты);
				РезультатВыполнения.Вставить("ХешНомерКарты", ХешНомерКарты);
				РезультатВыполнения.Вставить("СсылкаНаПлатежныйСчет", СсылкаНаПлатежныйСчет);
				РезультатВыполнения.Вставить("ТипКарты"     , ТипКарты);
				РезультатВыполнения.Вставить("СвояКарта"    , СвояКарта);
				РезультатВыполнения.Результат = Истина;
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьПараметрыКарты") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
	КонецЕсли
	
КонецПроцедуры

// Процедура осуществляет операцию на ЭТ.
//
Процедура ВыполнитьЭквайринговуюОперацию(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	РеквизитыКартыQR = ?(ДанныеОперации.РеквизитыКартыQR <> Неопределено, ДанныеОперации.РеквизитыКартыQR, "");
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	СуммаОперации  = ?(ДанныеОперации.СуммаОперации <> Неопределено, ДанныеОперации.СуммаОперации, 0);
	СуммаНаличных  = ?(ДанныеОперации.СуммаНаличных <> Неопределено, ДанныеОперации.СуммаНаличных, 0);     
	СуммаОригинальнойОперации = ?(ДанныеОперации.СуммаОригинальнойОперации <> Неопределено, ДанныеОперации.СуммаОригинальнойОперации, 0);
	ТекстСлипЧека  = "";
	
	Если НЕ (СуммаОперации > 0) Тогда
		ОписаниеОшибки = НСтр("ru='Не корректная сумма операции.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если считывание карты будет производиться на терминале, то в параметре номера считанной карты передается пустая строка.
	Если Команда = "AuthorizeRefund" Тогда  
		НомерКарты = "";
	КонецЕсли;
	
	Попытка                         
		Если РевизияИнтерфейса >= 4000 Тогда
			Если Команда = "AuthorizeSales" Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoid" Тогда                                                                                                       
				Если СуммаОригинальнойОперации > 0 И НЕ ПараметрыПодключения.ЧастичнаяОтмена Тогда
					ОписаниеОшибки = НСтр("ru='Частичная отмена не поддерживается драйвером.'");
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					РезультатВыполнения.Результат = Ложь;
					Возврат;
				Иначе
					Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации,
						СуммаОригинальнойОперации, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);        
				КонецЕсли;
			ИначеЕсли Команда = "PayByPaymentCardWithCashWithdrawal" Тогда
				Если ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств Тогда
					Результат = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
						СуммаНаличных, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
				Иначе
					ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					РезультатВыполнения.Результат = Ложь;
					Возврат;
				КонецЕсли;
			Иначе               
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;          
		ИначеЕсли РевизияИнтерфейса >= 3005 Тогда
			Если Команда = "AuthorizeSales" Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoid" Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли РевизияИнтерфейса >= 3006 И Команда = "PayByPaymentCardWithCashWithdrawal" Тогда
				Если ПараметрыПодключения.ВыдачиНаличныхДенежныхСредств Тогда
					Результат = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
						СуммаНаличных, НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
				Иначе
					ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'");
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
					РезультатВыполнения.Результат = Ложь;
					Возврат;
				КонецЕсли;
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			Если Команда = "AuthorizeSales" Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeRefund" Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoid" Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Если Результат Тогда
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("СуммаОперации" , СуммаОперации);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
		
	Исключение                                       
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Команда); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет операцию на ЭТ c электронным сертификатом.
//
Процедура ВыполнитьЭквайринговуюОперациюСЭлектроннымСертификатом(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 3005 Тогда
		ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	РеквизитыКартыQR = ?(ДанныеОперации.РеквизитыКартыQR <> Неопределено, ДанныеОперации.РеквизитыКартыQR, "");
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	ИдентификаторКорзины = ?(ДанныеОперации.ИдентификаторКорзины <> Неопределено, ДанныеОперации.ИдентификаторКорзины, "");  
	ИдентификаторКорзиныОперацииОплаты  = ?(ДанныеОперации.ИдентификаторКорзиныОперацииОплаты <> Неопределено, ДанныеОперации.ИдентификаторКорзиныОперацииОплаты, ""); 
	СуммаЭлектронногоСертификата = ?(ДанныеОперации.СуммаЭлектронногоСертификата <> Неопределено, ДанныеОперации.СуммаЭлектронногоСертификата, 0);
	СуммаСобственныхСредств = ?(ДанныеОперации.СуммаСобственныхСредств <> Неопределено, ДанныеОперации.СуммаСобственныхСредств, 0);
	ТекстСлипЧека  = "";
	СтатусОперации = 0;
	
	Если НЕ ПараметрыПодключения.ОплатаЭлектроннымиСертификатами Тогда
		ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'"); 
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторКорзины) Или СуммаЭлектронногоСертификата = 0 Тогда  
		ОписаниеОшибки = НСтр("ru='Неверные параметры в операции.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса >= 4000 Тогда
			Если Команда = "PayElectronicCertificate" Тогда
				Результат = ОбъектДрайвера.ОплатитьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
			ИначеЕсли Команда = "ReturnElectronicCertificate" Тогда    
				// Терминал поддерживает операцию возврата ЭС без карты по BasketID оригинальной операции оплаты.
				Если ПараметрыПодключения.ВозвратЭСБезКартыПоBasketID И Не ПустаяСтрока(ИдентификаторКорзиныОперацииОплаты) Тогда
					ДоступноВозвратыБезКарты = МенеджерОборудованияКлиентПовтИсп.ДоступноВозвратыБезКарты();  
					Если ДоступноВозвратыБезКарты.ВозвратЭлектроннымСертификатом Тогда
						ИдентификаторКорзины = ИдентификаторКорзиныОперацииОплаты;
					КонецЕсли;
				КонецЕсли;
				Результат = ОбъектДрайвера.ВернутьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
			Иначе           
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			Если Команда = "PayElectronicCertificate" Тогда
				Результат = ОбъектДрайвера.ОплатитьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
			ИначеЕсли Команда = "ReturnElectronicCertificate" Тогда
				Результат = ОбъектДрайвера.ВернутьЭлектроннымСертификатом(ПараметрыПодключения.ИДУстройства, НомерМерчанта, ИдентификаторКорзины, 
					СуммаЭлектронногоСертификата, СуммаСобственныхСредств, НомерКарты, НомерЧека, 
					СсылочныйНомер, КодАвторизации, СтатусОперации, ТекстСлипЧека);
			Иначе
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат Тогда
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
			РезультатВыполнения.Вставить("СтатусОперации", СтатусОперации);
			РезультатВыполнения.Вставить("ИдентификаторКорзины", ИдентификаторКорзины);
			РезультатВыполнения.Вставить("СуммаЭлектронногоСертификата", СуммаЭлектронногоСертификата);
			РезультатВыполнения.Вставить("СуммаСобственныхСредств", СуммаСобственныхСредств);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение                
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Команда); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет аварийную отмену операции по карте.
//
Процедура АварийнаяОтменаОперации(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "АварийнаяОтменаОперации"); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет сверку итогов по картам.
//
Процедура ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ТекстСлипЧека  = "";
	Попытка
		Результат = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, ТекстСлипЧека);
		Если Результат Тогда
			РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение          
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "ИтогиДняПоКартам"); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

// Процедура возвращает операции по картам.
//
Процедура ОперацииПоКартам(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 4000 Тогда    
		ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Возврат;
	Иначе               
		Если НЕ ПараметрыПодключения.СписокОперацийПоКартам Тогда
			ОписаниеОшибки = НСтр("ru='Терминал не поддерживает данную операцию.'"); 
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли;
		Попытка                                                                                                                    
			РезультатОперацииXML = "";
			Результат = ОбъектДрайвера.ПолучитьОперацииПоКартам(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML);  
			Если Результат Тогда
				РезультатВыполнения.Вставить("РезультатОперацииXML", РезультатОперацииXML);       
				РезультатВыполнения.Результат = Истина;
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			КонецЕсли;
		Исключение     
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "ПолучитьОперацииПоКартам"); 
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет операцию преавторизации на ЭТ.
//
Процедура ВыполнитьЭквайринговуюОперациюПреавторизации(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения, Команда)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	РеквизитыКартыQR = ?(ДанныеОперации.РеквизитыКартыQR <> Неопределено, ДанныеОперации.РеквизитыКартыQR, "");
	НомерМерчанта  = ?(ДанныеОперации.НомерМерчанта <> Неопределено, ДанныеОперации.НомерМерчанта, 0);
	НомерКарты     = ?(ДанныеОперации.НомерКарты <> Неопределено, ДанныеОперации.НомерКарты, "");
	НомерЧека      = ?(ДанныеОперации.НомерЧека <> Неопределено, ДанныеОперации.НомерЧека, "");
	СсылочныйНомер = ?(ДанныеОперации.СсылочныйНомер <> Неопределено, ДанныеОперации.СсылочныйНомер, "");
	КодАвторизации = ?(ДанныеОперации.КодАвторизации <> Неопределено, ДанныеОперации.КодАвторизации, "");
	СуммаОперации  = ?(ДанныеОперации.СуммаОперации <> Неопределено, ДанныеОперации.СуммаОперации, 0);
	ТекстСлипЧека  = "";
	
	Если НЕ (СуммаОперации > 0) Тогда
		ОписаниеОшибки = НСтр("ru='Не корректная сумма операции.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ОписаниеОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		РезультатВыполнения.Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка                         
		Если РевизияИнтерфейса >= 4000 Тогда    
			Если Команда = "AuthorizePreSales" Тогда
				Результат = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoidPreSales" Тогда
				Результат = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeCompletion" Тогда
				Результат = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			Иначе               
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;     
		ИначеЕсли РевизияИнтерфейса >= 3005 Тогда
			Если Команда = "AuthorizePreSales" Тогда
				Результат = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeVoidPreSales" Тогда
				Результат = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли Команда = "AuthorizeCompletion" Тогда
				Результат = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, СсылочныйНомер, КодАвторизации, ТекстСлипЧека);
			Иначе               
				ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
				РезультатВыполнения.Результат = Ложь;
				Возврат;
			КонецЕсли;                
		Иначе
			ОписаниеОшибки = НСтр("ru='Команда не поддерживается драйвером.'");
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			РезультатВыполнения.Результат = Ложь;
			Возврат;
		КонецЕсли;
			
		Если Результат Тогда          
			РезультатВыполнения.Вставить("НомерМерчанта" , НомерМерчанта);
			РезультатВыполнения.Вставить("НомерКарты"    , НомерКарты);
			РезультатВыполнения.Вставить("НомерЧекаЭТ"   , НомерЧека);
			РезультатВыполнения.Вставить("СсылочныйНомер", СсылочныйНомер);
			РезультатВыполнения.Вставить("КодАвторизации", КодАвторизации);
			РезультатВыполнения.Вставить("СуммаОперации" , СуммаОперации);
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
		РезультатВыполнения.Вставить("ТекстСлипЧека" , ТекстСлипЧека);
		
	Исключение                                       
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = НСтр("ru='Ошибка вызова метода <%1>.'") + Символы.ПС + ОписаниеОшибки;
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Команда); 
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

// Процедура осуществляет вывод списка строк на дисплей покупателя.
//
Процедура ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтрокиТекста = ?(ДанныеОперации.Свойство("СтрокиТекста"), ДанныеОперации.СтрокиТекста, НСтр("ru='Данные для вывода не указаны'"));
	Попытка
		Результат = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокиТекста);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ВывестиСтрокуНаДисплейПокупателя") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет вывод QR кода на дисплей покупателя.
//
Процедура ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ЗначениеQRКода = ?(ДанныеОперации.Свойство("ЗначениеQRКода"), ДанныеОперации.ЗначениеQRКода, "");
	КартинкаQRКода = ?(ДанныеОперации.Свойство("КартинкаQRКода"), ДанныеОперации.КартинкаQRКода, "");   
	СтрокиТекста = ?(ДанныеОперации.Свойство("СтрокиТекста"), ДанныеОперации.СтрокиТекста, "");
	
	Если Не ПустаяСтрока(СтрокиТекста) Тогда    
		Попытка
			Результат = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокиТекста);
			Если Результат Тогда
				РезультатВыполнения.Результат = Истина;
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
				РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки;
				Возврат;
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Попытка                                                                                    
		Результат = ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, ЗначениеQRКода, КартинкаQRКода);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет вывод Статуса на дисплей покупателя.
//                 
Процедура ВывестиСтатусНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.РевизияИнтерфейса < 3009  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	СтатусОперации  = ?(ДанныеОперации.Свойство("СтатусОперации"), ДанныеОперации.СтатусОперации, 0);
	Попытка                                                                                    
		Результат = ОбъектДрайвера.ОтобразитьСтатусОперации(ПараметрыПодключения.ИДУстройства, СтатусОперации);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОтобразитьСтатусОперации") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет очистку дисплея покупателя.
//
Процедура ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОчиститьДисплейПокупателя") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет вывод HTML на дисплей покупателя.
//
Процедура ВывестиHTMLНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ТекстHTML = ?(ДанныеОперации.Свойство("ТекстHTML"), ДанныеОперации.ТекстHTML, "");  
	
	Попытка
		Результат = ОбъектДрайвера.ВывестиHTML(ПараметрыПодключения.ИДУстройства, ТекстHTML);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение     
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ВывестиHTML") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;  
	
КонецПроцедуры            

// Процедура осуществляет вывод информации на дисплей покупателя.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.ДисплейОтображаетHTML Тогда
		ВывестиHTMLНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
	Иначе
		
		Если ПараметрыПодключения.ДисплейОтображаетТекст Тогда      
			ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		КонецЕсли;
		
		Если ПараметрыПодключения.ДисплейОтображаетQRКод Тогда
			ВывестиQRКодНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
		КонецЕсли;
		
		Если ПараметрыПодключения.ДисплейОтображаетСтатус Тогда       
			СтатусОперации  = ?(ДанныеОперации.Свойство("СтатусОперации"), ДанныеОперации.СтатусОперации, 0);
			Если СтатусОперации = 1 Или СтатусОперации = 2 Тогда
				ВывестиСтатусНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры 

// Процедура возвращает параметры вывода на дисплей покупателя.
//
Процедура ПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Если ПараметрыПодключения.РевизияИнтерфейса >= 3004 Тогда
		Попытка
			РезультатОперацииXML = "";
			Результат = ОбъектДрайвера.ПолучитьПараметрыДисплеяПокупателя(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML);
			Если Результат Тогда
				ПараметрыТерминала = ПрочитатьКорневойЭлементXML(РезультатОперацииXML);
				Если ПараметрыТерминала.Свойство("Columns") И Не ПустаяСтрока(ПараметрыТерминала.Columns) Тогда
					ПараметрыПодключения.СтолбцовНаДисплее = Число(ПараметрыТерминала.Columns);
				КонецЕсли; 
				Если ПараметрыТерминала.Свойство("Rows") И Не ПустаяСтрока(ПараметрыТерминала.Rows) Тогда
					ПараметрыПодключения.СтрокНаДисплее = Число(ПараметрыТерминала.Rows);
				КонецЕсли; 
				ПараметрыПодключения.ДисплейОтображаетТекст   = ПараметрыТерминала.Свойство("DisplayText") И ВРег(ПараметрыТерминала.DisplayText) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетГрафику = ПараметрыТерминала.Свойство("DisplayGraphics") И ВРег(ПараметрыТерминала.DisplayGraphics) = "TRUE"; 
				// АПК:216-выкл соответствует требованиям к разработке драйверов подключаемого оборудования. Версия 3.5 
				ПараметрыПодключения.ДисплейОтображаетQRКод   = 
					(ПараметрыТерминала.Свойство("DisplayQRСode") И ВРег(ПараметрыТерминала.DisplayQRСode) = "TRUE")
					ИЛИ (ПараметрыТерминала.Свойство("DisplayQRCode") И ВРег(ПараметрыТерминала.DisplayQRCode) = "TRUE"); 
				// АПК:216-вкл           
				ПараметрыПодключения.ДисплейОтображаетHTML    = ПараметрыТерминала.Свойство("DisplayHTML") И ВРег(ПараметрыТерминала.DisplayHTML) = "TRUE"; 
				ПараметрыПодключения.ДисплейОтображаетСтатус  = ПараметрыТерминала.Свойство("DisplayStatus") И ВРег(ПараметрыТерминала.DisplayStatus) = "TRUE"; 
		
				РезультатВыполнения.Результат = Истина;
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", ПараметрыПодключения.СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , ПараметрыПодключения.СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , ПараметрыПодключения.ДисплейОтображаетТекст);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", ПараметрыПодключения.ДисплейОтображаетГрафику);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , ПараметрыПодключения.ДисплейОтображаетQRКод); 
				РезультатВыполнения.Вставить("ДисплейОтображаетHTML"   , ПараметрыПодключения.ДисплейОтображаетHTML);    
				РезультатВыполнения.Вставить("ДисплейОтображаетСтатус" , ПараметрыПодключения.ДисплейОтображаетСтатус);  
			КонецЕсли         
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ПолучитьПараметрыДисплеяПокупателя") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	Иначе
		СтолбцовНаДисплее = 20; 
		СтрокНаДисплее    = 2;
		Попытка
			Результат = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
			Если Результат Тогда
				ПараметрыПодключения.СтолбцовНаДисплее = СтолбцовНаДисплее;
				ПараметрыПодключения.СтрокНаДисплее    = СтрокНаДисплее;
				РезультатВыполнения.Результат = Истина;
				РезультатВыполнения.Вставить("СтолбцовНаДисплее", СтолбцовНаДисплее);
				РезультатВыполнения.Вставить("СтрокНаДисплее"   , СтрокНаДисплее);
				РезультатВыполнения.Вставить("ДисплейОтображаетТекст"  , Истина);
				РезультатВыполнения.Вставить("ДисплейОтображаетГрафику", Ложь);
				РезультатВыполнения.Вставить("ДисплейОтображаетQRКод"  , Ложь); 
				РезультатВыполнения.Вставить("ДисплейОтображаетHTML"   , Ложь);     
				РезультатВыполнения.Вставить("ДисплейОтображаетСтатус" , Ложь);    
			Иначе
				ОписаниеОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
				РезультатВыполнения.Результат = Ложь;
					РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			КонецЕсли;
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ПолучитьПараметрыВывода") + Символы.ПС + ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеВесы

// Процедура осуществляет получение веса груза, расположенного на весах.
//
Процедура ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Вес = 0;
	Попытка
		Результат = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если Результат Тогда                    
			Вес = Число(Вес);
			Если Вес < 0 Тогда
				Вес  = 0;  
			КонецЕсли;
			РезультатВыполнения.Результат = Истина;
			РезультатВыполнения.Вставить("Вес", Вес);
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьВес") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет установку веса тары на весах.
//
Процедура Тарировать(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	ВесТары = ?(ДанныеОперации.Свойство("ВесТары"), ДанныеОперации.ВесТары, 0);
	Попытка
		Результат = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.УстановитьВесТары") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет выгрузку товаров в весы с печатью этикеток.
//
Процедура ВыгрузитьТовары(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			Результат = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВыгрузитьТовары") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет очистку базы товаров в весах с печатью этикеток.
//
Процедура ОчиститьТоварыВВесах(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОчиститьТовары") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Выгрузить изображения товаров в весы печатью этикеток.
//
Процедура ВыгрузитьИзображенияТоваров(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если РевизияИнтерфейса < 3009  Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		Возврат;
	КонецЕсли;
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			Результат = ОбъектДрайвера.ВыгрузитьИзображенияТоваров(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВыгрузитьИзображенияТоваров") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТерминалыСбораДанных

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Процедура ОчиститьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОчиститьТаблицу") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Процедура ЗагрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)

	Результат = Истина;
	ДанныеЗагрузки = "";
	
	Попытка
		Результат = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
			ДанныеОперации.Вставить("ДанныеЗагрузки", ДанныеЗагрузки);
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗагрузитьТаблицу") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Процедура ВыгрузитьТаблицу(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	СтатусПакета = "first";
	
	КоличествоПакетов = ДанныеОперации.ПакетыXML.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ДанныеОперации.ПакетыXML  Цикл
		
		Попытка
			Результат = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ВыгрузитьТаблицу") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли; 
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПринтерыЭтикеток

Процедура ИнициализацияПринтера(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	Попытка
		Результат = ОбъектДрайвера.ИнициализацияПринтера(ПараметрыПодключения.ИДУстройства);
		Если Результат Тогда
			РезультатВыполнения.Результат = Истина;
		Иначе
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ИнициализацияПринтера") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	ПакетыДляВыгрузки = ДанныеОперации.ПакетыДляВыгрузки;
	КоличествоПакетов = ПакетыДляВыгрузки.Количество() - 1;
	
	СтатусПакета  = "first";
	
	Для Счетчик = 0 По КоличествоПакетов Цикл
		Если (Счетчик = КоличествоПакетов) Тогда
			СтатусПакета = "last";
		ИначеЕсли (Счетчик > 1) Тогда
			СтатусПакета = "regular";
		КонецЕсли;
		
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[Счетчик];
		Попытка
			Ответ = ОбъектДрайвера.ПечатьЭтикеток(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Исключение
			РезультатВыполнения.Результат = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПечатьЭтикеток") + Символы.ПС + ОписаниеОшибки;
			Возврат;
		КонецПопытки;
		
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляRFIDСчитывателей

// Функция получения данные меток RFID считывателя.
//
Процедура ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения) 
	
	РезультатВыполнения.Результат = Истина;
	
	ТаблицаМеток = "";
	ИДПакета = ДанныеОперации.ИДПакета;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьДанныеМетокRFID(ПараметрыПодключения.ИДУстройства, ИДПакета, ТаблицаМеток);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		Иначе
			РезультатВыполнения.Вставить("ТаблицаМеток", ТаблицаМеток);
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ПолучитьДанныеМетокRFID") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция открывает сессию RFID считывателя.
//
Процедура ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ОткрытьСессиюRFID") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция закрывает сессию RFID считывателя.
//
Процедура ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	РезультатВыполнения.Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗакрытьСессиюRFID") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Функция записывает данные в метку RFID.
//
Процедура ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ДанныеОперации, РезультатВыполнения)
	
	// АПК: 1353-выкл TID, EPC - аббревиатура
	РезультатВыполнения.Результат = Истина;
	Таймаут = ДанныеОперации.Таймаут;
	TID = ДанныеОперации.TID;
	EPC = ДанныеОперации.EPC;
	Данные = ДанныеОперации.Данные;
	БанкПамяти = ?(ДанныеОперации.БанкПамяти = "EPC", 1, 2);
	
	Попытка
		Ответ = ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ИДУстройства, TID, EPC, Данные, БанкПамяти, Таймаут);
		Если НЕ Ответ Тогда
			ОписаниеОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
		КонецЕсли;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(НСтр("ru='Ошибка вызова метода <%1>.'"), "ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	// АПК: 1353-вкл
	
КонецПроцедуры

#КонецОбласти

// Функция читает корневой элемент XML.
//
// Параметры:
//  СтрокаXML - Строка - XML строка.
//
// Возвращаемое значение:
//  Структура:
//   * ЭлементXML - Строка.
//
Функция ПрочитатьКорневойЭлементXML(СтрокаXML) 
	
#Если ВебКлиент Тогда            
	Результат = МенеджерОборудованияВызовСервера.ПрочитатьКорневойЭлементXML(СтрокаXML);
#Иначе
	// ЧтениеXML работает везде, кроме веб
	Результат = МенеджерОборудованияКлиент.ПрочитатьКорневойЭлементXML(СтрокаXML);
#КонецЕсли
	Возврат Результат;  
	
КонецФункции

#КонецОбласти