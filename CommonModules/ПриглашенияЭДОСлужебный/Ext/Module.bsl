
#Область СлужебныеПроцедурыИФункции

#Область ОперацииСПриглашениями

Функция ОтправитьПриглашения(Приглашения, КлючиСинхронизации, КонтекстДиагностики = Неопределено) Экспорт
	
	КоличествоОтправлено = 0;
	
	КонтекстДиагностики = Неопределено;
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	ПриглашенияДляОбновления = Новый Массив;
	ОтправляемыеПриглашения = СервисЭДО.НоваяТаблицаПриглашений();
	
	МассивПолучателей = Новый Массив;
	МассивИдентификаторовОрганизации = Новый Массив;
	
	СоответствияПриглашений = Новый ТаблицаЗначений();
	СоответствияПриглашений.Колонки.Добавить("КлючПриглашения");
	СоответствияПриглашений.Колонки.Добавить("ИдентификаторОрганизации");
	СоответствияПриглашений.Колонки.Добавить("Приглашение");
	
	Для Каждого Приглашение Из Приглашения Цикл
		ИскомоеПриглашение = СоответствияПриглашений.Найти(Приглашение.КлючПриглашения, "КлючПриглашения");
		Если ИскомоеПриглашение = Неопределено Тогда
			СоответствиеПриглашений = СоответствияПриглашений.Добавить();
			СоответствиеПриглашений.КлючПриглашения = Приглашение.КлючПриглашения;
			СоответствиеПриглашений.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
			СоответствиеПриглашений.Приглашение = Приглашение;
		КонецЕсли;
		МассивПолучателей.Добавить(Приглашение.Контрагент);
		МассивИдентификаторовОрганизации.Добавить(Приглашение.ИдентификаторОрганизации);
	КонецЦикла;
	
	ЗапросКонтрагентов = ИнтеграцияЭДО.ЗапросКонтрагентов("Контрагенты", "МассивПолучателей");
	ЗапросОрганизацийПолучателей = ИнтеграцияЭДО.ЗапросОрганизацийПолучателей("Организации", "МассивПолучателей");
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&МассивИдентификаторовЭДО";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросКонтрагентов); 
	Запросы.Добавить(ЗапросОрганизацийПолучателей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Наименование КАК Наименование
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.Наименование
		|ИЗ
		|	Организации КАК Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.ИмяФайлаСоглашенияНаРоуминг КАК ИмяФайлаСоглашенияНаРоуминг,
		|	УчетныеЗаписиЭДО.ДанныеСоглашенияНаРоуминг КАК ДанныеСоглашенияНаРоуминг
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);
	ИтоговыйЗапрос.УстановитьПараметр("МассивИдентификаторовЭДО", МассивИдентификаторовОрганизации);
	
	РезультатыЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	
	ЗначениеРеквизитовПоПолучателям = Новый Соответствие;
	
	ВыборкаПолучателей = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаПолучателей.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("ИНН");
		ЗначенияРеквизитов.Вставить("КПП");
		ЗначенияРеквизитов.Вставить("Наименование");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, ВыборкаПолучателей);
		ЗначениеРеквизитовПоПолучателям.Вставить(ВыборкаПолучателей.Ссылка, ЗначенияРеквизитов);
	КонецЦикла;
	
	ЗначенияРеквизитовПоУчетнымЗаписям = Новый Соответствие;
	Реквизиты = "ИмяФайлаСоглашенияНаРоуминг,ДанныеСоглашенияНаРоуминг";
	
	ВыборкаУчетныхЗаписей = РезультатыЗапроса[4].Выбрать();
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура(Реквизиты);
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, ВыборкаУчетныхЗаписей);
		Если ЗначениеЗаполнено(ВыборкаУчетныхЗаписей.ИмяФайлаСоглашенияНаРоуминг) Тогда
			ЗначенияРеквизитов.ДанныеСоглашенияНаРоуминг = Base64Строка(ВыборкаУчетныхЗаписей.ДанныеСоглашенияНаРоуминг.Получить());
		КонецЕсли;
		ЗначенияРеквизитовПоУчетнымЗаписям.Вставить(ВыборкаУчетныхЗаписей.ИдентификаторЭДО, ЗначенияРеквизитов);
	КонецЦикла;
	
	ТипПриглашенияШироковещательное = Перечисления.ТипыПриглашений.Широковещательное;
	ТипПриглашенияЗаявкаНаРоуминг = Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг;
	
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		
		КлючСинхронизации = КлючИЗначение.Значение;
		ОтправляемыеПриглашения.Очистить();
		
		ДанныеУчетнойЗаписи = ЗначенияРеквизитовПоУчетнымЗаписям.Получить(КлючСинхронизации.ИдентификаторУчетнойЗаписи);
		
		ПриглашенияНаИдентификаторОрганизации = СоответствияПриглашений.НайтиСтроки(
			Новый Структура("ИдентификаторОрганизации", КлючСинхронизации.ИдентификаторУчетнойЗаписи)); 
		Если ПриглашенияНаИдентификаторОрганизации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПриглашенияНаИдОрганизации Из ПриглашенияНаИдентификаторОрганизации Цикл
			Приглашение = СтрокаПриглашенияНаИдОрганизации.Приглашение;
			
			ПараметрыПолучателя = ЗначениеРеквизитовПоПолучателям.Получить(Приглашение.Контрагент);
			Если ЗначениеЗаполнено(Приглашение.ПолучательИНН) Тогда
				ПараметрыПолучателя["ИНН"] = Приглашение.ПолучательИНН;
			КонецЕсли;
			Если ЗначениеЗаполнено(Приглашение.ПолучательКПП) Тогда
				ПараметрыПолучателя["КПП"] = Приглашение.ПолучательКПП;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПараметрыПолучателя["ИНН"]) Тогда
				ТекстСообщения = НСтр("ru = 'У получателя ''%1'' не указан ИНН'");
				ШаблонСообщения = СтрШаблон(ТекстСообщения, Приглашение.Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения);
				Продолжить;
			КонецЕсли;
			
			ПриглашенияДляОбновления.Добавить(Приглашение);
			
			НоваяСтрока = ОтправляемыеПриглашения.Добавить();
			НоваяСтрока.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
			
			Если Приглашение.Тип = Перечисления.ТипыПриглашений.НаИдентификатор Тогда
				НоваяСтрока.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
			ИначеЕсли Приглашение.Тип = Перечисления.ТипыПриглашений.Широковещательное Тогда
				НоваяСтрока.АдресЭП = Приглашение.EmailКонтрагента;
			ИначеЕсли Приглашение.Тип = Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг Тогда
				НоваяСтрока.ОператорЭДО = Приглашение.ОператорЭДО;
			КонецЕсли;

			НоваяСтрока.Получатель = Приглашение.Контрагент;
			НоваяСтрока.Наименование = ПараметрыПолучателя["Наименование"];
			НоваяСтрока.ИНН = ПараметрыПолучателя["ИНН"];
			Если СтрДлина(НоваяСтрока.ИНН) <> 12 Тогда
				НоваяСтрока.КПП = ПараметрыПолучателя["КПП"];
			КонецЕсли;
			НоваяСтрока.EmailОрганизации = Приглашение.EmailОрганизации;
			
			// В случае отправки широковещательного приглашения внешний код (он же ExternalContactId в запросе к сервису)
			//	не заполняется, т.к. в ответах на это широковещательное приглашение будет один и тот же ExternalContactId и идентификатор организации.
			Если Приглашение.Тип <> ТипПриглашенияШироковещательное Тогда
				НоваяСтрока.ВнешнийКод = Приглашение.КлючПриглашения;
			КонецЕсли;
			
			НоваяСтрока.ТекстПриглашения = ?(ЗначениеЗаполнено(Приглашение.ТекстПриглашения),
				Приглашение.ТекстПриглашения, СтандартныйШаблонПриглашения());

			ТребуетсяСоглашение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Приглашение, "ТребуетсяСоглашение", Ложь);
			Если ТребуетсяСоглашение И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИмяФайлаСоглашенияНаРоуминг) Тогда
				НоваяСтрока.ИмяФайлаСкана = ДанныеУчетнойЗаписи.ИмяФайлаСоглашенияНаРоуминг;
				НоваяСтрока.ДанныеФайлаСкана = ДанныеУчетнойЗаписи.ДанныеСоглашенияНаРоуминг;
			КонецЕсли;

			НоваяСтрока.СоздаватьНастройкиЭДО = Приглашение.СоздаватьНастройкиЭДО;
		КонецЦикла;
		
		Если ОтправляемыеПриглашения.Количество() > 0 Тогда
			
			Результат = СервисЭДО.ОтправитьПриглашения(ОтправляемыеПриглашения, КлючСинхронизации, КонтекстДиагностики);
			Если Результат Тогда
				Для Каждого Приглашение Из ПриглашенияДляОбновления Цикл
					Если Приглашение.Тип = ТипПриглашенияЗаявкаНаРоуминг Тогда
						НовыйСтатус = Перечисления.СтатусыПриглашений.НастройкаРоуминга;
					Иначе
						НовыйСтатус = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
					КонецЕсли;
					ОбновитьПриглашение(Приглашение, НовыйСтатус);
				КонецЦикла;
		
				ОтправленоПриглашений = ОтправляемыеПриглашения.Количество();
				КоличествоОтправлено = КоличествоОтправлено + ОтправленоПриглашений;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоОтправленных", КоличествоОтправлено);
	СтруктураВозврата.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПринятьОтклонитьПриглашения(Приглашения, КлючиСинхронизации, Принять, ОбновлятьСтатусы = Истина) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КоличествоОбработанныхПриглашений = 0;
	
	Если Принять Тогда
		СоздатьКонтрагентовДляПриглашений(Приглашения, КонтекстДиагностики);		
	КонецЕсли;
	
	Для Каждого Приглашение Из Приглашения Цикл
		Если Принять И Не Приглашение.ГотовоКПринятию Тогда
			Продолжить;
		КонецЕсли;
	
		КлючСинхронизацииПриглашения = КлючиСинхронизации[Приглашение.ИдентификаторОрганизации];
		Если КлючСинхронизацииПриглашения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОтклоненияБезОтправкиОператору = Неопределено;

		Если Не Принять Тогда
			РезультатОтклонения = ОтклонитьПриглашениеБезОтправкиОператоруЭДО(Приглашение.КлючПриглашения,
				Приглашение.ИдентификаторОрганизации, Приглашение.ИдентификаторКонтрагента);
			Если РезультатОтклонения.Статус = "Выполнено" Тогда
				РезультатОтклоненияБезОтправкиОператору = Истина;
			ИначеЕсли РезультатОтклонения.Статус = "Ошибка" Тогда
				РезультатОтклоненияБезОтправкиОператору = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РезультатОтклоненияБезОтправкиОператору = Неопределено Тогда
			РезультатПринятияОтклонения = ПринятьОтклонитьПриглашение(Приглашение, КлючСинхронизацииПриглашения, Принять,
				КонтекстДиагностики, Истина);
			Если РезультатПринятияОтклонения Тогда
				КоличествоОбработанныхПриглашений = КоличествоОбработанныхПриглашений + 1;
				НовыйСтатус = ?(Принять, ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято"),
					ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено"));
				ОбновитьПриглашение(Приглашение, НовыйСтатус);
			КонецЕсли;
		ИначеЕсли РезультатОтклоненияБезОтправкиОператору Тогда
			КоличествоОбработанныхПриглашений = КоличествоОбработанныхПриглашений + 1;
		КонецЕсли;
	КонецЦикла;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоОбработанных", КоличествоОбработанныхПриглашений);
	СтруктураВозврата.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПринятьОтклонитьПриглашение(Приглашение, КлючСинхронизации, Принять, КонтекстДиагностики,
	ОбновлятьСтатусы = Ложь)
	
	КлючиСинхронизации = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	КлючиСинхронизации.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, КлючСинхронизации);
	Маркер = КлючСинхронизации.МаркерРасшифрованный;
	Если Принять Тогда
		РезультатПринятияОтклонения = СервисЭДО.ПринятьПриглашение(Приглашение.ИдентификаторКонтрагента,
			Приглашение.ИдентификаторОрганизации, Маркер, КонтекстДиагностики);
	Иначе
		РезультатПринятияОтклонения = СервисЭДО.ОтклонитьПриглашение(Приглашение.ИдентификаторКонтрагента,
			Приглашение.ИдентификаторОрганизации, Маркер, КонтекстДиагностики, Приглашение.ПричинаОтказа);
	КонецЕсли;
	
	Если Не РезультатПринятияОтклонения.Успех И РезультатПринятияОтклонения.ТребуетсяОбновлениеСтатусов Тогда
		Если ОбновлятьСтатусы Тогда
			ПриглашенияЭДО.ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики, Ложь);
			// Чтобы не уйти в бесконечную рекурсию, передаем Ложь в качестве параметра ОбновлятьСтатусы.
			Возврат ПринятьОтклонитьПриглашение(Приглашение, КлючСинхронизации, Принять, КонтекстДиагностики, Ложь);
		Иначе
			ВидОперации = НСтр("ru = 'Принятие/отклонение приглашений к обмену электронными документами'");
			ТекстСообщения = НСтр("ru = 'Текущий статус подключения Контрагента в приглашении 
								  |не соответствует действительному статусу %1 на сервере оператора ЭДО.
								  |Необходимо выполнить команду ""Обновить статусы настроек ЭДО"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1",
				РезультатПринятияОтклонения.СтатусКонтактаНаСервереОператора);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПринятияОтклонения.Успех;
	
КонецФункции

// Устанавливает приглашению статус "Отклонено" без отправки сообщения оператору ЭДО.
// Отправка сообщения оператору при отклонении/отзыве приглашения:
//    Идентификатор ЭДО контрагента неизвестен (широковещательное приглашение или заявка на роуминг)
//       Нет
//    Есть идентификатор ЭДО контрагента (приглашение на идентификатор или связь уже установлена)
//      Единый оператор (организация и контрагент подключены к одному оператору)
//         Да
//      Роуминг (организация и контрагент подключены к разным операторам)
//         Автоматический (РегистрСведений.СовместимостьОператоровЭДО.СвязьДоступна = Истина)
//            Да
//         По заявке
//            Да
//
// Параметры:
//   ИдентификаторОрганизации - Строка - идентификатор ЭДО организации.
//   ИдентификаторКонтрагента - Строка - идентификатор ЭДО контрагента.
//   ПричинаОтказаОтПриглашения - Строка - причина отказа от приглашения, отзыва приглашения.
//
// Возвращаемое значение:
//   Структура:
//      * Статус - Строка - "Выполнено", приглашению установлен статус "Отклонено";
//                          "Отказ", отклонение без отправки оператору ЭДО недоступно для данного приглашения.
//                          "Ошибка", при установке статуса приглашения возникла ошибка.
//
Функция ОтклонитьПриглашениеБезОтправкиОператоруЭДО(КлючПриглашения, ИдентификаторОрганизации,
	ИдентификаторКонтрагента, ПричинаОтказаОтПриглашения = "")
	
	Результат = Новый Структура("Статус", "Отказ");
	
	ПараметрыКлюча = Новый Структура("Ключ", КлючПриглашения);
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(
			"РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами", ПараметрыКлюча);
		
		МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ключ = КлючПриглашения;
		МенеджерЗаписи.ИдентификаторОрганизации = ИдентификаторОрганизации; 
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			Результат.Статус = "Ошибка";
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запросы = Новый Массив;
		
		Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
		Отбор.УчетныеЗаписи = "&ИдентификаторОрганизации";
		ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
		Запросы.Добавить(ЗапросУчетныхЗаписей);
		
		ЗапросОператоров = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО");
		Запросы.Добавить(ЗапросОператоров);
		
		ЗапросСовместимостьОператоров = СервисНастроекЭДО.ЗапросСовместимостиОператоровЭДО("СовместимостьОператоровЭДО");
		Запросы.Добавить(ЗапросСовместимостьОператоров);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетныеЗаписиЭДО.Организация,
			|	ВЫБОР
			|		КОГДА УчетныеЗаписиЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора
			|		ИЛИ НЕ СовместимостьОператоровЭДО.СвязьДоступна ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяОтправкаОператору
			|ИЗ
			|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОператорыЭДО КАК ОператорыЭДО
			|		ПО (ОператорыЭДО.ИдентификаторОператора = &ОператорКонтрагента)
			|		ЛЕВОЕ СОЕДИНЕНИЕ СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
			|		ПО (СовместимостьОператоровЭДО.Оператор1 = УчетныеЗаписиЭДО.ОператорЭДО)
			|		И (СовместимостьОператоровЭДО.Оператор2 = &ОператорКонтрагента)";
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
		ИтоговыйЗапрос.УстановитьПараметр("ОператорКонтрагента", Лев(ИдентификаторКонтрагента, 3));
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ТребуетсяОтправкаОператору Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		МенеджерЗаписи.Статус = Перечисления.СтатусыПриглашений.Отклонено;
		МенеджерЗаписи.ПричинаОтказа = ПричинаОтказаОтПриглашения;
		МенеджерЗаписи.Записать();
		Результат.Статус = "Выполнено";
		
		ЗафиксироватьТранзакцию();

		СведенияОПриглашении = СведенияОЗаписанномПриглашении();
		ЗаполнитьЗначенияСвойств(СведенияОПриглашении, МенеджерЗаписи);
		СведенияОПриглашении.Организация = Выборка.Организация;
		ПриглашенияЭДОСобытия.ПослеИзмененияПриглашения(СведенияОПриглашении);
	Исключение
		ОтменитьТранзакцию();
		
		Результат.Статус = "Ошибка";
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Отклонение заявки на роуминг.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обновляет параметры приглашения.
// 
// Параметры:
//  Приглашение - см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение 
//  			 см. ПриглашенияЭДОКлиент.НовоеИсходящееПриглашение
//  НовыйСтатус - ПеречислениеСсылка.СтатусыПриглашений
//
Процедура ОбновитьПриглашение(Приглашение, НовыйСтатус) Экспорт
	
	ИмяРеквизитаИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Приглашение.Контрагент,
		ИмяРеквизитаИНН + ", " + ИмяРеквизитаКПП);
			
	ИНН = ПараметрыКонтрагента[ИмяРеквизитаИНН];
	КПП = ПараметрыКонтрагента[ИмяРеквизитаКПП];
		
	МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ключ = Приглашение.КлючПриглашения;
	МенеджерЗаписи.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
	
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда 
		МенеджерЗаписи.Ключ = Приглашение.КлючПриглашения;
		Если Приглашение.Свойство("Тип") Тогда
			МенеджерЗаписи.Тип = Приглашение.Тип;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
	МенеджерЗаписи.Организация = Приглашение.Организация;
	МенеджерЗаписи.Контрагент = Приглашение.Контрагент;
	Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
		МенеджерЗаписи.ИНН = ИНН;
		МенеджерЗаписи.КПП = КПП;
	КонецЕсли;
	МенеджерЗаписи.Статус = НовыйСтатус;
	
	Если ЭтоИсходящееПриглашение(Приглашение) Тогда
		Если Приглашение.Тип = Перечисления.ТипыПриглашений.НаИдентификатор Тогда
			МенеджерЗаписи.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		ИначеЕсли Приглашение.Тип = Перечисления.ТипыПриглашений.Широковещательное Тогда
			МенеджерЗаписи.EmailКонтрагента = Приглашение.EmailКонтрагента;
		ИначеЕсли Приглашение.Тип = Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг Тогда
			МенеджерЗаписи.ИдентификаторОператора = Приглашение.ОператорЭДО;
		КонецЕсли;

		МенеджерЗаписи.ТекстПриглашения = ?(ЗначениеЗаполнено(Приглашение.ТекстПриглашения),
			Приглашение.ТекстПриглашения, СтандартныйШаблонПриглашения());
		МенеджерЗаписи.EmailОрганизации = Приглашение.EmailОрганизации;
		Если ЗначениеЗаполнено(Приглашение.EmailОрганизации) Тогда
			УчетныеЗаписиЭДО.ЗаписатьEmailОрганизации(МенеджерЗаписи.ИдентификаторОрганизации,
				Приглашение.EmailОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Если ПриглашенияЭДОСлужебныйКлиентСервер.ЭтоВходящееПриглашение(Приглашение) Тогда
		МенеджерЗаписи.ПричинаОтказа = Приглашение.ПричинаОтказа;
	КонецЕсли;
	
	МенеджерЗаписи.ОписаниеОшибки = "";
	МенеджерЗаписи.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	МенеджерЗаписи.Ознакомиться = Ложь;
	МенеджерЗаписи.Записать();
	
	ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(МенеджерЗаписи.ИдентификаторОрганизации);
	
	СведенияОПриглашении = СведенияОЗаписанномПриглашении();
	ЗаполнитьЗначенияСвойств(СведенияОПриглашении, МенеджерЗаписи);
	СведенияОПриглашении.Организация = ДанныеУчетнойЗаписи.Организация;
	Если Приглашение.Свойство("СоздаватьНастройкиЭДО") Тогда
		СведенияОПриглашении.СоздаватьНастройкиЭДО = Приглашение.СоздаватьНастройкиЭДО;
	КонецЕсли;
	ПриглашенияЭДОСобытия.ПослеИзмененияПриглашения(СведенияОПриглашении);

КонецПроцедуры

Процедура СоздатьКонтрагентовДляПриглашений(Приглашения, КонтекстОперации)
	
	СоздаватьКонтрагентовАвтоматическиБЭД = НастройкиЭДО.СоздаватьКонтрагентовАвтоматически();
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторОрганизации",
		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(70)));
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторКонтрагента",
		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(70)));
	
	Для Каждого СтрокаТЧ Из Приглашения Цикл
		Если СтрокаТЧ.НовыйКонтрагент = 1 Тогда
			НоваяСтрока = ТаблицаИдентификаторов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Иначе 
			СтрокаТЧ.ГотовоКПринятию = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Идентификаторы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Идентификаторы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
		|ПОМЕСТИТЬ Идентификаторы
		|ИЗ
		|	&ТаблицаИдентификаторов КАК Идентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приглашения.Ключ КАК Ключ,
		|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Приглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	Приглашения.Контрагент КАК Контрагент,
		|	Приглашения.ИНН КАК ИНН,
		|	Приглашения.КПП КАК КПП,
		|	Приглашения.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА КонтрагентыСоздаваемыеБезусловно.Наименование ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СоздатьКонтрагентаБезусловно
		|ИЗ
		|	Идентификаторы КАК Идентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК Приглашения
		|		ПО Идентификаторы.ИдентификаторОрганизации = Приглашения.ИдентификаторОрганизации
		|		И Идентификаторы.ИдентификаторКонтрагента = Приглашения.ИдентификаторКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно КАК КонтрагентыСоздаваемыеБезусловно
		|		ПО Приглашения.ИНН = КонтрагентыСоздаваемыеБезусловно.ИНН
		|		И Приглашения.КПП = КонтрагентыСоздаваемыеБезусловно.КПП";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Для Каждого Приглашение Из Приглашения Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторОрганизации");
		СтруктураПоиска.Вставить("ИдентификаторКонтрагента");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Приглашение);
		Если Не ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент) Тогда
			ВыборкаДетальныеЗаписи.Сбросить();
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами";
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ключ", ВыборкаДетальныеЗаписи.Ключ);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОрганизации", ВыборкаДетальныеЗаписи.ИдентификаторОрганизации);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ключ = ВыборкаДетальныеЗаписи.Ключ;
			МенеджерЗаписи.ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
				РеквизитыКонтрагента.Вставить("ИНН", ВыборкаДетальныеЗаписи.ИНН);
				РеквизитыКонтрагента.Вставить("КПП", ВыборкаДетальныеЗаписи.КПП);
				
				ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
				ПараметрыПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
				ПараметрыПриглашения.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
				ПараметрыПриглашения.ИНН = РеквизитыКонтрагента.ИНН;
				ПараметрыПриглашения.КПП = РеквизитыКонтрагента.КПП;
				
				ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
				ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
				
				Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя,
					РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП);
				Если Не ЗначениеЗаполнено(Контрагент) Тогда
					Если СоздаватьКонтрагентовАвтоматическиБЭД
						Или ВыборкаДетальныеЗаписи.СоздатьКонтрагентаБезусловно 
						И Не ОбменМеждуСобственнымиОрганизациями Тогда
						
						Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					Приглашение.Контрагент = Контрагент;
					МенеджерЗаписи.Контрагент = Контрагент;
					МенеджерЗаписи.Записать();
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
					
					КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
					КлючПриглашения.Ключ = ВыборкаДетальныеЗаписи.Ключ;
					КлючПриглашения.ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
					ПриглашенияЭДО.ДобавитьОшибкуПустогоКонтрагентаВПриглашении(КонтекстОперации, КлючПриглашения);
					
					ВыборкаДетальныеЗаписи.Сбросить();
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Приглашение.ГотовоКПринятию = Истина;
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВыборкаДетальныеЗаписи.Сбросить();
			
			Шаблон = НСтр("ru = 'Не удалось создать контрагента %1. Прием приглашения не возможен.'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента при принятии приглашения'"), ОписаниеОшибки(),
				СтрШаблон(Шаблон, ВыборкаДетальныеЗаписи.Наименование));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// см. ПриглашенияЭДО.ОбменЭДМеждуОрганизациями
Функция ОбменЭДМеждуОрганизациями(ПараметрыПриглашения) Экспорт
	
	ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ПараметрыПриглашения.ИдентификаторОрганизации);
	ОрганизацияОтправителя = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ПараметрыПриглашения.ИНН, ПараметрыПриглашения.КПП);
	ИспользоватьИнтеркампани = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭДМеждуОрганизациями");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(УчетныеЗаписиЭДО.Организация) = ТИПЗНАЧЕНИЯ(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент) КАК
		|		ОбменМеждуСобственнымиОрганизациями
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТИПЗНАЧЕНИЯ(НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель) = ТИПЗНАЧЕНИЯ(НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель)
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторКонтрагента
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = &ИдентификаторОрганизации";
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ПараметрыПриглашения.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ПараметрыПриглашения.ИдентификаторКонтрагента);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОбменМеждуСобственнымиОрганизациями;
	ИначеЕсли ИспользоватьИнтеркампани
		И ЗначениеЗаполнено(ДанныеУчетнойЗаписи)
		И ЗначениеЗаполнено(ОрганизацияОтправителя) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// см. ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам
Функция КлючПриглашенияПоНатуральнымКлючам(НатуральныеКлючиПриглашения) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Если НатуральныеКлючиПриглашения.Тип = Перечисления.ТипыПриглашений.НаИдентификатор Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента";
		
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", НатуральныеКлючиПриглашения.ИдентификаторОрганизации);
		Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НатуральныеКлючиПриглашения.ИдентификаторКонтрагента);
	ИначеЕсли НатуральныеКлючиПриглашения.Тип = Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора = &ИдентификаторОператора
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИНН = &ИНН
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", НатуральныеКлючиПриглашения.ИдентификаторОрганизации);
		Запрос.УстановитьПараметр("ИдентификаторОператора", НатуральныеКлючиПриглашения.ИдентификаторОператора);
		Запрос.УстановитьПараметр("ИНН", НатуральныеКлючиПриглашения.ИНН);
		Запрос.УстановитьПараметр("КПП", НатуральныеКлючиПриглашения.КПП);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИНН = &ИНН
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", НатуральныеКлючиПриглашения.ИдентификаторОрганизации);
		Запрос.УстановитьПараметр("ИНН", НатуральныеКлючиПриглашения.ИНН);
		Запрос.УстановитьПараметр("КПП", НатуральныеКлючиПриглашения.КПП);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Результат = ВыборкаДетальныеЗаписи.Ключ;
	КонецЕсли;

	Возврат Результат;	
	
КонецФункции

// см. ПриглашенияЭДО.СоздатьПриглашениеКОтправкеОператоруЭДО
Функция СоздатьПриглашениеКОтправкеОператоруЭДО(НатуральныеКлючиПриглашения, Организация, 
Контрагент = Неопределено, ТекстПриглашения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	Результат = Новый Структура("Успешно,КлючПриглашения,ОписаниеОшибки", Ложь, "", "");

	КлючПриглашения = КлючПриглашенияПоНатуральнымКлючам(НатуральныеКлючиПриглашения);
	Если Не ПустаяСтрока(КлючПриглашения) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'С данными натуральными ключами уже есть приглашение.'");
		Результат.КлючПриглашения = КлючПриглашения;
		Возврат Результат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ключ = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НатуральныеКлючиПриглашения);
	МенеджерЗаписи.Статус = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	МенеджерЗаписи.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МенеджерЗаписи.Организация = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		МенеджерЗаписи.Контрагент = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПриглашения) Тогда
		МенеджерЗаписи.ТекстПриглашения = ТекстПриглашения;
	Иначе
		МенеджерЗаписи.ТекстПриглашения = СтандартныйШаблонПриглашения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	Результат.Успешно = Истина;
	Результат.КлючПриглашения = МенеджерЗаписи.Ключ;
	
	СведенияОПриглашении = СведенияОЗаписанномПриглашении();
	ЗаполнитьЗначенияСвойств(СведенияОПриглашении, МенеджерЗаписи);
	ПриглашенияЭДОСобытия.ПослеИзмененияПриглашения(СведенияОПриглашении);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПриглашенийДляВыводаОшибок(КлючиЗаписей) Экспорт
	
	Результат = Новый Соответствие;

	ПредставленияПриглашений = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПредставленияПриглашений(КлючиЗаписей);
	Для Каждого ПредставлениеПриглашения Из ПредставленияПриглашений Цикл
		Данные = Новый Структура;
		Данные.Вставить("Ссылка", ПредставлениеПриглашения.Ключ);
		Данные.Вставить("Представление", ПредставлениеПриглашения.Значение);
		
		Результат.Вставить(ПредставлениеПриглашения.Ключ, Данные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьКонтрагентаВПриглашении(КлючПриглашения, Контрагент) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ПространствоБлокировки = "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами";
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("Ключ", КлючПриглашения.Ключ);
		ПоляБлокировки.Вставить("ИдентификаторОрганизации", КлючПриглашения.ИдентификаторОрганизации);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(ПространствоБлокировки, ПоляБлокировки);
		
		МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ключ = КлючПриглашения.Ключ;
		МенеджерЗаписи.ИдентификаторОрганизации = КлючПриглашения.ИдентификаторОрганизации;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Контрагент = Контрагент;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
		СведенияОПриглашении = СведенияОЗаписанномПриглашении();
		ЗаполнитьЗначенияСвойств(СведенияОПриглашении, МенеджерЗаписи);
		ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(МенеджерЗаписи.ИдентификаторОрганизации);
		СведенияОПриглашении.Организация = ДанныеУчетнойЗаписи.Организация;
		ПриглашенияЭДОСобытия.ПослеИзмененияПриглашения(СведенияОПриглашении);
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр(
			"ru = 'Отправка в архив приглашений к обмену электронными документами'"), ПодробноеПредставлениеОшибки(
			Ошибка), НСтр("ru = 'При отправке приглашений в архив возникла ошибка.'"));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает параметры записанного приглашения.
// 
// Параметры:
// 	КонтекстДиагностики - Неопределено - Описание
// Возвращаемое значение:
// 	ФиксированнаяСтруктура - Описание:
// * КонтекстДиагностики - Структура - см. ОбработкаНеисправностейБЭДКлиентСервер.НовыйКонтекстДиагностики
// * СоздаватьНастройкиЭДО - Неопределено, Булево -
// * Статус - ПеречислениеСсылка.СтатусыПриглашений -
// * Контрагент - Неопределено -
// * Организация - Неопределено -
// * ИдентификаторКонтрагента - Строка -
// * ИдентификаторОрганизации - Строка -
Функция СведенияОЗаписанномПриглашении(КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("ИдентификаторКонтрагента", "");
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("Статус", Перечисления.СтатусыПриглашений.ПустаяСсылка());
	Результат.Вставить("СоздаватьНастройкиЭДО", Неопределено);
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();	
	КонецЕсли;
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СоглашенияНаРоуминг

Функция ДанныеСоглашенияНаРоуминг(ИдентификаторУчетнойЗаписи) Экспорт
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&ИдентификаторУчетнойЗаписи";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ДанныеСоглашенияНаРоуминг КАК ДанныеСоглашенияНаРоуминг
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	
	Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ДанныеФайла = Выборка.ДанныеСоглашенияНаРоуминг.Получить();
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ШаблонСоглашенияНаРоуминг(ИдентификаторУчетнойЗаписи) Экспорт
	
	ЗапросОператоровЭДО = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО");
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&ИдентификаторУчетнойЗаписи";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросОператоровЭДО);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорЭДО,
		|	ЕСТЬNULL(ОператорыЭДО.Представление, """") КАК ПредставлениеОператора,
		|	ОператорыЭДО.ЕстьШаблонСоглашенияНаРоуминг КАК ЕстьШаблонСоглашенияНаРоуминг
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОператорыЭДО КАК ОператорыЭДО
		|		ПО УчетныеЗаписиЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	
	Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена учетная запись по идентификатору %1'"),
			ИдентификаторУчетнойЗаписи);
	КонецЕсли;
	
	Если Не Выборка.ЕстьШаблонСоглашенияНаРоуминг Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Для оператора организации %1 отсутствует шаблон для автоматического скачивания.
			|Для получения шаблона письма о выборе оператора ЭДО необходимо обратиться в техническую поддержку.'"),
			Выборка.ПредставлениеОператора);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеФайла = СервисНастроекЭДО.ШаблонСоглашенияНаРоуминг(Выборка.ОператорЭДО);
	Если ДанныеФайла = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось загрузить шаблон соглашения на роуминг оператора ЭДО %1'"),
			Выборка.ПредставлениеОператора);
	КонецЕсли;
	
	ДанныеОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Выборка.Организация);
	
	Если Выборка.ОператорЭДО = "2AE" Тогда
		ЗначенияПараметров = ЗначенияПараметровШаблонаСоглашенияНаРоуминг2AE(ДанныеОрганизации);
	Иначе
		ЗначенияПараметров = ЗначенияПараметровШаблонаСоглашенияНаРоуминг(
			ДанныеОрганизации, ИдентификаторУчетнойЗаписи);
	КонецЕсли;
	
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДанныеФайла, "");
	
	АдресСоглашенияНаРоуминг = Неопределено;
	
	Попытка
		ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму("",, Макет);
		
		ОписаниеОбласти = Новый Структура("ИмяОбласти, ТипОбласти", "Шапка", "Общая");
		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбласти);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ЗначенияПараметров, Ложь);
		
		АдресСоглашенияНаРоуминг = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заполнить значения параметров шаблона соглашения на роуминг оператора ЭДО %1 по причине:'"),
			Выборка.ПредставлениеОператора) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма);
	
	Если АдресСоглашенияНаРоуминг = Неопределено Тогда
		ДанныеСоглашенияНаРоуминг = ДанныеФайла;
	Иначе
		ДанныеСоглашенияНаРоуминг = ПолучитьИзВременногоХранилища(АдресСоглашенияНаРоуминг);
		УдалитьИзВременногоХранилища(АдресСоглашенияНаРоуминг);
	КонецЕсли;
	
	Возврат ДанныеСоглашенияНаРоуминг;
	
КонецФункции

Функция ЗначенияПараметровШаблонаСоглашенияНаРоуминг(ДанныеОрганизации, ИдентификаторЭДО)
	
	ПредставлениеОрганизации = "";
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("Наименование", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		ПредставлениеОрганизации = ЗначениеСвойства;
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("ИНН", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		ПредставлениеОрганизации = СтрШаблон("%1, %2", ПредставлениеОрганизации, ЗначениеСвойства);
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("КПП", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		ПредставлениеОрганизации = СтрШаблон("%1, %2", ПредставлениеОрганизации, ЗначениеСвойства);
	КонецЕсли;
	
	ЧастиИмени = Новый Структура;
	ЧастиИмени.Вставить("Фамилия",  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Фамилия", ""));
	ЧастиИмени.Вставить("Имя",      ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Имя", ""));
	ЧастиИмени.Вставить("Отчество", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Отчество", ""));
	
	РуководительФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ЧастиИмени);
	
	ДеньМесяцГод = СтрРазделить(Формат(ТекущаяДатаСеанса(), "ДФ='дд ММММ гг'"), " ", Ложь);
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	ЗначенияПараметров.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	ЗначенияПараметров.Вставить("РуководительДолжность",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Должность", ""));
	ЗначенияПараметров.Вставить("РуководительФИО", РуководительФИО);
	ЗначенияПараметров.Вставить("День",  ДеньМесяцГод[0]);
	ЗначенияПараметров.Вставить("Месяц", ДеньМесяцГод[1]);
	ЗначенияПараметров.Вставить("Год",   ДеньМесяцГод[2]);
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция ЗначенияПараметровШаблонаСоглашенияНаРоуминг2AE(ДанныеОрганизации)
	
	НаименованиеОрганизации = "";
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("Наименование", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		НаименованиеОрганизации = ЗначениеСвойства;
	КонецЕсли;
	
	ИННКПП = "";
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("ИНН", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		ИННКПП = ЗначениеСвойства;
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если ДанныеОрганизации.Свойство("КПП", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда;
		ИННКПП = СтрШаблон("%1/%2", ИННКПП, ЗначениеСвойства);
	КонецЕсли;
	
	ЧастиИмени = Новый Структура;
	ЧастиИмени.Вставить("Фамилия",  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Фамилия", ""));
	ЧастиИмени.Вставить("Имя",      ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Имя", ""));
	ЧастиИмени.Вставить("Отчество", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Отчество", ""));
	
	РуководительФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ЧастиИмени);
	
	ЛокализованныйФорматДата = НСтр("ru='ДФ=''dd.MM.yyyy'''");
	ТекущаяДата = Формат(ТекущаяДатаСеанса(), ЛокализованныйФорматДата);
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	ЗначенияПараметров.Вставить("ИННКПП", ИННКПП);
	ЗначенияПараметров.Вставить("РуководительДолжность",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Должность", ""));
	ЗначенияПараметров.Вставить("РуководительФИО", РуководительФИО);
	ЗначенияПараметров.Вставить("ТекущаяДата", ТекущаяДата);
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция ЗаписатьДанныеСоглашенияНаРоуминг(ИдентификаторОрганизации, Адрес, ИмяФайла) Экспорт
	
	ДанныеСоглашения = ПолучитьИзВременногоХранилища(Адрес);
	Результат = УчетныеЗаписиЭДО.ЗаписатьДанныеСоглашенияНаРоуминг(ИдентификаторОрганизации, ДанныеСоглашения, ИмяФайла);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	Если Не Результат.Статус Тогда
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось записать данные соглашения на роуминг для учетной записи организации %1 по причине:'"),
			ИдентификаторОрганизации) + Символы.ПС + Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СтандартныйШаблонПриглашения() Экспорт
	
	Возврат НСтр("ru = 'Здравствуйте, приглашаем к обмену электронными документами.'");
	
КонецФункции

Функция ВыборкаОператоровЭлектронногоДокументооборота() Экспорт
	
	ЗапросОператоровЭДО = СервисНастроекЭДО.ЗапросОператоровЭДО();
	Выборка = ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ЗапросОператоровЭДО, Истина).Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ДанныеПриглашения(КлючПриглашения) Экспорт
	
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент) КАК КонтрагентПредставление,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК КонтрагентНаименование,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК КонтрагентИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КонтрагентКПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ТекстПриглашения КАК ТекстПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.EmailКонтрагента КАК ЭлектроннаяПочта,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора КАК ОператорКонтрагента,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорОрганизации,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбмена,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ПричинаОтказа КАК ПричинаОтказа,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.EmailОрганизации КАК EmailОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
		|	ТИПЗНАЧЕНИЯ(УчетныеЗаписиЭДО.Организация) = 
		|		ТИПЗНАЧЕНИЯ(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент) КАК ОбменМеждуСобственнымиОрганизациями
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.Ключ = &КлючПриглашения
		|		И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("КлючПриглашения", КлючПриглашения.Ключ);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", КлючПриглашения.ИдентификаторОрганизации);
	
	Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("КлючПриглашения", КлючПриглашения.Ключ);
	Данные.Вставить("Статус", Выборка.Статус);
	Данные.Вставить("Контрагент", Выборка.Контрагент);
	Данные.Вставить("КонтрагентНаименование", Выборка.КонтрагентНаименование);
	Данные.Вставить("КонтрагентПредставление", Выборка.КонтрагентПредставление);
	Данные.Вставить("КонтрагентИНН", Выборка.КонтрагентИНН);
	Данные.Вставить("КонтрагентКПП", Выборка.КонтрагентКПП);
	Данные.Вставить("ИдентификаторКонтрагента", Выборка.ИдентификаторКонтрагента);
	Данные.Вставить("Организация", Выборка.Организация);
	Данные.Вставить("СпособОбмена", Выборка.СпособОбмена);
	Данные.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
	Данные.Вставить("ОписаниеОшибки", Выборка.ОписаниеОшибки);
	Данные.Вставить("ТекстПриглашения", Выборка.ТекстПриглашения);
	Данные.Вставить("ЭлектроннаяПочта", Выборка.ЭлектроннаяПочта);
	Данные.Вставить("ОператорКонтрагента", Выборка.ОператорКонтрагента);
	Данные.Вставить("ОператорОрганизации", Выборка.ОператорОрганизации);
	Данные.Вставить("ПричинаОтказа", Выборка.ПричинаОтказа);
	Данные.Вставить("EmailОрганизации", Выборка.EmailОрганизации);
	Данные.Вставить("ОбменМеждуСобственнымиОрганизациями", Выборка.ОбменМеждуСобственнымиОрганизациями);
	
	Возврат Данные;
	
КонецФункции

Функция КлючЗаписиПриглашения(КлючПриглашения) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(КлючПриглашения.Ключ) Тогда
		Результат = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьКлючЗаписи(КлючПриглашения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИсходящееПриглашение(Приглашение)
	
	Возврат Приглашение.Вид = ПриглашенияЭДОСлужебныйКлиентСервер.ВидПриглашенияИсходящее();
	
КонецФункции

Функция СоздатьКонтрагентаБезусловно(ИНН, КПП) Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗапись
		|ИЗ
		|	РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно КАК КонтрагентыСоздаваемыеБезусловно
		|ГДЕ
		|	КонтрагентыСоздаваемыеБезусловно.ИНН = &ИНН
		|	И КонтрагентыСоздаваемыеБезусловно.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеИдентификаторовОрганизаций(МассивИдентификаторов) Экспорт
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&МассивИдентификаторов";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("", Отбор);
	ЗапросУчетныхЗаписей.СлужебныеПараметры.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	ВыборкаДетальныеЗаписи = ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ЗапросУчетныхЗаписей).Выбрать();
		
	ИдентификаторКакОрганизация = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторКакОрганизация.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО, ВыборкаДетальныеЗаписи.Организация);
	КонецЦикла;
	
	Возврат ИдентификаторКакОрганизация;
	
КонецФункции

#КонецОбласти

#КонецОбласти