
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обработчик события ПриОткрытии формы отчета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//  Отказ - Булево
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// Установка модифицированности пользовательских настроек
	// для их автоматического сохранения при закрытии формы
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы отчета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//  Отказ - Булево
//
Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости
	Форма.ВариантМодифицирован = Ложь;
	
	// Взводим модифицированность пользовательских настроек,
	// для того чтобы они сохранились при закрытии отчета
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом добавления группировки, в настройках отчета.
// Открывает форму выбора группировочного поля.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой добавляется группировка.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с группировкой.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для группировки.
//  Отказ           - Булево - признак отказа от добавления объекта.
//  Копирование     - Булево - определяет режим копирования.
//  Родитель        - СправочникСсылка, ПланСчетовСсылка - ссылка на элемент,
//                    который будет использован при добавлении в качестве родителя.
//  Группа          - Булево - признак добавления группы.
//
Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, ИсключаемыеПоля, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Группировка");
	ПараметрыФормы.Вставить("ИсключаемыеПоля"      , ИсключаемыеПоля);
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Добавляет группировку в таблицу группировок отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля группировки.
//   * Поле          - Строка - имя добавляемой группировки.
//   * Представление - Строка - представление добавляемой группировки.
//  ДополнительныеПараметры - Структура
//   * Форма - ФормаКлиентскогоПриложения - форма, в которой добавляется группировка.
//
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.Группировка.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление  = ПараметрыВыбранногоПоля.Представление;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипыГруппировокОтчетов.БезГрупп");
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом изменения группировки, в настройках отчета.
// Открывает форму выбора группировочного поля.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой изменяется группировка.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с группировкой.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для группировки.
//  Отказ           - Булево - признак отказа от изменения объекта.
//
Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, ИсключаемыеПоля, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ГруппировкаПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Группировка");
		ПараметрыФормы.Вставить("ИсключаемыеПоля"      , ИсключаемыеПоля);
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма"  , Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет выбранную группировку в таблице группировок отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля группировки.
//   * Поле          - Строка - имя изменяемой группировки.
//   * Представление - Строка - представление изменяемой группировки.
//  ДополнительныеПараметры - Структура
//   * Форма   - ФормаКлиентскогоПриложения - форма, в которой изменяется группировка.
//   * Элемент - ТаблицаФормы - элемент формы - таблица с группировкой.
//
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Представление;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ТипГруппировки) Тогда
			НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипыГруппировокОтчетов.БезГрупп");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом добавления элемента отбора, в настройках отчета.
// Открывает форму выбора элемента отбора отчета.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой добавляется отбор.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с отбором.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для отбора.
//  Отказ           - Булево - признак отказа от добавления объекта.
//  Копирование     - Булево - определяет режим копирования.
//  Родитель        - СправочникСсылка, ПланСчетовСсылка - ссылка на элемент,
//                    который будет использован при добавлении в качестве родителя.
//  Группа          - Булево - признак добавления группы.
//
Процедура ОтборыПередНачаломДобавления(Форма, Элемент, ИсключаемыеПоля, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключаемыеПоля"      , ИсключаемыеПоля);
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма"  , Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

// Добавляет элемент отбора в таблицу отборов отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля элемента отбора.
//   * Поле          - Строка - имя добавляемого элемента отбора.
//   * Представление - Строка - представление добавляемого элемента отбора.
//  ДополнительныеПараметры - Структура
//   * Форма   - ФормаКлиентскогоПриложения - форма, в которой добавляется элемент отбора.
//   * Элемент - ТаблицаФормы - элемент формы - таблица с отбором.
//
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если Строка(ПараметрыВыбранногоПоля.Поле) = "Организация"
		   И Форма.Отчет.Свойство("Организация") Тогда
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "ПодразделениеОрганизации"
				И Форма.Отчет.Свойство("ПодразделениеОрганизации") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.ПодразделениеОрганизации;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "ИсточникФинансирования"
				И Форма.Отчет.Свойство("ИсточникФинансирования") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.ИсточникФинансирования;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом изменения элемента отбора, в настройках отчета.
// Открывает форму выбора элемента отбора отчета.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой изменяется элемент отбора.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с отбором.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для отбора.
//  Отказ           - Булево - признак отказа от изменения объекта.
//
Процедура ОтборыПередНачаломИзменения(Форма, Элемент, ИсключаемыеПоля, Отказ) Экспорт
	
	Если (Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключаемыеПоля"      , ИсключаемыеПоля);
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет выбранный элемент отбора в таблице отборов отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля элемента отбора.
//   * Поле          - Строка - имя изменяемого элемента отбора.
//   * Представление - Строка - представление изменяемого элемента отбора.
//  ДополнительныеПараметры - Структура
//   * Форма   - ФормаКлиентскогоПриложения - форма, в которой изменяется элемент отбора.
//   * Элемент - ТаблицаФормы - элемент формы - таблица с отбором.
//
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом добавления элемента упорядочивания, в настройках отчета.
// Открывает форму выбора элемента упорядочивания отчета.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой добавляется упорядочивание.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с упорядочиванием.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для упорядочивания.
//  Отказ           - Булево - признак отказа от добавления объекта.
//  Копирование     - Булево - определяет режим копирования.
//  Родитель        - СправочникСсылка, ПланСчетовСсылка - ссылка на элемент,
//                    который будет использован при добавлении в качестве родителя.
//  Группа          - Булево - признак добавления группы.
//
Процедура ПорядокПередНачаломДобавления(Форма, Элемент, ИсключаемыеПоля, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключаемыеПоля"      , ИсключаемыеПоля);
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПорядокПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Добавляет элемент упорядочивания в таблицу упорядочивания отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля элемента упорядочивания.
//   * Поле          - Строка - имя добавляемого элемента упорядочивания.
//   * Представление - Строка - представление добавляемого элемента упорядочивания.
//  ДополнительныеПараметры - Структура
//   * Форма   - ФормаКлиентскогоПриложения - форма, в которой добавляется элемент упорядочивания.
//   * Элемент - ТаблицаФормы - элемент формы - таблица с упорядочиванием.
//
Процедура ПорядокПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед началом изменения элемента упорядочивания, в настройках отчета.
// Открывает форму выбора поля упорядочивания.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой изменяется упорядочивание.
//  Элемент         - ТаблицаФормы - элемент формы - таблица с упорядочиванием.
//  ИсключаемыеПоля - ФиксированныйМассив - поля, запрещенные для группировки.
//  Отказ           - Булево - признак отказа от изменения объекта.
//
Процедура ПорядокПередНачаломИзменения(Форма, Элемент, ИсключаемыеПоля, Отказ) Экспорт
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "ПорядокПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Порядок");
		ПараметрыФормы.Вставить("ИсключаемыеПоля", ИсключаемыеПоля);
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПорядокПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет выбранный элемент упорядочивания в таблице упорядочивания отчета.
//
// Параметры:
//  РезультатЗакрытия       - Структура - описание выбранного поля элемента упорядочивания.
//   * Поле          - Строка - имя изменяемого элемента упорядочивания.
//   * Представление - Строка - представление изменяемого элемента упорядочивания.
//  ДополнительныеПараметры - Структура
//   * Форма   - ФормаКлиентскогоПриложения - форма, в которой изменяется элемент упорядочивания.
//   * Элемент - ТаблицаФормы - элемент формы - таблица с упорядочиванием.
//
Процедура ПорядокПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает расшифровку отчета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//  Элемент - ПолеФормы - поле табличного документа, для которого вызвана расшифровка.
//  Расшифровка - Произвольный - значение расшифровки
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработатьРасшифровкуОтчета(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	
	ПараметрыРасшифровки = ОтчетыБольничнаяАптекаВызовСервера.ПолучитьПараметрыРасшифровкиОтчета(ИдентификаторОбъекта, Форма.ДанныеРасшифровки, Расшифровка, Форма.Отчет.КомпоновщикНастроек);
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасшифровки, "ОткрытьОбъект", Ложь) Тогда
		ПоказатьЗначение(, ПараметрыРасшифровки.Значение);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасшифровки, "ОткрытьФорму", Ложь) Тогда
		ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы,, Истина);
	Иначе
		СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
		Если СписокПунктовМеню.Количество() = 1 Тогда
			ИДРасшифровки = СписокПунктовМеню[0].Значение;
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресНастроек", Форма.ДанныеРасшифровки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("ИДРасшифровки", ИДРасшифровки);
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ФормаОтчета", Форма);
			Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			Форма.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Строка") Тогда
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(Результат.Значение);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРасшифровки", 1);
			ПараметрыФормы.Вставить("АдресНастроек", ДополнительныеПараметры.ФормаОтчета.ДанныеРасшифровки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("ИДРасшифровки", Результат.Значение);
			ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ДополнительныеПараметры.ЗаполняемыеНастройки);
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		Иначе
			ПоказатьЗначение(, Результат.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции

// Открывает форму редактирования макета отчета.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма владелец.
//  МакетыОтчета - СписокЗначения - список редактируемых макетов.
//
Процедура ИзменитьМакет(Форма, МакетыОтчета) Экспорт
	
	Оповестить = Новый ОписаниеОповещения("ОткрытьФормуРедактированияМакетаОтчета", ЭтотОбъект, Форма);
	КоличествоМакетов = МакетыОтчета.Количество();
	Если КоличествоМакетов = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповестить, МакетыОтчета[0]);
	ИначеЕсли КоличествоМакетов > 1 Тогда
		МакетыОтчета.ПоказатьВыборЭлемента(Оповестить, НСтр("ru = 'Выберите редактируемый макет'"));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение функции ИзменитьМакет.
// Открывает форму редактирования макета отчета.
//
// Параметры:
//  РедактируемыйМакет - ЭлементСпискаЗначений - описание макета отчета.
//    * Значение - полный путь к макету в формате:
//                 "Отчет.<ИмяОтчета>.<ИмяМакета>"
//    * Представление - представление макета отчета, как оно задано в свойствах.
//  ФормаВладелец      - ФормаКлиентскогоПриложения - форма владелец.
//
Процедура ОткрытьФормуРедактированияМакетаОтчета(РедактируемыйМакет, ФормаВладелец) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", РедактируемыйМакет.Значение);
	ПараметрыОткрытия.Вставить("ИмяДокумента"              , РедактируемыйМакет.Представление);
	ПараметрыОткрытия.Вставить("РежимОткрытияОкна"         , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыОткрытия.Вставить("ТипМакета"                 , ОтчетыБольничнаяАптекаКлиентСервер.ПолучитьТипМакетаОтчета(РедактируемыйМакет.Значение));
	ПараметрыОткрытия.Вставить("Редактирование"            , Истина);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ФормаВладелец);
	
КонецПроцедуры

// Вызывается из события формы ОбработкаОповещения.
// Записывает измененный пользователем макет отчета.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма владелец.
//  ИмяСобытия - Строка - имя события.
//  Параметр   - Структура - параметр сообщения.
//  Источник   - Источник - источник события.
// (см. событие управляемой формы ОбработкаОповещения)
//
// Возвращаемое значение:
//  Истина - если обработка выполнена.
//
Функция ОбработатьСобытиеЗаписиМакета(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "Запись_ТабличныйДокумент"
	   И Источник.ВладелецФормы = Форма Тогда
		
		АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(Параметр.ТабличныйДокумент);
		ОтчетыБольничнаяАптекаВызовСервера.ЗаписатьМакет(Параметр.ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает диалог создания письма, во вложения помещается результат сформированного отчета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета
//
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте(Форма) Экспорт
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Форма.Результат, Форма.УникальныйИдентификатор));
	Вложение.Вставить("Представление", Форма.ПредставлениеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = Форма.ПредставлениеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
	
КонецПроцедуры

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета      - ФормаКлиентскогоПриложения - Форма отчета.
//   ОтчетСформирован - Булево - Истина если отчет был успешно сформирован.
//
Процедура ПослеФормирования(ФормаОтчета, ОтчетСформирован) Экспорт
	
	ЗапуститьОжиданиеАктуализацииСебестоимостиТоваров(ФормаОтчета, ФормаОтчета.ОтчетТабличныйДокумент);
	
КонецПроцедуры

// Запускает ожидание выполнения длительной операции актуализации себестоимости товаров для отчетов.
// (см. АктуализироватьСебестоимостьТоваровДляОтчетов).
//
// Параметры:
//  ФормаОтчета       - ФормаКлиентскогоПриложения - форма отчета.
//  ДокументРезультат - ТабличныйДокумент - результат формирования отчета, куда помещается описание актуализации себестоимости товаров.
//
Процедура ЗапуститьОжиданиеАктуализацииСебестоимостиТоваров(ФормаОтчета, ДокументРезультат) Экспорт
	
	ДополнительныеСвойства = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	РезультатЗапускаРасчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РезультатЗапускаРасчетаСебестоимости");
	Если РезультатЗапускаРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасчетВыполняетсяВФоне = Не РезультатЗапускаРасчета.ЗаданиеВыполнено;
	
	Если РасчетВыполняетсяВФоне Тогда
		ОтчетыБольничнаяАптекаВызовСервера.ВывестиОписаниеАктуальностиРасчета(РезультатЗапускаРасчета, ДокументРезультат);
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура("ОкончаниеПериодаРасчета, СписокОрганизаций, НомерЗадания");
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, РезультатЗапускаРасчета);
	
	ФормыКОжиданию = ФормыКОжиданиюЗавершенияРасчета();
	ФормыКОжиданию.Вставить(ФормаОтчета, ПараметрыРасчета);
	
	Если РезультатЗапускаРасчета.ДлительнаяОперация <> Неопределено Тогда
		
		// Передается Неопределено, т.к. не нужно прекращать актуализацию данных, при закрытии формы владельца.
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаИнициаторРасчета", ФормаОтчета);
		ДополнительныеПараметры.Вставить("РасчетВыполнялсяВФоне", РасчетВыполняетсяВФоне);
		
		Оповестить = Новый ОписаниеОповещения("ЗавершитьОжиданиеАктуализацииСебестоимостиТоваров", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаРасчета.ДлительнаяОперация, Оповестить, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Актуализация данных для отчетов
#Область АктуализацияДанныхДляОтчетов

// Завершает ожидание выполнения длительной операции актуализации себестоимости товаров для отчетов.
//
// Параметры:
//  РезультатДлительнойОперации - Структура - результат длительной операции.
//  ДополнительныеПараметры - не используется.
//
Процедура ЗавершитьОжиданиеАктуализацииСебестоимостиТоваров(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Выполнено" Тогда
		
		ФормаИнициаторРасчета = ДополнительныеПараметры.ФормаИнициаторРасчета;
		РасчетВыполнялсяВФоне = ДополнительныеПараметры.РасчетВыполнялсяВФоне;
		
		ФормыКОжиданию           = ФормыКОжиданиюЗавершенияРасчета(); // формы, ожидающие завершение актуализации.
		ФормыКОтключениюОжидания = Новый Массив;                      // формы, которые нужно исключить из списка ожидающих завершения актуализации.
		Если РасчетВыполнялсяВФоне Тогда
			ФормыКОповещению     = Новый Массив;                      // формы, для которых нужно переформировать отчет.
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ФормыКОжиданию Цикл
			
			Форма            = КлючИЗначение.Ключ;
			ПараметрыРасчета = КлючИЗначение.Значение;
			
			Если Не Форма.Открыта() Тогда
				ФормыКОтключениюОжидания.Добавить(Форма);
				Продолжить;
			КонецЕсли;
			
			Если ОтчетыБольничнаяАптекаВызовСервера.СебестоимостьТоваровАктуализирована(ПараметрыРасчета) Тогда
				
				ФормыКОтключениюОжидания.Добавить(Форма);
				
				Если РасчетВыполнялсяВФоне Тогда
					ФормыКОповещению.Добавить(Форма);
				КонецЕсли;
				
			ИначеЕсли Форма = ФормаИнициаторРасчета Тогда
				
				// Граница не сместилась при расчете, в результате наличия ошибок
				// (см. процедуру Документы.РасчетСебестоимости.РассчитатьВсе).
				// Формы остаются в параметрах приложения, для переформирования после решения проблем расчета.
				// Необходимо сообщить пользователю о наличии ошибок расчета.
				
				ТекстОшибки = НСтр("ru = 'Актуализация себестоимости товаров выполнена с ошибками.
					|Подробности см. в Журнале регистрации.'");
				Заголовок = НСтр("ru = 'Актуализация себестоимости товаров'");
				ПоказатьПредупреждение(, ТекстОшибки,, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РасчетВыполнялсяВФоне И ФормыКОповещению.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Актуализация себестоимости товаров для отчета выполнена. Переформировать отчет?'");
			Заголовок    = НСтр("ru = 'Актуализация себестоимости товаров'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да , НСтр("ru = 'Переформировать'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Оставить как есть'"));
			
			Оповестить = Новый ОписаниеОповещения("ПослеПодтвержденияПереформирования", ЭтотОбъект, ФормыКОповещению);
			ПоказатьВопрос(Оповестить, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Да, Заголовок, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
		Для Каждого ОтключаемаяФорма Из ФормыКОтключениюОжидания Цикл
			ФормыКОжиданию.Удалить(ОтключаемаяФорма);
		КонецЦикла;
		
	Иначе
		
		// Расчет себестоимости не завершен, в результате наличия ошибок.
		// Формы остаются в параметрах приложения, для переформирования после решения проблем расчета.
		// Необходимо сообщить пользователю о наличии ошибок расчета.
		
		ТекстОшибки = НСтр("ru = 'Актуализация себестоимости товаров выполнена с ошибками: %1
			|Подробности см. в Журнале регистрации.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Заголовок = НСтр("ru = 'Актуализация себестоимости товаров'");
		ПоказатьПредупреждение(, ТекстОшибки,, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает переформирование отчетов, при необходимости, после фоновой актуализации себестоимости товаров.
//
// Параметры:
//  Ответ - КодВозвратаДиалога - ответ на вопрос необходимости переформирования отчета
//                               после фоновой актуализации себестоимости товаров.
//  ФормыКОповещению - Массив - формы, в которых необходимо выполнить переформирование отчета.
//
Процедура ПослеПодтвержденияПереформирования(Ответ, ФормыКОповещению) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФормаОтчета Из ФормыКОповещению Цикл
		ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 1, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ФормыКОжиданиюЗавершенияРасчета()
	
	ИмяПараметра = "АктуализацияСебестоимостиТоваров";
	Параметры = ПараметрыПриложения.Получить(ИмяПараметра);
	Если Параметры = Неопределено Тогда
		Параметры = Новый Соответствие;
		ПараметрыПриложения.Вставить(ИмяПараметра, Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // АктуализацияДанныхДляОтчетов

#КонецОбласти // СлужебныеПроцедурыИФункции
