//@strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаДействийПоЭДО

// Запускает процесс выполнения действий по ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после выполнения действий по ЭДО.
//  ПараметрыВыполнения   - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики   - Неопределено,
//                          См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура НачатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеПолученияОтпечатков",
		ЭлектронныеДокументыЭДОКлиент, Контекст);
	
	Если ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
		И (ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ПараметрыВыполнения.НаборДействий,
				ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"))
			ИЛИ ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ПараметрыВыполнения.НаборДействий,
				ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"))) Тогда
		
		КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ВыполнитьДействияПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокументов

// Запускает обработку результатов загрузки документов.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после обработки результатов загрузки.
//  РезультатЗагрузки     - См. ЭлектронныеДокументыЭДО.ОбработатьРезультатЗагрузкиВФоне
//  ПаролиСертификатов    - Неопределено,
//                          См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  КонтекстДиагностики   - Неопределено,
//                          См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура НачатьОбработкуРезультатовЗагрузкиДокументов(ОповещениеОЗавершении, РезультатЗагрузки, ПаролиСертификатов = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	КонтекстЗагрузки = НовыйКонтекстЗагрузкиДокументов();
	КонтекстЗагрузки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстЗагрузки.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстЗагрузки.КонтекстДиагностики = КонтекстДиагностики;
	
	ОбработатьРезультатЗагрузки(РезультатЗагрузки, КонтекстЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область ЖурналДействий

// Открывает журнал действий по указанному электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                        ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
//
Процедура ОткрытьЖурналДействийПоЭДО(ЭлектронныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналДействийПоЭДО.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейДокумента

// Проверяет подписи документов.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после проверки подписей документа.
//  ЭлектронныйДокумент   - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                          ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики   - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПроверитьПодписиДокумента(ОповещениеОЗавершении, ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиДокумента(
		ЭлектронныйДокумент, КонтекстДиагностики);
	
	ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики);
	
КонецПроцедуры

// Проверяет подписи сообщения ЭДО
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после проверки подписей документа.
//  СообщениеЭДО          - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики   - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПроверитьПодписиСообщения(ОповещениеОЗавершении, СообщениеЭДО, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиСообщения(
		СообщениеЭДО, КонтекстДиагностики);
	
	ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает новые параметры проверки машиночитаемой доверенности.
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки доверенности:
// * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// * ИННДоверителя - Строка - ИНН доверителя из подписываемых данных.
// * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Сертификат");
	Параметры.Вставить("Доверенность");
	Параметры.Вставить("ИННДоверителя", "");
	Параметры.Вставить("СвойстваПодписи");
	Возврат Параметры;
КонецФункции

// Возвращает результаты проверок подписей по МЧД при регистрации сертификатов.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание оповещения, которое будет выполнено после проведения проверок:
//  * Результат - Структура:
//   ** РезультатыПроверокПодписейПоМЧД - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//   ** КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  
//  НаборПараметровПроверок - Массив из См. ЭлектронныеДокументыЭДОКлиент.НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(ОповещениеОЗавершении, НаборПараметровПроверок, КонтекстДиагностики) Экспорт
	
	РезультатыПроверокПодписейПоМЧД = 
		ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(
			НаборПараметровПроверок, КонтекстДиагностики);

	ОбработатьРезультатыПроверокПодписейПоМЧД(
		ОповещениеОЗавершении, РезультатыПроверокПодписейПоМЧД, КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейОбщее

// Проверяет электронные подписи на клиенте.
// 
// Параметры:
//  ПараметрыПроверки - Структура:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьПодписи(ПараметрыПроверки) Экспорт
	
	СоздатьМенеджерКриптографии(ПараметрыПроверки.МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Выводит предупреждение о том, что формат ЭД не поддержан оператором.
// 
// Параметры:
// 	КонтекстДиагностики - см. НовыйКонтекстДиагностики
// 	ПараметрыОбработкиОшибок - см. НовыеПараметрыОбработкиОшибок
Процедура ВывестиПредупреждениеОДокументеВФорматеНеПоддержанномОператором(КонтекстДиагностики, ПараметрыОбработкиОшибок) Экспорт
	
	Ошибка = КонтекстДиагностики.Диагностика.Ошибки[0];
	ТекстЗаголовка = НСтр("ru = 'Документ не поддерживается оператором ЭДО'");
	ПоказатьПредупреждение(, Ошибка.ПодробноеПредставлениеОшибки, 30, ТекстЗаголовка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДействийПоЭДО

// Возвращает пустой контекст действий по ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * Итог                     - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОповещениеОЗавершении    - ОписаниеОповещения
//  * КонтекстДиагностики      - Неопределено
//                             - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * КонтекстОжиданияОперации - Неопределено
//                             - См. ОжиданиеОперацийБЭДКлиент.НовыйКонтекст
//  * ПаролиСертификатов       - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * Сообщения                - ФиксированныйМассив - ключ возвращаемого значения см. ДлительныеОперации.ВыполнитьПроцедуру
//
Функция НовыйКонтекстДействийПоЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("Итог", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Неопределено);
	Контекст.Вставить("КонтекстОжиданияОперации", Неопределено);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));
	Возврат Контекст;
КонецФункции

// Выполняет действия по ЭДО после получения отпечатков.
// 
// Параметры:
//  ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  Контекст - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ПараметрыВыполнения   - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * КонтекстДиагностики   - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ВыполнитьДействияПоЭДОПослеПолученияОтпечатков(ОтпечаткиСертификатов, Контекст) Экспорт
	
	Контекст.ПараметрыВыполнения.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	
	ВыполнитьДействияПоЭДО(Контекст.ОповещениеОЗавершении, Контекст.ПараметрыВыполнения, Контекст.КонтекстДиагностики);
	
КонецПроцедуры

// Выполняет действия по ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после выполнения действий по ЭДО.
//  ПараметрыВыполнения   - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики   - Неопределено,
//                          См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ВыполнитьДействияПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено)
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ВыполнитьДействияПоЭДОВФоне(
		ПараметрыВыполнения, КонтекстДиагностики);
	
	ОжидатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ДлительнаяОперация, КонтекстДиагностики);
	
КонецПроцедуры

// Выполняет обработку результата действий по ЭДО после длительной операции.
// 
// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//
Процедура ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.Сообщения = ДлительнаяОперация.Сообщения;
	
	АдресРезультата = АдресРезультатаДействийПоЭДО(ДлительнаяОперация, КонтекстДействийПоЭДО);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	РезультатДействийПоЭДО = ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО(АдресРезультата);
	
	ОбработатьРезультатДействийПоЭДО(РезультатДействийПоЭДО, КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Ожидает завершения выполнения действий по ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после выполнения действий по ЭДО.
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДиагностики   - Неопределено,
//                          См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ОжидатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ДлительнаяОперация, КонтекстДиагностики = Неопределено)
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	КонтекстОжиданияОперации = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(ОповещениеОЗавершении, КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.ОтметитьНачалоВыполнения(КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжиданияОперации);
	КонецЕсли;
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	КонтекстДействийПоЭДО = НовыйКонтекстДействийПоЭДО();
	КонтекстДействийПоЭДО.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстДействийПоЭДО.КонтекстДиагностики = КонтекстДиагностики;
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации = КонтекстОжиданияОперации;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации",
		ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращает адрес временного хранилища результата действий по ЭДО.
// 
// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
//
Функция АдресРезультатаДействийПоЭДО(ДлительнаяОперация, КонтекстДействийПоЭДО)
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДействийПоЭДО.КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

// Обрабатывает результат действий по ЭДО.
// 
// Параметры:
//  РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО
//  КонтекстДействийПоЭДО  - См. НовыйКонтекстДействийПоЭДО
//
Процедура ОбработатьРезультатДействийПоЭДО(РезультатДействийПоЭДО, КонтекстДействийПоЭДО)
	
	КонтекстДействийПоЭДО.Итог = РезультатДействийПоЭДО.Итог;
	КонтекстДействийПоЭДО.КонтекстДиагностики = РезультатДействийПоЭДО.КонтекстДиагностики;
	
	Если ЗначениеЗаполнено(РезультатДействийПоЭДО.КонтекстПодписания) Тогда
		
		ПараметрыПодписания = ПараметрыПодписания(РезультатДействийПоЭДО, КонтекстДействийПоЭДО);
		
		Подписать(ПараметрыПодписания);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатДействийПоЭДО.КонтекстОтправки) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправки",
			ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
		ДополнительныеПараметры = Новый Структура("ИтогДействийПоЭДО",
			ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
		
		СинхронизацияЭДОКлиент.ОтправитьОбъекты(Оповещение, РезультатДействийПоЭДО.КонтекстОтправки,
			РезультатДействийПоЭДО.КонтекстДиагностики, КонтекстДействийПоЭДО.ПаролиСертификатов, ДополнительныеПараметры);
		
	Иначе
		
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО, РезультатДействийПоЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры подписания сообщений ЭДО.
// 
// Параметры:
//  РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО
//  КонтекстДействийПоЭДО  - См. НовыйКонтекстДействийПоЭДО
//
// Возвращаемое значение:
//  Структура:
//  * ИндексНабораДанных              - Число
//  * ДанныеДляПодписания             - Массив из Структура:
//  ** Сертификаты                    - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** ТребуетсяЗаполнитьПодписантов  - Булево
//  ** ТребуетсяЗаполнитьДоверенности - Булево
//  ** НаборДанных                    - Массив из Структура:
//  *** Данные                        - Неопределено, Строка, ДвоичныеДанные -
//  *** Представление                 - Структура:
//  **** Значение                     - ДокументСсылка.СообщениеЭДО
//  **** Представление                - Строка
//  *** ПрисоединенныйФайл            - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  *** ТребуетсяЗаполнитьПодписанта  - Булево
//  *** ДанныеИзменены - Булево
//  *** АдресДанныхДляОбновления      - Строка
//  * ПодписанныеСообщения            - Массив из См. НовоеОписаниеПодписанногоСообщения
//  * КонтекстПодписания              - Структура:
//  ** АдресКонтекстаНаСервере        - Строка
//  ** ДанныеДляПодписания            - Массив из Структура:
//  *** Сертификаты                   - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  *** ТребуетсяЗаполнитьПодписантов - Булево
//  *** НаборДанных                   - Массив из Структура:
//  **** Данные                       - Неопределено, Строка, ДвоичныеДанные -
//  **** Представление                - Структура:
//  ***** Значение                    - ДокументСсылка.СообщениеЭДО
//  ***** Представление               - Строка
//  **** ПрисоединенныйФайл           - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  **** ТребуетсяЗаполнитьПодписанта - Булево
//  **** ДанныеИзменены               - Булево
//  **** АдресДанныхДляОбновления     - Строка
//  ** КонтекстНаСервере              - Структура:
//  *** ПараметрыВыполнения           - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  *** ИтогДействийПоЭДО             - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  *** АдресаДанныхДляОчистки        - Массив из Строка
//  * КонтекстДиагностики             - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики 
//  * КонтекстДействийПоЭДО           - См. НовыйКонтекстДействийПоЭДО
//  * ВыбраннаяМЧД                    - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                                    - Неопределено
//  * ОшибкиПроверкиПолномочий        - Массив из см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий
//  * ТребуетсяДоверенность           - Булево
//  * ПеревыборСертификата            - Булево - Истина, если по сертификату не удалось найти подходящую МЧД
//
Функция ПараметрыПодписания(РезультатДействийПоЭДО, КонтекстДействийПоЭДО)
	Параметры = Новый Структура;
	Параметры.Вставить("ИндексНабораДанных", 0);
	Параметры.Вставить("ДанныеДляПодписания", РезультатДействийПоЭДО.КонтекстПодписания.ДанныеДляПодписания);
	Параметры.Вставить("ПодписанныеСообщения", Новый Массив);
	Параметры.Вставить("КонтекстПодписания", РезультатДействийПоЭДО.КонтекстПодписания);
	Параметры.Вставить("КонтекстДиагностики", РезультатДействийПоЭДО.КонтекстДиагностики);
	Параметры.Вставить("КонтекстДействийПоЭДО", КонтекстДействийПоЭДО);
	Параметры.Вставить("ВыбраннаяМЧД", Неопределено);
	Параметры.Вставить("ОшибкиПроверкиПолномочий", Новый Массив());
	Параметры.Вставить("ТребуетсяДоверенность", Ложь);
	Параметры.Вставить("ПеревыборСертификата", Ложь); 
	
	Возврат Параметры;
КонецФункции

// Выполняет подписание сообщения ЭДО.
// 
// Параметры:
//  ПараметрыПодписания - См. ПараметрыПодписания
//
Процедура Подписать(ПараметрыПодписания)
	
	ОписаниеНабораДанных = ПараметрыПодписания.ДанныеДляПодписания[ПараметрыПодписания.ИндексНабораДанных]; // См. ЭлектронныеДокументыЭДО.ОписаниеНабораДанныхДляИнтерактивногоПодписания
	
	Сертификаты = ОписаниеНабораДанных.Сертификаты;
	ПаролиСертификатов = ОписаниеНабораДанных.ПаролиСертификатов;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",      НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении",  Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",  Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",     Неопределено);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	ОписаниеДанных.Вставить("БезПодтверждения",     Истина);
	ОписаниеДанных.Вставить("ОтборСертификатов",    Сертификаты);
	ОписаниеДанных.Вставить("НаборДанных",          ОписаниеНабораДанных.НаборДанных);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписантовПослеВыбораСертификата",
		ЭлектронныеДокументыЭДОКлиент, ПараметрыПодписания);

	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		ДанныеСообщения.Данные = Оповещение;
	КонецЦикла;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		ПарольСертификата = ПаролиСертификатов[Сертификат];
		Если ЗначениеЗаполнено(ПарольСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ПарольСертификата);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДанных = ОписаниеНабораДанных.НаборДанных.Количество();
	Если КоличествоДанных = 1 Тогда
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронного документа'"));
	Иначе
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронных документов'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			СтрШаблон(НСтр("ru = 'Электронные документы (%1)'"), КоличествоДанных));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодписания",
		ЭлектронныеДокументыЭДОКлиент, ПараметрыПодписания);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, Неопределено, , Оповещение,
		ПараметрыПодписания.КонтекстДействийПоЭДО.ПаролиСертификатов);
	
КонецПроцедуры

// Заполняет подписантов в электронном документе после выбора сертификата.
// 
// Параметры:
//  Результат - Структура:
//  * Оповещение - ОписаниеОповещения
//  * ОписаниеДанных - Структура:
//    ** ЗаголовокДанных - Строка
//    ** СообщитьОЗавершении - Булево
//    ** ПоказатьКомментарий - Булево
//    ** КонтекстОперации - Неопределено,Произвольный
//    ** ПрекратитьВыполнение - Булево
//    ** БезПодтверждения - Булево
//    ** ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** НаборДанных - Массив из См. ЭлектронныеДокументыЭДО.ДанныеСообщенияДляИнтерактивногоПодписания
//    ** ВыбранныйСертификат - Структура:
//       *** Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//       *** Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  ПараметрыПодписания - См. ПараметрыПодписания
//
Процедура ЗаполнитьПодписантовПослеВыбораСертификата(Результат, ПараметрыПодписания) Экспорт
	
	ОписаниеНабораДанных = ПараметрыПодписания.ДанныеДляПодписания[ПараметрыПодписания.ИндексНабораДанных];
	ПараметрыПодписания.Вставить("РезультатВыбораСертификата", Результат);
	
	Сертификат = Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка; 
	ПараметрыПодписания.ТребуетсяДоверенность = 
		ОписаниеНабораДанных.СертификатыТребующиеДоверенность[Сертификат] <> Неопределено;
		
	Если ПараметрыПодписания.ТребуетсяДоверенность И ОписаниеНабораДанных.НаборДанных.Количество() Тогда
		
		ПараметрыПодписания.ОшибкиПроверкиПолномочий = Новый Массив();
		
		Для Каждого Данные Из ОписаниеНабораДанных.НаборДанных Цикл
			
			ВыбраннаяМЧД = Данные.Доверенности.Получить(Сертификат);
			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				Данные.ВыбраннаяМЧД = ВыбраннаяМЧД;
			КонецЕсли;
			
			Если Данные.ТребуетсяМЧД И НЕ ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				
				ПараметрыПодписания.ПеревыборСертификата = Истина;
				Ошибки = Данные.ОшибкиПроверкиПолномочий.Получить(Сертификат);
				Для Каждого Ошибка Из Ошибки Цикл
					ПараметрыПодписания.ОшибкиПроверкиПолномочий.Добавить(Ошибка.Значение);
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыПодписания.ПеревыборСертификата Тогда
			ВыполнитьОбработкуОповещения(Результат.Оповещение, Неопределено);
		Иначе
			ВыбраннаяМЧД = ОписаниеНабораДанных.НаборДанных[0].Доверенности.Получить(Сертификат);
			ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(ВыбраннаяМЧД, ПараметрыПодписания);
		КонецЕсли;
		
	Иначе
		
		ПустаяМЧД = ПредопределенноеЗначение("Справочник.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка");
		ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(ПустаяМЧД, ПараметрыПодписания);
		
	КонецЕсли;
	
КонецПроцедуры  

// Обрабатывает выбор пользователя
// 
// Параметры:
//  РезультатВопроса - РежимДиалогаВопрос
//  ПараметрыОповещения - Структура:
//  * ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                 - Неопределено
//  * ПараметрыПодписания - См. ПараметрыПодписания
//
Процедура ОбработатьРезультатВопросаПовторитьПодписание(РезультатВопроса, ПараметрыОповещения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Повторить Тогда
		ПараметрыОповещения.ПараметрыПодписания.ПеревыборСертификата = Ложь;
		Подписать(ПараметрыОповещения.ПараметрыПодписания);
	Иначе
		ОбработатьСледующийНаборДанных(ПараметрыОповещения.ПараметрыПодписания);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет подписантов и доверенности в электронном документе после выбора сертификата и уточнения доверенности.
// 
// Параметры:
//  РезультатУточненияМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ПараметрыПодписания - См. ПараметрыПодписания
//
Процедура ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(РезультатУточненияМЧД, ПараметрыПодписания)
	
	ПараметрыПодписания.ВыбраннаяМЧД = РезультатУточненияМЧД;
	ПараметрыПодписания.РезультатВыбораСертификата.ОписаниеДанных.ВыбранныйСертификат.Вставить("МЧД", РезультатУточненияМЧД);
	Результат = ПараметрыПодписания.РезультатВыбораСертификата;
	
	ОписаниеНабораДанных = ПараметрыПодписания.ДанныеДляПодписания[ПараметрыПодписания.ИндексНабораДанных];
	
	ДанныеДляЗаполнения = Новый Соответствие;
	
	НаборМЧД = Новый Массив;
	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ТребуетсяЗаполнитьПодписанта", ДанныеСообщения.ТребуетсяЗаполнитьПодписанта);
		ПараметрыЗаполнения.Вставить("ТребуетсяДоверенность", ПараметрыПодписания.ТребуетсяДоверенность);
		ПараметрыЗаполнения.Вставить("Данные", ДанныеСообщения.ИсходныеДвоичныеДанные);
		
		Если ПараметрыПодписания.ТребуетсяДоверенность И ЗначениеЗаполнено(РезультатУточненияМЧД) Тогда
			Если НаборМЧД.Найти(РезультатУточненияМЧД) = Неопределено Тогда
				НаборМЧД.Добавить(РезультатУточненияМЧД);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения.Вставить("НаборМЧД",  НаборМЧД);
		
		Если ПараметрыЗаполнения.ТребуетсяЗаполнитьПодписанта ИЛИ ПараметрыЗаполнения.ТребуетсяДоверенность Тогда
			ДанныеДляЗаполнения.Вставить(ДанныеСообщения.ПрисоединенныйФайл, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЦикла;

	Если ДанныеДляЗаполнения.Количество() > 0 Тогда
		РезультатыПоФайлам = ЭлектронныеДокументыЭДОВызовСервера.ЗаполнитьПодписантовИДоверенностиПоСертификату(
			ДанныеДляЗаполнения,
			Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка,
			ПараметрыПодписания.КонтекстДиагностики,
			РезультатУточненияМЧД);
	КонецЕсли;
	
	НаборДанных = ОписаниеНабораДанных.НаборДанных;
	Счетчик = НаборДанных.Количество();
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		
		ДанныеСообщения = НаборДанных[Счетчик];
		ДанныеСообщения.Данные = ДанныеСообщения.ИсходныеДвоичныеДанные;
		
		Если РезультатыПоФайлам = Неопределено Тогда
			Продолжить; 
		КонецЕсли;
		
		РезультатЗаполнения = РезультатыПоФайлам[ДанныеСообщения.ПрисоединенныйФайл];
		
		Если РезультатЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатЗаполнения.Отказ Тогда
			НаборДанных.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		ДанныеСообщения.Данные = РезультатЗаполнения.ДанныеДляПодписания;
		ДанныеСообщения.АдресДанныхДляОбновления = РезультатЗаполнения.АдресДанныхДляОбновления;
		ДанныеСообщения.ДанныеИзменены = Истина;
		
	КонецЦикла;
	
	ДанныеДляПодписания = Неопределено;
	Если ЗначениеЗаполнено(НаборДанных) Тогда
		ДанныеДляПодписания = НаборДанных[0].Данные;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура("Данные", ДанныеДляПодписания);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

// Выполняет обработку результата подписания.
// 
// Параметры:
//  РезультатПодписания     - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    ** Данные             - ДвоичныеДанные
//    ** Представление      - Структура:
//       *** Значение       - ДокументСсылка.СообщениеЭДО
//       *** Представление  - Строка
//    ** ТребуетсяЗаполнитьПодписанта - Булево
//    ** ДанныеИзменены     - Булево
//    ** АдресДанныхДляОбновления - Строка
//    ** ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций    
//    ** ТребуетсяМЧД - Булево
//    ** СвойстваПодписи    - Строка,
//                            См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ТекущийЭлементНабораДанных - Структура
//  * ПользовательНажалКнопкуПодписать - Булево
//  ПараметрыПодписания     - См. ПараметрыПодписания
//
Процедура ОбработатьРезультатПодписания(РезультатПодписания, ПараметрыПодписания) Экспорт
	
	Если РезультатПодписания = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Отказ = РезультатПодписания.Отказ;
		Если Не Отказ
			И ПараметрыПодписания.ВыбраннаяМЧД = Неопределено
			И ПараметрыПодписания.ТребуетсяДоверенность Тогда
				Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыПодписания.ПеревыборСертификата Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВыбраннаяМЧД", Неопределено);
		ПараметрыОповещения.Вставить("ПараметрыПодписания", ПараметрыПодписания);
		
		Сертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
		
		Оповещение = Новый ОписаниеОповещения(
			"ОбработатьРезультатВопросаПовторитьПодписание", ЭтотОбъект, ПараметрыОповещения);
			
		Если ПараметрыПодписания.ОшибкиПроверкиПолномочий.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Сертификатом <a href = ""%1"">%2</a> можно подписать только по доверенности.
				|
				|Что делать:
				|- оформите подходящую доверенность;
				|- либо передайте документ на подпись руководителю.'");
				
			ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				ТекстВопроса, ПолучитьНавигационнуюСсылку(Сертификат), Сертификат);
				
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
			
		Иначе
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("ОшибкиПроверкиПолномочий", ПараметрыПодписания.ОшибкиПроверкиПолномочий);
			ПараметрыОткрытия.Вставить("Сертификат", Сертификат);
			
			ОткрытьФорму("Обработка.РезультатыПроверкиПодписи.Форма.ОшибкиПроверкиПолномочийПриПодписании", 
				ПараметрыОткрытия,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		Возврат;
		
	КонецЕсли;

	КриптографияБЭДКлиент.ОбработатьОшибкиКриптографическойОперации(РезультатПодписания,
		НСтр("ru = 'Подписание данных'"), ПараметрыПодписания.КонтекстДиагностики);
		
	Если Отказ Тогда
		ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания);   
		Возврат;
	КонецЕсли;
	
	Если РезультатПодписания.Успех Тогда
		Для Каждого ДанныеСообщения Из РезультатПодписания.НаборДанных Цикл
			Если Не ДанныеСообщения.Свойство("СвойстваПодписи") Тогда
				Продолжить;
			КонецЕсли;
			ДанныеПодписанногоСообщения = НовоеОписаниеПодписанногоСообщения();
			ДанныеПодписанногоСообщения.Ссылка = ДанныеСообщения.Представление.Значение;
			ДанныеПодписанногоСообщения.ПрисоединенныйФайл = ДанныеСообщения.ПрисоединенныйФайл;
			ДанныеПодписанногоСообщения.СвойстваПодписи = ДанныеСообщения.СвойстваПодписи;
			ДанныеПодписанногоСообщения.ВыбранныйСертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
			ДанныеПодписанногоСообщения.АдресДанныхДляОбновления = ДанныеСообщения.АдресДанныхДляОбновления;
			ДанныеПодписанногоСообщения.Данные = ДанныеСообщения.Данные;
			ДанныеПодписанногоСообщения.ВыбраннаяМЧД = ДанныеСообщения.ВыбраннаяМЧД;
			ДанныеПодписанногоСообщения.ТребуетсяМЧД = ДанныеСообщения.ТребуетсяМЧД;
			ПараметрыПодписания.ПодписанныеСообщения.Добавить(ДанныеПодписанногоСообщения);
		КонецЦикла;
		
		ПараметрыПодписания.КонтекстДействийПоЭДО.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	ОбработатьСледующийНаборДанных(ПараметрыПодписания);
	
КонецПроцедуры

Процедура ОбработатьСледующийНаборДанных(ПараметрыПодписания) 
	
	Если ПараметрыПодписания.ИндексНабораДанных < ПараметрыПодписания.ДанныеДляПодписания.Количество() - 1 Тогда
		ПараметрыПодписания.ИндексНабораДанных = ПараметрыПодписания.ИндексНабораДанных + 1;
		Подписать(ПараметрыПодписания);
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания);

КонецПроцедуры

// Возвращает пустое описание подписанного сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка                   - Неопределено
//                             - ДокументСсылка.СообщениеЭДО
//  * ПрисоединенныйФайл       - Неопределено
//                             - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * СвойстваПодписи          - Неопределено
//                             - Строка
//                             - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ВыбранныйСертификат      - Неопределено
//                             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Данные                   - ДвоичныеДанные
//                             - Неопределено
//  * АдресДанныхДляОбновления - Строка
//  * ВыбраннаяМЧД		       - Неопределено
//                             - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ТребуетсяМЧД - Булево
//
Функция НовоеОписаниеПодписанногоСообщения() Экспорт
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Ссылка", Неопределено);
	ОписаниеДанных.Вставить("ПрисоединенныйФайл", Неопределено);
	ОписаниеДанных.Вставить("СвойстваПодписи", Неопределено);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", Неопределено);
	ОписаниеДанных.Вставить("АдресДанныхДляОбновления", "");
	ОписаниеДанных.Вставить("Данные", Неопределено);
	ОписаниеДанных.Вставить("ВыбраннаяМЧД", Неопределено);
	ОписаниеДанных.Вставить("ТребуетсяМЧД", Ложь);
	Возврат ОписаниеДанных;
КонецФункции

// Выполняет действия по ЭДО после подписания.
// 
// Параметры:
//  ПараметрыПодписания - См. ПараметрыПодписания
//
Процедура ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания)
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ВыполнитьДействияПоЭДОПослеПодписания(
		ПараметрыПодписания.ПодписанныеСообщения,
		ПараметрыПодписания.КонтекстПодписания.АдресКонтекстаНаСервере,
		ПараметрыПодписания.КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации",
		ЭлектронныеДокументыЭДОКлиент, ПараметрыПодписания.КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Обрабатывает результат отправки.
// 
// Параметры:
//  РезультатОтправки - См. СинхронизацияЭДОКлиентСервер.НовыйРезультатОтправкиОбъектов
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//
Процедура ОбработатьРезультатОтправки(РезультатОтправки, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
	
	ИтогДействийПоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОтправки.ДополнительныеПараметры,
		"ИтогДействийПоЭДО"); // См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
	Если ЗначениеЗаполнено(ИтогДействийПоЭДО) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.Итог.ОбработанныеДокументы,
			ИтогДействийПоЭДО.ОбработанныеДокументы, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.Итог.ОбработаноПоДействиям,
			ИтогДействийПоЭДО.ОбработаноПоДействиям, Истина);
	КонецЕсли;
	
	ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Завершает выполнение действий по ЭДО.
// 
// Параметры:
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//  РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО
//
Процедура ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО, РезультатДействийПоЭДО = Неопределено)
	
	Если КонтекстДействийПоЭДО.КонтекстОжиданияОперации <> Неопределено Тогда
		ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстДействийПоЭДО.КонтекстОжиданияОперации);
	КонецЕсли;
	
	Для Каждого Сообщение Из КонтекстДействийПоЭДО.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", КонтекстДействийПоЭДО.Итог);
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Результат.Вставить("КонтекстДиагностики", КонтекстДействийПоЭДО.КонтекстДиагностики);
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("СвойстваПодписи") Тогда
		Результат.Вставить("СвойстваПодписи", РезультатДействийПоЭДО.СвойстваПодписи);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("ПодписанныеДанные") Тогда
		Результат.Вставить("ПодписанныеДанные", РезультатДействийПоЭДО.ПодписанныеДанные);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено
		И ЗначениеЗаполнено(РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
		Результат.ОшибкиФормирования = РезультатДействийПоЭДО.ОшибкиФормирования;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(КонтекстДействийПоЭДО.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокументов

// Возвращает пустой контекст загрузки документов.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ОповещениеОЗавершении        - ОписаниеОповещения
//  * ПаролиСертификатов           - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * АдресКонтекстаНаСервере      - Строка
//  * КонтекстСобытияПослеЗагрузки - Структура
//  * КонтекстДиагностики          - Неопределено,
//                                   См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ИтогДействийПоЭДО            - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//
Функция НовыйКонтекстЗагрузкиДокументов()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("АдресКонтекстаНаСервере", "");
	Контекст.Вставить("КонтекстСобытияПослеЗагрузки", Новый Структура);
	Контекст.Вставить("КонтекстДиагностики", Неопределено);
	Контекст.Вставить("ИтогДействийПоЭДО", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Возврат Контекст;
КонецФункции

// Обрабатывает результат загрузки после длительной операции.
// 
// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстЗагрузки   - См. НовыйКонтекстЗагрузкиДокументов
//
Процедура ОбработатьРезультатЗагрузкиПослеДлительнойОперации(ДлительнаяОперация, КонтекстЗагрузки) Экспорт
	
	Если ДлительнаяОперация.Статус = Неопределено Тогда
		ЗавершитьОбработкуРезультатовЗагрузки(КонтекстЗагрузки);
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстЗагрузки.КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		ЗавершитьОбработкуРезультатовЗагрузки(КонтекстЗагрузки);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ЭлектронныеДокументыЭДОВызовСервера.РезультатЗагрузкиДанныхОбъектовКонтейнеров(
		ДлительнаяОперация.АдресРезультата);
	
	ОбработатьРезультатЗагрузки(РезультатЗагрузки, КонтекстЗагрузки);
	
КонецПроцедуры

// Обрабатывает результат загрузки.
// 
// Параметры:
//  РезультатЗагрузки - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатЗагрузкиДанныхОбъектовКонтейнеров
//  КонтекстЗагрузки  - См. НовыйКонтекстЗагрузкиДокументов
//
Процедура ОбработатьРезультатЗагрузки(РезультатЗагрузки, КонтекстЗагрузки)
	
	КонтекстЗагрузки.АдресКонтекстаНаСервере = РезультатЗагрузки.АдресКонтекстаНаСервере;
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ПодписиДляПроверки) Тогда
		
		ПараметрыПроверки = НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента();
		ПараметрыПроверки.ПодписиДляПроверки = РезультатЗагрузки.ПодписиДляПроверки;
		ПараметрыПроверки.ОбработкаЗавершенияПроверки = Новый ОписаниеОповещения(
			"ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей", ЭлектронныеДокументыЭДОКлиент, КонтекстЗагрузки);
		ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
			"ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов", ЭлектронныеДокументыЭДОКлиент, ПараметрыПроверки);
		ПараметрыПроверки.КонтекстДиагностики = РезультатЗагрузки.КонтекстДиагностики;
		ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПолучениеСертификатов";
		ПроверитьПодписи(ПараметрыПроверки);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатЗагрузки.РезультатДействийПоЭДО) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПослеВыполненияДействийПоЭДО",
			ЭлектронныеДокументыЭДОКлиент, КонтекстЗагрузки);
		
		КонтекстДействий = НовыйКонтекстДействийПоЭДО();
		КонтекстДействий.ОповещениеОЗавершении = Оповещение;
		КонтекстДействий.КонтекстДиагностики = РезультатЗагрузки.КонтекстДиагностики;
		КонтекстДействий.ПаролиСертификатов = КонтекстЗагрузки.ПаролиСертификатов;
		
		ОбработатьРезультатДействийПоЭДО(РезультатЗагрузки.РезультатДействийПоЭДО, КонтекстДействий);
		
	Иначе
		
		ЗавершитьОбработкуРезультатовЗагрузки(КонтекстЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустые параметры проверки подписей.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура:
//  ** ИдентификаторДанныхДокумента - Число
//  ** ДвоичныеДанныеФайла          - ДвоичныеДанные
//  ** ДвоичныеДанныеПодписи        - ДвоичныеДанные
//  ** ЭтоОсновныеДанные            - Булево
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПроверенныеПодписи            - Соответствие из КлючИЗначение:
//  ** Ключ                         - Число - идентификатор данных документа
//  ** Значение                     - См. НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента
//
Функция НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента()
	Параметры = Новый Структура;
	Параметры.Вставить("Индекс", 0);
	Параметры.Вставить("ОбработкаЗавершенияПроверки", Новый ОписаниеОповещения);
	Параметры.Вставить("ОбработкаПроверкиПодписи", Новый ОписаниеОповещения);
	Параметры.Вставить("ПодписиДляПроверки", Новый Массив);
	Параметры.Вставить("МенеджерКриптографии", Неопределено);
	Параметры.Вставить("ОперацияМенеджераКриптографии", "");
	Параметры.Вставить("КонтекстДиагностики", Неопределено);
	Параметры.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Возврат Параметры;
КонецФункции

// Возвращает пустое описание проверенных подписей файла.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ПодписиДополнительныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ПодписиОсновныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
Функция НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента()
	ПроверенныеПодписи = Новый Структура;
	ПроверенныеПодписи.Вставить("ПодписиОсновныхДанных", Новый Массив);
	ПроверенныеПодписи.Вставить("ПодписиДополнительныхДанных", Новый Массив);
	Возврат ПроверенныеПодписи;
КонецФункции

// Обрабатывает результат проверки электронных подписей.
// 
// Параметры:
//  РезультатПроверки - Структура:
//  * ОписаниеОшибки  - Строка
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента
//
Процедура ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	
	СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
	СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
	
	ПроверенныеПодписи = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ИдентификаторДанныхДокумента];
	Если ПроверенныеПодписи = Неопределено Тогда
		ПроверенныеПодписи = НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента();
		ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ИдентификаторДанныхДокумента,
			ПроверенныеПодписи);
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоОсновныеДанные Тогда
		ПроверенныеПодписи.ПодписиОсновныхДанных.Добавить(СвойстваПодписи);
	Иначе
		ПроверенныеПодписи.ПодписиДополнительныхДанных.Добавить(СвойстваПодписи);
	КонецЕсли;
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки.ПроверенныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Загружает данные транспортных контейнеров после проверки подписей.
// 
// Параметры:
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ             - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение         - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстЗагрузки   - См. НовыйКонтекстЗагрузкиДокументов
//
Процедура ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ПроверенныеПодписи, КонтекстЗагрузки) Экспорт
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(
		ПроверенныеПодписи, КонтекстЗагрузки.АдресКонтекстаНаСервере, КонтекстЗагрузки.КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПослеДлительнойОперации",
		ЭлектронныеДокументыЭДОКлиент, КонтекстЗагрузки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Обрабатывает результат загрузки после выполнения действий по ЭДО.
// 
// Параметры:
//  Результат             - Структура:
//  * Итог                - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования  - Массив
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  КонтекстЗагрузки      - См. НовыйКонтекстЗагрузкиДокументов
//
Процедура ОбработатьРезультатЗагрузкиПослеВыполненияДействийПоЭДО(Результат, КонтекстЗагрузки) Экспорт
	
	КонтекстЗагрузки.ИтогДействийПоЭДО = Результат.Итог;
	КонтекстЗагрузки.КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	ЗавершитьОбработкуРезультатовЗагрузки(КонтекстЗагрузки);
	
КонецПроцедуры

// Завершает обработку результатов загрузки.
// 
// Параметры:
//  КонтекстЗагрузки - См. НовыйКонтекстДействийПоЭДО
//
Процедура ЗавершитьОбработкуРезультатовЗагрузки(КонтекстЗагрузки)
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", КонтекстЗагрузки.ИтогДействийПоЭДО);
	Результат.Вставить("КонтекстДиагностики", КонтекстЗагрузки.КонтекстДиагностики);
	
	ВыполнитьОбработкуОповещения(КонтекстЗагрузки.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейДокумента

// Возвращает пустые параметры проверки подписей.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура:
//  ** ПрисоединенныйФайл           - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ** ДвоичныеДанныеФайла          - ДвоичныеДанные
//  ** ДвоичныеДанныеПодписи        - ДвоичныеДанные
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПроверенныеПодписи            - Соответствие из КлючИЗначение:
//  ** Ключ                         - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ** Значение                     - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
Функция НовыеПараметрыПроверкиПодписей()
	Параметры = Новый Структура;
	Параметры.Вставить("Индекс", 0);
	Параметры.Вставить("ОбработкаЗавершенияПроверки", Новый ОписаниеОповещения);
	Параметры.Вставить("ОбработкаПроверкиПодписи", Новый ОписаниеОповещения);
	Параметры.Вставить("ПодписиДляПроверки", Новый Массив);
	Параметры.Вставить("МенеджерКриптографии", Неопределено);
	Параметры.Вставить("ОперацияМенеджераКриптографии", "");
	Параметры.Вставить("КонтекстДиагностики", Неопределено);
	Параметры.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Возврат Параметры;
КонецФункции

// Обрабатывает результат проверки электронных подписей документа.
// 
// Параметры:
//  РезультатПроверки - Структура:
//  * ОписаниеОшибки  - Строка
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписей
//
Процедура ОбработатьРезультатПроверкиПодписиДокумента(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	
	СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
	СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
	
	ПроверенныеПодписиФайла = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ПрисоединенныйФайл];
	Если ПроверенныеПодписиФайла = Неопределено Тогда
		ПроверенныеПодписиФайла = Новый Массив;
		ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ПрисоединенныйФайл, ПроверенныеПодписиФайла);
	КонецЕсли;
	ПроверенныеПодписиФайла.Добавить(СвойстваПодписи);
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки.ПроверенныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Завершает проверку электронных подписей документа.
// 
// Параметры:
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ             - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение         - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура ПроверитьПодписиДокументаЗавершение(ПроверенныеПодписи, ОповещениеОЗавершении) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверенныеПодписи) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	КонецЕсли;
	
	РезультатЗаписи = ЭлектронныеДокументыЭДОВызовСервера.ЗаписатьРезультатПроверкиПодписейДокумента(ПроверенныеПодписи);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейОбщее

// Обрабатывает результат проверки подписей с сервера,
// если на сервере подписи не проверены - проверяет на клиенте
Процедура ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики)
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(РезультатПроверки.ПодписиДляПроверки) Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ПодписиДляПроверки = РезультатПроверки.ПодписиДляПроверки;
	ПараметрыПроверки.ОбработкаЗавершенияПроверки = Новый ОписаниеОповещения(
		"ПроверитьПодписиДокументаЗавершение", ЭлектронныеДокументыЭДОКлиент, ОповещениеОЗавершении);
	ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиПодписиДокумента", ЭлектронныеДокументыЭДОКлиент, ПараметрыПроверки);
	ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПроверкаПодписи";
	ПараметрыПроверки.КонтекстДиагностики = КонтекстДиагностики;
	
	ПроверитьПодписи(ПараметрыПроверки);
	
КонецПроцедуры


// Создает менеджер криптографии.
// 
// Параметры:
//  МенеджерКриптографии - Неопределено,Строка,МенеджерКриптографии
//  ПараметрыПроверки    - См. НовыеПараметрыПроверкиПодписей
//
Процедура СоздатьМенеджерКриптографии(МенеджерКриптографии, ПараметрыПроверки) Экспорт
	
	Если МенеджерКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии",
			ЭлектронныеДокументыЭДОКлиент, ПараметрыПроверки);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение,
			ПараметрыПроверки.ОперацияМенеджераКриптографии, Ложь);
		Возврат;
	ИначеЕсли ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, 
			ПараметрыПроверки.ПроверенныеПодписи);
		Возврат;
	ИначеЕсли ПараметрыПроверки.МенеджерКриптографии = Неопределено Тогда 
		ПараметрыПроверки.МенеджерКриптографии = МенеджерКриптографии;
	КонецЕсли;
	
	ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

// Проверяет электронные подписи после создания менеджера криптографии.
// 
// Параметры:
//  МенеджерКриптографии - МенеджерКриптографии
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписей
//
Процедура ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки)
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	КриптографияБЭДКлиент.ПроверитьПодпись(ПараметрыПроверки.ОбработкаПроверкиПодписи, ТекущиеДанные.ДвоичныеДанныеФайла,
		ТекущиеДанные.ДвоичныеДанныеПодписи, ПараметрыПроверки.КонтекстДиагностики, МенеджерКриптографии);
КонецПроцедуры

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Продолжает проверку подписей по МЧД при регистрации сертификатов
//
// Параметры:
//  РезультатыПроверокПодписейПоМЧД - см. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(РезультатыПроверокПодписейПоМЧД,
	КонтекстДиагностики)
	Возврат ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(
		РезультатыПроверокПодписейПоМЧД, КонтекстДиагностики);
КонецФункции

// Обновляет данные результата проверки подписей по МЧД, результатами проверки подписей МЧД полученными с клиента
// 
// Параметры:
//  РезультатПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.РезультатПроверкиДоверенности
//  ПараметрыОповещения - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатКПроверкеНаКлиенте - См. РезультатКПроверкеНаКлиенте
//  * РезультатыПроверок - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//
Процедура ОбработатьРезультатПроверкиДоверенностиНаКлиенте(РезультатПроверки, ПараметрыОповещения) Экспорт

	РезультатКОбработке = ПараметрыОповещения.РезультатыПроверок[ПараметрыОповещения.РезультатКПроверкеНаКлиенте.Ключ];
	РезультатКОбработке.ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	РезультатКОбработке.СведенияМЧД.Верна = РезультатПроверки.Результат;
	РезультатКОбработке.ТекстОшибки = РезультатПроверки.ТекстОшибки;

	ОбработатьРезультатыПроверокПодписейПоМЧД(ПараметрыОповещения.ОповещениеОЗавершении,
		ПараметрыОповещения.РезультатыПроверок, РезультатПроверки.КонтекстДиагностики);

КонецПроцедуры

// Обновляет результаты проверок подписей по МЧД, результатами проверок подписей МЧД полученными с клиента
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
// 	РезультатыПроверок - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Процедура ОбработатьРезультатыПроверокПодписейПоМЧД(ОповещениеОЗавершении, РезультатыПроверок, КонтекстДиагностики)

	РезультатКПроверкеНаКлиенте = РезультатКПроверкеНаКлиенте(РезультатыПроверок);

	Если ЗначениеЗаполнено(РезультатКПроверкеНаКлиенте) Тогда

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("РезультатКПроверкеНаКлиенте", РезультатКПроверкеНаКлиенте);
		ПараметрыОповещения.Вставить("РезультатыПроверок", РезультатыПроверок);

		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДоверенностиНаКлиенте", ЭтотОбъект,
			ПараметрыОповещения);

		ДанныеДляПроверки = РезультатКПроверкеНаКлиенте.Значение.ДанныеДляПроверки;

		МашиночитаемыеДоверенностиКлиент.ПроверитьДоверенность(Оповещение, ДанныеДляПроверки, КонтекстДиагностики);

	Иначе

		РезультатыПроверокПодписейПоМЧД = ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(
				РезультатыПроверок, КонтекстДиагностики);

		РезультатыПроверки = Новый Структура;
		РезультатыПроверки.Вставить("РезультатыПроверокПодписейПоМЧД", РезультатыПроверокПодписейПоМЧД);
		РезультатыПроверки.Вставить("КонтекстДиагностики", КонтекстДиагностики);

		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатыПроверки);

	КонецЕсли;

КонецПроцедуры

// Возвращает результат проверки подписи по МЧД по которому необходимо выполнить проверку на клиенте.
// 
// Параметры:
//  Результаты - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//
// Возвращаемое значение:
// - Неопределено
// - КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
//
Функция РезультатКПроверкеНаКлиенте(Результаты)
	Для Каждого Результат Из Результаты Цикл
		Если Результат.Значение.ТребуетсяПроверкаМЧДНаКлиенте Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти