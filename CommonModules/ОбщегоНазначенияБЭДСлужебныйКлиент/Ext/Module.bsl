#Область СлужебныеПроцедурыИФункции

// Для использования в форме ВводСтроки
Процедура ПоказатьДанныеВСписке(Данные, ОбработчикПолученияПредставлений, Заголовок = "") Экспорт
	
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	ПараметрыИсправленияОшибок.Заголовок = Заголовок;
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть'");
	Команда.Обработчик = "ОбработкаНеисправностейБЭДКлиент.ОткрытьЭлементТаблицы";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыПредставленияДанных = Новый Структура;
	ПараметрыПредставленияДанных.Вставить("ОбработчикПолученияПредставлений", ОбработчикПолученияПредставлений);
	
	ОбработкаНеисправностейБЭДКлиент.ИсправитьОшибки(Данные, ПараметрыИсправленияОшибок, ПараметрыПредставленияДанных);
	
КонецПроцедуры

Функция ИмяОбъектаМетаданных(Тип) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ИменаОбъектовМетаданных";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	ИменаОбъектовМетаданных = ПараметрыПриложения[ИмяПараметра];
	
	Результат = ИменаОбъектовМетаданных[Тип];
	Если Результат = Неопределено Тогда
		Результат = ОбщегоНазначенияБЭДСлужебныйВызовСервера.ИмяОбъектаМетаданных(Тип);
		ИменаОбъектовМетаданных.Вставить(Тип, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьРасписаниеЗавершение(РасписаниеЗадания, Контекст) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Если Контекст.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЭДСлужебныйВызовСервера.ИзменитьРасписаниеЗадания(Контекст.ИмяЗадания, РасписаниеЗадания);
	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РасписаниеЗадания);
	КонецЕсли;
	
КонецПроцедуры

#Область АсинхронныйЦикл

Процедура АсинхронныйЦиклНачало(Контекст, РезультатВыполненияОбработчика = Неопределено) Экспорт
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	Если ТекущийАсинхронныйЦикл.СчетчикДанных > ТекущийАсинхронныйЦикл.Данные.ВГраница() Тогда
		АсинхронныйЦиклЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	
	ВременныйКонтекст = Новый Структура;
	ВременныйКонтекст.Вставить("Контекст", Контекст);
	ВременныйКонтекст.Вставить("РезультатВыполненияОбработчика", РезультатВыполненияОбработчика);
	
	Поток = Новый ПотокВПамяти;
	Поток.НачатьПолучениеРазмера(Новый ОписаниеОповещения(
		"АсинхронныйЦиклНачалоПродолжение", ЭтотОбъект, ВременныйКонтекст));
	
КонецПроцедуры

Процедура АсинхронныйЦиклНачалоПродолжение(Результат, ВременныйКонтекст) Экспорт
	
	Контекст = ВременныйКонтекст.Контекст;
	РезультатВыполненияОбработчика = ВременныйКонтекст.РезультатВыполненияОбработчика;
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	
	Если ТекущийАсинхронныйЦикл.СчетчикОбработчиков > ТекущийАсинхронныйЦикл.Обработчики.ВГраница() Тогда
		ТекущийАсинхронныйЦикл.СчетчикДанных = ТекущийАсинхронныйЦикл.СчетчикДанных + 1;
		ТекущийАсинхронныйЦикл.СчетчикОбработчиков = 0;
		АсинхронныйЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементДанных = ТекущийАсинхронныйЦикл.Данные[ТекущийАсинхронныйЦикл.СчетчикДанных];
	ТекущийОбработчик = ТекущийАсинхронныйЦикл.Обработчики[ТекущийАсинхронныйЦикл.СчетчикОбработчиков];
	
	Оповещение = Новый ОписаниеОповещения(ТекущийОбработчик.ИмяПроцедуры, ТекущийОбработчик.Модуль, Контекст);
	ВыполнитьОбработкуОповещения(Оповещение, ?(РезультатВыполненияОбработчика = Неопределено, ТекущийЭлементДанных, РезультатВыполненияОбработчика));
	
КонецПроцедуры

Функция АсинхронныйЦиклТекущийЦикл(Контекст) Экспорт 
	
	ТекущийЦикл = Контекст.АсинхронныйЦикл;
	Для Сч = 0 По Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности - 1 Цикл
		ТекущийЦикл = ТекущийЦикл.АсинхронныйЦикл;
	КонецЦикла;
	
	Возврат ТекущийЦикл;
	
КонецФункции

Процедура АсинхронныйЦиклЗавершение(Контекст) 
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	ОбработчикЗавершения = ТекущийАсинхронныйЦикл.ОбработчикЗавершения;
	Если Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности > 0 Тогда
		Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности = Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности - 1;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Контекст);
	
КонецПроцедуры

#КОнецОбласти

#Область ПроведениеДокументов

Процедура ВыполнитьПроверкуПроведенияДокументовПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДокументыМассив = Неопределено;
	ОбработкаПродолжения = Неопределено;
	ДокументыТребующиеПроведение = Неопределено;
	Если Результат = КодВозвратаДиалога.Да
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДокументыМассив", ДокументыМассив)
		И ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОбработкаПродолжения)
		И ДополнительныеПараметры.Свойство("ДокументыТребующиеПроведение", ДокументыТребующиеПроведение) Тогда
		
		ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(ДокументыТребующиеПроведение);
		
		// Сообщение о документах, которые не провелись.
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2 Формирование ЭД невозможно.'");
		НепроведенныеДокументы = Новый Массив;
		Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонСообщения,
																	Строка(ИнформацияОДокументе.Ссылка),
																	ИнформацияОДокументе.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ИнформацияОДокументе.Ссылка);
			НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
		КонецЦикла;
		
		КоличествоНепроведенныхДокументов = НепроведенныеДокументы.Количество();
		
		// Оповещаем открытые формы о том, что были проведены документы.
		ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыТребующиеПроведение,
																			НепроведенныеДокументы);
		ТипыПроведенныхДокументов = Новый Соответствие;
		Для Каждого ПроведенныйДокумент Из ПроведенныеДокументы Цикл
			ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
		КонецЦикла;
		Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
			ОповеститьОбИзменении(Тип.Ключ);
		КонецЦикла;
		
		Оповестить("ОбновитьДокументИБПослеЗаполнения", ПроведенныеДокументы);
		
		// Обновляем исходный массив документов.
		ДокументыМассив = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДокументыМассив, НепроведенныеДокументы);
		ЕстьДокументыГотовыеДляФормированияЭД = ДокументыМассив.Количество() > 0;
		Если КоличествоНепроведенныхДокументов > 0 Тогда
			
			// Спрашиваем пользователя о необходимости продолжения печати при наличии непроведенных документов.
			ТекстВопроса = НСтр("ru = 'Не удалось провести один или несколько документов.'");
			КнопкиДиалога = Новый СписокЗначений;
			
			Если ЕстьДокументыГотовыеДляФормированияЭД Тогда
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru = 'Продолжить?'");
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
			Иначе
				КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
			ДопПараметры = Новый Структура("ОбработкаПродолжения, ДокументыМассив", ОбработкаПродолжения, ДокументыМассив);
			Обработчик = Новый ОписаниеОповещения("ВыполнитьПроверкуПроведенияДокументовЗавершить", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Обработчик, ТекстВопроса, КнопкиДиалога);
		Иначе
			ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуПроведенияДокументовЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДокументыМассив = Неопределено;
	
	ОбработкаПродолжения = Неопределено;
	Если Результат = КодВозвратаДиалога.Пропустить
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДокументыМассив", ДокументыМассив)
		И ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОбработкаПродолжения) Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти