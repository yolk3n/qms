
#Область ПрограммныйИнтерфейс

/// Установка архивности элементам справочников
//
// Запускается при создании формы списка на сервере.
//
// Параметры:
//   МассивОбъектов - Массив
//     Массив объектов, у которых надо установить архивность.
//   ПоместитьВАрхив - Булево
//     Если Истина, объекты помещаются в архив,
//     если Ложь, извлекаются.
///
Функция УстановитьАрхивность(Знач МассивОбъектов, Знач ПоместитьВАрхив) Экспорт
	
	МассивИзмененных = Новый Массив;
	
	Для Каждого ОбъектУстановки Из МассивОбъектов Цикл
		
		// работает только для элементов
		Если Не ОбъектУстановки.ЭтоГруппа = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(ОбъектУстановки);
		ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизита_);
		ЗначениеРеквизита_ = (ЗначениеНедоступности_ = ПоместитьВАрхив);
		
		Попытка
			// для формы списка ставим архивность несмотря на ошибки
			Если Не ОбъектУстановки[ИмяРеквизита_] = ЗначениеРеквизита_ Тогда
				ОбъектЗаписи = ОбъектУстановки.ПолучитьОбъект();
				ОбъектЗаписи[ИмяРеквизита_] = ЗначениеРеквизита_;
				ОбъектЗаписи.Записать();
				МассивИзмененных.Добавить(ОбъектУстановки);
			КонецЕсли;
		Исключение
			// в модуле объекта при отказе выдастся предупреждение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат МассивИзмененных;
	
КонецФункции

/// Определение имени реквизита архивности по пустой ссылке
//
// Парметры:
//   Ссылка - СправочникСсылка -
//     Пустая ссылка на элемент справочника.
//
// Возвращаемое значение:
//   Строка - Имя реквизита архивности.
///
Функция ОпределитьИмяРеквизитаПоСсылке(Знач Ссылка) Экспорт
	
	Возврат ОпределитьИмяРеквизитаПоМетаданным(Ссылка.Метаданные());
	
КонецФункции

/// Определение имени реквизита архивности по метаданным
//
// Парметры:
//   Метаданные - МетаданныеОбъект-
//     Метаданные справочника.
//
// Возвращаемое значение:
//   Строка - Имя реквизита архивности.
///
Функция ОпределитьИмяРеквизитаПоМетаданным(Метаданные) Экспорт
	
	Реквизиты_ = Метаданные.Реквизиты;
	МетаданныеРеквизита_ = Реквизиты_.Найти(Архивирование.ИмяРеквизитаВАрхиве());
	
	Если Неопределено = МетаданныеРеквизита_ Тогда
		МетаданныеРеквизита_ = Реквизиты_.Найти(Архивирование.ИмяРеквизитаАктуальность());
	КонецЕсли;
	
	Если Неопределено = МетаданныеРеквизита_ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МетаданныеРеквизита_.Имя;
	
КонецФункции

////
 // Процедура: ФормаСпискаПриСозданииНаСервер
 //   запускается при создании формы списка на сервере.
 //
 // Параметры:
 //   Форма - {Управляемая форма}
 //     форма, для которой сработало событие ПриСозданииНаСервере.
 //   ИмяСписка - {Строка}
 //     имя списка, для которого будет настраиваться отбор.
 //   ИмяКоманднойПанели - {Строка}
 //     имя командной панели, в которую будут помещены команды.
  ///
Процедура ФормаСпискаПриСозданииНаСервере(Форма, Знач ИмяСписка, Знач ИмяКоманднойПанели = "") Экспорт
	
	ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(Форма[ИмяСписка]);
	ИмяИнтерфейса_ = Архивирование.ИмяИнтерфейса(ИмяРеквизита_);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.ОформленияВидовОбъектов") Тогда
		МодульОформлений = ОбщегоНазначения.ОбщийМодуль("ОформленияВидовОбъектов");
		// создаем оформление списка формы
		МодульОформлений.НастроитьУсловноеОформлениеСписка(
												Форма,
												ИмяСписка,
												ИмяРеквизита_,
												"", // все поля
												ИмяИнтерфейса_
									);
	Иначе
		ЭлементУсловногоОформления = Форма[ИмяСписка].УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		// отбор
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных(ИмяРеквизита_);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Архивирование.ЗначениеНедоступности(ИмяРеквизита_);
		ЭлементОтбора.Использование = Истина;
		// оформление
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
		ЭлементЦветаОформления.Значение = Новый Цвет(188, 143, 143); 
		ЭлементЦветаОформления.Использование = Истина;
	КонецЕсли;
	
	// создаем нужные команды
	Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
		МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
		СообщениеЗаголовокКоманды_ = МодульСообщенияПользователю.Получить("Архивирование_ЗаголовокКомандыОтбораВСписке",, Ложь);
	Иначе
		СообщениеЗаголовокКоманды_ = Новый Структура("Заголовок, Текст",
											НСтр("ru='Показывать архив'"),
											НСтр("ru='Показывать элементы, находящиеся в архиве'")
										);
	КонецЕсли;
	
	КомандаПросмотраАрхивности = Форма.Команды.Добавить("ПросмотрАрхивныхЭлементов_" + ИмяСписка);
	КомандаПросмотраАрхивности.Действие = "Подключаемый_ПросмотрАрхивныхЭлементов";
	КомандаПросмотраАрхивности.Заголовок = СообщениеЗаголовокКоманды_.Заголовок;
	КомандаПросмотраАрхивности.Картинка = БиблиотекаКартинок.НайтиВСодержании;
	КомандаПросмотраАрхивности.Отображение = ОтображениеКнопки.Картинка;
	КомандаПросмотраАрхивности.Подсказка = СообщениеЗаголовокКоманды_.Текст;
	
	// создаем кнопки
	ИмяКомПанели = ?(ПустаяСтрока(ИмяКоманднойПанели), "ФормаКоманднаяПанель", ИмяКоманднойПанели);
	КомПанельСписка = Форма.Элементы.Найти(ИмяКомПанели);
	КнопкаПросмотрАрхивности = Форма.Элементы.Добавить(КомандаПросмотраАрхивности.Имя, Тип("КнопкаФормы"), КомПанельСписка);
	КнопкаПросмотрАрхивности.ИмяКоманды = КомандаПросмотраАрхивности.Имя;
	// восстанавливаем пометку
	ХранилищеНастроекПометка_ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
															Форма.ИмяФормы + "/ПросмотрАрхивныхЭлементов",
															ИмяСписка,
															Ложь
														);
	КнопкаПросмотрАрхивности.Пометка = ХранилищеНастроекПометка_;
	// делаем первоначальный отбор
	Архивирование.УстановитьОтборСпискаПоКоманде(Форма[ИмяСписка], КнопкаПросмотрАрхивности.Пометка);
	
КонецПроцедуры

/// Инициализация подсистемы Архивирование для формы элемента
//
// Параметры:
//   Форма - УправляемаяФорма -
//     Форма, для которой сработало событие ПриСозданииНаСервере.
//   АрхивностьОбъекта - Неопределено -
//     Не используется. Оставлено для совместимости.
//   ИмяГруппы - Строка -
//     Имя группы, куда будут создаваться необходимые элементы.
///
Процедура ФормаЭлементаПриСозданииНаСервере(Форма, Знач АрхивностьОбъекта = Неопределено, Знач ИмяГруппы = "") Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	// если группа не задана, то не создаем декорации
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		// создаем декорации для обозначения архивности
		Родитель = ЭлементыФормы.Найти(ИмяГруппы);
		ДекорацияПредупреждение = ЭлементыФормы.Добавить("Архивирование_ДекорацияПредупреждение", Тип("ДекорацияФормы"), Родитель);
		ДекорацияПредупреждение.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияПредупреждение.Ширина = 4;
		ДекорацияПредупреждение.Высота = 2;
		
		ДекорацияНадпись = ЭлементыФормы.Добавить("Архивирование_ДекорацияНадпись", Тип("ДекорацияФормы"), Родитель);
		ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ДекорацияНадпись.Заголовок = МодульСообщенияПользователю.Получить("Архивирование_ЗаголовокДекорацииСтатуса");
		Иначе
			ДекорацияНадпись.Заголовок = "Находится в архиве";
		КонецЕсли;

		ДекорацияНадпись.Ширина = 25;
		ДекорацияНадпись.Высота = 2;
		ДекорацияНадпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.ОформленияВидовОбъектов") Тогда
			МодульОформлений = ОбщегоНазначения.ОбщийМодуль("ОформленияВидовОбъектов");
			ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(Форма.Объект);
			МодульОформлений.НастроитьУсловноеОформление(
														Форма,
														"Объект." + ИмяРеквизита_,
														"Архивирование_ДекорацияНадпись,Архивирование_ДекорацияПредупреждение",
														"АрхивированиеЭлемент"
												);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////
 // Процедура: ИнициализироватьАктуальностьНоменклатуры
 //   устанавливает отрицание значения недоступности.
 //
  ///
Процедура ИнициализироватьДоступность() Экспорт
	
	МассивОбъектовПодсистемы = АрхивированиеПовтИсп.ПолучитьМассивОбъектовПодсистемы();
	
	Для каждого ОбъектПодсистемы Из МассивОбъектовПодсистемы Цикл
		
		Метаданные_ = Метаданные.НайтиПоПолномуИмени(ОбъектПодсистемы);
		
		Если Неопределено = Метаданные_ Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Архивирование.ОпределитьИмяРеквизита(Метаданные_);
		ЗначениеНедоступности = Архивирование.ЗначениеНедоступности(ИмяРеквизита);
		Если ЗначениеНедоступности = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИсключатьГруппы_ = Метаданные_.Иерархический = Истина И
								Метаданные_.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка,
		|	" + ИмяРеквизита + "
		|ИЗ
		|	" + ОбъектПодсистемы + 
		?(ИсключатьГруппы_ = Ложь, "", "
		|ГДЕ
		|	ЭтоГруппа = Ложь")   + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ИмяРеквизита + "
		|ИТОГИ ПО
		|	" + ИмяРеквизита;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КоличествоИстина = 0;
		КоличествоЛожь = 0;
		Пока Выборка.Следующий() Цикл
			Если Выборка[ИмяРеквизита] =  Истина Тогда
				ВыборкаИстина = Выборка.Выбрать();
				КоличествоИстина = ВыборкаИстина.Количество();
			Иначе
				ВыборкаЛожь = Выборка.Выбрать();
				КоличествоЛожь = ВыборкаЛожь.Количество();
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоИстина = 0 И КоличествоЛожь > 0 Тогда
			
			НачатьТранзакцию();
			
			Пока ВыборкаЛожь.Следующий() Цикл
				Попытка
					
					ЭлементОбъект = ВыборкаЛожь.Ссылка.ПолучитьОбъект();
					ЭлементОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись");
					ЭлементОбъект[ИмяРеквизита] = НЕ ЗначениеНедоступности;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементОбъект, Ложь, Ложь);
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ВызватьИсключение НСтр("ru='Не удалось обновить реквизит " + ИмяРеквизита + " у элемента'");
					
				КонецПопытки;
			КонецЦикла;
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// иницирует обработчики подсистемы
Процедура ОбновлениеНаКаждуюВерсию() Экспорт
	
	ИнициализироватьДоступность();
	
КонецПроцедуры

////
 // Функция: НайтиПоЗависимымСсылкам
 //   запускается при создании формы элемента на сервере.
 //
 // Параметры:
 //   ПолноеИмяМетаданных - Строка
 //     путь к метаданным.
 //   МассивПоискаСсылок_ - Массив
 //     Список ссылок, на которые ищем зависимости.
 //
 // Возврат:
 //    Массив - коллекция зависимых объектов.
///
Функция НайтиПоЗависимымСсылкам(Знач ПолноеИмяМетаданных, МассивПоискаСсылок_) Экспорт
	
	СписокЗависимыхОбъектов = Новый Массив;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	
	Попытка
		МенеджерОбъекта.СписокЗависимыхОбъектов(СписокЗависимыхОбъектов);
	Исключение
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Отказ",);
		ТЗ.Колонки.Добавить("Ссылка");
		ТЗ.Колонки.Добавить("ТипЗначения");
		Возврат ТЗ;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	Для каждого ЗависимыйОбъект Из СписокЗависимыхОбъектов Цикл
		ИмяБезТабличныеЧасти = СтрЗаменить(ЗависимыйОбъект.ПолноеИмя, "ТабличнаяЧасть.", "");
		
		ЧастиИмени = СтрРазделить(ЗависимыйОбъект.ПолноеИмя, ".");
		
		КлассОМ = ЧастиИмени[0];
		ИмяОМ   = ЧастиИмени[1];
		
		ИмяБазовыхМетаданных = КлассОМ + "." + ИмяОМ;
	
		ЭтоРегистр = (КлассОМ = "РегистрСведений" ИЛИ КлассОМ = "РегистрНакопления");
		ЭтоТабличнаяЧасть = (ЭтоРегистр = Ложь И ЧастиИмени.Количество() > 2);
		
		ИмяРеквизитаСсылка = "Ссылка";
		ИмяРеквизитаПометкаУдаления = "ПометкаУдаления";
		ЗначениеПометкаУдаления = Ложь;
		ИмяПараметраТипЗначения_ = "ТИПЗНАЧЕНИЯ(Ссылка)";
		
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&РеквизитСсылка КАК Ссылка,
				|	&ПараметрТипЗначения КАК ТипЗначения,
				|	&ПараметрОтказ КАК Отказ
				|ИЗ
				|	" + ИмяБезТабличныеЧасти + "
				|ГДЕ
				|	&РеквизитПометкаУдаления = &ЗначениеПометкаУдаления
				|	И " + ЗависимыйОбъект.РеквизитЗначения + " В (&Ссылки)";
				
		Если ЭтоРегистр = Истина Тогда
			ИмяРеквизитаСсылка = ЗависимыйОбъект.РеквизитЗначения;
			ИмяРеквизитаПометкаУдаления = "Активность";
			ИмяПараметраТипЗначения_ = """" + ИмяОМ + """";
			ЗначениеПометкаУдаления = Истина;
		ИначеЕсли ЭтоТабличнаяЧасть = Истина Тогда
			ИмяРеквизитаПометкаУдаления = "Ссылка.ПометкаУдаления";
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, "&РеквизитСсылка", ИмяРеквизитаСсылка);
		Текст = СтрЗаменить(Текст, "&РеквизитПометкаУдаления", ИмяРеквизитаПометкаУдаления);
		Текст = СтрЗаменить(Текст, "&ПараметрТипЗначения", ИмяПараметраТипЗначения_);
		
		Если АрхивированиеПовтИсп.МетаданныеИспользуютсяПодсистемой(ИмяБазовыхМетаданных) Тогда
			__ПРОВЕРКА__("Справочник" = КлассОМ, "704053e2-24c3-11e9-3586-c4346b22f0e4");
			ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(
				Метаданные.НайтиПоПолномуИмени(ИмяБазовыхМетаданных)
			);
			Текст = Текст + "
						|	И " + ?(ЭтоТабличнаяЧасть, "Ссылка.", "") +
						ИмяРеквизита_ + 
						" = " + // НЕ Архивирование.ЗначениеНедоступности()
						?(Архивирование.ЗначениеНедоступности(ИмяРеквизита_), "ЛОЖЬ", "ИСТИНА");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
			Текст = "
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|" + Текст;
		КонецЕсли;
		
		ИмяПараметраОтказа_ = "Отказ" + Формат(СписокЗависимыхОбъектов.Найти(ЗависимыйОбъект), "ЧГ=");
		Текст = СтрЗаменить(Текст, "ПараметрОтказ", ИмяПараметраОтказа_);
		
		Запрос.Текст = Запрос.Текст + Текст;
		Запрос.УстановитьПараметр(ИмяПараметраОтказа_, ЗависимыйОбъект.Отказ);
		Запрос.УстановитьПараметр("ЗначениеПометкаУдаления", ЗначениеПометкаУдаления);
		
	КонецЦикла; 
	Запрос.УстановитьПараметр("Ссылки", МассивПоискаСсылок_);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

///
//  Процедура АрхивированиеПередЗаписью
//      определяет обработчик ПередЗаписью для подсистемы Архивирование
///
Процедура АрхивированиеПередЗаписью(Источник, Отказ) Экспорт
	
	ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
	Если АрхивированиеПовтИсп.МетаданныеИспользуютсяПодсистемой(ПолноеИмяМетаданных) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(Источник.Метаданные());
	
	// принудительная запись сообщения
	Если Источник.ДополнительныеСвойства.Свойство("СлужебнаяЗапись") ИЛИ Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеНедоступности = Архивирование.ЗначениеНедоступности(ИмяРеквизита_);
	// для новых установим по умолчанию значение
	Если Источник.ЭтоНовый() Тогда
		Источник[ИмяРеквизита_] = НЕ ЗначениеНедоступности;
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// проверки на установку архивности. на снятие они не нужны
	Если Источник[ИмяРеквизита_] = ЗначениеНедоступности И
		Источник[ИмяРеквизита_] <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, ИмяРеквизита_)
	Тогда
		МассивПоискаСсылок_ = Новый Массив();
		МассивПоискаСсылок_.Добавить(Источник.Ссылка);
		НайденныеСсылки_ = АрхивированиеСервер.НайтиПоЗависимымСсылкам(ПолноеИмяМетаданных, МассивПоискаСсылок_);
		Если НайденныеСсылки_.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НайденныеСсылки_.Сортировать("Отказ Убыв");
		Для каждого НайденнаяСсылка Из НайденныеСсылки_ Цикл
			ПараметрыСообщения_ = Новый Структура("Элемент1,Элемент2,Элемент1Метаданные,Элемент2Метаданные", 
								Строка(Источник.Ссылка),
								Строка(НайденнаяСсылка.Ссылка),
								Строка(ТипЗнч(Источник.Ссылка)),
								НайденнаяСсылка.ТипЗначения
							);
			
			Если НайденнаяСсылка.Отказ Тогда
				Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
					МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
					МодульСообщенияПользователю.Показать("Архивирование_ЗапретПомещенияВАрхив", ПараметрыСообщения_);
				Иначе
					Сообщить(стрШаблон("Элемент «%1»(%3) не может быть помещен в архив.
					|На него имеется ссылка в «%2»(%4).",
					ПараметрыСообщения_.Элемент1, ПараметрыСообщения_.Элемент2, ПараметрыСообщения_.Элемент1Метаданные, ПараметрыСообщения_.Элемент2Метаданные));
				КонецЕсли;
				Отказ = Истина;
			ИначеЕсли Отказ = Ложь Тогда
				Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
					МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
					МодульСообщенияПользователю.Показать("Архивирование_ИнформацияОЗависимостях", ПараметрыСообщения_);
				Иначе
					Сообщить(стрШаблон("Элемент «%1»(%3) помещен в архив.
					|Обратите внимание, что на него имеется ссылка в «%2»(%4).",
					ПараметрыСообщения_.Элемент1, ПараметрыСообщения_.Элемент2, ПараметрыСообщения_.Элемент1Метаданные, ПараметрыСообщения_.Элемент2Метаданные));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///
//  Процедура АрхивированиеОбработкаПолученияДанныхВыбора
//      определяет обработчик ОбработкаПолученияДанныхВыбора для подсистемы Архивирование.
///
Процедура АрхивированиеОбработкаПолученияДанныхВыбора(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	МетаданныеОбработки_ = Источник.ПустаяСсылка().Метаданные().ПолноеИмя();
	// Требует переноса в функциональные подсистемы
	Если Не АрхивированиеПовтИсп.МетаданныеИспользуютсяПодсистемой(МетаданныеОбработки_) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(Источник.ПустаяСсылка());
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизита_);
	
		Если Параметры.Свойство("ВыборГруппИЭлементов") Тогда
			// точно иерархические
			Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
				// у всех элементов есть реквизит
				Параметры.Отбор.Вставить(ИмяРеквизита_, НЕ ЗначениеНедоступности_);
			ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				
				
				// оставлен стандартный выбор элементов платформой
				
				// отберем либо группы, либо элементы актуальные
				//СтандартнаяОбработка = Ложь;
				//ДанныеВыбора = Новый СписокЗначений;
				//Запрос = Новый Запрос;
				//Запрос.Текст =
				//"ВЫБРАТЬ
				//|	Данные.Ссылка,
				//|	Данные.ПометкаУдаления
				//|ИЗ
				//|	" + МетаданныеОбработки_ + " КАК Данные
				//|ГДЕ
				//|	(НЕ &ОтборПоСтроке ИЛИ Данные.Наименование ПОДОБНО &Наименование)
				//|	И Данные.ПометкаУдаления = ЛОЖЬ
				//|	И (Данные.ЭтоГруппа = ИСТИНА ИЛИ Данные." + Архивирование.ИмяРеквизита() + " = &ЗначениеАктуальности)";
				//
				//Запрос.УстановитьПараметр("ОтборПоСтроке", ЗначениеЗаполнено(Параметры.СтрокаПоиска));
				//Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
				//	Если Параметры.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть Тогда
				//		Запрос.УстановитьПараметр("Наименование", "%" + Параметры.СтрокаПоиска + "%");
				//	Иначе
				//		Запрос.УстановитьПараметр("Наименование", Параметры.СтрокаПоиска + "%");
				//	КонецЕсли;
				//Иначе
				//	Запрос.УстановитьПараметр("Наименование", "");
				//КонецЕсли;
				//Запрос.УстановитьПараметр("ЗначениеАктуальности", НЕ Архивирование.ЗначениеНедоступности());
				//
				//Выборка = Запрос.Выполнить().Выбрать();
				//Пока Выборка.Следующий() Цикл
				//	ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Ссылка);
				//КонецЦикла;
				
			КонецЕсли;
		Иначе
			// нет иерархии
			Параметры.Отбор.Вставить(ИмяРеквизита_, НЕ ЗначениеНедоступности_);
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти