////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УПРАВЛЯЕМОЙ ФОРМОЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Преобразует описание элементов и команд формы из формата XML
//
// Параметры:
//  СтрокаXML - Строка - описание реквизитов, команд и элементов формы в формате XML
//
// Возвращаемое значение:
//  Структура
//    * РеквизитыФормы - ТаблицаЗначений - описание реквизитов формы.
//    * КомандыФормы   - ТаблицаЗначений - описание команд формы.
//    * ЭлементыФормы  - ТаблицаЗначений - описание элементов формы.
//
Функция ПрочитатьОписаниеФормыИзСтроки(СтрокаXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru='Пустой XML'"));
	КонецЕсли;
	
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("РеквизитыФормы", ПустаяТаблицаРеквизитовФормы());
	ОписаниеФормы.Вставить("КомандыФормы"  , ПустаяТаблицаКомандФормы());
	ОписаниеФормы.Вставить("ЭлементыФормы" , ПустаяТаблицаЭлементовФормы());
	
	ИмяКорня = Чтение.Имя;
	Пока Чтение.Прочитать() Цикл
		
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяЭлемента = "Элементы" Тогда
				ПрочитатьЭлементыФормы(Чтение, ОписаниеФормы.ЭлементыФормы);
			ИначеЕсли ИмяЭлемента = "Реквизиты" Тогда
				ПрочитатьРеквизитыФормы(Чтение, ОписаниеФормы.РеквизитыФормы);
			ИначеЕсли ИмяЭлемента = "Команды" Тогда
				ПрочитатьКомандыФормы(Чтение, ОписаниеФормы.КомандыФормы);
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеФормы;
	
КонецФункции

// Создает реквизиты, команды и элементы формы по описанию.
//
// Параметры:
//  ОписаниеЭлементовФормы - Структура - Представление формы, формируемое функцией "ПрочитатьОписаниеФормыИзСтроки".
//
Процедура СоздатьЭлементы(Форма, ОписаниеЭлементовФормы) Экспорт
	
	СоздатьРеквизитыФормы(Форма, ОписаниеЭлементовФормы.РеквизитыФормы);
	СоздатьКомандыФормы(Форма, ОписаниеЭлементовФормы.КомандыФормы);
	СоздатьЭлементыФормы(Форма, ОписаниеЭлементовФормы.ЭлементыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

// Сбрасывает сохраненные настройки размера и положения окна формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура СброситьРазмерыИПоложениеОкна(Форма) Экспорт
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(Форма.ИмяФормы, "", ИмяПользователя);
	КонецЕсли;
	Форма.КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает представление клавиши
//
// Параметры:
//  ЗначениеКлавиша - Клавиша
//
// Возвращаемое значение:
//  Строка - Представление клавиши
//
Функция ПредставлениеКлавиши(ЗначениеКлавиша) Экспорт
	
	Если Строка(Клавиша._1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "1";
	ИначеЕсли Строка(Клавиша._2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "2";
	ИначеЕсли Строка(Клавиша._3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "3";
	ИначеЕсли Строка(Клавиша._4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "4";
	ИначеЕсли Строка(Клавиша._5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "5";
	ИначеЕсли Строка(Клавиша._6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "6";
	ИначеЕсли Строка(Клавиша._7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "7";
	ИначеЕсли Строка(Клавиша._8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "8";
	ИначеЕсли Строка(Клавиша._9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "9";
	ИначеЕсли Строка(Клавиша.Num0) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 0";
	ИначеЕсли Строка(Клавиша.Num1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 1";
	ИначеЕсли Строка(Клавиша.Num2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 2";
	ИначеЕсли Строка(Клавиша.Num3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 3";
	ИначеЕсли Строка(Клавиша.Num4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 4";
	ИначеЕсли Строка(Клавиша.Num5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 5";
	ИначеЕсли Строка(Клавиша.Num6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 6";
	ИначеЕсли Строка(Клавиша.Num7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 7";
	ИначеЕсли Строка(Клавиша.Num8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 8";
	ИначеЕсли Строка(Клавиша.Num9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 9";
	ИначеЕсли Строка(Клавиша.NumAdd) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num +";
	ИначеЕсли Строка(Клавиша.NumDecimal) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num .";
	ИначеЕсли Строка(Клавиша.NumDivide) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num /";
	ИначеЕсли Строка(Клавиша.NumMultiply) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num *";
	ИначеЕсли Строка(Клавиша.NumSubtract) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num -";
	Иначе
		Возврат Строка(ЗначениеКлавиша);
	КонецЕсли;
	
КонецФункции

// Возвращает представление сочетания клавиш
//
// Параметры:
//  СочетаниеКлавиш - Сочетание клавиш для которого нужно сформировать представление
//  БезСкобок       - Булево - Флаг, указывающий, что представление должно быть сформировано без скобок
//
// Возвращаемое значение:
//  Строка - Представление сочетания клавиш
//
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавиш, БезСкобок = Ложь) Экспорт
	
	Если СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = "";
	Если СочетаниеКлавиш.Ctrl Тогда
		Наименование = Наименование + "Ctrl+"
	КонецЕсли;
	Если СочетаниеКлавиш.Alt Тогда
		Наименование = Наименование + "Alt+"
	КонецЕсли;
	Если СочетаниеКлавиш.Shift Тогда
		Наименование = Наименование + "Shift+"
	КонецЕсли;
	Наименование = Наименование + ПредставлениеКлавиши(СочетаниеКлавиш.Клавиша);
	
	Возврат СтрШаблон(?(БезСкобок, "%1", "(%1)"), Наименование);
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор описания формы
#Область РазборОписанияФормы

Функция ПустаяТаблицаЭлементовФормы()
	
	ОписаниеЭлементовФормы = Новый ДеревоЗначений;
	ОписаниеЭлементовФормы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ОписаниеЭлементовФормы.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ОписаниеЭлементовФормы.Колонки.Добавить("РодительСтрокой", Новый ОписаниеТипов("Строка"));
	ОписаниеЭлементовФормы.Колонки.Добавить("ВставитьПередЭлементом", Новый ОписаниеТипов("Строка"));
	ОписаниеЭлементовФормы.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Массив"));
	ОписаниеЭлементовФормы.Колонки.Добавить("События", Новый ОписаниеТипов("Массив"));
	ОписаниеЭлементовФормы.Колонки.Добавить("СвязиПараметровВыбора", Новый ОписаниеТипов("Массив"));
	ОписаниеЭлементовФормы.Колонки.Добавить("ПараметрыВыбора", Новый ОписаниеТипов("Массив"));
	
	Возврат ОписаниеЭлементовФормы;
	
КонецФункции

Процедура ПрочитатьЭлементыФормы(Чтение, ОписаниеЭлементовФормы)
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "Элементы" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПрочитатьЭлементыФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	ТекущийЭлемент = ОписаниеЭлементовФормы;
	
	Пока Чтение.Прочитать() Цикл
		
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяЭлемента = "События" Тогда
				ЗаполнитьОбработчикиСобытийЭлементаФормы(Чтение, ТекущийЭлемент.События);
			ИначеЕсли ИмяЭлемента = "ПараметрыВыбора" Тогда
				ЗаполнитьПараметрыВыбораЭлементаФормы(Чтение, ТекущийЭлемент.ПараметрыВыбора);
			ИначеЕсли ИмяЭлемента = "СвязиПараметровВыбора" Тогда
				ЗаполнитьСвязиПараметровВыбораЭлементаФормы(Чтение, ТекущийЭлемент.СвязиПараметровВыбора);
			ИначеЕсли ИмяЭлемента = "Свойство" Тогда
				ТекущийЭлемент.Свойства.Добавить(ПрочитатьСвойствоЭлемента(Чтение));
			ИначеЕсли ИмяЭлемента = "УсловноеОформление" Тогда
				ЗаполнитьУсловноеОформление(Чтение, ТекущийЭлемент.Строки.Добавить())
			Иначе
				ТекущийЭлемент = ТекущийЭлемент.Строки.Добавить();
				ТекущийЭлемент.Тип = Чтение.Имя;
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Если Чтение.Имя = "Имя" Тогда
						ТекущийЭлемент.Имя = Чтение.Значение;
					ИначеЕсли Чтение.Имя = "Родитель" Тогда
						ТекущийЭлемент.РодительСтрокой = Чтение.Значение;
					ИначеЕсли Чтение.Имя = "ВставитьПередЭлементом" Тогда
						ТекущийЭлемент.ВставитьПередЭлементом = Чтение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			Иначе
				ТекущийЭлемент = ?(ТекущийЭлемент.Родитель = Неопределено, ОписаниеЭлементовФормы, ТекущийЭлемент.Родитель);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаРеквизитовФормы()
	
	ОписаниеРеквизитовФормы = Новый ТаблицаЗначений;
	ОписаниеРеквизитовФормы.Колонки.Добавить("Имя"               , Новый ОписаниеТипов("Строка"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("Тип"               , Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("Путь"              , Новый ОписаниеТипов("Строка"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("Заголовок"         , Новый ОписаниеТипов("Строка"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("СохраняемыеДанные" , Новый ОписаниеТипов("Булево"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("Свойства"          , Новый ОписаниеТипов("Массив"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("ИспользоватьВсегда", Новый ОписаниеТипов("Массив"));
	ОписаниеРеквизитовФормы.Колонки.Добавить("Значение"          , Новый ОписаниеТипов());
	
	Возврат ОписаниеРеквизитовФормы;
	
КонецФункции

Процедура ПрочитатьРеквизитыФормы(Чтение, ОписаниеРеквизитовФормы)
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "Реквизиты" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПрочитатьРеквизитыФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Родители = Новый Массив();
	Родители.Добавить(Неопределено);
	
	ТекущийЭлемент = ОписаниеРеквизитовФормы;
	
	Пока Чтение.Прочитать() Цикл
		
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяЭлемента = "Типы" Тогда
				ТекущийЭлемент.Тип = ПрочитатьТип(Чтение)
			ИначеЕсли ИмяЭлемента = "Реквизит" Тогда
				
				ТекущийЭлемент = ОписаниеРеквизитовФормы.Добавить();
				ТекущийРодитель = Родители[Родители.ВГраница()];
				Родители.Добавить(ТекущийЭлемент);
				Если ТекущийРодитель <> Неопределено Тогда
					ТекущийЭлемент.Путь = ?(ПустаяСтрока(ТекущийРодитель.Путь), "", ТекущийРодитель.Путь + ".") + ТекущийРодитель.Имя;
				КонецЕсли;
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Если Чтение.Имя = "Имя" Тогда
						ТекущийЭлемент.Имя = Чтение.Значение;
					ИначеЕсли Чтение.Имя = "Путь" Тогда
						ТекущийЭлемент.Путь = Чтение.Значение;
					ИначеЕсли Чтение.Имя = "Заголовок" Тогда
						ТекущийЭлемент.Заголовок = Чтение.Значение;
					ИначеЕсли Чтение.Имя = "СохраняемыеДанные" Тогда
						ТекущийЭлемент.СохраняемыеДанные = Чтение.Значение;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ИмяЭлемента = "Свойства" Тогда
				
				Пока Чтение.Прочитать() Цикл
					
					ИмяЭлемента = Чтение.Имя;
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Если ИмяЭлемента = "Свойство" Тогда
							ИмяСвойства = Чтение.ПолучитьАтрибут("Имя");
							ЗначениеСвойства = "";
						ИначеЕсли ИмяЭлемента = "Типы" Тогда
							ЗначениеСвойства = ПрочитатьТип(Чтение);
						КонецЕсли;
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
						ЗначениеСвойства = Чтение.Значение;
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если ИмяЭлемента = "Свойство" Тогда
							ТекущийЭлемент.Свойства.Добавить(СвойствоЭлементаФормы(ИмяСвойства, ЗначениеСвойства));
						ИначеЕсли ИмяЭлемента = "Свойства" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ИмяЭлемента = "ИспользоватьВсегда" Тогда
				
				Пока Чтение.Прочитать() Цикл
					
					ИмяЭлемента = Чтение.Имя;
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТекущийЭлемент.ИспользоватьВсегда.Добавить(ИмяЭлемента);
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если ИмяЭлемента = "ИспользоватьВсегда" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ИмяЭлемента = "Значение" Тогда
				
				ТекущийЭлемент.Значение = ПолучитьЗначение(Чтение);
				
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			ИначеЕсли ИмяЭлемента = "Реквизит" Тогда
				Если Родители.Количество() > 1 Тогда
					Родители.Удалить(Родители.ВГраница());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаКомандФормы()
	
	ОписаниеКомандФормы = Новый ТаблицаЗначений;
	ОписаниеКомандФормы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ОписаниеКомандФормы.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Массив"));
	
	Возврат ОписаниеКомандФормы;
	
КонецФункции

Процедура ПрочитатьКомандыФормы(Чтение, ОписаниеКомандФормы)
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "Команды" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПрочитатьКомандыФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;

	Пока Чтение.Прочитать() Цикл
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекущийЭлемент = ОписаниеКомандФормы.Добавить();
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "Имя" Тогда
					ТекущийЭлемент.Имя = Чтение.Значение;
				Иначе
					ТекущийЭлемент.Свойства.Добавить(СвойствоЭлементаФормы(Чтение.Имя, Чтение.Значение));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьТип(Чтение)
	
	// <Типы>
	//  <Тип>Число</Тип>
	//  <Тип>Строка</Тип>
	// </Типы>
	
	Если Чтение.Имя <> "Типы" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПрочитатьТип"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("");
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СледующееОписаниеТипа = ОписаниеТипаПоИмени(Чтение.Значение);
			ОписаниеТипа = Новый ОписаниеТипов(
				ОписаниеТипа,
				СледующееОписаниеТипа.Типы(),
				,
				СледующееОписаниеТипа.КвалификаторыЧисла,
				СледующееОписаниеТипа.КвалификаторыСтроки,
				СледующееОписаниеТипа.КвалификаторыДаты);
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Типы" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Процедура ЗаполнитьСвязиПараметровВыбораЭлементаФормы(Чтение, СвязиПараметровВыбора)
	
	// <СвязиПараметровВыбора>
	//  <Связь Имя='Отбор.Владелец' ПутьКДанным='Организация' ИзменениеЗначения='[Очищать|НеИзменять]'>
	// </СвязиПараметровВыбора>
	
	Если Чтение.Имя <> "СвязиПараметровВыбора" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ЗаполнитьСвязиПараметровВыбораЭлементовФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Имя = "";
			ПутьКДанным = "";
			ИзменениеЗначения = РежимИзмененияСвязанногоЗначения.Очищать;
			
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "Имя" Тогда
					Имя = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "ПутьКДанным" Тогда
					ПутьКДанным = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "ИзменениеЗначения" Тогда
					ИзменениеЗначения = ЗначениеИзСтроки(Чтение.Значение, ОписаниеТипа(Тип("РежимИзмененияСвязанногоЗначения")));
				КонецЕсли;
			КонецЦикла;
			
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора(Имя, ПутьКДанным, ИзменениеЗначения));
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "СвязиПараметровВыбора" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыВыбораЭлементаФормы(Чтение, ПараметрыВыбора)
	
	// <ПараметрыВыбора>
	//  <Параметр Имя='Отбор.ТипЕдиницы'>
	//    <Значение Тип='Массив'>
	//      <Значение Тип='ПеречислениеСсылка.ТипыЕдиницИзмерения'>Вес</Значение>
	//      <Значение Тип='ПеречислениеСсылка.ТипыЕдиницИзмерения'>Концентрация</Значение>
	//      <Значение Тип='ПеречислениеСсылка.ТипыЕдиницИзмерения'>ЕдиницаДействия</Значение>
	//    </Значение>
	//  </Параметр>
	// </ПараметрыВыбора>
	
	Если Чтение.Имя <> "ПараметрыВыбора" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ЗаполнитьПараметрыВыбораЭлементаФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Пока Чтение.Прочитать() Цикл
		
		ИмяУзла = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ИмяУзла = "Параметр" Тогда
				Имя = Чтение.ПолучитьАтрибут("Имя");
				Значение = Неопределено;
			ИначеЕсли ИмяУзла = "Значение" Тогда
				Значение = ПолучитьЗначение(Чтение);
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяУзла = "ПараметрыВыбора" Тогда
				Прервать;
			ИначеЕсли ИмяУзла = "Параметр" Тогда
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Имя, Значение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбработчикиСобытийЭлементаФормы(Чтение, Обработчики)
	
	// <События>
	//  <ПриИзменении Действие='ГруппаПКУПриИзменении'>
	//   ...
	// </События>
	
	Если Чтение.Имя <> "События" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ЗаполнитьОбработчикиСобытийЭлементовФормы"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИмяСобытия = Чтение.Имя;
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "Действие" Тогда
					Действие = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "ВыполнятьНаСервере" Тогда
					ВыполнятьНаСервере = Чтение.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Обработчики.Добавить(ОбработчикСобытияЭлементаФормы(ИмяСобытия, Действие));
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "События" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьСвойствоЭлемента(Чтение)
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "Свойство" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПрочитатьСвойствоЭлемента"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	ИмяСвойства = Чтение.ПолучитьАтрибут("Имя");
	ЗначениеСвойства = "";
	
	Пока Чтение.Прочитать() Цикл
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяЭлемента = "Значение" Тогда
				ЗначениеСвойства = ПолучитьЗначение(Чтение);
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗначениеСвойства = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойствоЭлементаФормы(ИмяСвойства, ЗначениеСвойства);
	
КонецФункции

Процедура ЗаполнитьУсловноеОформление(Чтение, ТекущийЭлемент)
	
	// <УсловноеОформление>
	//  <Элемент>
	//    <Оформление ЦветТекста='ПоясняющаяНадпись' ...>
	//    <Отбор>...</Отбор>
	//    <Поля>
	//      <Поле Имя='ГруппаПКУ'>
	//    </Поля>
	//  </Элемент>
	//   ...
	// </УсловноеОформление>
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "УсловноеОформление" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ЗаполнитьУсловноеОформление"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	ТекущийЭлемент.Тип = ИмяКорня;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяЭлемента = Чтение.Имя;
			Если ИмяЭлемента = "Элемент" Тогда
				Элемент = ТекущийЭлемент.Строки.Добавить();
			ИначеЕсли ИмяЭлемента = "Оформление" Тогда
				Оформление = Новый Структура;
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Оформление.Вставить(Чтение.Имя, Чтение.Значение);
				КонецЦикла;
				Элемент.Свойства.Добавить(СвойствоЭлементаФормы("Оформление", Оформление));
			ИначеЕсли ИмяЭлемента = "Отбор" Тогда
				Элемент.Свойства.Добавить(СвойствоЭлементаФормы("Отбор", ЗаполнитьОтбор(Чтение)));
			ИначеЕсли ИмяЭлемента = "Поля" Тогда
				Поля = Новый Массив;
				Пока Чтение.Прочитать() Цикл
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Поле" Тогда
						Поля.Добавить(Чтение.ПолучитьАтрибут("Имя"));
					ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Поля" Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Элемент.Свойства.Добавить(СвойствоЭлементаФормы("Поля", Поля));
			КонецЕсли;			
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = ИмяКорня Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьОтбор(Чтение)
	
	// <Отбор>
	//  <Элемент ЛевоеЗначение='ГруппаПКУ' ВидСравнения='Равно' РежимОтображения='Недоступный'>
	//    <Значение Тип='СправочникСсылка.ГруппыПКУ'>Спирты</Значение>
	//  </Элемент>
	//  <Группа ТипГруппы='ИЛИ'>
	//    <Элемент ЛевоеЗначение='ГруппаПКУ' ВидСравнения='Равно' РежимОтображения='Недоступный'>
	//      <Значение Тип='СправочникСсылка.ГруппыПКУ'>Спирты</Значение>
	//    </Элемент>
	//    ...
	//  </Группа>
	// </Отбор>
	
	ИмяКорня = Чтение.Имя;
	Если ИмяКорня <> "Отбор" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ЗаполнитьОтбор"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Отбор = Новый ДеревоЗначений;
	Отбор.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Отбор.Колонки.Добавить("ЛевоеЗначение", Новый ОписаниеТипов("Строка"));
	Отбор.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("Строка"));
	Отбор.Колонки.Добавить("РежимОтображения", Новый ОписаниеТипов("Строка"));
	Отбор.Колонки.Добавить("ТипГруппы", Новый ОписаниеТипов("Строка"));
	Отбор.Колонки.Добавить("ПравоеЗначение");
	
	ТекущийЭлемент = Отбор;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяЭлемента = Чтение.Имя;
			Если ИмяЭлемента = "Элемент" Тогда
				Элемент = ТекущийЭлемент.Строки.Добавить();
				Элемент.Тип = "Элемент";
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Элемент[Чтение.Имя] = Чтение.Значение;
				КонецЦикла;
			ИначеЕсли ИмяЭлемента = "Значение" Тогда
				Элемент.ПравоеЗначение = ПолучитьЗначение(Чтение);
			ИначеЕсли ИмяЭлемента = "Группа" Тогда
				ТекущийЭлемент = ТекущийЭлемент.Строки.Добавить();
				ТекущийЭлемент.Тип = "Группа";
				Пока Чтение.ПрочитатьАтрибут() Цикл
					ТекущийЭлемент[Чтение.Имя] = Чтение.Значение;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			Если Чтение.Имя = ИмяКорня Тогда
				Прервать;
			ИначеЕсли Чтение.Имя = "Группа" Тогда
				ТекущийЭлемент = ?(ТекущийЭлемент.Родитель = Неопределено, Отбор, ТекущийЭлемент.Родитель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

Процедура ЗаполнитьСписокЗначений(Чтение, СписокЗначений)
	
	// <СписокЗначений>
	//  <Элемент Пометка=[Истина|Ложь] Представление="">
	//    <Значение Тип='ПеречислениеСсылка.'></Значение>
	//  </Элемент>
	// </СписокЗначений>
	
	ИмяКорня = Чтение.Имя;
	Пока Чтение.Прочитать() Цикл
		
		ИмяЭлемента = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ИмяЭлемента = "Элемент" Тогда
			
				Пометка = Ложь;
				Представление = "";
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Если Чтение.Имя = "Пометка" Тогда
						Пометка = ЗначениеИзСтроки(Чтение.Значение, ОписаниеТипа(Тип("Булево")));
					ИначеЕсли Чтение.Имя = "Представление" Тогда
						Представление = Чтение.Значение;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ИмяЭлемента = "Значение" Тогда
				СписокЗначений.Добавить(ПолучитьЗначение(Чтение), Представление, Пометка);
			КонецЕсли;

		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяЭлемента = ИмяКорня Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначение(Чтение)
	
	Если Чтение.Имя <> "Значение" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработчик ""ПолучитьЗначение"": некорректный узел: %1'"), Чтение.Имя);
	КонецЕсли;
	
	Тип = ОписаниеТипаПоИмени(Чтение.ПолучитьАтрибут("Тип"));
	Если Тип.СодержитТип(Тип("Массив")) Или Тип.СодержитТип(Тип("ФиксированныйМассив")) Тогда
		
		Значение = Новый Массив;
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Значение.Добавить(ПолучитьЗначение(Чтение));
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Тип.СодержитТип(Тип("ФиксированныйМассив")) Тогда
			Значение = Новый ФиксированныйМассив(Значение);
		КонецЕсли;
		
	ИначеЕсли Тип.СодержитТип(Тип("СписокЗначений")) Тогда
		Значение = Новый СписокЗначений;
		ЗаполнитьСписокЗначений(Чтение, Значение);		
	Иначе
		
		ЗначениеСтрокой = "";
		Если Чтение.Прочитать() И Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗначениеСтрокой = Чтение.Значение;
			Чтение.Прочитать();
		КонецЕсли;
		Значение = ЗначениеИзСтроки(ЗначениеСтрокой, Тип);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция СвойствоЭлементаФормы(ИмяСвойства, ЗначениеСвойства)
	Возврат Новый Структура("Имя, Значение", ИмяСвойства, ЗначениеСвойства);
КонецФункции

Функция ОбработчикСобытияЭлементаФормы(ИмяСобытия, Действие)
	
	Возврат Новый Структура("ИмяСобытия, Действие",	ИмяСобытия,	Действие);
	
КонецФункции

#КонецОбласти // РазборОписанияФормы

////////////////////////////////////////////////////////////////////////////////
// Создание элементов формы
#Область СозданиеЭлементовФормы

Процедура СоздатьЭлементыФормы(Форма, Знач ОписаниеЭлементовФормы, Знач Родитель = Неопределено)
	
	Если ОписаниеЭлементовФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовФормы.Строки Цикл
		
		Если Родитель = Неопределено И Не ПустаяСтрока(ОписаниеЭлемента.РодительСтрокой) Тогда
			РодительЭлемента = Элементы.Найти(ОписаниеЭлемента.РодительСтрокой);
		Иначе
			РодительЭлемента = Родитель;
		КонецЕсли;
		
		ИмяТипаЭлемента = ОписаниеЭлемента.Тип;
		Если ИмяТипаЭлемента = "КонтекстноеМеню" Тогда
			Если ОписаниеЭлемента.Строки.Количество() = 0 Тогда
				РодительЭлемента.КонтекстноеМеню.Доступность = Ложь;
			Иначе
				СоздатьЭлементыФормы(Форма, ОписаниеЭлемента, РодительЭлемента.КонтекстноеМеню);
			КонецЕсли;
		ИначеЕсли ИмяТипаЭлемента = "КоманднаяПанель" Тогда
			
			Если РодительЭлемента <> Неопределено Тогда
				Если ТипЗнч(РодительЭлемента) = Тип("ТаблицаФормы") Тогда
					КоманднаяПанель = РодительЭлемента.КоманднаяПанель;
				Иначе
					КоманднаяПанель = РодительЭлемента;
				КонецЕсли;
			Иначе
				КоманднаяПанель = Форма.КоманднаяПанель;
			КонецЕсли;
			СоздатьЭлементыФормы(Форма, ОписаниеЭлемента, КоманднаяПанель);
			
		ИначеЕсли ИмяТипаЭлемента = "УсловноеОформление" Тогда
			ЗадатьУсловноеОформление(?(Родитель = Неопределено, Форма, Родитель), ОписаниеЭлемента);
		Иначе
			
			ТекущийЭлемент = Элементы.Найти(ОписаниеЭлемента.Имя);
			Если ТекущийЭлемент = Неопределено Тогда
				
				Если ПустаяСтрока(ОписаниеЭлемента.ВставитьПередЭлементом) Тогда
					НовыйЭлемент = Элементы.Добавить(ОписаниеЭлемента.Имя, Тип(ИмяТипаЭлемента), РодительЭлемента);
				Иначе
					ВставитьПередЭлементом = Элементы.Найти(ОписаниеЭлемента.ВставитьПередЭлементом);
					НовыйЭлемент = Элементы.Вставить(ОписаниеЭлемента.Имя, Тип(ИмяТипаЭлемента), РодительЭлемента, ВставитьПередЭлементом);
				КонецЕсли;
				
				Для каждого Свойство Из ОписаниеЭлемента.Свойства Цикл
					ТипЗначения = ТипЗнч(НовыйЭлемент[Свойство.Имя]);
					Если ТипЗначения = Тип("СписокЗначений") Тогда
						ДополнитьСписокЗначений(НовыйЭлемент[Свойство.Имя], Свойство.Значение);
					Иначе
						НовыйЭлемент[Свойство.Имя] = ЗначениеИзСтроки(Свойство.Значение, ОписаниеТипа(ТипЗначения));
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Обработчик Из ОписаниеЭлемента.События Цикл
					УстановитьОбработчикСобытияЭлементаФормы(Форма, НовыйЭлемент, Обработчик);
				КонецЦикла;
				
				Если ОписаниеЭлемента.СвязиПараметровВыбора.Количество() Тогда
					НовыйЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(ОписаниеЭлемента.СвязиПараметровВыбора);
				КонецЕсли;
				
				Если ОписаниеЭлемента.ПараметрыВыбора.Количество() Тогда
					НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(ОписаниеЭлемента.ПараметрыВыбора);
				КонецЕсли;
				
				ТекущийЭлемент = НовыйЭлемент;
				
			Иначе
				
				Если ТипЗнч(ТекущийЭлемент) <> Тип(ИмяТипаЭлемента) Тогда
					ТекстОшибки = НСтр("ru='Тип существующего элемента(%1) ""%2"" не соответствует требуемому типу ""%3""'");
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						ОписаниеЭлемента.Имя,
						ТипЗнч(ТекущийЭлемент),
						Тип(ИмяТипаЭлемента));
				КонецЕсли;
				
			КонецЕсли;
			
			СоздатьЭлементыФормы(Форма, ОписаниеЭлемента, ТекущийЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗадатьУсловноеОформление(Родитель, УсловноеОформление)
	
	Если ТипЗнч(Родитель) <> Тип("ФормаКлиентскогоПриложения") И ТипЗнч(Родитель) <> Тип("ДинамическийСписок") Тогда
		ВызватьИсключение НСтр("ru='Некорректный тип элемента для задания условного оформления'");
	КонецЕсли;
	
	Элементы = Родитель.УсловноеОформление.Элементы;
	Для Каждого ЭлементОформления Из УсловноеОформление.Строки Цикл
		
		НовыйЭлемент = Элементы.Добавить();
		Для Каждого ПараметрОформления Из ЭлементОформления.Свойства Цикл
			Если ПараметрОформления.Имя = "Оформление" Тогда
				
				Для каждого Свойство Из ПараметрОформления.Значение Цикл
					ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Свойство.Ключ));
					Если ЗначениеПараметра <> Неопределено Тогда
						ЗначениеПараметра.Значение = ЗначениеИзСтроки(Свойство.Значение, ОписаниеТипа(ТипЗнч(ЗначениеПараметра.Значение)));
						ЗначениеПараметра.Использование = Истина;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ПараметрОформления.Имя = "Отбор" Тогда
				
				УстановитьОтбор(НовыйЭлемент.Отбор, ПараметрОформления.Значение);
				
			ИначеЕсли ПараметрОформления.Имя = "Поля" Тогда
				
				Для Каждого Поле Из ПараметрОформления.Значение Цикл
					ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтбор(ОбластьОтбора, Отборы)
	
	Для Каждого ЭлементОтбора Из Отборы.Строки Цикл
		
		Если ЭлементОтбора.Тип = "Элемент" Тогда
			
			Отбор = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение);
			Отбор.ВидСравнения = ЗначениеИзСтроки(ЭлементОтбора.ВидСравнения, ОписаниеТипа(ТипЗнч(Отбор.ВидСравнения)));
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено Тогда
				Отбор.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.Тип = "Группа" Тогда
			
			СвойстваГруппыОтбора = Новый Структура;
			СвойстваГруппыОтбора.Вставить("ТипГруппы", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			Для Каждого Свойство Из СвойстваГруппыОтбора Цикл
				Если ЗначениеЗаполнено(ЭлементОтбора[Свойство.Имя]) Тогда
					СвойстваГруппыОтбора[Свойство.Имя] = ЗначениеИзСтроки(Свойство.Значение, ОписаниеТипа(ТипЗнч(СвойстваГруппыОтбора[Свойство.Имя])));
				КонецЕсли;
			КонецЦикла;
			
			Отбор = ОбластьОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			Отбор.ТипГруппы = СвойстваГруппыОтбора.ТипГруппы;
			
			УстановитьОтбор(Отбор, ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКомандыФормы(Форма, ОписаниеКомандФормы)
	
	Если ОписаниеКомандФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команды = Форма.Команды;
	Для Каждого ОписаниеКоманды Из ОписаниеКомандФормы Цикл
		
		НоваяКоманда = Команды.Добавить(ОписаниеКоманды.Имя);
		Для Каждого Свойство Из ОписаниеКоманды.Свойства Цикл
			НоваяКоманда[Свойство.Имя] = ЗначениеИзСтроки(Свойство.Значение, ОписаниеТипа(ТипЗнч(НоваяКоманда[Свойство.Имя])));
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРеквизитыФормы(Форма, ОписаниеРеквизитовФормы)
	
	Если ОписаниеРеквизитовФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ОписаниеРеквизитовФормы Цикл
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(Реквизит.Имя, Реквизит.Тип, Реквизит.Путь, Реквизит.Заголовок, Реквизит.СохраняемыеДанные));
	КонецЦикла;
	
	Если НовыеРеквизиты.Количество() <> 0 Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	КонецЕсли;
	
	Для Каждого Реквизит Из ОписаниеРеквизитовФормы Цикл
		
		Если Не ПустаяСтрока(Реквизит.Путь) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы = Форма[Реквизит.Имя];
		Для Каждого Свойство Из Реквизит.Свойства Цикл
			Если ТипЗнч(Свойство.Значение) = Тип("Строка") Тогда
				РеквизитФормы[Свойство.Имя] = ЗначениеИзСтроки(Свойство.Значение, ОписаниеТипа(ТипЗнч(РеквизитФормы[Свойство.Имя])));
			Иначе
				РеквизитФормы[Свойство.Имя] = Свойство.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если Реквизит.Значение <> Неопределено Тогда
			Если ТипЗнч(РеквизитФормы) = Тип("СписокЗначений") Тогда
				ДополнитьСписокЗначений(РеквизитФормы, Реквизит.Значение);
			Иначе
				Форма[Реквизит.Имя] = Реквизит.Тип.ПривестиЗначение(Реквизит.Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизит.Тип.СодержитТип(Тип("ДинамическийСписок")) Тогда
			Для Каждого Поле Из Реквизит.ИспользоватьВсегда Цикл
				РеквизитФормы.УстановитьОбязательноеИспользование(Поле, Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОбработчикСобытияЭлементаФормы(Форма, Элемент, Обработчик)
	
	Элемент.УстановитьДействие(Обработчик.ИмяСобытия, Обработчик.Действие);
	
КонецПроцедуры

#КонецОбласти // СозданиеЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция ЗначениеИзСтроки(ЗначениеСтрокой, ОписаниеТипа)
	
	Если ПустаяСтрока(ЗначениеСтрокой) Тогда
		Возврат ОписаниеТипа.ПривестиЗначение();
	КонецЕсли;
	
	Типы = ОписаниеТипа.Типы();
	Если Типы.Количество() = 0 Тогда
		Возврат ЗначениеСтрокой;
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Картинка")) Тогда
		Возврат БиблиотекаКартинок[ЗначениеСтрокой];
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("СочетаниеКлавиш")) Тогда
		Возврат ОпределитьСочетаниеКлавиш(ЗначениеСтрокой);
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Цвет")) Тогда
		Возврат ОпределитьЦвет(ЗначениеСтрокой);
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Шрифт")) Тогда
		Возврат ОпределитьШрифт(ЗначениеСтрокой);
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Рамка")) Тогда
		Возврат ОпределитьРамку(ЗначениеСтрокой);
	КонецЕсли;
	
	Для Каждого Тип Из Типы Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Значение = Неопределено;
			МетаданныеСсылки = Метаданные.НайтиПоТипу(Тип);
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеСсылки)
			 Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеСсылки)
			 Или ОбщегоНазначения.ЭтоПланСчетов(МетаданныеСсылки)
			 Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеСсылки) Тогда
				Значение = ОбщегоНазначения.ПредопределенныйЭлемент(МетаданныеСсылки.ПолноеИмя() + "." + ЗначениеСтрокой);
			ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеСсылки) Тогда
				МенеджерПеречисления = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеСсылки.ПолноеИмя());
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МенеджерПеречисления, ЗначениеСтрокой) Тогда
					Значение = МенеджерПеречисления[ЗначениеСтрокой];
				ИначеЕсли ВРег(ЗначениеСтрокой) = ВРег("ПустаяСсылка") Тогда
					Значение = МенеджерПеречисления.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			Если Значение <> Неопределено Тогда
				Возврат Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТипа.СодержитТип(Тип("Строка"))
	 Или ОписаниеТипа.СодержитТип(Тип("Число"))
	 Или ОписаниеТипа.СодержитТип(Тип("Дата"))
	 Или ОписаниеТипа.СодержитТип(Тип("Булево")) Тогда
		Возврат ОписаниеТипа.ПривестиЗначение(ЗначениеСтрокой);
	КонецЕсли;
	
	Если ОписаниеТипа.Типы().Количество() = 1 Тогда
		Попытка
			// Возможно это системное перечисление.
			Возврат Вычислить(Строка(ОписаниеТипа) + "." + ЗначениеСтрокой);
		Исключение
			// Обработка не требуется.
		КонецПопытки;
	КонецЕсли;
		
	Возврат ОписаниеТипа.ПривестиЗначение(ЗначениеСтрокой);
	
КонецФункции

Функция ОписаниеТипаПоИмени(Знач ИмяТипа)
	
	Если ИмяТипа = "ЛюбаяСсылка" Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, Документы.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, Перечисления.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, ПланыСчетов.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, ПланыВидовРасчета.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, БизнесПроцессы.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, Задачи.ТипВсеСсылки().Типы());
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа, ПланыОбмена.ТипВсеСсылки().Типы());
		
	ИначеЕсли ИмяТипа = "СправочникСсылка" Тогда
		
		ОписаниеТипа = Справочники.ТипВсеСсылки();
		
	ИначеЕсли ИмяТипа = "ДокументСсылка" Тогда
		
		ОписаниеТипа = Документы.ТипВсеСсылки();
		
	ИначеЕсли ИмяТипа = "ПланВидовХарактеристикСсылка" Тогда
		
		ОписаниеТипа = ПланыВидовХарактеристик.ТипВсеСсылки();
		
	ИначеЕсли ИмяТипа = "ЗадачаСсылка" Тогда
		
		ОписаниеТипа = Задачи.ТипВсеСсылки();
		
	ИначеЕсли СтрНайти(ИмяТипа, "Характеристика.") = 1 Тогда
		
		ОписаниеТипа = Метаданные.ПланыВидовХарактеристик[Сред(ИмяТипа, СтрДлина("Характеристика.") + 1)].Тип;
		
	ИначеЕсли СтрНайти(ИмяТипа, "Строка") = 1 Тогда  // ИмяТипа = Строка(20, Фиксированная)
		
		ПараметрыСтроки = ПолучитьСтрокуМеждуМаркерами(ИмяТипа, "(", ")");
		Если ПустаяСтрока(ПараметрыСтроки) Тогда
			ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Иначе
			ПозицияРазделителя = СтрНайти(ПараметрыСтроки, ",");
			Если ПозицияРазделителя = 0 Тогда
				ДлинаСтроки = Число(ПараметрыСтроки);
				КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки);
			Иначе
				ДлинаСтроки = Число(Лев(ПараметрыСтроки, ПозицияРазделителя - 1));
				ДопустимаяДлинаСтроки = СокрЛП(Сред(ПараметрыСтроки, ПозицияРазделителя + 1));
				КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина[ДопустимаяДлинаСтроки]);
			КонецЕсли;
			ОписаниеТипа = Новый ОписаниеТипов("Строка",,,, КвалификаторСтроки);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТипа, "Число") = 1 Тогда // Число(15.3, Неотрицательный)
		
		ПараметрыЧисла = ПолучитьСтрокуМеждуМаркерами(ИмяТипа, "(", ")");
		Если ПустаяСтрока(ПараметрыЧисла) Тогда
			ОписаниеТипа = Новый ОписаниеТипов("Число");
		Иначе
			ПозицияРазделителя = СтрНайти(ПараметрыЧисла, ",");
			Если ПозицияРазделителя = 0 Тогда
				ПозицияТочки = СтрНайти(ПараметрыЧисла, ".");
				Если ПозицияТочки = 0 Тогда
					ЦелаяЧасть = Число(ПараметрыЧисла);
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЦелаяЧасть);
				Иначе
					ЦелаяЧасть = Число(ПараметрыЧисла);
					ДробнаяЧасть = Число(Сред(ПараметрыЧисла, ПозицияТочки + 1));
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЦелаяЧасть, ДробнаяЧасть);
				КонецЕсли;
			Иначе
				ДопустимыйЗнакЧисла = СокрЛП(Сред(ПараметрыЧисла, ПозицияРазделителя + 1));
				ПараметрыЧисла = Лев(ПараметрыЧисла, ПозицияРазделителя - 1);
				ПозицияТочки = СтрНайти(ПараметрыЧисла, ".");
				Если ПозицияТочки = 0 Тогда
					ЦелаяЧасть = Число(ПараметрыЧисла);
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЦелаяЧасть, 0, ДопустимыйЗнак[ДопустимыйЗнакЧисла]);
				Иначе
					ЦелаяЧасть = Число(Лев(ПараметрыЧисла, ПозицияТочки - 1));
					ДробнаяЧасть = Число(Сред(ПараметрыЧисла, ПозицияТочки + 1));
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЦелаяЧасть, ДробнаяЧасть, ДопустимыйЗнак[ДопустимыйЗнакЧисла]);
				КонецЕсли;
			КонецЕсли;
			ОписаниеТипа = Новый ОписаниеТипов("Число",,, КвалификаторЧисла);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТипа, "Дата") = 1 Тогда // Дата(ДатаВремя)
		
		ПараметрыДаты = ПолучитьСтрокуМеждуМаркерами(ИмяТипа, "(", ")");
		Если ПустаяСтрока(ПараметрыДаты) Тогда
			ОписаниеТипа = Новый ОписаниеТипов("Дата");
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты[ПараметрыДаты]));
		КонецЕсли;
		
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов(ИмяТипа);
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипа(Тип)
	
	Типы = Новый Массив;
	Типы.Добавить(Тип);
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

Функция ОпределитьЦвет(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Цвет") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипЗначения = Тип("Строка") Тогда
		
		Если СтрНайти(Значение, ",") = 0 Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЦветаСтиля, Значение) Тогда
				Возврат ЦветаСтиля[Значение];
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(WebЦвета, Значение) Тогда
				Возврат WebЦвета[Значение];
			КонецЕсли;
		КонецЕсли;
		
		КомпонентыЦвета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение);
		Если КомпонентыЦвета.Количество() = 3 Тогда
			Возврат Новый(Тип("Цвет"), КомпонентыЦвета);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Новый Цвет();
	
КонецФункции

Функция ОпределитьШрифт(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Шрифт") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипЗначения = Тип("Строка") Тогда
		
		Если СтрНайти(Значение, ",") = 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШрифтыСтиля, Значение)Тогда
			Возврат ШрифтыСтиля[Значение];
		КонецЕсли;
		
		КомпонентыШрифта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение);
		Если КомпонентыШрифта.Количество() <= 7 Тогда
			Возврат Новый(Тип("Шрифт"), КомпонентыШрифта);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Новый Шрифт();
	
КонецФункции

Функция ОпределитьРамку(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Рамка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипЗначения = Тип("Строка") Тогда
		
		Если СтрНайти(Значение, ",") = 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РамкиСтиля, Значение)Тогда
			Возврат РамкиСтиля[Значение];
		КонецЕсли;
		
		КомпонентыРамки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение);
		Если КомпонентыРамки.Количество() <= 2 Тогда
			КомпонентыРамки[0] = ТипРамкиЭлементаУправления[КомпонентыРамки[0]];
			Возврат Новый(Тип("Рамка"), КомпонентыРамки);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОписаниеТипа(Тип("Рамка")).ПривестиЗначение();
	
КонецФункции

Функция ОпределитьСочетаниеКлавиш(Строка)
	
	Alt = Ложь;
	Ctrl = Ложь;
	Shift = Ложь;
	ОсновнаяКлавиша = Неопределено;
	
	Клавиши = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "+");
	Для каждого КлавишаСочетания Из Клавиши Цикл
		Если КлавишаСочетания = "Alt" Тогда
			Alt = Истина;
		ИначеЕсли КлавишаСочетания = "Ctrl" Тогда
			Ctrl = Истина;
		ИначеЕсли КлавишаСочетания = "Shift" Тогда
			Shift = Истина;
		Иначе
			ОсновнаяКлавиша = КлавишаСочетания;
		КонецЕсли;
	КонецЦикла;
	
	Если ОсновнаяКлавиша = Неопределено Тогда
		ОсновнаяКлавиша = Клавиша.Нет;
	Иначе
		ОсновнаяКлавиша = Клавиша[ОсновнаяКлавиша];
	КонецЕсли;
	
	Возврат Новый СочетаниеКлавиш(ОсновнаяКлавиша, Alt, Ctrl, Shift);
	
КонецФункции

Функция ПолучитьСтрокуМеждуМаркерами(Знач Текст, НачальныйМаркер, КонечныйМаркер)
	
	ПозицияНачальногоМаркера = Найти(Текст, НачальныйМаркер);
	Если ПозицияНачальногоМаркера = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = Сред(Текст, ПозицияНачальногоМаркера + СтрДлина(НачальныйМаркер));
	ПозицияКонечногоМаркера = Найти(Текст, КонечныйМаркер);
	Если ПозицияКонечногоМаркера = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(Текст, ПозицияКонечногоМаркера - 1);
	
КонецФункции

Процедура ДополнитьСписокЗначений(Приемник, Источник)
	
	Для Каждого Значение Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
