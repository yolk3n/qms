#Область  СлужебныеФункции


Функция ПолучитьНовыйКодСтроки(ИдентификаторСтроки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтроки",ИдентификаторСтроки);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияТребованийОтделений.КодСтроки) КАК КодСтроки,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ИдентификаторСтроки = &ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияТребованийОтделений.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Кодстроки+1;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

Процедура РазбитьСтрокуРегистраСостоянияТребованийНаДве(Ключ,КоличествоОставить,ОчиститьОтпускВОтделение=Ложь,КодСтроки=0,ОчиститьПриходнуюНакладную=Ложь) Экспорт
	
	
	Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.ИдентификаторСтроки.Установить(Ключ.ИдентификаторСтроки);
	Рег.Отбор.КодСтроки.Установить(Ключ.КодСтроки);
	Рег.Прочитать();
	СтрР=Рег[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтроки",Ключ.ИдентификаторСтроки);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияТребованийОтделений.КодСтроки) КАК КодСтроки,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ИдентификаторСтроки = &ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияТребованийОтделений.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КодСтроки=ПолучитьНовыйКодСтроки(Ключ.ИдентификаторСтроки);
	
	НовыйМенеджер=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НовыйМенеджер,СтрР);
	НовыйМенеджер.КодСтроки=КодСтроки;
	НовыйМенеджер.Количество=Ключ.Количество-КоличествоОставить;
	Если ОчиститьПриходнуюНакладную Тогда
		НовыйМенеджер.ПриходнаяНакладная=Документы.ОтпускТоваровВОтделение.ПустаяСсылка();
	КонецЕсли;	
	Если ОчиститьОтпускВОтделение Тогда
		НовыйМенеджер.ДокументПередачиВОтделение=Документы.ОтпускТоваровВОтделение.ПустаяСсылка();
	КонецЕсли;	
	НовыйМенеджер.Записать(Истина);
	
	Менеджер=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Менеджер,СтрР);
	Менеджер.Количество=КоличествоОставить;
	Менеджер.Записать(Истина);

	
КонецПроцедуры	

Функция ПолучитьКоличествоВрегистре(ИдентификаторСтроки, КодСтроки) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтроки",ИдентификаторСтроки);
	Запрос.УстановитьПараметр("Кодстроки",КодСтроки);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ИдентификаторСтроки = &ИдентификаторСтроки
	|	И СостоянияТребованийОтделений.КодСтроки = &КодСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции	

#КонецОбласти


#Область ТребованияОтделений

Процедура ПроверитьОдноТребованиеОтделенияНаОшибки(СсылкаНаОбъект,Исправлять=Ложь,ДублироватьВЖурнал=Ложь) Экспорт

    Элемент = СсылкаНаОбъект.ПолучитьОбъект();
	
	Если Ложь Тогда	Элемент=Документы.ТребованиеОтделения.СоздатьДокумент(); КонецЕсли;
	
	ЕстьОшибки=Ложь;
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.Требование.Установить(СсылкаНаОбъект);
	Рег.Прочитать();
	Для Каждого Стр из Рег Цикл
		СтрН=ССылкаНаОбъект.Товары.Найти(Стр.ИдентификаторСтроки,"ИдентификаторСтроки");
		Если СтрН=Неопределено Тогда
			ЕстьОшибки=Истина;
			ТекстСообщения="Товар с идентифкатором "+Стр.ИдентификаторСтроки+" обнаружен в регистре ""Состояния требований отделений"", но отсутствует в документе "+СсылкаНаОбъект;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
			Если ДублироватьВЖурнал Тогда
				ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Ошибка,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
			КонецЕсли;	
		Иначе
			Если НЕ СтрН.Номенклатура=Стр.НоменклатураЗаказа Тогда
				ЕстьОшибки=Истина;
				ТекстСообщения="Товар с идентифкатором "+Стр.ИдентификаторСтроки+" номенклатра закза регистре ""Состояния требований отделений"" не соответствует данным в документе "+СсылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
				Если ДублироватьВЖурнал Тогда
					ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Ошибка,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
				КонецЕсли;	
				
			Конецесли;
		КонецЕсли;	
	КонецЦикла;	
	
	
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.ИдентификаторСтроки.Использование=Истина;
	ЗаписыватьДокумент=Ложь;
	Для Каждого Стр из Элемент.Товары Цикл
		Рег.Отбор.ИдентификаторСтроки.Значение=Стр.ИдентификаторСтроки;
		Рег.Прочитать();   
		Записывать=Ложь;
		Если Стр.Отменено Тогда
			Если Рег.Количество()=0 Тогда
				ТекстСообщения="В строке "+Стр.НомерСтроки+" позиция по которой отстутствуют записи в регистре ""Состояния требований отделений"". Документ: "+СсылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
				Если ДублироватьВЖурнал Тогда
					ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
				КонецЕсли;	
				
				Если Исправлять Тогда
					Записывать=Истина;
					Запись = Рег.Добавить();
					ЗаполнитьЗначенияСвойств(Запись,Стр);
					Запись.НоменклатураЗаказа=Стр.Номенклатура;
					Запись.Требование=СсылкаНаОбъект;
					Запись.ФормализованноеТребование=СсылкаНаОбъект;
					Запись.Состояние=Перечисления.СостоянияТребований.Отменено;
					Запись.Записать(Истина);
					ТекстСообщения="Исправлено автоматически.";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
				КонецЕсли;	    
				
				РегЗапись=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегЗапись,Стр);
				РегЗапись.Прочитать();
				Если РегЗапись.Выбран() Тогда
					ТекстСообщения="В строке "+Стр.НомерСтроки+" регистре сведений ""Состояния требований отделений"".  Обнаружен отмененная позиция в буфере закупки. Идентификатор строки "+Стр.ИдентификаторСтроки+" код строки "+Стр.КодСтроки+"Документ: "+СсылкаНаОбъект;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
					Если ДублироватьВЖурнал Тогда
						ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
					КонецЕсли;	
					Если Исправлять Тогда
						РегЗапись.Удалить();    
						ТекстСообщения="Исправлено автоматически.";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
					КонецЕсли;	
				КонецЕсли;	
				
				
			ИначеЕсли Рег.Количество()>0 Тогда
				Для Каждого СтрР из Рег Цикл  
					
					РегЗапись=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(РегЗапись,СтрР);
					РегЗапись.Прочитать();
					Если РегЗапись.Выбран() Тогда
						ТекстСообщения="В строке "+Стр.НомерСтроки+" регистре сведений ""Состояния требований отделений"".  Обнаружен отмененная позиция в буфере закупки. Идентификатор строки "+СтрР.ИдентификаторСтроки+" код строки "+СтрР.КодСтроки+"Документ: "+СсылкаНаОбъект;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
						Если ДублироватьВЖурнал Тогда
							ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
						КонецЕсли;	
						Если Исправлять Тогда
							РегЗапись.Удалить();
							ТекстСообщения="Исправлено автоматически.";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
						КонецЕсли;	
					КонецЕсли;	
					
					Если НЕ СтрР.Состояние=Перечисления.СостоянияТребований.Отменено Тогда
						ТекстСообщения="В строке "+Стр.НомерСтроки+" отмененная позиция по которой есть записи регистра сведений ""Состояния требований отделений"". Документ: "+СсылкаНаОбъект+" идентификатор строки "+СтрР.ИдентификаторСтроки+" код строки "+СтрР.КодСтроки;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
						Если ДублироватьВЖурнал Тогда
							ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
						КонецЕсли;	
						Если Исправлять Тогда
							СтрР.Состояние=Перечисления.СостоянияТребований.Отменено;
							СтрР.ФормализованноеТребование=СсылкаНаОбъект;
							Записывать=Истина;
							ТекстСообщения="Исправлено автоматически.";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		Иначе
			Если НЕ Стр.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета Тогда
					ТекстСообщения="В строке "+Стр.НомерСтроки+" единица измерения не совпадает с с основной единицей учета. Документ: "+СсылкаНаОбъект;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
					Если ДублироватьВЖурнал Тогда
						ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
					КонецЕсли;	
					Если Исправлять Тогда
						Стр.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета;
						ЗаписыватьДокумент=Истина;
						ТекстСообщения="Исправлено автоматически.";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
					КонецЕсли;	
			КонецЕсли;	
			Если Рег.Количество()=0 Тогда
				ТекстСообщения="В строке "+Стр.НомерСтроки+" позиция по которой отстутствуют записи в регистре ""Состояния требований отделений"". Документ: "+СсылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
				Если ДублироватьВЖурнал Тогда
					ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
				КонецЕсли;	
				Если Исправлять Тогда
					Запись=Рег.Добавить();  
					Записывать=Истина;
					ЗаполнитьЗначенияСвойств(Запись,Стр);
					Запись.НоменклатураЗаказа=Стр.Номенклатура;
					Запись.Требование=СсылкаНаОбъект;
					Запись.ФормализованноеТребование=СсылкаНаОбъект;
					Запись.Состояние=Перечисления.СостоянияТребований.Требование;
					Запись.Записать(Истина);
					ТекстСообщения="Исправлено автоматически.";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
				КонецЕсли;	
			Иначе   
				КолВо=Рег.Итог("Количество");
				Если НЕ Стр.КоличествоВЕдиницахИзмерения=КолВо Тогда
					ТекстСообщения="В строке "+Стр.НомерСтроки+" количество по строке "+Стр.КоличествоВЕдиницахИзмерения+" не совпадает с количеством регистре ""Состояния требований отделений""."+КолВо+" Документ: "+СсылкаНаОбъект;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
					Если ДублироватьВЖурнал Тогда
						ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Информация,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
					КонецЕсли;	
					Если Исправлять Тогда
						Если Рег.Количество()=1 Тогда
							Рег[0].Количество=Стр.КоличествоВЕдиницахИзмерения;
							Записывать=Истина;
							ТекстСообщения="Исправлено автоматически.";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
							
						Иначе     
							ЕстьОшибки=Истина;
							ТекстСообщения="Выбранная строка разбита на "+Рег.Количество()+". Исправьте руками.";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				
				Для Каждого СтрР из Рег Цикл
					Если СтрР.Требование<>СсылкаНаОбъект Тогда
							ЕстьОшибки=Истина;
							ТекстСообщения="В строке "+Стр.НомерСтроки+" в регистре ""Состояния требований отделений"" обнаружена номенклатура с идентификатором из документа, но требованием не соответствующим Документу: "+СсылкаНаОбъект;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
							Если ДублироватьВЖурнал Тогда
								ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Ошибка,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
							КонецЕсли;	
					КонецЕсли;	
					Если СтрР.Состояние=Перечисления.СостоянияТребований.ВЗакупке Тогда
						РегЗапись=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(РегЗапись,СтрР);
						РегЗапись.Прочитать();
						Если НЕ РегЗапись.Выбран() Тогда
							ТекстСообщения="В строке "+Стр.НомерСтроки+" номенклатуре регистре ""Состояния требований отделений"".В состоянии в закупке, а в буфере закупки отсутствует. Документ: "+СсылкаНаОбъект;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
							Если ДублироватьВЖурнал Тогда
								ЗаписьЖурналаРегистрации("Проверка.ТребованияОтделений",УровеньЖурналарегистрации.Ошибка,Метаданные.Документы.ТребованиеОтделения,СсылкаНаОбъект,ТекстСообщения);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		Если Записывать Тогда
			Рег.Записать(Истина);
		КонецЕсли;	
	КонецЦикла;	
	
	Если НЕ Элемент.ПроверенНаОшибки И НЕ ЕстьОшибки Тогда
		Элемент.ПроверенНаОшибки=Истина;
		ЗаписыватьДокумент =Истина;
	КонецЕсли;	
	Если ЗаписыватьДокумент Тогда
		Элемент.ОбменДанными.Загрузка=Истина;
		Элемент.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;	
КонецПроцедуры	



#Конецобласти

#Область БуферЗакупки

Процедура ПроверитьИИсправитьБуферЗакупки(Исправлять) Экспорт
	
	ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.Проверяю все ли состяния требования в состоянии ""В закупке"" в буфере");
	Запрос = Новый Запрос; 
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	|	СостоянияТребованийОтделений.Требование КАК Требование,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	|	СостоянияТребованийОтделений.Состояние КАК Состояние,
	|	СостоянияТребованийОтделений.Описание КАК Описание,
	|	СостоянияТребованийОтделений.Количество КАК Количество,
	|	СостоянияТребованийОтделений.ФормализованноеТребование КАК ФормализованноеТребование,
	|	СостоянияТребованийОтделений.ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку,
	|	СостоянияТребованийОтделений.ДатаЗаказа КАК ДатаЗаказа,
	|	СостоянияТребованийОтделений.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СостоянияТребованийОтделений.ПриходнаяНакладная КАК ПриходнаяНакладная,
	|	СостоянияТребованийОтделений.ДокументПередачиВОтделение КАК ДокументПередачиВОтделение
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияТребований.ВЗакупке)";	
	Выборка = Запрос.Выполнить().Выгрузить();
	Рег = РегистрыСведений.сок_БуферДляЗакупки.СоздатьНаборЗаписей();
	Для Каждого СтрВ из Выборка Цикл
		Рег.Отбор.ИдентификаторСтроки.Установить(СтрВ.ИдентификаторСтроки);
		Рег.Отбор.Кодстроки.Установить(СтрВ.КодСтроки);
		Рег.Прочитать();
		Если Рег.Количество()=0 Тогда
			ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.1.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" находится в стосянии ""В закупке"", но в буфере отсутствует.");
			Если Исправлять Тогда
				РегБуфера=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегБуфера,СтрВ);
				
				Попытка
					РегБуфера.Записать(Истина);
					ОбщегоНазначенияклиентСервер.СообщитьПользователю("	Добавили в буфер закупок.");
				Исключение
					ОбщегоНазначенияклиентСервер.СообщитьПользователю(" !!!! Не удалось добавить в буфер закупки !!!");
				КонецПопытки	
			конецЕсли;	
		ИначеЕсли Рег.Количество()>1 Тогда
			ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.2.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" присутствует более доного раза в регистре. Исправьте руками (удалите лишний)");
		Иначе
			СтрР=Рег[0];
			Записать=Ложь;
			
			Если СтрР.НоменклатураЗаказа<>СтрВ.НоменклатураЗаказа Тогда
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.3.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" номенклатура заказа не совпадает с данными в буфере закупок.");
				СтрР.НоменклатураЗаказа=СтрВ.НоменклатураЗаказа;
				Записать=Истина;
			КонецЕсли;
			
			Если СтрР.номенклатура<>СтрВ.Номенклатура Тогда
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.4.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" номенклатура не совпадает с данными в буфере закупок.");
				СтрР.Номенклатура=СтрВ.Номенклатура;
				Записать=Истина;
			КонецЕсли;
			
			Если СтрР.Количество<>СтрВ.Количество Тогда
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.5.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" количество не совпадает с данными в буфере закупок.");
				СтрР.Количество=СтрВ.Количество;
				Записать=Истина;
			КонецЕсли;

			Если СтрР.Требование<>СтрВ.Требование Тогда
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.6.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" Требование не совпадает с данными в буфере закупок.");
				СтрР.Требование=СтрВ.Требование;
				Записать=Истина;
			КонецЕсли;

			Если СтрР.ДатаЗаказа<>СтрВ.ДатаЗаказа Тогда
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("1.7.Элемент регистра ""Состояния требований отделений "" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" Дата заказа не совпадает с данными в буфере закупок.");
				СтрР.ДатаЗаказа=СтрВ.ДатаЗаказа;
				Записать=Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрР.ЗаказПоставщику) Тогда
				СтрР.ЗаказПоставщику=Документы.ЗаказПоставщику.ПустаяСсылка();
				Записать=Истина;
			КонецЕсли;	  
			
			Если ЗначениеЗаполнено(СтрР.ПриходнаяНакладная) Тогда
				СтрР.ПриходнаяНакладная=Документы.ПоступлениеТоваров.ПустаяСсылка();
				Записать=Истина;
			КонецЕсли;	  
			
			Если ЗначениеЗаполнено(СтрР.ДокументПередачиВОтделение) Тогда
				СтрР.ДокументПередачиВОтделение=Документы.ОтпускТоваровВОтделение.ПустаяСсылка();
				Записать=Истина;
			КонецЕсли;	
			
			Если Записать И Исправлять Тогда
				Попытка
					Рег.Записать(Истина);
					ОбщегоНазначенияклиентСервер.СообщитьПользователю("		Записали изменения ошибок 1.3- 1.7");
				Исключение
					ОбщегоНазначенияклиентСервер.СообщитьПользователю("		!!! Не удавлось записать изменения ошибок 1.3- 1.7");

				КонецПопытки	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	ОбщегоНазначенияклиентСервер.СообщитьПользователю("2.Проверяю все ли элементы буфера в регистре ""Состяния требований отделений"" в состоянии ""В закупке""  ");
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
	|	сок_БуферДляЗакупки.Требование КАК Требование,
	|	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
	|	сок_БуферДляЗакупки.Количество КАК Количество,
	|	сок_БуферДляЗакупки.Пометка КАК Пометка,
	|	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
	|	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
	|	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки,
	|	сок_БуферДляЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа
	|ИЗ
	|	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки";
	Выборка  = Запрос.Выполнить().Выгрузить();
	Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Для Каждого СтрВ из Выборка Цикл
		Рег.Отбор.ИдентификаторСтроки.Установить(СтрВ.ИдентификаторСтроки);
		Рег.Отбор.КодСтроки.Установить(СтрВ.КодСтроки);
		Рег.Прочитать();
		Если Рег.Количество()=1 Тогда
		ИначеЕсли Рег.Количество()>1 Тогда
			ОбщегоНазначенияклиентСервер.СообщитьПользователю("2.1.Элемент регистра ""Буфер для закупок"" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" присутствует более одного раза в регистре ""Состояния требований отделений "" . Исправьте руками (удалите лишний)");
		Иначе
			ОбщегоНазначенияклиентСервер.СообщитьПользователю("2.2.Элемент регистра ""Буфер для закупок"" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" остутствет в регистре ""Состояния требований отделений "" . Исправьте руками (удалите лишний)");
			Если Исправлять Тогда
				РегБ=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегБ,СтрВ);
				РегБ.Прочитать();
				Если РегБ.Выбран() Тогда
					РегБ.Удалить();
					ОбщегоНазначенияклиентСервер.СообщитьПользователю("		Удалили из буфера закупок.");
				Иначе
					ОбщегоНазначенияклиентСервер.СообщитьПользователю("		Не удалось удалить из буфера закупок.");
				конецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
			
	КонецЦикла;	
	
	
	ОбщегоНазначенияклиентСервер.СообщитьПользователю("3.Проверяю остутствие элементов буфера закупок в подтвержденных заказах поставщику");
	//Перечисления.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
	|	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ Буфер
	|ИЗ
	|	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТоварыТребований.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	ЗаказПоставщикуТоварыТребований.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТоварыТребований.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗаказПоставщикуТоварыТребований.КодСтроки КАК КодСтроки,
	|	ЗаказПоставщикуТоварыТребований.Требование КАК Требование,
	|	ЗаказПоставщикуТоварыТребований.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику.ТоварыТребований КАК ЗаказПоставщикуТоварыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Буфер КАК Буфер
	|		ПО ЗаказПоставщикуТоварыТребований.ИдентификаторСтроки = Буфер.ИдентификаторСтроки
	|			И ЗаказПоставщикуТоварыТребований.КодСтроки = Буфер.КодСтроки
	|ГДЕ
	|	ЗаказПоставщикуТоварыТребований.Ссылка.НовыйСпособУчета
	|	И ЗаказПоставщикуТоварыТребований.Ссылка.Проведен
	|	И НЕ ЗаказПоставщикуТоварыТребований.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)";
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрВ из Выборка цикл
		ОбщегоНазначенияклиентСервер.СообщитьПользователю("3.1.Элемент регистра ""Буфер для закупок"" идентификатор "+СтрВ.ИдентификаторСтроки+" код строки "+СтрВ.КодСтроки+" присутствует в Заказе поставщику "+СтрВ.Ссылка+", который в состоянии "+СтрВ.Ссылка.Статус+".");	
		Если Исправлять Тогда
			РегистрБуфера=РегистрыСведений.сок_БуферДляЗакупки.СоздатьНаборЗаписей();
			РегистрБуфера.Отбор.ИдентификаторСтроки.Установить(СтрВ.ИдентификаторСтроки);
			РегистрБуфера.Отбор.КодСтроки.Установить(СтрВ.КодСтроки);
			РегистрБуфера.Прочитать();
			Если РегистрБуфера.Количество()>0  Тогда
				РегистрБуфера.Очистить();
				РегистрБуфера.Записать(Истина);
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("		Удалили из буфера закупок.");
			Иначе     
				ОбщегоНазначенияклиентСервер.СообщитьПользователю("		Не удалось удалить из буфера закупок.");
			КонецЕсли;	
			РегистрТребований=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
			РегистрТребований.Отбор.ИдентификаторСтроки.Установить(СтрВ.ИдентификаторСтроки);
			РегистрТребований.Отбор.КодСтроки.Установить(СтрВ.КодСтроки);
			РегистрТребований.Прочитать();
			Если РегистрТребований.Количество()>0  Тогда
				ЗаписыватьРегистрТребований=Ложь;
				Для Каждого СтрР из РегистрТребований цикл
					Если СтрР.Состояние = Перечисления.СостоянияТребований.ВЗакупке Тогда
						СтрР.Состояние = Перечисления.СостоянияТребований.Заказано;
						ЗаписыватьРегистрТребований=Истина;
					КонецЕсли;	
				КонецЦикла;	
				Если ЗаписыватьРегистрТребований Тогда
					РегистрТребований.Записать(Истина);
				КонецЕсли;	
			КонецЕсли;
			
		Конецесли;	
	КонецЦикла;	
	
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыПоставщикам    

Функция ЗаказПоставщику_ДозаполнитьНедостающиеТоварыТребований(Элемент) Экспорт
	Если Ложь Тогда Элемент=Документы.ЗаказПоставщику.СоздатьДокумент(); Конецесли;
	
	
	ЕстьИзменения=Ложь;
	Для Каждого стрТ из Элемент.Товары Цикл  
		Если НЕ СтрТ.Отменено И НЕ СтрТ.Номенклатура.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда
			Списать=СтрТ.КоличествоВЕдиницахИзмерения;
			Масс = Элемент.ТоварыТребований.НайтиСтроки(Новый Структура("Номенклатура",СтрТ.Номенклатура));
			Для Каждого СтрМ из Масс Цикл
				Списать=Списать-СтрМ.Количество;
			КонецЦикла;	
			Если Списать>0 Тогда
				СтрЭ=Элемент.ТоварыТребований.Добавить();
				СтрЭ.ИдентификаторСтроки=СокрЛП(Новый УникальныйИдентификатор());
				СтрЭ.КодСтроки=0;
				СтрЭ.Количество=Списать;
				СтрЭ.Номенклатура=СтрТ.Номенклатура;
				СтрЭ.НоменклатураЗаказа=СтрТ.Номенклатура;
				СтрЭ.Требование=Элемент.Ссылка;
				ЕстьИзменения=Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Возврат ЕстьИзменения;
КонецФункции

#КонецОбласти

#Область ПриходныеНакладные




Функция ДокументПоступленияЗаполненИдентификаторамиПравильно(СсылкаНаОбъект,ТолькоПоЗаказу,ПроверятьПриходнуюНакладную) Экспорт
	
	Если Ложь Тогда СсылкаНаОбъект=Документы.ПоступлениеТоваров.СоздатьДокумент(); Конецесли;
	
	Отказ=Ложь;
	
	//Проверим, что бы небыло без номенклатуры
	Для Каждого Стр из СсылкаНаОбъект.ТоварыТребований Цикл
		
		Масс=СсылкаНаОбъект.Товары.НайтиСтроки(Новый структура("Номенклатура",Стр.Номенклатура));
		Если Масс.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Строка "+Стр.НомерСтроки+" в табличной части ""Товары требовани"" найдена номенклатура "+СТр.Номенклатура+", отсутствующая в табличной части товары.Проверка не пройдена. Документ "+СсылкаНаОбъект.Ссылка,СсылкаНаОбъект.Ссылка,,,Отказ);
		КонецЕсли;	
	КонецЦикла;	
	
	//Если СсылкаНаОбъект.Товары.Итог("КоличествоВЕдиницахИзмерения")<>СсылкаНаОбъект.ТоварыТребований.Итог("Количество") Тогда
	//	ОбщегоНазначения.СообщитьПользователю("Общее количество в табличной части ""Товары"" и товары требований не совпадает. Проверка не пройдена. Документ "+СсылкаНаОбъект.Ссылка,СсылкаНаОбъект.Ссылка);
	//	Возврат Ложь;
	//КонецЕсли;	
	
	
	ТЗ=СсылкаНаОбъект.Товары.Выгрузить();
	ТЗ.Свернуть("Номенклатура,БезТребования","КоличествоВЕдиницахИзмерения");
	ТТ=СсылкаНаОбъект.ТоварыТребований.Выгрузить();
	
	Для Каждого СтрТ из ТЗ Цикл
		Списать=СтрТ.КоличествоВЕдиницахИзмерения;
		Масс=ТТ.НайтиСтроки(Новый структура("Номенклатура",СтрТ.Номенклатура));
		Для Каждого СтрМ из Масс Цикл
			Если (СтрТ.БезТребования И СтрМ.Требование=СсылкаНаОбъект.Ссылка) ИЛИ
				 (НЕ СтрТ.БезТребования И НЕ СтрМ.Требование=СсылкаНаОбъект.Ссылка) Тогда
			 Иначе
				 Продолжить;
			 КонецЕсли;
			 КолВо=Мин(Списать,СтрМ.Количество);
			 СтрМ.Количество=СтрМ.Количество-КолВо;
			 Списать=Списать-КолВо;
			Если Списать=0 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Списать>0 Тогда
			ТекстСообщения="По номенклатуре "+СтрТ.Номенклатура+" Безтребования="+СтрТ.БезТребования+" в табличной части ""Товары требований"" не хватает "+Списать+" "+СтрТ.Номенклатура.ОсновнаяЕдиницаУчета;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект.Ссылка,,,Отказ);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ТТ.Итог("Количество")>0 Тогда
		Для Каждого Стр из ТТ Цикл
			Если Стр.Количество>0 Тогда
				ТекстСообщения="По номенклатуре "+Стр.Номенклатура+" в табличной части ""Товары требований"" не излишек "+Стр.Количество+" "+Стр.Номенклатура.ОсновнаяЕдиницаУчета;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект.Ссылка,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	
	//ТЗ=СсылкаНаОбъект.Товары.Выгрузить();
	//ТЗ.Свернуть("Номенклатура,БезТребования","КоличествоВЕдиницахИзмерения");
	//Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	//Для Каждого СтрТ из ТЗ Цикл
	//	Если СтрТ.БезТребования Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	Списать=СтрТ.КоличествоВЕдиницахИзмерения;
	//	Масс=СсылкаНаОбъект.ТоварыТребований.НайтиСтроки(Новый структура("Номенклатура",СтрТ.Номенклатура));
	//	МассивДляУдаления=Новый Массив;
	//	Для Каждого СтрМ из Масс Цикл
	//		
	//		Если СтрТ.БезТребования И СтрМ.Требование=СсылкаНаОбъект.Ссылка Тогда
	//			Продолжить;
	//		ИначеЕсли НЕ СтрТ.БезТребования И НЕ СтрМ.Требование=СсылкаНаОбъект.Ссылка Тогда	
	//		Иначе
	//			Продолжить;
	//		КонецЕсли;	
	//		
	//		
	//		Рег.Отбор.ИдентификаторСтроки.Установить(СтрМ.ИдентификаторСтроки);
	//		Рег.Отбор.КодСтроки.Установить(СтрМ.КодСтроки);
	//		Рег.Прочитать();                                     
	//		
	//		Если Рег.Количество()=0 ИЛИ Рег.Количество()>1 Тогда 
	//			Возврат Ложь;
	//		КонецЕсли;	
	//		СтрР=Рег[0];
	//		Если ТолькоПоЗаказу И Рег[0].ЗаказПоставщику<>СсылкаНаОбъект.ЗаказПоставщику Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//		Если НЕ ЗначениеЗаполнено(Рег[0].ПриходнаяНакладная) И ПроверятьПриходнуюНакладную Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//		
	//		Если НЕ Рег[0].ПриходнаяНакладная=ссылкаНаОбъект И ПроверятьПриходнуюНакладную Тогда
	//			Возврат Ложь;
	//		Конецесли;     
	//		
	//		Если СтрМ.Количество=Рег[0].Количество Тогда
	//			Списать=Списать-СтрМ.Количество;
	//		Иначе
	//			Возврат ложь;
	//		КонецЕсли;	
	//	КонецЦикла;	       
	//	
	//	Если Списать<>0 Тогда
	//		ОбщегоНазначения.СообщитьПользователю("В табличной части ""Товары требовани"" найдена номенклатура "+СтрТ.Номенклатура+", в количестве превышающем требуемое "+Списать+".Проверка не пройдена. Документ "+СсылкаНаОбъект.Ссылка,СсылкаНаОбъект.Ссылка,,,Отказ);
	//	КонецЕсли;	
	//КонецЦикла;
	
	Возврат Не Отказ;
КонецФункции	


Процедура СвернутьТоварыТребований(ТекущийОбъект) Экспорт
	ТЗ=ТекущийОбъект.ТоварыТребований.Выгрузить();
	ТЗ.Свернуть("Установлен,Номенклатура,НоменклатураЗаказа,Требование,ИдентификаторСтроки,КодСтроки","Количество");
	ТекущийОбъект.ТоварыТребований.Загрузить(ТЗ);
КонецПроцедуры	

Функция ЗаполнитьТЧТоварыТребованийВПоступлениеТоваров(Элемент,ПоЗаказу) Экспорт
	
	Если Ложь Тогда Элемент=Документы.ПоступлениеТоваров.СоздатьДокумент(); Конецесли;
	Отказ = Ложь;

	ТЗ=Элемент.ТоварыТребований.Выгрузить();
	
	Элемент.ТоварыТребований.Очистить();
	Запрос = новый Запрос;
	Если Элемент.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Дата",КонецДня(Элемент.Дата));
	Иначе	
		Запрос.УстановитьПараметр("Дата",Новый Граница(Элемент.Ссылка.МоментВремени(),ВидГраницы.Исключая));
	КонецЕсли;	
	Запрос.УстановитьПараметр("Номенклатура",Элемент.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Если ПоЗаказу Тогда
		Запрос.УстановитьПараметр("ЗаказПоставщику",Элемент.ЗаказПоставщику);
		Запрос.Текст=
		"ВЫБРАТЬ
		|	сок_ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		|	сок_ЗаказыПоставщикамОстатки.НоменклатураЗаказа КАК НоменклатураЗаказа,
		|	сок_ЗаказыПоставщикамОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	сок_ЗаказыПоставщикамОстатки.Требование КАК Требование,
		|	сок_ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	сок_ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.сок_ЗаказыПоставщикам.Остатки(
		|			&Дата,
		|			ЗаказПоставщику = &ЗаказПоставщику
		|				И Номенклатура В (&Номенклатура)) КАК сок_ЗаказыПоставщикамОстатки";
	Иначе
		Запрос.Текст=
		"ВЫБРАТЬ
		|	сок_ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		|	сок_ЗаказыПоставщикамОстатки.НоменклатураЗаказа КАК НоменклатураЗаказа,
		|	сок_ЗаказыПоставщикамОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	сок_ЗаказыПоставщикамОстатки.Требование КАК Требование,
		|	сок_ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	сок_ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.сок_ЗаказыПоставщикам.Остатки(
		|			&Дата,
		|			ЗаказПоставщику.ПоступленияБезЗаказа
		|				И Номенклатура В (&Номенклатура)) КАК сок_ЗаказыПоставщикамОстатки";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить();  
	
	Для Каждого СтрТ из Элемент.Товары Цикл
		Если СтрТ.БезТребования Тогда
			Масс=ТЗ.НайтиСтроки(Новый структура("Номенклатура,Требование",СтрТ.Номенклатура,Элемент.Ссылка));
			СтрДок=Элемент.ТоварыТребований.Добавить();
			Если Масс.Количество()=0 Тогда
				СтрДок.ИдентификаторСтроки=СокрЛП(новый УникальныйИдентификатор);
				СтрДок.Номенклатура=СтрТ.Номенклатура;
				СтрДок.НоменклатураЗаказа=СтрТ.Номенклатура;
				СтрДок.Требование=Элемент.Ссылка;
				СтрДок.Количество=СтрТ.КоличествоВЕдиницахИзмерения;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрДок,Масс[0]);
				СтрДок.Количество=СтрТ.КоличествоВЕдиницахИзмерения;
			КонецЕсли;
			СтрДок.Установлен=Истина;
		Иначе
			Списать=СтрТ.КоличествоВЕдиницахИзмерения;
			Масс=Выборка.НайтиСтроки(Новый структура("Номенклатура",СтрТ.Номенклатура));
			Для Каждого СтрМ из Масс Цикл
				КолВо=Мин(Списать, СтрМ.Количество);
				СтрМ.Количество=СтрМ.Количество-КолВо;
				Списать=Списать-КолВо;
				СтрДок=Элемент.ТоварыТребований.Добавить();
				ЗаполнитьЗначенияСвойств(СтрДок,СтрМ);
				СтрДок.Количество=КолВо;
				СтрДок.Установлен=Истина;
			КонецЦикла;	
			Если Списать>0 Тогда
				ОбщегоНазначения.СообщитьПользователю("По строке "+СтрТ.НомерСтроки+" номенклатура "+СтрТ.Номенклатура+" не удалось распределить по заказам в количестве "+Списать+" "+СтрТ.ЕдиницаИзмерения+", если осуществляется поставка больше, чем необходимо, это количество выделети в отдельную строку и установитье ""Товар без требования"".");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецФункции	


Процедура ПоступлениеТоваровПослеЗаписи(ТекущийОбъект) Экспорт
	
	Если Ложь Тогда ТекущийОбъект=Документы.ПоступлениеТоваров.СоздатьДокумент(); Конецесли;
	
	НачатьТранзакцию();
	Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.ОбменДанными.Загрузка=Истина;
	Для Каждого Стр из ТекущийОбъект.ТоварыТребований Цикл
		Рег.Отбор.ИдентификаторСтроки.Установить(Стр.ИдентификаторСтроки);
		Рег.Отбор.КодСтроки.Установить(0);
		Рег.Прочитать();    
		Если Рег.Количество()=0 И Стр.Требование=ТекущийОбъект.Ссылка Тогда
			РегМ = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегМ,Стр);
			РегМ.Состояние=Перечисления.СостоянияТребований.Заказано;
			РегМ.Записать(Истина);
			Продолжить;
		КонецЕсли;
		
		Если сок_Проверки.МожноРаботатьСУникальнойЗаписьюРегистраСостоянияТребований(Стр.ИдентификаторСтроки,Стр.КодСтроки,Рег,Ложь) Тогда
			Для Каждого СтрР из Рег Цикл
				Если ТекущийОбъект.Статус=Перечисления.сок_СостоянияПриходныхНакладных.Получено Тогда
					СтрР.Состояние=?(ЗначениеЗаполнено(СтрР.ДокументПередачиВОтделение),Перечисления.СостоянияТребований.Передано,Перечисления.СостоянияТребований.Поступило);
				Иначе
					СтрР.Состояние=Перечисления.СостоянияТребований.Заказано;
				КонецЕсли;	
				СтрР.Установлен=Стр.Установлен;
				СтрР.ПриходнаяНакладная=ТекущийОбъект.Ссылка;
				Если ЗначениеЗаполнено(ТекущийОбъект.ЗаказПоставщику) Тогда
					СтрР.ЗаказПоставщику=ТекущийОбъект.ЗаказПоставщику;
				КонецЕсли;	
			КонецЦикла;	
			Рег.Записать(Истина);
		КонецЕсли;	
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры	

#КонецОбласти 

#Область ПриходныеИсточникиФинансирования

//+22.06.2023 г. Чиков А.В.
Процедура сок_ПроведениеИсточникФинансированияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсточникФинансирования", Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ТЗТовары = Источник.Товары.Выгрузить();
	ТЗТовары.Свернуть("ИсточникФинансирования");
	
	Если ТЗТовары.Количество() > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю("В табличной части один или несколько источников финансирования отличаются от указанного в шапке документа", , , , Отказ);
	КонецЕсли;
	
	Если Не ТЗТовары[0].ИсточникФинансирования = Источник.ИсточникФинансирования Тогда
		ОбщегоНазначения.СообщитьПользователю("В табличной части один или несколько источников финансирования отличаются от указанного в шапке документа", , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры
//-Чиков

#КонецОбласти

#Область ПроверкиРегистров
Функция МожноРаботатьСУникальнойЗаписьюРегистраСостоянияТребований(ИдентификаторСтроки,КодСтроки,Рег=Неопределено,ВыводитьСообщения=Ложь) Экспорт
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.ИдентификаторСтроки.Установить(ИдентификаторСтроки);
	Рег.Отбор.КодСтроки.Установить(КодСтроки);
	Рег.Прочитать();
	
	Если Рег.Количество()=0 Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения="В регистре сведений ""Состояния требований отделений"" не обнаружена запись. Идентифкатор строки "+ИдентификаторСтроки+" код строки "+КодСтроки+". Дальнейшее выполнение операции не возможно.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Отказ=Истина;
		КонецЕсли;	
		Возврат Ложь;
	ИначеЕсли Рег.Количество()>1 Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения="В регистре сведений ""Состояния требований отделений"" обнаружено более одной записи. Идентифкатор строки "+ИдентификаторСтроки+" код строки "+КодСтроки+". Дальнейшее выполнение операции не возможно.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Отказ=Истина;
		КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции	
#Конецобласти    

#Область НеФормализованныеТребования
Процедура ЗакрытьНеформализованноеТребованиеЕслиВозможно(СсылкаНаОбъект=Неопределено) Экспорт
	Запрос = Новый Запрос;                    
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.сок_НеФормализованноеТребованиеОтделения") Тогда
		Масс=Новый Массив;
		Масс.Добавить(СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Ссылка",Масс);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("Массив") Тогда	
		Масс=Новый Массив;
		Масс.Добавить(СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Ссылка",Масс);
	Иначе
		Масс=Новый Массив;
		Запрос.УстановитьПараметр("Ссылка",Масс);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОбрабатыватьВсеТребования",СсылкаНаОбъект=Неопределено);
	Запрос.Текст=                                         
	"ВЫБРАТЬ
	|	сок_НеФормализованноеТребованиеОтделения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.сок_НеФормализованноеТребованиеОтделения КАК сок_НеФормализованноеТребованиеОтделения
	|ГДЕ
	|	(&ОбрабатыватьВсеТребования
	|			ИЛИ сок_НеФормализованноеТребованиеОтделения.Ссылка В (&Ссылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	сок_НеФормализованноеТребованиеОтделения.Дата";
	Выборка = Запрос.Выполнить().Выгрузить();
	Запрос.УстановитьПараметр("Требования",Выборка.ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.Требование КАК Требование,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.Требование В(&Требования)";
	Выборкасостояний=Запрос.Выполнить().Выгрузить();
	
	состояниеТребованиеНеФормальное=Ложь;
	Для Каждого СтрДок из Выборка Цикл
		Масс=Выборкасостояний.НайтиСтроки(Новый Структура("Требование",СтрДок.ссылка));
		МожноЗакрывать=Истина;
		Для Каждого СтрМ из Масс Цикл
			
			Если 
				 СтрМ.Состояние=Перечисления.СостоянияТребований.Отменено ИЛИ
				 СтрМ.Состояние=Перечисления.СостоянияТребований.Передано Тогда
			 Иначе
				 МожноЗакрывать=Ложь;
				 Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если МожноЗакрывать Тогда
			Элемент = СтрДок.Ссылка.получитьОбъект();
			
			Если Ложь Тогда Элемент = Документы.сок_НеФормализованноеТребованиеОтделения.СоздатьДокумент(); КонецЕсли;
			
			Элемент.Статус=Перечисления.сок_СостоянияНеформализованныхТребований.Закрыт;
			Попытка
				Элемент.Записать();
			Исключение  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось перевести в слстояние ""Закрыт"" "+Элемент.Ссылка);
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	
#КонецОбласти

#Область  РегламентныеЗадания

Процедура ПроверитьТребованияНаошибки() 
	Запрос = Новый Запрос;;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТребованиеОтделения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТребованиеОтделения КАК ТребованиеОтделения
	|ГДЕ
	|	ТребованиеОтделения.Проведен
	|	И НЕ ТребованиеОтделения.ПроверенНаОшибки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеОтделения.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		 ПроверитьОдноТребованиеОтделенияНаОшибки(Выборка.Ссылка,Истина,Истина);
	КонецЦикла;	
КонецПроцедуры

Процедура сок_ПроверкаДокументовНаОшибки() Экспорт
	ПроверитьТребованияНаошибки();
	ПроверитьИИсправитьБуферЗакупки(Истина) 
КонецПроцедуры

#КонецОбласти