
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает структуру кэшированных значений
//
Функция ПолучитьСтруктуруКэшированныхЗначений() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("Штрихкоды"                       , Новый Соответствие);
	КэшированныеЗначения.Вставить("ЕдиницыИзмерения"                , Новый Соответствие);
	КэшированныеЗначения.Вставить("СлужебныеРеквизитыСтатейРасходов", Новый Соответствие);
	КэшированныеЗначения.Вставить("СлужебныеРеквизитыСтатейДоходов" , Новый Соответствие);
	
	Возврат КэшированныеЗначения;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//  Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара
//
Функция СтруктураКэшируемойИнформацииПоШтрихкоду(Штрихкод) Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	ИнформацияПоШтрихкоду.Вставить("Штрихкод", Штрихкод);
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод", Истина);
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("СерияНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("Партия");
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент");
	
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодУпаковки", Ложь);
	ИнформацияПоШтрихкоду.Вставить("УпаковкаМаркированногоТовара");
	
	ИнформацияПоШтрихкоду.Вставить("НомерСерии");
	ИнформацияПоШтрихкоду.Вставить("ГоденДо");
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

Функция ПолучитьДанныеИзШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	ДанныеИзШтрихкода = Новый Структура;
	ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ТипШтрихкода);
	
	Если ТипШтрихкода = "ITF14" Или ТипШтрихкода = "EAN13" Или ТипШтрихкода = "EAN8" Тогда
		ДанныеИзШтрихкода.Вставить("Штрихкод", Штрихкод);
		Возврат ДанныеИзШтрихкода;
	КонецЕсли;
	
	Попытка
		ДанныеИзШтрихкода = ИнтеграцияМДЛПКлиентСервер.ДанныеШтрихкода(Штрихкод);
		ДанныеИзШтрихкода.Вставить("ТипШтрихкода", "ШтрихкодМДЛП");
	Исключение
		Попытка
			Данные = ИнтеграцияМДЛПКлиентСервер.РазобратьСтрокуШтрихкодаГС1(Штрихкод);
			Если Данные.ДанныеШтрихкода.Количество() > 0 И Данные.ДанныеШтрихкода[0].ИдентификаторПрименения = "01" Тогда
				ДанныеИзШтрихкода.Вставить("ТипШтрихкода"   , "ШтрихкодГС1");
				ДанныеИзШтрихкода.Вставить("Штрихкод"       , Данные.ПредставлениеШтрихкода);
				ДанныеИзШтрихкода.Вставить("ДанныеШтрихкода", Данные.ДанныеШтрихкода);
				ДанныеИзШтрихкода.Вставить("GTIN", Данные.ДанныеШтрихкода[0].Значение);
				Для Индекс = 1 По Данные.ДанныеШтрихкода.ВГраница() Цикл
					Если Данные.ДанныеШтрихкода[Индекс] = "10" Тогда
						ДанныеИзШтрихкода.Вставить("Серия", Данные.ДанныеШтрихкода[Индекс].Значение);
					ИначеЕсли Данные.ДанныеШтрихкода[Индекс] = "17" Тогда
						ГоденДоСтрокой = Данные.ДанныеШтрихкода[Индекс].Значение;
						Год = "20" + Сред(ГоденДоСтрокой, 1, 2);
						Месяц = Сред(ГоденДоСтрокой, 3, 2);
						День = Сред(ГоденДоСтрокой, 5, 2);
						Попытка
							Если День = "00" Тогда
								ГоденДо = КонецМесяца(Дата(Год + Месяц + "01000000"));
							Иначе
								ГоденДо = Дата(Год + Месяц + День + "000000");
							КонецЕсли;
						Исключение
							ВызватьИсключение НСтр("ru = 'Некорректный срок годности.'");
						КонецПопытки;
						ДанныеИзШтрихкода.Вставить("ГоденДо", ГоденДо);
					КонецЕсли
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Не штрихкод товара ГС1'");
			КонецЕсли;
		Исключение
			ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ?(ПустаяСтрока(ТипШтрихкода), "Прочее", ТипШтрихКода));
			ДанныеИзШтрихкода.Вставить("Штрихкод", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Штрихкод));
		КонецПопытки;
	КонецПопытки;
	
	Возврат ДанныеИзШтрихкода;
	
КонецФункции

// Возвращает параметры объекта для заполнения цены в строке
//
// Параметры:
//  Объект
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыЗаполненияЦены(Объект) Экспорт
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	ПараметрыЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	ПараметрыЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

// Возвращает параметры объекта для заполнения цены в строке
//
// Параметры:
//  Объект
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект) Экспорт
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	ПараметрыЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	ПараметрыЗаполненияЦены.Вставить("Документ",   Объект.Ссылка);
	ПараметрыЗаполненияЦены.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполненияЦены.Вставить("Склад",      Объект.Склад);
	
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

// Возвращает параметры объекта для заполнения цены в строке
//
// Параметры:
//  Объект
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект) Экспорт
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	ПараметрыЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

// Возвращает параметры пересчета цены за упаковку
//
// Параметры:
//  КоличествоЕдиницДоПересчета - Число - базовое количество номенклатуры до изменения упаковки
//  ИменаРеквизитовЦена - Строка, Массив - 
//
// Возвращаемое значение:
//  Структура - 
//    КоличествоЕдиницДоПересчета
//    ИмяРеквизитаЦена
//
Функция ПолучитьПараметрыПересчетаЦеныЗаУпаковку(Знач КоличествоЕдиницДоПересчета, Знач ИменаРеквизитовЦена = "Цена", Знач ИмяКолонкиКоличество = "Количество") Экспорт
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("КоличествоЕдиницДоПересчета", КоличествоЕдиницДоПересчета);
	
	Если ТипЗнч(ИменаРеквизитовЦена) = Тип("Строка") Тогда
		ИменаРеквизитовЦена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИменаРеквизитовЦена);
	КонецЕсли;
	
	ПараметрыПересчета.Вставить("ИменаРеквизитовЦена", ИменаРеквизитовЦена);
	ПараметрыПересчета.Вставить("ИмяКолонкиКоличество", ИмяКолонкиКоличество);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

// Возвращает параметры пересчета суммы НДС
//
// Параметры:
//  Объект
//
// Возвращаемое значение:
//  Структура -
//    ЦенаВключаетНДС
//
Функция ПолучитьПараметрыПересчетаСуммыНДС(Объект) Экспорт
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

// Возвращает параметры пересчета суммы льготы.
//
// Параметры:
//  ПроцентЛьготы   - Число - процент льготы.
//  ИмяКолонкиСумма - Строка - имяколонки сумма, по которой будет пересчитана сумма льготы.
//
// Возвращаемое значение:
//  Структура - 
//    ПроцентЛьготы
//    ИмяКолонкиСумма
//
Функция ПолучитьПараметрыПересчетаСуммыЛьготы(Знач ПроцентЛьготы, Знач ИмяКолонкиСумма = "СуммаСНДС") Экспорт
	
	Если ТипЗнч(ПроцентЛьготы) <> Тип("Число") Тогда
		ОписаниеПроцентаЛьготы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ПроцентЛьготы = ОписаниеПроцентаЛьготы.ПривестиЗначение(СтрЗаменить(ПроцентЛьготы, "%", ""));
	КонецЕсли;
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ПроцентЛьготы"  , ПроцентЛьготы);
	ПараметрыПересчета.Вставить("ИмяКолонкиСумма", ИмяКолонкиСумма);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для проверки сопоставленной номенклатуры поставщика с
//  номенклатурой склада в строках табличной части документа.
//
// Параметры:
//  Объект								 - ДанныеФормыСтруктура	 - данные документа.
//  НеВыполнятьПроверкуДляПользователя	 - Булево				 - Истина если не нужно проверку для текущего пользователя.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для проверки сопоставленной номенклатуры поставщика с номенклатурой склада в
//  строках табличной части документа:
//  * Ссылка - ДокументСсылка.ИмяДокумента - ссылка на документ.
//  * Контрагент - СправочникСсылка.Контрагенты - контрагент по документу.
//  * НеВыполнятьПроверкуДляПользователя - Булево - Истина если не осуществлять проверку для текущего пользователя.
//
Функция ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(Объект, НеВыполнятьПроверкуДляПользователя) Экспорт
	
	ПараметрПроверки = Новый Структура;
	ПараметрПроверки.Вставить("Ссылка"    , Объект.Ссылка);
	ПараметрПроверки.Вставить("Контрагент", Объект.Контрагент);
	ПараметрПроверки.Вставить("НеВыполнятьПроверкуДляПользователя", НеВыполнятьПроверкуДляПользователя);
	
	Возврат ПараметрПроверки;
	
КонецФункции

// Заполняет колонки всех строк табличной части указанным значением.
//
// Параметры:
//  ТабличнаяЧасть  - ТабличнаяЧасть - заполняемая таблица.
//  Значение        - Произвольный   - Значение, которым необходимо заполнить строки таблицы.
//  Колонки         - Строка         - Список имен колонок, разделенных запятыми, по которым производится заполнение.
//
Процедура ЗаполнитьКолонкиТабличнойЧасти(ТабличнаяЧасть, Значение, Колонки) Экспорт
	
	ЗначенияКолонок = Новый Структура(Колонки);
	Для Каждого Колонка Из ЗначенияКолонок Цикл
		ЗначенияКолонок[Колонка.Ключ] = Значение;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияКолонок, Колонки);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Идентификаторы действий со строками табличной части
#Область Действия

// Идентификатор действия
//
Функция Действие_ПроверитьСериюНоменклатурыПоВладельцу() Экспорт
	Возврат "ПроверитьСериюНоменклатурыПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьУпаковкуПоВладельцу() Экспорт
	Возврат "ПроверитьУпаковкуПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьПартиюПоВладельцу() Экспорт
	Возврат "ПроверитьПартиюПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьЕдиницуИзмеренияПоОтбору() Экспорт
	Возврат "ПроверитьЕдиницуИзмеренияПоОтбору";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЕдиницуИзмерения() Экспорт
	Возврат "ЗаполнитьЕдиницуИзмерения";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору() Экспорт
	Возврат "ЗаполнитьЕдиницуИзмеренияПоОтбору";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьПараметрыУчета() Экспорт
	Возврат "ЗаполнитьПараметрыУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьПризнакВедетсяУчетПоГТД() Экспорт
	Возврат "ЗаполнитьПризнакВедетсяУчетПоГТД";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЗабраковкуСерий() Экспорт
	Возврат "ЗаполнитьЗабраковкуСерий";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП() Экспорт
	Возврат "ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоэффициент() Экспорт
	Возврат "ПересчитатьКоэффициент";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоэффициентЕдиницыЗаказа() Экспорт
	Возврат "ПересчитатьКоэффициентЕдиницыЗаказа";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСтавкуНДС() Экспорт
	Возврат "ЗаполнитьСтавкуНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЦенуЗакупки() Экспорт
	Возврат "ЗаполнитьЦенуЗакупки";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЦенуПродажи() Экспорт
	Возврат "ЗаполнитьЦенуПродажи";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя() Экспорт
	Возврат "ЗаполнитьЗарегистрированнуюЦенуПроизводителя";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика() Экспорт
	Возврат "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре() Экспорт
	Возврат "ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоЕдиниц() Экспорт
	Возврат "ПересчитатьКоличествоЕдиниц";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоУпаковок() Экспорт
	Возврат "ПересчитатьКоличествоУпаковок";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоПоДаннымУчета() Экспорт
	Возврат "ПересчитатьКоличествоПоДаннымУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоУпаковокПоДаннымУчета() Экспорт
	Возврат "ПересчитатьКоличествоУпаковокПоДаннымУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоВЕдиницахЗаказа() Экспорт
	Возврат "ПересчитатьКоличествоВЕдиницахЗаказа";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьЦенуЗаУпаковку() Экспорт
	Возврат "ПересчитатьЦенуЗаУпаковку";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьЦену() Экспорт
	Возврат "ПересчитатьЦену";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСумму() Экспорт
	Возврат "ПересчитатьСумму";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуНДС() Экспорт
	Возврат "ПересчитатьСуммуНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуСНДС() Экспорт
	Возврат "ПересчитатьСуммуСНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуЛьготы() Экспорт
	Возврат "ПересчитатьСуммуЛьготы";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьРасхождения() Экспорт
	Возврат "ЗаполнитьРасхождения";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыСтатьиРасходов";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыСтатьиДоходов() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыСтатьиДоходов";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыПоНоменклатуре";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуРегл() Экспорт
	Возврат "ПересчитатьСуммуРегл";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьНДСРегл() Экспорт
	Возврат "ПересчитатьНДСРегл";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика() Экспорт
	Возврат "ПроверитьСопоставленнуюНоменклатуруПоставщика";
КонецФункции

#КонецОбласти // Действия

////////////////////////////////////////////////////////////////////////////////
// ПРоцедуры перерасчета и заполнения табличных частей
#Область ПроцедурыПересчетаИЗаполнения

// Пересчитывает количество в единицах хранения,
// пересчитывая из количества в единице измерения, указанной в табличной части.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьКоличествоЕдиниц(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьКоличествоЕдиниц()) Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоВЕдиницахИзмерения * ТекущаяСтрока.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество в единицах измерения,
// пересчитывая из количества в единицах хранения.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьКоличествоУпаковок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьКоличествоУпаковок()) И ТекущаяСтрока.Коэффициент <> 0 Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = ТекущаяСтрока.Количество / ТекущаяСтрока.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество по данным учета в единицах хранения,
// пересчитывая из количества по данным учета в единице измерения, указанной в табличной части.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьКоличествоПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьКоличествоПоДаннымУчета()) Тогда
		ТекущаяСтрока.КоличествоПоДаннымУчета = ТекущаяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета * ТекущаяСтрока.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество по данным учета в единицах измерения,
// пересчитывая из количества по данным учета в единицах хранения.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьКоличествоУпаковокПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьКоличествоУпаковокПоДаннымУчета()) И ТекущаяСтрока.Коэффициент <> 0 Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета = ТекущаяСтрока.КоличествоПоДаннымУчета / ТекущаяСтрока.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество в единицах заказа.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьКоличествоЕдиницОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьКоличествоВЕдиницахЗаказа()) Тогда
		Если ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0 Тогда
			ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0;
		Иначе
			ТекущаяСтрока.КоличествоВЕдиницахЗаказа = ТекущаяСтрока.Количество / ТекущаяСтрока.КоэффициентЕдиницыЗаказа;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену за упаковку товара.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьЦенуЗаУпаковку(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьЦенуЗаУпаковку(), ПараметрыПересчета)
	   И ПараметрыПересчета.КоличествоЕдиницДоПересчета <> 0 Тогда
		Для Каждого ИмяРеквизитаЦена Из ПараметрыПересчета.ИменаРеквизитовЦена Цикл
			ТекущаяСтрока[ИмяРеквизитаЦена] = ТекущаяСтрока[ИмяРеквизитаЦена]
				/ ПараметрыПересчета.КоличествоЕдиницДоПересчета
				* ТекущаяСтрока[ПараметрыПересчета.ИмяКолонкиКоличество];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену номенклатуры.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьЦену(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКолонкиКоличество = Неопределено;
	Если СтруктураДействий.Свойство(Действие_ПересчитатьЦену(), ИмяКолонкиКоличество) Тогда
		Если Не ЗначениеЗаполнено(ИмяКолонкиКоличество) Тогда
			ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
		КонецЕсли;
		Количество = ТекущаяСтрока[ИмяКолонкиКоличество];
		Если Количество = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьСумму(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКолонкиКоличество = Неопределено;
	Если СтруктураДействий.Свойство(Действие_ПересчитатьСумму(), ИмяКолонкиКоличество) Тогда
		Если Не ЗначениеЗаполнено(ИмяКолонкиКоличество) Тогда
			ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
		КонецЕсли;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКолонкиКоличество];
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму НДС.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьСуммуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета) Тогда
		ТекПроцентНДС = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеБольничнаяАптекаКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, ПараметрыПересчета.ЦенаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму с НДС.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьСуммуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета) Тогда
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(ПараметрыПересчета.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму льготы.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьСуммуЛьготы(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство(Действие_ПересчитатьСуммуЛьготы(), ПараметрыПересчета) Тогда
		ТекущаяСтрока.СуммаЛьготы = Окр(ТекущаяСтрока[ПараметрыПересчета.ИмяКолонкиСумма] * ПараметрыПересчета.ПроцентЛьготы / 100, 2);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму в валюте регламентированного учета.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьСуммуРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем КоэффициентПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл", КоэффициентПересчета) Тогда
		СуммаБезНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
		ТекущаяСтрока.СуммаРегл = Окр(СуммаБезНДС * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает НДС в валюте регламентированного учета.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ПересчитатьНДСРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем КоэффициентПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл", КоэффициентПересчета) Тогда
		ТекущаяСтрока.НДСРегл = Окр(ТекущаяСтрока.СуммаНДС * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что есть расхождения в количестве по факту и количестве по данным учета.
//
// Параметры:
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка табличной части.
//  СтруктураДействий    - Структура - действия, которые необходимо выполнить с текущей строкой.
//  КэшированныеЗначения - Структура - накопленные данные, которые могут использоваться
//                                     при обработке в нескольких строках табличной части
//                                     (см. функцию ПолучитьСтруктуруКэшированныхЗначений).
//
// см. процедуру ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧастиКлиент.
//
Процедура ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство(Действие_ЗаполнитьРасхождения()) Тогда
		ТекущаяСтрока.ЕстьРасхождения = (ТекущаяСтрока.КоличествоВЕдиницахИзмерения <> ТекущаяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыПересчетаИЗаполнения

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена
#Область БуферОбмена

// Возвращает идентификатор буфера обмена
//
Функция ИдентификаторБуфераОбмена() Экспорт
	Возврат "Товары";
КонецФункции

#КонецОбласти // БуферОбмена

#КонецОбласти // СлужебныеПроцедурыИФункции
