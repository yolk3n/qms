
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает шаблоны бизнес-процессов по предмету, подходящие под условия маршрутизации.
//
// Параметры:
//  Предмет                     - ДокументСсылка - предмет, по которому получается шаблон.
//  ТипШаблона                  - Тип - тип шаблона бизнес-процесса.
//  ТолькоНастроенные           - Булево
//  ИдентификаторБизнесПроцесса - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//
// Возвращаемое значение:
//  ШаблоныПоПредмету - Массив - шаблоны бизнес-процессов, подходящие под условия маршрутизации.
//
Функция ПолучитьШаблоныПоПредмету(Предмет, ТипШаблона, ТолькоНастроенные = Истина, ИдентификаторБизнесПроцесса = Неопределено) Экспорт
	
	ШаблоныПоПредмету = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ШаблоныПоПредмету;
	КонецЕсли;
	
	МетаданныеПредмета = Предмет.Метаданные();
	ПоддерживаемыеПредметы = ПоддерживаемыеТипыПредметов();
	ПредметПоддерживается = Ложь;
	Для Каждого ТипПредмета Из ПоддерживаемыеПредметы Цикл
		Если ТипПредмета = МетаданныеПредмета Тогда
			ПредметПоддерживается = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПредметПоддерживается Тогда
		Возврат ШаблоныПоПредмету;
	КонецЕсли;
	
	Если ТипШаблона <> Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда 
		
		Шаблон = Метаданные.НайтиПоТипу(ТипШаблона);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник." + Шаблон.Имя + ")
		|";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник.ШаблоныСоставныхБизнесПроцессов)
		|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ТипШаблона = &ТипШаблона
		|";
		Запрос.УстановитьПараметр("ТипШаблона", ИдентификаторБизнесПроцесса);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеПредмета.ПолноеИмя()));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Запрос.Текст = Запрос.Текст + "	И НастройкаШаблоновБизнесПроцессов.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Предмет.Организация);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			Результат = Запрос.Выполнить();
		КонецЕсли;
	Иначе
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если Не Результат.Пустой() Тогда 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.Условие.Пустая() Тогда
				РезультатПроверки = Справочники.УсловияМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоПредмету.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоПредмету.Добавить(Выборка.Шаблон);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоПредмету.Количество() = 0 Тогда
		
		Если ТипШаблона <> Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда 
			
			Шаблон = Метаданные.НайтиПоТипу(ТипШаблона);
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон
			|ИЗ
			|	Справочник." + Шаблон.Имя + " КАК Шаблоны
			|ГДЕ
			|	НЕ 1 В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				1
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)
			|";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
			|	И НЕ 1 В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				1
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)
			|";
			
			Запрос.УстановитьПараметр("ТипШаблона", ИдентификаторБизнесПроцесса);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныПоПредмету.Добавить(Выборка.Шаблон);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ШаблоныПоПредмету;
	
КонецФункции

// Проверяет доступность объекта по шаблону.
//
// Параметры:
//  Объект - БизнесПроцессОбъект - объект для которого проверяется доступность по шаблону.
//
// Возвращаемое значение:
//  Булево - Истина - если объект доступен.
//
Функция ДоступностьПоШаблону(Объект) Экспорт
	
	Шаблон = Объект.Шаблон;
	Предмет = Объект.Предмет;
	БизнесПроцесс = Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСогласования")
		Или ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда 
		
		Если ЗначениеЗаполнено(БизнесПроцесс) И ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда 
			Шаблон = БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс.Шаблон;
			Предмет = БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс.Предмет;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Предмет);
	
	Если ТипДокумента <> Тип("ДокументСсылка.ТребованиеОтделения")
	   И ТипДокумента <> Тип("ДокументСсылка.ФормулярныйСписокНоменклатуры") Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеПредмета = Предмет.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ИдентификаторОбъекта = &ИдентификаторОбъекта
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон
	|";
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеПредмета.ПолноеИмя()));
	Запрос.УстановитьПараметр("Шаблон"              , Шаблон);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Запрос.Текст = Запрос.Текст + "	И НастройкаШаблоновБизнесПроцессов.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Предмет.Организация);
	
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			Результат = Запрос.Выполнить();
		КонецЕсли;
	Иначе
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Не Выборка.ЗапрещеноИзменение;
	
КонецФункции

// Заполняет реквизиты составного бизнес-процесса по шаблону.
//
// Параметры:
//  Шаблон        - СправочникСсылка.ШаблоныСоставныхБизнесПроцессов - источник.
//  БизнесПроцесс - БизнесПроцессОбъект.ОбработкаВнутреннегоДокумента - приемник.
//
Процедура ЗаполнитьПоШаблонуСоставногоБизнесПроцесса(Шаблон, БизнесПроцесс) Экспорт
	
	БизнесПроцесс.Шаблон = Шаблон;
	Если ЗначениеЗаполнено(Шаблон.НаименованиеБизнесПроцесса) Тогда 
		БизнесПроцесс.Наименование = Шаблон.НаименованиеБизнесПроцесса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Шаблон.Автор) Тогда 
		БизнесПроцесс.Автор = Шаблон.Автор;
	КонецЕсли;
	
	МДРеквизиты = БизнесПроцесс.Метаданные().Реквизиты;
	Для Каждого Строка Из Шаблон.Шаблоны Цикл
		МДРеквизит = МДРеквизиты.Найти(Строка.Реквизит);
		Если МДРеквизит <> Неопределено Тогда 
			БизнесПроцесс[МДРеквизит.Имя] = Строка.Шаблон;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Коллекция предметов к которым подключаем механизм бизнес-процессов.
//
// Возвращаемое значение:
//  ТипыПредметов - Массив - элемент коллекции метаданных.
//
Функция ПоддерживаемыеТипыПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыВнутреннихЗаказов") Тогда
		ТипыПредметов.Добавить(Метаданные.Документы.ЗаказНаПеремещение);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыТребованийОтделений") Тогда
		ТипыПредметов.Добавить(Метаданные.Документы.ТребованиеОтделения);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыФормуляров") Тогда
		ТипыПредметов.Добавить(Метаданные.Документы.ФормулярныйСписокНоменклатуры);
	КонецЕсли;
	
	Возврат ТипыПредметов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции автоподстановки
#Область Автоподстановка

// Возвращает значение автоподстановки значений из шаблона в бизнес-процесс.
//
// Параметры:
//  Автоподстановка - Строка - значение автоподстановки.
//  ЭтотОбъект      - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  РезультатФункции - СправочникСсылка.Пользователи, Массив, Неопределено - значение автоподстановки.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, ЭтотОбъект) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	СписокФункций = ПолучитьСписокДоступныхФункций();
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ФункцияАвтоподстановки = "" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена автоподстановка %1'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Попытка
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьИмяМетодаКонфигурации(ФункцияАвтоподстановки);
		
		// Выполнить экспортную функцию по имени с уровнем привилегий конфигурации.
		// СтандартныеПодсистемы
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
			МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
			Если МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности()
				И Не МодульРаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
				
				ПрофильИнформационнойБазы = МодульРаботаВБезопасномРежиме.ПрофильБезопасностиИнформационнойБазы();
				Если ЗначениеЗаполнено(ПрофильИнформационнойБазы) Тогда
					
					УстановитьБезопасныйРежим(ПрофильИнформационнойБазы);
					Если БезопасныйРежим() = Истина Тогда
						УстановитьБезопасныйРежим(Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		// Конец СтандартныеПодсистемы
		
		РезультатФункции = Вычислить(ФункцияАвтоподстановки + "(ЭтотОбъект)");
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
				|%2'"),
			Автоподстановка,
			ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(РезультатФункции))
	 Или (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0)Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает список доступных функций получения значений
// автоподстановки из шаблона в бизнес-процесс.
//
// Возвращаемое значение:
//  ДоступныеФункции - СписокЗначений - список доступных функций получения значения автоподстановки реквизитов формы.
//
Функция ПолучитьСписокДоступныхФункций() Экспорт
	
	ДоступныеФункции = Новый СписокЗначений;
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторБизнесПроцесса"        , НСтр("ru = 'Автор бизнес-процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторДокумента"             , НСтр("ru = 'Автор документа'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОрганизации"    , НСтр("ru = 'Руководитель организации'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительПодразделения"  , НСтр("ru = 'Руководитель аптеки'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОтделения"      , НСтр("ru = 'Руководитель отделения'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.МОЛСкладаОтправителя"       , НСтр("ru = 'МОЛ склада-отправителя'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.МОЛСкладаПолучателя"        , НСтр("ru = 'МОЛ склада-получателя'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ОтветственныйЗаДокумент"    , НСтр("ru = 'Ответственный за документ'"));
	
	ШаблоныБизнесПроцессовПереопределяемый.ПриПолученииСпискаДоступныхФункций(ДоступныеФункции);
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает автора бизнес-процесса для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - автор бизнес-процесса.
//
Функция АвторБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Возврат БизнесПроцессОбъект.Автор;
	
КонецФункции

// Возвращает автора предмета бизнес-процесса для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  Автор - СправочникСсылка.Пользователи - автор предмета бизнес-процесса.
//
Функция АвторДокумента(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда 
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоДокумент(БизнесПроцессОбъект.Предмет.Метаданные()) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'"); 
	КонецЕсли;
	
	Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.Предмет, "Автор");
	Возврат Автор;
	
КонецФункции

// Возвращает руководителя организации для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - руководитель организации.
//
Функция РуководительОрганизации(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда 
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	Если Не(ОбщегоНазначения.ЭтоДокумент(БизнесПроцессОбъект.Предмет.Метаданные())
	      И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", БизнесПроцессОбъект.Предмет.Метаданные())) Тогда 
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'");
	КонецЕсли;
	
	ПоляПредмета = "Организация, Дата";
	
	ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцессОбъект.Предмет, ПоляПредмета);
	Если Не ЗначениеЗаполнено(ЗначенияПолей.Организация) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ФизЛицо = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ЗначенияПолей.Организация, ЗначенияПолей.Дата).Руководитель;
	Возврат Справочники.Пользователи.ПолучитьПользователяПоФизЛицу(ФизЛицо);
	
КонецФункции

// Возвращает руководителя подразделения для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - руководитель подразделения.
//
Функция РуководительПодразделения(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда 
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	ИмяРеквизитаПодразделение = "ПодразделениеОрганизации";
	Если Не(ОбщегоНазначения.ЭтоДокумент(БизнесПроцессОбъект.Предмет.Метаданные())
	      И ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаПодразделение, БизнесПроцессОбъект.Предмет.Метаданные())) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'");
	КонецЕсли;
	
	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.Предмет, ИмяРеквизитаПодразделение);
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "ТекущийРуководитель");
	Возврат Справочники.Пользователи.ПолучитьПользователяПоФизЛицу(ФизЛицо);
	
КонецФункции

// Возвращает руководителя отделения для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - руководитель отделения.
//
Функция РуководительОтделения(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	ИмяРеквизитаОтделение = "Отделение";
	Если Не(ОбщегоНазначения.ЭтоДокумент(БизнесПроцессОбъект.Предмет.Метаданные())
	      И ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаОтделение, БизнесПроцессОбъект.Предмет.Метаданные())) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'");
	КонецЕсли;
	
	Отделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.Предмет, ИмяРеквизитаОтделение);
	Если Не ЗначениеЗаполнено(Отделение) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отделение, "ТекущийРуководитель");
	Возврат Справочники.Пользователи.ПолучитьПользователяПоФизЛицу(ФизЛицо);
	
КонецФункции

// Возвращает ответственного за предмет бизнес-процесса для автоподстановки.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ответственный за предмет бизнес-процесса.
//
Функция ОтветственныйЗаДокумент(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(БизнесПроцессОбъект.Предмет.Метаданные()) Тогда
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.Предмет, "Ответственный");
		Возврат Ответственный;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает МОЛ склада-отправителя.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - руководитель организации.
//
Функция МОЛСкладаОтправителя(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	ИмяРеквизитаСклад = "";
	
	МетаданныеПредмета = БизнесПроцессОбъект.Предмет.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета) Тогда
		ИмяРеквизитаСклад = СкладыСервер.ИмяРеквизитаСкладОтправитель(БизнесПроцессОбъект.Предмет);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизитаСклад) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'");
	КонецЕсли;
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("Дата");
	ЗапрашиваемыеПоля.Вставить("Склад", ИмяРеквизитаСклад);
	ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцессОбъект.Предмет, ЗапрашиваемыеПоля);
	Если Не ЗначениеЗаполнено(ЗначенияПолей.Склад) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеМОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(ЗначенияПолей.Склад, ЗначенияПолей.Дата);
	Возврат Справочники.Пользователи.ПолучитьПользователяПоФизЛицу(ДанныеМОЛ.Ответственный);
	
КонецФункции

// Возвращает МОЛ склада-получателя.
//
// Параметры:
//  БизнесПроцессОбъект - БизнесПроцессОбъект.<Имя бизнес-процесса>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - руководитель организации.
//
Функция МОЛСкладаПолучателя(БизнесПроцессОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцессОбъект.Предмет) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет бизнес-процесса.'");
	КонецЕсли;
	
	ИмяРеквизитаСклад = "";
	
	МетаданныеПредмета = БизнесПроцессОбъект.Предмет.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", МетаданныеПредмета) Тогда
			ИмяРеквизитаСклад = "СкладПолучатель";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеПредмета) Тогда
			ИмяРеквизитаСклад = "Склад";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизитаСклад) Тогда
		ВызватьИсключение НСтр("ru = 'Автоподстановка не может быть выполнена для указанного предмета бизнес-процесса.'");
	КонецЕсли;
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("Дата");
	ЗапрашиваемыеПоля.Вставить("Склад", ИмяРеквизитаСклад);
	ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцессОбъект.Предмет, ЗапрашиваемыеПоля);
	Если Не ЗначениеЗаполнено(ЗначенияПолей.Склад) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеМОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(ЗначенияПолей.Склад, ЗначенияПолей.Дата);
	Возврат Справочники.Пользователи.ПолучитьПользователяПоФизЛицу(ДанныеМОЛ.Ответственный);
	
КонецФункции

#КонецОбласти // Автоподстановка

#КонецОбласти // ПрограммныйИнтерфейс
