////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АсинхронныеОперации

// Получает HTML предпросмотр объекта из Документооборота в фоновом задании.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * ID - Строка
//     * Тип - Строка
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ПолучитьHTMLПредпросмотрОбъектаВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПроксиВФоне(Параметры);
	
	Попытка
		Результат = HTMLПредпросмотрОбъекта(Прокси, Параметры.ID, Параметры.Тип);
	Исключение
		ПоместитьВоВременноеХранилище(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса(),
			АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ВебСервисБИД

#Область ОбработкаУниверсальногоСообщения

// Возвращает результат обработки универсальных сообщений.
//
// Параметры:
//   Сообщение - ОбъектXDTO - потомок DMILRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - потомок DMILResponse.
//
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		НачалоЗамераВремени = ТекущаяДатаСеанса();
		
		Результат = Неопределено;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОбработкеУниверсальногоСообщения(
			Сообщение,
			Результат);
		Если Результат = Неопределено Тогда
			
			Если ПроверитьТипБИД(Сообщение, "DMILGetMetadataRequest") Тогда
				Результат = СтруктураМетаданныхИнтегрированнойСистемы(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCheckExpressionOnBuiltInLanguageRequest") Тогда
				Результат = ПроверитьВыражениеНаВстроенномЯзыке(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILRelatedIntegrationRulesExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СвязанныеПравилаИнтеграцииСуществуют(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCreateRelatedIntegrationRuleExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СоздатьСвязанноеПравилоИнтеграции(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetExpressionListRequest") Тогда
				Результат = СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetPrintedFormsRequest") Тогда
				Результат = СписокПечатныхФормОбъектовИС(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILPutChangesRequest") Тогда
				Возврат ИнтеграцияС1СДокументооборот3Обмен.ЗаписатьИзмененияОбъектов(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Неизвестное сообщение'"),
			Строка(Сообщение.Тип()));
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при обработке сообщения'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

// Возвращает URI пространства имен веб-сервиса БИД.
//
// Возвращаемое значение:
//   Строка
//
Функция URIПространстваИменВебСервисаБИД() Экспорт
	
	Возврат "http://www.1c.ru/dmil";
	
КонецФункции

// Создает объект DMILError.
//
// Параметры:
//   Предмет - Строка - тема сообщения об ошибке.
//   Описание - Строка - текстовое описание ошибки, а также отладочная информация.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ОписаниеОшибкиXDTO(Предмет = "", Описание = "") Экспорт
	
	Ошибка = СоздатьОбъектБИД("DMILError");
	Ошибка.subject = Предмет;
	Ошибка.description = Описание;
	
	Возврат Ошибка;
	
КонецФункции

// Заполняет XDTO объект, описывающий выражение на встроенном языке,
// которое требуется передать и выполнить на стороне ДО.
//
// Параметры:
//   ВыражениеПравилаXDTO - ОбъектXDTO - объект XDTO, описывающий выражение на встроенном языке.
//   ВыражениеДляВыполненияНаСторонеДО - СтрокаТаблицыЗначений - строка табличной части правила интеграции.
//     см. Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ВыраженияДляВыполненияНаСторонеДО
//
Процедура ПодготовитьВычисляемоеВыражениеКПередачеНаСторонуДО(ВыражениеПравилаXDTO,
		ВыражениеДляВыполненияНаСторонеДО) Экспорт
	
	ВыражениеПравилаXDTO.id = ВыражениеДляВыполненияНаСторонеДО.id;
	ВыражениеПравилаXDTO.expressionOnBuiltInLanguage = ВыражениеДляВыполненияНаСторонеДО.ВычисляемоеВыражение;
	ВыражениеПравилаXDTO.tabularSectionName = ВыражениеДляВыполненияНаСторонеДО.ИмяТаблицыИсточника;
	
	Если ВыражениеДляВыполненияНаСторонеДО.ЭтоТаблица = Истина Тогда
		ВыражениеПравилаXDTO.type = "TabularSection";
		
	ИначеЕсли ВыражениеДляВыполненияНаСторонеДО.ЭтоТаблица = Ложь
			И ВыражениеДляВыполненияНаСторонеДО.Таблица <> "" Тогда
		ВыражениеПравилаXDTO.type = "TabularSectionAttribute";
		
	Иначе
		ВыражениеПравилаXDTO.type = "Attribute";
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание ошибки.
//
// Параметры:
//   Инфо - ИнформацияОбОшибке
//
// Возвращаемое значение:
//   Строка - текст детального описания ошибки.
//
Функция ПолучитьОписаниеОшибки(Инфо) Экспорт
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	ТекстСообщения = "";
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
	КонецЦикла;
	
	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Инфо);
	Если Не ПустаяСтрока(Инфо.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
		ПредставлениеОшибки = Инфо.Описание;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки + ?(ПредставлениеОшибки + ТекстСообщения = "", "", Символы.ПС) + ТекстСообщения;
	
КонецФункции

// Возвращает ссылку на объект ИС по ObjectID
//
// Параметры:
//   ObjectID - ОбъектXDTO - объект XDTO типа DMILObjectID.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект ИС.
//
Функция ПолучитьСсылкуПоObjectID(ObjectID) Экспорт
	
	Ссылка = Неопределено;
	
	Если ObjectID <> Неопределено И ObjectID.id <> "" И ObjectID.type <> "" Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ObjectID.type);
		Ссылка = Менеджер.ПустаяСсылка();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ObjectID.id) Тогда
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ObjectID.id));
			
		Иначе // возможно, это имя предопределенного элемента или перечисление
			Попытка
				Ссылка = Менеджер[ObjectID.id];
			Исключение
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
					ObjectID.id,
					ObjectID.type);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Проверяет тип объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект.
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - Истина, если объект является объектом указанного типа.
//
Функция ПроверитьТипБИД(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO"))
		И (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(URIПространстваИменВебСервисаБИД(), Тип));
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен веб-сервиса БИД.
//
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа
//
Функция СоздатьОбъектБИД(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИменВебСервисаБИД(), ТипОбъекта));
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Возвращает HTML предпросмотр объекта.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Структура - структура предпросмотра объекта:
//     * ПредставлениеHTML - Строка - HTML предпросмотр объекта.
//     * ПредпросмотрУрезан - Булево - предпросмотр объекта урезан.
//
Функция HTMLПредпросмотрОбъекта(Прокси, ID, Тип) Экспорт
	
	Результат = Новый Структура("ПредставлениеHTML, ПредпросмотрУрезан", "", Ложь);
	
	Запрос = HTMLПредпросмотрОбъектаЗапрос(Прокси, ID, Тип);
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		ТекстОшибки = СокрЛП(Ответ.description);
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{", "<br>{");
		
		НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
		
		Результат.ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
			СтрШаблон(
				"%1:<br>
				|%2",
				Ответ.subject,
				ТекстОшибки),
			НастройкиДО.ЗаголовокСообщенияВОбластиПредпросмотра);
	Иначе
		ПредставлениеXDTO = Ответ.ObjectsHTMLPresentations[0];
		Результат.ПредставлениеHTML = ПредставлениеXDTO.htmlView;
		Результат.ПредпросмотрУрезан = ПредставлениеXDTO.truncated;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает запрос к 1С:Документооборот на получение HTML предпросмотра объекта.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO.
//   Тип - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectsHTMLPresentationsRequest.
//
Функция HTMLПредпросмотрОбъектаЗапрос(Прокси, ID, Тип) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMGetObjectsHTMLPresentationsRequest");
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
	ОбъектXDTO.name = "";
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ID,
		Тип);
	Запрос.Objects.Добавить(ОбъектXDTO);
	
	Возврат Запрос;
	
КонецФункции

// Формирует универсальную структуру входящих данных, предназначенную для загрузки объектов в 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   СписокВыражений - Массив из Строка - список выражений на встроенном языке, которые требуется выполнить на
//     стороне ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMIncomingData.
//
Функция ВходящиеДанныеОбъектаИС(Прокси, СсылкаНаОбъектИС, СписокВыражений) Экспорт
	
	ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
	
	ОбъектМетаданных = ОбъектИС.Метаданные();
	
	Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Входящие данные можно сформировать только для объектов типа Справочник или Документ.
				|Объект %1 имеет тип %2'"),
			СсылкаНаОбъектИС,
			ОбъектМетаданных.ПолноеИмя());
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMIncomingData");
	
	// Стандартные реквизиты
	Результат.attributes.Добавить(
		ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, "Представление", Строка(СсылкаНаОбъектИС)));
	
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Результат.attributes, ОбъектМетаданных.СтандартныеРеквизиты, ОбъектИС, Истина);
	
	// Реквизиты
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Результат.attributes, ОбъектМетаданных.Реквизиты, ОбъектИС);
	
	// Табличные части
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки = Новый Массив;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		
		Если Колонки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.tabularSections.Добавить(
			ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				ТабличнаяЧасть.Имя,
				ОбъектИС[ТабличнаяЧасть.Имя],
				Колонки));
		
	КонецЦикла;
	
	// Данные из выражений на встроенном языке
	ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, Результат, СписокВыражений);
	
	// Дополнительные реквизиты
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(СсылкаНаОбъектИС) Тогда
		ЗаполнитьРеквизитыИзМетаданных(
			Прокси,
			Результат.attributes,
			УправлениеСвойствами.СвойстваОбъекта(СсылкаНаОбъектИС, Истина, Ложь),
			ОбъектИС,,
			Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные флага.
//
// Параметры:
//   Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   Структура:
//     * Картинка - Картинка - картинка флага.
//     * ИндексКартинки - Число - индекс картинки в коллекции КоллекцияФлаговПисем.
//     * Представление - Строка - представление флага.
//
Функция ДанныеФлага(Флаг) Экспорт
	
	ДанныеФлага = Новый Структура("Картинка, ИндексКартинки, Представление");
	
	Если НРег(Флаг) = "purple" Тогда
		ДанныеФлага.ИндексКартинки = 6;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Лиловый флаг'");
		
	ИначеЕсли НРег(Флаг) = "orange" Тогда
		ДанныеФлага.ИндексКартинки = 5;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Оранжевый флаг'");
		
	ИначеЕсли НРег(Флаг) = "green" Тогда
		ДанныеФлага.ИндексКартинки = 4;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Зеленый флаг'");
		
	ИначеЕсли НРег(Флаг) = "yellow" Тогда
		ДанныеФлага.ИндексКартинки = 3;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Желтый флаг'");
		
	ИначеЕсли НРег(Флаг) = "blue" Тогда
		ДанныеФлага.ИндексКартинки = 2;
		ДанныеФлага.Картинка = БиблиотекаКартинок.СинийФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Синий флаг'");
		
	ИначеЕсли НРег(Флаг) = "red" Тогда
		ДанныеФлага.ИндексКартинки = 1;
		ДанныеФлага.Картинка = БиблиотекаКартинок.КрасныйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Красный флаг'");
		
	Иначе
		ДанныеФлага.ИндексКартинки = 0;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ПустойФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Пустой флаг'");
		
	КонецЕсли;
	
	Возврат ДанныеФлага;
	
КонецФункции

// Проверяет поддерживает ли веб-сервис Документооборота работу с файлами.
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенФункционалФайлов() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18");
	
КонецФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот3");
	
КонецФункции

// Возвращает копию объекта XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Источник - ОбъектXDTO - от куда копировать.
//
// Возвращаемое значение:
//   ОбъектXDTO - копия объекта-источника.
//
Функция КопияОбъектаXDTO(Прокси, Источник) Экспорт
	
	Результат = Неопределено;
	
	СкопироватьОбъектXDTO(Прокси, Результат, Источник);
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Макет = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ПолучитьМакет("ОписаниеВебСервисов");
	
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

// Возвращает список выражений на встроенном языке, которые требуется выполнить на стороне интегрированной системы, а
// также список печатных форм, которые требуется сформировать на стороне интегрированной системы, для последующей
// передачи результатов на сторону 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   СоответствиеПравилЗагрузкиВДООбъектамИС - Соответствие - соответствующие правила загрузки в ДО:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//   ТребуетсяСписокВыражений - Булево - требуется получение списка выражений на встроенном языке.
//   ТребуютсяПечатныеФормы - Булево - требуется получение списка и типа файлов печатных форм.
//
// Возвращаемое значение:
//   Структура:
//     * СоответствиеСпискаВыраженийОбъектамИС - Соответствие:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - Массив из Строка - список выражений на встроенном языке.
//     * СоответствиеПечатныхФормОбъектамИС - Соответствие:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - СписокXDTO - таблица печатных форм к передаче в ДО.
//     * ТипыФайловПечатныхФорм - Соответствие:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - Строка - тип файлов сохранения печатных форм.
//
Функция ПредварительныеДанныеДляВыгрузкиВДО(Прокси, СписокОбъектовИС, СоответствиеПравилЗагрузкиВДООбъектамИС,
		ТребуетсяСписокВыражений = Истина, ТребуютсяПечатныеФормы = Истина) Экспорт
	
	Данные = Новый Структура();
	Если ТребуетсяСписокВыражений Тогда
		Данные.Вставить("СоответствиеСпискаВыраженийОбъектамИС", Новый Соответствие);
	КонецЕсли;
	Если ТребуютсяПечатныеФормы Тогда
		Данные.Вставить("СоответствиеПечатныхФормОбъектамИС", Новый Соответствие);
		Данные.Вставить("ТипыФайловПечатныхФорм", Новый Соответствие);
	КонецЕсли;
	
	Если СписокОбъектовИС.Количество() = 0 Или (Не ТребуетсяСписокВыражений И Не ТребуютсяПечатныеФормы) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если ТребуетсяСписокВыражений Тогда
		ЗапросСпискаВыражений = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMGetExpressionListRequest");
		ПравилаДляСпискаВыражений = ЗапросСпискаВыражений.objects; // СписокXDTO
	КонецЕсли;
	Если ТребуютсяПечатныеФормы Тогда
		ЗапросПечатныхФорм = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMGetPrintedFormListRequest");
		ПравилаДляПечатныхФорм = ЗапросПечатныхФорм.objects; // СписокXDTO
	КонецЕсли;
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТребуетсяСписокВыражений Тогда
			ПравилаДляСпискаВыражений.Добавить(КопияОбъектаXDTO(Прокси, ПравилоЗагрузкиВДО));
		КонецЕсли;
		Если ТребуютсяПечатныеФормы Тогда
			ПравилаДляПечатныхФорм.Добавить(КопияОбъектаXDTO(Прокси, ПравилоЗагрузкиВДО));
		КонецЕсли;
	КонецЦикла;
	
	МассивВсехПечатныхФорм = Новый Массив;
	МассивВсехВыражений = Новый Массив;
	
	ЗапросыПакета = Новый Массив;
	
	Если ТребуетсяСписокВыражений И ПравилаДляСпискаВыражений.Количество() > 0 Тогда
		ЗапросыПакета.Добавить(ЗапросСпискаВыражений);
	КонецЕсли;
	Если ТребуютсяПечатныеФормы И ПравилаДляПечатныхФорм.Количество() > 0 Тогда
		ЗапросыПакета.Добавить(ЗапросПечатныхФорм);
	КонецЕсли;
	
	Если ЗапросыПакета.Количество() > 0 Тогда
		
		ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			ЗапросыПакета,
			Истина);
		
		Для Каждого Ответ Из ОтветНаЗапросыПакета.responses Цикл
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
					Прокси, Ответ, "DMGetExpressionListResponse") Тогда
				МассивВсехВыражений = Ответ.objectsExpressionRows;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
					Прокси, Ответ, "DMGetPrintedFormListResponse") Тогда
				МассивВсехПечатныхФорм = Ответ.objectsPrintedForms;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		СписокВыражений = Новый Массив;
		СписокПечатныхФорм = Новый Массив;
		ТипФайловПечатныхФорм = "";
		
		Если ПравилоЗагрузкиВДО <> Неопределено Тогда
			Если ТребуетсяСписокВыражений Тогда
				Для Каждого Элемент Из МассивВсехВыражений Цикл
					Если Элемент.object.id = ПравилоЗагрузкиВДО.id Тогда
						СписокВыражений = Элемент.expressionRows;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТребуютсяПечатныеФормы Тогда
				Для Каждого Элемент Из МассивВсехПечатныхФорм Цикл
					Если Элемент.object.id = ПравилоЗагрузкиВДО.id Тогда
						СписокПечатныхФорм = Элемент.printedForms;
						ТипФайловПечатныхФорм = Элемент.spreadsheetDocumentFileType;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяСписокВыражений Тогда
			Данные.СоответствиеСпискаВыраженийОбъектамИС.Вставить(ОбъектИС, СписокВыражений);
		КонецЕсли;
		Если ТребуютсяПечатныеФормы Тогда
			Данные.СоответствиеПечатныхФормОбъектамИС.Вставить(ОбъектИС, СписокПечатныхФорм);
			Данные.ТипыФайловПечатныхФорм.Вставить(ОбъектИС, ТипФайловПечатныхФорм);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Формирует универсальную таблицу присоединяемых печатных форм для последующего создания.
//
// Параметры:
//   ПечатныеФормы - Массив из ОбъектXDTO - список объектов XDTO типа DMPrintedForm.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы
//
Функция ПрисоединяемыеПечатныеФормы(ПечатныеФормы) Экспорт
	
	ПрисоединяемыеПечатныеФормы = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы();
	Для Каждого Строка Из ПечатныеФормы Цикл
		НоваяСтрока = ПрисоединяемыеПечатныеФормы.Добавить();
		НоваяСтрока.ИмяКоманды = Строка.commandName;
		НоваяСтрока.МенеджерПечати = Строка.printManager;
		НоваяСтрока.Обновлять = Строка.update;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Строка, "role") Тогда
			НоваяСтрока.РольФайлаID = Строка.role.objectID.id;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрисоединяемыеПечатныеФормы;
	
КонецФункции

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьИнтеграцию() Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияКоманд = Неопределено И Форма.Элементы.Найти("Список") <> Неопределено
			И (СтрНайти(Форма.ИмяФормы, "ФормаСписка") <> 0 Или СтрНайти(Форма.ИмяФормы, "ФормаВыбора") <> 0) Тогда
		Для Каждого ЭлементКомПанели Из Форма.Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементКомПанели) = Тип("ГруппаФормы") Тогда
				Для Каждого ЭлементГруппы Из ЭлементКомПанели.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы")
							И (ЭлементГруппы.Заголовок = НСтр("ru = 'Создать на основании'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Органайзер'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Печать'")) Тогда
						МестоРазмещенияКоманд = ЭлементКомПанели;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МестоРазмещенияКоманд <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку")
				<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
		
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание")
			И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
		Основание = Форма.Параметры.Основание;
		Если Основание.Свойство("Объект1СДокументооборота") Тогда
			КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДО");
			КомандаФормы.Действие = Основание.Объект1СДокументооборота.ID;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат выполнения выражения на встроенном языке. Выражение может использоваться только для вычисления
// какого-либо значения, которое в итоге вернет функция. Никакие изменения в базу данных при этом вноситься не
// должны, поэтому выражение выполняется в транзакции, которая откатывается после завершения выполнения.
//
// Параметры:
//   ВычисляемоеВыражение - Строка - выражение на встроенном языке.
//   Источник - Произвольный - источник данных.
//   Приемник - Произвольный - приемник данных.
//   ТекущаяСтрока - Произвольный - передается в случае, если выражение используется для заполнения реквизита
//     строки табличной части.
//
// Возвращаемое значение:
//   Произвольный - результат выполнения выражения на встроенном языке.
//
Функция РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Источник, Приемник = Неопределено,
		ТекущаяСтрока = Неопределено) Экспорт
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке.
	
	Параметры = Новый Структура;
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);
	
	Ошибки = "";
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(
			ВычисляемоеВыражение,
			Параметры);
	Исключение
		Ошибки = СтрШаблон(
			НСтр("ru = 'Найдена ошибка в выражении на встроенном языке:
				|%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Если Ошибки = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибки;
	КонецЕсли;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецФункции

// Копирует объект XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Приемник - ОбъектXDTO - куда копировать.
//   Источник - ОбъектXDTO - от куда копировать.
//
Процедура СкопироватьОбъектXDTO(Прокси, Приемник, Источник) Экспорт
	
	Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Источник.Тип().Имя);
	Для Каждого Свойство Из Источник.Тип().Свойства Цикл
		
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			СкопироватьОбъектXDTO(Прокси, Приемник[Свойство.Имя], Источник[Свойство.Имя]);
			
		ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
			Для Каждого СтрокаСпискаИсточника Из Источник[Свойство.Имя] Цикл
				СтрокаСпискаПриемника = Неопределено;
				СкопироватьОбъектXDTO(Прокси, СтрокаСпискаПриемника, СтрокаСпискаИсточника);
				Приемник[Свойство.Имя].Добавить(СтрокаСпискаПриемника);
			КонецЦикла;
			
		Иначе
			Приемник[Свойство.Имя] = Источник[Свойство.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект, или
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	
	ПодходящиеПравилаИнтеграции = Новый Соответствие;
	СписокПравил = Новый Массив;
	СписокПравил.Добавить(Правило);
	ПодходящиеПравилаИнтеграции.Вставить(ОбъектИС, СписокПравил);
	
	Результат = СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции);
	
	Если Результат[ОбъектИС].Успешно Тогда
		Возврат Результат[ОбъектИС].ОбъектXDTO;
	Иначе
		Возврат Результат[ОбъектИС].ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// Создает новые объекты Документооборота для списка объектов ИС по соответствующих им правилам.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, источник данных заполнения.
//   ПодходящиеПравилаИнтеграции - Соответствие - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Структура - результат по объекту ИС:
//       ** Успешно - Булево - Истина, если связанный объект в ДО был создан успешно, Ложь, если возникли ошибки.
//       ** ТекстОшибки - Строка - сообщение об ошибке.
//       ** ОбъектXDTO - ОбъектXDTO - созданный в ДО объект.
//
Функция СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateFromIncomingDataRequest");
	
	ТребуютсяПечатныеФормы = ДоступенФункционалФайлов();
	
	СоответствиеПравилЗагрузкиВДООбъектамИС = СоответствиеПравилЗагрузкиВДООбъектамИС(
		Прокси,
		СписокОбъектовИС,
		ПодходящиеПравилаИнтеграции);
	ПредварительныеДанные = ПредварительныеДанныеДляВыгрузкиВДО(
		Прокси,
		СписокОбъектовИС,
		СоответствиеПравилЗагрузкиВДООбъектамИС,,
		ТребуютсяПечатныеФормы);
	СоответствиеСпискаВыраженийОбъектамИС = ПредварительныеДанные.СоответствиеСпискаВыраженийОбъектамИС;
	Если ТребуютсяПечатныеФормы Тогда
		СоответствиеПечатныхФормОбъектамИС = ПредварительныеДанные.СоответствиеПечатныхФормОбъектамИС;
		ТипыФайловПечатныхФорм = ПредварительныеДанные.ТипыФайловПечатныхФорм;
	КонецЕсли;
	
	КонтрольОтправкиФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтрольОтправкиФайлов();
	
	// Добавим в запрос те объекты, для которых есть единственное подходящее dataLoadingRule
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		
		РезультатПоОбъекту = Новый Структура("Успешно, ТекстОшибки, ОбъектXDTO", Истина, "", Неопределено);
		
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = НСтр("ru = 'Не найдено подходящее правило загрузки данных в 1С:Документооборот'");
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецЕсли;
		
		СтруктураСозданияОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMIncomingDataRequestStructure",
			ОбъектИС);
		
		Попытка
			СтруктураСозданияОбъекта.incomingData = ВходящиеДанныеОбъектаИС(
				Прокси,
				ОбъектИС,
				СоответствиеСпискаВыраженийОбъектамИС[ОбъектИС]);
		Исключение
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецПопытки;
		
		СтруктураСозданияОбъекта.dataLoadingRule = ПравилоЗагрузкиВДО;
		
		Если ТребуютсяПечатныеФормы Тогда
			ПечатныеФормыКСозданию = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПечатныеФормыКСозданию(
				ОбъектИС,
				ПрисоединяемыеПечатныеФормы(СоответствиеПечатныхФормОбъектамИС[ОбъектИС]),
				Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов[ТипыФайловПечатныхФорм[ОбъектИС]],
				КонтрольОтправкиФайлов);
			Для Каждого ПараметрыСоздания Из ПечатныеФормыКСозданию Цикл
				ФайлXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлXDTOИзПараметровСоздания(
					Прокси,
					ПараметрыСоздания);
				СтруктураСозданияОбъекта.files.Добавить(ФайлXDTO);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.objects.Добавить(СтруктураСозданияОбъекта);
		
		Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
		
	КонецЦикла;
	
	Если Запрос.objects.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Для Каждого Строка Из КонтрольОтправкиФайлов Цикл
		РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
			Строка.Источник,
			Строка.ИмяФайла,
			Строка.ТабличныйДокумент)
	КонецЦикла;
	
	Для Каждого СтруктураОтвета Из Ответ.objects Цикл
		ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
			СтруктураОтвета.key.type,
			СтруктураОтвета.key.ID);
		Если СтруктураОтвета.success Тогда
			
			ОбъектXDTO = СтруктураОтвета.object;
			Результат[ОбъектИС].ОбъектXDTO = ОбъектXDTO;
			
			НаличиеПрисоединенныхФайлов = Неопределено;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "files") Тогда
				НаличиеПрисоединенныхФайлов = (ОбъектXDTO.files.Количество() > 0);
			КонецЕсли;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
				ОбъектXDTO.objectId.ID,
				ОбъектXDTO.objectId.type,
				ОбъектИС,
				НаличиеПрисоединенныхФайлов,
				Ложь);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
				ОбъектИС,
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type);
			
		Иначе
			Результат[ОбъектИС].Успешно = Ложь;
			Результат[ОбъектИС].ТекстОшибки = СтруктураОтвета.error.description;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит на стороне 1С:Документооборот правила загрузки данных в 1С:Документооборот, соответствующие
// переданным объектам интегрированной системы.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   ПодходящиеПравилаИнтеграции - Соответствие - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//
Функция СоответствиеПравилЗагрузкиВДООбъектамИС(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовИС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВсеПравила = Новый Массив;
	Для Каждого СоответствиеПравил Из ПодходящиеПравилаИнтеграции Цикл
		Для Каждого Правило Из СоответствиеПравил.Значение Цикл
			Если ВсеПравила.Найти(Правило) = Неопределено Тогда
				ВсеПравила.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СсылкиНаПравилаЗагрузкиВДО = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПравила, "ПравилоЗагрузкиДанныхВДО");
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		Если ПодходящиеПравилаИнтеграции[ОбъектИС].Количество() = 1 Тогда
			ПравилоИнтеграции = ПодходящиеПравилаИнтеграции[ОбъектИС][0];
			Результат.Вставить(
				ОбъектИС,
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					СсылкиНаПравилаЗагрузкиВДО[ПравилоИнтеграции],
					"DMDataLoadingRule"));
		Иначе
			Результат.Вставить(ОбъектИС, Неопределено)
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает запрос на взятие задачи в работу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAcceptTasksRequest.
//
Функция ВзятьЗадачуВРаботуЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMAcceptTasksRequest");
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	Запрос.tasks.Добавить(taskAction);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на выполнение действия задачи в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMExecuteTaskActionRequest.
//
Функция ВыполнитьДействиеЗадачиЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMExecuteTaskActionRequest");
	
	Запрос.taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	Запрос.taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	Запрос.taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	Запрос.resultOfTaskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.РезультатДействия.Тип);
	Запрос.resultOfTaskAction.name = ДанныеПоЗадаче.РезультатДействия.Наименование;
	Запрос.resultOfTaskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.РезультатДействия.ID,
		ДанныеПоЗадаче.РезультатДействия.Тип);
	
	Запрос.actionResultString = ДанныеПоЗадаче.РезультатДействияТекстом;
	Запрос.dataVersion = ДанныеПоЗадаче.ВерсияДанныхДействияЗадачи;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает структуру дополнительных данных задачи.
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction.
//   ТекущийПользовательИСотрудники - Массив из ОбъектXDTO - Объект XDTO типа DMUser, DMEmployee или Неопределено.
//
// Возвращаемое значение:
//   Структура:
//     * ОбластьДействия - см. ИнтеграцияС1СДокументооборот3.НоваяОбластьДействияЗадачи
//     * ДеревоПриложений - см. ИнтеграцияС1СДокументооборот3.НовоеДеревоПриложений
//
Функция ДополнительныеДанныеПоЗадаче(ЗадачаXDTO, ТекущийПользовательИСотрудники = Неопределено) Экспорт
	
	Если ТекущийПользовательИСотрудники = Неопределено Тогда
		ТекущийПользовательИСотрудники =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	
	ДополнительныеДанные.Вставить("ОбластьДействия", ОбластьДействияЗадачи(ЗадачаXDTO.actionArea, ЗадачаXDTO.flag));
	
	ДеревоПриложений = НовоеДеревоПриложений();
	ДеревоПриложенийИзXDTO(ЗадачаXDTO, ДеревоПриложений.Строки, ТекущийПользовательИСотрудники);
	ДополнительныеДанные.Вставить("ДеревоПриложений", ДеревоПриложений);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

// Преобразует таблицу "Быстрый поиск" в набор фильтров для запроса к веб-сервису Документооборота
// на получение списка задач.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Фильтры - СписокЗначений - отборы, которые требуется наложить на список задач.
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//
Процедура ДополнитьФильтрыОтбораЗадач(Прокси, Фильтры, БыстрыйПоиск) Экспорт
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Параметр = "Автор" Тогда
			
			Автор = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				Строка.ЗначениеID,
				Строка.ЗначениеТип,
				Строка.ПредставлениеЗначения);
			АвторXDTO = УчастникЗадач(Прокси, Автор);
			Фильтры.Добавить(АвторXDTO, "author");
			
		ИначеЕсли Строка.Параметр = "Исполнитель" Тогда
			
			Исполнитель = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				Строка.ЗначениеID,
				Строка.ЗначениеТип,
				Строка.ПредставлениеЗначения);
			ИсполнительXDTO = УчастникЗадач(Прокси, Исполнитель);
			Фильтры.Добавить(ИсполнительXDTO, "performer");
			
		ИначеЕсли Строка.Параметр = "ВидДействия" Тогда
			
			ВидДействияXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				Строка.ЗначениеID,
				Строка.ЗначениеТип);
			Фильтры.Добавить(ВидДействияXDTO, "taskActionType");
			
		ИначеЕсли Строка.Параметр = "Проект" Тогда
			
			ПроектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				Строка.ЗначениеID,
				Строка.ЗначениеТип);
			Фильтры.Добавить(ПроектXDTO, "project");
			
		ИначеЕсли Строка.Параметр = "Флаг" Тогда
			
			Фильтры.Добавить(Строка.Значение, "flag");
			
		ИначеЕсли Строка.Параметр = "ДатаС" Тогда
			
			Фильтры.Добавить(Строка.Значение, "beginDate");
			
		ИначеЕсли Строка.Параметр = "ДатаПо" Тогда
			
			Фильтры.Добавить(Строка.Значение, "endDate");
			
		ИначеЕсли Строка.Параметр = "Состояние" Тогда
			
			ОтборыПоСтатусуЗадач = Новый Массив;
			СостоянияЗадач = Новый Массив;
			
			ТипЗначения = ТипЗнч(Строка.Значение);
			Если ТипЗначения = Тип("Строка") Тогда
				
				Если Строка.ЗначениеТип = "DMTaskStatusFilter" Тогда
					ОтборыПоСтатусуЗадач.Добавить(Строка.ЗначениеID);
				ИначеЕсли Строка.ЗначениеТип = "DMTaskStatus" Тогда
					СостоянияЗадач.Добавить(Строка.ЗначениеID);
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
				
				Для Каждого Элемент Из Строка.Значение Цикл
					
					Если Элемент.Значение.Тип = "DMTaskStatusFilter" Тогда
						ОтборыПоСтатусуЗадач.Добавить(Элемент.Значение.ID);
					ИначеЕсли Элемент.Значение.Тип = "DMTaskStatus" Тогда
						СостоянияЗадач.Добавить(Элемент.Значение.ID);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОтборыПоСтатусуЗадач.Количество() > 0 Тогда
				Фильтры.Добавить(ОтборыПоСтатусуЗадач, "taskStatusFilter");
			КонецЕсли;
			
			Если СостоянияЗадач.Количество() > 0 Тогда
				Фильтры.Добавить(СостоянияЗадач, "taskStatus");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает на форме задачи или списка задач новую группу команд создания на основании с подходящими правилами.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ПодходящиеПравила - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПравилаИнтеграции
//
// Возвращаемое значение:
//   Строка - ключ созданной страницы задач.
//
Функция НоваяСтраницаКомандСозданияНаОсновании(Форма, ПодходящиеПравила) Экспорт
	
	КлючСтраницы = Строка(Новый УникальныйИдентификатор);
	КлючСтраницы = СтрЗаменить(КлючСтраницы, "-", "_");
	
	// Элементы, подлежащие копированию.
	ИмяГруппыСтраниц = "ГруппаСтраницыКоманд";
	ИмяИсходнойСтраницы = "ГруппаСтраницаКоманд";
	ИсходнаяСтраница = Форма.Элементы[ИмяИсходнойСтраницы];
	ИмяИсходногоПодменю = "ФормаСоздатьНаОсновании";
	ИмяИсходнойПанели = "ГруппаКомандыЗадачи";
	ИсходнаяПанель = Форма.Элементы[ИмяИсходнойПанели];
	
	ИмяНовойСтраницы = ИмяИсходнойСтраницы + КлючСтраницы;
	ИмяНовойПанели = ИмяИсходнойПанели + КлючСтраницы;
	
	// Создадим новую страницу.
	НоваяСтраница = Форма.Элементы.Добавить(ИмяНовойСтраницы, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппыСтраниц]);
	ЗаполнитьЗначенияСвойств(НоваяСтраница, ИсходнаяСтраница,, "Имя, ПутьКДаннымЗаголовка");
	
	// Создадим новую командную панель.
	НоваяПанель = Форма.Элементы.Добавить(ИмяНовойПанели, Тип("ГруппаФормы"), НоваяСтраница);
	ЗаполнитьЗначенияСвойств(НоваяПанель, ИсходнаяПанель,, "Имя");
	
	// Скопируем элементы командной панели, ограничившись двумя уровнями.
	Для Каждого ИсходныйЭлемент Из ИсходнаяПанель.ПодчиненныеЭлементы Цикл
		НовыйЭлемент = Форма.Элементы.Добавить(ИсходныйЭлемент.Имя + КлючСтраницы, ТипЗнч(ИсходныйЭлемент), НоваяПанель);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент,, "Имя");
		Если ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаФормы") Тогда
			НоваяГруппа = НовыйЭлемент;
			Для Каждого ИсходныйЭлементГруппы Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
				НовыйЭлементГруппы = Форма.Элементы.Добавить(ИсходныйЭлементГруппы.Имя + КлючСтраницы,
					ТипЗнч(ИсходныйЭлементГруппы), НоваяГруппа);
				ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, ИсходныйЭлементГруппы, , "Имя");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Дополним стандартное подменю создания пунктами, специфичными для этого вида объекта.
	НовоеПодменю = Форма.Элементы.Найти(ИмяИсходногоПодменю + КлючСтраницы);
	Для Каждого Правило Из ПодходящиеПравила Цикл
		ИмяКоманды = "Создать_" + СтрЗаменить(Строка(Правило.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаСоздатьСвязанныйОбъект = Форма.Команды.Добавить(ИмяКоманды);
			КомандаСоздатьСвязанныйОбъект.Действие = "Подключаемый_СоздатьСвязанныйОбъект";
		КонецЕсли;
		
		ИмяЭлемента = ИмяКоманды + КлючСтраницы;
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда // страховка от дубликатов правил
			Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), НовоеПодменю);
			Кнопка.Заголовок = Правило.ПредставлениеОбъектаИС;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КлючСтраницы;
	
КонецФункции

// Конструктор дерева приложений задачи.
//
// Возвращаемое значение:
//   ДеревоЗначений:
//     * ИндексКартинки - Число, Картинка
//     * Приложение - Строка
//     * ПриложениеID - Строка
//     * ПриложениеТип - Строка
//     * ПредставлениеПриложения - Строка
//     * ТипСтроки - Строка
//     * РольПредмета - Строка
//     * ДоступноУдаление - Булево
//     * ОбязательноеЗаполнение - Булево
//     * ПометкаУдаления - Булево
//     * ЯвляетсяОригиналом - Булево
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//     * РольФайлаID - Строка
//     * РольОбязательная - Булево
//     * ПредставлениеHTML - Строка
//     * ПредпросмотрУрезан - Булево
//     * ПодписанЭП - Булево
//     * Зашифрован - Булево
//     * ДатаМодификации - Дата
//     * Расширение - Строка
//
Функция НовоеДеревоПриложений() Экспорт
	
	ТипыКартинки = Новый Массив;
	ТипыКартинки.Добавить(Тип("Число"));
	ТипыКартинки.Добавить(Тип("Картинка"));
	
	НовоеДеревоПриложений = Новый ДеревоЗначений;
	НовоеДеревоПриложений.Колонки.Добавить("Ссылка",
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип);
	НовоеДеревоПриложений.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов(ТипыКартинки));
	НовоеДеревоПриложений.Колонки.Добавить("Приложение", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПриложениеID", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПриложениеТип", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредставлениеПриложения", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("РольПредмета", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ДоступноУдаление", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РольОбязательная", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ОжиданиеПредпросмотра", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ПустаяСтрока", Новый ОписаниеТипов("Строка"));
	
	НовоеДеревоПриложений.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ЯвляетсяОригиналом", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("Редактируется", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РедактируетсяТекущимПользователем", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РольФайлаID", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредставлениеHTML", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредпросмотрУрезан", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ПодписанЭП", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("Зашифрован", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ДатаМодификации", Новый ОписаниеТипов("Дата"));
	НовоеДеревоПриложений.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоПриложений;
	
КонецФункции

// Конструктор области действия задачи.
//
// Возвращаемое значение:
//   Структура:
//     * ВыполнитьДействиеЗадачиВариант1 - Неопределено
//     * ВыполнитьДействиеЗадачиВариант2 - Неопределено
//     * ВыполнитьДействиеЗадачиВариант3 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону1 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону2 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону3 - Неопределено
//     * ВыбратьШаблонДляВыполненияЗадачи - Неопределено
//     * ВыполнитьПодключаемоеДействиеЗадачи1 - Неопределено
//     * ОтменитьВыполнение - Неопределено
//     * ВерсияДанныхДействияЗадачи - Строка
//     * РезультатДействияТекстом - Строка
//     * РезультатДействияПолеВвода - Неопределено
//     * ПодменюФлаги - Неопределено
//     * Флаг - Строка
//     * ВзятьВРаботу - Неопределено
//     * ОтменитьВзятиеВРаботу - Неопределено
//     * РезультатВарианта1 - Строка
//     * РезультатВарианта1ID - Строка
//     * РезультатВарианта1Тип - Строка
//     * РезультатВарианта2 - Строка
//     * РезультатВарианта2ID - Строка
//     * РезультатВарианта2Тип - Строка
//     * РезультатВарианта3 - Строка
//     * РезультатВарианта3ID - Строка
//     * РезультатВарианта3Тип - Строка
//
Функция НоваяОбластьДействияЗадачи() Экспорт
	
	ОбластьДействия = Новый Структура;
	
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант1", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант2", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант3", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону1", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону2", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону3", Неопределено);
	ОбластьДействия.Вставить("ВыбратьШаблонДляВыполненияЗадачи", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьПодключаемоеДействиеЗадачи1", Неопределено);
	ОбластьДействия.Вставить("ОтменитьВыполнение", Неопределено);
	
	ОбластьДействия.Вставить("РезультатВарианта1", "");
	ОбластьДействия.Вставить("РезультатВарианта1ID", "");
	ОбластьДействия.Вставить("РезультатВарианта1Тип", "");
	ОбластьДействия.Вставить("РезультатВарианта2", "");
	ОбластьДействия.Вставить("РезультатВарианта2ID", "");
	ОбластьДействия.Вставить("РезультатВарианта2Тип", "");
	ОбластьДействия.Вставить("РезультатВарианта3", "");
	ОбластьДействия.Вставить("РезультатВарианта3ID", "");
	ОбластьДействия.Вставить("РезультатВарианта3Тип", "");
	
	ОбластьДействия.Вставить("ВерсияДанныхДействияЗадачи", "");
	ОбластьДействия.Вставить("РезультатДействияТекстом", "");
	ОбластьДействия.Вставить("РезультатДействияПолеВвода", Неопределено);
	ОбластьДействия.Вставить("ПодменюФлаги", Неопределено);
	ОбластьДействия.Вставить("Флаг", "");
	ОбластьДействия.Вставить("ВзятьВРаботу", Неопределено);
	ОбластьДействия.Вставить("ОтменитьВзятиеВРаботу", Неопределено);
	
	Возврат ОбластьДействия;
	
КонецФункции

// Выполняет перерисовку области действия в форме задачи и в форме списка задач.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма с областью действия задачи.
//   ОбластьДействия - см. ИнтеграцияС1СДокументооборот3.НоваяОбластьДействияЗадачи
//   СохраненныйКомментарий - Строка - результат действия текстом.
//   ИзменятьШрифт - Булево - будет изменен шрифт элементов формы при необходимости.
//
Процедура ОбновитьОбластьДействия(Форма, ОбластьДействия, СохраненныйКомментарий = Неопределено,
		ИзменятьШрифт = Истина) Экспорт
	
	// Обновим элементы формы.
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант1,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант1,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант2,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант2,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант2,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант3,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант3,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант3,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону1,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону1,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону2,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону2,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону2,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону3,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону3,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону3,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыбратьШаблонДляВыполненияЗадачи,
		Форма.Команды.ВыбратьШаблонДляВыполненияЗадачи,
		ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьПодключаемоеДействиеЗадачи1,
		Форма.Команды.ВыполнитьПодключаемоеДействиеЗадачи1,
		ОбластьДействия.ВыполнитьПодключаемоеДействиеЗадачи1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ОтменитьВыполнение,
		Форма.Команды.ОтменитьВыполнение,
		ОбластьДействия.ОтменитьВыполнение,
		ИзменятьШрифт);
	
	ОбновитьПолеВводаВОбластиДействия(
		Форма.Элементы.РезультатДействияТекстом,
		ОбластьДействия.РезультатДействияПолеВвода);
	
	ОбновитьГруппуФормы(
		Форма.Элементы.ПодменюФлаги,
		ОбластьДействия.ПодменюФлаги);
	ДанныеФлага = ДанныеФлага(ОбластьДействия.Флаг);
	Форма.Элементы.ПодменюФлаги.Картинка = ДанныеФлага.Картинка;
	
	ОбновитьКнопкуФормы(Форма.Элементы.ВзятьВРаботу, ОбластьДействия.ВзятьВРаботу);
	ОбновитьКнопкуФормы(Форма.Элементы.ОтменитьВзятиеВРаботу, ОбластьДействия.ОтменитьВзятиеВРаботу);
	
	// Обновим реквизиты формы.
	Если СохраненныйКомментарий = Неопределено Тогда
		Форма.РезультатДействияТекстом = ОбластьДействия.РезультатДействияТекстом;
	Иначе
		Форма.РезультатДействияТекстом = СохраненныйКомментарий;
	КонецЕсли;
	
	Форма.ВерсияДанныхДействияЗадачи = ОбластьДействия.ВерсияДанныхДействияЗадачи;
	Форма.РезультатВарианта1 = ОбластьДействия.РезультатВарианта1;
	Форма.РезультатВарианта1ID = ОбластьДействия.РезультатВарианта1ID;
	Форма.РезультатВарианта1Тип = ОбластьДействия.РезультатВарианта1Тип;
	Форма.РезультатВарианта2 = ОбластьДействия.РезультатВарианта2;
	Форма.РезультатВарианта2ID = ОбластьДействия.РезультатВарианта2ID;
	Форма.РезультатВарианта2Тип = ОбластьДействия.РезультатВарианта2Тип;
	Форма.РезультатВарианта3 = ОбластьДействия.РезультатВарианта3;
	Форма.РезультатВарианта3ID = ОбластьДействия.РезультатВарианта3ID;
	Форма.РезультатВарианта3Тип = ОбластьДействия.РезультатВарианта3Тип;
	
КонецПроцедуры

// Обновляет представление быстрого поиска. Возвращает представление фильтров.
//
// Параметры:
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//   КнопкаСброситьОтбор - КнопкаФормы - кнопка "Сбросить отбор".
//
// Возвращаемое значение:
//   Строка - представление фильтров
//
Функция ОбновитьПредставлениеБыстрогоПоиска(БыстрыйПоиск, КнопкаСброситьОтбор) Экспорт
	
	ЕстьБыстрыйПоиск = Ложь;
	ПредставлениеФильтров = Новый ФорматированнаяСтрока("");
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Строка.ПредставлениеЗначения = ПредставлениеЗначения(Строка.Значение);
		
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Фиксированный Тогда
			
			ЕстьБыстрыйПоиск = Истина;
			
			Если Строка(ПредставлениеФильтров) <> "" Тогда
				ПредставлениеФильтров = Новый ФорматированнаяСтрока(ПредставлениеФильтров, ", ");
			КонецЕсли;
			
			ПредставлениеФильтров = Новый ФорматированнаяСтрока(
				ПредставлениеФильтров,
				Новый ФорматированнаяСтрока(Строка.ПредставлениеПараметра,, ЦветаСтиля.ТекстИнформационнойНадписи),
				Новый ФорматированнаяСтрока(" " + Строка.ПредставлениеЗначения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	КнопкаСброситьОтбор.Видимость = ЕстьБыстрыйПоиск;
	
	Возврат ПредставлениеФильтров;
	
КонецФункции

// Возвращает запрос на отмену взятия задачи в работу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRevokeTaskAcceptanceRequest.
//
Функция ОтменитьВзятиеЗадачиВРаботуЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMRevokeTaskAcceptanceRequest");
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	Запрос.tasks.Добавить(taskAction);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос к 1С:Документооборот на получение списка задач.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТекущаяСтраница - Число - номер текущей страницы списка.
//   РазмерСтраницыДинамическогоСписка - Число - количество задач на одной странице.
//   ПолеДляСортировки - Строка - имя реквизита, по которому будет отсортирован список.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   Фильтры - СписокЗначений - отборы, которые требуется наложить на список задач.
//   ОтображениеКарточкиЗадачи - ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения - вариант отображения области
//     чтения задачи.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDynamicListRequest.
//
Функция СписокЗадачЗапрос(Прокси, ТекущаяСтраница, РазмерСтраницыДинамическогоСписка, ПолеДляСортировки,
		НаправлениеСортировкиПоля, Фильтры, ОтображениеКарточкиЗадачи) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetDynamicListRequest");
	
	Запрос.numberOfObjectsPerPage = РазмерСтраницыДинамическогоСписка;
	Запрос.page = ТекущаяСтраница;
	Запрос.type = "DMTaskAction";
	
	УсловияОтбора = Запрос.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Истина;
	УсловияОтбора.Добавить(Условие);
	
	Для Каждого Фильтр Из Фильтры Цикл
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = Фильтр.Представление;
		Если ТипЗнч(Фильтр.Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из Фильтр.Значение Цикл
				Условие.valueList.Добавить(Элемент);
			КонецЦикла;
		Иначе
			Условие.value = Фильтр.Значение;
		КонецЕсли;
		УсловияОтбора.Добавить(Условие);
	КонецЦикла;
	
	Сортировка = Запрос.orderBy; // СписокXDTO
	УсловиеСортировки = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMDynamicListSortingCondition");
	УсловиеСортировки.column = ПолеДляСортировки;
	Если НаправлениеСортировкиПоля = Истина Тогда
		УсловиеСортировки.sortingOperator = "DESC";
	Иначе
		УсловиеСортировки.sortingOperator = "ASC";
	КонецЕсли;
	Сортировка.Добавить(УсловиеСортировки);
	
	Если ОтображениеКарточкиЗадачи <> Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		ПолучаемыеПоля.Добавить("htmlView");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Сбрасываете быстрый поиск.
//
// Параметры:
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//   КнопкаСброситьОтбор - КнопкаФормы - кнопка "Сбросить отбор".
//
Процедура СброситьОтборНаСервере(БыстрыйПоиск, КнопкаСброситьОтбор) Экспорт
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Строка.Фиксированный Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Значение = Строка.ЗначениеПоУмолчанию;
		Строка.ЗначениеID = Строка.ЗначениеПоУмолчаниюID;
		Строка.ЗначениеТип = Строка.ЗначениеПоУмолчаниюТип;
		
	КонецЦикла;
	
	ОбновитьПредставлениеБыстрогоПоиска(БыстрыйПоиск, КнопкаСброситьОтбор);
	
КонецПроцедуры

// Конструктор структуры группы формы.
//
// Параметры:
//   ГруппаФормыXDTO - ОбъектXDTO - объект XDTO типа DMTaskActionFormGroup.
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * Заголовок - Строка
//
Функция СтруктураГруппыФормы(ГруппаФормыXDTO) Экспорт
	
	СтруктураГруппыФормы = Новый Структура;
	СтруктураГруппыФормы.Вставить("Видимость", ГруппаФормыXDTO.visible);
	СтруктураГруппыФормы.Вставить("Доступность", ГруппаФормыXDTO.enabled);
	СтруктураГруппыФормы.Вставить("Заголовок", ГруппаФормыXDTO.title);
	
	Возврат СтруктураГруппыФормы;
	
КонецФункции

// Конструктор структуры кнопки формы.
//
// Параметры:
//   КнопкаXDTO - ОбъектXDTO - объект XDTO типа DMTaskActionButton.
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * Заголовок - Строка
//     * ВысотаЗаголовка - Число
//     * ПодсказкаКоманды - Строка
//     * ЦветТекста - Цвет
//     * Шрифт - Шрифт
//
Функция СтруктураКнопкиФормы(КнопкаXDTO) Экспорт
	
	СтруктураКнопкиФормы = Новый Структура;
	СтруктураКнопкиФормы.Вставить("Видимость", КнопкаXDTO.visible);
	СтруктураКнопкиФормы.Вставить("Доступность", КнопкаXDTO.enabled);
	СтруктураКнопкиФормы.Вставить("Заголовок", КнопкаXDTO.title);
	СтруктураКнопкиФормы.Вставить("ВысотаЗаголовка", КнопкаXDTO.titleHeight);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "hint") Тогда
		СтруктураКнопкиФормы.Вставить("ПодсказкаКоманды", КнопкаXDTO.hint);
	Иначе
		СтруктураКнопкиФормы.Вставить("ПодсказкаКоманды", Неопределено);
	КонецЕсли;
	
	ЦветТекста = Новый Цвет;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "textColor") Тогда
		Если КнопкаXDTO.textColor = "Positive" Тогда
			ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли КнопкаXDTO.textColor = "Negative" Тогда
			ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	СтруктураКнопкиФормы.Вставить("ЦветТекста", ЦветТекста);
	
	Шрифт = Новый Шрифт;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "font") Тогда
		Если КнопкаXDTO.font = "Normal" Тогда
			Шрифт = ШрифтыСтиля.ШрифтКнопкиВыполненияЗадачиОбычный;
		ИначеЕсли КнопкаXDTO.font = "Small" Тогда
			Шрифт = ШрифтыСтиля.ШрифтКнопкиВыполненияЗадачиМелкий;
		КонецЕсли;
	КонецЕсли;
	СтруктураКнопкиФормы.Вставить("Шрифт", Шрифт);
	
	Возврат СтруктураКнопкиФормы;
	
КонецФункции

// Конструктор структуры поля ввода формы.
//
// Параметры:
//   ПолеВводаXDTO - ОбъектXDTO - объект XDTO типа DMActionResultInputField.
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * ТолькоПросмотр - Булево
//     * ПодсказкаВвода - Строка
//
Функция СтруктураПоляВводаФормы(ПолеВводаXDTO) Экспорт
	
	СтруктураПоляВводаФормы = Новый Структура;
	СтруктураПоляВводаФормы.Вставить("Видимость", ПолеВводаXDTO.visible);
	СтруктураПоляВводаФормы.Вставить("ТолькоПросмотр", ПолеВводаXDTO.readOnly);
	СтруктураПоляВводаФормы.Вставить("ПодсказкаВвода", ПолеВводаXDTO.inputHint);
	
	Возврат СтруктураПоляВводаФормы;
	
КонецФункции

// Устанавливает условное оформление таблицы "Быстрый поиск".
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных.
//   ТаблицаБыстрыйПоиск - ТаблицаФормы - таблица "Быстрый поиск".
//   ЯчейкаЗначение - ПолеФормы - ячейка "Значение" таблицы "Быстрый поиск".
//
Процедура УстановитьУсловноеОформление(УсловноеОформление, ТаблицаБыстрыйПоиск, ЯчейкаЗначение) Экспорт
	
	// Пустой текст значения.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЯчейкаЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя + ".Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Фиксированная ячейка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя + ".Фиксированный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветФонаВсеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Возвращает запрос на установку флага задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMSetFlagRequest.
//
Функция УстановитьФлагЗадачиЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMSetFlagRequest");
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	Запрос.tasks.Добавить(taskAction);
	
	Если ЗначениеЗаполнено(ДанныеПоЗадаче.Флаг) Тогда
		Запрос.flag = ДанныеПоЗадаче.Флаг;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Формирует объект XDTO, описывающий участника задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMTaskParticipant.
//
Функция УчастникЗадач(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	МассивСтрокПредставления = Новый Массив;
	МассивСтрокПредставления.Добавить(Исполнитель.Наименование);
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации)
			И ЗначениеЗаполнено(ОсновнойОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ОсновнойОбъектАдресации.Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации)
			И ЗначениеЗаполнено(ДополнительныйОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ДополнительныйОбъектАдресации.Наименование);
	КонецЕсли;
	Представление = СтрСоединить(МассивСтрокПредставления, ", ");
	
	УчастникЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMTaskParticipant");
	УчастникЗадач.name = Представление;
	
	Если Исполнитель.Тип = "DMEmployee" Тогда
		
		УчастникЗадач.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMEmployee");
		УчастникЗадач.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMEmployee");
		УчастникЗадач.employee.name = Исполнитель.Наименование;
		УчастникЗадач.employee.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMEmployee");
		
	ИначеЕсли Исполнитель.Тип = "DMCompleteRole" Тогда
		
		УчастникЗадач.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMCompleteRole");
		УчастникЗадач.completeRole = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMCompleteRole");
		УчастникЗадач.completeRole.name = Исполнитель.Наименование;
		УчастникЗадач.completeRole.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMCompleteRole");
		
	ИначеЕсли Исполнитель.Тип = "DMBusinessProcessExecutorRole" Тогда
		
		УчастникЗадач.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
		УчастникЗадач.completeRole = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMCompleteRole");
		УчастникЗадач.completeRole.name = Представление;
		УчастникЗадач.completeRole.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьПолнуюРоль(
			Прокси,
			УчастникЗадач.completeRole,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не корректно задан тип участника задачи: %1'"), Исполнитель.Тип);
		
	КонецЕсли;
	
	Возврат УчастникЗадач;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВебСервисБИД

Процедура ДобавитьОписаниеДопРеквизитов(СписокРеквизитовXDTO, СписокРеквизитов, Синонимы)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяДопРеквизита(Реквизит);
		РеквизитXDTO.synonym = Реквизит.Наименование;
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.ТипЗначения, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеРеквизитов(СписокРеквизитовXDTO, СписокРеквизитов, Синонимы, ЭтоСтандартныеРеквизиты = Ложь)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Синоним = Реквизит.Синоним;
		
		Если ЭтоСтандартныеРеквизиты Тогда
			Если Реквизит.Имя <> "Код"
					И Реквизит.Имя <> "Наименование"
					И Реквизит.Имя <> "Владелец"
					И Реквизит.Имя <> "Родитель"
					И Реквизит.Имя <> "Номер"
					И Реквизит.Имя <> "Дата"
					И Реквизит.Имя <> "ПометкаУдаления" Тогда
				Продолжить;
			КонецЕсли;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Синоним = НСтр("ru = 'Пометка удаления'");
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = Реквизит.Имя;
		РеквизитXDTO.synonym = ?(Синоним = "", Реквизит.Имя, Синоним);
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.Тип, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеТиповРеквизита(СписокТиповXDTO, ТипРеквизита, Синонимы)
	
	МассивТипов = ТипРеквизита.Типы();
	
	Если МассивТипов.Количество() > 3 Тогда
		СписокТиповXDTO.Добавить("Составной тип");
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеТипа Из МассивТипов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипа);
		
		Если (ОбъектМетаданных <> Неопределено) Тогда
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Если ЧастиИмени[0] = "Справочник"
					Или ЧастиИмени[0] = "Документ"
					Или ЧастиИмени[0] = "Перечисление"
					Или ЧастиИмени[0] = "ПланВидовХарактеристик"
					Или ЧастиИмени[0] = "БизнесПроцесс"
					Или ЧастиИмени[0] = "Задача" Тогда
				СписокТиповXDTO.Добавить(ПолноеИмя);
				ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			Иначе
				СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
			КонецЕсли;
		Иначе
			СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСиноним(Синонимы, ПолноеИмя, Синоним)
	
	Если Синонимы.Получить(ПолноеИмя) = Неопределено Тогда
		Синонимы.Вставить(ПолноеИмя, Синоним);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПечатныеФормыОбъектаМетаданных(ОбъектМетаданныхXDTO)
	
	ТаблицаПечатныхФорм = ИнтеграцияС1СДокументооборотБазоваяФункциональность.МенеджерыПечати(
		ОбъектМетаданныхXDTO.name);
	
	Для Каждого Строка Из ТаблицаПечатныхФорм Цикл
		ПечатнаяФормаXDTO = СоздатьОбъектБИД("DMILPrintedForm");
		ПечатнаяФормаXDTO.commandName = Строка.ИмяКоманды;
		ПечатнаяФормаXDTO.printManager = Строка.МенеджерПечати;
		ПечатнаяФормаXDTO.commandPresentation = Строка.ПредставлениеКоманды;
		
		ОбъектМетаданныхXDTO.printedForms.Добавить(ПечатнаяФормаXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПечатныеФормыОбъектовМетаданных(metadataObjects)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Возврат;
	Иначе
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		ТаблицаПечатныхФорм = МодульУправлениеПечатью.СоздатьКоллекциюКомандПечати();
	КонецЕсли;
	
	Для Каждого ОбъектМетаданныхXDTO Из metadataObjects Цикл
		
		ЧастиИмени = СтрРазделить(ОбъектМетаданныхXDTO.name, ".");
		Если ЧастиИмени.Количество() >= 2 Тогда
			КлассОМ = ЧастиИмени[0];
			ИмяОМ = ЧастиИмени[1];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
			МенеджерОбъекта = Документы[ИмяОМ];
		ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
			МенеджерОбъекта = Справочники[ИмяОМ];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТаблицаПечатныхФорм.Очистить();
		Попытка
			МенеджерОбъекта.ДобавитьКомандыПечати(ТаблицаПечатныхФорм);
		Исключение
			// Объект не имеет печатных форм.
			Продолжить;
		КонецПопытки;
		
		Для Каждого Строка Из ТаблицаПечатныхФорм Цикл
			Если Не ЗначениеЗаполнено(Строка.МенеджерПечати) Тогда
				Продолжить;
			КонецЕсли;
			
			ПечатнаяФормаXDTO = СоздатьОбъектБИД("DMILPrintedForm");
			ПечатнаяФормаXDTO.commandName = Строка.Идентификатор;
			ПечатнаяФормаXDTO.printManager = Строка.МенеджерПечати;
			ПечатнаяФормаXDTO.commandPresentation = Строка.Представление;
			
			ОбъектМетаданныхXDTO.printedForms.Добавить(ПечатнаяФормаXDTO);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Сообщение);
	ТекстОбъектаСообщение = ЗаписьXML.Закрыть();
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	ТекстОбъектаРезультат = ЗаписьXML.Закрыть();
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Превышено время ожидания выполнения запроса.
			|Время выполнения: %1
			|
			|Текст запроса:
			|%2
			|
			|Результат запроса:
			|%3'"),
				ВремяВыполнения,
				ТекстОбъектаСообщение,
				ТекстОбъектаРезультат));
	
КонецПроцедуры

// Проверяет корректность выражения на встроенном языке, используемого для заполнения реквизитов в
// правилах интеграции.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILCheckExpressionOnBuiltInLanguageRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILOK или DMILError.
//
Функция ПроверитьВыражениеНаВстроенномЯзыке(Сообщение)
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке.
	
	НачатьТранзакцию();
	
	Попытка
		
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Сообщение.objectType);
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Сообщение.objectType);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника)
				Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьЭлемент();
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьДокумент();
		КонецЕсли;
		Источник.Заполнить(Неопределено);
		
		Если СокрЛП(Сообщение.expressionOnBuiltInLanguage) <> "" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Источник", Источник);
			Параметры.Вставить("Результат", Неопределено);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "tabularSectionName")
					И Сообщение.tabularSectionName <> "" Тогда
				Параметры.Вставить("ТекущаяСтрока", Источник[Сообщение.tabularSectionName].Добавить());
			КонецЕсли;
			
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Сообщение.expressionOnBuiltInLanguage, Параметры);
		КонецЕсли;
		
		Ответ = СоздатьОбъектБИД("DMILOK");
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Найдена ошибка в выражении на встроенном языке'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Ответ;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецФункции

// Ищет в правилах интеграции выражения на встроенном языке, которые требуется выполнить на стороне ДО,
// для последующего заполнения данных объекта на стороне ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetExpressionListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetExpressionListResponse или DMILError.
//
Функция СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetExpressionListResponse");
		
		СписокОбъектовИС = Новый Массив;
		СоответствиеObjectIDОбъектамИС = Новый Соответствие;
		
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			СписокОбъектовИС.Добавить(Ссылка);
			СоответствиеObjectIDОбъектамИС.Вставить(Ссылка, ObjectID);
		КонецЦикла;
		
		ПодходящиеПравила = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
			СписокОбъектовИС,
			Истина);
		
		ПравилаДляАнализа = Новый Массив;
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			Для Каждого Правило Из СоответствиеПравил.Значение Цикл
				Если ПравилаДляАнализа.Найти(Правило) = Неопределено Тогда
					ПравилаДляАнализа.Добавить(Правило);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаВыраженияПравил =
			Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ВыраженияДляВыполненияНаСторонеДО(ПравилаДляАнализа);
		
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			СоответствиеПравилXDTO = СоздатьОбъектБИД("DMILObjectExpressionRow");
			СоответствиеПравилXDTO.object = СоответствиеObjectIDОбъектамИС[СоответствиеПравил.Ключ];
			
			КолВоПравил = СоответствиеПравил.Значение.Количество();
			Если КолВоПравил = 1 Тогда
				ВыраженияПравила = ТаблицаВыраженияПравил.НайтиСтроки(Новый Структура("Ссылка", СоответствиеПравил.Значение[0]));
				Для Каждого ВыражениеДляВыполненияНаСторонеДО Из ВыраженияПравила Цикл
					ВыражениеПравилаXDTO = СоздатьОбъектБИД("DMILExpressionRow");
					ПодготовитьВычисляемоеВыражениеКПередачеНаСторонуДО(
						ВыражениеПравилаXDTO,
						ВыражениеДляВыполненияНаСторонеДО);
					СоответствиеПравилXDTO.expressionRows.Добавить(ВыражениеПравилаXDTO);
				КонецЦикла;
			Иначе
				СоответствиеПравилXDTO.error = ОписаниеОшибкиXDTO(
					НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'"),
					СтрШаблон(
						НСтр("ru = 'Для объекта ""%1"" не удалось подобрать единственное подходящее правило интеграции.
							|Всего найдено правил: %2'"),
							СоответствиеПравил.Ключ,
							КолВоПравил));
			КонецЕсли;
			
			Ответ.objectsExpressionRows.Добавить(СоответствиеПравилXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Получает список печатных форм объектов ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetPrintedFormsRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetPrintedFormsResponse или DMILError.
//
Функция СписокПечатныхФормОбъектовИС(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetPrintedFormsResponse");
		
		Для Каждого ОбъектМетаданныхXDTO Из Сообщение.objects Цикл
			ЗаполнитьПечатныеФормыОбъектаМетаданных(ОбъектМетаданныхXDTO);
			Ответ.objects.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка печатных форм'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает структуру метаданных ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetMetadataRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetMetadataResponse или DMError.
//
Функция СтруктураМетаданныхИнтегрированнойСистемы(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetMetadataResponse");
		
		ПолучатьВсе = Истина;
		ПолучатьРеквизиты = Ложь;
		ПолучатьТабличныеЧасти = Ложь;
		ПолучатьПечатныеФормы = Ложь;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "columnSet")
				И Сообщение.columnSet.Количество() > 0 Тогда
			ПолучатьВсе = Ложь;
			Для Каждого РеквизитКПолучению Из Сообщение.columnSet Цикл
				Если НРег(РеквизитКПолучению) = "attributes" Тогда
					ПолучатьРеквизиты = Истина;
				ИначеЕсли НРег(РеквизитКПолучению) = "tabularsections" Тогда
					ПолучатьТабличныеЧасти = Истина;
				ИначеЕсли НРег(РеквизитКПолучению) = "printedforms" Тогда
					ПолучатьПечатныеФормы = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Ответ.dataBaseName = Метаданные.КраткаяИнформация;
		Ответ.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
		Ответ.dmilVersionNumber = ОбновлениеИнформационнойБазы.ВерсияИБ("БиблиотекаИнтеграцииС1СДокументооборотом");
		
		Синонимы = Новый Соответствие;
		ТипыОбъектовПоддерживающихИнтеграцию =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
		
		Для Каждого ТипЗначения Из ТипыОбъектовПоддерживающихИнтеграцию Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если ОбъектМетаданных = Неопределено
				Или (Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
					И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)) Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataObject");
			ОбъектМетаданныхXDTO.name = ПолноеИмя;
			
			ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			
			Если ПолучатьВсе Или ПолучатьРеквизиты Тогда
				
				РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
				РеквизитXDTO.name = "Представление";
				РеквизитXDTO.synonym = НСтр("ru = 'Представление'");
				ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Новый ОписаниеТипов("Строка"), Синонимы);
				ОбъектМетаданныхXDTO.attributes.Добавить(РеквизитXDTO);
				
				ДобавитьОписаниеРеквизитов(
					ОбъектМетаданныхXDTO.attributes,
					ОбъектМетаданных.СтандартныеРеквизиты,
					Синонимы,
					Истина);
				ДобавитьОписаниеРеквизитов(
					ОбъектМетаданныхXDTO.attributes,
					ОбъектМетаданных.Реквизиты,
					Синонимы);
				
				ВладелецСвойств = Новый(ТипЗначения);
				Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
					ДобавитьОписаниеДопРеквизитов(
						ОбъектМетаданныхXDTO.attributes,
						УправлениеСвойствами.СвойстваОбъекта(ВладелецСвойств, Истина, Ложь),
						Синонимы);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПолучатьВсе Или ПолучатьТабличныеЧасти Тогда
				
				Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
					
					Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты"
							Или Лев(ТабличнаяЧасть.Имя, 7) = "Удалить"
							Или ТабличнаяЧасть.Реквизиты.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ТабличнаяЧастьXDTO = СоздатьОбъектБИД("DMILMetadataTabularSection");
					ТабличнаяЧастьXDTO.name = ТабличнаяЧасть.Имя;
					ТабличнаяЧастьXDTO.synonym = ТабличнаяЧасть.Синоним;
					
					ДобавитьОписаниеРеквизитов(
						ТабличнаяЧастьXDTO.attributes,
						ТабличнаяЧасть.СтандартныеРеквизиты,
						Синонимы,
						Истина);
					ДобавитьОписаниеРеквизитов(
						ТабличнаяЧастьXDTO.attributes,
						ТабличнаяЧасть.Реквизиты,
						Синонимы);
					
					ОбъектМетаданныхXDTO.tabularSections.Добавить(ТабличнаяЧастьXDTO);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Ответ.metadataObjects.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Для Каждого Синоним Из Синонимы Цикл
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataSynonym");
			ОбъектМетаданныхXDTO.name = Синоним.Ключ;
			ОбъектМетаданныхXDTO.synonym = Синоним.Значение;
			Ответ.metadataSynonyms.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Если ПолучатьВсе Или ПолучатьПечатныеФормы Тогда
			ЗаполнитьПечатныеФормыОбъектовМетаданных(Ответ.metadataObjects);
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении данных хронометража'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

Процедура ДеревоПриложенийИзXDTO(ОбъектXDTO, Строки, ТекущийПользовательИСотрудники)
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "applicationRows") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.applicationRows.rows Цикл
		
		Если НРег(СтрокаXDTO.rowType) = "historyofperform" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Строки.Добавить();
		
		НоваяСтрока.ПредставлениеПриложения = СтрокаXDTO.applicationPresentation;
		НоваяСтрока.ДоступноУдаление = СтрокаXDTO.allowDeletion;
		НоваяСтрока.ОбязательноеЗаполнение = СтрокаXDTO.mandatoryFilling;
		НоваяСтрока.РольОбязательная = СтрокаXDTO.requiredRole;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "rowType") Тогда
			НоваяСтрока.ТипСтроки = НРег(СтрокаXDTO.rowType);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "applicationRole") Тогда
			НоваяСтрока.РольПредмета = НРег(СтрокаXDTO.applicationRole);
		КонецЕсли;
		
		НоваяСтрока.ИндексКартинки = СтрокаXDTO.imageIndex;
		Если НоваяСтрока.ИндексКартинки = -1 Тогда
			Если НоваяСтрока.РольПредмета = "main" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметОсновной16;
				
			ИначеЕсли НоваяСтрока.РольПредмета = "supplementary" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			ИначеЕсли НоваяСтрока.РольПредмета = "filledin" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметЗаполняемый16;
				
			ИначеЕсли НоваяСтрока.ТипСтроки = "filerole" Тогда
				// В большинстве случаев ДО вернет роль файла с индексом картинки 2.
				// Но, если файл был добавлен не корректно, например, с пустой ролью - нужно отображать
				// такую пустую роль как вспомогательный предмет.
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			ИначеЕсли НоваяСтрока.ТипСтроки = "instruction" Тогда
				// Инструкция идет без картинки.
				
			Иначе
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "application") Тогда
			Если НоваяСтрока.ТипСтроки = "filerole" Тогда
				
				НоваяСтрока.РольФайлаID = СтрокаXDTO.application.objectID.ID;
				
			Иначе
				
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					НоваяСтрока,
					СтрокаXDTO.application,
					"Приложение");
				НоваяСтрока.Ссылка =
					РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
						НоваяСтрока.ПриложениеID,
						НоваяСтрока.ПриложениеТип);
				НоваяСтрока.НавигационнаяСсылка = СтрокаXDTO.application.objectID.navigationRef;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
					// Ситуация, когда права на объект в ДО есть, а в ИС нет, не должна приводить к исключению
					// при выборке задач. При возникновении исключения получим представление из ДО, а пользователь
					// увидит "Нарушение прав доступа" лишь при попытке открыть предмет.
					Попытка
						НоваяСтрока.ПредставлениеПриложения = ИнтеграцияС1СДокументооборот3ВызовСервера.ПредставлениеПриложенияОбъектаИС(
							НоваяСтрока.Ссылка);
					Исключение
						ЗаписьЖурналаРегистрации(
							ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
								НСтр("ru = 'Ошибка при получении представления связанного объекта'",
									ОбщегоНазначения.КодОсновногоЯзыка())),
							УровеньЖурналаРегистрации.Ошибка,,
							НоваяСтрока.Ссылка,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "file") Тогда
			НоваяСтрока.ДатаМодификации = СтрокаXDTO.file.modificationDateUniversal;
			НоваяСтрока.ПодписанЭП = СтрокаXDTO.file.signed;
			НоваяСтрока.ПредставлениеHTML = СтрокаXDTO.file.htmlView;
			НоваяСтрока.ПредпросмотрУрезан = СтрокаXDTO.file.htmlViewTruncated;
			НоваяСтрока.Расширение = СтрокаXDTO.file.extension;
			НоваяСтрока.ПометкаУдаления = СтрокаXDTO.file.deletionMark;
			
			НоваяСтрока.Редактируется = СтрокаXDTO.file.editing;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO.file, "editingUser") Тогда
				НоваяСтрока.РедактируетсяТекущимПользователем =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
						СтрокаXDTO.file.editingUser.objectID.ID,
						СтрокаXDTO.file.editingUser.objectID.type,
						ТекущийПользовательИСотрудники);
			Иначе
				НоваяСтрока.РедактируетсяТекущимПользователем = Ложь;
			КонецЕсли;
			
			НоваяСтрока.Зашифрован = СтрокаXDTO.file.encrypted;
			НоваяСтрока.ЯвляетсяОригиналом = СтрокаXDTO.file.scannedOriginal;
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO.file, "role") Тогда
				НоваяСтрока.РольФайлаID = СтрокаXDTO.file.role.objectID.id;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "htmlView") Тогда
			НоваяСтрока.ПредставлениеHTML = СтрокаXDTO.htmlView;
			НоваяСтрока.ПредпросмотрУрезан = Ложь;
		КонецЕсли;
		
		ДеревоПриложенийИзXDTO(СтрокаXDTO, НоваяСтрока.Строки, ТекущийПользовательИСотрудники);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, ОбъектДанных, СписокВыражений)
	
	Для Каждого Выражение Из СписокВыражений Цикл
		
		Если СокрЛП(Выражение.expressionOnBuiltInLanguage) = "" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан текст выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
		КонецЕсли;
		
		Если Выражение.type = "Attribute" Тогда
			// Выражение для заполнения реквизита. Выполняем единожды, помещаем в attributes.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС);
			ОбъектДанных.attributes.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Выражение.id, РезультатВыражения));
			
		ИначеЕсли Выражение.type = "TabularSection" Тогда
			// Выражение для заполнения табличной части. Выполняем единожды, помещаем в tabularSections.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС);
			ОбъектДанных.tabularSections.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				РезультатВыражения,
				РезультатВыражения.Колонки));
			
		ИначеЕсли Выражение.type = "TabularSectionAttribute" Тогда
			// Выражение для заполнения реквизита таб. части.
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ТаблицаРезультат.Колонки.Добавить("Result");
			
			Если Выражение.tabularSectionName = "" Тогда
				// Вариант: по правилам для отдельных реквизитов.
				// Выполняем единожды, помещаем в attributes.
				РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
					Выражение.expressionOnBuiltInLanguage,
					ОбъектИС);
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Result = РезультатВыражения;
				
			Иначе
				// Вариант: из таблицы источника.
				// Выполняем многократно для каждой строки источника, помещаем в tabularSections.
				Для Каждого ТекущаяСтрока Из ОбъектИС[Выражение.tabularSectionName] Цикл
					РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
						Выражение.expressionOnBuiltInLanguage,
						ОбъектИС,,
						ТекущаяСтрока);
					СтрокаРезультат = ТаблицаРезультат.Добавить();
					СтрокаРезультат.Result = РезультатВыражения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбъектДанных.tabularSections.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				ТаблицаРезультат,
				ТаблицаРезультат.Колонки));
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан вариант выполнения выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИзМетаданных(Прокси, РеквизитыПриемник, РеквизитыИсточник, ОбъектИС,
		ЭтоСтандартныеРеквизиты = Ложь, ЭтоДопРеквизиты = Ложь)
	
	Для Каждого Реквизит Из РеквизитыИсточник Цикл
		Если ЭтоДопРеквизиты Тогда
			ИмяРеквизита = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяДопРеквизита(Реквизит);
			Значение = УправлениеСвойствами.ЗначениеСвойства(ОбъектИС.Ссылка, Реквизит);
		Иначе
			ИмяРеквизита = Реквизит.Имя;
			Значение = ОбъектИС[Реквизит.Имя];
		КонецЕсли;
		
		Если ИмяРеквизита = "" Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыПриемник.Добавить(ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, ИмяРеквизита, Значение));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру дополнительных данных задачи.
//
// Параметры:
//   ОбластьДействияXDTO - ОбъектXDTO - объект XDTO типа DMTaskActionArea.
//   Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборот3.НоваяОбластьДействияЗадачи
//
Функция ОбластьДействияЗадачи(ОбластьДействияXDTO, Флаг)
	
	ОбластьДействия = НоваяОбластьДействияЗадачи();
	
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption1);
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант2 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption2);
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант3 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption3);
	
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption1);
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону2 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption2);
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону3 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption3);
	
	ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonSelectTaskTemplate);
	ОбластьДействия.ВыполнитьПодключаемоеДействиеЗадачи1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteConnectedTaskAction1);
	ОбластьДействия.ОтменитьВыполнение =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonUndoExecution);
	
	ОбластьДействия.ВерсияДанныхДействияЗадачи = ОбластьДействияXDTO.dataVersion;
	ОбластьДействия.РезультатДействияТекстом = ОбластьДействияXDTO.actionResultString;
	ОбластьДействия.РезультатДействияПолеВвода =
		СтруктураПоляВводаФормы(ОбластьДействияXDTO.actionResultInputField);
	ОбластьДействия.ПодменюФлаги = СтруктураГруппыФормы(ОбластьДействияXDTO.flagsSubmenu);
	ОбластьДействия.Флаг = Флаг;
	ОбластьДействия.ВзятьВРаботу = СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonAcceptTask);
	ОбластьДействия.ОтменитьВзятиеВРаботу = СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonRevokeTaskAcceptance);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption1") Тогда
		ОбластьДействия.РезультатВарианта1 = ОбластьДействияXDTO.resultOfOption1.name;
		ОбластьДействия.РезультатВарианта1ID = ОбластьДействияXDTO.resultOfOption1.objectID.id;
		ОбластьДействия.РезультатВарианта1Тип = ОбластьДействияXDTO.resultOfOption1.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption2") Тогда
		ОбластьДействия.РезультатВарианта2 = ОбластьДействияXDTO.resultOfOption2.name;
		ОбластьДействия.РезультатВарианта2ID = ОбластьДействияXDTO.resultOfOption2.objectID.id;
		ОбластьДействия.РезультатВарианта2Тип = ОбластьДействияXDTO.resultOfOption2.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption3") Тогда
		ОбластьДействия.РезультатВарианта3 = ОбластьДействияXDTO.resultOfOption3.name;
		ОбластьДействия.РезультатВарианта3ID = ОбластьДействияXDTO.resultOfOption3.objectID.id;
		ОбластьДействия.РезультатВарианта3Тип = ОбластьДействияXDTO.resultOfOption3.objectID.type;
	КонецЕсли;
	
	Возврат ОбластьДействия;
	
КонецФункции

Процедура ОбновитьГруппуФормы(ГруппаФормы, ПараметрыГруппыФормы)
	
	ГруппаФормы.Видимость = ПараметрыГруппыФормы.Видимость;
	ГруппаФормы.Доступность = ПараметрыГруппыФормы.Доступность;
	ГруппаФормы.Заголовок = ПараметрыГруппыФормы.Заголовок;
	
КонецПроцедуры

Процедура ОбновитьКнопкуВОбластиДействия(КнопкаНаФорме, КомандаКнопки, ПараметрыКнопки, ИзменятьШрифт)
	
	КнопкаНаФорме.Видимость = ПараметрыКнопки.Видимость;
	КнопкаНаФорме.Доступность = ПараметрыКнопки.Доступность;
	КнопкаНаФорме.Заголовок = ПараметрыКнопки.Заголовок;
	КнопкаНаФорме.ЦветТекста = ПараметрыКнопки.ЦветТекста;
	КнопкаНаФорме.ВысотаЗаголовка = ПараметрыКнопки.ВысотаЗаголовка;
	Если ИзменятьШрифт Тогда
		КнопкаНаФорме.Шрифт = ПараметрыКнопки.Шрифт;
	КонецЕсли;
	
	Если ПараметрыКнопки.ПодсказкаКоманды <> Неопределено Тогда
		КомандаКнопки.Подсказка = ПараметрыКнопки.ПодсказкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКнопкуФормы(КнопкаНаФорме, ПараметрыКнопки)
	
	КнопкаНаФорме.Видимость = ПараметрыКнопки.Видимость;
	КнопкаНаФорме.Доступность = ПараметрыКнопки.Доступность;
	КнопкаНаФорме.Заголовок = ПараметрыКнопки.Заголовок;
	КнопкаНаФорме.ВысотаЗаголовка = ПараметрыКнопки.ВысотаЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьПолеВводаВОбластиДействия(ПолеВводаНаФорме, ПараметрыПоляВвода)
	
	ПолеВводаНаФорме.Видимость = ПараметрыПоляВвода.Видимость;
	ПолеВводаНаФорме.ТолькоПросмотр = ПараметрыПоляВвода.ТолькоПросмотр;
	ПолеВводаНаФорме.ПодсказкаВвода = ПараметрыПоляВвода.ПодсказкаВвода;
	
КонецПроцедуры

// Формирует представление значения для быстрого поиска.
//
// Параметры:
//   Значение - Произвольный.
//
// Возвращаемое значение:
//   Строка - Описание.
//
Функция ПредставлениеЗначения(Значение)
	
	ПредставлениеЗначения = "";
	ТипЗначение = ТипЗнч(Значение);
	
	Если ТипЗначение = Тип("СписокЗначений") Тогда
		
		МассивПредставления = Новый Массив;
		Для Каждого ЭлементСписка Из Значение Цикл
			МассивПредставления.Добавить(ПредставлениеЗначения(ЭлементСписка.Значение));
		КонецЦикла;
		ПредставлениеЗначения = СтрСоединить(МассивПредставления, "; ");
		
	ИначеЕсли ТипЗначение = Тип("Структура") Тогда
		
		ПредставлениеЗначения = Значение.Наименование;
		
	ИначеЕсли ТипЗначение = Тип("Дата") Тогда
		
		ПредставлениеЗначения = Формат(Значение, "ДЛФ=D");
		
	ИначеЕсли ТипЗначение = Тип("Строка") Тогда
		
		ДанныеФлага = ДанныеФлага(Значение);
		Если ДанныеФлага.ИндексКартинки > 0 Тогда
			// Это флаг.
			ПредставлениеЗначения = ДанныеФлага.Представление;
		Иначе
			ПредставлениеЗначения = Строка(Значение);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеЗначения = Строка(Значение);
		
	КонецЕсли;
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, ИмяРеквизита, ЗначениеРеквизита)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataAttribute");
	Результат.name = ИмяРеквизита;
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	Если ТипРеквизита = Тип("Неопределено") Тогда
		// Свойство value оставляем не установленным.
		Возврат Результат;
		
	ИначеЕсли ТипРеквизита = Тип("ОбъектXDTO") Тогда
		СкопироватьОбъектXDTO(Прокси, Результат.value, ЗначениеРеквизита);
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
		Если ЗначениеРеквизита.Пустая() Тогда
			// Свойство value оставляем не установленным.
			Возврат Результат;
		Иначе
			ИмяТипаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
				Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя());
			Если ИмяТипаXDTO = "" Тогда
				ИмяТипаXDTO = "DMObject";
			КонецЕсли;
			
			Результат.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ИмяТипаXDTO,
				ЗначениеРеквизита);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка")
			Или ТипРеквизита = Тип("Число")
			Или ТипРеквизита = Тип("Дата")
			Или ТипРеквизита = Тип("Булево") Тогда
		Результат.value = ЗначениеРеквизита;
		
	ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
		Результат.value = Строка(ЗначениеРеквизита);
		
	Иначе
		Результат.error = СтрШаблон(
			НСтр("ru = 'Невозможно выгрузить данные из реквизита ""%1"" с типом ""%2"".'"),
			ИмяРеквизита,
			ТипРеквизита);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(Прокси, ИмяТаблицы, ТаблицаЗначений, Колонки)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSection");
	Результат.name = ИмяТаблицы;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтрокаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSectionRow");
		
		Для Каждого Колонка Из Колонки Цикл
			СтрокаXDTO.attributes.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Колонка.Имя, Строка[Колонка.Имя]));
		КонецЦикла;
		
		Результат.rows.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти