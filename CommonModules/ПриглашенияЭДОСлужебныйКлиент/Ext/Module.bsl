
#Область СлужебныеПроцедурыИФункции

#Область КонструкторыПриглашений

Функция КлючЗаписиПриглашения(КлючПриглашения) Экспорт
	
	Возврат ПриглашенияЭДОСлужебныйВызовСервера.КлючЗаписиПриглашения(КлючПриглашения);
	
КонецФункции

Функция НовоеПриглашение(Вид) Экспорт
	
	Приглашение = Новый Структура;
	Приглашение.Вставить("Вид", Вид);
	Приглашение.Вставить("ИдентификаторОрганизации", "");
	Приглашение.Вставить("ИдентификаторКонтрагента", "");
	Приглашение.Вставить("Организация", Неопределено); 
	Приглашение.Вставить("Контрагент", Неопределено);
	
	Возврат Приглашение;
	
КонецФункции

#КонецОбласти

#Область ПомощникОтправки

Процедура ОткрытьПомощникОтправкиПриглашения(ПараметрыОткрытия, Оповещение = Неопределено) Экспорт
	
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ФормаЗаписи",
		ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение, ПараметрыОткрытия.РежимОткрытия);
	
КонецПроцедуры

Функция НовыеПараметрыОткрытияПомощникаОтправкиПриглашения() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пригласить",                     Истина);
	ПараметрыФормы.Вставить("ЗапрещеноСоздаватьНастройкиЭДО", Истина);
	ПараметрыФормы.Вставить("РежимНастройки",                 Ложь);
	ПараметрыФормы.Вставить("Организация",                    Неопределено);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации",       "");
	ПараметрыФормы.Вставить("Контрагент",                     Неопределено);
	ПараметрыФормы.Вставить("ТекстПриглашения",               "");
	ПараметрыФормы.Вставить("EmailОрганизации",               "");
	ПараметрыФормы.Вставить("ИдентификаторКонтрагента",       "");
	ПараметрыФормы.Вставить("ЭлектроннаяПочта",               "");
	ПараметрыФормы.Вставить("ОператорКонтрагента",            "");
	ПараметрыФормы.Вставить("Абоненты",                       Новый СписокЗначений);
	ПараметрыФормы.Вставить("РежимОткрытия",                  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормы.Вставить("КлючПриглашения",                "");
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ОперацииСПриглашениями

Процедура ОткрытьПриглашение(ПараметрыФормы, Владелец = Неопределено) Экспорт
	
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ФормаПриглашения", ПараметрыФормы,
		Владелец);
	
КонецПроцедуры

Функция НовыеПараметрыФормыПриглашения() Экспорт
	
	Параметры= Новый Структура;
	Параметры.Вставить("Ключ");
	Параметры.Вставить("ПараметрыИсправленияОшибок");
	
	Возврат Параметры;
	
КонецФункции

Процедура ОтправитьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	Контекст = НовыйКонтекстВыполненияДействияСПриглашениями(Приглашения, Оповещение, Форма);
	Контекст.Действие = ДействияСПриглашениями().Отправить;
	Контекст.СообщениеПриОшибке = НСтр("ru = 'Отправка приглашения не была произведена.'");
	Контекст.ОбработчикДействия =
		Новый ОписаниеОповещения("ОтправитьПриглашенияПослеАвторизации", ЭтотОбъект);
	Контекст.ОбработчикРезультатаВыполненияДействия =
		Новый ОписаниеОповещения("ОбработатьРезультатОтправкиПриглашений", ЭтотОбъект);
	
	ВыполнитьДействиеСПриглашениями(Контекст);
	
КонецПроцедуры

Процедура ПринятьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	СообщениеПриОшибке = НСтр("ru = 'Принятие приглашения не было произведено.'");
	ОтветитьНаВходящиеПриглашения(Приглашения, Оповещение, Форма, СообщениеПриОшибке, ДействияСПриглашениями().Принять);
	
КонецПроцедуры

Процедура ОтозватьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	СообщениеПриОшибке = НСтр("ru = 'Отзыв приглашения не был произведен.'");
	ОтветитьНаВходящиеПриглашения(Приглашения, Оповещение, Форма, СообщениеПриОшибке, ДействияСПриглашениями().Отозвать);
	
КонецПроцедуры

Процедура ОтклонитьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	СообщениеПриОшибке = НСтр("ru = 'Отклонение приглашения не было произведено.'");
	ОтветитьНаВходящиеПриглашения(Приглашения, Оповещение, Форма, СообщениеПриОшибке, ДействияСПриглашениями().Отклонить);
	
КонецПроцедуры

Процедура ОтветитьНаВходящиеПриглашения(Приглашения, Оповещение, Форма, СообщениеПриОшибке, Действие)
	
	Контекст = НовыйКонтекстВыполненияДействияСПриглашениями(Приглашения, Оповещение, Форма);
	Контекст.Действие = Действие;
	Контекст.СообщениеПриОшибке = СообщениеПриОшибке;
	Контекст.ОбработчикДействия =
		Новый ОписаниеОповещения("ОтветитьНаВходящееПриглашениеПослеАвторизации", ЭтотОбъект);
	Контекст.ОбработчикРезультатаВыполненияДействия =
		Новый ОписаниеОповещения("ОбработатьРезультатОтветаНаВходящиеПриглашения", ЭтотОбъект);
	
	ВыполнитьДействиеСПриглашениями(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьДействиеСПриглашениями(Контекст)
	
	ЕстьПринятыеПриглашения = Ложь;
	
	Для Каждого Приглашение Из Контекст.Приглашения Цикл
		
		Если ПриглашенияЭДОСлужебныйКлиентСервер.ЭтоВходящееПриглашение(Приглашение)
			И Приглашение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
			ЕстьПринятыеПриглашения = Истина;
		КонецЕсли;
		Если Контекст.УчетныеЗаписи.Найти(Приглашение.ИдентификаторОрганизации) = Неопределено Тогда
			Контекст.УчетныеЗаписи.Добавить(Приглашение.ИдентификаторОрганизации);
		КонецЕсли;
		
		Если (Контекст.Действие = ДействияСПриглашениями().Отклонить Или Контекст.Действие = ДействияСПриглашениями().Отозвать)
			И ТребуетсяУказаниеПричиныОтказаОтПриглашения(Приглашение) Тогда
				
			КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
			КлючПриглашения.Ключ = Приглашение.КлючПриглашения;
			КлючПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
			
			Ключ = КлючЗаписиПриглашения(КлючПриглашения);
			Если Контекст.ПриглашенияТребуетсяПричинаОтказа.Найти(Ключ) = Неопределено Тогда
				Контекст.ПриглашенияТребуетсяПричинаОтказа.Добавить(Ключ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОбОтклоненииОтзывеПриглашения", ЭтотОбъект, Контекст);
	Если ЕстьПринятыеПриглашения Тогда
		ТекстСообщения = НСтр("ru = 'После разрыва связи с контрагентом больше не будет возможности обмениваться электронными документами с контрагентом.
			|Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВопросаОбОтклоненииОтзывеПриглашения(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ЗавершитьВыполнениеДействияСПриглашениями(Контекст);
		Возврат;
	КонецЕсли;
	Если Контекст.УчетныеЗаписи.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаПричиныОтказаОтПриглашения", ЭтотОбъект, Контекст);
		Если Контекст.ПриглашенияТребуетсяПричинаОтказа.Количество() Тогда
			ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
			ПараметрыВводаСтроки.Данные = Контекст.ПриглашенияТребуетсяПричинаОтказа;
			ПараметрыВводаСтроки.ПредставлениеДанных = НСтр("ru = 'Приглашения'");
			ПараметрыВводаСтроки.ОбработчикПолученияПредставлений =
				"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПредставленияПриглашений";
			ПараметрыВводаСтроки.Многострочность = Истина;
			ПараметрыВводаСтроки.Обязательность = Истина;
			ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причину отказа от приглашения'");
			ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
		Иначе 
			ВыполнитьОбработкуОповещения(Оповещение, "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВводаПричиныОтказаОтПриглашения(РезультатВвода, Контекст) Экспорт
	
	Если РезультатВвода = Неопределено Тогда
		ЗавершитьВыполнениеДействияСПриглашениями(Контекст);
		Возврат;
	КонецЕсли;
	
	Для Каждого Приглашение Из Контекст.Приглашения Цикл
		Если ПриглашенияЭДОСлужебныйКлиентСервер.ЭтоВходящееПриглашение(Приглашение) Тогда
			Приглашение.ПричинаОтказа = РезультатВвода;
		КонецЕсли;
	КонецЦикла;
	
	СлужебноеОповещение = Новый ОписаниеОповещения("ВыполнитьДействияСПриглашениямиПослеАвторизации", ЭтотОбъект, Контекст);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	ПараметрыПодписки = СинхронизацияЭДОКлиент.НовыеПараметрыПодпискиНаОперациюАвторизации();
	ПараметрыПодписки.ПослеПолученияПараметровСинхронизации =
		Новый ОписаниеОповещения("ПослеПолученияПараметровСинхронизации", ЭтотОбъект, Контекст);
	
	СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(
		СлужебноеОповещение, КонтекстДиагностики, Контекст.УчетныеЗаписи, ПараметрыПодписки);
	
КонецПроцедуры

Процедура ПослеПолученияПараметровСинхронизации(Результат, Контекст) Экспорт 
	
	УчетныеЗаписиБезДоступаКСертификатам = Новый Массив;
	Для Каждого СведенияОбУчетнойЗаписи Из Результат.ПараметрыСинхронизации.УчетныеЗаписиБезДоступаКСертификатам Цикл
		УчетныеЗаписиБезДоступаКСертификатам.Добавить(СведенияОбУчетнойЗаписи.Ключ);
	КонецЦикла;
	Контекст.Вставить("УчетныеЗаписиБезДоступаКСертификатам", УчетныеЗаписиБезДоступаКСертификатам);
	
КонецПроцедуры

Процедура ВыполнитьДействияСПриглашениямиПослеАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Контекст.КонтекстДиагностики = РезультатАвторизации.КонтекстДиагностики;
	ЕстьРасшифрованныйМаркер = Ложь;
	УчетныеЗаписиБезМаркеров = Новый Массив;
	УчетныеЗаписиВыполняласьАвторизация = Новый Массив;
	УчетныеЗаписиБезДоступаКСертификатам = Контекст.УчетныеЗаписиБезДоступаКСертификатам;
	Для Каждого КлючИЗначение Из РезультатАвторизации.КлючиСинхронизации Цикл
		КлючСинхронизации = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
			ЕстьРасшифрованныйМаркер = Истина;
		Иначе
			УчетныеЗаписиБезМаркеров.Добавить(КлючСинхронизации.ИдентификаторУчетнойЗаписи);
		КонецЕсли;
		Если УчетныеЗаписиВыполняласьАвторизация.Найти(КлючСинхронизации.ИдентификаторУчетнойЗаписи) = Неопределено Тогда
			УчетныеЗаписиВыполняласьАвторизация.Добавить(КлючСинхронизации.ИдентификаторУчетнойЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьДоступныеСертификаты = Истина;
	Для Каждого УчетнаяЗапись Из Контекст.УчетныеЗаписи Цикл
		КлючЗаписи = УчетныеЗаписиЭДОКлиент.КлючУчетнойЗаписи(УчетнаяЗапись);
		
		Если УчетныеЗаписиБезДоступаКСертификатам.Найти(УчетнаяЗапись) <> Неопределено Тогда
			ЕстьДоступныеСертификаты = Ложь;
			
			ТекстОшибки =
				НСтр("ru = 'Нет доступных сертификатов. Необходимо проверить пользователя в сертификатах учетной записи ЭДО:'")
				+ Символы.ПС
				+ УчетнаяЗапись;
				
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru = 'Отправка приглашений ЭДО.'"),
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ТекстОшибки, ТекстОшибки, КлючЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДоступныеСертификаты Тогда
		Для Каждого УчетнаяЗапись Из Контекст.УчетныеЗаписи Цикл
			Если УчетныеЗаписиБезМаркеров.Найти(УчетнаяЗапись) <> Неопределено 
				Или УчетныеЗаписиВыполняласьАвторизация.Найти(УчетнаяЗапись) = Неопределено Тогда
				КлючЗаписи = УчетныеЗаписиЭДОКлиент.КлючУчетнойЗаписи(УчетнаяЗапись);
				
				Если СинхронизацияЭДОКлиент.ПользовательОтказалсяОтАутентификации(РезультатАвторизации, УчетнаяЗапись) Тогда
					ТекстОшибки = НСтр(
					"ru = 'Аутентификация в сервисе не была выполнена.'") + Символы.ПС + Контекст.СообщениеПриОшибке;
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				Иначе
					ТекстОшибки = НСтр("ru = 'Не удалось получить токен авторизации в сервисе 1С-ЭДО.
									   |Необходимо проверить соединение с оператором в учетной записи ЭДО:'") + Символы.ПС
						+ УчетнаяЗапись;
					ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru = 'Отправка приглашений ЭДО.'"),
						ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ТекстОшибки, ТекстОшибки, КлючЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьРасшифрованныйМаркер Тогда
		ЗавершитьВыполнениеДействияСПриглашениями(Контекст);
		Возврат;
	КонецЕсли;
	
	НовоеОписаниеОповещения = ПереопределитьОписаниеОповещения(Контекст.ОбработчикДействия, Контекст);
	ВыполнитьОбработкуОповещения(НовоеОписаниеОповещения, РезультатАвторизации.КлючиСинхронизации);
	
КонецПроцедуры

Процедура ОтветитьНаВходящееПриглашениеПослеАвторизации(КлючиСинхронизации, Контекст) Экспорт
	
	ДлительнаяОперация = ПриглашенияЭДОСлужебныйВызовСервера.НачатьПринятиеОтклонениеПриглашений(Контекст.Приглашения,
		КлючиСинхронизации, Контекст.Форма.УникальныйИдентификатор, Контекст.Действие = ДействияСПриглашениями().Принять);
	
	ОжидатьВыполнениеДействияСПриглашениями(ДлительнаяОперация, Контекст);
	
КонецПроцедуры

Процедура ОтправитьПриглашенияПослеАвторизации(КлючиСинхронизации, Контекст) Экспорт
	
	ДлительнаяОперация = ПриглашенияЭДОСлужебныйВызовСервера.НачатьОтправкуПриглашений(Контекст.Приглашения,
		КлючиСинхронизации, Контекст.Форма.УникальныйИдентификатор);
	
	ОжидатьВыполнениеДействияСПриглашениями(ДлительнаяОперация, Контекст);
	
КонецПроцедуры

Процедура ОжидатьВыполнениеДействияСПриглашениями(ДлительнаяОперация, Контекст)
	
	НовоеОписаниеОповещения = ПереопределитьОписаниеОповещения(Контекст.ОбработчикРезультатаВыполненияДействия, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Контекст.Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, НовоеОписаниеОповещения,
		ПараметрыОжидания);
		
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиПриглашений(Результат, Контекст) Экспорт
	
	РезультатОповещения = Новый Структура;
	РезультатОповещения.Вставить("КоличествоОтправленных", 0);
	РезультатОповещения.Вставить("Успех", Ложь);
	РезультатОповещения.Вставить("КонтекстДиагностики", Контекст.КонтекстДиагностики);
	Если Результат <> Неопределено И Результат.Статус <> "Ошибка" Тогда
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		РезультатОповещения.КоличествоОтправленных = РезультатОтправки.КоличествоОтправленных;
		РезультатОповещения.КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
		РезультатОповещения.Успех = РезультатОтправки.КоличествоОтправленных > 0;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОповещения);
	
КонецПроцедуры

Процедура ОбработатьРезультатОтветаНаВходящиеПриглашения(Результат, Контекст) Экспорт
	
	РезультатОповещения = Новый Структура;
	РезультатОповещения.Вставить("КоличествоОбработанных", 0);
	РезультатОповещения.Вставить("Успех", Ложь);
	РезультатОповещения.Вставить("КонтекстДиагностики", Контекст.КонтекстДиагностики);
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Ошибка" Тогда
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(
				НСтр("ru = 'Выполнение действия над входящим приглашением ЭДО'"),
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
				Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(РезультатОповещения.КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Иначе 
			РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			РезультатОповещения.КоличествоОбработанных = РезультатОтправки.КоличествоОбработанных;
			РезультатОповещения.КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
			РезультатОповещения.Успех = РезультатОтправки.КоличествоОбработанных > 0;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОповещения);
	
КонецПроцедуры

Функция НовыйКонтекстВыполненияДействияСПриглашениями(Приглашения, Оповещение, Форма)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Приглашения", Приглашения);
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("Действие", "");
	Контекст.Вставить("ОбработчикДействия", Неопределено);
	Контекст.Вставить("ОбработчикРезультатаВыполненияДействия", Неопределено);
	Контекст.Вставить("УчетныеЗаписи", Новый Массив);
	Контекст.Вставить("ПриглашенияТребуетсяПричинаОтказа", Новый Массив);
	Контекст.Вставить("СообщениеПриОшибке", "");
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("УчетныеЗаписиБезДоступаКСертификатам", Новый Массив);
	
	Возврат Контекст;
	
КонецФункции

Функция ТребуетсяУказаниеПричиныОтказаОтПриглашения(Приглашение)
	
	Возврат ПриглашенияЭДОСлужебныйКлиентСервер.ЭтоВходящееПриглашение(Приглашение)
		И Приглашение.СпособОбмена = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
	
КонецФункции

Процедура ЗавершитьВыполнениеДействияСПриглашениями(Контекст)
	
	НовоеОписаниеОповещения = ПереопределитьОписаниеОповещения(Контекст.ОбработчикРезультатаВыполненияДействия, Контекст);
	ВыполнитьОбработкуОповещения(НовоеОписаниеОповещения, Неопределено);
	
КонецПроцедуры

Функция ПереопределитьОписаниеОповещения(ОписаниеОповещения, ДополнительныеПараметры)
	
	НовоеОписаниеОповещения = Новый ОписаниеОповещения(ОписаниеОповещения.ИмяПроцедуры, ОписаниеОповещения.Модуль,
		ДополнительныеПараметры);
	
	Возврат НовоеОписаниеОповещения;
	
КонецФункции

Функция ДействияСПриглашениями()
	
	Действия = Новый Структура;
	Действия.Вставить("Отправить", "Отправить");
	Действия.Вставить("Принять", "Принять");
	Действия.Вставить("Отклонить", "Отклонить");
	Действия.Вставить("Отозвать", "Отозвать");
	
	Возврат Действия;
	
КонецФункции

// См. ПриглашенияЭДОКлиент.АктуализироватьКлючПриглашенияПоНатуральнымКлючам
Процедура АктуализироватьКлючПриглашенияПоНатуральнымКлючам(Приглашение) Экспорт
	
	ТипыПриглашений = ПриглашенияЭДОСлужебныйКлиентСервер.ТипыПриглашений();
	Если Приглашение.Тип = ТипыПриглашений.НаИдентификатор Тогда
		НатуральныйКлючПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
		ЗаполнитьЗначенияСвойств(НатуральныйКлючПриглашения, Приглашение);
	ИначеЕсли Приглашение.Тип = ТипыПриглашений.Широковещательное Тогда
		НатуральныйКлючПриглашения = ПриглашенияЭДОКлиентСервер.КлючШироковещательногоПриглашения();
		ЗаполнитьЗначенияСвойств(НатуральныйКлючПриглашения, Приглашение);
		НатуральныйКлючПриглашения.ИНН = Приглашение.ПолучательИНН;
		НатуральныйКлючПриглашения.КПП = Приглашение.ПолучательКПП;
	ИначеЕсли Приглашение.Тип = ТипыПриглашений.ЗаявкаНаРоуминг Тогда
		НатуральныйКлючПриглашения = ПриглашенияЭДОКлиентСервер.КлючЗаявкиНаРоуминг();
		ЗаполнитьЗначенияСвойств(НатуральныйКлючПриглашения, Приглашение);
		НатуральныйКлючПриглашения.ИНН = Приглашение.ПолучательИНН;
		НатуральныйКлючПриглашения.КПП = Приглашение.ПолучательКПП;
		НатуральныйКлючПриглашения.ИдентификаторОператора = Приглашение.ОператорЭДО;
	КонецЕсли;
	
	ИскомыйКлючПриглашения = ПриглашенияЭДОСлужебныйВызовСервера.КлючПриглашенияПоНатуральнымКлючам(НатуральныйКлючПриглашения);
	Если ЗначениеЗаполнено(ИскомыйКлючПриглашения) Тогда
		Приглашение.КлючПриглашения = ИскомыйКлючПриглашения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоглашенияНаРоуминг

Процедура ПоказатьВопросОПрикрепленииСоглашенияНаРоуминг(Оповещение) Экспорт
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Письмо о выборе оператора не было прикреплено. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Загружает шаблон соглашения на роуминг из облачного хранилища настроек на сервер,
// заполняет данными организации и получает файл на клиенте.
//
// Параметры:
//  Результат - ОписаниеОповещения - оповещение, которое будет вызвано при завершении процедуры со следующими параметрами:
//     * ФайлПолучен - Булево - признак получения файла.
//     * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//  Контекст  - Структура - параметры соглашения на роуминг:
//     * ИдентификаторЭДО - Строка - идентификатор ЭДО организации.
//
Процедура ПолучитьСоглашениеНаРоуминг(Результат, Контекст) Экспорт
	
	Если Не Контекст.Свойство("СледующееДействие") Тогда
		
		Контекст.Вставить("СледующееДействие", "ПодготовитьШаблон");
		ИнициализироватьКонтекстПолученияСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ПодготовитьШаблон" Тогда
		
		Контекст.СледующееДействие = "ПолучитьФайл";
		ПодготовитьШаблонСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ПолучитьФайл" Тогда
		
		Контекст.СледующееДействие = "Завершить";
		ПолучитьФайлШаблонаСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "Завершить" Тогда
		
		ПодготовитьРезультатПолученияСоглашенияНаРоуминг(Результат, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры 

// Дополняет учетную запись организации данными файла соглашения на роуминг.
//
// Параметры:
//  Результат - ОписаниеОповещения - оповещение, которое будет вызвано при завершении процедуры со следующими параметрами:
//     * Результат - Структура - результат прикрепления файла:
//        ** Статус   - Булево - признак того, что файл прикреплен к учетной записи организации.
//        ** ИмяФайла - Строка - имя прикрепленного файла.
//        ** ОписаниеОшибки - Строка - текст ошибки, если прикрепить файл не удалось.
//     * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//  Контекст - Структура:
//     * ИдентификаторОрганизации - Строка - идентификатор ЭДО организации.
//
Процедура ПрикрепитьСоглашениеНаРоуминг(Результат, Контекст) Экспорт
	
	Если Не Контекст.Свойство("СледующееДействие") Тогда
		
		Контекст.Вставить("СледующееДействие", "ВыбратьФайл");
		ИнициализироватьКонтекстПрикрепленияСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ВыбратьФайл" Тогда
		
		Контекст.СледующееДействие = "ЗаписатьДанныеФайла";
		ВыбратьФайлСоглашенияНаРоуминг(Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "ЗаписатьДанныеФайла" Тогда
		
		Контекст.СледующееДействие = "Завершить";
		ЗаписатьДанныеФайлаСоглашенияНаРоуминг(Результат, Контекст);
		
	ИначеЕсли Контекст.СледующееДействие = "Завершить" Тогда
		
		ПодготовитьРезультатПрикрепленияСоглашениеНаРоуминг(Результат, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьКонтекстПолученияСоглашенияНаРоуминг(ОповещениеОЗавершении, Контекст)
	
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПолучитьСоглашениеНаРоуминг(Контекст.ИдентификаторЭДО, Контекст);
	
КонецПроцедуры

Процедура ПодготовитьШаблонСоглашенияНаРоуминг(ИдентификаторЭДО, Контекст)
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСоглашениеНаРоуминг", ЭтотОбъект, Контекст);
	
	ДлительнаяОперация = ПриглашенияЭДОСлужебныйВызовСервера.ЗапуститьПодготовкуШаблонаСоглашенияНаРоуминг(
		ИдентификаторЭДО);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьФайлШаблонаСоглашенияНаРоуминг(ДлительнаяОперация, Контекст)
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение шаблона соглашения на роуминг.'");
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ДлительнаяОперация.ПодробноеПредставлениеОшибки, 
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
		ПолучитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ПолучитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	КонецЕсли;
			
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияФайлаШаблонаСоглашенияНаРоуминг", ЭтотОбъект, Контекст);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Фильтр = НСтр("ru = 'Документ (*.docx)|*.docx'");
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Сохранение файла шаблона соглашения на роуминг'");
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, ДлительнаяОперация.АдресРезультата, 
		НСтр("ru = 'Письмо о выборе оператора ЭДО.docx'") ,ПараметрыСохранения);
	
	ПолучитьСоглашениеНаРоуминг(Истина, Контекст);
	
КонецПроцедуры

Процедура ПослеПолученияФайлаШаблонаСоглашенияНаРоуминг(ПолученныеФайлы, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Шаблон соглашения на роуминг сохранен в файл'"),,
			ПолученныеФайлы[0].Имя);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПодготовитьРезультатПолученияСоглашенияНаРоуминг(Результат, Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ИнициализироватьКонтекстПрикрепленияСоглашенияНаРоуминг(ОповещениеОЗавершении, Контекст)
	
	Контекст.Вставить("ИмяФайлаСоглашенияНаРоуминг");
	Контекст.Вставить("ОписаниеОшибки");
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Расширение = ПриглашенияЭДОСлужебныйВызовСервера.ДоступныеРасширенияСканаЗаявленияНаРоуминг(
		Контекст.ИдентификаторОрганизации);
	
	Контекст.Вставить("Расширение", Расширение);
	
	ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
	
КонецПроцедуры

Процедура ВыбратьФайлСоглашенияНаРоуминг(Контекст)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите файл для загрузки'");
	ПараметрыЗагрузки.Диалог.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Контекст.Расширение) Тогда
		МассивРасширений = СтрРазделить(СтрЗаменить(Контекст.Расширение," ",""),",",Ложь);
		Маска = СтрСоединить(МассивРасширений, ";*.");
		ПараметрыЗагрузки.Диалог.Фильтр = СтрШаблон(НСтр("ru = 'файл %1|*.%2'"), Контекст.Расширение, Маска);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайлаСоглашенияНаРоуминг", ЭтотОбъект, Контекст);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ПослеВыбораФайлаСоглашенияНаРоуминг(ПомещенныеФайлы, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		ПрикрепитьСоглашениеНаРоуминг(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ИмяФайлаСоглашенияНаРоуминг = ПомещенныеФайлы[0].ИмяФайла;
	ПрикрепитьСоглашениеНаРоуминг(ПомещенныеФайлы[0].Хранение, Контекст);
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаСоглашенияНаРоуминг(Адрес, Контекст)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ПрикрепитьСоглашениеНаРоуминг(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = ПриглашенияЭДОСлужебныйВызовСервера.ЗаписатьДанныеСоглашенияНаРоуминг(
		Контекст.ИдентификаторОрганизации, Адрес, Контекст.ИмяФайлаСоглашенияНаРоуминг);
	
	Если Результат.Статус Тогда
		ПрикрепитьСоглашениеНаРоуминг(Истина, Контекст);
	Иначе
		Контекст.ОписаниеОшибки = Результат.ОписаниеОшибки;
		ПрикрепитьСоглашениеНаРоуминг(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьРезультатПрикрепленияСоглашениеНаРоуминг(Статус, Контекст)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Статус);
	Результат.Вставить("ИмяФайла", Контекст.ИмяФайлаСоглашенияНаРоуминг);
	Результат.Вставить("ОписаниеОшибки", Контекст.ОписаниеОшибки);
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти