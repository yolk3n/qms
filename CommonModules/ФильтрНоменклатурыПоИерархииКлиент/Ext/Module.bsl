
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// При активизации строки списка номенклатуры подключает обработчик
// установки текущей строки иерархии номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где используется фильтр.
//
Процедура ПриАктивизацииСтрокиСпискаНоменклатуры(Форма) Экспорт
	
	Если ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма) Тогда
		Возврат; // При использовании фильтров группу менять не надо.
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ФильтрНоменклатурыПоИерархии_УстановитьТекущуюСтрокуИерархииНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

// При активизации строки иерархии номенклатуры
// подключает обработчик установки отбора в списке номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где используется фильтр.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	Если Не ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма)
	 Или ФильтрыСписковКлиентСервер.ТекущийФильтр(Форма) <> ФильтрНоменклатурыПоИерархииКлиентСервер.Идентификатор() Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ФильтрНоменклатурыПоИерархии_ОбработатьАктивациюСтрокиИерархииНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

// Активизирует строку иерархии номенклатуры в соответствии
// со строкой активизированного элемента номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где используется фильтр.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт
	
	СписокТоваров = ФильтрыСписковКлиентСервер.ФильтруемыйСписокЭлементФормы(Форма);
	ТекущаяСтрока = СписокТоваров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = СписокТоваров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокИерархии = ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	Если СписокИерархии.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
		Возврат;
	КонецЕсли;
	
	СписокИерархии.ТекущаяСтрока = ТекущиеДанные.Родитель;
	
КонецПроцедуры

// Устанавливает отбор в списке номенклатуры,
// в соответствии с выбранной строкой иерархии.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где используется фильтр.
//
Процедура ОбработатьАктивациюСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	СписокИерархии = ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	Если Форма[ФильтрНоменклатурыПоИерархииКлиентСервер.Идентификатор() + "ТекущаяИерархияНоменклатуры"] = СписокИерархии.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрНоменклатурыПоИерархииКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

// Создает новую группу номенклатуры
//
Процедура СоздатьГруппуНоменклатуры(Форма) Экспорт
	
	СписокИерархии =ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	ТекущаяСтрока = СписокИерархии.ТекущаяСтрока;
	ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения, ЭтоГруппа", Новый Структура("Родитель", ТекущаяСтрока), Истина);
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", ПараметрыСоздания, Форма);
	
КонецПроцедуры

// Изменяет существующую группу номенклатуры
//
Процедура ИзменитьГруппуНоменклатуры(Форма) Экспорт
	
	СписокИерархии =ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	ТекущаяСтрока = СписокИерархии.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("Ключ", ТекущаяСтрока), Форма);
	КонецЕсли;
	
КонецПроцедуры

// Создает новую группу номенклатуры копированием существующей
//
Процедура СкопироватьГруппуНоменклатуры(Форма) Экспорт
	
	СписокИерархии =ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	ТекущаяСтрока = СписокИерархии.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("ЗначениеКопирования", ТекущаяСтрока), Форма);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет пометку удаления группы номенклатуры
//
Процедура УстановитьПометкуУдаленияГруппыНоменклатуры(Форма) Экспорт
	
	СписокИерархии =ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	ТекущаяСтрока = СписокИерархии.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьПометкуУдаления(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Групповое изменение реквизитов групп номенклатуры
//
Процедура ИзменитьВыделенныеГруппы(Форма) Экспорт
	
	СписокИерархии =ФильтрНоменклатурыПоИерархииКлиентСервер.ИерархияНоменклатуры(Форма);
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(СписокИерархии);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#КонецОбласти // ПрограммныйИнтерфейс

