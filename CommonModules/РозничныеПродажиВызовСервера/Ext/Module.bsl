
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция выполняет открытие кассовой смены.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ
//  ОписаниеОшибки - Строка - будет помещено описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина, если смена открыта
//
Функция ОткрытьКассовуюСмену(Знач КассаККМ, ОписаниеОшибки = "") Экспорт
	Возврат РозничныеПродажи.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ
//  ОписаниеОшибки - Строка - будет помещено описание ошибки
//
// Возвращаемое значение:
//  Массив(ДокументСсылка.ОтчетОРозничныхПродажах)
//
Функция ЗакрытьКассовуюСмену(Знач КассаККМ, Знач БылаОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	Возврат РозничныеПродажи.ЗакрытьКассовуюСменуВыполнитьАрхивацию(КассаККМ, БылаОшибкаПриСнятииZОтчета, ОписаниеОшибки);
КонецФункции

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
//
// Возвращаемое значение:
//  Структура - поля структуры определены в функции ПолучитьПустоеОписаниеКассовойСмены().
//
Функция СостояниеКассовойСмены(Знач КассаККМ) Экспорт
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
КонецФункции

// Создает документ внесения денежных средств в кассу ККМ.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ.
//  СуммаВнесения  - Число
//  ОписаниеОшибки - Строка - будет помещено описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументВнесенияДенежныхСредствВКассуККМ(Знач КассаККМ, Знач ВносимаяСумма, СсылкаНаДокументВнесение = Неопределено, ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	
	Попытка
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("КассаККМ", КассаККМ);
		ДанныеЗаполнения.Вставить("СуммаДокумента", ВносимаяСумма);
		
		СсылкаНаДокументВнесение = РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ДанныеЗаполнения);
		
	Исключение
		
		Результат = Ложь;
		СсылкаНаДокументВнесение = Неопределено;
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			НСтр("ru = 'Во время создания документа внесения денежных средств в кассу ККМ произошла ошибка.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Создает документ выемки денежных средств из кассы ККМ.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ
//  СуммаИзъятия   - Число
//  ОписаниеОшибки - Строка - будет помещено описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Знач КассаККМ, Знач СуммаИзъятия, СсылкаНаДокументВыемка = Неопределено, ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	
	Попытка
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("КассаККМ", КассаККМ);
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаИзъятия);
		
		СсылкаНаДокументВыемка = РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ДанныеЗаполнения);
		
	Исключение
		
		Результат = Ложь;
		СсылкаНаДокументВыемка = Неопределено;
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			НСтр("ru = 'Во время создания документа внесения денежных средств в кассу ККМ произошла ошибка.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты кассира.
//
// Параметры:
//  Кассир - СправочникСсылка.Пользователи - 
// 
// Возвращаемое значение:
//  - Структура
//
Функция РеквизитыКассира(Знач Кассир = Неопределено) Экспорт
	
	Если Кассир = Неопределено Тогда
		Кассир = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Возврат РозничныеПродажи.РеквизитыКассира(Кассир);
	
КонецФункции

// Получить настройку ограничений по пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПродажДляПользователей или Неопределено - Настройка ограничений пользователя.
//
Функция НастройкаОграниченийПользователя(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПродажДляПользователей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПродажДляПользователей КАК НастройкиПродажДляПользователей
	|ГДЕ
	|	НастройкиПродажДляПользователей.Владелец = &Владелец
	|");
	
	Запрос.УстановитьПараметр("Владелец", Пользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьШтрихкодыНоменклатуры(Знач Отбор) Экспорт
	
	МассивШтрихкодов = Новый Массив();
	МассивШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(
		Отбор.Номенклатура,
		Отбор.СерияНоменклатуры,
		Отбор.Партия,
		Отбор.ЕдиницаИзмерения);
	
	Возврат МассивШтрихкодов;
	
КонецФункции

// Возвращает оборудование подключенное по организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБПО - Организация.
// 
// Возвращаемое значение:
//  Массив - СправочникСсылка.ПодключаемоеОборудование - ККТ.
//
Функция ОборудованиеПодключенноеПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.ПодключаемоеОборудование  КАК Оборудование
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|");
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Оборудование");
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс