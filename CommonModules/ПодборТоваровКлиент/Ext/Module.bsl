
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Открывает форму подбора товаров в документ поступления
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборТоваровВДокументПоступления(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПоступления.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму подбора товаров в документ списания
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборТоваровВДокументСписания(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументСписания.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму подбора товаров в документ поступления
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборТоваровПоЗаказуВДокументПоступления(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПоступления.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму подбора товаров в документ списания
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборТоваровПоЗаказуВДокументСписания(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументСписанияПоЗаказу.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму подбора товаров по отбору
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборТоваровПоОтбору(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровПоОтбору.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму подбора описаний товаров
//
// Параметры
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПодборОписанийТоваров(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора в документ поступления
//
Функция ОбработатьПодборТоваровВДокументПоступления(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПоступления.Форма.Форма");
	
КонецФункции

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//   Булево - Истина, если это результат подбора в документ списания
//
Функция ОбработатьПодборТоваровВДокументСписания(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументСписания.Форма.Форма");
	
КонецФункции

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора в документ поступления
//
Функция ОбработатьПодборТоваровПоЗаказуВДокументПоступления(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПоступления.Форма.ПодборПоЗаказу");
	
КонецФункции

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора в документ списания
//
Функция ОбработатьПодборТоваровПоЗаказуВДокументСписания(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументСписанияПоЗаказу.Форма.Форма");
	
КонецФункции

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора товаров по отбору
//
Функция ОбработатьПодборТоваровПоОтбору(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма");
	
КонецФункции

// Проверяет необходимость обработки подбора
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора товаров по отбору
//
Функция ОбработатьПодборОписанийТоваров(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.Форма");
	
КонецФункции

// Задает вопрос о продолжении действия, которое приведет к потере изменений:
// "Данные были изменены. Сохранить изменения?"
// Для использования в обработчиках события ПередЗакрытием модулей форм.
//
// Параметры:
//  ОповещениеСохранитьИЗакрыть  - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку Да.
//  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
//  ЗавершениеРаботы             - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
//  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю. По умолчанию, выводится текст
//                                          "Выбранные товары не перенесены в документ. Перенести?"
//  ТекстПредупрежденияПриЗавершении - Строка - возвращаемый параметр с текстом предупреждения, выводимым пользователю 
//                                          при завершении приложения. Если параметр указан, то возвращается текст
//                                          "Выбранные товары не перенесены в документ. Подбор будет отменен."
//
// Пример:
//
//  &НаКлиенте
//  Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//    Если ПодобраноТоваров > 0 Тогда
//      Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
//      ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, ЗавершениеРаботы, Отказ);
//    КонецЕсли;
//  КонецПроцедуры
//  
//  &НаКлиенте
//  Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
//     // записываем данные формы.
//     // ...
//     ЗакрытьФормуБезПодтверждения = Истина; // не выводить подтверждение о закрытии формы еще раз.
//     Закрыть(<РезультатВыбораВФорме>);
//  КонецПроцедуры
//
Процедура ПередЗакрытиемФормыПодбора(ОповещениеСохранитьИЗакрыть, Отказ, ЗавершениеРаботы, ТекстПредупреждения = "", ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт
	
	ФормаПодбора = ОповещениеСохранитьИЗакрыть.Модуль;
	Если ФормаПодбора.ЗакрытьФормуБезПодтверждения Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы = Истина Тогда
		Если ТекстПредупрежденияПриЗавершении = "" Тогда // передан параметр из ПередЗакрытием
			ТекстПредупрежденияПриЗавершении = НСтр("ru = 'Выбранные товары не перенесены в документ. Подбор будет отменен.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОЗакрытииФормы", ЭтотОбъект, ОповещениеСохранитьИЗакрыть);
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранные товары не перенесены в документ. Перенести?'");
	КонецЕсли;
	ПоказатьВопрос(Оповестить, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Обрабатывает ответ на вопрос о закрытии формы.
//
// Параметры:
//  Ответ                       - КодВозвратаДиалога
//  ОповещениеСохранитьИЗакрыть - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку Да.
//
Процедура ОбработатьОтветНаВопросОЗакрытииФормы(Ответ, ОповещениеСохранитьИЗакрыть) Экспорт
	
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСохранитьИЗакрыть);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Форма.ЗакрытьФормуБезПодтверждения = Истина;
		Форма.Закрыть();
	Иначе
		Форма.ЗакрытьФормуБезПодтверждения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ на вопрос о непривязанных строках.
//
// Параметры:
//  Ответ - КодВозвратаДиалога
//  Форма - ФормаКлиентскогоПриложения - форма-владелец.
//
Процедура ОбработатьОтветНаВопросОНепривязанныхСтроках(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Форма.ПроверитьСопоставленныеСтроки = Ложь;
		Форма.Закрыть();
	Иначе
		Форма.ПеренестиВДокумент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Задает вопрос выполнения выбора, в случае если выбранный элемент таблицы номенклатуры помечен на удаление.
// Иначе, если элемент таблицы выбран, добавляет выбранный элемент.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма-владелец.
//  СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ПриВыбореСтрокиТаблицыНоменклатуры(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатуры = ПодборТоваровКлиентСервер.ТекущийСписокТоваров(Форма).ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьТоварВКорзину(СтрокаТаблицыНоменклатуры, Форма);
	
КонецПроцедуры

// Добавляет выбранный элемент таблицы номенклатура в результат подбора,
// в случае утвердительного ответа пользователя 
//
// Параметры:
//  Ответ     - КодВозвратаДиалога
//  Параметры - Структура
//    * СтрокаТаблицыНоменклатуры - данным текущей строки таблицы номенклатура.
//    * Форма                     - ФормаКлиентскогоПриложения - форма-владелец.
//
// см. процедуру ПриВыбореСтрокиТаблицыНоменклатуры
//
Процедура ДобавитьТоварПомеченныйНаУдаление(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДобавитьТоварВКорзинуПродолжение(Параметры.СтрокаТаблицыНоменклатуры, Параметры.Форма);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет выбранный элемент таблицы номенклатура в результат подбора.
//
// Параметры:
//  СтрокаТаблицыНоменклатуры - данным текущей строки таблицы номенклатура.
//  Форма                     - ФормаКлиентскогоПриложения - форма-владелец.
//
// см. процедуру ПриВыбореСтрокиТаблицыНоменклатуры
//
Процедура ДобавитьТоварВКорзину(СтрокаТаблицыНоменклатуры, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыНоменклатуры, "ПометкаУдаления") И СтрокаТаблицыНоменклатуры.ПометкаУдаления Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьТоварПомеченныйНаУдаление", ЭтотОбъект, Новый Структура("СтрокаТаблицыНоменклатуры, Форма", СтрокаТаблицыНоменклатуры, Форма));
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Выбранные данные помечены на удаление.
						|Выполнить выбор этих данных?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		ДобавитьТоварВКорзинуПродолжение(СтрокаТаблицыНоменклатуры, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТоварВКорзинуПродолжение(СтрокаТаблицыНоменклатуры, Форма)
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(Форма);
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
	ПараметрыТовара.Количество = 1;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыТовара.ИсточникФинансированияОстаток) Тогда
			ПараметрыТовара.ИсточникФинансирования = ПараметрыТовара.ИсточникФинансированияОстаток;
		КонецЕсли;
		ПараметрыТовара.Удалить("ИсточникФинансированияОстаток");
		
		Если ЗначениеЗаполнено(ПараметрыТовара.МестоХраненияОстаток) Тогда
			ПараметрыТовара.МестоХранения = ПараметрыТовара.МестоХраненияОстаток;
		КонецЕсли;
		ПараметрыТовара.Удалить("МестоХраненияОстаток");
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров И ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) И Форма.ПодборВПоступление Тогда
			ПараметрыТовара.Цена = ЗапасыВызовСервера.ПолучитьЦенуПоследнейЗакупки(
				ПараметрыТовара.Номенклатура,
				ПараметрыТовара.ЕдиницаИзмерения,
				Неопределено,
				Форма.Параметры.Документ,
				Форма.Склад,
				Форма.Поставщик,
				Форма.Валюта);
		КонецЕсли;
		
		Если Форма.ИспользоватьИсточникиФинансирования И Не ЗначениеЗаполнено(ПараметрыТовара.ИсточникФинансирования) И ЗначениеЗаполнено(Форма.ИсточникФинансирования) Тогда
			ПараметрыТовара.ИсточникФинансирования = Форма.ИсточникФинансирования;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ЗапрашиватьКоличество И Не Форма.РежимПодбораБезКоличественныхПараметров Тогда
		
		ПараметрыТовара.Вставить("Валюта"           , Форма.Валюта);
		ПараметрыТовара.Вставить("СкрытьЦену"       , Форма.РежимПодбораБезСуммовыхПараметров);
		ПараметрыТовара.Вставить("РедактироватьЦену", Не Форма.ЗапретитьИзменениеЦены);
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
			ПараметрыТовара.Вставить("Склад"                                    , Форма.Склад);
			ПараметрыТовара.Вставить("УчетВОтделениях"                          , ПодборТоваровКлиентСервер.ПодборВОтделении(Форма));
			ПараметрыТовара.Вставить("ПараметрыУчетаНоменклатуры"               , Форма.ПараметрыУчетаНоменклатуры);
			ПараметрыТовара.Вставить("ЗапретитьИзменениеИсточникаФинансирования", Форма.ЗапретитьИзменениеИсточникаФинансирования);
			ПараметрыТовара.Вставить("СкрытьСерию"                              , Форма.РежимПодбораБезРазрезовУчета);
			ПараметрыТовара.Вставить("СкрытьПартия"                             , Форма.РежимПодбораБезРазрезовУчета);
			ПараметрыТовара.Вставить("СкрытьИсточникФинансирования"             , Форма.РежимПодбораБезРазрезовУчета);
			ПараметрыТовара.Вставить("СкрытьМестоХранения"                      , Форма.РежимПодбораБезРазрезовУчета);
		КонецЕсли;
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
			СтрокаЗаказа = Форма.Элементы.Корзина.ТекущиеДанные;
			Если СтрокаЗаказа.ТипСтроки = 1 Тогда
				СтрокаЗаказа = СтрокаЗаказа.ПолучитьРодителя();
			КонецЕсли;
			ПараметрыТовара.Вставить("Заказ"                 , СтрокаЗаказа.Заказ);
			ПараметрыТовара.Вставить("КодСтроки"             , СтрокаЗаказа.КодСтроки);
			ПараметрыТовара.Вставить("НоменклатураЗаказа"    , СтрокаЗаказа.НоменклатураЗаказа);
			ПараметрыТовара.Вставить("ЕдиницаИзмеренияЗаказа", СтрокаЗаказа.ЕдиницаИзмеренияЗаказа);
			ПараметрыТовара.Вставить("КОформлению"           , Макс(0, СтрокаЗаказа.КОформлению - СтрокаЗаказа.КоличествоВЕдиницахЗаказа));
			ПараметрыТовара.Вставить("Цена"                  , СтрокаЗаказа.Цена);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидЦены") Тогда
			ПараметрыТовара.Вставить("ВидЦены", Форма.ВидЦены);
		КонецЕсли;
		
		Оповестить = Новый ОписаниеОповещения("ДобавитьТоварВКорзинуОкончание", ЭтотОбъект, Форма);
		ОткрытьФорму(ФормаЗапросаКоличества(Форма), ПараметрыТовара, Форма,,,, Оповестить);
		
	Иначе
		ДобавитьТоварВКорзинуОкончание(ПараметрыТовара, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДобавитьТоварВКорзину
//
// Параметры:
//  ПараметрыВыбора - Структура - данные подбора.
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//
Процедура ДобавитьТоварВКорзинуОкончание(ПараметрыВыбора, Форма) Экспорт
	
	Если ТипЗнч(ПараметрыВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(Форма);
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, ПараметрыВыбора);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", ПараметрыТовара.Номенклатура);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		Если ПараметрыТовара.СерияНоменклатуры <> Неопределено Тогда
			ПараметрыПоиска.Вставить("СерияНоменклатуры", ПараметрыТовара.СерияНоменклатуры);
		КонецЕсли;
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
			Если ЗначениеЗаполнено(ПараметрыТовара.НоменклатураПоставщика) Тогда
				ПараметрыПоиска.Вставить("НоменклатураПоставщика", ПараметрыТовара.НоменклатураПоставщика);
			КонецЕсли;
		ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
			Если ПараметрыТовара.Партия <> Неопределено Тогда
				ПараметрыПоиска.Вставить("Партия", ПараметрыТовара.Партия);
			КонецЕсли;
			Если ПараметрыТовара.ИсточникФинансирования <> Неопределено Тогда
				ПараметрыПоиска.Вставить("ИсточникФинансирования", ПараметрыТовара.ИсточникФинансирования);
			КонецЕсли;
			Если ПараметрыТовара.МестоХранения <> Неопределено Тогда
				ПараметрыПоиска.Вставить("МестоХранения", ПараметрыТовара.МестоХранения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ПараметрыПоиска.Вставить("ТорговоеНаименование"  , ПараметрыТовара.ТорговоеНаименование);
		ПараметрыПоиска.Вставить("ДействующиеВеществаМНН", ПараметрыТовара.ДействующиеВеществаМНН);
		ПараметрыПоиска.Вставить("ФормаВыпуска"          , ПараметрыТовара.ФормаВыпуска);
	КонецЕсли;
	ПараметрыПоиска.Вставить("ЕдиницаИзмерения", ПараметрыТовара.ЕдиницаИзмерения);
	ПараметрыПоиска.Вставить("Цена"            , ПараметрыТовара.Цена);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
		Если ПараметрыТовара.КоэффициентЕдиницыЗаказа <> 0 Тогда
			ПараметрыПоиска.Вставить("КоэффициентЕдиницыЗаказа", ПараметрыТовара.КоэффициентЕдиницыЗаказа);
		КонецЕсли;
		ДобавитьВыбранныйТоварВКорзинуПоЗаказу(Форма, ПараметрыТовара, ПараметрыПоиска);
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ДобавитьВыбранныйТоварВКорзинуОписанийТоваров(Форма, ПараметрыТовара, ПараметрыПоиска);
	Иначе
		ДобавитьВыбранныйТоварВКорзинуПодбора(Форма, ПараметрыТовара, ПараметрыПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Управление элементами формы подбора.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПоказатьСкрытьПодборТоваров(Форма) Экспорт
	
	Форма.ПоказыватьПодборТоваров = Не Форма.ПоказыватьПодборТоваров;
	Форма.Элементы.ГруппаПодборТоваров.Видимость = Форма.ПоказыватьПодборТоваров;
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

// Управление элементами формы подбора.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПриНажатииНаИнформациюОПодобранныхТоварах(Форма) Экспорт
	
	Форма.ПоказыватьПодобранныеТовары = Не Форма.ПоказыватьПодобранныеТовары;
	Форма.Элементы.ГруппаПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры


// Открывает форму настройки поиска - расширенный или платформенный.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура НастроитьПоиск(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоискаТоваров", Форма.ВариантПоискаТоваров);
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьИзменениеНастройкиВариантаПоиска", ЭтотОбъект, Форма);
	ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкаВариантаПоиска", ПараметрыФормы, Форма,,,, Оповестить);
	
КонецПроцедуры

// Обрабатывает выбранное значение настроек варианта поиска.
//
// Параметры:
//  ВыбранноеЗначение - Структура
//    * ВариантПоискаТоваров         - Строка
//        ** ПоУмолчанию      - поиск по умолчанию.
//        ** СтандартныйПоиск - поиск производится по значению одной колонки.
//        ** РасширенныйПоиск - возможно использование специальных подстановочных символов поиска.
//    * ИспользоватьСтандартныйПоиск - Булево - признак использования стандартного поиска.
//  Форма - ФормаКлиентскогоПриложения - форма-владелец.
//
// см. процедур НастроитьПоиск
//
Процедура ОбработатьИзменениеНастройкиВариантаПоиска(ВыбранноеЗначение, Форма) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если Форма.ВариантПоискаТоваров <> ВыбранноеЗначение.ВариантПоискаТоваров Тогда
			
			Форма.ВариантПоискаТоваров = ВыбранноеЗначение.ВариантПоискаТоваров;
			ПодборТоваровКлиентСервер.УстановитьТекущуюСтраницуПоВариантуПоиска(Форма);
			
			Если ПодборТоваровКлиентСервер.ТекущийВариантПоиска(Форма) <> "РасширенныйПоиск" Тогда
				РасширенныйПоискВСпискахКлиентСервер.СнятьОтборПоСтрокеПоиска(Форма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВыбранныйТоварВКорзинуПодбора(Форма, ПараметрыТовара, ПараметрыПоиска)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	НайденныеСтроки = Форма.Объект.Корзина.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущаяСтрока = Форма.Объект.Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыПоиска);
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), Форма.ПараметрыУчетаНоменклатуры);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) И Форма.ИспользоватьНоменклатуруПоставщиков Тогда
			Если Не ЗначениеЗаполнено(ПараметрыТовара.НоменклатураПоставщика) Тогда
				СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Форма.Поставщик);
			ИначеЕсли Не ЗначениеЗаполнено(ПараметрыТовара.Номенклатура) Тогда
				СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика());
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоВЕдиницахИзмерения = ТекущаяСтрока.КоличествоВЕдиницахИзмерения + ПараметрыТовара.Количество;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ПоказатьОповещениеОДобавленномТоваре(Форма, ТекущаяСтрока, ПараметрыТовара);
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

Процедура ДобавитьВыбранныйТоварВКорзинуПоЗаказу(Форма, ПараметрыТовара, ПараметрыПоиска)
	
	СтрокаЗаказа = Форма.Элементы.Корзина.ТекущиеДанные;
	Если СтрокаЗаказа.ТипСтроки = 1 Тогда
		СтрокаЗаказа = СтрокаЗаказа.ПолучитьРодителя();
	КонецЕсли;
	
	Товары = СтрокаЗаказа.ПолучитьЭлементы();
	ТекущаяСтрока = Неопределено;
	Для Каждого Товар Из Товары Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого ПараметрПоиска Из ПараметрыПоиска Цикл
			Если Товар[ПараметрПоиска.Ключ] <> ПараметрПоиска.Значение Тогда
				ЗначенияСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			ТекущаяСтрока = Товар;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыТовара);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаЗаказа, "Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
		ТекущаяСтрока.ТипСтроки = 1;
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
			ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияЗаказа;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоВЕдиницахИзмерения = ТекущаяСтрока.КоличествоВЕдиницахИзмерения + ПараметрыТовара.Количество;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа) Тогда
		Если ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0 Тогда
			СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа());
		КонецЕсли;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	КонецЕсли;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), Форма.ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(СтрокаЗаказа);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДобавитьВыбранныйТоварВКорзинуОписанийТоваров(Форма, ПараметрыТовара, ПараметрыПоиска)
	
	Если Не ЗначениеЗаполнено(ПараметрыПоиска.ЕдиницаИзмерения) Тогда
		ПараметрыПоиска.Удалить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	
	НайденныеСтроки = Форма.Объект.Корзина.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущаяСтрока = Форма.Объект.Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыПоиска);
	Иначе
		ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоВЕдиницахИзмерения = ТекущаяСтрока.КоличествоВЕдиницахИзмерения + ПараметрыТовара.Количество;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору());
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ПоказатьОповещениеОДобавленномТоваре(Форма, ТекущаяСтрока, ПараметрыТовара);
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

Функция ФормаЗапросаКоличества(Форма)
	
	Возврат СтрЗаменить(Форма.КодФормы, "_", ".") + ".ФормаЗапросаКоличества";
	
КонецФункции

Процедура ПоказатьОповещениеОДобавленномТоваре(Форма, ТекущаяСтрока, ПараметрыТовара)
	
	Если Не Форма.ПоказыватьПодобранныеТовары Тогда
		
		Если Форма.РежимПодбораБезКоличественныхПараметров Тогда
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" добавлен в корзину'");
		ИначеЕсли Форма.РежимПодбораБезСуммовыхПараметров Тогда
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
		Иначе
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
		КонецЕсли;
		
		ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, КоличествоУпаковок, ЕдиницаИзмерения");
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				ВставляемыеЗначения.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ТекущаяСтрока.Номенклатура);
			Иначе
				Если ЗначениеЗаполнено(ТекущаяСтрока.ТорговоеНаименование) Тогда
					ВставляемыеЗначения.Товар = СокрЛП(ТекущаяСтрока.ТорговоеНаименование);
				Иначе
					ВставляемыеЗначения.Товар = СокрЛП(ТекущаяСтрока.ДействующиеВеществаМНН);
				КонецЕсли;
				ВставляемыеЗначения.Товар = ВставляемыеЗначения.Товар + ", " + СокрЛП(ТекущаяСтрока.ФормаВыпуска);
			КонецЕсли;
		Иначе
			ВставляемыеЗначения.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ТекущаяСтрока.Номенклатура, ПараметрыТовара.СерияНоменклатуры, ПараметрыТовара.Партия);
		КонецЕсли;
		ВставляемыеЗначения.Цена               = Формат(ТекущаяСтрока.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=");
		ВставляемыеЗначения.Валюта             = Форма.Валюта;
		ВставляемыеЗначения.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения), ТекущаяСтрока.ЕдиницаИзмерения, НСтр("ru = 'ед.'"));
		ВставляемыеЗначения.КоличествоУпаковок = ПараметрыТовара.Количество;
		
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Товар добавлен в корзину'"),, ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
