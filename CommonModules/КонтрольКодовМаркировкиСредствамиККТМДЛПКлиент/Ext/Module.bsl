
#Область ПрограммныйИнтерфейс

#Область ЗапускПроверкиКМ

// Возвращает параметры, необходимые для выполнения проверки КМ средствами ККТ на форме объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта, к которому подключен механизма проверки КМ.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для выполнения проверки КМ на форме объекта.
//   * Форма                 - ФормаКлиентскогоПриложения - форма объекта, к которому подключен механизма проверки КМ.
//   * ОповещениеОЗавершении - ОписаниеОповещения - процедура в которую будет передан результат выполнения проверки КМ.
//      Процедура должна принимать следующие параметры:
//       * РезультатПроверкиКМ - Структура - результат проверки КМ средствами ККТ (см. функцию РезультатПроверкиКМ).
//       * ДополнительныеПараметры - дополнительные параметры описания оповещения.
//   * ДанныеДляПроверки           - Массив - набор элементов проверки КМ (см. ЭлементДанныхДляПроверкиКМ).
//   * ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ - Булево - Истина, если необходимо подготовить данные для механизма выборочного контроля КМ и не выполнять непосредственную проверку КМ.
//                                                                При этом в РезультатПроверкиКМ будет записан полный код маркировки, который будет использоваться в механизме ВыборочныйКонтрольКММДЛП.
//                                                                Ложь, если необходимо выполнить непосредственную проверку переданных КМ.
//                                                                При этом из РезультатПроверкиКМ будет удален полный код маркировки, в случае отсутствия ошибок выполнения механизма.
//   * ККТФФД12МДЛП                - СправочникСсылка.ПодключаемоеОборудование - ссылка на ККТ, поддержиывющее ФФД 1.2.
//                                   Если не указывать, тогда значение будет расчитано по параметрам из функции ПараметрыПолученияККТФФД12МДЛП.
//   * Организация                 - СправочникСсылка.ОрганизацииМДЛП - значение для расчета параметра ККТФФД12МДЛП. Элемент структуры ПараметрыПолученияККТФФД12МДЛП.
//                                   Необязательный, если указан ККТФФД12МДЛП (см. функцию ПолучитьККТФФД12МДЛП).
//   * ПропуститьОжиданиеОтветаККТ - Булево - Истина, если не нужно ожидать результата проверки КМ от ККТ, а сразу подтверждать выбытие.
//                                   При этом в чеке будет отображено, что проверка не выполнялась (выведено [М], а не [М+]).
//   * ПодтверждатьВыбытиеКМ       - Булево - Истина, если предполагается пробитие чека по указанным КМ.
//                                            Ложь, если необходимо выполнить только проверку КМ, без дальнейшего пробития чека.
//   * ИнтерактивныйРежим          - Булево - Истина, если необходимо отображать форму результатов проверки КМ.
//                                   Если ИнтерактивныйРежим = Истина, то при наличии некорректных КМ откроется форма,
//                                   в которой пользователь может изменить значение КонтрольПройден.
//   * НеЗакрыватьСессиюПроверкиКМ - Будево - Истина, если не нужно закрывать сессию между вызовами проверки КМ,
//                                   например, в случае пробития чека ККМ, т.к. закрытие сессии проверки КМ необходимо выполнять только после пробития чека (выполняется автоматически БПО).
//   * ИгнорироватьОшибкиКМ        - Булево - Истина, если КМ некорректный, но при этом необходимо установить КонтрольПройден = Истина,
//                                   например, если проверка КМ выполнялась ранее (в предыдущей сессии, но в той же форме), пользователь отметил у некорректного КМ КонтрольПройден = Истина,
//                                   а сейчас необходимо просто поместить КМ в буфер ККТ для дальнейшей фискализации чека.
//   * СообщатьОбОшибкахПроверки   - Булево - Истина, если необходимо сообщать пользователю об ошибках проверки каждого КМ.
//                                   Например, если не нужно давать возможность пользователю менять значение признака КонтрольПройден,
//                                   а необходимо только констатировать факт наличия ошибок проверки кода маркировки.
//
Функция ПараметрыПроверкиКМ(Форма = Неопределено) Экспорт
	
	Если Форма <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтрольВыполнятьВФормеВыборочногоКонтроляКМ") Тогда
		ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ = Форма.КонтрольВыполнятьВФормеВыборочногоКонтроляКМ;
	Иначе
		ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ = Ложь;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Форма"                    , Форма);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении"    , Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДляПроверки"        , Новый Массив);
	
	ВозвращаемоеЗначение.Вставить("ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ", ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ);
	
	ВозвращаемоеЗначение.Вставить("ККТФФД12МДЛП"             , Неопределено);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, ПараметрыПолученияККТФФД12МДЛП(Форма), Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, ПараметрыПроверкиКМ_РежимПроверкаКМБезПробития(), Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры для выполнения проверки КМ в режиме, не предполагающим дальнейшее пробитие чека в рамках текущей открытой сессии.
// Режим используется, если необходимо только выполнить проверку КМ и сразу закрыть сессию.
// Например, при сканировании штрихкода.
// В этом режиме пользователю будет предоставлена возможность выбора - использовать непрошедшие проверку КМ или нет.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры режима проверки КМ.
//
Функция ПараметрыПроверкиКМ_РежимПроверкаКМБезПробития() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(КлючиРежимаРаботыПроверкиКМ(), ","));
	
	ВозвращаемоеЗначение.ПропуститьОжиданиеОтветаККТ = Ложь;
	ВозвращаемоеЗначение.ПодтверждатьВыбытиеКМ       = Ложь;
	ВозвращаемоеЗначение.ИнтерактивныйРежим          = Истина;
	ВозвращаемоеЗначение.НеЗакрыватьСессиюПроверкиКМ = Ложь;
	ВозвращаемоеЗначение.ИгнорироватьОшибкиКМ        = Ложь;
	ВозвращаемоеЗначение.СообщатьОбОшибкахПроверки   = Ложь;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры для выполнения проверки КМ в режиме, предполагающим дальнейшее пробитие чека в рамках текущей открытой сессии.
// Режим используется, если после проверки КМ и до пробития чека ККТ пользователю необходимо отобразить форму результатов проверки,
// с возможностью изменения отметки КонтрольПройден.
// Т.е. данный режим необходимо использовать непосредственно в момент пробития чека.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры режима проверки КМ.
//
Функция ПараметрыПроверкиКМ_РежимПроверкаКМНепосредственноВоВремяПробитияЧекаККТ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(КлючиРежимаРаботыПроверкиКМ(), ","));
	
	ВозвращаемоеЗначение.ПропуститьОжиданиеОтветаККТ = Ложь;
	ВозвращаемоеЗначение.ПодтверждатьВыбытиеКМ       = Истина;
	ВозвращаемоеЗначение.ИнтерактивныйРежим          = Истина;
	ВозвращаемоеЗначение.НеЗакрыватьСессиюПроверкиКМ = Истина;
	ВозвращаемоеЗначение.ИгнорироватьОшибкиКМ        = Ложь;
	ВозвращаемоеЗначение.СообщатьОбОшибкахПроверки   = Ложь;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры для выполнения проверки КМ в режиме, предполагающим дальнейшее пробитие чека в рамках текущей открытой сессии,
// при этом все КМ, которые находятся в чеке, будут выведены безусловно.
// Режим используется, если в чеке ККТ проверка КМ выполняется в момент сканирования штрихкода,
// и на момент пробития чека (при использовании этого режима), все КМ, которые находятся в чеке,
// считаются корректными (прошли проверку или пользователь отметил КонтрольПройден = Истина в форме интерактивного режима).
// Т.е. данный режим необходимо использовать непосредственно в момент пробития чека,
// но учитывать результат проверки, который был получен ранее, например, в момент сканирования штрихкода (в предыдущей сессии проверки КМ).
// Отличие от режима ПараметрыПроверкиКМ_РежимБезПроверкиКМНепосредственноВоВремяПробитияЧекаККТ в том,
// что в чеке будет напечатан результат проверки [М+] (если КМ корректный)
// или [М-] (в случае, если пользователь отметил, что необходимо использовать КМ непрошедший проверку).
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры режима проверки КМ.
//
Функция ПараметрыПроверкиКМ_РежимПроверкаКМНепосредственноВоВремяПробитияЧекаККТСИгнорированием() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(КлючиРежимаРаботыПроверкиКМ(), ","));
	
	ВозвращаемоеЗначение.ПропуститьОжиданиеОтветаККТ = Ложь;
	ВозвращаемоеЗначение.ПодтверждатьВыбытиеКМ       = Истина;
	ВозвращаемоеЗначение.ИнтерактивныйРежим          = Ложь;
	ВозвращаемоеЗначение.НеЗакрыватьСессиюПроверкиКМ = Истина;
	ВозвращаемоеЗначение.ИгнорироватьОшибкиКМ        = Истина;
	ВозвращаемоеЗначение.СообщатьОбОшибкахПроверки   = Ложь;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры для выполнения проверки КМ в режиме, предполагающим дальнейшее пробитие чека в рамках текущей открытой сессии,
// при этом все КМ, которые находятся в чеке, будут выведены безусловно с отметкой [М] - проверка не проводилась.
// Режим используется, если в чеке ККТ проверка КМ выполняется в момент сканирования штрихкода,
// и на момент пробития чека (при использовании этого режима), все КМ, которые находятся в чеке,
// считаются корректными (прошли проверку или пользователь отметил КонтрольПройден = Истина в форме интерактивного режима).
// Т.е. данный режим необходимо использовать непосредственно в момент пробития чека,
// но учитывать результат проверки, который был получен ранее, например, в момент сканирования штрихкода (в предыдущей сессии проверки КМ).
// Отличие от режима ПараметрыПроверкиКМ_РежимПроверкаКМНепосредственноВоВремяПробитияЧекаККТСИгнорированием в том,
// что в чеке будет напечатано, что проверка не проводилась [М].
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры режима проверки КМ.
//
Функция ПараметрыПроверкиКМ_РежимБезПроверкиКМНепосредственноВоВремяПробитияЧекаККТ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(КлючиРежимаРаботыПроверкиКМ(), ","));
	
	ВозвращаемоеЗначение.ПропуститьОжиданиеОтветаККТ = Истина;
	ВозвращаемоеЗначение.ПодтверждатьВыбытиеКМ       = Истина;
	ВозвращаемоеЗначение.ИнтерактивныйРежим          = Ложь;
	ВозвращаемоеЗначение.НеЗакрыватьСессиюПроверкиКМ = Истина;
	ВозвращаемоеЗначение.ИгнорироватьОшибкиКМ        = Истина;
	ВозвращаемоеЗначение.СообщатьОбОшибкахПроверки   = Ложь;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КлючиРежимаРаботыПроверкиКМ() Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	ВозвращаемоеЗначение.Добавить("ПропуститьОжиданиеОтветаККТ");
	ВозвращаемоеЗначение.Добавить("ПодтверждатьВыбытиеКМ");
	ВозвращаемоеЗначение.Добавить("ИнтерактивныйРежим");
	ВозвращаемоеЗначение.Добавить("НеЗакрыватьСессиюПроверкиКМ");
	ВозвращаемоеЗначение.Добавить("ИгнорироватьОшибкиКМ");
	ВозвращаемоеЗначение.Добавить("СообщатьОбОшибкахПроверки");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


// Возвращает структуру элемента проверки КМ средствами ККТ.
//
// Возвращаемое значение:
//  КодМаркировки           - Строка - SGTIN.
//  ПолныйКодМаркировки     - Строка - полный код маркировки в формате Base64.
//  ИдентификаторЭлемента   - Строка - идентификатор по которому можно будет получить элемент проверки из общего результата проверки КМ.
//  ПланируемыйСтатусТовара - ПеречислениеСсылка.ПланируемыйСтатусМаркируемогоТовара - Обязательно.
//  ДробноеКоличество       - Структура - (см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДробноеКоличество).
//  КодЕдиницыИзмерения     - Строка - (Необязательно) код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
//                                     Если значение заполнено, используется он, иначе МераКоличестваПредметаРасчета.
//  МераКоличестваПредметаРасчета - Перечисление.МераКоличестваПредметаРасчетаККТ - (Необязательно) мера количества предмета расчета. Тэг 2108. Значение из таблицы 114 (ФФД).
//
Функция ЭлементДанныхДляПроверкиКМ() Экспорт
	
	МодульМенеджерОборудованияКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиентСервер");
	МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("КодМаркировки"          , "");
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки"    , "");
	ВозвращаемоеЗначение.Вставить("ИдентификаторЭлемента"  , СокрЛП(Новый УникальныйИдентификатор));
	
	ВозвращаемоеЗначение.Вставить("ПланируемыйСтатусТовара"      , ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован"));
	ВозвращаемоеЗначение.Вставить("ДробноеКоличество"            , МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДробноеКоличество());
	ВозвращаемоеЗначение.Вставить("КодЕдиницыИзмерения"          , "796"); // шт.
	ВозвращаемоеЗначение.Вставить("МераКоличестваПредметаРасчета", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запускает выполнение проверки КМ средствами ККТ на форме объекта.
// Результат будет возвращен в процедуру, указанную в параметре Параметры.ОповещениеОЗавершении.
// Процедура должна принимать следующие параметры:
//  * РезультатПроверкиКМ - Структура - результат проверки КМ средствами ККТ (см. функцию РезультатПроверкиКМ):
//     ** ЕстьОшибки     - Булево - признак наличия критических ошибок выполнения проверки КМ.
//     ** ДанныеПроверки - Соответствие - коллекция результатов проверки кодов маркировки.
//         * Ключ - ИдентификаторЭлемента из коллекции ДанныеДляПроверки параметров проверки КМ
//            (см. функции ПараметрыПроверкиКМ и ЭлементДанныхДляПроверкиКМ).
//         * Значение - Структура - результат проверки конкретного кода маркировки (см. функцию РезультатПроверкиКМЭлемента).
//            ** КодМаркировки       - SGTIN.
//            ** ПолныйКодМаркировки - полный код маркировки в формате Base64.
//            ** КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//            ** РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами ККТ
//                                     (см. РегистрыСведений.РезультатыПроверкиКМСредствамиККТМДЛП.СвойстваРезультатаПроверкиКМ).
//            ** КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//            ** ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//  * ДополнительныеПараметры - дополнительные параметры описания оповещения.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПроверкиКМ.
//
Процедура НачатьПроверкуКМ(Параметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиентПереопределяемый.НачатьПроверкуКМСредствамиККТ(Параметры, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ДанныеДляПроверки) Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении);
			Возврат;
		КонецЕсли;
		
		Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
			
			ККТФФД12МДЛП = Параметры.ККТФФД12МДЛП;
			Если ККТФФД12МДЛП = Неопределено Тогда
				ПараметрыПолученияККТФФД12МДЛП = ПараметрыПолученияККТФФД12МДЛП(Неопределено);
				ЗаполнитьЗначенияСвойств(ПараметрыПолученияККТФФД12МДЛП, Параметры);
				ККТФФД12МДЛП = ПолучитьККТФФД12МДЛП(ПараметрыПолученияККТФФД12МДЛП);
				Если ККТФФД12МДЛП = Неопределено Тогда
					ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Параметры.ККТФФД12МДЛП = ККТФФД12МДЛП;
			
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗакончитьПроверкуКМ", ЭтотОбъект, Параметры);
		
		НачатьВыполнениеПроверкиКМ(Параметры, ОповещениеОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеПроверкиКМ

Функция ПараметрыВыполненияПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	// Параметры режима работы
	Для Каждого Ключ Из КлючиРежимаРаботыПроверкиКМ() Цикл
		ВозвращаемоеЗначение.Вставить(Ключ, Ложь);
	КонецЦикла;
	
	// Параметры итерации
	ВозвращаемоеЗначение.Вставить("Интервал"       , 0.1);
	ВозвращаемоеЗначение.Вставить("ТекущаяОперация", ВыполняемыеОперацииПроверкиКМ().ЛокальнаяПроверка);
	ВозвращаемоеЗначение.Вставить("ТекущийИндекс"  , 0);
	
	// Целевые параметры
	ВозвращаемоеЗначение.Вставить("Форма"                  , Неопределено);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении"  , Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторУстройства", Неопределено);
	
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки" , Новый Массив);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки", НовыйРезультатВыполненияПроверкиКМ());
	
	// Параметры логирования
	ВозвращаемоеЗначение.Вставить("ВыполняетсяЛогирование", Истина);
	
	// Локальные параметры
	ВозвращаемоеЗначение.Вставить("ПровереныВсеКМ"                , Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыПроверкиКМОбработаны", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйРезультатВыполненияПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки" , Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки", Новый Соответствие);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйРезультатВыполненияПроверкиКМЭлемента()
	
	СвойстваРезультатаПроверкиКМ = КонтрольКодовМаркировкиМДЛПКлиентСерверПовтИсп.СвойстваРезультатаПроверкиКМСредствамиККТ();
	РезультатПроверкиКМПоУмолчанию = КонтрольКодовМаркировкиМДЛПКлиентСерверПовтИсп.РезультатПроверкиКМСредствамиККТПоУмолчанию();
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(СвойстваРезультатаПроверкиКМ, ","));
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, РезультатПроверкиКМПоУмолчанию);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Процедура НачатьВыполнениеПроверкиКМ(Параметры, ОповещениеОЗавершении)
	
	ПараметрыВыполненияПроверки = ПараметрыВыполненияПроверкиКМ();
	ПараметрыВыполненияПроверки.ОповещениеОЗавершении       = ОповещениеОЗавершении;
	ПараметрыВыполненияПроверки.Форма                       = Параметры.Форма;
	
	Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
		ПараметрыВыполненияПроверки.ИдентификаторУстройства = Параметры.ККТФФД12МДЛП;
	КонецЕсли;
	
	// Заполнение параметров режима работы
	Для Каждого Ключ Из КлючиРежимаРаботыПроверкиКМ() Цикл
		ПараметрыВыполненияПроверки[Ключ] = Параметры[Ключ];
	КонецЦикла;
	
	// Заполнение параметров элементов проверки
	Для Каждого ЭлементПроверки Из Параметры.ДанныеДляПроверки Цикл
		
		РезультатЭлементаПроверки = НовыйРезультатВыполненияПроверкиКМЭлемента();
		
		Если ЗначениеЗаполнено(ЭлементПроверки.ПолныйКодМаркировки) Тогда
			РезультатЭлементаПроверки.ПолныйКодМаркировки = ЭлементПроверки.ПолныйКодМаркировки;
		Иначе
			РезультатЭлементаПроверки.ЕстьОшибки                   = Истина;
			РезультатЭлементаПроверки.ТекстОшибки                  = НСтр("ru = 'Отсутствует полный код маркировки'");
			РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки = Истина;
			РезультатЭлементаПроверки.ПредставлениеРезультата      = РезультатЭлементаПроверки.ТекстОшибки;
		КонецЕсли;
		
		ЭлементПроверки.Вставить("ИдентификаторЗапроса", СокрЛП(Новый УникальныйИдентификатор));
		
		ПараметрыВыполненияПроверки.ЭлементыПроверки.Добавить(ЭлементПроверки);
		ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, РезультатЭлементаПроверки);
		
	КонецЦикла;
	
	Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
		СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполненияПроверки.ОповещениеОЗавершении, ПараметрыВыполненияПроверки.РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСледующийКМ(ПараметрыВыполненияПроверки)
	
	ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперацииПроверкиКМ().ЛокальнаяПроверка;
	ПараметрыВыполненияПроверки.ТекущийИндекс   = ПараметрыВыполненияПроверки.ТекущийИндекс + 1;
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры

Процедура СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки)
	
	ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиККТ"] = ПараметрыВыполненияПроверки;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьШагПроверкиКМСредствамиККТ", ПараметрыВыполненияПроверки.Интервал, Истина);
	
КонецПроцедуры

Процедура ВыполнитьШагПроверкиКМ() Экспорт
	
	ПараметрыВыполненияПроверки = ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиККТ"];
	Если ПараметрыВыполненияПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ПараметрыВыполненияПроверки.РезультатыПроверкиКМОбработаны // Крайний случай рекурентного выполнения
		 Или ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки // Критическая ошибка
		Тогда
			
			ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиККТ"] = Неопределено; // Очистка параметров приложения обязательна.
			
			ВыполнитьОбработкуОповещения(ПараметрыВыполненияПроверки.ОповещениеОЗавершении, ПараметрыВыполненияПроверки.РезультатПроверки);
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыВыполненияПроверки.ПровереныВсеКМ Тогда
			
			ПараметрыВыполненияПроверки.РезультатыПроверкиКМОбработаны = Истина;
			
			ОбработкаРезультатаПроверкиКМ(ПараметрыВыполненияПроверки);
			ПоказатьРезультатыПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки);
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыВыполненияПроверки.ТекущийИндекс > ПараметрыВыполненияПроверки.ЭлементыПроверки.ВГраница() Тогда
			
			ПараметрыВыполненияПроверки.ПровереныВсеКМ = Истина;
			
			ЗакрытьСессиюПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки);
			Возврат;
			
		КонецЕсли;
		
		ВыполняемыеОперации = ВыполняемыеОперацииПроверкиКМ();
		Если ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
			
			ЛокальнаяПроверкаИОтправкаЗапроса(ПараметрыВыполненияПроверки);
			
		ИначеЕсли ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
			
			ПолучениеРезультатаУдаленнойПроверки(ПараметрыВыполненияПроверки);
			
		ИначеЕсли ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
			
			ПодтверждениеКодаМаркировки(ПараметрыВыполненияПроверки);
			
		КонецЕсли;
		
	Исключение
		ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиККТ"] = Неопределено; // Очистка параметров приложения обязательна.
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЛокальнаяПроверкаИОтправкаЗапроса(ПараметрыВыполненияПроверки)
	
	ЭлементПроверки           = ПараметрыВыполненияПроверки.ЭлементыПроверки[ПараметрыВыполненияПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
	
	МодульМенеджерОборудованияКлиент                       = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
	МодульМенеджерОборудованияКлиентСервер                 = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиентСервер");
	МодульОборудованиеЧекопечатающиеУстройстваКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
	МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	
	ПараметрыЗапросаКМ                               = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
	ПараметрыЗапросаКМ.ИдентификаторЗапроса          = ЭлементПроверки.ИдентификаторЗапроса;
	ПараметрыЗапросаКМ.КонтрольнаяМарка              = ЭлементПроверки.ПолныйКодМаркировки;
	ПараметрыЗапросаКМ.Количество                    = 1;
	ПараметрыЗапросаКМ.ДробноеКоличество             = ЭлементПроверки.ДробноеКоличество;
	ПараметрыЗапросаКМ.КодЕдиницыИзмерения           = ЭлементПроверки.КодЕдиницыИзмерения;
	ПараметрыЗапросаКМ.МераКоличестваПредметаРасчета = ЭлементПроверки.МераКоличестваПредметаРасчета;
	ПараметрыЗапросаКМ.ПланируемыйСтатусТовара       = ЭлементПроверки.ПланируемыйСтатусТовара;
	ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ    = Не ПараметрыВыполненияПроверки.ПропуститьОжиданиеОтветаККТ;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка) Тогда
		РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки = Истина;
		ПроверитьСледующийКМ(ПараметрыВыполненияПроверки);
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = МодульМенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыВыполненияПроверки.ИдентификаторУстройства);
	Если ИдентификаторСессии <> Неопределено Тогда
		
		РезультатЗапросаПроверкиКМ = МодульМенеджерОборудованияКлиент.РезультатПроверкиКодаМаркировки(
			ПараметрыВыполненияПроверки.ИдентификаторУстройства,
			ИдентификаторСессии,
			ПараметрыЗапросаКМ);
		
		Если РезультатЗапросаПроверкиКМ <> Неопределено Тогда
			// Проверка текущего КМ уже выполнялась. Переходим к следующему.
			ПроверитьСледующийКМ(ПараметрыВыполненияПроверки);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЛокальнаяПроверкаЗавершение = Новый ОписаниеОповещения(
		"ЛокальнаяПроверкаЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(
		ЛокальнаяПроверкаЗавершение,
		ПараметрыВыполненияПроверки.Форма.УникальныйИдентификатор,
		ПараметрыВыполненияПроверки.ИдентификаторУстройства,
		ПараметрыЗапросаКМ,
		МодульМенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина));
	
КонецПроцедуры

Процедура ЛокальнаяПроверкаЗавершение(ДанныеОтвета, ПараметрыВыполненияПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыВыполненияПроверки.ЭлементыПроверки[ПараметрыВыполненияПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	
	Если ПараметрыВыполненияПроверки.ВыполняетсяЛогирование И ВыходныеПараметры <> Неопределено Тогда
		
		ДанныеРезультата = Новый Массив;
		
		Если ВыходныеПараметры.Свойство("РезультатXML") И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеРезультата.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если Не ДанныеОтвета.Результат И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеРезультата.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЛога = ТекстЖурналаРегистрацииПроверкиКМ(
			НСтр("ru = 'Локальная проверка средствами ККТ'"),
			ПараметрыВыполненияПроверки,
			ВыходныеПараметры.ЗапросXML,
			СтрСоединить(ДанныеРезультата, Символы.ПС));
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперацииПроверкиКМ().УдаленнаяПроверка;
		
		РезультатЭлементаПроверки.ЛокальнаяПроверкаКМВыполнена = ВыходныеПараметры.КодМаркировкиПроверен;
		РезультатЭлементаПроверки.РезультатЛокальнойПроверкиКМ = ВыходныеПараметры.РезультатПроверки;
		
	Иначе
		
		// Критическая ошибка.
		ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки  = Истина;
		ПараметрыВыполненияПроверки.РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		
	КонецЕсли;
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры


Процедура ПолучениеРезультатаУдаленнойПроверки(ПараметрыВыполненияПроверки)
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
	
	УдаленнаяПроверкаКодаМаркировкиЗавершение = Новый ОписаниеОповещения(
		"УдаленнаяПроверкаКодаМаркировкиЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(
		УдаленнаяПроверкаКодаМаркировкиЗавершение,
		ПараметрыВыполненияПроверки.Форма.УникальныйИдентификатор,
		ПараметрыВыполненияПроверки.ИдентификаторУстройства,
		Неопределено);
	
КонецПроцедуры

Процедура УдаленнаяПроверкаКодаМаркировкиЗавершение(ДанныеОтвета, ПараметрыВыполненияПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыВыполненияПроверки.ЭлементыПроверки[ПараметрыВыполненияПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	ВыходныеПараметры         = ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета);
	
	Если РезультатЭлементаПроверки.УдаленнаяПроверкаКМВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполненияПроверки.ВыполняетсяЛогирование Тогда
		
		ДанныеДляЛогирования = Новый Массив;
		
		РезультатXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВыходныеПараметры, "РезультатXML");
		Если ЗначениеЗаполнено(РезультатXML) Тогда
			ДанныеДляЛогирования.Добавить(РезультатXML);
		КонецЕсли;
		
		Если (ДанныеОтвета.Результат = Ложь Или ДанныеОтвета.Результат = 1) И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеДляЛогирования.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		Если ДанныеДляЛогирования.Количество() Тогда
			ТекстЛога = ТекстЖурналаРегистрацииПроверкиКМ(
				НСтр("ru = 'Проверка статуса товара ОИСМ средствами ККТ'"),
				ПараметрыВыполненияПроверки,,
				СтрСоединить(ДанныеДляЛогирования, Символы.ПС));
			ЗаписатьСобытиеВЖурналРегистрации(ТекстЛога);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыполненияПроверки.Интервал = 0.1; // Сброс интервала
	
	Если ДанныеОтвета.Результат Тогда
		
		ВыполняемыеОперации = ВыполняемыеОперацииПроверкиКМ();
		
		Если ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Получен") Тогда
			
			ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперации.Подтверждение;
			
			РезультатЭлементаПроверки.УдаленнаяПроверкаКМВыполнена             = Истина;
			
			РезультатЭлементаПроверки.КодОбработкиЗапроса                      = ВыходныеПараметры.КодОбработкиЗапроса;
			РезультатЭлементаПроверки.СтатусОбработкиЗапроса                   = ВыходныеПараметры.СтатусОбработкиЗапроса;
			
			РезультатЭлементаПроверки.РезультатПроверкиОИСМ                    = ВыходныеПараметры.РезультатПроверкиОИСМ;
			РезультатЭлементаПроверки.КодРезультатаПроверкиОИСМ                = ВыходныеПараметры.КодРезультатаПроверкиОИСМ;
			РезультатЭлементаПроверки.КодРезультатаПроверкиОИСМБинарный        = ВыходныеПараметры.РезультатПроверкиОИСМПредставление;
			
			РезультатЭлементаПроверки.ПредставлениеРезультатаПроверкиОИСМ      = ВыходныеПараметры.РезультатПроверкиСведенийОТоваре;
			РезультатЭлементаПроверки.ПредставлениеВЧекеРезультатаПроверкиОИСМ = ВыходныеПараметры.РезультатПроверкиСведенийОТовареПФ;
			
			РезультатЭлементаПроверки.РезультатПроверкиСтатусаТовара           = ВыходныеПараметры.СтатусТовара;
			
		ИначеЕсли ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается") Тогда
			
			ПараметрыВыполненияПроверки.Интервал = 1;
			
		ИначеЕсли ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.НеМожетБытьПолучен") Тогда
			
			ПараметрыВыполненияПроверки.ТекущаяОперация = ВыполняемыеОперации.Подтверждение;
			
		КонецЕсли;
		
	Иначе
		
		// Критическая ошибка.
		ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки  = Истина;
		ПараметрыВыполненияПроверки.РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		
	КонецЕсли;
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры

Процедура ПодтверждениеКодаМаркировки(ПараметрыВыполненияПроверки)
	
	ЭлементПроверки           = ПараметрыВыполненияПроверки.ЭлементыПроверки[ПараметрыВыполненияПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
	МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	
	ПараметрыПодтвержденияКМ = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ЭлементПроверки.ИдентификаторЗапроса;
	
	ПараметрыПодтвержденияКМ.Выбытие = ПараметрыВыполненияПроверки.ПодтверждатьВыбытиеКМ;
	
	ПодтверждениеКодаМаркировкиНаККТЗавершение = Новый ОписаниеОповещения(
		"ПодтверждениеКодаМаркировкиНаККТЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(
		ПодтверждениеКодаМаркировкиНаККТЗавершение,
		ПараметрыВыполненияПроверки.Форма.УникальныйИдентификатор,
		ПараметрыВыполненияПроверки.ИдентификаторУстройства,
		ПараметрыПодтвержденияКМ);
	
КонецПроцедуры

Процедура ПодтверждениеКодаМаркировкиНаККТЗавершение(ДанныеОтвета, ПараметрыВыполненияПроверки) Экспорт
	
	ЭлементПроверки           = ПараметрыВыполненияПроверки.ЭлементыПроверки[ПараметрыВыполненияПроверки.ТекущийИндекс];
	РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Получить(ЭлементПроверки.ИдентификаторЭлемента);
	
	Если ПараметрыВыполненияПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстОшибки = Неопределено;
		
		Если Не ДанныеОтвета.Результат Тогда
			ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		КонецЕсли;
		
		ТекстЛога = ТекстЖурналаРегистрацииПроверкиКМ(
			НСтр("ru = 'Подтверждение кода маркировки при выбытии'"),
			ПараметрыВыполненияПроверки,
			ЭлементПроверки.ИдентификаторЗапроса,
			ТекстОшибки);
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатЭлементаПроверки.ПодтвержденНаККТ = ПараметрыВыполненияПроверки.ПодтверждатьВыбытиеКМ;
		
	Иначе
		
		// Критическая ошибка.
		ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки  = Истина;
		ПараметрыВыполненияПроверки.РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		
	КонецЕсли;
	
	ПроверитьСледующийКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры


Процедура ЗакрытьСессиюПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки)
	
	ЗакрытьСессиюПроверкиКМПриНеобходимостиЗавершение = Новый ОписаниеОповещения(
		"ЗакрытьСессиюПроверкиКМПриНеобходимостиЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	Если Не ПараметрыВыполненияПроверки.НеЗакрыватьСессиюПроверкиКМ Тогда
		
		МодульМенеджерОборудованияКлиент                 = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		
		Если МодульМенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыВыполненияПроверки.ИдентификаторУстройства) <> Неопределено Тогда
			МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(
				ЗакрытьСессиюПроверкиКМПриНеобходимостиЗавершение,
				ПараметрыВыполненияПроверки.Форма.УникальныйИдентификатор,
				ПараметрыВыполненияПроверки.ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ЗакрытьСессиюПроверкиКМПриНеобходимостиЗавершение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюПроверкиКМПриНеобходимостиЗавершение(РезультатЗакрытияСессии, ПараметрыВыполненияПроверки) Экспорт
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры


Процедура ОбработкаРезультатаПроверкиКМ(ПараметрыВыполненияПроверки)
	
	ПредставленияВЧеке = КонтрольКодовМаркировкиМДЛПКлиентСервер.ПредставленияРезультатаПроверкиКМСредствамиККТВЧеке();
	ЗначенияСтатусов = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначенияСтатусовРезультатаПроверкиКМСредствамиККТ();
	
	Для Каждого КлючИЗначение Из ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки Цикл
		
		РезультатЭлементаПроверки = КлючИЗначение.Значение;
		
		МассивТекстовОшибки = Новый Массив;
		Если РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки Тогда
			
			МассивТекстовОшибки.Добавить(НСтр("ru = 'Отсутствует полный код маркировки'"));
			РезультатЭлементаПроверки.ПредставлениеВЧекеРезультатаПроверкиОИСМ = ПредставленияВЧеке.Отсутствует;
			
		Иначе
			
			Статус = КонтрольКодовМаркировкиМДЛПКлиентСервер.СтатусыРезультатаПроверкиКМСредствамиККТПоКоду(РезультатЭлементаПроверки.КодРезультатаПроверкиОИСМБинарный);
			Если Статус = ЗначенияСтатусов.ПроверенНекорректный Тогда
				
				МассивТекстовОшибки.Добавить(РезультатЭлементаПроверки.ПредставлениеРезультатаПроверкиОИСМ);
				
			КонецЕсли;
			
			Если Статус = Неопределено И РезультатЭлементаПроверки.ЛокальнаяПроверкаКМВыполнена И Не РезультатЭлементаПроверки.РезультатЛокальнойПроверкиКМ Тогда
				
				МассивТекстовОшибки.Добавить(НСтр("ru = 'Результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный.'"));
				
			КонецЕсли;
			
			Если РезультатЭлементаПроверки.КодОбработкиЗапроса = "1" Тогда
				
				МассивТекстовОшибки.Добавить(НСтр("ru = 'Запрос проверки статуса ОИСМ имеет некорректный формат.'"));
				
			ИначеЕсли РезультатЭлементаПроверки.КодОбработкиЗапроса = "2" Тогда
				
				МассивТекстовОшибки.Добавить(НСтр("ru = 'Указанный в запросе код маркировки имеет некорректный формат (не распознан).'"));
				
			КонецЕсли;
			
			Если Статус = Неопределено И Не РезультатЭлементаПроверки.РезультатПроверкиОИСМ Тогда
				
				МассивТекстовОшибки.Добавить(НСтр("ru = 'Проверка статуса товара ОИСМ завершилась с отрицательным результатом.'"));
				РезультатЭлементаПроверки.ПредставлениеВЧекеРезультатаПроверкиОИСМ = ПредставленияВЧеке.М;
				
			КонецЕсли;
			
			Если РезультатЭлементаПроверки.РезультатПроверкиСтатусаТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ОборотТовараПриостановлен")
			 Или РезультатЭлементаПроверки.РезультатПроверкиСтатусаТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараНекорректен") Тогда
				
				МассивТекстовОшибки.Добавить(Строка(РезультатЭлементаПроверки.РезультатПроверкиСтатусаТовара));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивТекстовОшибки.Количество() > 0 Тогда
			
			РезультатЭлементаПроверки.ЕстьОшибки  = Истина;
			РезультатЭлементаПроверки.ТекстОшибки = СтрСоединить(МассивТекстовОшибки, Символы.ПС);
			
			Если Не ЗначениеЗаполнено(РезультатЭлементаПроверки.ПредставлениеВЧекеРезультатаПроверкиОИСМ) Тогда
				РезультатЭлементаПроверки.ПредставлениеВЧекеРезультатаПроверкиОИСМ = ПредставленияВЧеке.ММинус;
			КонецЕсли;
			
			РезультатЭлементаПроверки.ПредставлениеРезультата = РезультатЭлементаПроверки.ТекстОшибки;
			
		Иначе
			
			РезультатЭлементаПроверки.ПредставлениеРезультата = РезультатЭлементаПроверки.ПредставлениеРезультатаПроверкиОИСМ;
			
		КонецЕсли;
		
		// КонтрольПройден если нет ошибок проверки или ошибки можно проигнорировать (можно все кроме ТребуетсяПолныйКодМаркировки).
		РезультатЭлементаПроверки.КонтрольПройден = Не РезультатЭлементаПроверки.ЕстьОшибки
			Или ПараметрыВыполненияПроверки.ИгнорироватьОшибкиКМ И Не РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки;
		
		РезультатЭлементаПроверки.ПолныйКодМаркировки = "";
		РезультатЭлементаПроверки.КонтрольВыполнен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПоказатьРезультатыПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки)
	
	ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение = Новый ОписаниеОповещения(
		"ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	Если ПараметрыВыполненияПроверки.ИнтерактивныйРежим Тогда
		
		ОткрытьФормуРезультатов = Ложь;
		
		РезультатыПроверки = Новый Соответствие;
		Для Каждого ЭлементПроверки Из ПараметрыВыполненияПроверки.ЭлементыПроверки Цикл
			
			РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
			
			Элемент = НовыйРезультатВыполненияПроверкиКМЭлемента();
			ЗаполнитьЗначенияСвойств(Элемент, РезультатЭлементаПроверки);
			Элемент.Вставить("НомерУпаковки", ЭлементПроверки.КодМаркировки);
			
			РезультатыПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, Элемент);
			
			Если РезультатЭлементаПроверки.ЕстьОшибки Тогда
				// Есть хотя бы одна ошибка.
				ОткрытьФормуРезультатов = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОткрытьФормуРезультатов = Ложь;
	КонецЕсли;
	
	Если ОткрытьФормуРезультатов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РезультатыПроверки", Новый ФиксированноеСоответствие(РезультатыПроверки));
		
		ОткрытьФорму("РегистрСведений.РезультатыПроверкиКММДЛП.Форма.РезультатыПроверкиКМ",
			ПараметрыФормы,
			ПараметрыВыполненияПроверки.Форма,,,,
			ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение(РезультатИнтерактивногоРежима, ПараметрыВыполненияПроверки) Экспорт
	
	Если ЗначениеЗаполнено(РезультатИнтерактивногоРежима) И ТипЗнч(РезультатИнтерактивногоРежима) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки Цикл
			
			ИдентификаторЭлемента     = КлючИЗначение.Ключ;
			РезультатЭлементаПроверки = КлючИЗначение.Значение;
			
			РезультатЭлементаИнтерактивногоРежима = РезультатИнтерактивногоРежима[ИдентификаторЭлемента];
			Если РезультатЭлементаИнтерактивногоРежима <> Неопределено Тогда
				РезультатЭлементаПроверки.КонтрольПройден = РезультатЭлементаИнтерактивногоРежима.КонтрольПройден;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры


Функция ВыполняемыеОперацииПроверкиКМ()
	
	ВозвращаемоеЗначение= Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЛокальнаяПроверка", "ЛокальнаяПроверка");
	ВозвращаемоеЗначение.Вставить("УдаленнаяПроверка", "УдаленнаяПроверка");
	ВозвращаемоеЗначение.Вставить("Подтверждение"    , "Подтверждение");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Функция ПараметрыПолученияККТФФД12МДЛП(Форма)
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Форма"      , Форма);
	ВозвращаемоеЗначение.Вставить("Организация", ПредопределенноеЗначение("Справочник.ОрганизацииМДЛП.ПустаяСсылка"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьККТФФД12МДЛП(Параметры)
	
	ККТФФД12МДЛП = Неопределено;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='Не заполнены параметры получения ККТ для выполнения проверки кодов маркировки.'"));
		Возврат ККТФФД12МДЛП;
	КонецЕсли;
	
	ЕстьРеквизитКешККТФФД12МДЛП = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.Форма, "КешККТФФД12МДЛП");
	
	Если ЕстьРеквизитКешККТФФД12МДЛП Тогда
		Если Параметры.Форма.КешККТФФД12МДЛП = Неопределено Тогда
			КешККТФФД12МДЛП = Новый Соответствие;
		Иначе
			КешККТФФД12МДЛП = Новый Соответствие(Параметры.Форма.КешККТФФД12МДЛП);
			Если ЗначениеЗаполнено(Параметры.Организация) Тогда
				ККТФФД12МДЛП = КешККТФФД12МДЛП[Параметры.Организация];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ККТФФД12МДЛП = Неопределено
	   И ЗначениеЗаполнено(Параметры.Организация) Тогда
		
		ККТФФД12МДЛП = КонтрольКодовМаркировкиМДЛПВызовСервера.ПолучитьККТФФД12ПоОрганизацииМДЛП(Параметры.Организация);
		Если ККТФФД12МДЛП <> Неопределено Тогда
			
			Если ЕстьРеквизитКешККТФФД12МДЛП Тогда
				КешККТФФД12МДЛП.Вставить(Параметры.Организация, ККТФФД12МДЛП);
			КонецЕсли;
			
		Иначе
			Если ЕстьРеквизитКешККТФФД12МДЛП Тогда
				// Пустая структура, для того, чтобы при следующем вызове понимать, что данные уже получались
				// и не выполнять повторно запрос по текущим параметрам.
				КешККТФФД12МДЛП.Вставить(Параметры.Организация, Новый Структура);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ККТФФД12МДЛП) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='На текущем рабочем месте нет доступных ККТ для выполнения проверки кодов маркировки.'"));
	КонецЕсли;
	
	Если ЕстьРеквизитКешККТФФД12МДЛП Тогда
		Параметры.Форма.КешККТФФД12МДЛП = Новый ФиксированноеСоответствие(КешККТФФД12МДЛП);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ККТФФД12МДЛП), ККТФФД12МДЛП, Неопределено);
	
КонецФункции


Функция ВыходныеПараметрыИзРезультатаБПО(ДанныеОтвета)
	
	Если КонтрольКодовМаркировкиМДЛПКлиентСерверПовтИсп.РедакцияБПО() = 2 Тогда
		Если ДанныеОтвета.ВыходныеПараметры <> Неопределено
			И ТипЗнч(ДанныеОтвета.ВыходныеПараметры[0]) = Тип("Структура") Тогда
			Возврат ДанныеОтвета.ВыходныеПараметры[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат ДанныеОтвета;
	КонецЕсли;
	
КонецФункции

#Область Логирование

Функция ТекстЖурналаРегистрацииПроверкиКМ(Операция, ПараметрыПроверки, ЗапросXML = Неопределено, РезультатXML = Неопределено)
	
	СтрокиЛога = Новый Массив;
	
	СтрокиЛога.Добавить(СтрШаблон(
		НСтр("ru = 'Операция: %1 (%2)'"),
		Операция,
		ПараметрыПроверки.ИдентификаторУстройства));
	
	Если ЗначениеЗаполнено(ЗапросXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Запрос:'"));
		СтрокиЛога.Добавить(ЗапросXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Результат:'"));
		СтрокиЛога.Добавить(РезультатXML);
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиЛога, Символы.ПС);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Текст)
	
	КонтрольКодовМаркировкиМДЛПВызовСервера.ЗаписатьСобытиеВЖурналРегистрации(Текст, СобытиеЖурналаРегистрацииПроверкиКМ());
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииПроверкиКМ()
	
	Возврат НСтр("ru = 'Контроль КМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗавершениеПроверкиКМ

// Описание результата проверки КМ средствами ККТ.
//
// Возвращаемое значение:
//  ЕстьОшибки     - Булево - признак наличия критических ошибок выполнения проверки КМ.
//  ДанныеПроверки - Соответствие - коллекция результатов проверки кодов маркировки.
//   * Ключ - ИдентификаторЭлемента из коллекции ДанныеДляПроверки параметров проверки КМ
//            (см. функции ПараметрыПроверкиКМ и ЭлементДанныхДляПроверкиКМ).
//   * Значение - Структура - результат проверки конкретного кода маркировки (см. функцию РезультатПроверкиКМЭлемента).
//      ** КодМаркировки       - SGTIN.
//      ** ПолныйКодМаркировки - полный код маркировки в формате Base64.
//      ** КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//      ** РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами ККТ
//                               (см. РегистрыСведений.РезультатыПроверкиКМСредствамиККТМДЛП.СвойстваРезультатаПроверкиКМ).
//      ** КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//      ** ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//
Функция РезультатПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки"    , Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки", Новый Соответствие);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Описание результата проверки конкретного кода маркировки.
//
// Возвращаемое значение:
//  * КодМаркировки       - SGTIN.
//  * ПолныйКодМаркировки - полный код маркировки в формате Base64.
//  * КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//  * РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами ККТ
//                          (см. РегистрыСведений.РезультатыПроверкиКМСредствамиККТМДЛП.СвойстваРезультатаПроверкиКМ).
//  * КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//  * ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//
Функция РезультатПроверкиКМЭлемента()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("КодМаркировки"             , "");
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки"       , "");
	
	ВозвращаемоеЗначение.Вставить("КонтрольВыполнен"          , Ложь);
	ВозвращаемоеЗначение.Вставить("КонтрольПройден"           , Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверкиКМ"       , Неопределено);
	ВозвращаемоеЗначение.Вставить("КодСтатусаПроверкиКМ"      , Неопределено);
	ВозвращаемоеЗначение.Вставить("ПояснениеСтатусаПроверкиКМ", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗакончитьПроверкуКМ(ИсходныйРезультатПроверки, Параметры) Экспорт
	
	РезультатПроверки = РезультатПроверкиКМ();
	
	Если ЗначениеЗаполнено(ИсходныйРезультатПроверки) Тогда
		
		РезультатПроверки.ЕстьОшибки = ИсходныйРезультатПроверки.ЕстьОшибки;
		Если ИсходныйРезультатПроверки.ЕстьОшибки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ИсходныйРезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
		Для Каждого ЭлементДанных Из Параметры.ДанныеДляПроверки Цикл
			
			РезультатЭлементаПроверки = РезультатПроверкиКМЭлемента();
			ЗаполнитьЗначенияСвойств(РезультатЭлементаПроверки, ЭлементДанных);
			
			ИсходныйРезультатЭлементаПроверки = ИсходныйРезультатПроверки.ДанныеПроверки[ЭлементДанных.ИдентификаторЭлемента];
			Если Не ЗначениеЗаполнено(ИсходныйРезультатЭлементаПроверки) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатЭлементаПроверки.КонтрольВыполнен = ИсходныйРезультатЭлементаПроверки.КонтрольВыполнен;
			РезультатЭлементаПроверки.КонтрольПройден = ИсходныйРезультатЭлементаПроверки.КонтрольПройден;
			РезультатЭлементаПроверки.РезультатПроверкиКМ = Новый ФиксированнаяСтруктура(ИсходныйРезультатЭлементаПроверки);
			
			Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
				Представление = КонтрольКодовМаркировкиМДЛПКлиентСервер.ПредставлениеРезультатаПроверкиКМСредствамиККТ(РезультатЭлементаПроверки.РезультатПроверкиКМ);
				Если ЗначениеЗаполнено(Представление) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РезультатЭлементаПроверки, Представление, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.СообщатьОбОшибкахПроверки И ИсходныйРезультатЭлементаПроверки.ЕстьОшибки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Упаковка ""%1"" не прошла проверку по причине:
					|%2.'"),
					РезультатЭлементаПроверки.КодМаркировки,
					ИсходныйРезультатЭлементаПроверки.ТекстОшибки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			
			РезультатПроверки.ДанныеПроверки.Вставить(ЭлементДанных.ИдентификаторЭлемента, РезультатЭлементаПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
