
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Инициализирует форму задачи
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - инициализируемая форма
//  Объект                - ЗадачаОбъект.ЗадачаИсполнителя - анализируемые данные
//  ЭлементСрокИсполнения - ПолеВвода        - инициализируемое поле
//  ЭлементПредмет        - ПолеНадписи      - инициализируемое поле
//
Процедура ФормаЗадачиИнициализировать(Форма, Объект, ЭлементСрокИсполнения, ЭлементПредмет) Экспорт
	
	Форма.НачальныйПризнакВыполнения = Объект.Выполнена;
	Форма.ТолькоПросмотр = Объект.Выполнена;
	
	Если Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен
	 Или Объект.ПометкаУдаления Тогда
		Форма.Элементы.ГруппаИсполнение.Доступность = Ложь;
		Форма.Элементы.ГруппаОстановлена.Видимость = Истина;
		Форма.Элементы.ГруппаОстановлена.Доступность = Истина;
		Форма.ТолькоПросмотр = Истина;
		Если Объект.ПометкаУдаления Тогда
			Форма.Элементы.ТекстОстановлен.Заголовок = НСтр("ru = 'Помечена на удаление'");
		КонецЕсли;
	Иначе
		Форма.Элементы.ГруппаОстановлена.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Объект.Выполнена Тогда
		Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Форма.ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЭлементПредмет.Гиперссылка = ЗначениеЗаполнено(Объект.Предмет);
	Форма.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(ЭлементСрокИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Форма.Элементы.Дата);
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Форма.Элементы.ДатаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
	// Заполняем поле "Исполнитель"
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Форма.ИсполнительСтрокой = Объект.Исполнитель;
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Истина;
	Иначе
		Форма.ИсполнительСтрокой = Строка(Объект.РольИсполнителя);
		
		Если Объект.ОсновнойОбъектАдресации <> Неопределено И НЕ Объект.ОсновнойОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ОсновнойОбъектАдресации;
		КонецЕсли;
		
		Если Объект.ДополнительныйОбъектАдресации <> Неопределено И НЕ Объект.ДополнительныйОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ДополнительныйОбъектАдресации;
		КонецЕсли;
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		Форма.Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
		Форма.Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаКомандыВыполнения.Видимость = Истина;
		Форма.Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ПринятаКИсполнению = Истина Тогда
		Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
		Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Истина;
	Иначе
		Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Истина;
		Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд остановки и продолжения и поля состояния процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса.
//
Процедура ОбновитьДоступностьПолейСостояния(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Ссылка.Пустая() Или Объект.Завершен Или Не Объект.Стартован Или ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда
		Элементы.ФормаОстановить.Видимость = Ложь;
		Элементы.ФормаПродолжить.Видимость = Ложь;
	Иначе
		
		Если Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			Элементы.ФормаОстановить.Видимость = Ложь;
			Элементы.ФормаПродолжить.Видимость = Истина;
			Форма.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ФормаОстановить.Видимость = Истина;
			Элементы.ФормаПродолжить.Видимость = Ложь;
			Форма.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Отложен = Ложь;
	ВозможенОтложенныйСтарт = ПроцессПоддерживаетОтложенныйСтарт(Объект.Ссылка);
	Если ВозможенОтложенныйСтарт И Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыОтложенногоПроцесса = БизнесПроцессыИЗадачиСервер.ПараметрыОтложенногоПроцесса(Объект.Ссылка);
		Отложен = ПараметрыОтложенногоПроцесса <> Неопределено
			И ПараметрыОтложенногоПроцесса.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
		
	КонецЕсли;
	
	ОбъектСтартован = Объект.Стартован Или Отложен;
	
	Элементы.ФормаСтартоватьИЗакрыть.Видимость = Не ОбъектСтартован;
	Элементы.ФормаСтартоватьИЗакрыть.КнопкаПоУмолчанию = Не ОбъектСтартован;
	Элементы.ФормаСтарт.Видимость = Не ОбъектСтартован;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ОбъектСтартован;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ОбъектСтартован;
	
	Если ВозможенОтложенныйСтарт Тогда
		Элементы.ФормаНастроитьОтложенныйСтарт.Доступность = Не Объект.Стартован И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПроцессыДляЗапуска);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
// Возвращает строку результат перенаправления задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка - перенаправляемая задача
//
// Возвращаемое значение:
//  Результат - Строка - строка результат перенаправления задачи
//
Функция РезультатВыполненияПриПеренаправлении(Знач ЗадачаСсылка) Экспорт
	
	СтрокаФормат = НСтр("ru = '%1, %2 перенаправил(а) задачу:
		|%3
		|'");
	
	Комментарий = СокрЛП(ЗадачаСсылка.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрокаФормат, ЗадачаСсылка.ДатаИсполнения, ЗадачаСсылка.Исполнитель, Комментарий);
	
	Возврат Результат;
	
КонецФункции

// Используется в процедурах ЗаполнитьНаборыЗначенийДоступа в модулях бизнес-процессов
// Заполняет таблицу значений доступа данными от ведущего или главного бизнес-процесса
Процедура ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(БизнесПроцессОбъект, Таблица, ТекущийНомерНабора) Экспорт
	
	// Пользователи от бизнес-процесса ведущей задачи
	Если Не БизнесПроцессОбъект.ВедущаяЗадача.Пустая() Тогда
		
		ВедущийБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.ВедущаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все ведущие бизнес-процессы выше по иерархии
		ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(ВедущийБизнесПроцесс, Таблица, ТекущийНомерНабора);
		
		Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВедущийБизнесПроцесс);
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВедущийБизнесПроцесс);
		ПользователиВедущегоБизнесПроцесса = 
			ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПроцесса, "ПользователиВедущегоБизнесПроцесса", Параметры, Истина);
		Если ПользователиВедущегоБизнесПроцесса <> Неопределено Тогда
			Для Каждого Пользователь Из ПользователиВедущегоБизнесПроцесса Цикл
				
				Строка = Таблица.Добавить();
				Строка.НомерНабора = ТекущийНомерНабора;
				Строка.Чтение = Истина;
				Строка.ЗначениеДоступа = Пользователь;
				
				// Увеличиваем номер набора
				ТекущийНомерНабора = ТекущийНомерНабора + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пользователи от бизнес-процесса главной задачи
	Если Не БизнесПроцессОбъект.ГлавнаяЗадача.Пустая() Тогда
		
		ГлавныйБизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессОбъект.ГлавнаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все главные бизнес-процессы выше по иерархии
		ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(ГлавныйБизнесПроцесс, Таблица, ТекущийНомерНабора);
		
		Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГлавныйБизнесПроцесс);
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ГлавныйБизнесПроцесс);
		ПользователиГлавногоБизнесПроцесса = 
			ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПроцесса, "ПользователиВедущегоБизнесПроцесса", Параметры, Истина);
		Если ПользователиГлавногоБизнесПроцесса <> Неопределено Тогда
			Для Каждого Пользователь Из ПользователиГлавногоБизнесПроцесса Цикл
				
				Строка = Таблица.Добавить();
				Строка.НомерНабора = ТекущийНомерНабора;
				Строка.Чтение = Истина;
				Строка.ЗначениеДоступа = Пользователь;
				
				// Увеличиваем номер набора
				ТекущийНомерНабора = ТекущийНомерНабора + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет отсутствие незавершенного бизнес-процесса по предмету и при его наличии вызывает исключение.
//
// Параметры:
//  Предмет - Ссылка - предмет для которого требуется проверить существование незавершенного бизнес-процесса.
//  БизнесПроцесс - БизнесПроцесс.Ссылка - Определяет тип искомого бизнес-процесса и исключаемый бизнес-процесс.
//
Процедура ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(Предмет, БизнесПроцесс) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеБизнесПроцесса = БизнесПроцесс.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БизнесПроцесс.Ссылка
	|ИЗ
	|	БизнесПроцесс." + МетаданныеБизнесПроцесса.Имя + " КАК БизнесПроцесс
	|ГДЕ
	|	(НЕ БизнесПроцесс.ПометкаУдаления)
	|	И БизнесПроцесс.Предмет = &Предмет
	|	И БизнесПроцесс.Стартован
	|	И (НЕ БизнесПроцесс.Завершен)
	|	И БизнесПроцесс.Ссылка <> &БизнесПроцесс
	|";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СообщениеОбОшибке = НСтр("ru = 'По предмету %Предмет% уже ведется процесс ""%БизнесПроцесс%"". Действие не может быть выполнено.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.Синоним);
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Предмет%", Предмет);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет право доступа пользователя на объект, сразу же генерирует СообщениеПользователя с привязкой к полю
Функция ЕстьПравоДоступаУчастникаБизнесПроцесса(
					Объект,
					ПредметПроверки,
					ПравоДоступаСтрока,
					УчастникБизнесПроцесса,
					ОсновнойРеквизитАдресации = Неопределено,
					ДополнительныйРеквизитАдресации = Неопределено,
					ИмяРеквизита = Неопределено,
					ИмяКолонкиУчастникаБизнесПроцесса = Неопределено,
					НомерСтрокиТабличногоПоля = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(УчастникБизнесПроцесса) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ЕстьПравоДоступа = ЕстьПравоДоступаОбъекта(ПравоДоступаСтрока, ПредметПроверки, УчастникБизнесПроцесса);
		ШаблонОшибки = НСтр("ru = 'У пользователя ""%1"" нет прав на ""%2""(%3)'");
		
	Иначе
		
		ЕстьПравоДоступа = Истина;
		
		// разыменовать УчастникБизнесПроцесса
		ПользователиРоли = ПолучитьПользователейРоли(УчастникБизнесПроцесса, ОсновнойРеквизитАдресации, ДополнительныйРеквизитАдресации);
		Для Каждого Строка Из ПользователиРоли Цикл
			Если Не ЕстьПравоДоступаОбъекта(ПравоДоступаСтрока, ПредметПроверки, Строка.Исполнитель) Тогда
				ЕстьПравоДоступа = Ложь;
				Прервать; // выйти из цикла - дальше проверять не надо
			КонецЕсли;
		КонецЦикла;
		
		ШаблонОшибки = НСтр("ru = 'Не все пользователи  роли ""%1"" имеют права на объект ""%2""(%3)'");
		
	КонецЕсли;
	
	Если Не ЕстьПравоДоступа Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, УчастникБизнесПроцесса, ПредметПроверки, ТипЗнч(ПредметПроверки));
		Если ИмяКолонкиУчастникаБизнесПроцесса <> Неопределено Тогда
			Поле = ИмяРеквизита + "[" + Формат(НомерСтрокиТабличногоПоля,"ЧГ=; ЧН=") + "]." + ИмяКолонкиУчастникаБизнесПроцесса;
		Иначе
			Поле = ИмяРеквизита;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, Поле);
		
	КонецЕсли;
	
	Возврат ЕстьПравоДоступа;
	
КонецФункции

// Возвращает представление длительности периода.
//
// Параметры:
//  ДатаНачала - Дата - начало периода длительности.
//  ДатаОкончания - Дата - окончание периода длительности.
//
// Возвращаемое значение:
//  Строка
//
Функция ДлительностьПроцесса(ДатаНачала, ДатаОкончания) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ЧислоЧасов = Окр((ДатаОкончания - ДатаНачала) / (60*60));
		ЧислоДней = Окр(ЧислоЧасов / 24);
		ЧислоЧасов = ЧислоЧасов - ЧислоДней * 24;
	Иначе
		ЧислоЧасов = 0;
		ЧислоДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60*60*24);
	КонецЕсли;
		
	Если ЧислоЧасов < 0 Тогда
		ЧислоДней = ЧислоДней - 1;
		ЧислоЧасов = ЧислоЧасов + 24;
	КонецЕсли;
	
	ДлительностьДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"), ЧислоДней);
	ДлительностьЧасов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'"), ЧислоЧасов);
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и %2'"), ДлительностьДней, ДлительностьЧасов);
		ИначеЕсли ЧислоДней > 0 Тогда
			Возврат ДлительностьДней;
		ИначеЕсли ЧислоЧасов > 0 Тогда
			Возврат ДлительностьЧасов;
		Иначе
			Возврат НСтр("ru = 'Менее 1 часа'");
		КонецЕсли;
	Иначе
		Если ЧислоДней > 0 Тогда
			Возврат ДлительностьДней;
		Иначе
			Возврат НСтр("ru = 'Менее 1 дня'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Вызывается при создании формы списка бизнес-процессов на сервере.
//
// Параметры:
//  УсловноеОформлениеБизнесПроцессов - УсловноеОформление - условное оформление списка бизнес-процессов.
//
Процедура УстановитьОформлениеДлительностиПроцесса(УсловноеОформлениеБизнесПроцессов) Экспорт
	
	Элемент = УсловноеОформлениеБизнесПроцессов.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Длительность");
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Длительность");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	Отбор.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Менее 1 дня'"));
	
	Элемент = УсловноеОформлениеБизнесПроцессов.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Длительность");
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

// Определяет, поддерживается ли отложенный старт бизнес-процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка - процесс для которого нужно определить возможность отложенного старта.
//
// Возвращаемое значение:
//  Булево - Истина, если процесс можно запустить отложенно
//
Функция ПроцессПоддерживаетОтложенныйСтарт(Процесс) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ОтложенныйБизнесПроцесс.Тип.СодержитТип(ТипЗнч(Процесс));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с кэшем информации об объектах
#Область КэшИнформацииОбОбъектах

// Обновляет признак ЕстьЗадачи для предмета задачи. Вызывается при записи задачи.
//
Процедура ОбновитьКэшОбъектов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Предмет)
	 Или Не Метаданные.РегистрыСведений.КэшИнформацииОбОбъектах.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Источник.Предмет)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Или Источник.Выполнена Тогда
		Если Не ОбъектИмеетЗадачи(Источник.Предмет) Тогда
			РаботаСИнформациейОбОбъектах.УстановитьСвойствоЕстьЗадачи(Источник.Предмет, Ложь);
		КонецЕсли;
	Иначе
		РаботаСИнформациейОбОбъектах.УстановитьСвойствоЕстьЗадачи(Источник.Предмет, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что по объекту есть хоть одна незавершенная задача 
//
Функция ОбъектИмеетЗадачи(Предмет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предмет = &Предмет
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|");
	
	Запрос.Параметры.Вставить("Предмет", Предмет);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Заполняет регистр КэшИнформацииОбОбъектах при обновлении базы
//
Процедура ЗаполнитьКэшИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачаИсполнителя.Предмет КАК Предмет
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Предмет = Выборка.Предмет;
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить; // этот тип владельца не рассматриваем
		КонецЕсли;
		
		РегистрыСведений.КэшИнформацииОбОбъектах.УстановитьИнформациюОбОбъекте(Предмет, "ЕстьЗадачи", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КэшИнформацииОбОбъектах

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусПредмета(Знач Предмет, НовыйСтатус, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	Параметры = Новый Массив(4);
	Параметры[0] = Предмет;
	Параметры[1] = НовыйСтатус;
	Параметры[2] = ДополнительныеПараметры;
	Параметры[3] = СтандартнаяОбработка;
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПредмета, "ПриИзмененииСтатусаПредмета", Параметры);
	
	НовыйСтатус             = Параметры[1];
	ДополнительныеПараметры = Параметры[2];
	СтандартнаяОбработка    = Параметры[3];
	
	Если СтандартнаяОбработка И ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет)Тогда
		КоличествоОбработанных = ОбщегоНазначенияБольничнаяАптека.УстановитьСтатусОбъектов(Предмет, НовыйСтатус, ДополнительныеПараметры);
		Если КоличествоОбработанных = 0 Тогда
			СообщениеОбОшибке = НСтр("ru = 'При изменении ""%Предмет%"" возникли ошибки.'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%Предмет%", Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПользователейРоли(УчастникБизнесПроцесса, ОсновнойРеквизитАдресации = Неопределено, ДополнительныйРеквизитАдресации = Неопределено)
	
	МассивПользователей = Новый Массив;
	// неизвестный тип
	Если ТипЗнч(УчастникБизнесПроцесса) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Возврат МассивПользователей;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РольИсполнителя"              , УчастникБизнесПроцесса);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации"      , ОсновнойРеквизитАдресации);
	Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйРеквизитАдресации);
	МассивПользователей = Запрос.Выполнить().Выгрузить();
	Возврат МассивПользователей;
	
КонецФункции

Функция ЕстьПравоДоступаОбъекта(ПравоДоступаСтрока, ОбъектДоступа, Пользователь = Неопределено)
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Пользователь) И Пользователь <> Пользователи.АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	МетаданныеОбъекта = ОбъектДоступа.Метаданные();
	Возврат ПравоДоступа(ПравоДоступаСтрока, МетаданныеОбъекта, ПользовательИБ);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЕНИЕ ФУНКЦИОНАЛЬНОСТИ БСП
#Область СтандартныеПодсистемы

// Вызывается для обновления данных бизнес-процесса в регистре сведений.
// ДанныеБизнесПроцессов.
// 
// Параметры:
//  Запись       - РегистрСведенийЗапись.ДанныеБизнесПроцессов
//
Процедура ПриЗаписиСпискаБизнесПроцессов(Запись) Экспорт
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ВедущийБизнесПроцесс", "ВедущаяЗадача.БизнесПроцесс");
	
	// БольничнаяАптека
	Запись.ВедущийБизнесПроцесс = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Владелец, ЗапрашиваемыеРеквизиты).ВедущийБизнесПроцесс;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Заполняет список бизнес-процессов, которые подключены к подсистеме
// и модули менеджеров которых содержат следующие экспортные процедуры и функции:
//  - ПриПеренаправленииЗадачи
//  - ФормаВыполненияЗадачи
//  - ОбработкаВыполненияПоУмолчанию
//
// Параметры:
//   ПодключенныеБизнесПроцессы - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                                               подключенного к подсистеме "Бизнес-процессы и задачи".
//                                               В качестве значения - пустую строку.
//
// Например:
//   ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "");
//
Процедура ПриОпределенииБизнесПроцессов(ПодключенныеБизнесПроцессы) Экспорт
	
	// БольничнаяАптека
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.Исполнение.ПолноеИмя()                   , "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.ОбработкаВнутреннегоДокумента.ПолноеИмя(), "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.Согласование.ПолноеИмя()                 , "");
	ПодключенныеБизнесПроцессы.Вставить(Метаданные.БизнесПроцессы.Утверждение.ПолноеИмя()                  , "");
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы
