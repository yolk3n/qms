
#Область ПрограммныйИнтерфейс

#Область ЗапускПроверкиКМ

// Возвращает параметры, необходимые для выполнения проверки КМ средствами АПИ МДЛП на форме объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта, к которому подключен механизма проверки КМ.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для выполнения проверки КМ на форме объекта.
//   * Форма                 - ФормаКлиентскогоПриложения - форма объекта, к которому подключен механизма проверки КМ.
//   * ОповещениеОЗавершении - ОписаниеОповещения - процедура в которую будет передан результат выполнения проверки КМ.
//      Процедура должна принимать следующие параметры:
//       * РезультатПроверкиКМ - Структура - результат проверки КМ средствами АПИ МДЛП (см. функцию РезультатПроверкиКМ).
//       * ДополнительныеПараметры - дополнительные параметры описания оповещения.
//   * ДанныеДляПроверки     - Массив - набор элементов проверки КМ (см. ЭлементДанныхДляПроверкиКМ).
//   * ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ - Булево - Истина, если необходимо подготовить данные для механизма выборочного контроля КМ и не выполнять непосредственную проверку КМ.
//                                                                При этом в РезультатПроверкиКМ будет записан полный код маркировки, который будет использоваться в механизме ВыборочныйКонтрольКММДЛП.
//                                                                Ложь, если необходимо выполнить непосредственную проверку переданных КМ.
//                                                                При этом из РезультатПроверкиКМ будет удален полный код маркировки, в случае отсутствия ошибок выполнения механизма.
//   * Транспорт             - параметры подключения (см. ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули).
//                             Необязательный, если заполнены занчения возвращаемой структуры функции ПараметрыПолученияТранспорта.
//   * Организация           - СправочникСсылка.ОрганизацииМДЛП - значение для расчета параметров Транспорт. Элемент структуры ПараметрыПолученияТранспорта.
//                                                                Необязательный, если указан Транспорт.
//   * МестоДеятельности     - СправочникСсылка.МестаДеятельностиМДЛП - значение для расчета параметров Транспорт. Элемент структуры ПараметрыПолученияТранспорта.
//                                                                      Необязательный, если указан Транспорт.
//   * ИнтерактивныйРежим        - Булево - Истина, если необходимо отображать форму результатов проверки КМ.
//                                          Если ИнтерактивныйРежим = Истина, то при наличии некорректных КМ откроется форма,
//                                          в которой пользователь может изменить значение КонтрольПройден.
//   * СообщатьОбОшибкахПроверки - Булево - Истина, если необходимо сообщать пользователю об ошибках проверки каждого КМ.
//                                          Например, если не нужно давать возможность пользователю менять значение признака КонтрольПройден,
//                                          а необходимо только констатировать факт наличия ошибок проверки кода маркировки.
//
Функция ПараметрыПроверкиКМ(Форма = Неопределено) Экспорт
	
	Если Форма <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтрольВыполнятьВФормеВыборочногоКонтроляКМ") Тогда
		ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ = Форма.КонтрольВыполнятьВФормеВыборочногоКонтроляКМ;
	Иначе
		ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ = Ложь;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Форма"                    , Форма);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении"    , Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДляПроверки"        , Новый Массив);
	
	ВозвращаемоеЗначение.Вставить("ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ", ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ);
	
	ВозвращаемоеЗначение.Вставить("Транспорт", Неопределено);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, ПараметрыПолученияТранспорта(Форма), Истина);
	
	ВозвращаемоеЗначение.Вставить("ИнтерактивныйРежим"       , Истина);
	ВозвращаемоеЗначение.Вставить("СообщатьОбОшибкахПроверки", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру элемента проверки КМ средствами АПИ МДЛП.
//
// Возвращаемое значение:
//  КодМаркировки         - Строка - SGTIN.
//  ПолныйКодМаркировки   - Строка - полный код маркировки в формате Base64.
//  ИдентификаторЭлемента - Строка - идентификатор по которому можно будет получить элемент проверки из общего результата проверки КМ.
//
Функция ЭлементДанныхДляПроверкиКМ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("КодМаркировки"          , "");
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки"    , "");
	ВозвращаемоеЗначение.Вставить("ИдентификаторЭлемента", СокрЛП(Новый УникальныйИдентификатор));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запускает выполнение проверки КМ средствами АПИ МДЛП на форме объекта.
// Результат будет возвращен в процедуру, указанную в параметре Параметры.ОповещениеОЗавершении.
// Процедура должна принимать следующие параметры:
//  * РезультатПроверкиКМ - Структура - результат проверки КМ средствами АПИ МДЛП (см. функцию РезультатПроверкиКМ):
//     ** ЕстьОшибки     - Булево - признак наличия критических ошибок выполнения проверки КМ.
//     ** ДанныеПроверки - Соответствие - коллекция результатов проверки кодов маркировки.
//         * Ключ - ИдентификаторЭлемента из коллекции ДанныеДляПроверки параметров проверки КМ
//            (см. функции ПараметрыПроверкиКМ и ЭлементДанныхДляПроверкиКМ).
//         * Значение - Структура - результат проверки конкретного кода маркировки (см. функцию РезультатПроверкиКМЭлемента).
//            ** КодМаркировки       - SGTIN.
//            ** ПолныйКодМаркировки - полный код маркировки в формате Base64.
//            ** КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//            ** РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами
//                                     (см. РегистрыСведений.РезультатыПроверкиКМСредствамиАПИМДЛП.СвойстваРезультатаПроверкиКМ).
//            ** КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//            ** ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//  * ДополнительныеПараметры - дополнительные параметры описания оповещения.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПроверкиКМ.
//
Процедура НачатьПроверкуКМ(Параметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиентПереопределяемый.НачатьПроверкуКМСредствамиАПИМДЛП(Параметры, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ДанныеДляПроверки) Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении);
			Возврат;
		КонецЕсли;
		
		Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
			
			Транспорт = Параметры.Транспорт;
			Если Транспорт = Неопределено Тогда
				ПараметрыПолученияТранспорта = ПараметрыПолученияТранспорта(Неопределено);
				ЗаполнитьЗначенияСвойств(ПараметрыПолученияТранспорта, Параметры);
				Транспорт = ПолучитьТранспорт(ПараметрыПолученияТранспорта);
				Если Транспорт = Неопределено Тогда
					ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Параметры.Транспорт = Транспорт;
			
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗакончитьПроверкуКМ", ЭтотОбъект, Параметры);
		
		НачатьВыполнениеПроверкиКМ(Параметры, ОповещениеОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеПроверкиКМ

Функция ПараметрыВыполненияПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	// Параметры итерации
	ВозвращаемоеЗначение.Вставить("Интервал"       , 0.1);
	
	// Целевые параметры
	ВозвращаемоеЗначение.Вставить("Форма"                  , Неопределено);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении"  , Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыПодключения"   , Неопределено);
	
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки" , Новый Массив);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки", НовыйРезультатВыполненияПроверкиКМ());
	
	ВозвращаемоеЗначение.Вставить("ИнтерактивныйРежим", Ложь);
	
	// Локальные параметры
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса"          , Неопределено);
	ВозвращаемоеЗначение.Вставить("ПровереныВсеКМ"                , Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыПроверкиКМОбработаны", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйРезультатВыполненияПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки" , Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки", Новый Соответствие);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйРезультатВыполненияПроверкиКМЭлемента()
	
	СвойстваРезультатаПроверкиКМ = КонтрольКодовМаркировкиМДЛПКлиентСерверПовтИсп.СвойстваРезультатаПроверкиКМСредствамиАПИМДЛП();
	РезультатПроверкиКМПоУмолчанию = КонтрольКодовМаркировкиМДЛПКлиентСерверПовтИсп.РезультатПроверкиКМСредствамиАПИМДЛППоУмолчанию();
	
	ВозвращаемоеЗначение = Новый Структура(СтрСоединить(СвойстваРезультатаПроверкиКМ, ","));
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, РезультатПроверкиКМПоУмолчанию);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Процедура НачатьВыполнениеПроверкиКМ(Параметры, ОповещениеОЗавершении)
	
	ПараметрыВыполненияПроверки = ПараметрыВыполненияПроверкиКМ();
	ПараметрыВыполненияПроверки.ОповещениеОЗавершении       = ОповещениеОЗавершении;
	ПараметрыВыполненияПроверки.Форма                       = Параметры.Форма;
	ПараметрыВыполненияПроверки.ИнтерактивныйРежим          = Параметры.ИнтерактивныйРежим;
	
	Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
		ПараметрыВыполненияПроверки.ПараметрыПодключения    = Параметры.Транспорт.ПараметрыПодключения;
	КонецЕсли;
	
	Для Каждого ЭлементПроверки Из Параметры.ДанныеДляПроверки Цикл
		
		РезультатЭлементаПроверки = НовыйРезультатВыполненияПроверкиКМЭлемента();
		
		Если ЗначениеЗаполнено(ЭлементПроверки.ПолныйКодМаркировки) Тогда
			РезультатЭлементаПроверки.ПолныйКодМаркировки = ЭлементПроверки.ПолныйКодМаркировки;
		Иначе
			РезультатЭлементаПроверки.ЕстьОшибки                   = Истина;
			РезультатЭлементаПроверки.ТекстОшибки                  = НСтр("ru = 'Отсутствует полный код маркировки'");
			РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки = Истина;
			РезультатЭлементаПроверки.ПредставлениеРезультата      = РезультатЭлементаПроверки.ТекстОшибки;
		КонецЕсли;
		
		ПараметрыВыполненияПроверки.ЭлементыПроверки.Добавить(ЭлементПроверки);
		ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, РезультатЭлементаПроверки);
		
	КонецЦикла;
	
	Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
		СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполненияПроверки.ОповещениеОЗавершении, ПараметрыВыполненияПроверки.РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки)
	
	ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиАПИМДЛП"] = ПараметрыВыполненияПроверки;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьШагПроверкиКМСредствамиАПИМДЛП", ПараметрыВыполненияПроверки.Интервал, Истина);
	
КонецПроцедуры

Процедура ВыполнитьШагПроверкиКМ() Экспорт
	
	ПараметрыВыполненияПроверки = ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиАПИМДЛП"];
	Если ПараметрыВыполненияПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ПараметрыВыполненияПроверки.РезультатыПроверкиКМОбработаны // Крайний случай рекурентного выполнения
		 Или ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки // Критическая ошибка
		Тогда
			
			ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиАПИМДЛП"] = Неопределено; // Очистка параметров приложения обязательна.
			
			ВыполнитьОбработкуОповещения(ПараметрыВыполненияПроверки.ОповещениеОЗавершении, ПараметрыВыполненияПроверки.РезультатПроверки);
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыВыполненияПроверки.ПровереныВсеКМ Тогда
			
			ПараметрыВыполненияПроверки.РезультатыПроверкиКМОбработаны = Истина;
			
			ОбработкаРезультатаПроверкиКМ(ПараметрыВыполненияПроверки);
			ПоказатьРезультатыПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки);
			Возврат;
			
		КонецЕсли;
		
		ВерификацияКМ(ПараметрыВыполненияПроверки);
		
	Исключение
		ПараметрыПриложения["ТекущееЗаданиеПроверкиКМСредствамиАПИМДЛП"] = Неопределено; // Очистка параметров приложения обязательна.
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


Процедура ВерификацияКМ(ПараметрыВыполненияПроверки)
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыВерификацииКодовМаркировки();
	Для Каждого ЭлементПроверки Из ПараметрыВыполненияПроверки.ЭлементыПроверки Цикл
		
		РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		
		Если Не ЗначениеЗаполнено(ЭлементПроверки.ПолныйКодМаркировки) Тогда
			РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки = Истина;
			Продолжить;
		КонецЕсли;
		
		ПараметрыМетода.КодыМаркировкиBase64.Добавить(ЭлементПроверки.ПолныйКодМаркировки);
		
	КонецЦикла;
	
	Если ПараметрыМетода.КодыМаркировкиBase64.Количество() = 0 Тогда
		ПараметрыВыполненияПроверки.ПровереныВсеКМ = Истина;
		СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
		Возврат;
	КонецЕсли;
	
	ВерификацияКМЗавершение = Новый ОписаниеОповещения("ВерификацияКМЗавершение", ЭтотОбъект, ПараметрыВыполненияПроверки);
	
	ТранспортМДЛПАПИКлиент.ВыполнитьАвторизованныйЗапрос(
		ПараметрыВыполненияПроверки.ПараметрыПодключения,
		ВерификацияКМЗавершение,
		"ВерифицироватьКодыМаркировки",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода));
	
КонецПроцедуры

Процедура ВерификацияКМЗавершение(ДанныеОтвета, ПараметрыВыполненияПроверки) Экспорт
	
	Если ДанныеОтвета.Статус <> "Ошибка" Тогда
		
		РезультатыПроверки = ДанныеОтвета.Данные;
		Для ТекущийИндекс = 0 По ПараметрыВыполненияПроверки.ЭлементыПроверки.ВГраница() Цикл
			
			ЭлементПроверки = ПараметрыВыполненияПроверки.ЭлементыПроверки[ТекущийИндекс];
			
			ДанныеПроверки = РезультатыПроверки[ЭлементПроверки.ПолныйКодМаркировки];
			Если ДанныеПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = СформироватьРезультатПроверкиКодаМаркировки(ДанныеПроверки);
			
			РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
			
			ЗаполнитьЗначенияСвойств(РезультатЭлементаПроверки, РезультатПроверки);
			РезультатЭлементаПроверки.ЕстьОшибки = Не РезультатПроверки.Успех;
			Если РезультатЭлементаПроверки.ЕстьОшибки Тогда
				РезультатЭлементаПроверки.ТекстОшибки = РезультатПроверки.ПредставлениеРезультата;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыВыполненияПроверки.ПровереныВсеКМ = Истина;
		
	Иначе
		
		// Критическая ошибка.
		ПараметрыВыполненияПроверки.РезультатПроверки.ЕстьОшибки  = Истина;
		ПараметрыВыполненияПроверки.РезультатПроверки.ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		
	КонецЕсли;
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры

Функция СформироватьРезультатПроверкиКодаМаркировки(ДанныеПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ПризнакВалидностиКМ"                                        , Ложь);
	Результат.Вставить("ПредставлениеПризнакаВалидностиКМ"                          , "");
	Результат.Вставить("ПризнакНаличияКМвРеестрахСЭ"                                , Ложь);
	Результат.Вставить("ПредставлениеПризнакаНаличияКМвРеестрахСЭ"                  , "");
	Результат.Вставить("ПризнакПрохожденияКМКриптографическойПроверки"              , Ложь);
	Результат.Вставить("ПредставлениеПризнакаПрохожденияКМКриптографическойПроверки", "");
	Результат.Вставить("Успех"                                                      , Ложь);
	Результат.Вставить("ПредставлениеРезультата"                                    , НСтр("ru = 'Не удалось получить результат проверки КМ'"));
	
	Результат.ПризнакВалидностиКМ                           = ДанныеПроверки["valid"] = Истина;
	Результат.ПризнакНаличияКМвРеестрахСЭ                   = ДанныеПроверки["found"] = Истина;
	Результат.ПризнакПрохожденияКМКриптографическойПроверки = ДанныеПроверки["verified"] = Истина;
	
	Результат.Успех = Результат.ПризнакВалидностиКМ И Результат.ПризнакНаличияКМвРеестрахСЭ И Результат.ПризнакПрохожденияКМКриптографическойПроверки;
	
	Если Не Результат.ПризнакВалидностиКМ Тогда
		Результат.ПредставлениеПризнакаВалидностиКМ = НСтр("ru = 'КМ не прошел проверку валидности'");
	КонецЕсли;
	
	Если Не Результат.ПризнакНаличияКМвРеестрахСЭ Тогда
		Результат.ПредставлениеПризнакаНаличияКМвРеестрахСЭ = НСтр("ru = 'КМ нет в реестре СЭ'");
	КонецЕсли;
	
	Если Не Результат.ПризнакПрохожденияКМКриптографическойПроверки Тогда
		Результат.ПредставлениеПризнакаПрохожденияКМКриптографическойПроверки = НСтр("ru = 'КМ не прошел криптографическую проверку'");
	КонецЕсли;
	
	Если Не Результат.ПризнакВалидностиКМ Тогда
		Результат.ПредставлениеРезультата = Результат.ПредставлениеПризнакаВалидностиКМ;
	ИначеЕсли Не Результат.ПризнакНаличияКМвРеестрахСЭ Тогда
		Результат.ПредставлениеРезультата = Результат.ПредставлениеПризнакаНаличияКМвРеестрахСЭ;
	ИначеЕсли Не Результат.ПризнакПрохожденияКМКриптографическойПроверки Тогда
		Результат.ПредставлениеРезультата = Результат.ПредставлениеПризнакаПрохожденияКМКриптографическойПроверки;
	ИначеЕсли Результат.Успех Тогда
		Результат.ПредставлениеРезультата = НСтр("ru = 'КМ успешно прошел верификацию'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура ОбработкаРезультатаПроверкиКМ(ПараметрыВыполненияПроверки)
	
	Для Каждого КлючИЗначение Из ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки Цикл
		
		РезультатЭлементаПроверки = КлючИЗначение.Значение;
		
		Если РезультатЭлементаПроверки.ТребуетсяПолныйКодМаркировки Тогда
			
			РезультатЭлементаПроверки.ЕстьОшибки  = Истина;
			РезультатЭлементаПроверки.ТекстОшибки = НСтр("ru = 'Отсутствует полный код маркировки'");
			
		КонецЕсли;
		
		Если РезультатЭлементаПроверки.ЕстьОшибки Тогда
			РезультатЭлементаПроверки.ПредставлениеРезультата = РезультатЭлементаПроверки.ТекстОшибки;
		КонецЕсли;
		
		РезультатЭлементаПроверки.КонтрольПройден = Не РезультатЭлементаПроверки.ЕстьОшибки;
		
		РезультатЭлементаПроверки.ПолныйКодМаркировки = "";
		РезультатЭлементаПроверки.КонтрольВыполнен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПоказатьРезультатыПроверкиКМПриНеобходимости(ПараметрыВыполненияПроверки)
	
	ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение = Новый ОписаниеОповещения(
		"ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение",
		ЭтотОбъект,
		ПараметрыВыполненияПроверки);
	
	Если ПараметрыВыполненияПроверки.ИнтерактивныйРежим Тогда
		
		ОткрытьФормуРезультатов = Ложь;
		
		РезультатыПроверки = Новый Соответствие;
		Для Каждого ЭлементПроверки Из ПараметрыВыполненияПроверки.ЭлементыПроверки Цикл
			
			РезультатЭлементаПроверки = ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
			
			Элемент = НовыйРезультатВыполненияПроверкиКМЭлемента();
			ЗаполнитьЗначенияСвойств(Элемент, РезультатЭлементаПроверки);
			Элемент.Вставить("НомерУпаковки", ЭлементПроверки.КодМаркировки);
			
			РезультатыПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, Элемент);
			
			Если РезультатЭлементаПроверки.ЕстьОшибки Тогда
				// Есть хотя бы одна ошибка.
				ОткрытьФормуРезультатов = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОткрытьФормуРезультатов = Ложь;
	КонецЕсли;
	
	Если ОткрытьФормуРезультатов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РезультатыПроверки", Новый ФиксированноеСоответствие(РезультатыПроверки));
		
		ОткрытьФорму("РегистрСведений.РезультатыПроверкиКММДЛП.Форма.РезультатыПроверкиКМ",
			ПараметрыФормы,
			ПараметрыВыполненияПроверки.Форма,,,,
			ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРезультатыПроверкиКМПриНеобходимостиЗавершение(РезультатИнтерактивногоРежима, ПараметрыВыполненияПроверки) Экспорт
	
	Если ЗначениеЗаполнено(РезультатИнтерактивногоРежима) И ТипЗнч(РезультатИнтерактивногоРежима) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыВыполненияПроверки.РезультатПроверки.ДанныеПроверки Цикл
			
			ИдентификаторЭлемента     = КлючИЗначение.Ключ;
			РезультатЭлементаПроверки = КлючИЗначение.Значение;
			
			РезультатЭлементаИнтерактивногоРежима = РезультатИнтерактивногоРежима[ИдентификаторЭлемента];
			Если РезультатЭлементаИнтерактивногоРежима <> Неопределено Тогда
				РезультатЭлементаПроверки.КонтрольПройден = РезультатЭлементаИнтерактивногоРежима.КонтрольПройден;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СледующийШагПроверкиКМ(ПараметрыВыполненияПроверки);
	
КонецПроцедуры


Функция ПараметрыПолученияТранспорта(Форма)
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Форма"            , Форма);
	ВозвращаемоеЗначение.Вставить("Организация"      , ПредопределенноеЗначение("Справочник.ОрганизацииМДЛП.ПустаяСсылка"));
	ВозвращаемоеЗначение.Вставить("МестоДеятельности", ПредопределенноеЗначение("Справочник.МестаДеятельностиМДЛП.ПустаяСсылка"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТранспорт(Параметры)
	
	Транспорт = Неопределено;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) И Не ЗначениеЗаполнено(Параметры.МестоДеятельности) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='Не заполнены параметры транспорта для выполнения проверки кодов маркировки.'"));
		Возврат Транспорт;
	КонецЕсли;
	
	ЕстьРеквизитКешТранспорта = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.Форма, "КешТранспорта");
	
	Если ЕстьРеквизитКешТранспорта Тогда
		Если Параметры.Форма.КешТранспорта = Неопределено Тогда
			КешТранспорта = Новый Соответствие;
		Иначе
			КешТранспорта = Новый Соответствие(Параметры.Форма.КешТранспорта);
			Если ЗначениеЗаполнено(Параметры.МестоДеятельности) Тогда
				Транспорт = КешТранспорта[Параметры.МестоДеятельности];
			КонецЕсли;
			Если Транспорт <> Неопределено И Не ЗначениеЗаполнено(Транспорт) Тогда
				// Случай, когда данные по текущему месту деятельности уже получались, но результат пустой.
				// В этом случае нужно брать из кеша Транспорт по организации.
				// Если в кеше по организации будет так же пустая структура, тогда данные повторно получаться не будут.
				Если ЗначениеЗаполнено(Параметры.Организация) Тогда
					Транспорт = КешТранспорта[Параметры.Организация];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Транспорт = Неопределено
	   И ЗначениеЗаполнено(Параметры.Организация)
	   И ЗначениеЗаполнено(Параметры.МестоДеятельности) Тогда
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Параметры.Организация));
		Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Параметры.МестоДеятельности));
		
		ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
		Если ДоступныйТранспорт.Количество() > 0 Тогда
			
			Транспорт = ДоступныйТранспорт[0];
			
			Если ЕстьРеквизитКешТранспорта Тогда
				КешТранспорта.Вставить(Параметры.МестоДеятельности, Транспорт);
			КонецЕсли;
			
		Иначе
			Если ЕстьРеквизитКешТранспорта Тогда
				// Пустая структура, для того, чтобы при следующем вызове понимать, что данные уже получались
				// и не выполнять повторно запрос доступных транспортных модулей по текущим параметрам.
				КешТранспорта.Вставить(Параметры.МестоДеятельности, Новый Структура);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Транспорт = Неопределено
	   И ЗначениеЗаполнено(Параметры.Организация) Тогда
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Параметры.Организация));
		
		ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
		Если ДоступныйТранспорт.Количество() > 0 Тогда
			
			Транспорт = ДоступныйТранспорт[0];
			
			Если ЕстьРеквизитКешТранспорта Тогда
				КешТранспорта.Вставить(Параметры.Организация, Транспорт);
			КонецЕсли;
			
		Иначе
			Если ЕстьРеквизитКешТранспорта Тогда
				// Пустая структура, для того, чтобы при следующем вызове понимать, что данные уже получались
				// и не выполнять повторно запрос доступных транспортных модулей по текущим параметрам.
				КешТранспорта.Вставить(Параметры.Организация, Новый Структура);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Транспорт) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='На текущем рабочем месте нет доступного транспорта для выполнения проверки кодов маркировки.'"));
	КонецЕсли;
	
	Если ЕстьРеквизитКешТранспорта Тогда
		Параметры.Форма.КешТранспорта = Новый ФиксированноеСоответствие(КешТранспорта);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Транспорт), Транспорт, Неопределено);
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиКМ

// Описание результата проверки КМ средствами АПИ МДЛП.
//
// Возвращаемое значение:
//  ЕстьОшибки     - Булево - признак наличия критических ошибок выполнения проверки КМ.
//  ДанныеПроверки - Соответствие - коллекция результатов проверки кодов маркировки.
//   * Ключ - ИдентификаторЭлемента из коллекции ДанныеДляПроверки параметров проверки КМ
//            (см. функции ПараметрыПроверкиКМ и ЭлементДанныхДляПроверкиКМ).
//   * Значение - Структура - результат проверки конкретного кода маркировки (см. функцию РезультатПроверкиКМЭлемента).
//      ** КодМаркировки       - SGTIN.
//      ** ПолныйКодМаркировки - полный код маркировки в формате Base64.
//      ** КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//      ** РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами АПИ МДЛП
//                               (см. РегистрыСведений.РезультатыПроверкиКМСредствамиАПИМДЛП.СвойстваРезультатаПроверкиКМ).
//      ** КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//      ** ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//
Функция РезультатПроверкиКМ()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки"    , Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки", Новый Соответствие);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Описание результата проверки конкретного кода маркировки.
//
// Возвращаемое значение:
//  * КодМаркировки       - SGTIN.
//  * ПолныйКодМаркировки - полный код маркировки в формате Base64.
//  * КонтрольПройден     - Булево - признак того, что КМ корректный или пользователь считает его корректным (в случае использования интерактивного режима).
//  * РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки конкретного кода маркировки средствами АПИ МДЛП
//                          (см. РегистрыСведений.РезультатыПроверкиКМСредствамиАПИМДЛП.СвойстваРезультатаПроверкиКМ).
//  * КодСтатусаПроверкиКМ       - Число - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//  * ПояснениеСтатусаПроверкиКМ - Строка - результат обработки значения РезультатПроверкиКМ, для отображения пользователю на форме.
//
Функция РезультатПроверкиКМЭлемента()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("КодМаркировки"             , "");
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки"       , "");
	
	ВозвращаемоеЗначение.Вставить("КонтрольВыполнен"          , Ложь);
	ВозвращаемоеЗначение.Вставить("КонтрольПройден"           , Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверкиКМ"       , Неопределено);
	ВозвращаемоеЗначение.Вставить("КодСтатусаПроверкиКМ"      , Неопределено);
	ВозвращаемоеЗначение.Вставить("ПояснениеСтатусаПроверкиКМ", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗакончитьПроверкуКМ(ИсходныйРезультатПроверки, Параметры) Экспорт
	
	РезультатПроверки = РезультатПроверкиКМ();
	
	Если ЗначениеЗаполнено(ИсходныйРезультатПроверки) Тогда
		
		РезультатПроверки.ЕстьОшибки = ИсходныйРезультатПроверки.ЕстьОшибки;
		Если ИсходныйРезультатПроверки.ЕстьОшибки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ИсходныйРезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
		Для Каждого ЭлементДанных Из Параметры.ДанныеДляПроверки Цикл
			
			РезультатЭлементаПроверки = РезультатПроверкиКМЭлемента();
			ЗаполнитьЗначенияСвойств(РезультатЭлементаПроверки, ЭлементДанных);
			
			ИсходныйРезультатЭлементаПроверки = ИсходныйРезультатПроверки.ДанныеПроверки[ЭлементДанных.ИдентификаторЭлемента];
			Если Не ЗначениеЗаполнено(ИсходныйРезультатЭлементаПроверки) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатЭлементаПроверки.КонтрольВыполнен = ИсходныйРезультатЭлементаПроверки.КонтрольВыполнен;
			РезультатЭлементаПроверки.КонтрольПройден = ИсходныйРезультатЭлементаПроверки.КонтрольПройден;
			РезультатЭлементаПроверки.РезультатПроверкиКМ = Новый ФиксированнаяСтруктура(ИсходныйРезультатЭлементаПроверки);
			
			Если Не Параметры.ТолькоПодготовитьДанныеДляВыборочногоКонтроляКМ Тогда
				Представление = КонтрольКодовМаркировкиМДЛПКлиентСервер.ПредставлениеРезультатаПроверкиКМСредствамиАПИМДЛП(РезультатЭлементаПроверки.РезультатПроверкиКМ);
				Если ЗначениеЗаполнено(Представление) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РезультатЭлементаПроверки, Представление, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.СообщатьОбОшибкахПроверки И ИсходныйРезультатЭлементаПроверки.ЕстьОшибки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Упаковка ""%1"" не прошла проверку по причине:
					|%2.'"),
					РезультатЭлементаПроверки.КодМаркировки,
					ИсходныйРезультатЭлементаПроверки.ТекстОшибки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			
			РезультатПроверки.ДанныеПроверки.Вставить(ЭлементДанных.ИдентификаторЭлемента, РезультатЭлементаПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
