
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обработчик ПриСозданииНаСервере формы отчета.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	Если Параметры.Свойство("ИДРасшифровки") Тогда
		
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
		ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
		   И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
			Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
			Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета и формы
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				// Табличные части отчета могут быть переданы в виде массива структур
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда 
					Для Каждого СтрокаСведений Из ЭлементСтруктуры.Значение Цикл
						НоваяСтрока = Отчет[ЭлементСтруктуры.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
					КонецЦикла;
				Иначе
					Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ЭлементСтруктуры.Ключ) Тогда
				Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отчет, "РежимРасшифровки", Ложь) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "МакетыОтчета") Тогда
		МакетыОтчета = Форма.МакетыОтчета;
		МетаданныеОтчета = ОтчетОбъект.Метаданные();
		Для Каждого МетаданныеМакета Из МетаданныеОтчета.Макеты Цикл
			ТипМакета = ОтчетыБольничнаяАптекаКлиентСервер.ПолучитьТипМакетаОтчета(МетаданныеМакета.Имя);
			Если ТипМакета <> Неопределено Тогда
				ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета);
				МакетыОтчета.Добавить(ПутьКМакету, МетаданныеМакета.Представление());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значения основных настроек отчета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета, для которого нужно получить настройки.
//
// Возвращаемое значение:
//  ПараметрыОтчета - Структура - основные настройки отчета.
//
Функция ПолучитьОсновныеПараметрыОтчета(Форма) Экспорт
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	
	ПараметрыОтчета = Новый Структура;
	
	МетаданныеОтчета = ОтчетОбъект.Метаданные();
	Для Каждого Реквизит Из МетаданныеОтчета.Реквизиты Цикл
		ПараметрыОтчета.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ОтчетОбъект);
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОтчета.ТабличныеЧасти Цикл
		ПараметрыОтчета.Вставить(ТабличнаяЧасть.Имя, ОтчетОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	МакетыОтчета = Новый Структура;
	Для Каждого МетаданныеМакета Из МетаданныеОтчета.Макеты Цикл
		ИмяМакета = МетаданныеМакета.Имя;
		ТипМакетаОтчета = ОтчетыБольничнаяАптекаКлиентСервер.ПолучитьТипМакетаОтчета(ИмяМакета);
		Если ТипМакетаОтчета <> Неопределено Тогда
			ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета);
			МакетыОтчета.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету));
		ИначеЕсли МетаданныеМакета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТабличныйДокумент Тогда
			МакетыОтчета.Вставить(ИмяМакета, ОтчетОбъект.ПолучитьМакет(МетаданныеМакета));
		КонецЕсли;
	КонецЦикла;
	ПараметрыОтчета.Вставить("МакетыОтчета", МакетыОтчета);
	
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"      , МетаданныеОтчета.Имя);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"    , ОтчетОбъект.СхемаКомпоновкиДанных);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"        , Форма.ДанныеРасшифровки);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Выполняет программное формирование отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - основные параметры отчета.
//  АдресХранилища  - УникальныйИдентификатор, Строка - адрес во временном хранилище,
//                    по которому надо поместить результат выполнения отчета.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Ложь;
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	ПараметрыИсполненияОтчета = ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(
		МенеджерОтчета, "ПолучитьПараметрыИсполненияОтчета",, Истина);
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	
	УстановитьОрганизациюЕслиОнаЕдинственная(ПараметрыОтчета);
	
	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьМакетОформленияВРежимеТакси(Неопределено, КомпоновщикНастроек.Настройки);
	
	Если ИспользоватьПередКомпоновкойМакета Тогда
		МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КомпоновщикНастроек.Восстановить();
	КонецЕсли;
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		Если ИспользоватьДанныеРасшифровки Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
		КонецЕсли;
		
		// Вызываем событие отчета.
		Если ИспользоватьПослеКомпоновкиМакета Тогда
			МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
		КонецЕсли;
		
		Если ИспользоватьВнешниеНаборыДанных Тогда
			ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
		КонецЕсли;
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
		КонецЕсли;
		
		// Создадим и инициализируем процессор вывода результата.
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		// Перед началом вывода установим привилегированный режим.
		Если ИспользоватьПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		// Обозначим начало вывода.
		ПроцессорВывода.НачатьВывод();
		
		Если ИспользоватьПередВыводомЭлементаРезультата Тогда
			// Основной цикл вывода отчета.
			Пока Истина Цикл
				
				// Получим следующий элемент результата компоновки.
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				
				Если ЭлементРезультата = Неопределено Тогда
					// Следующий элемент не получен - заканчиваем цикл вывода.
					Прервать;
				КонецЕсли;
				
				СтандартнаяОбработка = Истина;
				МенеджерОтчета.ПередВыводомЭлементаРезультата(ПроцессорВывода, ПроцессорКомпоновки, ПараметрыОтчета, МакетКомпоновки, ЭлементРезультата, ДанныеРасшифровкиОбъект, СтандартнаяОбработка, Результат);
				
				Если СтандартнаяОбработка Тогда
					// Элемент получен - выведем его при помощи процессора вывода.
					ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				КонецЕсли;
				
			КонецЦикла;
			
			// Завершение вывода отчета.
			ПроцессорВывода.ЗакончитьВывод();
		Иначе
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		КонецЕсли;
		
		// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище
		ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект);
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
		
		// Отключаем привилегированный режим если он использовался
		Если ИспользоватьПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	Исключение
		// Запись в журнал регистрации не требуется
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		ТекстСообщения = НСтр("ru = 'Отчет не сформирован.'") + Символы.ПС + ИнформацияОбОшибке.Описание;
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	РезультатФормированияОтчета = Новый Структура;
	РезультатФормированияОтчета.Вставить("Результат"        , Результат);
	РезультатФормированияОтчета.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	Если ПараметрыОтчета.Свойство("ДополнительныеПараметры") Тогда
		РезультатФормированияОтчета.Вставить("ДополнительныеПараметры", ПараметрыОтчета.ДополнительныеПараметры);
	КонецЕсли;
	Если Отказ Тогда
		РезультатФормированияОтчета.Вставить("ОписаниеОшибки", ТекстСообщения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияОтчета, АдресХранилища);
	
КонецПроцедуры

// Выводит заголовок отчета в табличный документ - результат отчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - основные параметры отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//  ТабличныйДокумент   - ТабличныйДокумент - результат выполнения отчета.
//
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, ТабличныйДокумент) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Организация = ПараметрыОтчета.Организация;
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ПараметрыОтчета.Свойство("Период") И ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
			Период = ПараметрыОтчета.Период;
		ИначеЕсли ПараметрыОтчета.Свойство("КонецПериода") И ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
			Период = КонецДня(ПараметрыОтчета.КонецПериода);
		Иначе
			Период = ТекущаяДатаСеанса();
		КонецЕсли;
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, Период);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ЗаголовокОтчета = ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(
		Отчеты[ПараметрыОтчета.ИдентификаторОтчета], "ПолучитьТекстЗаголовка", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета), Истина);
	Если ЗаголовокОтчета = Неопределено Тогда
		ЗаголовокОтчета = Метаданные.Отчеты.Найти(ПараметрыОтчета.ИдентификаторОтчета).Представление();
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;
	ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьЗаголовок);
	
	// Отбор
	СоединениеОтборов = " " + НСтр("ru = 'И'") + " ";
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	НачальныйТекстОтбора = "";
	
	ТекстПодразделение = "";
	Если ПараметрыОтчета.Свойство("ПодразделениеОрганизации") И ЗначениеЗаполнено(ПараметрыОтчета.ПодразделениеОрганизации) Тогда
		ТекстПодразделение = НСтр("ru = 'Подразделение Равно'") + " """ + ПараметрыОтчета.ПодразделениеОрганизации + """";
		Если СтрНайти(ТекстОтбор, ТекстПодразделение) = 0 Тогда
			НачальныйТекстОтбора = ТекстПодразделение + СоединениеОтборов + НачальныйТекстОтбора;
		КонецЕсли;
	КонецЕсли;
	
	ТекстИсточникФинансирования = "";
	Если ПараметрыОтчета.Свойство("ИсточникФинансирования") И ЗначениеЗаполнено(ПараметрыОтчета.ИсточникФинансирования) Тогда
		ТекстИсточникФинансирования = НСтр("ru = 'Источник финансирования Равно'") + " """ + ПараметрыОтчета.ИсточникФинансирования + """";
		Если СтрНайти(ТекстОтбор, ТекстИсточникФинансирования) = 0 Тогда
			НачальныйТекстОтбора = ТекстИсточникФинансирования + СоединениеОтборов + НачальныйТекстОтбора;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(НачальныйТекстОтбора, СоединениеОтборов) Тогда
		НачальныйТекстОтбора = Сред(ТекстОтбор, 1, СтрДлина(НачальныйТекстОтбора) - СтрДлина(СоединениеОтборов));
	КонецЕсли;
	
	ВывестиОтборВТабличныйДокумент(ТабличныйДокумент, КомпоновщикНастроек, НачальныйТекстОтбора);
	
	// Группировка
	Если ПараметрыОтчета.Свойство("Группировка") Тогда
		ВывестиГруппировкуВТабличныйДокумент(ТабличныйДокумент, ПараметрыОтчета.Группировка);
	КонецЕсли;
	
	ТабличныйДокумент.Область("R1:R" + ТабличныйДокумент.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// Выводит подвал отчета в табличный документ - результат отчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - основные параметры отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//  ТабличныйДокумент   - ТабличныйДокумент - результат выполнения отчета.
//
Процедура ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, ТабличныйДокумент) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо") И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));
	КонецЕсли;
	
	ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьПодписи);
	
КонецПроцедуры

// Возвращает данные ответственного лица.
//
// Параметры:
//  Параметры - Структура - основные параметры отчета.
//
// Возвращаемое значение:
//  ДанныеОтветственногоЛица - Структура
//   * Должность          - Строка - должность ответственного лица.
//   * РасшифровкаПодписи - Строка - фамилия и инициалы ответственного лица.
//
Функция ПолучитьДанныеОтветственногоЛица(Параметры) Экспорт
	
	ДанныеОтветственногоЛица = Новый Структура("Должность, РасшифровкаПодписи");
	
	Если Не Параметры.Свойство("Организация")
	 Или Не Параметры.Свойство("ОтветственноеЛицо") Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация)
	 Или Не ЗначениеЗаполнено(Параметры.ОтветственноеЛицо) Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Период = Параметры.Период;
	ИначеЕсли Параметры.Свойство("КонецПериода") И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Период = КонецДня(Параметры.КонецПериода);
	Иначе
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РеквизитыОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Параметры.Организация, Период, Параметры.ОтветственноеЛицо);
	
	ДанныеОтветственногоЛица.Должность          = РеквизитыОтветственныхЛиц.Должность;
	ДанныеОтветственногоЛица.РасшифровкаПодписи = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(РеквизитыОтветственныхЛиц.ФизическоеЛицо));
	
	Возврат ДанныеОтветственногоЛица;
	
КонецФункции

// Выводит область с описанием отбора отчета.
//
// Параметры
//   ТабличныйДокумент - ТабличныйДокумент - куда вывести отбор.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - где установлены отборы.
//   НачальныйТекстОтбора - Строка - текст дополнительных отборов.
//
Процедура ВывестиОтборВТабличныйДокумент(ТабличныйДокумент, КомпоновщикНастроек, НачальныйТекстОтбора = "") Экспорт
	
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(НачальныйТекстОтбора) Тогда
		ТекстОтбор = НачальныйТекстОтбора + " " + НСтр("ru = 'И'") + " " + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(НачальныйТекстОтбора) Тогда
		ТекстОтбор = НачальныйТекстОтбора;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОписаниеНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Выводит область с описанием группировки отчета
//
// Параметры
//   ТабличныйДокумент - ТабличныйДокумент - куда вывести отбор
//   Группировки - ТаблицаЗначений - описание группировок отчета
//
Процедура ВывестиГруппировкуВТабличныйДокумент(ТабличныйДокумент, Группировки) Экспорт
	
	ТекстГруппировки = "";
	Для Каждого Группировка Из Группировки Цикл
		Если Группировка.Использование Тогда
			ТекстГруппировки = ТекстГруппировки + ", " + Группировка.Представление;
			Если Группировка.ТипГруппировки <> Перечисления.ТипыГруппировокОтчетов.БезГрупп Тогда
				ТекстГруппировки = ТекстГруппировки + " " + Группировка.ТипГруппировки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстГруппировки = Сред(ТекстГруппировки, 3);
	Если Не ПустаяСтрока(ТекстГруппировки) Тогда
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Группировка:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстГруппировки;
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОписаниеНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значения свойств результата выполнения отчета.
//
// Параметры:
//  ИдентификаторОтчета - Строка - строка идентифицирующая отчет.
//  Результат           - ТабличныйДокумент - результат выполнения отчета.
//
Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
	
КонецПроцедуры

// Выводит область в табличный документ с установкой нового формата строк для выведенной области
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, в который нужно вывести область
//  Область - ТабличныйДокумент - выводимая область
//
Процедура ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Область) Экспорт
	
	ОбластьДляВывода = Новый ТабличныйДокумент;
	ОбластьДляВывода.Вывести(Область);
	
	НачалоНовогоФорматаСтрок = ТабличныйДокумент.ВысотаТаблицы + 1;
	ОбластьПрямоугольная = ОбластьДляВывода.Область(1,, ОбластьДляВывода.ВысотаТаблицы,);
	ТабличныйДокумент.ВставитьОбласть(ОбластьПрямоугольная, ТабличныйДокумент.Область(НачалоНовогоФорматаСтрок, 1));
	ТабличныйДокумент.Область(НачалоНовогоФорматаСтрок,, ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
	// назначим ширину колонок у новой области формата строк
	Для Колонка = 1 По ОбластьДляВывода.ШиринаТаблицы Цикл
		ТабличныйДокумент.Область(НачалоНовогоФорматаСтрок, Колонка, НачалоНовогоФорматаСтрок, Колонка).ШиринаКолонки = ОбластьДляВывода.Область(1, Колонка, 1, Колонка).ШиринаКолонки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствия имен параметров области компоновки данных указанным в ключе поиска параметрам.
//
// Параметры:
//  Параметры                 - ПараметрыОбластиКомпоновкиДанных - коллекция параметров области макета областей макета компоновки данных.
//  ИскомыеПараметры          - Структура - ключ которой будет использоваться как ключ нового соответствия,
//                              а значение как выражение для поиска имени параметра - элемента параметров области компоновки данных.
//  ИскатьПараметрРасшифровки - Булево - признак поиска параметров расшифровки.
//
// Возвращаемое значение:
//  СоответствиеПараметрам - Структура - соответствия имен параметров области компоновки данных указанным в ключе поиска параметрам.
//
Функция УстановитьСоответствиеПараметрамМакетаКомпоновки(Параметры, ИскомыеПараметры, ИскатьПараметрРасшифровки = Ложь) Экспорт
	
	СоответствиеПараметрам = Новый Структура;
	Для Каждого Параметр Из ИскомыеПараметры Цикл
		
		Если ИскатьПараметрРасшифровки Тогда
			Имя = ИмяПараметраОбластиРасшифровкаКомпоновкиПоВыражению(Параметры, Параметр.Значение);
		Иначе
			Имя = ИмяПараметраОбластиВыражениеКомпоновкиПоВыражению(Параметры, Параметр.Значение);
		КонецЕсли;
		Если Имя <> Неопределено Тогда
			СоответствиеПараметрам.Вставить(Параметр.Ключ + ?(ИскатьПараметрРасшифровки, "Расшифровка", ""), Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеПараметрам;
	
КонецФункции

// Возвращает значения параметров макета компоновки по соответствию имен параметрам.
//
// Параметры:
//  ЗначенияПараметровМакетаКомпоновки - ЗначенияПараметровМакетаКомпоновкиДанных - значения параметров компоновки.
//  СоответствиеИменПараметрам         - Структура - описание получения значений параметров макета компоновки.
//
// Возвращаемое значение:
//  ЗначенияПараметров - полученные соответствия имен значениям параметра.
//
Функция ПолучитьЗначенияПараметров(ЗначенияПараметровМакетаКомпоновки, СоответствиеИменПараметрам) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	Для Каждого Соответствие Из СоответствиеИменПараметрам Цикл
		
		ЗначенияПараметров.Вставить(Соответствие.Ключ, ЗначенияПараметровМакетаКомпоновки.Найти(Соответствие.Значение).Значение);
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Возвращает значения параметров макета компоновки по соответствию имен параметрам.
//
// Параметры:
//  ДанныеРасшифровки                  - ДанныеРасшифровкиКомпоновкиДанных - данные расшифровки с необходимыми параметрами.
//  ЗначенияПараметровМакетаКомпоновки - ЗначенияПараметровМакетаКомпоновкиДанных - значения параметров компоновки.
//  СоответствиеИменПараметрам         - Структура - описание получения значений расшифровки.
//
// Возвращаемое значение:
//  ЗначенияПараметров - полученные соответствия имен значениям расшифровки.
//
Функция ПолучитьЗначенияРасшифровки(ДанныеРасшифровки, ЗначенияПараметровМакетаКомпоновки, СоответствиеИменПараметрам) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	Для Каждого Соответствие Из СоответствиеИменПараметрам Цикл
		
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Получить(ЗначенияПараметровМакетаКомпоновки.Найти(Соответствие.Значение.ИмяПараметра).Значение);
		ПолеРасшифровки = ЭлементРасшифровки.ПолучитьПоля().Найти(Соответствие.Значение.ИмяПоля);
		ЗначенияПараметров.Вставить(Соответствие.Ключ, ПолеРасшифровки.Значение);
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Возвращает описание макета области макета компоновки данных.
//
// Параметры:
//  МакетКомпоновки - МакетКомпоновкиДанных - макет компоновки, от куда будет получено описание макета области
//                                            по идентификатору и строковому описанию типа макета.
//  Тело            - ТелоМакетаКомпоновкиДанных - тело макета, из которого будет получен идентификатор макета области.
//  ТипМакета       - Строка - строковое описание получаемого типа макета области.
//
// Возвращаемое значение:
//  ОписаниеМакетаОбластиМакетаКомпоновкиДанных
//
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетШапки];
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает описание макета подвала области макета компоновки данных.
//
// Параметры:
//  МакетКомпоновки - МакетКомпоновкиДанных - макет компоновки, от куда будет получено описание макета области
//                                            по идентификатору и строковому описанию типа макета.
//  Тело            - ТелоМакетаКомпоновкиДанных - тело макета, из которого будет получен идентификатор макета области.
//
// Возвращаемое значение:
//  ОписаниеМакетаОбластиМакетаКомпоновкиДанных
//
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает описания макетов группировки по идентификатору группировки и типу макета.
//
// Параметры:
//  МакетКомпоновки         - МакетКомпоновкиДанных - макет компоновки, от куда будут получены описания макетов группировки.
//  ПолеГруппировки         - Строка - строковое представление искомого описания макета группировки.
//  ИскатьВДетальныхЗаписях - Булево - признак необходимости поиска в детальных записях.
//  ТипМакета               - Строка - строковое описание получаемого типа макета группировки.
//
// Возвращаемое значение:
//  Макеты - Массив
//   * ОписаниеМакетаОбластиМакетаКомпоновкиДанных - описание макета группировки.
//
Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	Группировки = ПолучитьГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
	
	Макеты = Новый Массив;
	Для Каждого Группировка Из Группировки Цикл
		
		ТипГруппировки = ТипЗнч(Группировка);
		Если ТипГруппировки = Тип("ГруппировкаМакетаКомпоновкиДанных")
		 Или ТипГруппировки = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Группировка.Тело, ТипМакета);
			Если МакетТело <> Неопределено Тогда
				Макеты.Добавить(МакетТело);
			КонецЕсли;
			МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Группировка.ТелоИерархии, ТипМакета);
			Если МакетТелоИерархии <> Неопределено Тогда
				Макеты.Добавить(МакетТелоИерархии);
			КонецЕсли;
		ИначеЕсли ТипГруппировки = Тип("ЗаписиМакетаКомпоновкиДанных")
		      Или ТипГруппировки = Тип("ЗаписиТаблицыМакетаКомпоновкиДанных") Тогда
			Макеты.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Группировка.Тело, ТипМакета));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Возвращает группировки макета по идентификатору группировки.
//
// Параметры:
//  МакетКомпоновки         - МакетКомпоновкиДанных - макет компоновки, от куда будут получены группировки.
//  ПолеГруппировки         - Строка - строковое представление искомого описания макета группировки.
//  ИскатьВДетальныхЗаписях - Булево - признак необходимости поиска в детальных записях.
//
// Возвращаемое значение:
//  Группировки - Массив
//   * ГруппировкаМакетаКомпоновкиДанных - элемент группировки макета компоновки данных.
//
Функция ПолучитьГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь) Экспорт
	
	Группировки = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
	
	Возврат Группировки;
	
КонецФункции

// Сохраняет пользовательские настройки.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма отчета.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - сохраняемые настройки.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	// Очистка пользовательских настроек
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	// Установка пользовательских настроек
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	
	МетаданныеОтчета = ОтчетОбъект.Метаданные();
	
	ДополнительныеСвойства = Новый Структура;
	
	Для Каждого Реквизит Из МетаданныеОтчета.Реквизиты Цикл
		Если Реквизит.Имя = "РежимРасшифровки" Тогда
			Продолжить;
		КонецЕсли;
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОтчета.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(ТабличнаяЧасть.Имя, ОтчетОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьЗаголовок") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Форма.ВыводитьЗаголовок);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьПодвал") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодвал", Форма.ВыводитьПодвал);
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

// Восстанавливает пользовательские настройки.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма отчета.
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных - сохраняемые настройки.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	
	РежимРасшифровки = Ложь;
	Отчет = Форма.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И Отчет.РежимРасшифровки Тогда
		РежимРасшифровки = Истина;
	КонецЕсли;
	
	Если Настройки = Неопределено Или РежимРасшифровки Тогда
		УстановитьНастройкиПоУмолчанию(Форма);
	Иначе
		
		Отчет = Форма.Отчет;
		
		ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементНастройки Из ДополнительныеСвойства Цикл
				
				Если Отчет.Свойство(ЭлементНастройки.Ключ) Тогда
					Если ТипЗнч(ЭлементНастройки.Значение) = Тип("ТаблицаЗначений") Тогда
						Отчет[ЭлементНастройки.Ключ].Загрузить(ЭлементНастройки.Значение);
					Иначе
						Отчет[ЭлементНастройки.Ключ] = ЭлементНастройки.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлементНастройки.Ключ = "ВыводитьЗаголовок" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьЗаголовок") Тогда
					Форма.ВыводитьЗаголовок = ЭлементНастройки.Значение;
				ИначеЕсли ЭлементНастройки.Ключ = "ВыводитьПодвал" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьПодвал") Тогда
					Форма.ВыводитьПодвал = ЭлементНастройки.Значение;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для отчета устанавливает настройки по умолчанию.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура УстановитьНастройкиПоУмолчанию(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	
	Если Отчет.Свойство("НачалоПериода") И Не ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если Отчет.Свойство("КонецПериода") И Не ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Отчет.Свойство("Организация") Тогда
		Отчет.Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Отчет.Организация);
	КонецЕсли;
	Если Отчет.Свойство("ПодразделениеОрганизации") Тогда
		Отчет.ПодразделениеОрганизации = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(Отчет.ПодразделениеОрганизации, Отчет.Организация);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьЗаголовок") Тогда
		Форма.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыводитьПодвал") Тогда
		Форма.ВыводитьПодвал = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает оформление в приемнике из источника.
//
// Параметры:
//  ОформлениеПриемник - ОформлениеОбластиКомпоновкиДанных - куда установить значение настроек оформления.
//  ОформлениеИсточник - ОформлениеОбластиКомпоновкиДанных - откуда брать значения настроек оформления.
//
Процедура СкопироватьОформлениеОбластиКомпоновкиДанных(ОформлениеПриемник, ОформлениеИсточник) Экспорт
	
	Для Каждого ЭлементОформления Из ОформлениеИсточник.Элементы Цикл
		Если ЭлементОформления.Использование Тогда
			ОформлениеПриемник.УстановитьЗначениеПараметра(ЭлементОформления.Параметр, ЭлементОформления.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступное поле по полю компоновки.
//
// Параметры:
//  ПолеКомпоновкиДанных - ПолеКомпоновкиДанных, Строка
//  ОбластьПоиска 
//
// Возвращаемое значение:
//  ДоступноеПолеКомпоновкиДанных, Неопределено
//
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет.
//
// Параметры:
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//  ТекущийОтчет - 
//  ВключатьРесурсы - Булево
//
// Возвращаемое значение:
//  Массив
//
Функция ПолучитьПоляРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	ПоляРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат ПоляРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, ПоляРасшифровки, ВключатьРесурсы);
	
	// Удалим повторяющиеся поля
	Количество = ПоляРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если ПоляРасшифровки[ОбратныйИндекс].Поле = ПоляРасшифровки[ИндексВнутри].Поле Тогда
				ПоляРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПоляРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат ПоляРасшифровки;
	
КонецФункции

// Возвращает структуру для подмены заголовков полей веса, объема, длины, площади.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета.
//
// Возвращаемое значение:
//  Структура - в ключе задается шаблон замены заголовка, в значении - значение замены.
//
Функция ДанныеЗаголовковПолейМерныхЕдиниц() Экспорт
	
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("ЕдиницаВеса"   , Строка(Константы.ЕдиницаИзмеренияВеса.Получить()));
	СтруктураЗаголовков.Вставить("ЕдиницаОбъема" , Строка(Константы.ЕдиницаИзмеренияОбъема.Получить()));
	СтруктураЗаголовков.Вставить("ЕдиницаДлины"  , Строка(Константы.ЕдиницаИзмеренияДлины.Получить()));
	СтруктураЗаголовков.Вставить("ЕдиницаПлощади", Строка(Константы.ЕдиницаИзмеренияПлощади.Получить()));
	
	Возврат СтруктураЗаголовков;
	
КонецФункции

// Перебирает ячейки макета компоновки и подменяет их текст.
//
// Параметры:
//  ПараметрыЗамены - Структура - Ключ определяет текст, заданный в схеме компоновки (обрамленный знаками "%"), значение - текст замены.
//  МакетКомпоновки - МакетКомпоновкиДанных - Макет компоновки, заголовки которого будут подменены.
//
Процедура УстановитьЗаголовкиМакетаКомпоновки(ПараметрыЗамены, МакетКомпоновки) Экспорт
	
	Если Не ТипЗнч(ПараметрыЗамены) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийМакет Из МакетКомпоновки.Макеты Цикл
		Если ТипЗнч(ТекущийМакет.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицыКомпоновки Из ТекущийМакет.Макет Цикл
			Для Каждого ЯчейкаТаблицыОбластиКомпоновки Из СтрокаТаблицыКомпоновки.Ячейки Цикл
				Для Каждого Элемент Из ЯчейкаТаблицыОбластиКомпоновки.Элементы Цикл
					Для каждого Поле Из ПараметрыЗамены Цикл
						СтрокаЗамены = "%" + Поле.Ключ + "%";
						Если СтрНайти(Элемент.Значение, СтрокаЗамены) > 0 Тогда
							Элемент.Значение = СтрЗаменить(Элемент.Значение, СтрокаЗамены, Поле.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет строки с вспомогательными параметрами из секции параметров отчета.
//
// Параметры:
//  СхемаКомпоновкиДанных         - СхемаКомпоновкиДанных - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек           - КомпоновщикНастроекКомпоновкиДанных - описывает связь настроек компоновки данных и схемы компоновки данных.
//  ТабличныйДокумент             - ТабличныйДокумент - результат вывода отчета.
//  НеиспользуемыеПараметрыОтчета - Массив - представления неиспользуемых параметров отчета.
//
Процедура СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ТабличныйДокумент, ПараметрыОтчета) Экспорт
	
	СкрываемыеПараметрыОтчета = ПолучитьПредставленияПараметровКомпоновки(СхемаКомпоновкиДанных, КомпоновщикНастроек, ПараметрыОтчета);
	
	Для Каждого СкрываемыйПараметрОтчета Из СкрываемыеПараметрыОтчета Цикл
		ВосстановитьЗаголовокПараметров = Ложь;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СкрываемыйПараметрОтчета);
		Если НайденнаяОбласть <> Неопределено 
			И НайденнаяОбласть.РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.Обычный Тогда
			УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
			
			Если СтрНайти(ТабличныйДокумент.Область(НайденнаяОбласть.Верх, НайденнаяОбласть.Лево - 1).Текст,
					НСтр("ru= 'Параметры'") + ":") > 0 Тогда
				ВосстановитьЗаголовокПараметров = Истина;
				Строка = НайденнаяОбласть.Верх;
				Колонка = НайденнаяОбласть.Лево - 1;
			КонецЕсли;
			
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если ВосстановитьЗаголовокПараметров
				И ПустаяСтрока(ТабличныйДокумент.Область(Строка, Колонка + 1, Строка, Колонка + 1).Текст) Тогда
				ВосстановитьЗаголовокПараметров = Ложь;
			КонецЕсли;
			
			Если ВосстановитьЗаголовокПараметров Тогда
				ТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = НСтр("ru= 'Параметры'") + ":";
			КонецЕсли;
			
			Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет поиск представлений параметров по их имени.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек   - КомпоновщикНастроекКомпоновкиДанных - настройки отчета.
//  ИменаПараметров       - Массив - имена параметров отчета, для получения представлений.
//
// Возвращаемое значение:
//  ПредставленияПараметров - Массив - представления параметров отчета.
//
Функция ПолучитьПредставленияПараметровКомпоновки(СхемаКомпоновкиДанных, КомпоновщикНастроек, ИменаПараметров) Экспорт
	
	ПредставленияПараметров = Новый Массив;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		Параметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
		Если Параметр <> Неопределено Тогда
			
			ПараметрВНастройках = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ИмяПараметра);
			
			ПредставленияПараметров.Добавить(Параметр.Заголовок);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредставленияПараметров;
	
КонецФункции

// Оптимизирует выражения параметров виртуальных таблиц
// регистров накопления, которые используют РАУЗ,
// в запросах наборов данных макета компоновки данных,
// в зависимости от установленных отборов.
//
// Параметры:
//  МакетКомпоновки - МакетКомпоновкиДанных - модифицируемый макет компоновки данных.
//
Процедура ОптимизироватьВыраженияПараметровВиртуальныхТаблиц(МакетКомпоновки) Экспорт
	
	Для Каждого НаборДанных Из МакетКомпоновки.НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			ОптимизироватьВыраженияПараметровВиртуальныхТаблиц(Новый Структура("НаборыДанных", НаборДанных.Элементы));
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = НаборДанных.Запрос;
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
		
		ВыражениеПараметраАналитикаВидаУчета            = "ИСТИНА";
		ВыражениеПараметраКорАналитикаВидаУчета         = "ИСТИНА";
		ВыражениеПараметраАналитикаУчетаНоменклатуры    = "ИСТИНА";
		ВыражениеПараметраКорАналитикаУчетаНоменклатуры = "ИСТИНА";
		ВыражениеПараметраХозяйственнаяОперация         = "ИСТИНА";
		
		Для Каждого ЗапросОбъект Из ПакетЗапросов Цикл
			
			Если ТипЗнч(ЗапросОбъект) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
				Возврат;
			КонецЕсли;
			
			ВыражениеОтбора = ЗапросОбъект.Операторы[0].Отбор;
			
			Если ЗапросОбъект.ТаблицаДляПомещения = "АналитикаВидаУчета" И ЗначениеЗаполнено(ВыражениеОтбора) Тогда
				ВыражениеПараметраАналитикаВидаУчета = "АналитикаВидаУчета В (ВЫБРАТЬ АналитикаВидаУчета.КлючАналитики ИЗ АналитикаВидаУчета)";
			ИначеЕсли ЗапросОбъект.ТаблицаДляПомещения = "КорАналитикаВидаУчета" И ЗначениеЗаполнено(ВыражениеОтбора) Тогда
				ВыражениеПараметраКорАналитикаВидаУчета = "КорАналитикаВидаУчета В (ВЫБРАТЬ КорАналитикаВидаУчета.КлючАналитики ИЗ КорАналитикаВидаУчета)";
			ИначеЕсли ЗапросОбъект.ТаблицаДляПомещения = "АналитикаУчетаНоменклатуры" И ЗначениеЗаполнено(ВыражениеОтбора) Тогда
				ВыражениеПараметраАналитикаУчетаНоменклатуры = "АналитикаУчетаНоменклатуры В (ВЫБРАТЬ АналитикаУчетаНоменклатуры.КлючАналитики ИЗ АналитикаУчетаНоменклатуры)";
			ИначеЕсли ЗапросОбъект.ТаблицаДляПомещения = "КорАналитикаУчетаНоменклатуры" И ЗначениеЗаполнено(ВыражениеОтбора) Тогда
				ВыражениеПараметраКорАналитикаУчетаНоменклатуры = "КорАналитикаУчетаНоменклатуры В (ВЫБРАТЬ КорАналитикаУчетаНоменклатуры.КлючАналитики ИЗ КорАналитикаУчетаНоменклатуры)";
			ИначеЕсли ЗапросОбъект.ТаблицаДляПомещения = "НастройкиХозопераций" И ЗначениеЗаполнено(ВыражениеОтбора) Тогда
				ВыражениеПараметраХозяйственнаяОперация = "ХозяйственнаяОперация В (ВЫБРАТЬ НастройкиХозопераций.ХозяйственнаяОперация ИЗ НастройкиХозопераций)";
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПараметраАналитикаВидаУчета"           , ВыражениеПараметраАналитикаВидаУчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПараметраКорАналитикаВидаУчета"        , ВыражениеПараметраКорАналитикаВидаУчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПараметраАналитикаУчетаНоменклатуры"   , ВыражениеПараметраАналитикаУчетаНоменклатуры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПараметраКорАналитикаУчетаНоменклатуры", ВыражениеПараметраКорАналитикаУчетаНоменклатуры);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеПараметраХозяйственнаяОперация"        , ВыражениеПараметраХозяйственнаяОперация);
		
		НаборДанных.Запрос = ТекстЗапроса;
		
	КонецЦикла;
	
КонецПроцедуры

// Запускает актуализацию себестоимости товаров при формировании отчета.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета.
//  ПараметрыОтчета     - Структура - параметры формирования отчета, обязательным свойством которой является КомпоновщикНастроек отчета.
//  ИмяПоляОрганизация  - Строка    - имя поля отбора, в котором хранится значение организации,
//                                    по которой будет выполнена актуализация себестоимости товаров.
//  ИмяПоляПериода      - Строка    - имя поля параметра, в котором хранится значение периода,
//                                    на который будет выполнена актуализация себестоимости товаров.
//
Процедура АктуализироватьСебестоимостьТоваровДляОтчетов(КомпоновщикНастроек, ФиксированныеПараметры = Неопределено, ИмяПоляОрганизация = "Организация", ИмяПоляПериода = "Период") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаСебестоимостиТоваров(КомпоновщикНастроек, ФиксированныеПараметры, ИмяПоляОрганизация, ИмяПоляПериода);
	РезультатЗапускаРасчета = ЗапуститьРасчетСебестоимостиТоваров(ПараметрыРасчета);
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если РезультатЗапускаРасчета <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("РезультатЗапускаРасчетаСебестоимости", РезультатЗапускаРасчета);
		ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ИначеЕсли ДополнительныеСвойства.Свойство("РезультатЗапускаРасчетаСебестоимости") Тогда
		ДополнительныеСвойства.Удалить("РезультатЗапускаРасчетаСебестоимости");
		ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Оформление диаграммы
#Область ОформлениеДиаграммы

// Процедура изменяет настройки диаграмм и их элементов в части оформления 
// Параметры оформления (поддерживаемые) могут использовать независимо.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//  ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета
//  ПараметрыДиаграмм - Структура - Структура изменяемых параметров диаграмм
//    Поддерживаемые параметры:
//      МаксимумСерийКоличество              - Число  - больше 0, определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию.
//                                                      Значение 999 используется для снятия ограничения и вывода всех серий.
//      МаксимумСерийПроцент                 - Число  - 0 - 100%, , определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию.
//                                                      Значение 999 используется для снятия ограничения и вывода всех серий.
//      ВыделениеСерийДиаграмм               - Число  - "0" - не выделять, "1" - выделять первую серию, "2" - Выделять отслеживаемые аналитики.
//      ГрадиентСерийДиаграмм                - Булево - включает/отключает режима градиента цветом серий данных.
//      ОтображениеМаркеровТочекДиаграмм     - Булево - включает/отключает видимость маркеров точек диаграммы.
//      ОтслеживаемыеАналитики               - СправочникСсылка - список аналитик, которые будут визуально выделены на диаграмме и в таблице диаграммы.
//      ОтображениеЛинийТрендаСерийДиаграммы - Булево - включает/отключает линии тренда серий диаграммы.
//
Процедура ОформитьДиаграммыОтчета(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм = Неопределено) Экспорт
	
	Если ТабличныйДокумент.Рисунки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДиаграмм = Неопределено Тогда
		ПараметрыДиаграмм = ПараметрыДиаграмм(КомпоновщикНастроек);
	КонецЕсли;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		
		ОбъектРисунка = Рисунок.Объект;
		Если ТипЗнч(ОбъектРисунка) = Тип("Диаграмма") Тогда
			
			Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
			Рисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
			
			УстановитьОформлениеДиаграммыПоУмолчанию(ОбъектРисунка, ПараметрыДиаграмм);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм);
	
КонецПроцедуры

// Возвращает структуру параметров диаграмм для переопределения.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета.
//
// Возвращаемое значение:
//  ПараметрыДиаграмм - Структура - в ключе задается имя параметра, в значении - значение параметры.
//
Функция ПараметрыДиаграмм(КомпоновщикНастроек) Экспорт
	
	ПараметрыДиаграмм = Новый Структура;
	
	ПараметрМаксимумСерийКоличество = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "МаксимумСерийКоличество");
	Если ПараметрМаксимумСерийКоличество <> Неопределено И ПараметрМаксимумСерийКоличество.Использование Тогда
		ПараметрыДиаграмм.Вставить("МаксимумСерийКоличество", ПараметрМаксимумСерийКоличество.Значение);
	КонецЕсли;
	
	ПараметрМаксимумСерийПроцент = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "МаксимумСерийПроцент");
	Если ПараметрМаксимумСерийПроцент <> Неопределено И ПараметрМаксимумСерийПроцент.Использование Тогда
		ПараметрыДиаграмм.Вставить("МаксимумСерийПроцент", ПараметрМаксимумСерийПроцент.Значение);
	КонецЕсли;
	
	ПараметрВыделениеСерийДиаграмм = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыделениеСерийДиаграмм");
	Если ПараметрВыделениеСерийДиаграмм <> Неопределено И ПараметрВыделениеСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрГрадиентСерийДиаграмм = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГрадиентСерийДиаграмм");
	Если ПараметрГрадиентСерийДиаграмм <> Неопределено И ПараметрГрадиентСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтображениеМаркеровТочекДиаграмм = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтображениеМаркеровТочекДиаграмм");
	Если ПараметрОтображениеМаркеровТочекДиаграмм <> Неопределено И ПараметрОтображениеМаркеровТочекДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтображениеМаркеровТочекДиаграмм", ПараметрОтображениеМаркеровТочекДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтслеживаемыеАналитики = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтслеживаемыеАналитики");
	Если ПараметрОтслеживаемыеАналитики <> Неопределено И ПараметрОтслеживаемыеАналитики.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтслеживаемыеАналитики", ПараметрОтслеживаемыеАналитики.Значение);
	КонецЕсли;
	
	ПараметрОтображениеЛинийТрендаСерийДиаграммы = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтображениеЛинийТрендаСерийДиаграммы");
	Если ПараметрОтображениеЛинийТрендаСерийДиаграммы <> Неопределено И ПараметрОтображениеЛинийТрендаСерийДиаграммы.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтображениеЛинийТрендаСерийДиаграммы", ПараметрОтображениеЛинийТрендаСерийДиаграммы.Значение);
	КонецЕсли;
	
	Возврат ПараметрыДиаграмм;
	
КонецФункции

// Возвращает компоненты цвета по модели HSV, по переданным компонентам RGB
//
// Параметры:
//  КомпонентыRGB - Структура - заполняется компонентами цвета по модели RGB.
//   * Красный - Число - значение от 0 до 255.
//   * Зеленый - Число - значение от 0 до 255.
//   * Синий   - Число - значение от 0 до 255.
//  КомпонентыHSV - Структура - описание компонентов по модели HSV.
//   * Тон          - Число - возвращается значение от 0 до 360 (градусов).
//   * Насыщенность - Число - возвращается значение от 0 до 100 (%).
//   * Яркость      - Число - возвращается значение от 0 до 100 (%).
//
Процедура ПолучитьHSVпоRGB(КомпонентыRGB, КомпонентыHSV) Экспорт
	
	ПриведенныйКрасный = КомпонентыRGB.Красный / 255;
	ПриведенныйЗеленый = КомпонентыRGB.Зеленый / 255;
	ПриведенныйСиний   = КомпонентыRGB.Синий / 255;
	
	МаксЦветов = Макс(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);
	МинЦветов  = Мин(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);
	
	// Получение цветового тона
	Если МаксЦветов = МинЦветов Тогда
		КомпонентыHSV.Тон = 0;
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый >= ПриведенныйСиний Тогда
		КомпонентыHSV.Тон = 60 * (ПриведенныйЗеленый - ПриведенныйСиний) / (МаксЦветов - МинЦветов);
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый < ПриведенныйСиний Тогда
		КомпонентыHSV.Тон = 60 * (ПриведенныйЗеленый - ПриведенныйСиний) / (МаксЦветов - МинЦветов) + 360;
	ИначеЕсли МаксЦветов = ПриведенныйЗеленый Тогда
		КомпонентыHSV.Тон = 60 * (ПриведенныйСиний - ПриведенныйКрасный) / (МаксЦветов - МинЦветов) + 120;
	ИначеЕсли МаксЦветов = ПриведенныйСиний Тогда
		КомпонентыHSV.Тон = 60 * (ПриведенныйКрасный - ПриведенныйЗеленый) / (МаксЦветов - МинЦветов) + 240;
	КонецЕсли;
	
	// Получение насыщенности
	Если МаксЦветов = 0 Тогда
		КомпонентыHSV.Насыщенность = 0;
	Иначе
		КомпонентыHSV.Насыщенность = Окр(100 * (1 - МинЦветов / МаксЦветов));
	КонецЕсли;
	
	// Получение яркости
	КомпонентыHSV.Яркость = Окр(100 * МаксЦветов);
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным компонентам HSV.
//
// Параметры:
//  КомпонентыHSV - Структура - описание компонентов по модели HSV.
//   * Тон          - Число - значение от 0 до 360 (градусов).
//   * Насыщенность - Число - значение от 0 до 100 (%).
//   * Яркость      - Число - значение от 0 до 100 (%).
//  КомпонентыRGB - Структура - заполняется компонентами цвета по модели RGB.
//   * Красный - Число - возвращается значение от 0 до 255.
//   * Зеленый - Число - возвращается значение от 0 до 255.
//   * Синий   - Число - возвращается значение от 0 до 255.
//
Процедура ПолучитьRGBпоHSV(КомпонентыHSV, КомпонентыRGB) Экспорт
	
	ПриведеннаяНасыщенность = КомпонентыHSV.Насыщенность / 100;
	ПриведеннаяЯркость = КомпонентыHSV.Яркость / 100;
	
	Целые60 = Цел(КомпонентыHSV.Тон / 60);
	Остаток60 = КомпонентыHSV.Тон / 60 - Целые60;
	
	pTemp = ПриведеннаяЯркость * (1 - ПриведеннаяНасыщенность);
	qTemp = ПриведеннаяЯркость * (1 - Остаток60 * ПриведеннаяНасыщенность);
	tTemp = ПриведеннаяЯркость * (1 - (1 - Остаток60) * ПриведеннаяНасыщенность);
	
	Если Целые60 = 0 Тогда
		ПриведенныйКрасный = ПриведеннаяЯркость;
		ПриведенныйЗеленый = tTemp;
		ПриведенныйСиний   = pTemp;
	ИначеЕсли Целые60 = 1 Тогда
		ПриведенныйКрасный = qTemp;
		ПриведенныйЗеленый = ПриведеннаяЯркость;
		ПриведенныйСиний   = pTemp;
	ИначеЕсли Целые60 = 2 Тогда
		ПриведенныйКрасный = pTemp;
		ПриведенныйЗеленый = ПриведеннаяЯркость;
		ПриведенныйСиний   = tTemp;
	ИначеЕсли Целые60 = 3 Тогда
		ПриведенныйКрасный = pTemp;
		ПриведенныйЗеленый = qTemp;
		ПриведенныйСиний   = ПриведеннаяЯркость;
	ИначеЕсли Целые60 = 4 Тогда
		ПриведенныйКрасный = tTemp;
		ПриведенныйЗеленый = pTemp ;
		ПриведенныйСиний   = ПриведеннаяЯркость;
	ИначеЕсли Целые60 = 5 Тогда
		ПриведенныйКрасный = ПриведеннаяЯркость;
		ПриведенныйЗеленый = pTemp;
		ПриведенныйСиний   = qTemp;
	КонецЕсли;
	
	КомпонентыRGB.Красный = Окр(255 * ПриведенныйКрасный, 0);
	КомпонентыRGB.Зеленый = Окр(255 * ПриведенныйЗеленый, 0);
	КомпонентыRGB.Синий   = Окр(255 * ПриведенныйСиний  , 0);
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным Web-цвету
//
// Параметры:
//  Цвет          - WebЦвет - системное перечисление
//  КомпонентыRGB - Структура - заполняется компонентами цвета по модели RGB.
//   * Красный - Число - возвращается значение от 0 до 255.
//   * Зеленый - Число - возвращается значение от 0 до 255.
//   * Синий   - Число - возвращается значение от 0 до 255.
//
Процедура ПолучитьRGBWebЦвета(Цвет, КомпонентыRGB) Экспорт
	
	ОписаниеЦвета = ПолучитьСоответствияЦветов().Получить(Цвет);
	
	Если ОписаниеЦвета <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КомпонентыRGB, ОписаниеЦвета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОформлениеДиаграммы

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныеПрограммныйИнтерфейс

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	УстановитьМакетОформленияВРежимеТакси(Форма, НовыеНастройкиКД);
	
	НастроитьПараметрыОтборыПоФункциональнымОпциям(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОрганизациюЕслиОнаЕдинственная(ПараметрыОтчета)
	
	Организация = ПараметрыОтчета.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ДоступныеОрганизации = Справочники.Организации.ПолучитьДоступные();
		Если ДоступныеОрганизации.Количество() = 1 Тогда
			ПараметрыОтчета.Организация = ДоступныеОрганизации[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь)
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Элемент.Имя = ПолеГруппировки Тогда
				Группировки.Добавить(Элемент);
			Иначе
				Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
					Если ЭлементГруппировки.ИмяПоля = ПолеГруппировки Тогда
						Группировки.Добавить(Элемент);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			
			ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Строки, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
			ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Колонки, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
			
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					Группировки.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Тело, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь)
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			Если Элемент.Имя = ПолеГруппировки Тогда
				Группировки.Добавить(Элемент);
			Иначе
				Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
					Если ЭлементГруппировки.ИмяПоля = ПолеГруппировки Тогда
						Группировки.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбойтиТелоМакетаТаблицыКомпоновки(МакетКомпоновки, Элемент.Тело, Группировки, ПолеГруппировки, ИскатьВДетальныхЗаписях);
		КонецЕсли;
		
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиТаблицыМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					Группировки.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Ищет параметр в списке параметров по выражению
//
// Параметры:
//  Параметры - ПараметрыОбластиКомпоновкиДанных - 
//  Выражение - выражение, по которому ищется параметр
//
// Возвращаемое значение:
//  Строка, Неопределено - Имя найденного параметра или Неопределено, если параметр не найден.
//
Функция ИмяПараметраОбластиВыражениеКомпоновкиПоВыражению(Параметры, Знач Выражение)
	
	Выражение = ВРег(Выражение);
	Для Каждого Параметр Из Параметры Цикл
		
		Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ВыражениеПараметра = ВРег(Параметр.Выражение);
		Если ВыражениеПараметра = Выражение Тогда
			Возврат Параметр.Имя;
		КонецЕсли;
		
		Если СтрЗаменить(СтрЗаменить(ВыражениеПараметра, "ПРЕДСТАВЛЕНИЕ", ""), "PRESENTATION", "") = Выражение Тогда
			Возврат Параметр.Имя;
		КонецЕсли;
		
		Если Найти(ВыражениеПараметра, "ПРЕДСТАВЛЕНИЕ(") = 1 Тогда
			Если Сред(Сред(ВыражениеПараметра, 1, СтрДлина(ВыражениеПараметра) - 1), СтрДлина("ПРЕДСТАВЛЕНИЕ(") + 1) = Выражение Тогда
				Возврат Параметр.Имя;
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(ВыражениеПараметра, "PRESENTATION(") = 1 Тогда
			Если Сред(Сред(ВыражениеПараметра, 1, СтрДлина(ВыражениеПараметра) - 1), СтрДлина("PRESENTATION(") + 1) = Выражение Тогда
				Возврат Параметр.Имя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяПараметраОбластиРасшифровкаКомпоновкиПоВыражению(Параметры, Знач Выражение)
	
	Выражение = ВРег(Выражение);
	Для Каждого Параметр Из Параметры Цикл
		
		Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
			
			ВыражениеПараметра = ВРег(ВыражениеПоля.Выражение);
			Если ВыражениеПараметра = Выражение Тогда
				Возврат Новый Структура("ИмяПараметра, ИмяПоля", Параметр.Имя, ВыражениеПоля.Поле);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(Форма, НовыеНастройкиКД)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОбщегоНазначенияБольничнаяАптека.УдалитьЭлементОтбораИзВсехНастроекОтчета(НовыеНастройкиКД, "Организация");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьМакетОформленияВРежимеТакси(Форма, НовыеНастройкиКД)
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПараметрМакетОформления = НовыеНастройкиКД.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main"
		 Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = БиблиотекаМакетовОформленияКомпоновкиДанных.ОформлениеОтчетовБежевый.Имя;
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из НовыеНастройкиКД.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main" 
				 Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = БиблиотекаМакетовОформленияКомпоновкиДанных.ОформлениеОтчетовБежевый.Имя;
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Форма <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, "ОтчетТабличныйДокумент", "РежимМасштабированияПросмотра", РежимМасштабированияПросмотра.Обычный);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для Каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает для переданной диаграммы стандартное оформление.
//
// Параметры:
//  Диаграмма - Диаграмма - изменяемая диаграмма.
//  ПараметрыДиаграммы - Структура - структура параметров, соответствующих свойствам диаграммы.
//
Процедура УстановитьОформлениеДиаграммыПоУмолчанию(Диаграмма, ПараметрыДиаграммы = Неопределено)
	
	// Оформление области построения
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧГ=3,0";
	ОбластьПостроения.ЦветШкал = Метаданные.ЭлементыСтиля.ЦветШкалыДиаграммы.Значение;
	
	// Оформление диаграммы
	Если ПараметрыДиаграммы <> Неопределено Тогда
		
		// Установка свойства диаграммы МаксимумСерий
		ПараметрМаксимумСерий = Неопределено;
		Если ПараметрыДиаграммы.Свойство("МаксимумСерийКоличество", ПараметрМаксимумСерий) И ПараметрМаксимумСерий > 0 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			Диаграмма.МаксимумСерийКоличество = ПараметрМаксимумСерий;
		ИначеЕсли ПараметрыДиаграммы.Свойство("МаксимумСерийПроцент", ПараметрМаксимумСерий) И ПараметрМаксимумСерий > 0 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
			Диаграмма.МаксимумСерийПроцент = ПараметрМаксимумСерий;
		КонецЕсли;
		
		// Оформление серий и точек
		СерииДиаграммы = Диаграмма.Серии;
		
		ОтображениеМаркеровТочекДиаграмм = Неопределено;
		Если ПараметрыДиаграммы.Свойство("ОтображениеМаркеровТочекДиаграмм", ОтображениеМаркеровТочекДиаграмм) И Не ОтображениеМаркеровТочекДиаграмм Тогда
			Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
				СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			КонецЦикла;
		КонецЕсли;
		
		ОтображениеЛинийТренда = Неопределено;
		Если ПараметрыДиаграммы.Свойство("ОтображениеЛинийТрендаСерийДиаграммы", ОтображениеЛинийТренда) И ОтображениеЛинийТренда <> "НеОтображать" Тогда
			Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
				ЛинияТренда = СерияДиаграммы.ЛинииТренда.Добавить();
				ЛинияТренда.ТипАппроксимации = ТипАппроксимацииЛинииТрендаДиаграммы[ОтображениеЛинийТренда];
				ЛинияТренда.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
				ЛинияТренда.ОтображатьВЛегенде = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрВыделениеСерийДиаграмм = Неопределено;
		Если ПараметрыДиаграммы.Свойство("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм) И ПараметрВыделениеСерийДиаграмм <> 0 Тогда
			
			// Обход ошибки платформы, при которой некорректно устанавливаются цвета серий.
			// см. ТочкаДиаграммы.ПриоритетЦвета.
			Для Каждого Точка Из Диаграмма.Точки Цикл
				Точка.ПриоритетЦвета = Ложь;
			КонецЦикла;
			
			ПараметрГрадиентСерийДиаграмм = Неопределено;
			Если ПараметрыДиаграммы.Свойство("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм) И ПараметрГрадиентСерийДиаграмм Тогда
				СтруктураСерийЦветов = СтруктураСерийЦветов(СерииДиаграммы);
				СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Оформление сводной серии
	СводнаяСерия = Диаграмма.СводнаяСерия;
	СводнаяСерия.Маркер = ТипМаркераДиаграммы.Нет;
	СводнаяСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 3);
	СводнаяСерия.Цвет = Метаданные.ЭлементыСтиля.ЦветСводнойСерииДиаграммы.Значение;
	
КонецПроцедуры

Процедура УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм)
	
	// Параметры, обрабатываемые в коде
	Если ПараметрыДиаграмм <> Неопределено Тогда
		ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры;
		
		Для Каждого ПараметрДиаграмм Из ПараметрыДиаграмм Цикл
			ПараметрДиаграмм = ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(ПараметрДиаграмм.Ключ));
			
			Если ПараметрДиаграмм <> Неопределено Тогда
				НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ПараметрДиаграмм.Заголовок);
				
				Если НайденнаяОбласть <> Неопределено Тогда
					УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
					ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
						ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСерийЦветов(СерииДиаграммы)
	
	СтруктураСерийЦветов = Новый Структура;
	
	Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
		
		СтруктураЦветаСерии = Новый Структура("Красный, Зеленый, Синий", 0, 0, 0);
		
		ВидЦветаСерии = СерияДиаграммы.Цвет.Вид;
		
		Если ВидЦветаСерии = ВидЦвета.WebЦвет Тогда
			ПолучитьRGBWebЦвета(СерияДиаграммы.Цвет, СтруктураЦветаСерии);
		ИначеЕсли ВидЦветаСерии = ВидЦвета.Абсолютный Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦветаСерии, СерияДиаграммы.Цвет);
		КонецЕсли;
		
		ОписаниеЦветаКлюч = СтрШаблон("Цвет_%1_%2_%3", СтруктураЦветаСерии.Красный, СтруктураЦветаСерии.Зеленый, СтруктураЦветаСерии.Синий);
		ОписаниеЦвета = Неопределено;
		Если Не СтруктураСерийЦветов.Свойство(ОписаниеЦветаКлюч, ОписаниеЦвета) Тогда
			
			ОписаниеЦвета = Новый Структура;
			ОписаниеЦвета.Вставить("Цвет", СтруктураЦветаСерии);
			ОписаниеЦвета.Вставить("Серии", Новый Массив);
			
			СтруктураСерийЦветов.Вставить(ОписаниеЦветаКлюч, ОписаниеЦвета);
			
		КонецЕсли;
		
		ОписаниеЦвета.Серии.Добавить(СерияДиаграммы);
		
	КонецЦикла;
	
	Возврат СтруктураСерийЦветов;
	
КонецФункции

Процедура СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов)
	
	Для Каждого СерияРазныхЦветов Из СтруктураСерийЦветов Цикл
		
		ОбрабатываемыеСерии = СерияРазныхЦветов.Значение.Серии;
		КоличествоСерий = ОбрабатываемыеСерии.Количество();
		
		Если КоличествоСерий = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветСерии = СерияРазныхЦветов.Значение.Цвет;
		
		ИсходныеКомпонентыHSV = Новый Структура("Тон, Насыщенность, Яркость", 0, 0, 0);
		
		НомерСерии = 0;
		Для Каждого ОбрабатываемаяСерия Из ОбрабатываемыеСерии Цикл
			
			Если ИсходныеКомпонентыHSV.Тон + ИсходныеКомпонентыHSV.Насыщенность + ИсходныеКомпонентыHSV.Яркость = 0 Тогда
				ПолучитьHSVпоRGB(ЦветСерии, ИсходныеКомпонентыHSV);
			КонецЕсли;
			
			КомпонентыHSV = Новый Структура("Тон, Насыщенность, Яркость", 0, 0, 0);
			КомпонентыHSV.Тон = ИсходныеКомпонентыHSV.Тон;
			
			// Насыщенность ограничивать не требуется
			ШагГрадиентаНасыщенности = (100 - ?(ИсходныеКомпонентыHSV.Насыщенность = 0, 100, ИсходныеКомпонентыHSV.Насыщенность)) / (КоличествоСерий - 1);
			КомпонентыHSV.Насыщенность = ИсходныеКомпонентыHSV.Насыщенность + ШагГрадиентаНасыщенности * НомерСерии;
			
			// Установка коэффициента 0.8, чтобы градиент не уходил в белый цвет
			ШагГрадиентаЯркости = 0.8 * (100 - ИсходныеКомпонентыHSV.Яркость) / (КоличествоСерий - 1);
			КомпонентыHSV.Яркость = ИсходныеКомпонентыHSV.Яркость + ШагГрадиентаЯркости * НомерСерии;
			
			КомпонентыRGB = Новый Структура("Красный, Зеленый, Синий");
			
			ПолучитьRGBпоHSV(КомпонентыHSV, КомпонентыRGB);
			
			ОбрабатываемаяСерия.Цвет = Новый Цвет(КомпонентыRGB.Красный, КомпонентыRGB.Зеленый, КомпонентыRGB.Синий);
			
			НомерСерии = НомерСерии + 1;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствияЦветов()
	
	КлючRGB = "Красный, Зеленый, Синий";
	
	СоответствияЦветов = Новый Соответствие;
	СоответствияЦветов.Вставить(WebЦвета.АкварельноСиний            , Новый Структура(КлючRGB, 240, 248, 255));
	СоответствияЦветов.Вставить(WebЦвета.АнтикБелый                 , Новый Структура(КлючRGB, 250, 235, 215));
	СоответствияЦветов.Вставить(WebЦвета.ЦианАкварельный            , Новый Структура(КлючRGB, 0, 255, 255));
	СоответствияЦветов.Вставить(WebЦвета.Аквамарин                  , Новый Структура(КлючRGB, 127, 255, 212));
	СоответствияЦветов.Вставить(WebЦвета.Лазурный                   , Новый Структура(КлючRGB, 240, 255, 255));
	СоответствияЦветов.Вставить(WebЦвета.Бежевый                    , Новый Структура(КлючRGB, 245, 245, 220));
	СоответствияЦветов.Вставить(WebЦвета.СветлоКоричневый           , Новый Структура(КлючRGB, 255, 228, 196));
	СоответствияЦветов.Вставить(WebЦвета.Черный                     , Новый Структура(КлючRGB, 0, 0, 0));
	СоответствияЦветов.Вставить(WebЦвета.БледноМиндальный           , Новый Структура(КлючRGB, 255, 235, 205));
	СоответствияЦветов.Вставить(WebЦвета.Синий                      , Новый Структура(КлючRGB, 0, 0, 255));
	СоответствияЦветов.Вставить(WebЦвета.СинеФиолетовый             , Новый Структура(КлючRGB, 138, 43, 226));
	СоответствияЦветов.Вставить(WebЦвета.Коричневый                 , Новый Структура(КлючRGB, 165, 42, 42));
	СоответствияЦветов.Вставить(WebЦвета.Древесный                  , Новый Структура(КлючRGB, 222, 184, 135));
	СоответствияЦветов.Вставить(WebЦвета.СероСиний                  , Новый Структура(КлючRGB, 95, 158, 160));
	СоответствияЦветов.Вставить(WebЦвета.ЗеленоватоЖелтый           , Новый Структура(КлючRGB, 127, 255, 0));
	СоответствияЦветов.Вставить(WebЦвета.Шоколадный                 , Новый Структура(КлючRGB, 210, 105, 30));
	СоответствияЦветов.Вставить(WebЦвета.Коралловый                 , Новый Структура(КлючRGB, 255, 127, 80));
	СоответствияЦветов.Вставить(WebЦвета.Васильковый                , Новый Структура(КлючRGB, 100, 149, 237));
	СоответствияЦветов.Вставить(WebЦвета.ШелковыйОттенок            , Новый Структура(КлючRGB, 255, 248, 220));
	СоответствияЦветов.Вставить(WebЦвета.Кремовый                   , Новый Структура(КлючRGB, 255, 251, 240));
	СоответствияЦветов.Вставить(WebЦвета.Малиновый                  , Новый Структура(КлючRGB, 220, 20, 60));
	СоответствияЦветов.Вставить(WebЦвета.Циан                       , Новый Структура(КлючRGB, 0, 255, 255));
	СоответствияЦветов.Вставить(WebЦвета.ТемноСиний                 , Новый Структура(КлючRGB, 0, 0, 139));
	СоответствияЦветов.Вставить(WebЦвета.ЦианТемный                 , Новый Структура(КлючRGB, 0, 139, 139));
	СоответствияЦветов.Вставить(WebЦвета.ТемноЗолотистый            , Новый Структура(КлючRGB, 184, 134, 11));
	СоответствияЦветов.Вставить(WebЦвета.ТемноСерый                 , Новый Структура(КлючRGB, 169, 169, 169));
	СоответствияЦветов.Вставить(WebЦвета.ТемноЗеленый               , Новый Структура(КлючRGB, 0, 100, 0));
	СоответствияЦветов.Вставить(WebЦвета.ХакиТемный                 , Новый Структура(КлючRGB, 189, 183, 107));
	СоответствияЦветов.Вставить(WebЦвета.ФуксинТемный               , Новый Структура(КлючRGB, 139, 0, 139));
	СоответствияЦветов.Вставить(WebЦвета.ТемноОливковоЗеленый       , Новый Структура(КлючRGB, 85, 107, 47));
	СоответствияЦветов.Вставить(WebЦвета.ТемноОранжевый             , Новый Структура(КлючRGB, 255, 140, 0));
	СоответствияЦветов.Вставить(WebЦвета.ОрхидеяТемный              , Новый Структура(КлючRGB, 153, 50, 204));
	СоответствияЦветов.Вставить(WebЦвета.ТемноКрасный               , Новый Структура(КлючRGB, 139, 0, 0));
	СоответствияЦветов.Вставить(WebЦвета.ЛососьТемный               , Новый Структура(КлючRGB, 233, 150, 122));
	СоответствияЦветов.Вставить(WebЦвета.ЦветМорскойВолныТемный     , Новый Структура(КлючRGB, 143, 188, 143));
	СоответствияЦветов.Вставить(WebЦвета.ТемноГрифельноСиний        , Новый Структура(КлючRGB, 72, 61, 139));
	СоответствияЦветов.Вставить(WebЦвета.ТемноГрифельноСерый        , Новый Структура(КлючRGB, 47, 79, 79));
	СоответствияЦветов.Вставить(WebЦвета.ТемноБирюзовый             , Новый Структура(КлючRGB, 0, 206, 209));
	СоответствияЦветов.Вставить(WebЦвета.ТемноФиолетовый            , Новый Структура(КлючRGB, 148, 0, 211));
	СоответствияЦветов.Вставить(WebЦвета.НасыщенноРозовый           , Новый Структура(КлючRGB, 255, 20, 147));
	СоответствияЦветов.Вставить(WebЦвета.НасыщенноНебесноГолубой    , Новый Структура(КлючRGB, 0, 191, 255));
	СоответствияЦветов.Вставить(WebЦвета.ТусклоСерый                , Новый Структура(КлючRGB, 105, 105, 105));
	СоответствияЦветов.Вставить(WebЦвета.СинеСерый                  , Новый Структура(КлючRGB, 30, 144, 255));
	СоответствияЦветов.Вставить(WebЦвета.Кирпичный                  , Новый Структура(КлючRGB, 178, 34, 34));
	СоответствияЦветов.Вставить(WebЦвета.ЦветокБелый                , Новый Структура(КлючRGB, 255, 250, 240));
	СоответствияЦветов.Вставить(WebЦвета.ЗеленыйЛес                 , Новый Структура(КлючRGB, 34, 139, 34));
	СоответствияЦветов.Вставить(WebЦвета.Фуксия                     , Новый Структура(КлючRGB, 255, 0, 255));
	СоответствияЦветов.Вставить(WebЦвета.СеребристоСерый            , Новый Структура(КлючRGB, 220, 220, 220));
	СоответствияЦветов.Вставить(WebЦвета.ПризрачноБелый             , Новый Структура(КлючRGB, 248, 248, 255));
	СоответствияЦветов.Вставить(WebЦвета.Золотой                    , Новый Структура(КлючRGB, 255, 215, 0));
	СоответствияЦветов.Вставить(WebЦвета.Золотистый                 , Новый Структура(КлючRGB, 218, 165, 32));
	СоответствияЦветов.Вставить(WebЦвета.Серый                      , Новый Структура(КлючRGB, 128, 128, 128));
	СоответствияЦветов.Вставить(WebЦвета.Зеленый                    , Новый Структура(КлючRGB, 173, 255, 47));
	СоответствияЦветов.Вставить(WebЦвета.ЗеленоЖелтый               , Новый Структура(КлючRGB, 190, 190, 190));
	СоответствияЦветов.Вставить(WebЦвета.Роса                       , Новый Структура(КлючRGB, 240, 255, 240));
	СоответствияЦветов.Вставить(WebЦвета.ТеплоРозовый               , Новый Структура(КлючRGB, 255, 105, 180));
	СоответствияЦветов.Вставить(WebЦвета.Киноварь                   , Новый Структура(КлючRGB, 205, 92, 92));
	СоответствияЦветов.Вставить(WebЦвета.Индиго                     , Новый Структура(КлючRGB, 75, 0, 130));
	СоответствияЦветов.Вставить(WebЦвета.СлоноваяКость              , Новый Структура(КлючRGB, 255, 255, 240));
	СоответствияЦветов.Вставить(WebЦвета.Хаки                       , Новый Структура(КлючRGB, 240, 230, 140));
	СоответствияЦветов.Вставить(WebЦвета.БледноЛиловый              , Новый Структура(КлючRGB, 230, 230, 250));
	СоответствияЦветов.Вставить(WebЦвета.ГолубойСКраснымОттенком    , Новый Структура(КлючRGB, 255, 240, 245));
	СоответствияЦветов.Вставить(WebЦвета.ЗеленаяЛужайка             , Новый Структура(КлючRGB, 124, 252, 0));
	СоответствияЦветов.Вставить(WebЦвета.Лимонный                   , Новый Структура(КлючRGB, 255, 250, 205));
	СоответствияЦветов.Вставить(WebЦвета.Голубой                    , Новый Структура(КлючRGB, 173, 216, 230));
	СоответствияЦветов.Вставить(WebЦвета.СветлоКоралловый           , Новый Структура(КлючRGB, 240, 128, 128));
	СоответствияЦветов.Вставить(WebЦвета.ЦианСветлый                , Новый Структура(КлючRGB, 224, 255, 255));
	СоответствияЦветов.Вставить(WebЦвета.СветлоЗолотистый           , Новый Структура(КлючRGB, 238, 221, 130));
	СоответствияЦветов.Вставить(WebЦвета.СветлоЖелтыйЗолотистый     , Новый Структура(КлючRGB, 250, 250, 210));
	СоответствияЦветов.Вставить(WebЦвета.СветлоСерый                , Новый Структура(КлючRGB, 211, 211, 211));
	СоответствияЦветов.Вставить(WebЦвета.СветлоЗеленый              , Новый Структура(КлючRGB, 144, 238, 144));
	СоответствияЦветов.Вставить(WebЦвета.СветлоРозовый              , Новый Структура(КлючRGB, 255, 182, 193));
	СоответствияЦветов.Вставить(WebЦвета.ЛососьСветлый              , Новый Структура(КлючRGB, 255, 160, 122));
	СоответствияЦветов.Вставить(WebЦвета.ЦветМорскойВолныСветлый    , Новый Структура(КлючRGB, 32, 178, 170));
	СоответствияЦветов.Вставить(WebЦвета.СветлоНебесноГолубой       , Новый Структура(КлючRGB, 135, 206, 250));
	СоответствияЦветов.Вставить(WebЦвета.СветлоГрифельноСиний       , Новый Структура(КлючRGB, 132, 112, 255));
	СоответствияЦветов.Вставить(WebЦвета.СветлоГрифельноСерый       , Новый Структура(КлючRGB, 119, 136, 153));
	СоответствияЦветов.Вставить(WebЦвета.ГолубойСоСтальнымОттенком  , Новый Структура(КлючRGB, 176, 196, 222));
	СоответствияЦветов.Вставить(WebЦвета.СветлоЖелтый               , Новый Структура(КлючRGB, 255, 255, 224));
	СоответствияЦветов.Вставить(WebЦвета.ЗеленоватоЛимонный         , Новый Структура(КлючRGB, 0, 255, 0));
	СоответствияЦветов.Вставить(WebЦвета.ЛимонноЗеленый             , Новый Структура(КлючRGB, 50, 205, 50));
	СоответствияЦветов.Вставить(WebЦвета.Льняной                    , Новый Структура(КлючRGB, 250, 240, 230));
	СоответствияЦветов.Вставить(WebЦвета.Фуксин                     , Новый Структура(КлючRGB, 255, 0, 255));
	СоответствияЦветов.Вставить(WebЦвета.ТемноБордовый              , Новый Структура(КлючRGB, 176, 48, 96));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноАквамариновый    , Новый Структура(КлючRGB, 102, 205, 170));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноСиний            , Новый Структура(КлючRGB, 0, 0, 205));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноСерый            , Новый Структура(КлючRGB, 160, 160, 164));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноЗеленый          , Новый Структура(КлючRGB, 192, 220, 192));
	СоответствияЦветов.Вставить(WebЦвета.ОрхидеяНейтральный         , Новый Структура(КлючRGB, 186, 85, 211));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноПурпурный        , Новый Структура(КлючRGB, 147, 112, 219));
	СоответствияЦветов.Вставить(WebЦвета.ЦветМорскойВолныНейтральный, Новый Структура(КлючRGB, 60, 179, 113));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноГрифельноСиний   , Новый Структура(КлючRGB, 123, 104, 238));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноВесеннеЗеленый   , Новый Структура(КлючRGB, 0, 250, 154));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноБирюзовый        , Новый Структура(КлючRGB, 72, 209, 204));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноФиолетовоКрасный , Новый Структура(КлючRGB, 199, 21, 133));
	СоответствияЦветов.Вставить(WebЦвета.ПолночноСиний              , Новый Структура(КлючRGB, 25, 25, 112));
	СоответствияЦветов.Вставить(WebЦвета.МятныйКрем                 , Новый Структура(КлючRGB, 245, 255, 250));
	СоответствияЦветов.Вставить(WebЦвета.ТусклоРозовый              , Новый Структура(КлючRGB, 255, 228, 225));
	СоответствияЦветов.Вставить(WebЦвета.ЗамшаСветлый               , Новый Структура(КлючRGB, 255, 228, 181));
	СоответствияЦветов.Вставить(WebЦвета.НавахоБелый                , Новый Структура(КлючRGB, 255, 222, 173));
	СоответствияЦветов.Вставить(WebЦвета.Ультрамарин                , Новый Структура(КлючRGB, 0, 0, 128));
	СоответствияЦветов.Вставить(WebЦвета.СтароеКружево              , Новый Структура(КлючRGB, 253, 245, 230));
	СоответствияЦветов.Вставить(WebЦвета.Оливковый                  , Новый Структура(КлючRGB, 128, 128, 0));
	СоответствияЦветов.Вставить(WebЦвета.ТусклоОливковый            , Новый Структура(КлючRGB, 107, 142, 35));
	СоответствияЦветов.Вставить(WebЦвета.Оранжевый                  , Новый Структура(КлючRGB, 255, 165, 0));
	СоответствияЦветов.Вставить(WebЦвета.ОранжевоКрасный            , Новый Структура(КлючRGB, 255, 69, 0));
	СоответствияЦветов.Вставить(WebЦвета.Орхидея                    , Новый Структура(КлючRGB, 218, 112, 214));
	СоответствияЦветов.Вставить(WebЦвета.БледноЗолотистый           , Новый Структура(КлючRGB, 238, 232, 170));
	СоответствияЦветов.Вставить(WebЦвета.БледноЗеленый              , Новый Структура(КлючRGB, 152, 251, 152));
	СоответствияЦветов.Вставить(WebЦвета.БледноБирюзовый            , Новый Структура(КлючRGB, 175, 238, 238));
	СоответствияЦветов.Вставить(WebЦвета.БледноКрасноФиолетовый     , Новый Структура(КлючRGB, 219, 112, 147));
	СоответствияЦветов.Вставить(WebЦвета.ТопленоеМолоко             , Новый Структура(КлючRGB, 255, 239, 213));
	СоответствияЦветов.Вставить(WebЦвета.Персиковый                 , Новый Структура(КлючRGB, 255, 218, 185));
	СоответствияЦветов.Вставить(WebЦвета.НейтральноКоричневый       , Новый Структура(КлючRGB, 205, 133, 63));
	СоответствияЦветов.Вставить(WebЦвета.Розовый                    , Новый Структура(КлючRGB, 255, 192, 203));
	СоответствияЦветов.Вставить(WebЦвета.Сливовый                   , Новый Структура(КлючRGB, 221, 160, 221));
	СоответствияЦветов.Вставить(WebЦвета.СинийСПороховымОттенком    , Новый Структура(КлючRGB, 176, 224, 230));
	СоответствияЦветов.Вставить(WebЦвета.Пурпурный                  , Новый Структура(КлючRGB, 160, 32, 240));
	СоответствияЦветов.Вставить(WebЦвета.Красный                    , Новый Структура(КлючRGB, 255, 0, 0));
	СоответствияЦветов.Вставить(WebЦвета.РозовоКоричневый           , Новый Структура(КлючRGB, 188, 143, 143));
	СоответствияЦветов.Вставить(WebЦвета.КоролевскиГолубой          , Новый Структура(КлючRGB, 65, 105, 225));
	СоответствияЦветов.Вставить(WebЦвета.КожаноКоричневый           , Новый Структура(КлючRGB, 139, 69, 19));
	СоответствияЦветов.Вставить(WebЦвета.Лосось                     , Новый Структура(КлючRGB, 250, 128, 114));
	СоответствияЦветов.Вставить(WebЦвета.ПесочноКоричневый          , Новый Структура(КлючRGB, 244, 164, 96));
	СоответствияЦветов.Вставить(WebЦвета.ЦветМорскойВолны           , Новый Структура(КлючRGB, 46, 139, 87));
	СоответствияЦветов.Вставить(WebЦвета.Перламутровый              , Новый Структура(КлючRGB, 255, 245, 238));
	СоответствияЦветов.Вставить(WebЦвета.Охра                       , Новый Структура(КлючRGB, 160, 82, 45));
	СоответствияЦветов.Вставить(WebЦвета.Серебряный                 , Новый Структура(КлючRGB, 192, 192, 192));
	СоответствияЦветов.Вставить(WebЦвета.НебесноГолубой             , Новый Структура(КлючRGB, 135, 206, 235));
	СоответствияЦветов.Вставить(WebЦвета.ГрифельноСиний             , Новый Структура(КлючRGB, 106, 90, 205));
	СоответствияЦветов.Вставить(WebЦвета.ГрифельноСерый             , Новый Структура(КлючRGB, 112, 128, 144));
	СоответствияЦветов.Вставить(WebЦвета.Белоснежный                , Новый Структура(КлючRGB, 255, 250, 250));
	СоответствияЦветов.Вставить(WebЦвета.ВесеннеЗеленый             , Новый Структура(КлючRGB, 0, 255, 127));
	СоответствияЦветов.Вставить(WebЦвета.СинийСоСтальнымОттенком    , Новый Структура(КлючRGB, 70, 130, 180));
	СоответствияЦветов.Вставить(WebЦвета.РыжеватоКоричневый         , Новый Структура(КлючRGB, 210, 180, 140));
	СоответствияЦветов.Вставить(WebЦвета.ЦианНейтральный            , Новый Структура(КлючRGB, 0, 128, 128));
	СоответствияЦветов.Вставить(WebЦвета.БледноСиреневый            , Новый Структура(КлючRGB, 216, 191, 216));
	СоответствияЦветов.Вставить(WebЦвета.Томатный                   , Новый Структура(КлючRGB, 255, 99, 71));
	СоответствияЦветов.Вставить(WebЦвета.Бирюзовый                  , Новый Структура(КлючRGB, 64, 224, 208));
	СоответствияЦветов.Вставить(WebЦвета.Фиолетовый                 , Новый Структура(КлючRGB, 238, 130, 238));
	СоответствияЦветов.Вставить(WebЦвета.КрасноФиолетовый           , Новый Структура(КлючRGB, 208, 32, 144));
	СоответствияЦветов.Вставить(WebЦвета.Пшеничный                  , Новый Структура(КлючRGB, 245, 222, 179));
	СоответствияЦветов.Вставить(WebЦвета.Белый                      , Новый Структура(КлючRGB, 255, 255, 255));
	СоответствияЦветов.Вставить(WebЦвета.ДымчатоБелый               , Новый Структура(КлючRGB, 245, 245, 245));
	СоответствияЦветов.Вставить(WebЦвета.Желтый                     , Новый Структура(КлючRGB, 255, 255, 0));
	
	Возврат СоответствияЦветов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Актуализация себестоимости товаров для отчетов
#Область АктуализацияСебестоимостиТоваров

Функция ИнициализироватьПараметрыРасчетаСебестоимостиТоваров(КомпоновщикНастроек, ФиксированныеПараметры, ИмяПоляОрганизация, ИмяПоляПериода)
	
	ПараметрыРасчета = Новый Структура("ВыполнятьРасчет, КлючЗадания, ЗаданиеАктивно, СписокОрганизаций, ГраницаРасчета");
	
	ПараметрыРасчета.ВыполнятьРасчет = Константы.АктуализироватьДанныеПриФормированииОтчетов.Получить() И ПланыОбмена.ГлавныйУзел() = Неопределено;
	Если Не ПараметрыРасчета.ВыполнятьРасчет Тогда
		Возврат ПараметрыРасчета;
	КонецЕсли;
	
	ПараметрыРасчета.КлючЗадания    = "РасчетСебестоимостиТоваров";
	ПараметрыРасчета.ЗаданиеАктивно = ЗаданиеРасчетаСебестоимостиАктивно(ПараметрыРасчета.КлючЗадания);
	
	// Определение организаций, по которым необходимо выполнить расчет себестоимости товаров для отчетов.
	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	
	ОрганизацияОтбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ФиксированныеПараметры, "Организация");
	
	Если ОрганизацияОтбора = Неопределено Тогда
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоляОрганизация);
		Для Каждого Поле Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			Если ТипЗнч(Поле) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Поле.ЛевоеЗначение = ПолеОтбора Тогда
				Для Каждого ОперацияСравнения Из ОперацииСравнения Цикл
					Если Поле.ВидСравнения = ОперацияСравнения Тогда
						
						Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
							Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Поле.ИдентификаторПользовательскойНастройки Тогда
								ОрганизацияОтбора = ПользовательскаяНастройка.ПравоеЗначение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ОрганизацияОтбора = Неопределено И ЗначениеЗаполнено(Поле.ПравоеЗначение) Тогда
							ОрганизацияОтбора = Поле.ПравоеЗначение;
						КонецЕсли;
						
						Если ОрганизацияОтбора <> Неопределено Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ОрганизацияОтбора) = Тип("СписокЗначений") Тогда
		ПараметрыРасчета.СписокОрганизаций = ОрганизацияОтбора.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(ОрганизацияОтбора) = Тип("ФиксированныйМассив") Тогда
		ПараметрыРасчета.СписокОрганизаций = Новый Массив(ОрганизацияОтбора);
	Иначе
		ПараметрыРасчета.СписокОрганизаций = ОрганизацияОтбора;
	КонецЕсли;
	
	// Определение даты актуализации, до которой необходимо выполнить расчет себестоимости товаров для отчетов.
	ГраницаРасчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ФиксированныеПараметры, "ДатаОкончания");
	
	ГраницаРасчетаПоУмолчанию = КонецМесяца(ТекущаяДатаСеанса());
	Если ГраницаРасчета = Неопределено Тогда
		ПараметрПериодРасчета = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ИмяПоляПериода);
		Если ПараметрПериодРасчета <> Неопределено И ПараметрПериодРасчета.Использование Тогда
			ПериодАктуализации = ПараметрПериодРасчета.Значение;
			Если ТипЗнч(ПериодАктуализации) = Тип("СтандартныйПериод") Тогда
				ГраницаРасчета = ?(ЗначениеЗаполнено(ПериодАктуализации.ДатаОкончания), ПериодАктуализации.ДатаОкончания, ГраницаРасчетаПоУмолчанию);
				ГраницаРасчета = КонецМесяца(ГраницаРасчета);
			ИначеЕсли ТипЗнч(ПериодАктуализации) = Тип("Дата") Тогда
				ГраницаРасчета = КонецМесяца(ПериодАктуализации);
			Иначе
				ГраницаРасчета = ГраницаРасчетаПоУмолчанию;
			КонецЕсли;
		Иначе
			ГраницаРасчета = ГраницаРасчетаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	ПараметрыРасчета.ГраницаРасчета = ?(ГраницаРасчета > ГраницаРасчетаПоУмолчанию, ГраницаРасчетаПоУмолчанию, ГраницаРасчета);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ЗапуститьРасчетСебестоимостиТоваров(ПараметрыРасчета)
	
	РезультатЗапускаРасчета = Неопределено;
	
	Если ПараметрыРасчета.ВыполнятьРасчет Тогда
		
		СхемаРасчета = Документы.РасчетСебестоимостиТоваров.СхемаРасчета(ПараметрыРасчета.ГраницаРасчета, ПараметрыРасчета.СписокОрганизаций);
		Если СхемаРасчета.Количество() > 0 Тогда
			
			РезультатЗапускаРасчета = Новый Структура;
			РезультатЗапускаРасчета.Вставить("ДлительнаяОперация"     , Неопределено);
			РезультатЗапускаРасчета.Вставить("ЗаданиеВыполнено"       , Ложь);
			РезультатЗапускаРасчета.Вставить("НачалоПериодаРасчета"   , НачалоМесяца(СхемаРасчета[0].Дата));
			РезультатЗапускаРасчета.Вставить("ОкончаниеПериодаРасчета", КонецМесяца(ПараметрыРасчета.ГраницаРасчета));
			РезультатЗапускаРасчета.Вставить("СписокОрганизаций"      , ОбщегоНазначения.СкопироватьРекурсивно(СхемаРасчета[СхемаРасчета.Количество() - 1].Организации));
			РезультатЗапускаРасчета.Вставить("НомерЗадания"           , РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.ТекущийНомерЗадания());
			
			Если Не ПараметрыРасчета.ЗаданиеАктивно Тогда
				
				ПараметрыДлительнойОперации = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
				ПараметрыДлительнойОперации.КлючФоновогоЗадания = ПараметрыРасчета.КлючЗадания;
				ПараметрыДлительнойОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет себестоимости товаров для отчетов'");
				
				РезультатЗапускаРасчета.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
					"ОтчетыБольничнаяАптека.ВыполнитьРасчетСебестоимостиТоваров",
					ПараметрыРасчета,
					ПараметрыДлительнойОперации);
				
				РезультатЗапускаРасчета.ЗаданиеВыполнено = РезультатЗапускаРасчета.ДлительнаяОперация.Статус = "Выполнено";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатЗапускаРасчета;
	
КонецФункции

Процедура ВыполнитьРасчетСебестоимостиТоваров(Параметры, АдресХранилища) Экспорт
	
	Попытка
		Документы.РасчетСебестоимостиТоваров.РассчитатьВсе(Параметры.ГраницаРасчета, Параметры.СписокОрганизаций);
	Исключение
		ИмяСобытия = НСтр("ru = 'Актуализация себестоимости товаров для отчетов. Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаданиеРасчетаСебестоимостиАктивно(КлючЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ"     , КлючЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() > 0;
	
КонецФункции

#КонецОбласти // АктуализацияСебестоимостиТоваров

#КонецОбласти // СлужебныеПроцедурыИФункции
