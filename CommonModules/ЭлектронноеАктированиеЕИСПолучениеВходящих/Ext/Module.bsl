#Область ПрограммныйИнтерфейс

#Область УниверсальнаяПечатнаяФорма

Функция СоздатьРезультатПредставленияДокументаЕИС(ДвоичныеДанныеФайла, ПараметрыПредставления) Экспорт 
	
	Представление = СформироватьПечатнуюФормуДляЕИС(ДвоичныеДанныеФайла, ПараметрыПредставления);
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", Представление);
	РезультатФормирования.Вставить("Успех", Истина);
	
	Возврат РезультатФормирования;
	
КонецФункции

Процедура ПоставитьШтампЭлектроннойПодписи(ТабличныйДокумент, МассивПодписей, ПараметрыПечати) Экспорт
	
	// Штамп электронной подписи.
	Штамп = Новый ТабличныйДокумент;
	
	МакетЭП = Обработки.КриптографияБЭД.ПолучитьМакет(
	СтрШаблон("ШтампЭП_%1", ОбщегоНазначения.КодОсновногоЯзыка()));
	МакетЭП.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	КоличествоПодписей = МассивПодписей.Количество();
	
	Если КоличествоПодписей = 1 Тогда
		
		// Выводим подписи в виде штампов.
		
		Счетчик = 0;
		Для Каждого Подпись Из МассивПодписей Цикл
			
			Счетчик = Счетчик + 1;
			
			ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарный");
			ЗаполнитьОбластьШтампа(ОбластьШтамп, Подпись);
			
			Если Счетчик = 1 Тогда
				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампЭП" + Счетчик);
			Иначе
				
				// Определим ширину табличного документа, чтобы правильно разнести штампы, если их 2.
				Если ПараметрыПечати.Свойство("ШиринаДокумента") Тогда
					ШиринаДокумента = ПараметрыПечати.ШиринаДокумента;
				Иначе
					ШиринаДокумента = ШиринаТабличногоДокументаВСимволах(ТабличныйДокумент);
				КонецЕсли;
				
				ШиринаШтампа = ШиринаТабличногоДокументаВСимволах(ОбластьШтамп);
				ШиринаРазделителя = ШиринаДокумента - ШиринаШтампа * 2;
				
				Если ШиринаРазделителя > 0 Тогда
					Разделитель = МакетЭП.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарныйРазделитель");
					Разделитель.Область().ШиринаКолонки = ШиринаРазделителя;
					ОбщегоНазначенияБЭД.ПрисоединитьОбластьКТабличномуДокументу(Штамп, Разделитель, "Разделитель");
				КонецЕсли;
				
				ОбщегоНазначенияБЭД.ПрисоединитьОбластьКТабличномуДокументу(Штамп, ОбластьШтамп, "ШтампЭП" + Счетчик);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Выводим подписи в виде таблицы если
		// подписей более двух ИЛИ подписей две, но они от одной стороны.
		
		ОбластьШапка = МакетЭП.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШапка, "ШтампТабличныйШапка");
		
		Разделитель = МакетЭП.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");
		
		Счетчик = 0;
		Для Каждого Подпись Из МассивПодписей Цикл
			
			Счетчик = Счетчик + 1;
			
			ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
			ЗаполнитьОбластьШтампа(ОбластьШтамп, Подпись);
			
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампТабличныйСтрока");
			
			Если Счетчик <> КоличествоПодписей Тогда
				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, Разделитель, "ШтампТабличныйРазделитель");
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьПодвал = МакетЭП.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьПодвал, "ШтампТабличныйПодвал");
		
	КонецЕсли;
	
	Штамп.Область().СоздатьФорматСтрок();
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Штамп, "ШтампЭП");
	
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция ТипНоменклатурыФНСОбъектаЗакупки(ОбъектЗакупки)
	
	Результат = Перечисления.ТипыНоменклатурыФНС.ПустаяСсылка();
	
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Работа,
		Перечисления.ТипыНоменклатурыФНС.Работа);
	СоответствиеТипов.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга,
		Перечисления.ТипыНоменклатурыФНС.Услуга);
	СоответствиеТипов.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Товар,
		Перечисления.ТипыНоменклатурыФНС.Имущество);
	
	Тип = СоответствиеТипов[ОбъектЗакупки.Тип];
	
	Если ЗначениеЗаполнено(Тип) Тогда
		Результат = Тип;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ФорматыЭДО.ИнформацияОТовареИзФайла
Процедура НоменклатураКонтрактаЕИС(Объект, ТаблицаНоменклатуры) Экспорт
	
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("ДокументСсылка.СообщениеЭДО"));
	МассивТипЭД.Добавить(Тип("Структура"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ОписаниеТиповСтрока255 = ОбщегоНазначения.ОписаниеТипаСтрока(255);
	ОписаниеТиповСтрока110 = ОбщегоНазначения.ОписаниеТипаСтрока(110);
	ТипыНоменклатурыФНС = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатурыФНС");
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений();
	ТаблицаНоменклатуры.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаНоменклатуры.Колонки.Добавить("Наименование", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеХарактеристики", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("КодТовара", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("Артикул", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("БазоваяЕдиницаКод", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("БазоваяЕдиницаНаименование", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОписаниеТиповСтрока255);
	ТаблицаНоменклатуры.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОписаниеТиповСтрока255);
	
	ТаблицаНоменклатуры.Колонки.Добавить("КодОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ТаблицаНоменклатуры.Колонки.Добавить("КодКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(2000));
	
	ТаблицаНоменклатуры.Колонки.Добавить("КодМедицинскогоИзделия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаНоменклатуры.Колонки.Добавить("КодМНН", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаНоменклатуры.Колонки.Добавить("КодПоСправочникуЛП", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ТаблицаНоменклатуры.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(3000));
	ТаблицаНоменклатуры.Колонки.Добавить("ЭД", ОписаниеТиповЭД);
	ТаблицаНоменклатуры.Колонки.Добавить("Сопоставление");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТиповСтрока110);
	ТаблицаНоменклатуры.Колонки.Добавить("ТипНоменклатурыФНС", ТипыНоменклатурыФНС);
	
	УзелКонтракта = УзелДанныхКонтракта(Объект);
	ТоварыКонтракта = ЭлектронноеАктированиеЕИС.ИзвлечьСведенияОбОбъектахЗакупки(УзелКонтракта);
	
	Если НЕ ЭлектронноеАктированиеЕИС.СопоставлятьНоменклатуруКонтракта()
		ИЛИ ТоварыКонтракта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварыКонтракта Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Наименование = СтрокаТовара.Наименование;
		НоваяСтрока.БазоваяЕдиницаКод = СтрокаТовара.ОКЕИ.Код;
		НоваяСтрока.БазоваяЕдиницаНаименование = СтрокаТовара.ОКЕИ.Наименование;
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное = НоваяСтрока.БазоваяЕдиницаНаименование;
		
		НоваяСтрока.КодОКПД2 = СтрокаТовара.ОКПД2.Код;
		НоваяСтрока.НаименованиеОКПД2 = СтрокаТовара.ОКПД2.Наименование;
		
		НоваяСтрока.КодКТРУ = СтрокаТовара.КТРУ.Код;
		НоваяСтрока.НаименованиеКТРУ = СтрокаТовара.КТРУ.Наименование;
		
		НоваяСтрока.КодМедицинскогоИзделия = СтрокаТовара.КодМедицинскогоИзделия;
		
		СтавкаНДС = ЭлектронноеАктированиеЕИС.СтавкаНДСОбъектаЗакупки(
			СтрокаТовара);
		НоваяСтрока.СтавкаНДС = Строка(СтавкаНДС);
		НоваяСтрока.ТипНоменклатурыФНС = ТипНоменклатурыФНСОбъектаЗакупки(СтрокаТовара);
		
		КодПоСправочникуЛП = "";
		КодМНН = "";
		Если СтрокаТовара.СведенияОЛекарственномПрепарате <> Неопределено Тогда
			Если СтрокаТовара.СведенияОЛекарственномПрепарате.СписокМНН.Количество() > 0 Тогда
				МНН = СтрокаТовара.СведенияОЛекарственномПрепарате.СписокМНН[0];
				КодМНН = МНН.КодМНН;
				Если МНН.ПозицииПоТорговомуНаименованиюЛП.Количество() > 0 Тогда
					ПозицияПоМНН = МНН.ПозицииПоТорговомуНаименованиюЛП[0];	
					КодПоСправочникуЛП = ПозицияПоМНН.КодПоСправочникуЛП; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.КодМНН = КодМНН;
		НоваяСтрока.КодПоСправочникуЛП = КодПоСправочникуЛП;
		
		НоваяСтрока.ИД = ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(НоваяСтрока.Наименование, " ", ""))
		+ "#" + ВРег(СтрЗаменить(НоваяСтрока.КодОКПД2, " ", ""))
		+ "#" + ВРег(СтрЗаменить(НоваяСтрока.КодКТРУ, " ", ""))
		+ "#" + ВРег(СтрЗаменить(НоваяСтрока.КодМедицинскогоИзделия, " ", ""))
		+ "#" + ВРег(СтрЗаменить(НоваяСтрока.КодМНН, " ", ""))
		);
		
	КонецЦикла;
	
	// Т.к. в ИД заложена вся необходимая для поиска информации, можно обойтись без изменения механизма поиска,
	// но на случай, если это потребуется дополним структуру полями с кодами.
	// Далее нужно будет внести изменения в ОбменСКонтрагентамиСлужебный.НайтиСоответствиеНоменклатуры
	
	ФорматыЭДО.ДополнитьИнформациюОТовареДаннымиДляСопоставления(ТаблицаНоменклатуры, Ложь, Ложь);
	
	Для Каждого СтрокаТовара Из ТаблицаНоменклатуры Цикл
		СтрокаТовара.Сопоставление.Вставить("КодОКПД2", СтрокаТовара.КодОКПД2);
		СтрокаТовара.Сопоставление.Вставить("НаименованиеОКПД2", СтрокаТовара.НаименованиеОКПД2);
		СтрокаТовара.Сопоставление.Вставить("КодКТРУ", СтрокаТовара.КодКТРУ);
		СтрокаТовара.Сопоставление.Вставить("НаименованиеКТРУ", СтрокаТовара.НаименованиеКТРУ);
		СтрокаТовара.Сопоставление.Вставить("КодМедицинскогоИзделия", СтрокаТовара.КодМедицинскогоИзделия);
	КонецЦикла;
	
КонецПроцедуры

// Подобрать варианты сопоставления по натуральным ключам.
// 
// Параметры:
//  НаборНоменклатурыКонтрагентов - ТаблицаЗначений
//  ПроцентТочностиПоискаНаименований - Число
Процедура ПодобратьВариантыСопоставленияПоНатуральнымКлючам(НаборНоменклатурыКонтрагентов, ПроцентТочностиПоискаНаименований) Экспорт
	
	Если НаборНоменклатурыКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатурыКонтрагентов = Новый ТаблицаЗначений;
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("КодОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("КодКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("КодМедицинскогоИзделия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("КодМНН", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ДанныеНоменклатурыКонтрагентов.Колонки.Добавить("ЕдиницаИзмеренияКод", ОбщегоНазначения.ОписаниеТипаСтрока(25));//Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	НомерСтроки = 0;
	Для Каждого НоменклатураКонтрагентов Из НаборНоменклатурыКонтрагентов Цикл
		НомерСтроки = НомерСтроки + 1;
		
		МассивЧастейИД = СтрРазделить(НоменклатураКонтрагентов.Идентификатор, "#", Истина);
		Если МассивЧастейИД.Количество() = 5 Тогда
			КодОКПД2 = МассивЧастейИД[1];
			КодКТРУ = МассивЧастейИД[2];
			КодМедицинскогоИзделия = МассивЧастейИД[3];
			КодМНН = МассивЧастейИД[4];
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеНоменклатурыКонтрагентов.Добавить();
		
		СтрокаТаблицы.КодОКПД2 = КодОКПД2;
		СтрокаТаблицы.КодКТРУ = КодКТРУ;
		СтрокаТаблицы.КодМедицинскогоИзделия = КодМедицинскогоИзделия;
		СтрокаТаблицы.КодМНН = КодМНН;
		
		СтрокаТаблицы.НомерСтроки        = НомерСтроки;
		СтрокаТаблицы.Наименование = НоменклатураКонтрагентов.Наименование;
		СтрокаТаблицы.ЕдиницаИзмеренияКод   = НоменклатураКонтрагентов.ЕдиницаИзмеренияКод; 
	КонецЦикла;
	
	ИмяСправочникаНоменклатура = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Номенклатура");
	МетаданныеНоменклатуры = Метаданные.Справочники[ИмяСправочникаНоменклатура];
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеНоменклатурыКонтрагентов.Наименование КАК Наименование,
	|	ДанныеНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ДанныеНоменклатурыКонтрагентов.КодОКПД2 КАК КодОКПД2,
	|	ДанныеНоменклатурыКонтрагентов.КодКТРУ КАК КодКТРУ,
	|	ДанныеНоменклатурыКонтрагентов.КодМедицинскогоИзделия КАК КодМедицинскогоИзделия,
	|	ДанныеНоменклатурыКонтрагентов.КодМНН КАК КодМНН,
	|	ДанныеНоменклатурыКонтрагентов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеНоменклатурыКонтрагентов
	|ИЗ
	|	&ДанныеНоменклатурыКонтрагентов КАК ДанныеНоменклатурыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	" + ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КодОКПД2", МетаданныеНоменклатуры), "ВЫБОР
	|		КОГДА ВТДанныеНоменклатурыКонтрагентов.КодОКПД2 <> """"
	|				И СправочникНоменклатура.КодОКПД2.Код = ВТДанныеНоменклатурыКонтрагентов.КодОКПД2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ +", "") + "
	|	" + ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КТРУ", МетаданныеНоменклатуры), "ВЫБОР
	|		КОГДА ВТДанныеНоменклатурыКонтрагентов.КодКТРУ <> """"
	|				И СправочникНоменклатура.КТРУ.Код = ВТДанныеНоменклатурыКонтрагентов.КодКТРУ
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ +", "") + " 
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.Наименование = ВТДанныеНоменклатурыКонтрагентов.Наименование
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ЕдиницаИзмерения.Код = ВТДанныеНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесВыборки,
	|	ВТДанныеНоменклатурыКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	СправочникНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	ВТДанныеНоменклатурыКонтрагентов КАК ВТДанныеНоменклатурыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТДанныеНоменклатурыКонтрагентов.Наименование = СправочникНоменклатура.Наименование
	|			И (НЕ СправочникНоменклатура.ПометкаУдаления)
	|			И (НЕ СправочникНоменклатура.ЭтоГруппа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки УБЫВ
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	// БольничнаяАптека
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СправочникНоменклатура.ЕдиницаИзмерения.Код", "СправочникНоменклатура.ЕдиницаИзмерения.КодОКЕИ");
	// Конец БольничнаяАптека
	
	Запрос.УстановитьПараметр("ДанныеНоменклатурыКонтрагентов", ДанныеНоменклатурыКонтрагентов);
	
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаВесВыборки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаВесВыборки.Следующий() Тогда
			ВыборкаДетальныеЗаписи = ВыборкаВесВыборки.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоменклатураКонтрагентов = НаборНоменклатурыКонтрагентов[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
				
				ВариантСопоставления = СопоставлениеНоменклатурыКонтрагентовСлужебный.НовыйВариантСопоставленияНоменклатурыБЭД();
				ВариантСопоставления.НоменклатураИБ      = ВыборкаДетальныеЗаписи.Номенклатура;
				ВариантСопоставления.ШтрихкодСопоставлен = Ложь;
				ВариантСопоставления.АртикулСопоставлен  = Ложь;
				ВариантСопоставления.ПриоритетныйВариант = Истина;
				СопоставлениеНоменклатурыКонтрагентовСлужебный.ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления,
					НоменклатураКонтрагентов.ВариантыСопоставленияНоменклатурыБЭД, ВариантСопоставления.НоменклатураИБ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВстраиваниеВБЭД

// При получении параметров документа.
// 
// Параметры:
//  ПараметрыДокумента - Структура - см. ТранспортныеКонтейнерыЭДОСлужебный.ПараметрыДокумента.
Процедура ПриПолученииПараметровДокумента(ПараметрыДокумента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДокумента.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС
		ИЛИ ПараметрыДокумента.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС
		ИЛИ ПараметрыДокумента.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДПокупателяДляЕИС
		ИЛИ ПараметрыДокумента.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДПокупателяДляЕИС Тогда
		// Корректируем тип документа для приложений.
		ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС;
	КонецЕсли;
	
КонецПроцедуры

// Дополнить данными пакетов ЕИС.
// 
// Параметры:
//  МассивКонтейнеров - Массив
//  КлючиСинхронизации - Структура
//  КонтекстДиагностики - Структура
//  ВФоне - Булево
//  МассивПакетовЭД - Массив
//  КонтекстОперации - Структура
Процедура ДополнитьДаннымиПакетовЕИС(МассивКонтейнеров,
			КлючиСинхронизации,
			КонтекстДиагностики,
			ВФоне = Ложь,
			МассивПакетовЭД = Неопределено,
			КонтекстОперации = Неопределено) Экспорт
	
	Если МассивКонтейнеров = Неопределено Тогда
		МассивКонтейнеров = Новый Массив;
	КонецЕсли;
	
	ПолучитьНовыеДокументыЕИС(
		МассивКонтейнеров, КлючиСинхронизации, КонтекстДиагностики, КонтекстОперации);
	
КонецПроцедуры

// Вызывается из ТранспортныеКонтейнерыЭДО.СформироватьДанныеОбъектов.
// 
// Параметры:
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  КонтекстДиагностики - Неопределено,
//                        Структура
// 
// Возвращаемое значение:
//  Структура - тип описан в ТранспортныеКонтейнерыЭДО.ДанныеВходящегоОбъекта:
//   * ТипДокумента - Строка
//   * ИдентификаторСообщения - Строка
//   * ТребуетсяИзвещение - Булево
//   * ТребуетсяПодтверждение - Булево
//   * Метаданные - Неопределено
//   * ИдентификаторыСообщенийОснований - Массив из Строка
//   * ИдентификаторыДокументооборотовОснований - Массив из Строка
//   * СопроводительнаяЗаписка - Строка
//   * Карточка - Неопределено
//   * Ошибка - Неопределено,
//              Структура
Функция ДанныеВходящегоОбъекта(ТранспортныйКонтейнер,
			ДвоичныеДанныеФайла,
			КонтекстДиагностики = Неопределено) Экспорт
	
	// см. ТранспортныеКонтейнерыЭДО.ДанныеВходящегоОбъекта
	ДанныеКонтейнера = Новый Структура;
	ДанныеКонтейнера.Вставить("ТипДокумента");
	ДанныеКонтейнера.Вставить("ИдентификаторСообщения");
	ДанныеКонтейнера.Вставить("ТребуетсяИзвещение", Ложь);
	ДанныеКонтейнера.Вставить("ТребуетсяПодтверждение", Ложь);
	ДанныеКонтейнера.Вставить("Метаданные", Неопределено);
	ДанныеКонтейнера.Вставить("ИдентификаторыСообщенийОснований", Новый Массив);
	ДанныеКонтейнера.Вставить("ИдентификаторыДокументооборотовОснований", Новый Массив);
	ДанныеКонтейнера.Вставить("СопроводительнаяЗаписка", "");
	ДанныеКонтейнера.Вставить("Карточка", Неопределено);
	ДанныеКонтейнера.Вставить("Ошибка", Неопределено);
	ДанныеКонтейнера.Вставить("Доверенности", Неопределено);
		
	Организация = ТранспортныйКонтейнер.Организация;
	
	ИдентификаторЗаказчика = Неопределено;
	Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		НастройкиЗаказчика = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(Организация);
		Если ЗначениеЗаполнено(НастройкиЗаказчика) Тогда
			ИдентификаторЗаказчика = НастройкиЗаказчика.ИдентификаторУчастникаДокументооборота;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокументЗаказчика = ИдентификаторЗаказчика <> Неопределено
		И (СтрНайти(ТранспортныйКонтейнер.Получатель, ИдентификаторЗаказчика) > 0
		ИЛИ СтрНайти(ТранспортныйКонтейнер.Отправитель, ИдентификаторЗаказчика) > 0);
	
	МассивДокументовПакета = Новый Массив;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла.Записать(ИмяФайла);
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	ОбъектXML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	КодРегламента = "Nonformalized";
	КодТранзакции = "MainDocument";
	ЭтоПакет = Ложь;
	ДокументооборотИД = ТранспортныйКонтейнер.ИдентификаторДокументооборота;
	
	Если ЕстьСвойство(ЭД, "Body") Тогда
		ЭД = ЭД.Body.ФайлПакет;
	КонецЕсли;
	
	Если ЕстьСвойство(ЭД, "ИдТрПакет") Тогда
		ЭтоПакет = Истина;
		// У ЕИС в пакете по схеме может не быть документа
		Если НЕ ЭД.Установлено("Документ")
			ИЛИ ЗначениеНеобязательногоСвойства(ЭД, "СистОтпр") = СистемаОператораЭДО() Тогда
			Возврат ДанныеКонтейнера;
		КонецЕсли;
	КонецЕсли;
	
	УзелКонтракта = Неопределено;
	
	Если ЭтоЭлектронныйДокументКонтракта(ЭД) Тогда
		УзелКонтракта = УзелДанныхКонтракта(ЭД);
		ИдФайл = УзелКонтракта.id + "_" + УзелКонтракта.printForm.docRegNumber;
		ТипЭлементаВерсииЭД = "КонтрактЕИС";
		ТипДокумента = "ContractEIS";
		КодТранзакции = "MainDocument";
		КодРегламента = "Nonformalized";
	ИначеЕсли ЕстьСвойство(ЭД, "ИдФайл") Тогда
		Если ЭтоПакет Тогда
			ДвоичныеДанныеДокумента = Base64Значение(ЭД.Документ.Контент);
			Поток = ДвоичныеДанныеДокумента.ОткрытьПотокДляЧтения();
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьПоток(Поток);
			ДокументЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			ОбъектXML.Закрыть();
		Иначе
			ДокументЭД = ЭД;
		КонецЕсли;
		ИдФайл = ЭД.ИдФайл;
		
		ПараметрыЭД = ОпределитьПараметрыЭлектронногоДокумента(ДокументЭД.ИдФайл);
		ТипЭлементаВерсииЭД = ПараметрыЭД.ТипЭлементаВерсииЭД;
		ТипДокумента = ПараметрыЭД.ТипДокумента;
		КодТранзакции = ПараметрыЭД.КодТранзакции;
		
		Если ТипЭлементаВерсииЭД = "ИОП" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла, ДокументооборотИД); 
		ИначеЕсли ТипЭлементаВерсииЭД = "ПДП" Тогда
			// Подтверждение даты получения заказчика.
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "УОПУ" Тогда
			// Уведомление о принятии к учету.
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СвИзвУч.СведУчФайл.ИмяУчФайла, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "УУЭСФ" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СвУведУточ.СведПолФайл.ИмяПостФайла, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПокупателяУПД" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.ИнфПок.ИдИнфПрод.ИдФайлИнфПр, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПокупателяУКД" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.ИнфПок.ИдИнфПрод.ИдФайлИнфПр, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "ИзвещениеОбОшибкеЕИС" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СведФайл.ИдФайл, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "КвитанцияЕИС" Тогда
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СведФайл.ИдФайл, ДокументооборотИД);
		ИначеЕсли ТипЭлементаВерсииЭД = "ПДО" Тогда
			// Подтверждение даты отправки продавца.
			ДокументооборотИД = ПолучитьИдДокументооборотаПоИдФайла(
				ДокументЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла, ДокументооборотИД);
		КонецЕсли;
	КонецЕсли;

	Если (ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД())
		И ЭлектронноеАктированиеЕИС.РаспаковыватьПроектыТитуловПоставщикаПриПолученииЗаказчиком() Тогда
		Статус = ПолучитьСтатусДокумента(ДокументооборотИД);
		Если Статус = Перечисления.СтатусыДокументовЕИС.НаРассмотрении
			ИЛИ Статус = Перечисления.СтатусыДокументовЕИС.НаПодписании Тогда
			Если ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД() Тогда
				КодТранзакции = "InvoiceProjectEIS";
				ТипДокумента = "InvoiceProjectEIS";
			ИначеЕсли ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД() Тогда
				КодТранзакции = "CorrectionInvoiceProjectEIS";
				ТипДокумента = "CorrectionInvoiceProjectEIS";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКонтейнера.ТипДокумента = ТипДокумента;
	ДанныеКонтейнера.ИдентификаторСообщения = ТранспортныйКонтейнер.ИдентификаторПакета;
	
	// Определяем чей документ, заказчика или поставщика.
	ВходящийДокументЗаказчика = ЭтоДокументЗаказчика
		И ТранспортныйКонтейнер.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	Если ВходящийДокументЗаказчика Тогда
		ШапкаПакетаЭД = ПолучитьШапкуПакетаЕИСЗаказчика(?(ЭтоПакет = Истина, ДокументЭД, ЭД),
			ТранспортныйКонтейнер.Организация, ТранспортныйКонтейнер.Контрагент, , ДвоичныеДанныеФайла);
	Иначе
		ШапкаПакетаЭД = ПолучитьШапкуПакетаЕИС(?(ЭтоПакет = Истина, ДокументЭД, ЭД),
			ТранспортныйКонтейнер.Организация, ТранспортныйКонтейнер.Контрагент);
	КонецЕсли;
	
	Если ШапкаПакетаЭД.НеизвестныйТипЭлементаВерсии Тогда
		Возврат ДанныеКонтейнера;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШапкаПакетаЭД.Контрагент)
		И НЕ ВходящийДокументЗаказчика Тогда
		ОписаниеОшибки = НСтр("ru = 'Не определен контрагент электронного документа ЕИС.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	СуффиксТипаДокументаДокументПриемки = "InvoiceProjectEIS";
	
	КонтрагентКонтейнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортныйКонтейнер, "Контрагент");
	Если НЕ ЗначениеЗаполнено(КонтрагентКонтейнера) Тогда
		ТранспортныйКонтейнерОбъект = ТранспортныйКонтейнер.ПолучитьОбъект();
		ТранспортныйКонтейнерОбъект.Контрагент = ШапкаПакетаЭД.Контрагент;
		ТранспортныйКонтейнерОбъект.Записать();
	КонецЕсли;

	КарточкаЭД = НовоеОписаниеКарточкиПакета();
	КарточкаЭД.Дата = ШапкаПакетаЭД.Дата;
	КарточкаЭД.Номер = ШапкаПакетаЭД.Номер;
	КарточкаЭД.ТипДокумента = ТипДокумента;
	Если СтрЗаканчиваетсяНа(ТипДокумента, СуффиксТипаДокументаДокументПриемки) Тогда
		КарточкаЭД.ТребуетсяПодтверждение = Истина;
		ДанныеКонтейнера.ТребуетсяПодтверждение = Истина;
	КонецЕсли;
	КарточкаЭД.ИдентификаторСообщения = ТранспортныйКонтейнер.ИдентификаторПакета;
	КарточкаЭД.ИдентификаторОтправителя = ШапкаПакетаЭД.Отправитель;
	КарточкаЭД.ИдентификаторПолучателя = ШапкаПакетаЭД.Получатель;
	Если ЗначениеЗаполнено(ШапкаПакетаЭД.Контрагент) Тогда
		КарточкаЭД.НаименованиеКонтрагента = ШапкаПакетаЭД.Контрагент.Наименование;
		КарточкаЭД.ИННКонтрагента = ШапкаПакетаЭД.Контрагент.ИНН;
		КарточкаЭД.КППКонтрагента = ШапкаПакетаЭД.Контрагент.КПП;
		КарточкаЭД.ИННОрганизации = ТранспортныйКонтейнер.Организация.ИНН;
		КарточкаЭД.КППОрганизации = ТранспортныйКонтейнер.Организация.КПП;
	КонецЕсли;
	
	Если ТранспортныйКонтейнер.Получатель <> ШапкаПакетаЭД.Получатель
		Или ТранспортныйКонтейнер.Отправитель <> ШапкаПакетаЭД.Отправитель Тогда
		ТранспортныйКонтейнерОбъект = ТранспортныйКонтейнер.ПолучитьОбъект();
		ТранспортныйКонтейнерОбъект.Отправитель = ШапкаПакетаЭД.Отправитель;
		ТранспортныйКонтейнерОбъект.Получатель = ШапкаПакетаЭД.Получатель;
		ТранспортныйКонтейнерОбъект.Записать();
	КонецЕсли;
	
	ДанныеКонтейнера.Карточка = КарточкаЭД;
	
	СтруктураЭлектронногоДокумента = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДокументаКонтейнера();
	СтруктураЭлектронногоДокумента.ИдентификаторДокументооборота = ДокументооборотИД;
	СтруктураЭлектронногоДокумента.КодТранзакции = КодТранзакции;
	СтруктураЭлектронногоДокумента.КодРегламента = КодРегламента;
	
	СохранятьВложенияКонтракта = Ложь;
	ДвоичныеДанныеДокумента = Неопределено;
	ДвоичныеДанныеПодписи = Новый Массив;
	ЭлементВложений = Неопределено;
	ПутьКСсылкамВложений = "";
	ПутьКПодписиВложения = "";
	Если ЭтоПакет Тогда
		ДвоичныеДанныеДокумента = Base64Значение(ЭД.Документ.Контент);
		Если ЕстьСвойство(ЭД.Документ, "ПодписьДокумент") Тогда
			Если ТипЗнч(ЭД.Документ.ПодписьДокумент) = Тип("СписокXDTO") Тогда
				Для Каждого ЭДПодпись Из ЭД.Документ.ПодписьДокумент Цикл
					ДвоичныеДанныеПодписи.Добавить(Base64Значение(ЭДПодпись.Подпись));
				КонецЦикла;
			Иначе 
				ДвоичныеДанныеПодписи.Добавить(Base64Значение(ЭД.Документ.ПодписьДокумент.Подпись))
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСвойство(ЭД, "Вложен") Тогда
			ЭлементВложений = ЭД.Вложен;
			ПутьКСсылкамВложений = "Ссылк";
			ПутьКПодписиВложения = "ПодписьВлож/Подпись";
		КонецЕсли;
	Иначе
		ДвоичныеДанныеДокумента = ДвоичныеДанныеФайла;
		ЭлементПодписи = Неопределено;
		Если ТипЭлементаВерсииЭД = "ИОП" Тогда
			ЭлементПодписи = ЭД.Документ.СвИзвПолуч.СведПолФайл.ЭЦППолФайл;
		ИначеЕсли ТипЭлементаВерсииЭД = "ПДП" Тогда
			ЭлементПодписи = ЭД.Документ.СведПодтв.СведОтпрФайл.ЭЦППолФайл;
		ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПокупателяУПД" Тогда
			ЭлементПодписи = ЭД.ИнфПок.ИдИнфПрод.ЭП;
		ИначеЕсли ТипЭлементаВерсииЭД = "УОПУ" Тогда
			ЭлементПодписи = ЭД.Документ.СвИзвУч.СведУчФайл.ЭЦПУчФайл;
		ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПокупателяУКД" Тогда
			ЭлементПодписи = ЭД.ИнфПок.ИдИнфПрод.ЭП;
		ИначеЕсли ТипЭлементаВерсииЭД = "УУЭСФ" Тогда
			ЭлементПодписи = ЭД.Документ.СвУведУточ.СведПолФайл.ЭЦППолФайл;
		ИначеЕсли ТипЭлементаВерсииЭД = "КонтрактЕИС" Тогда
			Если УзелКонтракта.printForm.Свойства().Получить("signature") <> Неопределено Тогда
				ЭлементПодписи = УзелКонтракта.printForm.signature;
			КонецЕсли;
			Если УзелКонтракта.Свойства().Получить("scanDocuments") <> Неопределено
				И УзелКонтракта.scanDocuments.Свойства().Получить("attachment") <> Неопределено
				И СохранятьВложенияКонтракта Тогда
				ЭлементВложений = УзелКонтракта.scanDocuments.attachment;
				ПутьКСсылкамВложений = "url";
				ПутьКПодписиВложения = "cryptoSigns/signature";
			КонецЕсли;
		КонецЕсли;
		Если ЭлементПодписи <> Неопределено Тогда 
			Если ТипЗнч(ЭлементПодписи) = Тип("СписокXDTO") Тогда
				Для Каждого ЭДПодпись Из ЭлементПодписи Цикл
					ДвоичныеДанныеПодписи.Добавить(Base64Значение(ЭДПодпись));
				КонецЦикла;
			Иначе
				ДвоичныеДанныеПодписи.Добавить(Base64Значение(ЭлементПодписи));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ОСНОВНОЙ ДОКУМЕНТ
	СтруктураЭлектронногоДокумента.ОписаниеДанных.ИмяФайла = ИдФайл + ".xml";
	СтруктураЭлектронногоДокумента.ОписаниеДанных.ДвоичныеДанные = ДвоичныеДанныеДокумента;
	
	СчетчикПодписей = 0;
	Для Каждого ЭлементПодписи Из ДвоичныеДанныеПодписи Цикл
		СчетчикПодписей = СчетчикПодписей + 1;
		ОписаниеФайлаПодписи = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайлаПодписи.ИмяФайла = ИдФайл + ".xml.sig." + Строка(СчетчикПодписей);
		ОписаниеФайлаПодписи.ДвоичныеДанные = ЭлементПодписи; 
		СтруктураЭлектронногоДокумента.ПодписиОсновныхДанных.Добавить(ОписаниеФайлаПодписи);
	КонецЦикла;
	
	ИзвлечьПриложениеДляЕИС(ЭтоПакет,
		ЭтоДокументЗаказчика,
		КодРегламента,
		ДокументооборотИД,
		ЭД,
		МассивДокументовПакета,
		ШапкаПакетаЭД);
	
	ИзвлечьВложения(СтруктураЭлектронногоДокумента, ПутьКПодписиВложения, ПутьКСсылкамВложений, ЭлементВложений);
		
	МассивДокументовПакета.Добавить(СтруктураЭлектронногоДокумента);
	
	Если МассивДокументовПакета.Количество() > 0 Тогда
		ДанныеКонтейнера.Метаданные = Новый Структура("Документы", МассивДокументовПакета);
	КонецЕсли;
	
	Возврат ДанныеКонтейнера;
	
КонецФункции

// Получить новые документы ЕИС.
// 
// Параметры:
//  МассивКонтейнеров - Массив - Массив контейнеров
//  КлючиСинхронизации - Неопределено, Структура - Ключи синхронизации
//  КонтекстДиагностики - Неопределено, Структура - Контекст диагностики
//  КонтекстОперации - Неопределено, Структура - Контекст операции
Процедура ПолучитьНовыеДокументыЕИС(
	МассивКонтейнеров,
	КлючиСинхронизации = Неопределено,
	КонтекстДиагностики = Неопределено,
	КонтекстОперации = Неопределено) Экспорт
	
	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС()
		И НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		Возврат;
	КонецЕсли;
	
	Статусы = ЭлектронноеАктированиеЕИС.СтатусыПроверкиВозможностиВыполненияОперации();
	РезультатПроверки = ЭлектронноеАктированиеЕИС.ПроверитьВозможностьВыполненияОперации();
	
	ВидОперации = НСтр("ru = 'Получение документов из ЕИС'");
	Если НЕ РезультатПроверки.Выполнено Тогда
		Если РезультатПроверки.Статус = Статусы.ПараметрыАутентификацииНеЗаполнены Тогда
			ВидОшибки = ВидОшибкиНетДанныхАвторизации();
			ПодробноОбОшибке = НСтр("ru = 'Не заполнены параметры авторизации на сервере интернет-поддержки'");
			КраткоОбОшибке = НСтр("ru = 'Не заполнены параметры авторизации'");
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ВидОшибки,
				ПодробноОбОшибке,
				КраткоОбОшибке);
		Иначе
			ВидОшибки = ВидОшибкиНеВыполненыУсловияСопровождения();
			ПодробноОбОшибке = НСтр("ru = 'Не выполнены условия сопровождения для конфигурации'");
			КраткоОбОшибке = НСтр("ru = 'Условия сопровождения не выполнены'");
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ВидОшибки,
				ПодробноОбОшибке,
				КраткоОбОшибке);
		КонецЕсли;
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ЭлектронноеАктированиеЕИС);
		Возврат;
	КонецЕсли;
	
	ПолучитьНовыеДокументыПоставщика(МассивКонтейнеров, КонтекстОперации);
	
	ПолучитьНовыеДокументыЗаказчика(
		МассивКонтейнеров, КлючиСинхронизации, КонтекстДиагностики, КонтекстОперации);
		
КонецПроцедуры

// Параметры транспортного контейнера.
// 
// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  Отправитель - Строка
//  Организация - ОпределяемыйТип.Организация
//  Контрагент - СправочникСсылка.Контрагенты
//  ИДДокументооборота - Строка
//  ИдентификаторПакета - Строка
//  ВнешнийУИД - Строка
// 
// Возвращаемое значение:
//  Структура - Параметры транспортного контейнера
Функция ПараметрыТранспортногоКонтейнера(ИдентификаторУчетнойЗаписи, Отправитель,
			Организация, Контрагент, ИДДокументооборота, Знач ИдентификаторПакета, ВнешнийУИД) Экспорт
	
	Если СтрДлина(ИдентификаторПакета) > 32 Тогда
		ИдентификаторПакета = СтрЗаменить(ИдентификаторПакета, "-", "");
	КонецЕсли;
	
	ПараметрыКонтейнера = ТранспортныеКонтейнерыЭДО.ПараметрыКонтейнера(
		ИДДокументооборота,
		ВнешнийУИД,
		ИдентификаторПакета,
		Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС,
		ИдентификаторУчетнойЗаписи);
	ПараметрыКонтейнера.Отправитель = Отправитель;
	ПараметрыКонтейнера.Организация = Организация;
	ПараметрыКонтейнера.Контрагент = Контрагент;
	
	Возврат ПараметрыКонтейнера;
	
КонецФункции

// Заполнить параметры контейнера.
// 
// Параметры:
//  ПараметрыКонтейнера - Структура
//  ЗначенияРеквизитовКонтейнера - Структура
Процедура ЗаполнитьПараметрыКонтейнера(ПараметрыКонтейнера,
	ЗначенияРеквизитовКонтейнера) Экспорт
	
	ПараметрыКонтейнера.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС;
	ПараметрыКонтейнера.Получатель   = ЗначенияРеквизитовКонтейнера.Получатель;
	ПараметрыКонтейнера.Отправитель  = ЗначенияРеквизитовКонтейнера.Отправитель;
	ПараметрыКонтейнера.Организация  = ЗначенияРеквизитовКонтейнера.Организация;
	ПараметрыКонтейнера.Контрагент   = ЗначенияРеквизитовКонтейнера.Контрагент;
	ПараметрыКонтейнера.ВнешнийУИД   = ЗначенияРеквизитовКонтейнера.ВнешнийУИД;
	ПараметрыКонтейнера.ИдентификаторПакета =
		ЗначенияРеквизитовКонтейнера.ИдентификаторПакета;
	ПараметрыКонтейнера.ИдентификаторДокументооборота =
		ЗначенияРеквизитовКонтейнера.ИдентификаторДокументооборота;

КонецПроцедуры

// Прочитать контракт.
// 
// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  НовыйЭД - Структура
Процедура ПрочитатьКонтракт(ДанныеФайлаЭД, НовыйЭД) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КонтрактЕИС;
	УзелДанных = УзелДанныхКонтракта(ДанныеФайлаЭД);
	НовыйЭД.ИД = УзелДанных.id;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;
	
	ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов());
	
	СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
	СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;
	
	СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДата.ПолныйПуть = "Дата";
	СтрокаЭДДата.Значение = Дата(СтрЗаменить(Лев(УзелДанных.signDate, 10), "-", ""));
	
	СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДата.ПолныйПуть = "Номер";
	СтрокаЭДДата.Значение = УзелДанных.regNum;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;
	
КонецПроцедуры

// Прочитать приложение.
// 
// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  НовыйЭД - Структура
Процедура ПрочитатьПриложение(ДанныеФайлаЭД, НовыйЭД) Экспорт
	
	Если СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NSCHFDOPPR") > 0 Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС;
		НовыйЭД.ТипЭлементаВерсииЭД	= Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС;
	Иначе
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС;
		НовыйЭД.ТипЭлементаВерсииЭД	= Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС;
	КонецЕсли;
	НовыйЭД.ИД = ДанныеФайлаЭД.ИдПрилож;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;
	
	ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов());
	
	СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
	СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;
	
	СтрокаСуммаДокумента = НовыйЭД.Строки.Добавить();
	СтрокаСуммаДокумента.Реквизит = "СуммаДокумента";
	СтрокаСуммаДокумента.ЗначениеРеквизита = Неопределено;
	
	СтрокаКонтрагент = НовыйЭД.Строки.Добавить();
	СтрокаКонтрагент.Реквизит = "Контрагент";
	СтрокаКонтрагент.ЗначениеРеквизита = Неопределено;
	
	СтрокаОрганизация = НовыйЭД.Строки.Добавить();
	СтрокаОрганизация.Реквизит = "Организация";
	СтрокаОрганизация.ЗначениеРеквизита = Неопределено;
	
	СтрокаНомерДокумента = НовыйЭД.Строки.Добавить();
	СтрокаНомерДокумента.Реквизит = "НомерДокумента";
	СтрокаНомерДокумента.ЗначениеРеквизита = Неопределено;
	
	СтрокаДополнительныеРеквизиты = НовыйЭД.Строки.Добавить();
	СтрокаДополнительныеРеквизиты.Реквизит = "ПространствоИмен";
	СтрокаДополнительныеРеквизиты.ЗначениеРеквизита = Неопределено;
	
	СтрокаДатаДокументаОтправителя = НовыйЭД.Строки.Добавить();
	СтрокаДатаДокументаОтправителя.Реквизит = "ДатаДокументаОтправителя";
	СтрокаДатаДокументаОтправителя.ЗначениеРеквизита = Неопределено;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;
	
КонецПроцедуры

// Сохранить данные объекта ВБД.
// См. ИнтеграцияЭДО.СохранитьДанныеОбъекта
// 
// Параметры:
//  СтрокаДляЗагрузки - Строка
//  ДеревоРазбора - ДеревоЗначений
//  ПараметрыОбработки - Структура
//  НайденныйОбъект - СправочникСсылка, ДокументСсылка
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект) Экспорт
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
		НайденныйОбъект = НайтиСоздатьКонтрактЕИС(СтрокаДляЗагрузки.ЗначениеРеквизита,
			ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект);
	ИначеЕсли ЭлектронноеАктированиеЕИС.ЕстьПодсистемаДляЗаказчиков()
		И (ПараметрыОбработки.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
			ИЛИ ПараметрыОбработки.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД) Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
		НайденныйОбъект = МодульПодсистемы.НайтиСоздатьДокументПриемки(
			СтрокаДляЗагрузки.ЗначениеРеквизита,
			ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполнить из данных контракта.
// 
// Параметры:
//  Контракт - Структура - данные контракта, тип описан в ЭлектронноеАктированиеЕИС.НовыеДанныеКонтракта
//  Объект - СправочникСсылка.ГосударственныеКонтрактыЕИС
//  ЭтоКонтрактДляЗаказчика - Булево
Процедура ЗаполнитьИзДанныхКонтракта(Контракт, Объект, ЭтоКонтрактДляЗаказчика = Ложь) Экспорт
	
	Объект.Код = Контракт.НомерРеестровойЗаписи;
	Объект.НомерИГК = Контракт.ИГК;
	Объект.ВнутреннийИдентификаторЕИС = Контракт.Идентификатор;
	Объект.ИдентификационныйКодЗакупки = Контракт.ИдентификационныйКодЗакупки;
	Если НЕ ЗначениеЗаполнено(Контракт.НомерКонтракта) Тогда
		Объект.Номер = "б/н";
	Иначе
		Объект.Номер = Контракт.НомерКонтракта;
	КонецЕсли;
	
	// Заполнение номера ИГК.
	Если Контракт.ТребуетсяКазначейскоеСопровождение
		И НЕ ЗначениеЗаполнено(Контракт.ИГК) Тогда
			
		РезультатПолучения = ЭлектронноеАктированиеЕИС.СведенияОКонтрактеПоставщика(
			Объект.Организация, Контракт.НомерРеестровойЗаписи);
			
		Если НЕ РезультатПолучения.Выполнено Тогда
			Шаблон = НСтр("ru='Ошибка при получении данных контракта %1 в ЛК ЕИС: %2'");
			ОписаниеОшибки = СтрШаблон(Шаблон,
				Контракт.НомерРеестровойЗаписи,
				РезультатПолучения.ОписаниеОшибки);
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
		
		Если РезультатПолучения.Контракты.Количество() = 0 Тогда
			Шаблон = НСтр("ru='Данные контракта %1 не найдены в ЛК ЕИС.'");
			ОписаниеОшибки = СтрШаблон(Шаблон, Контракт.НомерРеестровойЗаписи);
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
		
		СодержимоеКонтракта = РезультатПолучения.Контракты[0];
		
		Объект.НомерИГК = СодержимоеКонтракта.ИГК;
		
	КонецЕсли;
		
	Объект.ДатаЗаключенияКонтракта = Контракт.ДатаЗаключенияКонтракта;
	Объект.ЕстьАвансы = Контракт.ЕстьАвансовыеПлатежиПоКонтракту;
	Объект.ЕстьАвансыПоЭтапам = Контракт.ЕстьАвансовыеПлатежиПоЭтапам;
	Объект.ПредметОтноситсяКРаботамПоСтроительству = Контракт.ПредметОтноситсяКРаботамПоСтроительству;
	Объект.Наименование =
		ЭлектронноеАктированиеЕИС.НаименованиеЭлементаСправочникаГосконтрактов(Объект);
	Объект.Статус = Контракт.ТекущееСостояние;
	Объект.ТребуетсяБанковскоеСопровождение = Контракт.ТребуетсяБанковскоеСопровождение;
	Объект.ТребуетсяКазначейскоеСопровождение = Контракт.ТребуетсяКазначейскоеСопровождение;
	Объект.ЭтоКонтрактГОЗ = Контракт.ЭтоГОЗ;
	Объект.НомерГОЗ = Контракт.НомерКонтрактаГОЗ;
	Объект.ПредметКонтракта = Контракт.ПредметКонтракта;
	
	Если ЗначениеЗаполнено(Контракт.ИдентификаторУчастникаДокументооборотаЗаказчика) Тогда
		Объект.ИдентификаторУчастникаДокументооборотаЗаказчика =
			Контракт.ИдентификаторУчастникаДокументооборотаЗаказчика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ДанныеКонтрагента = СведенияОКонтрагентеИзСведенийОКонтракте(Контракт, ЭтоКонтрактДляЗаказчика);
		Объект.Контрагент = ЭлектронноеАктированиеЕИС.
			НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента);
	КонецЕсли;
	Объект.ПолноеНаименованиеЗаказчика =
		Контракт.СведенияОЗаказчике.КодыОрганизации.ПолноеНаименование;
	Объект.ИННЗаказчика = Контракт.СведенияОЗаказчике.ИНН;
	Объект.КППЗаказчика = Контракт.СведенияОЗаказчике.КПП;
	Объект.ЕстьЛекарственныеПрепараты = Ложь;
	Объект.ЕстьРаботыИлиУслуги = Ложь;
	Объект.ЕстьТовары = Ложь;
	Объект.УказанаМаксимальнаяЦена = Контракт.УказанаМаксимальнаяЦена;
	Объект.НевозможноУказатьКоличество = Контракт.НевозможноУказатьКоличество;
	Объект.ФормулаЦены = Контракт.ИнформацияОЦенах.ФормулаЦены;
	Объект.ЭтоВалютныйКонтракт = Контракт.ЭтоВалютныйКонтракт;
	Объект.КодВалюты = Контракт.ИнформацияОЦенах.КодВалютыКонтракта;
	Объект.НаименованиеВалюты = Контракт.ИнформацияОЦенах.ИмяВалютыКонтракта;
	Объект.КурсВалюты = Контракт.ИнформацияОЦенах.КурсВалюты;
	Объект.НоминалВалюты = Контракт.ИнформацияОЦенах.НоминалВалюты;
	
	ЗаполнитьНоменклатуруКонтракта(Контракт, Объект);
	
	КоличествоСтрок = Объект.ОбъектыЗакупки.Количество();
	Если КоличествоСтрок <> 0 Тогда
		Объект.ЕстьПриобретениеЖилыхПомещений =
			Объект.ОбъектыЗакупки.Итог("ЭтоПриобретениеЖилыхПомещений") = КоличествоСтрок;
	КонецЕсли;
		
	Объект.ЭтапыИсполнения.Очистить();
	Для каждого Этап Из Контракт.ЭтапыИсполнения Цикл
		Строка = Объект.ЭтапыИсполнения.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Этап);
	КонецЦикла;
	
	Если Контракт.СведенияОПоставщиках.Количество() > 0 Тогда
		ДанныеПоставщика = Контракт.СведенияОПоставщиках[0];
		Объект.ПолноеНаименованиеПоставщика = ДанныеПоставщика.ПолноеНаименование;
		Объект.ИННПоставщика = ДанныеПоставщика.ИНН;
		Объект.КПППоставщика = ДанныеПоставщика.КПП;
		Если ЗначениеЗаполнено(ДанныеПоставщика.РеквизитыСчетаПоставщика) Тогда
			Объект.РеквизитыСчетаПоставщика.Очистить();
			Для Каждого ДанныеСчета Из ДанныеПоставщика.РеквизитыСчетаПоставщика Цикл
				Строка = Объект.РеквизитыСчетаПоставщика.Добавить();
				Строка.ИНН = ДанныеПоставщика.ИНН;
				Строка.КПП = ДанныеПоставщика.КПП;
				ЗаполнитьЗначенияСвойств(Строка, ДанныеСчета);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИС(Объект.Организация);
		Если ЗначениеЗаполнено(Настройки) Тогда
			Объект.ПолноеНаименованиеПоставщика = Настройки.НаименованиеОрганизации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// При определении способов обработки прикладного вида электронного документа.
// 
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ТипыДокументовЭДО
//  СписокОпераций - Структура
Процедура ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента(ВидЭД, СписокОпераций) Экспорт
	
	Если ВидЭД = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
		МетаданныеОснования = Метаданные.Справочники.Найти("ГосударственныеКонтрактыЕИС");
		Если МетаданныеОснования = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеОснования) Тогда
			Возврат;
		КонецЕсли;
		СписокОпераций.Добавить(МетаданныеОснования.Имя, МетаданныеОснования.Синоним);
	КонецЕсли;
	
КонецПроцедуры

// Значения XDTOПо пути.
// 
// Параметры:
//  ОбъектXDTO - Произвольный
//  Путь - Строка
//  РазделительПути - Строка
// 
// Возвращаемое значение:
//  Массив - Значения XDTOПо пути
Функция ЗначенияXDTOПоПути(ОбъектXDTO, Путь, РазделительПути = "/") Экспорт
	
	МассивЗначений = Новый Массив;
	МассивПути = СтрРазделить(Путь, РазделительПути);
	
	ЗначенияXDTOПоПутиРекурсивно(ОбъектXDTO, МассивПути, 0, МассивЗначений);
	
	Возврат МассивЗначений;
	
КонецФункции

// При определении используемых типов электронных документов.
// см. ИнтеграцияЭДО.ИспользуемыеТипыДокументов()
// 
// Параметры:
//  АктуальныеТипы - Соответствие
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипы) Экспорт
	
	Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.КонтрактЕИС, Истина, Ложь);
	КонецЕсли;
	
	Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД, Истина, Ложь);
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(
			АктуальныеТипы, Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияЭДО.СписокОперацийТипаДокумента
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт

	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
		СпособыОтраженияВУчете.Добавить("ГосударственныеКонтрактыЕИС", НСтр("ru = 'Государственный контракт ЕИС'"), Истина);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД Тогда
		СпособыОтраженияВУчете.Добавить("ДокументПриемкиЕИС", НСтр("ru = 'Документ о приемке из ЕИС'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// При распознании документа.
// см. Документы.ЭлектронныйДокументВходящийЭДО.Формы.ФормаПросмотра
// 
// Параметры:
//  ВидСообщения - Структура
//  ЭлементСхемы - Структура
Процедура ПриРаспознанииДокумента(ВидСообщения, ЭлементСхемы) Экспорт
	
	Если ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
		ИЛИ ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
		ИЛИ ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД Тогда
		ЭлементСхемы.ФормированиеПоОбъектуУчета = Истина;
		ЭлементСхемы.РаспознаниеВыполнено = Истина;
		ЭлементСхемы.Распознан = Истина;
	ИначеЕсли ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС
		Или ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОбОшибкеЕИС
		Или ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.КвитанцияЕИС Тогда
		ЭлементСхемы.ФормированиеПоОбъектуУчета = Ложь;
		ЭлементСхемы.РаспознаниеВыполнено = Истина;
		ЭлементСхемы.Распознан = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыУниверсальнойПечатнойФормы

Функция СформироватьПечатнуюФормуДляЕИС(ДанныеФайла, ПараметрыПечати)
	
	Поток = ДанныеФайла.ОткрытьПотокДляЧтения();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Результат = Неопределено;
	
	Если Результат = Неопределено Тогда
		Если ПараметрыПечати.ПрикладнойТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
			ОриентацияСтраницыТД = ОриентацияСтраницы.Ландшафт;
		Иначе
			ОриентацияСтраницыТД = ОриентацияСтраницы.Портрет;
		КонецЕсли;
		
		Результат = Новый ТабличныйДокумент;
		Результат.ОриентацияСтраницы = ОриентацияСтраницыТД;
		
		Для НомерКолонки = 1 По КоличествоКолонокПечатнойФормыДляЕИС() Цикл
			Результат.Область(, НомерКолонки, , НомерКолонки).ШиринаКолонки = ШиринаКолонкиПечатнойФормыЕИС(ОриентацияСтраницыТД);	
		КонецЦикла;
		
		Результат.Область(2, 1, 2, КоличествоКолонокПечатнойФормыДляЕИС()).Объединить();
		ОформитьЗаголовокТД(Результат, 0, 2, 1, ПараметрыПечати.ПрикладнойТипДокумента);
		
		МассивНеВыводить = Новый Массив;
		// Подпись выводим штампом.
		МассивНеВыводить.Добавить("signature");
		МассивНеВыводить.Добавить("ЭЦПУчФайл");
		// Это справочная информация, можно не выводить (или вывести в отдельную таблицу).
		МассивНеВыводить.Добавить("drugPurchaseObjectInfo");
		
		ИмяОбластиМакетаИмен = ИмяЗначенияПеречисления(ПараметрыПечати.ПрикладнойТипДокумента);
		Результат = СформироватьТабличныйДокументПоXDTO(ОбъектXDTO, ИмяОбластиМакетаИмен, Результат, 4, 1, МассивНеВыводить);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьОбластьШтампа(Область, Подпись)
	
	Сертификат = Новый СертификатКриптографии(Подпись.Сертификат.Получить());
	
	Шаблон = НСтр("ru='с %1 по %2'");
	СрокДействия = СтрШаблон(Шаблон, Сертификат.ДатаНачала, Сертификат.ДатаОкончания);
	
	ОтметкаВерна   = НСтр("ru='Подпись верна'");
	ОтметкаНеВерна = НСтр("ru='Подпись не верна'");
	ТекстОтметки = ?(Подпись.ПодписьВерна, ОтметкаВерна, ОтметкаНеВерна);
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ДатаПодписи",         Подпись.ДатаПодписи);
	ЗначенияПараметров.Вставить("Организация",         Сертификат.Субъект.CN);
	ЗначенияПараметров.Вставить("НомерСертификата",    Сертификат.СерийныйНомер);
	ЗначенияПараметров.Вставить("ВыдалСертификат",     Сертификат.Издатель.CN);
	ЗначенияПараметров.Вставить("ВладелецСертификата", Подпись.КомуВыданСертификат);
	ЗначенияПараметров.Вставить("СрокДействия",        СрокДействия);
	ЗначенияПараметров.Вставить("ТекстОтметки",        ТекстОтметки);
	
	Область.Параметры.Заполнить(ЗначенияПараметров);
	
КонецПроцедуры

Функция СтатусыОтправок(Организация, ЭтоСтатусыЗаказчика = Ложь)

	// Статусы
	ЗапросОтправок = Новый Запрос;
	ЗапросОтправок.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияЭД.ЭлектронныйДокумент.Организация КАК Организация,
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	СостоянияЭД.ЭлектронныйДокумент.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
	|	СостоянияЭД.ЭлектронныйДокумент.Контрагент КАК Контрагент,
	|	СостоянияЭД.ДатаИзменения КАК ДатаОтправки,
	|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныеФайлПакета,
	|	ПакетЭДПрисоединенныеФайлы.Наименование КАК ПрисоединенныеФайлПакетаНаименование,
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭДПрисоединенныеФайл,
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Наименование КАК НаименованиеФайлаКонтейнера
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО СостоянияЭД.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО (СообщениеЭДО.Ссылка = ОбъектыТранспортныхКонтейнеровЭДО.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|		ПО (СообщениеЭДО.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО (СостоянияЭД.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК
	|			ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	СостоянияЭД.Состояние = &СостояниеВерсииЭД
	|	И СостоянияЭД.ЭлектронныйДокумент.Организация = &Организация
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента
	|	И СообщениеЭДО.ЭлектронныйДокумент.СпособОбмена = &СпособОбмена
	|	И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА";
	
	СостояниеВерсииЭДОбработкаНаСервереЕИС = СостояниеВерсииЭДОбработкаНаСервереЕИС();
	ЗапросОтправок.УстановитьПараметр("СостояниеВерсииЭД",
		СостояниеВерсииЭДОбработкаНаСервереЕИС);
	ЗапросОтправок.УстановитьПараметр("СпособОбмена",
		Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС);
		
	Если ЭтоСтатусыЗаказчика Тогда
		ЗапросОтправок.УстановитьПараметр("ТипЭлементаРегламента",
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	Иначе
		ЗапросОтправок.УстановитьПараметр("ТипЭлементаРегламента",
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	КонецЕсли;
	
	ЗапросОтправок.УстановитьПараметр("Организация", Организация);
	
	Возврат ЗапросОтправок.Выполнить().Выбрать();
	
КонецФункции

Функция СостояниеВерсииЭДОбработкаНаСервереЕИС()
	
	Возврат Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
	
КонецФункции

Функция ШиринаТабличногоДокументаВСимволах(ТабличныйДокумент)
	
	ШиринаВСимволах = 0;
	Для н = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		ШаблонАдресаОбласти = "R%1C%2";
		АдресОбласти = СтрШаблон(ШаблонАдресаОбласти, ТабличныйДокумент.ВысотаТаблицы - 1, н);
		Область = ТабличныйДокумент.Область(АдресОбласти);
		ШиринаВСимволах = ШиринаВСимволах + Область.ШиринаКолонки;
		
	КонецЦикла;
	
	Возврат ШиринаВСимволах;
	
КонецФункции

Функция КоличествоКолонокПечатнойФормыДляЕИС()
	
	Возврат 200;
	
КонецФункции

Функция СформироватьТабличныйДокументПоXDTO(ОбъектXDTO, ИмяОбластиМакетаИмен, ТабличныйДокумент = Неопределено, НомерСтрокиТД = 1, НомерКолонкиТД = 1, МассивНеВыводить = Неопределено, НомерСтрокиСписка = 0, КолонкиИнфо = Неопределено, Склеить = Ложь)
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	КоличествоКолонокПечатнойФормыДляЕИС = КоличествоКолонокПечатнойФормыДляЕИС();
	
	МассивОбъектовXDTO = Новый Массив;
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", "", ОбъектXDTO));
	Иначе
		Для Каждого ТекущееСвойство Из ОбъектXDTO.Свойства() Цикл
			Если МассивНеВыводить <> Неопределено И МассивНеВыводить.Найти(ТекущееСвойство.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъектXDTO = ОбъектXDTO[ТекущееСвойство.Имя];
			МассивОбъектовXDTO.Добавить(Новый Структура("Имя, Объект", ТекущееСвойство.Имя, ТекущийОбъектXDTO));
		КонецЦикла;
	КонецЕсли;
	
	НомерТекущегоСвойства = 0;
	Для Каждого ТекущийОбъектXDTO Из МассивОбъектовXDTO Цикл
		НомерТекущегоСвойства = НомерТекущегоСвойства + 1;
		// Список
		Если ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("СписокXDTO") Тогда
			// Название таблицы
			НомерСтрокиТД = НомерСтрокиТД + 1;
			НомерКолонкиТД = 1;
			ТекстЗаголовка = ТекстЗаголовкаПоИмениЗначения(ТекущийОбъектXDTO.Объект.ВладеющееСвойство.Имя, ИмяОбластиМакетаИмен);
			ОформитьЗаголовокТД(ТабличныйДокумент, 3, НомерСтрокиТД, НомерКолонкиТД, ТекстЗаголовка);
			// Сформируем шапку таблицы
			НомерСтрокиТД = НомерСтрокиТД + 1;		
			КолКолонок = 1;
			НомерКолонки = 1;
			ШиринаКолонки = КоличествоКолонокПечатнойФормыДляЕИС;
			Если ТипЗнч(ТекущийОбъектXDTO.Объект[0]) = Тип("ОбъектXDTO") Тогда
				КолонкиИнфоТекущ = СтруктураАтрибутовОбъектаРекурсивно(ТекущийОбъектXDTO.Объект, МассивНеВыводить);
				
				КолКолонок = КолонкиИнфоТекущ.Количество();
				ШиринаКолонки = Цел(КоличествоКолонокПечатнойФормыДляЕИС / КолКолонок);
				
				НомерКолонки = 0;
				Для Каждого КиЗ Из КолонкиИнфоТекущ Цикл
					НомерКолонки = НомерКолонки + 1;
					ПерваяЯчейкаКолонки = (НомерКолонки - 1) * ШиринаКолонки + 1;
					КолонкиИнфоТекущ[КиЗ.Ключ] = ПерваяЯчейкаКолонки;
					ОбластьКолонкаШапки = ТабличныйДокумент.Область(НомерСтрокиТД, ПерваяЯчейкаКолонки, НомерСтрокиТД, НомерКолонки * ШиринаКолонки);
					ОбластьКолонкаШапки.Объединить();
					ОбластьКолонкаШапки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					ОбластьКолонкаШапки.Обвести(Линия, Линия, Линия, Линия);
					ОбластьКолонкаШапки.Текст = ТекстЗаголовкаПоИмениЗначения(КиЗ.Ключ, ИмяОбластиМакетаИмен);
					Если СтрДлина(ОбластьКолонкаШапки.Текст) > 40 Тогда
						Примечание = ОбластьКолонкаШапки.Текст;
						ПозТочка = СтрНайти(ОбластьКолонкаШапки.Текст, ".");
						Если ПозТочка = 0 Тогда
							ОбластьКолонкаШапки.Текст = Лев(ОбластьКолонкаШапки.Текст, 37) + "...";
						Иначе
							ОбластьКолонкаШапки.Текст = Лев(ОбластьКолонкаШапки.Текст, ПозТочка - 1);
						КонецЕсли;
						ОбластьКолонкаШапки.Примечание.Текст = Примечание;
					КонецЕсли;
				КонецЦикла;
				НомерКолонкиТД = 1;
			КонецЕсли;
			// Пустые строки таблицы
			Для С = 1 По ТекущийОбъектXDTO.Объект.Количество() Цикл
				Для К = 1 По НомерКолонки Цикл
					НомерКолонкиТД = (НомерТекущегоСвойства - 1) * ШиринаКолонки + 1;
					ОбластьЗначенияКолонки = ТабличныйДокумент.Область(НомерСтрокиТД + С, (К - 1) * ШиринаКолонки + 1, НомерСтрокиТД + С, К * ШиринаКолонки);
					ОбластьЗначенияКолонки.Объединить();
					ОбластьЗначенияКолонки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					ОбластьЗначенияКолонки.Обвести(Линия, Линия, Линия, Линия);	
				КонецЦикла;
			КонецЦикла;
			// Строки таблицы
			НомерСтроки = 0;
			НомерКолонкиТД = 1;
			Для Каждого ЭлементСпискаXDTO Из ТекущийОбъектXDTO.Объект Цикл
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;
				СформироватьТабличныйДокументПоXDTO(ЭлементСпискаXDTO, ИмяОбластиМакетаИмен, ТабличныйДокумент, НомерСтрокиТД, НомерКолонкиТД, МассивНеВыводить, НомерСтроки, КолонкиИнфоТекущ, ?(НомерСтрокиСписка > 0, Истина, Склеить));
			КонецЦикла;
			// Объект
		ИначеЕсли ТипЗнч(ТекущийОбъектXDTO.Объект) = Тип("ОбъектXDTO") Тогда
			Если НомерСтрокиСписка = 0 Тогда
				НомерКолонкиТД = 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ТекстЗаголовка = ТекстЗаголовкаПоИмениЗначения(ТекущийОбъектXDTO.Имя, ИмяОбластиМакетаИмен);
				ОформитьЗаголовокТД(ТабличныйДокумент, 2, НомерСтрокиТД, НомерКолонкиТД, ТекстЗаголовка);
				НомерСтрокиТД = НомерСтрокиТД + 1;
			Иначе
				Если КолонкиИнфо.Свойство(ТекущийОбъектXDTO.Имя) Тогда
					НомерКолонкиТД = КолонкиИнфо[ТекущийОбъектXDTO.Имя]; 
				КонецЕсли;
			КонецЕсли;
			СформироватьТабличныйДокументПоXDTO(
				ТекущийОбъектXDTO.Объект,
				ИмяОбластиМакетаИмен,
				ТабличныйДокумент,
				НомерСтрокиТД,
				НомерКолонкиТД,
				МассивНеВыводить,
				НомерСтрокиСписка,
				КолонкиИнфо,
				?(НомерСтрокиСписка > 0, Ложь, Склеить));
		Иначе
			// Склеенный с предыдущим текст ячейки.
			Если Склеить И НомерТекущегоСвойства > 1 Тогда
				ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД).Текст = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД).Текст 
				+ ","
				+ ТекущийОбъектXDTO.Имя + ":"
				+ ТекущийОбъектXDTO.Объект;
				// Колонка строки
			ИначеЕсли НомерСтрокиСписка > 0 Тогда
				Если Склеить = Ложь Тогда
					Если КолонкиИнфо = Неопределено Тогда
						НомерКолонкиТД = 1;
					ИначеЕсли КолонкиИнфо.Свойство(ТекущийОбъектXDTO.Имя) = Ложь Тогда
						Продолжить;
					Иначе
						НомерКолонкиТД = КолонкиИнфо[ТекущийОбъектXDTO.Имя];
					КонецЕсли;
				КонецЕсли;
				ОбластьЗначенияКолонки = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД); 
				ОбластьЗначенияКолонки.Текст = ?(Склеить, ТекущийОбъектXDTO.Имя + ":", "") + ТекущийОбъектXDTO.Объект;
				// Отдельное значение ячейки
			Иначе
				НомерКолонкиТД = 1;
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ОбластьЗначения = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормыДляЕИС - 1);
				ОбластьЗначения.Объединить();
				ОбластьЗначения.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ОбластьЗначения.Текст = ТекущийОбъектXDTO.Объект;
				ОбластьЗначения.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				ОбластьЗначения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ОбластьЗначения.Шрифт = Новый Шрифт("Arial", 8, , Истина);
				// Подпись значения
				НомерСтрокиТД = НомерСтрокиТД + 1;
				ОбластьПодписиЗначения = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормыДляЕИС - 1);
				ОбластьПодписиЗначения.Объединить();
				ОбластьПодписиЗначения.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ОбластьПодписиЗначения.Текст = ТекстЗаголовкаПоИмениЗначения(ТекущийОбъектXDTO.Имя, ИмяОбластиМакетаИмен);
				ОбластьПодписиЗначения.Шрифт = Новый Шрифт("Arial", 7, Ложь);
				ОбластьПодписиЗначения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗаголовкаПоИмениЗначения(ИмяЗначения, ИмяОбластиМакетаИмен)
	
	Макет = Обработки.ЭлектронноеАктированиеЕИС.ПолучитьМакет("ЭД_ПриложениеЕИС_ru");
	
	ОбластьЯчеекМакета = Макет.Области.Найти(ИмяОбластиМакетаИмен);
	Если НЕ ЗначениеЗаполнено(ОбластьЯчеекМакета) Тогда
		ИмяОбластиОбщие = "Общие";
		ОбластьЯчеекМакета = Макет.Области.Найти(ИмяОбластиОбщие);
		Если НЕ ЗначениеЗаполнено(ОбластьЯчеекМакета) Тогда
			Возврат ИмяЗначения;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбластиОбщие);
		КонецЕсли;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбластиМакетаИмен);
	КонецЕсли;
	
	ОбластьНайдено = ОбластьМакета.НайтиТекст(ИмяЗначения, , ОбластьМакета.Область(1, 1, ОбластьМакета.ВысотаТаблицы, 1), Истина, Истина, Истина, Истина);
	
	Если ОбластьНайдено = Неопределено Тогда
		Возврат ИмяЗначения;
	Иначе
		Возврат ОбластьМакета.Область(ОбластьНайдено.Верх, 2).Текст;
	КонецЕсли;
	
КонецФункции

Процедура ОформитьЗаголовокТД(ТабличныйДокумент, УровеньЗаголовка, НомерСтрокиТД, НомерКолонкиТД, Текст)
	
	ОбластьЗаголовок = ТабличныйДокумент.Область(НомерСтрокиТД, НомерКолонкиТД, НомерСтрокиТД, НомерКолонкиТД + КоличествоКолонокПечатнойФормыДляЕИС() - 1);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьЗаголовок.Текст = Текст;
	Если УровеньЗаголовка = 0 Тогда
		ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 12, Истина);
		ОбластьЗаголовок.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ИначеЕсли УровеньЗаголовка = 1 Тогда
		ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Истина);
	ИначеЕсли УровеньЗаголовка = 2 Тогда
		ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Ложь);
	ИначеЕсли УровеньЗаголовка = 3 Тогда
		ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Ложь, Истина);
		ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

Функция ШиринаКолонкиПечатнойФормыЕИС(ОриентацияСтраницыТД)
	
	// 54.25 ед.ширины = 100 мм
	// 993 ед.высоты = 350 мм
	
	ШиринаА4ММ = ?(ОриентацияСтраницыТД = ОриентацияСтраницы.Портрет, 210, 297) - 1;
	
	СтандартноеПолеММ = 10;
	
	ШиринаКолонкиММ = (ШиринаА4ММ - 2 * СтандартноеПолеММ) / КоличествоКолонокПечатнойФормыДляЕИС();
	
	// Переведем в среднюю ширину символа и отбросим разряды (округление в меньшую сторону)
	Возврат Окр(ШиринаКолонкиММ / 100 * 54.25 - 0.005, 2);
	
КонецФункции

Функция ИмяЗначенияПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Возврат ИмяЗначенияПеречисления;
	
КонецФункции

#КонецОбласти

#Область МетодыСопоставлениеНоменклатуры

Функция ИдентификаторТовараПоСтроке(Знач СтрокаТовара, Знач МаксимальнаяДлина = Неопределено)
	
	Если Не ЗначениеЗаполнено(МаксимальнаяДлина) Тогда
		МаксимальнаяДлина = 110;
	КонецЕсли;
	
	Идентификатор = СтрокаТовара;
	Идентификатор = ВРег(Идентификатор);
	Идентификатор = СтрЗаменить(Идентификатор, " ", "");
	
	Длина = СтрДлина(Идентификатор);
	
	Если Длина > МаксимальнаяДлина Тогда
		
		Хэширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хэширование.Добавить(Идентификатор);
		
		ХешСтрока = Строка(Хэширование.ХешСумма);
		ХешСтрока = СтрЗаменить(ХешСтрока, " ", "");
		
		ДлинаХешСтроки = СтрДлина(ХешСтрока);
		
		Идентификатор = Лев(Идентификатор, МаксимальнаяДлина - ДлинаХешСтроки) + ХешСтрока;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеКонтрагентов

Функция ОпределитьКонтрагентаЕИС(ДанныеКонтрагента, ИдентификаторУчастника)
	
	Контрагент = ЭлектронноеАктированиеЕИС.
		НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Шаблон = НСтр("ru = 'Не удалось найти контрагента с ИНН %1 КПП %2.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, ДанныеКонтрагента.ИНН, ДанныеКонтрагента.КПП);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	КонтрагентыЕИС = РегистрыСведений.КонтрагентыЕИС.СоздатьМенеджерЗаписи();
	КонтрагентыЕИС.ИдентификаторУчастника = ИдентификаторУчастника;
	КонтрагентыЕИС.Прочитать();
	Если КонтрагентыЕИС.Выбран() ИЛИ КонтрагентыЕИС.Контрагент <> Контрагент Тогда
		КонтрагентыЕИС.ИдентификаторУчастника = ИдентификаторУчастника;
		КонтрагентыЕИС.Контрагент = Контрагент;
		КонтрагентыЕИС.Записать();
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхЗаказчика

// Вызывается при загрузке транспортный пакетов
// и при формировании данных объекта методом ДанныеВходящегоОбъекта
// при распаковке контейнеров.
// 
// Параметры:
//  ОбъектЭД - Произвольный
//  Организация - Произвольный - Организация
//  Контрагент - Неопределено, СправочникСсылка - Контрагент
//  ИдентификаторЗаказчика - Строка - Идентификатор заказчика
//  ДвоичныеДанныеДокумента - Неопределено, ДвоичныеДанные - Двоичные данные документа
// 
// Возвращаемое значение:
//  Структура - Получить шапку пакета ЕИСЗаказчика 
Функция ПолучитьШапкуПакетаЕИСЗаказчика(ОбъектЭД,
			Организация,
			Контрагент = Неопределено,
			ИдентификаторЗаказчика = "",
			ДвоичныеДанныеДокумента = Неопределено)
	
	Результат = Новый Структура("Организация, Входящий,
		|ИдФайл, Контрагент, Отправитель, Получатель, Направление, Дата, Номер,
		|ДокументОператора, НеизвестныйТипЭлементаВерсии,
		|ТипЭлементаВерсииЭД");

	Результат.Организация = Организация;
	Результат.Входящий = Истина;
	Результат.ИдФайл = "";
	Результат.НеизвестныйТипЭлементаВерсии = Ложь;
	Результат.ДокументОператора = Ложь;
	
	СведенияОКонтрагенте = Неопределено;
	
	Объект = ОбъектЭД;
	Если ТипЗнч(ОбъектЭД) = Тип("ДвоичныеДанные") Тогда
		ТекстПакета = ПолучитьСтрокуИзДвоичныхДанных(ОбъектЭД,
			 ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТекстПакета);
		Объект = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
	КонецЕсли;
	
	ТипЭлементаВерсииЭД = "";
	Если ЕстьСвойство(Объект, "ИдТрПакет") Тогда
		ТипЭлементаВерсииЭД = "ПакетЕИС";
		Источник = ЗначениеНеобязательногоСвойства(Объект, "СистОтпр");
		Если Источник = СистемаОператораЭДО() Тогда
			Результат.ДокументОператора = Истина;
			Возврат Результат;
		КонецЕсли;
	Иначе
		Если ЕстьСвойство(Объект, "ИдФайл") Тогда
			Результат.ИдФайл = Объект.ИдФайл;
			ПараметрыЭД = ОпределитьПараметрыЭлектронногоДокумента(Объект.ИдФайл);
			ТипЭлементаВерсииЭД = ПараметрыЭД.ТипЭлементаВерсииЭД;
		Иначе
			ОписаниеОшибки = НСтр("ru = 'Неизвестный формат документа ЕИС.'");
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторУчастника = "";
	Если ПустаяСтрока(ИдентификаторЗаказчика) Тогда
		НастройкиОбмена = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(Организация);
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
			Шаблон = НСтр("ru = 'Не заполнены настройки обмена с ЕИС для организации %1'");
			ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
		ИдентификаторУчастника = НастройкиОбмена.ИдентификаторУчастникаДокументооборота;
	Иначе
		ИдентификаторУчастника = ИдентификаторЗаказчика;
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = "ПакетЕИС" Тогда
		// RK - это личный кабинет заказчика.
		СистемаПолучателя = ЗначениеНеобязательногоСвойства(Объект, "СистПол");
		ЛичныйКабинетЗаказчика = "RK";
		Если НЕ ЗначениеЗаполнено(СистемаПолучателя) Тогда
			Если ЕстьСвойство(Объект, "ТипПрилож") Тогда
				Если Объект.ТипПрилож = "УПДПрод"
					ИЛИ Объект.ТипПрилож = "УКДПрод" Тогда
					СистемаПолучателя = ЛичныйКабинетЗаказчика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СистемаПолучателя = ЛичныйКабинетЗаказчика Тогда
			ИдентификаторУчастника = Объект.ИдПол;
		Иначе
			ИдентификаторУчастника = Объект.ИдОтпр;
		КонецЕсли;
		Контент = Base64Значение(Объект.Документ.Контент);
		ТекстДокумента = ПолучитьСтрокуИзДвоичныхДанных(Контент,
			 ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТекстДокумента);
		ДанныеДокумента = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
		Возврат ПолучитьШапкуПакетаЕИСЗаказчика(
			ДанныеДокумента, Организация, , ИдентификаторУчастника, Контент);
	ИначеЕсли ТипЭлементаВерсииЭД = "ИОП" Тогда
		// Извещение о получении.
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
		ИзвлечьСведенияОКонтрагентеИзИОП(ОбъектЭД);
	ИначеЕсли ТипЭлементаВерсииЭД = "ПДП" Тогда
		Результат.Отправитель = Объект.Документ.ПолДок.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "УОПУ" Тогда
		// Уведомление о принятии к учету.
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ПолИзв.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "УУЭСФ" Тогда
		// Уведомление об уточнении.
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУПД()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУКД() Тогда
		// Титул поставщика или покупателя.
		Результат.Отправитель = Объект.СвУчДокОбор.ИдОтпр;
		Результат.Получатель = Объект.СвУчДокОбор.ИдПол;
		Если ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД()
			ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД() Тогда
			ЭтоУКД = ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД();
			СведенияОКонтрагенте = ИзвлечьСведенияОПродавцеСЧФ(ОбъектЭД, ЭтоУКД);
			Если НЕ ЭтоУКД Тогда
				Результат.Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(
					ОбъектЭД.Документ.СвСчФакт.ДатаСчФ);
			Иначе
				Результат.Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(
					ОбъектЭД.Документ.СвКСчФ.ДатаКСчФ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭлементаВерсииЭД = "ПДО" Тогда
		// Подтверждение даты отправки.
		Результат.Отправитель = Объект.Документ.СвОтпрДок.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.СвПолДок.ИдУчастЭДО;
		СведенияОКонтрагенте = ИзвлечьСведенияОКонтрагентеИзПДО(
			ОбъектЭД, Результат.Отправитель = ИдентификаторУчастника);
	ИначеЕсли ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияОбОшибкеЕИС()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииКвитанцияЕИС() Тогда
		Результат.Отправитель = "";
		Результат.Получатель = ИдентификаторУчастника;
	Иначе
		Результат.НеизвестныйТипЭлементаВерсии = Истина;
		Возврат Результат;
	КонецЕсли;

	Если ПустаяСтрока(ИдентификаторУчастника) Тогда
		Шаблон = НСтр("ru = 'Не задан идентификатор участника документооборота организации %1.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	Если Результат.Получатель = ИдентификаторУчастника Тогда
		Результат.Направление = Перечисления.НаправленияЭДО.Входящий;
	Иначе
		Результат.Направление = Перечисления.НаправленияЭДО.Исходящий;
	КонецЕсли;
	
	Результат.Входящий = Результат.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыЕИС.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
		|ГДЕ
		|	КонтрагентыЕИС.ИдентификаторУчастника = &ИдентификаторУчастника");
		Если НЕ Результат.Входящий Тогда
			ИдентификаторКонтрагента = Результат.Получатель;
		Иначе
			ИдентификаторКонтрагента = Результат.Отправитель;
		КонецЕсли;
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторКонтрагента);
		ВыборкаКонтрагентыЕИС = Запрос.Выполнить().Выбрать();
		Если ВыборкаКонтрагентыЕИС.Следующий() Тогда
			Результат.Контрагент = ВыборкаКонтрагентыЕИС.Контрагент;
		Иначе
			// Создаем контрагента.
			Если ЗначениеЗаполнено(СведенияОКонтрагенте) Тогда
				Результат.Контрагент = ОпределитьКонтрагентаЕИС(СведенияОКонтрагенте,
					ИдентификаторКонтрагента);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат.Контрагент = Контрагент;
	КонецЕсли;

	Если ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУПД()
		ИЛИ ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУКД()
		ИЛИ ТипЭлементаВерсииЭД = "УУЭСФ" Тогда
		Результат.Входящий = Истина;
	КонецЕсли;
	
	Результат.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьНовыеДокументыЗаказчика(МассивКонтейнеров,
	КлючиСинхронизации = Неопределено,
	КонтекстДиагностики = Неопределено,
	КонтекстОперации = Неопределено)

	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат;
	КонецЕсли;
	
	МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		МодульПодсистемы.ТекстЗапросаПоНастройкамДляПолученияВходящих();
	
	ТаблицаНастроекОбменаЕИС = Запрос.Выполнить().Выгрузить();
	
	НеЗагруженныеОбъекты = Новый Массив;
	
	Для Каждого СтрокаНастройкаОбменаЕИС Из ТаблицаНастроекОбменаЕИС Цикл
		
		Если НЕ СтрокаНастройкаОбменаЕИС.ОбменВключен Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОрганизации = СтрокаНастройкаОбменаЕИС.ИдентификаторУчастникаДокументооборота;
		
		ПолучитьСведенияОЗаказчикеИПодписантах(СтрокаНастройкаОбменаЕИС);
		
		ПолучитьРезультатыОбработкиПакетов(МассивКонтейнеров,
			СтрокаНастройкаОбменаЕИС, Истина);
		
		ПолучитьДокументыЗаказчика(МассивКонтейнеров,
			КонтекстОперации,
			ИдентификаторОрганизации,
			СтрокаНастройкаОбменаЕИС,
			НеЗагруженныеОбъекты);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьСведенияОЗаказчикеИПодписантах(НастройкиОбмена)
	
	// Обновляем сведения о поставщике.
	РезультатЗапросаОЗаказчике = ЭлектронноеАктированиеЕИС.СведенияОПодписантахЗаказчика(
		НастройкиОбмена.Организация,
		НастройкиОбмена);
		
	Если НЕ РезультатЗапросаОЗаказчике.Выполнено Тогда
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Ошибка при получении данных заказчика из ЛК ЕИС'",
			КодОсновногоЯзыка);
		Комментарий = РезультатЗапросаОЗаказчике.ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , ,
			Комментарий);
		ВызватьИсключение(Комментарий);
	КонецЕсли;
	
	Сведения = РезультатЗапросаОЗаказчике.ИнформацияОПодписантах;
	Для каждого Подписант Из Сведения.Подписанты Цикл
		УстановитьПривилегированныйРежим(Истина);
		ЭлектронноеАктированиеЕИС.СохранитьПодписантаЗаказчика(НастройкиОбмена.Организация, Подписант);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

Процедура СохранитьСтатусДокумента(Идентификатор, Статус)
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрСтатусов = РегистрыСведений.СтатусыДокументовЕИС.СоздатьМенеджерЗаписи();
	РегистрСтатусов.Идентификатор = Идентификатор;
	РегистрСтатусов.Статус = Статус;
	РегистрСтатусов.Записать();
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Функция ПолучитьСтатусДокумента(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыДокументовЕИС.Идентификатор,
	|	СтатусыДокументовЕИС.Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕИС КАК СтатусыДокументовЕИС
	|ГДЕ
	|	СтатусыДокументовЕИС.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Статус;
	
КонецФункции

Функция ПроверитьОписаниеДокументаЗаказчика(ОписаниеДокумента)
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ОписаниеДокумента.Идентификатор) Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЕстьЭлектронныйДокументСИдентификатором(ИдентификаторДокументооборота, Организация)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументВходящийЭДО.Организация = &Организация";
		
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("Организация", Организация);
		
	Выборка = Запрос.Выполнить();
	
	Возврат НЕ Выборка.Пустой();
		
КонецФункции

Процедура ПолучитьДокументыЗаказчика(
			МассивКонтейнеров,
			КонтекстОперации,
			ИдентификаторОрганизации,
			СтрокаНастройкаОбменаЕИС,
			НеЗагруженныеОбъекты)
	
	Ошибки = Новый Массив;
	ИнтервалСмещенияВСекундах = 10 * 24 * 60 * 60;

	РаспаковыватьПроектыТитуловПоставщика =
		ЭлектронноеАктированиеЕИС.РаспаковыватьПроектыТитуловПоставщикаПриПолученииЗаказчиком();
	
	// Документы
	ПолученыВсеДокументы = Ложь;
	ДатаВремяЗапросаДокументов = Макс(
		СтрокаНастройкаОбменаЕИС.ДатаПоследнегоПолученияДокументов,
		ЭлектронноеАктированиеЕИС.СтартоваяДатаПолученияДокументовПоУмолчанию());
	ДатаКонечнаяПоДокументам = ТекущаяДатаСервераЕИСЗаказчика();
	ДатаКонечнаяЗапросаПоДокументам = ДатаКонечнаяПоДокументам;
	ДатаВремяЗапросаДокументов = Мин(ДатаВремяЗапросаДокументов, ДатаКонечнаяПоДокументам);
	
	СдвигатьДатуПоДокументам = Истина;
	ДатаСдвигаПоДокументам = ДатаВремяЗапросаДокументов;
	
	Пока НЕ ПолученыВсеДокументы Цикл
		Если СдвигатьДатуПоДокументам Тогда
			ДатаСдвигаПоДокументам = ДатаВремяЗапросаДокументов;
		КонецЕсли;
		ДатаКонечнаяЗапросаПоДокументам = Мин(ДатаКонечнаяПоДокументам,
			ДатаВремяЗапросаДокументов + ИнтервалСмещенияВСекундах);
		
		РезультатПолученияСпискаДокументов = ЭлектронноеАктированиеЕИС.СписокОбъектовЗаказчикаПоДатамИСведениямОПоставщике(
				СтрокаНастройкаОбменаЕИС.Организация,
				ДатаВремяЗапросаДокументов,
				ДатаКонечнаяЗапросаПоДокументам);
		Если НЕ РезультатПолученияСпискаДокументов.Выполнено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ошибка при получении документов заказчика из ЕИС в сфере закупок'",
				КодОсновногоЯзыка);
			Комментарий = РезультатПолученияСпискаДокументов.ОписаниеОшибки;
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			ВызватьИсключение(Комментарий);
		КонецЕсли;
		
		Если ДатаКонечнаяЗапросаПоДокументам < ДатаКонечнаяПоДокументам Тогда 
			ДатаВремяЗапросаДокументов = ДатаКонечнаяЗапросаПоДокументам + 1;
		Иначе
			Если СдвигатьДатуПоДокументам Тогда
				ДатаСдвигаПоДокументам = ДатаКонечнаяЗапросаПоДокументам;
			КонецЕсли;
			ПолученыВсеДокументы = Истина;
		КонецЕсли;
		
		МассивОписанийДокументов = РезультатПолученияСпискаДокументов.СписокОбъектов;
		Если МассивОписанийДокументов = Неопределено Тогда
			СдвигатьДатуПоДокументам = Ложь;
			Продолжить;
		КонецЕсли;
		
		ВидНеструктурированногоДокументаПоставщика = "elActUnstructuredSupplierTitle";
		ВидНеструктурированногоДокументаЗаказчика = "elActUnstructuredCustomerTitle";
		Для Каждого ОписаниеДокумента Из МассивОписанийДокументов Цикл

			Если ОписаниеДокумента.ВидДокумента = ВидНеструктурированногоДокументаПоставщика
				ИЛИ ОписаниеДокумента.ВидДокумента = ВидНеструктурированногоДокументаЗаказчика Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроверитьОписаниеДокументаЗаказчика(ОписаниеДокумента) Тогда
				СдвигатьДатуПоДокументам = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Получение данных документа.
			РезультатПолученияЭД = ЭлектронноеАктированиеЕИС.СведенияОбОбъектеЗаказчика(
				СтрокаНастройкаОбменаЕИС.Организация,
				ОписаниеДокумента.Идентификатор,
				ОписаниеДокумента.ВидДокумента);
			Если РезультатПолученияЭД.Выполнено = Ложь Тогда
				Ошибки.Добавить(РезультатПолученияЭД.ОписаниеОшибки);
				СдвигатьДатуПоДокументам = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если РезультатПолученияЭД.ДанныеОбъекта.ОтсутствуютДанныеПакета Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторДокументооборота = РезультатПолученияЭД.ДанныеОбъекта.ИдентификаторДокумента;
			ИдентификаторПакетаЕИС = РезультатПолученияЭД.ДанныеОбъекта.Идентификатор;
			ВнешнийУИД = РезультатПолученияЭД.ДанныеОбъекта.Идентификатор; 
			
			ДвоичныеДанныеДокумента = РезультатПолученияЭД.ДанныеОбъекта.ДвоичныеДанныеСодержимого;
			Если ДвоичныеДанныеДокумента = Неопределено Тогда
				ИмяСобытия = НСтр("ru = 'Отсутствуют данные документа ЕИС.'");
				ВызватьИсключение(ИмяСобытия);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИдентификаторДокументооборота) Тогда
				Продолжить;
			КонецЕсли;
			
			ШапкаПакетаЭД = ПолучитьШапкуПакетаЕИСЗаказчика(
				ДвоичныеДанныеДокумента, СтрокаНастройкаОбменаЕИС.Организация);
			ШапкаПакетаЭД.Дата = ОписаниеДокумента.ДатаДокумента;
				
			Если ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУПД()
				ИЛИ ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУКД() Тогда
				
				// Получили титул покупателя, проект титула поставщика следует распаковать.
				СтруктураПараметровПоиска = Новый Соответствие;
				СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",
					ИдентификаторДокументооборота);
				СтруктураПараметровПоиска.Вставить("Направление",
					Перечисления.НаправленияЭДО.Входящий);
				СтруктураПараметровПоиска.Вставить("Статус",
					Перечисления.СтатусыТранспортныхСообщенийБЭД.РаспакованДокументыНеОбработаны);
				
				КонтейнерТитулаПоставщика = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
				Если ЗначениеЗаполнено(КонтейнерТитулаПоставщика) Тогда
					
					// Меняем статус контейнера.
					РезультатИзмененияСтатуса = ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(
						КонтейнерТитулаПоставщика, Перечисления.СтатусыТранспортныхСообщенийБЭД.КРаспаковке);
					Если НЕ РезультатИзмененияСтатуса Тогда
						СдвигатьДатуПоДокументам = Ложь;
						ИмяСобытия = НСтр("ru = 'Не удалось изменить статус транспортного контейнера.'");
						ВызватьИсключение(ИмяСобытия);
					КонецЕсли;
					МассивКонтейнеров.Добавить(КонтейнерТитулаПоставщика);
					
				Иначе
					
					Если РаспаковыватьПроектыТитуловПоставщика Тогда
						// Создаем копию титула поставщика для того, чтобы распаковать его как учетный докумен.
						СоздатьКопиюКонтейнераТитулаПоставщика(ИдентификаторОрганизации,
							ИдентификаторДокументооборота,
							МассивКонтейнеров);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ (ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД()
				ИЛИ ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД())
				И НЕ ЕстьЭлектронныйДокументСИдентификатором(ОписаниеДокумента.ИдентификаторДокумента,
					СтрокаНастройкаОбменаЕИС.Организация) Тогда
				// Документ не является титулом поставщика, при этом сам титул поставщика в базе отсутствует.
				Продолжить;
			КонецЕсли;
			
			Если НЕ ШапкаПакетаЭД.Входящий
				ИЛИ ШапкаПакетаЭД.ДокументОператора
				ИЛИ ШапкаПакетаЭД.НеизвестныйТипЭлементаВерсии Тогда
				// Исходящие документы, документы оператора и неизвестные документы не загружаются.
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = ПолучитьДанныеЭД(ДвоичныеДанныеДокумента,
				ШапкаПакетаЭД,
				РезультатПолученияЭД.ДанныеОбъекта.ВидДокумента,
				РезультатПолученияЭД.ДанныеОбъекта.ИдентификаторДокумента,
				РезультатПолученияЭД.ДанныеОбъекта.Идентификатор,
				ШапкаПакетаЭД.ИдФайл,
				КонтекстОперации);
			
			ДанныеВходящегоЭД = СтруктураПараметров.ДанныеВходящегоЭД;
			ТранспортныйКонтейнер = ?(ДанныеВходящегоЭД = Неопределено,
				Неопределено, ДанныеВходящегоЭД.ТранспортныйКонтейнер);
			
			ИмяБезРасширения = "EIS_" + ИдентификаторПакетаЕИС;
			
			ПараметрыКонтейнера = ПараметрыТранспортногоКонтейнера(
					ИдентификаторОрганизации,
					ШапкаПакетаЭД.Отправитель,
					СтрокаНастройкаОбменаЕИС.Организация,
					ШапкаПакетаЭД.Контрагент,
					ИдентификаторДокументооборота, ИдентификаторПакетаЕИС, ВнешнийУИД);
			
			Если ЗначениеЗаполнено(ОписаниеДокумента.Статус) Тогда
				СохранитьСтатусДокумента(ИдентификаторДокументооборота, ОписаниеДокумента.Статус);
			КонецЕсли;
			
			Если (ОписаниеДокумента.Статус = Перечисления.СтатусыДокументовЕИС.ОтказаноПриПриемке
				ИЛИ ОписаниеДокумента.Статус = Перечисления.СтатусыДокументовЕИС.ОтказаноПриРассмотрении) Тогда
				// Не загружаем документы, по которым был отказ.
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеДокумента.Статус)
				И НЕ (ОписаниеДокумента.Статус = Перечисления.СтатусыДокументовЕИС.Подписано
				ИЛИ ОписаниеДокумента.Статус = Перечисления.СтатусыДокументовЕИС.ПодписаноСЧастичнойПриемкой)
				И НЕ РаспаковыватьПроектыТитуловПоставщика Тогда
				// Не подписанные документы поставщика не распаковываются.
				ПараметрыКонтейнера.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.РаспакованДокументыНеОбработаны;
			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
				// Направление в транспортном контейнере всегда входящие.
				ТранспортныйКонтейнер = ТранспортныеКонтейнерыЭДО.
					ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, ТранспортныйКонтейнер);
				Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
					ТранспортныеКонтейнерыЭДО.
						ДобавитьПрисоединенныйФайлКонтейнера(
							ТранспортныйКонтейнер,
							ДвоичныеДанныеДокумента,
							ИмяБезРасширения,
							"xml");
				КонецЕсли;
				МассивКонтейнеров.Добавить(ТранспортныйКонтейнер);
				ЗафиксироватьТранзакцию();
			Исключение
				СдвигатьДатуПоДокументам = Ложь;
				НеЗагруженныеОбъекты.Добавить(ВнешнийУИД);
				ОтменитьТранзакцию();
				КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ИмяСобытия = НСтр("ru = 'Сохранение транспортного контейнера документа ЕИС в сфере закупок'",
					КодЯзыка);
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
					ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	// Сдвигаем начальную дату получения документов
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписиНастройки = РегистрыСведений["НастройкиОбменаЕИСДляЗаказчиков"].СоздатьМенеджерЗаписи();
	МенеджерЗаписиНастройки.Организация = СтрокаНастройкаОбменаЕИС.Организация;
	МенеджерЗаписиНастройки.Прочитать();
	МенеджерЗаписиНастройки.ДатаПоследнегоПолученияДокументов = ДатаСдвигаПоДокументам;
	МенеджерЗаписиНастройки.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьКопиюКонтейнераТитулаПоставщика(
				ИдентификаторОрганизации,
				ИдентификаторДокументооборота,
				МассивКонтейнеров)
	
	// Создаем копию контейнера c титулом поставщика.
	СтруктураПараметровПоиска = Новый Соответствие;
	СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",
		ИдентификаторДокументооборота);
	СтруктураПараметровПоиска.Вставить("Направление",
		Перечисления.НаправленияЭДО.Входящий);
	СтруктураПараметровПоиска.Вставить("Статус",
		Перечисления.СтатусыТранспортныхСообщенийБЭД.Распакован);
	
	КонтейнерТитулаПоставщика = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
	
	СуффиксПодписанногоТитула = "_signed";
	СуффиксПакета = "sgn";
	ИдентификаторДокументооборотаТитула = ИдентификаторДокументооборота
		+ СуффиксПодписанногоТитула;
	СтруктураПараметровПоиска["ИдентификаторДокументооборота"] = ИдентификаторДокументооборотаТитула;
	
	КонтейнерТитулаПоставщикаПослеПодписи = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
	
	Если ЗначениеЗаполнено(КонтейнерТитулаПоставщика)
		И НЕ ЗначениеЗаполнено(КонтейнерТитулаПоставщикаПослеПодписи) Тогда
		// Изменяем значения идентификаторов документа.
		ИдентификаторДокументооборота = ИдентификаторДокументооборотаТитула;
		ИдентификаторПакетаПоставщика = КонтейнерТитулаПоставщика.ИдентификаторПакета + СуффиксПакета;
		ВнешнийУИДПоставщика = КонтейнерТитулаПоставщика.ВнешнийУИД + СуффиксПодписанногоТитула;
		ПараметрыКонтейнера = ПараметрыТранспортногоКонтейнера(
				ИдентификаторОрганизации,
				КонтейнерТитулаПоставщика.Отправитель,
				КонтейнерТитулаПоставщика.Организация,
				КонтейнерТитулаПоставщика.Контрагент,
				ИдентификаторДокументооборота,
				ИдентификаторПакетаПоставщика,
				ВнешнийУИДПоставщика);
		НовыйКонтейнер = ТранспортныеКонтейнерыЭДО.ЗаполнитьТранспортныйКонтейнер(
			ПараметрыКонтейнера);
		Контейнеры = Новый Массив();
		Контейнеры.Добавить(КонтейнерТитулаПоставщика);
		ФайлыКонтейнеров = ТранспортныеКонтейнерыЭДО.ПрисоединенныеФайлыКонтейнеров(Контейнеры);
		Файлы = ФайлыКонтейнеров[КонтейнерТитулаПоставщика];
		ФайлКонтейнера = Файлы[0];
		ИмяБезРасширения = ФайлКонтейнера.Наименование;
		ДвоичныеДанныеКонтейнера = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКонтейнера);
		ТранспортныеКонтейнерыЭДО.ДобавитьПрисоединенныйФайлКонтейнера(
				НовыйКонтейнер,
				ДвоичныеДанныеКонтейнера,
				ИмяБезРасширения,
				"xml");
		МассивКонтейнеров.Добавить(НовыйКонтейнер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолученияДанныхПоставщика

// Вызывается при загрузке транспортный пакетов
// и при формировании данных объекта методом ДанныеВходящегоОбъекта.
// 
// Параметры:
//  ОбъектЭД - Произвольный
//  Организация - Произвольный - Организация
//  Контрагент - Неопределено, СправочникСсылка - Контрагент
// 
// Возвращаемое значение:
//  Структура - Шапка пакета ЕИС.
Функция ПолучитьШапкуПакетаЕИС(ОбъектЭД, Организация, Контрагент = Неопределено)
	
	Результат = Новый Структура("Организация, Входящий,
		|ИдФайл, Контрагент, Отправитель, Получатель, Направление, Дата, Номер,
		|НеизвестныйТипЭлементаВерсии,
		|ТипЭлементаВерсииЭД");
		
	Результат.Организация = Организация;
	Результат.Входящий = Истина;
	Результат.ИдФайл = "";
	Результат.НеизвестныйТипЭлементаВерсии = Ложь;
	
	Объект = ОбъектЭД;
	Если ТипЗнч(ОбъектЭД) = Тип("ДвоичныеДанные") Тогда
		ТекстПакета = ПолучитьСтрокуИзДвоичныхДанных(ОбъектЭД,
			 ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТекстПакета);
		Объект = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
	КонецЕсли;
	
	ТипЭлементаВерсииЭД = "";
	ЭтоПакет = Ложь;
	Если ЕстьСвойство(Объект, "ИдТрПакет") Тогда
		ЭтоПакет = Истина;
		ТипЭлементаВерсииЭД = "ПакетЕИС";
	КонецЕсли;
	
	Если ЭтоЭлектронныйДокументКонтракта(Объект) Тогда
		// Контракт.
		УзелКонтракта = УзелДанныхКонтракта(Объект);
		Результат.Дата = ЗначениеНеобязательногоСвойства(УзелКонтракта, "signDate", "Дата");
		Результат.Номер = ЗначениеНеобязательногоСвойства(УзелКонтракта, "number");
		Результат.ИдФайл = УзелКонтракта.id + "_" + УзелКонтракта.printForm.docRegNumber;
		Результат.Направление = Перечисления.НаправленияЭДО.Входящий;
		Результат.Входящий = Истина;
		ТипЭлементаВерсииЭД = "КонтрактЕИС";
	ИначеЕсли НЕ ЭтоПакет Тогда
		ПараметрыЭД = ОпределитьПараметрыЭлектронногоДокумента(Объект.ИдФайл);
		ТипЭлементаВерсииЭД = ПараметрыЭД.ТипЭлементаВерсииЭД;
	КонецЕсли;
	
	Если ЕстьСвойство(Объект, "ИдФайл") Тогда
		Результат.ИдФайл = Объект.ИдФайл;
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = "ПакетЕИС" Тогда
		Если СтрНайти(Объект.ИдОтпр, "OPE") > 0 Тогда
			ИдентификаторыФайла = СтрРазделить(Объект.ИдФайл, "_");
			Результат.Отправитель = ИдентификаторыФайла[2];
		Иначе
			Результат.Отправитель = Объект.ИдОтпр;
		КонецЕсли;
		Результат.Получатель = Объект.ИдПол;
		ПараметрыПакета = ОпределитьПараметрыЭлектронногоДокумента(Объект.ИдФайл);
		ТипЭлементаВерсииЭД = ПараметрыПакета.ТипЭлементаВерсииЭД;
		Если Объект.ТипПрилож = "УПДПрод"
			ИЛИ Объект.ТипПрилож = "УКДПрод"
			ИЛИ ТипЭлементаВерсииЭД = "ИзвещениеОбОшибкеЕИС"
			ИЛИ ТипЭлементаВерсииЭД = "КвитанцияЕИС" Тогда
			Результат.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
			Результат.Входящий = Ложь;
			Возврат Результат;
		КонецЕсли;
	ИначеЕсли ТипЭлементаВерсииЭД = "ИОП" Тогда
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "ПДП" Тогда
		Результат.Отправитель = Объект.Документ.ПолДок.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "УОПУ" Тогда
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ПолИзв.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПокупателяУПД"
		ИЛИ ТипЭлементаВерсииЭД = "ИнформацияПокупателяУКД" Тогда
		Результат.Отправитель = Объект.СвУчДокОбор.ИдОтпр;
		Результат.Получатель = Объект.СвУчДокОбор.ИдПол;
	ИначеЕсли ТипЭлементаВерсииЭД = "УУЭСФ" Тогда
		Результат.Отправитель = Объект.Документ.УчастЭДО.ИдУчастЭДО;
		Результат.Получатель = Объект.Документ.ОтпрДок.ИдУчастЭДО;
	ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПоставщикаУПД" Тогда
		// Исходящий титул.
		Результат.Входящий = Ложь;
		Возврат Результат;
	ИначеЕсли ТипЭлементаВерсииЭД = "ИнформацияПоставщикаУКД" Тогда
		// Корректировка титула поставщика.
		Результат.Входящий = Ложь;
		Возврат Результат;
	ИначеЕсли ТипЭлементаВерсииЭД = "ИзвещениеОбОшибкеЕИС"
		ИЛИ ТипЭлементаВерсииЭД = "КвитанцияЕИС" Тогда
		Результат.Отправитель = "";
	ИначеЕсли ТипЭлементаВерсииЭД = "КонтрактЕИС" Тогда
		Результат.Отправитель = "";
	Иначе
		Результат.НеизвестныйТипЭлементаВерсии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Направление = Перечисления.НаправленияЭДО.Входящий;
	Результат.Входящий = Истина;
	НастройкиОбменаЕИС = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИС(Организация);
	Если НЕ ЗначениеЗаполнено(НастройкиОбменаЕИС) Тогда
		Шаблон = НСтр("ru = 'Не определены настройки обмена с ЕИС для организации %1.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	Если Результат.Отправитель = НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота Тогда
		Результат.Входящий = Ложь;
		Если ЭтоПакет Тогда
			Результат.Направление = Перечисления.НаправленияЭДО.Исходящий;
		Иначе
			Результат.Направление = Перечисления.НаправленияЭДО.Входящий;
			Результат.Входящий = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Входящий И Контрагент <> Неопределено Тогда
		Результат.Получатель = НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота;
		Результат.Контрагент = Контрагент;
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыЕИС.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
		|ГДЕ
		|	КонтрагентыЕИС.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ВыборкаКонтрагентыЕИС = Запрос.Выполнить().Выбрать();
		Если ВыборкаКонтрагентыЕИС.Следующий() Тогда
			Результат.Отправитель = ВыборкаКонтрагентыЕИС.ИдентификаторУчастника;	
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыЕИС.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
		|ГДЕ
		|	КонтрагентыЕИС.ИдентификаторУчастника = &ИдентификаторУчастника");
		Если Результат.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			ИдКонтрагента = Результат.Получатель;
		Иначе
			ИдКонтрагента = Результат.Отправитель;
		КонецЕсли;
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдКонтрагента);
		ВыборкаКонтрагентыЕИС = Запрос.Выполнить().Выбрать();
		Если ВыборкаКонтрагентыЕИС.Следующий() Тогда
			Результат.Контрагент = ВыборкаКонтрагентыЕИС.Контрагент;	
		КонецЕсли;
	КонецЕсли;
	
	Результат.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьНовыеДокументыПоставщика(МассивКонтейнеров, КонтекстОперации)

	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.РегистрационныйНомерЕРУЗ КАК РегистрационныйНомерЕРУЗ,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ТипОрганизации КАК ТипОрганизации,
	|	НастройкиОбменаЕИС.СведенияОПодписантах КАК СведенияОПодписантах,
	|	НастройкиОбменаЕИС.ДатаПоследнегоПолученияДокументов КАК ДатаПоследнегоПолученияДокументов,
	|	НастройкиОбменаЕИС.ДатаПоследнегоПолученияКонтрактов КАК ДатаПоследнегоПолученияКонтрактов,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС";
	
	ТаблицаНастроекОбменаЕИС = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНастройкаОбменаЕИС Из ТаблицаНастроекОбменаЕИС Цикл
		
		НастройкиОбменаСтруктура = ОбщегоНазначения.
			СтрокаТаблицыЗначенийВСтруктуру(СтрокаНастройкаОбменаЕИС);

		Если НЕ НастройкиОбменаСтруктура.ОбменВключен Тогда
			Продолжить;
		КонецЕсли;
		
		Организация = СтрокаНастройкаОбменаЕИС.Организация;
		
		НеЗагруженныеОбъекты = Новый Массив;
		
		// Обновляем сведения о поставщике.
		РезультатЗапросаОПоставщике = ЭлектронноеАктированиеЕИС.СведенияОПоставщикеИЕгоПодписантах(
			Организация,
			НастройкиОбменаСтруктура);
		Если НЕ РезультатЗапросаОПоставщике.Выполнено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ошибка при получении данных поставщика из ЛК ЕИС'",
				КодОсновногоЯзыка);
			Комментарий = РезультатЗапросаОПоставщике.ОписаниеОшибки;
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			ВызватьИсключение(Комментарий);
		КонецЕсли;
		СведенияОПоставщике = РезультатЗапросаОПоставщике.СведенияОПоставщике;
		Для каждого Подписант Из СведенияОПоставщике.Подписанты Цикл
			УстановитьПривилегированныйРежим(Истина);
			ЭлектронноеАктированиеЕИС.СохранитьПодписанта(Организация, Подписант);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		ИдентификаторОрганизации = СведенияОПоставщике.
			ИдентификаторУчастникаДокументооборота;

		ПолучитьКонтракты(МассивКонтейнеров,
			КонтекстОперации,
			ИдентификаторОрганизации,
			СтрокаНастройкаОбменаЕИС,
			НеЗагруженныеОбъекты);
		
		ПолучитьРезультатыОбработкиПакетов(МассивКонтейнеров,
			СтрокаНастройкаОбменаЕИС);

		ПолучитьДокументы(МассивКонтейнеров,
			КонтекстОперации,
			ИдентификаторОрганизации,
			СтрокаНастройкаОбменаЕИС,
			НеЗагруженныеОбъекты);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДокументы(
			МассивКонтейнеров,
			КонтекстОперации,
			ИдентификаторОрганизации,
			СтрокаНастройкаОбменаЕИС,
			НеЗагруженныеОбъекты)
	
	ИнтервалСмещенияВСекундах = 10 * 24 * 60 * 60;
	
	// Документы
	ПолученыВсеДокументы = Ложь;
	ДатаНачальнаяЗапросаПоДокументам = Макс(
		СтрокаНастройкаОбменаЕИС.ДатаПоследнегоПолученияДокументов,
		ЭлектронноеАктированиеЕИС.СтартоваяДатаПолученияДокументовПоУмолчанию());
	ДатаКонечнаяПоДокументам = ТекущаяДатаСервераЕИС();
	ДатаКонечнаяЗапросаПоДокументам = ДатаКонечнаяПоДокументам;
	ДатаНачальнаяЗапросаПоДокументам = Мин(ДатаНачальнаяЗапросаПоДокументам, ДатаКонечнаяПоДокументам);
	
	ДатаПоследнегоПолученияДокументов = ДатаНачальнаяЗапросаПоДокументам;
	ИмяСобытия = "";
	ДатаЗагруженногоДокумента = Дата(1, 1, 1);
	Пока НЕ ПолученыВсеДокументы Цикл
		
		ДатаПоследнегоПолученияДокументов = ДатаНачальнаяЗапросаПоДокументам;
		
		ДатаКонечнаяЗапросаПоДокументам = Мин(ДатаКонечнаяПоДокументам,
			ДатаНачальнаяЗапросаПоДокументам + ИнтервалСмещенияВСекундах);
		
		РезультатПолученияСпискаДокументов = ЭлектронноеАктированиеЕИС.
			СписокОбъектовПоставщикаПоДатамИСведениямОЗаказчике(
				СтрокаНастройкаОбменаЕИС.Организация,
				ДатаНачальнаяЗапросаПоДокументам,
				ДатаКонечнаяЗапросаПоДокументам);
		Если НЕ РезультатПолученияСпискаДокументов.Выполнено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ошибка при получении из ЕИС документов поставщика %1 за период с %2 по %3.'",
				КодОсновногоЯзыка);
			ИмяСобытия = ИмяСобытия + Символы.ПС + "%4";
			СтрокаДатаНачальная = Формат(ДатаНачальнаяЗапросаПоДокументам, "ДЛФ=D;");
			СтрокаДатаКонечная = Формат(ДатаКонечнаяЗапросаПоДокументам, "ДЛФ=D;");
			Комментарий = РезультатПолученияСпискаДокументов.ОписаниеОшибки;
			ИмяСобытия = СтрШаблон(ИмяСобытия,
				СтрокаНастройкаОбменаЕИС.РегистрационныйНомерЕРУЗ,
				СтрокаДатаНачальная,
				СтрокаДатаКонечная,
				Комментарий);
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			Прервать;
		КонецЕсли;
		
		МассивОписанийДокументов = РезультатПолученияСпискаДокументов.СписокОбъектов;
		Если МассивОписанийДокументов = Неопределено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ошибка при получении документов поставщика из ЕИС за период с %1 по %2'",
				КодОсновногоЯзыка);
			ИмяСобытия = СтрШаблон(ИмяСобытия,
				ДатаНачальнаяЗапросаПоДокументам,
				ДатаКонечнаяЗапросаПоДокументам);
			Комментарий = НСтр("ru = 'Список объектов не определен.'");
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			Прервать;
		КонецЕсли;
		
		ВидДокументаТитулПоставщика = "ON_NSCHFDOPPR";
		ВидНеструктурированногоДокументаПоставщика = "elActUnstructuredSupplierTitle";
		ВидНеструктурированногоДокументаЗаказчика = "elActUnstructuredCustomerTitle";
		ВидПодтверждениеДаты = "DP_PDPOL";
		ВидИзвещениеОПолучении = "DP_IZVPOL";
		ВидИзвещениеОПринятии = "DP_IZVUCH";
		ВидУКДПоставщика = "ON_NKORSCHFDOPPR";
		ВидУведомлениеОбУточнении = "DP_UVUTOCH";
		ВидУКДЗаказчика = "ON_NKORSCHFDOPPOK";
		ВидКвитанцияОбИзмененияСтатуса = "DP_KVITIZMSTATUS";
		МассивИсключаемыхВидов = Новый Массив;
		МассивИсключаемыхВидов.Добавить(ВидДокументаТитулПоставщика);
		МассивИсключаемыхВидов.Добавить(ВидНеструктурированногоДокументаПоставщика);
		МассивИсключаемыхВидов.Добавить(ВидНеструктурированногоДокументаЗаказчика);
		МассивИсключаемыхВидов.Добавить(ВидПодтверждениеДаты);
		МассивИсключаемыхВидов.Добавить(ВидИзвещениеОПолучении);
		МассивИсключаемыхВидов.Добавить(ВидИзвещениеОПринятии);
		МассивИсключаемыхВидов.Добавить(ВидУКДПоставщика);
		МассивИсключаемыхВидов.Добавить(ВидУведомлениеОбУточнении);
		МассивИсключаемыхВидов.Добавить(ВидУКДЗаказчика);
		МассивИсключаемыхВидов.Добавить(ВидКвитанцияОбИзмененияСтатуса);
		Для Каждого ОписаниеДокумента Из МассивОписанийДокументов Цикл
			
			Если НЕ МассивИсключаемыхВидов.Найти(ОписаниеДокумента.ВидДокумента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеДокумента.ВидДокумента = ВидДокументаТитулПоставщика
				ИЛИ ОписаниеДокумента.ВидДокумента = ВидНеструктурированногоДокументаПоставщика
				ИЛИ ОписаниеДокумента.ВидДокумента = ВидНеструктурированногоДокументаЗаказчика Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОписаниеДокумента.Идентификатор) Тогда
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ИмяСобытия = НСтр("ru = 'Не заполнен идентификатор эл.документа поставщика по гос.контракту.'",
					КодОсновногоЯзыка);
				Комментарий = НСтр("ru = 'Не задан идентификатор электронного документа в данных, полученных c сервера ЛК ЕИС'");
				ЗаписьЖурналаРегистрации(ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				Прервать;
			КонецЕсли;
			
			РезультатПолученияЭД = ЭлектронноеАктированиеЕИС.СведенияОбОбъектеПоставщика(
				СтрокаНастройкаОбменаЕИС.Организация,
				ОписаниеДокумента.Идентификатор,
				ОписаниеДокумента.ВидДокумента);
				
			Если НЕ РезультатПолученияЭД.Выполнено Тогда
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ИмяСобытия =
					НСтр("ru = 'Произошла ошибка при получении из ЕИС данных электронного документа вида %1 с ИД %2.'",
						КодОсновногоЯзыка);
				ИмяСобытия = ИмяСобытия + Символы.ПС + "%3";
				Комментарий = РезультатПолученияЭД.ОписаниеОшибки;
				ИмяСобытия = СтрШаблон(ИмяСобытия,
					ОписаниеДокумента.ВидДокумента,
					ОписаниеДокумента.Идентификатор,
					Комментарий);
				ЗаписьЖурналаРегистрации(ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				Прервать;
			КонецЕсли;
			
			Если РезультатПолученияЭД.ДанныеОбъекта.ОтсутствуютДанныеПакета Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеДокумента = РезультатПолученияЭД.ДанныеОбъекта.ДвоичныеДанныеСодержимого;
			Если ДвоичныеДанныеДокумента = Неопределено Тогда
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ИмяСобытия = НСтр("ru = 'Отсутствуют данные электронного документа из ЕИС с ИД %1'",
					КодОсновногоЯзыка);
				ИмяСобытия = СтрШаблон(ИмяСобытия, ОписаниеДокумента.Идентификатор);
				Комментарий = "";
				ЗаписьЖурналаРегистрации(ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				Прервать;
			КонецЕсли;
			
			ШапкаПакетаЭД = ПолучитьШапкуПакетаЕИС(
				ДвоичныеДанныеДокумента, СтрокаНастройкаОбменаЕИС.Организация);
			
			Если НЕ (ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД()
				ИЛИ ШапкаПакетаЭД.ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД())
				И НЕ ЕстьЭлектронныйДокументСИдентификатором(ОписаниеДокумента.ИдентификаторДокумента,
					СтрокаНастройкаОбменаЕИС.Организация) Тогда
				// Документ не является титулом поставщика, при этом сам титул поставщика в базе отсутствует.
				Продолжить;
			КонецЕсли;
				
			Если НЕ ШапкаПакетаЭД.Входящий
				ИЛИ ШапкаПакетаЭД.НеизвестныйТипЭлементаВерсии Тогда
				// Исходящие и неизвестные документы не загружаются.
				Продолжить;
			КонецЕсли;
			
			Если ШапкаПакетаЭД.Контрагент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = ПолучитьДанныеЭД(ДвоичныеДанныеДокумента,
				ШапкаПакетаЭД,
				РезультатПолученияЭД.ДанныеОбъекта.ВидДокумента,
				РезультатПолученияЭД.ДанныеОбъекта.ИдентификаторДокумента,
				РезультатПолученияЭД.ДанныеОбъекта.Идентификатор,
				ШапкаПакетаЭД.ИдФайл,
				КонтекстОперации);
			
			ДанныеВходящегоЭД = СтруктураПараметров.ДанныеВходящегоЭД;
			ТранспортныйКонтейнер = ?(ДанныеВходящегоЭД = Неопределено,
				Неопределено, ДанныеВходящегоЭД.ТранспортныйКонтейнер);
			
			ИДДокументооборота = РезультатПолученияЭД.ДанныеОбъекта.ИдентификаторДокумента;
			ИдентификаторПакетаЕИС = РезультатПолученияЭД.ДанныеОбъекта.Идентификатор;
			ВнешнийУИД = РезультатПолученияЭД.ДанныеОбъекта.Идентификатор; 
			
			ИмяБезРасширения = "EIS_" + ИдентификаторПакетаЕИС;
			
			ПараметрыКонтейнера = ПараметрыТранспортногоКонтейнера(
					ИдентификаторОрганизации,
					ШапкаПакетаЭД.Отправитель,
					СтрокаНастройкаОбменаЕИС.Организация,
					ШапкаПакетаЭД.Контрагент,
					ИДДокументооборота, ИдентификаторПакетаЕИС, ВнешнийУИД);
				
			НачатьТранзакцию();
			Попытка
				ТранспортныйКонтейнер = ТранспортныеКонтейнерыЭДО.
					ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, ТранспортныйКонтейнер);
				Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
					ТранспортныеКонтейнерыЭДО.
						ДобавитьПрисоединенныйФайлКонтейнера(
							ТранспортныйКонтейнер,
							ДвоичныеДанныеДокумента,
							ИмяБезРасширения,
							"xml");
				КонецЕсли;
				МассивКонтейнеров.Добавить(ТранспортныйКонтейнер);
				ЗафиксироватьТранзакцию();
			Исключение
				НеЗагруженныеОбъекты.Добавить(ВнешнийУИД);
				ОтменитьТранзакцию();
				КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ИмяСобытия = НСтр("ru = 'Ошибка при сохранении транспортного контейнера документа ЕИС в сфере закупок'",
					КодЯзыка);
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
					ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				Прервать;
			КонецПопытки;
			ДатаЗагруженногоДокумента = ОписаниеДокумента.ДатаДокумента;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяСобытия) Тогда
			Если ЗначениеЗаполнено(ДатаЗагруженногоДокумента) Тогда
				ДатаПоследнегоПолученияДокументов = ДатаЗагруженногоДокумента;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если ДатаКонечнаяЗапросаПоДокументам < ДатаКонечнаяПоДокументам Тогда 
			ДатаНачальнаяЗапросаПоДокументам = ДатаКонечнаяЗапросаПоДокументам + 1;
		Иначе
			ДатаПоследнегоПолученияДокументов = ДатаКонечнаяЗапросаПоДокументам;
			ПолученыВсеДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сдвигаем начальную дату получения документов
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписиНастройки = РегистрыСведений.НастройкиОбменаЕИС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиНастройки.Организация = СтрокаНастройкаОбменаЕИС.Организация;
	МенеджерЗаписиНастройки.Прочитать();
	МенеджерЗаписиНастройки.ДатаПоследнегоПолученияДокументов = ДатаПоследнегоПолученияДокументов;
	МенеджерЗаписиНастройки.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ВызватьИсключение(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтракты(МассивКонтейнеров,
			КонтекстОперации, ИдентификаторОрганизации, СтрокаНастройкаОбменаЕИС, НеЗагружено)
	
	// Контракты
	ДатаВремяЗапросаКонтрактов = Макс(
		СтрокаНастройкаОбменаЕИС.ДатаПоследнегоПолученияКонтрактов,
		ЭлектронноеАктированиеЕИС.СтартоваяДатаПолученияКонтрактовПоУмолчанию());
	ДатаКонечнаяПоКонтрактам = ТекущаяДатаСервераЕИС();
	ДатаКонечнаяЗапросаПоКонтрактам = ДатаКонечнаяПоКонтрактам;
	ДатаВремяЗапросаКонтрактов = Мин(ДатаВремяЗапросаКонтрактов, ДатаКонечнаяПоКонтрактам);
	
	ПолученыВсеКонтракты = Ложь;
	
	СдвигатьДатуПоКонтрактам = Истина;
	ДатаСдвигаПоКонтрактам = ДатаВремяЗапросаКонтрактов;

	СекундВ30Днях = 30 * 24 * 60 * 60;
	Пока Не ПолученыВсеКонтракты Цикл
		Если СдвигатьДатуПоКонтрактам = Истина Тогда
			ДатаСдвигаПоКонтрактам = ДатаВремяЗапросаКонтрактов;
		КонецЕсли;
		ДатаКонечнаяЗапросаПоКонтрактам = Мин(ДатаКонечнаяПоКонтрактам,
			ДатаВремяЗапросаКонтрактов + СекундВ30Днях);
		
		РезультатПолученияСпискаКонтрактов = ЭлектронноеАктированиеЕИС.
			СведенияОКонтрактахПоставщика(СтрокаНастройкаОбменаЕИС.Организация,
				ДатаВремяЗапросаКонтрактов,
				ДатаКонечнаяЗапросаПоКонтрактам,
				"",
				"");
		Если НЕ РезультатПолученияСпискаКонтрактов.Выполнено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ошибка при получении контрактов из ЕИС в сфере закупок'",
				КодОсновногоЯзыка);
			Комментарий = РезультатПолученияСпискаКонтрактов.ОписаниеОшибки;
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			ВызватьИсключение(Комментарий);
		КонецЕсли;
		
		Если ДатаКонечнаяЗапросаПоКонтрактам < ДатаКонечнаяПоКонтрактам Тогда 
			ДатаВремяЗапросаКонтрактов = ДатаКонечнаяЗапросаПоКонтрактам + 1;
		Иначе
			Если СдвигатьДатуПоКонтрактам Тогда
				ДатаСдвигаПоКонтрактам = ДатаКонечнаяЗапросаПоКонтрактам;
			КонецЕсли;
			ПолученыВсеКонтракты = Истина;
		КонецЕсли;
		
		МассивОписанийКонтрактов = РезультатПолученияСпискаКонтрактов.Контракты;
		
		Если МассивОписанийКонтрактов = Неопределено Тогда
			СдвигатьДатуПоКонтрактам = Ложь;
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеКонтракта Из МассивОписанийКонтрактов Цикл
			
			Если ОписаниеКонтракта.ЭтоЗакрытыйКонтракт Тогда
				// Пропускаем закрытые контракты.
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеЭлемента = ОписаниеКонтракта.ДвоичныеДанныеКонтракта;
			
			Если НЕ ОписаниеКонтракта.ДанныеКонтракта = Неопределено Тогда
				ДанныеКонтрагента = СведенияОКонтрагентеИзСведенийОКонтракте(
					ОписаниеКонтракта.ДанныеКонтракта);
				Контрагент = ОпределитьКонтрагентаЕИС(
					ДанныеКонтрагента,
					ОписаниеКонтракта.ИдентификаторУчастникаДокументооборотаЗаказчика);
				
				Отправитель = ОписаниеКонтракта.ИдентификаторУчастникаДокументооборотаЗаказчика;
				ШапкаПакетаЭД = Новый Структура;
				ШапкаПакетаЭД.Вставить("Организация", СтрокаНастройкаОбменаЕИС.Организация);
				ШапкаПакетаЭД.Вставить("Контрагент", Контрагент);
				ШапкаПакетаЭД.Вставить("Отправитель",
					ОписаниеКонтракта.ИдентификаторУчастникаДокументооборотаЗаказчика);
				ШапкаПакетаЭД.Вставить("Получатель", ИдентификаторОрганизации);
				ШапкаПакетаЭД.Вставить("Направление", Перечисления.НаправленияЭДО.Входящий);
				
				СтруктураПараметров = ПолучитьДанныеЭД(ДвоичныеДанныеЭлемента,
					ШапкаПакетаЭД,
					"CONTRACT",
					ОписаниеКонтракта.РеестровыйНомер,
					ОписаниеКонтракта.ВнешнийИдентификатор,
					"",
					КонтекстОперации);
				
				ДанныеВходящегоЭД = СтруктураПараметров.ДанныеВходящегоЭД;
				ТранспортныйКонтейнер = ?(ДанныеВходящегоЭД = Неопределено,
					Неопределено, ДанныеВходящегоЭД.ТранспортныйКонтейнер);
				
				ИДДокументооборота = ОписаниеКонтракта.РеестровыйНомер;
				ИдентификаторПакетаЕИС = ОписаниеКонтракта.Идентификатор;
				ВнешнийУИД = ОписаниеКонтракта.Идентификатор; 
				
				ИмяБезРасширения = "EIS_" + ИДДокументооборота;  
				
				ПараметрыКонтейнера = ПараметрыТранспортногоКонтейнера(
					ИдентификаторОрганизации,
					Отправитель,
					СтрокаНастройкаОбменаЕИС.Организация,
					Контрагент,
					ИДДокументооборота, ИдентификаторПакетаЕИС, ВнешнийУИД);
					
				НачатьТранзакцию();
				Попытка
					ТранспортныйКонтейнер = ТранспортныеКонтейнерыЭДО.ЗаполнитьТранспортныйКонтейнер(
						ПараметрыКонтейнера, ТранспортныйКонтейнер);
					Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
						ТранспортныеКонтейнерыЭДО.
							ДобавитьПрисоединенныйФайлКонтейнера(
								ТранспортныйКонтейнер,
								ДвоичныеДанныеЭлемента,
								ИмяБезРасширения,
								"xml");
					КонецЕсли;
					МассивКонтейнеров.Добавить(ТранспортныйКонтейнер);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					СдвигатьДатуПоКонтрактам = Ложь;
					НеЗагружено.Добавить(ВнешнийУИД);
					КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
					ИмяСобытия = НСтр("ru = 'Сохранение транспортного контейнера контракта ЕИС в сфере закупок'",
						КодЯзыка);
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
						ИнформацияОбОшибке);
					ЗаписьЖурналаРегистрации(ИмяСобытия,
						УровеньЖурналаРегистрации.Ошибка, , ,
						Комментарий);
					ВызватьИсключение;
				КонецПопытки;
			Иначе
				Шаблон = НСтр("ru = 'Отсутствует содержимое контракта РК %1'");
				ИмяСобытия = СтрШаблон(Шаблон, ОписаниеКонтракта.РеестровыйНомер);
				ВызватьИсключение(ИмяСобытия);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписиНастройки = РегистрыСведений.НастройкиОбменаЕИС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиНастройки.Организация = СтрокаНастройкаОбменаЕИС.Организация;
	МенеджерЗаписиНастройки.Прочитать();
	МенеджерЗаписиНастройки.ДатаПоследнегоПолученияКонтрактов = ДатаСдвигаПоКонтрактам;
	МенеджерЗаписиНастройки.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыПолученияДанных

Функция ПолучитьДанныеЭД(ДвоичныеДанные, ШапкаПакетаЭД, ВидДокумента,
	ИДДокументооборота, ИдентификаторПакета, ИдФайл, КонтекстОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеВходящегоЭД", Неопределено);
	
	ЭДНайден = Ложь;
	Если КонтекстОперации <> Неопределено И КонтекстОперации.Свойство("ЭДСсылка") Тогда
		ЭДСсылка = КонтекстОперации.ЭДСсылка;
		ЭДНайден = Истина;
	КонецЕсли;
	
	НастройкиСоглашения = Неопределено;
	
	Если ЭДНайден = Ложь Тогда
		Если ВидДокумента = "DP_PDPOL" Тогда
			
			СтруктураПараметровПоиска = Новый Соответствие;
			СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",  ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("ИдентификаторПакета",  ИдентификаторПакета);
			СтруктураПараметровПоиска.Вставить("Направление", ШапкаПакетаЭД.Направление);
			
			ЭДСсылка = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
			
		ИначеЕсли ВидДокумента = "DP_IZVPOL" ИЛИ ВидДокумента = "DP_IZVUCH" Тогда
			
			СтруктураПараметровПоиска = Новый Соответствие;
			СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",  ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("ИдентификаторПакета",  ИдентификаторПакета);
			СтруктураПараметровПоиска.Вставить("Направление", ШапкаПакетаЭД.Направление);
			
			ЭДСсылка = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
			
			ЭДНайден = (ЭДСсылка <> Неопределено);
			
		ИначеЕсли ВидДокумента = "CONTRACT" Тогда
			
			СтруктураПараметровПоиска = Новый Соответствие;
			СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота", ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("Направление", ШапкаПакетаЭД.Направление);
			
			ЭДСсылка = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
			ЭДНайден = (ЭДСсылка <> Неопределено);
			
		Иначе
			
			СтруктураПараметровПоиска = Новый Соответствие;
			СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",  ИДДокументооборота);
			СтруктураПараметровПоиска.Вставить("ИдентификаторПакета",  ИдентификаторПакета);
			СтруктураПараметровПоиска.Вставить("Направление", ШапкаПакетаЭД.Направление);

			ЭДСсылка = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
			ЭДНайден = (ЭДСсылка <> Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭДНайден Тогда
		
		ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭДСсылка,
			"Отправитель, Получатель, СпособОбменаЭД, Организация, Контрагент, ДоговорКонтрагента");
		
		НастройкиСоглашения = Новый Структура;
		НастройкиСоглашения.Вставить("СпособОбменаЭД",      ПараметрыФайлаЭД.СпособОбменаЭД);
		НастройкиСоглашения.Вставить("Организация",         ПараметрыФайлаЭД.Организация);
		НастройкиСоглашения.Вставить("Контрагент",          ПараметрыФайлаЭД.Контрагент);
		НастройкиСоглашения.Вставить("ДоговорКонтрагента",  ПараметрыФайлаЭД.ДоговорКонтрагента);
		ИДОтправителя = ПараметрыФайлаЭД.Отправитель;
		ИДПолучателя  = ПараметрыФайлаЭД.Получатель;
		
	КонецЕсли;
	
	Если НастройкиСоглашения <> Неопределено Тогда
		
		ДанныеВходящегоЭД = ПараметрыТранспортногоКонтейнера(ИДПолучателя, 
			ИДОтправителя, НастройкиСоглашения.Организация, НастройкиСоглашения.Контрагент, 
			ИДДокументооборота, ИдентификаторПакета, ИдентификаторПакета);

		ДанныеВходящегоЭД.Вставить("ТранспортныйКонтейнер", ЭДСсылка);

		СтруктураПараметров.ДанныеВходящегоЭД = ДанныеВходящегоЭД;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ТекущаяДатаСервераЕИС()
	
	УниверсальнаяДата = ТекущаяУниверсальнаяДата();
	Возврат УниверсальнаяДата;
	
КонецФункции

Функция ТекущаяДатаСервераЕИСЗаказчика()
	
	УниверсальнаяДата = ТекущаяУниверсальнаяДата();
	Корректировка = МестноеВремя(УниверсальнаяДата, "Europe/Moscow") - УниверсальнаяДата;
	Возврат УниверсальнаяДата - Корректировка;
	
КонецФункции

Процедура ПолучитьРезультатыОбработкиПакетов(
				МассивКонтейнеров,
				СтрокаНастройкаОбменаЕИС,
				ЭтоПакетыЗаказчика = Ложь)
	
	Ошибки = Новый Массив;
	
	// Статусы отправленных документов.
	ВыборкаОтправок = СтатусыОтправок(СтрокаНастройкаОбменаЕИС.Организация, ЭтоПакетыЗаказчика);
	Пока ВыборкаОтправок.Следующий() Цикл
		МассивЧастейИмениПакета = СтрРазделить(ВыборкаОтправок.НаименованиеФайлаКонтейнера, "_");
		ИндексРасширения = МассивЧастейИмениПакета.ВГраница();
		ИдентификаторПакетаЕИС = СтрЗаменить(
			МассивЧастейИмениПакета[ИндексРасширения], ".xml", "");
		ИдентификаторПакетаБЭД = ЭлектронноеАктированиеЕИС.ИдентификаторПакетаДляБЭД(ИдентификаторПакетаЕИС);
		ИдентификаторДокументооборота = ВыборкаОтправок.ИдентификаторДокументооборота;
		РезультатОбработкиПакета =
			ЭлектронноеАктированиеЕИС.РезультатОбработкиТранспортногоПакета(
				ВыборкаОтправок.Организация,
				ИдентификаторПакетаЕИС,
				ВыборкаОтправок.ДатаОтправки,
				ЭтоПакетыЗаказчика);
		Если РезультатОбработкиПакета.Выполнено = Истина
			И РезультатОбработкиПакета.ДанныеОбрабатываются = Ложь
			И СтрНачинаетсяС(РезультатОбработкиПакета.ТекстОшибок, "Неверный идентификатор") = Ложь Тогда
			
			СтруктураПараметров = ПолучитьДанныеЭД(Неопределено,
				Неопределено,
				Неопределено,
				ИдентификаторДокументооборота,
				ИдентификаторПакетаБЭД,
				"",
				Новый Структура("ЭДСсылка", ВыборкаОтправок.ТранспортныйКонтейнер));
			
			ДанныеВходящегоЭД = СтруктураПараметров.ДанныеВходящегоЭД;
			ПолучательИзОтправителя = ДанныеВходящегоЭД.Отправитель;
			ДанныеВходящегоЭД.Отправитель = ДанныеВходящегоЭД.Получатель;
			ДанныеВходящегоЭД.Получатель = ПолучательИзОтправителя;
			
			СуффиксРезультатаОбработки = "res";
			ИдентификаторПакетаРезультатаОбработки = ИдентификаторПакетаБЭД + СуффиксРезультатаОбработки;
			СтруктураПараметровПоиска = Новый Соответствие;
			СтруктураПараметровПоиска.Вставить("ИдентификаторДокументооборота",
				ИдентификаторДокументооборота);
			СтруктураПараметровПоиска.Вставить("ИдентификаторПакета",
				ИдентификаторПакетаРезультатаОбработки);
			СтруктураПараметровПоиска.Вставить("Направление",
				Перечисления.НаправленияЭДО.Входящий);
			
			КонтейнерНайденный = ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска);
			
			Если КонтейнерНайденный = Неопределено Тогда
				НачатьТранзакцию();
				Попытка
					Если ЗначениеЗаполнено(ДанныеВходящегоЭД) Тогда
						
						// Формируем новый идентификатор пакета.
						ДанныеВходящегоЭД.ИдентификаторПакета = ИдентификаторПакетаРезультатаОбработки;
						ТранспортныйКонтейнер = ТранспортныеКонтейнерыЭДО.
							ЗаполнитьТранспортныйКонтейнер(ДанныеВходящегоЭД);
						Если ЗначениеЗаполнено(ТранспортныйКонтейнер.Ссылка) Тогда
							
							ИмяБезРасширения = "EIS_"
								+ РезультатОбработкиПакета.ИдентификаторФайлаКвитанции;
							ФайлРезультата =
								РезультатОбработкиПакета.РезультатОбработки.Body.ФайлРезул;
							ЗаписьXML = Новый ЗаписьXML;
							ЗаписьXML.УстановитьСтроку("UTF-8");
							ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ФайлРезультата, "ФайлРезул");
							СтрокаXML = ЗаписьXML.Закрыть();
							ДвоичныеДанныеЭлемента = ПолучитьДвоичныеДанныеИзСтроки(
								СтрокаXML, "UTF-8");
							
							Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
								ТранспортныеКонтейнерыЭДО.ДобавитьПрисоединенныйФайлКонтейнера(
									ТранспортныйКонтейнер,
									ДвоичныеДанныеЭлемента,
									ИмяБезРасширения,
									"xml");
							КонецЕсли;
							
							МассивКонтейнеров.Добавить(ТранспортныйКонтейнер);
							
							Если НЕ ЭтоПакетыЗаказчика Тогда
								// Изменяем идентификатор документа на тот, что пришел из ЕИС.
								Сообщения = НайтиСообщениеЭДОПоИдентификаторуДокументооборота(
									ИдентификаторДокументооборота,
									Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
								Если Сообщения.Количество() > 0 Тогда
									Файл = Сообщения[0].ОсновнойФайл;
									ФайлОбъект = Файл.ПолучитьОбъект();
									ДлинаНаименования = СтрДлина(Файл.Наименование);
									ФайлОбъект.Наименование =
										Сред(Файл.Наименование, 1, ДлинаНаименования - 36)
										+ РезультатОбработкиПакета.ИдентификаторДокументаВЕИС;
									ФайлОбъект.Записать();
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					КраткоеОписание = ОбработкаОшибок.КраткоеПредставлениеОшибки(
						ИнформацияОбОшибке);
					Ошибки.Добавить(КраткоеОписание);
					ПодробноеОписание = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
						ИнформацияОбОшибке);
					ТекстОшибки= НСтр("ru='Ошибка при получении пакета с квитанцией ЕИС: %1'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеОписание);
					ЭлектронноеАктированиеЕИС.ЗаписатьСобытиеВЖурнал(
						ТекстОшибки, , , УровеньЖурналаРегистрации.Ошибка);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ВидОшибкиНеВыполненыУсловияСопровождения()
	
	ОбработчикНастроекИнтернетПоддержки = "ЭлектронноеАктированиеЕИСКлиент.НастройкиИнтернетПоддержки";
		
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеВыполненыУсловияСопровождения";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка интернет-поддержки'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Не выполнены условия сопровождения'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Проверка"">Проверьте</a> параметры интернет-поддержки'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Проверка", ОбработчикНастроекИнтернетПоддержки);
	
	Возврат ВидОшибки;
	
КонецФункции

Функция ВидОшибкиНетДанныхАвторизации()
	
	ОбработчикПодключенияИнтернетПоддержки = "ЭлектронноеАктированиеЕИСКлиент.ПодключениеИнтернетПоддержки";
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикПодключенияИнтернетПоддержки;
	ВидОшибки.Идентификатор = "ПараметрыАутентификацииНеЗаполнены";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка интернет-поддержки'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Не заполнены параметры подключения к интернет-поддержке'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику интернет-поддержки'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", ОбработчикПодключенияИнтернетПоддержки);
	
	Возврат ВидОшибки;
	
КонецФункции

// Найти создать контракт ЕИС.
// 
// Параметры:
//  ДеревоДляСовместимостиСБЭД - ДеревоЗначений
//  ДеревоРазбора - ДеревоЗначений
//  ПараметрыОбработки - Структура
//  НайденныйОбъект - Произвольный, СправочникСсылка
// 
// Возвращаемое значение:
//  СправочникСсылка.ГосударственныеКонтрактыЕИС - найденный или созданный контракт ЕИС
Функция НайтиСоздатьКонтрактЕИС(ДеревоДляСовместимостиСБЭД,
			ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект)
	
	КонтрактЕИС = НайденныйОбъект;
	
	СтрокаОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Найти("ОбъектXDTO", "ПолныйПуть");
	ОбъектXDTO = СтрокаОбъектXDTO.Значение;
	
	ДанныеЭД = ЭлектронноеАктированиеЕИС.РазобратьФайлКонтракта(ОбъектXDTO);
	
	Если ЗначениеЗаполнено(КонтрактЕИС) Тогда 
		СправочникОбъект = КонтрактЕИС.ПолучитьОбъект();
	Иначе
		ИмяСправочникаГосКонтрактов = ЭлектронноеАктированиеЕИС.ИмяСправочникаГосударственныеКонтракты();
		СсылкаПоКоду = Справочники[ИмяСправочникаГосКонтрактов].
			НайтиПоКоду(ДанныеЭД.НомерРеестровойЗаписи);
		Если ЗначениеЗаполнено(СсылкаПоКоду) Тогда
			СправочникОбъект = СсылкаПоКоду.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники[ИмяСправочникаГосКонтрактов].СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъект.Организация = ПараметрыОбработки.ЭлектронныйДокумент.Организация;
	СправочникОбъект.Контрагент = ПараметрыОбработки.ЭлектронныйДокумент.Контрагент;
	
	ЗаполнитьИзДанныхКонтракта(ДанныеЭД, СправочникОбъект);
	
	СправочникОбъект.ИдентификаторУчастникаДокументооборотаЗаказчика =
		ПараметрыОбработки.ИдентификаторОтправителя;
	
	СправочникОбъект.Записать();
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(ПотокВПамяти);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, "export");
	
	ЗаписьXML.Закрыть();
	ДвоичныеДанныеКонтракта = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	ЭлектронноеАктированиеЕИС.СохранитьДанныеКонтракта(
		СправочникОбъект.Ссылка, ДвоичныеДанныеКонтракта);
	Если НЕ ЗначениеЗаполнено(КонтрактЕИС) Тогда
		КонтрактЕИС = СправочникОбъект.Ссылка;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ПослеЗагрузкиКонтрактаИзЕИС(КонтрактЕИС);
	
	Возврат КонтрактЕИС;
	
КонецФункции

Функция ТипЭлементаВерсииИнформацияПокупателяУПД()
	
	Возврат "ИнформацияПокупателяУПД";
	
КонецФункции

Функция ТипЭлементаВерсииИнформацияПоставщикаУПД()
	
	Возврат "ИнформацияПоставщикаУПД";
	
КонецФункции

Функция ТипЭлементаВерсииИнформацияПоставщикаУКД()
	
	Возврат "ИнформацияПоставщикаУКД";
	
КонецФункции

Функция ТипЭлементаВерсииИнформацияПокупателяУКД()
	
	Возврат "ИнформацияПокупателяУКД";
	
КонецФункции

Функция ТипЭлементаВерсииИнформацияОбОшибкеЕИС()
	
	Возврат "ИзвещениеОбОшибкеЕИС";
	
КонецФункции

Функция ТипЭлементаВерсииКвитанцияЕИС()
	
	Возврат "КвитанцияЕИС";
	
КонецФункции

Процедура ИзвлечьПриложениеДляЕИС(Знач ЭтоПакет,
									Знач ЭтоДокументЗаказчика,
									Знач КодРегламента,
									Знач ДокументооборотИД,
									ЭД,
									МассивДокументовПакета,
									ШапкаПакетаЭД)

	// Приложения к документу в формате ЕИС.
	Если ЭтоПакет И НЕ (ШапкаПакетаЭД.Входящий И НЕ ЭтоДокументЗаказчика)
		И ЕстьСвойство(ЭД, "Прилож") Тогда
			
		ОписаниеПриложения = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДокументаКонтейнера();
		ОписаниеПриложения.ИдентификаторДокументооборота = ДокументооборотИД;
		Если ЭД.ТипПрилож = ЭлектронноеАктированиеЕИС.ТипПриложенияУПДПродавца() Тогда
			ОписаниеПриложения.КодТранзакции = "ApplicationTitleEIS";
		ИначеЕсли ЭД.ТипПрилож = ЭлектронноеАктированиеЕИС.ТипПриложенияУКДПродавца() Тогда
			ОписаниеПриложения.КодТранзакции = "ApplicationCorrectionTitleEIS";
		ИначеЕсли ЭД.ТипПрилож = ЭлектронноеАктированиеЕИС.ТипПриложенияУПДПокупателя() Тогда
			ОписаниеПриложения.КодТранзакции = "ApplicationTitleResignEIS";
		ИначеЕсли ЭД.ТипПрилож = ЭлектронноеАктированиеЕИС.ТипПриложенияУКДПокупателя() Тогда
			ОписаниеПриложения.КодТранзакции = "ApplicationCorrectionTitleResignEIS";
		КонецЕсли;
		
		ОписаниеПриложения.КодРегламента = КодРегламента;
		
		ДвоичныеДанные_Приложение = Base64Значение(ЭД.Прилож.Контент);
		
		ОписаниеПриложения.ОписаниеДанных.ИмяФайла = ЭД.ИдПрилож + ".xml";
		ОписаниеПриложения.ОписаниеДанных.ДвоичныеДанные =
			ДвоичныеДанные_Приложение;
		
		ДвоичныеДанныеПодписи_Приложения = Новый Массив;
		Если ЭД.Прилож.Свойства().Получить("ПодписьПрилож") <> Неопределено Тогда
			ЭлементПодписиОбъект_Приложения = ЭД.Прилож.ПодписьПрилож;
			Если ЭлементПодписиОбъект_Приложения <> Неопределено Тогда
				Если ТипЗнч(ЭлементПодписиОбъект_Приложения) = Тип("СписокXDTO") Тогда
					Для Каждого ПодписьОбъект Из ЭлементПодписиОбъект_Приложения Цикл
						ЭлементПодписи_Приложения = ПодписьОбъект.Подпись;
						Если ЭлементПодписи_Приложения <> Неопределено Тогда 
							Если ТипЗнч(ЭлементПодписи_Приложения) = Тип("СписокXDTO") Тогда
								Для Каждого ЭДПодпись Из ЭлементПодписи_Приложения Цикл
									ДвоичныеДанныеПодписи_Приложения.Добавить(Base64Значение(ЭДПодпись));
								КонецЦикла;
							Иначе
								ДвоичныеДанныеПодписи_Приложения.
									Добавить(Base64Значение(ЭлементПодписи_Приложения));
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					ЭлементПодписи_Приложения = ЭлементПодписиОбъект_Приложения.Подпись;
					Если ЭлементПодписи_Приложения <> Неопределено Тогда 
						Если ТипЗнч(ЭлементПодписи_Приложения) = Тип("СписокXDTO") Тогда
							Для Каждого ЭДПодпись Из ЭлементПодписи_Приложения Цикл
								ДвоичныеДанныеПодписи_Приложения.Добавить(Base64Значение(ЭДПодпись));
							КонецЦикла;
						Иначе
							ДвоичныеДанныеПодписи_Приложения.
								Добавить(Base64Значение(ЭлементПодписи_Приложения));
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СчетчикПодписей = 0;
		Для Каждого ЭлементПодписи_Приложения Из ДвоичныеДанныеПодписи_Приложения Цикл
			СчетчикПодписей = СчетчикПодписей + 1;
			ОписаниеФайлаПодписи = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайлаПодписи.ИмяФайла = ЭД.ИдПрилож + ".xml.sig." + Строка(СчетчикПодписей);
			ОписаниеФайлаПодписи.ДвоичныеДанные = ЭлементПодписи_Приложения;
			ОписаниеПриложения.ПодписиОсновныхДанных.Добавить(ОписаниеФайлаПодписи);
		КонецЦикла;
		
		МассивДокументовПакета.Добавить(ОписаниеПриложения);
		
	КонецЕсли;
КонецПроцедуры

Процедура ИзвлечьВложения(СтруктураЭлектронногоДокумента,
							ПутьКПодписиВложения,
							ПутьКСсылкамВложений,
							ЭлементВложений)
	
	// Вложения в виде файлов.
	Если ЭлементВложений <> Неопределено Тогда
		МассивВложений = Новый Массив;
		Если ТипЗнч(ЭлементВложений) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементВложение Из ЭлементВложений Цикл
				МассивВложений.Добавить(ЭлементВложение);
			КонецЦикла;
		Иначе
			МассивВложений.Добавить(ЭлементВложений);
		КонецЕсли;
		Для Каждого ЭлементВложение Из МассивВложений Цикл
			МассивСсылокВложения = ЗначенияXDTOПоПути(ЭлементВложение, ПутьКСсылкамВложений);
			Если МассивСсылокВложения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			РезультатПолученияФайла =
				ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(МассивСсылокВложения[0]);
			Если РезультатПолученияФайла.Статус = Истина Тогда
				ДвоичныеДанные_Вложение = ПолучитьИзВременногоХранилища(РезультатПолученияФайла.Путь);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ИмяФайлаВложения = "file.txt";
			Если ЭлементВложение.Свойства().Получить("ИмяФайл") <> Неопределено Тогда
				ИмяФайлаВложения = ЭлементВложение.ИмяФайл;
			ИначеЕсли ЭлементВложение.Свойства().Получить("fileName") <> Неопределено Тогда
				ИмяФайлаВложения = ЭлементВложение.fileName;
			КонецЕсли;
			
			СтруктураЭлектронногоДокумента.ОписаниеДополнительныхДанных.
				ИмяФайла = ИмяФайлаВложения; 
			СтруктураЭлектронногоДокумента.ОписаниеДополнительныхДанных.
				ДвоичныеДанные = ДвоичныеДанные_Вложение;
			
			МассивПодписейВложения = ЗначенияXDTOПоПути(ЭлементВложение, ПутьКПодписиВложения);
			
			СчетчикПодписей = 0;
			Для Каждого ПодписьBase64Вложения Из МассивПодписейВложения Цикл
				СчетчикПодписей = СчетчикПодписей + 1;
				ЭлементПодписи_Вложения = Base64Значение(ПодписьBase64Вложения);
				ОписаниеФайлаПодписи = РаботаСФайламиБЭД.НовоеОписаниеФайла();
				ОписаниеФайлаПодписи.ИмяФайла = ИмяФайлаВложения + ".sig."
					+ Строка(СчетчикПодписей);
				ОписаниеФайлаПодписи.ДвоичныеДанные = ЭлементПодписи_Вложения;
				СтруктураЭлектронногоДокумента.
					ПодписиДополнительныхДанных.Добавить(ОписаниеФайлаПодписи);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ИзвлечьСведенияОПродавцеСЧФ(ОбъектЭД, ЭтоУКД = Ложь)
	
	Результат = ЭлектронноеАктированиеЕИС.НовыеСведенияОКонтрагенте();
	
	Если ЭтоУКД Тогда
		СведенияОПродавце = ОбъектЭД.Документ.СвКСчФ.СвПрод;
	Иначе
		СведенияОПродавце = ОбъектЭД.Документ.СвСчФакт.СвПрод;
	КонецЕсли;
	
	ЗаполнитьСведенияОКонтрагенте(Результат, СведенияОПродавце.ИдСв, "СвЮЛУч", "СвИП");
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьСведенияОКонтрагентеИзИОП(ОбъектЭД)
	
	Результат = ЭлектронноеАктированиеЕИС.НовыеСведенияОКонтрагенте();

	СведенияОКонтрагенте = ОбъектЭД.Документ.ОтпрДок;

	ЗаполнитьСведенияОКонтрагенте(Результат, СведенияОКонтрагенте, "ЮЛ", "ИП");
	
	Возврат Результат;

КонецФункции

Функция ИзвлечьСведенияОКонтрагентеИзПДО(ОбъектЭД, ИзСведенийОПолучателе = Ложь)
	
	Результат = ЭлектронноеАктированиеЕИС.НовыеСведенияОКонтрагенте();
	
	Если ИзСведенийОПолучателе Тогда
		СведенияОКонтрагенте = ОбъектЭД.Документ.СвПолДок;
	Иначе
		СведенияОКонтрагенте = ОбъектЭД.Документ.СвОтпрДок;
	КонецЕсли;
	
	ЗаполнитьСведенияОКонтрагенте(Результат, СведенияОКонтрагенте, "ОтпрЮЛ", "ОтпрИП");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСведенияОКонтрагенте(Сведения, УзелСведений, СвойствоЮЛ, СвойствоИП)

	Если ЕстьСвойство(УзелСведений, СвойствоЮЛ) Тогда
		СведенияОКонтрагенте = УзелСведений[СвойствоЮЛ];
		Сведения.ПолноеНаименование = СведенияОКонтрагенте.НаимОрг;
		Сведения.ИНН = ЗначениеНеобязательногоСвойства(СведенияОКонтрагенте, "ИННЮЛ");
		Сведения.КПП = ЗначениеНеобязательногоСвойства(СведенияОКонтрагенте, "КПП");
	ИначеЕсли ЕстьСвойство(УзелСведений, СвойствоИП) Тогда
		СведенияОКонтрагенте = УзелСведений[СвойствоИП];
		Сведения.ПолноеНаименование = СведенияОКонтрагенте.ФИО.Фамилия + " "
			+ СведенияОКонтрагенте.ФИО.Имя + " "
			+ ЗначениеНеобязательногоСвойства(СведенияОКонтрагенте.ФИО, "Отчество");
		Сведения.ИНН = ЗначениеНеобязательногоСвойства(СведенияОКонтрагенте, "ИННФЛ");
	КонецЕсли;
	
КонецПроцедуры

Функция СистемаОператораЭДО()
	
	Возврат "OEDO";
	
КонецФункции

Функция СведенияОКонтрагентеИзСведенийОКонтракте(ДанныеКонтракта, ЭтоКонтрактДляЗаказчика = Ложь)
	
	ДанныеКонтрагента = ЭлектронноеАктированиеЕИС.НовыеСведенияОКонтрагенте();
	Если ЭтоКонтрактДляЗаказчика Тогда
		ДанныеПоставщика = ДанныеКонтракта.СведенияОПоставщиках[0];
		ДанныеКонтрагента.СокращенноеНаименование = ДанныеПоставщика.Наименование;
		ДанныеКонтрагента.ПолноеНаименование = ДанныеПоставщика.ПолноеНаименование;
		ДанныеКонтрагента.ИНН = ДанныеПоставщика.ИНН;
		ДанныеКонтрагента.КПП = ДанныеПоставщика.КПП;
	Иначе
		ДанныеКонтрагента.СокращенноеНаименование = ДанныеКонтракта.СведенияОЗаказчике.СокращенноеНаименование;
		ДанныеКонтрагента.ПолноеНаименование = ДанныеКонтракта.СведенияОЗаказчике.КодыОрганизации.ПолноеНаименование;
		ДанныеКонтрагента.ИНН = ДанныеКонтракта.СведенияОЗаказчике.ИНН;
		ДанныеКонтрагента.КПП = ДанныеКонтракта.СведенияОЗаказчике.КПП;
	КонецЕсли;
	
	Возврат ДанныеКонтрагента; 
	
КонецФункции

Функция ОпределитьПараметрыЭлектронногоДокумента(ИдФайл)

	Результат = Новый Структура;
	Результат.Вставить("ТипЭлементаВерсииЭД", "");
	Результат.Вставить("ТипДокумента", "");
	Результат.Вставить("КодТранзакции", "");
	
	ТипЭлементаВерсииЭД = "";
	// Используется для определения типа элемента 
	// в функции ТранспортныеКонтейнерыЭДОСлужебный.ПараметрыДокумента.
	// Для определения типа документа используется макет
	// ТранспортныеКонтейнерыЭДО.Макеты.ТипыДокументовТранспортнойИнформации.
	ТипДокумента = "";
	// Используется для определения типа элемента регламента
	// в методе ТранспортныеКонтейнерыЭДОСлужебный.ПолучитьТипЭлементаРегламента
	КодТранзакции = "";
	
	Если СтрНайти(ИдФайл, "ON_NSCHFDOPPR") Тогда
		ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУПД();
		ТипДокумента = "Invoice";
		КодТранзакции = "Invoice";
	ИначеЕсли СтрНайти(ИдФайл, "ON_KORSCHFDOPPR")
		ИЛИ СтрНайти(ИдФайл, "ON_NKORSCHFDOPPR") Тогда
		ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПоставщикаУКД();
		ТипДокумента = "CorrectiveInvoice";
		КодТранзакции = "VendorTitle";
	ИначеЕсли СтрНайти(ИдФайл, "DP_IZVPOL") Тогда
		ТипЭлементаВерсииЭД = "ИОП";
		ТипДокумента = "ReceiveNotification";
		КодТранзакции = "ReceiveNotice";
	ИначеЕсли СтрНайти(ИдФайл, "DP_PDPOL") Тогда
		// Подтверждение даты получения заказчика.
		ТипЭлементаВерсииЭД = "ПДП";
		ТипДокумента = "SendingTimeConfirmation";
		КодТранзакции = "SendConfirmation";
	ИначеЕсли СтрНайти(ИдФайл, "DP_IZVUCH") Тогда
		ТипЭлементаВерсииЭД = "УОПУ";
		ТипДокумента = "AcceptanceNotice";
		КодТранзакции = "AcceptanceNotice"; 
	ИначеЕсли СтрНайти(ИдФайл, "DP_UVUTOCH") Тогда
		ТипЭлементаВерсииЭД = "УУЭСФ";
		ТипДокумента = "SpecificationNotice";
		КодТранзакции = "CorrectionNotice";
	ИначеЕсли СтрНайти(ИдФайл, "ON_NSCHFDOPPOK") Тогда
		ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУПД();
		ТипДокумента = "Invoice";
		КодТранзакции = "CustomerTitle";
	ИначеЕсли СтрНайти(ИдФайл, "ON_KORSCHFDOPPOK")
		ИЛИ СтрНайти(ИдФайл, "ON_NKORSCHFDOPPOK") Тогда
		ТипЭлементаВерсииЭД = ТипЭлементаВерсииИнформацияПокупателяУКД();
		ТипДокумента = "CorrectiveInvoice";
		КодТранзакции = "CustomerTitle";
	ИначеЕсли СтрНайти(ИдФайл, "DP_IZVOSH") Тогда
		ТипЭлементаВерсииЭД = "ИзвещениеОбОшибкеЕИС";
		ТипДокумента = "ErrorEIS";
		КодТранзакции = "ErrorEIS";
	ИначеЕсли СтрНайти(ИдФайл, "DP_KVITOBR") Тогда
		ТипЭлементаВерсииЭД = "КвитанцияЕИС";
		ТипДокумента = "SuccessEIS";
		КодТранзакции = "SuccessEIS";
	ИначеЕсли СтрНайти(ИдФайл, "DP_PDOTPR") Тогда
		// Подтверждение даты отправки продавца.
		ТипЭлементаВерсииЭД = "ПДО";
		ТипДокумента = "SendingTimeConfirmation";
		КодТранзакции = "SendConfirmation";
	КонецЕсли;

	Результат.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
	Результат.ТипДокумента = ТипДокумента;
	Результат.КодТранзакции = КодТранзакции;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСообщениеЭДОПоИдентификаторуДокументооборота(ИдентификаторДокументооборота, ТипЭлементаРегламента)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка КАК Ссылка,
	|	СообщениеЭДО.ОсновнойФайл
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
	|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
	|ГДЕ
	|	СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламента);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

Функция ЭтоЭлектронныйДокументКонтракта(Объект)
	
	Возврат ЕстьСвойство(Объект, ЭлектронноеАктированиеЕИС.ИмяУзлаДанныхКонтракта());
	
КонецФункции

Функция УзелДанныхКонтракта(Объект)
	
	Возврат Объект[ЭлектронноеАктированиеЕИС.ИмяУзлаДанныхКонтракта()];
	
КонецФункции

Процедура ЗаполнитьНоменклатуруКонтракта(Контракт, Объект)

	ТипСтрока300 = ОбщегоНазначения.ОписаниеТипаСтрока(300);
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ТаблицаНоменклатуры = Объект.НоменклатураОбъектовЗакупки.Выгрузить();
		ТаблицаНоменклатуры.Очистить();
	Иначе
		ТаблицаНоменклатуры = Объект.НоменклатураОбъектовЗакупки.ВыгрузитьКолонки();
	КонецЕсли;
	ТаблицаНоменклатуры.Колонки.Добавить("ИдентификаторНоменклатурыКонтрагентов",
		ТипСтрока300);
		
	Объект.НоменклатураОбъектовЗакупки.Очистить();
	Объект.ОбъектыЗакупки.Очистить();
	Объект.СтраныПроисхождения.Очистить();
	Для Каждого СтрокаЭД Из Контракт.ОбъектыЗакупки Цикл
		НоваяСтрока = Объект.ОбъектыЗакупки.Добавить();
		НоваяСтрокаНоменклатура = ТаблицаНоменклатуры.Добавить();
		НоваяСтрокаНоменклатура.Идентификатор = СтрокаЭД.Идентификатор;
		НоваяСтрокаНоменклатура.Количество = СтрокаЭД.Количество;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭД);
		
		НоваяСтрока.ЕдиницаИзмерения = СтрокаЭД.ОКЕИ.Код;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СтрокаЭД.ОКЕИ.Наименование;
		
		Если СтрокаЭД.ЭтоЛекарственныйПрепарат Тогда
			Объект.ЕстьЛекарственныеПрепараты = Истина;
		КонецЕсли;
		
		Если СтрокаЭД.ЭтаРаботаИлиУслуга Тогда
			Объект.ЕстьРаботыИлиУслуги = Истина;
		Иначе
			Объект.ЕстьТовары = Истина;
		КонецЕсли;
		
		Если СтрокаЭД.Классификатор = ЭлектронноеАктированиеЕИС.КлассификаторКТРУ() Тогда
			НоваяСтрока.КодТовараДляЕИС = СтрокаЭД.КТРУ.Код;
		ИначеЕсли СтрокаЭД.Классификатор = ЭлектронноеАктированиеЕИС.КлассификаторОКПД2() Тогда
			НоваяСтрока.КодТовараДляЕИС = СтрокаЭД.ОКПД2.Код;
		ИначеЕсли СтрокаЭД.Классификатор = ЭлектронноеАктированиеЕИС.КлассификаторОКПД() Тогда
			НоваяСтрока.КодТовараДляЕИС = СтрокаЭД.ОКПД.Код;
		КонецЕсли;
		
		НоваяСтрока.ЭтоПриобретениеЖилыхПомещений = ЭлектронноеАктированиеЕИС.ЭтоКодТовараПоПриобретениюЖилыхПомещений(
			НоваяСтрока.КодТовараДляЕИС);
		
		КодПоСправочникуЛП = "";
		КодМНН = "";
		Если СтрокаЭД.СведенияОЛекарственномПрепарате <> Неопределено Тогда
			Если СтрокаЭД.СведенияОЛекарственномПрепарате.СписокМНН.Количество() > 0 Тогда
				МНН = СтрокаЭД.СведенияОЛекарственномПрепарате.СписокМНН[0];
				КодМНН = МНН.КодМНН;
				Если МНН.ПозицииПоТорговомуНаименованиюЛП.Количество() > 0 Тогда
					ПозицияПоМНН = МНН.ПозицииПоТорговомуНаименованиюЛП[0];
					КодПоСправочникуЛП = ПозицияПоМНН.КодПоСправочникуЛП;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.КодМНН = КодМНН;
		НоваяСтрока.КодПоСправочникуЛП = КодПоСправочникуЛП;
		
		НоваяСтрока.СтавкаНДС = ЭлектронноеАктированиеЕИС.СтавкаНДСОбъектаЗакупки(СтрокаЭД);
		НоваяСтрока.СуммаНДС = СтрокаЭД.СуммаНДС;

		// Расчет цены без НДС.
		// Цена без НДС рассчитывается с точностью для 11 знаков, в дальнейшем помещается в УПД.
		// В УПД помещается в СведТов/ЦенаТов.
		СтавкиНДС = Новый Соответствие;
		СтавкиНДС.Вставить("0", 0);
		СтавкиНДС.Вставить("10", 0.10);
		СтавкиНДС.Вставить("18", 0.18);
		СтавкиНДС.Вставить("20", 0.2);
		СтавкиНДС.Вставить("n", 0);
		Ставка = СтавкиНДС[СтрокаЭД.СтавкаНДС];
		Если Ставка = Неопределено Тогда
			Шаблон = НСтр("ru = 'Неизвестная ставка НДС в контракте: %1%%'");
			ОписаниеОшибки = СтрШаблон(Шаблон, СтрокаЭД.СтавкаНДС);
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
		
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения =
			Окр(НоваяСтрока.Цена / (1 + Ставка), 11);

		НоваяСтрока.Тип = СтрокаЭД.Тип;
		НоваяСтрока.ЭтоРаботаИлиУслуга = НоваяСтрока.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Работа
			ИЛИ НоваяСтрока.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга;
			
		Для Каждого Страна Из СтрокаЭД.СтраныПроисхождения Цикл
			ДанныеСтраны = УправлениеКонтактнойИнформацией.
				ДанныеКлассификатораСтранМираПоКоду(Страна.Код);
			Если ДанныеСтраны = Неопределено Тогда
				ДанныеСтраны= Новый Структура;
				ДанныеСтраны.Вставить("Код", Страна.Код);
				ДанныеСтраны.Вставить("Наименование", Страна.ПолноеНаименование);
				ДанныеСтраны.Вставить("НаименованиеПолное", Страна.ПолноеНаименование);
			КонецЕсли;
			СтранаМира = УправлениеКонтактнойИнформацией.
				СтранаМираПоКодуИлиНаименованию(Страна.Код, ДанныеСтраны);
			СтрокаСтраны = Объект.СтраныПроисхождения.Добавить();
			СтрокаСтраны.Страна = СтранаМира;
			СтрокаСтраны.ИдентификаторСтроки = НоваяСтрока.Идентификатор;
		КонецЦикла;
		
		Если СтрокаЭД.СтраныПроисхождения.Количество() > 0 Тогда
			Страна = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(
						СтрокаЭД.СтраныПроисхождения[0].Код);
			НоваяСтрока.СтранаПроизводителя = Страна;
			НоваяСтрока.СтранаПроисхождения = Страна;
		КонецЕсли;
		
		Наименование = ВРег(СтрЗаменить(СтрокаЭД.Наименование, " ", "")
			+ "#" + ВРег(СтрЗаменить(СтрокаЭД.ОКПД2.Код, " ", ""))
			+ "#" + ВРег(СтрЗаменить(СтрокаЭД.КТРУ.Код, " ", ""))
			+ "#" + ВРег(СтрЗаменить(СтрокаЭД.КодМедицинскогоИзделия, " ", ""))
			+ "#" + ВРег(СтрЗаменить(КодМНН, " ", "")));
		НоваяСтрокаНоменклатура.ИдентификаторНоменклатурыКонтрагентов = ИдентификаторТовараПоСтроке(Наименование);
	КонецЦикла;
	
	Если НЕ ЭлектронноеАктированиеЕИС.СопоставлятьНоменклатуруКонтракта() Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка сопоставленной номенклатуры.
	Объект.НоменклатураОбъектовЗакупки.Очистить();
	
	НоменклатураОбъектовЗакупки = ТаблицаНоменклатурыКонтракта(ТаблицаНоменклатуры, Объект);
	Объект.НоменклатураОбъектовЗакупки.Загрузить(НоменклатураОбъектовЗакупки);
	
КонецПроцедуры

// Заполнить таблицу номенклатуры контракта.
// 
// Параметры:
//  ТаблицаИдентификаторов - ТаблицаЗначений - Таблица номенклатуры:
//   * ИдентификаторНоменклатурыКонтрагентов - Строка - идентификатор для сопоставления номенклатуры
//   * Идентификатор - Строка - идентификатор объекта закупки
//   * Количество - Число
//  ДанныеГосконтракта - ДанныеФормыСтруктура,
//    СправочникОбъект.ГосударственныеКонтрактыЕИС - объект справочника гос.контрактов или данные формы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для загрузки в табличную часть НоменклатураОбъектовЗакупки:
//   * Идентификатор - Строка - идентификатор объекта закупки
//   * Количество - Число
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД
//   * Номенклатура - ОпределяемыйТип.НоменклатураБЭД
Функция ТаблицаНоменклатурыКонтракта(ТаблицаИдентификаторов, ДанныеГосконтракта)

	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьТаблицуНоменклатурыКонтракта(
		ТаблицаИдентификаторов, ДанныеГосконтракта, ТаблицаНоменклатуры);
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		Возврат ТаблицаНоменклатуры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляПоискаСопоставленнойНоменклатурыКонтракта();
	Запрос.УстановитьПараметр("ТЗ", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("Владелец", ДанныеГосконтракта.Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДляПоискаСопоставленнойНоменклатурыКонтракта()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТЗ.ИдентификаторНоменклатурыКонтрагентов КАК ИдентификаторНоменклатурыКонтрагентов,
	|	ТЗ.Идентификатор КАК Идентификатор,
	|	ТЗ.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	ВТ_ТЗ.Идентификатор КАК Идентификатор,
	|	ВТ_ТЗ.Количество КАК Количество,
	|	НоменклатураКонтрагентовБЭД.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО (НоменклатураКонтрагентовБЭД.Владелец = &Владелец)
	|		И (НоменклатураКонтрагентовБЭД.Идентификатор = ВТ_ТЗ.ИдентификаторНоменклатурыКонтрагентов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОпределитьТранспортныйКонтейнерЭД(СтруктураПараметровПоиска)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|ГДЕ
	|	ТранспортныйКонтейнерЭДО.ПометкаУдаления = ЛОЖЬ";
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекстЗапроса);
	
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		
		Значение = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		// ИдентификаторПакета не содержит знак минуса.
		Если ВРЕГ(Элемент.Ключ) = ВРЕГ("ИдентификаторПакета")
			И СтрДлина(Значение) > 32 Тогда
			Значение = СтрЗаменить(Значение, "-", "");
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ШаблонУсловия = "И ТранспортныйКонтейнерЭДО.%1 В (&%2)";
		Иначе
			ШаблонУсловия = "И ТранспортныйКонтейнерЭДО.%1 = &%2";
		КонецЕсли;
		
		ИмяПараметра = СтрЗаменить(Элемент.Ключ, ".", "");
		ТекстУсловия = СтрШаблон(ШаблонУсловия, Элемент.Ключ, ИмяПараметра);
		МассивСтрок.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр(ИмяПараметра, Значение);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивСтрок, Символы.ПС);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

Функция НовоеОписаниеКарточкиПакета()
	
	Карточка = Новый Структура;
	Карточка.Вставить("ТипДокумента", "");
	Карточка.Вставить("ИдентификаторСообщения", "");
	Карточка.Вставить("ТекстСопроводительнойЗаписки", "");
	Карточка.Вставить("ИдентификаторыСообщенийОснований", Новый Массив);
	Карточка.Вставить("ИдентификаторыДокументооборотовОснований", Новый Массив);
	Карточка.Вставить("ЗаголовокДокумента", "");
	Карточка.Вставить("ТребуетсяПодтверждение", Ложь);
	Карточка.Вставить("ТребуетсяИзвещение", Истина);
	Карточка.Вставить("Дата", Дата(1, 1, 1));
	Карточка.Вставить("Номер", "");
	Карточка.Вставить("Сумма", 0);
	Карточка.Вставить("ИдентификаторОтправителя", "");
	Карточка.Вставить("ИдентификаторПолучателя", "");
	Карточка.Вставить("НаименованиеКонтрагента", "");
	Карточка.Вставить("ИННКонтрагента", "");
	Карточка.Вставить("КППКонтрагента", "");
	Карточка.Вставить("ИННОрганизации", "");
	Карточка.Вставить("КППОрганизации", "");
	Карточка.Вставить("КППОрганизацииУточненный", Неопределено);
	Карточка.Вставить("КППКонтрагентаУточненный", Неопределено);
	Карточка.Вставить("НаименованиеКонтрагентаУточненное", Неопределено);
	Карточка.Вставить("АдресРесурсаКонтрагента", Неопределено);	
	
	Возврат Карточка;
	
КонецФункции

Функция ЗначениеНеобязательногоСвойства(Данные,
	ИмяСвойства,
	ПривестиКТипу = "",
	ЗначениеПоУмолчанию = Неопределено)
	
	Возврат ЭлектронноеАктированиеЕИС.
		ЗначениеНеобязательногоСвойства(Данные, ИмяСвойства, ПривестиКТипу, ЗначениеПоУмолчанию);
		
КонецФункции

Функция ЕстьСвойство(Данные, Имя)
	
	Возврат ЭлектронноеАктированиеЕИС.ЕстьСвойство(Данные, Имя);
	
КонецФункции

Процедура ЗначенияXDTOПоПутиРекурсивно(Знач ТекущийXDTO, Знач МассивПути, ТекущийИндекс, МассивЗначений)
	
	Если ТекущийИндекс > МассивПути.ВГраница() Тогда
		Если ТипЗнч(ТекущийXDTO) = Тип("ЗначениеXDTO") Тогда
			МассивЗначений.Добавить(ТекущийXDTO.Значение);
		ИначеЕсли ТипЗнч(ТекущийXDTO) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСпискаXDTO Из ТекущийXDTO Цикл
				Если ТипЗнч(ЭлементСпискаXDTO) <> Тип("ОбъектXDTO")
					И ТипЗнч(ЭлементСпискаXDTO) <> Тип("СписокXDTO") Тогда
					МассивЗначений.Добавить(ЭлементСпискаXDTO);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат;
	Иначе
		ИмяУзла = МассивПути[ТекущийИндекс];
		Если ТипЗнч(ТекущийXDTO) = Тип("ОбъектXDTO") Тогда
			Узел = ТекущийXDTO.Свойства().Получить(ИмяУзла);
			Если Узел = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если Узел.ВерхняяГраница = 1 Тогда
				СледующийУзел = ТекущийXDTO.ПолучитьXDTO(ИмяУзла);
			Иначе
				СледующийУзел = ТекущийXDTO.ПолучитьСписок(ИмяУзла);
			КонецЕсли;
			ЗначенияXDTOПоПутиРекурсивно(СледующийУзел, МассивПути, ТекущийИндекс + 1, МассивЗначений);
		ИначеЕсли ТипЗнч(ТекущийXDTO) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСпискаXDTO Из ТекущийXDTO Цикл
				Если ТипЗнч(ЭлементСпискаXDTO) = Тип("ОбъектXDTO") Тогда
					Если ЭлементСпискаXDTO.Свойства().Получить(ИмяУзла) <> Неопределено Тогда
						Попытка
							СледующийУзел = ЭлементСпискаXDTO.ПолучитьXDTO(ИмяУзла);
						Исключение
							Попытка
								СледующийУзел = ЭлементСпискаXDTO.ПолучитьСписок(ИмяУзла);	
							Исключение
								Возврат;	
							КонецПопытки;
							ЗначенияXDTOПоПутиРекурсивно(СледующийУзел, МассивПути, ТекущийИндекс + 1, МассивЗначений);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураАтрибутовОбъектаРекурсивно(ОбъектXDTO, МассивНеВыводить, СтруктураРезультат = Неопределено)
	
	Если СтруктураРезультат = Неопределено Тогда
		СтруктураРезультат = Новый Структура;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ОбъектСписка Из ОбъектXDTO Цикл
			МассивОбъектов.Добавить(ОбъектСписка);
		КонецЦикла;
	Иначе
		МассивОбъектов.Добавить(ОбъектXDTO);
	КонецЕсли;
	
	Для Каждого ОбъектСписка Из МассивОбъектов Цикл
		Для Каждого СвойствоОбъектаСписка Из ОбъектСписка.Свойства() Цикл
			Если МассивНеВыводить <> Неопределено И МассивНеВыводить.Найти(СвойствоОбъектаСписка.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ОбъектСписка[СвойствоОбъектаСписка.Имя]) = Тип("ОбъектXDTO") Тогда
				СтруктураАтрибутовОбъектаРекурсивно(ОбъектСписка[СвойствоОбъектаСписка.Имя], МассивНеВыводить, СтруктураРезультат);
			Иначе
				Если СтруктураРезультат.Свойство(СвойствоОбъектаСписка.Имя) = Ложь Тогда
					СтруктураРезультат.Вставить(СвойствоОбъектаСписка.Имя, 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПолучитьИдДокументооборотаПоИдФайла(ИдФайла, ДокументооборотИДПоУмолчанию)
	
	ДокументооборотИД = Неопределено;
	
	ЗапросИД = Новый Запрос;
	ЗапросИД.УстановитьПараметр("ИдФайл", ИдФайла);
	ЗапросИД.Текст = "ВЫБРАТЬ
	|	ТранспортныйКонтейнерЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО СообщениеЭДО.Ссылка = ОбъектыТранспортныхКонтейнеровЭДО.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДО.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|		ПО СообщениеЭДО.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	ПакетЭДПрисоединенныеФайлы.Наименование = &ИдФайл";
	
	ВыборкаИД = ЗапросИД.Выполнить().Выбрать();
	Если ВыборкаИД.Следующий() Тогда
		ДокументооборотИД = ВыборкаИД.ИдентификаторДокументооборота;
	Иначе
		ДокументооборотИД = ДокументооборотИДПоУмолчанию;
	КонецЕсли;
	
	Возврат ДокументооборотИД;
	
КонецФункции

#КонецОбласти
