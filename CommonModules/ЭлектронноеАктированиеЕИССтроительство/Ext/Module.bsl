#Область ПрограммныйИнтерфейс

#Область СметаКонтракта

// Новые данные сметы контракта.
// 
// Возвращаемое значение:
//  Структура - Новые данные сметы контракта:
// * ИдентификаторСметы - Строка
// * ВнешнийИдентификаторСметы - Строка
// * ВерсияСметы - Строка
// * ВерсияФормата - Строка
// * СведенияОКонтракте - Структура
// * СведенияОСмете - см. НовыеСведенияОСмете
Функция НовыеДанныеСметыКонтракта() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Идентификатор сметы, присвоенный в ЕИС.
	// Требуется указание данного атрибута или атрибута "Внешний идентификатор сметы"
	// (ВнешИдСмета) при внесении изменений в проект незавершенной сметы.
	Результат.Вставить("ИдентификаторСметы", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(32,
		ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Идентификатор сметы, присвоенный в ЕИС.'");
	Поле = НовоеПолеСтруктуры("ИдентификаторСметы", "",
		Тип,
		Описание,
		Ложь,
		"@ИдСмета");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Внешний идентификатор сметы.
	// Требуется указание данного атрибута или атрибута "Идентификатор сметы,
	// присвоенный в ЕИС" (ИдСмета) при внесении изменений в проект незавершенной сметы.
	Результат.Вставить("ВнешнийИдентификаторСметы", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40));
	Описание = НСтр("ru = 'Внешний идентификатор сметы.'");
	Поле = НовоеПолеСтруктуры("ВнешнийИдентификаторСметы", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешИдСмета");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Версия сметы.
	// При приеме первой версии в атрибуте должно указываться значение 1.
	// Значение каждой последующей версии должно быть увеличено на 1 относительно предыдущей.
	Результат.Вставить("ВерсияСметы", "");
	Тип = Новый ОписаниеТипов("");
	Описание = НСтр("ru = 'Версия сметы.'");
	Поле = НовоеПолеСтруктуры("ВерсияСметы", "",
		Тип,
		Описание,
		Истина,
		"@ВерсСмета");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Версия формата.
	Результат.Вставить("ВерсияФормата", "");
	Тип = Новый ОписаниеТипов("");
	Описание = НСтр("ru = 'Версия формата'");
	Значение = ЭлектронноеАктированиеЕИС.ВерсияФормата();
	Поле = НовоеПолеСтруктуры("ВерсияФормата", Значение,
		Тип,
		Описание,
		Истина,
		"@ВерсФорм");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сведения о контракте, к которому формируется смета.
	// См. НовыеСведенияОКонтрактеСоСметой
	Результат.Вставить("СведенияОКонтракте", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о контракте, к которому формируется смета'");
	Конструктор = "НовыеСведенияОКонтрактеСоСметой";
	Значение = НовыеСведенияОКонтрактеСоСметой();
	Поле = НовоеПолеСтруктуры("СведенияОКонтракте", Значение,
		Тип,
		Описание,
		Истина,
		"СведКонт", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения о смете.
	// См. НовыеСведенияОСмете
	Результат.Вставить("СведенияОСмете", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о смете'");
	Конструктор = "НовыеСведенияОСмете";
	Значение = НовыеСведенияОСмете();
	Поле = НовоеПолеСтруктуры("СведенияОСмете", Значение,
		Тип,
		Описание,
		Истина,
		"СведСмета", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;

КонецФункции

// Новые сведения о смете.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о смете:
// * НаименованиеОбъектаСтроительства - Строка
// * ИтогоПоСметеБезНДС - Число
// * ИтогоПоСметеСНДС - Число
// * СуммаНеОблагаемаяНалогомПоСтавкеБезНДСИ0 - Строка
// * СуммаНалогаПоСтавке10 - Число
// * СуммаНалогаПоСтавке20 - Число
// * СуммаСтоимостиВозвратныхПозиций - Число
// * СведенияОТоварахРаботахУслугах - Массив из см. НовыеСведенияОТоварахРаботахУслугахСметы
Функция НовыеСведенияОСмете() Экспорт

	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Наименование объекта строительства.
	Результат.Вставить("НаименованиеОбъектаСтроительства", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2000));
	Описание = НСтр("ru = 'Наименование объекта строительства'");
	Поле = НовоеПолеСтруктуры("НаименованиеОбъектаСтроительства", "",
		Тип,
		Описание,
		Истина,
		"@НаимОбСтр");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Итого по смете без НДС.
	// Игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("ИтогоПоСметеБезНДС", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Итого по смете без НДС.'");
	Поле = НовоеПолеСтруктуры("ИтогоПоСметеБезНДС", "",
		Тип,
		Описание,
		Ложь,
		"@ИтогоБезНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Итого по смете с НДС.
	// Игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("ИтогоПоСметеСНДС", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Итого по смете с НДС.'");
	Поле = НовоеПолеСтруктуры("ИтогоПоСметеСНДС", 0,
		Тип,
		Описание,
		Ложь,
		"@ИтогоСНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сумма, не облагаемая налогом (по ставке Без НДС и 0%).
	Результат.Вставить("СуммаНеОблагаемаяНалогомПоСтавкеБезНДСИ0", "");
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Сумма, не облагаемая налогом (по ставке Без НДС и 0%)'");
	Поле = НовоеПолеСтруктуры("СуммаНеОблагаемаяНалогомПоСтавкеБезНДСИ0", 0,
		Тип,
		Описание,
		Ложь,
		"@ИтогоСумНеОблНал");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сумма налога по ставке 10%.
	Результат.Вставить("СуммаНалогаПоСтавке10", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Сумма налога по ставке 10%'");
	Поле = НовоеПолеСтруктуры("СуммаНалогаПоСтавке10", 0,
		Тип,
		Описание,
		Ложь,
		"@СумНал10");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сумма налога по ставке 20%.
	Результат.Вставить("СуммаНалогаПоСтавке20", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,2));
	Описание = НСтр("ru = 'Сумма налога по ставке 20%'");
	Поле = НовоеПолеСтруктуры("СуммаНалогаПоСтавке20", "",
		Тип,
		Описание,
		Ложь,
		"@СумНал20");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сумма стоимости возвратных позиций.
	// Игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("СуммаСтоимостиВозвратныхПозиций", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,2));
	Описание = НСтр("ru = 'Сумма стоимости возвратных позиций.'");
	Поле = НовоеПолеСтруктуры("СуммаСтоимостиВозвратныхПозиций", "",
		Тип,
		Описание,
		Ложь,
		"@СумВозврПоз");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сведения о товарах, работах, услугах (ТРУ).
	// См. НовыеСведенияОТоварахРаботахУслугахСметы
	Результат.Вставить("СведенияОТоварахРаботахУслугах", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Сведения о товарах, работах, услугах (ТРУ)'");
	Конструктор = "НовыеСведенияОТоварахРаботахУслугах";
	Значение = Новый Массив;
	СведенияТРУ = НовыеСведенияОТоварахРаботахУслугахСметы();
	Значение.Добавить(СведенияТРУ);
	Поле = НовоеПолеСтруктуры("СведенияОТоварахРаботахУслугах", Значение,
		Тип,
		Описание,
		Истина,
		"СведТРУ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
		
КонецФункции

// Новые сведения о товарах работах услугах сметы.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о товарах работах услугах сметы:
// * СведенияОПозицииТРУ - См. НовыеСведенияОНеДетализированнойПозицииТРУСметы
// * СведенияОДетализированныхПозицияхТРУ - См. НовыеСведенияОДетализированныхПозицияхТРУСметы
Функция НовыеСведенияОТоварахРаботахУслугахСметы() Экспорт

	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сведения о позиции ТРУ.
	// В блоке указываются не детализированные позиции ТРУ из сведений о контракте
	// (у которых отсутствуют соподчиненные позиции) или соподчиненные позиции ТРУ из сведений о контракте.
	// См. НовыеСведенияОНеДетализированнойПозицииТРУСметы
	Результат.Вставить("СведенияОПозицииТРУ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о позиции ТРУ.'");
	Конструктор = "НовыеСведенияОПозицииТРУ";
	Поле = НовоеПолеСтруктуры("СведенияОПозицииТРУ", "",
		Тип,
		Описание,
		Ложь,
		"НедеталТРУ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сведения о детализированных позициях ТРУ.
	// В блоке указываются сведения о приемке детализированных позиций ТРУ.
	// См. НовыеСведенияОДетализированныхПозицияхТРУСметы
	Результат.Вставить("СведенияОДетализированныхПозицияхТРУ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о детализированных позициях ТРУ.'");
	Конструктор = "НовыеСведенияОДетализированныхПозицияхТРУ";
	Поле = НовоеПолеСтруктуры("СведенияОДетализированныхПозицияхТРУ", "",
		Тип,
		Описание,
		Ложь,
		"ДеталТРУ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

// Новые сведения о не детализированной позиции ТРУСметы.
// 
// Возвращаемое значение:
//  Структура:
// * РазделыВидовРабот - См. НовыеДанныеДетализацииПоРазделамВидовРабот
Функция НовыеСведенияОНеДетализированнойПозицииТРУСметы() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	НовыеСведенияОПозицииСметы(Результат);
	
	// Детализация по разделам видов работ и/или по конструктивным решениям (видам работ).
	// Блок может быть заполнен только в том случае, если позиция из сведений о контракте является работой.
	// См. НовыеДанныеДетализацииПоРазделамВидовРабот
	Результат.Вставить("РазделыВидовРабот", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Детализация по разделам видов работ и/или по конструктивным решениям (видам работ).'");
	Конструктор = "НовыеДанныеДетализацииПоРазделамВидовРабот";
	Поле = НовоеПолеСтруктуры("РазделыВидовРабот", "",
		Тип,
		Описание,
		Ложь,
		"РазделВидРаб", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о позиции сметы.
// 
// Параметры:
//  Результат - Структура
// 
// Возвращаемое значение:
//  Структура:
// * НомерСтрокиТаблицы - Строка
// * Идентификатор - Строка
// * ТехническийИдентификатор - Строка
// * ВнешнийТехническийИдентификаторПозиции - Строка
// * ПризнакТоварРаботаУслуга - Строка
// * ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками - Строка
// * КодТовара - Строка
// * Наименование - Строка
// * ЦенаЗаЕдиницуСНДС - Число
// * ЦенаЗаЕдиницуБезНДС - Число
// * НалоговаяСтавка - Строка
// * СтоимостьБезНалогаВсего - Число
// * СтоимостьБезНалогаВсего - Число
// * КоличествоИлиОбъемРаботы - См. НовыеДанныеКоличествоИлиОбъем
// * ОКЕИ - см. ЭлектронноеАктированиеЕИС.НовоеЗначениеОКЕИ
// * СуммаНалога - см. НовыеДанныеСуммаНалога
// * ДополнительныеСведенияОТоваре - см. НовыеДополнительныеСведенияОТоваре
Функция НовыеСведенияОПозицииСметы(Результат = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Номер строки таблицы.
	// Игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("НомерСтрокиТаблицы", "");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = НСтр("ru = 'Номер строки таблицы.'");
	Поле = НовоеПолеСтруктуры("НомерСтрокиТаблицы", "",
		Тип,
		Описание,
		Ложь,
		"@НомСтр");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// GUID товара, работы, услуги.
	Результат.Вставить("Идентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(32,
			ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'GUID товара, работы, услуги'");
	Поле = НовоеПолеСтруктуры("Идентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	Результат.Вставить("ТехническийИдентификатор", "");
	Тип = Новый ОписаниеТипов("Число");
	Описание = НСтр("ru = 'Технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ТехническийИдентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ТехИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Внешний технический идентификатор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	Результат.Вставить("ВнешнийТехническийИдентификаторПозиции", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40));
	Описание = НСтр("ru = 'Внешний технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ВнешнийТехническийИдентификаторПозиции", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешТехИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Признак Товар/Работа/Услуга.
	// Если для позиции в сведениях о контракте:
	// - заполнено поле "Тип объекта закупки", то данный атрибут должен быть 
	// заполнен соответствующим значением из сведений о контракте;
	Результат.Вставить("ПризнакТоварРаботаУслуга", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(1, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Признак Товар/Работа/Услуга.'");
	Поле = НовоеПолеСтруктуры("ПризнакТоварРаботаУслуга", "",
		Тип,
		Описание,
		Истина,
		"@ПрТовРаб");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Признак поставки объекта закупки с улучшенными характеристиками:
	// - 1 - не установлен;
	// - 2 - установлен из информации о контракте;
	// - 3 - установлен пользователем.
	// Если для позиции ТРУ в сведениях о контракте установлен одноименный признак,
	// то контролируется, что в составе данного атрибута указано.
	Результат.Вставить("ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками", "");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = НСтр("ru = 'Признак поставки объекта закупки с улучшенными характеристиками'");
	Поле = НовоеПолеСтруктуры("ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками", "",
		Тип,
		Описание,
		Истина,
		"@ПрУлучшХаракт");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Код товара.
	// В атрибуте должен быть указан код позиции по ОКПД2/КТРУ из сведений
	// о контракте за исключением случая, когда в сведениях о контракте указан код в
	// соответствии с ОКПД2 и в атрибуте "Признак поставки объекта закупки с улучшенными характеристиками"
	// (ПрУлучшХаракт) указано значение 2 или 3.
	Результат.Вставить("КодТовара", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	Описание = НСтр("ru = 'Код товара.'");
	Поле = НовоеПолеСтруктуры("КодТовара", "",
		Тип,
		Описание,
		Истина,
		"@КодТов");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Наименование ТРУ.
	Результат.Вставить("Наименование", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2000));
	Описание = НСтр("ru = 'Наименование ТРУ'");
	Поле = НовоеПолеСтруктуры("Наименование", "",
		Тип,
		Описание,
		Истина,
		"@НаимТов");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Цена за единицу с НДС.
	// Если в связанном контракте в поле "Способ указания цены контракта"
	// установлен переключатель "Максимальное значение цены контракта",
	// заполнено поле "Формула цены контракта" и не установлен признак
	// "Невозможно указать сведения о количестве товара, работы, услуги",
	// то значение принимается из пакета.
	Результат.Вставить("ЦенаЗаЕдиницуСНДС", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(27,11));
	Описание = НСтр("ru = 'Цена за единицу с НДС.'");
	Поле = НовоеПолеСтруктуры("ЦенаЗаЕдиницуСНДС", "",
		Тип,
		Описание,
		Ложь,
		"@ЦенаСНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Цена за единицу без НДС.
	// Игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("ЦенаЗаЕдиницуБезНДС", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(27,11));
	Описание = НСтр("ru = 'Цена за единицу без НДС.'");
	Поле = НовоеПолеСтруктуры("ЦенаЗаЕдиницуБезНДС", "",
		Тип,
		Описание,
		Ложь,
		"@ЦенаБезНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Налоговая ставка.
	Результат.Вставить("НалоговаяСтавка", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(35));
	Описание = НСтр("ru = 'Налоговая ставка'");
	Поле = НовоеПолеСтруктуры("НалоговаяСтавка", "",
		Тип,
		Описание,
		Истина,
		"@НалСт");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Стоимость без налога - всего.
	// Если для позиции задан атрибут "Объем в текстовом выражении" (КолИлиОб/ОбъемТекст),
	// то значение принимается из пакета, при этом контролируется обязательное заполнение.
	// Если для позиции задан атрибут "Количество" (КолИлиОб/Колич), то значение игнорируется при приеме.
	Результат.Вставить("СтоимостьБезНалогаВсего", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,2));
	Описание = НСтр("ru = 'Стоимость без налога - всего.'");
	Поле = НовоеПолеСтруктуры("СтоимостьБезНалогаВсего", "",
		Тип,
		Описание,
		Ложь,
		"@СтоимБезНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Стоимость без налога - всего.
	// Для работ и услуг игнорируется при приеме, не заполняется при передаче.
	// Для товаров:
	// - если для позиции задан атрибут "Объем в текстовом выражении" (КолИлиОб/ОбъемТекст),
	//   то значение принимается из пакета, при этом контролируется обязательное заполнение.
	// - если для позиции задан атрибут "Количество" (КолИлиОб/Колич),
	//   то значение игнорируется при приеме, заполняется при передаче автоматически
	// рассчитанным значением.
	Результат.Вставить("СтоимостьБезНалогаВсего", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,2));
	Описание = НСтр("ru = 'Стоимость без налога - всего.'");
	Поле = НовоеПолеСтруктуры("СтоимостьБезНалогаВсего", "",
		Тип,
		Описание,
		Ложь,
		"@СтоимСНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Количество или объем работы по смете.
	// Если в связанном контракте в поле "Способ указания объема выполнения работы,
	// оказания услуги" указано значение "Объем не может быть указан в количественном
	// выражении (указание объема в текстовом виде)", то должен быть заполнен дочерний
	// атрибут  "Объем в текстовом выражении" (ОбъемТекст), иначе "Количество" (Колич).
	// См. НовыеДанныеКоличествоИлиОбъем
	Результат.Вставить("КоличествоИлиОбъемРаботы", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Количество или объем работы по смете.'");
	Конструктор = "НовыеДанныеКоличествоИлиОбъем";
	Поле = НовоеПолеСтруктуры("КоличествоИлиОбъемРаботы", "",
		Тип,
		Описание,
		Ложь,
		"КолИлиОб", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Единица измерения по ОКЕИ.
	// Игнорируется при приеме, заполняется при передаче из сведений о контракте.
	// См. ЭлектронноеАктированиеЕИС.НовоеЗначениеОКЕИ
	Результат.Вставить("ОКЕИ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Единица измерения по ОКЕИ.'");
	Конструктор = "ЭлектронноеАктированиеЕИС.НовоеЗначениеОКЕИ";
	Поле = НовоеПолеСтруктуры("ОКЕИ", "",
		Тип,
		Описание,
		Ложь,
		"ОКЕИ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сумма налога.
	// Если позиция является работой или услугой, то игнорируется при приеме,
	// при передаче заполняется дочернее поле "Знак прочерка" (ДефНДС).
	// Для товаров значение принимается из пакета.
	// См. НовыеДанныеСуммаНалога
	Результат.Вставить("СуммаНалога", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сумма налога.'");
	Конструктор = "НовыеДанныеСуммаНалога";
	Поле = НовоеПолеСтруктуры("СуммаНалога", "",
		Тип,
		Описание,
		Ложь,
		"СумНал", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Дополнительные сведения о товаре.
	// Блок принимается только в том случае, если позиция ТРУ является товаром.
	// В других случаях игнорируется при приеме.
	// См. НовыеДополнительныеСведенияОТоваре
	Результат.Вставить("ДополнительныеСведенияОТоваре", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Дополнительные сведения о товаре.'");
	Конструктор = "НовыеДополнительныеСведенияОТоваре";
	Поле = НовоеПолеСтруктуры("ДополнительныеСведенияОТоваре", "",
		Тип,
		Описание,
		Ложь,
		"ДопСведТов", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

Функция НовыеДополнительныеСведенияОТоваре() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сорт товара.
	Результат.Вставить("СортТовара", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Описание = НСтр("ru = 'Сорт товара'");
	Поле = НовоеПолеСтруктуры("СортТовара", "",
		Тип,
		Описание,
		Ложь,
		"@СортТов");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Артикул товара.
	Результат.Вставить("АртикулТовара", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	Описание = НСтр("ru = 'Артикул товара'");
	Поле = НовоеПолеСтруктуры("АртикулТовара", "",
		Тип,
		Описание,
		Ложь,
		"@АртикулТов");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Код вида товара.
	Результат.Вставить("КодВидаТовара", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Код вида товара'");
	Поле = НовоеПолеСтруктуры("КодВидаТовара", "",
		Тип,
		Описание,
		Ложь,
		"@КодВидТов");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сведения о стране происхождения товара.
	// Страна должна быть указана в соответствии со страной происхождений,
	// указанной в сведениях о контракте.
	// Если в сведениях о контракте страна происхождения не указана,
	// то допускается указание страны в соответствии со справочником ОКСМ.
	// См. НовыеСведенияОСтране
	Результат.Вставить("СтранаПроисхождения", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о стране происхождения товара.'");
	Конструктор = "НовыеСведенияОСтране";
	Поле = НовоеПолеСтруктуры("СтранаПроисхождения", "",
		Тип,
		Описание,
		Ложь,
		"СтранаПроисх", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения о стране регистрации производителя товара.
	// Контролируется присутствие значения в справочнике ОКСМ.
	// См. НовыеСведенияОСтране
	Результат.Вставить("СтранаРегистрацииПроизводителя", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о стране регистрации производителя товара.'");
	Конструктор = "";
	Поле = НовоеПолеСтруктуры("СтранаРегистрацииПроизводителя", "",
		Тип,
		Описание,
		Ложь,
		"СтранаПроизв", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

// Новые сведения о стране.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о стране:
// * Код - Строка
// * КраткоеНаименование - Строка
Функция НовыеСведенияОСтране() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Код.
	Результат.Вставить("Код", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
	Описание = НСтр("ru = 'Код'");
	Поле = НовоеПолеСтруктуры("Код", "",
		Тип,
		Описание,
		Истина,
		"@Код");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Краткое наименование.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОКСМ.
	Результат.Вставить("КраткоеНаименование", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255));
	Описание = НСтр("ru = 'Краткое наименование.'");
	Поле = НовоеПолеСтруктуры("КраткоеНаименование", "",
		Тип,
		Описание,
		Ложь,
		"@Наим");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

// Новые данные сумма налога.
// 
// Возвращаемое значение:
//  Структура - Новые данные сумма налога:
// * СуммаНалога - Число
// * БезНДС - Строка
// * ЗнакПрочерка - Строка
Функция НовыеДанныеСуммаНалога() Экспорт

	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Значение.
	Результат.Вставить("СуммаНалога", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,2));
	Описание = НСтр("ru = 'Значение'");
	Поле = НовоеПолеСтруктуры("СуммаНалога", "",
		Тип,
		Описание,
		Ложь,
		"@СумНал");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Без НДС.
	Результат.Вставить("БезНДС", "");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = НСтр("ru = 'Без НДС'");
	Поле = НовоеПолеСтруктуры("БезНДС", "",
		Тип,
		Описание,
		Ложь,
		"@БезНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Знак прочерка.
	Результат.Вставить("ЗнакПрочерка", "");
	Тип = Новый ОписаниеТипов("Строка", ,
			Новый КвалификаторыСтроки(1, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Знак прочерка'");
	Поле = НовоеПолеСтруктуры("ЗнакПрочерка", "",
		Тип,
		Описание,
		Ложь,
		"@ДефНДС");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОДетализированныхПозицияхТРУСметы() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сведения о родительской позиции ТРУ.
	// В блоке указываются не детализированные позиции ТРУ из сведений о контракте
	// (у которых отсутствуют соподчиненные позиции) или соподчиненные позиции ТРУ
	// из сведений о контракте, которые являются услугами или товарами.
	// См. НовыеСведенияОПозицииСметы
	Результат.Вставить("СведенияОРодительскойПозиции", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о родительской позиции ТРУ.'");
	Конструктор = "";
	Поле = НовоеПолеСтруктуры("СведенияОРодительскойПозицииТРУ", "",
		Тип,
		Описание,
		Истина,
		"СведРод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения о детализированной (дочерней) позиции ТРУ.
	// В составе блока:
	// - требуется обязательное указание атрибута "GUID товара, работы, услуги" (ИдТРУ);
	// - игнорируется атрибут "Технический идентификатор позиции ТРУ" (ТехИдТРУ);
	// - игнорируется атрибут "Внешний технический идентификатор позиции ТРУ".
	// См. НовыеСведенияОПозицииСметы
	Результат.Вставить("СведенияОДетализированнойДочернейПозиции", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Сведения о детализированной (дочерней) позиции ТРУ.'");
	Конструктор = "";
	Поле = НовоеПолеСтруктуры("СведенияОДетализированнойДочернейПозицииТРУ", "",
		Тип,
		Описание,
		Истина,
		"СведДетал", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Текст сметы контракта.
// 
// Параметры:
//  ДанныеСметы - см. НовыеСведенияОСмете
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСметыКонтракта(ДанныеСметы) Экспорт
	
	ДеревоДанных = ЭлектронноеАктированиеЕИС.СоздатьДеревоXML();
	
	ЭлектронноеАктированиеЕИС.ДобавитьУзелXML(
		ДеревоДанных, "xmlns", Истина,
		ЭлектронноеАктированиеЕИС.ПространствоИменТранспортногоПакетаЕИС());
	
	// Заполнение дерева.
	ЭлектронноеАктированиеЕИС.ЗаполнитьУзелДереваXMLПоСтруктуре(ДанныеСметы, ДеревоДанных);
	
	ТекстПриложения = ЭлектронноеАктированиеЕИС.ВыгрузитьДеревоВXML(
		ДеревоДанных, "ФайлСметаКонт");
	
	Возврат ТекстПриложения;
	
КонецФункции

#КонецОбласти

// Новые сведения о ТРУ в с соответствии со сметой контракта.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о ТРУ в соответствии со сметой контракта:
// * СведенияОПозицииТРУ - Структура
// * СведенияОДетализированныхПозицияхТРУ - Структура
Функция НовыеСведенияОТРУВСоответствииСоСметой() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);

	// Сведения о позиции ТРУ.
	// См. НовыеСведенияОТРУВСоответствииСоСметойБезДетализации
	Результат.Вставить("СведенияОПозицииТРУ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о позиции ТРУ'");
	Конструктор = "НовыеДанныеДетализацииПоРазделамВидовРабот";
	Поле = НовоеПолеСтруктуры("СведенияОПозицииТРУ", Неопределено,
		Тип,
		Описание,
		Ложь,
		"НедеталТРУ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения о детализированных позициях ТРУ.
	// В блоке указываются сведения о приемке детализированных позиций ТРУ.
	// См. НовыеСведенияОДетализированныхПозицияхТРУ
	Результат.Вставить("СведенияОДетализированныхПозицияхТРУ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о детализированных позициях ТРУ.'");
	Конструктор = "НовыеСведенияОДетализированныхПозицияхТРУ";
	Поле = НовоеПолеСтруктуры("СведенияОДетализированныхПозицияхТРУ", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ДеталТРУ", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Новые сведения о детализированных позициях ТРУ.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о детализированных позициях ТРУ:
// * СведенияОРодительскойПозицииТРУ - Структура
// * СведенияОДочернейПозицииТРУ - Массив из см. НовыеСведенияОДочернейПозицииТРУ
Функция НовыеСведенияОДетализированныхПозицияхТРУ() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сведения о родительской позиции ТРУ.
	// См. НовыеСведенияОРодительскойПозицииТРУ
	Результат.Вставить("СведенияОРодительскойПозицииТРУ", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Сведения о родительской позиции ТРУ'");
	Конструктор = "НовыеСведенияОРодительскойПозицииТРУ";
	Поле = НовоеПолеСтруктуры("СведенияОРодительскойПозицииТРУ", "",
		Тип,
		Описание,
		Ложь,
		"СведРод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения о детализированной (дочерней) позиции ТРУ.
	// см. НовыеСведенияОДочернейПозицииТРУ
	Результат.Вставить("СведенияОДочернейПозицииТРУ", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Сведения о детализированной (дочерней) позиции ТРУ'");
	Конструктор = "НовыеСведенияОДочернейПозицииТРУ";
	Поле = НовоеПолеСтруктуры("СведенияОДочернейПозицииТРУ", "",
		Тип,
		Описание,
		Ложь,
		"СведДетал", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о родительской позиции ТРУ.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о родительской позиции ТРУ:
// * Идентификатор - Строка
// * ТехническийИдентификатор - Число
// * ВнешнийТехническийИдентификатор - Строка
Функция НовыеСведенияОРодительскойПозицииТРУ() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// GUID товара, работы, услуги.
	Результат.Вставить("Идентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'GUID товара, работы, услуги'");
	Поле = НовоеПолеСтруктуры("Идентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	Результат.Вставить("ТехническийИдентификатор", 0);
	Тип = Новый ОписаниеТипов("Число");
	Описание = НСтр("ru = 'Технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ТехническийИдентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ТехИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Внешний технический идентификатор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	Результат.Вставить("ВнешнийТехническийИдентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40));
	Описание = НСтр("ru = 'Внешний технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ВнешнийТехническийИдентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешТехИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОДочернейПозицииТРУ(Параметры) Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// GUID товара, работы, услуги.
	Результат.Вставить("Идентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'GUID товара, работы, услуги'");
	Поле = НовоеПолеСтруктуры("Идентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено с начала выполнения работ (без учета отчетного периода).
	// Блок может быть заполнен только в том случае, если последний документ 
	// по контракту не имеет признака накопительного итога.
	// См. НовыеДанныеВыполненияЗаПериод
	Результат.Вставить("ВыполненоСНачалаВыполненияРабот", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено с начала выполнения работ (без учета отчетного периода).'");
	Значение = Неопределено;
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоСНачалаВыполненияРабот", Значение,
		Тип,
		Описание,
		Ложь,
		"ВыпНачПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено за отчетный период.
	// См. НовыеДанныеВыполненияЗаПериод
	Результат.Вставить("ВыполненоЗаОтчетныйПериод", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено за отчетный период.'");
	Значение = Неопределено;
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоЗаОтчетныйПериод", Значение,
		Тип,
		Описание,
		Ложь,
		"ВыпОтчПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о ТРУ в соответствии со сметой контракта без детализации.
// 
// Возвращаемое значение:
//  Структура - Новые сведения О ТРУ в соответствии со сметой контракта без детализации:
// * Идентификатор - Строка - Устарело, игнорируется при приеме.
// * ТехническийИдентификатор - Число - Устарело, игнорируется при приеме.
// * ВнешнийТехническийИдентификатор - Строка - Устарело, игнорируется при приеме.
// * ИдентификаторПозиции - Строка
// * ВыполненоСНачалаВыполненияРабот - см. НовыеДанныеВыполненияЗаПериод
// * ВыполненоЗаОтчетныйПериод - см. НовыеДанныеВыполненияЗаПериод
// * ДетализацияПоРазделамВидовРабот - см. НовыеДанныеДетализацииПоРазделамВидовРабот
Функция НовыеСведенияОТРУВСоответствииСоСметойБезДетализации() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// GUID товара, работы, услуги.
	// Устарело, игнорируется при приеме.
	Результат.Вставить("Идентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'GUID товара, работы, услуги'");
	Поле = НовоеПолеСтруктуры("Идентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУ", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	// Устарело, игнорируется при приеме.
	Результат.Вставить("ТехническийИдентификатор", 0);
	Тип = Новый ОписаниеТипов("Число");
	Описание = НСтр("ru = 'Технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ТехническийИдентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ТехИдТРУ", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Внешний технический идентификатор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	// Устарело, игнорируется при приеме.
	Результат.Вставить("ВнешнийТехническийИдентификатор", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40));
	Описание = НСтр("ru = 'Внешний технический идентификатор позиции ТРУ.'");
	Поле = НовоеПолеСтруктуры("ВнешнийТехническийИдентификатор", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешТехИдТРУ", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// GUID товара, работы, услуги, идентифицирующий позицию в составе принимаемого
	// документа электронного актирования (сметы контракта).
	// Указывается идентификатор позиции, присвоенный при формировании сметы.
	Результат.Вставить("ИдентификаторПозиции", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'GUID позиции ТРУ в составе документа актирования (сметы контракта)'");
	Поле = НовоеПолеСтруктуры("ИдентификаторПозиции", "",
		Тип,
		Описание,
		Ложь,
		"@ЭАИдТРУ");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено с начала выполнения работ (без учета отчетного периода).
	// Блок может быть заполнен только в том случае, если последний документ 
	// по контракту не имеет признака накопительного итога.
	// В других случаях игнорируется при приеме.
	// Также игнорируется при приеме при наличии блока 
	// "Детализация по разделам видов работ и/или по конструктивным решениям (видам работ)"
	// (ФайлУПДПрод/СведТов/СведТРУСметаКонт/НедеталТРУ/РазделВидРаб).
	// См. НовыеДанныеВыполненияЗаПериод
	Результат.Вставить("ВыполненоСНачалаВыполненияРабот", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено с начала выполнения работ (без учета отчетного периода).'");
	Значение = Неопределено;
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоСНачалаВыполненияРабот", Значение,
		Тип,
		Описание,
		Ложь,
		"ВыпНачПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено за отчетный период.
	// Игнорируется при приеме при наличии блока
	// "Детализация по разделам видов работ и/или по конструктивным решениям
	// (видам работ)" (ФайлУПДПрод/СведТов/СведТРУСметаКонт/НедеталТРУ/РазделВидРаб).
	// См. НовыеДанныеВыполненияЗаПериод
	Результат.Вставить("ВыполненоЗаОтчетныйПериод", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено за отчетный период.'");
	Значение = Неопределено;
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоЗаОтчетныйПериод", Значение,
		Тип,
		Описание,
		Ложь,
		"ВыпОтчПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Детализация по разделам видов работ и/или по конструктивным решениям (видам работ).
	// Блок может быть заполнен только в том случае, если позиция из сведений
	// о контракте является работой.
	// См. НовыеДанныеДетализацииПоРазделамВидовРабот
	Результат.Вставить("ДетализацияПоРазделамВидовРабот", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Детализация по разделам видов работ и/или по конструктивным решениям (видам работ).'");
	Конструктор = "НовыеДанныеДетализацииПоРазделамВидовРабот";
	Поле = НовоеПолеСтруктуры("ДетализацияПоРазделамВидовРабот", "",
		Тип,
		Описание,
		Ложь,
		"РазделВидРаб", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;

КонецФункции

// Новые данные детализации по разделам видов работ.
// 
// Возвращаемое значение:
//  Структура - Новые данные детализации по разделам видов работ:
// * РазделВидовРабот - Массив из см. НовыеДанныеРазделВидовРабот 
// * ВидРаботУПД - Массив из см. НовыеДанныеВидРаботУПД
Функция НовыеДанныеДетализацииПоРазделамВидовРабот() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Раздел видов работ.
	// См. НовыеДанныеРазделВидовРабот
	Результат.Вставить("РазделВидовРабот", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Раздел видов работ'");
	Поле = НовоеПолеСтруктуры("РазделВидовРабот", "",
		Тип,
		Описание,
		Ложь,
		"Раздел", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Конструктивное решение (вид работ) (УПД).
	// В блоке должен быть заполнен атрибут:
	// - "Количество ТРУ, фактически принятое заказчиком"
	//   (КолВидРабПринЗак), если в УПД (титул продавца) для данного вида работы заполнен атрибут "Количество (объем)" (КолВидРаб);
	// - "Объем работы, фактически принятый заказчиком".
	// См. НовыеДанныеВидРаботУПД
	Результат.Вставить("ВидРаботУПД", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Конструктивное решение (вид работ) (УПД).'");
	Конструктор = "НовыеДанныеВидРаботУПД";
	Поле = НовоеПолеСтруктуры("ВидРаботУПД", "",
		Тип,
		Описание,
		Ложь,
		"ВидРаб", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	Возврат Результат;

КонецФункции

// Новые данные раздел видов работ.
// 
// Возвращаемое значение:
//  Структура - Новые данные раздел видов работ:
// * ИдентификаторРаздела - Строка
// * ВидРаботУПД - Массив из см. НовыеДанныеВидРаботУПД
Функция НовыеДанныеРазделВидовРабот() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Идентификатор (GUID) раздела.
	Результат.Вставить("ИдентификаторРаздела", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Идентификатор (GUID) раздела'");
	Поле = НовоеПолеСтруктуры("ИдентификаторРаздела", "",
		Тип,
		Описание,
		Ложь,
		"@ИдРаздел", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Конструктивное решение (вид работ) (УПД).
	// См. НовыеДанныеВидРаботУПД
	Результат.Вставить("ВидРаботУПД", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Конструктивное решение (вид работ) (УПД)'");
	Конструктор = "НовыеДанныеВидРаботУПД";
	Поле = НовоеПолеСтруктуры("ВидРаботУПД", "",
		Тип,
		Описание,
		Ложь,
		"ВидРаб", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Новые данные вид работ УПД.
// 
// Возвращаемое значение:
//  Структура - Новые данные вид работ УПД:
// * ИдентификаторВидаРабот - Строка
// * ВыполненоСНачалаВыполненияРабот - см. НовыеДанныеВыполненияЗаПериод
// * ВыполненоЗаОтчетныйПериод - см. НовыеДанныеВыполненияЗаПериод
Функция НовыеДанныеВидРаботУПД() Экспорт
	
	Результат = Новый Структура;
	
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Идентификатор (GUID) конструктивного решения (вида работ).
	Результат.Вставить("ИдентификаторВидаРабот", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(32,
		ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Идентификатор (GUID) конструктивного решения (вида работ)'");
	Поле = НовоеПолеСтруктуры("ИдентификаторВидаРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ИдВидРаб", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено с начала выполнения работ (без учета отчетного периода).
	// Блок может быть заполнен только в том случае, если последний документ
	// по контракту не имеет признака накопительного итога, иначе игнорируется при приеме.
	// См. НовыеДанныеВыполненияЗаПериод
	Результат.Вставить("ВыполненоСНачалаВыполненияРабот", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено с начала выполнения работ (без учета отчетного периода).'");
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоСНачалаВыполнения", "",
		Тип,
		Описание,
		Ложь,
		"ВыпНачПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Выполнено за отчетный период.
	Результат.Вставить("ВыполненоЗаОтчетныйПериод", Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Выполнено за отчетный период'");
	Конструктор = "НовыеДанныеВыполненияЗаПериод";
	Поле = НовоеПолеСтруктуры("ВыполненоЗаОтчетныйПериод", "",
		Тип,
		Описание,
		Ложь,
		"ВыпОтчПериод", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Новые данные выполнения за период.
// 
// Возвращаемое значение:
//  Структура - Новые данные выполнения за период:
// * СтоимостьБезНалога - Число
// * КоличествоИлиОбъем - см. НовыеДанныеКоличествоИлиОбъем
Функция НовыеДанныеВыполненияЗаПериод() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Стоимость без налога.
	// Если для позиции в смете контракта задан объем, то контролируется обязательность
	// заполнения данного атрибута.
	// Если для позиции в смете контракта задано количество,
	// то игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("СтоимостьБезНалога", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 3));
	Описание = НСтр("ru = 'Стоимость без налога.'");
	Поле = НовоеПолеСтруктуры("СтоимостьБезНалога", 0,
		Тип,
		Описание,
		Ложь,
		"@СтоимБезНДС", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Количество или объем.
	// Если для позиции в смете контракта задано количество,
	// то контролируется обязательность заполнения дочернего атрибута "Колич" (Количество).
	// Если для позиции в смете контракта задан объем,
	// то контролируется обязательность заполнения дочернего атрибута
	// "Объем в текстовом выражен.
	Результат.Вставить("КоличествоИлиОбъем", Новый Структура());
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Количество или объем.'");
	Значение = НовыеДанныеКоличествоИлиОбъем();
	Поле = НовоеПолеСтруктуры("КоличествоИлиОбъем", Значение,
		Тип,
		Описание,
		Ложь,
		"@КолИлиОб", ,
		"НовыеДанныеКоличествоИлиОбъем");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Новые данные выполнения за период с НДС.
// 
// Возвращаемое значение:
//  Структура - Новые данные выполнения за период:
// * СтоимостьБезНалога - Число
// * СтоимостьСНалогом - Число
// * КоличествоИлиОбъем - См. НовыеДанныеКоличествоИлиОбъем
Функция НовыеДанныеВыполненияЗаПериодСНДС() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Стоимость без налога.
	// Если для позиции в смете контракта задан объем, то контролируется обязательность
	// заполнения данного атрибута.
	// Если для позиции в смете контракта задано количество,
	// то игнорируется при приеме, рассчитывается автоматически.
	Результат.Вставить("СтоимостьБезНалога", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Стоимость без налога.'");
	Поле = НовоеПолеСтруктуры("СтоимостьБезНалога", 0,
		Тип,
		Описание,
		Ложь,
		"@СтоимБезНДС", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Стоимость с налогом.
	// Игнорируется при приеме, рассчитывается автоматически для позиций, являющимися товарами.
	Результат.Вставить("СтоимостьСНалогом", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2));
	Описание = НСтр("ru = 'Стоимость с налогом.'");
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Ложь,
		"@СтоимСНДС", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Количество или объем.
	// Если для позиции в смете контракта задано количество,
	// то контролируется обязательность заполнения дочернего атрибута "Колич" (Количество).
	// Если для позиции в смете контракта задан объем,
	// то контролируется обязательность заполнения дочернего атрибута
	// "Объем в текстовом выражен.
	Результат.Вставить("КоличествоИлиОбъем", Новый Структура());
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Количество или объем.'");
	Значение = НовыеДанныеКоличествоИлиОбъем();
	Поле = НовоеПолеСтруктуры("КоличествоИлиОбъем", Значение,
		Тип,
		Описание,
		Ложь,
		"@КолИлиОб", ,
		"НовыеДанныеКоличествоИлиОбъем");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

// Новые данные количества или объема по смете.
// 
// Возвращаемое значение:
//  Структура - Новые данные количество или объема по смете:
// * Количество - Число 
// * ОбъемВТекстовомВыражении - Строка 
Функция НовыеДанныеКоличествоИлиОбъем() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Количество.
	Результат.Вставить("Количество", 0);
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(28, 12));
	Описание = НСтр("ru = 'Количество'");
	Поле = НовоеПолеСтруктуры("Количество", ,
		Тип,
		Описание,
		Ложь,
		"@Колич", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Объем в текстовом выражении.
	Результат.Вставить("ОбъемВТекстовомВыражении", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	Описание = НСтр("ru = 'Объем в текстовом выражении'");
	Поле = НовоеПолеСтруктуры("ОбъемВТекстовомВыражении", "",
		Тип,
		Описание,
		Ложь,
		"@ОбъемТекст", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новые сведения о контракте со сметой.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о контракте со сметой:
// * РеестровыйНомер - Строка
// * ИдентификаторВерсии - Строка
Функция НовыеСведенияОКонтрактеСоСметой()
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Реестровый номер контракта.
	// При приеме контролируется, что организация пользователя, от имени которого осуществляется загрузка,
	// является поставщиком по контракту с реестровым номером, заданным в данном атрибуте.
	Результат.Вставить("РеестровыйНомер", "");
	Тип = Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(19, ДопустимаяДлина.Фиксированная));
	Описание = НСтр("ru = 'Реестровый номер контракта.'");
	Поле = НовоеПолеСтруктуры("РеестровыйНомер", "",
		Тип,
		Описание,
		Истина,
		"@РеестрНомКонт");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Идентификатор версии контракта, на основании которой сформирована смета.
	// Контролируется, что смета контракта формируется к актуальной версии контракта.
	Результат.Вставить("ИдентификаторВерсии", "");
	Тип = Новый ОписаниеТипов("Число");
	Описание = НСтр("ru = 'Идентификатор версии контракта, на основании которой сформирована смета.'");
	Поле = НовоеПолеСтруктуры("ИдентификаторВерсии", "",
		Тип,
		Описание,
		Истина,
		"@ИдВерсКонт");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

#Область МетаданныеСтруктуры

Процедура ДобавитьМетаданныеСтруктуры(Результат)
	
	ЭлектронноеАктированиеЕИС.ДобавитьМетаданныеСтруктуры(Результат);
	
КонецПроцедуры

Функция НовоеПолеСтруктуры(Имя,
		Значение = Неопределено,
		ОписаниеТипа = Неопределено,
		Описание = "",
		Обязательное = Истина,
		ПутьЧтенияЗаписи = "",
		ПутьЗаписи = "",
		Конструктор = "",
		ТехОписание = "")
		
		Возврат ЭлектронноеАктированиеЕИС.НовоеПолеСтруктуры(Имя,
			Значение,
			ОписаниеТипа,
			Описание,
			Обязательное,
			ПутьЧтенияЗаписи,
			ПутьЗаписи,
			Конструктор,
			ТехОписание);
			
КонецФункции

Процедура ДобавитьПолеСтруктуры(Структура, ПараметрыПоля)

	ЭлектронноеАктированиеЕИС.ДобавитьПолеСтруктуры(Структура, ПараметрыПоля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
