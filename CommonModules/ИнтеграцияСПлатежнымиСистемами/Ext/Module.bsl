///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.ИнтеграцияСПлатежнымиСистемами.
//
// Серверные процедуры выполнения оплаты в платежных системах:
//  - определение доступности интеграции с платежными системами, а также получения настроек;
//  - создание, проверка статуса и подтверждение заказов на оплату в платежных системах;
//  - возврат оплаты по оплаченным заказам на оплату, подтверждения возврата и проверка статуса возврата;
//  - валидация параметров запросов;
//  - формирование QR-кодов для визуализации идентификаторов Системы быстрых платежей;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиОпераций

// Определяет доступность использования функциональности выполнения операций
// в платежной системе на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в платежной системе доступна.
//
Функция ИнтеграцияДоступна() Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиПовтИсп.ИнтеграцияДоступна();
	
КонецФункции

// Определяет доступность использования функциональности подключения
// к СБП на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в платежной системе доступна.
//
Функция НастройкаИнтеграцияДоступна() Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиПовтИсп.НастройкаИнтеграцияДоступна();
	
КонецФункции

// Определяет доступность операций для торговой точки. В сценариях оплаты
// различных платежных систем существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек интеграции.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - информация о доступных операциях:
//    * ОтменаЗаказа - Булево - признак доступности отмены не оплаченного
//      заказа в платежной системе. Для выполнения операции
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ОтменитьЗаказНаОплату;
//    * ОтменаОплаты - Булево - Устарел. Признак доступности отмены оплаченного
//      заказа (отмена транзакции) в платежной системе. Для выполнения операции
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ОтменитьОплату;
//    * СрокЖизниQRКода - Булево - признак доступности установки максимального
//      срока действия QR-кода;
//    * ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//      для выполнения оплаты;
//    * ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//      в платежную систему отличную от исходной. Для получения списка доступных платежных систем
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ПлатежныеСистемыВозврата;
//    * Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    * СинонимСистемы - Строка - синоним платежной системы для печати;
//    * Используется - Булево - признак активности настройки;
//    * КассовыеСсылки - Булево - признак поддержки кассовых ссылок;
//    * ПлатежныйАгрегатор - Булево - настроена интеграция с платежным агрегатором.
//
Функция НастройкиТорговойТочки(ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ВызватьИсключение НСтр("ru = 'Параметр ""ТорговаяТочка"" не заполнен.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Определение списка доступных операций.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.НастройкиТорговойТочки(
			ТорговаяТочка,
			ПараметрыИнтеграции.ПлатежнаяСистема);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Получает список платежных систем, в которые возможно вернуть денежные средства
// в рамках начального платежа. Метод следует вызывать только в том случае, если
// ВыборПлатежнойСистемыВозврата имеет значение Истина,
// см. ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Соответствие - идентификатор и наименование платежной системы:
//    *Ключ - Строка - идентификатор платежной системы, который необходимо
//            передать в метод д ИнтеграцияСПлатежнымиСистемами.ВозвратОплаты
//            при выполнении возврата;
//    *Значение - Строка - наименование платежной системы для отображения в пользовательских
//                интерфейсах.
//
Функция ПлатежныеСистемыВозврата(ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ВызватьИсключение НСтр("ru = 'Параметр ""ТорговаяТочка"" не заполнен.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.ПлатежныеСистемыВозврата();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Определяет торговые точки, по которым были выполнены операции в платежных системах.
// Метод следует использовать для отложенного получения статуса выполнения операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ оплаты или возврата,
//                   по которому были выполнены операции в платежных системах;
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    торговые точки, по которым были выполнены операции документа.
//
Функция ТорговыеТочкиОперации(ДокументОперации) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.НастройкаИнтеграции КАК НастройкаИнтеграции
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБП КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТорговыеТочки = Новый Массив;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТорговыеТочки.Добавить(ВыборкаДетальныеЗаписи.НастройкаИнтеграции);
	КонецЦикла;
	
	Возврат ТорговыеТочки;
	
КонецФункции

// Определяет возможность настройки интеграции с Системой быстрых платежей.
//
// Параметры:
//  БИК - Строка - идентификатор банка;
//
// Возвращаемое значение:
//  Структура - настройки интеграции:
//    * ИнтеграцияДоступна - Булево - если Истина, участник СБП интегрирован;
//    * ПараметрыУчастникаСБП - Структура, Неопределено - информация об участие СБП:
//      ** Наименование - Строка - имя банка участника СБП;
//      ** ТорговыеТочки  - Массив из НастройкиИнтеграцииСПлатежнымиСистемами - список настроенных торговых точек;
//      ** Идентификатор  - Строка - идентификатор участника СБП;
//
Функция НастройкиИнтеграции(БИК) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.НастройкиИнтеграции(БИК);
	
КонецФункции

#КонецОбласти

#Область ДинамическиеСсылки

// Создает новый заказ на оплату в платежной системы и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * QRКод - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "УжеОплачен" - документ уже оплачен в платежной системе;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ИдентификаторОплаты(ДокументОплаты, ТорговаяТочка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументОплаты,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового заказа на оплату.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ИдентификаторОплаты(
			ДокументОплаты,
			ПараметрыИнтеграции,
			ДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КассовыеСсылки

// Регистрирует новую кассовую ссылку и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * ДанныеСсылки - Структура - данные кассовой ссылки:
//      ** КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//      ** ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция КассоваяСсылка(ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("КассоваяСсылка", "");
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграцииБезДокументаОперации(
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание новой кассовой ссылки.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.КассоваяСсылка(ПараметрыИнтеграции);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Создает новый заказ на оплату для ранее созданной кассовой ссылки
// в платежной системе.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе;
//  ДанныеСсылки - Структура - данные кассовой ссылки:
//    * КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//    * ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "УжеОплачен" - документ уже оплачен в платежной системе;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктивироватьКассовуюСсылку(
		ДокументОплаты,
		ДанныеСсылки,
		ТорговаяТочка,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументОплаты,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового заказа на оплату.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.АктивироватьКассовуюСсылку(
			ДокументОплаты,
			ДанныеСсылки,
			ПараметрыИнтеграции,
			ДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Удаляет активный заказ для кассовой ссылки в платежной системе.
//
// Параметры:
//  ДанныеСсылки - Структура - данные кассовой ссылки:
//    * КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//    * ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДеактивироватьКассовуюСсылку(
		ДанныеСсылки,
		ТорговаяТочка) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатИдентификаторОплаты();
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграцииБезДокументаОперации(
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание новой кассовой ссылки.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ДеактивироватьКассовуюСсылку(
			ПараметрыИнтеграции,
			ДанныеСсылки);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Формирует табличный документ с данными кассовой ссылки.
//
// Параметры:
//  ДанныеСсылки - Структура - данные кассовой ссылки:
//    * КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//    * ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//  ПараметрыПечати - Структура - настройки печати:
//    * Тип - Число - формат печати;
//        Допустимые значения :
//          "1" - для кассовой ссылки будет сформирован макет формата А5 широкий;
//          "2" - для кассовой ссылки будет сформирован макет формата А5 только логотипы;
//          "3" - для кассовой ссылки будет сформирован макет формата А5 узкий;
//          "4" - для кассовой ссылки будет сформирован макет формата А5 узкий горизонтальный;
//          "5" - для кассовой ссылки будет сформирован макет формата А6 квадратный;
//          "6" - для кассовой ссылки будет сформирован макет формата А6 круглый.
//
// Возвращаемое значение:
//  ТабличныйДокумент - подготовленный для печати документ.
//
Функция СформироватьКарточкуКассовойСсылки(ДанныеСсылки, ПараметрыПечати) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.СформироватьКарточкуКассовойСсылки(
		ДанныеСсылки,
		ПараметрыПечати);
	
КонецФункции

#КонецОбласти

#Область ОперацииОплат

// Выполняет проверку статуса оплаты в платежной системе по ранее
// сформированному идентификатору оплаты (QR-коду).
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты;
//  ДлительныйВызов - Булево - если Истина, получение статуса оплаты будет выполнятся
//   в цикле. Длительность выполнения операции определяется на основании
//   данных константы ДлительностьОперацииПлатежнойСистемы.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - платежная система подтвердила оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатусОплаты(ДокументОплаты, ТорговаяТочка, ДлительныйВызов = Истина) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументОплаты,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Проверка статуса оплаты по ранее сформированному QR-коду.
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.СтатусОплаты(
			ДокументОплаты,
			ПараметрыИнтеграции,
			ДлительныйВызов);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Отменяет заказ на оплату, если оплата не была ранее подтверждена продавцом.
// Метод следует вызывать только в том случае, если ОтменаЗаказа имеет значение Истина,
// см. ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - результат отмены заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - отмена заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "ОтменаНеДоступна" - отмена оплаты невозможна, необходимо выполнить возврат;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//        подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//        интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОтменитьЗаказНаОплату(ДокументОплаты, ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'На текущий момент Система быстрых платежей не поддерживает отмену оплаты.'");
	
КонецФункции

#КонецОбласти

#Область ОперацииВозвратов

// Выполняет возврат оплаты покупателю по ранее созданному заказу на оплату.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииБИП -  документ, который отражает
//    операцию возврата в информационной базе;
//  ОбъектОплаты - ОпределяемыйТип.ДокументОперацииБИП, Строка - документ продажи или идентификатор документа
//    оплаты в платежной системе. Идентификатор оплаты может передаваться, если в информационной
//    базе отсутствует исходный документ оплаты. Для генерации QR-кода идентификатора оплаты,
//    необходимо использовать функцию  ИнтеграцияСПлатежнымиСистемами.СоздатьQRКодВозврата;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  ПлатежнаяСистема - Строка, Неопределено - идентификатор платежной системы, в которую должны быть
//    перечислены денежные средства при возврате. Параметр следует передавать
//    только в том случае, если ВыборПлатежнойСистемыВозврата имеет значение Истина,
//    см. ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на возврат.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение возврата от платежной системы не получено. Для проверки
//          состояния возврата необходимо вызвать функцию ИнтеграцияСПлатежнымиСистемами.СтатусВозврата;
//        - "ТребуетсяПодтверждение" - для завершения возврата необходимо проверить
//          реквизиты физического лица см. свойство Подтверждение и отправить запрос
//          с подтверждением в платежную систему
//          см. ИнтеграцияСПлатежнымиСистемами.ПодтвердитьВозврат.
//          запрос на подтверждение необходимо отправить в течение 3-х минут после создания заказа
//          на возврат. По истечению 3-х минут заказ будет отменен автоматически;
//        - "Выполнена" - платежная система подтвердила выполнение возврата;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки, необходимо
//          проанализировать код ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы возврата по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * Подтверждение - Структура, Неопределено - данные для подтверждения возврата в платежной системе:
//        ** ФИО - Строка - маскированное ФИО физического лица на расчетный счет, которого
//           переводятся денежные средства;
//        ** НомерСчета, Неопределено - Строка - маскированный номер счета, на который будут переведены денежные средства;
//        ** НомерТелефона, Неопределено - Строка - маскированный номер телефона, к которому привязан
//           расчетный счет в платежной системе получателе платежа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ВозвратУжеВыполнен" - возврат по документу продажи уже выполнен или сумма возврата
//          превышает предельно допустимую;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Функция ВозвратОплаты(
		ДокументВозврата,
		ОбъектОплаты,
		ТорговаяТочка,
		Знач ПлатежнаяСистема = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяСистема) Тогда
		ПлатежнаяСистема = Неопределено;
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("Подтверждение", Неопределено);
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументВозврата,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ВозвратОплаты(
			ДокументВозврата,
			ОбъектОплаты,
			ПлатежнаяСистема,
			ПараметрыИнтеграции,
			ДополнительныеПараметры);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Выполняет отправку запроса на подтверждение возврата оплаты в платежную систему
// по ранее сформированной оплате.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииБИП -  документ, который отражает
//    операцию возврата в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - текущее состояние операции возврата. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - платежная система подтвердила оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы возврата по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ВозвратУжеВыполнен" - возврат по документу продажи уже выполнен или сумма возврата
//          превышает предельно допустимую;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ПодтвердитьВозврат(ДокументВозврата, ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатОперации();
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументВозврата,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ПодтвердитьВозврат(
			ДокументВозврата,
			ПараметрыИнтеграции);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Выполняет проверку статуса возврата в платежной системе.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииБИП -  документ, который отражает
//    операцию возврата в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  ДлительныйВызов - Булево - если Истина, получение статуса оплаты будет выполнятся
//    в цикле. Длительность выполнения операции определяется на основании
//    данных константы ДлительностьОперацииПлатежнойСистемы.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - текущее состояние операции возврата. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - платежная система подтвердила оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы возврата по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ВозвратУжеВыполнен" - возврат по документу продажи уже выполнен или сумма возврата
//          превышает предельно допустимую;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатусВозврата(ДокументВозврата, ТорговаяТочка, ДлительныйВызов = Истина) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйРезультатДлительнойОперации();
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	ПараметрыОперации.Вставить("СуммаОперации", Неопределено);
	ПараметрыОперации.Вставить("ИдентификаторОперации", "");
	
	РезультатОперации.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	// Проверка общих параметров интеграции.
	ПроверитьОбщиеПараметрыИнтеграции(
		ДокументВозврата,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.СтатусВозврата(
			ДокументВозврата,
			ПараметрыИнтеграции,
			ДлительныйВызов);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОперации

// Удаляет идентификатор операции платежной системы из информационной базы.
// Процедуру необходимо использовать только в том случае, если при вызове
// методов оплаты в качестве документа оплаты была передана ссылка нового
// и после выполнения оплаты объект не был записан. Во всех остальных случаях
// вызов метода не рекомендуется.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  ТорговаяТочка  - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//
Процедура УдалитьИдентификаторыОперации(ДокументОперации, ТорговаяТочка) Экспорт
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		СервисИнтеграцииССБП.УдалитьИдентификаторыОперации(
			ДокументОперации);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку статусов операций СБП, по которым было
// отложено получение результата.
//
// Возвращаемое значение:
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииБИП - данные обработанных документов.
//
Функция СтатусыОперацийC2B() Экспорт
	
	Возврат СервисИнтеграцииССБП.СтатусыОперацийC2B();
	
КонецФункции

// Выполняет установку признака загрузки статуса регламентным заданием, если
// ранее под документу была сгенерирован идентификатор оплаты СБП. Установка
// признака доступна только для сформированных операций у которых текущий статус
// "Выполняется".
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен,
//   Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументОперации, Значение) Экспорт
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБП.УстановитьОтложенноеПолучениеСтатуса(
		ДокументОперации,
		Значение)
	
КонецФункции

#КонецОбласти

#Область ГенерацияQRКода

// Формирование изображения идентификатора оплаты (QR-кода).
//
// Параметры: 
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  QRКод - Строка - идентификатор оплаты, полученный см.
//    ИнтеграцияСПлатежнымиСистемами.ИдентификаторОплаты;
//  Размер - Число - размер QR-кода в пикселях;
//  ТипПечати - Число - вариант печати QR-кода. В зависимости от выбранного варианта
//    печати подбирается картина с логотипом платежной системы. Возможные варианты:
//      - 0 - печать на цветном принтере;
//      - 1 - монохромная печать;
//      - 2 - черно-белая печать;
//
// Возвращаемое значение: 
//  ДвоичныеДанные - данные изображения QR-кода.
//
Функция СоздатьQRКодОплаты(ТорговаяТочка, QRКод, Размер, ТипПечати = 0) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.СоздатьQRКодОплаты(
			QRКод,
			Размер,
			ТипПечати);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Формирование изображения QR-кода, в которое кодируются все необходимые идентификаторы
// платежных систем для выполнения возврата оплаты. QR-код рекомендуется размещать
// на фискальном или товарном чеке, чтобы в случае отсутствия первичного документа оплаты
// в информационной базе (например, при использовании РИБ) была возможность выполнить
// возврат оплаты.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе;
//  Размер - Число - размер QR-кода в пикселях;
//
// Возвращаемое значение: 
//  ДвоичныеДанные - данные изображения QR-кода.
//
Функция СоздатьQRКодВозврата(ТорговаяТочка, ДокументОплаты, Размер) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.СоздатьQRКодВозврата(
			ДокументОплаты,
			Размер);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыОпераций

// Формирование строку, в которое добавляются все необходимые идентификаторы
// платежных систем для выполнения возврата оплаты.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе.
//
// Возвращаемое значение: 
//  Строка - набор идентификаторов операции оплаты, которые должны быть переданы при возврате.
//
Функция ИдентификаторыОперацииОплаты(ТорговаяТочка, ДокументОплаты) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ИдентификаторыОперацииОплаты(
			ДокументОплаты);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Определяет идентификатор функциональной ссылки.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка интеграции с платежной системой;
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе.
//
// Возвращаемое значение: 
//  Строка - идентификатор функциональной ссылки.
//
Функция ИдентификаторФункциональнойСсылки(ТорговаяТочка, ДокументОплаты) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат СервисИнтеграцииССБП.ИдентификаторФункциональнойСсылки(
			ДокументОплаты);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор типа операции "Оплата".
//
// Возвращаемое значение:
//  Строка - код состояния.
//
Функция ИдентификаторТипаОперацииОплата() Экспорт
	
	Возврат НСтр("ru = 'Оплата'");
	
КонецФункции

// Возвращает идентификатор типа операции "Возврат".
//
// Возвращаемое значение:
//  Строка - код состояния.
//
Функция ИдентификаторТипаОперацииВозврат() Экспорт
	
	Возврат НСтр("ru = 'Возврат'");
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроек

// Возвращает список участников СБП
//
// Возвращаемое значение:
//  Структура - результат запроса:
//   * ДанныеУчастников - Соответствие - Содержит описание данных участников СБП
//      ** Ключ - Строка - идентификатор участника СБП.
//      ** Значение - Структура - Описание параметров участника СБП.
//           *** Представление - Строка - Представление участника СБП для пользователя.
//           *** АдресСтраницыПодключения - Строка - Адрес страницы подключения к участнику СБП.
//           *** ТекстПредупреждения - Строка - Представление участника СБП для пользователя.
//           *** БИК - Массив Из Строк - Массив БИК участника СБП.
//   * Ошибка - Булево, Истина - если задание завершено с ошибкой.
//   * СообщениеОбОшибке - Строка, Форматированная строка - сообщение об ошибке для пользователя.
//   * ИнформацияОбОшибке - Строка, Форматированная строка - сообщение об ошибке для администратора.
//
Функция ПолучитьУчастниковСБП() Экспорт
	
	РезультатОперации = СервисИнтеграцииССБП.ПолучитьУчастниковСБП(Истина);
	Если РезультатОперации.Свойство("КодОшибки") Тогда
		РезультатОперации.Вставить("Ошибка", ?(ЗначениеЗаполнено(РезультатОперации.КодОшибки), Истина, Ложь));
		РезультатОперации.Удалить("КодОшибки");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает параметры интеграции, оплаты и аутентификации для участника СБП.
//
// Параметры:
//  УчастникСБП - Строка - идентификатор участника СБП для которого получается настройка.
//
// Возвращаемое значение:
//  Структура - результат выполнения:
//   * ПараметрыИнтеграции - Массив из Структура - содержит описание и значения полей реквизитов справочника 
//       "Настройки интеграции с платежными системами".
//   * ПараметрыОплаты - Массив из Структура - содержит описание и значения полей регистра сведений,
//       хранящего данные о настройках оплат торговых точек.
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации в платежной системе.
//
Функция ПараметрыПодключенияПоУчастникуСБП(УчастникСБП) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыПодключенияПоУчастникуСБП(УчастникСБП);
	
КонецФункции

// Возвращает параметры интеграции, оплаты и аутентификации для переданного по ссылке элемента справочника
// "НастройкиИнтеграцииСПлатежнымиСистемами".
//
// Параметры:
//  НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - ссылка на элемент справочника 
//    для которого нужно получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - результат выполнения:
//   * ПараметрыИнтеграции - Массив из Структура - содержит описание и значения полей реквизитов элемента справочника
//       "Настройки интеграции с платежными системами";
//   * ПараметрыОплаты - Массив из Структура - содержит описание и значения полей регистра сведений,
//       хранящего данные о настройках оплат торговых точек;
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации в платежной системе.
//
Функция ПараметрыПодключенияПоНастройке(НастройкаИнтеграции) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыПодключенияПоНастройке(НастройкаИнтеграции);
	
КонецФункции

// Возвращает результат проверки подключения по переданным параметрам.
//
// Параметры:
//  УчастникСБП - Строка - идентификатор участника СБП для которого производится настройка.
//  ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации в платежной системе.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в платежной системе:
//   * ПодключениеУстановлено - Булево, Истина - если подключение выполнено успешно;
//   * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПроверитьПараметрыПодключения(УчастникСБП, ПараметрыАутентификации) Экспорт
	
	ПлатежнаяСистема = СервисИнтеграцииССБП.УчастникСБППоИдентификатору(УчастникСБП);
	ПараметрыАутентификацииСоответствием = Новый Соответствие;
	Для Каждого ОписаниеКлюча Из ПараметрыАутентификации Цикл
		ПараметрыАутентификацииСоответствием.Вставить(ОписаниеКлюча.Имя, ОписаниеКлюча.Значение);
	КонецЦикла;
	
	РезультатПроверки = СервисИнтеграцииССБП.ПроверитьПараметрыПодключения(
		ПлатежнаяСистема,
		ПараметрыАутентификацииСоответствием);
	РезультатПроверки.Вставить("ПодключениеУстановлено", ?(ЗначениеЗаполнено(РезультатПроверки.КодОшибки), Ложь, Истина));
	РезультатПроверки.Удалить("КодОшибки");
	
	Возврат РезультатПроверки;
	
КонецФункции

// Сохраняет настройки подключения к СБП в информационную базу.
//
// Параметры:
//  НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - ссылка на элемент справочника,
//    данные которого нужно записать. Пустая, если нужно записать новый элемент.
//  СтруктураНастроекИнтеграции - Структура - описание сохраняемых данных:
//   * ПараметрыИнтеграции - Массив из Структура - содержит описание и значения полей реквизитов элемента справочника
//       "Настройки интеграции с платежными системами";
//   * ПараметрыОплаты - Массив из Структура - содержит описание и значения полей регистра сведений,
//       хранящего данные о настройках оплат торговых точек;
//   * ПараметрыАутентификации - Массив из Структура - описание и значения параметров аутентификации в платежной системе.
//  УчастникСБП - Строка - идентификатор участника СБП для которого производится настройка.
//
// Возвращаемое значение:
//  Структура - результат создания торговой точки:
//   * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - ссылка на элемент справочника;
//   * Ошибка - Булево - признак ошибки сохранения;
//   * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ЗаписатьПараметрыПодключения(
		НастройкаИнтеграции,
		СтруктураНастроекИнтеграции,
		УчастникСБП) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаИнтеграции", НастройкаИнтеграции);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	
	ПлатежнаяСистема = СервисИнтеграцииССБП.УчастникСБППоИдентификатору(УчастникСБП);
	Родитель = РодительНастройки(ПлатежнаяСистема);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(НастройкаИнтеграции) Тогда
			
			НастройкаИнтеграцииОбъект = НастройкаИнтеграции.ПолучитьОбъект();
			
			Если НастройкаИнтеграцииОбъект.ЭтоГруппа Тогда
				
				ОтменитьТранзакцию();
				
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка записи настройки интеграции.
					|В качестве значения параметра запрещено передавать группу справочника.'");
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкаИнтеграцииОбъект.Родитель)
				И НастройкаИнтеграцииОбъект.Родитель <> Родитель Тогда
			
				ОтменитьТранзакцию();
					
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка записи настройки интеграции.
					|Запрещено менять платежную систему у существующей настройки.'");
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецЕсли;
			
			НастройкаИнтеграцииОбъект.Заблокировать();
			
		Иначе
			НастройкаИнтеграцииОбъект = Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.СоздатьЭлемент();
		КонецЕсли;
		
		НастройкаИнтеграцииОбъект.Родитель = Родитель;
		
		Для Каждого Реквизит Из СтруктураНастроекИнтеграции.ПараметрыИнтеграции Цикл
			
			Если Реквизит.Свойство("ДляГруппы") И Реквизит.ДляГруппы Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				НастройкаИнтеграцииОбъект[Реквизит.Имя] = Реквизит.Значение;
			Исключение
				
				ОтменитьТранзакцию();
				
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось присвоить значение реквизиту %1 по причине:
					|%2'"),
					Реквизит.Ключ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
				
				Возврат Результат;
				
			КонецПопытки;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НастройкаИнтеграцииОбъект.ТорговаяТочка) Тогда
			ПараметрыАутентификацииСоответствием = Новый Соответствие;
			Для Каждого ОписаниеКлюча Из СтруктураНастроекИнтеграции.ПараметрыАутентификации Цикл
				ПараметрыАутентификацииСоответствием.Вставить(ОписаниеКлюча.Имя, ОписаниеКлюча.Значение);
			КонецЦикла;
			НастройкаИнтеграцииОбъект.ТорговаяТочка = СервисИнтеграцииССБП.ИдентификаторТорговойТочки(
				ПлатежнаяСистема,
				ПараметрыАутентификацииСоответствием);
		КонецЕсли;
		
		НастройкаИнтеграцииОбъект.Записать();
		
		ПараметрыОплаты = Новый Соответствие;
		Для Каждого ПараметрОплаты Из СтруктураНастроекИнтеграции.ПараметрыОплаты Цикл
			ПараметрыОплаты.Вставить(ПараметрОплаты.Имя, ПараметрОплаты.Значение);
		КонецЦикла;
		
		РезультатЗаписиНастроек = ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьНастройкиОплаты(
			ПараметрыОплаты,
			НастройкаИнтеграцииОбъект.Ссылка);
		
		Если РезультатЗаписиНастроек.Отказ Тогда
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = РезультатЗаписиНастроек.СообщениеОбОшибке;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыАутентификации = Новый Соответствие;
		Для Каждого ПараметрАутентификации Из СтруктураНастроекИнтеграции.ПараметрыАутентификации Цикл
			ПараметрыАутентификации.Вставить(ПараметрАутентификации.Имя, ПараметрАутентификации.Значение);
		КонецЦикла;
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.СохранитьНастройкиАутентификации(
			НастройкаИнтеграцииОбъект.Ссылка,
			ПараметрыАутентификации,
			ПлатежнаяСистема);
			
		Результат.НастройкаИнтеграции = НастройкаИнтеграцииОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать торговую точку мерчанта по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Отменяет оплату в платежной системе, если денежные средства не были перечислены
// на счет мерчанта. Функцию следует использовать при ошибке завершения оплаты. Если
// отмена операции оплаты уже невозможна (см. код ошибки ОтменаНеДоступна), необходимо
// выполнить возврат.
//
// Метод следует вызывать только в том случае, если ОтменаОплаты имеет значение Истина,
// см. ИнтеграцияСПлатежнымиСистемами.НастройкиТорговойТочки.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    оплату в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "ОтменаНеДоступна" - отмена оплаты невозможна, необходимо выполнить возврат;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОтменитьОплату(ДокументОплаты, ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  Документ - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    операцию в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка выполнения оплаты;
//  ПараметрыИнтеграции - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  РезультатОперации  - Структура - результат создания заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеПараметрыИнтеграции(
		Документ,
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Документ для выполнения операции неопределен. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции необходимо записать документ.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	ПроверитьОбщиеПараметрыИнтеграцииБезДокументаОперации(
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации);
	
КонецПроцедуры

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка выполнения оплаты;
//  ПараметрыИнтеграции - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции;
//  РезультатОперации  - Структура - результат создания заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеПараметрыИнтеграцииБезДокументаОперации(
		ТорговаяТочка,
		ПараметрыИнтеграции,
		РезультатОперации)
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		
		РезультатОперации.КодОшибки          = ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не выполнена настройка интеграции с платежной системой. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции в платежной системе необходимо выполнить настройку интеграции.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Если Не ПараметрыИнтеграции.Используется Тогда
		
		РезультатОперации.КодОшибки          = "ИнтеграцияНеИспользуется";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Настройка интеграции не используется. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Настройка интеграции не используется.'");
		
		ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует информацию для тех. поддержки платежной системе, которую можно
// использовать для оперативного расследования ошибок.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Строка - информация для технической поддержки.
//
Функция ИнформацияДляТехническойПоддержки(ДокументОплаты, ТорговаяТочка) Экспорт
	
	Если Не ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	// Подготовка параметров интеграции с платежной системой.
	ПараметрыИнтеграции = ИнтеграцияСПлатежнымиСистемамиСлужебный.ПараметрыИнтеграции(
		ТорговаяТочка);
	
	Если ИнтеграцияСПлатежнымиСистемамиСлужебный.ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.ИнформацияДляТехническойПоддержки(
			ДокументОплаты,
			ПараметрыИнтеграции);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Создает корневой элемент настроек подключения к СБП, если он отсутствует.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система,
//    для которой выполняется настройка.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - новый или найденный корневой элемент.
//
Функция РодительНастройки(ПлатежнаяСистема) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиИнтеграцииСПлатежнымиСистемами");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.ПлатежнаяСистема = &ПлатежнаяСистема";
		
		Запрос.УстановитьПараметр("ПлатежнаяСистема", ПлатежнаяСистема);
		
		РезультатЗапроса = Запрос.Выполнить();
		УчетнаяЗаписьСсылка = Неопределено;
		Если РезультатЗапроса.Пустой() Тогда
			РодительНастройки = Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.СоздатьГруппу();
			РодительНастройки.ПлатежнаяСистема = ПлатежнаяСистема;
			РодительНастройки.Наименование     =
				ИнтеграцияСПлатежнымиСистемамиСлужебный.СинонимЗначенияПеречисления(ПлатежнаяСистема);
			РодительНастройки.Идентификатор    = ИнтеграцияСПлатежнымиСистемамиСлужебный.ИдентификаторСБП();
			РодительНастройки.Записать();
			
			РодительНастройкиСсылка = РодительНастройки.Ссылка;
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			РодительНастройкиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать нового родителя настройки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат РодительНастройкиСсылка;
	
КонецФункции

#КонецОбласти
