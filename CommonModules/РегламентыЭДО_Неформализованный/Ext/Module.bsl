//@strict-types

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзМодуляРегламентыЭДО

// Возвращает состояние входящего электронного документа.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеВходящегоДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента) Экспорт
	
	Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если (МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
				ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС())
			И МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ПараметрыДокумента.СпособОбмена) Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (ЭтоЭлектронноеАктированиеЕИС И МодульЭлектронноеАктированиеЕИС.
				СостояниеВходящегоДокумента(ПараметрыДокумента,
					СостоянияЭлементовРегламента, Состояние))
		
		ИЛИ ЗаполнитьСостояниеПоИсходящемуОтклонению(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)

		ИЛИ ЗаполнитьСостояниеПоПредложениюОбАннулировании(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)

		ИЛИ ЗаполнитьСостояниеПоВходящейИнформацииОтправителя(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗаполнитьСостояниеПоИсходящемуИзвещениюОПолучении(
			ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗначениеЗаполнено(Состояние) Тогда
		
		Возврат Состояние;
		
	ИначеЕсли ПараметрыДокумента.Исправлен Тогда
		
		Возврат Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
		
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	
КонецФункции

// Возвращает состояние исходящего электронного документа.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеИсходящегоДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента) Экспорт
	
	Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	Если ЗаполнитьСостояниеПоИсходящейИнформацииОтправителя(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗаполнитьСостояниеПоВходящемуОтклонению(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗаполнитьСостояниеПоПредложениюОбАннулировании(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗаполнитьСостояниеПоПодтверждениюОператора(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗаполнитьСостояниеПоВходящемуИзвещениюОПолучении(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
		
		ИЛИ ЗначениеЗаполнено(Состояние) Тогда
		
		Возврат Состояние;
		
	ИначеЕсли ПараметрыДокумента.Исправлен Тогда
		
		Возврат Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
		
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	
КонецФункции

// Возвращает состояние сообщения.
//
// Параметры:
//  ПараметрыСообщения - См. РегламентыЭДО.НовыеПараметрыСообщенияДляОпределенияСостояния
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостоянияСообщения
//  ИспользоватьУтверждение  - Булево
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияСообщенийЭДО
//
Функция СостояниеСообщения(ПараметрыСообщения, ПараметрыДокумента, ИспользоватьУтверждение) Экспорт
	
	Если ПараметрыСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
		Состояние = РегламентыЭДО.СостояниеСообщенияАннулирования(ПараметрыСообщения, ПараметрыДокумента);
	ИначеЕсли РегламентыЭДО.ЭтоСлужебноеСообщение(ПараметрыСообщения.ТипЭлементаРегламента) Тогда
		Состояние = РегламентыЭДО.СостояниеСлужебногоСообщения(ПараметрыСообщения, ПараметрыДокумента);
	Иначе
		Состояние = СостояниеСообщенияИнформацияОтправителя(ПараметрыСообщения, ПараметрыДокумента, ИспользоватьУтверждение);
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Возвращает коллекцию добавленных элементов схемы регламента.
// 
// Параметры:
//  СхемаРегламента - См. РегламентыЭДО.НоваяСхемаРегламента
//  НастройкиСхемыРегламента - См. РегламентыЭДО.НовыеНастройкиСхемыРегламента
//
// Возвращаемое значение:
//  См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
Функция ДобавитьЭлементыСхемыРегламента(СхемаРегламента, НастройкиСхемыРегламента) Экспорт
	
	ЭлементыСхемы = РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента();
	
	Если НастройкиСхемыРегламента.ЭтоВходящийЭДО Тогда
		ДобавитьЭлементыРегламентаПолучателя(СхемаРегламента, НастройкиСхемыРегламента, ЭлементыСхемы);
	Иначе
		ДобавитьЭлементыРегламентаОтправителя(СхемаРегламента, НастройкиСхемыРегламента, ЭлементыСхемы);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС.
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриДобавленииЭлементовСхемыРегламента(ЭлементыСхемы, НастройкиСхемыРегламента);
	КонецЕсли;
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС.
	
	Возврат ЭлементыСхемы;
	
КонецФункции

// Параметры:
//  СхемаРегламента - см. РегламентыЭДО.НоваяСхемаРегламента
//  НастройкиСхемыРегламента - см. РегламентыЭДО.НовыеНастройкиСхемыРегламента
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
Функция ДобавитьЭлементыСхемыВложенногоРегламента(СхемаРегламента, НастройкиСхемыРегламента, ТипЭлементаРегламента) Экспорт
	
	Если ЭтоЭлементРегламентаАннулирования(ТипЭлементаРегламента) Тогда
		
		НовыеЭлементыСхемы = ДобавитьЭлементыРегламентаАннулирования(СхемаРегламента);
		
	ИначеЕсли ЭтоЭлементРегламентаОтклонения(ТипЭлементаРегламента) Тогда
		
		НовыеЭлементыСхемы = ДобавитьЭлементыРегламентаОтклонения(СхемаРегламента);
		
	Иначе
		
		НовыеЭлементыСхемы = РегламентыЭДО.ДобавитьПроизвольныйЭлементРегламента(СхемаРегламента, ТипЭлементаРегламента);
		
	КонецЕсли;
	
	Возврат НовыеЭлементыСхемы;
	
КонецФункции

// Возвращает тип извещения для элемента входящего документа.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//
Функция ТипИзвещенияДляЭлементаВходящегоДокумента(ТипЭлементаРегламента) Экспорт
	Результат = Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		Результат = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает тип извещения для элемента исходящего документа.
// 
// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//
Функция ТипИзвещенияДляЭлементаИсходящегоДокумента(ТипЭлементаРегламента) Экспорт
	Возврат Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
КонецФункции

// Возвращает признак наличия информации получателя в регламенте.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьИнформацияПолучателя() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СостояниеДокумента

// Возвращает признак успешности заполнения состояния по предложению об аннулировании.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоПредложениюОбАннулировании(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьАктуальноеАннулирование(СостоянияЭлементовРегламента, ЭлементРегламента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	ОтклонениеПОА = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента

	Если РегламентыЭДО.ЕстьАктуальноеОтклонениеАннулирования(СостоянияЭлементовРегламента,
		ЭлементРегламента, ОтклонениеПОА) Тогда
		
		Если ОтклонениеПОА.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда 
			
			Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения;
			
		ИначеЕсли ОтклонениеПОА.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда 
			
			Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения;
			
		ИначеЕсли ОтклонениеПОА.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда 
			
			Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения;
			
		Иначе
			
			Результат = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подтверждение Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ОжидаетсяПодпись Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по исходящему отклонению.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоИсходящемуОтклонению(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.УОУ, ЭлементРегламента) Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения;
		
	ИначеЕсли Не ПараметрыДокумента.Исправлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление;
		
	Иначе
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по входящей информации отправителя.
// 
// Параметры:
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоВходящейИнформацииОтправителя(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, ЭлементРегламента) Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.НеПолучен;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Утверждение Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
		
	ИначеЕсли Не ПараметрыДокумента.ТребуетсяПодтверждение Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по исходящему извещению о получении.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоИсходящемуИзвещениюОПолучении(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Если Не ПараметрыДокумента.ТребуетсяИзвещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИОП, ЭлементРегламента) Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда 
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по исходящей информации отправителя.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоИсходящейИнформацииОтправителя(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, ЭлементРегламента) Тогда
		
		Состояние = РегламентыЭДО.НачальноеСостояниеДокумента();
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ОжидаетсяПодпись Тогда
		
		Результат = Ложь;
		РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние, Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по входящему отклонению.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоВходящемуОтклонению(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Ложь;
	
	Если РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.УОУ) Тогда
		
		Результат = Истина;
		
		Если ПараметрыДокумента.Исправлен Тогда
			Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
		Иначе
			Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по входящему извещению о получении.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоВходящемуИзвещениюОПолучении(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Ложь;
	
	Если ПараметрыДокумента.ТребуетсяИзвещение
		И Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИОП) Тогда
		
		РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние, Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по подтверждению оператора.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоПодтверждениюОператора(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Если Не РегламентыЭДО.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ПДП) Тогда
		
		Результат = Истина;
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеСообщения

// Возвращает состояние сообщения по параметрам информации отправителя.
//
// Параметры:
//  ПараметрыСообщения - См. РегламентыЭДО.НовыеПараметрыСообщенияДляОпределенияСостояния
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостоянияСообщения
//  ИспользоватьУтверждение  - Булево
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияСообщенийЭДО
//
Функция СостояниеСообщенияИнформацияОтправителя(ПараметрыСообщения, ПараметрыДокумента, ИспользоватьУтверждение)
	
	Состояние = Перечисления.СостоянияСообщенийЭДО.ПустаяСсылка();
	
	Статус = ПараметрыСообщения.Статус;
	
	Если Статус = Перечисления.СтатусыСообщенийЭДО.Получен Тогда
		
		Если ИспользоватьУтверждение Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.Утверждение;
		ИначеЕсли Не ПараметрыДокумента.ТребуетсяПодтверждение
			ИЛИ ПараметрыДокумента.ОбменБезПодписи Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		Иначе
			Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден Тогда
		
		Если Не ПараметрыДокумента.ТребуетсяПодтверждение
			ИЛИ ПараметрыДокумента.ОбменБезПодписи Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		Иначе
			Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован Тогда
		
		Если ПараметрыДокумента.ОбменБезПодписи Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке;
		Иначе
			Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан Тогда
		
		Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.Подписан Тогда
		
		Если РегламентыЭДО.ЭтоВнутреннийОбмен(ПараметрыДокумента.СпособОбмена) Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		Иначе
			Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке Тогда
		
		Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен Тогда
		
		Если ПараметрыСообщения.Направление = Перечисления.НаправленияЭДО.Входящий
			ИЛИ Не ПараметрыДокумента.ТребуетсяПодтверждение
			ИЛИ ПараметрыДокумента.ОбменБезПодписи Тогда
			Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		Иначе
			Состояние = Перечисления.СостоянияСообщенийЭДО.ОжидаетсяПодпись;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден Тогда
		
		Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		
	Иначе
		ВызватьИсключение РегламентыЭДО.ТекстОшибкиНекорректныйСтатусСообщения();
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область ДобавитьЭлементыСхемыРегламента

// Добавляет элементы по регламенту отправителя.
// 
// Параметры:
//  СхемаРегламента - См. РегламентыЭДО.НоваяСхемаРегламента
//  НастройкиСхемыРегламента - См. РегламентыЭДО.НовыеНастройкиСхемыРегламента
//  ЭлементыСхемы - См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
//
Процедура ДобавитьЭлементыРегламентаОтправителя(СхемаРегламента, НастройкиСхемыРегламента, ЭлементыСхемы)
	
	ИнформацияОтправителя = РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, СхемаРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		
	Если РегламентыЭДО.ЭтоОбменЧерезОператора(НастройкиСхемыРегламента.СпособОбмена) Тогда
		
		РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПДП);
		
	КонецЕсли;
	
	РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИОП,
		Не НастройкиСхемыРегламента.ТребуетсяИзвещение);
	
КонецПроцедуры

// Добавляет элементы по регламенту получателя.
// 
// Параметры:
//  СхемаРегламента - См. РегламентыЭДО.НоваяСхемаРегламента
//  НастройкиСхемыРегламента - См. РегламентыЭДО.НовыеНастройкиСхемыРегламента
//  ЭлементыСхемы - См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
//
Процедура ДобавитьЭлементыРегламентаПолучателя(СхемаРегламента, НастройкиСхемыРегламента, ЭлементыСхемы)
	
	ИнформацияОтправителя = РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, СхемаРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИОП,
		Не НастройкиСхемыРегламента.ТребуетсяИзвещение);
	
КонецПроцедуры

// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлементРегламентаАннулирования(ТипЭлементаРегламента)
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
КонецФункции

// Параметры:
//  СхемаРегламента - См. РегламентыЭДО.НоваяСхемаРегламента
//
// Возвращаемое значение:
//  См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
Функция ДобавитьЭлементыРегламентаАннулирования(СхемаРегламента)
	
	ЭлементыСхемы = РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента();
	
	ИнформацияОтправителя = РегламентыЭДО.НайтиЭлементСхемыРегламента(СхемаРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ИнформацияОтправителя = Неопределено Тогда
		Возврат ЭлементыСхемы;
	КонецЕсли;
	
	ПОА = РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
		Перечисления.ТипыЭлементовРегламентаЭДО.ПОА, Истина);
	
	РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ПОА,
		Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ, Истина);
	
	Возврат ЭлементыСхемы;
	
КонецФункции

// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлементРегламентаОтклонения(ТипЭлементаРегламента)
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ;
КонецФункции

// Параметры:
//  СхемаРегламента - См. РегламентыЭДО.НоваяСхемаРегламента
//
// Возвращаемое значение:
//  См. РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента
Функция ДобавитьЭлементыРегламентаОтклонения(СхемаРегламента)
	
	ЭлементыСхемы = РегламентыЭДО.НоваяКоллекцияЭлементовСхемыРегламента();
	
	ИнформацияОтправителя = РегламентыЭДО.НайтиЭлементСхемыРегламента(СхемаРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ИнформацияОтправителя = Неопределено Тогда
		Возврат ЭлементыСхемы;
	КонецЕсли;
	
	РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
		Перечисления.ТипыЭлементовРегламентаЭДО.УОУ, Истина);
	
	Возврат ЭлементыСхемы;
	
КонецФункции

#КонецОбласти

#КонецОбласти