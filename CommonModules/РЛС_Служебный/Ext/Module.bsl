//Возвращает параметры, необходимые для подключения к сервису
Функция УстановитьДанныеПодключения() Экспорт
	Логин = Справочники.РЛС_НастройкиПодключения.НастройкиРЛС.Логин;
	Пароль = Справочники.РЛС_НастройкиПодключения.НастройкиРЛС.Пароль;
	ДП = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	КлиентHTTPКлиентСервер.УстановитьПользователяСоединения(ДП, Логин);
	КлиентHTTPКлиентСервер.УстановитьПарольСоединения(ДП, Пароль);
	Возврат ДП;
КонецФункции

//Создает временный архив для получения ответа-архива с сервиса
Функция ПодготовитьАрхивДляПолученияОтвета(ДП) Экспорт
	ИмяПромежуточногоАрхива = ПолучитьИмяВременногоФайла("zip");
	КлиентHTTPКлиентСервер.УстановитьИмяВыходногоФайла(ДП, ИмяПромежуточногоАрхива);
	Возврат ДП;
КонецФункции 

//Считывает данные из файла, находящегося в архиве-ответе
Функция ПрочитатьФайлИзАрхива(ДП) Экспорт
	Архив = Новый ЧтениеZipФайла(ДП.ИмяВыходногоФайла, "");
	ИмяПромежуточнойПапки = ПолучитьИмяВременногоФайла("json");
	Архив.ИзвлечьВсе(ИмяПромежуточнойПапки, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	МассивФайлов = НайтиФайлы(ИмяПромежуточнойПапки, "*.*");
	Для Каждого Файл Из МассивФайлов Цикл
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(Файл.ПолноеИмя);
		Данные = ПрочитатьJSON(Чтение, Ложь);
		Чтение.Закрыть();
	КонецЦикла;
	Возврат Данные;
КонецФункции

//Возвращает адрес, необходимый для получения определенного набора данных
Функция ПолучитьАдресДанных(ВидЗапроса, ПараметрДанных="") Экспорт
	АдресДанных = Справочники.РЛС_НастройкиПодключения.НастройкиРЛС.АдресСервиса + ВидЗапроса + ПараметрДанных;	
	Возврат АдресДанных;
КонецФункции

//Преобразует дату, полученную из Авроры в формат, понятный для 1С
Функция ПреобразоватьДатуИзСервиса(ПолученнаяДата) Экспорт
	Если ПолученнаяДата <> Неопределено Тогда
		ПреобразованнаяДата = СтрЗаменить(ПолученнаяДата , "-","");
		ПреобразованнаяДата = СтрЗаменить(ПреобразованнаяДата , ":","");
		ПреобразованнаяДата = СтрЗаменить(ПреобразованнаяДата , "T","");
		Возврат Дата(ПреобразованнаяДата);
	Иначе Возврат Неопределено;
	КонецЕсли;
КонецФункции	

//Устарела
Процедура ЗагрузитьОсновныеРеквизитыНоменклатуры(Данные) Экспорт
	Для Каждого НоменклатураРЛС Из Данные Цикл
		НомерРЛС = НоменклатураРЛС.packing_id;
		НайденныйЭлементРЛС = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту("НомерРЛС", НомерРЛС);
		
		Если НайденныйЭлементРЛС <> Справочники.РегистрЛекарственныхСредств.ПустаяСсылка() Тогда
			ЭлементРЛС = НайденныйЭлементРЛС.ПолучитьОбъект(); 
			ЗаполнитьРеквизитыРЛС(НоменклатураРЛС, ЭлементРЛС);
			ЗагрузитьКлассификаторыНоменклатуры(НоменклатураРЛС.prep_id, ЭлементРЛС); 
		КонецЕсли
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьКлассификаторыНоменклатуры(prep_id, ЭлементРЛС) Экспорт
	
	ЭлементРЛС.ФармакологическиеГруппы.Очистить();
	
	КлассификаторыПоПрепарату = РЛС_ЗапросыКСервису.GET_classes_prep(Формат(prep_id,"ЧГ="));
	Если КлассификаторыПоПрепарату <> Неопределено Тогда 
		Для Каждого Классификатор Из КлассификаторыПоПрепарату Цикл
			
			Отбор = Новый Структура("Наименование",Классификатор.class_value);	
			
			Если Классификатор.class_name = "atc" Тогда
				
				ПараметрыЗаполнения = Новый Структура("Наименование,КодЕСКЛП",Классификатор.class_value,Классификатор.class_code_ex);
				ЭлементРЛС.АТХ = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.АТХКлассификация, Отбор, ПараметрыЗаполнения);
				АТХ = ЭлементРЛС.АТХ.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(АТХ,ПараметрыЗаполнения);
				АТХ.Записать();
   				
			ИначеЕсли Классификатор.class_name = "phg" Тогда 				
				НоваяСтрока = ЭлементРЛС.ФармакологическиеГруппы.Добавить();
				НоваяСтрока.ФармакологическаяГруппа = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ФармакологическиеГруппы, Отбор, Отбор);
				
			ИначеЕсли Классификатор.class_name = "okpd" Тогда 				
				ЭлементРЛС.ОКПД2 = Классификатор.class_code; 
				
			ИначеЕсли  Классификатор.class_name = "apt" Тогда 
				Отбор = Новый Структура("Код",Классификатор.class_code);
				ПараметрыЗаполнения = Новый Структура("Наименование,Код",Классификатор.class_value,Классификатор.class_code);
				ЭлементРЛС.ТоварыФармРынка =  АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ТоварыФармацевтическогоРынка, Отбор, ПараметрыЗаполнения);
				ТФР = ЭлементРЛС.ТоварыФармРынка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ТФР,ПараметрыЗаполнения);
				ТФР.Записать();				
				
			КонецЕсли
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДВП() Экспорт
	
	ДанныеРЛС =  РЛС_ЗапросыКСервису.GET_dict_active_substances();
	
	Если ДанныеРЛС <> Неопределено Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("id",  Новый ОписаниеТипов("Число"));
		ТаблицаДанных.Колонки.Добавить("as_name_rus",  Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(200)));
		ТаблицаДанных.Колонки.Добавить("as_name_eng",  Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(200)));
		ТаблицаДанных.Колонки.Добавить("as_name_lat",  Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(200)));
		ТаблицаДанных.Колонки.Добавить("as_name_lat_genitive",  Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(200)));

			
		Для Каждого Источник из ДанныеРЛС Цикл 
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),Источник);			
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДВП",ТаблицаДанных);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДВП.as_name_rus КАК as_name_rus,
		|	ТаблицаДВП.id КАК id,
		|	ТаблицаДВП.as_name_eng КАК as_name_eng,
		|	ТаблицаДВП.as_name_lat КАК as_name_lat,
		|	ТаблицаДВП.as_name_lat_genitive КАК as_name_lat_genitive
		|ПОМЕСТИТЬ ВТ_РЛС
		|ИЗ
		|	&ТаблицаДВП КАК ТаблицаДВП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДВЛП.Ссылка КАК Ссылка,
		|	ВТ_РЛС.as_name_rus КАК НаименованиеПолное, 
		|	ВТ_РЛС.as_name_rus КАК Наименование,
		|	ВТ_РЛС.id КАК КодРЛС,
		|	ВТ_РЛС.as_name_eng КАК АнглийскоеНаименование,
		|	ВТ_РЛС.as_name_lat КАК ЛатинскоеНаименование,
		|	ВТ_РЛС.as_name_lat_genitive КАК ЛатинскоеНаименованиеРодительныйПадеж
		|ИЗ
		|	ВТ_РЛС КАК ВТ_РЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДВЛП КАК ДВЛП
		|		ПО (ДВЛП.НаименованиеПолное = ПОДСТРОКА(ВТ_РЛС.as_name_rus, 0, 200))";
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				Объект = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				Объект = Справочники.ДВЛП.СоздатьЭлемент(); 
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект,Выборка);
			Объект.Записать();				
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыРЛС(НоменклатураРЛС, ЭлементРЛС) Экспорт
	
	ЭлементРЛС.РегистрационныйНомер = НоменклатураРЛС.reg_number;
	Если НоменклатураРЛС.rereg_date <> Неопределено Тогда
		ЭлементРЛС.ДатаРегистрации = ПреобразоватьДатуИзСервиса(НоменклатураРЛС.rereg_date);
	Иначе
		ЭлементРЛС.ДатаРегистрации = ПреобразоватьДатуИзСервиса(НоменклатураРЛС.reg_date);
	КонецЕсли;    
	
	ЭлементРЛС.ДатаОкончанияДействия = ПреобразоватьДатуИзСервиса(НоменклатураРЛС.reg_cancel_date);
	
	ЭлементРЛС.СтатусДействия = НоменклатураРЛС.reg_status_id -1 ; //Сдвиг статуса 1С и РЛС. В РЛС +1;
	ЭлементРЛС.Штрихкод = НоменклатураРЛС.barcode;
	ЭлементРЛС.ДатаОбновления = ТекущаяДата();
	ЭлементРЛС.НомерРЛС = НоменклатураРЛС.packing_id;
	
	НаименованиеПолное = Новый Массив;
	НаименованиеПолное.Добавить(СтрЗаменить(НоменклатураРЛС.trade_name_rus_html,Символ(174),""));
	НаименованиеПолное.Добавить(НоменклатураРЛС.dosage_form_short_name); 
	НаименованиеПолное.Добавить(НоменклатураРЛС.dose);
	НаименованиеПолное.Добавить(НоменклатураРЛС.packing_short);
	
	ЭлементРЛС.НаименованиеПолное = СтрСоединить(НаименованиеПолное,", ");
	
	//Действующие вещества и торговое наименование
	ЭлементРЛС.ДействующиеВеществаМНН = ПолучитьДействующиеВеществаМННПоОписанию(НоменклатураРЛС);
	НужноОбновитьЛекарственныеСредства = Неопределено;
	ЭлементРЛС.ТорговоеНаименование = ПолучитьТорговоеНаименование(НоменклатураРЛС, ЭлементРЛС.ДействующиеВеществаМНН, НужноОбновитьЛекарственныеСредства);
	
	Если НужноОбновитьЛекарственныеСредства Тогда
		Справочники.ТорговыеНаименования.ОбновитьЛекарственныеСредства(ЭлементРЛС.ТорговоеНаименование, ЭлементРЛС.Ссылка);
	КонецЕсли;
   	
	ФормаВыпускаПоиск = Новый Массив;
	ФормаВыпускаПоиск.Добавить(НоменклатураРЛС.dosage_form_short_name);
	ФормаВыпускаПоиск.Добавить(НоменклатураРЛС.dose);	
	ФормаВыпуска = Справочники.ФормыВыпуска.НайтиПоНаименованию(СтрСоединить(ФормаВыпускаПоиск," "));
	
	Если ФормаВыпуска <> Справочники.ФормыВыпуска.ПустаяСсылка() Тогда
		ЭлементРЛС.ФормаВыпуска = ФормаВыпуска;
	Иначе
		НоваяФормаВыпуска = Справочники.ФормыВыпуска.СоздатьЭлемент();
		НоваяФормаВыпуска.Наименование = НоменклатураРЛС.dosage_form_full_name;
		НоваяФормаВыпуска.Записать();
		ЭлементРЛС.ФормаВыпуска = Справочники.ФормыВыпуска.НайтиПоНаименованию(НоменклатураРЛС.dosage_form_full_name);
	КонецЕсли; 
	
	//Если СтрНайти(НоменклатураРЛС.pack1n, "шт.") 
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " шт ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","796");
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, " пакет ")
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, "пакетик") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ =  Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","796");
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "мл.")
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " мл ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","111");
	////ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "л.")
	////	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " л ") Тогда
	////	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","112");
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "г.")
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " г ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ =  Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","163");	
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "кг.")
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " кг ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ =  Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","166");
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "мг.")
	//	ИЛИ  СтрНайти(НоменклатураРЛС.pack1n, " мг ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ =  Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","161");
	//ИначеЕсли СтрНайти(НоменклатураРЛС.pack1n, "мкг.")
	//	ИЛИ СтрНайти(НоменклатураРЛС.pack1n, " мкг ") Тогда
	//	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ =  Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","164");
	//КонецЕсли;  
  

	//Если нечего нет, то единица хранения будет штука.
	//Если НЕ ЗначениеЗаполнено(ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ) Тогда
	ЭлементРЛС.БазоваяЕдиницаИзмеренияКАТ = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("КодОКЕИ","796");
	//КонецЕсли;
	
	ЗаполнитьУпаковкиПрепарата(ЭлементРЛС,НоменклатураРЛС);
	
	ЭлементРЛС.КоличествоДозВУпаковке = НоменклатураРЛС.dose_amount; 
	
	ЭлементРЛС.УсловияХранения = НоменклатураРЛС.sc_name;
	ЭлементРЛС.СрокГодности = НоменклатураРЛС.lt_month;
	ЭлементРЛС.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Месяц; 
	
	//Производитель, регистратор, упаковщик
	ФирмаПроизводитель = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.producer_orig);
	Если ФирмаПроизводитель <> Справочники.Производители.ПустаяСсылка() Тогда
		ЭлементРЛС.ФирмаПроизводитель = ФирмаПроизводитель;
	Иначе
		НоваяФирмаПроизводитель = Справочники.Производители.СоздатьЭлемент();
		НоваяФирмаПроизводитель.Наименование = НоменклатураРЛС.producer_orig;
		НоваяФирмаПроизводитель.НаименованиеРЛС = НоменклатураРЛС.producer_orig;
		НоваяФирмаПроизводитель.Записать();
		ЭлементРЛС.ФирмаПроизводитель = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.producer_orig);
	КонецЕсли;
	
	ФирмаУпаковщик = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.producer_orig);
	Если ФирмаУпаковщик <> Справочники.Производители.ПустаяСсылка() Тогда
		ЭлементРЛС.ФирмаУпаковщик = ФирмаУпаковщик;
	Иначе
		НоваяФирмаУпаковщик = Справочники.Производители.СоздатьЭлемент();
		НоваяФирмаУпаковщик.Наименование = НоменклатураРЛС.packer_orig;
		НоваяФирмаУпаковщик.НаименованиеРЛС = НоменклатураРЛС.packer_orig;
		НоваяФирмаУпаковщик.Записать();
		ЭлементРЛС.ФирмаУпаковщик = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.packer_orig);
	КонецЕсли;
	
	ФирмаРегистратор = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.producer_orig);
	Если ФирмаРегистратор <> Справочники.Производители.ПустаяСсылка() Тогда
		ЭлементРЛС.ФирмаРегистратор = ФирмаРегистратор;
	Иначе
		НоваяФирмаРегистратор = Справочники.Производители.СоздатьЭлемент();
		НоваяФирмаРегистратор.Наименование = НоменклатураРЛС.registrator_orig;
		НоваяФирмаРегистратор.НаименованиеРЛС = НоменклатураРЛС.registrator_orig;
		НоваяФирмаРегистратор.Записать();
		ЭлементРЛС.ФирмаРегистратор = Справочники.Производители.НайтиПоНаименованию(НоменклатураРЛС.registrator_orig);
	КонецЕсли;
	
	//Страна производителя, упаковщика, регистратора
	СтранаПроизводителя = Справочники.СтраныМира.НайтиПоНаименованию(НоменклатураРЛС.producer_country);
	Если СтранаПроизводителя <> Справочники.СтраныМира.ПустаяСсылка() Тогда
		ЭлементРЛС.СтранаПроизводителя = СтранаПроизводителя;
	КонецЕсли;
	
	СтранаУпаковщика = Справочники.СтраныМира.НайтиПоНаименованию(НоменклатураРЛС.packer_country);
	Если СтранаПроизводителя <> Справочники.СтраныМира.ПустаяСсылка() Тогда
		ЭлементРЛС.СтранаУпаковщика = СтранаУпаковщика;
	КонецЕсли;
	
	СтранаРегистратора = Справочники.СтраныМира.НайтиПоНаименованию(НоменклатураРЛС.registrator_country);
	Если СтранаПроизводителя <> Справочники.СтраныМира.ПустаяСсылка() Тогда
		ЭлементРЛС.СтранаУпаковщика = СтранаУпаковщика;
	КонецЕсли; 
	ЭлементРЛС.ВКомплекте = НоменклатураРЛС.completeness_short_name;
	ЭлементРЛС.ВКомплектеПолное = НоменклатураРЛС.completeness_name;

	ЗаполнитьПринадлежностьКСпискам(ЭлементРЛС,НоменклатураРЛС);
	ЗагрузитьКлассификаторыНоменклатуры(НоменклатураРЛС.prep_id,ЭлементРЛС);
	ЗаполнитьКомпонентныйСостав(ЭлементРЛС,НоменклатураРЛС);

	//Описание и инструкции
	ЭлементРЛС.РЛС_Описание = НоменклатураРЛС.desc_id; 

	ЭлементРЛС.Записать();
	
	
КонецПроцедуры 

Процедура ЗаполнитьПринадлежностьКСпискам(Объект,ДанныеРЛС)
	
	Данные = РЛС_ЗапросыКСервису.GET_classes_prep_marks(ДанныеРЛС.prep_id);	
	Если ЗначениеЗаполнено(Данные) Тогда
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Данные = Данные[0];			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.pku_id) Тогда
			Объект.ГруппаПКУ =  Справочники.ГруппыПКУ.Прочие;
		КонецЕсли;
		
		Если Данные.strong Тогда
			Объект.ГруппаПКУ = Справочники.ГруппыПКУ.Сильнодействующие;
			Объект.СильнодействующиеИЯды  = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Сильнодействующие;
		КонецЕсли;
				
		Если Данные.toxic Тогда
			Объект.ГруппаПКУ = Справочники.ГруппыПКУ.Яды;
			Объект.СильнодействующиеИЯды = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Яды;
		КонецЕсли; 
		
		Если Данные.druggroup_id > 0 Тогда
			Объект.ГруппаПКУ =  Справочники.ГруппыПКУ.Наркотики; 
			Объект.Наркотические  = Перечисления.СпискиНаркотическихВеществ["Список"+Данные.druggroup_id];
		КонецЕсли;
		
		Объект.БезрецептурныйОтпуск = Данные.no_recipe;  
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьУпаковкиПрепарата(Объект, СтруктураЗаполнения)
	
	ПервичнаяУпаковка = Неопределено;
	ВторичнаяУпаковка = Неопределено;	
	
	ЕдиницаИзмерения = Объект.БазоваяЕдиницаИзмеренияКАТ;
	
	// Заполним поля упаковки 1	
	Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.pack1sn);
	
	ПоляНовогоЭлемента = Новый Структура;
	ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.pack1sn);
	ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.pack1sn);
	ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.pack1n);
	
	Упаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Упаковка"               , Упаковка);
	Отбор.Вставить("СостоитИзДругихУпаковок", Ложь);
	Отбор.Вставить("БазоваяЕдиницаИзмерения", ЕдиницаИзмерения);

	Если ЕдиницаИзмерения.КодОКЕИ = "870" Тогда
		Коэффициент = 1;
	ИначеЕсли ЗначениеЗаполнено(СтруктураЗаполнения.amount1) Тогда
		Коэффициент = СтруктураЗаполнения.amount1;
	Иначе
		Коэффициент = 1;
	КонецЕсли; 
	
	Отбор.Вставить("Коэффициент"            , Коэффициент);
	Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
	Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
	
	ПервичнаяУпаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
	
	Если Не ЗначениеЗаполнено(ПервичнаяУпаковка) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать первичную упаковку препарата'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ПоследняяУпаковка = ПервичнаяУпаковка;
	
	// Заполним поля упаковки 2
	Если Не ПустаяСтрока(СтруктураЗаполнения.pack2sn) Тогда
		
		Если Не ЗначениеЗаполнено(ПервичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена первичная упаковка препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.pack2sn);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.pack2sn);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.pack2sn);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.pack2n);
		
		Упаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
		
		Если ЗначениеЗаполнено(СтруктураЗаполнения.amount2) Тогда
			КоличествоВУпаковке = СтруктураЗаполнения.amount2;
		Иначе
			КоличествоВУпаковке = 1;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Упаковка"               , Упаковка);
		Отбор.Вставить("СостоитИзДругихУпаковок", Истина);
		Отбор.Вставить("Родитель"               , ПервичнаяУпаковка);
		Отбор.Вставить("КоличествоВУпаковке"    , КоличествоВУпаковке);
		Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
		Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
		
		ВторичнаяУпаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать вторичную упаковку препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПоследняяУпаковка = ВторичнаяУпаковка;
		
	КонецЕсли;
	
	// Заполним поля упаковки 3
	Если Не ПустаяСтрока(СтруктураЗаполнения.pack3sn) Тогда
		
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена вторичная упаковка препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.pack3sn);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.pack3sn);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.pack3sn);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.pack3n);
		
		Упаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
		
		Если ЗначениеЗаполнено(СтруктураЗаполнения.amount3) Тогда
			КоличествоВУпаковке = СтруктураЗаполнения.amount3;
		Иначе
			КоличествоВУпаковке = 1;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Упаковка"               , Упаковка);
		Отбор.Вставить("СостоитИзДругихУпаковок", Истина);
		Отбор.Вставить("Родитель"               , ВторичнаяУпаковка);
		Отбор.Вставить("КоличествоВУпаковке"    , КоличествоВУпаковке);
		Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
		Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
		
		ТретичнаяУпаковка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать третичную упаковку препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПоследняяУпаковка = ТретичнаяУпаковка;
		
	КонецЕсли;
	
	Объект.Упаковка = ПоследняяУпаковка;
	
КонецПроцедуры

Функция ПолучитьДействующиеВеществаМННПоОписанию(СтруктураЗаполнения)
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.as_name_rus) Тогда
		
		ПолноеНаименованиеДействующегоВещества = СтруктураЗаполнения.as_name_rus;
		
		ЭтоМНН = (СтрНайти(ПолноеНаименованиеДействующегоВещества, "*") > 0);
		
		Наименование                          = СтруктураЗаполнения.as_name_rus;
		АнглийскоеНаименование                = "";
		ЛатинскоеНаименование                 = "";
		ЛатинскоеНаименованиеРодительныйПадеж = "";
		
		Если ПустаяСтрока(Наименование)Тогда
			
			НачПозиция = СтрНайти(ПолноеНаименованиеДействующегоВещества, "(");
			КонПозиция = СтрНайти(ПолноеНаименованиеДействующегоВещества, ")");
			
			АнглийскоеНаименование = "";
			Наименование = ПолноеНаименованиеДействующегоВещества;
			Если НачПозиция > 0 И НачПозиция < КонПозиция Тогда
				
				Наименование = СокрЛП(Лев(ПолноеНаименованиеДействующегоВещества, НачПозиция - 1));
				
				АнглийскоеНаименование = СокрЛП(Сред(ПолноеНаименованиеДействующегоВещества, НачПозиция + 1, КонПозиция - НачПозиция - 1));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("Наименование"                         , Наименование);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное"                   , ПолноеНаименованиеДействующегоВещества);
		ПоляНовогоЭлемента.Вставить("ОтноситсяКМНН"                        , ЭтоМНН);
		ПоляНовогоЭлемента.Вставить("АнглийскоеНаименование"               , АнглийскоеНаименование);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименование"                , ЛатинскоеНаименование);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименованиеРодительныйПадеж", ЛатинскоеНаименованиеРодительныйПадеж);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	АнглийскоеНаименование,
		|	ЛатинскоеНаименование,
		|	ЛатинскоеНаименованиеРодительныйПадеж
		|ИЗ
		|	Справочник.ДействующиеВеществаМНН
		|ГДЕ
		|	НаименованиеПолное ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""
		|";
		Запрос.УстановитьПараметр("НаименованиеПолное", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ПолноеНаименованиеДействующегоВещества));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка;
			ЭлементОбъект = Неопределено;
			Если ЗначениеЗаполнено(АнглийскоеНаименование) И Выборка.АнглийскоеНаименование <> АнглийскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЛатинскоеНаименование) И Выборка.ЛатинскоеНаименование <> ЛатинскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименование = ЛатинскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЛатинскоеНаименованиеРодительныйПадеж) И Выборка.ЛатинскоеНаименованиеРодительныйПадеж <> ЛатинскоеНаименованиеРодительныйПадеж Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименованиеРодительныйПадеж = ЛатинскоеНаименованиеРодительныйПадеж;
			КонецЕсли;
			
			ЗавершитьРедактированиеОбъекта(ЭлементОбъект);
			
		Иначе
			
			ЭлементОбъект = Справочники.ДействующиеВеществаМНН.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЭлементОбъект, ПоляНовогоЭлемента);
			ЭлементОбъект.Записать();
			Элемент = ЭлементОбъект.Ссылка;
			
		КонецЕсли; 
		
      		
		Возврат Элемент;
		
	КонецЕсли;
	
	Возврат Справочники.ДействующиеВеществаМНН.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьТорговоеНаименование(СтруктураЗаполнения, ДействующиеВеществаМНН, НужноОбновитьЛекарственныеСредства)
	
	НужноОбновитьЛекарственныеСредства = Ложь;
	Если Не ПустаяСтрока(СтруктураЗаполнения.trade_name_rus) Тогда
		
		АнглийскоеНаименование = СтруктураЗаполнения.lat_name;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка,
		|	ДействующиеВеществаМНН,
		|	АнглийскоеНаименование
		|ИЗ
		|	Справочник.ТорговыеНаименования
		|ГДЕ
		|	Наименование = &Наименование
		|");
		Запрос.УстановитьПараметр("Наименование", СтруктураЗаполнения.trade_name_rus);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка;
			ЭлементОбъект = Неопределено;
			Если ЗначениеЗаполнено(АнглийскоеНаименование) И АнглийскоеНаименование <> Выборка.АнглийскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДействующиеВеществаМНН) И ДействующиеВеществаМНН <> Выборка.ДействующиеВеществаМНН Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ДействующиеВеществаМНН = ДействующиеВеществаМНН;
				ЭлементОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеЛекарственныхСредств");
				НужноОбновитьЛекарственныеСредства = Истина;
			КонецЕсли;
			
			ЗавершитьРедактированиеОбъекта(ЭлементОбъект);
			
		Иначе
			
			ЭлементОбъект = Справочники.ТорговыеНаименования.СоздатьЭлемент();
			ЭлементОбъект.Наименование = СтруктураЗаполнения.trade_name_rus;
			ЭлементОбъект.ДействующиеВеществаМНН = ДействующиеВеществаМНН;
			ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			ЭлементОбъект.Записать();
			Элемент = ЭлементОбъект.Ссылка;
			
		КонецЕсли;
		
		Возврат Элемент;
		
	КонецЕсли;
	
	Возврат Справочники.ТорговыеНаименования.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьОбъектДляРедактирования(Ссылка, Объект)
	
	Если Объект <> Неопределено Тогда
		Возврат Объект;
	КонецЕсли;
	
	ОбъектСсылка = Ссылка.ПолучитьОбъект();
	ОбъектСсылка.Заблокировать();
	Возврат ОбъектСсылка;
	
КонецФункции

Процедура ЗавершитьРедактированиеОбъекта(Объект)
	
	Если Объект <> Неопределено Тогда
		Объект.Записать();
		Объект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКомпонентныйСостав(Объект,Данные)
	
	ДанныеРЛС = РЛС_ЗапросыКСервису.GET_inventory_components(Данные.prep_id);  
	
	Объект.КомпонентныйСостав.Очистить();
	
	Если ЗначениеЗаполнено(ДанныеРЛС) Тогда
		Для Каждого Элемент из ДанныеРЛС Цикл 		
			
			Если ЗначениеЗаполнено(Элемент.as_id) Тогда
				ДействующееВещество = Справочники.ДВЛП.НайтиПоРеквизиту("КодРЛС",Элемент.as_id);
				Если ЗначениеЗаполнено(ДействующееВещество) Тогда 					
					НоваяСтрока = Объект.КомпонентныйСостав.Добавить();
					НоваяСтрока.ДействующееВещество  = ДействующееВещество;
					НоваяСтрока.Доза = Элемент.dosage_value + " " + Элемент.unit_short_name; 				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - Обновить справочник РЛС
//  Обновляет все элементы справочника в системе РЛС
// Параметры:
//  ДатаОбновления - Дата последнего обновления из константы
Процедура ОбновитьСправочникРЛС() Экспорт
	
	ДатаОбновления = Константы.бит_ДатаОбновленияРЛС.Получить();
	ДанныеРЛС = ДанныеРЛСНаДату(ДатаОбновления);
	
	Если ДанныеРЛС <> Неопределено Тогда		
		ЗагрузитьОсновныеРеквизитыНоменклатуры(ДанныеРЛС)		
	КонецЕсли;                                        	
	
КонецПроцедуры 

Функция ДанныеРЛСНаДату(ДатаОбновления)
	
	Если Не ЗначениеЗаполнено(ДатаОбновления) Тогда
		ДатаОбновления = Дата("20000101"); // 2000.01.01
	КонецЕсли; 
	
	Возврат РЛС_ЗапросыКСервису.GET_inventory_complete("OnDate",Формат(ДатаОбновления,"ДФ=dd.MM.yy"));
	
КонецФункции

// Возвращает таблицу значений на основании массива структур
//
// Параметры:
//    МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//                                        Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица значений, созданная из массива структур.
//
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл
			Таблица.Колонки.Добавить(Свойство.Ключ);
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

Функция ПолучитьТемпературуХранения(УсловияХраненияРЛС) Экспорт
	Позиция=Найти(УсловияХраненияРЛС,"°C");
	НоваяСтрока=Лев(УсловияХраненияРЛС,Позиция-1);
	МассивЧисел = НайтиЧислаВСтроке(НоваяСтрока);
	Если МассивЧисел.Количество() = 1 Тогда
		Температура = Число(МассивЧисел[0]);
		Если Температура <= 2 Тогда
			Возврат "менее 2 градусов";
		ИначеЕсли Температура <= 8 Тогда
			Возврат "2-8 градусов";
		ИначеЕсли Температура <= 15 Тогда
			Возврат "8-15 градусов"
		ИначеЕсли Температура <= 25 Тогда
			Возврат "15-25 градусов"
		ИначеЕсли Температура > 25 Тогда
			Возврат "15-25 градусов"	
		КонецЕсли;
	ИначеЕсли МассивЧисел.Количество() = 2 Тогда
		Температура = 0;
		Если Число(МассивЧисел[0]) > Число(МассивЧисел[1]) Тогда
			Температура = Число(МассивЧисел[0]);
		Иначе
			Температура = Число(МассивЧисел[1]);
		КонецЕсли;
		Если Температура <= 2 Тогда
			Возврат "менее 2 градусов";
		ИначеЕсли Температура <= 8 Тогда
			Возврат "2-8 градусов";
		ИначеЕсли Температура <= 15 Тогда
			Возврат "8-15 градусов"
		ИначеЕсли Температура <= 25 Тогда
			Возврат "15-25 градусов"
		ИначеЕсли Температура > 25 Тогда
			Возврат "15-25 градусов"	
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция НайтиЧислаВСтроке(СтрокаСЧислом) 

   	МассивСтрок = СтрРазделить(СтрокаСЧислом, "0123456789", Ложь);
    
    тз=новый таблицазначений;
    тз.Колонки.Добавить("текст");
    тз.Колонки.Добавить("длина",новый описаниетипов("число"));
    Для Каждого ТекСтрока из МассивСтрок Цикл 
        приемник=тз.Добавить();
        приемник.текст=ТекСтрока;
        приемник.длина=СтрДлина(ТекСтрока);
    конеццикла;    
    
    тз.Сортировать("длина убыв");
    
    
    Для Каждого запись из тз Цикл 
        ТекСтрока=запись.текст;
        СтрокаСЧислом = СтрЗаменить(СтрокаСЧислом, ТекСтрока, Символы.ПС);
    КонецЦикла;
    
    МассивЧисел = СтрРазделить(СтрокаСЧислом, Символы.ПС, Ложь); 
    
    Возврат МассивЧисел;

КонецФункции

Функция НайтиСоздатьСправочникРЛС(packing_id) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрЛекарственныхСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РегистрЛекарственныхСредств КАК РегистрЛекарственныхСредств
		|ГДЕ
		|	РегистрЛекарственныхСредств.НомерРЛС = &НомерРЛС
		|	И НЕ РегистрЛекарственныхСредств.ПометкаУдаления ";
	
	Запрос.УстановитьПараметр("НомерРЛС", packing_id);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат  ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Справочники.РегистрЛекарственныхСредств.СоздатьЭлемент();
	КонецЕсли;

КонецФункции

Функция ОбновитьИнформациюОЖНВЛП(ОбъектРЛС,ШтрихКод) Экспорт
	
		ДанныеРЛС = РЛС_ЗапросыКСервису.GET_operational_lp_prices(Штрихкод);
		Если ЗначениеЗаполнено(ДанныеРЛС) Тогда
			ТаблицаДанных = РЛС_Служебный.МассивВТаблицуЗначений(ДанныеРЛС);
			ПараметрыОтбора = Новый Структура("price_category",1);			
			МассивДанных = ТаблицаДанных.НайтиСтроки(ПараметрыОтбора);		
			Если ЗначениеЗаполнено(МассивДанных)Тогда                           			
				ОбъектРЛС.ЖНВЛП = Перечисления.СпискиЖНВЛП.ВключеноВКонтрольЦен;
				Возврат МассивДанных;
			Иначе  
				ОбъектРЛС.ЖНВЛП = Перечисления.СпискиЖНВЛП.НеВключеноВКонтрольЦен;
			КонецЕсли;			
		КонецЕсли; 		
		Возврат Неопределено; 
		
	КонецФункции 
	
Процедура ОбновитьЦеныЖВНЛП(ДанныеЖНВЛП,СсылкаРЛС)  Экспорт
	
	Если ДанныеЖНВЛП = Неопределено Тогда
		МенеджерЗаписи = РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КАТ = СсылкаРЛС ;
		МенеджерЗаписи.Удалить();
	Иначе 
	    ЦеныЖНВЛП = Новый Массив;
		Для Каждого Строка из ДанныеЖНВЛП Цикл 
			СтруктураЦены = Новый Структура;
			СтруктураЦены.Вставить("Период", РЛС_Служебный.ПреобразоватьДатуИзСервиса(Строка.startdate));
			СтруктураЦены.Вставить("КАТ", СсылкаРЛС);
			СтруктураЦены.Вставить("Цена",Строка.price);
			СтруктураЦены.Вставить("ЦенаРуб",Строка.price);
			СтруктураЦены.Вставить("НомерПриказа",Строка.ordernum);
			СтруктураЦены.Вставить("ДатаИсключения",Неопределено);
			СтруктураЦены.Вставить("Валюта",Справочники.Валюты.НайтиПоКоду("643"));
			ЦеныЖНВЛП.Добавить(СтруктураЦены);
		КонецЦикла;
		
		РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП.ОбновитьЦеныЖНВЛП(ЦеныЖНВЛП)	 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗабракованныеСерии(СсылкаРЛС) Экспорт 
	
	Данные = РЛС_ЗапросыКСервису.GET_operational_rejectedseries(Формат(СсылкаРЛС.НомерРЛС,"ЧГ=0")); 

	Если ЗначениеЗаполнено(Данные) Тогда
		
		ТаблицаЗабраковок = ПодготовитьТаблицуЗабраковки();
		Для Каждого Структура из Данные Цикл
			
			НоваяСтрока = ТаблицаЗабраковок.Добавить();
			НоваяСтрока.НомерСерии = Структура.sernum;
			НоваяСтрока.НомерРЛС = Структура.packing_id;
			НоваяСтрока.Препарат = Строка(СсылкаРЛС);
			НоваяСтрока.Производитель = Строка(СсылкаРЛС.ФирмаПроизводитель);
			НоваяСтрока.Примечание = Структура.status;
			Если Структура.status_id = 1 Тогда
				НоваяСтрока.НомерЗапрещающегоДокумента = Структура.letternum;
				НоваяСтрока.ДатаЗапрещающегоДокумента = РЛС_Служебный.ПреобразоватьДатуИзСервиса(Структура.letterdate);
			Иначе 
				НоваяСтрока.Отмена = Истина;
				НоваяСтрока.НомерРазрешающегоДокумента = Структура.letternum;
				НоваяСтрока.ДатаРазрешающегоДокумента = РЛС_Служебный.ПреобразоватьДатуИзСервиса(Структура.letterdate);
			КонецЕсли;			
			
		КонецЦикла; 
		
		СохранитьЗабраковкиСерииВБазу(ТаблицаЗабраковок,ТекущаяДатаСеанса());
				
	КонецЕсли;

	
КонецПроцедуры 

Функция ПодготовитьТаблицуЗабраковки()
	
	
	
 	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСерии", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("НомерРЛС", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Препарат",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка"));
	// Документ забраковки
	ТаблицаЗначений.Колонки.Добавить("НомерЗапрещающегоДокумента",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("ДатаЗапрещающегоДокумента",Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("Примечание",Новый ОписаниеТипов("Строка"));
	// Документ отмены забраковки
	ТаблицаЗначений.Колонки.Добавить("Отмена",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("НомерРазрешающегоДокумента",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("ДатаРазрешающегоДокумента",Новый ОписаниеТипов("Дата"));
	
	// Дополнительные поля, отсутствующие в файле
	ТаблицаЗначений.Колонки.Добавить("ВсеСерии",Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаЗначений;
	
КонецФункции   

Функция СохранитьЗабраковкиСерииВБазу(ТаблицаЗабраковок, ДатаОбновления) 
	
	Таблица = Новый ТаблицаЗначений;
	
	МетаданныеСправочника = Метаданные.Справочники.ЗабракованныеСерии;
	Таблица.Колонки.Добавить("НомерСерии",	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(МетаданныеСправочника.ДлинаНаименования)));
	Таблица.Колонки.Добавить("НомерРЛС", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Препарат", МетаданныеСправочника.Реквизиты.Препарат.Тип);
	Таблица.Колонки.Добавить("Производитель", МетаданныеСправочника.Реквизиты.Производитель.Тип);
	Таблица.Колонки.Добавить("ВсеСерии", МетаданныеСправочника.Реквизиты.ВсеСерии.Тип);
	
	МетаданныеТабличнойЧасти = МетаданныеСправочника.ТабличныеЧасти.Приказы;
	Таблица.Колонки.Добавить("Примечание", МетаданныеТабличнойЧасти.Реквизиты.Примечание.Тип);
	Таблица.Колонки.Добавить("Отмена", МетаданныеТабличнойЧасти.Реквизиты.ОтменаЗабраковки.Тип);
	Таблица.Колонки.Добавить("НомерЗапрещающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.НомерДокумента.Тип);
	Таблица.Колонки.Добавить("НомерРазрешающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.НомерДокумента.Тип);
	Таблица.Колонки.Добавить("ДатаЗапрещающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.ДатаДокумента.Тип);
	Таблица.Колонки.Добавить("ДатаРазрешающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.ДатаДокумента.Тип);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТаблицаЗабраковок, Таблица); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗабраковок", Таблица);
	Запрос.УстановитьПараметр("ДатаОбновления", ДатаОбновления);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗабраковок.НомерРЛС КАК НомерРЛС,
	               |	ТаблицаЗабраковок.НомерСерии КАК НомерСерии,
	               |	ТаблицаЗабраковок.ВсеСерии КАК ВсеСерии,
	               |	ТаблицаЗабраковок.Препарат КАК Препарат,
	               |	ТаблицаЗабраковок.Производитель КАК Производитель,
	               |	ВЫБОР
	               |		КОГДА ТаблицаЗабраковок.Отмена
	               |			ТОГДА ТаблицаЗабраковок.НомерРазрешающегоДокумента
	               |		ИНАЧЕ ТаблицаЗабраковок.НомерЗапрещающегоДокумента
	               |	КОНЕЦ КАК НомерДокумента,
	               |	ВЫБОР
	               |		КОГДА ТаблицаЗабраковок.Отмена
	               |			ТОГДА ТаблицаЗабраковок.ДатаРазрешающегоДокумента
	               |		ИНАЧЕ ТаблицаЗабраковок.ДатаЗапрещающегоДокумента
	               |	КОНЕЦ КАК ДатаДокумента,
	               |	ТаблицаЗабраковок.Примечание КАК Примечание,
	               |	ТаблицаЗабраковок.Отмена КАК ОтменаЗабраковки
	               |ПОМЕСТИТЬ ТаблицаЗабраковок
	               |ИЗ
	               |	&ТаблицаЗабраковок КАК ТаблицаЗабраковок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗабраковок.НомерРЛС КАК НомерРЛС,
	               |	ТаблицаЗабраковок.НомерСерии КАК НомерСерии,
	               |	ТаблицаЗабраковок.ВсеСерии КАК ВсеСерии,
	               |	ТаблицаЗабраковок.Препарат КАК Препарат,
	               |	ТаблицаЗабраковок.Производитель КАК Производитель,
	               |	ТаблицаЗабраковок.НомерДокумента КАК НомерДокумента,
	               |	ТаблицаЗабраковок.ДатаДокумента КАК ДатаДокумента,
	               |	ТаблицаЗабраковок.Примечание КАК Примечание,
	               |	ТаблицаЗабраковок.ОтменаЗабраковки КАК ОтменаЗабраковки,
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |	ЗабраковкиСерий.Ссылка КАК Забраковка,
	               |	ВЫБОР
	               |		КОГДА ЗабраковкиСерий.НомерРЛС = ТаблицаЗабраковок.НомерРЛС
	               |				И (ЗабраковкиСерий.Номенклатура <> ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |					ИЛИ ЕСТЬNULL(ЗабраковкиСерий.ДатаОбновления, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < &ДатаОбновления
	               |					ИЛИ ЕСТЬNULL(ЗабраковкиСерий.ПометкаУдаления, ЛОЖЬ))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НужноЗаписать
	               |ПОМЕСТИТЬ Приказы
	               |ИЗ
	               |	ТаблицаЗабраковок КАК ТаблицаЗабраковок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрЛекарственныхСредств КАК РЛС
	               |		ПО (РЛС.НомерРЛС = ТаблицаЗабраковок.НомерРЛС)
	               |			И (НЕ РЛС.НомерРЛС = """")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО (РЛС.Ссылка = СправочникНоменклатура.ЭлементКАТ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗабракованныеСерии КАК ЗабраковкиСерий
	               |		ПО (ЗабраковкиСерий.НомерРЛС = ТаблицаЗабраковок.НомерРЛС
	               |				ИЛИ ЗабраковкиСерий.Номенклатура = СправочникНоменклатура.Ссылка)
	               |			И (ЗабраковкиСерий.Наименование = ТаблицаЗабраковок.НомерСерии)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаОбновления КАК ДатаОбновления,
	               |	Приказы.НомерРЛС КАК НомерРЛС,
	               |	Приказы.НомерСерии КАК НомерСерии,
	               |	Приказы.ВсеСерии КАК ВсеСерии,
	               |	Приказы.Препарат КАК Препарат,
	               |	Приказы.Производитель КАК Производитель,
	               |	Приказы.НомерДокумента КАК НомерДокумента,
	               |	Приказы.ДатаДокумента КАК ДатаДокумента,
	               |	Приказы.Примечание КАК Примечание,
	               |	Приказы.ОтменаЗабраковки КАК ОтменаЗабраковки,
	               |	Приказы.Номенклатура КАК Номенклатура,
	               |	Приказы.Забраковка КАК Забраковка,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СуществующиеПриказы.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПриказУжеЗаписан
	               |ИЗ
	               |	Приказы КАК Приказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗабракованныеСерии.Приказы КАК СуществующиеПриказы
	               |		ПО (СуществующиеПриказы.Ссылка = Приказы.Забраковка)
	               |			И (СуществующиеПриказы.НомерДокумента = Приказы.НомерДокумента)
	               |			И (СуществующиеПриказы.ДатаДокумента = Приказы.ДатаДокумента)
	               |ГДЕ
	               |	(СуществующиеПриказы.Ссылка ЕСТЬ NULL
	               |			ИЛИ Приказы.НужноЗаписать)
	               |ИТОГИ ПО
	               |	НомерСерии";
	
	КоличествоПриказов = 0;
	
	ВыборкаНомерСерии = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСерии");

	Пока ВыборкаНомерСерии.Следующий() Цикл
			
			ЗабраковкаСерий = Неопределено;
			Выборка = ВыборкаНомерСерии.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗабраковкаСерий = Неопределено Тогда
					
					Если ЗначениеЗаполнено(Выборка.Забраковка) Тогда
						ЗабраковкаСерий = Выборка.Забраковка.ПолучитьОбъект();
						Если ЗабраковкаСерий.ПометкаУдаления Тогда
							ЗабраковкаСерий.УстановитьПометкуУдаления(Ложь);
						КонецЕсли;
					Иначе
						ЗабраковкаСерий = Справочники.ЗабракованныеСерии.СоздатьЭлемент();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ЗабраковкаСерий, Выборка);
					ЗабраковкаСерий.Наименование = Выборка.НомерСерии;
					
				КонецЕсли;
					
				Если Выборка.ПриказУжеЗаписан Тогда
					Продолжить;
				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(ЗабраковкаСерий.Приказы.Добавить(), Выборка);
				КоличествоПриказов = КоличествоПриказов + 1;
				
			КонецЦикла;
			
			ЗабраковкаСерий.Записать();
			ЗаброковатьСерииНоменклатуры(ЗабраковкаСерий.Ссылка);			
			Справочники.ЗабракованныеСерии.ОбновитьИнформациюОЗабраковкеСерий(ЗабраковкаСерий.Ссылка)
			
		КонецЦикла;
		
	Возврат КоличествоПриказов;
	
КонецФункции 

Процедура ЗаброковатьСерииНоменклатуры(Забраковка) 
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Забраковка", Забраковка);	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗабракованныеСерии.Ссылка КАК Забраковка,
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	ЗабракованныеСерии.Статус КАК Статус
	|ИЗ
	|	Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (СерииНоменклатуры.Номер = ЗабракованныеСерии.Наименование)
	|			И (СерииНоменклатуры.Владелец = ЗабракованныеСерии.Номенклатура)
	|ГДЕ
	|	ЗабракованныеСерии.Ссылка = &Забраковка";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 	
		Если Выборка.Статус = Перечисления.СтатусыЗабраковкиСерий.Действует Тогда 
			Справочники.ЗабракованныеСерии.ЗабраковатьСерию(Выборка.Серия,Выборка.Забраковка);
		Иначе
			Справочники.ЗабракованныеСерии.ОтменитьЗабраковкуСерии(Выборка.Серия,Выборка.Забраковка);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры 

Функция ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита) Экспорт 
	
	Список = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяРеквизита);
	
	Если ЗначениеЗаполнено(Свойство) Тогда
	    НайденныеСтроки = Список.НайтиСтроки(Новый Структура("Свойство", Свойство));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0];		
		КонецЕсли; 		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	ПолеДополнительногоРеквизитаНаФорме = ПолучитьПолеДополнительногоРеквизитаНаФорме(Форма, ИмяРеквизита);
	
	Если не ПолеДополнительногоРеквизитаНаФорме = Неопределено Тогда
		Форма[ПолеДополнительногоРеквизитаНаФорме.ИмяРеквизитаЗначение] = ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеДопРеквизитаВОбъекте(НоменклатураСсылка, ОбъектРЛС) Экспорт
	Если НоменклатураСсылка <> Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТЗ=Новый ТаблицаЗначений;
	    ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	    ТЗ.Колонки.Добавить("Значение");
	    НовСтр=ТЗ.Добавить();
		ТемператураХранения = РЛС_Служебный.ПолучитьТемпературуХранения(ОбъектРЛС.УсловияХранения);
		НовСтр.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ТемператураХранения");
	    НовСтр.Значение= Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ТемператураХранения,,,НовСтр.Свойство);
	    УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка,ТЗ);
	КонецЕсли
КонецПроцедуры

Функция ПолучитьИзображениеПрепарата(ИмяКартинки,ИдентификаторФормы) Экспорт
	
	ДанныеКартинки = РЛС_ЗапросыКСервису.GET_inventory_pics(ИмяКартинки);
	Если ДанныеКартинки <> Неопределено Тогда
		Если ДанныеКартинки.КодСостояния = 200 Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ДанныеКартинки.ИмяФайлаТела);
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные,ИдентификаторФормы);
			Возврат Адрес;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции 

Функция ПолучитьОписаниеПрепарата(desc_id) Экспорт
	
	//	Инструкция = "<!DOCTYPE html><html lang='ru'>" + РЛС_ЗапросыКСервису.GET_library_solid_description(desc_id) + "</html>"; 
	Если НЕ ЗначениеЗаполнено(desc_id) Тогда	
		Возврат Неопределено;
	КонецЕсли;
	ДанныеРЛС = РЛС_ЗапросыКСервису.GET_library_solid_description(Формат(Число(desc_id),"ЧГ="));
	Описание = "";	
	Если ДанныеРЛС <> Неопределено Тогда              
		МассивСтрок = Новый Массив;
		
		СтруктураДанных = ДанныеРЛС[0]; 
		
		КартаПолей = СоответствияПолейОписания();
		Для Каждого КлючЗначение из СтруктураДанных Цикл				
			Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				Заголовок = "<h2>" + КартаПолей[КлючЗначение.Ключ] +  "</h2>";
				МассивСтрок.Добавить(Заголовок);
				МассивСтрок.Добавить(СокрЛП(КлючЗначение.Значение));
			КонецЕсли; 			
		КонецЦикла;
		
		Описание = "<!DOCTYPE html><html lang='ru'>" + СтрСоединить(МассивСтрок,"") + "</html>";
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция СоответствияПолейОписания()
	
	Мэп = Новый Соответствие; 
	
	Мэп.Вставить("COMPOSITION","Состав и форма выпуска");
	Мэп.Вставить("COMPOSITION_DF","Состав");
	Мэп.Вставить("CHARACTERS","Характеристика");
	Мэп.Вставить("PHARMAACTIONS","Фармакологические действия");
	Мэп.Вставить("ACTONORG","Действие на организм");
	Мэп.Вставить("COMPONENTSPROPERTIES","Свойства компонентов");
	Мэп.Вставить("DRUGFORMDESCR","Описание лекарственной формы");
	Мэп.Вставить("PHARMAKINETIC","Фармакокинетика");
	Мэп.Вставить("PHARMADYNAMIC","Фармакодинамика.");
	Мэп.Вставить("PHARMAPROPERTIES","Фармакологические (иммунобиологические) свойства");
	Мэп.Вставить("CLINICALPHARMACOLOGY","Клиническая фармакология");
	Мэп.Вставить("DIRECTION","Инструкция");
	Мэп.Вставить("INDICATIONS","Показания");
	Мэп.Вставить("RECOMMENDATIONS","Рекомендации");
	Мэп.Вставить("CONTRAINDICATIONS","Противопоказания");
	Мэп.Вставить("PREGNANCYUSE","Применение при беременности и кормлении грудью");
	Мэп.Вставить("USEMETHODANDDOSES","Способ применения и дозы");
	Мэп.Вставить("INSTRFORPAC","Инструкция для пациента");
	Мэп.Вставить("SIDEACTIONS","Побочные действия.");
	Мэп.Вставить("INTERACTIONS","Взаимодействие.");
	Мэп.Вставить("OVERDOSE","Передозировка");
	Мэп.Вставить("PRECAUTIONS","Меры предосторожности");
	Мэп.Вставить("SPECIALGUIDELINES","Особые указания");
	Мэп.Вставить("FORM","Форма выпуска");
	Мэп.Вставить("APTEKA_CONDITION","Условия отпуска из аптек.");
	Мэп.Вставить("LITERATURE","Литература");
	Мэп.Вставить("COMMENT","Комментарий");
	Мэп.Вставить("MANUFACTURER","Производитель");
	Мэп.Вставить("APPLY","Назначение");
	Мэп.Вставить("COMPLECTATION","Комплектация");
	Мэп.Вставить("PRINCIPLE","Принцип действия");
	Мэп.Вставить("MAINTECHCHARS","Технические характеристики");
	Мэп.Вставить("OBSERVATION","Наблюдение за лечением");
	Мэп.Вставить("SPECIFICATION","Спецификация");
	Мэп.Вставить("SERVICE","Обслуживание");
	Мэп.Вставить("PHARMGROUPS","Фармгруппы");
	Мэп.Вставить("PHARMACTIONS","Фармдействия");
	Мэп.Вставить("MKB","МКБ");
	Мэп.Вставить("ATC","АТХ");  
	
	Возврат Мэп;
КонецФункции

Функция ИспользуетсяОбменСРЛС() Экспорт
	Возврат Константы.бит_ИспользоватьОбменСРЛС.Получить();
КонецФункции

// Процедура - Обновить текущие данные РЛСНа сервере
// Обновляет информацию в справочнике Регистры Лекарственных Средств, 
//по данным штрихкодов Упаковок МДЛП, Штрихкодов номенкатуры, Штрихкодов РЛС.
//
Процедура ОбновитьТекущиеДанныеРЛСНаСервере(Дата = 0) Экспорт
	
	Если Дата = 0 Тогда
		Дата = НачалоДня(ТекущаяДата() - 86400);
	КонецЕсли;
	ОбновленныеДанныеРЛС = ДанныеРЛСНаДату(Дата);
	НайденныеВБазеРЛСДляОбновления = Новый Массив();
	
	Если ЗначениеЗаполнено(ОбновленныеДанныеРЛС) Тогда	
		Для Каждого РЛСИзСервиса Из ОбновленныеДанныеРЛС Цикл
			Если РЛСИзСервиса.barcode <> Неопределено Тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	РегистрЛекарственныхСредств.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.РегистрЛекарственныхСредств КАК РегистрЛекарственныхСредств
					|ГДЕ
					|	РегистрЛекарственныхСредств.Штрихкод ПОДОБНО &Штрихкод";
				
				Запрос.УстановитьПараметр("Штрихкод", РЛСИзСервиса.barcode);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Если Выборка.Следующий() Тогда
					НайденныеВБазеРЛСДляОбновления.Добавить(Выборка.Ссылка);
				КонецЕсли;
				//ОбъектРЛС = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту("Штрихкод", РЛСИзСервиса.barcode);	
			КонецЕсли;
		КонецЦикла;
		Для Каждого РЛСИзБазы Из НайденныеВБазеРЛСДляОбновления Цикл
			ОбъектРЛСИзБазы = РЛСИзБазы.ПолучитьОбъект();
			Штрихкод = РЛСИзБазы.Штрихкод;
			ПозицияРЛС = РЛС_ЗапросыКСервису.GET_inventory_complete("ean", НайтиЧислаВСтроке(Штрихкод)[0]);
			Если ЗначениеЗаполнено(ПозицияРЛС) Тогда
			Если ТипЗнч(ПозицияРЛС) = Тип("Массив") Тогда
				ПозицияРЛС = ПозицияРЛС[ПозицияРЛС.Количество()-1]
			КонецЕсли; 	
			
			//Если ТипЗнч(Выборка.ЭлементКАТ) = Тип("СправочникСсылка.КЛП") Тогда
			//	ОбъектРЛС = Справочники.РегистрЛекарственныхСредств.СоздатьЭлемент();
			//Иначе
			//	ОбъектРЛС = Выборка.ЭлементКАТ.ПолучитьОбъект();
			//КонецЕсли;
			ДанныеЖНВЛП = РЛС_Служебный.ОбновитьИнформациюОЖНВЛП(ОбъектРЛСИзБазы, НайтиЧислаВСтроке(Штрихкод)[0]);
			РЛС_Служебный.ЗаполнитьРеквизитыРЛС(ПозицияРЛС, ОбъектРЛСИзБазы);			
			РЛС_Служебный.ОбновитьЦеныЖВНЛП(ДанныеЖНВЛП,ОбъектРЛСИзБазы.Ссылка);
			РЛС_Служебный.ОбновитьЗабракованныеСерии(ОбъектРЛСИзБазы.Ссылка);		
			
			//Если  Выборка.Ссылка.ЭлементКАТ <> ОбъектРЛС.Ссылка Тогда
			//	ОбъектНоменклатура = Выборка.Ссылка.ПолучитьОбъект();
			//	ОбъектНоменклатура.ЭлементКАТ = ОбъектРЛС.Ссылка;
			//	ОбъектНоменклатура.РЛС_Инструкции = ПолучитьОписаниеПрепарата(ОбъектРЛС.РЛС_Описание);
			//	ОбъектНоменклатура.Записать();
			//КонецЕсли;
					
			Иначе
				//Сообщить(СтрШаблон("Не получены данные %1 по штрихкоду %2 ",Выборка.Ссылка, Штрихкод))
			КонецЕсли;
		КонецЦикла;
		Сообщить("Обновлено " + Строка(НайденныеВБазеРЛСДляОбновления.Количество()) + " элементов.")
	Иначе
		Сообщить("Нет новых данных за период.");
	КонецЕсли;  
КонецПроцедуры 

Процедура ОбновитьТекущиеДанныеРЛСНаСервереДоп(Первые = 0, Номенклатура = Неопределено) Экспорт
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	Товары.Ссылка КАК Ссылка,
	|	ПОДСТРОКА(УпаковкиМаркируемогоТовара.НомерУпаковки, 1, 14) КАК ШтрихКод
	|ПОМЕСТИТЬ ВТ_МаркируемыеУпаковки
	|ИЗ
	|	Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиМаркируемогоТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО УпаковкиМаркируемогоТовара.Номенклатура = Товары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	ПОДСТРОКА(УпаковкиМаркируемогоТовара.НомерУпаковки, 1, 14)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_Штрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = Товары.Ссылка
	|ГДЕ
	|	Товары.ЭтоЛекарственноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	РегистрЛекарственныхСредствШтрихкоды.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыРЛС
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрЛекарственныхСредств.Штрихкоды КАК РегистрЛекарственныхСредствШтрихкоды
	|		ПО (РегистрЛекарственныхСредствШтрихкоды.Ссылка = Товары.ЭлементКАТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1 
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ВТ_МаркируемыеУпаковки.ШтрихКод КАК ШтрихкодКИЗ,
	|	МАКСИМУМ(ВТ_Штрихкоды.Штрихкод) КАК ШтрихкодРС,
	|	МАКСИМУМ(ВТ_Штрихкоды.Штрихкод) КАК ШтрихкодРЛС,
	|	МАКСИМУМ(Номенклатура.ЭлементКАТ) КАК ЭлементКАТ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркируемыеУпаковки КАК ВТ_МаркируемыеУпаковки
	|		ПО (ВТ_МаркируемыеУпаковки.Ссылка = Номенклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Штрихкоды КАК ВТ_Штрихкоды
	|		ПО (ВТ_Штрихкоды.Ссылка = Номенклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыРЛС КАК ВТ_ШтрихкодыРЛС
	|		ПО (ВТ_ШтрихкодыРЛС.Ссылка = Номенклатура.Ссылка)
	|ГДЕ
	|	Номенклатура.ЭтоЛекарственноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка,
	|	ВТ_МаркируемыеУпаковки.ШтрихКод"; 
	
	Если ЗначениеЗаполнено(Первые) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПЕРВЫЕ 1","ПЕРВЫЕ " + Первые);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПЕРВЫЕ 1","");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.ЭтоЛекарственноеСредство","Номенклатура.ЭтоЛекарственноеСредство И Номенклатура.Ссылка = &Ссылка" );
		Запрос.УстановитьПараметр("Ссылка",Номенклатура);
	КонецЕсли;

	
	Результат = Запрос.Выполнить(); 
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл  
		
		ДанныеРЛС = Неопределено;
		
		Если ЗначениеЗаполнено(Выборка.ШтрихкодРС) Тогда 
			ШтрихКод = Выборка.ШтрихкодРС
		ИначеЕсли ЗначениеЗаполнено(Выборка.ШтрихкодКИЗ) Тогда
			Штрихкод = Выборка.ШтрихкодКИЗ
		ИначеЕсли ЗначениеЗаполнено(Выборка.ШтрихкодРЛС) Тогда 
			Штрихкод = Выборка.ШтрихкодРЛС 
		//ИначеЕсли ТипЗнч(Выборка.ЭлементКАТ) = Тип("СправочникСсылка.КЛП") Тогда
		//	Продолжить;
		Иначе
			//Сообщить("Невозможно оперделить штрихкод для номенклатуры  " + Выборка.Ссылка);
			Продолжить;
		КонецЕсли;		
		
		ДанныеРЛС = РЛС_ЗапросыКСервису.GET_inventory_complete("ean",СокрЛП(Штрихкод));
		
		Если ЗначениеЗаполнено(ДанныеРЛС) Тогда
			Если ТипЗнч(ДанныеРЛС) = Тип("Массив") Тогда
				ДанныеРЛС = ДанныеРЛС[ДанныеРЛС.Количество()-1]
			КонецЕсли; 	
			
			Если ТипЗнч(Выборка.ЭлементКАТ) = Тип("СправочникСсылка.КЛП") Тогда
				ОбъектРЛС = Справочники.РегистрЛекарственныхСредств.СоздатьЭлемент();
			Иначе
				ОбъектРЛС = Выборка.ЭлементКАТ.ПолучитьОбъект();
			КонецЕсли;
			
			ДанныеЖНВЛП = РЛС_Служебный.ОбновитьИнформациюОЖНВЛП(ОбъектРЛС,ШтрихКод);			
			РЛС_Служебный.ЗаполнитьРеквизитыРЛС(ДанныеРЛС, ОбъектРЛС);			
			РЛС_Служебный.ОбновитьЦеныЖВНЛП(ДанныеЖНВЛП,ОбъектРЛС.Ссылка);
			РЛС_Служебный.ОбновитьЗабракованныеСерии(ОбъектРЛС.Ссылка);		
			
			Если  Выборка.Ссылка.ЭлементКАТ <> ОбъектРЛС.Ссылка Тогда
				ОбъектНоменклатура = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектНоменклатура.ЭлементКАТ = ОбъектРЛС.Ссылка;
				ОбъектНоменклатура.РЛС_Инструкции = ПолучитьОписаниеПрепарата(ОбъектРЛС.РЛС_Описание);
				ОбъектНоменклатура.Записать();
			КонецЕсли;
					
		Иначе
			//Сообщить(СтрШаблон("Не получены данные %1 по штрихкоду %2 ",Выборка.Ссылка, Штрихкод))
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры



