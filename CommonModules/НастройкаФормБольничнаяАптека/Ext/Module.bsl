
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыДокумента

// Обработчик события "ПриСозданииНаСервере" формы документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура ФормаДокумента_ПриСозданииНаСервере(Форма) Экспорт
	
	ДобавитьИнформациюНаФормуДокумента(Форма);
	
	ОбновитьСостояниеДокумента(Форма);
	ОбновитьКартинкуСтатусаКомментария(Форма);
	
	ЗаполнитьПараметрыВыбораЭлементовФормыДокумента(Форма);
	
	ЗаполнитьСписокВыбораХозяйственныхОпераций(Форма);
	
КонецПроцедуры

// Обработчик события "ПриЧтенииНаСервере" формы документа
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма документа
//  ТекущийОбъект - ДокументОбъект   - объект, который будет прочитан
//
Процедура ФормаДокумента_ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ОбновитьСостояниеДокумента(Форма);
	
	ОбновитьКартинкуСтатусаКомментария(Форма);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы документа
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма документа
//  ТекущийОбъект   - ДокументОбъект   - записываемый объект
//  ПараметрыЗаписи - Структура        - содержит параметры записи
//
Процедура ФормаДокумента_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ОбновитьСостояниеДокумента(Форма);
	
	ОбновитьКартинкуСтатусаКомментария(Форма);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормыДокумента

#Область ОбработчикиСобытийФормыБизнесПроцесса

// Обработчик события "ПриСозданииНаСервере" формы бизнес-процесса
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес процесса
//
Процедура ФормаБизнесПроцесса_ПриСозданииНаСервере(Форма) Экспорт
	
	ДобавитьИнформациюНаФормуБизнесПроцесса(Форма);
	
	ОбновитьСостояниеБизнесПроцесса(Форма);
	
КонецПроцедуры

// Обработчик события "ПриЧтенииНаСервере" формы бизнес-процесса
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения    - форма бизнес процесса
//  ТекущийОбъект - БизнесПроцессОбъект - объект, который будет прочитан
//
Процедура ФормаБизнесПроцесса_ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ОбновитьСостояниеБизнесПроцесса(Форма);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы бизнес-процесса
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения    - форма бизнес процесса
//  ТекущийОбъект   - БизнесПроцессОбъект - записываемый объект
//  ПараметрыЗаписи - Структура           - содержит параметры записи
//
Процедура ФормаБизнесПроцесса_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ОбновитьСостояниеБизнесПроцесса(Форма);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормыБизнесПроцесса

#Область ОбработчикиСобытийФормыЖурналаДокументов

// Обработчик события "ПриСозданииНаСервере" формы журнала документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес процесса
//  ДополнительныеПараметры - Структура -
//        - ИмяСписка - Строка - если не указано, то имя списка "Список".
//        - ИмяЭлементаДляРазмещения - если указано, то будут созданы команды создания документов.
//
Процедура ФормаЖурналаДокументов_ПриСозданииНаСервере(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ИмяЖурнала = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	Список = Форма[ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИмяСписка", "Список")];
	
	ДанныеДокументов = Новый СписокЗначений;
	ИсключаемыеТипы = Новый Массив;
	
	МетаданныеЖурнала = Метаданные.ЖурналыДокументов[ИмяЖурнала];
	Для Каждого МетаданныеДокумента Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		
		ТипСсылкиДокумента = ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя()).ПустаяСсылка());
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеДокумента) Тогда
			ИсключаемыеТипы.Добавить(ТипСсылкиДокумента);
			Продолжить;
		КонецЕсли;
		
		ДанныеДокументов.Добавить(МетаданныеДокумента, МетаданныеДокумента.Представление());
		
	КонецЦикла;
	
	Если ДанныеДокументов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для отображения.'");
	КонецЕсли;
	
	Если ИсключаемыеТипы.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ИсключаемыеТипы, ВидСравненияКомпоновкиДанных.НеВСписке, "ОтборПоТипуДокументов", Истина);
	КонецЕсли;
	
	ИмяЭлементаДляРазмещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИмяЭлементаДляРазмещения");
	Если ИмяЭлементаДляРазмещения <> Неопределено Тогда
		
		ЭлементыФормы = Форма.Элементы;
		КомандыФормы = Форма.Команды;
		ГруппаСоздать = ЭлементыФормы[ИмяЭлементаДляРазмещения];
		ДокументыСПараметризуемымиОпциями = Новый Структура;
		
		ДанныеДокументов.СортироватьПоПредставлению();
		Для Каждого Элемент Из ДанныеДокументов Цикл
			
			Если Не ПравоДоступа("Добавление", Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = Элемент.Значение.Имя;
			ИмяЭлемента = ПолучитьИдентификатор(ИмяКоманды);
			
			Опции = ПараметризуемыеФункциональныеОпцииОбъекта(Элемент.Значение);
			Если ЗначениеЗаполнено(Опции) Тогда
				ДокументыСПараметризуемымиОпциями.Вставить(ИмяЭлемента, Опции);
			КонецЕсли;
			
			ДобавляемаяКоманда = КомандыФормы.Добавить(ИмяКоманды);
			ДобавляемаяКоманда.Заголовок = Элемент.Представление;
			ДобавляемаяКоманда.Действие = "Подключаемый_СоздатьОбъект";
			
			ДобавляемаяКнопка = ЭлементыФормы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаСоздать);
			ДобавляемаяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ДобавляемаяКнопка.ИмяКоманды = ИмяКоманды;
			ДобавляемаяКнопка.Видимость = ОбъектДоступенПоФункциональнымОпциямФормы(Форма, Опции);
			
		КонецЦикла;
		
		Если ДокументыСПараметризуемымиОпциями.Количество() > 0 Тогда
			ДобавляемаяКоманда = КомандыФормы.Добавить(ПолучитьИдентификатор("КомандыСоздания"));
			ДобавляемаяКоманда.Действие = ПоместитьВоВременноеХранилище(ДокументыСПараметризуемымиОпциями, Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость команд в соответствии с доступностью по параметризуемым функциональным опциям формы.
//
// Параметры;
//  Форма - ФормаКлиентскогоПриложения
//
Процедура УстановитьВидимостьКомандСозданияПоФункциональнымОпциям(Форма) Экспорт
	
	Команда = Форма.Команды.Найти(ПолучитьИдентификатор("КомандыСоздания"));
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	ДанныеДокументов = ПолучитьИзВременногоХранилища(Команда.Действие);
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Кнопка = ЭлементыФормы[Элемент.Ключ];
		Если Кнопка.Видимость <> ОбъектДоступенПоФункциональнымОпциямФормы(Форма, Элемент.Значение) Тогда
			Кнопка.Видимость = Не Кнопка.Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормыЖурналаДокументов

// Настраивает отображение итогов документа
//
// Параметры:
//  ГруппаИтого - ЭлементФормы - группа формы итогов документа
//
Процедура НастроитьОтображениеИтогов(ГруппаИтогов) Экспорт
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ГруппаИтогов.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор поля ввода по типам складов
//
// Параметры
//  ПолеВвода   - ПолеФормы(ПолеВвода)
//  ТипыСкладов - Массив(Перечисление.ТипыСкладов)
//
Процедура УстановитьОтборПоляВводаПоТипуСклада(ПолеВвода, ТипыСкладов) Экспорт
	
	Если ТипЗнч(ТипыСкладов) = Тип("Массив") Тогда
		ЗначениеПараметра = ТипыСкладов;
	Иначе
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(ТипыСкладов);
	КонецЕсли;
	
	ДобавитьПараметрВыбора(ПолеВвода.ПараметрыВыбора, "Отбор.ТипСклада", Новый ФиксированныйМассив(ЗначениеПараметра));
	
КонецПроцедуры

// Устанавливает отбор поля ввода по типам складов
//
// Параметры:
//  ПолеВвода   - ПолеФормы(ПолеВвода)
//  ТипыСкладов - Массив(Перечисление.ТипыСкладов)
//
Процедура УстановитьОтборПоляВводаПоТаблицеОбъекта(ПолеВвода, ТаблицаОбъекта) Экспорт
	
	ДобавитьПараметрВыбора(ПолеВвода.ПараметрыВыбора, "ТаблицаОбъекта", ТаблицаОбъекта);
	
КонецПроцедуры

// Добавление параметр выбора к существующим параметрам
//
// Параметры:
//  ПараметрыВыбора - ФиксированныйМассив - параметры выбора элемента формы
//  ИмяПараметра    - Строка              - имя добавляемого параметра
//  Значение        - любое значение, доступное в качестве значения параметра выбора
//
Процедура ДобавитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра, Значение) Экспорт
	
	Параметры = Новый Массив;
	Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		Параметры.Добавить(ПараметрВыбора);
	КонецЦикла;
	
	Параметры.Добавить(Новый ПараметрВыбора(ИмяПараметра, Значение));
	
	ПараметрыВыбора = Новый ФиксированныйМассив(Параметры);
	
КонецПроцедуры

// Удаляет параметр выбора, если он существует
//
// Параметры:
//  ПараметрыВыбора - ФиксированныйМассив - параметры выбора элемента формы
//  ИмяПараметра    - Строка              - имя удаляемого параметра
//
Процедура УдалитьПараметрВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	ПараметрУдален = Ложь;
	
	Параметры = Новый Массив;
	Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		
		Если ПараметрВыбора.Имя = ИмяПараметра Тогда
			ПараметрУдален = Истина;
			Продолжить;
		КонецЕсли;
		
		Параметры.Добавить(ПараметрВыбора);
		
	КонецЦикла;
	
	Если ПараметрУдален Тогда
		ПараметрыВыбора = Новый ФиксированныйМассив(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Определяет наличие параметра выбора у элемента формы по имени
//
// Параметры:
//  ПараметрыВыбора - ФиксированныйМассив - параметры выбора элемента формы
//  ИмяПараметра    - Строка              - имя проверяемого параметра
//
// Возвращаемое значение
//  Булево - Истина, если найден параметр выбора с искомым именем
//
Функция ЕстьПараметрВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = ИмяПараметра Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает заголовок формы по хозяйственной операции объекта
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ИзменитьЗаголовокПоХозяйственнойОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		
		Форма.АвтоЗаголовок = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Шаблон = НСтр("ru = '%1 %2 от %3'");
		Иначе
			Шаблон = НСтр("ru = '%1 (создание)'");
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Объект.ХозяйственнаяОперация,
			Объект.Номер,
			Объект.Дата);
		
	Иначе
		
		Форма.АвтоЗаголовок = Истина;
		Форма.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ОбработатьФормуДокумента

// Добавляет информацию о состоянии и авторе документа на форму
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура ДобавитьИнформациюНаФормуДокумента(Форма)
	
	МетаданныеОбъекта = Форма.Объект.Ссылка.Метаданные();
	РазрешеноПроведение = (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	
	ТекстовоеОписание =
	"<Форма>
	|	<Реквизиты>
	|		<Реквизит Имя='%1КартинкаСостоянияДокумента'>
	|			<Типы>
	|				<Тип>Число(1,Неотрицательный)</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1СостояниеДокумента'>
	|			<Типы>
	|				<Тип>Строка(20)</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1РазрешеноПроведение'>
	|			<Типы>
	|				<Тип>Булево</Тип>
	|			</Типы>
	|		</Реквизит>
	|	</Реквизиты>
	|	<Элементы>
	|		<УсловноеОформление>
	|			<Элемент>
	|				<Оформление
	|						ЦветТекста='ЦветПроведенногоДокумента'/>
	|				<Отбор>
	|					" + ?(РазрешеноПроведение, "<Элемент ЛевоеЗначение='Объект.Проведен'><Значение Тип='Булево'>Истина</Значение></Элемент>", "<Элемент ЛевоеЗначение='Объект.Ссылка' ВидСравнения='Заполнено' />") + "
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1СостояниеДокумента'/>
	|				</Поля>
	|			</Элемент>
	|			<Элемент>
	|				<Оформление
	|						ЦветТекста='ЦветНепроведенногоДокумента'/>
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='Объект.ПометкаУдаления'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1СостояниеДокумента'/>
	|				</Поля>
	|			</Элемент>
	|		</УсловноеОформление>
	|		<ГруппаФормы Имя='%1ГруппаИнформация'>
	|			<Свойство Имя='Вид'>ОбычнаяГруппа</Свойство>
	|			<Свойство Имя='ОтображатьЗаголовок'>Ложь</Свойство>
	|			<Свойство Имя='Отображение'>Нет</Свойство>
	|			<Свойство Имя='Группировка'>Горизонтальная</Свойство>
	|			<ПолеФормы	Имя='%1КартинкаСостоянияДокумента'>
	|				<Свойство Имя='Вид'>ПолеКартинки</Свойство>
	|				<Свойство Имя='ПутьКДанным'>%1КартинкаСостоянияДокумента</Свойство>
	|				<Свойство Имя='Ширина'>2</Свойство>
	|				<Свойство Имя='Высота'>1</Свойство>
	|				<Свойство Имя='РастягиватьПоГоризонтали'>Ложь</Свойство>
	|				<Свойство Имя='РастягиватьПоВертикали'>Ложь</Свойство>
	|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
	|				<Свойство Имя='Рамка'>БезРамки</Свойство>
	|				<Свойство Имя='Подсказка'>" + НСтр("ru='Состояние документа'") + "</Свойство>
	|				<Свойство Имя='КартинкаЗначений'>СостоянияДокумента</Свойство>
	|			</ПолеФормы>
	|			<ПолеФормы Имя='%1СостояниеДокумента'>
	|				<Свойство Имя='Вид'>ПолеНадписи</Свойство>
	|				<Свойство Имя='ПутьКДанным'>%1СостояниеДокумента</Свойство>
	|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
	|				<Свойство Имя='Подсказка'>" + НСтр("ru='Состояние документа'") + "</Свойство>
	|				<Свойство Имя='РастягиватьПоГоризонтали'>Ложь</Свойство>
	|				<Свойство Имя='ЦветТекста'>ТекстИнформационнойНадписи</Свойство>
	|			</ПолеФормы>
	|			<ДекорацияФормы Имя='%1КартинкаКомментарий'>
	|				<Свойство Имя='Вид'>Картинка</Свойство>
	|				<Свойство Имя='Ширина'>2</Свойство>
	|				<Свойство Имя='Высота'>1</Свойство>
	|			</ДекорацияФормы>
	|";
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Автор", МетаданныеОбъекта) Тогда
		ТекстовоеОписание = ТекстовоеОписание  + "
		|			<ДекорацияФормы	Имя='%1КартинкаАвторДокумента'>
		|				<Свойство Имя='Вид'>Картинка</Свойство>
		|				<Свойство Имя='Ширина'>2</Свойство>
		|				<Свойство Имя='Высота'>1</Свойство>
		|				<Свойство Имя='Картинка'>Пользователь</Свойство>
		|			</ДекорацияФормы>
		|			<ПолеФормы Имя='%1АвторДокумента'>
		|				<Свойство Имя='Вид'>ПолеНадписи</Свойство>
		|				<Свойство Имя='ПутьКДанным'>Объект.Автор</Свойство>
		|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
		|				<Свойство Имя='Подсказка'>" + НСтр("ru='Автор документа'") + "</Свойство>
		|				<Свойство Имя='ЦветТекста'>ТекстИнформационнойНадписи</Свойство>
		|			</ПолеФормы>
		|";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеОбъекта) Тогда
		ТекстовоеОписание = ТекстовоеОписание  + "
		|			<ДекорацияФормы	Имя='%1КартинкаАвторДокумента'>
		|				<Свойство Имя='Вид'>Картинка</Свойство>
		|				<Свойство Имя='Ширина'>2</Свойство>
		|				<Свойство Имя='Высота'>1</Свойство>
		|				<Свойство Имя='Картинка'>Пользователь</Свойство>
		|			</ДекорацияФормы>
		|			<ПолеФормы Имя='%1АвторДокумента'>
		|				<Свойство Имя='Вид'>ПолеНадписи</Свойство>
		|				<Свойство Имя='ПутьКДанным'>Объект.Ответственный</Свойство>
		|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
		|				<Свойство Имя='Подсказка'>" + НСтр("ru='Ответственный'") + "</Свойство>
		|				<Свойство Имя='ЦветТекста'>ТекстИнформационнойНадписи</Свойство>
		|			</ПолеФормы>
		|";
	КонецЕсли;
	ТекстовоеОписание = ТекстовоеОписание  + "
	|			
	|		</ГруппаФормы>
	|	</Элементы>
	|</Форма>
	|";
	
	ТекстовоеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстовоеОписание, ПолучитьПрефиксИменЭлементов());
	
	ОписаниеЭлементов = УправляемаяФорма.ПрочитатьОписаниеФормыИзСтроки(ТекстовоеОписание);
	УправляемаяФорма.СоздатьЭлементы(Форма, ОписаниеЭлементов);
	
	Форма[ПолучитьИдентификатор("РазрешеноПроведение")] = РазрешеноПроведение;
	
КонецПроцедуры

// Обновляет отображение состояния документа на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура ОбновитьСостояниеДокумента(Форма)
	
	ИмяКартинкаСостоянияДокумента = ПолучитьИдентификатор("КартинкаСостоянияДокумента");
	Если Форма.Элементы.Найти(ИмяКартинкаСостоянияДокумента) <> Неопределено Тогда
		
		ИмяСостояниеДокумента = ПолучитьИдентификатор("СостояниеДокумента");
		ИмяРазрешеноПроведение = ПолучитьИдентификатор("РазрешеноПроведение");
		
		Объект = Форма.Объект;
			
		Если Объект.Ссылка.Пустая() Тогда
			СостояниеДокумента = НСтр("ru='Новый'");
			КартинкаСостоянияДокумента = 0;
		ИначеЕсли Объект.Проведен Тогда
			СостояниеДокумента = НСтр("ru='Проведен'");
			КартинкаСостоянияДокумента = 1;
		ИначеЕсли Объект.ПометкаУдаления Тогда
			СостояниеДокумента = НСтр("ru='Помечен на удаление'");
			КартинкаСостоянияДокумента = 2;
		ИначеЕсли Форма[ИмяРазрешеноПроведение] Тогда
			СостояниеДокумента = НСтр("ru='Не проведен'");
			КартинкаСостоянияДокумента = 0;
		Иначе
			СостояниеДокумента = НСтр("ru='Записан'");
			КартинкаСостоянияДокумента = 3;
		КонецЕсли;
		
		Форма[ИмяКартинкаСостоянияДокумента] = КартинкаСостоянияДокумента;
		Форма[ИмяСостояниеДокумента] = СостояниеДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет картинку статуса комментария
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//
Процедура ОбновитьКартинкуСтатусаКомментария(Форма)
	
	ИмяКартинкаКомментарий = ПолучитьИдентификатор("КартинкаКомментарий");
	
	Если ЗначениеЗаполнено(Форма.Объект.Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
		Подсказка = НСтр("ru = 'Указан комментарий'");
	Иначе
		Картинка = Новый Картинка;
		Подсказка = "";
	КонецЕсли;
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяКартинкаКомментарий, "Картинка", Картинка);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяКартинкаКомментарий, "Подсказка", Подсказка);
	
КонецПроцедуры

// Заполняет параметры выбора элементов формы документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//
Процедура ЗаполнитьПараметрыВыбораЭлементовФормыДокумента(Форма)
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
	 Или Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОграничиваемыеЗначениямиДоступа = Новый Массив;
	ТипыОграничиваемыеЗначениямиДоступа.Добавить(Тип("СправочникСсылка.Склады"));
	ТипыОграничиваемыеЗначениямиДоступа.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыОграничиваемыеЗначениямиДоступа.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаОбъекта = Форма.Объект.Ссылка.Метаданные().ПолноеИмя();
	
	Элементы = Форма.Элементы;
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("ПолеФормы") Или ЭлементФормы.Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементФормы.ПутьКДанным;
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
			Данные = Форма;
			Для Каждого СтрокаМассива Из Массив Цикл
				Если ТипЗнч(Данные) = Тип("ФормаКлиентскогоПриложения")
					ИЛИ ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") Тогда
					Данные = Данные[СтрокаМассива];
				Иначе
					Данные = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Данные <> Неопределено Тогда
			Если ТипыОграничиваемыеЗначениямиДоступа.Найти(ТипЗнч(Данные)) <> Неопределено Тогда
				Если Не ЕстьПараметрВыбора(ЭлементФормы.ПараметрыВыбора, "ПоказыватьВсе") Тогда
					УстановитьОтборПоляВводаПоТаблицеОбъекта(ЭлементФормы, ТаблицаОбъекта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список выбора значения реквизита ХозяйственнаяОперация документа,
// если такой существует и выведен на форму, с учетом доступности по функциональным опциям.
// Устанавливает значение реквизита по-умолчанию, и видимость, если список состоит из одного элемента.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой должен обязательно присутствовать
//                             основной реквизит с именем Объект.
//
Процедура ЗаполнитьСписокВыбораХозяйственныхОпераций(Форма) Экспорт
	
	Объект           = Форма.Объект;
	СсылкаОбъекта    = Объект.Ссылка;
	ОбъектМетаданных = СсылкаОбъекта.Метаданные();
	РеквизитОперация = ОбъектМетаданных.Реквизиты.Найти("ХозяйственнаяОперация");
	Если РеквизитОперация = Неопределено
	 Или Не ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(РеквизитОперация.Тип, Тип("ПеречислениеСсылка.ХозяйственныеОперации")) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляОпераций = ПоляХозяйственныхОпераций(Форма);
	Если ПоляОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	ДоступныеОперации      = Справочники.НастройкиХозяйственныхОпераций.ДоступныеХозяйственныеОперации(ИдентификаторДокумента);
	ОперацияВыбрана        = ЗначениеЗаполнено(Объект.ХозяйственнаяОперация);
	
	Если ОперацияВыбрана И ДоступныеОперации.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		ДоступныеОперации.Вставить(0, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	ДоступнаОднаОперация = ДоступныеОперации.Количество() = 1;
	Если ДоступнаОднаОперация И СсылкаОбъекта.Пустая() И Не ОперацияВыбрана Тогда
		Объект.ХозяйственнаяОперация = ДоступныеОперации[0];
	КонецЕсли;
	
	ОперацияВыбрана = ЗначениеЗаполнено(Объект.ХозяйственнаяОперация);
	Для Каждого ПолеОперации Из ПоляОпераций Цикл
		СписокВыбора = ПолеОперации.СписокВыбора;
		СписокВыбора.ЗагрузитьЗначения(ДоступныеОперации);
		ПолеОперации.Видимость = Не (ДоступнаОднаОперация И ОперацияВыбрана);
	КонецЦикла;
	
КонецПроцедуры

// Определяет поля формы, ссылающиеся на реквизит ХозяйственнаяОперация,
// основного реквизита формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, среди элементов которой выполняется поиск.
//
// Возвращаемое значение:
//  ПоляХозяйственныхОпераций - Массив - массив элементов формы, ссылающихся на реквизит.
//
Функция ПоляХозяйственныхОпераций(Форма)
	
	ПоляХозяйственныхОпераций = Новый Массив;
	
	Элементы = Форма.Элементы;
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
		 И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода
		 И ЭлементФормы.ПутьКДанным = "Объект.ХозяйственнаяОперация" Тогда
			ПоляХозяйственныхОпераций.Добавить(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляХозяйственныхОпераций;
	
КонецФункции

#КонецОбласти // ОбработатьФормуДокумента

#Область ОбработатьФормуБизнесПроцесса

// Добавляет информацию о состоянии и авторе документа на бизнес-процесса
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес процесса
//
Процедура ДобавитьИнформациюНаФормуБизнесПроцесса(Форма)
	
	ТекстовоеОписание =
	"<Форма>
	|	<Реквизиты>
	|		<Реквизит Имя='%1КартинкаСостоянияДокумента'>
	|			<Типы>
	|				<Тип>Число(1,Неотрицательный)</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1СостояниеДокумента'>
	|			<Типы>
	|				<Тип>Строка(50)</Тип>
	|			</Типы>
	|		</Реквизит>
	|	</Реквизиты>
	|	<Элементы>
	|		<ГруппаФормы Имя='%1ГруппаИнформация'>
	|			<Свойство Имя='Вид'>ОбычнаяГруппа</Свойство>
	|			<Свойство Имя='ОтображатьЗаголовок'>Ложь</Свойство>
	|			<Свойство Имя='Отображение'>Нет</Свойство>
	|			<Свойство Имя='Группировка'>Горизонтальная</Свойство>
	|			<ПолеФормы Имя='%1КартинкаСостоянияДокумента'>
	|				<Свойство Имя='Вид'>ПолеКартинки</Свойство>
	|				<Свойство Имя='ПутьКДанным'>%1КартинкаСостоянияДокумента</Свойство>
	|				<Свойство Имя='Ширина'>2</Свойство>
	|				<Свойство Имя='Высота'>1</Свойство>
	|				<Свойство Имя='РастягиватьПоГоризонтали'>Ложь</Свойство>
	|				<Свойство Имя='РастягиватьПоВертикали'>Ложь</Свойство>
	|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
	|				<Свойство Имя='Рамка'>БезРамки</Свойство>
	|				<Свойство Имя='Подсказка'>" + НСтр("ru='Состояние бизнес-процесса'") + "</Свойство>
	|				<Свойство Имя='КартинкаЗначений'>СостоянияПроцессов</Свойство>
	|			</ПолеФормы>
	|			<ПолеФормы Имя='%1СостояниеДокумента'>
	|				<Свойство Имя='Вид'>ПолеНадписи</Свойство>
	|				<Свойство Имя='ПутьКДанным'>%1СостояниеДокумента</Свойство>
	|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
	|				<Свойство Имя='Подсказка'>" + НСтр("ru='Состояние бизнес-процесса'") + "</Свойство>
	|				<Свойство Имя='АвтоМаксимальнаяШирина'>Ложь</Свойство>
	|				<Свойство Имя='МаксимальнаяШирина'>30</Свойство>
	|				<Свойство Имя='ЦветТекста'>ТекстИнформационнойНадписи</Свойство>
	|			</ПолеФормы>
	|			<ДекорацияФормы Имя='%1КартинкаАвторДокумента'>
	|				<Свойство Имя='Вид'>Картинка</Свойство>
	|				<Свойство Имя='Картинка'>Пользователь</Свойство>
	|			</ДекорацияФормы>
	|			<ПолеФормы Имя='%1АвторДокумента'>
	|				<Свойство Имя='Вид'>ПолеНадписи</Свойство>
	|				<Свойство Имя='ПутьКДанным'>Объект.Автор</Свойство>
	|				<Свойство Имя='ПоложениеЗаголовка'>Нет</Свойство>
	|				<Свойство Имя='Подсказка'>" + НСтр("ru='Автор бизнес-процесса'") + "</Свойство>
	|				<Свойство Имя='ЦветТекста'>ТекстИнформационнойНадписи</Свойство>
	|			</ПолеФормы>
	|			
	|		</ГруппаФормы>
	|	</Элементы>
	|</Форма>
	|";
	
	ТекстовоеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстовоеОписание, ПолучитьПрефиксИменЭлементов());
	
	ОписаниеЭлементов = УправляемаяФорма.ПрочитатьОписаниеФормыИзСтроки(ТекстовоеОписание);
	УправляемаяФорма.СоздатьЭлементы(Форма, ОписаниеЭлементов); 
	
КонецПроцедуры

// Обновляет отображение состояния бизнес-процесса на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса
//
Процедура ОбновитьСостояниеБизнесПроцесса(Форма) Экспорт
	
	ИмяКартинкаСостоянияДокумента = ПолучитьИдентификатор("КартинкаСостоянияДокумента");
	Если Не Форма.Элементы.Найти(ИмяКартинкаСостоянияДокумента) = Неопределено Тогда
		
		ИмяСостояниеДокумента = ПолучитьИдентификатор("СостояниеДокумента");
		
		Объект = Форма.Объект;
		
		Если Объект.Ссылка.Пустая() Тогда
			СостояниеДокумента = НСтр("ru='Новый'");
			КартинкаСостоянияДокумента = 0;
			Цвет = ЦветаСтиля.ТекстИнформационнойНадписи;
		ИначеЕсли Объект.ПометкаУдаления Тогда
			СостояниеДокумента = НСтр("ru='Помечен на удаление'");
			КартинкаСостоянияДокумента = 6;
			Цвет = ЦветаСтиля.НеСтартованныйБизнесПроцесс;
		ИначеЕсли Объект.Завершен Тогда
			СостояниеДокумента = НСтр("ru='Завершен'");
			КартинкаСостоянияДокумента = 5;
			Цвет = ЦветаСтиля.ЦветПроведенногоДокумента;
		ИначеЕсли Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			СостояниеДокумента = НСтр("ru='Остановлен'");
			КартинкаСостоянияДокумента = 4;
			Цвет = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		ИначеЕсли Объект.Стартован Тогда
			СостояниеДокумента = НСтр("ru='Стартован'");
			КартинкаСостоянияДокумента = 3;
			Цвет = ЦветаСтиля.ЦветПроведенногоДокумента;
		Иначе
			
			Цвет = ЦветаСтиля.ТекстИнформационнойНадписи;
			
			ОтложенныйПроцесс = Ложь;
			Если БизнесПроцессыИЗадачиБольничнаяАптека.ПроцессПоддерживаетОтложенныйСтарт(Объект.Ссылка) Тогда
				
				ПараметрыОтложенногоПроцесса = БизнесПроцессыИЗадачиСервер.ПараметрыОтложенногоПроцесса(Объект.Ссылка);
				Если ПараметрыОтложенногоПроцесса <> Неопределено Тогда
					
					Если ПараметрыОтложенногоПроцесса.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
						СостояниеДокумента = НСтр("ru='Старт отменен'");
						КартинкаСостоянияДокумента = 2;
						ОтложенныйПроцесс = Истина;
					ИначеЕсли ПараметрыОтложенногоПроцесса.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту
							И ЗначениеЗаполнено(ПараметрыОтложенногоПроцесса.ДатаОтложенногоСтарта) Тогда
						ДатаОтложенногоСтартаСтрокой = Формат(
							ПараметрыОтложенногоПроцесса.ДатаОтложенногоСтарта,
							?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"), "ДЛФ=DT", "ДЛФ=D"));
						СостояниеДокумента = НСтр("ru = 'Задание будет запущено'") + " " + ДатаОтложенногоСтартаСтрокой;
						КартинкаСостоянияДокумента = 1;
						ОтложенныйПроцесс = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ОтложенныйПроцесс Тогда
				СостояниеДокумента = НСтр("ru='Записан'");
				КартинкаСостоянияДокумента = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма[ИмяКартинкаСостоянияДокумента] = КартинкаСостоянияДокумента;
		Форма[ИмяСостояниеДокумента] = СостояниеДокумента;
		Форма.Элементы[ИмяСостояниеДокумента].ЦветТекста = Цвет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработатьФормуБизнесПроцесса

Функция ПараметризуемыеФункциональныеОпцииОбъекта(ОбъектМетаданных)
	
	ФункциональныеОпции = Новый Массив;
	
	Для Каждого Опция Из Метаданные.ФункциональныеОпции Цикл
		Если ОбщегоНазначения.ЭтоКонстанта(Опция.Хранение) Тогда
			Продолжить;
		КонецЕсли;
		Если Опция.Состав.Найти(ОбъектМетаданных) <> Неопределено Тогда
			ФункциональныеОпции.Добавить(Опция.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФункциональныеОпции;
	
КонецФункции

Функция ОбъектДоступенПоФункциональнымОпциямФормы(Форма, ФункциональныеОпции)
	
	Если Не ЗначениеЗаполнено(ФункциональныеОпции) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
		Если Форма.ПолучитьФункциональнуюОпциюФормы(ИмяОпции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Формирует идентификатор специфический для общих объектов конфигурации
//
// Параметры:
//  Имя - Строка - имя элемента формы
//
Функция ПолучитьИдентификатор(Имя) Экспорт
	
	Возврат ПолучитьПрефиксИменЭлементов() + Имя;
	
КонецФункции

// Получает префикс идентификаторов
//
Функция ПолучитьПрефиксИменЭлементов()
	
	Возврат "__ОбщийОбъект__";
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
