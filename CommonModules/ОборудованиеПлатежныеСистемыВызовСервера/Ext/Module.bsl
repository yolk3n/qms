
#Область СлужебныйПрограммныйИнтерфейс

// Подготовить данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура -Параметры подключения
//  Команда - Строка - Команда
//  ПараметрыОперации - Структура -Параметры операции
// 
// Возвращаемое значение:
//  Неопределено.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт

КонецФункции

Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
	Если Команда = "GetOperationByCards" Тогда
		Если РезультатВыполнения.Свойство("РезультатОперацииXML") Тогда
			Операции = ОперацииПоКартам(РезультатВыполнения.РезультатОперацииXML);     
			РезультатВыполнения.Вставить("Операции", Операции);
		КонецЕсли;
	Иначе
		Если РезультатВыполнения.Свойство("ТекстСлипЧека")
			И Не ПустаяСтрока(РезультатВыполнения.ТекстСлипЧека) Тогда 
			
			Если МенеджерОборудованияВызовСервера.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				Если ДанныеОперации.Свойство("ПолныйСлипЧек") И НЕ ДанныеОперации.ПолныйСлипЧек Тогда
					ТекстСлипЧека = ОборудованиеПлатежныеСистемыКлиентСервер.ТекстСлипЧекаПоУмолчанию(РезультатВыполнения);         
				Иначе
					ТекстСлипЧека = РезультатВыполнения.ТекстСлипЧека;
				КонецЕсли;
				ТестовыеЧеки = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьXMLПакетДляТекста(ТекстСлипЧека, ПараметрыПодключения.РевизияИнтерфейса);
				РезультатВыполнения.Вставить("ТестовыеЧеки", ТестовыеЧеки);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;      
	
	ЗаписатьИсториюПлатежнойОперации(Команда, ДанныеОперации, РезультатВыполнения);
	
КонецПроцедуры

Процедура ЗаписатьИсториюПлатежнойОперации(Команда, ДанныеОперации, РезультатВыполнения) Экспорт
	
	Если Не МенеджерОборудованияВызовСервера.ДоступноЛогированиеПлатежныхОпераций() Тогда
		Возврат;
	КонецЕсли;
	
	ТипОперации = ТипПлатежнойОперацииПоКоманде(Команда);
	Если ТипОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗапроса = ?(ДанныеОперации.Свойство("ИдентификаторЗапроса"), ДанныеОперации.ИдентификаторЗапроса, Неопределено);
	ДокументОснование    = ?(ДанныеОперации.Свойство("ДокументОснование"), ДанныеОперации.ДокументОснование, Неопределено);
	СуммаОперации        = ?(ДанныеОперации.Свойство("СуммаОперации"), ДанныеОперации.СуммаОперации, Неопределено);
	ИдентификаторФискальнойОперации = 
		?(ДанныеОперации.Свойство("ИдентификаторФискальнойОперации"), ДанныеОперации.ИдентификаторФискальнойОперации, Неопределено);
	
	Если ПустаяСтрока(ИдентификаторЗапроса) Тогда
		ИдентификаторЗапроса = Новый УникальныйИдентификатор();
		Если ДанныеОперации.Свойство("ИдентификаторЗапроса") Тогда
			ДанныеОперации.ИдентификаторЗапроса = ИдентификаторЗапроса;
		КонецЕсли;
	КонецЕсли;
	ДатаЗаписи = МенеджерОборудованияВызовСервера.ДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ПлатежныеОперации.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	Запись.ИдентификаторЗапроса            = Строка(ИдентификаторЗапроса);
	Запись.ДокументОснование               = ДокументОснование;
	Запись.ДатаЗапроса                     = ДатаЗаписи;
	Запись.ГодМесяц                        = Год(ДатаЗаписи)*100+Месяц(ДатаЗаписи);
	Запись.ТипОперации                     = ТипОперации;
	Запись.ИдентификаторФискальнойОперации = ИдентификаторФискальнойОперации;
	Запись.СуммаОперации                   = СуммаОперации;
	Запись.ОперацияВыполнена               = РезультатВыполнения.Результат;
	
	Сжатие = Новый СжатиеДанных(6);
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеОперации, , "ЗаписатьИсториюПлатежнойОперации_ПреобразованиеВJSON", ОборудованиеПлатежныеСистемыВызовСервера);
	Запись.ДанныеЗапроса = Новый ХранилищеЗначения(ЗаписьJSON.Закрыть(), Сжатие);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, РезультатВыполнения, , "ЗаписатьИсториюПлатежнойОперации_ПреобразованиеВJSON", ОборудованиеПлатежныеСистемыВызовСервера);
	Запись.ДанныеОтвета = Новый ХранилищеЗначения(ЗаписьJSON.Закрыть(), Сжатие);
	
	НаборЗаписей.Записать(Ложь);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить операции по картам.
//
// Параметры:
//  ДанныеXML - Строка
//
// Возвращаемое значение:
//  Массив
// 
Функция ОперацииПоКартам(ДанныеXML) 
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеXML);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				Операция = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыПроведеннойЭквайринговойОперации();    
				Операция.ТипТранзакции = ЧтениеXML.ЗначениеАтрибута("TypeOperation");
				Операция.НомерМерчанта = ЧтениеXML.ЗначениеАтрибута("MerchantNumber");
				Операция.НомерКарты = ЧтениеXML.ЗначениеАтрибута("CardNumber");
				Если ЧтениеXML.ЗначениеАтрибута("CardNumberHash") <> Неопределено Тогда
					Операция.ХешНомерКарты = ЧтениеXML.ЗначениеАтрибута("CardNumberHash");      
				КонецЕсли;                            
				Если ЧтениеXML.ЗначениеАтрибута("Amount") <> Неопределено Тогда
					Операция.СуммаОперации = Число(ЧтениеXML.ЗначениеАтрибута("Amount"));        
				КонецЕсли; 
				Если ЧтениеXML.ЗначениеАтрибута("AmountCash") <> Неопределено Тогда
					Операция.СуммаНаличных = Число(ЧтениеXML.ЗначениеАтрибута("AmountCash"));
				КонецЕсли; 
				Если ЧтениеXML.ЗначениеАтрибута("ElectronicCertificateAmount") <> Неопределено Тогда
					Операция.СуммаЭлектронногоСертификата = Число(ЧтениеXML.ЗначениеАтрибута("ElectronicCertificateAmount"));
				КонецЕсли; 
				Если ЧтениеXML.ЗначениеАтрибута("ReturnElectronicCertificate") <> Неопределено Тогда
					Операция.СуммаСобственныхСредств = Число(ЧтениеXML.ЗначениеАтрибута("ReturnElectronicCertificate"));
				КонецЕсли;
				Операция.СсылочныйНомер = ЧтениеXML.ЗначениеАтрибута("RRNCode");
				Операция.КодАвторизации= ЧтениеXML.ЗначениеАтрибута("AuthorizationCode");
				Результат.Добавить(Операция);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипПлатежнойОперацииПоКоманде(Команда)
	
	ТипыОпераций = Новый Соответствие();
	
	ТипыОпераций.Вставить("AuthorizeSales", Перечисления.ТипыПлатежныхОпераций.ОплатаПлатежнойКартой);
	ТипыОпераций.Вставить("AuthorizeRefund", Перечисления.ТипыПлатежныхОпераций.ВозвратПоПлатежнойКарте);
	ТипыОпераций.Вставить("AuthorizeVoid", Перечисления.ТипыПлатежныхОпераций.ОтменаПлатежаПоПлатежнойКарте);
	ТипыОпераций.Вставить("PayByPaymentCardWithCashWithdrawal", Перечисления.ТипыПлатежныхОпераций.ОплатаПлатежнойКартойСВыдачейНаличных);
	ТипыОпераций.Вставить("PayElectronicCertificate", Перечисления.ТипыПлатежныхОпераций.ОплатаЭС);
	ТипыОпераций.Вставить("ReturnElectronicCertificate", Перечисления.ТипыПлатежныхОпераций.ВозвратЭС);
	ТипыОпераций.Вставить("EmergencyVoid", Перечисления.ТипыПлатежныхОпераций.АварийнаяОтмена);
	
	Возврат ТипыОпераций.Получить(Команда);
	
КонецФункции

Функция ЗаписатьИсториюПлатежнойОперации_ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт  
	
	Возврат Строка(Значение);   
	
КонецФункции

#КонецОбласти
