///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОнлайнОплаты".
// ОбщийМодуль.ОнлайнОплатыСлужебный.
//
// Процедуры настройки интеграции с онлайн оплатами:
//  - определение имя справочника организации, использования одной организации в ИБ;
//  - возврат настройки онлайн оплаты по данным основания, аналитик учета по настройке онлайн оплаты;
//  - инициализация параметров подключения;
//  - обработка ошибок сервиса интеграции с платежными системами;
//  - разбор ответа сервиса.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БазоваяФункциональностьБСП

// См. описание процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.6.3.3",
		"Роль.ВыполнениеОбменовСЯндексКассой",
		"Роль.ВыполнениеОбменовОнлайнОплаты",
		"ИнтернетПоддержкаПользователей");
		
		ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.6.3.3",
		"Роль.ЧтениеОбменовСЯндексКассой",
		"Роль.ЧтениеОбменовОнлайнОплаты",
		"ИнтернетПоддержкаПользователей");
		
		ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.6.3.3",
		"Роль.ПолучениеПлатежнойСсылкиДляЯндексКассы",
		"Роль.ПолучениеПлатежнойСсылкиДляОнлайнОплаты",
		"ИнтернетПоддержкаПользователей");
		
		ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.6.3.3",
		"Роль.ДобавлениеИзменениеОбменовСЯндексКассой",
		"Роль.ДобавлениеИзменениеОбменовОнлайнОплаты",
		"ИнтернетПоддержкаПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.6.3.23";
		Обработчик.Процедура           = "ОнлайнОплатыСлужебный.ОбновитьКонстантуПредопределенныеШаблоныСообщений";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий         = НСтр("ru='Перезаполнение предопределенных шаблонов онлайн оплат'");
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.БлокируемыеОбъекты  = "Справочник.НастройкиОнлайнОплат.ФормаПодготовкиПлатежнойСсылки";
		Обработчик.ПроцедураПроверки   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("1983af44-fe67-47f6-8a3a-b03d9692a64d");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСПодсистемой

// Определяет использование нескольких организаций в базе.
//
// Возвращаемое значение:
//  Структура - результат выполнения запроса. См. ОнлайнОплатыПереопределяемый.ИспользуетсяОднаОрганизация.
//
Функция ИспользуетсяОднаОрганизация() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОднаОрганизация",Ложь);
	Результат.Вставить("Организация",Неопределено);
	
	ИнтеграцияПодсистемБИП.ИспользуетсяОднаОрганизация(Результат);
	ОнлайнОплатыПереопределяемый.ИспользуетсяОднаОрганизация(Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет имя прикладного справочника организаций
// Возвращаемое значение:
//  Строка - Имя справочника организаций. См. ОнлайнОплатыПереопределяемый.ИспользуетсяОднаОрганизация.
Функция ИмяПрикладногоСправочникаОрганизации() Экспорт
	
	ИмяПрикладногоСправочника = Неопределено;
	
	ИнтеграцияПодсистемБИП.ИмяПрикладногоСправочникаОрганизации(ИмяПрикладногоСправочника);
	ОнлайнОплатыПереопределяемый.ИмяПрикладногоСправочникаОрганизации(ИмяПрикладногоСправочника);
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

// Возвращает дополнительные настройки элемента онлайн оплаты, определенные при внедрении подсистемы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - дополнительные настройки. 
//    См. ОнлайнОплатыПереопределяемый.ПриОпределенииДополнительныхНастроекОнлайнОплаты.
//
Функция ДополнительныеНастройкиОнлайнОплат() Экспорт

	ДополнительныеНастройки = Новый ТаблицаЗначений;
	ДополнительныеНастройки.Колонки.Добавить("Настройка");
	ДополнительныеНастройки.Колонки.Добавить("Представление");
	ДополнительныеНастройки.Колонки.Добавить("ТипЗначения");
	
	ИнтеграцияПодсистемБИП.ПриОпределенииДополнительныхНастроекОнлайнОплаты(ДополнительныеНастройки);
	ОнлайнОплатыПереопределяемый.ПриОпределенииДополнительныхНастроекОнлайнОплаты(ДополнительныеНастройки);
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

// Возвращает настройки онлайн оплаты по основанию платежа
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, настройки которого нужно получить.
//
// Возвращаемое значение:
//  Структура - настройки онлайн оплаты:
//    * СДоговором - Булево - признак вида настроек. Истина - с договором, Ложь - без договора.
//    * ИдентификаторМагазина - Число - идентификатор магазина в сервисе онлайн оплаты.
//    * ИдентификаторВитрины - Число - идентификатор витрины в сервисе онлайн оплаты.
//    * ОтправкаЧековЧерезСервис - Булево - признак отправки чека через сервис онлайн оплаты.
//
Функция НастройкаОнлайнОплатыОснованияПлатежа(Знач ОснованиеПлатежа) Экспорт
	
	Реквизиты = РеквизитыОснованияПлатежа(ОснованиеПлатежа);
	Возврат НастройкаОнлайнОплатыОрганизации(Реквизиты.Организация);
	
КонецФункции

// Обновляет статус обмена с онлайн оплатой для заданной настройки
//
// Параметры:
//  НастройкаОнлайнОплаты - СправочникСсылка.НастройкиОнлайнОплат - настройка, статус которой нужно обновить.
//  Статус - Структура - новый статус обмена:
//    * ДатаПоследнегоУспешногоОбмена - Дата - дата последней загрузки операций по онлайн оплате.
//    * Организация - ОпределяемыйТип.Организации - ссылка на организацию.
//
Процедура УстановитьСтатусОбменаСОнлайнОплатами(Знач НастройкаОнлайнОплаты, Знач Статус) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Набор = РегистрыСведений.СтатусыОнлайнОплат.СоздатьНаборЗаписей();
		Набор.Отбор.НастройкаОнлайнОплаты.Установить(НастройкаОнлайнОплаты);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыОнлайнОплат");
		ЭлементБлокировки.УстановитьЗначение("НастройкаОнлайнОплаты", НастройкаОнлайнОплаты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Статус);
		Запись.НастройкаОнлайнОплаты = НастройкаОнлайнОплаты;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоОнлайнОплате");
		ПараметрыСообщения.Вставить(
			"ПодробноеПредставлениеОшибки",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаУстановкиСтатусаОбмена", ПараметрыСообщения); 
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымРешением

// Проверяет заполнение обязательных реквизитов организации, в зависимости от варианта 
// с договором или без набор реквизитов меняется.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организации - ссылка на проверяемую организацию.
//  ВариантСДоговором - Булево - Истина - с договором, Ложь - без договора.
//  Отказ - Булево - Истина - обнаружены ошибки, Ложь - ошибок не обнаружено.
//
Процедура ПроверитьОрганизациюНаСоответствиеТребованиямПриПодключенииКСервису(
		Знач Организация,
		Знач ВариантСДоговором,
		Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = РеквизитыОрганизации(Организация);
	
	Если Не ЗначенияРеквизитов.Резидент Тогда // Нерезидентов не подключаем.
		ТекстСообщения = НСтр(
			"ru = 'К сервису ЮKassa могут быть подключены только организации резиденты Российской Федерации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Организация", , Отказ);
		Возврат;
	КонецЕсли;
	
	Если ВариантСДоговором Тогда 
		
		Возврат; // тут проверять нечего, все есть у ЮКассы
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.ИНН) Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Укажите ИНН организации'"),
				,
				"Организация"
				,
				,
				Отказ);
			
		Иначе
			
			ЭтоЮрЛицо = ЗначенияРеквизитов.ЭтоЮрЛицо;
			
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
				ЗначенияРеквизитов.ИНН, 
				ЭтоЮрЛицо, 
				ТекстСообщения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка проверки ИНН организации. %1'"),
						ТекстСообщения),
					,
					"Организация",
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрДлина(ЗначенияРеквизитов.ИНН) = 10 И Не ЗначениеЗаполнено(ЗначенияРеквизитов.КПП) Тогда 
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Укажите КПП организации'"),
				,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.КПП) Тогда
		
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(
					ЗначенияРеквизитов.КПП,
					ТекстСообщения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка проверки КПП организации. %1'"),
						ТекстСообщения),
					,
					"Организация",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значения реквизитов организации, полученные из прикладного решения.
// См. ОнлайнОплатыПереопределяемый.ЗаполнитьРеквизитыОрганизации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, реквизиты которой нужно получить.
//
// Возвращаемое значение:
//  Структура - значения реквизитов:
//    * ИНН - Строка - ИНН организации.
//    * КПП - Строка - КПП организации.
//    * Резидент - Булево - признак того, что организация является резидентом.
//    * ЭтоЮрЛицо - Булево - признак того, что организация является юридическим лицом.
//
Функция РеквизитыОрганизации(Знач Организация) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ИНН", "");
	Данные.Вставить("КПП", "");
	Данные.Вставить("Резидент", Истина);
	Данные.Вставить("ЭтоЮрЛицо", Истина);
	
	ИнтеграцияПодсистемБИП.ЗаполнитьРеквизитыОрганизации(Организация, Данные);
	ОнлайнОплатыПереопределяемый.ЗаполнитьРеквизитыОрганизации(Организация, Данные);
	
	Возврат Данные;
	
КонецФункции

// Возвращает контактную информацию покупателя, указанного в основании платежа.
// См. ОнлайнОплатыПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, контактную информацию которого нужно заполнить.
//
// Возвращаемое значение:
//  Структура - контакты покупателя для отправки чека:
//    * Телефоны - Массив строк - телефоны покупателя.
//    * ЭлектроннаяПочта - Массив строк - адреса электронной почты покупателя.
//
Функция КонтактнаяИнформацияОснованияПлатежа(Знач ОснованиеПлатежа) Экспорт
	
	КонтактнаяИнформация = Новый Структура();
	КонтактнаяИнформация.Вставить("Телефоны", Новый Массив);
	КонтактнаяИнформация.Вставить("ЭлектроннаяПочта", Новый Массив);
	
	ИнтеграцияПодсистемБИП.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(ОснованиеПлатежа, КонтактнаяИнформация);
	ОнлайнОплатыПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(ОснованиеПлатежа, КонтактнаяИнформация);
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований платежа через онлайн оплату.
//
// Возвращаемое значение:
//  Массив - имена (Строка) объектов метаданных оснований платежа.
//
Функция ОснованияПлатежа() Экспорт
	
	ИменаОснованийПлатежа = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииОснованийПлатежа(ИменаОснованийПлатежа);
	ОнлайнОплатыПереопределяемый.ПриОпределенииОснованийПлатежа(ИменаОснованийПлатежа);
	
	Возврат ИменаОснованийПлатежа;
	
КонецФункции

// Проверяет является ли объект основанием платежа через онлайн оплату.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием платежа, иначе Ложь.
//
Функция ЭтоОснованиеПлатежа(Знач Объект) Экспорт
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаОснованийПлатежа = ОснованияПлатежа();
	
	Возврат (ИменаОснованийПлатежа.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

Функция СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем() Экспорт
	
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	Возврат СоздатьПредопределенныеШаблоныСообщений(ЕстьОтправкаПисем, ЕстьОтправкаSMS);
	
КонецФункции

Функция СоздатьПредопределенныеШаблоныСообщений(СоздатьШаблоныПисем, СоздатьШаблоныСМС) Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПредопределенныеШаблоныСообщений(МассивПредопределенныхШаблоновСообщений);
	
	Если Не МассивПредопределенныхШаблоновСообщений.Количество() Тогда 
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	СоответствиеШаблоновОснованиямПлатежа = ШаблоныСообщенийОснованийПлатежа();
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		Если Не Шаблон.Свойство("ТипШаблона") Тогда
			Продолжить;
		ИначеЕсли Врег(Шаблон.ТипШаблона) <> Врег("SMS") И Врег(Шаблон.ТипШаблона) <> Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныПисем И Врег(Шаблон.ТипШаблона) = Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныСМС И Врег(Шаблон.ТипШаблона) = Врег("SMS") Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			СоответствиеШаблоновОснованиямПлатежа);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, Шаблон, Истина);
			
			ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(Шаблон.Наименование, ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		СоответствиеШаблоновОснованиямПлатежа[Шаблон.ТипШаблона].Вставить(
			Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновОснованиямПлатежа(СоответствиеШаблоновОснованиямПлатежа);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

Функция ВсеШаблоныСозданы() Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеШаблоны", Истина);
	Результат.Вставить("Письмо", Истина);
	Результат.Вставить("SMS", Истина);
	
	МассивШаблонов = Новый Массив;
	СоответствиеШаблонов = ШаблоныСообщенийОснованийПлатежа();
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПредопределенныеШаблоныСообщений(МассивПредопределенныхШаблоновСообщений);
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов);
		Если СозданныйШаблон.Пустая() Тогда 
			Результат.ВсеШаблоны = Ложь;
			Результат[Шаблон.ТипШаблона] = Ложь;
		Иначе
			МассивШаблонов.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("МассивШаблонов", МассивШаблонов);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрофилиБезопасности

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Разрешения = Новый Массив;
	
	// Сервис уведомлений.
	ПараметрыСоединения = ОбщиеНастройкиСервиса();
	
	СервисУведомлений = ПараметрыСоединения.СервисУведомлений;
	
	Протокол = ?(СервисУведомлений.ЗащищенноеСоединение = Истина, "HTTPS", "HTTP");
	Адрес    = СервисУведомлений.ИмяСервера;
	Порт     = СервисУведомлений.Порт;
	Описание = НСтр("ru = 'Интеграция с ЮKassa: Заказы.'");
			
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	// Сервис оплаты.
	СервисОплаты = ПараметрыСоединения.СервисОплаты;
	
	Протокол = ?(СервисОплаты.ЗащищенноеСоединение = Истина, "HTTPS", "HTTP");
	Адрес    = СервисОплаты.ИмяСервера;
	Порт     = СервисОплаты.Порт;
	Описание = НСтр("ru = 'Интеграция с ЮKassa: Оплаты.'");
				
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	// Заполнение разрешений.
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.НастройкиОнлайнОплат.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
		Разрешения,
		ВладелецРазрешения,
		Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АдресаСтендов

Функция АдресСтраницыДоступа() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Ошибка",      Неопределено);
	Результат.Вставить("URLСтраницы", Неопределено);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
		
		Результат.URLСтраницы = ХостПредоставленияДоступа()
			+ "/fresh?freshSubscriberCode="
			+ Формат(МодульПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Код, "ЧГ=0");
			
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка = "НеЗаполненыДанныеАутентификации";
		Иначе
			Результат.URLСтраницы = ХостПредоставленияДоступа()
				+ "/box?boxModeLogin="
				+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресНастройкиСтраницыОплаты(Знач ИдентификаторМагазина) Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Ошибка",      Неопределено);
	Результат.Вставить("URLСтраницы", Неопределено);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
		
		Результат.URLСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1/shops/%2?freshSubscriberCode=%3", 
			ХостПредоставленияДоступа(),
			Формат(ИдентификаторМагазина, "ЧГ=0"),
			Формат(МодульПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Код, "ЧГ=0"));
			
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка = "НеЗаполненыДанныеАутентификации";
		Иначе
			Результат.URLСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1/shops/%2?boxModeLogin=%3", 
				ХостПредоставленияДоступа(),
				Формат(ИдентификаторМагазина, "ЧГ=0"),
				КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL));
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

// Возвращает признак выполнения настройки по указанной организации.
// Параметры:
//  Организация - Ссылка на элемент справочника Организации настройку которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - Ложь - основание платежа не изменено, Истина - основание платежа изменено.
//
Функция НастройкаИнтеграцииВыполнена(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение НСтр("ru = 'Не передана организация.'");
	КонецЕсли;
	
	НастройкиОнлайнОплаты = НастройкаОнлайнОплатыОрганизации(Организация);
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(НастройкиОнлайнОплаты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОнлайнОплаты.ИдентификаторМагазина)
		И ЗначениеЗаполнено(НастройкиОнлайнОплаты.ИдентификаторВитрины) Тогда
		Результат = Истина;
	Иначе
		Результат = ИнтеграцияПоНастройкеВыполнена(НастройкиОнлайнОплаты.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак выполнения настройки по указанной онлайн оплате.
//
// Параметры:
//  НастройкаОнлайнОплаты - Ссылка на элемент справочника НастройкиОнлайнОплат настройку которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - Ложь - основание платежа не изменено, Истина - основание платежа изменено.
//
Функция ИнтеграцияПоНастройкеВыполнена(НастройкаОнлайнОплаты) Экспорт
	
	ЗначениеРеквизитов = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОнлайнОплаты, "СДоговором, ИдентификаторМагазина");
	
	Если Не ЗначениеРеквизитов.СДоговором Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыПолученияСтатуса = ОписаниеПараметровПолученияСтатусаПодключенияМагазина();
	
	ПараметрыПолученияСтатуса.ИдентификаторМагазина = ЗначениеРеквизитов.ИдентификаторМагазина;
	
	РезультатПроверкиСтатуса = СтатусПодключенияМагазина(ПараметрыПолученияСтатуса);
	
	Если РезультатПроверкиСтатуса.СтатусПодключения = СтатусыПодключенияМагазина().Разрешено Тогда
		Результат = Истина;
	ИначеЕсли РезультатПроверкиСтатуса.СтатусПодключения = СтатусыПодключенияМагазина().Запрещено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак изменения основания платежа с момента последнего обновления данных в сервисе.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ОснованиеПлатежа - Произвольный - основание платежа, изменение которого нужно проверить.
//    * ДанныеОснованияПлатежа - Структура - данные основания платежа, полученные из прикладного решения.
//        Если не заданы, то будет запрошены. См. ОнлайнОплатыСлужебный.ДанныеОснованияПлатежа.
//    * ДанныеОснованияПлатежаВСервисе - Структура - данные основания платежа, полученные из сервиса.
//        Если не заданы, то будет запрошены. См. ОнлайнОплатыСлужебный.ДанныеОснованияПлатежаВСервисе.
//    * НастройкаОнлайнОплаты - Структура - основание платежа, изменение которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - Ложь - основание платежа не изменено, Истина - основание платежа изменено.
//
Функция ОснованиеПлатежаИзменено(Знач ВходящиеПараметры) Экспорт
	
	ДанныеОснования = Неопределено;
	ДанныеВСервисе = Неопределено;
	
	Если Не ВходящиеПараметры.Свойство("ДанныеОснованияПлатежа", ДанныеОснования) Тогда
		ДанныеОснования = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	КонецЕсли;
	Если Не ВходящиеПараметры.Свойство("ДанныеОснованияПлатежаВСервисе", ДанныеВСервисе) Тогда
		ДанныеВСервисе = ДанныеОснованияПлатежаВСервисе(ВходящиеПараметры);
	КонецЕсли;
	
	ДанныеДляСервиса = ДанныеОснованияПлатежаДляСервиса(ДанныеОснования);
	
	Возврат ДанныеДляСервиса.checksum <> ДанныеВСервисе.ХешСумма;
	
КонецФункции

// Обновляет данные основания платежа в сервисе и возвращает ссылку на страницу оплаты.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ОснованиеПлатежа - Произвольный - основание платежа, для которого нужно получить ссылку на оплату.
//    * КонтактныеДанныеЧека - Строка - контакты покупателя для отправки чека (Необязательный).
//
// Возвращаемое значение:
//  Структура - содержит свойства:
//   * ПлатежнаяСсылка   - Строка - ссылка на страницу оплаты.
//   * ОтсутствуетДоступ - Булево - признак отсутствия доступа к онлайн оплате у организации,
//       для которой формируется платежная ссылка. Если значение Истина, 
//       пользователю необходимо выдать доступ к онлайн оплате, 
//       перейдя на страницу по адресу ОнлайнОплаты.АдресСтраницыПредоставленияДоступа().
//
Функция ПлатежнаяСсылка(Знач ВходящиеПараметры) Экспорт 
	
	// Инициализация команды
	ИмяКоманды = "ОбновитьДанныеЗаказа";
	
	// Параметры выполнения команды
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	СтруктураПараметровОнлайнОплаты = ПараметрыОнлайнОплаты(ИмяКоманды, ВходящиеПараметры, Отказ);
	
	Если Отказ Тогда
		
		Результат = Новый Структура;
		
		Результат.Вставить("ПлатежнаяСсылка",   "");
		Результат.Вставить("ОтсутствуетДоступ", Ложь);
		Результат.Вставить("Статус",            "");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ИспользоватьНовыйПротокол = СтруктураПараметровОнлайнОплаты.ИспользоватьНовыйПротокол;
	
	Если ИспользоватьНовыйПротокол Тогда
		Возврат ПлатежнаяСсылкаНовыйПротокол(ПараметрыСервиса, СтруктураПараметровОнлайнОплаты, ВходящиеПараметры, Отказ);
	Иначе
		Возврат ПлатежнаяСсылкаСтарыйПротокол(ПараметрыСервиса, СтруктураПараметровОнлайнОплаты, ВходящиеПараметры, Отказ);
	КонецЕсли;
	
КонецФункции

// Возвращает настройки онлайн оплаты для работы по схеме без договора.
//
// Возвращаемое значение:
//  Структура - настройки:
//    * ИдентификаторМагазина - Число - идентификатор магазина.
//    * ИдентификаторВитрины - Число - идентификатор витрины.
//    * ЕстьОшибки - Булево - признак наличия ошибок при получении настроек.
//
Функция НастройкиОнлайнОплатыБезДоговора() Экспорт
	
	Настройки = Новый Структура("ИдентификаторМагазина, ИдентификаторВитрины, ЕстьОшибки");
	
	Отказ = Ложь;
	ИмяКоманды = "ПолучитьНастройки";
	РезультатКоманды = Неопределено;
	
	ВыполнитьКомандуСервиса(ИмяКоманды, Неопределено, Ложь, РезультатКоманды, Отказ);
	
	РезультатаРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатаРазбора, Отказ);
	
	Если Не Отказ Тогда 
		ЗаполнитьЗначенияСвойств(Настройки, РезультатаРазбора);
	КонецЕсли;
	
	Настройки.ЕстьОшибки = Отказ;
	
	ВывестиОшибкиПользователю();
	
	Возврат Настройки;
	
КонецФункции

// Возвращает данные основания платежа в сервисе.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ОснованиеПлатежа - Произвольный - основание платежа, данные которого нужно получить.
//
// Возвращаемое значение:
//  Структура - данные основания платежа в сервисе:
//    * КонтактныеДанныеЭлектронногоЧека - Строка - контакты покупателя для отправки чека.
//    * ПлатежнаяСсылка - Строка - ссылка на страницу оплаты.
//    * ХешСумма - Строка - хеш сумма данных основания платежа.
//    * Статус - Строка - "Новый" - данные в сервисе отсутствуют, "НеОплачен" - не оплачен, "Оплачен" - оплачен.
//
Функция ДанныеОснованияПлатежаВСервисе(Знач ВходящиеПараметры) Экспорт
	
	// Инициализация выходных данных
	Результат = Новый Структура;
	
	Результат.Вставить("КонтактныеДанныеЭлектронногоЧека");
	Результат.Вставить("ПлатежнаяСсылка");
	Результат.Вставить("ХешСумма");
	Результат.Вставить("Статус", "Новый");
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	
	// Параметры выполнения команды
	Отказ = Ложь;
	ИмяКоманды = "ПолучитьДанныеПоЗаказу";
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	ПараметрыОнлайнОплаты = ПараметрыОнлайнОплаты(ИмяКоманды, ВходящиеПараметры, Отказ);
	ИспользоватьНовыйПротокол = ПараметрыОнлайнОплаты.ИспользоватьНовыйПротокол;
	
	Если ИспользоватьНовыйПротокол Тогда
		Возврат ДанныеОснованияПлатежаВСервисеНовыйПротокол(
			ВходящиеПараметры,
			Результат,
			ПараметрыОнлайнОплаты,
			ПараметрыСервиса,
			Отказ);
	Иначе
		Возврат ДанныеОснованияПлатежаВСервисеСтарыйПротокол(
			ВходящиеПараметры,
			Результат,
			ПараметрыОнлайнОплаты,
			ПараметрыСервиса,
			Отказ);
	КонецЕсли;
	
КонецФункции

// Возвращает операции по онлайн оплатам по отбору.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ДатаНачала - Дата - начало периода запроса операций.
//    * ДатаОкончания - Дата - окончание периода запроса операций.
//    * Организация - ОпределяемыйТип.Организация, Неопределено - организация, по которой нужно получить операции.
//        Если Неопределено, то по всем.
//    * СДоговором - Булево, Неопределено - признак отбора по операциям с договором и без.
//        Если Неопределено, то по всем. Если задано свойство Организация, то игнорируется.
//
// Возвращаемое значение:
//  Массив структур - см. ОнлайнОплаты.ОперацииОнлайнОплат.
//
Функция ОперацииОнлайнОплат(Знач ВходящиеПараметры) Экспорт
	
	КоличествоПовторяющихсяДанных = 0;
	
	// Инициализация команды
	ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате";
	
	// Инициализация выходных данных
	Результат = Новый Массив;
	
	// Параметры выполнения команды
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПолученияОпераций = ПараметрыПолученияОперацийПоОнлайнОплатам(ВходящиеПараметры);
	
	Если ПараметрыПолученияОпераций.Количество() = 0 Тогда
		ОтработатьОшибкуОтсутствияНастроек(ВходящиеПараметры, ИмяКоманды, Отказ);
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Для каждого ПараметрыПолучения Из ПараметрыПолученияОпераций Цикл
		
		КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
		
		Отказ = Ложь;
		
		СтруктураПараметровОнлайнОплаты = ПараметрыОнлайнОплаты(ИмяКоманды, ПараметрыПолучения, Отказ);
		
		Если РазделениеВключено Тогда
			ДанныеАутентификации = ДанныеАутентификацииИПП();
			
			Если ДанныеАутентификации = Неопределено Тогда
				ПараметрыСообщения = Новый Структура;
				ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
				ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения, Отказ);
			Иначе
				ПараметрыСервиса.ДанныеАутентификации = СтрокаАутентификации(ДанныеАутентификации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьНовыйПротокол = СтруктураПараметровОнлайнОплаты.ИспользоватьНовыйПротокол;
		
		ПараметрыКоманды = ПараметрыКомандыОперацииПоОнлайнОплатам(
			ПараметрыСервиса,
			ПараметрыПолучения,
			ИспользоватьНовыйПротокол,
			Отказ);
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		Операции = Новый Структура();
		
		Операции.Вставить("ДатаОтвета",              Дата(1,1,1));
		Операции.Вставить("ДатаНачала",              ПараметрыКоманды.ДатаНачала);
		Операции.Вставить("ДатаОкончания",           ПараметрыКоманды.ДатаОкончания);
		Операции.Вставить("Организация",             ПараметрыКоманды.Организация);
		Операции.Вставить("НастройкаОнлайнОплаты",   ПараметрыКоманды.НастройкаОнлайнОплаты);
		Операции.Вставить("СДоговором",              ПараметрыПолучения.СДоговором);
		Операции.Вставить("ОперацииМассивСтруктур",  Новый Массив);
		Операции.Вставить("ОперацииТекстовыйФормат", "");
		Операции.Вставить("ОтсутствуетДоступ",       Ложь);
		
		Если ИспользоватьНовыйПротокол Тогда
			РезультатРазбора = ОперацииОнлайнОплатНовыйПротокол(
				ПараметрыСервиса,
				ПараметрыПолучения,
				ПараметрыКоманды,
				Операции,
				Отказ);
		Иначе
			РезультатРазбора = ОперацииОнлайнОплатСтарыйПротокол(
				ПараметрыСервиса,
				ПараметрыПолучения,
				ПараметрыКоманды,
				Операции,
				Отказ);
		КонецЕсли;
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обновление настроек
		Если РезультатРазбора.Свойство("Настройки")
			И РезультатРазбора.Настройки.Количество() Тогда 
			
			Если Не ПараметрыПолучения.ИдентификаторМагазина = РезультатРазбора.Настройки.ИдентификаторМагазина
				Или ПараметрыПолучения.ИдентификаторВитрины = РезультатРазбора.Настройки.ИдентификаторВитрины Тогда
				ОбновитьНастройкуОнлайнОплаты(ПараметрыКоманды.НастройкаОнлайнОплаты, РезультатРазбора.Настройки, Отказ);
			КонецЕсли;
			
		КонецЕсли;

		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обработка результатов
		ОперацииТекстовыйФормат = ОперацииВТекстовомФормате(РезультатРазбора.МассивОпераций, ПараметрыКоманды);
		
		Операции.ДатаОтвета              = РезультатРазбора.ДатаОтвета;
		Операции.ОперацииМассивСтруктур  = РезультатРазбора.МассивОпераций;
		Операции.ОперацииТекстовыйФормат = ОперацииТекстовыйФормат;
		
		Результат.Добавить(Операции);
		
	КонецЦикла;
	
	ВывестиОшибкиПользователю();
	
	Возврат Результат;

КонецФункции

// Возвращает данные эквайера по умолчанию.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ДатаНачала - Дата - начало периода запроса операций.
//
// Возвращаемое значение:
//  Структура - данные эквайера по умолчанию:
//    * ПолноеНаименование - Строка - Полное наименование эквайера.
//    * Наименование - Строка - Наименование эквайера.
//    * ИНН - Строка - ИНН эквайера.
//    * КПП - Строка - КПП эквайера.
//    * ОГРН - Строка - ОГРН эквайера.
//    * ОКВЭД - Строка - ОКВЭД эквайера.
//    * ОКПО - Строка - ОКПО эквайера.
//    * СтатусОтвета - Статус ответа сервиса
//
Функция ДанныеЭквайераПоУмолчанию(ВходящиеПараметры) Экспорт
	
	// Инициализация команды и параметров
	ИмяКоманды = "ДанныеЭквайера";
	
	Отказ = Ложь;
	
	Результат = ОписаниеРезультатаДанныеЭквайера();
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыКоманды = ПараметрыКомандыПолученияДанныхЭквайера(ПараметрыСервиса, ВходящиеПараметры);
	
	// Выполнение команды
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Возврат Результат; 
	
КонецФункции

// Возвращает статус подключения магазина.
//
// Параметры:
//  ВходящиеПараметры - Структура - параметры метода:
//    * ИдентификаторМагазина - Число - идентификатор магазина.
//    * ИдентификаторОперации - Строка - идентификатор выполняемой операции..
//
// Возвращаемое значение:
//  Структура - данные по настройке подключения:
//    * ИдентификаторОперации - Строка - идентификатор выполняемой операции.
//    * СтатусОперацииПроверки - Строка -  статус операции проверки.
//    * СтатусПодключения - Строка - статус подключения магазина.
// 
Функция СтатусПодключенияМагазина(Знач ВходящиеПараметры) Экспорт
	
	ИдентификаторМагазина = ВходящиеПараметры.ИдентификаторМагазина;
	ИдентификаторОперации = ВходящиеПараметры.ИдентификаторОперации;
	
	// Инициализация команды
	ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса";
	
	Отказ = Ложь;
	
	ПараметрыСервиса = ПараметрыСервиса(ИмяКоманды, Отказ);
	ПараметрыКоманды = ПараметрыКомандыПолученияСтатусаРазрешения(
		ПараметрыСервиса, 
		ИдентификаторМагазина, 
		ИдентификаторОперации, 
		Отказ);
	
	Результат = ОписаниеРезультатаСтатусПодключенияМагазина();
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	РазмерПаузыВСекундах     = 1;
	РазделениеВключено       = ОбщегоНазначения.РазделениеВключено();
	ВремяНачалаПроверки      = ТекущаяДатаСеанса();
	МаксимумСекундВыполнения = 60;
	
	Пока Истина Цикл

		Если РазделениеВключено И РазмерПаузыВСекундах > 1 Тогда
			ПараметрыКоманды.ДанныеАутентификации = СтрокаАутентификации(ДанныеАутентификацииИПП());
		КонецЕсли;
		
		РезультатКоманды = Неопределено;
		ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);

		Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Ошибка Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось установить статус подключения магазина'");
		КонецЕсли;
		
		Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыКоманды.ИдентификаторОперации = Результат.ИдентификаторОперации;
		
		ПрошлоСекунд = ТекущаяДатаСеанса() - ВремяНачалаПроверки;
		
		Если ПрошлоСекунд >= МаксимумСекундВыполнения Тогда
			Прервать;
		КонецЕсли;
		
		ИнтернетПоддержкаПользователей.Пауза(РазмерПаузыВСекундах);
		
		РазмерПаузыВСекундах = ?(РазмерПаузыВСекундах = 16, 16, РазмерПаузыВСекундах * 2);
		
	КонецЦикла;
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.СтатусОперацииПроверки = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено Тогда
		Результат.ИдентификаторОперации = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисомВФоне

// Запускает выполнение метода сервиса в фоновом режиме.
//
// Параметры:
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - результат длительной операции. См. ДлительныеОперации.ВыполнитьФункцию.
Функция ИнтеграцияПоНастройкеВыполненаВФоне(Знач ВходящиеПараметры, Знач ИдентификаторФормы) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Проверка выполнения интеграции по настройке.'");
		
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнОплатыСлужебный.ИнтеграцияПоНастройкеВыполнена",
		ВходящиеПараметры);
		
	Возврат Результат;
	
КонецФункции

// Запускает выполнение метода сервиса в фоновом режиме.
//
// Параметры:
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, 
//    во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - результат длительной операции. См. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ВыполнитьСтатусПодключенияМагазинаВФоне(Знач ВходящиеПараметры, Знач ИдентификаторФормы) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Получение статуса разрешения на использование сервиса.'");
	
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнОплатыСлужебный.СтатусПодключенияМагазина",
		ВходящиеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Запускает выполнение метода сервиса в фоновом режиме.
//
// Параметры:
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - результат длительной операции. См. ДлительныеОперации.ВыполнитьФункцию.
Функция ВыполнитьПолучитьНастройкиБезДоговораВФоне(Знач ИдентификаторФормы) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Получение статуса разрешения на использование сервиса.'");
		
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнОплатыСлужебный.НастройкиОнлайнОплатыБезДоговора");
		
	Возврат Результат;
	
КонецФункции

// Запускает выполнение метода сервиса в фоновом режиме.
//
// Параметры:
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - результат длительной операции. См. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ДанныеОснованияПлатежаВСервисеВФоне(Знач ВходящиеПараметры, Знач ИдентификаторФормы) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Получение данных основания платежа в сервисе ЮKassa.'");
		
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнОплатыСлужебный.ДанныеОснованияПлатежаВСервисе",
		ВходящиеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Запускает выполнение метода сервиса в фоновом режиме.
//
// Параметры:
//  ВходящиеПараметры - Структура - входящие параметры соответствующего метода.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    во временное хранилище которой будет помещен результат метода.
//
// Возвращаемое значение:
//  Структура - результат длительной операции. См. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ФормированиеПлатежнойСсылкиВСервисеВФоне(Знач ВходящиеПараметры, Знач ИдентификаторФормы) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Получение ссылки для оплаты через ЮKassa.'");
		
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнОплатыСлужебный.ПлатежнаяСсылка",
		ВходящиеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПодсистемой

// Возвращает настройки онлайн оплаты организации
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, настройки которой нужно получить.
//
// Возвращаемое значение:
//  Структура - настройки онлайн оплаты:
//    * Ссылка - СправочникСсылка.НастройкиОнлайнОплат - ссылка на настройку.
//    * СДоговором - Булево - признак вида настроек. Истина - с договором, Ложь - без договора.
//    * ИдентификаторМагазина - Число - идентификатор магазина в сервисе онлайн оплаты.
//    * ИдентификаторВитрины - Число - идентификатор витрины в сервисе онлайн оплаты.
//    * ОтправкаЧековЧерезСервис - Булево - признак отправки чека через онлайн оплату.
//
Функция НастройкаОнлайнОплатыОрганизации(Знач Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиОнлайнОплат.Ссылка КАК Ссылка,
	|	НастройкиОнлайнОплат.СДоговором КАК СДоговором,
	|	НастройкиОнлайнОплат.ИдентификаторМагазина КАК ИдентификаторМагазина,
	|	НастройкиОнлайнОплат.ИдентификаторВитрины КАК ИдентификаторВитрины,
	|	НастройкиОнлайнОплат.ОтправкаЧековЧерезСервис КАК ОтправкаЧековЧерезСервис
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат КАК НастройкиОнлайнОплат
	|ГДЕ
	|	НастройкиОнлайнОплат.Организация = &Организация
	|	И НЕ НастройкиОнлайнОплат.Недействительна
	|	И НЕ НастройкиОнлайнОплат.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Настройки = Новый Структура;
	Настройки.Вставить("Ссылка");
	Настройки.Вставить("СДоговором");
	Настройки.Вставить("ИдентификаторМагазина");
	Настройки.Вставить("ИдентификаторВитрины");
	Настройки.Вставить("ОтправкаЧековЧерезСервис");
	
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает ссылку на справочник Валюты
//
// Параметры:
//  КодВалютыОнлайнОплаты - Строка - цифровой код валюты, ссылку на которую нужно получить.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - ссылка на валюту.
//
Функция НайтиВалютуПоЦифровомуКоду(КодВалютыОнлайнОплаты)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		Возврат Неопределено;
	ИначеЕсли КодВалютыОнлайнОплаты = 10643 ИЛИ КодВалютыОнлайнОплаты = Неопределено Тогда
		Возврат Справочники["Валюты"].НайтиПоКоду("643");
	Иначе
		Возврат Справочники["Валюты"].НайтиПоКоду(КодВалютыОнлайнОплаты);
	КонецЕсли;

КонецФункции

// Возвращает ссылку на справочник Валюты
//
// Параметры:
//  КодВалютыОнлайнОплаты - Строка - цифровой код валюты, ссылку на которую нужно получить.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - ссылка на валюту.
//
Функция НайтиВалютуПоСимвольномуКоду(КодВалютыОнлайнОплаты)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		Возврат Неопределено;
	ИначеЕсли КодВалютыОнлайнОплаты = 10643 ИЛИ КодВалютыОнлайнОплаты = Неопределено Тогда
		Возврат Справочники["Валюты"].НайтиПоНаименованию("RUB");
	Иначе
		Возврат Справочники["Валюты"].НайтиПоНаименованию(КодВалютыОнлайнОплаты);
	КонецЕсли;
	
КонецФункции

// Возвращает настройки учета заданного элемента
//
// Параметры:
//  Ссылка - Ссылка на  элемент справочника НастройкиОнлайнОплат, аналитики учета которого нужно получить.
//
// Возвращаемое значение:
//  Структура - Результат выполнения:
//   * Ключ - Строка, идентификатор настройки учета.
//   * Значение - ЛюбаяСсылка, Булево, Строка, Дата, Число, содержит в себе значение настройки.
//
Функция АналитикиУчета(НастройкиОнлайнОплаты) Экспорт
	
	ДополнительныеНастройки = ДополнительныеНастройкиОнлайнОплат();

	АналитикиУчетаСтруктура= Новый Структура;
	
	Для каждого СтрокаНастроек Из ДополнительныеНастройки Цикл
		АналитикиУчетаСтруктура.Вставить(СтрокаНастроек.Настройка, СтрокаНастроек.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкиОнлайнОплаты", НастройкиОнлайнОплаты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеНастройки.Настройка КАК Настройка,
	|	ДополнительныеНастройки.Значение КАК Значение
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат.ДополнительныеНастройки КАК ДополнительныеНастройки
	|ГДЕ
	|	ДополнительныеНастройки.Ссылка = &НастройкиОнлайнОплаты";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат АналитикиУчетаСтруктура;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		АналитикиУчетаСтруктура.Вставить(Выборка.Настройка, Выборка.Значение);
	КонецЦикла;
	
	Возврат АналитикиУчетаСтруктура;
	
КонецФункции

// Возвращает настройки учета заданного элемента
//
// Параметры:
//  НастройкаСсылка - Ссылка на  элемент справочника НастройкиОнлайнОплат, значения которого нужно обновить.
//  ЗначенияРеквизитов - Структура, содержит значения свойств подлежащих обновлению.
//
Процедура ОбновитьНастройкуОнлайнОплаты(НастройкаСсылка, ЗначенияРеквизитов, Отказ)
	
	Если Не ЕстьПравоИзмененияНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиОнлайнОплат");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НастройкаСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НастройкаОбъект, ЗначенияРеквизитов);
		НастройкаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", "ЗагрузитьОперацииПоОнлайнОплате");
		ПараметрыСообщения.Вставить(
			"ПодробноеПредставлениеОшибки",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьОшибку("ОшибкаОбновленияНастройкиПриЗагрузкеОпераций", ПараметрыСообщения, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает право доступа на изменение элемента справочника НастройкиОнлайнОплат.
//
// Возвращаемое значение:
//  Булево - признак права на изменение.
Функция ЕстьПравоИзмененияНастроек() Экспорт
	
	Результат = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОнлайнОплат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПрикладнымРешением

// Возвращает имена реквизитов основания платежа, соответствующие общепринятым.
//
// Параметры:
//  ОснованиеПлатежа - Ссылка - основание платежа, для которого нужно получить имена реквизитов.
//
// Возвращаемое значение:
//  Структура - имена реквизитов прикладного решения, соответствующие общепринятым:
//    * Ключ - Строка - имя общепринятого реквизита.
//    * Значение - Строка - имя реквизита в прикладном решении.
//
Функция ИменаРеквизитовОснованияПлатежа(Знач ОснованиеПлатежа)
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Организация", "Организация");
	
	СоответствиеРеквизитов = Новый Соответствие;
	ИнтеграцияПодсистемБИП.СоответствиеРеквизитовОснованийПлатежа(СоответствиеРеквизитов);
	ОнлайнОплатыПереопределяемый.СоответствиеРеквизитовОснованийПлатежа(СоответствиеРеквизитов);
	
	ПолноеИмя = ОснованиеПлатежа.Метаданные().ПолноеИмя();
	
	Для каждого Имя Из ИменаРеквизитов Цикл
		
		ОбщепринятоеИмяРеквизита = Имя.Ключ;
		ИмяРеквизитаВПрикладномРешении = СоответствиеРеквизитов[ПолноеИмя + "." + ОбщепринятоеИмяРеквизита];
		
		Если ЗначениеЗаполнено(ИмяРеквизитаВПрикладномРешении) Тогда
			Имя.Значение = ИмяРеквизитаВПрикладномРешении;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает значения реквизитов основания платежа, полученные из прикладного решения.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, значения реквизитов которого нужно получить.
//
// Возвращаемое значение:
//  Структура - значения реквизитов:
//    * Организация - ОпределяемыйТип.Организация - организация основания платежа.
Функция РеквизитыОснованияПлатежа(Знач ОснованиеПлатежа)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Организация");
	
	ИменаРеквизитов = ИменаРеквизитовОснованияПлатежа(ОснованиеПлатежа);
	
	Реквизиты.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, ИменаРеквизитов.Организация);
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьКонстантуПредопределенныеШаблоныСообщений(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ПредопределенныеШаблоныСообщенийОнлайнОплат");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщенийОнлайнОплат.Получить().Получить();
		
		Если СоответствиеШаблонов <> Неопределено 
			И СоответствиеШаблонов.Получить("Письмо") = Неопределено Тогда
			
			НовоеСоответствиеШаблонов = Новый Соответствие;
			НовоеСоответствиеШаблонов.Вставить("Письмо", Новый Соответствие);
			НовоеСоответствиеШаблонов.Вставить("SMS", Новый Соответствие);
			
			Для Каждого ЭлементСоответствия Из СоответствиеШаблонов Цикл
				
				НовоеСоответствиеШаблонов["Письмо"].Вставить(
				ЭлементСоответствия.Ключ,
				ЭлементСоответствия.Значение);
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Константы.ПредопределенныеШаблоныСообщенийОнлайнОплат.Установить(
				Новый ХранилищеЗначения(НовоеСоответствиеШаблонов));
			
			ПредопределенныеШаблоны = Новый Массив;
			ШаблоныДляОбновления = Новый Массив;
			ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоны);
			
			Для Каждого Шаблон Из ПредопределенныеШаблоны Цикл 
				
				ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон, НовоеСоответствиеШаблонов);
				
				Если Не ШаблонСообщенийСсылка.Пустая() Тогда
					ШаблоныДляОбновления.Добавить(ШаблонСообщенийСсылка);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновитьПараметрыПредопределенныхШаблонов(ШаблоныДляОбновления);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить обновление предопределенных шаблонов сообщений:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПараметрыПредопределенныхШаблонов(ШаблоныДляОбновления)
	
	Попытка
	
		ЗапросШаблонов = Новый Запрос;
		ЗапросШаблонов.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка,
		|	ИСТИНА КАК НеобходимоИзменитьТекстШаблонаСМС,
		|	ЛОЖЬ КАК НеобходимоИзменитьТекстШаблонаПисьма,
		|	ЛОЖЬ КАК НеобходимоИзменитьТекстШаблонаПисьмаHTML
		|ПОМЕСТИТЬ табШаблоны
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.Ссылка В(&ШаблоныДляОбновления)
		|	И ШаблоныСообщений.ТекстШаблонаSMS ПОДОБНО &ЗаменяемыйПараметр
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.Ссылка В(&ШаблоныДляОбновления)
		|	И ШаблоныСообщений.ТекстШаблонаПисьма ПОДОБНО &ЗаменяемыйПараметр
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.Ссылка В(&ШаблоныДляОбновления)
		|	И ШаблоныСообщений.ТекстШаблонаПисьмаHTML ПОДОБНО &ЗаменяемыйПараметр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	табШаблоны.Ссылка КАК Ссылка,
		|	МАКСИМУМ(табШаблоны.НеобходимоИзменитьТекстШаблонаСМС) КАК НеобходимоИзменитьТекстШаблонаСМС,
		|	МАКСИМУМ(табШаблоны.НеобходимоИзменитьТекстШаблонаПисьма) КАК НеобходимоИзменитьТекстШаблонаПисьма,
		|	МАКСИМУМ(табШаблоны.НеобходимоИзменитьТекстШаблонаПисьмаHTML) КАК НеобходимоИзменитьТекстШаблонаПисьмаHTML
		|ИЗ
		|	табШаблоны КАК табШаблоны
		|
		|СГРУППИРОВАТЬ ПО
		|	табШаблоны.Ссылка";
		
		ЗапросШаблонов.УстановитьПараметр("ЗаменяемыйПараметр", "%КнопкаОплатитьЧерезЯндексКассу]%");
		ЗапросШаблонов.УстановитьПараметр("ШаблоныДляОбновления", ШаблоныДляОбновления);
		
		ВыборкаШаблонов = ЗапросШаблонов.Выполнить().Выбрать();
		
		Пока ВыборкаШаблонов.Следующий() Цикл
			
			ШаблонСообщенияОбъект = ВыборкаШаблонов.Ссылка.ПолучитьОбъект();
			
			Если ВыборкаШаблонов.НеобходимоИзменитьТекстШаблонаСМС Тогда
				ШаблонСообщенияОбъект.ТекстШаблонаSMS= СтрЗаменить(
					ШаблонСообщенияОбъект.ТекстШаблонаSMS,
					"КнопкаОплатитьЧерезЯндексКассу]",
					"ПредставлениеСсылки]");
			КонецЕсли;
				
			Если ВыборкаШаблонов.НеобходимоИзменитьТекстШаблонаПисьма Тогда
				ШаблонСообщенияОбъект.ТекстШаблонаПисьма = СтрЗаменить(
					ШаблонСообщенияОбъект.ТекстШаблонаПисьма,
					"КнопкаОплатитьЧерезЯндексКассу]",
					"ПредставлениеСсылки]");
			КонецЕсли;
			
			Если ВыборкаШаблонов.НеобходимоИзменитьТекстШаблонаПисьмаHTML Тогда
				ШаблонСообщенияОбъект.ТекстШаблонаПисьмаHTML = СтрЗаменить(
					ШаблонСообщенияОбъект.ТекстШаблонаПисьмаHTML,
					"КнопкаОплатитьЧерезЯндексКассу]",
					"ПредставлениеСсылки]");
			КонецЕсли;
				
			ШаблонСообщенияОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить шаблоны сообщений:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

Функция ОбщиеНастройкиСервиса(ИспользоватьНовыйПротокол = Истина)

	ОбщиеНастройки = Новый Структура();
	
	// Сервис который дает информацию об операциях по ЮКассе.
	СервисУведомлений = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, Таймаут, ВерсияФормата, ЗащищенноеСоединение");
	
	СервисУведомлений.Адрес = ХостСервисаИнтеграцииСОнлайнОплатами(ИспользоватьНовыйПротокол);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисУведомлений.Адрес);
	СервисУведомлений.Протокол      = СтруктураURI.Схема;
	СервисУведомлений.ИмяСервера    = СтруктураURI.Хост;
	СервисУведомлений.Порт          = СтруктураURI.Порт;
	СервисУведомлений.Таймаут       = 20;
	СервисУведомлений.ВерсияФормата = "1.0.0";
	СервисУведомлений.ЗащищенноеСоединение = СервисУведомлений.Протокол = "https";
	
	ОбщиеНастройки.Вставить("СервисУведомлений", СервисУведомлений);
	
	// Сервис который отвечает за отображение страницы оплаты через ЮКассу в браузере.
	СервисОплаты = Новый Структура("Адрес, Протокол, ИмяСервера, Порт, ПутьНаСервере, Таймаут, ЗащищенноеСоединение");
	
	СервисОплаты.Адрес = "https://money.yandex.ru/eshop.xml";
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СервисОплаты.Адрес);
	СервисОплаты.Протокол           = СтруктураURI.Схема;
	СервисОплаты.ИмяСервера         = СтруктураURI.Хост; 
	СервисОплаты.Порт               = СтруктураURI.Порт;
	СервисОплаты.ПутьНаСервере      = СтруктураURI.ПутьНаСервере;
	СервисОплаты.Таймаут            = 20;
	СервисОплаты.ЗащищенноеСоединение = СервисОплаты.Протокол = "https";
	
	ОбщиеНастройки.Вставить("СервисОплаты", СервисОплаты);
	
	Возврат ОбщиеНастройки;
	
КонецФункции

Функция НастройкиСервиса(ИспользоватьНовыйПротокол)

	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, Порт, Прокси,
		|ЗащищенноеСоединение, Таймаут, ВерсияФормата");
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыСоединения, 
		ОбщиеНастройкиСервиса(ИспользоватьНовыйПротокол).СервисУведомлений);
		
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Возврат ПараметрыСоединения;

КонецФункции

Функция ДанныеОснованияПлатежа(Знач ОснованиеПлатежа)
	
	БанковскийСчет = Новый Структура;
	
	БанковскийСчет.Вставить("БанкБИК");
	БанковскийСчет.Вставить("БанкНаименование");
	БанковскийСчет.Вставить("БанкКоррСчет");
	БанковскийСчет.Вставить("НомерСчета");
	
	Продавец = Новый Структура;
	
	Продавец.Вставить("УчетнаяПолитика");
	Продавец.Вставить("ИНН");
	Продавец.Вставить("КПП");
	Продавец.Вставить("Наименование");
	Продавец.Вставить("Телефон");
	Продавец.Вставить("ЭлектроннаяПочта");
	Продавец.Вставить("ФактическийАдрес");
	Продавец.Вставить("ЮридическийАдрес");
	
	Покупатель = Новый Структура;
	
	Покупатель.Вставить("Идентификатор",        "");
	Покупатель.Вставить("Наименование",         "");
	Покупатель.Вставить("КонтактныеДанныеЧека", "");
	Покупатель.Вставить("ИНН",                  "");
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки");
	ТаблицаНоменклатуры.Колонки.Добавить("Наименование");
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолное");
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
	ТаблицаНоменклатуры.Колонки.Добавить("Количество");
	ТаблицаНоменклатуры.Колонки.Добавить("Цена");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДСКод");
	ТаблицаНоменклатуры.Колонки.Добавить("Валюта");
	ТаблицаНоменклатуры.Колонки.Добавить("Артикул");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("ВидНоменклатуры");
	ТаблицаНоменклатуры.Колонки.Добавить("Родитель");
	ТаблицаНоменклатуры.Колонки.Добавить("Сумма");
	ТаблицаНоменклатуры.Колонки.Добавить("ПредметРасчета");
	ТаблицаНоменклатуры.Колонки.Добавить("КодТовара",                    Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("КодСтраныПроисхожденияТовара", Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("НомерТаможеннойДекларации",    Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("СуммаАкциза",                  Новый ОписаниеТипов("Строка"));
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("НомерСтроки");
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод");
	
	Данные = Новый Структура;
	
	Данные.Вставить("Идентификатор");
	Данные.Вставить("Номер");
	Данные.Вставить("Сумма");
	Данные.Вставить("Валюта");
	Данные.Вставить("НазначениеПлатежа");
	Данные.Вставить("БанковскийСчет", БанковскийСчет);
	Данные.Вставить("Продавец", Продавец);
	Данные.Вставить("Покупатель", Покупатель);
	Данные.Вставить("Номенклатура", ТаблицаНоменклатуры);
	Данные.Вставить("Штрихкоды", ТаблицаШтрихкодов);
	Данные.Вставить("ПропускатьСтраницуСчета", Ложь);
	
	ИнтеграцияПодсистемБИП.ЗаполнитьДанныеОснованияПлатежа(ОснованиеПлатежа, Данные);
	ОнлайнОплатыПереопределяемый.ЗаполнитьДанныеОснованияПлатежа(ОснованиеПлатежа, Данные);
	
	ДополнитьДанныеПоНоменклатуре(Данные.Номенклатура);
	
	Возврат Данные;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса(Знач ДанныеОснованияПлатежа)
	
	ДанныеДляСервиса = Новый Структура;
	ДанныеДляСервиса.Вставить("items", "");
	ДанныеДляСервиса.Вставить("ym_merchant_receipt", "");
	ДанныеДляСервиса.Вставить("checksum", "");
	ДанныеДляСервиса.Вставить("supplierInfo", "");
	
	НоменклатураРасширенная = ДанныеОснованияПлатежаДляСервиса_НоменклатураРасширенная(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.items = ЗаписатьДанныеВJSON(НоменклатураРасширенная);
	
	Чек = ДанныеОснованияПлатежаДляСервиса_Чек(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.ym_merchant_receipt = ЗаписатьДанныеВJSON(Чек);
	ДанныеДляСервиса.checksum = ХешСумма(ЗаписатьДанныеВJSON(Чек.items));
	
	Продавец = ДанныеОснованияПлатежаПродавец(ДанныеОснованияПлатежа);
	ДанныеДляСервиса.supplierInfo = ЗаписатьДанныеВJSON(Продавец);
	
	Возврат ДанныеДляСервиса;

КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_Номенклатура(Знач ДанныеОснованияПлатежа) 

	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("СтавкаНДСКод",          "tax");
	СоответствиеПолей.Вставить("Наименование",          "text");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "price");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubjectType");
	СоответствиеПолей.Вставить("СпособРасчетаСтрокой",  "paymentMethodType");
	СоответствиеПолей.Вставить("КодТовара",                    "productCode");
	СоответствиеПолей.Вставить("КодСтраныПроисхожденияТовара", "countryOfOriginCode");
	СоответствиеПолей.Вставить("НомерТаможеннойДекларации",    "customsDeclarationNumber");
	СоответствиеПолей.Вставить("СуммаАкциза",                  "excise");
	
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеКлюч = "Цена" Тогда
				СтрокаДанных.Вставить(ПолеЗначение, Новый Структура("amount", Значение));
			Иначе 
				СтрокаДанных.Вставить(ПолеЗначение, Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;
	
КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_НоменклатураРасширенная(Знач ДанныеОснованияПлатежа) 

	Штрихкоды = Новый Соответствие();
	Для каждого СтрокаШК Из ДанныеОснованияПлатежа.Штрихкоды Цикл
		Если Штрихкоды.Получить(СтрокаШК.НомерСтроки) = Неопределено Тогда
			Штрихкоды.Вставить(СтрокаШК.НомерСтроки, Новый Массив);
		КонецЕсли;
		Штрихкоды[СтрокаШК.НомерСтроки].Добавить(СтрокаШК.Штрихкод);
	КонецЦикла;
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("Наименование",          "name");
	СоответствиеПолей.Вставить("НаименованиеПолное",    "fullName");
	СоответствиеПолей.Вставить("Характеристика",        "feature");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "price");
	СоответствиеПолей.Вставить("СтавкаНДС",             "nds");
	СоответствиеПолей.Вставить("Валюта",                "currency");
	СоответствиеПолей.Вставить("Артикул",               "article");
	СоответствиеПолей.Вставить("ЕдиницаИзмерения",      "unit");
	СоответствиеПолей.Вставить("ВидНоменклатуры",       "category");
	СоответствиеПолей.Вставить("Родитель",              "parent");
	СоответствиеПолей.Вставить("Сумма",                 "sum");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubjectType");
	СоответствиеПолей.Вставить("СпособРасчетаСтрокой",  "paymentMethodType");
	
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			СтрокаДанных.Вставить(ПолеЗначение, Значение);
			
		КонецЦикла;
		
		ТекШтрихкоды = Штрихкоды.Получить(СтрокаНоменклатуры.НомерСтроки);
		СтрокаДанных.Вставить("barcodes", ?(ТекШтрихкоды = Неопределено, Новый Массив, ТекШтрихкоды));
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;
	
КонецФункции

Функция ДанныеОснованияПлатежаДляСервиса_Чек(Знач ДанныеОснованияПлатежа) 
	
	Чек = Новый Структура;
	
	ДанныеПокупателя = ДанныеОснованияПлатежаПокупатель(ДанныеОснованияПлатежа.Покупатель);
	
	Если ЗначениеЗаполнено(ДанныеПокупателя) Тогда
		Чек.Вставить("customer", ДанныеПокупателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика) Тогда
		Чек.Вставить("taxSystem", ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика);
	КонецЕсли;
	
	Чек.Вставить("items", ДанныеОснованияПлатежаДляСервиса_Номенклатура(ДанныеОснованияПлатежа));
	
	Возврат Чек;
	
КонецФункции

Функция ДанныеОснованияПлатежаТоварыЗаказ(Знач ДанныеОснованияПлатежа) 

	Штрихкоды = Новый Соответствие();
	Для каждого СтрокаШК Из ДанныеОснованияПлатежа.Штрихкоды Цикл
		Если Штрихкоды.Получить(СтрокаШК.НомерСтроки) = Неопределено Тогда
			Штрихкоды.Вставить(СтрокаШК.НомерСтроки, Новый Массив);
		КонецЕсли;
		Штрихкоды[СтрокаШК.НомерСтроки].Добавить(СтрокаШК.Штрихкод);
	КонецЦикла;
	
	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("Наименование",          "name");
	СоответствиеПолей.Вставить("НаименованиеПолное",    "fullName");
	СоответствиеПолей.Вставить("Характеристика",        "feature");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "price");
	СоответствиеПолей.Вставить("СтавкаНДС",             "nds");
	СоответствиеПолей.Вставить("Валюта",                "currency");
	СоответствиеПолей.Вставить("Артикул",               "article");
	СоответствиеПолей.Вставить("ЕдиницаИзмерения",      "unit");
	СоответствиеПолей.Вставить("ВидНоменклатуры",       "category");
	СоответствиеПолей.Вставить("Родитель",              "parent");
	СоответствиеПолей.Вставить("Сумма",                 "sum");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubjectType");
	СоответствиеПолей.Вставить("СпособРасчетаСтрокой",  "paymentMethodType");
	
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			СтрокаДанных.Вставить(ПолеЗначение, Значение);
			
		КонецЦикла;
		
		ТекШтрихкоды = Штрихкоды.Получить(СтрокаНоменклатуры.НомерСтроки);
		СтрокаДанных.Вставить("barcodes", ?(ТекШтрихкоды = Неопределено, Новый Массив, ТекШтрихкоды));
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;

КонецФункции

Функция ДанныеОснованияПлатежаТоварыЧек(Знач ДанныеОснованияПлатежа) 

	СоответствиеПолей = Новый Структура;
	
	СоответствиеПолей.Вставить("СтавкаНДСКод",          "vat");
	СоответствиеПолей.Вставить("Наименование",          "description");
	СоответствиеПолей.Вставить("Количество",            "quantity");
	СоответствиеПолей.Вставить("Цена",                  "amount");
	СоответствиеПолей.Вставить("ПредметРасчетаСтрокой", "paymentSubject");
	СоответствиеПолей.Вставить("КодТовара",                    "productCode");
	СоответствиеПолей.Вставить("КодСтраныПроисхожденияТовара", "countryOfOriginCode");
	СоответствиеПолей.Вставить("НомерТаможеннойДекларации",    "customsDeclarationNumber");
	СоответствиеПолей.Вставить("СуммаАкциза",                  "excise");
	
	Номенклатура = Новый Массив;
	
	Для каждого СтрокаНоменклатуры Из ДанныеОснованияПлатежа.Номенклатура Цикл
		
		СтрокаДанных = Новый Структура;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			
			ПолеКлюч = Поле.Ключ;
			ПолеЗначение = Поле.Значение;
			Значение = СтрокаНоменклатуры[ПолеКлюч];
			
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеКлюч = "Цена" Тогда
				СтрокаДанных.Вставить(ПолеЗначение, Новый Структура("currency, value", "RUB",Значение));
			Иначе 
				СтрокаДанных.Вставить(ПолеЗначение, Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДанных.paymentSubject = ВРег(СтрокаДанных.paymentSubject);
		
		Номенклатура.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат Номенклатура;
	
КонецФункции

Функция ДанныеОснованияПлатежаПокупатель(ДанныеПокупателя)
	
	ПолеКонтактныхДанныхЧека = ?(
		ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
			ДанныеПокупателя.КонтактныеДанныеЧека),
		"email",
		"phone");
	
	СоответствиеПолей = Новый Структура;
		
	СоответствиеПолей.Вставить("Наименование",         "fullName");
	СоответствиеПолей.Вставить("ИНН",                  "inn");
	СоответствиеПолей.Вставить("КонтактныеДанныеЧека", ПолеКонтактныхДанныхЧека);
	
	Результат = Новый Структура;
	
	Для каждого Поле Из СоответствиеПолей Цикл
		Если ЗначениеЗаполнено(ДанныеПокупателя[Поле.Ключ]) Тогда
			Результат.Вставить(Поле.Значение, ДанныеПокупателя[Поле.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОснованияПлатежаПродавец(Знач ДанныеОснованияПлатежа)
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("ИНН", "inn");
	СоответствиеПолей.Вставить("КПП", "kpp");
	СоответствиеПолей.Вставить("Наименование", "fullName");
	СоответствиеПолей.Вставить("Телефон", "phone");
	СоответствиеПолей.Вставить("ЭлектроннаяПочта", "email");
	СоответствиеПолей.Вставить("ФактическийАдрес", "physicalAddress");
	СоответствиеПолей.Вставить("ЮридическийАдрес", "legalAddress");
	
	Продавец = Новый Структура;
	
	Для каждого Поле Из СоответствиеПолей Цикл
		
		Продавец.Вставить(Поле.Значение, ДанныеОснованияПлатежа.Продавец[Поле.Ключ]); 
		
	КонецЦикла;
	
	Возврат Продавец;
	
КонецФункции

Функция ПроверитьЗаполнениеОснованияПлатежа(Знач ОснованиеПлатежа) 
	
	Отказ = Ложь;
	ИнтеграцияПодсистемБИП.ПриПроверкеЗаполненияОснованияПлатежа(ОснованиеПлатежа, Отказ);
	ОнлайнОплатыПереопределяемый.ПриПроверкеЗаполненияОснованияПлатежа(ОснованиеПлатежа, Отказ);
	
	Возврат Не Отказ;
	
КонецФункции

Функция ОперацииОнлайнОплатНовыйПротокол(ПараметрыСервиса, ПараметрыПолучения, ПараметрыКоманды, Операции, Отказ)
	
	// Выполнение команды
	ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате_НовыйПротокол";
	
	Результат = Неопределено;
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Операции.ОтсутствуетДоступ = Истина;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю();
		Возврат Операции;
	КонецЕсли;
	
	РезультатКоманды.Вставить("НастройкаОнлайнОплаты", ПараметрыКоманды.НастройкаОнлайнОплаты);
	
	РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Возврат Результат; 
	
КонецФункции

Функция ОперацииОнлайнОплатСтарыйПротокол(ПараметрыСервиса, ПараметрыПолучения, ПараметрыКоманды, Операции, Отказ)
	
	// Выполнение команды
	ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате";
	
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Ложь, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Операции.ОтсутствуетДоступ = Истина;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю();
		Возврат Операции;
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
	
	Возврат РезультатРазбора;
	
КонецФункции

Функция ДанныеОснованияПлатежаВСервисеНовыйПротокол(
		Знач ВходящиеПараметры,
		Результат,
		ПараметрыОнлайнОплаты,
		ПараметрыСервиса,
		Отказ)
	
	ИмяКоманды = "ПолучитьДанныеПоЗаказу_НовыйПротокол";
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьДанныеПоЗаказу(
		ПараметрыСервиса,
		ПараметрыОнлайнОплаты,
		ВходящиеПараметры,
		Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.КодСостояния = 204 Тогда
		// новый счет
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Результат.ОтсутствуетДоступ = Истина;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю(); 
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли;
	
	РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Возврат Результат; 
	
КонецФункции

Функция ДанныеОснованияПлатежаВСервисеСтарыйПротокол(
		Знач ВходящиеПараметры,
		Результат,
		ПараметрыОнлайнОплаты,
		ПараметрыСервиса,
		Отказ)
	
	// Инициализация команды
	ИмяКоманды = "ПолучитьДанныеПоЗаказу";
	ПараметрыКоманды = ПараметрыКомандыПолучитьДанныеПоЗаказу(
		ПараметрыСервиса,
		ПараметрыОнлайнОплаты,
		ВходящиеПараметры,
		Отказ);
	
	Если Отказ Тогда 
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Ложь, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		Отказ = Истина;
		Результат.ОтсутствуетДоступ = Истина;
	КонецЕсли;
	
	Если РезультатКоманды.Отказ Тогда
		ВывестиОшибкиПользователю();
		Возврат Результат;
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли;
	
	// Определение результатов
	Результат.КонтактныеДанныеЭлектронногоЧека = РезультатРазбора.ДанныеXDTO.customerContact;
	Результат.ПлатежнаяСсылка                  = РезультатРазбора.ДанныеXDTO.OrderURL;
	Результат.ХешСумма                         = РезультатРазбора.ДанныеXDTO.checksum;
	
	Если РезультатРазбора.ДанныеXDTO.Status = 1 Тогда
		Результат.Статус = "Новый";
	ИначеЕсли РезультатРазбора.ДанныеXDTO.Status = 0 Тогда
		
		Если РезультатРазбора.ДанныеXDTO.OrderState < 2 Тогда
			Результат.Статус = "НеОплачен"; 
		ИначеЕсли РезультатРазбора.ДанныеXDTO.OrderState = 2 Тогда
			Результат.Статус = "Оплачен";
		ИначеЕсли РезультатРазбора.ДанныеXDTO.OrderState = 3 Тогда
			Результат.Статус = "ОплаченОжиданиеЧека";
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПлатежнаяСсылкаНовыйПротокол(ПараметрыСервиса, СтруктураПараметровОнлайнОплаты, ВходящиеПараметры, Отказ)
	
	ИмяКоманды = "ОбновитьДанныеЗаказа_НовыйПротокол";
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПлатежнаяСсылка",   "");
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	Результат.Вставить("Статус",            "");
	
	ПараметрыКоманды = ПараметрыКомандыСоздатьОбновитьЗаказНовыйПротокол(
		ПараметрыСервиса,
		СтруктураПараметровОнлайнОплаты,
		ВходящиеПараметры,
		Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Истина, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		ВывестиОшибкиПользователю();
		Результат.ОтсутствуетДоступ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю();
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли;
	
	РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, Результат, Отказ);
	ВывестиОшибкиПользователю();
	
	Возврат Результат;
	
КонецФункции

Функция ПлатежнаяСсылкаСтарыйПротокол(ПараметрыСервиса, СтруктураПараметровОнлайнОплаты, ВходящиеПараметры, Отказ)
	
	ИмяКоманды = "ОбновитьДанныеЗаказа";
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПлатежнаяСсылка",   "");
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	Результат.Вставить("Статус",            "");
	
	ПараметрыКоманды = ПараметрыКомандыСоздатьОбновитьЗаказ(
		ПараметрыСервиса,
		СтруктураПараметровОнлайнОплаты,
		ВходящиеПараметры,
		Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выполнение команды
	РезультатКоманды = Неопределено;
	ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Ложь, РезультатКоманды, Отказ);
	
	Если РезультатКоманды.ОтсутствуетДоступ Тогда
		ВывестиОшибкиПользователю();
		Результат.ОтсутствуетДоступ = Истина;
		Возврат Результат;
	КонецЕсли;
		
	РезультатРазбора = Неопределено;
	РазобратьДанныеСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ);
	
	ВывестиОшибкиПользователю();
	
	Если Отказ Тогда
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли;
	
	// Определение результатов
	Результат.ПлатежнаяСсылка   = РезультатРазбора.ДанныеXDTO.OrderURL;
	Результат.ОтсутствуетДоступ = РезультатКоманды.ОтсутствуетДоступ;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСервиса(Знач ИмяКоманды, Отказ = Ложь) 

	Параметры = Новый Структура;
	
	// Проверим использование подсистемы
	Если Не Константы.ИспользоватьОнлайнОплаты.Получить() Тогда
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("НеВключенаФункциональнаяОпция", ПараметрыСообщения, Отказ);
		Возврат Параметры;
		
	КонецЕсли;
	
	// Подготовим данные аутентификации пользователя в интернет-поддержке
	ДанныеАутентификации = ДанныеАутентификацииИПП();
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("НеВключенаИПП", ПараметрыСообщения, Отказ);
		Возврат Параметры;
		
	КонецЕсли;
	
	Параметры.Вставить("ДанныеАутентификации", СтрокаАутентификации(ДанныеАутентификации));
	
	Возврат Параметры; 
	
КонецФункции

Функция СтрокаАутентификации(ДанныеАутентификации)
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Результат = ДанныеАутентификации.Тикет; // тип тикета будет установлен перед выполнения запроса
	Иначе
		СтрокаЛогинаПароля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1:%2",
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
			
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Basic %1", Base64ИзСтроки(СтрокаЛогинаПароля));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОнлайнОплаты(Знач ИмяКоманды, Знач ВходящиеПараметры, Отказ = Ложь) 

	Параметры = Новый Структура;
	
	// Подготовим настройки Онлайн оплаты
	
	//  Ищем во входящих параметрах
	Если ВходящиеПараметры.Свойство("НастройкаОнлайнОплаты") Тогда
		НастройкаОнлайнОплаты = ВходящиеПараметры.НастройкаОнлайнОплаты;
	КонецЕсли;
	//  Ищем по основанию платежа
	Если НастройкаОнлайнОплаты = Неопределено И ВходящиеПараметры.Свойство("ОснованиеПлатежа") Тогда
		НастройкаОнлайнОплаты = НастройкаОнлайнОплатыОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	КонецЕсли;
	// Ищем по организации
	Если НастройкаОнлайнОплаты = Неопределено И ВходящиеПараметры.Свойство("Организация") Тогда
		НастройкаОнлайнОплаты = НастройкаОнлайнОплатыОрганизации(ВходящиеПараметры.Организация);
	КонецЕсли;
	//  Проверяем наличие
	Если НастройкаОнлайнОплаты = Неопределено Тогда
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ОснованиеПлатежа", ВходящиеПараметры.ОснованиеПлатежа);
		ОбработатьОшибку("НеНайденаДействительнаяНастройка", ПараметрыСообщения, Отказ);
		Возврат Параметры;
	КонецЕсли; 
	
	Параметры.Вставить("Настройка", НастройкаОнлайнОплаты);
	Параметры.Вставить("ИспользоватьНовыйПротокол", Не ЗначениеЗаполнено(НастройкаОнлайнОплаты.ИдентификаторВитрины));
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКомандыПолучитьДанныеПоЗаказу(
		Знач ПараметрыСервиса,
		Знач ПараметрыОнлайнОплаты,
		Знач ВходящиеПараметры,
		Отказ = Ложь) 

	ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации); 
	Параметры.Вставить("shopId", Формат(ПараметрыОнлайнОплаты.Настройка.ИдентификаторМагазина,"ЧГ="));
	
	Если ПараметрыОнлайнОплаты.Настройка.СДоговором Тогда
		Параметры.Вставить("orderNumber", Строка(ДанныеОснованияПлатежа.Идентификатор));
	Иначе
		Параметры.Вставить("orderNumber", Строка(ВходящиеПараметры.ОснованиеПлатежа.УникальныйИдентификатор()));	
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКомандыСоздатьОбновитьЗаказ(
		Знач ПараметрыСервиса,
		Знач ПараметрыОнлайнОплаты,
		Знач ВходящиеПараметры,
		Отказ = Ложь)
	
	Параметры = Новый Структура;
	
	// Проверим основание платежа
	Если Не ПроверитьЗаполнениеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа) Тогда
		Отказ = Истина;
		Возврат Параметры;
	КонецЕсли;
	
	ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	Если ВходящиеПараметры.Свойство("КонтактныеДанныеЧека") Тогда
		ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = ВходящиеПараметры.КонтактныеДанныеЧека;
	КонецЕсли;
	
	НастройкаОнлайнОплаты = ПараметрыОнлайнОплаты.Настройка;
	ДанныеДляСервиса = ДанныеОснованияПлатежаДляСервиса(ДанныеОснованияПлатежа);
	
	
	КодировкаURL = СпособКодированияСтроки.КодировкаURL;
	
	ИдентификаторПлатежа = КодироватьСтроку(Строка(ДанныеОснованияПлатежа.Идентификатор), КодировкаURL);

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Параметры.Вставить("cms_name", "1c"); // Необходимо для сбора статистики на стороне сервиса
	Параметры.Вставить("directLink", ?(ДанныеОснованияПлатежа.ПропускатьСтраницуСчета = Истина, "true", "false")); 
	Параметры.Вставить("shopId", Формат(НастройкаОнлайнОплаты.ИдентификаторМагазина,"ЧГ="));
	
	Если ЗначениеЗаполнено(НастройкаОнлайнОплаты.ИдентификаторВитрины) Тогда
		Параметры.Вставить("scid", Формат(НастройкаОнлайнОплаты.ИдентификаторВитрины,"ЧГ="));
	КонецЕсли;
	
	Параметры.Вставить("sum", Формат(ДанныеОснованияПлатежа.Сумма,"ЧРД=.; ЧГ="));
	Параметры.Вставить("customerNumber", КодироватьСтроку(ДанныеОснованияПлатежа.Покупатель.Идентификатор, КодировкаURL));
	Параметры.Вставить("orderNumber", ИдентификаторПлатежа);
	Параметры.Вставить("custName", КодироватьСтроку(ДанныеОснованияПлатежа.Покупатель.Наименование, КодировкаURL));
	Параметры.Вставить("paymentType", "");
	Параметры.Вставить("orderDetails", КодироватьСтроку(ДанныеОснованияПлатежа.НазначениеПлатежа, КодировкаURL)); 
	
	Если НастройкаОнлайнОплаты.ОтправкаЧековЧерезСервис
		ИЛИ Не ПараметрыОнлайнОплаты.ИспользоватьНовыйПротокол Тогда
		
		Параметры.Вставить("ym_merchant_receipt", КодироватьСтроку(ДанныеДляСервиса.ym_merchant_receipt, КодировкаURL));
	КонецЕсли;
	
	Параметры.Вставить("checksum", КодироватьСтроку(ДанныеДляСервиса.checksum, КодировкаURL));
	Параметры.Вставить("items", КодироватьСтроку(ДанныеДляСервиса.items, КодировкаURL));
	Параметры.Вставить("supplierInfo", КодироватьСтроку(ДанныеДляСервиса.supplierInfo, КодировкаURL));
	
	Если Не НастройкаОнлайнОплаты.СДоговором Тогда 
		
		ГлобальныйУникальныйИдентификаторЗаказа = КодироватьСтроку(
			Строка(ВходящиеПараметры.ОснованиеПлатежа.УникальныйИдентификатор()), СпособКодированияСтроки.КодировкаURL);
		
		Параметры.Вставить("CustINN", Строка(ДанныеОснованияПлатежа.Продавец.ИНН));
		Параметры.Вставить("CustKPP", Строка(ДанныеОснованияПлатежа.Продавец.КПП));
		Параметры.Вставить("supplierName", КодироватьСтроку(ДанныеОснованияПлатежа.Продавец.Наименование, КодировкаURL));
		Параметры.Вставить("BankBIK", Строка(ДанныеОснованияПлатежа.БанковскийСчет.БанкБИК));
		Параметры.Вставить("BankCorAccount", Строка(ДанныеОснованияПлатежа.БанковскийСчет.БанкКоррСчет));
		Параметры.Вставить("supplierBankName", КодироватьСтроку(
			ДанныеОснованияПлатежа.БанковскийСчет.БанкНаименование,
			КодировкаURL));
		Параметры.Вставить("CustAccount", Строка(ДанныеОснованияПлатежа.БанковскийСчет.НомерСчета));
		Параметры.Вставить("uin", ИдентификаторПлатежа);
		Параметры.Вставить("orderNumber", ГлобальныйУникальныйИдентификаторЗаказа);
		Параметры.Вставить("customerNumber", Строка(ДанныеОснованияПлатежа.Номер));
				
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКомандыСоздатьОбновитьЗаказНовыйПротокол(
		Знач ПараметрыСервиса,
		Знач ПараметрыОнлайнОплаты,
		Знач ВходящиеПараметры,
		Отказ = Ложь)
	
	Параметры = Новый Структура;
	
	// Проверим основание платежа
	Если Не ПроверитьЗаполнениеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа) Тогда
		Отказ = Истина;
		Возврат Параметры;
	КонецЕсли;
	
	ДанныеОснованияПлатежа = ДанныеОснованияПлатежа(ВходящиеПараметры.ОснованиеПлатежа);
	Если ВходящиеПараметры.Свойство("КонтактныеДанныеЧека") Тогда
		ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = ВходящиеПараметры.КонтактныеДанныеЧека;
	КонецЕсли;
	
	НастройкаОнлайнОплаты = ПараметрыОнлайнОплаты.Настройка;
	
	КодировкаURL = СпособКодированияСтроки.КодировкаURL;
	ИдентификаторПлатежа = КодироватьСтроку(Строка(ДанныеОснованияПлатежа.Идентификатор), КодировкаURL);
	
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Параметры.Вставить("ИдентификаторМагазина", Формат(НастройкаОнлайнОплаты.ИдентификаторМагазина,"ЧГ="));
	Параметры.Вставить("ИдентификаторПлатежа", ИдентификаторПлатежа);


	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("directLink", ?(ДанныеОснованияПлатежа.ПропускатьСтраницуСчета = Истина, "true", "false"));
	ПараметрыЗапроса.Вставить("details", ДанныеОснованияПлатежа.НазначениеПлатежа);
	ПараметрыЗапроса.Вставить("sum", Формат(ДанныеОснованияПлатежа.Сумма,"ЧРД=.; ЧГ="));
	ПараметрыЗапроса.Вставить("paymentMethodType", "BANK_CARD");
	ПараметрыЗапроса.Вставить(
		"customerNumber",
		КодироватьСтроку(ДанныеОснованияПлатежа.Покупатель.Идентификатор, КодировкаURL));
	ПараметрыЗапроса.Вставить("orderItems", ДанныеОснованияПлатежаТоварыЗаказ(ДанныеОснованияПлатежа));
	ПараметрыЗапроса.Вставить("supplierInfo", ДанныеОснованияПлатежаПродавец(ДанныеОснованияПлатежа));
	
	// receipt
	Если НастройкаОнлайнОплаты.ОтправкаЧековЧерезСервис Тогда
		
		СтруктураЧека = Новый Структура;
		СтруктураЧека.Вставить("items", ДанныеОснованияПлатежаТоварыЧек(ДанныеОснованияПлатежа));
		СтруктураЧека.Вставить("customer", ДанныеОснованияПлатежаПокупатель(ДанныеОснованияПлатежа.Покупатель));
		СтруктураЧека.Вставить("taxSystemCode", ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика);
		
		ПараметрыЗапроса.Вставить("receipt", СтруктураЧека);
		
	КонецЕсли;
	
	НоменклатураДляХеша = ДанныеОснованияПлатежаДляСервиса_Номенклатура(ДанныеОснованияПлатежа);
	ПараметрыЗапроса.Вставить("checksum", ХешСумма(ЗаписатьДанныеВJSON(НоменклатураДляХеша)));
	
	Параметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыКомандыОперацииПоОнлайнОплатам(
		Знач ПараметрыСервиса,
		Знач ВходящиеПараметры,
		ИспользоватьНовыйПротокол,
		Отказ = Ложь) 

	Параметры = Новый Структура;
	Параметры.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Параметры.Вставить("ДатаНачала", ВходящиеПараметры.ДатаПоследнегоУспешногоОбмена);
	Если ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала) Тогда 
		Параметры.ДатаНачала = ВходящиеПараметры.ДатаНачала;
	КонецЕсли;
	
	Параметры.Вставить("ДатаОкончания", Дата('00010101'));
	Если ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		Параметры.ДатаОкончания = ВходящиеПараметры.ДатаОкончания;
		Если Параметры.ДатаНачала > Параметры.ДатаОкончания Тогда
			Параметры.ДатаОкончания = КонецДня(Параметры.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Организация", ВходящиеПараметры.Организация);
	Параметры.Вставить("ИдентификаторМагазина", ВходящиеПараметры.ИдентификаторМагазина);
	Параметры.Вставить("НастройкаОнлайнОплаты", ВходящиеПараметры.НастройкаОнлайнОплаты);
	Параметры.Вставить("СДоговором", ВходящиеПараметры.СДоговором);
	
	Если Не ИспользоватьНовыйПротокол Тогда
		
		РеквизитыОрганизации = РеквизитыОрганизации(ВходящиеПараметры.Организация);
		
		Параметры.Вставить("ИНН", РеквизитыОрганизации.ИНН);
		Параметры.Вставить("КПП", РеквизитыОрганизации.КПП);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПолученияОперацийПоОнлайнОплатам(Знач ВходящиеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", ВходящиеПараметры.Организация);
	Запрос.УстановитьПараметр("СДоговором", ВходящиеПараметры.СДоговором);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОнлайнОплат.Ссылка КАК НастройкаОнлайнОплаты,
	|	ЕСТЬNULL(СтатусыОнлайнОплат.ДатаПоследнегоУспешногоОбмена, &ПустаяДата) КАК ДатаПоследнегоУспешногоОбмена,
	|	НастройкиОнлайнОплат.Организация КАК Организация,
	|	НастройкиОнлайнОплат.ИдентификаторМагазина КАК ИдентификаторМагазина,
	|	НастройкиОнлайнОплат.ИдентификаторВитрины КАК ИдентификаторВитрины,
	|	НастройкиОнлайнОплат.СДоговором КАК СДоговором,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат КАК НастройкиОнлайнОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОнлайнОплат КАК СтатусыОнлайнОплат
	|		ПО НастройкиОнлайнОплат.Ссылка = СтатусыОнлайнОплат.НастройкаОнлайнОплаты
	|ГДЕ
	|	НЕ НастройкиОнлайнОплат.Недействительна
	|	И НЕ НастройкиОнлайнОплат.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Организация <> НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиОнлайнОплат.Организация = &Организация
	|			КОГДА &СДоговором <> НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиОнлайнОплат.СДоговором = &СДоговором
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Параметры = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры);
	
КонецФункции

Процедура ПроверитьПараметрыВызоваКомандыСервиса(
			ИмяКоманды,
			ПараметрыКоманды,
			Отказ)
			
	МассивОбязательныхПараметров = Новый Массив;
	МассивОбязательныхПараметровТоваров = Новый Массив;
	МассивОбязательныхПараметровЧека = Новый Массив;

	
	ДанныеДляОформленияЧековЧерезСервис = "";
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда
		
		МассивОбязательныхПараметров.Добавить("ИНН");
		
		Если ПараметрыКоманды.Свойство("ИНН")
			И СтрДлина(ПараметрыКоманды.ИНН) = 10 Тогда
			
			МассивОбязательныхПараметров.Добавить("КПП");
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате_НовыйПротокол" Тогда 
		
		МассивОбязательныхПараметров.Добавить("ИдентификаторМагазина");
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		// Обязательных параметров не существует.
	ИначеЕсли ИмяКоманды = "ДанныеЭквайера" Тогда
		
		МассивОбязательныхПараметров.Добавить("date"); 
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
		
		МассивОбязательныхПараметров.Добавить("shopId");
		МассивОбязательныхПараметров.Добавить("sum");
		МассивОбязательныхПараметров.Добавить("customerNumber");
		МассивОбязательныхПараметров.Добавить("orderNumber");
		МассивОбязательныхПараметров.Добавить("checksum");
		МассивОбязательныхПараметров.Добавить("items");
		
		МассивОбязательныхПараметровТоваров.Добавить("name");
		МассивОбязательныхПараметровТоваров.Добавить("quantity");
		МассивОбязательныхПараметровТоваров.Добавить("sum"); //(здесь 2 знака, сейчас есть случаи запросов с бОльшим количеством знаков),
		
		ДанныеТоваров = РаскодироватьСтроку(
			ПараметрыКоманды.items,
			СпособКодированияСтроки.КодировкаURL);
		
		ЧтениеДанных = Новый ЧтениеJSON();
		ЧтениеДанных.УстановитьСтроку(ДанныеТоваров);
		МассивТоваров = ПрочитатьJSON(ЧтениеДанных);
		ЧтениеДанных.Закрыть();
		
		Если ПараметрыКоманды.Свойство("CustAccount") И СтрДлина(ПараметрыКоманды.CustAccount)>25 Тогда
			СформироватьПараметрыОшибкиЗначенияПараметровКоманды(ИмяКоманды, "CustAccount", Отказ);
		КонецЕсли;
		
		Если ПараметрыКоманды.Свойство("sum") Тогда
			ПроверитьСоответствиеСумм(ИмяКоманды, ПараметрыКоманды.sum, МассивТоваров, Отказ);
		КонецЕсли;
		
		// Доп поля если передан ym_merchant_receipt
		Если ПараметрыКоманды.Свойство("ym_merchant_receipt") Тогда
			
			ДанныеДляОформленияЧековЧерезСервис = РаскодироватьСтроку(
				ПараметрыКоманды.ym_merchant_receipt,
				СпособКодированияСтроки.КодировкаURL);
			
			ЧтениеДанных = Новый ЧтениеJSON();
			ЧтениеДанных.УстановитьСтроку(ДанныеДляОформленияЧековЧерезСервис);
			СтруктураДанныхЧека = ПрочитатьJSON(ЧтениеДанных);
			ЧтениеДанных.Закрыть();
			
			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("customer", "Структура");
			СтруктураПроверки.Вставить("items", "Массив");
			
			ПроверитьСтруктуру(ИмяКоманды, СтруктураПроверки, СтруктураДанныхЧека, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Если Не СтруктураДанныхЧека.customer.Свойство("fullName") 
				ИЛИ Не ЗначениеЗаполнено(СтруктураДанныхЧека.customer.fullName) Тогда
				СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, "customer.fullName", Отказ);
				Возврат;
			КонецЕсли;

				
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа_НовыйПротокол" Тогда
		
		МассивОбязательныхПараметров.Добавить("ИдентификаторМагазина");
		МассивОбязательныхПараметров.Добавить("ИдентификаторПлатежа");
		МассивОбязательныхПараметров.Добавить("ПараметрыЗапроса");
		
		Если ПараметрыКоманды.Свойство("ПараметрыЗапроса") Тогда
			
			ПараметрыЗапроса = ПараметрыКоманды.ПараметрыЗапроса;
			
			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("sum", "Строка");
			СтруктураПроверки.Вставить("customerNumber", "Строка");
			СтруктураПроверки.Вставить("checksum", "Строка");
			СтруктураПроверки.Вставить("orderItems", "Массив");
			
			ПроверитьСтруктуру(ИмяКоманды, СтруктураПроверки, ПараметрыЗапроса, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			МассивОбязательныхПараметровТоваров = Новый Массив;
			МассивОбязательныхПараметровТоваров.Добавить("name");
			МассивОбязательныхПараметровТоваров.Добавить("quantity");
			МассивОбязательныхПараметровТоваров.Добавить("price"); //(здесь 2 знака, сейчас есть случаи запросов с бОльшим количеством знаков),
			
			МассивТоваров = ПараметрыЗапроса.orderItems;
			
			ПроверитьСоответствиеСумм(ИмяКоманды, ПараметрыЗапроса.sum, МассивТоваров, Отказ);
			
		// Доп поля если передан receipt
			Если ПараметрыЗапроса.Свойство("receipt") Тогда
				
				
				ПараметрыПроверки = Новый Структура;
				ПараметрыПроверки.Вставить("customer", "Структура");
				ПараметрыПроверки.Вставить("items", "Массив");
				
				ПроверитьСтруктуру(ИмяКоманды, ПараметрыПроверки, ПараметрыЗапроса.receipt, Отказ);
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
				Если Не ПараметрыЗапроса.receipt.customer.Свойство("fullName") 
					ИЛИ Не ЗначениеЗаполнено(ПараметрыЗапроса.receipt.customer.fullName) Тогда
					СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, "customer.fullName", Отказ);
					Возврат;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		

	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу" Тогда
		
		МассивОбязательныхПараметров.Добавить("shopId");
		МассивОбязательныхПараметров.Добавить("orderNumber");
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу_НовыйПротокол" Тогда
		
		МассивОбязательныхПараметров.Добавить("shopId");
		МассивОбязательныхПараметров.Добавить("orderNumber"); 
	
	ИначеЕсли ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса" Тогда
		
		МассивОбязательныхПараметров.Добавить("ИдентификаторМагазина");
		
	Иначе
		
		ОбработатьОшибку("НеизвестнаяКомандаСервиса", , Отказ);
		
	КонецЕсли;
	
	Для Каждого ОбязательныйПараметр Из МассивОбязательныхПараметров Цикл
		
		Если Не ПараметрыКоманды.Свойство(ОбязательныйПараметр) 
			ИЛИ Не ЗначениеЗаполнено(ПараметрыКоманды[ОбязательныйПараметр]) Тогда
			
			СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, ОбязательныйПараметр, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОбязательныйПараметрТовара Из МассивОбязательныхПараметровТоваров Цикл
		
		Для Каждого СтруктураТовара Из МассивТоваров Цикл
			
			Если Не СтруктураТовара.Свойство(ОбязательныйПараметрТовара) 
				ИЛИ Не ЗначениеЗаполнено(СтруктураТовара[ОбязательныйПараметрТовара]) Тогда
				
				СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, ОбязательныйПараметрТовара, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтруктуру(ИмяКоманды, ПараметрыПроверки, ПроверяемыеДанные, Отказ)
	
	Для Каждого ПараметрПроверки Из ПараметрыПроверки Цикл
		ПроверяемоеСвойство = ПараметрПроверки.Ключ;
		Если Не ПроверяемыеДанные.Свойство(ПроверяемоеСвойство) 
			ИЛИ ТипЗнч(ПроверяемыеДанные[ПроверяемоеСвойство])<>Тип(ПараметрПроверки.Значение) Тогда
			СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, ПроверяемоеСвойство, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСумм(ИмяКоманды, СуммаЗаказа, МассивТоваров, Отказ)
	
	СуммаТоваров = 0;
	
	Для Каждого Товар Из МассивТоваров Цикл
		Если Товар.Свойство("sum") Тогда
			СуммаТоваров = СуммаТоваров + Товар.sum;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаТоваров <> Число(СуммаЗаказа) Тогда
		Отказ = Истина;
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("СуммыТоваровИДокументаНеСовпадают", ПараметрыСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПараметрыВызоваКомандыСервиса(
			ИмяКоманды, 
			ПараметрыКоманды, 
			ПараметрыВызова, 
			ПараметрыСоединения, 
			Отказ)
			
	Если ПараметрыВызова.ИспользоватьНовыйПротокол Тогда
		АдресКоманд = АдресКомандНовогоПротокола();
	Иначе
		АдресКоманд = АдресКомандСтарогоПротокола();
	КонецЕсли;


	ПреобразоватьСтрокуАутентификации(ПараметрыКоманды, ПараметрыВызова.ИспользоватьНовыйПротокол);
	
	Заголовки = Новый Соответствие();
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда 
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + "listOperations";
		ПараметрыВызова.Метод           = "post";
		
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыТелаЗапроса = Новый Структура();
		ПараметрыТелаЗапроса.Вставить("inn", Формат(ПараметрыКоманды.ИНН, "ЧГ="));
		ПараметрыТелаЗапроса.Вставить("kpp", Формат(ПараметрыКоманды.КПП, "ЧГ="));
		Если ПараметрыКоманды.СДоговором Тогда
			ПараметрыТелаЗапроса.Вставить("shopId", Формат(ПараметрыКоманды.ИдентификаторМагазина, "ЧГ="));
		КонецЕсли;
		ПараметрыТелаЗапроса.Вставить("formatVersion", ПараметрыСоединения.ВерсияФормата);
		Если Не ПараметрыКоманды.ДатаНачала = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить(
			"operationCreatedDatetimeGreaterOrEqual",
			Формат(ПараметрыКоманды.ДатаНачала, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
		Если Не ПараметрыКоманды.ДатаОкончания = Дата('00010101') Тогда 
			ПараметрыТелаЗапроса.Вставить(
			"operationCreatedDatetimeLessOrEqual",
			Формат(ПараметрыКоманды.ДатаОкончания, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		КонецЕсли;
		
		ПараметрыВызова.Вставить("Данные" , СформироватьТелоЗапроса(ПараметрыТелаЗапроса));
		
	ИначеЕсли ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате_НовыйПротокол" Тогда
		
		ПараметрыВызова.Метод           = "get";
		
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыПериода = "";
		Если Не ПараметрыКоманды.ДатаНачала = Дата('00010101') Тогда
			ПредставлениеДаты = ЗаписатьДатуJSON(
				ПараметрыКоманды.ДатаНачала,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.УниверсальнаяДата);
			ПараметрыПериода = "?operationTimestampGte=" + ПредставлениеДаты;
		КонецЕсли;
		
		Если Не ПараметрыКоманды.ДатаОкончания = Дата('00010101') Тогда
			ПредставлениеДаты = ЗаписатьДатуJSON(
				ПараметрыКоманды.ДатаОкончания,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.УниверсальнаяДата);
			ПараметрыПериода = ПараметрыПериода + ?(ЗначениеЗаполнено(ПараметрыПериода),"&", "?");
			ПараметрыПериода = ПараметрыПериода +"operationTimestampLte=" + ПредставлениеДаты;
		КонецЕсли;
		
		СтрокаПараметровКоманд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"shops/%1/operations%2", 
		Формат(ПараметрыКоманды.ИдентификаторМагазина, "ЧГ=0"), 
		ПараметрыПериода);
		
		ПараметрыВызова.АдресРесурса = АдресКомандНовогоПротокола() + СтрокаПараметровКоманд;
		
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + "getSettings";
		ПараметрыВызова.Метод           = "post";
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
		
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + "createOrder";
		ПараметрыВызова.Метод           = "post";
		ПараметрыВызова.Данные          = СформироватьТелоЗапроса(ПараметрыКоманды);
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа_НовыйПротокол" Тогда
		
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		СтрокаПараметровКоманд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"shops/%1/orders/%2", 
			ПараметрыКоманды.ИдентификаторМагазина, 
			ПараметрыКоманды.ИдентификаторПлатежа);

		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + СтрокаПараметровКоманд;
		ПараметрыВызова.Метод           = "put";
		ПараметрыВызова.Данные          = ЗаписатьДанныеВJSON(ПараметрыКоманды.ПараметрыЗапроса);
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу" Тогда
		
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + "getOrder";
		ПараметрыВызова.Метод           = "post";
		ПараметрыВызова.Данные          = СформироватьТелоЗапроса(ПараметрыКоманды);
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу_НовыйПротокол" Тогда
		
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		СтрокаПараметровКоманд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"shops/%1/orders/%2", 
			ПараметрыКоманды.shopId, 
			КодироватьСтроку(ПараметрыКоманды.orderNumber, СпособКодированияСтроки.КодировкаURL));
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + СтрокаПараметровКоманд;
		ПараметрыВызова.Метод           = "get";
		
	ИначеЕсли ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса" Тогда
		
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
		Заголовки.Вставить("Authorization", ПараметрыКоманды.ДанныеАутентификации);
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторОперации) Тогда
			
			ПараметрыВызова.АдресРесурса = АдресКоманд + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"shops/%1/permissions/check/%2", 
				ПараметрыКоманды.ИдентификаторМагазина, 
				ПараметрыКоманды.ИдентификаторОперации);
				
			ПараметрыВызова.Метод = "get";
			
		Иначе
			
			ПараметрыВызова.АдресРесурса = АдресКоманд + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"shops/%1/permissions/check", 
				ПараметрыКоманды.ИдентификаторМагазина);
				
			ПараметрыВызова.Метод = "post";
			
		КонецЕсли;
	ИначеЕсли ИмяКоманды = "ДанныеЭквайера" Тогда
		
		Заголовки.Вставить("Content-Type", "application/json");
		
		ПараметрыКоманды.Удалить("ДанныеАутентификации");
		
		ПараметрыВызова.АдресРесурса    = АдресКоманд + "acquirers/find-actual-on-date";
		ПараметрыВызова.Метод           = "post";
		ПараметрыВызова.Данные          = ЗаписатьДанныеВJSON(ПараметрыКоманды);
	Иначе
		
		ОбработатьОшибку("НеизвестнаяКомандаСервиса", , Отказ);
		
	КонецЕсли;
	
	ПараметрыВызова.Заголовки = Заголовки;
	
КонецПроцедуры

Процедура ПреобразоватьСтрокуАутентификации(ПараметрыКоманды, ИспользоватьНовыйПротокол)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыКоманды.Свойство("ДанныеАутентификации") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьНовыйПротокол Тогда
		ПараметрыКоманды.ДанныеАутентификации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Bearer %1",
			ПараметрыКоманды.ДанныеАутентификации);
	Иначе
		ТокенСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"AUTH_TOKEN:%1",
			ПараметрыКоманды.ДанныеАутентификации);
		СтрокаBase64 = Base64ИзСтроки(ТокенСтрокой);
		ПараметрыКоманды.ДанныеАутентификации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Basic %1",
			СтрокаBase64);
	КонецЕсли;
		
КонецПроцедуры

Функция СформироватьТелоЗапроса(ПараметрыТелаЗапроса)
	
	ТелоЗапроса = "";
	
	Для Каждого Параметр Из ПараметрыТелаЗапроса Цикл 
		
		ТелоЗапроса =  ТелоЗапроса + ?(ПустаяСтрока(ТелоЗапроса), "", "&") + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Возврат ТелоЗапроса;
	
КонецФункции

Процедура ВыполнитьКомандуСервиса(Знач ИмяКоманды, ПараметрыКоманды, ИспользоватьНовыйПротокол, Результат, Отказ)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодСостояния",      0);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Данные",            Неопределено);
	Результат.Вставить("ПараметрыКоманды",  Неопределено);
	Результат.Вставить("ПараметрыВызова",   Неопределено);
	Результат.Вставить("ОтсутствуетДоступ", Ложь);
	Результат.Вставить("Отказ", Ложь);

	
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	ПроверитьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, Отказ);
	
	// Получение и инициализация общих параметров соединения в сервисе.
	ПараметрыСоединения = НастройкиСервиса(ИспользоватьНовыйПротокол);
	
	ПараметрыВызова = Новый Структура("АдресРесурса, Метод, Данные, Заголовки, ИспользоватьНовыйПротокол, ИспользоватьRestAPI");
	ПараметрыВызова.ИспользоватьНовыйПротокол = ИспользоватьНовыйПротокол;
	
	Если Отказ Тогда
		ВывестиОшибкиПользователю();
		Результат.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыВызоваКомандыСервиса(
		ИмяКоманды,
		ПараметрыКоманды,
		ПараметрыВызова,
		ПараметрыСоединения,
		Отказ);
	
	Результат.ПараметрыКоманды = ПараметрыКоманды;
	Результат.ПараметрыВызова = ПараметрыВызова;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	
	ПараметрыОтправки.Вставить("Метод"                   , ВРег(ПараметрыВызова.Метод));
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , ПараметрыВызова.Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыВызова.Данные);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	ПараметрыОтправки.Вставить("Таймаут"                 , 20);
	
	URLСервиса = URLОперацииСервиса(
		ПараметрыСоединения.Протокол,
		ПараметрыСоединения.ИмяСервера,
		ПараметрыВызова.АдресРесурса);
	
	HTTPОтвет = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(HTTPОтвет.КодОшибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	Если Результат.КодСостояния = 403 Тогда // отсутствует токен
		Результат.ОтсутствуетДоступ = Истина;
	КонецЕсли;
	
	НовыйРезультат = Новый Структура();
	НовыйРезультат.Вставить("ТелоОтвета", HTTPОтвет.Содержимое);
	Результат.Данные = НовыйРезультат;
	
	Если ЗначениеЗаполнено(HTTPОтвет.СообщениеОбОшибке) Тогда
		
		Если ИспользоватьНовыйПротокол Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибкиПоДаннымОтвета(
				HTTPОтвет.КодСостояния,
				HTTPОтвет.Содержимое);
		Иначе
			ТекстСообщенияОшибки = "";
		КонецЕсли;
		
		// Сообщение об ошибке пользователю
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ТекстСообщения", ?(
			ЗначениеЗаполнено(ТекстСообщенияОшибки),
			ТекстСообщенияОшибки,
			HTTPОтвет.СообщениеОбОшибке));
		ПараметрыСообщения.Вставить("ТекстОшибкиСервиса",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Код ошибки: %1
				|Подробно: %2'"),
				Результат.КодСостояния,
				НовыйРезультат.ТелоОтвета));
		
		ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаголовокОтвета(ИмяКоманды, НовыйРезультат)
	
	Если НовыйРезультат.ДанныеXDTO = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда 
		ПрочитатьСвойство(НовыйРезультат, "Количество",        "Count");
		ПрочитатьСвойство(НовыйРезультат, "КодСостояния",      "status");
		ПрочитатьСвойство(НовыйРезультат, "ОписаниеСостояния", "techMessage");
		ПрочитатьСвойство(НовыйРезультат, "ДатаОтвета",        "requestDatetime");
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда 
		ПрочитатьСвойство(НовыйРезультат, "КодСостояния",      "status");
		ПрочитатьСвойство(НовыйРезультат, "ОписаниеСостояния", "techMessage");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНастройкиИзДанныхСервиса(Результат, ДанныеXDTO)
	
	ДанныеНастроек = Неопределено;
	Если СвойствоXDTO(ДанныеXDTO, "Settings", ДанныеНастроек) 
		И Не ДанныеНастроек = Неопределено Тогда
		
		Результат.Вставить("ДанныеXDTO", ДанныеНастроек);
		ПрочитатьСвойство(Результат, "ИдентификаторМагазина", "shopid");
		ПрочитатьСвойство(Результат, "ИдентификаторВитрины",  "scid");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьДанныеСервиса(
		ИмяКоманды,
		Знач РезультатКоманды,
		РезультатРазбора,
		Отказ,
		БлокироватьСообщенияОбОшибках = Ложь)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатРазбора = Новый Структура();
	ОжидаемыеТипыXDTO = Новый Соответствие();
	ОжидаемыеТипыXDTO.Вставить("ЗагрузитьОперацииПоОнлайнОплате", "ListOperationsResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьНастройки", "GetSettingsResponce");
	ОжидаемыеТипыXDTO.Вставить("ОбновитьДанныеЗаказа", "CreateOrderResponce");
	ОжидаемыеТипыXDTO.Вставить("ПолучитьДанныеПоЗаказу", "CreateOrderResponce");
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(РезультатКоманды.Данные.ТелоОтвета) Тогда
		ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(РезультатКоманды.Данные.ТелоОтвета,
			ОжидаемыеТипыXDTO.Получить(ИмяКоманды), ОбъектXDTO, ИмяКоманды,Отказ);
		РезультатРазбора.Вставить("ДанныеXDTO", ОбъектXDTO);
		ПрочитатьЗаголовокОтвета(ИмяКоманды, РезультатРазбора);
	Иначе
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ОбработатьОшибку("ПустоеТелоОтвета", ПараметрыСообщения, Отказ); 
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ОбработатьОшибкиСервиса(
		ИмяКоманды,
		РезультатКоманды,
		РезультатРазбора,
		Отказ,
		БлокироватьСообщенияОбОшибках);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// Непосредственный разбор данных которые вернул сервис
	Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда 
		
		НастройкаОнлайнОплаты = РезультатКоманды.ПараметрыКоманды.НастройкаОнлайнОплаты;
		
		МассивОпераций = Новый Массив;
		ПрочитатьОперацииПоОнлайнОплате(
			МассивОпераций,
			ОбъектXDTO,
			АналитикиУчета(НастройкаОнлайнОплаты),
			Отказ);
		РезультатРазбора.Вставить("МассивОпераций", МассивОпераций);
		
		Если Не ОбъектXDTO.Settings = Неопределено Тогда 
			РезультатРазбора.Вставить("Настройки", Новый Структура());
			ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора.Настройки, ОбъектXDTO)
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
		
		ПрочитатьНастройкиИзДанныхСервиса(РезультатРазбора, ОбъектXDTO);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперацииПоОнлайнОплате(МассивОпераций, ДанныеXDTO, АналитикиУчета, Отказ)
	
	Если ДанныеXDTO.Count > 0 Тогда 
		СписокОпераций = ДанныеXDTO.ПолучитьСписок("OperationInfo");
		Для Каждого Операция Из СписокОпераций Цикл 
			Если Не Операция.PaymentData = Неопределено Тогда // Оплаты
				ПрочитатьОперацию(МассивОпераций, Операция, "PaymentData", АналитикиУчета, Отказ);
			ИначеЕсли Не Операция.RefundData = Неопределено Тогда // Возвраты
				ПрочитатьОперацию(МассивОпераций, Операция, "RefundData", АналитикиУчета, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперацию(МассивОпераций, ДанныеXDTO, ТипОперации, АналитикиУчета, Отказ)
	
	Операция = Новый Структура();

	Операция.Вставить("ДанныеXDTO", ДанныеXDTO[ТипОперации]);

	ПрочитатьСвойство(Операция, "ИдентификаторТранзакции", "invoiceId");
	ПрочитатьСвойство(Операция, "ИдентификаторПлатежа",    "orderNumber");
	ПрочитатьСвойство(Операция, "ИдентификаторМагазина",   "shopid");
	
	Операция.Вставить("СДоговором", Операция.ИдентификаторМагазина > 0);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Операция, АналитикиУчета);
	
	Если ТипОперации = "PaymentData" Тогда	// Оплаты
		
		Операция.Вставить("ВидОперации", "Оплата");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ДатаОплаты",                              "paymentDatetime");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                          "orderSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                         "orderSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СуммаКЗачислениюНаСчетОрганизации",       "shopSumAmount");
		ПрочитатьСвойство(Операция, "ВалютаСуммыКЗачислениюНаСчетОрганизации", "shopSumCurrencyPaycash");
		ПрочитатьСвойство(Операция, "СпособОплаты",                            "paymentType");
		ПрочитатьСвойство(Операция, "ИННОрганизации",                          "Inn");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "НаименованиеПолноеОрганизации",           "supplierName");
		ПрочитатьСвойство(Операция, "НаименованиеБанкаОрганизации",            "supplierBankName");
		ПрочитатьСвойство(Операция, "БикБанкаОрганизации",                     "BankBIK");
		ПрочитатьСвойство(Операция, "КоррСчетБанкаОрганизации",                "BankCorAccount");
		ПрочитатьСвойство(Операция, "НомерРасчетногоСчетаОрганизации",         "CustAccount");
		ПрочитатьСвойство(Операция, "НазначениеПлатежа",                       "paymentName");
		
		// Данные о чеке
		
		ПрочитатьСвойство(Операция, "ДатаФормированияЧека",                    "penReceiptDateTime");
		ПрочитатьСвойство(Операция, "СуммаЧека",                               "penReceiptTotal");
		ПрочитатьСвойство(Операция, "НомерФискальногоНакопителя",              "penFnNumber");
		ПрочитатьСвойство(Операция, "ФискальныйНомерДокумента",                "penFiscalDocumentNumber");
		ПрочитатьСвойство(Операция, "ФискальныйПризнакДокумента",              "penFiscalDocumentAttribute");
		ПрочитатьСвойство(Операция, "КонтактныеДанныеЭлектронногоЧека",        "customerContact");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалютуПоЦифровомуКоду(Операция.ВалютаДокумента));
		
		Операция.Вставить("ВалютаСуммыКЗачислениюНаСчетОрганизации",
			НайтиВалютуПоЦифровомуКоду(Операция.ВалютаСуммыКЗачислениюНаСчетОрганизации));
		Операция.Вставить("СпособОплаты", Операция.СпособОплаты);
		
	ИначеЕсли ТипОперации = "RefundData" Тогда// Возвраты
		
		Операция.Вставить("ВидОперации", "Возврат");
		
		// Получение простых типов
		ПрочитатьСвойство(Операция, "ИдентификаторВозврата",           "returnId");
		ПрочитатьСвойство(Операция, "СуммаДокумента",                  "amount");
		ПрочитатьСвойство(Операция, "ВалютаДокумента",                 "currency");
		ПрочитатьСвойство(Операция, "ОписаниеПричиныВозврата",         "cause");
		ПрочитатьСвойство(Операция, "ДатаРегистрацииЗапросаНаВозврат", "createdDatetime");
		ПрочитатьСвойство(Операция, "ДатаИсполненияЗапросаНаВозврат",  "processedDatetime");
		ПрочитатьСвойство(Операция, "ОтправительЗапросаНаВозврат",     "sender");
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалютуПоЦифровомуКоду(Операция.ВалютаДокумента));
		
	КонецЕсли;
	
	Операция.Удалить("ДанныеXDTO");
	
	МассивОпераций.Добавить(Операция);
	
КонецПроцедуры

Процедура ПрочитатьОперациюJSON(МассивОпераций, ДанныеСервиса, АналитикиУчета, Отказ)
	
	Операция = Новый Структура();
	Операция.Вставить("ИдентификаторТранзакцииСервиса", ДанныеСервиса.operationId);
	Операция.Вставить("ИдентификаторПлатежа",    ДанныеСервиса.orderAccountingNumber);
	Операция.Вставить("ИдентификаторМагазина",   Число(ДанныеСервиса.shopId));
	Операция.Вставить("СДоговором",              Операция.ИдентификаторМагазина > 0);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Операция, АналитикиУчета);
	
	Если ДанныеСервиса.operationType = "PAYMENT" Тогда // Оплаты
		
		Операция.Вставить("ВидОперации", "Оплата");
		
		// Получение простых типов
		Операция.Вставить("ДатаОплаты",                              Дата(ДанныеСервиса.processedTimestamp));
		Операция.Вставить("СуммаДокумента",                          ДанныеСервиса.amount);
		Операция.Вставить("ВалютаДокумента",                         ДанныеСервиса.currency);
		
		Операция.Вставить("СуммаКЗачислениюНаСчетОрганизации",       ДанныеСервиса.paymentDetails.shopAmount);
		Операция.Вставить("ВалютаСуммыКЗачислениюНаСчетОрганизации", ДанныеСервиса.paymentDetails.shopAmountCurrency);
		Операция.Вставить("СпособОплаты",                            ДанныеСервиса.paymentDetails.paymentType);
		Операция.Вставить("ИдентификаторТранзакции",                 ДанныеСервиса.paymentDetails.invoiceId);
		Операция.Вставить("КонтактныеДанныеЭлектронногоЧека",        ДанныеСервиса.paymentDetails.customerContact);
		
		Операция.Вставить("ИННОрганизации",                          Неопределено);
		Операция.Вставить("НаименованиеБанкаОрганизации",            Неопределено);
		Операция.Вставить("НаименованиеПолноеОрганизации",           Неопределено);
		Операция.Вставить("НаименованиеБанкаОрганизации",            Неопределено);
		Операция.Вставить("БикБанкаОрганизации",                     Неопределено);
		Операция.Вставить("КоррСчетБанкаОрганизации",                Неопределено);
		Операция.Вставить("НомерРасчетногоСчетаОрганизации",         Неопределено);
		Операция.Вставить("НазначениеПлатежа",                       Неопределено);
		
		// Данные о чеке
		Если ЗначениеЗаполнено(ДанныеСервиса.receipt) Тогда
			Операция.Вставить("ДатаФормированияЧека",             ДанныеСервиса.receipt.registeredTimestamp);
			Операция.Вставить("СуммаЧека",                        ДанныеСервиса.receipt.totalAmount);
			Операция.Вставить("НомерФискальногоНакопителя",       ДанныеСервиса.receipt.storageNumber);
			Операция.Вставить("ФискальныйНомерДокумента",         ДанныеСервиса.receipt.fiscalDocumentNumber);
			Операция.Вставить("ФискальныйПризнакДокумента",       ДанныеСервиса.receipt.fiscalDocumentAttribute);
		Иначе
			Операция.Вставить("ДатаФормированияЧека",             Неопределено);
			Операция.Вставить("СуммаЧека",                        Неопределено);
			Операция.Вставить("НомерФискальногоНакопителя",       Неопределено);
			Операция.Вставить("ФискальныйНомерДокумента",         Неопределено);
			Операция.Вставить("ФискальныйПризнакДокумента",       Неопределено);
		КонецЕсли;
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалютуПоСимвольномуКоду(Операция.ВалютаДокумента));
		
		Операция.Вставить(
			"ВалютаСуммыКЗачислениюНаСчетОрганизации",
			НайтиВалютуПоСимвольномуКоду(Операция.ВалютаСуммыКЗачислениюНаСчетОрганизации));
		
	ИначеЕсли ДанныеСервиса.operationType = "REFUND" Тогда// Возвраты
		
		Операция.Вставить("ВидОперации", "Возврат");
		
		// Получение простых типов
		Операция.Вставить("ИдентификаторВозврата",           ДанныеСервиса.paymentOperationId);
		Операция.Вставить("СуммаДокумента",                  ДанныеСервиса.amount);
		Операция.Вставить("ВалютаДокумента",                 ДанныеСервиса.currency);
		Операция.Вставить("ОписаниеПричиныВозврата",         Неопределено);
		Операция.Вставить("ДатаРегистрацииЗапросаНаВозврат", ДанныеСервиса.createdTimestamp);
		Операция.Вставить("ДатаИсполненияЗапросаНаВозврат",  Неопределено);
		Операция.Вставить("ОтправительЗапросаНаВозврат",     ДанныеСервиса.currency);
		
		// Получение ссылочных значений
		Операция.Вставить("ВалютаДокумента", НайтиВалютуПоСимвольномуКоду(Операция.ВалютаДокумента));
		
	КонецЕсли;
	
	МассивОпераций.Добавить(Операция);
	
КонецПроцедуры

Функция ОперацииВТекстовомФормате(МассивОпераций, Параметры)
	
	Секции = Новый Массив;
	Получатель = "";
	РасчетныйСчет = "";
	СуммаПоступило = 0;
	Для Каждого Операция Из МассивОпераций Цикл 
		
		Если Операция.СДоговором Тогда 
			Продолжить;
		КонецЕсли;
		
		Секции.Добавить(ДанныеОперацииВТекстовомФормате(Операция));
		
		Если ПустаяСтрока(Получатель) Тогда 
			Получатель = Операция.НаименованиеПолноеОрганизации;
		КонецЕсли;
		Если ПустаяСтрока(РасчетныйСчет) Тогда 
			РасчетныйСчет = Операция.НомерРасчетногоСчетаОрганизации;
		КонецЕсли;
		
		СуммаПоступило = СуммаПоступило + Операция.СуммаДокумента;
		
	КонецЦикла;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"1CClientBankExchange
		|ВерсияФормата=1.02
		|Кодировка=Windows
		|Отправитель=
		|Получатель=%1
		|ДатаНачала=%2
		|ДатаКонца=%3
		|РасчСчет=%4
		|СекцияРасчСчет
		|ДатаНачала=%2
		|ДатаКонца=%2
		|РасчСчет=%4
		|ВсегоПоступило=%5
		|ВсегоСписано=
		|КонечныйОстаток=
		|КонецРасчСчет",
		Получатель,                                       // Получатель
		Формат(Параметры.ДатаНачала,"ДЛФ=D"),             // ДатаНачала, ДатаКонца
		Формат(Параметры.ДатаОкончания,"ДЛФ=D"),          // ДатаКонца
		РасчетныйСчет,                                    // РасчСчет
		СуммаПоступило);                                  // ВсегоПоступило
		
	СекцииСтрокой = СтрСоединить(Секции, Символы.ПС);
	
	Возврат Заголовок + Символы.ПС + СекцииСтрокой + ?(ПустаяСтрока(СекцииСтрокой), "", Символы.ПС) + "КонецФайла";
	
КонецФункции

Функция ДанныеОперацииВТекстовомФормате(Операция)
	
	ОперацияТекстом =
		"СекцияДокумент=Операция по ЮKassa
		|Номер=%1
		|Дата=%2
		|Сумма=%3
		|ПлательщикСчет=
		|Плательщик=
		|ПлательщикИНН=
		|ПлательщикБанк1=
		|ПлательщикБИК=
		|ПолучательСчет=%4
		|ДатаПоступило=%2
		|Получатель=
		|ПолучательИНН=%5
		|ПолучательРасчСчет=%4
		|ПолучательБанк1=
		|ПолучательБИК=%6
		|ВидОплаты=01
		|Код=%7
		|НазначениеПлатежа=
		|НазначениеПлатежа1=
		|Очередность=5
		|КонецДокумента";
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОперацияТекстом,
		НСтр("ru = 'б/н'"),                             // Номер
		Формат(Операция.ДатаОплаты,"ДЛФ=D"),            // Дата, ДатаПоступило
		Операция.СуммаДокумента,                        // Сумма
		Операция.НомерРасчетногоСчетаОрганизации,       // ПолучательСчет, ПолучательРасчСчет
		Операция.ИННОрганизации,                        // ПолучательИНН
		Операция.БикБанкаОрганизации,                   // ПолучательБИК
		Операция.ИдентификаторПлатежа);                 // Код
	
КонецФункции

Функция ОписаниеРезультатаСтатусПодключенияМагазина()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтатусПодключения",      СтатусыПодключенияМагазина().Запрещено);
	Результат.Вставить("СтатусОперацииПроверки", "");
	Результат.Вставить("ИдентификаторОперации",  "");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПараметровПолученияСтатусаПодключенияМагазина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторМагазина", "");
	Результат.Вставить("ИдентификаторОперации", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолученияСтатусаРазрешения(
		ПараметрыСервиса,
		ИдентификаторМагазина, 
		ИдентификаторОперации, 
		Отказ)
	
	Если Не ЗначениеЗаполнено(ИдентификаторМагазина) И Не ЗначениеЗаполнено(ИдентификаторОперации) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеАутентификации",  ПараметрыСервиса.ДанныеАутентификации);
	Результат.Вставить("ИдентификаторМагазина", Формат(ИдентификаторМагазина, "ЧГ =0"));
	Результат.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПараметровПолученияДанныхЭквайераПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Период", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеРезультатаДанныеЭквайера()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтатусОтвета",         "Ошибка");
	Результат.Вставить("ПолноеНаименование",   "");
	Результат.Вставить("Наименование",         "");
	Результат.Вставить("ИНН",                  "");
	Результат.Вставить("КПП",                  "");
	Результат.Вставить("ОГРН",                 "");
	Результат.Вставить("ОКВЭД",                "");
	Результат.Вставить("ОКПО",                 "");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолученияДанныхЭквайера(
		ПараметрыСервиса,
		ВходящиеПараметры)
	
	ДатаЗапроса = ТекущаяДатаСеанса();
	Если ВходящиеПараметры.Свойство("Период") И ЗначениеЗаполнено(ВходящиеПараметры.Период) Тогда
		ДатаЗапроса = ВходящиеПараметры.Период;
	КонецЕсли;
			
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеАутентификации", ПараметрыСервиса.ДанныеАутентификации);
	Результат.Вставить("date", ДатаЗапроса);
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьДанныеСервисаJSON(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ)
	
	ДанныеСервиса = ЗначениеИзСтрокиJSON(РезультатКоманды.Данные.ТелоОтвета);
	
	Если ИмяКоманды = "ПолучитьСтатусРазрешенияНаИспользованиеСервиса" Тогда
		
		РезультатРазбора.СтатусПодключения      = ЗначениеСтатусаРазрешенияИзЗначенияСервиса(ДанныеСервиса.permissionStatus);
		РезультатРазбора.СтатусОперацииПроверки = ЗначениеСтатусаОперацииИзЗначенияСервиса(ДанныеСервиса.operationStatus);
		РезультатРазбора.ИдентификаторОперации  = ДанныеСервиса.operationUeid;
		
	ИначеЕсли ИмяКоманды = "ДанныеЭквайера" Тогда
		
		РезультатРазбора.Вставить("СтатусОтвета",         "Выполнено");
		РезультатРазбора.Вставить("ПолноеНаименование",   ДанныеСервиса.fullName);
		РезультатРазбора.Вставить("Наименование",         ДанныеСервиса.name);
		РезультатРазбора.Вставить("ИНН",                  ДанныеСервиса.inn);
		РезультатРазбора.Вставить("КПП",                  ДанныеСервиса.kpp);
		РезультатРазбора.Вставить("ОГРН",                 ДанныеСервиса.ogrn);
		РезультатРазбора.Вставить("ОКВЭД",                ДанныеСервиса.okved);
		РезультатРазбора.Вставить("ОКПО",                 ДанныеСервиса.okpo); 
		
	ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа_НовыйПротокол" Тогда
		
		РезультатРазбора.Вставить("ПлатежнаяСсылка",   ДанныеСервиса.orderPageURL);
		РезультатРазбора.Вставить("ОтсутствуетДоступ", Ложь);
		
	ИначеЕсли ИмяКоманды = "ПолучитьДанныеПоЗаказу_НовыйПротокол" Тогда
		
		
		РезультатРазбора = Новый Структура;
		
		РезультатРазбора.Вставить("КонтактныеДанныеЭлектронногоЧека", ДанныеСервиса.customerContact);
		РезультатРазбора.Вставить("ПлатежнаяСсылка",           ДанныеСервиса.orderPageURL);
		РезультатРазбора.Вставить("ХешСумма",                  ДанныеСервиса.checksum);
		РезультатРазбора.Вставить("Статус",                    ЗначениеСтатусаЗаказаИзЗначенияСервиса(ДанныеСервиса.orderState));
		РезультатРазбора.Вставить("ОтсутствуетДоступ",         РезультатКоманды.ОтсутствуетДоступ);
		
		
	ИначеЕсли ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате_НовыйПротокол" Тогда
		
		МассивОпераций = Новый Массив;
		Для Каждого Операция Из ДанныеСервиса.operations Цикл 
			ПрочитатьОперациюJSON(МассивОпераций, Операция, АналитикиУчета(РезультатКоманды.НастройкаОнлайнОплаты), Отказ);
		КонецЦикла;
		
		РезультатРазбора = Новый Структура;
		РезультатРазбора.Вставить("МассивОпераций", МассивОпераций);
		РезультатРазбора.Вставить("ДатаОтвета", ДанныеСервиса.timestamp);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСтатусаЗаказаИзЗначенияСервиса(ЗначениеСервиса)
	
	Результат = "";
	
	Если ЗначениеСервиса = "NEW" Тогда
		Результат = "НеОплачен";
	ИначеЕсли ЗначениеСервиса = "UPDATED" Тогда
		Результат = "НеОплачен";
	ИначеЕсли ЗначениеСервиса = "PAID" Тогда
		Результат = "Оплачен";
	ИначеЕсли ЗначениеСервиса = "PAID_WAITING_FOR_RECEIPT" Тогда
		Результат = "ОплаченОжиданиеЧека";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСтатусаРазрешенияИзЗначенияСервиса(ЗначениеСервиса)
	
	Результат = "";
	
	Если ЗначениеСервиса = "NO_PERMISSION" Тогда
		Результат = СтатусыПодключенияМагазина().Запрещено;
	ИначеЕсли ЗначениеСервиса = "DENIED" Тогда
		Результат = СтатусыПодключенияМагазина().Отказано;
	ИначеЕсли ЗначениеСервиса = "GRANTED" Тогда
		Результат = СтатусыПодключенияМагазина().Разрешено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСтатусаОперацииИзЗначенияСервиса(ЗначениеСервиса)
	
	Результат = "";
	
	Если ЗначениеСервиса = "DONE" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполнено;
	ИначеЕсли ЗначениеСервиса = "IN_PROGRESS" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Выполняется;
	ИначеЕсли ЗначениеСервиса = "ERROR" Тогда
		Результат = СтатусыВыполненияАсинхронногоМетодаСервиса().Ошибка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеИзСтрокиJSON(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(
			ЧтениеJSON,
			,
			"timestamp,createdTimestamp,processedTimestamp,registeredTimestamp",
			ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыВыполненияАсинхронногоМетодаСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Выполнено",   "Выполнено");
	Результат.Вставить("Выполняется", "Выполняется");
	Результат.Вставить("Ошибка",      "Ошибка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Обработчик регламентного задания ПолучениеУведомленийОтОнлайнОплат
//
Процедура ПолучениеУведомленийОтОнлайнОплат() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат);
	
	ОнлайнОплаты.ЗагрузитьОперацииОнлайнОплат();
	
КонецПроцедуры

#КонецОбласти

#Область XDTO

Процедура ПрочитатьТелоОтветаИПреобразоватьВОбъектXDTO(
		ТелоОтвета,
		ИмяОжидаемогоТипаXDTO,
		ОбъектXDTО,
		ИмяКоманды,
		Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ВерсияФорматаДанных = "";
	
	Если Не СтрЧислоВхождений(ТелоОтвета, ИмяОжидаемогоТипаXDTO) Тогда 
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить("ИмяОжидаемогоТипа", ИмяОжидаемогоТипаXDTO);
		ОбработатьОшибку("НеНайденыОжидаемыеДанныеВТелеОтвета", ПараметрыСообщения, Отказ); 
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(ТелоОтвета, Новый ПараметрыЧтенияXML());
		ТипФабрики = ФабрикаXDTO.Тип("http://yamoney.1c.ru/XMLSchema", ИмяОжидаемогоТипаXDTO);
		ОбъектXDTО = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипФабрики);
		ЧтениеXML.Закрыть();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить(
			"ИнформацияОбОшибке",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("НеУдалосьПреобразоватьТелоОтветВОбъектXDTO", ПараметрыСообщения, Отказ);
		Возврат;
	КонецПопытки;
	
	
	Попытка
		ОбъектXDTО.Проверить();
	Исключение
		
		ПараметрыСообщения = Новый Структура();
		ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыСообщения.Вставить(
			"КраткоеПредставлениеОшибки",
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыСообщения.Вставить(
			"ПодробноеПредставлениеОшибки",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбработатьОшибку("СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой", ПараметрыСообщения, Отказ); 
	КонецПопытки;
	
КонецПроцедуры

Функция СвойствоXDTO(Знач ОбъектXDTO, Знач Свойство, Значение)
	
	Если Не ОбъектXDTO.Свойства().Получить(Свойство) = Неопределено Тогда 
		Если ТипЗнч(ОбъектXDTO[Свойство]) = Тип("СписокXDTO") Тогда 
			Значение = ОбъектXDTO.ПолучитьСписок(Свойство);
		Иначе
			Значение = ОбъектXDTO.Получить(Свойство);
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПрочитатьСвойство(Результат, ИмяСвойстваРезультата, ИмяСвойстваXDTO)
	
	Значение = "";
	Если СвойствоXDTO(Результат.ДанныеXDTO, ИмяСвойстваXDTO, Значение) Тогда 
		Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			Значение = РаскодироватьСтроку(Значение, СпособКодированияСтроки.URLВКодировкеURL);
		КонецЕсли;
		Результат.Вставить(ИмяСвойстваРезультата, Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область JSON

Функция ЗаписатьДанныеВJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Процедура СформироватьПараметрыОшибкиПараметровКоманды(ИмяКоманды, ОбязательныйПараметр, Отказ)
	
	ПараметрыСообщения = Новый Структура();
	ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
	ПараметрыСообщения.Вставить("Параметр", ОбязательныйПараметр);
	ОбработатьОшибку("ФормированиеСсылкиНеЗаполненОбязательныйПараметр", ПараметрыСообщения, Отказ);
	
КонецПроцедуры

Процедура СформироватьПараметрыОшибкиЗначенияПараметровКоманды(ИмяКоманды, ОбязательныйПараметр, Отказ)
	
	ПараметрыСообщения = Новый Структура();
	ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
	ПараметрыСообщения.Вставить("Параметр", ОбязательныйПараметр);
	ОбработатьОшибку("ФормированиеСсылкиОшибкаЗначенияОбязательногоПараметра", ПараметрыСообщения, Отказ);
	
КонецПроцедуры


// Выдает сообщение пользователю и производит запись в журнал регистрации.
//
// Параметры:
//  ИдентификаторОшибки - Строка - Текстовый идентификатор ошибки, доступные идентификаторы.
//    * "ФормированиеСсылкиПроверкаТипаСсылки".
//    * "ФормированиеСсылкиПолучениеРеквизитовДокумент".
//    * "ФормированиеСсылкиПроверкаЗаполненияРеквизитов".
//    * "ФормированиеСсылкиНеНайденаДействительнаяНастройка".
//    * "ФормированиеСсылкиВалютаДокументаНеРазрешена".
//    * "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую".
//    * "ФормированиеСсылкиНеЗаполненОбязательныйПараметр".
//    * "ФормированиеСсылкиОшибкаЗначенияОбязательногоПараметра".
//    * "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета".
//    * "ВерсияФорматаДанныхТелаОтветаНеПоддерживается".
//    * "НеНайденыОжидаемыеДанныеВТелеОтвета".
//    * "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO".
//    * "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой".
//    * "ПустоеТелоОтвета".
//    * "СервисВернулОшибку".
//    * "ОтсутствуетСоединениеССервером".
//    * "ОшибкаВыполненияКомандыСервиса".
//    * "ОшибкаИнициализацииСервиса".
//    * "НеизвестнаяКомандаСервиса".
//    * "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций".
//    * "НеВключенаФункциональнаяОпция".
//    * "НеВключенаИПП".
//
//  ДополнительныеПараметры - Произвольный - дополнительные параметры обрабатываемые в тексте сообщений.
//  Отказ - Булево - выходной параметр. Всегда устанавливается в Истина.
//
Процедура ОбработатьОшибку(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено, Отказ = Ложь)
	
	СсылкаНаОбъект = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);
	КонецЕсли;
	
	Сообщение = ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры);
	
	ЗаписатьИнформациюВЖурналРегистрации(Сообщение.ПодробныйТекстОшибки);
	
	Источник = "СообщенияПользователюМодуляОнлайнОплатыСлужебный";
	АдресЗначения = Неопределено;
	
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда
		СообщенияПользователю = БуферОбмена.Данные;
	Иначе
		СообщенияПользователю = Новый Соответствие;
	КонецЕсли;
	
	ТекстСообщения = Сообщение.ТекстСообщения;
	Если ЗначениеЗаполнено(Сообщение.ПодробныйТекстОшибки) 
		И НЕ ПустаяСтрока(Сообщение.ТекстСообщения) И Сообщение.ПодробныйТекстОшибки <> Сообщение.ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru ='Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	СообщенияПользователю.Вставить(ИдентификаторОшибки, ТекстСообщения);
	ОбщегоНазначения.СкопироватьВБуферОбмена(СообщенияПользователю, Источник);
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ТекстыСообщенийОбОшибках(ИдентификаторОшибки, ДополнительныеПараметры = Неопределено)
	
	Сообщение = Новый Структура("ВидОперации, ПодробныйТекстОшибки, ТекстСообщения");
	
	Если ИдентификаторОшибки = "ФормированиеСсылкиПроверкаТипаСсылки" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "СсылкаНаОбъект", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании %1 ссылка на страницу оплаты через ЮKassa формироваться не может'"),
				ДополнительныеПараметры.СсылкаНаОбъект), 
			НСтр("ru = 'Ошибка при проверке типов оснований формирования платежа через ЮKassa'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПолучениеРеквизитовДокумент" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "СсылкаНаОбъект", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось определить реквизиты документа %1'"),
				ДополнительныеПараметры.СсылкаНаОбъект),
			НСтр("ru = 'Не удалось сформировать соответствие общепринятых реквизитов к реквизитам документа,
				|см. процедуру ОнлайнОплатыПереопределяемый.СоответствиеРеквизитовОснованийПлатежа'")); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиПроверкаЗаполненияРеквизитов" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ПредставлениеРеквизита", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен реквизит %1, формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
				ДополнительныеПараметры.ПредставлениеРеквизита));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиНеНайденаДействительнаяНастройка" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты'"),
			НСтр("ru = 'Не найдена действующая настройка ЮKassa для этой организации, 
				|формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти ни одной действительной настройки для организации %1'"),
				ДополнительныеПараметры)); 
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиВалютаДокументаНеРазрешена" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ВалютаДокумента,ТекстВВалюте,ТекстДоступнаяВалюта",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Счет в валюте %1 не может быть выставлен для оплаты через ЮKassa.'"),
				ДополнительныеПараметры.ВалютаДокумента),
			Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Счета можно выставлять только %1: %2'"),
				ДополнительныеПараметры.ТекстВВалюте,
				ДополнительныеПараметры.ТекстДоступнаяВалюта));
			
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиСуммаСчетаПревышаетМаксимальноДопустимую" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "МаксимальнаяСуммаСчета", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Формирование платежной ссылки для онлайн оплаты.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Максимально допустимая сумма счета для оплаты через ЮKassa без заключения договора с сервисом составляет %1 руб.
				|Для снятия ограничения заключите договор с сервисом ЮKassa или разбейте счет на несколько счетов с меньшими суммами.'"),
				Формат(ДополнительныеПараметры.МаксимальнаяСуммаСчета, "ЧДЦ=2; ЧРГ=' '")));
				
	ИначеЕсли ИдентификаторОшибки = "СуммыТоваровИДокументаНеСовпадают" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды, Параметр", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При формировании запроса обнаружено несовпадение сумм по документу и товарам построчно.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен параметр %1'"),
				ДополнительныеПараметры.Параметр));
				
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиНеЗаполненОбязательныйПараметр" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды, Параметр", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При формировании запроса обнаружен незаполненный обязательный параметр.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен параметр %1'"),
				ДополнительныеПараметры.Параметр));
		
	ИначеЕсли ИдентификаторОшибки = "ФормированиеСсылкиОшибкаЗначенияОбязательногоПараметра" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды, Параметр", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При формировании запроса обнаружена ошибка в значении обязательного параметра.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка значения параметра %1'"),
				ДополнительныеПараметры.Параметр));
		
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьОпределитьВерсиюФорматаДанныхТелаОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Не удалось определить версию формата данных'"));
				
	ИначеЕсли ИдентификаторОшибки = "ВерсияФорматаДанныхТелаОтветаНеПоддерживается" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ВерсияФормата,ТекущаяВерсияФормата",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия формата данных не поддерживается. Получена версия формата %1, поддерживается версия формата %2'"),
				ДополнительныеПараметры.ВерсияФормата,
				ДополнительныеПараметры.ТекущаяВерсияФормата));
				
	ИначеЕсли ИдентификаторОшибки = "НеНайденыОжидаемыеДанныеВТелеОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ИмяОжидаемогоТипа", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружены данные типа %1'"), 
				ДополнительныеПараметры.ИмяОжидаемогоТипа));
			
	ИначеЕсли ИдентификаторОшибки = "НеУдалосьПреобразоватьТелоОтветВОбъектXDTO" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ИнформацияОбОшибке", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
				(НСтр("ru = 'Не удалось построить объектную модель данных ответа. 
				|Подробно: %1'"), 
				ДополнительныеПараметры.ИнформацияОбОшибке));
			
	ИначеЕсли ИдентификаторОшибки = "СтруктураДанныхТелаОтветаНеСоответствуетОжидаемой" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,КраткоеПредставлениеОшибки,ПодробноеПредставлениеОшибки",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1. 
				|Подробно: %2'"),
				ДополнительныеПараметры.КраткоеПредставлениеОшибки,
				ДополнительныеПараметры.ПодробноеПредставлениеОшибки));
							
	ИначеЕсли ИдентификаторОшибки = "ПустоеТелоОтвета" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При чтении данных полученных от сервиса произошла ошибка.'"),
			НСтр("ru = 'Получен пустой ответ от сервиса'"));
			
	ИначеЕсли ИдентификаторОшибки = "СервисВернулОшибку" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ТекстСообщения,ТекстОшибкиСервиса",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			ДополнительныеПараметры.ТекстСообщения,
			ДополнительныеПараметры.ТекстОшибкиСервиса);
				
	ИначеЕсли ИдентификаторОшибки = "ОтсутствуетСоединениеССервером" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ПодробноеПредставлениеОшибки",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			нСтр("ru='Отсутствует соединение с сервером'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаВыполненияКомандыСервиса" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ОписаниеОшибки,ПодробноеПредставлениеОшибки",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1'"),
				ДополнительныеПараметры.ОписаниеОшибки),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
			
	ИначеЕсли ИдентификаторОшибки = "ОшибкаИнициализацииСервиса" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Взаимодействие с сервисом уведомлений по операциям ЮKassa'"),
			НСтр("ru = 'Ошибка инициализации сервиса'"),
			НСтр("ru = 'Ошибка инициализации сервиса'"));
			
	ИначеЕсли ИдентификаторОшибки = "НеизвестнаяКомандаСервиса" Тогда
		Сообщение = СообщениеОбОшибке(
			НСтр("ru = 'Взаимодействие с сервисом ЮKassa'"),
			НСтр("ru = 'Неизвестная команда сервиса'"),
			НСтр("ru = 'Неизвестная команда сервиса'"));
	ИначеЕсли ИдентификаторОшибки = "ОшибкаУстановкиСтатусаОбмена" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ПодробноеПредставлениеОшибки",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При установке статусов обмена произошла ошибка'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ИначеЕсли ИдентификаторОшибки = "ОшибкаОбновленияНастройкиПриЗагрузкеОпераций" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(
			ИдентификаторОшибки,
			"ИмяКоманды,ПодробноеПредставлениеОшибки",
			ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'При обновлении настроек сервиса произошла ошибка'"),
			ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ИначеЕсли ИдентификаторОшибки = "НеВключенаФункциональнаяОпция" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не включена функциональная опция ""Интеграция с ЮKassa"", 
				|использование функций взаимодействия с сервисом ЮKassa недоступно.'"));
	ИначеЕсли ИдентификаторОшибки = "НеВключенаИПП" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Интернет-поддержка пользователей не подключена,
				|использование функций взаимодействия с сервисом ЮKassa недоступно.'"));
	ИначеЕсли ИдентификаторОшибки = "НеНайденаДействительнаяНастройка" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды,ОснованиеПлатежа", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдена действующая настройка ЮKassa, 
				|формирование ссылки на страницу оплаты через ЮKassa не возможно'"),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти ни одной действительной настройки для %1'"),
				ДополнительныеПараметры.ОснованиеПлатежа));
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройкиСДоговором" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa для варианта использования сервиса ""С договором"".'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки для варианта использования сервиса ""С договором"".'"));
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройкиБезДоговора" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa для варианта использования сервиса ""Без договора"".'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки для варианта использования сервиса ""Без договора"".'"));
	ИначеЕсли ИдентификаторОшибки = "НеНайденыДействующиеНастройки" Тогда
		ОбработатьПараметрыСообщенияОбОшибке(ИдентификаторОшибки, "ИмяКоманды", ДополнительныеПараметры);
		Сообщение = СообщениеОбОшибке(
			ВидОперацииПоКоманде(ДополнительныеПараметры.ИмяКоманды),
			НСтр("ru = 'Не найдены действующие настройки ЮKassa.'"),
			НСтр("ru = 'Не удалось найти ни одной действующей настройки.'"));
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция СообщениеОбОшибке(Знач ВидОперации, Знач ТекстСообщения, Знач ПодробныйТекстОшибки = "")
	
	Сообщение = Новый Структура(
		"ВидОперации, ТекстСообщения, ПодробныйТекстОшибки",
		ВидОперации,
		ТекстСообщения,
		ТекстСообщения + ?(Не ПустаяСтрока(ПодробныйТекстОшибки)," " + ПодробныйТекстОшибки, ""));
		
	Возврат Сообщение;
	
КонецФункции

Функция ВидОперацииПоКоманде(Знач ИмяКоманды)
	
	ВидыОпераций = Новый Соответствие();
	ВидыОпераций.Вставить("ЗагрузитьОперацииПоОнлайнОплате", НСтр("ru = 'Загрузка операций по ЮKassa'"));
	ВидыОпераций.Вставить("ЗагрузитьОперацииПоОнлайнОплате_НовыйПротокол", НСтр("ru = 'Загрузка операций по ЮKassa'"));
	ВидыОпераций.Вставить("ПолучитьНастройки", НСтр("ru = 'Получение настроек по ЮKassa'"));
	ВидыОпераций.Вставить("ПолучитьДанныеПоЗаказу", НСтр("ru = 'Получение данных от сервера'"));
	ВидыОпераций.Вставить("ПолучитьДанныеПоЗаказу_НовыйПротокол", НСтр("ru = 'Получение данных от сервера'"));
	ВидыОпераций.Вставить("ОбновитьДанныеЗаказа", НСтр("ru = 'Обновление данных заказа на сервере'"));
	ВидыОпераций.Вставить("ОбновитьДанныеЗаказа_НовыйПротокол", НСтр("ru = 'Обновление данных заказа на сервере'"));
	ВидыОпераций.Вставить("ДанныеЭквайера", НСтр("ru = 'Получение данных эквайера'"));
	ВидыОпераций.Вставить("ПолучитьСтатусРазрешенияНаИспользованиеСервиса", НСтр("ru = 'Проверка доступа в сервисе'"));
	
	Операция = ВидыОпераций.Получить(ИмяКоманды);
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		
		Операция = НСтр("ru = 'Неизвестная операция'");
		
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Процедура ОбработатьОшибкиСервиса(ИмяКоманды, РезультатКоманды, РезультатРазбора, Отказ, БлокироватьСообщенияОбОшибках)
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не БлокироватьСообщенияОбОшибках Тогда
		
		ТекстСообщения = "";
		
		Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка выполнения загрузки операций по ЮKassa'");
		ИначеЕсли ИмяКоманды = "ПолучитьНастройки" Тогда 
			ТекстСообщения = НСтр("ru='Ошибка получения настроек'");
		КонецЕсли;
		
		ПодробныйТекстОшибки = "";
		
		Если ИмяКоманды = "ЗагрузитьОперацииПоОнлайнОплате" Тогда 
			Если РезультатРазбора.КодСостояния = 1 Тогда // ошибка
				ТекстОшибкиСервиса = РезультатРазбора.ОписаниеСостояния;
				ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка выполнения для организации %1. Подробности: %2.'"),
					РезультатКоманды.ПараметрыКоманды.Организация,
					ТекстОшибкиСервиса);
			КонецЕсли;
		ИначеЕсли ИмяКоманды = "ОбновитьДанныеЗаказа" Тогда
			Если РезультатРазбора.КодСостояния = 1 Тогда // ошибка
				ТекстОшибкиСервиса   = РезультатРазбора.ОписаниеСостояния;
				ТекстСообщения       = ТекстОшибкиСервиса;
				ПодробныйТекстОшибки = ТекстОшибкиСервиса;
			ИначеЕсли РезультатРазбора.КодСостояния = 2 Тогда // не переданы данные чека
				ТекстСообщения = НСтр("ru = 'Не переданы данные чека. 
					|В настройках ЮKassa необходимо выбрать вариант пробития чеков ""Через ЮKassa""'");
				ПодробныйТекстОшибки = ТекстСообщения;
			КонецЕсли; 
		КонецЕсли;
		
		ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Команда ""%1"".'"), ИмяКоманды);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2",
			ВидОперации,
			ПодробныйТекстОшибки);
		
		Если Не ПустаяСтрока(ПодробныйТекстОшибки) Тогда 
			ПараметрыСообщения = Новый Структура();
			ПараметрыСообщения.Вставить("ИмяКоманды", ИмяКоманды);
			ПараметрыСообщения.Вставить("ТекстСообщения", ТекстСообщения);
			ПараметрыСообщения.Вставить("ТекстОшибкиСервиса", СообщениеОбОшибке);
		
			ОбработатьОшибку("СервисВернулОшибку", ПараметрыСообщения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтработатьОшибкуОтсутствияНастроек(ВходящиеПараметры, ИмяКоманды, Отказ)
	
	Если ВходящиеПараметры.СДоговором = Неопределено Тогда
		ОбработатьОшибку("НеНайденыДействующиеНастройки", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
	Иначе
		Если ВходящиеПараметры.СДоговором Тогда
			ОбработатьОшибку("НеНайденыДействующиеНастройкиСДоговором", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
		Иначе
			ОбработатьОшибку("НеНайденыДействующиеНастройкиБезДоговора", Новый Структура("ИмяКоманды", ИмяКоманды), Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОшибкиПользователю()
	
	Источник = "СообщенияПользователюМодуляОнлайнОплатыСлужебный";
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если ТипЗнч(БуферОбмена.Данные) = Тип("Соответствие") Тогда 
		СообщенияПользователю = БуферОбмена.Данные;
		
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
		
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			ТекстСообщения = Сообщение.Значение;
			Если ТипЗнч(ТекстСообщения) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				Если Не ЭтоПолноправныйПользователь Тогда
					ТекстСообщения = СтрЗаменить(
						ТекстСообщения,
						Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'"),
						"");
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначения.СкопироватьВБуферОбмена(Неопределено, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПараметрыСообщенияОбОшибке(Знач ИдентификаторОшибки, Знач ОбязательныеПараметры, Параметры) 
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	МассивОбязательныхПараметров = СтрРазделить(ОбязательныеПараметры, ",", Ложь);
	МассивОтсутствующихПараметров = Новый Массив;
	
	Для каждого Имя Из МассивОбязательныхПараметров Цикл
		
		Если Не Параметры.Свойство(Имя) Тогда
			
			МассивОтсутствующихПараметров.Добавить(Имя);
			Параметры.Вставить(Имя, "<" + Имя + ">");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивОтсутствующихПараметров) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для ошибки с идентификатором %1 не заданы параметры: %2.'"),
			ИдентификаторОшибки,
			СтрСоединить(МассивОтсутствующихПараметров, ", "));
			
		ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Интеграция с онлайн оплатами'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

Функция ШаблоныСообщенийОснованийПлатежа()
	
	СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщенийОнлайнОплат.Получить().Получить();
	
	Если СоответствиеШаблонов = Неопределено Тогда
		СоответствиеШаблонов = Новый Соответствие;
		СоответствиеШаблонов.Вставить("Письмо", Новый Соответствие);
		СоответствиеШаблонов.Вставить("SMS", Новый Соответствие);
	ИначеЕсли СоответствиеШаблонов.Получить("Письмо") = Неопределено Тогда
		ОбновитьКонстантуПредопределенныеШаблоныСообщений(Неопределено);
		СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщенийОнлайнОплат.Получить().Получить();
		Если СоответствиеШаблонов.Получить("Письмо") = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Предопределенные шаблоны сообщений не обновлены, обработка прервана'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеШаблонов;
	
КонецФункции

Процедура УстановитьСоответствиеШаблоновОснованиямПлатежа(Соответствие)
	
	Константы.ПредопределенныеШаблоныСообщенийОнлайнОплат.Установить(Новый ХранилищеЗначения(Соответствие));
	
КонецПроцедуры

Функция НайтиПредопределенныйШаблонСообщений(Шаблон, СоответствиеШаблоновОснованиямПлатежа)
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = 
		СоответствиеШаблоновОснованиямПлатежа[Шаблон.ТипШаблона].Получить(Шаблон.ПолноеИмяТипаНазначения);
		
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НайденныйШаблон, 
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

Процедура ПредопределенныеШаблоныСообщений(ПредопределенныеШаблоныСообщений) Экспорт
	
	ИнтеграцияПодсистемБИП.ПредопределенныеШаблоныСообщенийОнлайнОплат(ПредопределенныеШаблоныСообщений);
	ОнлайнОплатыПереопределяемый.ПредопределенныеШаблоныСообщенийОнлайнОплат(ПредопределенныеШаблоныСообщений);
	
	// Для устаревшего метода дополним тип шаблона ("Почта" по умолчанию)
	Для Каждого ШаблонСообщения Из ПредопределенныеШаблоныСообщений Цикл
		ШаблонСообщения.Вставить("ТипШаблона", "Письмо");
	КонецЦикла;
	
	ИнтеграцияПодсистемБИП.ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам(ПредопределенныеШаблоныСообщений);
	ОнлайнОплатыПереопределяемый.ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам(ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
//
Процедура УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

// Создает описание параметров отправки сообщений.
//
// Возвращаемое значение:
//  Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание отправки электронных писем.
//       ** ОтправлятьПисьмаВФорматеHTML - Неопределено - признак отправки электронных писем в формате HTML.
//
Функция НовыйПараметрыОтправкиСообщений() Экспорт
	
	ПараметрыОтправкиСообщений = Новый Структура;
	
	ПараметрыОтправкиПисем = Новый Структура;
	ПараметрыОтправкиПисем.Вставить("ОтправлятьПисьмаВФорматеHTML", Неопределено);
	
	ПараметрыОтправкиСообщений.Вставить("ПараметрыОтправкиПисем", ПараметрыОтправкиПисем);
	
	Возврат ПараметрыОтправкиСообщений;
	
КонецФункции

// См. ОнлайнОплатыПереопределяемый.ПриОпределенииПараметровОтправкиСообщений
//
Процедура ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений) Экспорт
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат(ПараметрыОтправкиСообщений);
	ОнлайнОплатыПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат(ПараметрыОтправкиСообщений);
	
КонецПроцедуры

// Возвращает признак отправки писем с использованием шаблонов Онлайн оплат в формате HTML.
//
// Возвращаемое значение:
//  Булево - признак отправки писем с использованием шаблонов Онлайн оплат в формате HTML.
//
Функция ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Экспорт
	
	Попытка
		ОтправлятьПисьмаВФорматеHTML = ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML;
	Исключение
		ВызватьИсключение НСтр("ru = 'Нарушение структуры параметров отправки сообщений в переопределяемом методе
			|ОнлайнОплатыПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат'");
	КонецПопытки;
	
	Если ОтправлятьПисьмаВФорматеHTML = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователей.ОтправлятьПисьмаВФорматеHTML();
	Иначе
		Возврат ОтправлятьПисьмаВФорматеHTML;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

// Возвращает данные аутентификации пользователя интернет-поддержки.
// В локальном режиме получает логин пароль.
// В модели сервиса - тикет для владельца с именем "1c-yandex.kassa-access".
//
// Возвращаемое значение:
//  Структура - данные аутентификации:
//    * Логин - Строка - в локальном режиме - логин пользователя интернет-поддержки.
//                    - в модели сервиса - "AUTH_TOKEN".
//    * Пароль - Строка - в локальном режиме - пароль пользователя интернет-поддержки.
//                     - в модели сервиса - тикет аутентификации на портале поддержки.
//
Функция ДанныеАутентификацииИПП()
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Структура("Логин, Пароль, Тикет", "", "", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеБилетаИПП = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-yandex.kassa-access");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(ДанныеБилетаИПП.КодОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.Тикет = ДанныеБилетаИПП.Тикет;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеАутентификации = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.Логин  = ДанныеАутентификации.Логин;
		Результат.Пароль = ДанныеАутентификации.Пароль;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АдресаСтендов

Функция ХостСервисаИнтеграцииСОнлайнОплатами(ИспользоватьНовыйПротокол)
	
	
	Возврат "https://kassa-yandex.1c.ru";
	
КонецФункции

Функция ХостПредоставленияДоступа()
	
	
	Возврат "https://pay.1c.ru/yookassa";
	
КонецФункции

Функция АдресКомандНовогоПротокола()
	
	Возврат "public/api/rest/program1c/v2/";
	
КонецФункции

Функция АдресКомандСтарогоПротокола()
	
	Возврат "cashdesk/v1/";
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстСообщенияОшибкиПоДаннымОтвета(КодСостояния, Содержимое)
	
	Если КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Некорректные данные запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Ошибка авторизации.'");
	ИначеЕсли КодСостояния = 403 Тогда
		Если СтрНайти(Содержимое, "NO_SHOP_PERMISSION")>0 Тогда
			Возврат НСтр("ru = 'У текущего пользователя Портала нет прав для работы с указанным магазином.'");
		ИначеЕсли СтрНайти(Содержимое, "ACCOUNT_MISMATCH")>0 Тогда
			Возврат НСтр("ru = 'Для указанного идентификатора магазина заказы созданы с использованием другой учетной записи Портала 1С:ИТС.'");
		Иначе
			Возврат НСтр("ru = 'Недостаточно прав у текущего пользователя Портала.'");
		КонецЕсли;
	ИначеЕсли КодСостояния = 404 И СтрНайти(Содержимое, "ORDER_NOT_FOUND")>0  Тогда
		Возврат НСтр("ru = 'Заказ с указанным идентификатором не найден.'");
	ИначеЕсли КодСостояния = 422 Тогда
		Если СтрНайти(Содержимое, "NO_SUBSCRIBER_FOUND")>0 Тогда
			Возврат НСтр("ru = 'Не удалось определить абонента.'");
		ИначеЕсли СтрНайти(Содержимое, "UNMODIFIABLE_ORDER_PAYMENT_ALREADY_CREATED")>0 Тогда
			Возврат НСтр("ru = 'Для заказа уже создана и ожидается оплата. Заказ не может быть изменен.'");
		ИначеЕсли СтрНайти(Содержимое, "ACCOUNT_MISMATCH")>0 Тогда
			Возврат НСтр("ru = 'Счет создан с использованием другой учетной записи Портала,
				|чтение и внесение изменений невозможно.'");
		ИначеЕсли СтрНайти(Содержимое, "ENVIRONMENT_MISMATCH")>0 Тогда
			Возврат НСтр("ru = 'Несоответствие окружения.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Формирует строку Base64 из обычной строки
//
// Параметры:
//  Значение  - Строка - преобразует строку в Base64.
//
// Возвращаемое значение:
//  Строка - результат преобразования.
//
Функция Base64ИзСтроки(Значение)
	
	Результат = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Значение, КодировкаТекста.UTF8));
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;
	
КонецФункции

Функция ХешСумма(ВходящаяСтрока)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ВходящаяСтрока);
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	Возврат ХешСумма;
	
КонецФункции

Процедура ДополнитьДанныеПоНоменклатуре(ДанныеПоНоменклатуре)
	
	ДанныеПоНоменклатуре.Колонки.Добавить("СпособРасчетаСтрокой");
	ДанныеПоНоменклатуре.Колонки.Добавить("ПредметРасчетаСтрокой");
	ВидыПредметовРасчета = ВидыПредметовРасчета();
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре Цикл
		
		ПредметРасчета = ВидыПредметовРасчета.Получить(ЭлементКоллекции.ПредметРасчета);
		
		ЭлементКоллекции.ПредметРасчетаСтрокой = ?(ПредметРасчета = Неопределено, "commodity", ПредметРасчета);
		
		ЭлементКоллекции.СпособРасчетаСтрокой = "full_prepayment";
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыПредметовРасчета()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(1,  "commodity");
	Результат.Вставить(2,  "excise");
	Результат.Вставить(3,  "job");
	Результат.Вставить(4,  "service");
	Результат.Вставить(5,  "gambling_bet");
	Результат.Вставить(6,  "gambling_prize");
	Результат.Вставить(7,  "lottery");
	Результат.Вставить(8,  "lottery_prize");
	Результат.Вставить(9,  "intellectual_activity");
	Результат.Вставить(10, "payment");
	Результат.Вставить(11, "agent_commission");
	Результат.Вставить(12, "composite");
	Результат.Вставить(13, "another");
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыПодключенияМагазина() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Разрешено", "Разрешено");
	Результат.Вставить("Запрещено", "Запрещено");
	Результат.Вставить("Отказано",  "Отказано");
	
	Возврат Результат;
	
КонецФункции

Функция URLОперацииСервиса (Протокол, ИмяСервера, АдресРесурса)
	
	Возврат Протокол + "://" + ИмяСервера + "/" + АдресРесурса;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
		
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интеграция с онлайн оплатами'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
