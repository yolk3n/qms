
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////
// Обработчики событий подписок для плана обмена "Полный"
#Область ОбработчикиПланаПолный

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник        - ДокументОбъект - источник события.
//  Отказ           - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи     - РежимЗаписиДокумента - определяет набор режимов записи документа.
//  РежимПроведения - РежимПроведенияДокумента - определяет набор режимов проведения документа.
//
Процедура ОбменДаннымиПолныйЗарегистрироватьИзменениеДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("Полный", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события, кроме типа ДокументОбъект.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиПолныйЗарегистрироватьИзменение(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("Полный", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник  - НаборЗаписейРегистра - источник события.
//  Отказ     - Булево - флаг отказа от выполнения обработчика.
//  Замещение - Булево - признак замещения существующего набора записей.
// 
Процедура ОбменДаннымиПолныйЗарегистрироватьИзменениеНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("Полный", Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" констант для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - КонстантаМенеджерЗначения - источник события.
//  Отказ    - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиПолныйЗарегистрироватьИзменениеКонстанты(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("Полный", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиПолныйЗарегистрироватьУдаление(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("Полный", Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиПланаПолный

//////////////////////////////////////////////////////////////////////////////
// Обработчики событий подписок для плана обмена "ОбменБАБГУ2"
#Область ОбработчикиПланаОбменБАБГУ2

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменБАБГУ2ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменБАБГУ2", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	ОбновитьДетализациюОбменаПриРегистрацииОбъекта(Источник, "ОбменБАБГУ2");
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных
// (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события, кроме типа ДокументОбъект.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменБАБГУ2ПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменБАБГУ2", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменБАБГУ2ПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ОбменБАБГУ2", Источник, Отказ);
	
	ЗарегистрироватьУдалениеОбъектовПоДетализацииОбмена(Источник, "ОбменБАБГУ2");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиПланаОбменБАБГУ2

//////////////////////////////////////////////////////////////////////////////
// Обработчики событий подписок для плана обмена "СинхронизацияДанныхЧерезУниверсальныйФормат"
#Область ОбработчикиПланаОбменаСинхронизацияДанныхЧерезУниверсальныйФормат

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события, кроме типа ДокументОбъект.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - источник события.
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
//
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - НаборЗаписейРегистра - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
//
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, Замещение);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиПланаОбменаСинхронизацияДанныхЧерезУниверсальныйФормат

#КонецОбласти // ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Обработчик начальной настройки ИБ после создания узла РИБ.
// Вызывается в момент первого запуска подчиненного узла РИБ (в том числе АРМ).
//
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	Попытка
		ПеренестиСвязиОбъектовСДокументооборотом();
	Исключение
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиСвязиОбъектовСДокументооборотом()
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Не Настройки.ИспользоватьИнтеграциюДО2 И Не Настройки.ИспользоватьИнтеграциюДО3 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Объект КАК Объект,
	|	ТипОбъектаДО КАК ТипОбъектаДО,
	|	ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
	|ИЗ
	|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом
	|");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	Пароль = Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПрокси(Истина, Пользователь, Пароль);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Выборка.Объект)) Тогда
			
			ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
			ownerObject.id = Строка(Выборка.Объект.УникальныйИдентификатор());
			ownerObject.type = Выборка.Объект.Метаданные().ПолноеИмя();
			ownerObject.name = Строка(Выборка.Объект);
			
			linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectID");
			linkedObject.id = Выборка.ИдентификаторОбъектаДО;
			linkedObject.type = Выборка.ТипОбъектаДО;
			
			AddLinkRequest = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
			AddLinkRequest.ownerObject = ownerObject;
			AddLinkRequest.linkedObject = linkedObject;
			
			Ответ = Прокси.execute(AddLinkRequest);
			Попытка
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДетализациюОбменаПриРегистрацииОбъекта(Объект, ИмяПланаОбмена)
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБольничнаяАптека.ЕстьРеквизитТабличнойЧастиОбъекта("ИсточникФинансирования", Объект.Метаданные(), "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеДанныеДетализации = Неопределено;
	Если Объект.ДополнительныеСвойства.Свойство("ДетализацияОбменаАктуализирована", УдаленныеДанныеДетализации) Тогда
		ЗарегистрироватьУдалениеОбъектовДетализации(Объект, ИмяПланаОбмена, УдаленныеДанныеДетализации);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Ссылка КАК Объект,
	|	НовыеИсточникиФинансирования.ИсточникФинансирования КАК ИсточникФинансирования
	|ПОМЕСТИТЬ НовыеИсточникиФинансирования
	|ИЗ
	|	&ИсточникиФинансированияДокумента КАК НовыеИсточникиФинансирования
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Детализация.Объект КАК Объект,
	|	Детализация.ИсточникФинансирования КАК ИсточникФинансирования,
	|	Детализация.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ДетализацияОбмена
	|ИЗ
	|	РегистрСведений.ДетализацияОбмена КАК Детализация
	|ГДЕ
	|	Детализация.Объект = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	// Не учтенные ранее источники финансирования
	|ВЫБРАТЬ
	|	НовыеИсточникиФинансирования.Объект КАК Объект,
	|	НовыеИсточникиФинансирования.ИсточникФинансирования КАК ИсточникФинансирования
	|ИЗ
	|	НовыеИсточникиФинансирования КАК НовыеИсточникиФинансирования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДетализацияОбмена КАК Детализация
	|		ПО
	|			Детализация.ИсточникФинансирования = НовыеИсточникиФинансирования.ИсточникФинансирования
	|ГДЕ
	|	Детализация.ИсточникФинансирования ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	// Убранные источники финансирования
	|ВЫБРАТЬ
	|	Детализация.Объект КАК Объект,
	|	Детализация.ИсточникФинансирования КАК ИсточникФинансирования,
	|	Детализация.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ИЗ
	|	ДетализацияОбмена КАК Детализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НовыеИсточникиФинансирования КАК НовыеИсточникиФинансирования
	|		ПО
	|			Детализация.ИсточникФинансирования = НовыеИсточникиФинансирования.ИсточникФинансирования
	|ГДЕ
	|	НовыеИсточникиФинансирования.ИсточникФинансирования ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	// Оставшиеся без изменения источники Финансирования
	|ВЫБРАТЬ
	|	НовыеИсточникиФинансирования.Объект КАК Объект,
	|	НовыеИсточникиФинансирования.ИсточникФинансирования КАК ИсточникФинансирования,
	|	Детализация.УникальныйИдентификатор КАК УникальныйИдентификатор
	|	
	|ИЗ
	|	НовыеИсточникиФинансирования КАК НовыеИсточникиФинансирования
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДетализацияОбмена КАК Детализация
	|		ПО
	|			Детализация.ИсточникФинансирования = НовыеИсточникиФинансирования.ИсточникФинансирования
	|");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТаблицаИсточников = Объект.Товары.Выгрузить(, "ИсточникФинансирования");
	Запрос.УстановитьПараметр("ИсточникиФинансированияДокумента", ТаблицаИсточников);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	НовыеИсточникиФинансированияРезультат = РезультатыЗапроса[2];
	СтарыеИсточникиФинансированияРезультат = РезультатыЗапроса[3];
	
	Если НовыеИсточникиФинансированияРезультат.Пустой() И СтарыеИсточникиФинансированияРезультат.Пустой() Тогда
		Объект.ДополнительныеСвойства.Вставить("ДетализацияОбменаАктуализирована");
		Возврат; // Данные актуальны
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
	КонецЕсли;
	
	НаборДанных = РегистрыСведений.ДетализацияОбмена.СоздатьНаборЗаписей();
	НаборДанных.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	ОбщиеИсточникиФинансирования = РезультатыЗапроса[4].Выгрузить();
	Для Каждого ДанныеИсточника Из ОбщиеИсточникиФинансирования Цикл
		ЗаполнитьЗначенияСвойств(НаборДанных.Добавить(), ДанныеИсточника);
	КонецЦикла;
	
	НовыеИсточникиФинансирования = НовыеИсточникиФинансированияРезультат.Выгрузить();
	СтарыеИсточникиФинансирования = СтарыеИсточникиФинансированияРезультат.Выгрузить();
	Для Каждого ДанныеИсточника Из НовыеИсточникиФинансирования Цикл
		
		СтрокаДанных = НаборДанных.Добавить();
		СтрокаДанных.Объект = СсылкаНаОбъект;
		СтрокаДанных.ИсточникФинансирования = ДанныеИсточника.ИсточникФинансирования;
		Если СтарыеИсточникиФинансирования.Количество() > 0 Тогда
			СтрокаДанных.УникальныйИдентификатор = СтарыеИсточникиФинансирования[0].УникальныйИдентификатор;
			СтарыеИсточникиФинансирования.Удалить(0);
		Иначе
			СтрокаДанных.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДанных.Записать(Истина);
	
	ЗарегистрироватьУдалениеОбъектовДетализации(Объект, ИмяПланаОбмена, СтарыеИсточникиФинансирования);
	
	Объект.ДополнительныеСвойства.Вставить("ДетализацияОбменаАктуализирована", СтарыеИсточникиФинансирования);
	
КонецПроцедуры

Процедура ЗарегистрироватьУдалениеОбъектовДетализации(Объект, ИмяПланаОбмена, УдаленныеДанныеДетализации);
	
	Если УдаленныеДанныеДетализации = Неопределено Или УдаленныеДанныеДетализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	Для Каждого Получатель Из Объект.ОбменДанными.Получатели Цикл
		Если ТипЗнч(Получатель) = Тип("ПланОбменаСсылка." + ИмяПланаОбмена) Тогда
			Получатели.Добавить(Получатель);
		КонецЕсли;
	КонецЦикла;
	
	Если Получатели.Количество() > 0 Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Для Каждого ДанныеИсточника Из УдаленныеДанныеДетализации Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(
				Получатели,
				Новый УдалениеОбъекта(МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеИсточника.УникальныйИдентификатор))));
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьУдалениеОбъектовПоДетализацииОбмена(Объект, ИмяПланаОбмена)
	
	Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования") Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	ТипУзла = Тип("ПланОбменаСсылка." + ИмяПланаОбмена);
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Для Каждого Получатель Из Объект.ОбменДанными.Получатели Цикл
		Если ТипЗнч(Получатель) = ТипУзла Тогда
			Получатели.Добавить(Получатель);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Объект.Узел КАК Узел
	|ИЗ
	|	#Объект КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(Объект.Узел) = &ТипУзла";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "#Объект", МетаданныеОбъекта.ПолноеИмя() + ".Изменения"));
	Запрос.УстановитьПараметр("Ссылка" , Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипУзла", ТипУзла);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Получатели.Добавить(Выборка.Узел);
	КонецЦикла;
	
	Если Получатели.Количество() > 0 Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Детализация = ПолучитьУникальныеИдентификаторыДетализацииОбмена(Объект.Ссылка);
		Для Каждого УникальныйИдентификаторСтрокой Из Детализация Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(
				Получатели,
				Новый УдалениеОбъекта(МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой))));
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьУникальныеИдентификаторыДетализацииОбмена(Ссылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.ДетализацияОбмена
	|ГДЕ
	|	Объект = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции