#Область ПрограммныйИнтерфейс

// Новые сведения отраслевой специализации заказчика.
// 
// Возвращаемое значение:
//  Структура - Новые сведения отраслевой специализации заказчика:
//   * ОтраслеваяСпециализацияСтроительство - Структура
Функция НовыеСведенияОтраслевойСпециализацииЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);

	Результат.Вставить("ОтраслеваяСпециализацияСтроительство"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание = НСтр("ru = 'Детализация полей ТРУ, относящихся к отраслевой специализации Строительство'"); 
	Поле = НовоеПолеСтруктуры("ОтраслеваяСпециализацияСтроительство", Новый Структура,
		Тип,
		Описание,
		Истина,
		"СтройДетал", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	ОтраслеваяСпециализацияСтроительство = Результат.ОтраслеваяСпециализацияСтроительство;
	ДобавитьМетаданныеСтруктуры(ОтраслеваяСпециализацияСтроительство);
	
	// См. НовыеСведенияРазделаВидовРаботУПДЗаказчика
	ОтраслеваяСпециализацияСтроительство.Вставить("РазделВидовРабот"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание = НСтр("ru = 'Раздел видов работ'"); 
	Поле = НовоеПолеСтруктуры("РазделВидовРабот", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"Раздел", ,
		"НовыеСведенияРазделаВидовРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(ОтраслеваяСпециализацияСтроительство, Поле);
	
	// См. НовыеСведенияВидРаботУПДЗаказчика
	ОтраслеваяСпециализацияСтроительство.Вставить("ВидРаботСтроительство"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание = НСтр("ru = 'Конструктивное решение (вид работ) (УПД)'"); 
	Поле = НовоеПолеСтруктуры("ВидРаботСтроительство", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"ВидРаб", ,
		"НовыеСведенияВидРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(ОтраслеваяСпециализацияСтроительство, Поле);

	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияВидРаботУПДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаторВидовРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Идентификатор (GUID) конструктивного решения (вида работ)'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторВидовРабот", "",
		Тип,
		Описание,
		Истина,
		"@ИдВидРаб", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПризнакПринятияТРУ"); 
	Тип = Новый ОписаниеТипов("Булево"); 
	Описание = НСтр("ru = 'Признак принятия ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ПризнакПринятияТРУ", Ложь,
		Тип,
		Описание,
		Истина,
		"@ПризПринВидРаб", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеТРУ"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26, 11));
	Описание = НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'");
	Поле = НовоеПолеСтруктуры("ПринятоеТРУ", 0,
		Тип,
		Описание,
		Истина,
		"@КолВидРабПринЗак", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятыйОбъемРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Объем работы, фактически принятый заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ОбВидРабПринЗак", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2));
	Описание = НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'");
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтоимУчНалПринЗак", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПричинаОтказаОтПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Причина отказа от приемки'"); 
	Поле = НовоеПолеСтруктуры("ПричинаОтказаОтПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ПричОтказПрием", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	Возврат Результат;	
	
КонецФункции

Функция НовыеСведенияРазделаВидовРаботУПДЗаказчика() Экспорт

	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаторРаздела"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор (GUID) раздела'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторРаздела", "",
		Тип,
		Описание,
		Истина,
		"@ИдРаздел",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогомРаздел"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2));
	Описание = НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'");
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогомРаздел", 0,
		Тип,
		Описание,
		Истина,
		"@СтоимУчНалПринЗакРаздел", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ВидРаботРаздел"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание = НСтр("ru = 'Конструктивное решение (вид работ) (УПД)'"); 
	Поле = НовоеПолеСтруктуры("ВидРаботРаздел", Новый Массив,
		Тип,
		Описание,
		Истина,
		"ВидРаб",,
		"НовыеСведенияВидРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о детализированном ТРУ УПД заказчика.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о детализированном ТРУ УПД заказчика:
// * ИдентификаторПринятогоТРУ - Строка
// * ПризнакПринятияТРУ - Булево
// * ПринятоеКоличествоТРУ - Число
// * ПринятыйОбъемРабот - Число 
// * СтоимостьСНалогом - Число
// * ПричинаОтказаОтПриемки - Строка
Функция НовыеСведенияОДетализированномТРУУПДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаторПринятогоТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'GUID ТРУ, для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторПринятогоТРУ", "",
		Тип,
		Описание,
		Истина,
		"@ИдТРУпринЗак", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПризнакПринятияТРУ"); 
	Тип = Новый ОписаниеТипов("Булево"); 
	Описание = НСтр("ru = 'Признак принятия ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ПризнакПринятияТРУ", Ложь,
		Тип,
		Описание,
		Истина,
		"@ПризПринТРУ", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеКоличествоТРУ"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26, 11));
	Описание = НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'");
	Поле = НовоеПолеСтруктуры("ПринятоеКоличествоТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@КолТовПринЗак", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятыйОбъемРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Объем работы, услуги, фактически принятый заказчиком, в текстовом выражении'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ОбРабУслПринЗак", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2));
	Описание = НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтТовУчНалПринЗак", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПричинаОтказаОтПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Причина отказа от приемки'"); 
	Поле = НовоеПолеСтруктуры("ПричинаОтказаОтПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ПричОтказПрием", ,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	Возврат Результат;
	
КонецФункции

// Новые сведения о начисленной неустойке заказчика.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о начисленной неустойке заказчика:
// * НаименованиеТребования - Строка
// * НомерТребования - Строка
// * ДатаТребования - Дата
// * ТипНеустойки - Строка
// * РазмерНеустойки - Число
// * ПричинаНачисленияНеустойки - Структура
Функция НовыеСведенияОНачисленнойНеустойкеЗаказчика() Экспорт
	
	ТребованиеЗаказчикаОбУплатеНеустойки = Новый Структура();
	ДобавитьМетаданныеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("НаименованиеТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Наименование требования'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеТребования", "",
		Тип,
		Описание,
		Истина,
		"@НаимТреб", ,
		"");
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("НомерТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Номер требования'"); 
	Поле = НовоеПолеСтруктуры("НомерТребования", "",
		Тип,
		Описание,
		Ложь,
		"@НомерТреб", ,
		"");
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ДатаТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Дата требования'");
	Поле = НовоеПолеСтруктуры("ДатаТребования", "",
		Тип,
		Описание,
		Истина,
		"@ДатаТреб", ,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	// См. ТипНеустойкиЗаказчикаПеня, см. ТипНеустойкиЗаказчикаШтраф
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ТипНеустойки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Тип неустойки'"); 
	Поле = НовоеПолеСтруктуры("ТипНеустойки", "",
		Тип,
		Описание,
		Истина,
		"@ТипНеуст", ,
		"");
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("РазмерНеустойки");
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(22, 2));
	Описание = НСтр("ru = 'Размер неустойки'");
	Поле = НовоеПолеСтруктуры("РазмерНеустойки", 0,
		Тип,
		Описание,
		Истина,
		"@РазмерНеуст", ,
		"");
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);

	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ПричинаНачисленияНеустойки"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание = НСтр("ru = 'Причина начисления неустойки (штрафа, пени)'");
	Поле = НовоеПолеСтруктуры("ПричинаНачисленияНеустойки", Новый Структура,
		Тип,
		Описание,
		Ложь,
		"ПричНачислНеуст", ,
		"");
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);

	ПричинаНачисленияНеустойки = ТребованиеЗаказчикаОбУплатеНеустойки.ПричинаНачисленияНеустойки;	
	ДобавитьМетаданныеСтруктуры(ПричинаНачисленияНеустойки);
	
	ПричинаНачисленияНеустойки.Вставить("КодПричины"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Код причины'"); 
	Поле = НовоеПолеСтруктуры("КодПричины", "",
		Тип,
		Описание,
		Истина,
		"@Код",,
		"");
	ДобавитьПолеСтруктуры(ПричинаНачисленияНеустойки, Поле);
	
	ПричинаНачисленияНеустойки.Вставить("НаименованиеПричины"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Наименование причины'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеПричины", "",
		Тип,
		Описание,
		Ложь,
		"@Наим", ,
		"");
	ДобавитьПолеСтруктуры(ПричинаНачисленияНеустойки, Поле);

	Возврат ТребованиеЗаказчикаОбУплатеНеустойки;
	
КонецФункции

// Тип неустойки заказчика штраф.
// 
// Возвращаемое значение:
//  Строка
Функция ТипНеустойкиЗаказчикаШтраф() Экспорт
	
	Возврат "Штраф";
	
КонецФункции

// Тип неустойки заказчика пеня.
// 
// Возвращаемое значение:
//  Строка
Функция ТипНеустойкиЗаказчикаПеня() Экспорт
	
	Возврат "Пеня";

КонецФункции

// Новые сведения о налогах и вносах заказчика.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о налогах и вносах заказчика:
// * ИнформацияОНалогеИВзносеЗаФизическоеЛицо - Массив из см. НовыеСведенияОНалогеИВносеЗаказчика
Функция НовыеСведенияОНалогахИВносахЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИнформацияОНалогеИВзносеЗаФизическоеЛицо");
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Информация о налоге и взносе, уплачиваемом заказчиком за физическое лицо'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНалогеИВзносеЗаФизическоеЛицо", Новый Массив,
		Тип,
		Описание,
		Истина,
		"ИнфНалВзносУплЗак", ,
		"НовыеСведенияОНалогеИВносеЗаказчика");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;

КонецФункции

Функция НовыеСведенияОНалогеИВносеЗаказчика() Экспорт
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо = Новый Структура();
	ДобавитьМетаданныеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо);

	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("Сумма");
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(22, 2));
	Описание = НСтр("ru = 'Сумма'");
	Поле = НовоеПолеСтруктуры("Сумма", 0,
		Тип,
		Описание,
		Истина,
		"@Сум", ,
		"");
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("ИнформацияОДругихНалогахВзносах"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Информация о других налогах/взносах'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОДругихНалогахВзносах", "",
		Тип,
		Описание,
		Ложь,
		"@ИнфДрНалВзнос", ,
		"");
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("НалогВзнос"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание = НСтр("ru = 'Налог/взнос'"); 
	Поле = НовоеПолеСтруктуры("НалогВзнос", Новый Структура,
		Тип,
		Описание,
		Истина,
		"НалВзнос",,
		"НовыеНалогВзнос"); 
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);

	НалогВзнос = ИнформацияОНалогеИВзносеЗаФизическоеЛицо.НалогВзнос; 
	ДобавитьМетаданныеСтруктуры(НалогВзнос);

	НалогВзнос.Вставить("КодНалогаВзноса"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Код налога/взноса'"); 
	Поле = НовоеПолеСтруктуры("КодНалогаВзноса", "",
		Тип,
		Описание,
		Истина,
		"@Код", ,
		"");
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	НалогВзнос.Вставить("НаименованиеНалогаВзноса"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание = НСтр("ru = 'Наименование налога/взноса'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеНалогаВзноса", "",
		Тип,
		Описание,
		Ложь,
		"@Наим", ,
		"");
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	Возврат ИнформацияОНалогеИВзносеЗаФизическоеЛицо;
	
КонецФункции

// Новые сведения о прочих начислениях УКДЗаказчика.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о прочих начислениях УКДЗаказчика:
// * ИтоговаяСуммаНеустоек - Число
// * ИтоговаяСуммаНалоговВзносов - Число
// * ИтоговаяСуммаОплаты - Число
// * ИнформацияОНачисленнойНеустойке - Число
// * ИнформацияОНачисленнойНеустойке - см. НовыеСведенияОНачисленнойНеустойкеЗаказчика
// * ИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика - см. НоваяИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика
Функция НовыеСведенияОПрочихНачисленияхУКДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИтоговаяСуммаНеустоек");
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(22, 2));
	Описание = НСтр("ru = 'Итоговая сумма неустоек (штрафов, пени) с учетом корректировки'"); 
	Поле = НовоеПолеСтруктуры("ИтоговаяСуммаНеустоек", 0,
		Тип,
		Описание,
		Ложь,
		"@СумНеуст", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Итоговая сумма налогов, взносов.
	// Игнорируется при приеме, рассчитывается автоматически и заполняется при передаче.
	Результат.Вставить("ИтоговаяСуммаНалоговВзносов", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(23));
	Описание = НСтр("ru = 'Итоговая сумма налогов, взносов.'");
	Поле = НовоеПолеСтруктуры("ИтоговаяСуммаНалоговВзносов", "",
		Тип,
		Описание,
		Ложь,
		"@СумНал");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Результат.Вставить("ИтоговаяСуммаОплаты"); 
	Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(22, 2));
	Описание = НСтр("ru = 'Итоговая сумма оплаты с учетом корректировки'");
	Поле = НовоеПолеСтруктуры("ИтоговаяСуммаОплаты", 0,
		Тип,
		Описание,
		Ложь,
		"@СумОпл", ,
		"");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОНачисленнойНеустойке");
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание = НСтр("ru = 'Информация о начисленной неустойке (штрафе, пени) и уменьшении суммы оплаты'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНачисленнойНеустойке", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ИнфНачислНеуст", ,
		"НовыеСведенияОНачисленнойНеустойкеЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Информация о налогах и взносах, уплачиваемых заказчиком за поставщика.
	// Блок может быть заполнен только в том случае, если в контракте установлен признак
	// "Суммы, уплачиваемые заказчиком поставщику (подрядчику, исполнителю),
	//  будут уменьшены на размер налогов, сборов и иных обязательных платежей"
	// (priceInfo/amountsReducedByTaxes). В других случаях блок игнорируется при приеме.
	// См. НоваяИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика
	Результат.Вставить("ИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика",
		Новый Структура);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Информация о налогах и взносах, уплачиваемых заказчиком за поставщика.'");
	Конструктор = "НоваяИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика";
	Поле = НовоеПолеСтруктуры("ИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика", "",
		Тип,
		Описание,
		Ложь,
		"ИнфНалогиВзносыУплЗак", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

// Новая информация о налогах и взносах уплачиваемых заказчиком за поставщика.
// 
// Возвращаемое значение:
//  Структура - Новая информация о налогах и взносах уплачиваемых заказчиком за поставщика:
// * НалогиИВзносы - Массив из см. НоваяИнформацияОНалогеИВзносеУплачиваемомЗаказчикомЗаПоставщика
Функция НоваяИнформацияОНалогахИВзносахУплачиваемыхЗаказчикомЗаПоставщика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Информация о налоге и взносе, уплачиваемом заказчиком за поставщика.
	// См. НоваяИнформацияОНалогеИВзносеУплачиваемомЗаказчикомЗаПоставщика
	Результат.Вставить("НалогиИВзносы", Новый Массив);
	Тип = Новый ОписаниеТипов("Массив");
	Описание = НСтр("ru = 'Информация о налоге и взносе, уплачиваемом заказчиком за поставщика'");
	Конструктор = "НоваяИнформацияОНалогеИВзносеУплачиваемомЗаказчикомЗаПоставщика";
	Поле = НовоеПолеСтруктуры("НалогиИВзносы", "",
		Тип,
		Описание,
		Ложь,
		"ИнфНалВзносУплЗак", ,
		Конструктор);
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новая информация о налоге и взносе уплачиваемом заказчиком за поставщика.
// 
// Возвращаемое значение:
//  Структура - Новая информация о налоге и взносе уплачиваемом заказчиком за поставщика:
// * Сумма - Строка
// * ИнформацияОДругихНалогахвзносах - Строка
// * НалогВзнос - Структура:
//    ** КодНалогаВзноса - Строка
//    ** НаименованиеНалогаВзноса - Строка
Функция НоваяИнформацияОНалогеИВзносеУплачиваемомЗаказчикомЗаПоставщика() Экспорт

	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сумма.
	Результат.Вставить("Сумма", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(23));
	Описание = НСтр("ru = 'Сумма'");
	Поле = НовоеПолеСтруктуры("Сумма", "",
		Тип,
		Описание,
		Ложь,
		"@Сум");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Информация о других налогах/взносах.
	// Принимается, если в поле "Код налога/взноса"
	// (ФайлУПДПокуп/ПрочиеНачислен/ИнфНалогиВзносыУплЗак/ИнфНалВзносУплЗак/НалВзнос/Код)
	// указан код 5 - "Другие налоги/взносы".
	// В других случаях атрибут игнорируется при приеме.
	Результат.Вставить("ИнформацияОДругихНалогахвзносах", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
	Описание = НСтр("ru = 'Информация о других налогах/взносах.'");
	Поле = НовоеПолеСтруктуры("ИнформацияОДругихНалогахвзносах", "",
		Тип,
		Описание,
		Ложь,
		"@ИнфДрНалВзнос");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Налог/взнос.
	// При приеме код налога/взноса контролируется на
	// присутствие в актуальном состоянии в справочнике "Налоги и взносы" (nsiEATaxes).
	НалогВзнос = Новый Структура;
	ДобавитьМетаданныеСтруктуры(НалогВзнос);
	Результат.Вставить("НалогВзнос", НалогВзнос);
	Тип = Новый ОписаниеТипов("Структура");
	Описание = НСтр("ru = 'Налог/взнос.'");
	Поле = НовоеПолеСтруктуры("НалогВзнос", "",
		Тип,
		Описание,
		Ложь,
		"НалВзнос");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Код налога/взноса.
	НалогВзнос.Вставить("КодНалогаВзноса", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Описание = НСтр("ru = 'Код налога/взноса'");
	Поле = НовоеПолеСтруктуры("КодНалогаВзноса", "",
		Тип,
		Описание,
		Истина,
		"@Код");
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	// Наименование налога/взноса. 
	// Игнорируется при приеме. При передаче заполняется значением
	// из справочника "Налоги и взносы физического лица" (nsiEATaxes).
	НалогВзнос.Вставить("НаименованиеНалогаВзноса", "");
	Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255));
	Описание = НСтр("ru = 'Наименование налога/взноса'");
	Поле = НовоеПолеСтруктуры("НаименованиеНалогаВзноса", "",
		Тип,
		Описание,
		Ложь,
		"@Наим");
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБСП

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиОбменаЕИСДляЗаказчиков, Истина);
	
КонецПроцедуры

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.АктПриемкиВходящийЕИС);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	Описание = Описание + "
	|РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков.Чтение.Организации
	|РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков.Изменение.Организации
	|";
		
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБЭД

// См. ПодключаемыеКомандыЭДОСобытия.ПриОпределенииСоставаКомандЭДО.
Процедура ПриОпределенииСоставаКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Входящие.Добавить("Документ.АктПриемкиВходящийЕИС");
	
КонецПроцедуры

// Заполнить описание объекта учета.
// 
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка, ДокументСсылка - ссылка на источник данных.
//  Описание - ТаблицаЗначений - см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если это объект учета электронного актирования.
Функция ЗаполнитьОписаниеОбъектаУчета(ИсточникДанныхСсылка, Описание) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.АктПриемкиВходящийЕИС") Тогда

		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		
		Если ИсточникДанныхСсылка.ЭтоКорректировка Тогда
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД;
		Иначе
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД;
		КонецЕсли;
		
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
			
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Настройки обмена ЕИС для заказчика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация заказчика.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Настройки обмена ЕИС заказчика.
Функция НастройкиОбменаЕИСЗаказчика(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	ИСТИНА КАК ИспользоватьУПД,
	|	ИСТИНА КАК ИспользоватьУКД,
	|	НастройкиОбменаЕИС.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	НастройкиОбменаЕИС.ЛогинАльтернативнойИнтеграции,
	|	НастройкиОбменаЕИС.ПарольАльтернативнойИнтеграции
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.Организация = &Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить();
	
	Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
	
	Возврат Настройки;
	
КонецФункции

// Текст запроса по настройкам для получения входящих.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам для получения входящих.
Функция ТекстЗапросаПоНастройкамДляПолученияВходящих() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ДатаПоследнегоПолученияДокументов КАК ДатаПоследнегоПолученияДокументов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса есть возможность отправки получения ЭД.
// 
// Возвращаемое значение:
//  Строка -- Текст запроса есть возможность отправки получения ЭД.
Функция ТекстЗапросаЕстьВозможностьОтправкиПолученияЭД() Экспорт
	
	ТекстЗапроса = "////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.Организация,
	|	НастройкиОбменаЕИСДляЗаказчиков.ДатаПоследнегоПолученияДокументов,
	|	НастройкиОбменаЕИСДляЗаказчиков.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИСДляЗаказчиков.КодПоСПЗ,
	|	НастройкиОбменаЕИСДляЗаказчиков.НаименованиеОрганизации,
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен,
	|	НастройкиОбменаЕИСДляЗаказчиков.ТокенАвторизации
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИСДляЗаказчиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС КАК
	|			ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС
	|		ПО ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС.Значение = ИСТИНА
	|ГДЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса по настройкам заказчика.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам заказчика.
Функция ТекстЗапросаПоНастройкамЗаказчика() Экспорт

	ТекстЗапросаПоНастройкамЗаказчика = "ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ОписанияОбъектовУчета.Организация КАК Отправитель,
	|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
	|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК Договор,
	|	ОписанияОбъектовУчета.Направление КАК Направление,
	|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ФорматыТиповДокументовЕИС.Формат КАК Формат,
	|	ЗНАЧЕНИЕ(Справочник.МаршрутыПодписания.ОднойДоступнойПодписью) КАК МаршрутПодписания,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС) КАК СпособОбмена,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторОтправителя,
	|	КонтрагентыЕИС.ИдентификаторУчастника КАК ИдентификаторПолучателя,
	|	ЛОЖЬ КАК ТребуетсяОтветнаяПодпись,
	|	ЛОЖЬ КАК ТребуетсяИзвещениеОПолучении,
	|	ЛОЖЬ КАК ВыгружатьДополнительныеСведения,
	|	ИСТИНА КАК ОбменБезПодписи,
	|	ИСТИНА КАК Формировать,
	|	ЛОЖЬ КАК ЗаполнениеКодаТовара
	|ИЗ
	|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (Константы.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
	|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
	|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|		ПО ОписанияОбъектовУчета.Организация = НастройкиОбменаЕИС.Организация
	|		И НастройкиОбменаЕИС.ОбменВключен = ИСТИНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
	|		ПО ОписанияОбъектовУчета.Контрагент = КонтрагентыЕИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыТиповДокументовЕИС КАК ФорматыТиповДокументовЕИС
	|		ПО ФорматыТиповДокументовЕИС.ТипДокумента = ОписанияОбъектовУчета.ТипДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
	|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
	|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента";
	
	Возврат ТекстЗапросаПоНастройкамЗаказчика;
	
КонецФункции

// Найти создать документ приемки.
// См. ЭлектронноеАктированиеЕИСПолучениеВходящих.СохранитьДанныеОбъектаВБД.
Функция НайтиСоздатьДокументПриемки(ДеревоДляСовместимостиСБЭД, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект) Экспорт
	
	ДокументПриемки = НайденныйОбъект;
	
	ЭлектронныйДокумент = ПараметрыОбработки.ЭлектронныйДокумент;
	
	ИдентификаторДокумента = Прав(ПараметрыОбработки.ДанныеОсновногоФайла.ИмяФайла, 40);
	ИдентификаторДокумента = Лев(ИдентификаторДокумента, 36);
			
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		РезультатПоиска = Документы.АктПриемкиВходящийЕИС.НайтиПоРеквизиту(
			"ИдентификаторДокумента", ИдентификаторДокумента);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			ДокументОбъект = Документы.АктПриемкиВходящийЕИС.СоздатьДокумент();
			ДокументОбъект.ИдентификаторДокумента = ИдентификаторДокумента;
		Иначе
			ДокументОбъект = РезультатПоиска.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ДокументОбъект = ДокументПриемки.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.ДатаЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "ДатаДокумента");
	ДокументОбъект.НомерЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "НомерДокумента");
	ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
	ДокументОбъект.Контрагент = ПараметрыОбработки.Отправитель;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент);
	
	ДокументОбъект.Записать();
	
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		ДокументПриемки = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки);
	
	Возврат ДокументПриемки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеВКоллекцию(Значение)
	
	Возврат ЭлектронноеАктированиеЕИС.ЗначениеВКоллекцию(Значение);
	
КонецФункции

Процедура ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент)
	
	СодержимоеПакетаДокумента = СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент);
	
	Если НЕ ЗначениеЗаполнено(СодержимоеПакетаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(СодержимоеПакетаДокумента);
	ДанныеПакета = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	ЧтениеФайла.Закрыть();
	
	ДанныеПриложения = Base64Значение(ДанныеПакета.Прилож.Контент);
	ТекстПриложения = ПолучитьСтрокуИзДвоичныхДанных(
		ДанныеПриложения, ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(ТекстПриложения);
	ЧтениеФайла.Прочитать();
	
	ЭтоКорректировка = Ложь;
	Если ЧтениеФайла.Имя = ЭлектронноеАктированиеЕИС.ИмяТипаXDTOПриложениеУКДПродавца() Тогда
		ЭтоКорректировка = Истина;
	КонецЕсли;
	
	ДокументОбъект.ЭтоКорректировка = ЭтоКорректировка;
	
	ЧтениеФайла.ПервоеОбъявление();
	ДанныеПриложения = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	
	Если ЭтоКорректировка Тогда
		УзелДанныхПоТРУ = "ТРУ";
	Иначе
		// BSLLS:Typo-off
		УзелДанныхПоТРУ = "СведТРУ";
		// BSLLS:Typo-on
	КонецЕсли;
	
	СведенияОТоварах = ЗначениеВКоллекцию(ДанныеПриложения.СведТов[УзелДанныхПоТРУ]);
	
	ТипЧисло = Тип("Число");
	// Заполняем табличную часть.
	ДокументОбъект.ТРУОбъектовЗакупки.Очистить();
	// BSLLS:Typo-off
	Для Каждого СтрокаСведенийОТоварах Из СведенияОТоварах Цикл
		НоваяСтрока = ДокументОбъект.ТРУОбъектовЗакупки.Добавить();

		Если ЕстьСвойство(СтрокаСведенийОТоварах, "НедеталТРУ") ИЛИ ЭтоКорректировка Тогда

			Если ЭтоКорректировка Тогда
				ДанныеТовараБезДетализации = СтрокаСведенийОТоварах;
				НоваяСтрока.КодТовараДляЕИС = ДанныеТовараБезДетализации.КодТов;
			Иначе
				ДанныеТовараБезДетализации = СтрокаСведенийОТоварах.НедеталТРУ;
			КонецЕсли;
			
			НоваяСтрока.Идентификатор = ДанныеТовараБезДетализации.ИдТРУ;
			НоваяСтрока.Наименование = ДанныеТовараБезДетализации.НаимТовИсх;
			
			Если ЕстьСвойство(ДанныеТовараБезДетализации, "НеЛПСвед") Тогда
				
				НеЛПСвед = ДанныеТовараБезДетализации.НеЛПСвед;
				
				Если НЕ ЭтоКорректировка Тогда
					
					Если ЕстьСвойство(НеЛПСвед, "ЦенаИзКонтСНДС") Тогда
						ЦенаИзКонтракта = XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаИзКонтСНДС);
					Иначе
						ЦенаИзКонтракта = 0;
					КонецЕсли;
					
					НоваяСтрока.ЦенаСНДС = ЦенаИзКонтракта;
					
					НоваяСтрока.ОбъемРаботыУслуги = ЗначениеНеобязательногоСвойства(НеЛПСвед, "ОбРабУсл");
					
				Иначе
					
					Если ЕстьСвойство(НеЛПСвед, "ЦенаСНДС") И ЕстьСвойство(НеЛПСвед.ЦенаСНДС, "ДоИзм") Тогда
						НоваяСтрока.ЦенаСНДС = XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаСНДС.ДоИзм);
						НоваяСтрока.ЦенаСНДСПослеИзменения =
							XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаСНДС.ПослеИзм);
					КонецЕсли;
					
					Если ЕстьСвойство(НеЛПСвед, "ОбРабУсл") Тогда
						НоваяСтрока.ОбъемРаботыУслуги = НеЛПСвед.ОбРабУсл.ДоИзм;
						НоваяСтрока.ОбъемРаботыУслугиПослеИзменения = НеЛПСвед.ОбРабУсл.ПослеИзм;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Сведения о детализированных ТРУ
		КонецЕсли;
		
	КонецЦикла;
	
	// BSLLS:Typo-on
	
КонецПроцедуры

// Содержимое пакета электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
// 
// Возвращаемое значение:
//  Строка - Содержимое пакета электронного документа.
Функция СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент)

	ЗапросПоКонтейнерам = Новый Запрос;
	ЗапросПоКонтейнерам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныеФайлПакета,
	|	ПакетЭДПрисоединенныеФайлы.Наименование КАК ПрисоединенныеФайлПакетаНаименование,
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭДПрисоединенныеФайл,
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка КАК ФайлКонтейнера
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО (СообщениеЭДО.Ссылка = ОбъектыТранспортныхКонтейнеровЭДО.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|		ПО (СообщениеЭДО.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК
	|			ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент.Ссылка = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	ЗапросПоКонтейнерам.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ЗапросПоКонтейнерам.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Контейнеры = ЗапросПоКонтейнерам.Выполнить().Выгрузить();
	Если Контейнеры.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Контейнер = Контейнеры[0].ФайлКонтейнера;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(Контейнер);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	СодержимоеПакета = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, 
		ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		
	Возврат СодержимоеПакета;
	
КонецФункции

// Извлечь приложения документа приемки.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ.
//  ДокументПриемки - ДокументСсылка.АктПриемкиВходящийЕИС - Документ приемки.
Процедура ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки)

	СодержимоеПакета = СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент);
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(СодержимоеПакета);
	ДанныеКонтейнера = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	ЧтениеФайла.Закрыть();
	
	Если НЕ ЭлектронноеАктированиеЕИС.ЕстьСвойство(ДанныеКонтейнера, "Вложен") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(ДокументПриемки.Организация);
	Если ЗначениеЗаполнено(Настройки) Тогда
		Токен = Настройки.ТокенАвторизации;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не определены настройки подключения к личному кабинету ЕИС заказчика.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("user_token", Токен);
	ПараметрыЗагрузкиФайла = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыЗагрузкиФайла.Заголовки = Заголовки;
	
	Для Каждого Вложение Из ЗначениеВКоллекцию(ДанныеКонтейнера.Вложен) Цикл
		
		Если ЕстьСвойство(Вложение, "Ссылка") Тогда
			Ссылка = Вложение.Ссылка;
		ИначеЕсли ЕстьСвойство(Вложение, "Ссылк") Тогда
			Ссылка = Вложение.Ссылк;
		КонецЕсли;
		
		РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(
			Ссылка, ПараметрыЗагрузкиФайла);
		
		Если РезультатЗагрузки.Статус Тогда
			
			// Добавляем вложение в присоединенные файлы документа.
			ИмяРасширениеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.ИмяФайл);
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор = Пользователи.АвторизованныйПользователь();
			ПараметрыФайла.ВладелецФайлов = ДокументПриемки;
			ПараметрыФайла.ИмяБезРасширения = ИмяРасширениеФайла.Имя;
			ПараметрыФайла.РасширениеБезТочки = ИмяРасширениеФайла.Расширение;
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, РезультатЗагрузки.Путь);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось скачать файл из личного кабинета ЕИС. URL файла %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Ссылка);
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьСвойство(Данные, Имя)
	
	Возврат ЭлектронноеАктированиеЕИС.ЕстьСвойство(Данные, Имя);
	
КонецФункции

Функция ЗначениеНеобязательногоСвойства(Данные,
		ИмяСвойства,
		ПривестиКТипу = "",
		ЗначениеПоУмолчанию = Неопределено)
	
	Возврат ЭлектронноеАктированиеЕИС.ЗначениеНеобязательногоСвойства(
		Данные, ИмяСвойства, ПривестиКТипу, ЗначениеПоУмолчанию);
	
КонецФункции

#Область МетаданныеСтруктуры

Процедура ДобавитьМетаданныеСтруктуры(Результат)
	
	ЭлектронноеАктированиеЕИС.ДобавитьМетаданныеСтруктуры(Результат);
	
КонецПроцедуры

Функция НовоеПолеСтруктуры(Имя,
		Значение = Неопределено,
		ОписаниеТипа = Неопределено,
		Описание = "",
		Обязательное = Истина,
		ПутьЧтенияЗаписи = "",
		ПутьЗаписи = "",
		Конструктор = "",
		ТехОписание = "")
		
		Возврат ЭлектронноеАктированиеЕИС.НовоеПолеСтруктуры(Имя,
			Значение,
			ОписаниеТипа,
			Описание,
			Обязательное,
			ПутьЧтенияЗаписи,
			ПутьЗаписи,
			Конструктор,
			ТехОписание);
			
КонецФункции

Процедура ДобавитьПолеСтруктуры(Структура, ПараметрыПоля)

	ЭлектронноеАктированиеЕИС.ДобавитьПолеСтруктуры(Структура, ПараметрыПоля);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти