////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - имя вызывающей формы в виде ""Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента"
//   КомандыПечати - ТаблицаЗначений - таблица команд к дополнению. Колонки см. в УправлениеПечатью.
//   СтандартнаяОбработка - Булево - Истина, если необходимо стандартное наполнение таблицы команд.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
//		Если ИмяФормы = "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента" Тогда
//			КомандаПечати = КомандыПечати.Добавить();
//			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
//			КомандаПечати.Идентификатор = "ЛистСогласования";
//			КомандаПечати.Представление = НСтр("ru = 'Документооборот: лист согласования'");
//			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//			КомандаПечати.Порядок = 2;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - описание полей, см.
//     ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия              = "1.1.0.0";
//	Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//	Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Регистрирует элементы справочника ПравилаИнтеграцииС1СДокументооборотом, которые необходимо обновить.
//
// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Обработчик обновления справочника ПравилаИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Параметры - Структура - параметры.
//
Процедура ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Конец ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИспользоватьПрисоединенныеФайлы1СДокументооборота() Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если ВладелецПрисоединенныхФайлов = Неопределено
			Или Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КоличествоФайловСвязанногоОбъекта(ID, Тип);
	
	Если КоличествоФайлов = Неопределено Или КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = "0000000000";
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИспользоватьПрисоединенныеФайлы1СДокументооборота() Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС, МассивФайлов);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим запись.
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(ВладелецФайлов);
	Если ДанныеОбъектаДО <> Неопределено Тогда
		ID = ДанныеОбъектаДО.id;
		Тип = ДанныеОбъектаДО.type;
	Иначе
		ID = "";
		Тип = "";
	КонецЕсли;
	
	Если ID = "" Или Тип = "" Тогда
		КоличествоФайловВДО = Неопределено;
	Иначе
		КоличествоФайловВДО = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КоличествоФайловСвязанногоОбъекта(ID, Тип);
	КонецЕсли;
	
	Если КоличествоФайловВДО = Неопределено Или КоличествоФайловВДО = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НаличиеФайлов.ЕстьФайлы
			|ИЗ
			|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|ГДЕ
			|	НаличиеФайлов.ОбъектСФайлами = &ВладелецФайлов
			|	И НаличиеФайлов.ЕстьФайлы
			|");
		Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЕстьФайлы = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив - неявно возвращаемое значение, массив структур, содержащих данные файлов,
//     свойства см. РаботаСФайлами.ДанныеФайла().
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, Неопределено, Истина, Ложь);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти

// Вызывается при создании форм бизнес-процессов 1С:Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыБизнесПроцесса(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании форм документов Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыДокумента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании формы задачи Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыЗадачи(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Дополняет таблицу соответствия поддерживаемых типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - неявно возвращаемое значение с колонками:
//     * ИмяТипаXDTO - Строка - имя типа XDTO.
//     * ТипОбъектаИС - Тип - тип объекта ИС.
//
// Пример:
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMBankAccount", Тип("СправочникСсылка._ДемоБанковскиеСчета"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка._ДемоЕдиницыИзмерения"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMContactPerson", Тип("СправочникСсылка._ДемоКонтактныеЛица"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCorrespondent", Тип("СправочникСсылка._ДемоКонтрагенты"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMProduct", Тип("СправочникСсылка._ДемоНоменклатура"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMOrganization", Тип("СправочникСсылка._ДемоОрганизации"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMSubdivision", Тип("СправочникСсылка._ДемоПодразделения"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCashFlowItem", Тип("СправочникСсылка._ДемоСтатьиДвиженияДенежныхСредств"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMEmployee", Тип("СправочникСсылка._ДемоСотрудники"));
//
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMBankAccount", Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMBankAccount", Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка.ЕдиницыИзмерения"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMCorrespondent", Тип("СправочникСсылка.Контрагенты"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMPrivatePerson", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMProduct", Тип("СправочникСсылка.Номенклатура"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMOrganization", Тип("СправочникСсылка.Организации"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMVATRate", Тип("ПеречислениеСсылка.СтавкиНДС"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMSubdivision", Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMLegalPrivatePerson", Тип("ПеречислениеСсылка.ЮрФизЛицо"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMLegalPrivatePerson", Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Заполняет свойства объекта XDTO из реквизитов объекта конфигурации-потребителя. По умолчанию заполняется
// только наименование и идентификатор. При необходимости обеспечить заполнение других реквизитов объектов
// ДО, создаваемых по ссылкам, следует заполнить соответствующие свойства объекта XDTO. Эти же значения будут
// использованы при поиске соответствий для справочников, имеющих внешние ключи (ИНН, КПП).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   СсылкаНаПотребитель - ЛюбаяСсылка - ссылка на исходный объект конфигурации-потребителя.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//		Если Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPerson";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ФизЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "Individ";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
//			ОбъектXDTO.legalPrivatePerson = "IndividualEntrepreneur";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицоНеРезидент Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPersonNonResident";
//		КонецЕсли;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоБанковскиеСчета") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, НомерСчета");
//		ОбъектXDTO.number = Реквизиты.НомерСчета;
//		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//			ТипВладельцаXDTO = "DMCorrespondent";
//		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//			ТипВладельцаXDTO = "DMOrganization";
//		КонецЕсли;
//		ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
//			Прокси,
//			ТипВладельцаXDTO,
//			Реквизиты.Владелец);
//		Если ЗначениеЗаполнено(Реквизиты.Банк) Тогда
//			ОбъектXDTO.bank = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
//				Прокси,
//				"DMBank",
//				Реквизиты.Банк);
//		КонецЕсли;
//	Иначе //...
//	КонецЕсли;
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияС1СДокументооборотБольничнаяАптека.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Заполняет реквизиты формы по данным объекта интегрированной системы.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект-основание.
//   Форма - ФормаКлиентскогоПриложения - форма обработки ИнтеграцияС1СДокументооборот, соответствующая заполняемому
//    объекту Документооборота.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью входящих, исходящих, внутренних документов Документооборота.
// Позволяет выполнить дополнительные проверки перед записью, и отказаться от записи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект. Тип DMInternalDocument, DMIncomingDocument, DMOutgoingDocument.
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от записи документа.
//
Процедура ПередЗаписьюДокумента(Прокси, ОбъектXDTO, Форма, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью объектов интегрированной системы через механизм обмена с 1С:Документооборот.
// Позволяет выполнить дополнительные проверки перед записью, изменить ДополнительныеСвойства и отказаться от записи.
//
// Параметры:
//   ОбъектИС - ДокументОбъект
//            - СправочникОбъект - изменяемый объект ИС.
//   Отказ - Булево - признак отказа от записи.
//   РежимЗаписиДокумента - РежимЗаписиДокумента - позволяет изменить режим записи.
//   РежимПроведенияДокумента - РежимПроведенияДокумента - позволяет изменить режим проведения документа.
//
Процедура ПередЗаписьюОбъектаИС(ОбъектИС, Отказ,
		РежимЗаписиДокумента = Неопределено, РежимПроведенияДокумента = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Заполняет таблицу реквизитов объекта по типу объекта.
//
// Параметры:
//   ИмяОбъектаИС - Строка - имя типа объекта потребителя.
//   Реквизиты - ТаблицаЗначений - Таблица описания реквизитов.
//
Процедура ПолучитьРеквизитыОбъектаИС(ИмяОбъектаИС, Реквизиты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении подсистемы в дерево интегрируемых объектов, с помощью которого настраивается
// интеграция. По умолчанию выводятся подсистемы первого уровня, включаемые в командный интерфейс, и
// подчиненные им.
//
// Параметры:
//   Подсистема - ОбъектМетаданных - добавляемая подсистема, содержащая интегрируемые объекты.
//   Отказ - Булево - при установке в Ложь подсистема будет пропущена вместе со всеми подчиненными.
//
Процедура ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(Подсистема, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриЗаполненииКоллекцииПечатныхФорм(ВнешнийОбъект, ИмяКоманды, КоллекцияПечатныхФорм,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении свойства объекта XDTO по значению в ИС (например, по значению реквизита объекта ИС).
//
// Параметры:
//   Значение - Произвольный - значение, которым заполняются свойства объекта XDTO для передачи в ДО.
//   Свойства - ФормаКлиентскогоПриложения, Структура, СтрокаТаблицыЗначений - заполняемый набор данных,
//     которым будет заполнен объект XDTO для передачи в ДО.
//     См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоОбъектаДО().
//   ТипОбъекта - Строка - тип заполняемого объекта, например, "DMInternalObject".
//   ИмяСвойства - Строка - имя заполняемого свойства, например, "Контрагент", "СостояниеСогласование".
//   ТипСвойства - Строка - тип заполняемого свойства, например, "DMCorrespondent", "DMDocumentStatus".
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартное заполнение
//     свойства по значению Значение производиться не будет.
//
// Пример:
//	Если ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование" Тогда
//		Если Значение = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован Тогда
//			Свойства[ИмяСвойства] = "Approved";
//			СтандартнаяОбработка = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение, Свойства, ТипОбъекта, ИмяСвойства, ТипСвойства,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
// Пример:
//	КомандыПечати = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КомандыПечатиФормы(
//		МенеджерОбъекта + ".Форма.ФормаСписка");
//	
//	Для Каждого Команда Из КомандыПечати Цикл
//		Строка = ПечатныеФормы.Добавить();
//		Строка.МенеджерПечати = Команда.МенеджерПечати;
//		Строка.ИмяКоманды = Команда.Идентификатор;
//		Строка.ПредставлениеКоманды = Команда.Представление;
//	КонецЦикла;
//
Процедура ПриЗаполненииТаблицыМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении формы объекта ДО при его создании на основании объекта ИС. Позволяет дозаполнить объект
// ДО способом, не поддерживаемым правилами интеграции.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   Форма - ФормаКлиентскогоПриложения - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применяемое правило.
//
Процедура ПриЗаполненииФормыОбъектаДОПоОбъектуИС(ОбъектИС, Форма, Правило) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при изменении состояния согласования в ДО. Предназначена для изменения согласуемого объекта.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//
// Пример:
//	Если ВызовИзФормыОбъекта Тогда
//		Возврат;
//	КонецЕсли;
//
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//	
//		Объект = ПредметСогласования.ПолучитьОбъект();
//		Если Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НеСогласован;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован;
//		Иначе
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Подготовлен;
//		КонецЕсли;
//		Объект.Записать(РежимЗаписиДокумента.Запись);
//	
//	КонецЕсли;
//
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта) Экспорт
	
	
	
КонецПроцедуры

// Дополнительная обработка сообщения XDTO.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO, потомок DMILRequest.
//   Результат - ОбъектXDTO - неявно возвращаемое значение. Объект XDTO,
//     потомок DMILResponse, если сообщение считается обработанным.
//             - Неопределено - если сообщение требует дальнейшей обработки.
//
Процедура ПриОбработкеУниверсальногоСообщения(Сообщение, Результат) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО. При установке
// в параметр Результат значения, отличного от Неопределено, стандартное заполнение не выполняется.
//
// Параметры:
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ЗначениеЗаполнения - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//                      - Структура - структура со свойствами:
//     * ТипXDTOОбъекта - Строка - тип XDTO объекта, из значения свойства которого выполняется заполнение.
//     * ИмяСвойства - Строка - имя свойства, из значения свойства которого выполняется заполнение.
//     * ЗначениеСвойства - Произвольный - значение заполнения, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие - параметры выбора, где ключ - имя параметра вида "Отбор.Владелец",
//     а значение - значение параметра (отбора).
//
// Пример:
//	Если ОбъектXDTO.Установлено("objectID")
//			И ОбъектXDTO.objectID.type = "DMDocumentStatus"
//			И ТипРеквизита = Тип("Булево")
//			И ИмяРеквизита = "Согласован" Тогда
//		Результат = (ОбъектXDTO.objectID.ID = "Согласован");
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоЕдиницыИзмерения")
//			И ПараметрыВыбора <> Неопределено Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоЕдиницыИзмерения
//			|ГДЕ
//			|	Владелец = &Владелец
//			|	И Наименование = &Наименование
//			|");
//		Запрос.УстановитьПараметр("Наименование", ОбъектXDTO.name);
//		Запрос.УстановитьПараметр("Владелец", ПараметрыВыбора["Отбор.Владелец"]);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоБанковскиеСчета")
//			И ОбъектXDTO.Свойства().Получить("number") <> Неопределено
//			И ОбъектXDTO.Установлено("number") Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоБанковскиеСчета
//			|ГДЕ
//			|	НомерСчета = &НомерСчета
//			|");
//		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ЗначениеЗаполнения, ТипРеквизита, ИмяРеквизита,
		ТипОбъекта, Объект, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено,
		ПараметрыВыбора = Неопределено) Экспорт
	
	// БольничнаяАптека
	Если ТипРеквизита = Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
			
			Если ЗначениеЗаполнения.objectId.id = "ЮрЛицо" Тогда
				Результат = Перечисления.ЮрФизЛицо.ЮрЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.objectId.id = "ЮрЛицоНеРезидент" Тогда
				Результат = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
				
			ИначеЕсли ЗначениеЗаполнения.objectId.id = "ФизЛицо" Тогда
				Результат = Перечисления.ЮрФизЛицо.ФизЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.objectId.id = "ИндивидуальныйПредприниматель" Тогда
				Результат = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеЗаполнения) = Тип("Структура") Тогда
			
			Если ЗначениеЗаполнения.ЗначениеСвойства = "LglPerson" Тогда
				Результат = Перечисления.ЮрФизЛицо.ЮрЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "LglPersonNonResident" Тогда
				Результат = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "Individ" Тогда
				Результат = Перечисления.ЮрФизЛицо.ФизЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "IndividualEntrepreneur" Тогда
				Результат = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Контрагенты")
			И ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "correspondent") Тогда
			КонтрагентXDTO = ЗначениеЗаполнения.correspondent;
		Иначе
			КонтрагентXDTO = ЗначениеЗаполнения;
		КонецЕсли;
		
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
			КонтрагентXDTO.objectID.ID,
			КонтрагентXDTO.objectID.type,
			ТипРеквизита);
		
		Если Результат = Неопределено Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			СсылкаПоИдентификатору = Справочники.Контрагенты.ПолучитьСсылку(
				Новый УникальныйИдентификатор(КонтрагентXDTO.objectID.ID));
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Ссылка
				|ИЗ
				|	Справочник.Контрагенты
				|ГДЕ
				|	Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда // контрагент найден
				
				Результат = Выборка.Ссылка;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "name")
					И КонтрагентXDTO.name <> "" Тогда
				
				// продолжим поиск по ИНН/КПП
				
				Наименование = КонтрагентXDTO.name;
				ИНН = "";
				КПП = "";
				
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "inn") Тогда
					ИНН = КонтрагентXDTO.inn;
				КонецЕсли;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "kpp") Тогда
					КПП = КонтрагентXDTO.kpp;
				КонецЕсли;
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Контрагенты.Ссылка КАК Ссылка,
					|	0 КАК Приоритет
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И &КПП <> """"
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.КПП = &КПП
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	1
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	2
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&КПП <> """"
					|	И (&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И Контрагенты.КПП = &КПП
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	3
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	4
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	(&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	Приоритет");
				Запрос.УстановитьПараметр("ИНН", ИНН);
				Запрос.УстановитьПараметр("КПП", КПП);
				Запрос.УстановитьПараметр("Наименование", Наименование);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда // контрагент найден
					
					Результат = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ЗначениеЗаполнения.objectId.type = "DMBankAccount"
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "number") Тогда
		Запрос = Новый Запрос;
		МассивТекстЗапроса = Новый Массив;
		Если ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
			МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета
				|	И НЕ БанковскиеСчета.ПометкаУдаления");
		ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
			МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета
				|	И НЕ БанковскиеСчета.ПометкаУдаления");
		Иначе
			Возврат;
		КонецЕсли;
		Запрос.УстановитьПараметр("НомерСчета", ЗначениеЗаполнения.number);
		
		Банк = Неопределено;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "bank") Тогда
			Банк = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
				ЗначениеЗаполнения.bank,
				Тип("СправочникСсылка.КлассификаторБанков"));
		КонецЕсли;
		Если ЗначениеЗаполнено(Банк) Тогда
			МассивТекстЗапроса.Добавить("И БанковскиеСчета.Банк = &Банк");
			Запрос.УстановитьПараметр("Банк", Банк);
		КонецЕсли;
		
		Владелец = Неопределено;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "owner") Тогда
			ТипВладельца = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ТипИС(
				ЗначениеЗаполнения.owner.objectId.type);
			Если ЗначениеЗаполнено(ТипВладельца) Тогда
				Владелец = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
					ЗначениеЗаполнения.owner,
					ТипВладельца);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			МассивТекстЗапроса.Добавить("И БанковскиеСчета.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		
		Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Символы.ПС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение состояния согласования
	
	Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ЗначениеЗаполнения.Установлено("objectId")
			И ЗначениеЗаполнения.objectId.type = "DMDocumentStatus" Тогда
		
		СостояниеДО = ЗначениеЗаполнения.objectId.id;
		
	ИначеЕсли ТипЗнч(ЗначениеЗаполнения) = Тип("Структура")
			И ЗначениеЗаполнения.ТипXDTOОбъекта = "DMDocument"
			И ЗначениеЗаполнения.ИмяСвойства = "statusApproval" Тогда
		
		Если ЗначениеЗаполнения.ЗначениеСвойства = "Approved" Тогда
			СостояниеДО = "Согласован";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "NotApproved" Тогда
			СостояниеДО = "НеСогласован";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "AwaitingApproval" Тогда
			СостояниеДО = "НаСогласовании";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "AwaitingConfirmation" Тогда
			СостояниеДО = "НаУтверждении";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "NotConfirmed" Тогда
			СостояниеДО = "НеУтвержден";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "Confirmed" Тогда
			СостояниеДО = "Утвержден";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "AwaitingPerformance" Тогда
			СостояниеДО = "НаИсполнении";
		ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "Performed" Тогда
			СостояниеДО = "Исполнен";
		Иначе
			// Состояние согласования в ДО не известно. Оставим прежнее значение реквизита.
			Результат = Объект[ИмяРеквизита];
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБольничнаяАптека.СостояниеСогласования(
		ТипРеквизита,
		ИмяРеквизита,
		ТипОбъекта,
		СостояниеДО);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Позволяет переопределить индекс картинки элемента справочника.
//
// Параметры:
//   ИндексаКартинки - Число - индекс картинки.
//
Процедура ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексаКартинки) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить проверку необходимости вывода команды присоединенных файлов из библиотеки
// интеграции с 1С:Документооборотом на форму объекта ИС.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма.
//   Результат - Булево - неявно возвращаемое значение, результат проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
// Пример:
//	ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
//	ИмяТипаОбъектаФормы = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
//	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//	
//	Если Правила.Количество() = 0 Тогда
//		// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
//		СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
//			ИмяТипаОбъектаФормы);
//		Если СозданныеПравила.Количество() > 0 Тогда
//			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Результат = (Правила.Количество() <> 0);
//
Процедура ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(Форма, Результат,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Определяет реквизиты проведенного документа, подлежащие обновлению при их изменении в ДО.
//
// Параметры:
//   ПолноеИмя - Строка - полное имя объекта, как оно задано в метаданных, напр., Документ.ЗаказКлиента.
//   ОбновляемыеРеквизиты - Массив - неявно возвращаемое значение, имена реквизитов, обновление которых возможно.
//
// Пример:
//	ОбновляемыеРеквизиты.Добавить("Комментарий");
//	Если ПолноеИмя = "Документ.ЗаказКлиента" Тогда
//		ОбновляемыеРеквизиты.Добавить("Состояние");
//	КонецЕсли;
//
Процедура ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(ПолноеИмя, ОбновляемыеРеквизиты) Экспорт
	
	// БольничнаяАптека
	ОбновляемыеРеквизиты.Добавить("Комментарий");
	ОбновляемыеРеквизиты.Добавить("Статус");
	ОбновляемыеРеквизиты.Добавить("Согласован");
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при построении списка интегрируемых объектов. В переданную таблицу следует добавить
// типы объектов, поддерживающих автоматическую настройку бесшовной интеграции с созданием правил
// интеграции и заполнением связанных данных.
//
// Параметры:
//   Объекты - ТаблицаЗначений - заполняемая таблица с колонками:
//     ИмяТипаОбъекта - Строка - полное имя типа, как задано в метаданных.
//     ОписаниеВыполняемыхДействий - Строка - необязательна, краткое описание действий, выполняемых
//        при автоматической настройке.
//
// Пример:
//	Строка = Объекты.Добавить();
//	Строка.ИмяТипаОбъекта = "Справочник._ДемоДоговорыКонтрагентов";
//	Строка.ОписаниеВыполняемыхДействий =
//		НСтр("ru = 'Будут созданы правила интеграции и виды внутренних документов для всех видов договоров.'");
//
Процедура ПриОпределенииОбъектовПоддерживающихАвтонастройку(Объекты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении связи к объекту ИС, связанному с объектом ДО.
// Позволяет дополнить список подходящих объектов, предъявляемый пользователю,
// теми объектами, которые не могут быть определены автоматически по ссылкам
// из шапки или из табличных частей объекта ИС.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   ПодходящиеОбъекты - Массив - дополняемый массив объектов ИС, подходящих для добавления связи.
//
Процедура ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(ОбъектИС, ПодходящиеОбъекты) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение пояснения к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//   Пояснение - Строка - пояснение к состоянию согласования.
//
Процедура ПриОпределенииПоясненияСостоянияСогласования(Установил, ДатаУстановки, Пояснение) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//   ПредельноеКоличество - Число - предельное количество элементов, выбираемых за раз.
//
// Пример:
//	Если Тип = "DMCorrespondent" Тогда ПредельноеКоличество = 50 ИначеЕсли <...>
//
Процедура ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(Тип, ПредельноеКоличество) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить предельное количество объектов, которые будут выгружены в сообщение
// обмена с 1С:Документооборот.
//
// Параметры:
//   ПредельноеКоличествоОбъектовВСообщении - Число - предельное количество объектов.
//
// Пример:
//	ПредельноеКоличествоОбъектовВСообщении = 100
//
Процедура ПриОпределенииПредельногоКоличестваОбъектовВСообщенииОбмена(ПредельноеКоличествоОбъектовВСообщении) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление вида объекта интегрируемой конфигурации.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом
//           - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3 - правило, для которого
//     определяется представление.
//   ПредставлениеВидаОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             вида объекта. По умолчанию определяется как представление объекта с ключевыми реквизитами.
//
// Пример:
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары (накладная)'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияВидаОбъектаПотребителя(Правило, ПредставлениеВидаОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление объекта интегрируемой конфигурации. Используется, если стандартное
// представление из синонима и ключевых реквизитов через запятую оказывается недостаточно читабельным.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом
//           - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3 - правило, для которого
//     определяется представление.
//   ПредставлениеОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             объекта. По умолчанию собирается из синонима объекта и значений ключевых реквизитов правила.
//
// Пример:
//
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление товаров'");
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияОбъектаПотребителя(Правило, ПредставлениеОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение доступности интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Разрешено - Булево - Истина, если использование интеграции разрешено.
//
Процедура ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности запуска согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено - Булево - Истина, если запуск согласования разрешен, Ложь - запрещен, Неопределено - согласно ролям.
//
// Пример:
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//		Если ПредметСогласования.Состояние <> Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании Тогда
//			ТекстПредупреждения = НСтр("ru = 'Создание процесса согласования разрешено только на основании
//				|документов в состоянии ""На согласовании"".'");
//			Разрешено = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииРазрешенияПользователяНаЗапускСогласования(ПредметСогласования, ТекстПредупреждения,
		Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности прерывания согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ПредметДО - Структура - описание связанного объекта ДО:
//      name - Строка - представление связанного объекта.
//      ID - Строка - идентификатор связанного объекта.
//      type - Строка - имя типа XDTO.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено- Булево - Истина, если прерывание согласования разрешено, Ложь - запрещено, Неопределено - согласно ролям.
//
Процедура ПриОпределенииРазрешенияПользователяНаПрерываниеСогласования(ПредметСогласования, ПредметДО,
		ТекстПредупреждения, Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Уточняет сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Параметры:
//   СокращенноеНаименование - Строка - неявно возвращаемое значение, краткое название конфигурации.
//
// Пример:
//   СокращенноеНаименование = НСтр("ru = '1С:ERP УП'");
//
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	// БольничнаяАптека
	СокращенноеНаименование = НСтр("ru = '1С:Медицина. БА'");
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при определении таймаута веб-сервиса. При необходимости таймаут может быть вынесен в
// настройки администратора интеграции и переопределен в этой процедуре.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, время в секундах, по истечении которого вызов
//     веб-сервиса Документооборота считается неудачным.
//
Процедура ПриОпределенииТаймаутаСервиса(Таймаут) Экспорт
	
	// БольничнаяАптека
	Таймаут = 60;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Переопределяет типы объектов ИС, поддерживающие бесшовную интеграцию. По умолчанию заполняется всеми
// типами, входящими в состав типов параметров общих команд подсистемы ИнтеграцияС1СДокументооборотом.
//
// Параметры:
//   Типы - Массив из Тип - массив объектов типа Тип.
//
Процедура ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение штрихкода документа для присвоения связанному документу ДО.
//
// Параметры:
//   Документ - ЛюбаяСсылка - объект ИС, на основании которого создается документ ДО.
//   Штрихкод - Строка - штрихкод для присвоения связанному документу ДО.
//
// Пример:
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
//		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
//		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
//		Результат = 0;
//		Для НомерСимвола = 1 По ДлинаСтроки Цикл
//			Результат = Результат * 16 + Найти("0123456789abcdef",
//				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
//		КонецЦикла;
//		Штрихкод = Формат(Результат, "ЧГ=0");
//	Иначе
//		Штрихкод = "";
//	КонецЕсли;
//
Процедура ПриОпределенииШтрихкодаДокумента(Документ, Штрихкод) Экспорт
	
	// БольничнаяАптека
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
		Результат = 0;
		Для НомерСимвола = 1 По ДлинаСтроки Цикл
			Результат = Результат * 16 + Найти("0123456789abcdef", Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
		КонецЦикла;
		Штрихкод = Формат(Результат, "ЧГ=0");
	Иначе
		Штрихкод = "";
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при получении WSПрокси. Переопределяется, если в конфигурации есть возможность настройки интернет-прокси.
//
// Параметры:
//   ИнтернетПрокси - Неопределено - неявно возвращаемое значение, может быть инициализировано значением
//     типа ИнтернетПрокси.
//
Процедура ПриПолученииWSПрокси(ИнтернетПрокси) Экспорт
	
	// БольничнаяАптека
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Позволяет переопределить или дополнить список зависимых друг от друга констант. Необходимо, когда при
// включении одной константы, какие-либо другие константы должны выключаться и наоборот.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант()
//
// Пример:
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуТаблицыЗависимостиКонстант(
//		ТаблицаКонстант,
//		"ИспользоватьСогласованиеЧерез1СДокументооборот",
//		Истина,
//		"ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов",
//		Ложь);
//
Процедура ПриПолученииТаблицыЗависимостиКонстант(ТаблицаКонстант) Экспорт
	
	// БольничнаяАптека
	// Механизм удаляет зависимости неиспользуемых родительских констант, если есть аналогичная зависимость у используемых родительских констант.
	// Удаление нужно для механизма ОбщегоНазначенияБольничнаяАптекаСобытия.ПроконтролироватьЗначенияРодительскихКонстантПередЗаписью.
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяРодительскойКонстантыОсновныхЗависимостей = Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот3.Имя;
		ИмяРодительскойКонстантыУдаляемыхЗависимостей = Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя;
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяРодительскойКонстантыОсновныхЗависимостей = Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот.Имя;
		ИмяРодительскойКонстантыУдаляемыхЗависимостей = Метаданные.Константы.ИспользоватьИнтеграциюС1СДокументооборот3.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗависимостиКонстантОсновные = ТаблицаКонстант.НайтиСтроки(Новый Структура("ИмяРодительскойКонстанты", ИмяРодительскойКонстантыОсновныхЗависимостей));
	ЗависимостиКонстантУдаляемые = ТаблицаКонстант.НайтиСтроки(Новый Структура("ИмяРодительскойКонстанты", ИмяРодительскойКонстантыУдаляемыхЗависимостей));
	Для Каждого СтрокаОсновнойЗависимости Из ЗависимостиКонстантОсновные Цикл
		Граница = ЗависимостиКонстантУдаляемые.ВГраница();
		Для Индекс = 0 По Граница Цикл
			СтрокаУдаляемойЗависимости = ЗависимостиКонстантУдаляемые[Граница - Индекс];
			Если СтрокаОсновнойЗависимости.ИмяПодчиненнойКонстанты = СтрокаУдаляемойЗависимости.ИмяПодчиненнойКонстанты Тогда
				ТаблицаКонстант.Удалить(СтрокаУдаляемойЗависимости);
				ЗависимостиКонстантУдаляемые.Удалить(Граница - Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Позволяет переопределить получение JWT-токена для авторизации в веб-сервисе Документооборота.
//
// Параметры:
//   ТекстТокенаДоступа - Строка - неявно возвращаемое значение, JWT-токен строкой.
//
// Пример:
//	ТокенДоступа = Новый ТокенДоступа;
//	ПараметрыТокена = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыТокенаДоступа();
//	ЗаполнитьЗначенияСвойств(ТокенДоступа, ПараметрыТокена);
//	КлючПодписиТокена = Константы.КлючПодписиТокенаДоступа1СДокументооборот.Получить();
//	ТокенДоступа.Подписать(АлгоритмПодписиТокенаДоступа.HS256, КлючПодписиТокена);
//	ТекстТокенаДоступа = Строка(ТокенДоступа);
//
Процедура ПриПолученииТокенаДоступа(ТекстТокенаДоступа) Экспорт
	
	
	
КонецПроцедуры

// Проверяет соответствие правила интеграции функциональным опциям. Вызывается при выборе подходящего правила
// и позволяет отказаться от правил, связанных с объектами, выключенными по ФО.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - проверяемое правило.
//   ТипОбъектаДО - Строка - Тип объекта ДО.
//   ТипОбъектаИС - Строка - Тип объекта ИС (полное имя в метаданных).
//   Отказ - Булево - при установке в Истина правило не будет использоваться.
//   ИмяКлючевогоРеквизита - Строка - имя ключевого реквизита правила.
//   ЗначениеКлючевогоРеквизита - Произвольный - значение ключевого реквизита правила.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ПоступлениеНМА"
//		И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//
Процедура ПриПроверкеСоответствияПравилаФункциональнымОпциям(Правило, ТипОбъектаДО, ТипОбъектаИС, Отказ,
		ИмяКлючевогоРеквизита = "", ЗначениеКлючевогоРеквизита = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление формы выбора правила интеграции. Используется при неоднозначности правил и
// позволяет предложить пользователю менее техногенную форму выбора.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма ВыборПравила обработки ИнтеграцияС1СДокументооборот.
//
// Пример:
//	Форма.Заголовок = НСтр("ru = 'Форма документа'");
//	Форма.Автозаголовок = Ложь;
//	Форма.Пояснение = НСтр("ru = 'Выберите вид документа:'");
//	Форма.Элементы.Пояснение.Видимость = Истина;
//
Процедура ПриСозданииНаСервереФормыВыбораПравила(Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО. Может использоваться для
// дозаполнения реквизитов нового объекта ИС, например, если стандартный обработчик заполнения не
// заполняет обязательные реквизиты по умолчанию.
//
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//   ЗаполняемыйОбъектИС - Произвольный - объект ИС, в ходе заполнения которого вызывается создание
//     ОбъектИС по ссылке. Обеспечивает контекст, необходимый для заполнения ОбъектИС.
//
// Пример:
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоОрганизации") Тогда
//		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//		Если ОбъектXDTO.objectID.type = "DMOrganization"
//				И ОбъектXDTO.objectID.ID = "ИндивидуальныйПредприниматель" Тогда
//			ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоБанковскиеСчета")
//			И ОбъектXDTO.objectID.type = "DMBankAccount" Тогда
//		ОбъектИС.НомерСчета = ОбъектXDTO.number;
//	КонецЕсли;
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС = Неопределено) Экспорт
	
	// БольничнаяАптека
	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации")
			Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ИсточникXDTO = Неопределено;
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
				ИсточникXDTO = ОбъектXDTO.correspondent;
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "organization") Тогда
				ИсточникXDTO = ОбъектXDTO.organization;
			КонецЕсли;
			
		ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization") Тогда
			ИсточникXDTO = ОбъектXDTO;
			
		КонецЕсли;
		
		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		Если ИсточникXDTO <> Неопределено Тогда
			
			Если ИсточникXDTO.Установлено("legalPrivatePerson") Тогда
				
				Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
				
				Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
					
					Если ИсточникXDTO.legalPrivatePerson.objectId.id = "ИндивидуальныйПредприниматель" Тогда //@NON-NLS-1
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
						
					ИначеЕсли ИсточникXDTO.legalPrivatePerson.objectId.id = "ЮрЛицоНеРезидент" Тогда //@NON-NLS-1
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
						
					ИначеЕсли ИсточникXDTO.legalPrivatePerson.objectId.id = "ФизЛицо" Тогда //@NON-NLS-1
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
						
					КонецЕсли;
					
				ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
					
					Если ИсточникXDTO.legalPrivatePerson = "Individ" Тогда
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
						
					ИначеЕсли ИсточникXDTO.legalPrivatePerson = "LglPersonNonResident" Тогда
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
						
					ИначеЕсли ИсточникXDTO.legalPrivatePerson = "IndividualEntrepreneur" Тогда
						ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбъектИС.ИНН = ИсточникXDTO.inn;
			ОбъектИС.КПП = ИсточникXDTO.kpp;
			ОбъектИС.КодПоОКПО = ИсточникXDTO.okpo;
			ОбъектИС.НаименованиеПолное = ИсточникXDTO.fullName;
			
		КонецЕсли;
		
	ИначеЕсли (ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ПодразделенияОрганизаций")
				Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ОтделенияОрганизаций"))
			И ЗаполняемыйОбъектИС <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ЗаполняемыйОбъектИС.Метаданные())
		   И ЗначениеЗаполнено(ЗаполняемыйОбъектИС.Организация) Тогда
			ОбъектИС.Владелец = ЗаполняемыйОбъектИС.Организация;
		Иначе
			ОбъектИС.Владелец = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектXDTO.objectId.type = "DMPrivatePerson"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "birthDay") Тогда
			ОбъектИС.ДатаРождения = ОбъектXDTO.birthDay;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.objectId.type = "DMBank"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.КлассификаторБанков") Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "BIC") Тогда
			ОбъектИС.Код = ОбъектXDTO.BIC;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.objectId.type = "DMBankAccount"
			И (ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.БанковскиеСчетаКонтрагентов")
				Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.БанковскиеСчетаОрганизаций")) Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "bank") Тогда
			ОбъектИС.Банк = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
				ОбъектXDTO.bank,
				Тип("СправочникСсылка.КлассификаторБанков"));
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
			ОбъектИС.НомерСчета = ОбъектXDTO.number;
		КонецЕсли;
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при выгрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - имя XDTO-типа приемника.
//   Источник - Строка - полное имя объекта метаданных-источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов с планом обмена.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов между собой.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает доступные для выбора режимы изменения реквизита в проведенном документе.
//
// Параметры:
//   ТипОбъектаИС - Строка - представление типа объекта интегрированной системы.
//   РеквизитИС - Строка - представление реквизита интегрированной системы.
//   СписокВыбора - СписокЗначений - доступные значения режимов изменения реквизита.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ЗаказКлиента" И РеквизитИС = "Статус" Тогда
//		СписокВыбора.Очистить();
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
//	КонецЕсли;
//
Процедура УстановитьРежимыИзмененияВПроведенномДокументе(ТипОбъектаИС, РеквизитИС, СписокВыбора) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти