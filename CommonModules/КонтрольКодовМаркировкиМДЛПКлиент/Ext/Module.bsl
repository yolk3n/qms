
#Область ПрограммныйИнтерфейс

// Проверяет, подключен ли механизм проверки КМ к форме объекта.
// (см. КонтрольКодовМаркировкиМДЛП.ПодключитьМеханизмПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
// Возвращаемое значение:
//  Истина, если механизм проверки КМ подключен к форме объекта.
//
Функция МеханизмПроверкиКМПодключен(Форма) Экспорт
	
	Возврат КонтрольКодовМаркировкиМДЛПКлиентСервер.МеханизмПроверкиКМПодключен(Форма);
	
КонецФункции

// Проверяет, используется ли механизм проверки КМ в форме объекта.
// Механизм может быть подключен, но не использоваться, если запрещено использование.
// (см. КонтрольКодовМаркировкиМДЛП.ПодключитьМеханизмПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
// Возвращаемое значение:
//  Истина, если механизм проверки КМ используется в форме объекта.
//
Функция МеханизмПроверкиКМИспользуется(Форма) Экспорт
	
	Возврат КонтрольКодовМаркировкиМДЛПКлиентСервер.МеханизмПроверкиКМИспользуется(Форма);
	
КонецФункции

#Область ОбработчикиСобытийФормы

// Запускает выполнение проверки КМ на форме документов библиотеки МДЛП или документов имеющих структуру подобную документам библиотеки МДЛП.
// Для выполнения проверки КМ на форме объектов не имеющих структуру подобную документам библиотеки МДЛП
// необходимо использовать процедуру НачатьПроверкуКМ.
//
Процедура НачатьПроверкуКМНаФорме(Форма, Объект, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиентПереопределяемый.НачатьПроверкуКМНаФорме(Форма, Объект, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
			
			ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП")
			 Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
				
				НачатьПроверкуКМНаФормеПоУмолчанию(Форма, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД);
				
			Иначе
				
				НачатьПроверкуКМНаФормеПоУмолчанию(Форма, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выборочного контроля из формы владельца.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
Процедура ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельца(Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиентПереопределяемый.ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельца(Форма, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "НомераУпаковок") Тогда
			
			ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельцаПоУмолчанию(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапускПроверкиКМ

// Возвращает параметры, необходимые для выполнения проверки КМ на форме объекта.
// (см. КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.ПараметрыПроверкиКМ
// КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.ПараметрыПроверкиКМ
// и КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.ПараметрыПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта, к которому подключен механизма проверки КМ.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для выполнения проверки КМ на форме объекта.
//   * КлючГруппыНастроекКонтроляКМ - ключ подключенных настроек проверки КМ (см. ПодключитьМеханизмПроверкиКМ).
//   * ОповещениеОЗавершении - ОписаниеОповещения - процедура в которую будет передан результат выполнения проверки КМ.
//
Функция ПараметрыПроверкиКМ(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КлючГруппыНастроекКонтроляКМ") Тогда
		КлючГруппыНастроекКонтроляКМ = Форма.КлючГруппыНастроекКонтроляКМ;
	Иначе
		КлючГруппыНастроекКонтроляКМ = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючГруппыНастроекКонтроляКМ", КлючГруппыНастроекКонтроляКМ);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении"       , Неопределено);
	
	// Параметры проверки средствами АПИ МДЛП
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.ПараметрыПроверкиКМ(Форма), Истина);
	
	// Параметры проверки средствами РВ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.ПараметрыПроверкиКМ(Форма), Истина);
	
	// Параметры проверки средствами ККТ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.ПараметрыПроверкиКМ(Форма), Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру элемента проверки КМ.
// (см. КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.ЭлементДанныхДляПроверкиКМ
// КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.ЭлементДанныхДляПроверкиКМ
// и КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.ЭлементДанныхДляПроверкиКМ)
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - описание элемента проверки КМ.
//
Функция ЭлементДанныхДляПроверки() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	// Параметры проверки средствами АПИ МДЛП
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.ЭлементДанныхДляПроверкиКМ(), Истина);
	
	// Параметры проверки средствами РВ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.ЭлементДанныхДляПроверкиКМ(), Истина);
	
	// Параметры проверки средствами ККТ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.ЭлементДанныхДляПроверкиКМ(), Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запускает выполнение проверки КМ на форме объекта.
// (см. КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.НачатьПроверкуКМ
// КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.НачатьПроверкуКМ
// и КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.НачатьПроверкуКМ).
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПроверкиКМ.
//
Процедура НачатьПроверкуКМ(Параметры) Экспорт
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Если Параметры.КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП Тогда
		ПараметрыПроверкиКМСредствамиАПИМДЛП = КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.ПараметрыПроверкиКМ(Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиКМСредствамиАПИМДЛП, Параметры);
		КонтрольКодовМаркировкиСредствамиАПИМДЛПКлиент.НачатьПроверкуКМ(ПараметрыПроверкиКМСредствамиАПИМДЛП);
	ИначеЕсли Параметры.КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ Тогда
		ПараметрыПроверкиКМСредствамиРВ = КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.ПараметрыПроверкиКМ(Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиКМСредствамиРВ, Параметры);
		КонтрольКодовМаркировкиСредствамиРВМДЛПКлиент.НачатьПроверкуКМ(ПараметрыПроверкиКМСредствамиРВ);
	ИначеЕсли Параметры.КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ Тогда
		ПараметрыПроверкиКМСредствамиККТ = КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.ПараметрыПроверкиКМ(Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиКМСредствамиККТ, Параметры);
		КонтрольКодовМаркировкиСредствамиККТМДЛПКлиент.НачатьПроверкуКМ(ПараметрыПроверкиКМСредствамиККТ);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачатьПроверкуКМНаФормеПоУмолчанию(Форма, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД)
	
	Если Не МеханизмПроверкиКМИспользуется(Форма) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершенииПроверкиКМ = Новый ОписаниеОповещения("ЗакончитьПроверкуКМНаФормеПоУмолчанию", ЭтотОбъект, ОповещениеОЗавершении);
	
	ПараметрыПроверкиКМ = ПараметрыПроверкиКМ(Форма);
	ПараметрыПроверкиКМ.ОповещениеОЗавершении = ОповещениеОЗавершенииПроверкиКМ;
	
	ПараметрыПроверкиКМ.Организация       = Форма.Объект.Организация;
	ПараметрыПроверкиКМ.МестоДеятельности = Форма.Объект.МестоДеятельности;
	
	ДанныеДляПроверки = Новый Массив;
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовПоТипам.НомераКиЗ Цикл
		
		ДанныеШтрихкода.ШтрихкодBase64 = СтрЗаменить(СтрЗаменить(ДанныеШтрихкода.ШтрихкодBase64, Символы.ПС, ""), Символы.ВК, "");
		
		ЭлементДанных = ЭлементДанныхДляПроверки();
		ЭлементДанных.КодМаркировки         = ДанныеШтрихкода.SGTIN;
		ЭлементДанных.ПолныйКодМаркировки   = ДанныеШтрихкода.ШтрихкодBase64;
		ЭлементДанных.ИдентификаторЭлемента = ДанныеШтрихкода.ШтрихкодBase64;
		
		ДанныеДляПроверки.Добавить(ЭлементДанных);
		
	КонецЦикла;
	ПараметрыПроверкиКМ.ДанныеДляПроверки = ДанныеДляПроверки;
	
	НачатьПроверкуКМ(ПараметрыПроверкиКМ);
	
КонецПроцедуры

Процедура ЗакончитьПроверкуКМНаФормеПоУмолчанию(РезультатПроверки, ОповещениеОЗавершении) Экспорт
	
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		
		НомераУпаковок = ОповещениеОЗавершении.ДополнительныеПараметры.НомераКиЗ;
		Для Каждого ДанныеШтрихкодаПриемник Из НомераУпаковок Цикл
			ДанныеШтрихкодаИсточник = РезультатПроверки.ДанныеПроверки[ДанныеШтрихкодаПриемник.ШтрихкодBase64];
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеШтрихкодаПриемник, ДанныеШтрихкодаИсточник, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельцаПоУмолчанию(Форма)
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельца_ПослеЗаписи", ЭтотОбъект, Форма);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, Форма, Ложь);
	
КонецПроцедуры

Процедура ОткрытьФормуВыборочногоКонтроляКМИзФормыВладельца_ПослеЗаписи(ЗаписаноУспешно, Форма) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	НомераУпаковокВыборочногоКонтроляКМ = Новый Массив;
	Для Каждого Строка Из Форма.Объект.НомераУпаковок Цикл
		НомераУпаковокВыборочногоКонтроляКМ.Добавить(Строка.НомерКИЗ);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверяемыйДокумент", Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("НомераУпаковок", НомераУпаковокВыборочногоКонтроляКМ);
	
	ОткрытьФорму("Обработка.ВыборочныйКонтрольКММДЛП.Форма.ВыборочныйКонтроль", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
