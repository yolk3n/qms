
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры:
//  СписокСведений - Структура - список значений со значениями параметров организации.
//                               (см. функцию СведенияОЮрФизЛице).
//  Список         - Строка - список запрашиваемых параметров организации
//  СПрефиксом     - Булево - признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование, ИНН, ЮридическийАдрес, Телефоны, НомерСчета, Банк, БИК, КоррСчет";
	КонецЕсли;
	
	// Перечень выводимых в описание реквизитов
	ВыводимыеРеквизиты = СтрРазделить(Список, ", ", Ложь);
	
	// Перечень реквизитов, которые идут как дополнение к "основным" реквизитам: НомерСчета
	ДополнительныеРеквизиты = Новый Структура("НомерСчета, Банк, БИК, КоррСчет");
	ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты, СписокСведений);
	
	// Пояснения к некоторым видам реквизитов, выводимые в описание
	ПрефиксыРеквизитов = Новый Структура;
	ПрефиксыРеквизитов.Вставить("ИНН"       , НСтр("ru = 'ИНН %1'"));
	ПрефиксыРеквизитов.Вставить("КПП"       , НСтр("ru = 'КПП %1'"));
	ПрефиксыРеквизитов.Вставить("Телефоны"  , НСтр("ru = 'тел.: %1'"));
	ПрефиксыРеквизитов.Вставить("НомерСчета", НСтр("ru = 'р/с [НомерСчета] в банке [Банк] БИК [БИК] к/с [КоррСчет]'"));
	ПрефиксыРеквизитов.Вставить("КодПоОКПО" , НСтр("ru = 'Код по ОКПО %1'"));
	ПрефиксыРеквизитов.Вставить("КодОКВЭД"  , НСтр("ru = 'Код ОКВЭД %1'"));
	
	Описание = "";
	ПрефиксРеквизита  = Неопределено;
	ЗначениеРеквизита = Неопределено;
	
	Для Каждого ИмяРеквизита Из ВыводимыеРеквизиты Цикл
		
		Если СПрефиксом И ДополнительныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить; // будет выведен вместе с "основным" реквизитом
		КонецЕсли;
		
		СписокСведений.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить; // или вообще нет такого реквизита, или он не заполнен
		КонецЕсли;
		
		Если СПрефиксом Тогда
			ПрефиксыРеквизитов.Свойство(ИмяРеквизита, ПрефиксРеквизита);
		КонецЕсли;
		
		Если СПрефиксом И ИмяРеквизита = "НомерСчета" Тогда
			
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ПрефиксРеквизита, ДополнительныеРеквизиты);
			
		ИначеЕсли ЗначениеЗаполнено(ПрефиксРеквизита) Тогда
			
			// У всех остальных реквизитов, кроме указанных выше, в префикс входит только один параметр
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита));
			
		Иначе
			
			ДополнениеОписания = СокрЛП(ЗначениеРеквизита);
			
		КонецЕсли;
		
		Описание = Описание + ?(ПустаяСтрока(Описание), "", ", ") + ДополнениеОписания;
		
	КонецЦикла;
	
	Возврат СокрЛП(Описание);
	
КонецФункции

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры:
//  ЮрФизЛицо                - СправочникСсылка.Организации, СправочникСсылка.Контрагенты
//                           - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода              - Дата - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Булево - для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет           - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - Структура - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт
	
	Сведения = Новый Структура("Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм,
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	
	Если ЗначениеЗаполнено(ЮрФизЛицо)
	   И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Реквизиты = Справочники.Контрагенты.ПолучитьРеквизитыКонтрагента(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			
		КонецЕсли;
		
		Сведения.Вставить("Представление"              , Реквизиты.Представление);
		Сведения.Вставить("СокращенноеНаименование"    , Реквизиты.Представление);
		Сведения.Вставить("ПолноеНаименование"         , Реквизиты.Наименование);
		Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
		Сведения.Вставить("ИНН"                        , Реквизиты.ИНН);
		Сведения.Вставить("КодПоОКПО"                  , Реквизиты.КодПоОКПО);
		Сведения.Вставить("ЮрФизЛицо"                  , Реквизиты.ЮрФизЛицо);
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
			Сведения.Вставить("Свидетельство"          , Реквизиты.Свидетельство);
			Сведения.Вставить("ОГРН"                   , Реквизиты.ОГРН);
		Иначе
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
			Сведения.Вставить("Свидетельство"          , "");
			Сведения.Вставить("СтранаРегистрации"      , Реквизиты.СтранаРегистрации);
		КонецЕсли;
		
		Если Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Сведения.Вставить("КПП", Реквизиты.КПП);
		Иначе
			Сведения.Вставить("КПП", "");
		КонецЕсли;
		
		Сведения.Вставить("Телефоны"        , ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо, ДатаПериода));
		
		Сведения.Вставить("НомерСчета"      , РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк"            , РеквизитыСчета.Банк);
		Сведения.Вставить("БИК"             , РеквизитыСчета.БИК);
		Сведения.Вставить("КоррСчет"        , РеквизитыСчета.КоррСчет);
		Сведения.Вставить("АдресБанка"      , РеквизитыСчета.АдресБанка);
		
		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический", ДатаПериода));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический", ДатаПериода));
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Функция находит актуальное значение адреса в контактной информации.
//
// Параметры:
//  Объект    - СправочникСсылка, объект контактной информации.
//  ТипАдреса - Строка - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "", Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагенты";
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание];
		ДатаСведений = ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата);
		Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Объект, ВидАдреса,, ДатаСведений);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция находит актуальное значение телефона в контактной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект, Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагенты";
		КонецЕсли;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание];
		ДатаСведений = ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата);
		Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Объект, ВидТелефона,, ДатаСведений);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
