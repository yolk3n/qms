////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентами: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормУчетныхДокументов

// см. ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаДокумента
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа, использующего ЭДО.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаДокумента
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт
	
	ИнтерфейсДокументовЭДО.ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// см. ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаСписка
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаСписка();
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы списка справочников и документов
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСписка.
//
Процедура ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере) Экспорт
	
	ИнтерфейсДокументовЭДО.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// см. ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаСправочника
//
Функция ПараметрыПриСозданииНаСервере_ФормаСправочника() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы справочника
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСправочника.
//
Процедура ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере) Экспорт

	ИнтерфейсДокументовЭДО.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Конструктор параметров процедуры см. ПриЧтенииНаСервере_ФормаДокумента
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаДокумента
//
Функция ПараметрыПриЧтенииНаСервере_ФормаДокумента() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаДокумента() 
	
КонецФункции

// Конструктор параметров процедуры см. ПриЧтенииНаСервере_ФормаСправочника
// 
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаСправочника.
//    * Форма - УправляемаяФорма - форма справочника.
//    * СправочникСсылка - СправочникСсылка
//    * КонтролерСостояниеЭДО - ЭлементФормы - элемент формы "декорация", "поле формы", в заголовке которого будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыПриЧтенииНаСервере_ФормаСправочника() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаСправочника();
	
КонецФункции

// Обработчик события "ПриЧтенииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - Структура - см. ПараметрыПриЧтенииНаСервере_ФормаДокумента.
//
Процедура ПриЧтенииНаСервере_ФормаДокумента(ПараметрыПриЧтенииНаСервере) Экспорт

	ИнтерфейсДокументовЭДО.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Обработчик события "ПриЧтенииНаСервере" формы справочника.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - Структура - см. ПараметрыПриЧтенииНаСервере_ФормаСправочника.
//
Процедура ПриЧтенииНаСервере_ФормаСправочника(ПараметрыПриЧтенииНаСервере) Экспорт

	ИнтерфейсДокументовЭДО.ПриЧтенииНаСервере_ФормаСправочника(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Конструктор параметров процедуры см. ПослеЗаписиНаСервере
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.ПараметрыПослеЗаписиНаСервере
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПослеЗаписиНаСервере();
	
КонецФункции

// Конструктор параметров процедуры см. ПослеЗаписиНаСервере для формы справочника
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.ПараметрыПослеЗаписиНаСервере_ФормаСправочника
//
Функция ПараметрыПослеЗаписиНаСервере_ФормаСправочника() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПослеЗаписиНаСервере_ФормаСправочника();
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ИнтерфейсДокументовЭДО.ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписиНаСервере" формы справочника
//
// Параметры:
//  СправочникОбъект - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере_ФормаСправочника.
//
Процедура ПослеЗаписиНаСервере_ФормаСправочника(СправочникОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ИнтерфейсДокументовЭДО.ПослеЗаписиНаСервере_ФормаСправочника(СправочникОбъект, ПараметрыЗаписи,
		ПараметрыПослеЗаписи);
	
КонецПроцедуры

// Конструктор параметров процедуры см. ПриИзмененииКлючевыхРеквизитовЭДО.
// Если ОписаниеОбъектаУчета оставить Неопределено, тогда оно будет получено по ДокументОбъект.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передать в процедуру ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
//    * Форма                 - УправляемаяФорма - Форма учетного документа.
//    * ДокументСсылка        - ДокументСсылка   - Ссылка на документ.
//    * ДокументОбъект        - ДокументОбъект   - Объект документа.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - контроллер состояния ЭДЛ.
//    * ГруппаСостояниеЭДО    - ГруппаФормы      - Группа, в которую входит "КонтроллерСостояниеЭДО".
//    * ОписаниеОбъектаУчета  - Неопределено, ТаблицаЗначений - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета.
//
Функция ПараметрыПриИзмененииКлючевыхРеквизитовЭДО() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыИзмененияКлючевыхРеквизитов();
	
КонецФункции

// Обработчик события "ПриИзменении" для полей документов,
// которые содержат значения "Организация", "Контрагент", "ДоговорКонтрагента".
//
// Параметры:
//  ПараметрыПриИзменении - Структура - см. ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО.
//
Процедура ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении) Экспорт
	
	ИнтерфейсДокументовЭДО.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении);
	
КонецПроцедуры

// см. ИнтерфейсДокументовЭДО.ПриПолученииДанныхНаСервере
//
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	ИнтерфейсДокументовЭДО.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

// Определяет отсутствие учетных записей ЭДО для переданной организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для проверки.
//  ТребуетсяПодключение - Булево - признак отсутствия учетных записей ЭДО.
//
Процедура ТребуетсяПодключениеЭДО(Знач Организация, ТребуетсяПодключение) Экспорт
	
	ТребуетсяПодключение = Не ОрганизацияПодключена(Организация);
	
КонецПроцедуры

// Проверяет необходимость переиздания указанного сертификата для использования в ЭДО.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для проверки.
//  Сертификат - СертификатКриптографии - сертификат для проверки.
//  ТребуетсяПереиздание - Булево - выходной параметр, признак необходимости переиздать сертификат для ЭДО.
//
Процедура ТребуетсяПереизданиеСертификатаЭДО(Знач Организация, Знач Сертификат, ТребуетсяПереиздание) Экспорт
	
	ИнтеграцияБРОЭДО.ТребуетсяПереизданиеСертификатаЭДО(Организация, Сертификат, ТребуетсяПереиздание);
	
КонецПроцедуры

// Инициализирует настройки подключения ЭДО.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для подключения ЭДО.
//  КодФНС - Строка - код налогового органа организации.
//  Настройки - Строка - инициализированные настройки.
//
Процедура ИнициализироватьНастройкиПодключенияЭДО(Знач Организация, Знач КодФНС, Настройки) Экспорт
	
	ИнтеграцияБРОЭДО.ИнициализироватьНастройкиПодключенияЭДО(Организация, КодФНС, Настройки);
	
КонецПроцедуры

// Инициализирует настройки переиздания сертификата криптографии.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для переиздания сертификата.
//  КодФНС - Строка - код налогового органа организации.
//  Сертификат - СертификатКриптографии - сертификат для переиздания.
//  Настройки - Строка - инициализированные настройки.
//
Процедура ИнициализироватьНастройкиПереизданияСертификатаЭДО(Знач Организация, Знач КодФНС, Знач Сертификат, Настройки) Экспорт
	
	ИнтеграцияБРОЭДО.ИнициализироватьНастройкиПереизданияСертификатаЭДО(Организация, КодФНС, Сертификат, Настройки);
	
КонецПроцедуры

// Проверяет корректность настроек операции ЭДО (подключение ЭДО, переиздание сертификата).
//
// Параметры:
//  Настройки - Строка - настройки для проверки.
//                       См. ИнициализироватьНастройкиПодключенияЭДО.
//                       См. ИнициализироватьНастройкиПереизданияСертификатаЭДО.
//  НастройкиКорректны - Булево - результат проверки настроек.
//
Процедура ПроверитьНастройкиРегистрацииЭДО(Знач Настройки, НастройкиКорректны) Экспорт
	
	ИнтеграцияБРОЭДО.ПроверитьНастройкиРегистрацииЭДО(Настройки, НастройкиКорректны);
	
КонецПроцедуры

// Заполняет адрес страницы с пользовательским соглашением.
//
// Параметры:
//  Адрес - Строка - строка для заполнения адреса.
//
Процедура АдресСтраницыСУсловиямиПодключения(Адрес) Экспорт
	
	Адрес = СинхронизацияЭДОКлиентСервер.СсылкаНаОписаниеСервисаЭДО();
	
КонецПроцедуры
 
// Выгружает электронные документы для предоставления в ФНС.
// Предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  УчетныеДокументы - Массив - массив ссылок на документы информационной базы.
//  УникальныйИдентификатор - УникальныйИдентификатор - будет использован для помещения файлов выгрузки во временное хранилище.
//
// Возвращаемое значение:
//  Соответствие - соответствие документов ИБ:
//    * Ключ     - ДокументСсылка - ссылка на документ-владелец электронного документа.
//    * Значение - Массив Из Структура - массив структур параметров электронных документов, с ключами:
//       * ТипФайла - Строка - возможные значения: "ФайлВыгрузки", "ЭЦП", "ФайлПодтверждения", "ЭЦППодтверждения".
//       * КНД      - Строка - КНД выгружаемого электронного документа, заполняется только для файла выгрузки и файла подтверждения.
//       * ИмяФайла - Строка - имя выгружаемого файла.
//       * АдресВременногоХранилища - Строка - адрес временного хранилища с данными файлов выгрузки.
//
Функция ВыгрузкаДокументовДляПередачиВФНС(УчетныеДокументы, УникальныйИдентификатор) Экспорт
	
	Возврат ИнтеграцияБРОЭДО.ВыгрузкаДокументовДляПередачиВФНС(УчетныеДокументы, УникальныйИдентификатор);
	
КонецФункции

// Получает свойства объектов учета, которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
// Для объекта учета должны существовать электронные документы по завершенным обменам, не помеченные на удаление и 
// имеющие один из следующих типов: СчетФактура, КорректировочныйСчетФактура, ТоварнаяНакладная, АктВыполненныхРабот.
//
// Параметры:
//  ОбъектыУчета - Массив - массив ссылок на объекты учета электронных документов.
//                       Если параметр указан, требуется заполнить свойства только указанных объектов.
//                       Если параметр не указан или массив пустой, тогда требуется заполнить свойства
//                       для всех объектов учета, по которым ЭДО завершен.
//
// Возвращаемое значение:
//   Соответствие - Соответствие объектов учета и видов электронных документов:
//    * Ключ     - ДокументСсылка - ссылка на документ учета.
//    * Значение - Строка - тип электронного документа, который следует преобразовать
//                 к строковому представлению определенного формата.
//                 Возможные значения: "АктПриемкиСдачиРабот", "СчетФактура", "КорректировочныйСчетФактура",
//                 "ТоварнаяНакладнаяТОРГ12".
Функция СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(ОбъектыУчета = Неопределено) Экспорт
	
	Возврат ИнтеграцияБРОЭДО.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(ОбъектыУчета);
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

// Возвращает упрощенный статус электронного документооборота по документу (учетному или электронному).
//
// Параметры:
//  Объект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект ИБ по которому нужно получить статус документооборота.
//  		 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.
//  		 - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 
// Возвращаемое значение:
//  Структура - описание статуса электронного документооборота:
//   * Статус - Строка - возможные значения:
//     "ЭДОНеНастроен"         - между участниками не завершена процедура настройки ЭДО.
//     "НеНачат"               - электронный документ по учетному не обнаружен.
//     "ВОбработке"            - охватывает время жизни исходящего электронного документа от создания до получения от
//                               контрагента решения (утверждения или отклонения).
//     "Получен"               - входящий электронный документ получен.
//     "ОтклонениеВОбработке"  - для входящих: документ отклонен, но уведомление не подписано или не отправлено.
//                               при аннулировании (и исходящих, и входящих): ответ по предложению об аннулированию
//                               еще не получен.
//     "Отклонен"              - документооборот завершен с отклонением.
//     "УтверждениеВОбработке" - входящий электронный документ утвержден, но ответный титул (ответная подпись)
//                               не подписан или не отправлен.
//     "Утвержден"             - документооборот успешно завершен.
//     "Ошибка"                - при проведении ЭДО произошла ошибка.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, 
//                           ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ. Если в
//                                          параметре "Документ" передан учетный документ, возвращается актуальный
//                                          для него электронный. Если передан электронный - возвращается та же ссылка.
//                           Неопределено - возвращается, если актуальный электронный документ отсутствует.
//
Функция СтатусДокументооборота(Объект) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Статус",              "НеНачат");
	Результат.Вставить("ЭлектронныйДокумент", Неопределено);
	
	ТекстСообщенияОбОшибкеВоВходящихПараметрах = НСтр("ru = 'Неверный первый параметр ""Объект"": 
		|- Значение должно быть ссылкой на электронный документ или объект, входящий в состав определяемого типа ""ОснованияЭлектронныхДокументов"".'");
	
	Документооборот = Неопределено;
	
	// Определим внутренний статус по классификации подсистемы.
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			
			// Передана ссылка на электронный документ.
			Документооборот = Объект;			
		ИначеЕсли ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов().ПривестиЗначение(Объект) = Объект Тогда
			// Передана ссылка объект учета.
			Документооборот = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект);
		Иначе
			ВызватьИсключение ТекстСообщенияОбОшибкеВоВходящихПараметрах;
		КонецЕсли;
	Иначе 
		ВызватьИсключение ТекстСообщенияОбОшибкеВоВходящихПараметрах;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документооборот) Тогда
		Результат.ЭлектронныйДокумент = Документооборот;
		Результат.Статус = ЭлектронныеДокументыЭДО.СтатусДокумента(Документооборот);
	Иначе
		// Актуального документооборота нет. Определим, есть ли настройки.
		Если ЭлектронныеДокументыЭДО.ДокументооборотНастроен(Объект) Тогда
			Результат.Статус = "НеНачат";
		Иначе
			Результат.Статус = "ЭДОНеНастроен";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 
// Возвращает сведения об электронном документе.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на исходящий электронный документ.
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на входящий электронный документ.
//
// Возвращаемое значение:
//  Структура - описание:
//   * ОписаниеВидаДокумента - Структура - описание:
//     * ТипДокумента - ПеречислениеСсылка.ВидыЭД - тип электронного документа.
//     * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - тип прикладного электронного документа.
//     * ИдентификаторКомандыПечати - Строка - идентификатор команды печати.
//   * Подписи- ТаблицаЗначений - таблица подписей с колонками:
//     * Подписант - СправочникСсылка.Пользователи - пользователь, установивший подпись.
//     * Дата - ДатаВремя - дата установки подписи.
//     * Владелец - Строка - владелец подписи.
//   * ОбъектыУчета - массив - массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - массив ссылок на объекты учета.
//   * Актуальный - Булево - признак того, что электронный документ является актуальным для указанных объектов учета.
//   * СодержитМаркируемыеТовары - Булево - Истина, если документ содержит информацию о маркируемых товарах.
//   * Сообщения - Структура - набор сведений об отдельных сообщениях ЭДО по документообороту электронного документа:
//     * ДанныеОтправителя - Структура - сведения о титуле отправителя:
//       * ИмяФайлаБезРасширения - Строка - имя файла сообщения без расширения.
//       * Расширение - Строка - расширение файла без точки.
//     * ДанныеПолучателя - Неопределено - если титул получателя отсутствует.
//                        - Структура - сведения о титуле получателя
//       * ИмяФайлаБезРасширения - Строка - имя файла сообщения без расширения.
//       * Расширение - Строка - расширение файла без точки.
//                 
Функция СведенияОбЭлектронномДокументе(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДО.СведенияСообщенияУчастникаЭДО(ЭлектронныйДокумент);
КонецФункции

// Возвращает данные переданного электронного документа в виде деревьев основных титулов.
//
// Параметры:
//	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// Возвращаемое значение:
// Структура:
//  * ДанныеОтправителя - Неопределено, Структура - структура данных, описывающая данные отправителя:
//    ** Формат - Произвольный - значение элемента структуры, возвращаемой см. ФорматыДокументов.
//    ** Содержание - ДеревоЗначений - дерево, сформированное по одному из макетов обработки
//                   ОбменСКонтрагентами, соответствующему формату электронного документа (информации отправителя).
//                  - Неопределено - в случае, если у документ имеет неформализованный формат.
//  * ДанныеПолучателя - Неопределено, Структура- структура данных, описывающая данные получателя:
//    ** Формат - Произвольный - значение элемента структуры, возвращаемой см. ФорматыДокументов.
//    ** Содержание - ДеревоЗначений - дерево, сформированное по одному из макетов обработки
//                   ОбменСКонтрагентами, соответствующему формату электронного документа (информации получателя).
//                  - Неопределено - в случае, если у документа нет титула получателя
Функция ДанныеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент);
	
КонецФункции

// Возвращает описания объектов учета, необходимые для формирования электронных документов.
// 
// Параметры:
// 	НаборОбъектовУчета - Массив - массив объектов учета, по которым формируются электронные документы.
// Возвращаемое значение:
//  ТаблицаЗначений - описания объектов, необходимые для формирования документов:
// * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * Направление - см. НаправленияДокументов
// * ТипДокумента - см. ТипыДокументов
// * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип документа 
// * Организация - ОпределяемыйТип.Организация - организация документа. 
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа. 
// * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор документа.  
Функция ОписанияОбъектовУчета(НаборОбъектовУчета) Экспорт
	
	Возврат ИнтеграцияЭДО.ОписанияОбъектовУчета(НаборОбъектовУчета);
	
КонецФункции

// Конструктор параметров визуализации электронного документа.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ВыводитьДопДанные - Булево - признак вывода доп. данных.
// * ВыводитьБанковскиеРеквизиты - Булево - признак вывода банковских реквизитов.
// * ВыводитьКопияВерна - Булево - признак вывода области "Копия верна".
// * ПодсказкаQRКода - Строка - подсказка, которая будет выводиться в QR-коде.
// * ПубличнаяСсылкаQRКода - Строка - ссылка, которая будет выводиться в QR-коде. 
Функция НовыеПараметрыВизуализацииЭлектронногоДокумента() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
		
КонецФункции

// Возвращает файл пакета электронного документа. Пакет соответствует формируемому при выполнении команды выгрузки электронного документа.
// 
// Параметры:
// 	ОписанияОбъектовУчета - см. ОписанияОбъектовУчета.
// 	ПараметрыВизуализацииОбъектовУчета - Соответствие - параметры формирования визуализации.
// 	 * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета
// 	 * Значение - см. НовыеПараметрыВизуализацииЭлектронногоДокумента
// Возвращаемое значение:
//  ТаблицаЗначений - данные для выгрузки документов:
// * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета
// * УникальныйИдентификатор - Строка
// * ДвоичныеДанныеПакета - ДвоичныеДанные - данные пакета.
// * ДвоичныеДанныеПредставления - ДвоичныеДанные - данные визуализации (табличного документа). 
// * ПолноеИмяФайла - Строка - полное имя основного файла электронного документа. 
// * ПолноеИмяДопФайла - Строка - полное имя дополнительного файла электронного документа (может отсутствовать).
// * Организация - ОпределяемыйТип.Организация - организация документа.
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа. 
// * Направление - см. НаправленияДокументов
// * ТипДокумента - см. ТипыДокументов 
// * Наименование - пользовательское представление электронного документа. 
// * Номер - Строка - номер документа
// * Дата - Дата - дата документа.
// * Сумма - Число - сумма документа.
Функция СформироватьДанныеДляВыгрузкиЭлектронныхДокументов(ОписанияОбъектовУчета, ПараметрыВизуализацииОбъектовУчета = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиИнтеграция.СформироватьДанныеДляВыгрузки(ОписанияОбъектовУчета, ПараметрыВизуализацииОбъектовУчета);
	
КонецФункции

// Добавляет тип электронного документа в коллекцию актуальных типов электронных документов. Используется для реализации
// метода см. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов.
//
// Параметры:
//  ИспользуемыеТипыДокументов - Соответствие - Коллекция типов актуальных электронных документов.
//  ТипДокумента			   - Произвольный - значение элемента структуры возвращаемой см. ТипыДокументов().
//  ИспользоватьДляВходящих	   - Булево - Использовать тип документа для входящих документов.
//  ИспользоватьДляИсходящих   - Булево - Использовать тип документа для исходящих документов.
//
Процедура ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипыДокументов, ТипДокумента, ИспользоватьДляВходящих = Истина, ИспользоватьДляИсходящих = Истина) Экспорт
	
	ИнтеграцияЭДО.ДобавитьАктуальныйТипДокумента(ИспользуемыеТипыДокументов, ТипДокумента, ИспользоватьДляВходящих, ИспользоватьДляИсходящих);
	
КонецПроцедуры

// Возвращает структуру, содержащую типы документов ЭДО, доступные к использованию. Следует использовать вместо прямого
// обращения к объектам метаданных библиотеки.
// 
// Возвращаемое значение:
//  Структура - Типы документов:
// * АктВыполненныхРабот - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктНаПередачуПрав - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктОРасхождениях - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктСверкиВзаиморасчетов - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДоговорнойДокумент - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗаказТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗапросКоммерческихПредложений - ПеречислениеСсылка.ТипыДокументовЭДО
// * КаталогТоваров - ПеречислениеСсылка.ТипыДокументовЭДО
// * КоммерческоеПредложение - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировочныйСчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтветНаЗаказ - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОПродажахКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОСписанииКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрайсЛист - ПеречислениеСсылка.ТипыДокументовЭДО
// * СоглашениеОбИзмененииСтоимости - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетНаОплату - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ТоварнаяНакладная - ПеречислениеСсылка.ТипыДокументовЭДО
// * РеквизитыОрганизации - ПеречислениеСсылка.ТипыДокументовЭДО
// * УПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * УКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктПриемкиСтроительныхРаботУслуг - ПеречислениеСсылка.ТипыДокументовЭДО
// * КонтрактЕИС - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * ВозвратТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПередачаТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * МашиночитаемаяДоверенность - ПеречислениеСсылка.ТипыДокументовЭДО
// * Внутренний - ПеречислениеСсылка.ТипыДокументовЭДО
// * РеквизитыОрганизации - ПеречислениеСсылка.ТипыДокументовЭДО
Функция ТипыДокументов() Экспорт
	
	Результат = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов();
	Результат.Вставить("Внутренний", Перечисления.ТипыДокументовЭДО.Внутренний);
	Результат.Вставить("РеквизитыОрганизации", Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации);
	Возврат Результат;
	
КонецФункции

// Возвращает доступные варианты формирования универсальных передаточных и корректировочных документов для первичных
// (накладных, актов), корректировочных (соглашение об изменении стоимости) документов и счетов-фактур. 
// 
// Возвращаемое значение:
//  Структура - контейнер доступных типов:
// * Обязательно - Произвольный - используется для указания необходимости формирования универсального документа вне
//                 зависимости от настроек, сделанных в интерфейсах библиотеки. Например, в случае, когда прикладное
//                 решение предоставляет опцию выбора варианта формирования передаточного документа самостоятельно.
//                 См. ОбменСКонтрагентамиПереопределяемый.ИспользованиеНастройкиФормированияУниверсальныхДокументов.
// * Запрещено - Произвольный - используется, когда по целевому объекту учета недопустимо формирование УПД или УКД
//                              (например, документ без НДС).  
// * Разрешено - Произвольный - используется, когда по целевому объекту учета допустимо формирование УПД или УКД как в
//                              статусе 1, так и в статусах 2 или 3.
Функция ВариантыФормированияУниверсальныхДокументов() Экспорт
	
	Возврат ИнтеграцияЭДО.ВариантыФормированияУниверсальныхДокументов();
	
КонецФункции

// Возвращает структуру, содержащую направления документов ЭДО, доступные к использованию. Следует использовать вместо прямого
// обращения к объектам метаданных библиотеки.
// 
// Возвращаемое значение:
// 	Структура - контейнер доступных типов:
// * Исходящий - Произвольный
// * Интеркампани - Произвольный
// * Входящий - Произвольный
// * Внутренний - Произвольный
Функция НаправленияДокументов() Экспорт

	Возврат ЭлектронныеДокументыЭДО.ДоступныеНаправленияДокументов();
	
КонецФункции

// Возвращает поддерживаемые библиотекой форматы электронных документов. Следует использовать вместо прямого обращения 
// к строковым идентификаторам форматов.
//
// Возвращаемое значение:
//  Структура - форматы:
//   * CML208 - Строка - идентификатор формата CML 2.08. См. макеты обработки ОбменСКонтрагентами: ЗаказТовара, 
//                       КаталогТоваров, ОтветНаЗаказ, ОтчетКомиссионераОПродажах, ОтчетКомиссионераОСписании, ПрайсЛист,
//                       РеквизитыОрганизации, СчетНаОплату
//   * CML402 - Строка - идентификатор формата CML 4.02. См. Обработка.ОбменСКонтрагентами.Макет.ПередачаВозвратТоваровМеждуОрганизациями 
//   * ФНС - Структура - форматы ФНС:
//    ** УПД - Структура - форматы УПД (ММВ-7-15/155@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                       См. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_5_01
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                          См. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_5_01
//    ** УПД2019 - Структура - форматы УПД 2019 (ММВ-7-15/820@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                        См. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_2019
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                        См. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_2019
//    ** УКД - Структура - форматы УКД (ММВ-7-15/189@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                        См. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПокупателя
//    ** УКД2020 - Структура - форматы УКД (ЕД-7-26/736@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_2020
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПокупателя_2020
//    ** ПередачаТоваров - Структура - форматы передачи товаров (ММВ-7-10/551@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Покупатель
//    ** ПередачаРабот - Структура - форматы передачи результатов работ (ММВ-7-10/552@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.Акт501_Заказчик
//    ** АктОРасхождениях - Структура - форматы документа о приемке и расхождениях (ММВ-7-15/423@):
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.АктОРасхождениях_2019
//    ** ТорговаяОперация - Структура - форматы торговой операции (ММВ-7-6/172@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Покупатель
//    ** ПриемкаСдачаРабот - Структура - форматы приемки-сдачи работ (ММВ-7-6/172@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.Акт501_Заказчик
//    ** СчетФактура - Строка - идентификатор формата счета-фактуры (ММВ-7-6/93@).
//                                         См. Обработка.ОбменСКонтрагентами.Макет.СчетФактура
//    ** КорректировочныйСчетФактура - Строка - идентификатор формата корректировочного счета-фактуры (ММВ-7-6/93@).
//                                         См. Обработка.ОбменСКонтрагентами.Макет.КорректировочныйСчетФактура
//    ** АктПриемкиСтроительныхРаботУслуг - Структура - ЕД-7-26/691@:
//     *** ИнформацияПодрядчика - Строка
//     *** ИнформацияЗаказчика - Строка
//   * КорректировочныйДокумент1С - Структура - формат корректировочного документа 1С:
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.СоглашениеОбИзмененииСтоимостиОтправитель
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.СоглашениеОбИзмененииСтоимостиПолучатель
//    ** АктСверкиВзаиморасчетов - Структура - форматы документа сверки взаиморасчетов (ЕД-7-26/405@):
//     *** ИнформацияОтправителя - Строка - идентификатор формата информации продавца.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.АктСверкиВзаиморасчетов_ИнформацияОтправителя
//     *** ИнформацияПолучателя - Строка - идентификатор формата информации покупателя.
//                                         См. Обработка.ОбменСКонтрагентами.Макет.АктСверкиВзаиморасчетов_ИнформацияПолучателя
//   * ПрикладнойФормат - Структура - форматы прикладных видов электронных документов:
//    ** ОсновнойДокумент - Строка - идентификатор основного документа.
//
Функция ФорматыДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
КонецФункции

// Получает текст запроса, выбирающий объекты учета, по которые ожидают формирования электронного документа.
// 
// Параметры:
// 	Отбор - Структура - описание отбора. Допустимо указание ключей: Организация, Контрагент.
// 	 * Ключ - идентификатор поля отбора. Допустимо указание ключей: Организация, Контрагент.
// 	 * Значение - имя параметра запроса, в котором будет передано значение отбора.
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы, в которую будет помещен результат выборки. Если указано, текст запроса
// 	                      будет оформлен как элемент пакета запросов, в противном случае - как выборка.
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - текст запроса, формирующий временную таблицу или выборку. Содержит поля:
//   - Ссылка - ссылка на объект учета.
Функция ТекстЗапросаОбъектовУчетаПодлежащихФормированиюЭлектронныхДокументов(Отбор = Неопределено, ИмяВременнойТаблицы = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СсылкаНаОбъект КАК Ссылка
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО
	|ГДЕ
	|	СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
	|	И &УсловиеОтбора";
	
	НаборУсловийОтбора = Новый Массив;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Для Каждого ЭлементОтбора Из Отбор Цикл
			НаборУсловийОтбора.Добавить(СтрШаблон("%1 В (&%2)", ЭлементОтбора.Ключ, ЭлементОтбора.Значение));
		КонецЦикла;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", СтрСоединить(НаборУсловийОтбора, " И "));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы) + "
		|;
		|
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайламиЭлектронныхДокументов

// Получает описание по переданному контейнеру электронного документа.
// 
// Параметры:
// 	ДвоичныеДанныеКонтейнера - ДвоичныеДанные
// Возвращаемое значение:
// 	Структура: 
// 	 * ДанныеОсновногоФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание основного файла.
// 	 * ДанныеФайлаДопДанных - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание файла дополнительных данных.
// 	 * ДанныеФайлаКартинок - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание файла картинок.
//   * Содержание - Структура:
//   	** ИдентификаторДокумента - Строка - идентификатор электронного документа.
//   	** ТипДокумента - см. ТипыДокументов 
//   	** ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//   	** НомерДокумента - Строка - номер документа
//   	** ДатаДокумента - Дата - дата документа
//   	** СуммаДокумента - Число - сумма документа
//   	** ЕстьМаркировка - Булево - если документ содержит маркируемые товары, параметр равен Истина
//   	** Отправитель - Структура - описание отправителя документа:
//   		*** Наименование - Строка - наименование организации-отправителя
//   		*** ИНН - Строка - ИНН организации-отправителя
//   		*** КПП - Строка - КПП организации-отправителя
//   	** Получатель - Структура:
//   		*** Наименование - Строка - наименование организации-получателя
//   		*** ИНН - Строка - ИНН организации-получателя
//   		*** КПП - Строка - КПП организации-получателя
//   	** Формат - см. ФорматыДокументов
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//   * СписокТипов - СписокЗначений - список, определяемый для типа документа в 
//                                    - см. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//                                    - см. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//
Функция ОписаниеКонтейнераЭлектронногоДокумента(ДвоичныеДанныеКонтейнера) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеКонтейнера;
	
	Возврат ОбменСКонтрагентамиИнтеграция.ОписаниеПакета(ОписаниеФайла);
	
КонецФункции

// Получает визуализацию формализованного электронного документа, содержащегося в файле.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
// 	ДвоичныеДанныеОсновногоФайла - ДвоичныеДанные - двоичные данные основного файла.
// 	ДвоичныеДанныеОтветногоФайла - ДвоичныеДанные - двоичные данные ответного файла (для 2-х титульных документов)
// 	ПараметрыВизуализации - см. НовыеПараметрыВизуализацииЭлектронногоДокумента.
// Возвращаемое значение:
// 	ТабличныйДокумент - табличный документ с визуализацией электронного документа.
//
Функция ПредставлениеЭлектронногоДокументаПоФайлу(ВидДокумента, ДвоичныеДанныеОсновногоФайла, 
	ДвоичныеДанныеОтветногоФайла = Неопределено, ПараметрыВизуализации = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(ВидДокумента, ДвоичныеДанныеОсновногоФайла, 
		ДвоичныеДанныеОтветногоФайла, ПараметрыВизуализации);
	
	Возврат Результат.ПредставлениеДокумента;
	
КонецФункции

// Формирует данные электронного документа в виде дерева.
// 
// Параметры:
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - двоичные данные файла электронного документа.
// Возвращаемое значение:
// 	Структура 
// 	 * ДеревоРазбора - ДеревоЗначений - дерево, содержащее распознанные ссылки на объекты базы данных
// 	 * ДеревоДанные - ДеревоЗначений - дерево, сформированное по одному из макетов обработки
//                   ОбменСКонтрагентами, соответствующему формату электронного документа.
Функция ДанныеЭлектронногоДокументаПоФайлу(ДвоичныеДанныеФайла) Экспорт
	
	ПараметрыПолученияДанных = ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
	ПараметрыПолученияДанных.ОсновнойФайл = РаботаСФайламиБЭД.НовоеОписаниеФайла(); 
	ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные = ДвоичныеДанныеФайла;
	ДанныеДокумента = ФорматыЭДО.ДанныеЭлектронногоДокумента(ПараметрыПолученияДанных);
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Получает данные номенклатуры документа, которая еще не сопоставлена.
// 
// Параметры:
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - электронный документ в двоичном виде.
// 	Контрагент - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
// Возвращаемое значение:
// 	Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
Функция ДанныеНесопоставленнойНоменклатурыДокументаПоФайлу(ДвоичныеДанныеФайла, Контрагент) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
	
	Возврат ОбменСКонтрагентамиИнтеграция.ДанныеНеСопоставленнойНоменклатурыДокумента(ОписаниеФайла, Контрагент);
		
КонецФункции


// Конструктор параметров отражения в учете
// 
// Возвращаемое значение:
//  Структура:
// * СпособОбработки - Строка - Возможные значения см. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
// * Отправитель - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента. 
// * Направление - см. НаправленияДокументов 
// * ДанныеДополнительногоФайла - ДвоичныеДанные 
// * ДанныеОсновногоФайла - ДвоичныеДанные
// * ТипДокумента - см. ТипыДокументов
Функция НовыеДанныеДокументаДляОтраженияВУчете() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента");
	Параметры.Вставить("ДанныеОсновногоФайла");
	Параметры.Вставить("ДанныеДополнительногоФайла");
	Параметры.Вставить("Направление");
	Параметры.Вставить("Отправитель");
	Параметры.Вставить("СпособОбработки");
	
	Возврат Параметры;
	
КонецФункции

// Отражает документ, полученный в виде файла, в учете.
// 
// Параметры:
//  ДанныеФайла - См. НовыеДанныеДокументаДляОтраженияВУчете
//  ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО, Неопределено - набор документов, в которые
//     нужно производить загрузку.
//  Отказ - Булево - будет установлена в Истина, если операция не удалась.
//
Процедура ЗагрузитьДокументИзФайла(ДанныеФайла, ОбъектыУчета, Отказ) Экспорт
	
	Если НЕ ДанныеФайла.Свойство("ДополнительныеДанные") Тогда
		ДанныеФайла.Вставить("ДополнительныеДанные", Новый Структура);
	КонецЕсли;
	ОбменСКонтрагентамиИнтеграция.ОтразитьВУчетеЭлектронныйДокумент(ДанныеФайла, ОбъектыУчета, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// Включает/выключает функционал ЭДО с контрагентами.
//
// Параметры:
//   Используется - Булево - выключить или выключить функционал ЭДО.
//
Процедура УстановитьИспользованиеЭДО(Используется = Истина) Экспорт
	
	НастройкиЭДО.УстановитьИспользованиеЭДО(Используется);
	
КонецПроцедуры

// Получает признак использования универсального передаточного документа между участниками ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - элемент справочника Организации.
//   Контрагент - ОпределяемыйТип.КонтрагентБЭД - элемент справочника Контрагенты;
//   ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - элемент справочника Договоры контрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального передаточного документа.
//
Функция ИспользованиеУниверсальногоПередаточногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	Возврат НастройкиЭДО.ИспользуетсяУПД_УКД(Организация, Контрагент, ДоговорКонтрагента).ИспользуетсяУПД;
	
КонецФункции

// Получает признак использования универсального корректировочного документа между участниками ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - элемент справочника Организации.
//   Контрагент - ОпределяемыйТип.КонтрагентБЭД - элемент справочника Контрагенты;
//   ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - элемент справочника Договоры контрагентов.
//
// Возвращаемое значение:
//   Результат - Булево - признак использования универсального корректировочного документа.
//
Функция ИспользованиеУниверсальногоКорректировочногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
	
	Возврат НастройкиЭДО.ИспользуетсяУПД_УКД(Организация, Контрагент, ДоговорКонтрагента).ИспользуетсяУКД;
	
КонецФункции

// Определяет состояние использования конфигурацией внутренних документов.
// 
// Возвращаемое значение:
// 	Булево - Истина, если внутренний ЭДО разрешено использовать
//
Функция РазрешеноИспользоватьВнутреннийЭДО() Экспорт
	
	Результат = Истина;
	Результат = ИнтеграцияЭДО.РазрешеноИспользоватьВнутреннийЭДО();
	
	Возврат Результат;
	
КонецФункции

// Получает актуальные настройки отправки внешних электронных документов по переданному объекту учета.
//
// Параметры:
//  ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор ссылок на объекты учета
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета из переданного массива.
//  * Значение - Структура - настройки с ключами:
//   ** Формировать - Булево - Истина, если настройками разрешено формировать электронный документ по данному учетному.
//   ** ТипДокумента - см. ТипыДокументов
//   ** Формат - Произвольный - один из ключей структуры, возвращаемой см.  ФорматыДокументов.
Функция НастройкиОтправки(ОбъектыУчета) Экспорт
	
	Результат = Новый Соответствие;
	
	НастройкиОтправки = ЭлектронныеДокументыЭДО.НастройкиОтправкиОбъектовУчета(ОбъектыУчета);
	
	Для Каждого ОписаниеНастройки Из НастройкиОтправки Цикл
		ДанныеНастройки = Новый Структура;
		ДанныеНастройки.Вставить("Формировать");
		ДанныеНастройки.Вставить("ТипДокумента");
		ДанныеНастройки.Вставить("Формат");
		ЗаполнитьЗначенияСвойств(ДанныеНастройки, ОписаниеНастройки.Значение);
		Результат.Вставить(ОписаниеНастройки.Ключ, ДанныеНастройки);
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

// Определяет, настроен ли электронный документооборот по переданным разрезам.
// 
// Параметры:
// 	ПараметрыДокументооборота - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета
// 	                          - ОпределяемыйТип.ОснованияЭлектронныхДокументовДокументОбъектЭДО  - объект базы данных
// 	                            	объекта учета (документа).
// 	                          - ОпределяемыйТип.ОснованияЭлектронныхДокументовСправочникОбъектЭДО  - объект базы данных
// 	                            	объекта учета (справочника).
// 	                          - Структура - параметры документооборота:
// 	                             * Организация - ОпределяемыйТип.Организация - организация
// 	                             * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент
// 	                             * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор с контрагентом
// 	                             * Направление - см. НаправленияДокументов
// 	                             * ТипДокумента - см. ТипыДокументов
// 	                             * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО -
// 	                             	прикладной тип электронного документа
// 	                             * ПолноеИмяМетаданных - Строка - полное имя метаданных объекта учета. Обязателен при
// 	                             	передаче ТипДокумента = ТипыДокументов().Внутренний. 
// Возвращаемое значение:
// 	Булево - Истина, если документооборот по переданному объекту учета или параметрам полностью настроен.
Функция ДокументооборотНастроен(ПараметрыДокументооборота) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ДокументооборотНастроен(ПараметрыДокументооборота);
	
КонецФункции

#КонецОбласти

#Область ПроверкаПравДоступа

// Возвращает признак наличия у пользователя прав на чтение настроек ЭДО.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоЧтенияНастройкиОбмена() Экспорт
	
	Возврат НастройкиЭДО.ЕстьПравоЧтенияНастройкиОбмена()
	
КонецФункции

// Возвращает признак наличия у пользователя прав на настройку ЭДО.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоНастройкиОбмена() Экспорт
	
	Возврат НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	
КонецФункции

// Возвращает признак наличия у пользователя прав на выполнение обмена электронными документами.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоВыполненияОбмена() Экспорт
	
	Возврат СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
КонецФункции

// Возвращает признак наличия у пользователя прав на добавление и изменение электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
КонецФункции

#КонецОбласти

#Область ТекущиеДелаЭДО

// Считает количество документов в разделе текущих дел ЭДО. В целях оптимизации подсчет ведется до 1000.
// В случае возврата числа 1000 рекомендуется считать, что документов более 999 (рекомендуется визуализировать как 999+).
// 
// Параметры:
// 	ПараметрыОтбора - см. ОбменСКонтрагентамиКлиентСервер.ПараметрыОтбораТекущихДелЭДО.
// Возвращаемое значение:
// 	Число - количество документов в указанном разделе с учетом переданных фильтров.
Функция КоличествоДокументовРазделаТекущихДелЭДО(ПараметрыОтбора) Экспорт
	
	ПараметрыПодсчета = ИнтерфейсДокументовЭДО.НовыеПараметрыОпределенияТекущихЭлектронныхДокументов();
	ПараметрыПодсчета.Режим  = ПараметрыОтбора.РежимОтображения;
	ПараметрыПодсчета.Раздел = ПараметрыОтбора.Раздел;
	Если ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().Создать Тогда
		ПараметрыПодсчета.Отбор = ПараметрыОтбора.ОтборВРазделеСоздать;
	ИначеЕсли ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().АннулироватьВходящие 
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().Входящие
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().ИсправитьВходящие
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().НаКонтролеВходящие
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().ОтразитьВУчете
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().ПодписатьВходящие
		ИЛИ ПараметрыОтбора.Раздел = ОбменСКонтрагентамиКлиентСервер.РазделыТекущихДелЭДО().УтвердитьВходящие Тогда
		
		ПараметрыПодсчета.Отбор = ПараметрыОтбора.ОтборВходящихЭлектронныхДокументов;
	Иначе
		ПараметрыПодсчета.Отбор = ПараметрыОтбора.ОтборИсходящихЭлектронныхДокументов;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ПараметрыПодсчета.Отбор Цикл
		ЭлементОтбора.ВидСравнения = ?(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно, ВидСравнения.Равно, ВидСравнения.ВСписке);
	КонецЦикла;
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(Пользователи.АвторизованныйПользователь());
	Если ПараметрыОтбора.РежимОтображения <> ОбменСКонтрагентамиКлиентСервер.РежимыОтображенияТекущихДелЭДО().МоиДокументы Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	ПараметрыПодсчета.Ответственный = СписокПользователей;
	
	ПараметрыПодсчета.КоличествоПолучаемыхЗаписей = 1000;
	ПараметрыПодсчета.ОтправлятьВходящиеДокументыНаУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	
	Возврат ИнтерфейсДокументовЭДО.КоличествоТекущихЭлектронныхДокументов(ПараметрыПодсчета);
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Возвращает сводные состояния на нашей стороне и на стороне контрагента в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - сводные состояния:
//  * НаНашейСтороне - Строка - тип состояния обмена ЭД.
//  * НаСторонеКонтрагента - Строка - тип состояния обмена ЭД.
//
Функция ТипыСводныхСостоянийЭДОУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ТипыСводныхСостоянийЭДОУниверсальногоФормата(ВерсияФормата, СостояниеЭДО);
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - тип состояния электронного документа.
//
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ТипСостоянияЭлектронногоДокументаУниверсальногоФормата(ВерсияФормата, СостояниеЭДО);
	
КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  ТипСостояния  - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата(ВерсияФормата, ТипСостояния) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.СостояниеЭДОПоЗначениюУниверсальногоФормата(ВерсияФормата, ТипСостояния);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Статус подключения организации к сервису ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//
// Возвращаемое значение:
//   Булево - признак подключения организации.
//
Функция ОрганизацияПодключена(Организация) Экспорт
	
	Возврат СинхронизацияЭДО.ЕстьУчетныеЗаписи(Организация);
	
КонецФункции

// Возвращает описание поля сведений о выбытии маркированных товаров
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяРеквизита - Строка
//   * ИмяПоля - Строка
//
Функция ОписаниеПоляСведенийОВыбытииМаркированныхТоваров() Экспорт
	
	Возврат ФорматыЭДО_ФНС.ОписаниеПоляСведенийОВыбытииМаркированныхТоваров();
		
КонецФункции

#КонецОбласти

#КонецОбласти