#Область ПоступлениеТоваров

Процедура ПровестиПоступлениеТоваровПоРегиструЦеныЗакупки(Источник) Экспорт
	Если Ложь Тогда Источник = Документы.ПоступлениеТоваров.СоздатьДокумент(); КонецЕсли;
	
	Рег = РегистрыСведений.ЦеныЗакупки.СоздатьНаборЗаписей();
	Рег.Отбор.Регистратор.Значение = Источник.Ссылка;
	Рег.Отбор.Регистратор.Использование=Истина;
	Масс=Новый Массив;
	Для Каждого Стр из Источник.Товары Цикл
		Если Стр.Цена>0 И Масс.Найти(Стр.Номенклатура)=Неопределено Тогда
			Масс.Добавить(Стр.Номенклатура);
			Движение = Рег.Добавить();
			Движение.Номенклатура=Стр.Номенклатура;
			Движение.Цена=?(Источник.ЦенаВключаетНДС,Стр.Цена,Стр.СуммаСНДС/?(Стр.Количество=0,1,Стр.Количество))
							*сок_Сервер.ПолучитьКоэффициентЕдиницыИзмерения(Стр.Номенклатура,Стр.ЕдиницаИзмерения,Стр.Номенклатура.ОсновнаяЕдиницаУчета);
			Движение.Период=Источник.Дата;
			Движение.Поставщик=Источник.Контрагент;
			Движение.Регистратор=Источник.Ссылка;
		КонецЕсли;	
	КонецЦикла;	
	Рег.ОбменДанными.Загрузка=Истина;
	Рег.Записать(Истина);
КонецПроцедуры


Функция ПолучитьЗаказПоставщикуПоИдентификатору(ИдентификаторСтроки)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтроки",ИдентификаторСтроки);
	Запрос.Текст=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сок_ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.сок_ЗаказыПоставщикам КАК сок_ЗаказыПоставщикам
	|ГДЕ
	|	сок_ЗаказыПоставщикам.ИдентификаторСтроки = &ИдентификаторСтроки
	|	И сок_ЗаказыПоставщикам.ЗаказПоставщику.ПоступленияБезЗаказа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаказПоставщику;
	Иначе
		Возврат Документы.ЗаказПоставщику.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	


Процедура сок_ПроведениеПоступлениеТоваровОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если Ложь Тогда Источник=Документы.ПоступлениеТоваров.СоздатьДокумент(); КонецЕсли;
	
	Источник.Движения.сок_Взаиморасчеты.Очистить();      
	Источник.Движения.сок_ЗаказыПоставщикам.Очистить();
	
	Если Источник.Статус=Перечисления.сок_СостоянияПриходныхНакладных.Получено Тогда
	
		сок_ПроведениеСервер.ПровестиПоступлениеТоваровПоРегиструЦеныЗакупки(Источник.Ссылка);
		
		Если Источник.Дата>='20240101' Тогда
			Для Каждого Стр из Источник.ТоварыТребований Цикл
				Если Стр.Требование=Источник.Ссылка Тогда
					Движение = Источник.Движения.сок_ЗаказыПоставщикам.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,Стр);
					Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
					Движение.Период=Источник.Дата;
					Движение.Регистратор=Источник.Ссылка;
					Движение.ЗаказПоставщику=?(ЗначениеЗаполнено(Источник.ЗаказПоставщику),Источник.ЗаказПоставщику,Источник.Ссылка);
					
					Движение = Источник.Движения.сок_ЗаказыПоставщикам.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,Стр);
					Движение.ВидДвижения=ВидДвиженияНакопления.Расход;
					Движение.Период=Источник.Дата;
					Движение.Регистратор=Источник.Ссылка;
					Движение.ЗаказПоставщику=?(ЗначениеЗаполнено(Источник.ЗаказПоставщику),Источник.ЗаказПоставщику,Источник.Ссылка);
					
				Иначе
					Движение = Источник.Движения.сок_ЗаказыПоставщикам.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,Стр);
					Движение.ВидДвижения=ВидДвиженияНакопления.Расход;
					Движение.Период=Источник.Дата;
					Движение.Регистратор=Источник.Ссылка;
					Движение.ЗаказПоставщику=?(ЗначениеЗаполнено(Источник.ЗаказПоставщику),Источник.ЗаказПоставщику,ПолучитьЗаказПоставщикуПоИдентификатору(Стр.ИдентификаторСтроки));
				КонецЕсли;	
				
				
			КонецЦикла;	
		КонецЕсли;	
		
		
		
		Если Источник.ДоговорКонтрагента.ФормироватьЗаявкиНаРасходованиеДенежныхСредств И Источник.Дата>Источник.ДоговорКонтрагента.ДатаНачалаФормированияЗаказов Тогда
			Движение = Источник.Движения.сок_Взаиморасчеты.Добавить();
			Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
			Движение.ДоговорКонтрагента=Источник.ДоговорКонтрагента;
			Движение.Контрагент=Источник.Контрагент;
			Движение.Период=Источник.Дата;
			Движение.Регистратор=Источник.Ссылка;
			Движение.Сумма=Источник.СуммаДокумента;
		КонецЕсли;	
		
		Отказ=Ложь;
	КонецЕсли;
	Источник.Движения.сок_Взаиморасчеты.Записать(Истина);
	Источник.Движения.сок_ЗаказыПоставщикам.Записать(Истина);
КонецПроцедуры


#КонецОбласти

#Область ЗаказПоставщику

Процедура ПровестиЗаказПоставщикуПоРегиструсок_ПоследнийМенеджерЗакупки(СсылкаНаОбъект) Экспорт
	Если Ложь Тогда СсылкаНаОбъект=Документы.ЗаказПоставщику.СоздатьДокумент(); КонецЕсли;
	
	Рег=РегистрыСведений.сок_ПоследнийМенеджерЗакупки.СоздатьНаборЗаписей();
	Рег.Отбор.Регистратор.Значение=СсылкаНаОбъект;
	Рег.Отбор.Регистратор.Использование=Истина;
	Масс=Новый Массив;
	Если СсылкаНаОбъект.НовыйСпособУчета И ЗначениеЗаполнено(СсылкаНаОбъект.Ответственный) Тогда
		Для Каждого Стр из СсылкаНаОбъект.Товары Цикл
			Если Масс.Найти(Стр.Номенклатура)=Неопределено Тогда
				Масс.Добавить(Стр.Номенклатура);
				Движение = Рег.Добавить();
				Движение.Менеджер=СсылкаНаОбъект.Ответственный;
				Движение.Номенклатура=Стр.Номенклатура;
				Движение.Период=СсылкаНаОбъект.Дата;
				Движение.Регистратор=СсылкаНаОбъект;
				
			КонецЕсли;	
		конецЦикла;	
	КонецЕсли;
	Рег.Записать(Истина);
	
КонецПроцедуры	


Процедура сок_ЗаказПоставщикуПроведениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ПровестиЗаказПоставщикуПоРегиструсок_ПоследнийМенеджерЗакупки(Источник.Ссылка);
	
	Если Ложь Тогда Источник=Документы.ЗаказПоставщику.СоздатьДокумент(); КонецЕсли;
	
	
	Источник.Движения.сок_ЗаказыПоставщикам.Очистить();      
	
	Если Источник.Дата>='20240101' ИЛИ Источник.ЗаказДля2024года Тогда
		Если    Источник.Статус=Перечисления.СтатусыЗаказовПоставщикам.КПоступлению ИЛИ   
				Источник.Статус=Перечисления.СтатусыЗаказовПоставщикам.ЗакрытБезОжиданияПрихода ИЛИ
				Источник.Статус=Перечисления.СтатусыЗаказовПоставщикам.Закрыт	Тогда
			МассТ=Новый Массив;
			Для Каждого СтрТ из Источник.Товары Цикл
				Если НЕ СтрТ.Отменено И Не СтрТ.Номенклатура.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда
					
					Если МассТ.Найти(СтрТ.Номенклатура)=Неопределено Тогда
						МассТ.Добавить(СтрТ.Номенклатура);
						Масс=Источник.ТоварыТребований.НайтиСтроки(Новый структура("Номенклатура",СтрТ.Номенклатура));
						Для Каждого СтрМ из Масс Цикл
							Движение=Источник.Движения.сок_ЗаказыПоставщикам.Добавить();
							Движение.Активность=Истина;
							Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
							Движение.ИдентификаторСтроки=СтрМ.ИдентификаторСтроки;
							Движение.Количество=СтрМ.Количество;
							Движение.Номенклатура=СтрТ.Номенклатура;
							Движение.НоменклатураЗаказа = СтрМ.НоменклатураЗаказа;
							Движение.Период=Источник.Дата;
							Движение.Регистратор=Источник.Ссылка;
							Движение.Требование=СтрМ.Требование;
							Движение.ЗаказПоставщику=Источник.Ссылка;
						КонецЦикла;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Номенклатура "+СтрТ.Номенклатура+" в строке "+СтрТ.НомерСтроки+" встречается повторно. Проведение не возможно.",Источник.Ссылка,,,Отказ);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			Источник.Движения.ЗаказыПоставщикам.ОбменДанными.Загрузка=Истина;
			Источник.Движения.ЗаказыПоставщикам.Записать(Истина);
		ИначеЕсли  Источник.Статус=Перечисления.СтатусыЗаказовПоставщикам.ЗакрытБезОжиданияПрихода Тогда
			Источник.Движения.ЗаказыПоставщикам.Очистить();
			Источник.Движения.ЗаказыПоставщикам.ОбменДанными.Загрузка=Истина;
			Источник.Движения.ЗаказыПоставщикам.Записать(Истина);
		КонецЕсли;	
		
	КонецЕсли;	
	Источник.Движения.сок_ЗаказыПоставщикам.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти


Процедура сок_ДатаЗапретаЖесткоПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.Дата<'20230101' И Не РольДоступна("ПолныеПрава") Тогда 
		ОбщегоНазначенияклиентСервер.СообщитьПользователю("До 01.01.2023 вообще ни кому нельзя изменять ни чего.",Источник.Ссылка,,,Отказ);
	КонецЕсли;	
КонецПроцедуры

//яя_Хадасса $ДОБ Битрикс №2677 Чиков 20.09.2023 г.
Процедура яя_КонтрольПроведенияПоПризнакамНоменклатурыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
		  	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	СкладыДополнительныеРеквизиты.Значение КАК ТипСклада
		|ИЗ
		|	&ДокументДвиженияТоваров КАК ПоступлениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ПоступлениеТоваровТовары.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|		ПО ПоступлениеТоваровТовары.Ссылка.Склад = СкладыДополнительныеРеквизиты.Ссылка
		|ГДЕ
		|	(НоменклатураДополнительныеРеквизиты.Свойство = &Прекурсор
		|			ИЛИ НоменклатураДополнительныеРеквизиты.Свойство = &НС
		|			ИЛИ НоменклатураДополнительныеРеквизиты.Свойство = &ПВ)
		|	И ПоступлениеТоваровТовары.Ссылка = &Ссылка
		|	И СкладыДополнительныеРеквизиты.Свойство = &ТипСклада";
	
	//Исправить на GUID
	НС 		  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("ee03d6fc-e1ed-11ed-913e-005056928435"));
	ПВ        = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("fb0fc6d6-e1ed-11ed-913e-005056928435"));
	Прекурсор = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("1dfecd35-e1ee-11ed-913e-005056928435")); 
	ТипСклада = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("3e07ab2a-56f7-11ee-8624-005056bcec0a"));
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ПоступлениеТоваров.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ВнутреннееПотреблениеТоваров.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваровВОтделении") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ВнутреннееПотреблениеТоваровВОтделении.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровИзОтделения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ВозвратТоваровИзОтделения.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ВозвратТоваровОтКлиента.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ЗаказНаПеремещение.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ЗаказПоставщику.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ОприходованиеИзлишковТоваров.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ВозвратТоваровПоставщику.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОприходованиеИзлишковТоваровВОтделении") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ОприходованиеИзлишковТоваровВОтделении.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтпускТоваровВОтделение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ОтпускТоваровВОтделение.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ОтчетОРозничныхПродажах.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ПеремещениеТоваров.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваровМеждуОтделениями") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ПеремещениеТоваровМеждуОтделениями.Товары");
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеОтделения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровТовары.Ссылка.Склад", "ПоступлениеТоваровТовары.Ссылка.СкладОтправитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументДвиженияТоваров", "Документ.ТребованиеОтделения.Товары");
	Иначе
		//ОбщегоНазначения.СообщитьПользователю("Документ не подключен к системе контроля номенклатуры по складам", , , , Отказ);
		
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НС", НС);
	Запрос.УстановитьПараметр("ПВ", ПВ);
	Запрос.УстановитьПараметр("Прекурсор", Прекурсор);
	Запрос.УстановитьПараметр("ТипСклада", ТипСклада);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСклада = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Общий") Тогда
			_Отказ=Ложь;
			ОбщегоНазначения.СообщитьПользователю("Номенклатура " + Выборка.Номенклатура + " не может отпускаться со склада со спецификацией Общий", , , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Чиков А.В.


Процедура сок_ТребованияПроведениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Ложь Тогда Источник=Документы.ТребованиеОтделения.СоздатьДокумент(); КонецЕсли;
	
	Источник.Движения.сок_Требования.Очистить();
	Если Источник.Дата>='20240101' И  (Источник.Статус=Перечисления.СтатусыТребованийОтделений.Закрыт ИЛИ Источник.Статус=Перечисления.СтатусыТребованийОтделений.КВыполнению) Тогда
		ТЗ=Источник.Товары.Выгрузить(Новый Фиксированнаяструктура("Отменено",Ложь),"Номенклатура,ИдентификаторСтроки,КоличествоВЕдиницахИзмерения");
		ТЗ.Свернуть("Номенклатура,ИдентификаторСтроки","КоличествоВЕдиницахИзмерения");
		Для Каждого Стр из ТЗ Цикл
			Движение = Источник.Движения.сок_Требования.Добавить();
			Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
			Движение.ИдентификаторСтроки=Стр.ИдентификаторСтроки;
			Движение.Количество=Стр.КоличествоВЕдиницахИзмерения;
			Движение.Номенклатура=Стр.Номенклатура;
			Движение.Период=Источник.Дата;
			Движение.Регистратор=Источник.Ссылка;
			Движение.Требование=Источник.Ссылка;
		КонецЦикла;	
	КонецЕсли;	
	
	Источник.Движения.сок_Требования.Записать(Истина);
КонецПроцедуры

