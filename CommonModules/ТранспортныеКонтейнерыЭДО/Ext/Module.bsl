
#Область СлужебныйПрограммныйИнтерфейс

// Записывает транспортный контейнер в информационную базу.
// 
// Параметры:
// 	ОписаниеКонтейнера - СтрокаТаблицыЗначений из см. СервисЭДО.НоваяТаблицаКонтейнеров
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ИмяБезРасширения - Строка - имя файла контейнера
// Возвращаемое значение:
// 	Структура:
// 	  * ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 	  * Объект - Произвольный - связанный с контейнером объект
Функция СохранитьКонтейнер(ОписаниеКонтейнера, КлючСинхронизации, КонтекстДиагностики, ИмяБезРасширения = "") Экспорт
	
	РезультатСохранения = Новый Структура;
	РезультатСохранения.Вставить("ТранспортныйКонтейнер", Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка());
	РезультатСохранения.Вставить("Объект");
	
	// инициализация основных параметров контейнера
	ПараметрыКонтейнера = ПараметрыКонтейнера(ОписаниеКонтейнера.ИДДокументооборота,
		ОписаниеКонтейнера.ИДДокумента,
		ОписаниеКонтейнера.ИДПакета,
		КлючСинхронизации.СпособОбмена,
		КлючСинхронизации.ИдентификаторУчетнойЗаписи,
		ОписаниеКонтейнера.ВидСервисаЭДО);
	
	Если ИмяБезРасширения = "" Тогда
		ИмяБезРасширения = "EDI_" + ОписаниеКонтейнера.ИДДокумента;
	КонецЕсли;
	
	// запись контейнера до распаковки
	НачатьТранзакцию();
	Попытка
		ТранспортныйКонтейнер = ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера);
		Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
			ДобавитьПрисоединенныйФайлКонтейнера(ТранспортныйКонтейнер, ОписаниеКонтейнера.ДвоичныеДанные,
				ИмяБезРасширения);
		КонецЕсли;
		РезультатСохранения.ТранспортныйКонтейнер = ТранспортныйКонтейнер;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сохранение транспортного контейнера ЭДО'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		// Распаковка файла и заполнение параметров контейнера.
		ЗаполнитьПараметрыКонтейнера(ПараметрыКонтейнера, ОписаниеКонтейнера.ДвоичныеДанные, КонтекстДиагностики);
		// Повторная запись контейнера с параметрами, полученными в результате распаковки файла.
		ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, ТранспортныйКонтейнер);
	Исключение
		ИмяСобытия = НСтр("ru = 'Заполнение параметров транспортного контейнера ЭДО'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ТранспортныйКонтейнер,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат РезультатСохранения;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться входящие контейнеры.
// Запрос содержит следующие поля:
//   * Ссылка - ДокументСсылка.ТранспортныйКонтейнерЭДО - транспортный контейнер
//   * ВнешнийУИД - Строка - внешний уникальный идентификатор. 
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборВходящихКонтейнеров
// Возвращаемое значение:
// 	- См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросВходящихКонтейнеров(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборВходящихКонтейнеров();
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ВыбираемыеПоля
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ИмяВременнойТаблицы
	|ГДЕ
	|	&ПоляУсловия";
	
	ВыбираемыеПоля = Новый Массив;
	ВыбираемыеПоля.Добавить("Ссылка");
	ВыбираемыеПоля.Добавить("ВнешнийУИД");
	
	ПоляУсловия = Новый Массив;
	ПоляУсловия.Добавить("Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)");
	Если Отбор.ВнешнийИдентификатор <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВнешнийУИД В(&%1)", Отбор.ВнешнийИдентификатор));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, ВыбираемыеПоля, ПоляУсловия);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает описание отбора входящих контейнеров. См. ЗапросВходящихКонтейнеров.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ВнешнийИдентификатор - Строка - имя параметра, содержащего внешние идентификаторы контейнеров
Функция НовыйОтборВходящихКонтейнеров() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВнешнийИдентификатор", "");
	
	Возврат Отбор;
	
КонецФункции

// Дополняет контейнеры, которые будут распаковываться, нераспакованными контейнерами.
// 
// Параметры:
//  Контейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО - контейнеры к распаковке
//  ИдентификаторыУчетныхЗаписей - Массив из Строка - учетные записи организации
Процедура ДополнитьКонтейнерамиКРаспаковке(Контейнеры, ИдентификаторыУчетныхЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|ГДЕ
	|	ТранспортныйКонтейнерЭДО.Статус = &Статус
	|	И НЕ ТранспортныйКонтейнерЭДО.ПометкаУдаления
	|	И ТранспортныйКонтейнерЭДО.Получатель В(&УчетныеЗаписиОрганизации)
	|	И НЕ ТранспортныйКонтейнерЭДО.Ссылка В (&НовыеКонтейнеры)";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыТранспортныхСообщенийБЭД.КРаспаковке);
	Запрос.УстановитьПараметр("УчетныеЗаписиОрганизации", ИдентификаторыУчетныхЗаписей);
	Запрос.УстановитьПараметр("НовыеКонтейнеры", Контейнеры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерыКРаспаковке = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Контейнеры, КонтейнерыКРаспаковке);
	
КонецПроцедуры

// Создает транспортный контейнер.
// 
// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовоеОписаниеКонтейнера
Функция СоздатьКонтейнер(ДанныеОбъектов, КонтекстДиагностики = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеКонтейнера = СоздатьКонтейнерИПрисоединенныйФайл(ДанныеОбъектов, КонтекстДиагностики);
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

// Возвращает объекты контейнеров.
// 
// Параметры:
// 	Контейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//    * Ключ - ДокументСсылка.ТранспортныйКонтейнерЭДО
//    * Значение - ДокументСсылка.СообщениеЭДО
Функция ОбъектыКонтейнеров(Контейнеры) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыТранспортныхКонтейнеровЭДО.Объект,
		|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер
		|ИЗ
		|	РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
		|ГДЕ
		|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер В (&ТранспортныйКонтейнер)";
	
	Запрос.УстановитьПараметр("ТранспортныйКонтейнер", Контейнеры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого ТранспортныйКонтейнер Из Контейнеры Цикл
		Объекты = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.НайтиСледующий(ТранспортныйКонтейнер, "ТранспортныйКонтейнер") Цикл
			Объекты.Добавить(ВыборкаДетальныеЗаписи.Объект);
		КонецЦикла;
		ВыборкаДетальныеЗаписи.Сбросить();
		Результат.Вставить(ТранспортныйКонтейнер, Объекты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрисоединенныеФайлыКонтейнеров(Контейнеры) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	|ГДЕ
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла В (&Контейнеры)
	|ИТОГИ
	|ПО
	|	ПрисоединенныйФайл";
	
	Запрос.УстановитьПараметр("Контейнеры", Контейнеры);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ПрисоединенныеФайлыКонтейнера = Новый Массив;
		ВыборкаПрисоединенныйФайл = Выборка.Выбрать();
		Пока ВыборкаПрисоединенныйФайл.Следующий() Цикл
			ПрисоединенныеФайлыКонтейнера.Добавить(ВыборкаПрисоединенныйФайл.ПрисоединенныйФайл);
		КонецЦикла;
		Результат.Вставить(Выборка.ТранспортныйКонтейнер, ПрисоединенныеФайлыКонтейнера);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
Процедура ПослеОтправкиКонтейнера(Объект, Контейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ) Экспорт
	
	Если Отказ
		ИЛИ Не ЗначениеЗаполнено(Контейнер)
		ИЛИ ЗначениеЗаполнено(ОшибкаПередачи)
			И Не СинхронизацияЭДО.ЭтоОшибкаПовторнойОтправки(ОшибкаПередачи) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусКонтейнера(Контейнер, Перечисления.СтатусыТранспортныхСообщенийБЭД.Отправлен, ТекущаяДатаСеанса(),
		КонтекстДиагностики);

КонецПроцедуры

// Изменяет статус транспортного контейнера.
// 
// Параметры:
// 	ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 	Статус - ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Комментарий - Строка - описание причины изменения статуса
// Возвращаемое значение:
// 	Булево - Истина, если статус контейнера изменен
Функция ИзменитьСтатусКонтейнера(ТранспортныйКонтейнер, Статус, КонтекстДиагностики = Неопределено, 
	Комментарий = "") Экспорт
	
	Результат = Истина;
	НачатьТранзакцию();
	Попытка
		КонтейнерОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(ТранспортныйКонтейнер);
		КонтейнерОбъект.Статус = Статус;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			КонтейнерОбъект.Комментарий = СтрШаблон("%1 %2", КонтейнерОбъект.Комментарий, Комментарий);
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен Тогда
			КонтейнерОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		КонтейнерОбъект.ДополнительныеСвойства.Вставить("КонтекстДиагностики", КонтекстДиагностики);
		КонтейнерОбъект.Записать();
		КонтекстДиагностики = КонтейнерОбъект.ДополнительныеСвойства.КонтекстДиагностики;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ДополнительныеПараметрыОшибки = Новый Структура;
		ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ТранспортныйКонтейнер);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Смена статуса транспортного контейнера ЭДО'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РаспаковатьКонтейнеры(Контейнеры, Отпечатки, КонтекстДиагностики) Экспорт
	
	Отпечатки = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(НСтр("ru = 'Распаковка транспортных контейнеров ЭДО'"),
		КонтекстДиагностики, Отпечатки);
	
	ОтобратьКонтейнерыПоСтатусам(Контейнеры, СтатусыНеРаспакованныхТранспортныхСообщенийБЭД());
		
	ДополнитьКонтейнерамиИзПакетов(Контейнеры);
	
	ДанныеОбъектов = СформироватьДанныеОбъектов(Контейнеры, КонтекстДиагностики);
	
	РезультатЗагрузкиВФоне = ЭлектронныеДокументыЭДО.ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеОбъектов,
		КонтекстДиагностики, Отпечатки);
	
	РаспакованоКонтейнеров = 0;
	Если РезультатЗагрузкиВФоне.РезультатДействийПоЭДО <> Неопределено Тогда
		Обработано = РезультатЗагрузкиВФоне.РезультатДействийПоЭДО.Итог.ОбработаноПоДействиям[
			Перечисления.ДействияПоЭДО.Загрузить];
		Если ЗначениеЗаполнено(Обработано) Тогда
			РаспакованоКонтейнеров = Обработано;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатЗагрузкиДокументов", РезультатЗагрузкиВФоне);
	Результат.Вставить("РаспакованоКонтейнеров", РаспакованоКонтейнеров);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

// Распаковывает архив транспортного контейнера.
// 
// Параметры:
// 	Файл - ДвоичныеДанные - ZIP-архив
// 	                  - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Структура:
// * Карточка - см. ПрочитатьКарточкуЭлектронногоДокумента
// * Метаданные - см. ПрочитатьФайлМетаданных
// * Ошибка - см. ПрочитатьФайлОшибки
// * Картинки - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * Доверенности - см. ПрочитатьКарточкуМЧД
Функция РаспаковатьФайлКонтейнера(Файл, КонтекстДиагностики = Неопределено) Экспорт
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("ДвоичныеДанные"));
	ОжидаемыеТипы.Добавить(Тип("Структура"));
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("ДвоичныеДанные", Тип("ДвоичныеДанные"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ТранспортныеКонтейнерыЭДО.РаспаковатьФайлКонтейнера",
		"Файл", Файл, ОжидаемыеТипы, ОжидаемыеТипыСвойств);
	
	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = Файл;
	Иначе 
		ДвоичныеДанные = Файл.ДвоичныеДанные;
	КонецЕсли;
	
	ОписаниеКонтейнера = Новый Структура;
	ОписаниеКонтейнера.Вставить("Карточка");
	ОписаниеКонтейнера.Вставить("Метаданные");
	ОписаниеКонтейнера.Вставить("Ошибка");
	ОписаниеКонтейнера.Вставить("Картинки");
	ОписаниеКонтейнера.Вставить("Доверенности");
	
	ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки();
	ДополнительныеСвойстваОшибки.ДанныеДляФормированияФайловДляТехподдержки.Добавить(ДвоичныеДанные);
	ДополнительныеСвойстваОшибки.ТекстСообщения = НСтр("ru = 'Возможный способ устранения ошибки:
		| - обратиться к контрагенту с просьбой отправить электронный документ повторно, сократив наименования прикрепленных файлов.'");
		
	КаталогРаспаковки = ФайловаяСистема.СоздатьВременныйКаталог();
	ПараметрыРаспаковки = РаботаСФайламиБЭД.НовыеПараметрыРаспаковкиАрхива();
	ПараметрыРаспаковки.ВосстанавливатьКаталоги = РежимВосстановленияПутейФайловZIP.Восстанавливать;
	РезультатРаспаковки = РаботаСФайламиБЭД.РаспаковатьАрхив(ДвоичныеДанные, КаталогРаспаковки, КонтекстДиагностики,
		НСтр("ru = 'Распаковка транспортного контейнера ЭДО'"), ПараметрыРаспаковки, ДополнительныеСвойстваОшибки);
	
	Если РезультатРаспаковки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при распаковке транспортного контейнера ЭДО'");
	КонецЕсли;
	
	РаспакованныеФайлы = РезультатРаспаковки;
	
	Для каждого РаспакованныйФайл Из РаспакованныеФайлы Цикл
		Если НРег(РаспакованныйФайл.Имя) = "card.xml" Тогда
			ОписаниеКонтейнера.Карточка = ПрочитатьКарточкуЭлектронногоДокумента(РаспакованныйФайл.ПолноеИмя);
		КонецЕсли;
		Если НРег(РаспакованныйФайл.Имя) = "meta.xml" Тогда
			ОписаниеКонтейнера.Метаданные = ПрочитатьФайлМетаданных(РаспакованныйФайл.ПолноеИмя, КаталогРаспаковки);
		КонецЕсли;
		Если НРег(РаспакованныйФайл.Имя) = "errormessage.xml" Тогда
			ОписаниеКонтейнера.Ошибка = ПрочитатьФайлОшибки(РаспакованныйФайл.ПолноеИмя);
		КонецЕсли;
		Если НРег(РаспакованныйФайл.Расширение) = ".zip" Тогда
			ОписаниеКонтейнера.Картинки = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеКонтейнера.Картинки.ИмяФайла = РаспакованныйФайл.Имя;
			ОписаниеКонтейнера.Картинки.ДвоичныеДанные = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайлаКарточкиМЧД = ОписаниеКонтейнера.Карточка.КарточкаМЧД;
	НашлиКарточкуМЧД = Ложь;
	
	Для каждого РаспакованныйФайл Из РаспакованныеФайлы Цикл
		Если НРег(РаспакованныйФайл.Имя) = НРег(ИмяФайлаКарточкиМЧД) Тогда
			НашлиКарточкуМЧД = Истина;
			ОписаниеКонтейнера.Доверенности = ПрочитатьКарточкуМЧД(РаспакованныйФайл.ПолноеИмя, КаталогРаспаковки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяФайлаКарточкиМЧД) И Не НашлиКарточкуМЧД Тогда
		ВидОперации = НСтр("ru = 'Чтение доверенностей электронного документа.'");
		ШаблонСообщения = НСтр("ru = 'Не найден файл с описанием доверенностей: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаКарточкиМЧД);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстСообщения);
	КонецЕсли;
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(КаталогРаспаковки);
	
	Если ОписаниеКонтейнера.Карточка = Неопределено Или ОписаниеКонтейнера.Метаданные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при чтении транспортного контейнера ЭДО: контейнер не содержит обязательных
			|файлов meta.xml и card.xml'");
	КонецЕсли;
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

// Возвращает транспортный контейнер в виде zip-архива.
//
// Параметры:
//	ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъекта, КонтекстДиагностики = Неопределено) Экспорт
	
	ДанныеОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
	ЗаполнитьЗначенияСвойств(ДанныеОбъектов.Добавить(), ДанныеОбъекта);
	Возврат ТранспортныеКонтейнерыЭДОСлужебный.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъектов, КонтекстДиагностики);
	
КонецФункции

// См. СинхронизацияЭДОСобытия.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_3

#Область Документы_ТранспортныйКонтейнерЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ТранспортныйКонтейнерЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.9.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0ecbc39c-b3ab-41f5-b695-a34bb5012086");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ТранспортныйКонтейнерЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление транспортных контейнеров ЭДО'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ТранспортныйКонтейнерЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СообщениеЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СообщениеЭДОПрисоединенныеФайлы.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ТранспортныйКонтейнерЭДО.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОбъектыТранспортныхКонтейнеровЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ТранспортныйКонтейнерЭДО.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОбъектыТранспортныхКонтейнеровЭДО.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

КонецПроцедуры

Функция ЗапросКонтейнеровОбъектовДляОтправки(Отбор, ИмяВременнойТаблицы) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборКонтейнеровОбъектов();
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Объект КАК Объект,
	|	ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнер.Отправитель КАК Отправитель,
	|	ТранспортныйКонтейнер.СпособОбменаЭД КАК СпособОбмена
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ИмяВременнойТаблицы
	|ГДЕ
	|	&ПоляУсловия
	|	И
	|		ИмяВременнойТаблицы.ТранспортныйКонтейнер.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТранспортныхСообщенийБЭД.ПодготовленКОтправке)";
	
	ПоляУсловия = Новый Массив;
	Если Отбор.Объект <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("Объект В(%1)", Отбор.Объект));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция НовыйОтборКонтейнеровОбъектов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", "");
	
	Возврат Отбор;
	
КонецФункции

Процедура ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки, МожноОтказатьсяОтЗагрузки = Ложь) Экспорт
	
	Если ДанныеОбъекта.Отказ Тогда
		Если МожноОтказатьсяОтЗагрузки Тогда
			ВидОшибки = ВидОшибкиНеУдалосьРаспаковатьКонтейнер();
		Иначе
			ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Распаковка транспортных контейнеров ЭДО'");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки,
			ТекстОшибки);
		Ошибка.СсылкаНаОбъект = ДанныеОбъекта.ТранспортныйКонтейнер;
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры транспортного контейнера.
// 
// Параметры:
// 	ИдентификаторДокументооборота - Строка
// 	ИдентификаторСообщения - Строка
// 	ИдентификаторПакета - Строка
// 	СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// 	ИдентификаторУчетнойЗаписи - Строка
// 	ВидСервисаЭДО - ПеречислениеСсылка.ВидыСервисовЭДО
// Возвращаемое значение:
// 	Структура:
// * Отправитель - Строка - идентификатор отправителя
// * Получатель - Строка - идентификатор получателя
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД
// * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// * ВнешнийУИД - Строка
// * АдресРесурсаКонтрагента - Строка
// * Объект - Произвольный
// * Статус - ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
// * ВидСервисаЭДО - Булево
Функция ПараметрыКонтейнера(ИдентификаторДокументооборота, ИдентификаторСообщения, ИдентификаторПакета,
	СпособОбмена, ИдентификаторУчетнойЗаписи, ВидСервисаЭДО = Неопределено) Экспорт
	
	ПараметрыКонтейнера = Новый Структура;
	ПараметрыКонтейнера.Вставить("СпособОбмена",                  СпособОбмена);
	ПараметрыКонтейнера.Вставить("Получатель",                    ИдентификаторУчетнойЗаписи);
	ПараметрыКонтейнера.Вставить("Отправитель",                   "");
	ПараметрыКонтейнера.Вставить("Организация",                   Неопределено);
	ПараметрыКонтейнера.Вставить("Контрагент",                    Неопределено);
	ПараметрыКонтейнера.Вставить("ДоговорКонтрагента",            Неопределено);
	ПараметрыКонтейнера.Вставить("ВнешнийУИД",                    ИдентификаторСообщения);
	ПараметрыКонтейнера.Вставить("ИдентификаторПакета",           ИдентификаторПакета);
	ПараметрыКонтейнера.Вставить("АдресРесурсаКонтрагента",       "");
	ПараметрыКонтейнера.Вставить("Объект",                        Неопределено);
	ПараметрыКонтейнера.Вставить("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	ПараметрыКонтейнера.Вставить("Статус", Перечисления.СтатусыТранспортныхСообщенийБЭД.ПустаяСсылка());
	ПараметрыКонтейнера.Вставить("ВидСервисаЭДО", ВидСервисаЭДО);
	
	Возврат ПараметрыКонтейнера;
	
КонецФункции

// Подтверждает получение всех неподтвержденных контейнеров в сервисе оператора ЭДО.
// 
// Параметры:
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПодтвердитьПолучениеКонтейнеров(КлючиСинхронизации, КонтекстДиагностики) Экспорт
	
	ИдентификаторыПолучателей = СинхронизацияЭДО.УчетныеЗаписиКлючейСинхронизации(КлючиСинхронизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.Ссылка,
		|	ТранспортныйКонтейнерЭДО.Получатель КАК Получатель,
		|	ТранспортныйКонтейнерЭДО.ВнешнийУИД
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.ТребуетсяПодтвердитьПолучение
		|	И ТранспортныйКонтейнерЭДО.Получатель В (&Получатель)
		|
		|ИТОГИ
		|ПО
		|	Получатель";
	
	Запрос.УстановитьПараметр("Получатель", ИдентификаторыПолучателей);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПолучатель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПолучатель.Следующий() Цикл
		КлючСинхронизации = КлючиСинхронизации[ВыборкаПолучатель.Получатель];
		ВыборкаДетальныеЗаписи = ВыборкаПолучатель.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПодтвердитьПолучениеКонтейнера(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.ВнешнийУИД,
				КлючСинхронизации, КонтекстДиагностики);
			Если СинхронизацияЭДО.ТребуетсяПовторноеВыполнениеОперации(КлючСинхронизации) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подтверждает получение контейнера в сервисе оператора ЭДО.
// 
// Параметры:
//  Контейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ВнешнийУИД - Строка
//  КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПодтвердитьПолучениеКонтейнера(Контейнер, ВнешнийУИД, КлючСинхронизации, КонтекстДиагностики) Экспорт
	
	Если Не СервисЭДО.ПодтвердитьПолучениеКонтейнера(КлючСинхронизации, ВнешнийУИД, КонтекстДиагностики) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		КонтейнерОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(Контейнер);
		Если КонтейнерОбъект.ТребуетсяПодтвердитьПолучение Тогда
			КонтейнерОбъект.ТребуетсяПодтвердитьПолучение = Ложь;
			КонтейнерОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Подтверждение получения транспортных контейнеров ЭДО'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, Контейнер,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция КонтейнерОтправлен(Контейнер) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "Статус")
		= Перечисления.СтатусыТранспортныхСообщенийБЭД.Отправлен;
	
КонецФункции

// Возвращает данные транспортного контейнера для отправки.
// 
// Параметры:
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 
// Возвращаемое значение:
//  Структура:
//   * СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
//   * Отправитель - Строка
//   * Получатель - Строка
//   * АдресРесурсаКонтрагента - ПеречислениеСсылка.СпособыОбменаЭД
//   * АдресРесурсаОрганизации - Строка, СправочникСсылка.УчетныеЗаписиЭлектроннойПочты -
Функция ДанныеДляОтправки(ТранспортныйКонтейнер) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортныйКонтейнер,
		"СпособОбменаЭД, Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации");
	
КонецФункции

// Возвращает данные транспортных контейнеров для отправки.
// 
// Параметры:
//  ТранспортныйКонтейнер - массив, элементы ДокументСсылка.ТранспортныйКонтейнерЭДО
// 
// Возвращаемое значение:
// 	КлючИЗначение:
// 		Ключ - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 		Значение -
//  		Структура:
//   			* СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
//  			* Отправитель - Строка
//  			* Получатель - Строка
//   			* АдресРесурсаКонтрагента - ПеречислениеСсылка.СпособыОбменаЭД
//   			* АдресРесурсаОрганизации - Строка, СправочникСсылка.УчетныеЗаписиЭлектроннойПочты -
Функция ДанныеДляОтправкиПоМассиву(ТранспортныеКонтейнеры) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТранспортныеКонтейнеры,
		"СпособОбменаЭД, Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ВидСервисаЭДО");
	
КонецФункции

// Возвращает массив статусов не распакованных транспортных сообщений БЭД.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
//
Функция СтатусыНеРаспакованныхТранспортныхСообщенийБЭД() Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Неизвестный"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке"));
	
	Возврат МассивСтатусов;
		
КонецФункции

// Читает карточку МЧД из ТК и возвращает результат.
// 
// Параметры:
//  ИмяФайла - Строка
//  КаталогРаспаковки - Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка - Хеш удостоверяемой подписи
//   * Значение - см. НовоеОписаниеДанныхДоверенности
Функция ПрочитатьКарточкуМЧД(ИмяФайла, КаталогРаспаковки) Экспорт
	
	Результат = Новый Соответствие();
	ВидОперации = НСтр("ru = 'Чтение доверенностей электронного документа.'");
	ПодсистемаСобытия = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	
	Попытка
		КарточкаМЧД = РаботаСФайламиБЭД.ПрочитатьXDTO(ИмяФайла, РаботаСФайламиБЭД.ПолучитьТипЗначенияCML(
			"Warrant", "http://api-invoice.taxcom.ru/warrant"));
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайла,
			КраткоеПредставлениеОшибки);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Результат;
		
	КонецПопытки;
	
	МЧД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаМЧД, "WarrantCard",,, Истина);
	
	Для Каждого ДанныеМЧД Из МЧД Цикл
		
		КарточкаМЧД = НовоеОписаниеДанныхДоверенности();
		
		ФайлыМЧД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеМЧД, "Description.Files");
		
		Если ФайлыМЧД <> Неопределено Тогда
			
			КарточкаМЧД.ЭтоФайловаяДоверенность = Истина;
			
			ИмяФайлаМЧД = ФайлыМЧД.WarrantImage.Path;
			СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки, ИмяФайлаМЧД);
			
			Файл = Новый Файл(СтруктурированноеИмяФайла.ПолноеИмя);
			Если Не Файл.Существует() Тогда
				ШаблонПредупреждения = НСтр("ru = 'В контейнере отсутствуют данные файла доверенности: %1'");
				ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ИмяФайлаМЧД);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ПодсистемаСобытия,
					УровеньЖурналаРегистрации.Предупреждение);
				Возврат Результат;
			КонецЕсли;
			
			КарточкаМЧД.Доверенность.ДвоичныеДанные = Новый ДвоичныеДанные(СтруктурированноеИмяФайла.ПолноеИмя);
			КарточкаМЧД.Доверенность.ИмяФайла = ИмяФайлаМЧД;
			
			Подписи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФайлыМЧД, "WarrantSignature",,, Истина);
			
			Для Каждого Подпись Из Подписи Цикл
				
				ИмяФайлаПодписи = Подпись.Path;
				СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки, ИмяФайлаПодписи);
				
				Файл = Новый Файл(СтруктурированноеИмяФайла.ПолноеИмя);
				Если Не Файл.Существует() Тогда
					ШаблонПредупреждения = НСтр("ru = 'В контейнере отсутствуют данные подписи доверенности: %1'");
					ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ИмяФайлаПодписи);
					ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ПодсистемаСобытия,
						УровеньЖурналаРегистрации.Предупреждение);
					Возврат Результат;
				КонецЕсли;
			
				КарточкаМЧД.Подпись.ДвоичныеДанные = Новый ДвоичныеДанные(СтруктурированноеИмяФайла.ПолноеИмя);
				КарточкаМЧД.Подпись.ИмяФайла = ИмяФайлаПодписи;
				
				Прервать;
				
			КонецЦикла;
			
		Иначе
			
			СсылкаМЧД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеМЧД, "Description.Meta");
			Если СсылкаМЧД <> Неопределено Тогда
				
				КарточкаМЧД.НомерДоверенности = СсылкаМЧД.ID;
				КарточкаМЧД.ДоверительИНН = СсылкаМЧД.Issuer;
				КарточкаМЧД.СсылкаНаРеестр = СсылкаМЧД.Link;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Подписи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеМЧД, "ToSign.DocSign",,, Истина);
		
		Для Каждого Подпись Из Подписи Цикл
			
			ИмяФайлаПодписи = Подпись.File;
			СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки, ИмяФайлаПодписи);
			
			Файл = Новый Файл(СтруктурированноеИмяФайла.ПолноеИмя);
			Если Не Файл.Существует() Тогда
				ШаблонПредупреждения = НСтр("ru = 'В контейнере отсутствует файл удостоверяемой подписи: %1'");
				ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ИмяФайлаПодписи);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ПодсистемаСобытия,
					УровеньЖурналаРегистрации.Предупреждение);
				Возврат Результат;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(СтруктурированноеИмяФайла.ПолноеИмя);
			ХешПодписи = КриптографияБЭД.ХешПодписи(ДвоичныеДанныеПодписи);
			Результат.Вставить(ХешПодписи, КарточкаМЧД);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пустое описание данных доверенности.
// 
// Возвращаемое значение:
//  Структура:
// * НомерДоверенности - Строка
// * ДоверительИНН - Строка
// * СсылкаНаРеестр - Строка
// * Доверенность - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * Подпись - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * ДатаВыдачи - Дата
// * ДатаОкончания - Дата
// * ЭтоФайловаяДоверенность - Булево
Функция НовоеОписаниеДанныхДоверенности() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ДоверительИНН", "");
	Результат.Вставить("СсылкаНаРеестр", "");
	Результат.Вставить("Доверенность", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	Результат.Вставить("Подпись", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	Результат.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Результат.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Результат.Вставить("ЭтоФайловаяДоверенность", Ложь);
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Возвращает описание документа транспортного контейнера.
// 
// Возвращаемое значение:
// 	Структура:
// * ИдентификаторДокументооборота - Строка
// * КодТранзакции - Строка
// * КодРегламента - Строка
// * ОписаниеДанных - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * ОписаниеДополнительныхДанных - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * ПодписиДополнительныхДанных - Массив из см. РаботаСФайламиБЭД.НовоеОписаниеФайла
// * ПодписиОсновныхДанных - Массив из см. РаботаСФайламиБЭД.НовоеОписаниеФайла
Функция НовоеОписаниеДокументаКонтейнера() Экспорт
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ИдентификаторДокументооборота", "");
	ОписаниеДокумента.Вставить("КодТранзакции", "");
	ОписаниеДокумента.Вставить("КодРегламента", "");
	ОписаниеДокумента.Вставить("ОписаниеДанных", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	ОписаниеДокумента.Вставить("ОписаниеДополнительныхДанных", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	ОписаниеДокумента.Вставить("ПодписиОсновныхДанных", Новый Массив);
	ОписаниеДокумента.Вставить("ПодписиДополнительныхДанных", Новый Массив);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

// Добавить присоединенный файл контейнера.
// 
// Параметры:
//  Контейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ДвоичныеДанныеКонтейнера - Произвольный
//  ИмяФайла - Строка
//  Расширение - Строка
Процедура ДобавитьПрисоединенныйФайлКонтейнера(Контейнер, ДвоичныеДанныеКонтейнера,
			ИмяФайла, Расширение = "zip") Экспорт
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера);

	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Контейнер);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
	ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);

КонецПроцедуры

// Формирование нового транспортного контейнера или перезаполнение реквизитов существующего.
//
// Параметры:
//  ПараметрыКонтейнера - см. ПараметрыКонтейнера
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО - контейнер для заполнения
// 
// Возвращаемое значение:
//  ДокументСсылка.ТранспортныйКонтейнерЭДО - сформированный контейнер
Функция ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, Знач ТранспортныйКонтейнер = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ТранспортныйКонтейнерЭДО");
	Если ТранспортныйКонтейнер = Неопределено Тогда
		ЭлементБлокировки.УстановитьЗначение("ВнешнийУИД", ПараметрыКонтейнера.ВнешнийУИД);
	Иначе
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТранспортныйКонтейнер);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Если ТранспортныйКонтейнер = Неопределено Тогда
			ТранспортныйКонтейнерОбъект = Документы.ТранспортныйКонтейнерЭДО.СоздатьДокумент();
			
			СуществующийТранспортныйКонтейнер = ТранспортныйКонтейнерПоИдентификатору(ПараметрыКонтейнера.ВнешнийУИД);
			
			Если ЗначениеЗаполнено(СуществующийТранспортныйКонтейнер) Тогда
				ЗафиксироватьТранзакцию();
				Возврат СуществующийТранспортныйКонтейнер;
			КонецЕсли;
		Иначе
			ТранспортныйКонтейнерОбъект = ТранспортныйКонтейнер.ПолучитьОбъект();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыКонтейнера.Статус) Тогда
			Статус = ПараметрыКонтейнера.Статус;
		ИначеЕсли НЕ ЗаполненыКлючевыеПараметрыКонтейнера(ПараметрыКонтейнера) Тогда
			Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.Неизвестный;
		Иначе
			Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.КРаспаковке;
		КонецЕсли;
		
		Записывать = Ложь;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Статус", Статус);
		ДанныеЗаполнения.Вставить("Направление", Перечисления.НаправленияЭДО.Входящий);
		ДанныеЗаполнения.Вставить("Контрагент", ПараметрыКонтейнера.Контрагент);
		ДанныеЗаполнения.Вставить("Организация", ПараметрыКонтейнера.Организация);
		ДанныеЗаполнения.Вставить("ДоговорКонтрагента", ПараметрыКонтейнера.ДоговорКонтрагента);
		ДанныеЗаполнения.Вставить("Отправитель", ПараметрыКонтейнера.Отправитель);
		ДанныеЗаполнения.Вставить("Получатель", ПараметрыКонтейнера.Получатель);
		ДанныеЗаполнения.Вставить("СпособОбменаЭД", ПараметрыКонтейнера.СпособОбмена);
		ДанныеЗаполнения.Вставить("ВерсияФормата", Перечисления.ВерсииФорматаТранспортногоКонтейнераЭДО.Версия30);
		Если Не ЗначениеЗаполнено(ТранспортныйКонтейнерОбъект.Дата) Тогда
			ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВнешнийУИД", ПараметрыКонтейнера.ВнешнийУИД);
		ДанныеЗаполнения.Вставить("ИдентификаторПакета", ПараметрыКонтейнера.ИдентификаторПакета);
		ДанныеЗаполнения.Вставить("ИдентификаторДокументооборота", ПараметрыКонтейнера.ИдентификаторДокументооборота);
		ДанныеЗаполнения.Вставить("АдресРесурсаКонтрагента", ПараметрыКонтейнера.АдресРесурсаКонтрагента);
		Если ТранспортныйКонтейнерОбъект.ЭтоНовый()
			И СервисЭДО.ДоступнаОтправкаПодтвержденияПолученияКонтейнера(ПараметрыКонтейнера.СпособОбмена) Тогда
			ДанныеЗаполнения.Вставить("ТребуетсяПодтвердитьПолучение", Истина);
		КонецЕсли;
		
		Для каждого ЭлементДанных Из ДанныеЗаполнения Цикл
			Если ЗначениеЗаполнено(ЭлементДанных.Значение)
				И ТранспортныйКонтейнерОбъект[ЭлементДанных.Ключ] <> ЭлементДанных.Значение Тогда
				ТранспортныйКонтейнерОбъект[ЭлементДанных.Ключ] = ЭлементДанных.Значение;
				Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Записывать Тогда
			ТранспортныйКонтейнерОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание нового транспортного контейнера ЭДО'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ТранспортныйКонтейнерОбъект.Ссылка;
	
КонецФункции

Функция КонтейнерОбъекта(Объект, Направление = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("Массив") Тогда
		Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект);
	Иначе
		Объекты = Объект;
	КонецЕсли;
	
	ТранспортныйКонтейнер = Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер
	|ИЗ
	|	РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|ГДЕ
	|	ОбъектыТранспортныхКонтейнеровЭДО.Объект В (&Объекты)
	|	И ВЫБОР
	|		КОГДА &ОтборПоНаправлению
	|			ТОГДА ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер.Направление = &Направление
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.УстановитьПараметр("ОтборПоНаправлению", Направление <> Неопределено);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ТранспортныйКонтейнер = ВыборкаДетальныеЗаписи.ТранспортныйКонтейнер;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТранспортныйКонтейнер;
	
КонецФункции

// См. СинхронизацияЭДО.ПриЗагрузкеОбъекта
Процедура ПриЗагрузкеОбъекта(Объект, ДанныеОбъекта, КонтекстДиагностики) Экспорт
	
	ЗаполненыКлючевыеСвойства = ЗначениеЗаполнено(ДанныеОбъекта.Организация)
		И ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) И ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторПолучателя)
		И ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторОтправителя);
	
	КлючПриглашенияНаИдентификатор = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
	КлючПриглашенияНаИдентификатор.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
	КлючПриглашенияНаИдентификатор.ИдентификаторКонтрагента = ДанныеОбъекта.ИдентификаторОтправителя;
	
	КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
	КлючПриглашения.Ключ = ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам(КлючПриглашенияНаИдентификатор);
	КлючПриглашения.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
	
	Приглашение = ПриглашенияЭДО.КлючЗаписиПриглашения(КлючПриглашения);

	ДанныеПриглашения = ПриглашенияЭДО.ДанныеПриглашения(КлючПриглашения);
	Если ДанныеПриглашения = Неопределено Тогда
		СтатусПриглашения = Неопределено;
	Иначе
		СтатусПриглашения = ДанныеПриглашения.Статус;
	КонецЕсли;
	ПриглашениеПринято = ПриглашенияЭДО.ПриглашениеПринято(СтатусПриглашения);
	
	ВидОперации = НСтр("ru = 'Распаковка транспортного контейнера ЭДО'");
		
	Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ДанныеОбъекта.СпособОбмена) Тогда
		КонтейнерМожноРаспаковать = ЗаполненыКлючевыеСвойства И ПриглашениеПринято;
	Иначе 
		КонтейнерМожноРаспаковать = ЗаполненыКлючевыеСвойства;
	КонецЕсли;
	
	Если Не КонтейнерМожноРаспаковать Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось распаковать транспортный контейнер ЭДО'");
		Если Не ЗаполненыКлючевыеСвойства Тогда
			ТекстСообщения = "";
			ДобавитьОшибкуНезаполненныхКлючевыхСвойств(КонтекстДиагностики, ДанныеОбъекта.ТранспортныйКонтейнер, ТекстСообщения);
		Иначе
			Карточка = ДанныеОбъекта.Карточка;
			ВидОшибки = ПриглашенияЭДОКлиентСервер.ВидОшибкиНеНастроенаСвязьСКонтрагентом(СтатусПриглашения,
				"Распаковка");
			ШаблонСообщения = НСтр("ru = 'Не удалось распаковать %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеОбъекта.ТранспортныйКонтейнер);
			ТекстСообщения = ТекстСообщения + Символы.ПС + ВидОшибки.ОписаниеПроблемы;
			ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки(
				ВидОшибки);
			ДополнительныеСвойстваОшибки.Приглашение = Приглашение;
			Если ДанныеПриглашения = Неопределено Тогда
				ИННКППОрганизации = Новый Массив;
				ИННКППОрганизации.Добавить(Карточка.ИННОрганизации);
				ИННКППОрганизации.Добавить(Карточка.КППОрганизации);

				ИННКППКонтрагента = Новый Массив;
				ИННКППКонтрагента.Добавить(Карточка.ИННКонтрагента);
				ИННКППКонтрагента.Добавить(Карточка.КППКонтрагента);

				ПредставлениеНенастроеннойСвязи = СтрШаблон(НСтр(
					"ru = 'Идентификатор организации %1(%2) - ИНН/КПП контрагента %3'"),
					ДанныеОбъекта.ИдентификаторПолучателя, СтрСоединить(ИННКППОрганизации, "/"), СтрСоединить(
					ИННКППКонтрагента, "/"));
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПредставлениеНенастроеннойСвязи;
				ДополнительныеСвойстваОшибки.ТекстСообщения = ПредставлениеНенастроеннойСвязи;
			КонецЕсли;
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеСвойстваОшибки);
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ДанныеОбъекта.ТранспортныйКонтейнер);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстСообщения, ТекстСообщения,
				ДополнительныеПараметрыОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
		
		ДанныеОбъекта.Отказ = Истина;
		ДанныеОбъекта.ПричинаОтказа = ТекстСообщения;
		Возврат;
	КонецЕсли;
	
	КонтейнерОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(ДанныеОбъекта.ТранспортныйКонтейнер);
	Если Не КонтейнерОбъект.Организация = ДанныеОбъекта.Организация Тогда
		КонтейнерОбъект.Организация = ДанныеОбъекта.Организация;
	КонецЕсли;
	Если Не КонтейнерОбъект.Контрагент = ДанныеОбъекта.Контрагент Тогда
		КонтейнерОбъект.Контрагент = ДанныеОбъекта.Контрагент;
	КонецЕсли;
	Если Не КонтейнерОбъект.ДоговорКонтрагента = ДанныеОбъекта.ДоговорКонтрагента Тогда
		КонтейнерОбъект.ДоговорКонтрагента = ДанныеОбъекта.ДоговорКонтрагента;
	КонецЕсли;
	Если Не КонтейнерОбъект.Отправитель = ДанныеОбъекта.ИдентификаторОтправителя Тогда
		КонтейнерОбъект.Отправитель = ДанныеОбъекта.ИдентификаторОтправителя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект) Тогда
		Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект);
		ДобавитьОбъектыВТранспортныйКонтейнер(Объекты, ДанныеОбъекта.ТранспортныйКонтейнер,
			Перечисления.НаправленияЭДО.Входящий);
	КонецЕсли;
	КонтейнерОбъект.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.Распакован;
	КонтейнерОбъект.ДополнительныеСвойства.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	КонтейнерОбъект.Записать();
	КонтекстДиагностики = КонтейнерОбъект.ДополнительныеСвойства.КонтекстДиагностики;
	
КонецПроцедуры

// См. СинхронизацияЭДО.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.Справочники.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ТранспортныйКонтейнерЭДО, Истина);
	
КонецПроцедуры

// См. СинхронизацияЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Изменение.Организации
	|Документ.ТранспортныйКонтейнерЭДО.Чтение.Организации
	|Документ.ТранспортныйКонтейнерЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

// См. СинхронизацияЭДО.ПриПолученииСпискаШаблонов 
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(
		ТранспортныеКонтейнерыЭДОКлиентСервер.ИмяРегламентногоЗаданияПометкаНаУдалениеТранспортныхКонтейнеровЭлектронныхДокументов());
	
КонецПроцедуры

// См. СинхронизацияЭДО.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ТранспортныеКонтейнерыЭДОСлужебный.ПометитьНаУдалениеТранспортныеКонтейнерыПоРасписанию");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПривестиСтрокуКФорматуИмени1С(ИсходнаяСтрока)

	Возврат СтрЗаменить(СокрЛП(ИсходнаяСтрока), " ", "");

КонецФункции

Функция ИсправитьРазделителиПутиКФайлу(Знач ПутьКФайлу) 
	
	ТребуемыйРазделитель = ПолучитьРазделительПути();
	
	НекорректныйРазделитель = ?(ТребуемыйРазделитель = "/", "\", "/");
	
	ИсправленныйПутьКФайлу = СтрЗаменить(ПутьКФайлу, НекорректныйРазделитель, ТребуемыйРазделитель);
	
	Возврат ИсправленныйПутьКФайлу;
	
КонецФункции

Функция ПолноеИмяФайлаЭДВКонтейнереПоРасширению(Знач КаталогКонтейнера, Знач ОписаниеФайловКонтейнера, Знач Расширение)
	
	// Определим служебные файлы контейнера.
	
	СлужебныеФайлы = Новый Массив;
	
	Если ОписаниеФайловКонтейнера.MainImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловКонтейнера.MainImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловКонтейнера.DataImage <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловКонтейнера.DataImage.Path);
	КонецЕсли;
	
	Если ОписаниеФайловКонтейнера.DataImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловКонтейнера.DataImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловКонтейнера.ExternalCard <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловКонтейнера.ExternalCard.Path);
	КонецЕсли;
	
	// Определим полные пути служебных файлов.
	
	Для Индекс = 1 По СлужебныеФайлы.Количество() Цикл
		
		ИмяФайла = ИсправитьРазделителиПутиКФайлу(СлужебныеФайлы[Индекс - 1]);
		СлужебныеФайлы[Индекс - 1] = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогКонтейнера, ИмяФайла);
		
	КонецЦикла;
	
	// Добавляем к служебным файлам файл транспорта.
	
	ФайлыТранспорта = НайтиФайлы(КаталогКонтейнера, "meta*.xml", Истина);
	Если ЗначениеЗаполнено(ФайлыТранспорта) Тогда
		СлужебныеФайлы.Добавить(ФайлыТранспорта[0].ПолноеИмя);
	КонецЕсли;
	
	// Найдем все файлы контейнера.
	
	ФайлыКонтейнера = НайтиФайлы(КаталогКонтейнера, "*", Истина);
	
	// Берем первый неслужебный файл с заданным расширением,
	// либо единственный не служебный.
	
	ОсновныеФайлы = Новый Массив;
	
	ПолноеИмяФайлаЭД = Неопределено;
	
	Для каждого Файл Из ФайлыКонтейнера Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлужебныеФайлы.Найти(Файл.ПолноеИмя) = Неопределено Тогда
			ОсновныеФайлы.Добавить(Файл.ПолноеИмя);
			Если Файл.Расширение = Расширение Тогда
				ПолноеИмяФайлаЭД = Файл.ПолноеИмя;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолноеИмяФайлаЭД = Неопределено И ОсновныеФайлы.Количество() = 1 Тогда
		ПолноеИмяФайлаЭД = ОсновныеФайлы[0];
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаЭД;
	
КонецФункции

Функция СтруктурированноеПолноеИмяФайла(ИмяКаталога, ИмяФайла)
	
	ИсправленноеИмяФайла = ИсправитьРазделителиПутиКФайлу(ИмяФайла);
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталога, ИсправленноеИмяФайла);
	СтруктурированноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	Если Прав(ИмяКаталога, 1) = "/" Тогда
		СтруктурированноеИмяФайла.ПолноеИмя = СтрЗаменить(СтруктурированноеИмяФайла.ПолноеИмя, "\", "/");
	КонецЕсли;
	
	Возврат СтруктурированноеИмяФайла; 
	
КонецФункции

Функция ДанныеВходящегоОбъекта(ДвоичныеДанные, КонтекстДиагностики)
	
	ДанныеКонтейнера = Новый Структура;
	ДанныеКонтейнера.Вставить("ТипДокумента");
	ДанныеКонтейнера.Вставить("ИдентификаторСообщения");
	ДанныеКонтейнера.Вставить("ТребуетсяИзвещение", Ложь);
	ДанныеКонтейнера.Вставить("ТребуетсяПодтверждение", Ложь);
	ДанныеКонтейнера.Вставить("Метаданные", Неопределено);
	ДанныеКонтейнера.Вставить("ИдентификаторыСообщенийОснований", Новый Массив);
	ДанныеКонтейнера.Вставить("ИдентификаторыДокументооборотовОснований", Новый Массив);
	ДанныеКонтейнера.Вставить("СопроводительнаяЗаписка", "");
	ДанныеКонтейнера.Вставить("Карточка", Неопределено);
	ДанныеКонтейнера.Вставить("Ошибка", Неопределено);
	ДанныеКонтейнера.Вставить("Доверенности", Неопределено);
	
	РезультатРаспаковки = РаспаковатьФайлКонтейнера(ДвоичныеДанные, КонтекстДиагностики);
	
	Карточка = РезультатРаспаковки.Карточка;
	
	ДанныеКонтейнера.Карточка = Карточка;
	ДанныеКонтейнера.СопроводительнаяЗаписка = Карточка.ТекстСопроводительнойЗаписки;
	ДанныеКонтейнера.ТипДокумента = Карточка.ТипДокумента;
	ДанныеКонтейнера.ИдентификаторСообщения = Карточка.ИдентификаторСообщения;
	ДанныеКонтейнера.ТребуетсяИзвещение = Карточка.ТребуетсяИзвещение;
	ДанныеКонтейнера.ТребуетсяПодтверждение = Карточка.ТребуетсяПодтверждение;
	ДанныеКонтейнера.ИдентификаторыСообщенийОснований = Карточка.ИдентификаторыСообщенийОснований;
	ДанныеКонтейнера.ИдентификаторыДокументооборотовОснований = Карточка.ИдентификаторыДокументооборотовОснований;
	ДанныеКонтейнера.Метаданные = РезультатРаспаковки.Метаданные;
	ДанныеКонтейнера.Ошибка = РезультатРаспаковки.Ошибка;
	ДанныеКонтейнера.Доверенности = РезультатРаспаковки.Доверенности;
	
	Возврат ДанныеКонтейнера;
	
КонецФункции

// Заполняет параметры транспортного контейнера по данным файла.
// 
// Параметры:
// 	ПараметрыКонтейнера - см. ПараметрыКонтейнера
// 	ДвоичныеДанные - ДвоичныеДанные
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьПараметрыКонтейнера(ПараметрыКонтейнера, ДвоичныеДанные, КонтекстДиагностики)
	
	РезультатРаспаковки = РаспаковатьФайлКонтейнера(ДвоичныеДанные, КонтекстДиагностики);
	
	Если РезультатРаспаковки.Карточка = Неопределено Или РезультатРаспаковки.Метаданные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при чтении транспортного контейнера ЭДО'");
	КонецЕсли;
	
	Карточка = РезультатРаспаковки.Карточка;
	
	ПараметрыКонтейнера.Отправитель = Карточка.ИдентификаторОтправителя;
	Если Не ЗначениеЗаполнено(ПараметрыКонтейнера.Получатель) Тогда
		ПараметрыКонтейнера.Получатель = Карточка.ИдентификаторПолучателя;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	СоздаватьКонтрагентовАвтоматическиБЭД = НастройкиЭДО.СоздаватьКонтрагентовАвтоматически();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьКонтрагентаПриРаспаковкеКонтейнера(
		ПараметрыКонтейнера, РезультатРаспаковки, СоздаватьКонтрагентовАвтоматическиБЭД);
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Карточка.КППОрганизацииУточненный) Тогда
		Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", Карточка.ИННОрганизации,
			Карточка.КППОрганизацииУточненный, Карточка.Дата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ПараметрыКонтейнера.Получатель);
		Если ЗначениеЗаполнено(ДанныеУчетнойЗаписи) Тогда
			Организация = ДанныеУчетнойЗаписи.Организация;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", Карточка.ИННОрганизации,
			Карточка.КППОрганизации, Карточка.Дата);
	КонецЕсли;
	ПараметрыКонтейнера.Организация = Организация;
	
	ДополнительныеРеквизиты = Новый Структура();
	ДополнительныеРеквизиты.Вставить("НомерДоговора", Карточка.НомерДоговора);
	ДополнительныеРеквизиты.Вставить("ДатаДоговора", Карточка.ДатаДоговора);
	ДополнительныеРеквизиты.Вставить("Организация", ПараметрыКонтейнера.Организация);
	ДополнительныеРеквизиты.Вставить("Владелец", ПараметрыКонтейнера.Контрагент);
	
	ДоговорКонтрагента = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"ДоговорыКонтрагентов", ДоговорКонтрагента, , ДополнительныеРеквизиты);
	ПараметрыКонтейнера.ДоговорКонтрагента = ДоговорКонтрагента;
	
	ОтложитьРаспаковкуКонтейнеровПоТранзакциям(ПараметрыКонтейнера, РезультатРаспаковки);
	
КонецПроцедуры

Процедура ОтложитьРаспаковкуКонтейнеровПоТранзакциям(ПараметрыКонтейнера, РезультатРаспаковки)
	
	Если Не ЗначениеЗаполнено(РезультатРаспаковки.Метаданные.Документы) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументКонтейнера = РезультатРаспаковки.Метаданные.Документы[0];
	
	Если ДокументКонтейнера.КодРегламента = "Invoice"
		И (ДокументКонтейнера.КодТранзакции = "TracingAccepted"
		ИЛИ ДокументКонтейнера.КодТранзакции = "TracingRejected"
		ИЛИ ДокументКонтейнера.КодТранзакции = "TracingCancellationAccepted"
		ИЛИ ДокументКонтейнера.КодТранзакции = "TracingCancellationRejected") Тогда
		ПараметрыКонтейнера.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.РаспакованДокументыНеОбработаны;
	КонецЕсли;
	
КонецПроцедуры

Функция РаспаковкаКонтейнераОтложена(ПараметрыКонтейнера)
	Возврат ПараметрыКонтейнера.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.РаспакованДокументыНеОбработаны;
КонецФункции

// Возвращает карточку транспортного контейнера.
// 
// Параметры:
// 	ИмяФайла - Строка
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * ТипДокумента - Строка
// * ИдентификаторСообщения - Строка
// * Дата - Дата
// * ТекстСопроводительнойЗаписки - Строка
// * ИдентификаторыДокументовОснований - Массив из Строка
// * ИдентификаторыДокументооборотовОснований - Массив из Строка
// * ЗаголовокДокумента - Строка
// * ТребуетсяПодтверждение - Булево
// * ТребуетсяИзвещение - Булево
// * ИдентификаторОтправителя - Строка
// * ИдентификаторПолучателя - Строка
// * НаименованиеКонтрагента - Строка
// * ИННКонтрагента - Строка
// * КППКонтрагента - Строка
// * ИННОрганизации - Строка
// * КППОрганизации - Строка
// * КППОрганизацииУточненный - Строка
// * КППКонтрагентаУточненный - Строка
// * НаименованиеКонтрагентаУточненное - Строка
// * АдресРесурсаКонтрагента - Неопределено
// 							 - Строка
// * ДоверенностьВерна - Неопределено
// 					   - Булево
// * КарточкаМЧД - Строка
Функция ПрочитатьКарточкуЭлектронногоДокумента(ИмяФайла)
	
	ВидОперации = НСтр("ru = 'Чтение карточки электронного документа.'");
	ПодсистемаСобытия = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	
	Карточка = Новый Структура;
	Карточка.Вставить("ТипДокумента", "");
	Карточка.Вставить("ИдентификаторСообщения", "");
	Карточка.Вставить("ТекстСопроводительнойЗаписки", "");
	Карточка.Вставить("ИдентификаторыСообщенийОснований", Новый Массив);
	Карточка.Вставить("ИдентификаторыДокументооборотовОснований", Новый Массив);
	Карточка.Вставить("ЗаголовокДокумента", "");
	Карточка.Вставить("ТребуетсяПодтверждение", Ложь);
	Карточка.Вставить("ТребуетсяИзвещение", Истина);
	Карточка.Вставить("НомерДоговора", "");
	Карточка.Вставить("ДатаДоговора", Дата(1, 1, 1));
	Карточка.Вставить("Дата", Дата(1, 1, 1));
	Карточка.Вставить("Номер", "");
	Карточка.Вставить("Сумма", 0);
	Карточка.Вставить("ИдентификаторОтправителя", "");
	Карточка.Вставить("ИдентификаторПолучателя", "");
	Карточка.Вставить("НаименованиеКонтрагента", "");
	Карточка.Вставить("ИННКонтрагента", "");
	Карточка.Вставить("КППКонтрагента", "");
	Карточка.Вставить("ИННОрганизации", "");
	Карточка.Вставить("КППОрганизации", "");
	Карточка.Вставить("КППОрганизацииУточненный", Неопределено);
	Карточка.Вставить("КППКонтрагентаУточненный", Неопределено);
	Карточка.Вставить("НаименованиеКонтрагентаУточненное", Неопределено);
	Карточка.Вставить("АдресРесурсаКонтрагента", Неопределено);
	Карточка.Вставить("ДоверенностьВерна", Неопределено);
	Карточка.Вставить("КарточкаМЧД", "");
	
	Попытка
		КарточкаXDTO = РаботаСФайламиБЭД.ПрочитатьXDTO(ИмяФайла, РаботаСФайламиБЭД.ПолучитьТипЗначенияCML(
			"Card", "http://api-invoice.taxcom.ru/card"));
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайла,
			КраткоеПредставлениеОшибки);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Карточка.ИдентификаторСообщения = ИдентификаторСообщенияВКарточке(КарточкаXDTO);
	
	ДополнительныеПараметры = ИзвлечьДополнительныеПараметрыКарточки(КарточкаXDTO);
	Карточка.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	ДоверенностьВерна = Неопределено;
	Если ДополнительныеПараметры.Свойство("IsWarrantActive", ДоверенностьВерна) Тогда
		Карточка.ДоверенностьВерна = ДоверенностьВерна;
	КонецЕсли;
	
	КарточкаМЧД = "";
	Если ДополнительныеПараметры.Свойство("WarrantPath", КарточкаМЧД) Тогда
		Карточка.КарточкаМЧД = КарточкаМЧД;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("НомерДоговора") Тогда
		Карточка.НомерДоговора = ДополнительныеПараметры.НомерДоговора;		
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ДатаДоговора") Тогда
		Попытка
			Карточка.ДатаДоговора = XMLЗначение(Тип("Дата"), ДополнительныеПараметры.ДатаДоговора);
		Исключение
			Карточка.ДатаДоговора = Дата(1, 1, 1);		
			ШаблонПредупреждения = НСтр("ru = 'Выполнение операции: %1
										|%2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ВидОперации, ПодробноеПредставлениеОшибки);
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ПодсистемаСобытия,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
	КонецЕсли;
	
	// После расширения состава типов документов, типы передаются в доп.данных
	Если ДополнительныеПараметры.Свойство("DocumentType") Тогда
		Карточка.ТипДокумента = ДополнительныеПараметры.DocumentType;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НеТребуетсяИзвещение", Ложь) Тогда
		Карточка.ТребуетсяИзвещение = Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Комментарий") Тогда
		Карточка.ТекстСопроводительнойЗаписки = ДополнительныеПараметры.Комментарий;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Номер") Тогда
		Карточка.Номер = ДополнительныеПараметры.Номер;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Сумма") Тогда
		Карточка.Сумма = ДополнительныеПараметры.Сумма;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ParentDocument") Тогда
		Если ТипЗнч(ДополнительныеПараметры.ParentDocument) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Карточка.ИдентификаторыСообщенийОснований,
				ДополнительныеПараметры.ParentDocument, Истина);
		Иначе
			Карточка.ИдентификаторыСообщенийОснований.Добавить(ДополнительныеПараметры.ParentDocument);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("LinkedDocument") Тогда
		Если ТипЗнч(ДополнительныеПараметры.LinkedDocument) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Карточка.ИдентификаторыДокументооборотовОснований,
				ДополнительныеПараметры.LinkedDocument, Истина);
		Иначе
			Карточка.ИдентификаторыДокументооборотовОснований.Добавить(ДополнительныеПараметры.LinkedDocument);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Карточка.ТекстСопроводительнойЗаписки) Тогда
		Карточка.ТекстСопроводительнойЗаписки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO,
			"Description.Comment", "");
	КонецЕсли;
	Карточка.ЗаголовокДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO, "Description.Title", "");
	Если Карточка.ТипДокумента = "" Тогда
		Карточка.ТипДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO, "Type.Name", "");
	КонецЕсли;
	Карточка.ТребуетсяПодтверждение = Булево(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO,
		"Type.ResignRequired", Ложь));
	
	Попытка
		// Обработка некорректной даты, возвращаемой сервером.
		ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO, "Description.Date",, "XMLДата",, Истина);
	Исключение
		ДатаДокумента = Неопределено;
		ШаблонПредупреждения = НСтр("ru = 'Выполнение операции: %1
									|%2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ВидОперации, ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ПодсистемаСобытия,
			УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;
	
	Карточка.Дата = ДатаДокумента;
		
	Отправитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO, "Sender.Abonent");
	Если Отправитель <> Неопределено Тогда
		Карточка.ИдентификаторОтправителя = Отправитель.ID;
		Карточка.ИННКонтрагента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Отправитель, "Inn", "");
		Карточка.КППКонтрагента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Отправитель, "KPP", "");
		Карточка.НаименованиеКонтрагента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Отправитель, "Name");
	КонецЕсли;
	
	Получатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КарточкаXDTO, "Receiver.Abonent");
	Если Получатель <> Неопределено Тогда
		Карточка.ИдентификаторПолучателя = Получатель.ID;
		Карточка.ИННОрганизации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Получатель, "Inn", "");
		Карточка.КППОрганизации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Получатель, "KPP", "");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("RealReceiverKPP") Тогда
		Карточка.КППОрганизацииУточненный = ДополнительныеПараметры.RealReceiverKPP;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("RealSenderKPP") Тогда
		Карточка.КППКонтрагентаУточненный = ДополнительныеПараметры.RealSenderKPP;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("RealSenderName") Тогда
		Карточка.НаименованиеКонтрагентаУточненное = ДополнительныеПараметры.RealSenderName;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ReplyTo") Тогда
		Карточка.АдресРесурсаКонтрагента = ДополнительныеПараметры.ReplyTo;
	КонецЕсли;
	
	Возврат Карточка;
	
КонецФункции

// Возвращает описание файла метаданных транспортного контейнера.
// 
// Параметры:
// 	ИмяФайла - Строка
// 	КаталогРаспаковки - Строка
// Возвращаемое значение:
// 	Структура:
// * Документы - Массив из см. НовоеОписаниеДокументаКонтейнера
Функция ПрочитатьФайлМетаданных(ИмяФайла, КаталогРаспаковки)
	
	МетаданныеКонтейнера = Новый Структура;
	МетаданныеКонтейнера.Вставить("Документы", Новый Массив);
	
	МетаданныеXDTO = РаботаСФайламиБЭД.ПрочитатьXDTO(ИмяФайла, 
		РаботаСФайламиБЭД.ПолучитьТипЗначенияCML("ContainerDescription",
			"http://api-invoice.taxcom.ru/meta"));
	
	Для Каждого Документооборот Из МетаданныеXDTO.DocFlow Цикл
		
		ИдентификаторДокументооборота = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документооборот, "Id");
		
		Для Каждого Документ Из Документооборот.Documents.Document Цикл
			
			ОписаниеДокументаКонтейнера = НовоеОписаниеДокументаКонтейнера();
			
			ОписаниеДокументаКонтейнера.ИдентификаторДокументооборота  = ИдентификаторДокументооборота;
			ОписаниеДокументаКонтейнера.КодТранзакции = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ,
				"TransactionCode");
			ОписаниеДокументаКонтейнера.КодРегламента = РаботаСФайламиБЭД. ЗначениеСвойстваXDTO(Документ,
				"ReglamentCode");
			
			// Получим файл электронного документа
			Если Документ.Files.MainImage <> Неопределено Тогда
				СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки,
					Документ.Files.MainImage.Path);
				Попытка
					ПолноеИмяФайла = СтруктурированноеИмяФайла.ПолноеИмя;
					ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(ПолноеИмяФайла);
				Исключение
					// Проблема распаковки файла. Ищем по расширению, исключая служебные файлы.
					ПолноеИмяФайла = ПолноеИмяФайлаЭДВКонтейнереПоРасширению(КаталогРаспаковки, Документ.Files,
						СтруктурированноеИмяФайла.Расширение);
					ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(ПолноеИмяФайла);
					Если ДвоичныеДанныеФайлаЭД = Неопределено Тогда
						ВызватьИсключение;
					КонецЕсли;
				КонецПопытки;
				СтруктурированноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
				ОписаниеДокументаКонтейнера.ОписаниеДанных.ИмяФайла = СтруктурированноеИмяФайла.Имя;
				ОписаниеДокументаКонтейнера.ОписаниеДанных.ДвоичныеДанные = ДвоичныеДанныеФайлаЭД;
			КонецЕсли;
			
			Если Документ.Files.MainImageSignature <> Неопределено Тогда
				// При распаковке архива возможны нарушения в именовании файлов.
				// Поэтому определяем файлы подписи как по данным транспортной информации, так и по расширению в архиве.
				// При совпадении работаем с данными архива, иначе по транспортной информации.
				ФайлыВАрхиве = Новый Массив;
				ФайлыВТИ = Новый Массив;
				РасширенияФайлов = Новый Массив;
				Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
					СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки,
						Подпись.Path);
					
					ТекФайл = Новый Файл(СтруктурированноеИмяФайла.ПолноеИмя);
					ФайлыВТИ.Добавить(ТекФайл);
					
					Если РасширенияФайлов.Найти(СтруктурированноеИмяФайла.Расширение) = Неопределено Тогда
						РасширенияФайлов.Добавить(СтруктурированноеИмяФайла.Расширение);
						ФайлыВАрхивеПоРасширению = НайтиФайлы(КаталогРаспаковки, "*" + СтруктурированноеИмяФайла.Расширение);
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыВАрхиве, ФайлыВАрхивеПоРасширению);
					КонецЕсли;
				КонецЦикла;
				
				ФайлыПодписи = ФайлыВТИ;
				Если ФайлыВАрхиве.Количество() = ФайлыВТИ.Количество() Тогда
					ФайлыПодписи = ФайлыВАрхиве;
				КонецЕсли;
				
				Для Каждого Подпись Из ФайлыПодписи Цикл
					СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(Подпись.Путь, Подпись.Имя);
					ДанныеПодписи = СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта();
					
					ДанныеПодписи.ИмяФайла = СтруктурированноеИмяФайла.Имя;
					ДанныеПодписи.ДвоичныеДанные = Новый ДвоичныеДанные(СтруктурированноеИмяФайла.ПолноеИмя);
					ОписаниеДокументаКонтейнера.ПодписиОсновныхДанных.Добавить(ДанныеПодписи);
				КонецЦикла;
			КонецЕсли;
			
			Если Документ.Files.DataImage <> Неопределено Тогда
				СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки,
					Документ.Files.DataImage.Path);
				ОписаниеДокументаКонтейнера.ОписаниеДополнительныхДанных.ИмяФайла = СтруктурированноеИмяФайла.Имя;
				ОписаниеДокументаКонтейнера.ОписаниеДополнительныхДанных.ДвоичныеДанные = Новый ДвоичныеДанные(
					СтруктурированноеИмяФайла.ПолноеИмя);
				Если Документ.Files.DataImageSignature <> Неопределено Тогда
					Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
						СтруктурированноеИмяФайла = СтруктурированноеПолноеИмяФайла(КаталогРаспаковки, Подпись.Path);
						ДанныеПодписи = СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта();
						ДанныеПодписи.ИмяФайла = СтруктурированноеИмяФайла.Имя;
						ДанныеПодписи.ИмяФайла = Новый ДвоичныеДанные(СтруктурированноеИмяФайла.ПолноеИмя);
						ОписаниеДокументаКонтейнера.ПодписиДополнительныхДанных.Добавить(ДанныеПодписи);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			МетаданныеКонтейнера.Документы.Добавить(ОписаниеДокументаКонтейнера);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МетаданныеКонтейнера;
	
КонецФункции

// Возвращает ошибку транспортного контейнера.
// 
// Параметры:
// 	ИмяФайла - Строка
// Возвращаемое значение:
// 	Структура:
// * КодОшибки - Строка
// * Описание - Строка
Функция ПрочитатьФайлОшибки(ИмяФайла)
	
	Ошибка = Новый Структура;
	
	ОшибкаXDTO = РаботаСФайламиБЭД.ПрочитатьXDTO(ИмяФайла);
	
	Ошибка.Вставить("КодОшибки", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОшибкаXDTO, "КодОшибки", "0"));
	Ошибка.Вставить("Описание", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОшибкаXDTO, "Описание", ""));
	
	Возврат Ошибка;
	
КонецФункции

Функция ИзвлечьДополнительныеПараметрыКарточки(Карточка)
	
	ДополнительныеПараметрыКарточки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Карточка,
		"Description.AdditionalData.AdditionalParameter");
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТипЗнч(ДополнительныеПараметрыКарточки) = Тип("СписокXDTO") Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыКарточки Цикл
			ДобавитьДополнительныйПараметр(ДополнительныеПараметры, ДополнительныйПараметр);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДополнительныеПараметрыКарточки) = Тип("ОбъектXDTO") Тогда
		ДобавитьДополнительныйПараметр(ДополнительныеПараметры, ДополнительныеПараметрыКарточки);
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ИдентификаторСообщенияВКарточке(Карточка)
	
	Идентификатор = "";
	
	Если Карточка.Identifiers.ExternalIdentifier <> Неопределено Тогда
		Идентификатор = Карточка.Identifiers.ExternalIdentifier;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор)
		ИЛИ Карточка.Sender.Abonent <> Неопределено
		ИЛИ Карточка.Identifiers.InternalId = Неопределено
		ИЛИ Карточка.Receiver.Abonent = Неопределено
		ИЛИ Карточка.Receiver.Abonent.Id = Неопределено Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	НомерОператора = Карточка.Identifiers.InternalId;
	ИдентификаторПолучателя = Карточка.Receiver.Abonent.Id;
	ПрефиксОператора = Лев(ИдентификаторПолучателя, 3);
	Идентификатор = ПрефиксОператора + НомерОператора;
	
	Возврат Идентификатор;
	
КонецФункции

Процедура ДобавитьДополнительныйПараметр(ДополнительныеПараметры, ДополнительныйПараметр)
	
	ИмяДополнительногоПараметра = ПривестиСтрокуКФорматуИмени1С(ДополнительныйПараметр.Name);
	Если ДополнительныеПараметры.Свойство(ИмяДополнительногоПараметра) Тогда
		Если ТипЗнч(ДополнительныеПараметры[ИмяДополнительногоПараметра]) = Тип("Массив") Тогда
			ДополнительныеПараметры[ИмяДополнительногоПараметра].Добавить(ДополнительныйПараметр.Value);
		Иначе
			НовоеЗначение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ДополнительныеПараметры[ИмяДополнительногоПараметра]);
			НовоеЗначение.Добавить(ДополнительныйПараметр.Value);
			ДополнительныеПараметры.Вставить(ИмяДополнительногоПараметра, НовоеЗначение);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить(ИмяДополнительногоПараметра, ДополнительныйПараметр.Value);
	КонецЕсли;
			
КонецПроцедуры

Процедура ДобавитьОбъектыВТранспортныйКонтейнер(Объекты, ТранспортныйКонтейнер, Направление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникДляБлокировки = ИсточникДляБлокировкиРегистраОбъектыТранспортныхКонтейнеров(Объекты);
	
	НачатьТранзакцию();
	Попытка
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("Объект", "Объект");
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО",
			ПоляБлокировки, ИсточникДляБлокировки);
		
		СуществующийКонтейнер = КонтейнерОбъекта(Объекты, Направление);
		
		Если Не ЗначениеЗаполнено(СуществующийКонтейнер) Тогда
			
			Для Каждого Объект Из Объекты Цикл
				МенеджерЗаписи = РегистрыСведений.ОбъектыТранспортныхКонтейнеровЭДО.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ТранспортныйКонтейнер = ТранспортныйКонтейнер;
				МенеджерЗаписи.Объект = Объект;
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Добавление объектов в транспортный контейнер ЭДО'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает описание транспортного контейнера.
// 
// Возвращаемое значение:
// 	Структура:
// * Ссылка - ДокументСсылка.ТранспортныйКонтейнерЭДО - транспортный контейнер
// * ИдентификаторУчетнойЗаписи - Строка
// * ОтправляемыеОбъекты - Массив из Произвольный
// * ОписаниеОшибки - Строка
Функция НовоеОписаниеКонтейнера()
	
	Контейнера = Новый Структура;
	Контейнера.Вставить("Ссылка", Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка());
	Контейнера.Вставить("ИдентификаторУчетнойЗаписи", "");
	Контейнера.Вставить("ОтправляемыеОбъекты", Новый Массив);
	Контейнера.Вставить("ОписаниеОшибки", "");
	
	Возврат Контейнера;
	
КонецФункции

Функция КонтейнерМожноРаспаковать(ТранспортныйКонтейнер, ПараметрыКонтейнера, Карточка, КонтекстДиагностики)
	
	Если РаспаковкаКонтейнераОтложена(ПараметрыКонтейнера) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Если не заполнено одно из ключевых свойств, значит, пытаются распаковать неизвестный контейнер.
	// Отправитель, Организация, Контрагент определяются при загрузке в компоненте "Электронные документы",
	// в подписке на событие см. ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеСообщения записываются в контейнер.
	
	ЗаполненыКлючевыеСвойства = ЗначениеЗаполнено(ПараметрыКонтейнера.Получатель);
	
	Если Не ЗаполненыКлючевыеСвойства Тогда
		Результат = Ложь;
		ДобавитьОшибкуНезаполненныхКлючевыхСвойств(КонтекстДиагностики, ТранспортныйКонтейнер);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет статус транспортного контейнера.
//
// Параметры:
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  НовыйСтатусКонтейнера - ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
//  ДатаИзменения - Дата - дата изменения статуса
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбновитьСтатусКонтейнера(ТранспортныйКонтейнер, НовыйСтатусКонтейнера, ДатаИзменения, КонтекстДиагностики)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
		Возврат;
	КонецЕсли;
	
	Контейнеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТранспортныйКонтейнер);
	Если ОбъектыКонтейнеров(Контейнеры)[ТранспортныйКонтейнер].Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ТранспортныйКонтейнер);
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ТранспортныйКонтейнер);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Обновление статуса транспортного контейнера ЭДО'"),
			ТекстОшибки,
			ТекстСообщения,
			,
			ТранспортныйКонтейнер);
		
		Возврат;
	КонецЕсли;
	
	ИзменитьСтатусКонтейнера(ТранспортныйКонтейнер, НовыйСтатусКонтейнера, КонтекстДиагностики);
	
КонецПроцедуры

// Формирует данные входящих объектов.
//
// Параметры:
//  ТранспортныеКонтейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. СинхронизацияЭДО.НовыеДанныеОбъектов
Функция СформироватьДанныеОбъектов(ТранспортныеКонтейнеры, КонтекстДиагностики = Неопределено)
	
	ДанныеОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
	ДанныеОбъектовПакетов = СинхронизацияЭДО.НовыеДанныеОбъектов();
	РеквизитыКонтейнеров = "Статус, Организация, Контрагент, Отправитель, Получатель, ДоговорКонтрагента, 
		|СпособОбменаЭД, ВнешнийУИД, ИдентификаторПакета, ИдентификаторДокументооборота, ВидСервисаЭДО";
	ЗначенияРеквизитовКонтейнеров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТранспортныеКонтейнеры, РеквизитыКонтейнеров);
	ПрисоединенныеФайлыКонтейнеров = ПрисоединенныеФайлыКонтейнеров(ТранспортныеКонтейнеры);
	МассивПрисоединенныхФайлов = Новый Массив;
	Для Каждого ПрисоединенныйФайлКонтейнера Из ПрисоединенныеФайлыКонтейнеров Цикл
		МассивПрисоединенныхФайлов.Добавить(ПрисоединенныйФайлКонтейнера.Значение[0]);
	КонецЦикла;
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(МассивПрисоединенныхФайлов);
	
	КлассификаторОшибок = СервисЭДО.КлассификаторОшибокПередачиДокументов(КонтекстДиагностики);
	КоличествоКонтейнеровВПакетахВсего = Новый Соответствие;
	КоличествоКонтейнеровВПакетахКРаспаковке = Новый Соответствие;
	
	Для каждого ТранспортныйКонтейнер Из ТранспортныеКонтейнеры Цикл
		ЗаполнитьКоличествоКонтейнеровВПакете(ТранспортныйКонтейнер, КоличествоКонтейнеровВПакетахВсего);
		
		Попытка
			
			ПрисоединенныеФайлыКонтейнера = ПрисоединенныеФайлыКонтейнеров[ТранспортныйКонтейнер];
			Если ПрисоединенныеФайлыКонтейнера = Неопределено Или ПрисоединенныеФайлыКонтейнера.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеФайла = ДвоичныеДанныеФайлов[ПрисоединенныеФайлыКонтейнера[0]];
			Если ДвоичныеДанныеФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТранспортныйКонтейнер.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС 
				И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
					
				Если ТранспортныйКонтейнер.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
					Продолжить;
				КонецЕсли;
				МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
				ДанныеВходящегоОбъекта = МодульПодсистемы.ДанныеВходящегоОбъекта(ТранспортныйКонтейнер,
					ДвоичныеДанныеФайла, КонтекстДиагностики);
				Если ДанныеВходящегоОбъекта.Метаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ДанныеВходящегоОбъекта = ДанныеВходящегоОбъекта(ДвоичныеДанныеФайла, КонтекстДиагностики);
			КонецЕсли;
			
			ЗначенияРеквизитовКонтейнера = ЗначенияРеквизитовКонтейнеров[ТранспортныйКонтейнер];
			ЗначенияРеквизитовКонтейнера.Вставить("СпособОбмена", ЗначенияРеквизитовКонтейнера.СпособОбменаЭД);
			Если ЗначенияРеквизитовКонтейнера.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.Неизвестный
				Или Не ЗаполненыКлючевыеПараметрыКонтейнера(ЗначенияРеквизитовКонтейнера) Тогда
				
				ПараметрыКонтейнера = ПараметрыКонтейнера(
					ЗначенияРеквизитовКонтейнера.ИдентификаторДокументооборота,
					ЗначенияРеквизитовКонтейнера.ВнешнийУИД,
					ЗначенияРеквизитовКонтейнера.ИдентификаторПакета,
					ЗначенияРеквизитовКонтейнера.СпособОбменаЭД,
					ЗначенияРеквизитовКонтейнера.Получатель,
					ЗначенияРеквизитовКонтейнера.ВидСервисаЭДО);
				ЗаполнитьПараметрыКонтейнера(ПараметрыКонтейнера, ДвоичныеДанныеФайла, КонтекстДиагностики);
				
				Если КонтрагентПриглашенияОбменаНеЗаполнен(
						ТранспортныйКонтейнер, ПараметрыКонтейнера, КонтекстДиагностики) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, ТранспортныйКонтейнер); 
				ЗначенияРеквизитовКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортныйКонтейнер,
					РеквизитыКонтейнеров);
				
			КонецЕсли;
			
			Если Не КонтейнерМожноРаспаковать(ТранспортныйКонтейнер, ЗначенияРеквизитовКонтейнера,
				ДанныеВходящегоОбъекта.Карточка, КонтекстДиагностики) Тогда
				Продолжить;
			КонецЕсли;
			
			МетаданныеКонтейнера = ДанныеВходящегоОбъекта.Метаданные;// см. ПрочитатьФайлМетаданных
			Для Каждого Документ Из МетаданныеКонтейнера.Документы Цикл
				Если ЗначениеЗаполнено(ЗначенияРеквизитовКонтейнера.ИдентификаторПакета) Тогда
					ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектовПакетов);
				Иначе 
					ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
				КонецЕсли;
				ДанныеОбъекта.ИдентификаторСообщения = ДанныеВходящегоОбъекта.ИдентификаторСообщения;
				ДанныеОбъекта.ИдентификаторКонтейнера = ЗначенияРеквизитовКонтейнера.ВнешнийУИД;
				ДанныеОбъекта.ИдентификаторПакета = ЗначенияРеквизитовКонтейнера.ИдентификаторПакета;
				ДанныеОбъекта.ИдентификаторДокументооборота = Документ.ИдентификаторДокументооборота;
				ДанныеОбъекта.ИдентификаторыСообщенийОснований = ДанныеВходящегоОбъекта.ИдентификаторыСообщенийОснований;
				ДанныеОбъекта.ИдентификаторыДокументооборотовОснований = ДанныеВходящегоОбъекта.ИдентификаторыДокументооборотовОснований; 
				ДанныеОбъекта.ИдентификаторОтправителя = ЗначенияРеквизитовКонтейнера.Отправитель;
				ДанныеОбъекта.ИдентификаторПолучателя = ЗначенияРеквизитовКонтейнера.Получатель;
				ДанныеОбъекта.Организация = ЗначенияРеквизитовКонтейнера.Организация;
				ДанныеОбъекта.Контрагент = ЗначенияРеквизитовКонтейнера.Контрагент;
				ДанныеОбъекта.ДоговорКонтрагента = ЗначенияРеквизитовКонтейнера.ДоговорКонтрагента;
				ДанныеОбъекта.ОписаниеДанных.ИмяФайла = Документ.ОписаниеДанных.ИмяФайла;
				ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные = Документ.ОписаниеДанных.ДвоичныеДанные;
				ДанныеОбъекта.Доверенности = ДанныеВходящегоОбъекта.Доверенности;
				Для Каждого Подпись Из Документ.ПодписиОсновныхДанных Цикл
					ДанныеОбъекта.ПодписиОсновныхДанных.Добавить(Подпись);
				КонецЦикла;
				ДанныеОбъекта.ТребуетсяИзвещение = ДанныеВходящегоОбъекта.ТребуетсяИзвещение;
				ДанныеОбъекта.ТребуетсяПодтверждение = ДанныеВходящегоОбъекта.ТребуетсяПодтверждение;
				ДанныеОбъекта.ТипРегламента = ТранспортныеКонтейнерыЭДОСлужебный.ТипРегламентаИзСтроки(
						Документ.КодРегламента, ДанныеВходящегоОбъекта.ТипДокумента);
				ПараметрыДокумента = ТранспортныеКонтейнерыЭДОСлужебный.ПараметрыДокумента(
					ДанныеВходящегоОбъекта.ТипДокумента, ДанныеОбъекта.ТипРегламента, Документ.КодТранзакции);
				Если ОбщегоНазначения.ПодсистемаСуществует(
					"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
					Если ЗначенияРеквизитовКонтейнера.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
						МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль(
							"ЭлектронноеАктированиеЕИСПолучениеВходящих");
						МодульЭлектронноеАктированиеЕИС.ПриПолученииПараметровДокумента(
							ПараметрыДокумента);
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.Ошибка Тогда
					ОшибкаПередачи = СинхронизацияЭДО.НоваяОшибкаПередачи();
					ОшибкаПередачи.Код = ДанныеВходящегоОбъекта.Ошибка.КодОшибки;
					ОшибкаПередачи.Описание = ДанныеВходящегоОбъекта.Ошибка.Описание;
					ОшибкаПоКлассификатору = КлассификаторОшибок[ДанныеВходящегоОбъекта.Ошибка.КодОшибки];
					Если ОшибкаПоКлассификатору <> Неопределено Тогда
						ОшибкаПередачи.Описание = ОшибкаПоКлассификатору["description"];
						ОшибкаПередачи.Блокирующая = ОшибкаПоКлассификатору["blocking"];
					КонецЕсли;
					ДанныеОбъекта.ОшибкаПередачи = ОшибкаПередачи;
				КонецЕсли;
				ДанныеОбъекта.ЭтоОтветнаяПодпись = ПараметрыДокумента.ЭтоОтветнаяПодпись;
				ДанныеОбъекта.ТипДокумента = ПараметрыДокумента.ТипДокумента;
				ДанныеОбъекта.ТипЭлементаРегламента = ПараметрыДокумента.ТипЭлементаРегламента;
				ДанныеОбъекта.СпособОбмена = ЗначенияРеквизитовКонтейнера.СпособОбменаЭД;
				ДанныеОбъекта.СопроводительнаяЗаписка = ДанныеВходящегоОбъекта.СопроводительнаяЗаписка;
				ДанныеОбъекта.ОписаниеДополнительныхДанных.ИмяФайла = Документ.ОписаниеДополнительныхДанных.ИмяФайла;
				ДанныеОбъекта.ОписаниеДополнительныхДанных.ДвоичныеДанные = Документ.ОписаниеДополнительныхДанных.ДвоичныеДанные;
				Для Каждого Подпись Из Документ.ПодписиДополнительныхДанных Цикл
					ДанныеОбъекта.ПодписиДополнительныхДанных.Добавить(Подпись);
				КонецЦикла;
				ДанныеОбъекта.ТранспортныйКонтейнер = ТранспортныйКонтейнер;
				ДанныеОбъекта.Карточка = ДанныеВходящегоОбъекта.Карточка;
				ДанныеОбъекта.ДатаСоздания = ДанныеВходящегоОбъекта.Карточка.Дата;
				ДанныеОбъекта.ОписаниеДокумента.Дата = ДанныеВходящегоОбъекта.Карточка.Дата;
				ДанныеОбъекта.ОписаниеДокумента.Номер = ДанныеВходящегоОбъекта.Карточка.Номер;
				ДанныеОбъекта.ОписаниеДокумента.Сумма = ДанныеВходящегоОбъекта.Карточка.Сумма;
				ДанныеОбъекта.Распакован = ЗначенияРеквизитовКонтейнера.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.Распакован;
				ДанныеОбъекта.ДоверенностьВерна = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДанныеВходящегоОбъекта.Карточка, "ДоверенностьВерна");
			КонецЦикла;
			
			СтатусыКРаспаковке = СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
			Если СтатусыКРаспаковке.Найти(ЗначенияРеквизитовКонтейнера.Статус) <> Неопределено Тогда
				
				Если ТранспортныйКонтейнер.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС
					И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
					ПараметрыКонтейнера = ПараметрыКонтейнера(
						ЗначенияРеквизитовКонтейнера.ИдентификаторДокументооборота,
						ЗначенияРеквизитовКонтейнера.ВнешнийУИД,
						ЗначенияРеквизитовКонтейнера.ИдентификаторПакета,
						Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС,
						ЗначенияРеквизитовКонтейнера.Отправитель,
						ЗначенияРеквизитовКонтейнера.ВидСервисаЭДО);
					МодульПодсистемы.ЗаполнитьПараметрыКонтейнера(ПараметрыКонтейнера,
						ЗначенияРеквизитовКонтейнера);
					ЗаполнитьТранспортныйКонтейнер(ПараметрыКонтейнера, ТранспортныйКонтейнер);
				КонецЕсли;
				
			КонецЕсли;
			ЗаполнитьКоличествоКонтейнеровВПакете(ТранспортныйКонтейнер, КоличествоКонтейнеровВПакетахКРаспаковке);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Распаковка транспортного контейнера ЭДО'");
			
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстОшибки, ТекстСообщения);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ДанныеОбъектовПакета Из ДанныеОбъектовПакетов Цикл
		КонтейнеровВПакетеВсего = КоличествоКонтейнеровВПакетахВсего[ДанныеОбъектовПакета.ИдентификаторПакета];
		КонтейнеровВПакетеКРаспаковке = КоличествоКонтейнеровВПакетахКРаспаковке[ДанныеОбъектовПакета.ИдентификаторПакета];
		Если КонтейнеровВПакетеВсего = КонтейнеровВПакетеКРаспаковке Тогда
			ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДанныеОбъектовПакета,, "ИдентификаторСтроки");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеОбъектов;
	
КонецФункции

Функция СоздатьКонтейнерИПрисоединенныйФайл(ДанныеОбъектов, КонтекстДиагностики)
	
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	ЕстьЭлектронноеАктированиеЕИС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если (МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
				ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС()) Тогда
			ЕстьЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеКонтейнера = НовоеОписаниеКонтейнера();
	ЕстьОшибка = Ложь;
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		ОписаниеКонтейнера.ОтправляемыеОбъекты.Добавить(ДанныеОбъекта.Объект);
		ОписаниеКонтейнера.ИдентификаторУчетнойЗаписи = ДанныеОбъекта.ИдентификаторОтправителя;
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторПакета)
			И СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ДанныеОбъекта.СпособОбмена) Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Пакетная отправка разрешена только для обмена через оператора ЭДО: %1'"),
				ДанныеОбъекта.Представление);
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Возврат ОписаниеКонтейнера;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
			СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(КонтекстДиагностики, ДанныеОбъекта.ИдентификаторОтправителя);
			
			Если СинхронизацияЭДО.ЭтоПрямойОбмен(ДанныеОбъекта.СпособОбмена)
				И Не ЗначениеЗаполнено(ДанныеОбъекта.АдресРесурсаКонтрагента) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен обратный адрес контрагента: %1'"),
					ДанныеОбъекта.Представление);
				Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Формирование транспортного контейнера ЭДО'"),
					ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
					ТекстОшибки, ТекстОшибки);
				ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
					ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
				ОтменитьТранзакцию();
				Возврат ОписаниеКонтейнера;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеКонтейнера.Ссылка) Тогда
				ПараметрыКонтейнера = Новый Структура("Отправитель, Получатель, Организация, Контрагент, ДоговорКонтрагента,
				|ТребуетсяИзвещение, ВерсияФормата, СпособОбменаЭД,
				|АдресРесурсаОрганизации, АдресРесурсаКонтрагента, ИдентификаторДокументооборота, ВидСервисаЭДО");
				ЗаполнитьЗначенияСвойств(ПараметрыКонтейнера, ДанныеОбъекта);
				ПараметрыКонтейнера.Отправитель = ДанныеОбъекта.ИдентификаторОтправителя;
				ПараметрыКонтейнера.Получатель = ДанныеОбъекта.ИдентификаторПолучателя;
				ПараметрыКонтейнера.СпособОбменаЭД = ДанныеОбъекта.СпособОбмена;
				ПараметрыКонтейнера.ВерсияФормата = Перечисления.ВерсииФорматаТранспортногоКонтейнераЭДО.Версия30;
				Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
					МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД"); 
					МодульОбменСГИСЭПД.ПриЗаполненииПараметровКонтейнера(ПараметрыКонтейнера, ДанныеОбъекта);
				КонецЕсли;
				ТранспортныйКонтейнер = СоздатьДокументКонтейнера(ПараметрыКонтейнера, ОписаниеКонтейнера.ОтправляемыеОбъекты);
				Если ТранспортныйКонтейнер <> Неопределено Тогда
					ОписаниеКонтейнера.Ссылка = ТранспортныйКонтейнер;
					ОписаниеКонтейнера.ИдентификаторУчетнойЗаписи = ПараметрыКонтейнера.Отправитель;
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при создании транспортного контейнера: %1'"),
						ДанныеОбъекта.Представление);
					ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки,
						ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
					ОтменитьТранзакцию();
					Возврат ОписаниеКонтейнера;
				КонецЕсли;
			КонецЕсли;
			
			Если ТранспортныйКонтейнер <> Неопределено Тогда
				ДанныеОбъекта.ТранспортныйКонтейнер = ТранспортныйКонтейнер;
				ОписаниеКонтейнера.ОтправляемыеОбъекты.Добавить(ДанныеОбъекта.Объект);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
			Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыКонтейнера.СпособОбменаЭД)
				Или СинхронизацияЭДО.ЭтоПрямойОбмен(ПараметрыКонтейнера.СпособОбменаЭД) Тогда
				ТранспортныеКонтейнерыЭДОСлужебный.СформироватьПрисоединенныйФайлТранспортногоКонтейнераОператораЭДО(
					ТранспортныйКонтейнер, ДанныеОбъектов, КонтекстДиагностики);
			ИначеЕсли ДанныеОбъекта <> Неопределено
				И ЕстьЭлектронноеАктированиеЕИС
				И МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ПараметрыКонтейнера.СпособОбменаЭД) Тогда
				РезультатФормирования = МодульЭлектронноеАктированиеЕИС.СформироватьТранспортныйПакетДляЕИС(
					ТранспортныйКонтейнер,
					ДанныеОбъекта);
				Если НЕ РезультатФормирования.Выполнено Тогда
					ВызватьИсключение(РезультатФормирования.ОписаниеОшибки);
				КонецЕсли;
			ИначеЕсли ДанныеОбъекта <> Неопределено Тогда 
				ТранспортныеКонтейнерыЭДОСлужебный.СформироватьПрисоединенныйФайлТранспортногоКонтейнера(ТранспортныйКонтейнер,
					ДанныеОбъекта);
			Иначе
				ОтменитьТранзакцию();
				Возврат ОписаниеКонтейнера;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

// Создает документ ТранспортныйКонтейнерЭДО и заполняет его реквизиты.
//
// Параметры:
//  РеквизитыДокумента - Структура - значения реквизитов документа
//  ОбъектыКонтейнера - Массив из ДокументСсылка.СообщениеЭДО
//  ТекстОшибки - Строка
// Возвращаемое значение:
//  ДокументСсылка.ТранспортныйКонтейнерЭДО - ссылка на созданный документ.
//
Функция СоздатьДокументКонтейнера(РеквизитыДокумента, ОбъектыКонтейнера, ТекстОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка();
	
	ИсточникДляБлокировки = ИсточникДляБлокировкиРегистраОбъектыТранспортныхКонтейнеров(ОбъектыКонтейнера);
	
	НачатьТранзакцию();
	Попытка
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("Объект", "Объект");
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО",
			ПоляБлокировки, ИсточникДляБлокировки);
		
		СуществующийКонтейнер = КонтейнерОбъекта(ОбъектыКонтейнера, Перечисления.НаправленияЭДО.Исходящий);
		
		Если Не ЗначениеЗаполнено(СуществующийКонтейнер) Тогда
			Контейнер = Документы.ТранспортныйКонтейнерЭДО.СоздатьДокумент();
			Контейнер.Дата = ТекущаяДатаСеанса();
			Если РеквизитыДокумента.Свойство("Отправитель") Тогда
				Контейнер.Отправитель = РеквизитыДокумента.Отправитель;
			КонецЕсли;
			Если РеквизитыДокумента.Свойство("Получатель") Тогда
				Контейнер.Получатель = РеквизитыДокумента.Получатель;
			КонецЕсли;
			Контейнер.Контрагент = РеквизитыДокумента.Контрагент;
			Контейнер.Организация = РеквизитыДокумента.Организация;

			Контейнер.Статус = Перечисления.СтатусыТранспортныхСообщенийБЭД.ПодготовленКОтправке;
			Контейнер.Направление = Перечисления.НаправленияЭДО.Исходящий;
			Если РеквизитыДокумента.Свойство("ВерсияФормата") Тогда
				Контейнер.ВерсияФормата = РеквизитыДокумента.ВерсияФормата;
			КонецЕсли;
			
			Если РеквизитыДокумента.Свойство("АдресРесурсаОрганизации") Тогда
				Контейнер.АдресРесурсаОрганизации = РеквизитыДокумента.АдресРесурсаОрганизации;
			КонецЕсли;
			Если РеквизитыДокумента.Свойство("АдресРесурсаКонтрагента") Тогда
				Контейнер.АдресРесурсаКонтрагента = РеквизитыДокумента.АдресРесурсаКонтрагента;
			КонецЕсли;
			Контейнер.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторДокументооборота;
			Контейнер.СпособОбменаЭД = РеквизитыДокумента.СпособОбменаЭД;
			Контейнер.ВидСервисаЭДО = РеквизитыДокумента.ВидСервисаЭДО;
			
			Контейнер.Записать();
			
			ДобавитьОбъектыВТранспортныйКонтейнер(ОбъектыКонтейнера, Контейнер.Ссылка,
				Перечисления.НаправленияЭДО.Исходящий);
			
			Результат = Контейнер.Ссылка;
		Иначе
			Результат = СуществующийКонтейнер;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Создание транспортного контейнера ЭДО'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстОшибки);
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

Функция ИсточникДляБлокировкиРегистраОбъектыТранспортныхКонтейнеров(Объекты)
	
	ИсточникДляБлокировки = РегистрыСведений.ОбъектыТранспортныхКонтейнеровЭДО.СоздатьНаборЗаписей();
	ИсточникДляБлокировки = ИсточникДляБлокировки.ВыгрузитьКолонки("Объект");
	
	Для Каждого ОбъектКонтейнера Из Объекты Цикл
		НоваяСтрока = ИсточникДляБлокировки.Добавить();
		НоваяСтрока.Объект = ОбъектКонтейнера;
	КонецЦикла;
	
	Возврат ИсточникДляБлокировки;
	
КонецФункции

Процедура ДобавитьОшибкуНезаполненныхКлючевыхСвойств(КонтекстДиагностики, Пакет, ТекстСообщения = "")
	
	ВидОперации = НСтр("ru = 'Распаковка пакета электронного документа'");
	Шаблон = НСтр(
		"ru = 'Не удалось распаковать %1: не заполнено одно или несколько ключевых свойств. Вероятно, пакет был загружен некорректно. Обратитесь в тех. поддержку.'");
	ТекстСообщения = СтрШаблон(Шаблон, Пакет);
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", Пакет);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения,
		ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДополнитьКонтейнерамиИзПакетов(Контейнеры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.ИдентификаторПакета
		|ПОМЕСТИТЬ ИдентификаторыПакетов
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.Ссылка В (&Контейнеры)
		|	И ТранспортныйКонтейнерЭДО.ИдентификаторПакета <> """"
		|;
		|
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.ИдентификаторПакета В
		|		(ВЫБРАТЬ
		|			ИдентификаторПакета
		|		ИЗ
		|			ИдентификаторыПакетов)
		|	И ТранспортныйКонтейнерЭДО.Ссылка НЕ В (&Контейнеры)";
	
	Запрос.УстановитьПараметр("Контейнеры", Контейнеры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контейнеры.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВидОшибкиНеУдалосьРаспаковатьКонтейнер()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеУдалосьРаспаковатьКонтейнер";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать транспортный контейнер ЭДО'");
	ВидОшибки.ОписаниеПроблемы = "";
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Отмените"">Отмените</a> распаковку контейнера'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Отмените",
		"СинхронизацияЭДОКлиент.ПоказатьДействияДляНераспакованныхКонтейнеров");
	
	Возврат ВидОшибки;
	
КонецФункции

Функция ЗаполненыКлючевыеПараметрыКонтейнера(ПараметрыКонтейнера)
	
	Возврат ЗначениеЗаполнено(ПараметрыКонтейнера.Контрагент)
		И ЗначениеЗаполнено(ПараметрыКонтейнера.Организация)
		И ЗначениеЗаполнено(ПараметрыКонтейнера.Получатель);
	
КонецФункции

Процедура ЗаполнитьКонтрагентаПриРаспаковкеКонтейнера(ПараметрыКонтейнера,
		РезультатРаспаковки, СоздаватьКонтрагентовАвтоматически)
	
	Карточка = РезультатРаспаковки.Карточка;
	
	ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
	ПараметрыПриглашения.ИдентификаторОрганизации = ПараметрыКонтейнера.Получатель;
	ПараметрыПриглашения.ИдентификаторКонтрагента = Карточка.ИдентификаторОтправителя;
	ПараметрыПриглашения.ИНН = Карточка.ИННКонтрагента;
	ПараметрыПриглашения.КПП = Карточка.КППКонтрагентаУточненный;
	
	ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
	ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
	
	ВозможноСоздатьКонтрагента = Не ОбменМеждуСобственнымиОрганизациями
		И СоздаватьКонтрагентовАвтоматически;
	
	Если ЗначениеЗаполнено(Карточка.КППКонтрагентаУточненный) Тогда
		
		Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя, Карточка.ИННКонтрагента,
		Карточка.КППКонтрагентаУточненный, Карточка.Дата);
		
		Если Не ЗначениеЗаполнено(Контрагент)	
		И ВозможноСоздатьКонтрагента
		И ЗначениеЗаполнено(Карточка.НаименованиеКонтрагентаУточненное) Тогда
			
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("ИНН", Карточка.ИННКонтрагента);
			РеквизитыКонтрагента.Вставить("КПП", Карточка.КППКонтрагентаУточненный);
			РеквизитыКонтрагента.Вставить("Наименование", Карточка.НаименованиеКонтрагентаУточненное);
			Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли;   
	
	Если Не ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(Карточка.ИННКонтрагента) Тогда
		
		Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя, Карточка.ИННКонтрагента,
		Карточка.КППКонтрагента, Карточка.Дата);   
		
		Если Не ЗначениеЗаполнено(Контрагент)
		И ВозможноСоздатьКонтрагента
		И ЗначениеЗаполнено(Карточка.НаименованиеКонтрагента) Тогда
			
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("ИНН", Карточка.ИННКонтрагента);
			РеквизитыКонтрагента.Вставить("КПП", Карточка.КППКонтрагента);
			РеквизитыКонтрагента.Вставить("Наименование", Карточка.НаименованиеКонтрагента);
			Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли; 
	
	ДанныеПриглашения = Неопределено;
	
	Если Не ПустаяСтрока(Карточка.ИдентификаторОтправителя) Тогда
		
		КлючПриглашенияНаИдентификатор = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
		КлючПриглашенияНаИдентификатор.ИдентификаторОрганизации = ПараметрыКонтейнера.Получатель;
		КлючПриглашенияНаИдентификатор.ИдентификаторКонтрагента = Карточка.ИдентификаторОтправителя;
		
		КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
		КлючПриглашения.Ключ = ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам(КлючПриглашенияНаИдентификатор);
		КлючПриглашения.ИдентификаторОрганизации = ПараметрыКонтейнера.Получатель;
	
		ДанныеПриглашения = ПриглашенияЭДО.ДанныеПриглашения(КлючПриглашения);
		
	КонецЕсли;
	
	Если ДанныеПриглашения <> Неопределено 
		И Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Контрагент = ДанныеПриглашения.Контрагент;
		
	КонецЕсли;
	
	ЗаполнитьКонтрагентаВПриглашении(ДанныеПриглашения, Контрагент);
	
	ПараметрыКонтейнера.Контрагент = Контрагент;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаВПриглашении(ДанныеПриглашения, Контрагент)
	
	Если ДанныеПриглашения = Неопределено 
		ИЛИ Не ЗначениеЗаполнено(Контрагент) 
		ИЛИ ЗначениеЗаполнено(ДанныеПриглашения.Контрагент) Тогда
		Возврат;
	КонецЕсли;
		
	КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
	КлючПриглашения.Ключ = ДанныеПриглашения.КлючПриглашения;
	КлючПриглашения.ИдентификаторОрганизации = ДанныеПриглашения.ИдентификаторОрганизации;
	УстановитьПривилегированныйРежим(Истина);
	ПриглашенияЭДО.ИзменитьКонтрагентаВПриглашении(КлючПриглашения, Контрагент);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КонтрагентПриглашенияОбменаНеЗаполнен(ТранспортныйКонтейнер,
	ПараметрыКонтейнера, КонтекстДиагностики)
	
	ИдентификаторОрганизации = ПараметрыКонтейнера.Получатель;
	ИдентификаторКонтрагента = ПараметрыКонтейнера.Отправитель;
	
	Если Не (ЗначениеЗаполнено(ИдентификаторОрганизации) И ЗначениеЗаполнено(ИдентификаторКонтрагента)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючПриглашенияНаИдентификатор = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
	КлючПриглашенияНаИдентификатор.ИдентификаторОрганизации = ИдентификаторОрганизации;
	КлючПриглашенияНаИдентификатор.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
	
	КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
	КлючПриглашения.Ключ = ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам(КлючПриглашенияНаИдентификатор);
	КлючПриглашения.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	ДанныеПриглашения = ПриглашенияЭДО.ДанныеПриглашения(КлючПриглашения);
	
	Если ДанныеПриглашения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПриглашения.Контрагент) Тогда
		ВидОперации = НСтр("ru = 'Распаковка транспортного контейнера ЭДО'");
		Шаблон = НСтр(
			"ru = 'Не удалось распаковать %1: В приглашении к обмену не заполнен контрагент информационной базы. Укажите контрагента в приглашении.'");
		ТекстСообщения = СтрШаблон(Шаблон, ТранспортныйКонтейнер);
		ДополнительныеПараметрыОшибки = Новый Структура;
		ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ТранспортныйКонтейнер);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения,
			ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		
		ПриглашенияЭДО.ДобавитьОшибкуПустогоКонтрагентаВПриглашении(КонтекстДиагностики, КлючПриглашения);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТранспортныйКонтейнерПоИдентификатору(ВнешнийУИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.ВнешнийУИД = &ВнешнийУИД";
	
	Запрос.УстановитьПараметр("ВнешнийУИД", ВнешнийУИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

Процедура ЗаполнитьКоличествоКонтейнеровВПакете(ТранспортныйКонтейнер, КоличествоКонтейнеровВПакетах) 
	
	Если ЗначениеЗаполнено(ТранспортныйКонтейнер.ИдентификаторПакета) Тогда
		КоличествоКонтейнеровВПакете = КоличествоКонтейнеровВПакетах[ТранспортныйКонтейнер.ИдентификаторПакета];
		Если КоличествоКонтейнеровВПакете = Неопределено Тогда
			КоличествоКонтейнеровВПакетах.Вставить(ТранспортныйКонтейнер.ИдентификаторПакета, 1);
		Иначе 
			КоличествоКонтейнеровВПакетах.Вставить(ТранспортныйКонтейнер.ИдентификаторПакета, КоличествоКонтейнеровВПакете + 1);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Отбирает контейнеры по статусам.
//
// Параметры:
//  Контейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
//  Статусы - Массив из ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
//
Процедура ОтобратьКонтейнерыПоСтатусам(Контейнеры, Статусы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.Статус В (&Статусы)
		|	И ТранспортныйКонтейнерЭДО.Ссылка В (&Контейнеры)";
	
	Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("Контейнеры", Контейнеры);
	
	Контейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецПроцедуры

#КонецОбласти
