
#Область ПрограммныйИнтерфейс

///
//  Функция ИмяОповещенияОбИзмененииАктуальностиОбъекта
//      Определяет имя оповещения, возникающего при изменении актуальности
//
//  Возврат:
//     {Строка}
//        Имя оповещения
///
Функция ИмяОповещения() Экспорт
	
	Возврат "Архивирование_ИзменениеАрхивностиОбъекта";
	
КонецФункции // ИмяОповещенияОбИзмененииАрхивностиОбъекта()

///
//  Функция ИмяРеквизита
//      Определяет имя реквизита подсистемы
//
//  Возврат:
//     {Строка}
//        Имя реквизита
///
Функция ИмяРеквизита() Экспорт
	
	Возврат ИмяРеквизитаАктуальность();
	
КонецФункции // ИмяОповещенияОбИзмененииАрхивностиОбъекта()

/// Имя реквизита Актуальность
//
// Если реквизит равен Ложь, то элемент считается помещенным в архив.
// Не рекомендуется использовать этот подход.
// Используйте лучше функцию ИмяРеквизитаВАрхиве().
//
// Возвращаемое значение:
//   Строка - Имя реквизита Актуальность.
///
Функция ИмяРеквизитаАктуальность() Экспорт
	
	Возврат "Актуальность";
	
КонецФункции

/// Имя реквизита ВАрхиве
//
// Если реквизит равен Истина, то элемент считается помещенным в архив.
//
// Возвращаемое значение:
//   Строка - Имя реквизита ВАрхиве.
///
Функция ИмяРеквизитаВАрхиве() Экспорт
	
	Возврат "ВАрхиве";
	
КонецФункции

/// Имя интерфейса оформлений
//
// Параметры:
//   ИмяРеквизита - Строка -
//     Имя реквизита, определяющего архивность.
//     Рекомендуется использовать реквизит ВАрхиве.
//     Реквизит Актуальность считается устаревшим.
//
//  Возвращаемое значение:
//    Строка -
//      "ВАрхивеСписок", если имя реквизита ВАрхиве,
//      "АрхивированиеСписок", если Актуальность.
///
Функция ИмяИнтерфейса(ИмяРеквизита) Экспорт
	
	Если ИмяРеквизитаВАрхиве() = ИмяРеквизита Тогда
		ИмяИнтерфейса_ = "ВАрхивеСписок";
		
	ИначеЕсли ИмяРеквизитаАктуальность() = ИмяРеквизита Тогда
		ИмяИнтерфейса_ = "АрхивированиеСписок";
		
	Иначе
		__ПРОВЕРКА__(Ложь, "baa89ad4-24a0-11e9-3b8f-c4346b22f0e4");
		
	КонецЕсли;
	
	Возврат ИмяИнтерфейса_;
	
КонецФункции

/// Значение для доступа к подсистеме
//
// Параметры:
//   ИмяРеквизита - Строка -
//     Имя реквизита, определяющего архивность.
//     Рекомендуется использовать реквизит ВАрхиве.
//     Реквизит Актуальность считается устаревшим.
//
//  Возвращаемое значение:
//     Булево - Истина, если имя реквизита ВАрхиве, Ложь, если Актуальность.
///
Функция ЗначениеНедоступности(ИмяРеквизита = "Актуальность") Экспорт
	
	Если ИмяРеквизитаВАрхиве() = ИмяРеквизита Тогда
		ЗначениеНедоступности_ = Истина;
		
	ИначеЕсли ИмяРеквизитаАктуальность() = ИмяРеквизита Тогда
		ЗначениеНедоступности_ = Ложь;
		
	Иначе
		__ПРОВЕРКА__(Ложь, "baa89ad4-24a0-11e9-3b8f-c4346b22f0e4");
		
	КонецЕсли;
	
	Возврат ЗначениеНедоступности_;
	
КонецФункции

/// Определение имени реквизита архивности по реквизиту формы
//
// Параметры:
//   РеквизитФормы - ДанныеФормы, ОбъектМетаданных -
//     Реквизит формы.
//
// Возвращаемое значение:
//   Строка - Имя реквизита архивности.
///
Функция ОпределитьИмяРеквизита(РеквизитФормы) Экспорт
	
	Если Ложь
		Или ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктура")
		Или ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктураСКоллекцией")
	Тогда
		РеквизитСПолем_ = РеквизитФормы;
		
	ИначеЕсли Истина
		И ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция")
		И РеквизитФормы.Количество() > 0
	Тогда
		РеквизитСПолем_ = РеквизитФормы[0];
		
	ИначеЕсли Истина
		И ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция")
		И РеквизитФормы.Количество() = 0
	Тогда
		РеквизитСПолем_ = РеквизитФормы.Добавить();
		УдалятьСтроку_ = Истина;
		
	ИначеЕсли Истина
		И ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыДерево")
		И РеквизитФормы.ПолучитьЭлементы().Количество() > 0
	Тогда
		РеквизитСПолем_ = РеквизитФормы.ПолучитьЭлементы().Получить(0);
		
	ИначеЕсли Истина
		И ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыДерево")
		И РеквизитФормы.ПолучитьЭлементы().Количество() = 0
	Тогда
		РеквизитСПолем_ = РеквизитФормы.ПолучитьЭлементы().Добавить();
		УдалятьСтроку_ = Истина;
		
	ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ДинамическийСписок") Тогда
		
		ЭлементыВыбора_ = РеквизитФормы.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;

		Если Не Неопределено = ЭлементыВыбора_.Найти(ИмяРеквизитаВАрхиве()) Тогда
			ИмяРеквизита_ = ИмяРеквизитаВАрхиве();
		ИначеЕсли Не Неопределено = ЭлементыВыбора_.Найти(ИмяРеквизитаАктуальность()) Тогда
			ИмяРеквизита_ = ИмяРеквизитаАктуальность();
		КонецЕсли;
		
		Возврат ИмяРеквизита_;
		
	#Если Сервер Тогда
	
	ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ОбъектМетаданных") Тогда
		ИмяРеквизита_ = АрхивированиеСервер.ОпределитьИмяРеквизитаПоМетаданным(РеквизитФормы);
		Возврат ИмяРеквизита_;
		
	ИначеЕсли
		Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РеквизитФормы)) Или
		ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(РеквизитФормы))
	Тогда
		ИмяРеквизита_ = АрхивированиеСервер.ОпределитьИмяРеквизитаПоСсылке(РеквизитФормы);
		Возврат ИмяРеквизита_;
		
	#КонецЕсли
		
	Иначе
		__ПРОВЕРКА__(Ложь, "559a037e-24a7-11e9-3b8f-c4346b22f0e4");
		
	КонецЕсли;
	
	ЕстьРеквизитВАрхиве_ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		РеквизитСПолем_, ИмяРеквизитаВАрхиве()
	);
	ЕстьРеквизитАктуальность_ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		РеквизитСПолем_, ИмяРеквизитаАктуальность()
	);
	
	Если Истина = УдалятьСтроку_ Тогда
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			РеквизитФормы.Удалить(РеквизитСПолем_);
		ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыДерево") Тогда
			РеквизитФормы.ПолучитьЭлементы().Удалить(РеквизитСПолем_);
		КонецЕсли;
	КонецЕсли;
	
	Если Истина = ЕстьРеквизитВАрхиве_ Тогда
		ИмяРеквизита_ = ИмяРеквизитаВАрхиве();
		
	ИначеЕсли Истина = ЕстьРеквизитАктуальность_ Тогда
		ИмяРеквизита_ = ИмяРеквизитаАктуальность();
		
	Иначе
		__ПРОВЕРКА__(Ложь, "a63ee808-24a7-11e9-3b8f-c4346b22f0e4");
		
	КонецЕсли;
	
	Возврат ИмяРеквизита_;
	
КонецФункции

////
 // Процедура: УстановитьОтборСпискаПоКоманде
 //   устанавливает отбор дин списка.
 //
 // Параметры:
 //   Список - Динамический список
 //     список, для которого надо установить отбор.
  //   Пометка - Булево
 //     значение свойства пометка у команды просмотра архивных объектов.
 ///
Процедура УстановитьОтборСпискаПоКоманде(Список, Знач Пометка) Экспорт
	
	ИмяРеквизита_ = ОпределитьИмяРеквизита(Список);
	
	ЗначениеНедоступности = ЗначениеНедоступности(ИмяРеквизита_);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, ИмяРеквизита_, Не ЗначениеНедоступности, 
		ВидСравненияКомпоновкиДанных.Равно,, Не Пометка
	);
	
КонецПроцедуры

////
 // Процедура: КомандаПросмотрАрхивныхЭлементов
 //   обработчик команды формы для просмотра архивности по фильтру.
 //
 // Параметры:
 //   Форма - Управляемая форма
 //     форма, в которой находится команда.
 //   ИмяСписка - Строка
 //     Имя списка для установки отбора.
 //   Команда - Команда формы
 //     команда, которая вызвала событие.
  ///
Процедура КомандаПросмотрАрхивныхЭлементов(Форма, Знач ИмяСписка, Команда) Экспорт
	
	КнопкаПросмотра = Форма.Элементы.Найти(Команда.Имя);
	КнопкаПросмотра.Пометка = НЕ КнопкаПросмотра.Пометка;
	// редактируем отбор
	УстановитьОтборСпискаПоКоманде(Форма[ИмяСписка], КнопкаПросмотра.Пометка);
	
	// запоминаем кнопку
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(Форма.ИмяФормы + "/ПросмотрАрхивныхЭлементов", ИмяСписка, КнопкаПросмотра.Пометка);
	
КонецПроцедуры

/// Установка видимости и доступность элементов по архивности
//
// Параметры:
//   Форма - Управляемая форма
//     форма, в которой надо управлять элементами архивности.
//   АрхивностьОбъекта - Булево
//     Не используется. Оставлено для совместимости.
///
Процедура УстановитьВидимостьЭлементовАрхивности(Форма, Знач АрхивностьОбъекта = Неопределено) Экспорт
	
	ИмяРеквизита_ = Архивирование.ОпределитьИмяРеквизита(Форма.Объект);
	
	ЭлементНедоступен = (ЗначениеНедоступности(ИмяРеквизита_) = Форма.Объект[ИмяРеквизита_]);
	
	ЭлементыФормы = Форма.Элементы;
	КнопкаПоместитьВАрхив = ЭлементыФормы.Найти("ФормаОбщаяКомандаАрхивирование_ПоместитьВАрхив");
	Если КнопкаПоместитьВАрхив <> Неопределено Тогда
		КнопкаПоместитьВАрхив.Видимость = НЕ ЭлементНедоступен;
	КонецЕсли;
	КнопкаИзвлечьИзАрхива = ЭлементыФормы.Найти("ФормаОбщаяКомандаАрхивирование_ИзвлечьИзАрхива");
	Если КнопкаИзвлечьИзАрхива <> Неопределено Тогда
		КнопкаИзвлечьИзАрхива.Видимость = ЭлементНедоступен;
	КонецЕсли;
	
	ДекорацияПредупреждение_ = Форма.Элементы.Найти("Архивирование_ДекорацияПредупреждение");
	Если ДекорацияПредупреждение_ <> Неопределено Тогда
		ДекорацияПредупреждение_.Видимость = ЭлементНедоступен;
	КонецЕсли; 
	ДекорацияНадпись_ = Форма.Элементы.Найти("Архивирование_ДекорацияНадпись");
	Если ДекорацияНадпись_ <> Неопределено Тогда
		ДекорацияНадпись_.Видимость = ЭлементНедоступен;
	КонецЕсли;
	
КонецПроцедуры

////
 // Процедура: ДобавитьЗависимыйОбъект
 //   метод добавления зависимого объекта.
 //
 // Параметры:
 //   ЗависимыеОбъекты - Массив
 //     Коллекция, куда будеут помещены данные.
 //   ПолноеИмя - Строка
 //     Полное имя объекта метаданных.
 //   РеквизитЗначения - Строка
 //     имя реквизита, в котором хранится значение.
///
Процедура ДобавитьЗависимыйОбъект(ЗависимыеОбъекты, Знач ПолноеИмя, Знач РеквизитЗначения, Знач ОтказыватьВЗаписи = Ложь) Экспорт
	
	ЗависимыйСтруктура = Новый Структура(
								"ПолноеИмя, РеквизитЗначения, Отказ",
								ПолноеИмя,  РеквизитЗначения, ОтказыватьВЗаписи
							);
	ЗависимыеОбъекты.Добавить(ЗависимыйСтруктура);
	
КонецПроцедуры




#КонецОбласти