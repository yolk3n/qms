
////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействие: общий механизм обмена электронными документами.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ Локализация

#Область Общие

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
//   ВидОперации - Строка - вид операции при которой возникло исключение.
//   ПодробныйТекстОшибки - Строка - описание ошибки.
//   ТекстСообщения - Строка - текст ошибки который выводится в виде сообщения.
//   КодСобытия - Строка - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: "ЭлектронноеВзаимодействие" - Общая подсистема, 
//                                          "ОбменСБанками" - Обмен с банками, 
//                                          "ОбменСКонтрагентами" - Обмен с контрагентами,
//                                          "ОбменССайтами" - Обмен с сайтами, 
//                                          "РегламентныеЗадания" - Регламентные задания, 
//                                          "БизнесСеть" - Бизнес-сеть,
//                                          "ТорговыеПредложения" - торговые предложения.
//                                          "ИнтеграцияСЯндексКассой" - Интеграция с Яндекс.Кассой.
//   СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие.ЗаписатьОшибкуВЖурналРегистрации().
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = "ОбменСКонтрагентами",
	СсылкаНаОбъект = Неопределено) Экспорт
	
	Если КодСобытия = "ЭлектронноеВзаимодействие" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие;
	ИначеЕсли КодСобытия = "ОбменСБанками" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками;
	ИначеЕсли КодСобытия = "ОбменСКонтрагентами" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	ИначеЕсли КодСобытия = "ОбменССайтами" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменССайтами;
	ИначеЕсли КодСобытия = "РегламентныеЗадания" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания;
	ИначеЕсли КодСобытия = "БизнесСеть" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().БизнесСеть;
	ИначеЕсли КодСобытия = "ТорговыеПредложения" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
	ИначеЕсли КодСобытия = "ИнтеграцияСЯндексКассой" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияСЯндексКассой;
	ИначеЕсли КодСобытия = "КоммерческиеПредложения" Тогда
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().КоммерческиеПредложения;
	КонецЕсли;
	
	ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, Подсистема, ПодробныйТекстОшибки, ТекстСообщения, СсылкаНаОбъект);
	
КонецПроцедуры

// Поиск ссылки на объект информационной базы по типу, идентификатору и дополнительным реквизитам.
//
// Параметры:
//  ТипОбъекта - Строка	 - идентификатор типа объекта, который необходимо найти. Поддерживаемые типы:
//    - Контрагенты
//    - Организации
//    - Банки
//    - БанковскиеСчетаОрганизаций
//    - БанковскиеСчетаКонтрагентов
//    - Валюты
//    - ЕдиницыИзмерения
//    - ВидыКонтактнойИнформации
//    - Номенклатура
//    - Партнеры
//    - ДоговорыКонтрагентов
//  Идентификатор			 - Строка	 - идентификатор объекта заданного типа. Поддерживаемые идентификаторы в разрезе типов:
//    - Контрагенты: отсутствует
//    - Организации: отсутствует
//    - Банки: отсутствует
//    - БанковскиеСчетаОрганизаций: номер счета
//    - БанковскиеСчетаКонтрагентов: номер счета
//    - Валюты: код валюты
//    - ЕдиницыИзмерения: код единицы измерения
//    - ВидыКонтактнойИнформации: "EmailКонтрагента", "ТелефонКонтрагента", "ФаксКонтрагента", "EmailОрганизации", "ТелефонОрганизации", "ФаксОрганизации".
//    - Номенклатура: отсутствует
//    - Партнеры: отсутствуют
//    - ДоговорыКонтрагентов: отсутствует
//  ДополнительныеРеквизиты	 - Структура - набор дополнительных полей объекта для поиска. Поддерживаемые ключи в разрезе типов:
//    - Контрагенты: ИНН, КПП, Наименование
//    - Организации: ИНН, КПП, Наименование
//    - Банки: Код (БИК)
//    - БанковскиеСчетаОрганизаций: Владелец (организация)
//    - БанковскиеСчетаКонтрагентов: Владелец (контрагент)
//    - Валюты: отсутствуют
//    - ЕдиницыИзмерения: наименование единицы
//    - ВидыКонтактнойИнформации: отсутствуют
//    - Номенклатура: Идентификатор (идентификатор номенклатуры поставщика), Артикул
//    - Партнеры: Контрагент
//    - ДоговорыКонтрагентов: НомерДоговора, ДатаДоговора, Организация, Владелец (контрагент)
// Возвращаемое значение:
//  Ссылка - ссылка на найденный объект.
//
Функция НайтиСсылку(ТипОбъекта, Идентификатор = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияБЭД.НайтиСсылку(ТипОбъекта, Идентификатор, ДополнительныеРеквизиты);
	
КонецФункции

// Получение имени объекта или реквизита в прикладном решении.
//
// Параметры:
//  ИмяПараметра - Строка - наименование в библиотеке электронных документов.
// 
// Возвращаемое значение:
//  Строка - наименование в прикладном решении.
//
Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт
	
	Возврат ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра);
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомДанных

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке);
	
КонецФункции

// Сохраняет значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

// Записывает данные из таблицы значений в дерево значений.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные.
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные. Таблица может предварительно дополняться данными
//                                    для обработки ошибок:
//                                    см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы.
//  
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//
Процедура ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы);
	
КонецПроцедуры

// Записывает данные из структуры в группу дерева значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  СтруктураДанных - Структура - данные, которые должны быть загружены в группу
//  Путь - Строка - название группы в дереве.
//
Процедура ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь);
	
КонецПроцедуры

// Возвращает строку дерева значений для заполнения в прикладном решении
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеПоля - Строка - название поля в дереве, содержащее полный путь к реквизиту
//  НайтиРекурсивно - Булево - если требуется рекурсивный поиск.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - содержит строку дерева.
//
Функция СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно = Ложь) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно);

КонецФункции

// В процедуре происходит добавление данных из СтруктурыДанных в ДеревоЗначений.
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - содержит данные.
//  СтруктураДопДанных - Структура - данные, которые необходимо поместить в дерево.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  ДобавлятьНовыеСтроки - Булево - если Истина - разрешает добавление строк с одинаковым путем в дерево.
//
Процедура ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый = Ложь, ДобавлятьНовыеСтроки = Ложь) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый, ДобавлятьНовыеСтроки);
	
КонецПроцедуры

// Возвращает название реквизита из полного пути
//
// Параметры:
//  ПолныйПуть - Строка - Полный путь до реквизита в дереве.
//
// Возвращаемое значение:
//  Строка - Название реквизита
//
Функция НазваниеКолонки(ПолныйПуть) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.НазваниеКолонки(ПолныйПуть);
	
КонецФункции

// Проверяет существование реквизита в дереве, по указанному пути.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - полный путь к реквизиту. Составляющие пути разделяются точками.
// 
// Возвращаемое значение:
//  Булево - Истина, если реквизит существует.
//
Функция СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть);
	
КонецФункции

// Возвращает данные элемента дерева, находящегося по указанному пути.
// 
// Параметры:
// 	ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - полный путь к реквизиту. Составляющие пути разделяются точками.
// Возвращаемое значение:
//  ТаблицаЗначений - в случае, если указанный реквизит имеет тип "Таблица"
//  Структура - если указанный реквизит имеет тип "Выбор" или "Группа"
//  Произвольный - если указанный реквизит является конечным реквизитом дерева.
//
Функция ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПолныйПуть) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПолныйПуть);
	
КонецФункции

// Возвращает значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Строка - полный путь к реквизиту. Составляющие пути разделяются точками.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке);
	
КонецФункции

// Значение реквизита строки дерева разбора.
//
// Параметры:
//  ДеревоРазбора	 - ДеревоЗначений - объект поиска.
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значений.
//  ПутьКРеквизиту	 - Строка - путь к реквизиту.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту);
	
КонецФункции

// Задает параметры обработки ошибок для реквизита дерева электронного документа.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ДобавитьВРеквизитОбработкуОшибки(Дерево, Реквизит, ПараметрыОбработкиОшибок) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьВРеквизитОбработкуОшибки(Дерево, Реквизит, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм сообщений пользователю.
//
// Параметры:
//  СтрокиТаблицы	 - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                   - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                       параметры обработки ошибок.
//  ПолеТаблицы		 - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  КлючДанных		 - Строка - имя колонки таблицы, значение которой будет использовано в качестве ключа данных
//                              при выводе сообщения пользователю.
//                   - ЛюбаяСсылка - ссылка, значение которой будет использовано в качестве ключа при выводе
//                                   сообщения пользователю.
//  ПутьКДанным		 - Строка - путь к данным, который будет указан в сообщении пользователю. Если указывается путь
//                              к реквизиту таблицы, скобки ("[", "]") указывать не следует. Передача индекса строки
//                              производится через параметр "ПолеНомераСтроки".
//  ТекстОшибки		 - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки.
//  ПолеНомераСтроки - Строка - имя колонки таблицы, из которой будет подставляться в параметр "ПутьКДанным"
//                              индекс строки.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных = "",
	ПутьКДанным = "", ТекстОшибки = "", ПолеНомераСтроки = Неопределено) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы,
		КлючДанных, ПутьКДанным, ТекстОшибки, ПолеНомераСтроки);

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм навигационных ссылок.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	        - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                          - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		        - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ПолеНавигационнойСсылки - Строка - имя колонки таблицы, из которой будет извлекаться навигационная ссылка для
//                                     открытия формы при клике на ошибку.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СтрокиТаблицы, ПолеТаблицы, ПолеНавигационнойСсылки) Экспорт

	ДеревоЭлектронногоДокументаБЭД.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СтрокиТаблицы, ПолеТаблицы, 
		ПолеНавигационнойСсылки);

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через открытие формы.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	           - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                             - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		           - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ИмяФормы                   - Строка - полное имя формы, которую нужно открыть при клике по ошибке.
//  СтатичныеПараметрыФормы    - Структура - структура, которая будет передана в форму в качестве параметров.
//  ДинамическиеПараметрыФормы - Структура - описывает параметры, передаваемые в открываемую форму, значения по которым
//                                           формируются для каждой строки таблицы индивидуально:
//                                 * Ключ     - Строка - содержит имя параметра.
//                                 * Значение - Строка - имя поля таблицы, содержащего значение параметра.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СтрокиТаблицы, ПолеТаблицы, ИмяФормы,
	Знач СтатичныеПараметрыФормы = Неопределено, ДинамическиеПараметрыФормы = Неопределено) Экспорт

	ДеревоЭлектронногоДокументаБЭД.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СтрокиТаблицы, ПолеТаблицы, ИмяФормы,
		СтатичныеПараметрыФормы, ДинамическиеПараметрыФормы);

КонецПроцедуры

// Формирует пустую структура данных о юридическом (физическом) лице.
//
// Возвращаемое значение:
//  Структура - возвращаемые данные:
//   * Ссылка                        - СправочникСсылка - ссылка на физическое или юридическое лицо
//   * ИНН                           - Строка - ИНН.
//   * КПП                           - Строка - КПП.
//   * ПолноеНаименование            - Строка - полное наименование.
//   * Наименование                  - Строка - наименование.
//   * Представление                 - Строка - представление юр/физ лица.
//   * СокращенноеНаименование       - Строка - сокращенное наименование.
//   * ОфициальноеНаименование       - Строка - наименование юридического лица.
//   * КодПоОКПО                     - Строка - код ОКПО.
//   * ЮридическийАдрес              - Строка - представление юридического адреса.
//   * ФактическийАдрес              - Строка - представление фактического адреса.
//   * ФактическийАдресИдентификатор - Строка - идентификатор ФИАС фактического адреса. Не обязательно для заполнения.
//   * ПочтовыйАдрес                 - Строка - представление почтового адреса.
//   * Телефоны                      - Строка - представление телефонов.
//   * ЭлектроннаяПочта              - Строка - представление электронной почты.
//   * Фамилия                       - Строка - фамилия.
//   * Имя                           - Строка - имя.
//   * Отчество                      - Строка - отчество.
//   * ЮрФизЛицо                     - ПеречислениеСсылка - тип юр/физ лица.
//   * ОГРН                          - Строка - ОГРН.
//   * СвидетельствоСерияНомер       - Строка - серия и номер свидетельства.
//   * СвидетельствоДатаВыдачи       - Строка - дата выдачи свидетельства.
//   * Банк                          - СправочникСсылка - банк, в котором открыт счет.
//   * БИК                           - Строка - БИК банка, в котором открыт счет.
//   * КоррСчет                      - Строка - Корр счет банка, в котором открыт счет.
//   * НомерСчета                    - Строка - Номер счета.
//   * ЮридическийАдресXML           - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ФактическийАдресXML           - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ПочтовыйАдресXML              - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ТелефоныXML                   - Строка - устаревший XML, соответствующий XDTO пакетам Телефон. Для обратной совместимости.
//
Функция СтруктураДанныхЮрФизЛица() Экспорт
	
	Возврат Новый Структура("
	|Ссылка,
	|ОфициальноеНаименование,
	|Наименование,
	|Представление,
	|СокращенноеНаименование,
	|ПолноеНаименование,
	|Фамилия,
	|Имя,
	|Отчество,
	|ЮрФизЛицо,
	|КодПоОКПО,
	|ИНН,
	|КПП,
	|ОГРН,
	|СвидетельствоСерияНомер,
	|СвидетельствоДатаВыдачи,
	|Банк,
	|БИК,
	|КоррСчет,
	|НомерСчета,
	|ЮридическийАдрес,
	|ЮридическийАдресXML,
	|ФактическийАдрес,
	|ФактическийАдресXML,
	|ФактическийАдресИдентификатор,
	|ПочтовыйАдрес,
	|ПочтовыйАдресXML,
	|Телефоны,
	|ТелефоныXML,
	|ЭлектроннаяПочта");
	
КонецФункции

// Формирует пустую структура данных о (физическом) лице.
//
// Возвращаемое значение:
//  Структура - возвращаемые данные:
//   * Ссылка                       - СправочникСсылка - ссылка на физическое лицо
//   * ДатаРождения                 - Дата 	 - датаРождения.
//   * ИНН                          - Строка - ИНН.
//   * МестоРождения            	- Строка - местоРождения.
//   * Пол                  		- Строка - пол.
//   * СтраховойНомерПФР            - Строка - страховой номер ПФР.
//   * ФИО       					- Строка - ФИО.
//   * Фамилия       				- Строка - фамилия.
//   * Имя                     		- Строка - имя.
//   * Отчество             		- Строка - отчество.
//   * Гражданство              	- СправочникСсылка - Справочник СтраныМира.
//
Функция СтруктураДанныхФизЛица() Экспорт
	
	Возврат Новый Структура("
	|Ссылка,
	|ДатаРождения,
	|ИНН,
	|МестоРождения,
	|Пол,
	|СтраховойНомерПФР,
	|ФИО,
	|Фамилия,
	|Имя,
	|Отчество,
	|Гражданство,
	|АдресМестаПроживанияXML,
	|АдресМестаПроживания,
	|АдресПоПропискеXML,
	|АдресПоПрописке,
	|ТелефоныXML,
	|Телефоны,
	|ЭлектроннаяПочта");
	
КонецФункции

#КонецОбласти

//-- Локализация

#Область ДляВызоваИзДругихПодсистем

//++ Локализация

// СтандартныеПодсистемы.УправлениеПечатью

// см. УправлениеПечатьюПереопределяемый.ПриПечати
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеПечатью

// ТехнологияСервиса.УправлениеТарифами

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ИнтеграцияБИПБЭДСобытия.ПриФормированииСпискаУслуг(ПоставщикиУслуг);
	
КонецПроцедуры

// Конец ТехнологияСервиса.УправлениеТарифами

// ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП

// См. ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент
//
Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

КонецПроцедуры

// См. ПодключениеСервисовСопровожденияПереопределяемый.ПриОпределенииСервисовСопровождения
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ОбщийМодуль.ПриОпределенииСервисовСопровождения(МодулиСервисов);	
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	// ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	// ОбменССайтами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменССайтами") Тогда
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОбменССайтом"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменССайтом"];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	КонецЕсли;

	// ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["СинхронизацияТорговыхПредложений"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменБизнесСеть"];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	КонецЕсли;
	
	// ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	// ЭлектронноеАктированиеЕИС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	// СервисДоставки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СервисДоставки") Тогда
		МодульСервисДоставки = ОбщегоНазначения.ОбщийМодуль("СервисДоставки");
		МодульСервисДоставки.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - исходная таблица обработчиков поставляемых данных.
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	
	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	Если ЕстьОбменСБанками Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		Обработчик = Обработчики.Добавить();
		Обработчик.ВидДанных = "DirectBankList";
		Обработчик.КодОбработчика = "DirectBankList";
		Обработчик.Обработчик = МодульОбменСБанками;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");

	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриОпределенииНастроекФайлов(Настройки);
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");

	Если ЕстьОбменСБанками Тогда
		Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
		Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
		Настройки.НеВыводитьВИнтерфейс.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
	КонецЕсли;

	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата
//
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки, ВводитьПароль = Истина) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриСозданииФормыПроверкаСертификата(
			Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки, ВводитьПароль);
	КонецЕсли;
	
КонецПроцедуры

// Формирование текстового представления рекламы.
//
// Параметры:
//  ДополнительнаяИнформация - Структура - с полями:
//   * Картинка - Картинка - картинка из библиотеки картинок;
//   * Текст - Строка - форматированный текст надписи с навигационными ссылками.
//  МассивСсылок - Массив - список ссылок на объекты.
//
Процедура ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок) Экспорт
	
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПлатежноеПоручениеВМетаданных");
	
	Если МассивСсылок[0].Метаданные().Имя = ИмяПлатежногоПоручения
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		ШаблоныЗаданий.Добавить("СинхронизацияТорговыхПредложений");
		ШаблоныЗаданий.Добавить("ОбновлениеПодсказокТорговыеПредложения");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

	// ЭлектронноеВзаимодействие.БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.БизнесСеть

	// ЭлектронноеВзаимодействие.СервисДоставки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СервисДоставки") Тогда
		МодульСервисДоставки = ОбщегоНазначения.ОбщийМодуль("СервисДоставки");
		МодульСервисДоставки.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменССайтами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменССайтами") Тогда
		СоответствиеИменПсевдонимам.Вставить("ОбменССайтомСобытия.ЗаданиеВыполнитьОбмен", "ОбменССайтомСобытия.ЗаданиеВыполнитьОбмен");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменССайтами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		СоответствиеИменПсевдонимам.Вставить("СинхронизацияТорговыхПредложений");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.БизнесСеть

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.
			ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.
			ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	// ЭлектронноеВзаимодействие.СервисДоставки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СервисДоставки") Тогда
		МодульСервисДоставки = ОбщегоНазначения.ОбщийМодуль("СервисДоставки");
		МодульСервисДоставки.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ОбменСБанками
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БазоваяФункциональность.Криптография") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КриптографияБЭД");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БазоваяФункциональность.МаршрутыПодписания") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("МаршрутыПодписанияБЭД");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменССайтами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменССайтом");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда

		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда

		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложения");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда

		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл.
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки) Экспорт
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки);
	КонецЕсли;
	// Конец ОбменСБанками
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	// БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец БизнесСеть
	
	// ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец ОбменСКонтрагентами
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;

КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;

КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульОбменСКонтрагентами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой.ОблачныеКлассификаторы") Тогда
		МодульОблачныеКлассификаторыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОблачныеКлассификаторыСлужебный");
		МодульОблачныеКлассификаторыСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

// СтандартныеПодсистемы.ОбновлениеКонфигурации

// Используется при добавлении отложенных обработчиков обновления,
// когда не требуется регистрировать данные к обработке. Не заполнять.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
//@skip-warning
Процедура ЗаполнениеДанныхОбновления(Параметры) Экспорт

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры) Экспорт
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.МаршрутыПодписания);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.БазоваяФункциональность.МаршрутыПодписания") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("МаршрутыПодписанияБЭД");
		МодульПодсистемы.ПриНастройкеПодчиненногоУзлаРИБ();
		
	КонецЕсли;
		
КонецПроцедуры 

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
КонецПроцедуры

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

//-- Локализация

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЭлектронноеВзаимодействие
	Списки.Вставить(Метаданные.Справочники.МаршрутыПодписания, Истина);
	// Конец ЭлектронноеВзаимодействие
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	// ЭлектронноеВзаимодействие.СервисEDI
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СервисEDI") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ДокументыEDI");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СервисEDI
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	// ЭлектронноеВзаимодействие
	Описание = Описание + "
	|Справочник.МаршрутыПодписания.Чтение.Организации
	|Справочник.МаршрутыПодписания.Изменение.Организации
	|";
	// Конец ЭлектронноеВзаимодействие
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	// ОбменСГИСЭПД
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСГИСЭПД
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
//
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПриДобавленииСерверныхОповещений(Оповещения);
	КонецЕсли;
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПередЗапускомПрограммы
//
Процедура ПередЗапускомПрограммы() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграцияСобытия");
		МодульПодсистемы.ПередЗапускомПрограммы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
