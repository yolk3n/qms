
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает данные предмета для электронной подписи.
//
// Параметры:
//  Предмет - Ссылка - предмет электронной подписи.
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные предмета для электронной подписи.
//
Функция ПолучитьДанныеПредметаДляПодписи(Знач Предмет, Версия = Неопределено) Экспорт
	
	Возврат ЭлектроннаяПодписьБольничнаяАптека.ПолучитьДанныеПредметаДляПодписи(Предмет, Версия);
	
КонецФункции

// Возвращает все подчиненные файлы предмета электронной подписи.
//
// Параметры:
//  Предмет - Ссылка - предмет электронной подписи.
//
// Возвращаемое значение:
//  Массив - подчиненные файлы предмета.
//
Функция ПолучитьВсеПодчиненныеФайлы(Знач Предмет) Экспорт
	
	Возврат ЭлектроннаяПодписьБольничнаяАптека.ПолучитьВсеПодчиненныеФайлы(Предмет);
	
КонецФункции

// Заносит информацию о ЭП.
//
// Параметры:
//  ПодписанныеДанные - Массив
//   * ПодписанныйОбъект - Ссылка - подписанный объект.
//   * СвойстваПодписи   - Структура - данные электронной подписи.
//  ИдентификаторФормы - УникальныйИдентификатор
//
Процедура ЗанестиИнформациюОПодписях(Знач ПодписанныеДанные, Знач ИдентификаторФормы) Экспорт
	
	ЭлектроннаяПодписьБольничнаяАптека.ЗанестиИнформациюОПодписях(ПодписанныеДанные, ИдентификаторФормы);
	
КонецПроцедуры

// Только для внутреннего использования.
//
Процедура ПроверитьПодписи(Знач ИсходныеДанные, Знач ДанныеСтрок) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
	Для Каждого СтрокаПодписи Из ДанныеСтрок Цикл
		
		Если ИсходныеДанные = Неопределено Тогда
			ПроверяемыеДанные = ЭлектроннаяПодписьБольничнаяАптека.ПолучитьДанныеПредметаДляПодписи(СтрокаПодписи.Объект, СтрокаПодписи.Версия);
		Иначе
			ПроверяемыеДанные = ИсходныеДанные;
		КонецЕсли;
		
		ОписаниеОшибки = "";
		ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(
			МенеджерКриптографии, ПроверяемыеДанные, СтрокаПодписи.АдресПодписи, ОписаниеОшибки, СтрокаПодписи.ДатаПодписи);
		
		Если Не ПодписьВерна Тогда
			ОписаниеОшибкиСертификата = "";
			СертификатДействителен = ЭлектроннаяПодпись.ПроверитьСертификат(МенеджерКриптографии, СтрокаПодписи.АдресСертификата, ОписаниеОшибкиСертификата, СтрокаПодписи.ДатаПодписи);
			Если Не СертификатДействителен И ОписаниеОшибки = ОписаниеОшибкиСертификата Тогда
				ПодписьВерна = Истина;
				ОписаниеОшибки = "";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаПодписи.ПодписьВерна = ПодписьВерна;
		СтрокаПодписи.СертификатДействителен = СертификатДействителен;
		
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("УникальныйИдентификатор");
		ДанныеПодписи.Вставить("Объект");
		ДанныеПодписи.Вставить("ПодписьВерна");
		ДанныеПодписи.Вставить("СертификатДействителен");
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, СтрокаПодписи);
		
		ДанныеПодписи.Вставить("ТекстОшибкиПроверкиПодписи", ОписаниеОшибки);
		ДанныеПодписи.Вставить("ТекстОшибкиПроверкиСертификата", ОписаниеОшибкиСертификата);
		
		СтрокаПодписи.Статус = ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, СтрокаПодписи.ДатаПроверкиПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьСтатусПроверкиПодписи(Знач ДанныеПодписи, Знач ДатаПроверкиПодписи = Неопределено) Экспорт
	
	Возврат ЭлектроннаяПодписьБольничнаяАптека.ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДатаПроверкиПодписи);
	
КонецФункции

Функция ЭтоФайл(ОбъектИлиТип) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектИлиТип);
	Если ТипОбъекта = Тип("Тип") Тогда
		ТипОбъекта = ОбъектИлиТип;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ТипОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
