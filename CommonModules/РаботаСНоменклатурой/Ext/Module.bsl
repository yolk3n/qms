
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатурой.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаСобытийФорм

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//  Создает поле с представлением номенклатуры сервиса 1С:Номенклатура, вспомогательные кнопки.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  СсылкаНаОбъект			 - Ссылка			 - ссылка на объект формы.
//  ГруппаРодитель			 - ГруппаФормы		 - группа формы для размещения элементов.
//  ДополнительныеПараметры	 - Структура:
//   * РежимПредставленияОбъектаСервиса - Строка - представление объекта сервиса на форме.
//                                                 Значения: "Гиперссылка", "ПолеВвода".
//   * ОтображатьХарактеристики - Булево - признак отображения гиперссылки с информацией 
//                                         о количестве сопоставленных характеристиках.
//   * ВыбиратьРежимОбновления - Булево - признак добавления элементов формы для выбора режима обновления.
//
Процедура ПриСозданииНаСервереФормаНоменклатуры(Форма, 
			СсылкаНаОбъект, 
			ГруппаРодитель, 
			ДополнительныеПараметры = Неопределено) Экспорт
			
	ПараметрыСозданияФормы = ПараметрыСозданияПрикладныхФорм();
			
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСозданияФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	РежимПредставленияОбъектаСервиса = ПараметрыСозданияФормы.РежимПредставленияОбъектаСервиса;
	ОтображатьДанныеХарактеристик    = ПараметрыСозданияФормы.ОтображатьХарактеристики;
			
	// Если в форму передан параметр РаботаСНоменклатурой_АдресДанныхЗаполнения - 
	// номенклатура заполняется не зависимо от статуса функциональной опции.
	
	ДанныеИнтерактивногоЗаполнения = Неопределено;
	
	Если ЭтоИнтерактивноеСоздание(Форма, СсылкаНаОбъект) Тогда
		ЗаполнитьРеквизитыНоменклатурыВФорме(Форма, ДанныеИнтерактивногоЗаполнения);
	КонецЕсли;

	СервисДоступен = Истина;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоЧтенияДанных() Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса);
	
	Если НЕ СервисДоступен Тогда
		Возврат;
	КонецЕсли;
		
	Форма.РаботаСНоменклатурой_СсылкаНаОбъект                   = СсылкаНаОбъект;
	Форма.РаботаСНоменклатурой_СервисДоступен                   = Истина;
	Форма.РаботаСНоменклатурой_ТипОбъекта                       = "Номенклатура";
	Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = РежимПредставленияОбъектаСервиса;
	Форма.РаботаСНоменклатурой_ЗаполненыДанныеАутентификации    = 
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
		
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВыбиратьРежимОбновления") Тогда
		ВыбиратьРежимОбновления = ДополнительныеПараметры.ВыбиратьРежимОбновления;
	Иначе
		ВыбиратьРежимОбновления = Истина;
	КонецЕсли;
	
	ДобавитьЭлементыФормыСервиса(Форма, ГруппаРодитель, ВыбиратьРежимОбновления);
		
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		ЗаполнитьВстроенныеРеквизитыФормыНоменклатурыПриИнтерактивномСоздании(Форма, ДанныеИнтерактивногоЗаполнения);
	Иначе
		ЗаполнитьВстроенныеРеквизитыФормыНоменклатуры(Форма, ГруппаРодитель, ОтображатьДанныеХарактеристик);
	КонецЕсли;

	УстановитьДействиеИзменениеТекстаПолей(Форма);
			
	НастроитьВстроенныеЭлементыФормы(Форма);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//  Создает кнопку подбора номенклатуры из сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель				 - ГруппаФормы       - группа формы для размещения элементов.
//  ЭлементДинамическийСписок	 - ТаблицаФормы      - элемент формы - динамический список.
//  ДобавитьКолонкуСГиперссылкой - Булево            - признак добавления колонки с гиперссылкой, для выполнения команд сопоставления.
//  ДополнительныеПараметры	 - Структура:
//   * ДобавитьКомандыСопоставления - Булево - признак добавления команд сопоставления.
//
Процедура ПриСозданииНаСервереФормаСпискаНоменклатуры(
			Форма,
			ГруппаРодитель,
			ЭлементДинамическийСписок,
			ДобавитьКолонкуСГиперссылкой = Ложь,
			ДополнительныеПараметры = Неопределено) Экспорт
			
	Если Не СервисДоступенПользователю() Тогда
		УстановитьПараметрыДинамическогоСписка(Форма[ЭлементДинамическийСписок.ПутьКДанным].Параметры);
		Возврат;
	КонецЕсли;
	
	Если ПравоИзмененияДанных() Тогда
		ДобавитьКомандыСопоставления = Истина;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ДобавитьКомандыСопоставления") Тогда
			ДобавитьКомандыСопоставления = ДополнительныеПараметры.ДобавитьКомандыСопоставления;
		КонецЕсли;
		ДобавитьКомандыФормыСпискаНоменклатуры(Форма, ГруппаРодитель, ДобавитьКомандыСопоставления);
	КонецЕсли;
	
	// Обработка выполнения команд
	
	Если Не ЗначениеЗаполнено(ЭлементДинамическийСписок.ПолучитьДействие("Выбор")) Тогда
		ЭлементДинамическийСписок.УстановитьДействие("Выбор", "Подключаемый_ВыборРаботаСНоменклатурой");
	КонецЕсли;	
	
	Если ДобавитьКолонкуСГиперссылкой Тогда
		НастроитьДинамическийСписокФормыНоменклатуры(Форма, ЭлементДинамическийСписок, ГруппаРодитель);
	КонецЕсли;
		
	// Добавление новых реквизитов
		
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИмяТаблицыФормы", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ПравоИзмененияДанных", Новый ОписаниеТипов("Строка")));
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.РаботаСНоменклатурой_ИмяТаблицыФормы = ЭлементДинамическийСписок.Имя; // кэширование имени таблицы
	Форма.РаботаСНоменклатурой_ПравоИзмененияДанных = ПравоИзмененияДанных();
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриЗаписиНаСервере.
//  Записывает соответствие объекта базы и объекта сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект	 - 	Объект           - записываемый объект.
//  Отказ			 - Булево			 - признак отказа.
//
Процедура ПриЗаписиНаСервереФормаНоменклатуры(Форма, ТекущийОбъект, Отказ) Экспорт
	
	Если НЕ Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РаботаСНоменклатурой_СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	
	Если Не Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса) Тогда
		// Если идентификатор номенклатуры не заполнен, удаляются все привязки по номенклатуре.		
		ОчиститьСоответствияПоНоменклатуре(ТекущийОбъект.Ссылка);
		Возврат;	
	КонецЕсли;
		
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();
	
	ПараметрыЗаписи.ИдентификаторНоменклатурыСервиса   = Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса;
	ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса   = Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса;
	ПараметрыЗаписи.ОбновляетсяАвтоматически           = Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически;
	ПараметрыЗаписи.ИдентификаторХарактеристикиСервиса = Форма.РаботаСНоменклатурой_ИдентификаторХарактеристики; 
	ПараметрыЗаписи.ИдентификаторКатегории             = Форма.РаботаСНоменклатурой_ИдентификаторКатегории;
	ПараметрыЗаписи.ПредставлениеКатегории             = Форма.РаботаСНоменклатурой_ПредставлениеКатегории; 
	
	// ИдентификаторХарактеристики будет заполнен только при привязке к конкретной характеристике, 
	// в противном случае он равен пустой строке.
	
	УстановитьРежимЗагрузкиХарактеристикПриПривязке(Форма, ПараметрыЗаписи.РежимЗагрузкиХарактеристик);

	ЗаписатьСоответствиеНоменклатурыИХарактеристик(ТекущийОбъект.Ссылка, Неопределено, ПараметрыЗаписи, Отказ);	

	Если Не Отказ Тогда
		ЗаписатьШтрихкодыНоменклатуры(Форма, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить привязку номенклатуры'"));
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//  Создает поле с представлением категории сервиса 1С:Номенклатура, вспомогательные кнопки.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  СсылкаНаОбъект					 - Ссылка			 - ссылка на объект формы.
//  ГруппаРодитель					 - ГруппаФормы		 - группа формы для размещения элементов.
//  ДополнительныеПараметры	         - Структура         - дополнительные параметры формы.
//    Ключи:
//    * РежимПредставленияОбъектаСервиса - Строка - представление объекта сервиса на форме. Значения: "Гиперссылка", "ПолеВвода".
//
Процедура ПриСозданииНаСервереФормаВидаНоменклатуры(Форма, 
			СсылкаНаОбъект, 
			ГруппаРодитель, 
			ДополнительныеПараметры = Неопределено) Экспорт
		
	ПараметрыСозданияФормы = ПараметрыСозданияПрикладныхФорм();
			
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСозданияФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	РежимПредставленияОбъектаСервиса = ПараметрыСозданияФормы.РежимПредставленияОбъектаСервиса;
						
	СервисДоступен = Истина;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
		
	Если НЕ ПравоЧтенияДанных() Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса);
	
	Если НЕ СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РаботаСНоменклатурой_СсылкаНаОбъект                   = СсылкаНаОбъект;
	Форма.РаботаСНоменклатурой_СервисДоступен                   = Истина;
	Форма.РаботаСНоменклатурой_ТипОбъекта                       = "ВидНоменклатуры";
	Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = РежимПредставленияОбъектаСервиса;
		
	ДобавитьЭлементыФормыСервиса(Форма, ГруппаРодитель);
	
	ЗаполнитьВстроенныеРеквизитыФормыВидаНоменклатуры(Форма);
	
	Если ЭтоИнтерактивноеСоздание(Форма, СсылкаНаОбъект) Тогда
		ЗаполнитьВстроенныеРеквизитыФормыВидаНоменклатурыПриИнтерактивномСоздании(Форма);
	КонецЕсли;
		
	НастроитьВстроенныеЭлементыФормы(Форма);
		
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Создает кнопку подбора категорий из сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель - ГруппаФормы - группа формы для размещения элементов.
//
Процедура ПриСозданииНаСервереФормаСпискаВидаНоменклатуры(Форма, ГруппаРодитель) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ПравоИзмененияДанных() Тогда
		Возврат;
	КонецЕсли;
			
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("ПодобратьКатегорииИзСервиса");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Добавить виды номенклатуры из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Добавить виды номенклатуры из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ПодобратьКатегорииИзСервиса";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.ДобавитьРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент             = Форма.Элементы.Добавить("ПодобратьКатегорииИзСервиса", Тип("КнопкаФормы"), ГруппаРодитель);
	НовыйЭлемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды  = "ПодобратьКатегорииИзСервиса";
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриЗаписиНаСервере.
//  Записывает соответствие объекта базы и объекта сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект	 - 	Объект           - записываемый объект.
//  Отказ			 - Булево			 - признак отказа.
//
Процедура ПриЗаписиНаСервереФормаВидаНоменклатуры(Форма, ТекущийОбъект, Отказ) Экспорт
	
	Если НЕ Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РаботаСНоменклатурой_СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	
	Если Не Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса) Тогда
		
		// Если убраны привязки категорий, технические регистры очищаются.
		
		ОчиститьСоответствияПоВидуНоменклатуры(ТекущийОбъект.Ссылка);
	Иначе
		
		// Привязка категорий к виду номенклатуры и создания дополнительных реквизитов для новых объектов.
		
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();

		ПараметрыЗаписи.Вставить("ВидНоменклатуры",                        ТекущийОбъект.Ссылка);
		ПараметрыЗаписи.Вставить("ИдентификаторыКатегорий",                Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса);
		ПараметрыЗаписи.Вставить("ОбновляетсяАвтоматически",               Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически);
		ПараметрыЗаписи.Вставить("ЗагружатьХарактеристикиВХарактеристики", Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "ВХарактеристики");
		ПараметрыЗаписи.Вставить("Замещать",                               Истина);

		ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);

		// Создание дополнительных реквизитов.
		
		Если Форма.РаботаСНоменклатурой_СоздатьДополнительныеРеквизиты 
			И ЭтоАдресВременногоХранилища(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения) Тогда
			
			ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения);
				
			Если ТипЗнч(ДанныеЗаполнения) <> Тип("ТаблицаЗначений") Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка формата данных заполнения'");
			КонецЕсли;
						
			СоздатьДополнительныеОбъектыДляВидаНоменклатуры(ТекущийОбъект.Ссылка, ДанныеЗаполнения);
			
			Форма.РаботаСНоменклатурой_СоздатьДополнительныеРеквизиты = Ложь;
			
		КонецЕсли;			
	КонецЕсли;
		
КонецПроцедуры

// Процедура проверки заполнения, для подготовки объекта к предварительной записи.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  Отказ			 - Булево			 - признак отказа.
//  ПроверяемыеРеквизиты - Массив - коллекция путей к реквизитам, для которых будет выполнена проверка заполнения,
//                                  стандартный параметр события объекта ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения Тогда
		ПроверяемыеРеквизиты.Очистить();
		Форма.РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения = Ложь;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСДанными

// Возвращает ссылку на реквизит информационной базы по идентификатору сервиса.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор реквизита сервиса.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на реквизит.
//
Функция РеквизитПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории = &ИдентификаторРеквизитаКатегории
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторРеквизитаКатегории", Идентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		Возврат Результат.РеквизитОбъекта;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на значение реквизита информационной базы по ссылке на реквизит и идентификатору значения.
//
// Параметры:
//  ДополнительныйРеквизит	 - Ссылка - ссылка на дополнительный реквизит.
//  Идентификатор	        - Строка - идентификатор значения реквизита.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на значение реквизита.
//
Функция ЗначениеПоИдентификатору(ДополнительныйРеквизит, Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта = &РеквизитОбъекта
	|	И СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории = &ИдентификаторЗначенияРеквизитаКатегории";
	
	Запрос.УстановитьПараметр("ИдентификаторЗначенияРеквизитаКатегории", Идентификатор);
	Запрос.УстановитьПараметр("РеквизитОбъекта", ДополнительныйРеквизит);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Значение;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

// Получение идентификаторов номенклатуры сервиса с номенклатурой информационной базы.
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив (Строка) - идентификаторы номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ИдентификаторНоменклатурыСервиса - Строка - идентификатор номенклатуры сервиса.
//   * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//
Функция НоменклатураПоИдентификаторам(Знач ИдентификаторыНоменклатуры) Экспорт
	
	Если ТипЗнч(ИдентификаторыНоменклатуры) = Тип("Строка") Тогда
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатуры)
	|	И НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик В (&РежимыИсключения)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", ИдентификаторыНоменклатуры);
	Запрос.УстановитьПараметр("РежимыИсключения",           РежимыЗагрузкиХарактеристикИсключения());
	Запрос.УстановитьПараметр("Сопоставлено",               Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Таблица, заполняемая в момент сравнения значений реквизитов объектов информационной базы
// и объектов сервиса. После заполнения, таблица используется в формах заполнения объектов
// и в методах обновления объектов информационной базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * ПредставлениеРеквизита - Строка - представление реквизита объекта информационной базы для отображение в формах.
//    * ПредставлениеЗначенияСервиса - Строка - представление значения сервиса для отображения в формах.
//    * Пометка - Булево - флаг выбора реквизита для обновления для отображения в формах.
//    * РеквизитОбъекта - Строка, Ссылка - имя реквизита объекта или ссылка на дополнительный реквизит.
//    * НовоеЗначение - Произвольный - значение объекта сервиса.
//    * ТекущееЗначение - Произвольный - значение реквизита объекта информационной базы.
//
Функция ТаблицаОтличийРеквизитов() Экспорт
	
	ТаблицаОтличийРеквизитов = Новый ТаблицаЗначений;
	
	ТаблицаОтличийРеквизитов.Колонки.Добавить("РеквизитОбъекта");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ПредставлениеРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ТекущееЗначение");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("НовоеЗначение");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ПредставлениеЗначенияСервиса", Новый ОписаниеТипов("Строка"));
	ТаблицаОтличийРеквизитов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОтличийРеквизитов;	
	
КонецФункции

// Добавление строки в таблицу отличий, для отображения изменений на формах, а также для процедур обновления.
//
// Параметры:
//  ТаблицаОтличийРеквизитов	 - ТаблицаЗначений - таблица отличий.
//  РеквизитОбъекта				 - Строка, Ссылка - имя реквизита объекта или ссылка на дополнительный реквизит.
//  ЗначениеСервиса				 - Произвольный	 - значение объекта сервиса.
//  ТекущееЗначение				 - Произвольный - значение реквизита объекта информационной базы.
//  ПредставлениеРеквизита		 - Строка - представление реквизита объекта информационной базы.
//  ПредставлениеЗначенияСервиса - Строка - представление значения сервиса.
//  Пометка						 - Булево - признак того, что изменение отмечено (для форм).
//
Процедура ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, РеквизитОбъекта, 
		ЗначениеСервиса, ТекущееЗначение, ПредставлениеРеквизита = "", ПредставлениеЗначенияСервиса = "", Пометка = Истина) Экспорт
	
	ПредставлениеРеквизита = ?(ЗначениеЗаполнено(ПредставлениеРеквизита), ПредставлениеРеквизита, РеквизитОбъекта);
	ПредставлениеЗначения  = ?(ЗначениеЗаполнено(ПредставлениеЗначенияСервиса), ПредставлениеЗначенияСервиса, ЗначениеСервиса);
	
	НоваяСтрока = ТаблицаОтличийРеквизитов.Добавить();
	
	НоваяСтрока.РеквизитОбъекта              = РеквизитОбъекта;
	НоваяСтрока.ПредставлениеРеквизита       = ПредставлениеРеквизита;
	НоваяСтрока.ТекущееЗначение              = ТекущееЗначение;
	НоваяСтрока.НовоеЗначение                = ЗначениеСервиса;
	НоваяСтрока.ПредставлениеЗначенияСервиса = ПредставлениеЗначения;
	НоваяСтрока.Пометка                      = Пометка;
	
КонецПроцедуры

// Функция возвращает значение строки дополнительного реквизита.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - строка таблицы дополнительных реквизитов.
// 
// Возвращаемое значение:
//  Произвольный - значение дополнительного реквизита.
//
Функция ЗначениеДополнительногоРеквизита(СтрокаДанных) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторЗначения) Тогда
		Результат = СтрокаДанных.ЗначениеИнформационнойБазы;
	Иначе
		Результат = СтрокаДанных.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание типа, на основании типа реквизита сервиса.
//
// Параметры:
//  ТипРеквизита - Строка - возможные значения: "Строка", "Число", "Дата", "Булево", "Список".
// 
// Возвращаемое значение:
//  ОписаниеТипа - описание типа.
//
Функция ОписаниеТипаНаОснованииТипаСервиса(ТипРеквизита) Экспорт
	
	ОписаниеТипаЗначения = Новый ОписаниеТипов("Строка");
	
	Если СтрСравнить(ТипРеквизита, "Строка") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Число") = 0 Тогда	
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Число");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Дата") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Дата");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Булево") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Список") = 0 Тогда
		ОписаниеТипаЗначения = Метаданные.ОпределяемыеТипы.ЗначенияСвойствОбъектовРаботаСНоменклатурой.Тип;
	КонецЕсли;
	
	Возврат ОписаниеТипаЗначения;
	
КонецФункции

// Получение данных из формы для интерактивного заполнения объект.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма объекта.
// 
// Возвращаемое значение:
//  Строка - адрес временного хранилища структуру с ключами: ВидНоменклатуры, ОсновныеРеквизиты, ДополнительныеРеквизиты.
//
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения(Форма) Экспорт
	
	Если Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры" Тогда
		
		ДанныеФормы = Новый Структура;
		
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ДанныеФормы);
		
		Возврат ПоместитьВоВременноеХранилище(ДанныеФормы, Форма.УникальныйИдентификатор);
		
	Иначе
			
		ДанныеФормы = Новый Структура;

		ДанныеФормы.Вставить("ВидНоменклатуры",         Неопределено);
		ДанныеФормы.Вставить("ОсновныеРеквизиты",       Новый Структура);
		ДанныеФормы.Вставить("ДополнительныеРеквизиты", Новый ТаблицаЗначений);
			
		РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы(Форма, ДанныеФормы.ВидНоменклатуры);
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ДанныеФормы.ОсновныеРеквизиты);
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ДанныеФормы.ДополнительныеРеквизиты);

		Возврат ПоместитьВоВременноеХранилище(ДанныеФормы, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецФункции

// Заполнение реквизитов формы объекта, после закрытия окна заполнения объекта.
//
// Параметры:
//  Форма	                 - ФормаКлиентскогоПриложения - форма заполняемого объекта.
//  ПараметрыЗакрытияФормы	 - Структура - результат закрытия окна заполнения объекта.
//
Процедура ЗаполнитьРеквизитыФормы(Форма, ПараметрыЗакрытияФормы) Экспорт
	
	Если ПараметрыЗакрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_ТипОбъекта = "Номенклатура" Тогда
		ЗаполнитьРеквизитыФормыНоменклатуры(Форма, ПараметрыЗакрытияФормы);
		
	ИначеЕсли Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры" Тогда
		ЗаполнитьРеквизитыФормыВидаНоменклатуры(Форма, ПараметрыЗакрытияФормы);
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает ссылки на виды номенклатуры по идентификатору категории.
//
// Параметры:
//  ИдентификаторКатегории - Строка - идентификатор категории.
// 
// Возвращаемое значение:
//  Массив - массив ссылок на виды номенклатуры.
//
Функция ВидыНоменклатурыПоИдентификаторуКатегории(ИдентификаторКатегории) Экспорт
	
	Возврат РаботаСНоменклатуройСлужебный.ВидыНоменклатурыПоИдентификаторам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории));
	
КонецФункции

// Объединение дополнительных реквизитов и значений с одинаковыми идентификаторами.
// Используется при объединении категорий в одну.
//
// Параметры:
//  ДанныеЗаполнения - ТаблицаКатегорий - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
// 
// Возвращаемое значение:
//  Структура - структура с ключами ДополнительныеРеквизиты, Характеристики.
//
Функция ОбъединитьДанныеДополнительныхРеквизитов(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРеквизитов = Новый Структура;
	
	ДанныеРеквизитов.Вставить("ДополнительныеРеквизиты", 
		ДанныеЗаполнения[0].ДополнительныеРеквизиты.СкопироватьКолонки());
	ДанныеРеквизитов.Вставить("Характеристики", 
		Новый Структура("ДополнительныеРеквизиты", ДанныеЗаполнения[0].ДополнительныеРеквизиты.СкопироватьКолонки()));
	
	Для каждого ЭлементКоллекции Из ДанныеЗаполнения Цикл
		Для каждого ТекущийРеквизит Из ЭлементКоллекции.ДополнительныеРеквизиты Цикл
			
			СтрокаВТаблице = ДанныеРеквизитов.ДополнительныеРеквизиты.Найти(ТекущийРеквизит.Идентификатор, "Идентификатор");
			
			Если СтрокаВТаблице <> Неопределено Тогда
				ДополнитьЗначенияРеквизита(ТекущийРеквизит, СтрокаВТаблице);
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеРеквизитов.ДополнительныеРеквизиты.Добавить(), ТекущийРеквизит);
		КонецЦикла;
		
		Для каждого ТекущийРеквизит Из ЭлементКоллекции.Характеристики.ДополнительныеРеквизиты Цикл
			
			СтрокаВТаблице = ДанныеРеквизитов.Характеристики.ДополнительныеРеквизиты.Найти(ТекущийРеквизит.Идентификатор, "Идентификатор");
			
			Если СтрокаВТаблице <> Неопределено Тогда
				ДополнитьЗначенияРеквизита(ТекущийРеквизит, СтрокаВТаблице);
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеРеквизитов.Характеристики.ДополнительныеРеквизиты.Добавить(), ТекущийРеквизит);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеРеквизитов;
	
КонецФункции

// Перезаполняет встроенные реквизиты формы. Может использоваться в ситуациях, когда требуется 
// обновить данные открытой формы, например при вызове команды Перечитать.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма, с встроенными элементами подсистемы.
//
Процедура ПерезаполнитьВстроенныеРеквизиты(Форма) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РаботаСНоменклатурой_СервисДоступен") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_ТипОбъекта = "Номенклатура" Тогда
		ОтображатьДанныеХарактеристик = Форма.Элементы.РаботаСНоменклатурой_Характеристики.Видимость;
		ЗаполнитьВстроенныеРеквизитыФормыНоменклатуры(Форма, Неопределено, ОтображатьДанныеХарактеристик);
	ИначеЕсли Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры" Тогда
		ЗаполнитьВстроенныеРеквизитыФормыВидаНоменклатуры(Форма);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить вид объекта'")	
	КонецЕсли;
	
	НастроитьВстроенныеЭлементыФормы(Форма);
	
КонецПроцедуры

// Возвращает сопоставленные реквизиты и их идентификаторы по видам номенклатуры.
//
// Параметры:
//  ВидыНоменклатуры - Массив из ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - виды номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные по сопоставленным реквизитам. Колонки:
//      * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//      * Реквизит - Ссылка - ссылка на дополнительный реквизит.
//      * ИдентификаторРеквизита - Строка - идентификатор реквизита.
//
Функция СопоставленныеРеквизитыПоВидамНоменклатуры(ВидыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления КАК ВидНоменклатуры,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК Реквизит,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизита
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления В(&ОбъектСопоставления)";
	
	Запрос.УстановитьПараметр("ОбъектСопоставления", ВидыНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает товарную группу категории 1С:Номенклатуры.
// 
// Параметры:
//  ИдентификаторКатегории - Строка - идентификатор категории 1С:Номенклатуры.
// 
// Возвращаемое значение:
//  Строка - товарная группа 1С:Номенклатуры. Например "ЛегкаяПромышленность", "МолочнаяПродукция".
//  Если вычислить товарную группу категории не удалось, возвращается пустая строка.
//
Функция ТоварнаяГруппаПоКатегорииСервиса(ИдентификаторКатегории) Экспорт 
	
	Результат      = "";
	ОтветСтрока    = РаботаСНоменклатуройСлужебныйПовтИсп.КатегорииТоварныхГрупп();
	ОтветСтруктура = РаботаСНоменклатуройСлужебный.ЗначениеИзСтрокиJSON(ОтветСтрока);
	Если ТипЗнч(ОтветСтруктура) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТоварныеГруппы = Новый ТаблицаЗначений;
	ТоварныеГруппы.Колонки.Добавить("ТоварнаяГруппа"        , ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТоварныеГруппы.Колонки.Добавить("ИдентификаторКатегории", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Для каждого ТоварнаяГруппа Из ОтветСтруктура Цикл
		Если ТипЗнч(ТоварнаяГруппа.Значение) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Категория Из ТоварнаяГруппа.Значение Цикл
			НоваяСтрока = ТоварныеГруппы.Добавить();
			НоваяСтрока.ТоварнаяГруппа = ТоварнаяГруппа.Ключ;
			НоваяСтрока.ИдентификаторКатегории = Категория;
		КонецЦикла;
	КонецЦикла;
	
	ТоварныеГруппы.Индексы.Добавить("ИдентификаторКатегории");
	
	ПоискГруппы = ТоварныеГруппы.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ИдентификаторКатегории));
	Если ПоискГруппы.Количество() Тогда
		Результат = ПоискГруппы[0].ТоварнаяГруппа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает товары, принятые в Национальный каталог.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, для которой требуется получить настройку.
//  Товары - ТаблицаЗначений:
//   * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - обязательна
//   * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - может отсутствовать, если учет по характеристикам не ведется
// 
// Возвращаемое значение:
//  Товары - ТаблицаЗначений:
//   * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - обязательна
//   * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - может отсутствовать, если учет по характеристикам не ведется
//
Функция ТоварыПринятыВНациональныйКаталог(Организация, Товары) Экспорт
	
	РаботаСНоменклатуройСлужебный.ПодготовитьТаблицуТоваров(Товары);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры КАК Характеристика
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.Принята)
	|	И СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Товары КАК Товары
	|		ГДЕ
	|			Товары.Номенклатура = СостоянияВыгрузкиНоменклатуры.Номенклатура
	|			И Товары.ХарактеристикаНоменклатуры = СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область РаботаПодсистемы
	
// Функция определяет доступность подсистемы.
// 
// Возвращаемое значение:
//  Булево - признак доступности подсистемы.
//
Функция ДоступнаФункциональностьПодсистемы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") 
		И ПравоЧтенияДанных(); 
	
КонецФункции

// Настройки подсистемы
// 
// Возвращаемое значение:
//  Структура - настройки подсистемы, см. РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек
//
Функция НастройкиПодсистемы() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ИспользоватьВидыНоменклатуры",                    Ложь);
	Настройки.Вставить("ИспользоватьХарактеристики",                      Ложь);
	Настройки.Вставить("ИспользоватьПакетноеСозданиеНоменклатуры",        Ложь);
	Настройки.Вставить("ИспользоватьПоискПоШтрихкодуВСервисе",            Ложь);
	Настройки.Вставить("СохранятьИерархиюКатегорийПриЗагрузке",           Ложь);
	Настройки.Вставить("РежимПредставленияНоменклатурыСХарактеристиками", "Настраиваемый");
	Настройки.Вставить("ИспользоватьДополнительныеРеквизиты",             ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства"));
	Настройки.Вставить("ИспользоватьВыгрузкуВКаталог1С",                  Истина);
	Настройки.Вставить("ИспользоватьВыгрузкуВНациональныйКаталог",        Истина);
	Настройки.Вставить("ИспользоватьПодборНоменклатурыСХарактеристиками", Ложь);
	
	РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Возвращает полное имя объекта метаданных по переданному значению типа.
// Основное назначение - определить имя объекта метаданных по определяемому типу.
//
// Параметры:
//  ПроверяемыйТип - ОписаниеТипов - определяемый тип. Например Метаданные.ОпределяемыеТипы.Организация.Тип
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного типа. Например: "Справочник.Организации".
//
Функция ИмяТаблицыПоТипу(ПроверяемыйТип) Экспорт
	
	ИмяТаблицы = "";
	ПустоеЗначениеТипа = ПроверяемыйТип.ПривестиЗначение();
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПустоеЗначениеТипа)) Тогда
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ПустоеЗначениеТипа);
	КонецЕсли;
	
	Возврат ИмяТаблицы
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Проверяет полноту встраивания функционала сопоставления с рубрикатором.
// Главным образом речь идет о форме Обработка.РаботаСНоменклатурой.Форма.СопоставлениеНоменклатурыСРубрикатором,
// а так же вызовов из нее.
// Если метод возвращает Ложь, то открытие формы не имеет смысла, поэтому необходимо скрывать из интерфейса соответствующие команды.
// Примеры использования: см. ВыгрузкаНоменклатурыИспользуется(), 
//
// Возвращаемое значение:
//  Булево
//
Функция СопоставлениеНоменклатурыСРубрикаторомВозможно() Экспорт 
	
	ТаблицаНоменклатура = ИмяТаблицыПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	ТекстЗапроса        = "";
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса);
	
	Возврат ЗначениеЗаполнено(ТекстЗапроса) И ЗначениеЗаполнено(ТаблицаНоменклатура);
	
КонецФункции

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно
	
#Область Версия_1_7_2

МетаданныеРегистра = Метаданные.РегистрыСведений.Найти("УдалитьСоответствиеНоменклатурыБизнесСеть");

Если МетаданныеРегистра <> Неопределено Тогда

#Область РегистрыСведений_СоответствиеВидовНоменклатурыРаботаСНоменклатурой_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6a851990-6788-49d8-b531-d3d027b5489f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой,"
		+ "РегистрСведений.УдалитьСоответствиеНоменклатурыБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Номенклатура: обновляются данные соответствия видов номенклатуры'");

#КонецОбласти

#Область РегистрыСведений_СоответствиеНоменклатурыРаботаСНоменклатурой_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9bdd2610-08dd-4bb4-9f27-ae439faea256");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой,"
		+ "РегистрСведений.УдалитьСоответствиеНоменклатурыБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Номенклатура: обновляются данные соответствия номенклатуры'");

#КонецОбласти

КонецЕсли;

МетаданныеРегистра = Метаданные.РегистрыСведений.Найти("УдалитьСоответствиеЗначенийРеквизитовБизнесСеть");

Если МетаданныеРегистра <> Неопределено Тогда

#Область РегистрыСведений_УдалитьСоответствиеЗначенийРеквизитовБизнесСеть_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3bfbbcd-d523-4761-a897-c1f9dc343bab");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой,"
		+ "РегистрСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Номенклатура: обновляются данные соответствия значений реквизитов'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область РегистрыСведений_УдалитьСоответствиеРеквизитовБизнесСеть_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.УдалитьСоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("39a14352-c603-4697-9953-0f69f0adc720");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.УдалитьСоответствиеРеквизитовБизнесСеть.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой,"
		+ "РегистрСведений.УдалитьСоответствиеРеквизитовБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Номенклатура: обновляются данные соответствия реквизитов'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

КонецЕсли;

#КонецОбласти

#КонецОбласти

	// Добавляем в описание читаемые / изменяемые данные, рассчитываемые динамически.
	РаботаСНоменклатуройСлужебный.ЗаполнитьЧитаемыеИзменяемыеДанныеОбработчиковОбновления(Обработчики);

КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыРаботаСНоменклатурой.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыРаботаСНоменклатурой.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой.ИмяМетода);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОбновлениеНоменклатурыРаботаСНоменклатурой"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьСервисРаботаСНоменклатурой"];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ВыгрузкаНоменклатурыРаботаСНоменклатурой"];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияВыгрузкиНоменклатуры, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.СостоянияВыгрузкиНоменклатуры.Чтение.Организации
	|РегистрСведений.СостоянияВыгрузкиНоменклатуры.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхСервиса

// Возвращает перечень товарных групп 1С:Номенклатуры.
// 
// Параметры:
//  ДанныеСервиса - Строка - см. РаботаСНоменклатуройСлужебныйПовтИсп.ТоварныеГруппыСервиса()
// 
// Возвращаемое значение:
//  Структура,
//   Ключи - имена товарных групп. Например "ЛегкаяПромышленность", "МолочнаяПродукция".
//   Значения - Структура - содержит:
//    * Наименование - Строка - краткое представление товарной группы для пользователя. Например "Молоко и молочная продукция".
//    * Описание     - Строка - расширенное описание для пользователя. Например "Осуществляется обмен с ИС МП информацией по обороту молока и молочной продукции.".
//
Функция ТоварныеГруппыСервиса(ДанныеСервиса = "") Экспорт 
	
	Если ДанныеСервиса = "" Тогда
		ДанныеСервиса = РаботаСНоменклатуройСлужебныйПовтИсп.ТоварныеГруппыСервиса();
	КонецЕсли;
	
	ТоварныеГруппы = Новый Структура;
	ОтветСтруктура = РаботаСНоменклатуройСлужебный.ЗначениеИзСтрокиJSON(ДанныеСервиса);
	Если ТипЗнч(ОтветСтруктура) = Тип("Структура") Тогда
		Для каждого ЭлементОтвета Из ОтветСтруктура Цикл
			ОписаниеТоварнойГруппы = Новый Структура("Наименование, Описание");
			ЗаполнитьЗначенияСвойств(ОписаниеТоварнойГруппы, ЭлементОтвета.Значение);
			ТоварныеГруппы.Вставить(ЭлементОтвета.Ключ, ОписаниеТоварнойГруппы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТоварныеГруппы;

КонецФункции

// Функция-конструктор параметров поиска номенклатуры сервиса.
// 
// Возвращаемое значение:
//  Структура
//   * СтрокаПоиска - Строка - поисковая строка
//   * Штрихкоды - Массив из Строка - штрихкоды
//   * КоличествоЗаписей - Число - количество записей, например для постраничной загрузки
//   * НомерСтраницы - Число - номер страницы для постраничной загрузки.
//   * НайтиСопоставленные - Булево - после получения идентификаторов сервиса выполнить поиск ссылок сопоставленной
//                                    номенклатуры, по умолчанию Истина  
//
Функция ПараметрыПоискаНоменклатурыСервиса() Экспорт

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("СтрокаПоиска", "");
	ПараметрыПоиска.Вставить("Штрихкоды", Новый Массив);
	ПараметрыПоиска.Вставить("КоличествоЗаписей", РазмерПорцииДанныхНоменклатуры());
	ПараметрыПоиска.Вставить("НомерСтраницы", 0);
	ПараметрыПоиска.Вставить("НайтиСопоставленные", Истина);
	
	Возврат ПараметрыПоиска;
	
КонецФункции

// Выполняет поиск данных в сервисе по строке или штрихкодам.
// 
// Параметры:
//  ПараметрыПоиска - см. ПараметрыПоискаНоменклатурыСервиса
//  
// Возвращаемое значение:
//  Массив из Структура:
//   * Идентификатор - Строка - идентификатор номенклатуры в сервисе.
//   * Наименование - Строка - наименование номенклатуры.
//   * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на номенклатуру.
//                    Ключ добавляется в результат только если ПараметрыПоиска.НайтиСопоставленные = Истина.
//
Функция РезультатПоискаНоменклатурыСервиса(Знач ПараметрыПоиска) Экспорт
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыПоиска);
	Если ТипЗнч(ПараметрыЗапроса.КоличествоЗаписей) <> Тип("Число") 
		Или ПараметрыЗапроса.КоличествоЗаписей = 0 Тогда
		ПараметрыЗапроса.КоличествоЗаписей = РазмерПорцииДанныхНоменклатуры();
	КонецЕсли;
	
	ПараметрыКоманды    = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	Отказ               = Ложь;
	НоменклатураСервиса = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	РезультатПоиска = Новый Массив;
	КлючиРезультата = "Идентификатор, Наименование";
	
	Если Отказ 
		Или ТипЗнч(НоменклатураСервиса) <> Тип("ТаблицаЗначений") 
		Или НоменклатураСервиса.Количество() = 0 Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ПараметрыПоиска.НайтиСопоставленные Тогда
		КлючиРезультата = КлючиРезультата + ", Номенклатура";
		НайтиСопоставленнуюНоменклатуру(НоменклатураСервиса);
	КонецЕсли;
	
	Для Каждого Элемент Из НоменклатураСервиса Цикл
		СтрокаРезультата = Новый Структура(КлючиРезультата);
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, Элемент);
		РезультатПоиска.Добавить(СтрокаРезультата);
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Формирует параметры заполнения формы элемента номенклатуры по данным сервиса.
// 
// Параметры:
//  ИдентификаторНоменклатуры - Строка - идентификатор запрашиваемой номенклатуры сервиса.
//  ДанныеФормы - Неопределено, Структура:
//   * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры.
//   * ОсновныеРеквизиты - Структура, СтрокаТаблицыЗначений - основные реквизиты номенклатуры.
//   * ДополнительныеРеквизиты - ТаблицаЗначений:
//    ** Свойство - ОпределяемыйТип.ДополнительныеРеквизитыРаботаСНоменклатурой - дополнительный реквизит.
//    ** Значение - Произвольный - значение дополнительного реквизита.
//  АдресРезультата - Строка - адрес во временном хранилище, по которому размещается результат метода
//  АдресДополнительногоРезультата - Строка - адрес во временном хранилище, по которому размещается описание ошибки 
//   покупки карточки номенклатуры
//
// Возвращаемое значение:
//  Булево - признак успешного выполнения метода, значение Истина означает, что параметры формы подготовлены.
//
Функция ПараметрыЗаполненияФормыНоменклатурыПодготовлены(Знач ИдентификаторНоменклатуры, 
	Знач ДанныеФормы, Знач АдресРезультата, Знач АдресДополнительногоРезультата) Экспорт
	
	Перем ОсновныеРеквизиты, ДополнительныеРеквизиты, ВидНоменклатуры;
	
	ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторНоменклатуры);
	Отказ = Ложь;
	РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ);
	Если Отказ Или РезультатПокупки.ЕстьОшибки Тогда
		ПоместитьВоВременноеХранилище(РезультатПокупки, АдресДополнительногоРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСервиса = ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры, Ложь, Ложь);
	Если ТипЗнч(ДанныеСервиса) <> Тип("ТаблицаЗначений") Или ДанныеСервиса.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДанных = ДанныеСервиса[0];
	
	Если ТипЗнч(ДанныеФормы) = Тип("Структура") Тогда
		ДанныеФормы.Свойство("ОсновныеРеквизиты", ОсновныеРеквизиты);
		ДанныеФормы.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		ДанныеФормы.Свойство("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	
	Если ОсновныеРеквизиты = Неопределено Тогда
		ОсновныеРеквизиты = Новый ТаблицаЗначений;
		ПустаяНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.ПривестиЗначение();
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(ПустаяНоменклатура, ОсновныеРеквизиты);
		ОсновныеРеквизиты = ОсновныеРеквизиты.Добавить();
	КонецЕсли;
	
	ТаблицаОтличийРеквизитов = ТаблицаОтличийРеквизитов();
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры(СтрокаДанных, 
		ОсновныеРеквизиты, ТаблицаОтличийРеквизитов);
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	
	ИдентификаторКатегории = СтрокаДанных.ИдентификаторКатегории;
	
	РеквизитыПодготовлены = ВидНоменклатурыИДополнительныеРеквизитыПодготовлены(ТаблицаОтличийРеквизитов, 
		ИдентификаторКатегории, СтрокаДанных, ДополнительныеРеквизиты, ВидНоменклатуры);
	
	Если Не РеквизитыПодготовлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ТаблицаОтличий", ТаблицаОтличийРеквизитов);
	ПараметрыЗаполнения.Вставить("АвтоматическийРежимОбновления", Ложь);
	ПараметрыЗаполнения.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	ПараметрыЗаполнения.Вставить("НаименованиеНоменклатуры", СтрокаДанных.Наименование);
	ПараметрыЗаполнения.Вставить("ДанныеСервиса", ДанныеСервиса);
	ПараметрыЗаполнения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	ПараметрыЗаполнения.Вставить("НаименованиеКатегории", СтрокаДанных.НаименованиеКатегории);
	ПараметрыЗаполнения.Вставить("КоличествоХарактеристик", СтрокаДанных.КоличествоХарактеристик);
	ПараметрыЗаполнения.Вставить("ЗагрузитьИзображения", ЗначениеЗаполнено(СтрокаДанных.Изображения));
	
	ПараметрыЗаполнения.Вставить("ИдентификаторыХарактеристик", Новый СписокЗначений);
	ПараметрыЗаполнения.Вставить("ИдентификаторХарактеристики", "");
	ПараметрыЗаполнения.Вставить("РежимЗагрузкиХарактеристик", "НеЗагружать");
	
	ПоместитьВоВременноеХранилище(ПараметрыЗаполнения, АдресРезультата);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемБиблиотеки

// См. ПодключениеСервисовСопровожденияПереопределяемый.ПриОпределенииСервисовСопровождения.
//
// Параметры:
//  МодулиСервисов	 - Массив - массив имен модулей.
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	МодулиСервисов.Добавить("РаботаСНоменклатурой");
	
КонецПроцедуры

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
// Пример:
//  ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
//  ОписательСервиса.Идентификатор   = "1C-Nomenclature";
//  ОписательСервиса.КартинкаСервиса = Метаданные.ОбщиеКартинки.ЛоготипСервисРаботаСНоменклатурой;
//  ОписательСервиса.Наименование    = НСтр("ru = '1С:Номенклатура'");
//  ОписательСервиса.ОписаниеСервиса = НСтр("ru = 'Быстрая проверка информации о контрагентах, автоматическое
//    |заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
//
//  СервисыСопровождения.Добавить(ОписательСервиса);
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.ЛоготипСервисРаботаСНоменклатурой;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Номенклатура'");
	ОписательСервиса.Описание        = НСтр("ru = 'Поиск, загрузка и обновление номенклатуры и видов номенклатуры из сервиса 1С:Номенклатура'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие

#КонецОбласти

#Область РаботаСКатегориями

// Функция возвращает идентификаторы категорий по переданным ссылкам.
//
// Параметры:
//  ВидыНоменклатуры - Массив - массив ссылок типа ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными. Колонки:
//    * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//    * ИдентификаторКатегории - Строка - идентификатор категории.
//    * ПредставлениеКатегории - Строка - представление категории.
//
Функция ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(ВидыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Загрузка категорий с замером.
//
// Параметры:
//  КатегорииКЗагрузке	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура ЗагрузитьКатегории(Знач ПараметрыЗагрузки, Знач АдресРезультата, Знач АдресДополнительногоРезультата) Экспорт

	Если Не ВедетсяУчетВидовНоменклатуры() Тогда
		Возврат;
	КонецЕсли; 
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	ДолжноБытьСоздано = ПараметрыЗагрузки.КатегорииКЗагрузке.Количество();
	
	ЗагрузкаКатегорий(ПараметрыЗагрузки, ДолжноБытьСоздано, АдресРезультата, АдресДополнительногоРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.ЗагрузкаКатегорий", Начало, ДолжноБытьСоздано);

КонецПроцедуры

// Создание дополнительного реквизита в системе.
//
// Параметры:
//  ВидНоменклатурыСсылка			 - Ссылка - вид номенклатуры.
//  ДополнительныйРеквизит			 - СтрокаТаблицыЗначений - строка данных сервиса по дополнительным реквизитам.
//  ДополнительныеРеквизиты			 - ТаблицаЗначений - таблица реквизитов.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак, что это характеристика.
//
Процедура СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	РеквизитСсылка = Неопределено;
	
	РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, РеквизитСсылка);
	
	Если ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
		МассивЗначений = Новый Массив;
		Для каждого ЗначениеРеквизита Из ДополнительныйРеквизит.Значения Цикл
			ЗначениеСсылка = Неопределено;
			РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьЗначениеРеквизита(РеквизитСсылка, ЗначениеРеквизита, ЗначениеСсылка);
			МассивЗначений.Добавить(Новый Структура("ЗначениеРеквизитаВидаНоменклатуры, ИдентификаторЗначенияРеквизитаКатегории, ЗначениеРеквизитаКатегории",
			ЗначениеСсылка, ЗначениеРеквизита.Идентификатор, ЗначениеРеквизита.Наименование));	
		КонецЦикла;
		
		ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатурыСсылка, РеквизитСсылка, МассивЗначений);
	КонецЕсли;
	
	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
	
	НоваяСтрока.РеквизитОбъекта                  = РеквизитСсылка;
	НоваяСтрока.ИдентификаторРеквизитаКатегории  = ДополнительныйРеквизит.Идентификатор;
	НоваяСтрока.ПредставлениеРеквизитаКатегории  = ДополнительныйРеквизит.Наименование;
	НоваяСтрока.ЯвляетсяРеквизитомХарактеристики = ЯвляетсяРеквизитомХарактеристики;
	
КонецПроцедуры

// Получение данных категорий.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьДанныеКатегорийСервиса(ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	ИдентификаторыКатегорий              = ПараметрыМетода.ИдентификаторыКатегорий;
	ВидНоменклатуры                      = ПараметрыМетода.ВидНоменклатуры;
	АктуализироватьВспомогательныеДанные = ПараметрыМетода.АктуализироватьВспомогательныеДанные;
	
	ДанныеСервиса = ДанныеКатегорийСервиса(ИдентификаторыКатегорий);
	
	Если АктуализироватьВспомогательныеДанные Тогда
		АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымКатегорий(ДанныеКатегорийСервиса(ИдентификаторыКатегорий), 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидНоменклатуры));
	КонецЕсли;

	ПоместитьВоВременноеХранилище(ДанныеСервиса, АдресРезультата);
	
КонецПроцедуры

// Функция возвращает данные категорий сервиса по идентификаторам
//
// Параметры:
//  ИдентификаторыКатегорий           - Массив, Строка - идентификаторы запрашиваемых категорий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * ДатаИзменения                 - Дата - дата последнего изменения категории.
//    * ДополнительныеРеквизиты       - Таблица значений - дополнительные реквизиты категории. Содержит колонки:
//      ** ДатаИзменения              - Дата - дата последнего изменения реквизита.
//      ** Значения                   - ТаблицаЗначений - таблица с возможными значениями реквизита.
//         Колонки:
//         ** ДатаИзменения           - Дата - дата последнего изменения значения в сервисе.
//         ** ЗначениеИнформационнойБазы - Ссылка - значение в информационной базе согласно 
//                                                  регистру сведений СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.
//         ** Идентификатор           - Строка - идентификатор значения.
//         ** Наименование            - Строка - представление значения.
//      ** Идентификатор              - Строка - идентификатор реквизита.
//      ** ИдентификаторыЗначений     - Массив - (Строка) идентификаторы значений.
//      ** МаксимальноеЗначение       - Число - максимальное значение.
//      ** МинимальноеЗначение        - Число - минимальное значение.
//      ** Наименование               - Строка - наименование реквизита.
//      ** Обязательный               - Булево - флаг обязательности заполнения.
//      ** РеквизитИнформационнойБазы - Ссылка - ссылка на реквизит в информационной базе согласно 
//                                               регистру сведений СоответствиеРеквизитовРаботаСНоменклатурой.
//      ** Тип                        - Строка - тип значения реквизита. См. РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса.
//    * Идентификатор                 - Строка - идентификатор категории.
//    * ИдентификаторРодителя         - Строка - идентификатор родителя категории.
//    * Изображения                   - Массив - массив ссылок на изображения.
//    * Классификаторы                - ТаблицаЗначений - классификаторы категорий. Содержит колонки:
//      ** Наименование               - Строка - наименование классификатора.
//      ** Идентификатор              - Строка - идентификатор классификатора.
//      ** Описание                   - Строка - описание классификатора.
//    * КоличествоПодчиненных         - Число - количество подчиненных элементов.
//    * Наименование                  - Строка - наименование категории.
//    * НаименованиеРодителя          - Строка - наименование родителя категории.
//    * Описание                      - Строка - описание категории.
//    * СтавкаНДС                     - Строка - ставка НДС. Возможны значения: "20", "18", "10", "-".
//    * Тип                           - Строка - тип номенклатуры категории. Возможны значения: "Товар", "Услуга".
//    * УчастникГИСМ                  - Булево - флаг ГИСМ.
//    * УчастникЕГАИС                 - Булево - флаг ЕГАИС.
//    * Характеристики                - Структура - характеристики категории. Содержит ключи:
//      ** ДополнительныеРеквизиты    - ТаблицаЗначений - см. Дополнительные реквизиты
//      ** Идентификаторы	          - Массив - идентификаторы характеристик.
//      ** Наименование               - Строка - представление характеристики.
//
Функция ДанныеКатегорийСервиса(Знач ИдентификаторыКатегорий) Экспорт
	
	Если ТипЗнч(ИдентификаторыКатегорий) = Тип("Строка")Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	Если ИдентификаторыКатегорий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ДанныеПоКатегориям = ПолучитьДанныеКатегорийПоИдентификаторам(ИдентификаторыКатегорий, Ложь, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	РаботаСНоменклатуройПереопределяемый.ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям);
	
	Возврат ДанныеПоКатегориям;
	
КонецФункции

// Получить значения дополнительного реквизита, в соответствии с представлением значений базы.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры метода.
//   Ключи:
//    * ИдентификаторКатегории - Строка - идентификатор категории.
//    * ИдентификаторДополнительногоРеквизита - Строка - идентификатор реквизита.
//    * ИдентификаторКатегории - Массив (Строка) - строковое представление значений базы.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьЗначенияСоответствующиеЗаданным(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Новый ОписаниеТипов("Строка"));
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаПоиска.Колонки.Добавить("Значение",                              Новый ОписаниеТипов("Строка"));
	
	Для каждого ТекущееЗначение Из ПараметрыЗапроса.ПредставлениеЗначений Цикл
		
		Для каждого ТекущаяКатегория Из ПараметрыЗапроса.ИдентификаторыКатегорий Цикл
			
			Если СтрДлина(ТекущееЗначение) < 2 Тогда // Ограничение, выставленное в сервисе.
				ТекущееЗначение = Лев(ТекущееЗначение + "__", 2);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПоиска.Добавить();
			
			НоваяСтрока.ИдентификаторКатегории                = ТекущаяКатегория;
			НоваяСтрока.ИдентификаторДополнительногоРеквизита = ПараметрыЗапроса.ИдентификаторДополнительногоРеквизита;
			НоваяСтрока.Значение                              = ТекущееЗначение;
			
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов();
	
	ПараметрыЗапроса.ТаблицаПоиска = ТаблицаПоиска;
	ПараметрыЗапроса.НаборПолей    = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитов(ПараметрыЗапроса);
	
	Отказ = Ложь;
	
	ЗначенияРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ПоместитьВоВременноеХранилище(ЗначенияРеквизитов, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатурой

Процедура ОбновитьНоменклатуру(Номенклатура, ЗагружатьКатегории = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК Идентификатор
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса <> """"
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &СтатусСопоставления";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтатусСопоставления", Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Выборка.Идентификатор;
	
	РаботаСНоменклатуройСлужебный.ОбновитьНоменклатуру(Номенклатура, Идентификатор, Истина, ЗагружатьКатегории);
	
КонецПроцедуры

// Функция возвращает ссылки на номенклатуру и характеристики информационной базы
//  по идентификаторам номенклатуры и характеристик.
//
// Параметры:
//  Идентификаторы	 - Массив (Структура) - массив структур или структура с ключами: 
//                                          ИдентификаторНоменклатуры, ИдентификаторХарактеристики.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * Номенклатура                - Ссылка - ссылка на номенклатуру.
//    * Характеристика              - Ссылка - ссылка на характеристику.
//    * ИдентификаторНоменклатуры   - Строка - идентификатор номенклатуры.
//    * ИдентификаторНоменклатуры   - Строка - идентификатор характеристики.
//
Функция НоменклатураИХарактеристикиПоИдентификаторам(Знач Идентификаторы) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторыНоменклатурыИХарактеристик = Новый ТаблицаЗначений;
	
	ИдентификаторыНоменклатурыИХарактеристик.Колонки.Добавить("ИдентификаторНоменклатуры", 
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ИдентификаторыНоменклатурыИХарактеристик.Колонки.Добавить("ИдентификаторХарактеристики", 
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	ИдентификаторыНоменклатурыБезХарактеристик = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Идентификаторы Цикл
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторХарактеристики) Тогда
			ИдентификаторыНоменклатурыБезХарактеристик.Добавить(ЭлементКоллекции.ИдентификаторНоменклатуры);
		Иначе
			ЗаполнитьЗначенияСвойств(ИдентификаторыНоменклатурыИХарактеристик.Добавить(), ЭлементКоллекции);	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Идентификаторы.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	Идентификаторы.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ИдентификаторыОбъектов
	|ИЗ
	|	&ИдентификаторыНоменклатурыИХарактеристик КАК Идентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса, СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса) В
	|			(ВЫБРАТЬ
	|				ИдентификаторыОбъектов.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|				ИдентификаторыОбъектов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|			ИЗ
	|				ИдентификаторыОбъектов КАК ИдентификаторыОбъектов)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатурыБезХарактеристик)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатурыИХарактеристик",   ИдентификаторыНоменклатурыИХарактеристик);
	Запрос.УстановитьПараметр("Сопоставлено",                               Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатурыБезХарактеристик", ИдентификаторыНоменклатурыБезХарактеристик);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",                       ПустаяСсылкаНаХарактеристику());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает ссылки на номенклатуру и характеристики информационной базы
//  по идентификаторам номенклатуры и характеристик, а также признак того, что объект удален из сервиса.
//  При поиске номенклатуры используются в том числе архивные (устаревшие) идентификаторы, 
//  за получением которых идет обращение к сервису.
//
// Параметры:
//  Идентификаторы	 - Массив (Структура) - массив структур или структура с ключами: 
//                                          ИдентификаторНоменклатуры, ИдентификаторХарактеристики.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * Номенклатура                         - Ссылка - ссылка на номенклатуру.
//    * Характеристика                       - Ссылка - ссылка на характеристику.
//    * ИдентификаторНоменклатуры            - Строка - идентификатор номенклатуры.
//    * ИдентификаторХарактеристики          - Строка - идентификатор характеристики.
//    * ОбъектУдален                - Булево - флаг удаления объекта в сервисе.
//
Функция НоменклатураИХарактеристикиПоИдентификаторамСПроверкойВСервисе(Знач Идентификаторы) Экспорт
	
	СоответствиеИдентификаторов = Новый Соответствие;
	
	ИдентификаторыНоменклатуры = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Идентификаторы Цикл
		ИдентификаторыНоменклатуры.Добавить(ЭлементКоллекции.ИдентификаторНоменклатуры);
	КонецЦикла;
	
	ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыНоменклатуры);
	
	НазначенныеИдентификаторы = НазначенныеИдентификаторы(ИдентификаторыНоменклатуры, "Номенклатура");
	
	Если НазначенныеИдентификаторы = Неопределено Тогда
		Результат = НоменклатураИХарактеристикиПоИдентификаторам(Идентификаторы);
	Иначе
			
		НоменклатураДляПоиска = Новый Массив;
		
		Для каждого ВходящийИдентификатор Из Идентификаторы Цикл
			
			Для каждого НазначенныйИдентификатор Из НазначенныеИдентификаторы Цикл
				
				Если Не ИдентификаторНайден(ВходящийИдентификатор.ИдентификаторНоменклатуры, НазначенныйИдентификатор) Тогда
					Продолжить;
				КонецЕсли;
				
				СоответствиеИдентификаторов.Вставить(НазначенныйИдентификатор.Идентификатор, 
					Новый Структура("ИдентификаторНоменклатуры, ОбъектУдален", 
						ВходящийИдентификатор.ИдентификаторНоменклатуры, НазначенныйИдентификатор.ОбъектУдален));
				
				НоменклатураДляПоиска.Добавить(
					Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
						НазначенныйИдентификатор.Идентификатор, ВходящийИдентификатор.ИдентификаторХарактеристики));
				
				Для каждого ЭлементКоллекции Из НазначенныйИдентификатор.НазначенныеИдентификаторы Цикл
					
					СоответствиеИдентификаторов.Вставить(ЭлементКоллекции.Идентификатор, 
						Новый Структура("ИдентификаторНоменклатуры, ОбъектУдален", 
							ВходящийИдентификатор.ИдентификаторНоменклатуры, НазначенныйИдентификатор.ОбъектУдален));
					
					НоменклатураДляПоиска.Добавить(
						Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
							ЭлементКоллекции.Идентификатор, ВходящийИдентификатор.ИдентификаторХарактеристики));
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Результат = НоменклатураИХарактеристикиПоИдентификаторам(НоменклатураДляПоиска);
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		
		Результат.Колонки.Добавить("ОбъектУдален", Новый ОписаниеТипов("Булево"));
		
		Если НазначенныеИдентификаторы <> Неопределено Тогда
			Для каждого ЭлементКоллекции Из Результат Цикл
				
				СтрокаСоответствия = СоответствиеИдентификаторов[ЭлементКоллекции.ИдентификаторНоменклатуры];
				
				ЭлементКоллекции.ИдентификаторНоменклатуры = СтрокаСоответствия.ИдентификаторНоменклатуры;
				ЭлементКоллекции.ОбъектУдален              = СтрокаСоответствия.ОбъектУдален;
				
			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает идентификаторы номенклатуры и характеристик по ссылкам на них.
//  Если по связке номенклатура + характеристика соответствие не найдено, происходит поиск
//  только по номенклатуре. Если соответствия не найдены - исходные ссылки в результате будут отсутствовать.
//
// Параметры:
//  СсылкиНаОбъекты	 - Структура, Массив, ТаблицаЗначений - структура, массив структур 
//                                                          или таблица значений c ссылками на объекты. Ключи, колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки: Номенклатура, Характеристика, ИдентификаторНоменклатуры, ИдентификаторХарактеристики. 
//
Функция ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(Знач СсылкиНаОбъекты) Экспорт

	НоменклатураИХарактеристики = Неопределено;
	
	Если ТипЗнч(СсылкиНаОбъекты) = Тип("ТаблицаЗначений") Тогда	
		НоменклатураИХарактеристики = СсылкиНаОбъекты;
	Иначе
		
		НоменклатураИХарактеристики = Новый ТаблицаЗначений;
		
		НоменклатураИХарактеристики.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
		НоменклатураИХарактеристики.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
			
		Если ТипЗнч(СсылкиНаОбъекты) = Тип("Массив") Тогда
			СсылкиДляПоиска = СсылкиНаОбъекты;
 		Иначе
			СсылкиДляПоиска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНаОбъекты);
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из СсылкиДляПоиска Цикл
			ЗаполнитьЗначенияСвойств(НоменклатураИХарактеристики.Добавить(), ЭлементКоллекции);
		КонецЦикла;
		
	КонецЕсли;
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СсылкиНаОбъекты
	|ИЗ
	|	&НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаОбъекты.Номенклатура КАК Номенклатура,
	|	СсылкиНаОбъекты.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ НоменклатураИХарактеристики
	|ИЗ
	|	СсылкиНаОбъекты КАК СсылкиНаОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО СсылкиНаОбъекты.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И СсылкиНаОбъекты.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ОбъединениеДанных
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураИХарактеристики.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика)
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено)
	|ГДЕ
	|	НоменклатураИХарактеристики.ИдентификаторНоменклатуры ЕСТЬ NULL
	|	И НоменклатураИХарактеристики.Характеристика <> &ПустаяХарактеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика,
	|	НоменклатураИХарактеристики.ИдентификаторНоменклатуры,
	|	НоменклатураИХарактеристики.ИдентификаторХарактеристики
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|ГДЕ
	|	НоменклатураИХарактеристики.ИдентификаторНоменклатуры ЕСТЬ NULL
	|	И НоменклатураИХарактеристики.Характеристика = &ПустаяХарактеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика,
	|	НоменклатураИХарактеристики.ИдентификаторНоменклатуры,
	|	НоменклатураИХарактеристики.ИдентификаторХарактеристики
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|ГДЕ
	|	НЕ НоменклатураИХарактеристики.ИдентификаторНоменклатуры ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеДанных.Номенклатура КАК Номенклатура,
	|	ОбъединениеДанных.Характеристика КАК Характеристика,
	|	ОбъединениеДанных.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ОбъединениеДанных.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	ОбъединениеДанных КАК ОбъединениеДанных
	|ГДЕ
	|	НЕ ОбъединениеДанных.ИдентификаторНоменклатуры ЕСТЬ NULL";	
		
	Запрос.УстановитьПараметр("НоменклатураИХарактеристики", НоменклатураИХарактеристики);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",        ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Сопоставлено",                Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторНоменклатурыИспользуется(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &Идентификатор
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Сопоставлено",  Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НоменклатураСопоставлена(Номенклатура, ИдентификаторНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатуры
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("Номенклатура",              Номенклатура);
	Запрос.УстановитьПараметр("Сопоставлено",              Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получение идентификаторов номенклатуры сервиса с номенклатурой информационной базы.
//
// Параметры:
//  СсылкиНоменклатуры	 - Массив (Ссылка) - ссылки на номенклатуру.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(Знач СсылкиНоменклатуры) Экспорт
	
	Если ТипЗнч(СсылкиНоменклатуры) <> Тип("Массив") Тогда
		СсылкиНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&СсылкиНоменклатуры)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|	И НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик В (&РежимЗагрузкиХарактеристик)";
	
	Запрос.УстановитьПараметр("СсылкиНоменклатуры",         СсылкиНоменклатуры);
	Запрос.УстановитьПараметр("Сопоставлено",               Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("РежимЗагрузкиХарактеристик", РежимыЗагрузкиХарактеристикИсключения());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получение данных номенклатуры сервиса.
//
// Параметры:
//  ПараметрыВызова	 - Структура - параметры вызова.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьДанныеНоменклатурыСервиса(ПараметрыВызова, Знач АдресРезультата) Экспорт
	
	Если ТипЗнч(ПараметрыВызова.Идентификаторы) = Тип("Массив") 
		ИЛИ ТипЗнч(ПараметрыВызова.Идентификаторы) = Тип("Строка") Тогда
		
		// Если переданы идентификаторы номенклатуры - запрос идет только по номенклатуре.
		
		ПолучатьТолькоОсновныеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыВызова, "ПолучатьТолькоОсновныеДанные", Ложь);
		ДанныеНоменклатуры = ДанныеНоменклатурыСервиса(ПараметрыВызова.Идентификаторы, ПолучатьТолькоОсновныеДанные);
		
		Если ДанныеНоменклатуры = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка получения данных из сервиса'");
		КонецЕсли;
				
		ДанныеНоменклатуры.Колонки.Добавить("ДанныеХарактеристик", Новый ОписаниеТипов("ТаблицаЗначений"));
		
	ИначеЕсли ТипЗнч(ПараметрыВызова.Идентификаторы) = Тип("Соответствие") Тогда	
		
		// Если переданы идентификаторы номенклатуры с характеристиками 
		// - запрос идет по номенклатуре и характеристикам.
		
		Идентификаторы = Новый Массив;
		
		Для каждого ЭлементКоллекции Из ПараметрыВызова.Идентификаторы Цикл
			Идентификаторы.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
		
		ДанныеНоменклатуры = ДанныеНоменклатурыСервиса(Идентификаторы);
		
		Если ДанныеНоменклатуры = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка получения данных из сервиса'");
		КонецЕсли;		
		
		ДанныеНоменклатуры.Колонки.Добавить("ДанныеХарактеристик", Новый ОписаниеТипов("ТаблицаЗначений"));
		
		Для каждого ЭлементКоллекции Из ДанныеНоменклатуры Цикл
			
			Если ПараметрыВызова.Идентификаторы[ЭлементКоллекции.Идентификатор] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗапросаХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
			
			ПараметрыЗапросаХарактеристик.ИдентификаторыХарактеристик = ПараметрыВызова.Идентификаторы[ЭлементКоллекции.Идентификатор];
			ПараметрыЗапросаХарактеристик.НаборПолей                  = "Максимальный";
			ПараметрыЗапросаХарактеристик.ТаблицаТипов                = ЭлементКоллекции.Категория.Характеристики.ДополнительныеРеквизиты;
			
			ДанныеХарактеристик = ДанныеХарактеристикСервиса(ПараметрыЗапросаХарактеристик, Ложь);
			
			Если ТипЗнч(ДанныеХарактеристик) = Тип("ТаблицаЗначений") Тогда
				ЭлементКоллекции.ДанныеХарактеристик = ДанныеХарактеристик;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыВызова.АктуализироватьВспомогательныеДанные Тогда
		// необходимо для подстановки категорий, реквизитов и значений		
		АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымНоменклатуры(ДанныеНоменклатуры); 
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеНоменклатуры, АдресРезультата);
	
КонецПроцедуры

// Функция возвращает данные номенклатуры из сервиса по идентификаторам
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив, Строка - идентификаторы запрашиваемой номенклатуры.
//  ОсновныеДанные             - Булево - если Истина, функция вернет минимальный набор данных, 
//                               необходимых для предварительной проверки номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * Артикул                    - Строка - артикул номенклатуры
//    * Бренд                      - Структура - описание бренда. Содержит ключи:
//      ** ДатаИзменения             - Дата - дата последнего изменения бренда в сервисе.
//      ** Идентификатор             - Строка - идентификатор бренда.
//      ** ИдентификаторПроизводителя - Строка - идентификатор производителя.
//      ** Логотипы                  - Массив - массив ссылок на логотипы.
//      ** Наименование              - Строка - наименование бренда.
//      ** НаименованиеПроизводителя - Строка - наименование производителя.
//                                 - Неопределено - если информация о бредне отсутствует.
//    * ВидНоменклатурыПоУмолчанию   - Структура - данные по виду номенклатуры, который будет присвоен номенклатуре при создании. Содержит ключи:
//      ** ВидНоменклатуры                          - Ссылка - ссылка на вид номенклатуры в информационной базе.
//      ** ЗагружатьХарактеристикиВХарактеристики   - Булево - флаг загрузки характеристик в характеристики вида номенклатуры,
//                                                           а не в дополнительные реквизиты.
//      ** ВариантИспользованияХарактеристик        - Строка - см. РаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик.
//    * ДатаИзменения              - Дата - дата последнего изменения номенклатуры в сервисе.
//    * ДополнительныеРеквизиты    - ТаблицаЗначений - описание дополнительных реквизитов. Содержит колонки:
//      ** Значение                - Произвольный - значение реквизита.
//      ** ЗначениеИнформационнойБазы - Ссылка - ссылка на значение в информационной базы для реквизитов с типом "Список" согласно регистру сведений
//                                               СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.
//      ** Идентификатор           - Строка - идентификатор реквизита.
//      ** ИдентификаторЗначения   - Строка - идентификатор значения.
//      ** КодКлассификатора       - Строка - код классификатора.
//      ** Наименование            - Строка - наименование реквизита.
//      ** НаименованиеКлассификатора - Строка - наименование классификатора.
//      ** ОписаниеКлассификатора     - Строка - описание классификатора.
//      ** РеквизитИнформационнойБазы - Ссылка - ссылка на реквизит информационной базы согласно регистру сведений СоответствиеРеквизитовРаботаСНоменклатурой.
//      ** СтроковоеЗначение          - Строка - строковое представление значения реквизита.
//    * ЕдиницаИзмерения           - Структура - данные по единице измерения. Содержит ключи:
//      ** БазовыйОКЕИ             - Строка - код базовой величины.
//      ** ВнутреннееНаименование  - Строка - международное сокращение единицы измерения.
//      ** ЗнаменательКратности    - Число - знаменатель кратности.
//      ** Наименование            - Строка - наименование единицы измерения.
//      ** ОКЕИ                    - Строка - код по ОКЕИ
//      ** ПолноеНаименование      - Строка - полное наименование.
//      ** Тип                     - Строка - тип измеряемой величины.
//      ** ЧислительКратности      - Число - числитель кратности.
//    * Вес                        - Структура - данные о весе номенклатуры. Содержит ключи:
//      ** ЕдиницаИзмерения        - Структура - данные единицы измерения веса (см. ЕдиницаИзмерения).
//      ** ЧислительКратности      - Число - количество в единицах измерения веса.
//      ** ЗнаменательКратности    - Число - количество в единицах измерения номенклатуры.
//    * Объем                      - Структура - данные об объеме номенклатуры. Содержит ключи:
//      ** ЕдиницаИзмерения        - Структура - данные единицы измерения объема (см. ЕдиницаИзмерения).
//      ** ЧислительКратности      - Число - количество в единицах измерения объема.
//      ** ЗнаменательКратности    - Число - количество в единицах измерения номенклатуры.
//    * Длина                      - Структура - данные об длине номенклатуры. Содержит ключи:
//      ** ЕдиницаИзмерения        - Структура - данные единицы измерения длины (см. ЕдиницаИзмерения).
//      ** ЧислительКратности      - Число - количество в единицах измерения длины.
//      ** ЗнаменательКратности    - Число - количество в единицах измерения номенклатуры.
//    * Площадь                    - Структура - данные о площади номенклатуры. Содержит ключи:
//      ** ЕдиницаИзмерения        - Структура - данные единицы измерения площади (см. ЕдиницаИзмерения).
//      ** ЧислительКратности      - Число - количество в единицах измерения площади.
//      ** ЗнаменательКратности    - Число - количество в единицах измерения номенклатуры.
//    * КоличествоВУпаковке        - Структура - данные о количестве в упаковке. Содержит ключи:
//      ** ЕдиницаИзмерения        - Структура - данные единицы измерения количества (см. ЕдиницаИзмерения).
//      ** Количество              - Число - количество штук в 1 единице (упаковке) товара.
//    * Идентификатор              - Строка - идентификатор номенклатуры в сервисе.
//    * ИдентификаторКатегории     - Строка - идентификатор категории номенклатуры в сервисе.
//    * НаименованиеКатегории      - Строка - наименование категории номенклатуры в сервисе.
//    * Изображения                - ТаблицаЗначений - данные изображений номенклатуры. Содержит колонки:
//      ** ИзображениеURL          - Строка - адрес изображения.
//    * Категория                  - Структура - подробное описание категории номенклатуры. Набор ключей соответствует описанию РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//    * Классификаторы             - ТаблицаЗначений - классификаторы. Содержит колонки:
//      ** Наименование            - Строка - наименование классификатора. Возможные значения: "OKPD2", "TNVED","EGAIS", "OKVED2"
//      ** Идентификатор           - Строка - идентификатор классификатора.
//      ** Описание                - Строка - описание классификатора.
//    * Наименование               - Строка - наименование номенклатуры.
//    * НаименованиеДляПечати      - Строка - наименование номенклатуры для печати.
//    * ОблагаетсяАкцизом          - Булево - флаг акциза.
//    * Описание                   - Строка - описание номенклатуры.
//    * Производитель              - Структура - описание производителя. Содержит ключи:
//      ** GLN                     - Строка - номер GLN
//      ** Адрес                   - Строка - адрес производителя.
//      ** ДатаИзменения           - Дата - дата последнего изменения производителя в сервисе.
//      ** ИНН                     - Строка - ИНН производителя.
//      ** Идентификатор           - Строка - идентификатор производителя.
//      ** КПП                     - Строка - КПП производителя.
//      ** Логотипы                - Массив - массив ссылок на логотипы.
//      ** Наименование            - Строка - наименование производителя.
//      ** Сайт                    - Строка - сайт производителя.
//      ** Телефоны                - Массив - массив строк телефонов.
//      ** Факс                    - Строка - факс производителя.
//      ** ЭлектроннаяПочта        - Массив - массив адресов электронной почты.
//                                 - Неопределено - если информация о производителе отсутствует.
//    * СтавкаНДС                  - Строка - ставка НДС. Возможны значения: "20", "18", "10", "-".
//    * Тип                        - Строка  - тип номенклатуры. Возможны значения: "Товар", "Услуга".
//    * УчастникГИСМ               - Булево - флаг ГИСМ.
//    * УчастникЕГАИС              - Булево - флаг ЕГАИС.
//    * УчетГТД                    - Булево - флаг ГТД.
//    * Характеристики             - ТаблицаЗначений - данные по характеристикам. Содержит колонки:
//      ** ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты и значения характеристики. См. поле ДополнительныеРеквизиты.
//      ** Идентификатор           - Строка - идентификатор характеристики.
//      ** Наименование            - Строка - представление характеристики.
//      ** Штрихкоды               - Массив - (Строка) массив штрихкодов для характеристики.
//    * ШтрихКоды                  - Массив - массив штрихкодов.
//
Функция ДанныеНоменклатурыСервиса(Знач ИдентификаторыНоменклатуры, ПолучатьТолькоОсновныеДанные = Ложь, ИсключатьНеКупленные = Истина) Экспорт
		
	Если ТипЗнч(ИдентификаторыНоменклатуры) = Тип("Строка")Тогда
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыНоменклатуры);
	КонецЕсли;
	
	Если ИдентификаторыНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатуры, Ложь, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеПоНоменклатуре.Колонки.Добавить("Производитель");
	ДанныеПоНоменклатуре.Колонки.Добавить("Бренд");
	ДанныеПоНоменклатуре.Колонки.Добавить("Категория");
	ДанныеПоНоменклатуре.Колонки.Добавить("ВидНоменклатурыПоУмолчанию");
	
	Если ПолучатьТолькоОсновныеДанные Тогда
		ДополнитьСтруктуруДанныхНоменклатурыСервиса(ДанныеПоНоменклатуре);
	Иначе
		
		Если ИсключатьНеКупленные Тогда
			ИсключитьНеКупленнуюНоменклатуру(ИдентификаторыНоменклатуры, ДанныеПоНоменклатуре, Отказ);
		КонецЕсли;
		
		ЗаполнитьДополнительныеДанныеНоменклатурыСервиса(ДанныеПоНоменклатуре, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьЛишниеКолонкиДанныхНоменклатурыСервиса(ДанныеПоНоменклатуре);
	
	РаботаСНоменклатуройПереопределяемый.ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Получение номенклатуры по штрихкодам.
//
// Параметры:
//  Штрихкоды		 - Массив (Строка) - массив штрихкодов.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	НоменклатураПоШтрихкодам = НоменклатураПоШтрихкодам(Штрихкоды, Отказ);
	
	Если Отказ Тогда
		НоменклатураПоШтрихкодам = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(НоменклатураПоШтрихкодам, АдресРезультата);
	
КонецПроцедуры

#Область СозданиеНоменклатуры

// Создание номенклатуры с замером времени.
//
// Параметры:
//  ИдентификаторыНоменклатуры		 - Строка - идентификатор номенклатуры.
//  АдресРезультата					 - Строка - адрес результата.
//  АдресДополнительногоРезультата	 - Строка - адрес дополнительного результата.
//
Процедура ЗагрузитьНоменклатуруИХарактеристики(Знач ПараметрыПроцедуры, Знач АдресРезультата, Знач АдресДополнительногоРезультата) Экспорт
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	КоличествоСозданныхЭлементов = 0;
	
	ЗагрузитьНоменклатуруИХарактеристикиПродолжение(ПараметрыПроцедуры, АдресРезультата, АдресДополнительногоРезультата, КоличествоСозданныхЭлементов);
		
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.СозданиеНоменклатуры", Начало, КоличествоСозданныхЭлементов);
	
КонецПроцедуры

// Заполнение таблицы соответствия объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - идентификаторы категорий.
//  СопоставленныеРеквизиты	 - ДеревоЗначений - дерево сопоставлений.
//  ВидНоменклатуры			 - Ссылка - вид номенклатуры.
// 
Процедура ПолучитьСоответствиеРеквизитовИЗначений(ИдентификаторыКатегорий, СопоставленныеРеквизиты, ВидНоменклатуры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатуры.ЗагружатьХарактеристикиВХарактеристики КАК ЗагружатьХарактеристикиВХарактеристики,
	|	СоответствиеВидовНоменклатуры.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	ЕСТЬNULL(СоответствиеРеквизитов.РеквизитОбъекта, """") КАК РеквизитОбъекта,
	|	ЕСТЬNULL(СоответствиеРеквизитов.ИдентификаторРеквизитаКатегории, """") КАК ИдентификаторРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеРеквизитов.ПредставлениеРеквизитаКатегории, """") КАК ПредставлениеРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеОбъекта,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории, """") КАК ИдентификаторЗначения
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитов
	|		ПО СоответствиеВидовНоменклатуры.ВидНоменклатуры = СоответствиеРеквизитов.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|		ПО (СоответствиеРеквизитов.ОбъектСопоставления = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления)
	|			И (СоответствиеРеквизитов.РеквизитОбъекта = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта)
	|ГДЕ
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории В(&ИдентификаторыКатегорий)
	|	И (&ПоВсемВидамНоменклатуры
	|			ИЛИ СоответствиеВидовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры)
	|ИТОГИ
	|	МАКСИМУМ(ЗагружатьХарактеристикиВХарактеристики),
	|	МАКСИМУМ(ОбновляетсяАвтоматически),
	|	МАКСИМУМ(РеквизитОбъекта)
	|ПО
	|	ИдентификаторКатегории,
	|	ВидНоменклатуры,
	|	ИдентификаторРеквизитаКатегории";
		
	Запрос.УстановитьПараметр("ИдентификаторыКатегорий", ИдентификаторыКатегорий);
	Запрос.УстановитьПараметр("ПоВсемВидамНоменклатуры", ВидНоменклатуры = Неопределено);
	Запрос.УстановитьПараметр("ВидНоменклатуры",         ВидНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	СопоставленныеРеквизиты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Параметры записи соответствия номенклатуры.
// 
// Возвращаемое значение:
//  Структура - параметры записи.
//
Функция ПараметрыЗаписиСоответствияНоменклатуры() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИдентификаторНоменклатурыСервиса",   "");
	Параметры.Вставить("ИдентификаторХарактеристикиСервиса", "");
	Параметры.Вставить("ПредставлениеНоменклатурыСервиса",   "");
	Параметры.Вставить("ПредставлениеХарактеристикиСервиса", "");
	Параметры.Вставить("ОбновляетсяАвтоматически",           Истина);
	Параметры.Вставить("ДатаОбновления",                     Дата(1,1,1));
	Параметры.Вставить("РежимЗагрузкиХарактеристик",         Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ХарактеристикиНеИспользуются);
	Параметры.Вставить("СтатусСопоставления",                Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Параметры.Вставить("КоличествоВариантов",                0);
	Параметры.Вставить("ИдентификаторКатегории",             "");
	Параметры.Вставить("ПредставлениеКатегории",             "");
	
	Возврат Параметры;
	
КонецФункции

// Запись соответствия номенклатуры и характеристик.
//
// Параметры:
//  НоменклатураСсылка							 - ЛюбаяСсылка - ссылка на номенклатуру.
//  ХарактеристикаСсылка						 - ЛюбаяСсылка - ссылка на характеристику.
//  ДанныеЗаполнения							 - Структура - параметры метода. См. РаботаСНоменклатурой.ПараметрыЗаписиСоответствияНоменклатуры.
//  УдалитьЗаписьНоменклатурыБезХарактеристики	 - Булево - флаг определяет необходимость удаления записи по номенклатуре без характеристики.
//
Процедура ЗаписатьСоответствиеНоменклатурыИХарактеристик(
			Знач НоменклатураСсылка, 
			Знач ХарактеристикаСсылка, 
			ДанныеЗаполнения, 
			ИдентификаторыИспользуются = Неопределено) Экспорт
					
	Если ХарактеристикаСсылка = Неопределено Тогда
		ХарактеристикаСсылка = ПустаяСсылкаНаХарактеристику();
	КонецЕсли;
			
	Если ИдентификаторыИспользуются <> Неопределено Тогда
		ПроверитьИспользованиеИдентификаторовПриПривязке(
			НоменклатураСсылка, ХарактеристикаСсылка, ДанныеЗаполнения, ИдентификаторыИспользуются);	
			
		Если ИдентификаторыИспользуются Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	НаборЗаписей.Отбор.Характеристика.Установить(ХарактеристикаСсылка);
			
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Номенклатура   = НоменклатураСсылка;
	НоваяЗапись.Характеристика = ХарактеристикаСсылка;
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеЗаполнения);
	
	НоваяЗапись.ДатаОбновления  =
		?(Не ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОбновления), ТекущаяДатаСеанса(), ДанныеЗаполнения.ДатаОбновления);

	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);		
		
КонецПроцедуры

Процедура ДобавитьДополнительныеРеквизитыКОбновляемым(ОбновляемыеРеквизиты, 
	СтрокаДанных, ЗначенияРеквизитов, ЗначениеПометки = Истина) Экспорт
	
	ВызовИзФормы = (ТипЗнч(ОбновляемыеРеквизиты) = Тип("ДанныеФормыКоллекция"));
	
	// Заполнение сопоставленных реквизитов
	
	Для каждого ТекущийРеквизит Из СтрокаДанных.ДополнительныеРеквизиты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОбъекта = ЗначенияРеквизитов.Найти(ТекущийРеквизит.РеквизитИнформационнойБазы, "Свойство");
		
		Если РаботаСНоменклатуройСлужебный.ЗначенияСовпадают(ЗначениеОбъекта, ТекущийРеквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСсылочноеЗначение = ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения);
		
		НоваяСтрока = ОбновляемыеРеквизиты.Добавить();
		
		НоваяСтрока.РеквизитОбъекта              = ТекущийРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.ПредставлениеРеквизита       = ТекущийРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Пометка                      = Истина;
		НоваяСтрока.ТекущееЗначение              = ?(ЗначениеОбъекта = Неопределено, Неопределено, ЗначениеОбъекта.Значение);
		НоваяСтрока.НовоеЗначение                = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
		НоваяСтрока.ПредставлениеЗначенияСервиса = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
		НоваяСтрока.ЭтоДополнительныйРеквизит    = Истина;
		НоваяСтрока.ИдентификаторРеквизита       = ТекущийРеквизит.Идентификатор;
		НоваяСтрока.ИдентификаторЗначения        = ТекущийРеквизит.ИдентификаторЗначения;
		
		Если ВызовИзФормы И ЭтоСсылочноеЗначение 
			И ТекущийРеквизит.ЗначениеИнформационнойБазы = Неопределено Тогда
			НоваяСтрока.ТолькоПросмотр = Истина;
			НоваяСтрока.Пометка        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение несопоставленных реквизитов
	
	Для каждого ТекущийРеквизит Из СтрокаДанных.ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбновляемыеРеквизиты.Добавить();
		
		НоваяСтрока.РеквизитОбъекта              = ТекущийРеквизит.Наименование;
		НоваяСтрока.ПредставлениеРеквизита       = ТекущийРеквизит.Наименование;
		НоваяСтрока.НовоеЗначение                = ?(ЗначениеЗаполнено(ТекущийРеквизит.Значение), ТекущийРеквизит.Значение, ТекущийРеквизит.СтроковоеЗначение);
		НоваяСтрока.ПредставлениеЗначенияСервиса = НоваяСтрока.НовоеЗначение;
		НоваяСтрока.ЭтоДополнительныйРеквизит    = Истина;
		НоваяСтрока.ИдентификаторРеквизита       = ТекущийРеквизит.Идентификатор;
		НоваяСтрока.ИдентификаторЗначения        = ТекущийРеквизит.ИдентификаторЗначения;
		
		Если ВызовИзФормы Тогда
			НоваяСтрока.Пометка        = ЗначениеПометки;
			НоваяСтрока.НеСопоставлен  = Не ЗначениеПометки;
			НоваяСтрока.ТолькоПросмотр = Не ЗначениеПометки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРекламойИсточников

// Кэширование изображения баннеров для отображения на формах.
//
// Параметры:
//  ХранилищеКэшей	 - Соответствие - хранилище кэшей.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ЗакэшироватьИзображенияБаннеров(Знач ХранилищеКэшей, Знач АдресРезультата) Экспорт 
	
	ИдентификаторыРекламныхЗаписей = Новый Массив;
	Для Каждого ЗаписьХранилищаКэшей Из ХранилищеКэшей Цикл
		ИдентификаторыРекламныхЗаписей.Добавить(ЗаписьХранилищаКэшей.Ключ);
	КонецЦикла;
		
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаРекламныеЗаписи();
	ПараметрыПоиска.Идентификаторы = ИдентификаторыРекламныхЗаписей;
	
	Отказ = Ложь;
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаРекламныеЗаписи(ПараметрыПоиска);
	РекламныеЗаписи = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого РекламнаяЗапись Из РекламныеЗаписи Цикл 
		
		ЗаписьКэша = ХранилищеКэшей.Получить(РекламнаяЗапись.Идентификатор);
		Если Не ЗаписьКэша = Неопределено Тогда 
			ЗаписьКэша.АдресИзображения        = РекламнаяЗапись.БаннерURL;
			ЗаписьКэша.СсылкаПереходаПоБаннеру = РекламнаяЗапись.Сайт;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗаписьХранилищаКэшей Из ХранилищеКэшей Цикл
		ПоместитьВоВременноеХранилище(
			РаботаСНоменклатуройСлужебный.ДвоичныеДанныеПоАдресуURL(ЗаписьХранилищаКэшей.Значение.АдресИзображения), ЗаписьХранилищаКэшей.Значение.ПутьКДаннымБаннера); 
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ХранилищеКэшей, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанных

// Получение измененных объектов по дате последнего обновления.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - таблица дат с идентификаторами.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - измененные объекты.
//
Функция ПолучитьИзмененияИзСервисаПоНоменклатуре(ДанныеДляОтправки) Экспорт
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Отказ = Ложь;
	
	ОтправитьДанныеПорционно(Результат, ДанныеДляОтправки, "Номенклатура", Отказ);
	
	Возврат Результат;	
	
КонецФункции

// Получение измененных объектов по дате последнего обновления.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - таблица дат с идентификаторами.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - измененные объекты.
//
Функция ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДанныеДляОтправки) Экспорт
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Отказ = Ложь;
	
	ОтправитьДанныеПорционно(Результат, ДанныеДляОтправки, "Категории", Отказ);
	
	Возврат Результат;	
			
КонецФункции

Процедура ПолучитьОбновленияВидовНоменклатуры(ОбновляемыеОбъекты, АдресРезультата) Экспорт
	
	РезультатАнализаВидовНоменклатуры = Новый ТаблицаЗначений;	
	ДатыОбновленияВидовНоменклатуры   = Новый ТаблицаЗначений;
	ИдентификаторыКатегорий           = Новый Массив;
	
	РаботаСНоменклатуройСлужебный.ПолучитьДатыОбновленияВидовНоменклатуры(ДатыОбновленияВидовНоменклатуры, Истина);
	
	Если ДатыОбновленияВидовНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновляемыеОбъекты = Неопределено Тогда
		
		ДанныеОбновленияПоВидамНоменклатуры = ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДатыОбновленияВидовНоменклатуры);
		
		Если ДанныеОбновленияПоВидамНоменклатуры.Количество() > 0  Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, 
				ДанныеОбновленияПоВидамНоменклатуры.ВыгрузитьКолонку("Идентификатор"), Истина);	
		КонецЕсли;
		
	Иначе 
		
		ИдентификаторКатегории = ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыеОбъекты));
		
		Если ИдентификаторКатегории.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 	
		
		ИдентификаторыКатегорий = ИдентификаторКатегории.ВыгрузитьКолонку("ИдентификаторКатегории");
	КонецЕсли; 
		
	РаботаСНоменклатуройСлужебный.РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, РезультатАнализаВидовНоменклатуры, ОбновляемыеОбъекты);
	
	ПоместитьВоВременноеХранилище(РезультатАнализаВидовНоменклатуры, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьОбновленияНоменклатуры(ОбновляемыеОбъекты, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(РезультатОбновленияНоменклатуры(ОбновляемыеОбъекты), АдресРезультата);
		
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИзСервиса

#Область ДанныеПоКатегориям

// Получение списка дополнительных реквизитов категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьДополнительныеРеквизитыКатегорий(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаРеквизитов = ДополнительныеРеквизиты(Неопределено, ИдентификаторКатегории, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаРеквизитов, АдресРезультата);
	
КонецПроцедуры

Функция ДанныеЗначенийДополнительногоРеквизитаКатегории(Идентификаторы, Отказ = Ложь) Экспорт
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий();
	
	Если ТипЗнч(Идентификаторы) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.ТаблицаПоиска.Добавить(), Идентификаторы);
	ИначеЕсли ТипЗнч(Идентификаторы) = Тип("Массив") Тогда
		Для Каждого ПараметрыПоиска Из Идентификаторы Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.ТаблицаПоиска.Добавить(), ПараметрыПоиска);
		КонецЦикла;
	КонецЕсли;
			
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса);
	
	Возврат РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецФункции

// Получение списка значений дополнительного реквизита категории.
//
// Параметры:
//  Идентификаторы  - Структура, Массив - параметры поиска.
//  АдресРезультата - Строка           - адрес результата.
//
Процедура ПолучитьЗначенияДополнительногоРеквизитаКатегории(Знач Идентификаторы, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаЗначений = ДанныеЗначенийДополнительногоРеквизитаКатегории(Идентификаторы, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаЗначений, АдресРезультата);
	
КонецПроцедуры

// Получение списка производителей категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьПроизводителейКатегории(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	Производители    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Производители, АдресРезультата);
	
КонецПроцедуры

// Получение пути к категории.
//
// Параметры:
//  ИдентификаторКатегории   - Строка - идентификатор категории.
//  АдресРезультата          - Строка - адрес результата.
//
Процедура ПолучитьКатегорииНаПутиКЭлементу(Знач ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;

	Если ТипЗнч(ПараметрыМетода.Идентификаторы) <> Тип("Массив") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода.Идентификаторы);
	Иначе
		ИдентификаторыКатегорий = ПараметрыМетода.Идентификаторы;
	КонецЕсли;
		
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ИдентификаторыКатегорий);
	ИдентификаторыКатегорийУзлов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДляЗапросаКатегорий = Новый Массив;
	СоответствиеУзловИПутей = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ИдентификаторыКатегорийУзлов Цикл
		
		Если ЭлементКоллекции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыПути = ЭлементКоллекции.ВыгрузитьКолонку("Идентификатор");
		
		СоответствиеУзловИПутей.Вставить(ИдентификаторыПути[0], ИдентификаторыПути);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыДляЗапросаКатегорий, ИдентификаторыПути);
		
	КонецЦикла;
	
	ИдентификаторыДляЗапросаКатегорий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыДляЗапросаКатегорий);
	
	Если ИдентификаторыДляЗапросаКатегорий.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПараметрыПоиска.ИдентификаторыРодителей = ИдентификаторыДляЗапросаКатегорий;
	ПараметрыПоиска.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыПоиска);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторыКатегорийУзлов", СоответствиеУзловИПутей);
	Результат.Вставить("ТаблицаКатегорий", ТаблицаКатегорий);
	
	Если ПараметрыМетода.ВключитьНоменклатуру Тогда
		ДополнительныеПараметры = Новый Структура;
		
		ДополнительныеПараметры.Вставить("ИдентификаторКатегории",        ИдентификаторыКатегорий[0]);
		ДополнительныеПараметры.Вставить("РежимОтображенияХарактеристик", ПараметрыМетода.РежимОтображенияХарактеристик);
		
		Если ПараметрыМетода.Свойство("ПараметрыПоиска") Тогда
			
			ПараметрыПоискаНоменклатуры = ПараметрыМетода.ПараметрыПоиска;
			ДополнительныеПараметры.Вставить("НомерСтраницыДанных", ПараметрыПоискаНоменклатуры.НомерСтраницыДанных);
			ДополнительныеПараметры.Вставить("СтрокаПоиска",        ПараметрыПоискаНоменклатуры.СтрокаПоиска);
			
			Если ПараметрыПоискаНоменклатуры.Свойство("ДополнительныеРеквизиты") Тогда
				ДополнительныеПараметры.Вставить("ДополнительныеРеквизиты", ПараметрыПоискаНоменклатуры.ДополнительныеРеквизиты);
			КонецЕсли;
			
			Если ПараметрыПоискаНоменклатуры.Свойство("РеквизитыХарактеристик") Тогда
				ДополнительныеПараметры.Вставить("РеквизитыХарактеристик", ПараметрыПоискаНоменклатуры.РеквизитыХарактеристик);
			КонецЕсли;
			
			Если ПараметрыПоискаНоменклатуры.Свойство("ИдентификаторыПроизводителей") Тогда
				ДополнительныеПараметры.Вставить("ИдентификаторыПроизводителей", ПараметрыПоискаНоменклатуры.ИдентификаторыПроизводителей);
			КонецЕсли;

		КонецЕсли;
		
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(ДополнительныеПараметры, Отказ);
		
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
		
	ИначеЕсли ПараметрыМетода.Свойство("ПолучитьДополнительныеРеквизиты") 
		И ПараметрыМетода.ПолучитьДополнительныеРеквизиты Тогда
		
		ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(ИдентификаторыКатегорий[0]);
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение корневых категорий.
//
// Параметры:
//  Параметры		 - Структура - параметры процедуры.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьКорневыеКатегории(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ТолькоКорневые = Истина;
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если НЕ Отказ Тогда
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Категории", ТаблицаКатегорий);
	
	Если Параметры.ВключитьНоменклатуру Тогда
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(Новый Структура, Отказ);
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка фильтров категорий.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьФильтрыКатегории(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(ИдентификаторКатегории, Отказ);
	
	ПоместитьВоВременноеХранилище(ДополнительныеРеквизиты, АдресРезультата);
	
КонецПроцедуры

// Получение пути к категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями(Знач ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	Если ТипЗнч(ПараметрыМетода.Идентификаторы) <> Тип("Массив") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода.Идентификаторы);
	Иначе
		ИдентификаторыКатегорий = ПараметрыМетода.Идентификаторы;
	КонецЕсли;
	
	Результат = ВеткаКатегорийНоменклатуры(ИдентификаторыКатегорий);
	
	Если ПараметрыМетода.ВключитьНоменклатуру Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ДополнительныеПараметры.Вставить("ИдентификаторКатегории",        ИдентификаторыКатегорий[0]);
		ДополнительныеПараметры.Вставить("РежимОтображенияХарактеристик", ПараметрыМетода.РежимОтображенияХарактеристик);
		
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(ДополнительныеПараметры);
		
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
		
		ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(ИдентификаторыКатегорий[0]);
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Поиск категорий по строке поиска.
//
// Параметры:
//  ПоисковаяСтрока	 - Строка - поисковая строка.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура НайтиКатегорииПоСтрокеПоиска(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыПоискаКатегорийПоСтроке();
	
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ПараметрыПоиска);
	
	Отказ = Ложь;
	
	ТаблицаКатегорий = КатегорииПоСтрокеПоиска(ПараметрыМетода, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыМетода.НаборПолей = "Максимальный" И НЕ Отказ Тогда
		
		ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
		
	КонецЕсли;
	
	Если ПараметрыМетода.РезультатВМассиве Тогда
		Результат = Новый Структура("Категории", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаКатегорий.Скопировать(, "Идентификатор, Наименование")));
	Иначе
		Результат = Новый Структура("Категории", ТаблицаКатегорий);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#Область ПолучитьСписокДочернихКатегорий

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПредставлениеДочернихКатегорий(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если Параметры.НоменклатураИОтборы = Неопределено Тогда
		Параметры.Вставить("НоменклатураИОтборы", Новый Структура);
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПараметрыПоиска") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПараметрыПоиска");
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПолучитьОтборы") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПолучитьОтборы", Ложь);
	КонецЕсли;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Идентификатор);
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Результат = Новый Структура;
	Результат.Вставить("Категории", ТаблицаКатегорий);
	
	Если Параметры.НоменклатураИОтборы.ПараметрыПоиска <> Неопределено Тогда
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(Параметры.НоменклатураИОтборы.ПараметрыПоиска, Отказ);
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
	КонецЕсли;
	
	Если Параметры.НоменклатураИОтборы.ПолучитьОтборы Тогда
		ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(Параметры.Идентификатор, Отказ);
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьКраткоеОписаниеДочернихКатегорий(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если Параметры.НоменклатураИОтборы = Неопределено Тогда
		Параметры.Вставить("НоменклатураИОтборы", Новый Структура);
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПараметрыПоиска") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПараметрыПоиска");
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПолучитьОтборы") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПолучитьОтборы", Ложь);
	КонецЕсли;
	
	#Область ЗапросКатегорий
	
	ИдентификаторНачальнойКатегории = Неопределено;
	
	Если Параметры.НоменклатураИОтборы.Свойство("ИдентификаторНоменклатуры") Тогда
		
		ДанныеВыбраннойНоменклатуры = ДанныеНоменклатурыСервиса(Параметры.НоменклатураИОтборы.ИдентификаторНоменклатуры);
		
		Если ЗначениеЗаполнено(ДанныеВыбраннойНоменклатуры)
			И ДанныеВыбраннойНоменклатуры.Количество() Тогда
			ДанныеВыбраннойНоменклатуры[0].Категория.Свойство("Идентификатор", ИдентификаторНачальнойКатегории);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторНачальнойКатегории) Тогда
		
		ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
		
		Если ЗначениеЗаполнено(Параметры.Идентификатор) Тогда
			ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Идентификатор);	
		Иначе
			ПоисковыйЗапрос.ТолькоКорневые = Истина;
		КонецЕсли;
		
		ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
		
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Результат = Новый Структура;
		Результат.Вставить("Категории", ТаблицаКатегорий);
		
	Иначе
		
		Результат = ВеткаКатегорийНоменклатуры(ИдентификаторНачальнойКатегории);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Результат.Вставить("ИдентификаторНачальнойКатегории", ИдентификаторНачальнойКатегории);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗапросНоменклатуры
	
	Если Параметры.НоменклатураИОтборы.ПараметрыПоиска <> Неопределено Тогда
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(Параметры.НоменклатураИОтборы.ПараметрыПоиска, Отказ);
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗапросДополнительныхРеквизитов
	
	Если Параметры.НоменклатураИОтборы.ПолучитьОтборы Тогда
		ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(Параметры.Идентификатор, Отказ);
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПолноеОписаниеДочернихКатегорий(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если Параметры.НоменклатураИОтборы = Неопределено Тогда
		Параметры.Вставить("НоменклатураИОтборы", Новый Структура);
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПараметрыПоиска") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПараметрыПоиска");
	КонецЕсли;
	
	Если Не Параметры.НоменклатураИОтборы.Свойство("ПолучитьОтборы") Тогда
		Параметры.НоменклатураИОтборы.Вставить("ПолучитьОтборы", Ложь);
	КонецЕсли;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Идентификатор);
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если НЕ Отказ Тогда
		ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Категории", ТаблицаКатегорий);
	
	Если Параметры.НоменклатураИОтборы.ПараметрыПоиска <> Неопределено Тогда
		ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(Параметры.НоменклатураИОтборы.ПараметрыПоиска, Отказ);
		Результат.Вставить("ПереченьНоменклатуры", ТаблицаНоменклатуры);
	КонецЕсли;
	
	Если Параметры.НоменклатураИОтборы.ПолучитьОтборы Тогда
		ДополнительныеРеквизиты = ПолучитьФильтрыКатегорииВСервисе(Параметры.Идентификатор, Отказ);
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКатегориюПоИдентификатору

// Получение представления категории по идентификатору.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПредставлениеКатегорииПоИдентификатору(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получение описания категории по идентификатору
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьОписаниеКатегорииПоИдентификатору(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получение полного описания категории по идентификатору
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - данные по категории.
//
Процедура ПолучитьПолноеОписаниеКатегорииПоИдентификатору(Знач ИдентификаторыКатегорий, Знач АдресРезультата = Неопределено) Экспорт
	
	Если ТипЗнч(ИдентификаторыКатегорий) <> Тип("Массив") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	Отказ = Ложь;
	
	ТаблицаКатегорий = ПолноеОписаниеКатегории(ИдентификаторыКатегорий);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДанныеПоНоменклатуре

// Получение списка номенклатуры.
//
// Параметры:
//  ПараметрыПоиска	 - Структура - параметры поиска.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПереченьНоменклатуры(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаНоменклатуры = СписокНоменклатурыИХарактеристик(ПараметрыПоиска, Отказ);
	
	ПоместитьВоВременноеХранилище(Новый Структура("ПереченьНоменклатуры", ТаблицаНоменклатуры), АдресРезультата);
	
КонецПроцедуры

// Получение данных номенклатуры по штрихкоду.
//
// Параметры:
//  ШтрихКод							 - Строка - штрих код.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - заполнить ссылки на соответствующую номенклатуру базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данны номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуреПоШтрихкоду(Знач ШтрихКод, ЗаполнитьСоответствиеНоменклатуры = Ложь) Экспорт
	
	МассивШтрихКодов = Новый Массив;
	
	Если ТипЗнч(ШтрихКод) = Тип("Строка") Тогда
		МассивШтрихКодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ШтрихКод);
	Иначе
		МассивШтрихКодов = ШтрихКод;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	
	ПараметрыЗапроса.ШтрихКоды = МассивШтрихКодов;
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	
	Отказ = Ложь;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Подсчет количества номенклатуры по строке поиска.
//
// Параметры:
//  СтрокаПоиска	 - Строка - строка поиска.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура КоличествоНоменклатурыПоСтрокеПоиска(Знач СтрокаПоиска, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	ПараметрыЗапроса.КоличествоЗаписей = 500;
	ПараметрыЗапроса.СтрокаПоиска = СтрокаПоиска;

	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	ТаблицаНоменклатуры = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоНоменклатуры = ТаблицаНоменклатуры.Количество();
	
	ПоместитьВоВременноеХранилище(КоличествоНоменклатуры, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Обновление номенклатуры.
//
Процедура ОбновлениеНоменклатуры() Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыРаботаСНоменклатурой);
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	ВесЗамера = 1;
	
	ВыполнитьОбновлениеНоменклатуры(ВесЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.ВыполнитьОбновлениеНоменклатуры", Начало, ВесЗамера);
	
КонецПроцедуры

// Выгрузка номенклатуры.
//
Процедура ВыгрузитьНоменклатуру() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой);
	
	НастройкиВыгрузки = РаботаСНоменклатуройСлужебный.НастройкиВыгрузкиНоменклатуры();
	
	Для каждого ОписаниеНастройкиВыгрузки Из НастройкиВыгрузки Цикл
		НастройкаВыгрузки = ОписаниеНастройкиВыгрузки.Значение;
		Если ТипЗнч(НастройкаВыгрузки) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		РаботаСНоменклатуройСлужебный.ПроверитьГотовностьНоменклатурыКВыгрузке(НастройкаВыгрузки);
		РаботаСНоменклатуройСлужебный.ОбновитьПараметрыНастройкиВыгрузки(ОписаниеНастройкиВыгрузки.Ключ,
			Новый Структура("ИдентификаторЗадания", "РегламентноеЗадание"));
		РаботаСНоменклатуройСлужебный.ВыгрузитьДанныеНоменклатуры(НастройкаВыгрузки);
		Если НастройкаВыгрузки.Свойство("ОповещатьОНовых") И НастройкаВыгрузки.ОповещатьОНовых = Истина Тогда
			РаботаСНоменклатуройСлужебный.НайтиПроверитьНовуюНоменклатуру(НастройкаВыгрузки);
		КонецЕсли;
		Если НастройкаВыгрузки.Свойство("ВыгружатьВНациональныйКаталог") И НастройкаВыгрузки.ВыгружатьВНациональныйКаталог = Истина Тогда
			РаботаСНоменклатуройСлужебный.ОбновитьСостоянияВыгрузкиНоменклатуры(НастройкаВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область БиллингСервиса

// Проверка состояния сервиса.
//
// Параметры:
//  ПараметрыПроцедуры	 - Структура - параметры процедуры.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура ПроверитьСостояниеСервиса(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	
	СостоянияСервиса = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеСостоянияСервиса();
	Отказ = Ложь;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СостоянияСервиса.ПодключенаИнтернетПоддержка = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		СостоянияСервиса.ПодключенаИнтернетПоддержка = ТипЗнч(ПараметрыАутентификации) = Тип("Структура");
	КонецЕсли;
	
	Если СостоянияСервиса.ПодключенаИнтернетПоддержка Тогда 
		
		СостоянияСервиса.ЕстьДоступныеОпции = ЕстьДоступныеОпции(Отказ);
		
		Если СостоянияСервиса.ЕстьДоступныеОпции = Ложь Тогда 
			
			СостоянияСервиса.ДоступенСтартовыйПакет = ДоступноПодключениеТестовогоПериода();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СостоянияСервиса.ОшибкаОпределенияСостояния = Отказ;
	
	ПоместитьВоВременноеХранилище(СостоянияСервиса, АдресРезультата);
	
КонецПроцедуры 

// Проверка доступности тестового периода.
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ДоступноПодключениеТестовогоПериода() Экспорт 
	
	ИдентификаторСервиса = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторСервиса();
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(ИдентификаторСервиса);
	РезультатПроверки = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
	СтатусПодключения = РезультатПроверки.СервисыСопровождения.Получить(ИдентификаторСервиса);
	Возврат СтатусПодключения = "Доступно";
	
КонецФункции

// Покупка карточек номенклатуры.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - идентификаторы номенклатуры.
//  Отказ						 - Булево - признак отказа.
// 
// Возвращаемое значение:
//  Структура - информация об ошибки.
//    Ключи:
//    * ЕстьОшибки - Булево - признак того, что есть ошибки при покупке.
//    * ОписаниеОшибки - Структура - описание ошибки.
//
Функция ПокупкаКарточекНоменклатуры(Знач ИдентификаторыНоменклатуры, Отказ) Экспорт
	
	ОписаниеОшибки = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеОшибкиПокупкиНоменклатуры();

	Результат = Новый Структура();
	Результат.Вставить("ЕстьОшибки", Истина);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	ЗагружаемоеКоличество = ИдентификаторыНоменклатуры.Количество();
	ТекущийБаланс         = ТекущийБаланс(Отказ);
	
	Результат.ОписаниеОшибки.ДоступныйОстаток     = ТекущийБаланс;
	Результат.ОписаниеОшибки.ПокупаемоеКоличество = ЗагружаемоеКоличество;
	
	Если Не Отказ Тогда
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПокупкаНоменклатуры(ИдентификаторыНоменклатуры);
		Куплено = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ); 
		Если Не Отказ И Куплено = Истина Тогда
			Результат.ЕстьОшибки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КупитьКарточкиНоменклатуры(Знач ИдентификаторыНоменклатуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ);
	
	ПоместитьВоВременноеХранилище(РезультатПокупки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеОбъектов

#Область ПредставлениеКарточкиКатегории

// Формирование представления категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура СформироватьПредставлениеКарточкиКатегории(Знач ИдентификаторыКатегорий, Знач АдресРезультата) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ИдентификаторыКатегорий Цикл
		
		КодСостояния = 0;
		
		Отказ = Ложь;
		
		ДанныеПоКатегории = ПолноеОписаниеКатегории(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементКоллекции), Отказ, КодСостояния);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		РасшифровкаСостояния = РаботаСНоменклатуройСлужебный.РасшифровкаКодаСостояния(КодСостояния);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Если РасшифровкаСостояния.ОбъектУдален Тогда
			ТабличныйДокумент = ПредставлениеУдаленногоОбъекта();
		ИначеЕсли РасшифровкаСостояния.ВыполненоУспешно Тогда	
			ЗаполнитьКарточкуВидаНоменклатуры(ТабличныйДокумент, ДанныеПоКатегории[0]);
		КонецЕсли;
		
		Данные = Новый Структура("Идентификатор, ПредставлениеКатегории");
		
		Данные.Идентификатор = ЭлементКоллекции;
		
		Данные.ПредставлениеКатегории = ТабличныйДокумент;
		
		Результат.Добавить(Данные);
		
	КонецЦикла;
		
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Заполнение карточки категории.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - табличный документ.
//  ДанныеПоКатегории	 - СтрокаТаблицыЗначений - данные категории из сервиса.
//
Процедура ЗаполнитьКарточкуВидаНоменклатуры(ТабличныйДокумент, ДанныеПоКатегории, ОбновитьПредставлениеВидовНоменклатуры = Ложь) Экспорт
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_КарточкаКатегории");
	
	ОбластьШапка          = Макет.ПолучитьОбласть("Шапка");
	ОбластьОписание       = Макет.ПолучитьОбласть("Описание");
	
	////////////////////////////////////////////////////////////////////////////////
		
	ОбластьШапка.Параметры.Заполнить(ДанныеПоКатегории);
	
	Если ОбновитьПредставлениеВидовНоменклатуры Тогда
		ДанныеПоКатегории.ВидыНоменклатуры = ВидыНоменклатурыПоИдентификаторуКатегории(ДанныеПоКатегории.Идентификатор);
	КонецЕсли;
	
	Если ДанныеПоКатегории.ВидыНоменклатуры.Количество() = 0 Тогда
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = НСтр("ru = '<Не загружена>'");
	ИначеЕсли ДанныеПоКатегории.ВидыНоменклатуры.Количество() = 1 Тогда 
		ОбластьШапка.Параметры.ВидыНоменклатуры = ДанныеПоКатегории.ВидыНоменклатуры[0];
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = ОбластьШапка.Параметры.ВидыНоменклатуры;
	Иначе
		ОбластьШапка.Параметры.ВидыНоменклатуры = ДанныеПоКатегории.ВидыНоменклатуры;
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = СтрШаблон(НСтр("ru = 'Список (%1)'"), ДанныеПоКатегории.ВидыНоменклатуры.Количество());
	КонецЕсли;
	
	ОбластьШапка.Параметры.СтавкаНДС = ПредставлениеСтавкиНДС(ДанныеПоКатегории.СтавкаНДС);
	
	ТабличныйДокумент.Вывести(ОбластьШапка, 0);
	
	Если ЗначениеЗаполнено(ДанныеПоКатегории.Описание) Тогда
		ОбластьОписание.Параметры.Описание = ДанныеПоКатегории.Описание;
		ТабличныйДокумент.Вывести(ОбластьОписание, 0);
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыИХарактеристикиКатегории(ДанныеПоКатегории, ТабличныйДокумент, Макет);
		
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеКарточкиНоменклатуры

// Формирование представления номенклатуры.
//
// Параметры:
//  ПараметрыПроцедуры	 - Структура - параметры создания.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура СформироватьПредставленияКарточекНоменклатуры(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	
	ХранилищеКэшей    = ПараметрыПроцедуры.ХранилищеКэшей;
	Идентификаторы    = ПараметрыПроцедуры.ИдентификаторыНоменклатуры;
	ЭтоРежимПросмотра = ПараметрыПроцедуры.ЭтоРежимПросмотра;
	
	ТекущиеИдентификаторы = Идентификаторы[0];
	
	ИдентификаторНоменклатурыВМассиве = 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеИдентификаторы.ИдентификаторНоменклатуры);
		
	ИдентификаторХарактеристики = ТекущиеИдентификаторы.ИдентификаторХарактеристики;
		
	Отказ = Ложь;
	
	КодСостояния = 0;
		
	ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(ИдентификаторНоменклатурыВМассиве, Ложь, Отказ, КодСостояния);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	НоменклатураПоИдентификаторам = НоменклатураИХарактеристикиПоИдентификаторам(ТекущиеИдентификаторы);
		
	ДанныеПоНоменклатуре.Колонки.Добавить("НоменклатураПрограммы", Новый ОписаниеТипов("Массив"));
	
	Если ЗначениеЗаполнено(НоменклатураПоИдентификаторам) Тогда
		ДанныеПоНоменклатуре[0].НоменклатураПрограммы.Добавить(НоменклатураПоИдентификаторам[0].Номенклатура);
	КонецЕсли;
			
	ПредставлениеНоменклатуры = Новый Структура;
	
	ПредставлениеНоменклатуры.Вставить("ИдентификаторНоменклатуры",    "");
	ПредставлениеНоменклатуры.Вставить("ИдентификаторХарактеристики",  "");
	ПредставлениеНоменклатуры.Вставить("ИдентификаторРекламнойЗаписи", "");
	ПредставлениеНоменклатуры.Вставить("ПутьКТабличномуДокументу",     "");
	ПредставлениеНоменклатуры.Вставить("ПутьКДаннымБаннера",           "");
	ПредставлениеНоменклатуры.Вставить("СсылкаПереходаПоБаннеру",      "");
	ПредставлениеНоменклатуры.Вставить("ПревышенЛимит",                Ложь);
	ПредставлениеНоменклатуры.Вставить("ТекущийБаланс",                0);
	ПредставлениеНоменклатуры.Вставить("КарточкаКуплена",              Ложь);         // признак покупки карточки
	ПредставлениеНоменклатуры.Вставить("ОписаниеОшибки",               Неопределено); // описание ошибки покупки
	ПредставлениеНоменклатуры.Вставить("ЕстьОшибки",                   Ложь);         // ошибка покупки карточки
	ПредставлениеНоменклатуры.Вставить("ЕстьОшибкиСервиса",            Ложь);         // объект перемещен, удален и т.д.
	ПредставлениеНоменклатуры.Вставить("ДанныеИзображений",            Новый Массив);
	
	ПредставлениеНоменклатуры.ИдентификаторНоменклатуры    = ТекущиеИдентификаторы.ИдентификаторНоменклатуры;
	ПредставлениеНоменклатуры.ИдентификаторХарактеристики  = ТекущиеИдентификаторы.ИдентификаторХарактеристики;
		
	РасшифровкаСостояния = РаботаСНоменклатуройСлужебный.РасшифровкаКодаСостояния(КодСостояния);
	
	Если Не РасшифровкаСостояния.ВыполненоУспешно Тогда
		
		// Получен код ошибки от сервиса.
		
		СформироватьТехническоеПредставлениеНоменклатуры(ТекущиеИдентификаторы, 
			ДанныеПоНоменклатуре, ХранилищеКэшей, ПредставлениеНоменклатуры, РасшифровкаСостояния);
			
		ПредставлениеНоменклатуры.ЕстьОшибкиСервиса = Истина;	
			
	Иначе
		
		// Получение данных номенклатуры прошло успешно.
		
		Если Не ЗначениеЗаполнено(ДанныеПоНоменклатуре) Тогда
			ВызватьИсключение НСтр("ru = 'Отсутствуют данные для отображения'");
		КонецЕсли;
				
		ЭлементКоллекции  = ДанныеПоНоменклатуре[0];
		
		ПредставлениеНоменклатуры.КарточкаКуплена = ЭлементКоллекции.ЗаполненныеРеквизиты.Количество() = 0;
		
		Если ЭлементКоллекции.ЗаполненныеРеквизиты.Количество() > 0 Тогда // Номенклатура не куплена
			
			РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторНоменклатурыВМассиве, Отказ);
			
			ПредставлениеНоменклатуры.КарточкаКуплена = Не РезультатПокупки.ЕстьОшибки;
			
			Если Отказ Тогда 
				Возврат;
			КонецЕсли;
			
			ПредставлениеНоменклатуры.ТекущийБаланс = РезультатПокупки.ОписаниеОшибки.ДоступныйОстаток;
			
			Если РезультатПокупки.ЕстьОшибки Тогда
				ЗаполнитьЗначенияСвойств(ПредставлениеНоменклатуры, РезультатПокупки);
			Иначе
				
				ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(ИдентификаторНоменклатурыВМассиве, Истина, Отказ);
				
				Если Отказ 
					ИЛИ ДанныеПоНоменклатуре = Неопределено 
					ИЛИ ДанныеПоНоменклатуре.Количество() = 0 Тогда 
					
					Возврат;
				КонецЕсли;
				
				ЭлементКоллекции = ДанныеПоНоменклатуре[0]
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеХарактеристики = Неопределено;
		
		Если ЗначениеЗаполнено(ИдентификаторХарактеристики) Тогда
			
			ПараметрыЗапросаХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
			
			ПараметрыЗапросаХарактеристик.ИдентификаторыХарактеристик.Добавить(ИдентификаторХарактеристики);
			ПараметрыЗапросаХарактеристик.НаборПолей = "Максимальный";
			
			ДанныеХарактеристики = ДанныеХарактеристикСервиса(ПараметрыЗапросаХарактеристик, Ложь);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеХарактеристики) Тогда
			ДанныеХарактеристики = ДанныеХарактеристики[0];
		КонецЕсли;
		
		ПутьКТабличномуДокументу = ХранилищеКэшей.Получить(ТекущиеИдентификаторы.ИдентификаторНоменклатуры + ТекущиеИдентификаторы.ИдентификаторХарактеристики);
		
		СформироватьКарточкуНоменклатуры(
			ЭлементКоллекции, 
			ДанныеХарактеристики, 
			ПутьКТабличномуДокументу, 
			ПредставлениеНоменклатуры.ДанныеИзображений,
			ЭтоРежимПросмотра);
		
		ПредставлениеНоменклатуры.ИдентификаторРекламнойЗаписи = ЭлементКоллекции.ИдентификаторРекламнойЗаписи;
		ПредставлениеНоменклатуры.ПутьКТабличномуДокументу     = ПутьКТабличномуДокументу;

	КонецЕсли;
	
	Если Не ПредставлениеНоменклатуры.ПревышенЛимит 
		И Не ЗначениеЗаполнено(ПредставлениеНоменклатуры.ТекущийБаланс) Тогда
		
		ТекущийБалансКарточек = ТекущийБаланс(Отказ);
		
		Если Отказ Тогда
			ТекущийБалансКарточек = 0;
		КонецЕсли;
		
		ПредставлениеНоменклатуры.ТекущийБаланс = ТекущийБалансКарточек;
		
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ПредставлениеНоменклатуры, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПраваДоступа

// Проверка права чтения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверка права изменения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоИзмененияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверка права изменения настроек подсистемы.
//
Функция ПравоИзмененияНастроек() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

#КонецОбласти

#Область РаботаСХарактеристиками

Функция КоличествоСопоставленныхХарактеристикПоНоменклатуре(НоменклатураСсылка) Экспорт
	
	// Подсчет идет по количеству идентификаторов номенклатуры, поскольку характеристика может быть привязана только к номенклатуре.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = """"
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика <> &ПустаяХарактеристика";
	
	Запрос.УстановитьПараметр("Номенклатура",         НоменклатураСсылка);
	Запрос.УстановитьПараметр("Сопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоХарактеристик;
	Иначе
		Возврат 0;	
	КонецЕсли;
	
КонецФункции

// Загрузка характеристик номенклатуры.
//
// Параметры:
//  ПараметрыСоздания				 - Структура - Ключи: Номенклатура (Ссылка), ИдентификаторыХарактеристик (Массив (Строка))
//  АдресРезультата					 - Строка - адрес результата.
//
Процедура ЗагрузитьХарактеристики(Знач ПараметрыСоздания, Знач АдресРезультата) Экспорт
	
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗагрузкиХарактеристик();
	
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ПараметрыСоздания);
	
	Номенклатура                = ПараметрыМетода.Номенклатура;
	ИдентификаторыХарактеристик = ПараметрыМетода.ИдентификаторыХарактеристик;
	ЗагружатьВсеХарактеристики  = ПараметрыМетода.ЗагружатьВсеХарактеристики;
	ЗаполнитьСозданныеОбъекты   = ПараметрыМетода.ЗаполнитьСозданныеОбъекты;
		
	КоличествоСозданныхОбъектов = 0;
		
	Если ЗаполнитьСозданныеОбъекты Тогда
		СозданныеОбъекты = Новый Массив;
	Иначе
		СозданныеОбъекты = Неопределено	
	КонецЕсли;
		
	ПараметрыЗагрузки = ПараметрыЗагрузкиХарактеристик();
	
	ПараметрыЗагрузки.Номенклатура                = Номенклатура;
	ПараметрыЗагрузки.ИдентификаторыХарактеристик = ИдентификаторыХарактеристик;
	ПараметрыЗагрузки.ЗагружатьВсеХарактеристики  = ЗагружатьВсеХарактеристики;

	ЗагрузитьХарактеристикиПорционно(ПараметрыЗагрузки, КоличествоСозданныхОбъектов, СозданныеОбъекты);	
	
	ПоместитьВоВременноеХранилище(Новый Структура("КоличествоСозданныхОбъектов, СозданныеОбъекты", 
		КоличествоСозданныхОбъектов, 
		СозданныеОбъекты), АдресРезультата);
		
КонецПроцедуры

Процедура ПолучитьДанныеХарактеристикСервиса(Знач ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	ИдентификаторНоменклатуры = ПараметрыМетода.ИдентификаторНоменклатуры;
	ЗаполнитьПризнакЗагрузки  = ПараметрыМетода.ЗаполнитьПризнакЗагрузки;
	
	ДанныеХарактеристик = Новый ТаблицаЗначений;
	Отказ = Ложь;
		
	ДанныеХарактеристик = ДанныеХарактеристикСервиса(ПараметрыМетода, Отказ);
	
	Если ЗаполнитьПризнакЗагрузки 
		И ЗначениеЗаполнено(ДанныеХарактеристик) Тогда
		
		ЗаполнитьПризнакЗагрузкиХарактеристик(ИдентификаторНоменклатуры, ДанныеХарактеристик);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеХарактеристик, АдресРезультата);
		
КонецПроцедуры

// Функция используется для подсчета количества используемых характеристик по идентификатору номенклатуры. 
// Может понадобится для подсчета количества свободных для привязки характеристик.
//
// Параметры:
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры.
//  НоменклатураСсылка			 - Ссылка - ссылка на номенклатуру-исключение.
// 
// Возвращаемое значение:
//  Число - количество характеристик.
//
Функция КоличествоСопоставленныхХарактеристикПоИдентификатору(ИдентификаторНоменклатуры, НоменклатураСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	(&НеУчитыватьНоменклатуру
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура <> &Номенклатура)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатуры
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	Запрос.УстановитьПараметр("НеУчитыватьНоменклатуру",   НоменклатураСсылка = Неопределено);
	Запрос.УстановитьПараметр("Номенклатура",              НоменклатураСсылка);
	Запрос.УстановитьПараметр("Сопоставлено",              Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоХарактеристик;
	Иначе
		Возврат 0;	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФункциональностьПодсистемы

// Возвращает признак учета видов номенклатуры в системе.
// 
// Возвращаемое значение:
//  Булево - Истина если ведется.
//
Функция ВедетсяУчетВидовНоменклатуры() Экспорт
		
	Возврат НастройкиПодсистемы().ИспользоватьВидыНоменклатуры;
	
КонецФункции

Функция РазрешеноПакетноеСозданиеНоменклатуры() Экспорт
	
	Возврат НастройкиПодсистемы().ИспользоватьПакетноеСозданиеНоменклатуры;
	
КонецФункции

Функция ВедетсяУчетПоХарактеристикам() Экспорт
	
	Возврат НастройкиПодсистемы().ИспользоватьХарактеристики;
	
КонецФункции

Функция ИспользуютсяДополнительныеРеквизиты() Экспорт
	
	Возврат НастройкиПодсистемы().ИспользоватьДополнительныеРеквизиты;
	
КонецФункции

Функция ВыгрузкаНоменклатурыИспользуется(Знач НастройкиПодсистемы = Неопределено) Экспорт
	
	НастройкиВыгрузки = Новый Структура("ИспользоватьВыгрузкуВКаталог1С, ИспользоватьВыгрузкуВНациональныйКаталог");
	Если НастройкиПодсистемы = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВыгрузки, НастройкиПодсистемы());
	Иначе 
		ЗаполнитьЗначенияСвойств(НастройкиВыгрузки, НастройкиПодсистемы);
	КонецЕсли;
	
	ВыгрузкаНоменклатурыИспользуется = НастройкиВыгрузки.ИспользоватьВыгрузкуВКаталог1С = Истина
		Или НастройкиВыгрузки.ИспользоватьВыгрузкуВНациональныйКаталог = Истина;
	
	Возврат ВыгрузкаНоменклатурыИспользуется И СопоставлениеНоменклатурыСРубрикаторомВозможно();

КонецФункции

Функция ИспользоватьПодборНоменклатурыСХарактеристиками(Знач НастройкиПодсистемы = Неопределено) Экспорт
	
	Если НастройкиПодсистемы = Неопределено Тогда
		НастройкиПодсистемы = НастройкиПодсистемы();
	КонецЕсли; 

	Возврат НастройкиПодсистемы.ИспользоватьПодборНоменклатурыСХарактеристиками;

КонецФункции

#КонецОбласти

#Область ТорговыеПредложения

// ЭлектронноеВзаимодействия.ТорговыеПредложения

// Возвращает текст запроса для публикации торговых предложений.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - параметры, которые необходимо добавить в запрос.
//  ТолькоСопоставленныеСвойства - Булево - если Истина, то несопоставленные свойства отсекаются на уровне запроса
//
// Возвращаемое значение:
//  Строка - тест запроса.
//
Функция ТекстЗапросаСоответствияДляПубликацииТорговыхПредложений(ПараметрыЗапроса, Знач ТолькоСопоставленныеСвойства = Истина) Экспорт
	
	ПараметрыЗапроса.Вставить("ПустаяХарактеристикаРаботаСНоменклатурой", ПустаяСсылкаНаХарактеристику());
	ПараметрыЗапроса.Вставить("ПустойВидНоменклатурыРаботаСНоменклатурой", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.ПривестиЗначение());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(СоответствиеПоВидам.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоИерархии.Номенклатура, СоответствиеПоНоменклатуре.Номенклатура)) КАК ОбъектСопоставления,
	|	ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоИерархии.ИдентификаторКатегории, СоответствиеПоНоменклатуре.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоИерархии.ПредставлениеКатегории, СоответствиеПоНоменклатуре.ПредставлениеКатегории)) КАК КатегорияНаименование,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса, """") КАК ПредставлениеНоменклатурыСервиса,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса, """") КАК ИдентификаторНоменклатурыСервиса,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеХарактеристикиСервиса, """") КАК ПредставлениеХарактеристикиСервиса,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса, """") КАК ИдентификаторХарактеристикиСервиса,
	|	НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL КАК НоменклатураСопоставлена
	|ПОМЕСТИТЬ ТоварыСлужебный
	|ИЗ
	|	&Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено))
	|			И Товары.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И (Товары.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|				ИЛИ (СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики)
	|					ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО Товары.Номенклатура = СоответствиеПоНоменклатуре.Номенклатура
	|			И (СоответствиеПоНоменклатуре.Характеристика = &ПустаяХарактеристикаРаботаСНоменклатурой)
	|			И (СоответствиеПоНоменклатуре.ИдентификаторКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО Товары.ВидНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры
	|			И (СоответствиеПоВидам.ЭтоЕдинственнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО Товары.Родитель = СоответствиеПоИерархии.Номенклатура
	|			И (СоответствиеПоИерархии.Характеристика = &ПустаяХарактеристикаРаботаСНоменклатурой)
	|			И (СоответствиеПоИерархии.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ПредставлениеРеквизитаКатегории, СоответствиеОбщихРеквизитов.ПредставлениеРеквизитаКатегории) КАК СТРОКА(100)) КАК Наименование,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ИдентификаторРеквизитаКатегории, СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории) КАК ИдентификаторРеквизита,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовПоВиду.ИдентификаторЗначенияРеквизитаКатегории, СоответствиеЗначенийОбщихРеквизитов.ИдентификаторЗначенияРеквизитаКатегории) КАК ИдентификаторЗначения,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ТипРеквизитаКатегории, СоответствиеОбщихРеквизитов.ТипРеквизитаКатегории) КАК ТипРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.МинимальноеЗначение, СоответствиеОбщихРеквизитов.МинимальноеЗначение) КАК МинимальноеЗначение,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.МаксимальноеЗначение, СоответствиеОбщихРеквизитов.МаксимальноеЗначение) КАК МаксимальноеЗначение
	|ПОМЕСТИТЬ СвойстваСлужебный
	|ИЗ
	|	&Свойства КАК Свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО Свойства.Номенклатура = ТоварыСлужебный.Номенклатура
	|			И Свойства.Характеристика = ТоварыСлужебный.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВиду
	|		ПО (СоответствиеРеквизитовПоВиду.ОбъектСопоставления = ТоварыСлужебный.ВидНоменклатуры)
	|			И Свойства.Свойство = СоответствиеРеквизитовПоВиду.РеквизитОбъекта
	|			И (СоответствиеРеквизитовПоВиду.ИдентификаторРеквизитаКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
	|		ПО (СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатурыРаботаСНоменклатурой)
	|			И Свойства.Свойство = СоответствиеОбщихРеквизитов.РеквизитОбъекта
	|			И (СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовПоВиду
	|		ПО (СоответствиеЗначенийРеквизитовПоВиду.ОбъектСопоставления = ТоварыСлужебный.ВидНоменклатуры)
	|			И Свойства.Свойство = СоответствиеЗначенийРеквизитовПоВиду.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийРеквизитовПоВиду.Значение
	|			И (СоответствиеЗначенийРеквизитовПоВиду.ИдентификаторЗначенияРеквизитаКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийОбщихРеквизитов
	|		ПО (СоответствиеЗначенийОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатурыРаботаСНоменклатурой)
	|			И Свойства.Свойство = СоответствиеЗначенийОбщихРеквизитов.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийОбщихРеквизитов.Значение
	|			И (СоответствиеЗначенийОбщихРеквизитов.ИдентификаторЗначенияРеквизитаКатегории <> """")
	|ГДЕ
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ОбъектСопоставления, СоответствиеОбщихРеквизитов.ОбъектСопоставления) ЕСТЬ НЕ NULL ";
	
	Если ТолькоСопоставленныеСвойства <> Истина Тогда
		ТекстУсловия = "ГДЕ
		|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ОбъектСопоставления, СоответствиеОбщихРеквизитов.ОбъектСопоставления) ЕСТЬ НЕ NULL ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстУсловия, "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получение реквизитов рубрикатора по условиям.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * ВидНоменклатуры        - СправочникСсылка.ВидыНоменклатуры, Строка - владелец для отбора реквизитов.
//   * ИдентификаторКатегории - Строка                                    - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка    - адрес временного хранилища с результатом.
//
Процедура ПолучитьРеквизитыРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Получить данные из сервиса.
	Отказ = Ложь;
	
	Результат = ДополнительныеРеквизиты(Неопределено, ПараметрыПроцедуры.ИдентификаторКатегории, Отказ);
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты, сопоставленные на уровне модели данных.
	СопоставленыВЗапросе = РаботаСНоменклатуройСлужебный.СопоставленныеРеквизитыОбъекта(
		ПараметрыПроцедуры.Ссылка,
		ПараметрыПроцедуры.ИдентификаторКатегории);
	Для каждого СопоставленныйРеквизит Из СопоставленыВЗапросе Цикл
		СтрокиРезультата = Результат.НайтиСтроки(Новый Структура("Идентификатор", СопоставленныйРеквизит));
		Для каждого СтрокаРезультата Из СтрокиРезультата Цикл
			Результат.Удалить(СтрокаРезультата);
		КонецЦикла;
	КонецЦикла;
	
	ТипВидНоменклатуры = Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип;
	ВидНоменклатуры    = ПараметрыПроцедуры.Ссылка;
	Если НЕ ТипВидНоменклатуры.СодержитТип(ТипЗнч(ВидНоменклатуры)) Тогда
		ВидНоменклатуры = ТипВидНоменклатуры.ПривестиЗначение();
	КонецЕсли;
	
	// Дополнительные реквизиты номенклатуры в информационной базе.
	ДополнительныеРеквизиты = РеквизитыМетаданныхКакДополнительныеРеквизиты();
	
	// Сопоставленные значения реквизитов информационной базы и сервиса.
	СопоставленныеРеквизиты = СопоставленныеДополнительныеРеквизиты(ВидНоменклатуры, ДополнительныеРеквизиты);
	
	// Таблица расчета сопоставленных значений реквизитов в информационной базе со значениями сервиса.
	РасчетСоответствий = РасчетСоответствийЗначений(ВидНоменклатуры, СопоставленныеРеквизиты);
	
	РеквизитыРубрикатора = ОписаниеРеквизитовСопоставленияРубрикатора();
	
	Для Каждого РеквизитРубрикатора Из Результат Цикл
		
		ЭтоДополнительныеЗначенияРеквизита = Ложь;
		ЭтоДополнительныеЗначенияСервиса   = Ложь;
		
		НовыйРеквизит = РеквизитыРубрикатора.Добавить();
		НаименованиеЕдиницыИзмерения = РеквизитРубрикатора.ЕдиницаИзмерения.Наименование;
		НовыйРеквизит.ПредставлениеРеквизитаКатегории = РеквизитРубрикатора.Наименование
			+ ?(ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения), ", " + НаименованиеЕдиницыИзмерения, "");
		НовыйРеквизит.ЕдиницаИзмерения = НаименованиеЕдиницыИзмерения;
		НовыйРеквизит.ИдентификаторРеквизитаКатегории = Формат(РеквизитРубрикатора.Идентификатор, "ЧГ=");
		Если РеквизитРубрикатора.Тип = "Булево" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Да/Нет";
		Иначе
			Если РеквизитРубрикатора.Тип = "Список" Тогда
				ЭтоДополнительныеЗначенияСервиса = Истина;
			КонецЕсли;
			НовыйРеквизит.ТипРеквизитаРубрикатора = РеквизитРубрикатора.Тип;
		КонецЕсли;
		
		// Установка типов данных.
		СтрокаПоиска = СопоставленныеРеквизиты.Найти(НовыйРеквизит.ИдентификаторРеквизитаКатегории, "ИдентификаторРеквизитаКатегории");
		Если СтрокаПоиска <> Неопределено Тогда
			
			НовыйРеквизит.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
			
			// Поиск в списке реквизитов номенклатуры.
			СтрокиРеквизитов = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", СтрокаПоиска.РеквизитОбъекта));
			Если СтрокиРеквизитов.Количество() Тогда
				НовыйРеквизит.ТипЗначения = СтрокиРеквизитов[0].ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(СтрокиРеквизитов[0].ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
					Если РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта") = Неопределено Тогда
						НовоеСоответствие = РасчетСоответствий.Добавить();
						НовоеСоответствие.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
						НовоеСоответствие.КоличествоЗначенийРеквизита = 0;
						НовоеСоответствие.КоличествоСопоставленныхРеквизитов = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Это ссылочный тип доп реквизита
				НовыйРеквизит.ТипЗначения = СтрокаПоиска.РеквизитОбъекта.ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(НовыйРеквизит.ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДополнительныеЗначенияРеквизита И ЭтоДополнительныеЗначенияСервиса Тогда
				НовыйРеквизит.ВозможноСопоставление = Истина;
			КонецЕсли;
			
			СтрокаСоответствий = РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта");
			Если СтрокаСоответствий <> Неопределено Тогда
				НовыйРеквизит.Сопоставлено = СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"),
					СтрокаСоответствий.КоличествоСопоставленныхРеквизитов,
					СтрокаСоответствий.КоличествоЗначенийРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПроцедуры.Свойство("ПолучитьСопоставленныеФормализованныеРеквизиты")
		И ПараметрыПроцедуры.ПолучитьСопоставленныеФормализованныеРеквизиты = Истина Тогда
		Для каждого СопоставленныйРеквизит Из СопоставленныеРеквизиты Цикл
			Если НЕ ЗначениеЗаполнено(СопоставленныйРеквизит.ФормализованныйРеквизит) Тогда
				Продолжить;
			КонецЕсли;
			НовыйРеквизит = РеквизитыРубрикатора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРеквизит, СопоставленныйРеквизит);
			НовыйРеквизит.ПредставлениеРеквизитаКатегории = СопоставленныйРеквизит.Представление;
			НовыйРеквизит.ТипЗначения = СопоставленныйРеквизит.ТипЗначения;
		КонецЦикла;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РеквизитыРубрикатора",    РеквизитыРубрикатора);
	Реквизиты.Вставить("СопоставленныеРеквизиты", СопоставленныеРеквизиты);
	
	ПоместитьВоВременноеХранилище(Реквизиты, АдресРезультата);
	
КонецПроцедуры

// КОНЕЦ ЭлектронноеВзаимодействия.ТорговыеПредложения

#КонецОбласти

#Область ГиперссылкиНаСайты

// Ссылка на промо сайт 1С:Номенклатура
//
// Возвращаемое значение:
//   Строка - Гиперссылка.
Функция ГиперссылкаНаПромоСайтНоменклатура() Экспорт 
	
	Возврат "https://1cbn.ru/nomenclature.html"; 
	
КонецФункции

// Ссылка на страницу описания сервиса "Национальный каталог"
//
// Возвращаемое значение:
//   Строка - Гиперссылка.
Функция ГиперссылкаНаСайтНациональногоКаталога() Экспорт 
	
	Возврат "https://национальный-каталог.рф/page/about"; 
	
КонецФункции

// Ссылка на Условия использования сайта и сервисов «1С:Бизнес-сеть» (1cbn.ru)
//
// Возвращаемое значение:
//   Строка - Гиперссылка.
Функция ГиперссылкаНаОфертуСервисов() Экспорт 
	
	Возврат "https://1cbn.ru/agreement/"; 
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// Описывает ключевые реквизиты для целей выгрузки номенклатуры
// Ключевые реквизиты - это набор атрибутов (не обязательно реквизитов в понимании "метаданные справочника Номенклатура",
// значения этих атрибутов могут храниться в регистрах сведений или других структурах данных, например Штрихкоды),
// обрабатываемых особым образом при выгрузке: часть из них являются обязательными для заполнения безусловно,
// другие могут быть пустыми при определенных условиях
// 
// Возвращаемое значение:
//  Структура - Ключи - имена реквизитов, Значения - пользовательские представления реквизитов
//
Функция КлючевыеРеквизитыНоменклатурыДляВыгрузки() Экспорт
	
	КлючевыеРеквизиты = Новый Структура;
	
	КлючевыеРеквизиты.Вставить("Наименование",     НСтр("ru = 'Наименование'"));
	КлючевыеРеквизиты.Вставить("ЕдиницаИзмерения", НСтр("ru = 'Единица измерения'"));
	КлючевыеРеквизиты.Вставить("СтавкаНДС",        НСтр("ru = 'Ставка НДС'"));
	КлючевыеРеквизиты.Вставить("Артикул",          НСтр("ru = 'Артикул'"));
	КлючевыеРеквизиты.Вставить("Штрихкоды",        НСтр("ru = 'Штрихкоды'"));
	
	Возврат КлючевыеРеквизиты;
	
КонецФункции

#КонецОбласти

Функция ДанныеВременногоХранилища(АдресДанных, ЗначениеПоУмолчанию = Неопределено) Экспорт 
	
	Данные = ЗначениеПоУмолчанию;
	Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		Данные = ПолучитьИзВременногоХранилища(АдресДанных);
		УдалитьИзВременногоХранилища(АдресДанных);
	КонецЕсли;
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеОбъектов

Функция НоменклатураДляЗагрузки(ДанныеПоНоменклатуре)
	
	НоменклатураДляЗагрузки = Новый Массив;
	
	Для каждого Номенклатура Из ДанныеПоНоменклатуре Цикл
		Если Номенклатура.СтатусПроверки.Количество() = 0 Тогда			
			НоменклатураДляЗагрузки.Добавить(Номенклатура.Идентификатор);
		КонецЕсли;			
	КонецЦикла;
	
	Возврат НоменклатураДляЗагрузки;
	
КонецФункции

Процедура ЗагрузитьОтобраннуюНоменклатуру(ДанныеПоНоменклатуре, НоменклатураКЗагрузке, 
	СозданнаяНоменклатура, ПараметрСоздания, КоличествоЭлементовКСозданию)
	
	Для каждого Номенклатура Из НоменклатураКЗагрузке Цикл
		
		СоздатьНоменклатуру(Номенклатура, ПараметрСоздания, КоличествоЭлементовКСозданию, СозданнаяНоменклатура);
		
		СтрокаКУдалению = ДанныеПоНоменклатуре.Найти(Номенклатура.Идентификатор, "Идентификатор");
		
		Если СтрокаКУдалению <> Неопределено Тогда 
			// Удаление отработанных строк номенклатуры, оставшиеся - требуют дополнительной настройки.
			ДанныеПоНоменклатуре.Удалить(СтрокаКУдалению);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаШтрихкодов(ДанныеЗаполнения, СсылкаНаОбъект, СсылкиНаОбъекты)
	
	Штрихкоды = Новый ТаблицаЗначений;
	
	Штрихкоды.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	Штрихкоды.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	Штрихкоды.Колонки.Добавить("Штрихкод",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	Если ДанныеЗаполнения.Характеристики.Количество() = 0 Тогда
		Для каждого Штрихкод Из ДанныеЗаполнения.Штрихкоды Цикл
			НоваяСтрока = Штрихкоды.Добавить();
			НоваяСтрока.Номенклатура = СсылкаНаОбъект;
			НоваяСтрока.Штрихкод = Штрихкод;
		КонецЦикла;
	Иначе
		Для каждого Характеристика Из ДанныеЗаполнения.Характеристики Цикл
			Для каждого Штрихкод Из Характеристика.ШтрихКоды Цикл
				
				СтрокаХарактеристики = ЭлементаМассиваСтруктур(СсылкиНаОбъекты, Характеристика.Идентификатор, "ИдентификаторХарактеристики");
				
				Если СтрокаХарактеристики = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Штрихкоды.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаХарактеристики.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
				НоваяСтрока.Штрихкод       = Штрихкод;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Штрихкоды;
	
КонецФункции

Процедура ДополнитьОписаниеНеСопоставленнымиДопРеквизитами(Описание, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОписания = Новый Массив;
	
	ШаблонОписания = "%1: %2";
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДополнительныйРеквизит.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДополнительныйРеквизит.Значение)
			И Не ЗначениеЗаполнено(ДополнительныйРеквизит.СтроковоеЗначение) Тогда
			
			Продолжить;
		КонецЕсли;

		ТекстОписания.Добавить(СтрШаблон(ШаблонОписания, ДополнительныйРеквизит.Наименование, 
			?(ЗначениеЗаполнено(ДополнительныйРеквизит.Значение), 
				ДополнительныйРеквизит.Значение, 
				ДополнительныйРеквизит.СтроковоеЗначение)));
		
	КонецЦикла;
	
	Если ТекстОписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Описание) Тогда 
		ТекстОписания.Вставить(0, Описание);
		ТекстОписания.Вставить(1, Символы.ПС);
	КонецЕсли;
	
	Описание = СтрСоединить(ТекстОписания, Символы.ПС);
	
КонецПроцедуры

// Загрузка категорий.
//
// Параметры:
//  КатегорииКЗагрузке	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата		 - Строка - адрес результата.
//  ДолжноБытьСоздано    - Число - количество элементов к созданию.
//
Процедура ЗагрузкаКатегорий(Знач ПараметрыЗагрузки, ДолжноБытьСоздано, Знач АдресРезультата, Знач АдресДополнительногоРезультата)
	
	КатегорииКЗагрузке = ПараметрыЗагрузки.КатегорииКЗагрузке;
	
	ИдентификаторыЛистовыхКатегорий = Новый Массив;
	ИдентификаторыРодительскихКатегорий = Новый Массив;
	Для каждого ЭлементКоллекции Из КатегорииКЗагрузке Цикл
		Если ЭлементКоллекции.КоличествоПодчиненных = 0 Тогда
			ИдентификаторыЛистовыхКатегорий.Добавить(ЭлементКоллекции.Идентификатор);
		Иначе 
			ИдентификаторыРодительскихКатегорий.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЕсли;		
	КонецЦикла;
	
	Если ИдентификаторыРодительскихКатегорий.Количество() Тогда 
		
		ИдентификаторыДочернихЛистовыхКатегорий = ИдентификаторыВсехДочернихЛистовыхКатегорий(ИдентификаторыРодительскихКатегорий);
		Если ИдентификаторыДочернихЛистовыхКатегорий = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыЛистовыхКатегорий, ИдентификаторыДочернихЛистовыхКатегорий, Истина);
		
	КонецЕсли;
	
	ДолжноБытьСоздано = ИдентификаторыЛистовыхКатегорий.Количество();
	
	УбратьРанееЗагруженныеКатегории(ИдентификаторыЛистовыхКатегорий);
	
	Если ИдентификаторыЛистовыхКатегорий.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранные категории были загружены ранее.'"));
		
		Результат = РезультатЗагрузкиКатегорий(Новый Массив, ДолжноБытьСоздано);
				
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеКатегорий = ДанныеКатегорийСервиса(ИдентификаторыЛистовыхКатегорий);
	
	Если ДанныеКатегорий = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.РежимЗагрузкиКатегорий = "Привязка" Тогда
		
		// Привязка категорий к существующим видам номенклатуры.
		
		ПривязатьКатегорииКВидуНоменклатуры(ПараметрыЗагрузки.ВидНоменклатуры, ДанныеКатегорий);	
		
		НовыеЭлементы = Новый Массив;
		
		Для каждого ЭлементКоллекции Из ДанныеКатегорий Цикл
			НовыеЭлементы.Добавить(
				Новый Структура("ВидНоменклатуры, ИдентификаторКатегории", ПараметрыЗагрузки.ВидНоменклатуры, ЭлементКоллекции.Идентификатор));
		КонецЦикла;
				
		Результат = РезультатЗагрузкиКатегорий(НовыеЭлементы, ДанныеКатегорий.Количество());
		
	ИначеЕсли ПараметрыЗагрузки.РежимЗагрузкиКатегорий = "Объединение" Тогда	
		
		// Объединение нескольких категорий в один вид номенклатуры. Само объединение происходит в момент
		// записи вида номенклатуры. Т.е. это интерактивное создание.
				
		Результат = РезультатЗагрузкиКатегорий(Новый Массив, 0, 
			ПоместитьВоВременноеХранилище(ДанныеКатегорий, АдресДополнительногоРезультата));
		
	ИначеЕсли ПараметрыЗагрузки.РежимЗагрузкиКатегорий = "ПоОтдельности" Тогда	
		
		НовыеЭлементы = Новый Массив;
		
		ЗагрузитьКатегорииПоОтдельности(ДанныеКатегорий, ПараметрыЗагрузки.КоличествоУровнейИерархии, НовыеЭлементы);
		
		Результат = РезультатЗагрузкиКатегорий(НовыеЭлементы, ИдентификаторыЛистовыхКатегорий.Количество());
		
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция РезультатЗагрузкиКатегорий(НовыеЭлементы, ДолжноБытьСозданоЭлементов, АдресДанныхЗаполнения = Неопределено)
	
	Результат = Новый Структура();
	
	Результат.Вставить("Создано",               НовыеЭлементы.Количество());
	Результат.Вставить("ДолжноБытьСоздано",     ДолжноБытьСозданоЭлементов);
	Результат.Вставить("НовыеЭлементы",         НовыеЭлементы);
	Результат.Вставить("АдресДанныхЗаполнения", АдресДанныхЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьКатегорииПоОтдельности(ДанныеКатегорий, КоличествоУровнейИерархии, НовыеЭлементы) Экспорт
	
	ДанныеКатегорий.Колонки.Добавить("РодительИнформационнойБазы");
	
	СозданныеРодительскиеКатегории = Новый Соответствие;
	
	Если СохранятьИерархиюКатегорийПриЗагрузке()
		И КоличествоУровнейИерархии > 0 Тогда
		
		СоздатьРодительскиеКатегории(ДанныеКатегорий, СозданныеРодительскиеКатегории, КоличествоУровнейИерархии);
	КонецЕсли;
		
	Для каждого ДанныеЗаполнения Из ДанныеКатегорий Цикл
		
		Если СохранятьИерархиюКатегорийПриЗагрузке() 
			И КоличествоУровнейИерархии > 0 Тогда
			
			ДанныеЗаполнения.РодительИнформационнойБазы = СозданныеРодительскиеКатегории[ДанныеЗаполнения.ИдентификаторРодителя];
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ВидНоменклатурыСсылка = НовыйЭлементВидаНоменклатуры(ДанныеЗаполнения);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Загрузка категорий'",
				ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ВидНоменклатурыСсылка) Тогда
			НовыеЭлементы.Добавить(Новый Структура("ИдентификаторКатегории, ВидНоменклатуры", 
				ДанныеЗаполнения.Идентификатор, ВидНоменклатурыСсылка));
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить категорию ""%1""'"), ДанныеЗаполнения.Наименование);
			ОбщегоНазначения.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПривязатьКатегорииКВидуНоменклатуры(ВидНоменклатуры, ДанныеКатегорий)
	
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
	
	Для каждого ЭлементКоллекции Из ДанныеКатегорий Цикл
		ПараметрыЗаписи.ИдентификаторыКатегорий.Добавить(ЭлементКоллекции.Идентификатор, ЭлементКоллекции.Наименование);
	КонецЦикла;
	
	ПараметрыЗаписи.ОбновляетсяАвтоматически = Ложь;
	ПараметрыЗаписи.ВидНоменклатуры          = ВидНоменклатуры;
	
	ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);
	
	СоздатьДополнительныеОбъектыДляВидаНоменклатуры(ВидНоменклатуры, ДанныеКатегорий, Истина);
	
КонецПроцедуры

Процедура СоздатьРодителя(ДанныеЗаполнения, СозданныеРодительскиеКатегории)
	
	Если СозданныеРодительскиеКатегории[ДанныеЗаполнения.Идентификатор] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.РодительИнформационнойБазы = СозданныеРодительскиеКатегории[ДанныеЗаполнения.ИдентификаторРодителя];
	
	ГруппаВидовНоменклатурыСсылка = Неопределено;
	
	РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка);	
	
	СозданныеРодительскиеКатегории.Вставить(ДанныеЗаполнения.Идентификатор, ГруппаВидовНоменклатурыСсылка);
	
	Если ГруппаВидовНоменклатурыСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
	
	ПараметрыЗаписи.ИдентификаторыКатегорий.Добавить(ДанныеЗаполнения.Идентификатор, ДанныеЗаполнения.Наименование);
	ПараметрыЗаписи.ОбновляетсяАвтоматически               = Ложь;
	ПараметрыЗаписи.ЗагружатьХарактеристикиВХарактеристики = Ложь;
	ПараметрыЗаписи.ЭтоГруппаКатегорий                     = Истина;
	ПараметрыЗаписи.ВидНоменклатуры                        = ГруппаВидовНоменклатурыСсылка;
	
	ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура СоздатьРодительскиеКатегории(ДанныеКатегорий, СозданныеРодительскиеКатегории, КоличествоУровнейИерархии)
		
	ЗаполнитьПутиДоКатегорий(ДанныеКатегорий, Ложь, РаботаСНоменклатуройСлужебный.НаборПолейСтандартный());
	
	РодительскиеКатегории = Новый ТаблицаЗначений;
	
	РодительскиеКатегории.Колонки.Добавить("Идентификатор");
	РодительскиеКатегории.Колонки.Добавить("Наименование");
	РодительскиеКатегории.Колонки.Добавить("ИдентификаторРодителя");
	РодительскиеКатегории.Колонки.Добавить("Уровень");
	
	ОбрабатываемыеКорневыеГруппы = Новый Соответствие;
	
	// Определяем уровень категории, чтобы потом отсортировать и последовательно создать
	// от общего к частному.
			
	Для каждого ЭлементКоллекции Из ДанныеКатегорий Цикл
		
		КоличествоУровней = ЭлементКоллекции.ПутьДоКатегории.Количество();
		
		Если КоличествоУровней = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		ТекущийУровень = КоличествоУровней - 1;
		
		ОбрабатываемыеКорневыеГруппы.Вставить(ЭлементКоллекции.ПутьДоКатегории[КоличествоУровней - 1].Идентификатор, Истина);
		
		Для каждого ЭлементПути Из ЭлементКоллекции.ПутьДоКатегории Цикл
			
			// Проверка превышения количества уровней, выбранных пользователем.
			
			Если (КоличествоУровней - ТекущийУровень) > КоличествоУровнейИерархии Тогда
				Прервать;	
			КонецЕсли;
			
			НоваяСтрока = РодительскиеКатегории.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементПути);
			НоваяСтрока.Уровень = ТекущийУровень;
			
			ТекущийУровень = ТекущийУровень - 1;
			
		КонецЦикла;
	КонецЦикла;
	
	РодительскиеКатегории.Свернуть("Идентификатор, Наименование, ИдентификаторРодителя, Уровень");
	
	Для каждого ЭлементКоллекции Из ЗагруженныеРодительскиеКатегории(РодительскиеКатегории.ВыгрузитьКолонку("Идентификатор")) Цикл
		СозданныеРодительскиеКатегории.Вставить(ЭлементКоллекции.Идентификатор, ЭлементКоллекции.ГруппаВидовНоменклатуры);
	КонецЦикла;
	
	РодительскиеКатегории.Колонки.Добавить("РодительИнформационнойБазы");
	
	РодительскиеКатегории.Сортировать("Уровень");
	
	Для каждого ЭлементКоллекции Из РодительскиеКатегории Цикл
		СоздатьРодителя(ЭлементКоллекции, СозданныеРодительскиеКатегории);	
	КонецЦикла;
	
	ВосстановитьИерархию(ОбрабатываемыеКорневыеГруппы);
		
КонецПроцедуры

Процедура ВосстановитьИерархию(ОбрабатываемыеКорневыеГруппы)
	
	ЗагруженныеГруппы = ЗагруженныеРодительскиеКатегории();
	
	ЗаполнитьПутиДоКатегорий(ЗагруженныеГруппы, Ложь, РаботаСНоменклатуройСлужебный.НаборПолейСтандартный());
	
	ВсеЗагруженные = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ЗагруженныеГруппы Цикл
		ВсеЗагруженные.Вставить(ЭлементКоллекции.Идентификатор, ЭлементКоллекции.ГруппаВидовНоменклатуры);
	КонецЦикла;

	Для каждого ТекущаяГруппа Из ЗагруженныеГруппы Цикл
		
		Если ТекущаяГруппа.ПутьДоКатегории.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторКорневойГруппы = 
			ТекущаяГруппа.ПутьДоКатегории[ТекущаяГруппа.ПутьДоКатегории.Количество() - 1].Идентификатор;
			
		Если ОбрабатываемыеКорневыеГруппы[ИдентификаторКорневойГруппы] = Неопределено Тогда
			Продолжить; // Не обрабатываются группы, не входящие в выбранные корневые группы.
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ТекущаяГруппа.ПутьДоКатегории Цикл
			
			РодительВБазе = ВсеЗагруженные[ЭлементКоллекции.Идентификатор];
			
			Если РодительВБазе <> Неопределено Тогда
				Если РодительВБазе <> ТекущаяГруппа.Родитель Тогда
					РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьГруппуВидовНоменклатуры(
						Новый Структура("РодительИнформационнойБазы, Наименование", РодительВБазе, ТекущаяГруппа.Наименование),
						ТекущаяГруппа.ГруппаВидовНоменклатуры);	
				КонецЕсли;	
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Функция ЗагруженныеРодительскиеКатегории(ИдентификаторыРодителей = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ГруппаВидовНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры.Родитель КАК Родитель,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЭтоГруппаКатегорий
	|	И (&БезОтбора
	|			ИЛИ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В (&ИдентификаторыРодителей))";
	
	Запрос.УстановитьПараметр("ИдентификаторыРодителей", ИдентификаторыРодителей);
	Запрос.УстановитьПараметр("БезОтбора", ИдентификаторыРодителей = Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
		
КонецФункции

Процедура ДополнитьЗначенияРеквизита(ДополнительныеРеквизитИсточник, ДополнительныеРеквизитПриемник)
	
	Если ТипЗнч(ДополнительныеРеквизитИсточник.Значения) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеРеквизитПриемник.Значения) <> Тип("ТаблицаЗначений") Тогда
		ДополнительныеРеквизитПриемник.Значения = ДополнительныеРеквизитИсточник.Значения.Скопировать();
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущееЗначение Из ДополнительныеРеквизитИсточник.Значения Цикл
		Если ДополнительныеРеквизитПриемник.Значения.Найти(ТекущееЗначение.Идентификатор, "Идентификатор") = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ДополнительныеРеквизитПриемник.Значения.Добавить(), ТекущееЗначение);
			ДополнительныеРеквизитПриемник.ИдентификаторыЗначений.Добавить(ТекущееЗначение.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляСозданияНоменклатуры(
			ПараметрСоздания, 
			ИдентификаторыНоменклатуры, 
			ИдентификаторыСПараметрами, 
			НоменклатураДляЗагрузкиХарактеристик)
		
	Для каждого ЭлементКоллекции Из ПараметрСоздания.Идентификаторы Цикл
		
		Если ИдентификаторыСПараметрами[ЭлементКоллекции.ИдентификаторНоменклатуры] = Неопределено Тогда
			ИдентификаторыНоменклатуры.Добавить(ЭлементКоллекции.ИдентификаторНоменклатуры);
			
			ПараметрыСоздания = ПараметрСоздания.ДополнительныеПараметры[ЭлементКоллекции.ИдентификаторНоменклатуры];
			
			Если ПараметрыСоздания = Неопределено Тогда
				ПараметрыСоздания = РаботаСНоменклатуройСлужебныйКлиентСервер.ДополнительныеПараметрыЗагрузкиНоменклатуры();
			КонецЕсли;
						
			СтрокаДанных = Новый Структура;
			
			СтрокаДанных.Вставить("ИдентификаторыХарактеристик", Новый Массив);
			СтрокаДанных.Вставить("ПараметрыСоздания",           ПараметрыСоздания);
			
			ИдентификаторыСПараметрами.Вставить(ЭлементКоллекции.ИдентификаторНоменклатуры, СтрокаДанных);
		КонецЕсли;
		
		// Заполнение идентификаторов характеристик.
		
		ТекущаяНоменклатура = ИдентификаторыСПараметрами[ЭлементКоллекции.ИдентификаторНоменклатуры];
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторХарактеристики) Тогда // Передача идентификатора в структуре
			ТекущаяНоменклатура.ИдентификаторыХарактеристик.Добавить(ЭлементКоллекции.ИдентификаторХарактеристики);
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания.ВыбранныеХарактеристики) Тогда // Передача идентификаторов в массиве
			Для каждого ЭлементКоллекции Из ПараметрыСоздания.ВыбранныеХарактеристики Цикл
				ТекущаяНоменклатура.ИдентификаторыХарактеристик.Добавить(ЭлементКоллекции);
			КонецЦикла;
		КонецЕсли;
		
		Если НастройкиПодсистемы().ИспользоватьХарактеристики Тогда
			
			// Если были выбраны конкретные характеристики или были отмечены к загрузке все характеристики 
			// - характеристики считаются выбранными.
			
			Если ТекущаяНоменклатура.ИдентификаторыХарактеристик.Количество() > 0
				ИЛИ ТекущаяНоменклатура.ПараметрыСоздания.ЗагружатьВсеХарактеристики Тогда
				
				ТекущаяНоменклатура.ПараметрыСоздания.ХарактеристикиВыбраны = Истина;
			КонецЕсли;
			
		Иначе
			
			// Если характеристики не используются номенклатура с характеристиками в режиме: 
			// "НеЗагружать" - если номенклатура отображается без характеристик
			// "ВНаименование" - если характеристики отображаются как номенклатура.
			
			ТекущаяНоменклатура.ПараметрыСоздания.ХарактеристикиВыбраны = Истина;
			
			Если ТекущаяНоменклатура.ИдентификаторыХарактеристик.Количество() = 0 Тогда
				ТекущаяНоменклатура.ПараметрыСоздания.РежимЗагрузкиХарактеристик = "НеЗагружать";
			Иначе
				ТекущаяНоменклатура.ПараметрыСоздания.РежимЗагрузкиХарактеристик = "ВДополнительныеРеквизиты";	
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;	
	
	Если НастройкиПодсистемы().ИспользоватьХарактеристики Тогда
		
		// Поиск номенклатуры, которая была уже создана - в таком случае требуется только загрузка характеристик.			
		
		ЗаполнитьНоменклатуруДляХарактеристик(ИдентификаторыНоменклатуры, 
			НоменклатураДляЗагрузкиХарактеристик, ИдентификаторыСПараметрами);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруДляХарактеристик(ИдентификаторыНоменклатуры, НоменклатураДляЗагрузкиХарактеристик, ИдентификаторыСПараметрами)
	
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыНоменклатуры, "Номенклатура");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	МИНИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура) КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатуры)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = &РежимЗагрузкиХарактеристик
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса";
	
	Запрос.УстановитьПараметр("Сопоставлено",               Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", ИдентификаторыНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",       ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("РежимЗагрузкиХарактеристик", 
		Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики);
	
	УстановитьПривилегированныйРежим(Истина);	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		// Создание характеристик будет происходить, только если характеристики выбраны. 
		// Если в списке загрузки выбрана номенклатура загруженная не полностью, необходимо будет предварительно выбрать характеристики
		// в форме настроек.
			
		Если ИдентификаторыСПараметрами[Выборка.ИдентификаторНоменклатуры].ПараметрыСоздания.ХарактеристикиВыбраны Тогда			
			НоменклатураДляЗагрузкиХарактеристик.Вставить(Выборка.ИдентификаторНоменклатуры, Выборка.Номенклатура);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция РезультатСозданияНоменклатуры()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОшибки",                         Ложь);          // Ошибки покупки
	Результат.Вставить("ОписаниеОшибки",                     "");            // Описание ошибки покупки
	Результат.Вставить("Создано",                            0);             // Количество созданных элементов
	Результат.Вставить("ДолжноБытьСоздано",                  0);             // Изначальное количество элементов
	Результат.Вставить("НовыеЭлементы",                      Новый Массив);  // Массив новых элементов
	Результат.Вставить("НоменклатураДляАнализа",             "");            // Номенклатура, требующая анализа
	Результат.Вставить("СозданиеИнтерактивно",               Ложь);          // Признак интерактивного создания
	Результат.Вставить("АдресДанныхЗаполнения",              "");            // Данные заполнения для интерактивного создания
	Результат.Вставить("КоличествоНоменклатурыДляНастройки", 0);
	Результат.Вставить("КоличествоКатегорийДляНастройки",    0);
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьНоменклатуру(Знач ДанныеТекущейНоменклатуры, ПараметрСоздания, КоличествоЭлементовКСозданию, СозданнаяНоменклатура)
	
	ПараметрыТекущейНоменклатуры = ПараметрСоздания[ДанныеТекущейНоменклатуры.Идентификатор];
		
	ДополнитьОписаниеНеСопоставленнымиДопРеквизитами(ДанныеТекущейНоменклатуры.Описание, ДанныеТекущейНоменклатуры);
	
	РежимыЗагрузкиХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.РежимыЗагрузкиХарактеристик();
	
	Если ЭтоЗагрузкаХарактеристикКакНоменклатуры(ПараметрыТекущейНоменклатуры) Тогда
		
		// Загрузка характеристики как номенклатуры.
		
		СоздатьНоменклатуруПоХарактеристикам(ДанныеТекущейНоменклатуры, ПараметрыТекущейНоменклатуры, 
			СозданнаяНоменклатура, КоличествоЭлементовКСозданию);
	Иначе
		КоличествоЭлементовКСозданию = КоличествоЭлементовКСозданию + 1;
		СоздатьНоменклатуруИХарактеристики(ДанныеТекущейНоменклатуры, ПараметрыТекущейНоменклатуры, СозданнаяНоменклатура);
	КонецЕсли;
		
КонецПроцедуры

Функция ЭтоЗагрузкаХарактеристикКакНоменклатуры(ПараметрыТекущейНоменклатуры)
	
	Возврат (ЗначениеЗаполнено(ПараметрыТекущейНоменклатуры.ИдентификаторыХарактеристик) 
		ИЛИ ПараметрыТекущейНоменклатуры.ПараметрыСоздания.ЗагружатьВсеХарактеристики) 
			И ПараметрыТекущейНоменклатуры.ПараметрыСоздания.РежимЗагрузкиХарактеристик = "ВНаименование"
				ИЛИ ПараметрыТекущейНоменклатуры.ПараметрыСоздания.РежимЗагрузкиХарактеристик = "ВДополнительныеРеквизиты";
	
КонецФункции

Процедура СоздатьНоменклатуруИХарактеристики(Знач ДанныеТекущейНоменклатуры, ПараметрыТекущейНоменклатуры, СозданнаяНоменклатура, ТекущаяХарактеристика = Неопределено)
	
	РежимыЗагрузкиХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.РежимыЗагрузкиХарактеристик();
		
	СсылкаНаОбъект     = Неопределено;
	ПараметрыСоздания  = ПараметрыТекущейНоменклатуры.ПараметрыСоздания;
	ЕстьХарактеристики = ДанныеТекущейНоменклатуры.КоличествоХарактеристик > 0;
	
	НачатьТранзакцию();
	
	Попытка
		
		НаименованиеДоПреобразования = "";
		
		Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
			
			// Корректировка наименования для загрузки характеристики как номенклатуры.
			
			НаименованиеДоПреобразования = ДанныеТекущейНоменклатуры.Наименование;
			
			ДанныеТекущейНоменклатуры.Наименование = НаименованиеПоНоменклатуреИХарактеристике(
				ДанныеТекущейНоменклатуры.Наименование, ТекущаяХарактеристика.Наименование);
		КонецЕсли;
		
		РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру(ДанныеТекущейНоменклатуры, СсылкаНаОбъект);	
		
		Если ЗначениеЗаполнено(НаименованиеДоПреобразования) Тогда
			ДанныеТекущейНоменклатуры.Наименование = НаименованиеДоПреобразования;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Текст = НСтр("ru = 'Ошибка создания элемента справочника Номенклатура'");
			ОбщегоНазначения.СообщитьПользователю(Текст);
			ВызватьИсключение Текст;
		КонецЕсли;
		
		// Дополнительные реквизиты
		
		Если ЕстьХарактеристики 
			И ПараметрыСоздания.РежимЗагрузкиХарактеристик = РежимыЗагрузкиХарактеристик.ВДополнительныеРеквизиты 
			И ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
			
			// Загрузка данных характеристик в дополнительные реквизиты номенклатуры
			
			Для каждого ЭлементКоллекции Из ТекущаяХарактеристика.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(ДанныеТекущейНоменклатуры.ДополнительныеРеквизиты.Добавить(), ЭлементКоллекции);
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеТекущейНоменклатуры.ДополнительныеРеквизиты.Количество() > 0 Тогда
			РаботаСНоменклатуройПереопределяемый.
				ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеТекущейНоменклатуры.ДополнительныеРеквизиты, СсылкаНаОбъект);	
		КонецЕсли;
				
		ШаблонДанныхНоменклатуры = РаботаСНоменклатуройСлужебныйКлиентСервер.ШаблонДанныхНоменклатуры();
		
		ЗаписатьСоответствиеНоменклатурыПриЗагрузке(ДанныеТекущейНоменклатуры, СсылкаНаОбъект, 
			ТекущаяХарактеристика, ЕстьХарактеристики, ПараметрыСоздания.РежимЗагрузкиХарактеристик, ШаблонДанныхНоменклатуры);	
		
		СозданнаяНоменклатура.Добавить(ШаблонДанныхНоменклатуры);
		
		ЗафиксироватьТранзакцию();
		
	Исключение		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Загрузка номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
	Если ЕстьХарактеристики 
		И ПараметрыСоздания.РежимЗагрузкиХарактеристик = РежимыЗагрузкиХарактеристик.ВХарактеристики 
		И НастройкиПодсистемы().ИспользоватьХарактеристики Тогда
		
		// Если у номенклатуры есть характеристики, загружаем их отдельно
		
		СоздатьХарактеристики(ДанныеТекущейНоменклатуры, СсылкаНаОбъект, ПараметрыТекущейНоменклатуры, СозданнаяНоменклатура);
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды(
		ТаблицаШтрихкодов(ДанныеТекущейНоменклатуры, СсылкаНаОбъект, СозданнаяНоменклатура));
							
КонецПроцедуры

Процедура ЗаписатьСоответствиеНоменклатурыПриЗагрузке(ДанныеТекущейНоменклатуры, 
			СсылкаНаОбъект, 
			ТекущаяХарактеристика, 
			ЕстьХарактеристики, 
			РежимЗагрузкиХарактеристикСтрокой,
			ШаблонДанныхНоменклатуры)
	
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();	
	
	ПараметрыЗаписи.ИдентификаторНоменклатурыСервиса = ДанныеТекущейНоменклатуры.Идентификатор;
	ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса = ДанныеТекущейНоменклатуры.Наименование;
	ПараметрыЗаписи.ИдентификаторКатегории           = ДанныеТекущейНоменклатуры.ИдентификаторКатегории;
	ПараметрыЗаписи.ПредставлениеКатегории           = ДанныеТекущейНоменклатуры.НаименованиеКатегории;
	
	Если ЕстьХарактеристики Тогда
		ПараметрыЗаписи.РежимЗагрузкиХарактеристик = РежимЗагрузкиХарактеристикПоСтроке(РежимЗагрузкиХарактеристикСтрокой);
	КонецЕсли;
	
	ШаблонДанныхНоменклатуры.Номенклатура = СсылкаНаОбъект;
	ШаблонДанныхНоменклатуры.ИдентификаторНоменклатуры = ДанныеТекущейНоменклатуры.Идентификатор;
	
	Если ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
		ПараметрыЗаписи.ИдентификаторХарактеристикиСервиса = ТекущаяХарактеристика.Идентификатор;
		ПараметрыЗаписи.ПредставлениеХарактеристикиСервиса = ТекущаяХарактеристика.Наименование;
		
		ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса = НаименованиеПоНоменклатуреИХарактеристике(
				ДанныеТекущейНоменклатуры.Наименование, ТекущаяХарактеристика.Наименование);
				
		ШаблонДанныхНоменклатуры.ИдентификаторХарактеристики = ТекущаяХарактеристика.Идентификатор;	
	КонецЕсли;
	
	ЗаписатьСоответствиеНоменклатурыИХарактеристик(СсылкаНаОбъект, Неопределено, ПараметрыЗаписи);

КонецПроцедуры

Процедура СоздатьНоменклатуруПоХарактеристикам(ДанныеТекущейНоменклатуры, ПараметрыТекущейНоменклатуры, СозданнаяНоменклатура, КоличествоЭлементовКСозданию)
	
	КоличествоЭлементовКСозданию = КоличествоЭлементовКСозданию + ПараметрыТекущейНоменклатуры.ИдентификаторыХарактеристик.Количество();
	
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
	
	ПараметрыМетода.НаборПолей = "Максимальный";
	
	НомерСтраницыДанных = 1;
	
	Пока Истина Цикл
		
		ПараметрыМетода.НомерСтраницыДанных = НомерСтраницыДанных;
		ПараметрыМетода.ТаблицаТипов = ДанныеТекущейНоменклатуры.Категория.Характеристики.ДополнительныеРеквизиты;
		
		Если ПараметрыТекущейНоменклатуры.ПараметрыСоздания.ЗагружатьВсеХарактеристики Тогда
			ПараметрыМетода.ИдентификаторНоменклатуры = ДанныеТекущейНоменклатуры.Идентификатор;
		Иначе
			ПараметрыМетода.ИдентификаторыХарактеристик = ПараметрыТекущейНоменклатуры.ИдентификаторыХарактеристик;
		КонецЕсли;
		
		ДанныеХарактеристик = ДанныеХарактеристикСервиса(ПараметрыМетода, Ложь);
		
		Если Не ЗначениеЗаполнено(ДанныеХарактеристик) Тогда
			Прервать;
		КонецЕсли;
		
		УдалитьЗадействованныеИдентификаторы(ДанныеТекущейНоменклатуры.Идентификатор, ДанныеХарактеристик);
				
		СоответствиеРеквизитов = СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ДанныеТекущейНоменклатуры.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры);
		
		Для каждого Характеристика Из ДанныеХарактеристик Цикл
						
			ЗаполнитьСоответствиеДополнительныхРеквизитовНоменклатуры(Характеристика.ДополнительныеРеквизиты, СоответствиеРеквизитов);
			
			СоздатьНоменклатуруИХарактеристики(ДанныеТекущейНоменклатуры, ПараметрыТекущейНоменклатуры, 
				СозданнаяНоменклатура, Характеристика);
			
		КонецЦикла;
		
		НомерСтраницыДанных = НомерСтраницыДанных + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗагрузитьДополнительныеДанные(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПараметрыЗагрузкиИзображений   = ПараметрыПроцедуры.ПараметрыЗагрузкиИзображений;
	ПараметрыЗагрузкиХарактеристик = ПараметрыПроцедуры.ПараметрыЗагрузкиХарактеристик;
	
	КоличествоЗагруженныхХарактеристик = 0;
	
	// Загрузка характеристик.
	
	Если ПараметрыЗагрузкиХарактеристик <> Неопределено Тогда
		ПараметрыЗагрузки = ПараметрыЗагрузкиХарактеристик();	
		ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки, ПараметрыЗагрузкиХарактеристик);
		ЗагрузитьХарактеристикиПорционно(ПараметрыЗагрузки, КоличествоЗагруженныхХарактеристик);		
	КонецЕсли;
	
	// Загрузка изображений.
		
	Если ПараметрыЗагрузкиИзображений <> Неопределено Тогда
		
		ДанныеНоменклатуры = ДанныеНоменклатурыСервиса(
			ПараметрыЗагрузкиИзображений.ИдентификаторНоменклатуры, Истина);
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			РаботаСНоменклатуройПереопределяемый.СохранитьИзображенияНоменклатуры(
				ПараметрыЗагрузкиИзображений.Номенклатура, 
					ДанныеНоменклатуры[0].Изображения);
		КонецЕсли;		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("КоличествоЗагруженныхХарактеристик", 
		КоличествоЗагруженныхХарактеристик), АдресРезультата);
	
КонецПроцедуры

Функция ВидНоменклатурыИДополнительныеРеквизитыПодготовлены(ОбновляемыеРеквизиты, 
	ИдентификаторКатегории, СтрокаДанных, ЗначенияРеквизитов, ВидНоменклатурыТекущееЗначение)
	
	Перем ВидНоменклатурыДляЗаполнения;
	
	Результат = Истина;
	НастройкиПодсистемы = НастройкиПодсистемы();
	
	Если Не НастройкиПодсистемы.ИспользоватьВидыНоменклатуры Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидыНоменклатуры = ВидыНоменклатурыПоИдентификаторуКатегории(ИдентификаторКатегории);
	Если ВидыНоменклатуры.Количество() = 1 Тогда
		ВидНоменклатурыДляЗаполнения = ВидыНоменклатуры[0];
	ИначеЕсли ВидыНоменклатуры.Количество() = 0 Тогда 
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		АдресДополнительногоРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		КатегорииКЗагрузке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый Структура("Идентификатор, КоличествоПодчиненных", ИдентификаторКатегории, 0));
		ПараметрыЗагрузкиКатегорий = РаботаСНоменклатуройСлужебныйКлиентСервер.ДополнительныеПараметрыЗагрузкиКатегорий();
		ПараметрыЗагрузкиКатегорий.Вставить("КатегорииКЗагрузке", КатегорииКЗагрузке);
		ЗагрузитьКатегории(ПараметрыЗагрузкиКатегорий, АдресРезультата, АдресДополнительногоРезультата);
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если РезультатЗагрузки <> Неопределено Тогда
			ВидНоменклатурыДляЗаполнения = РезультатЗагрузки.НовыеЭлементы[0].ВидНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидНоменклатурыДляЗаполнения = Неопределено Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ДобавитьСтрокуВТаблицуОтличий(ОбновляемыеРеквизиты, "ВидНоменклатуры", ВидНоменклатурыДляЗаполнения,
		ВидНоменклатурыТекущееЗначение, НСтр("ru = 'Вид номенклатуры'", КодОсновногоЯзыка()));
	
	СтрокаДанных.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры = ВидНоменклатурыДляЗаполнения;
	СтрокаДанных.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик = "Общие";
	
	Если НастройкиПодсистемы.ИспользоватьДополнительныеРеквизиты Тогда
		СоответствиеРеквизитовИЗначений = Неопределено;
		ПолучитьСоответствиеРеквизитовИЗначений(ИдентификаторКатегории, 
			СоответствиеРеквизитовИЗначений, ВидНоменклатурыДляЗаполнения);
		ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, 
			СтрокаДанных, ВидНоменклатурыДляЗаполнения);
			
		Если ЗначенияРеквизитов = Неопределено Тогда
			ЗначенияРеквизитов = Новый ТаблицаЗначений;
			ЗначенияРеквизитов.Колонки.Добавить("Свойство");
			ЗначенияРеквизитов.Колонки.Добавить("Значение");
		КонецЕсли;
		
		ОбновляемыеРеквизиты.Колонки.Добавить("ИдентификаторРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ОбновляемыеРеквизиты.Колонки.Добавить("ИдентификаторЗначения", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ДобавитьДополнительныеРеквизитыКОбновляемым(ОбновляемыеРеквизиты, СтрокаДанных, ЗначенияРеквизитов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьШтрихкодыНоменклатуры(Форма, Отказ)
	
	Если ПустаяСтрока(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения)
		Или Не ЭтоАдресВременногоХранилища(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения) Тогда
		Возврат
	КонецЕсли;
	
	ДанныеСервиса = ПолучитьИзВременногоХранилища(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения);
	
	Если ТипЗнч(ДанныеСервиса) <> Тип("ТаблицаЗначений")
		Или ДанныеСервиса.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ШтрихкодыНоменклатуры = РаботаСНоменклатуройСлужебный.ШтрихкодыНоменклатуры();
	Для Каждого ЗначениеШтрихкода Из ДанныеСервиса[0].Штрихкоды Цикл
		НовыйШтрихкод = ШтрихкодыНоменклатуры.Добавить();
		НовыйШтрихкод.Штрихкод = ЗначениеШтрихкода;
		НовыйШтрихкод.Номенклатура = Форма.РаботаСНоменклатурой_СсылкаНаОбъект;
	КонецЦикла;
	
	Попытка
		РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды(ШтрихкодыНоменклатуры);
	Исключение
		ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(
			НСтр("ru = 'Ошибка записи штрихкодов'", КодОсновногоЯзыка()), 
			ИнформацияОбОшибке());
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеЭлементовНаФорму

Процедура УстановитьДействиеИзменениеТекстаПолей(Форма)
	
	НаборПолейПриРедактировании = Новый Массив;
	НаборПолейПриИзменении      = Новый Массив;
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(НаборПолейПриРедактировании);
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияПриИзменении(НаборПолейПриИзменении);
	
	// При редактировании текста
	
	Для Каждого ЭлементКоллекции Из НаборПолейПриРедактировании Цикл
		Если Форма.Элементы.Найти(ЭлементКоллекции) <> Неопределено Тогда
			
			Если Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.НайтиПоЗначению(ЭлементКоллекции) = Неопределено Тогда
				Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.Добавить(ЭлементКоллекции);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Форма.Элементы[ЭлементКоллекции].ПолучитьДействие("ИзменениеТекстаРедактирования")) Тогда
				Форма.Элементы[ЭлементКоллекции].
					УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_ИзменениеТекстаРедактированияРаботаСНоменклатурой");
				Форма.Элементы[ЭлементКоллекции].ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
			КонецЕсли;
						
		КонецЕсли;
	КонецЦикла;
	
	// При изменении
	
	Для Каждого ЭлементКоллекции Из НаборПолейПриИзменении Цикл
		Если Форма.Элементы.Найти(ЭлементКоллекции) <> Неопределено Тогда
			
			Если Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.НайтиПоЗначению(ЭлементКоллекции) = Неопределено Тогда
				Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.Добавить(ЭлементКоллекции);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Форма.Элементы[ЭлементКоллекции].ПолучитьДействие("ПриИзменении")) Тогда
				Форма.Элементы[ЭлементКоллекции].
					УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРаботаСНоменклатурой");
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура НастроитьВстроенныеЭлементыФормы(Форма)
	
	РежимПредставленияОбъектаСервиса = Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса;
	
	Если СтрСравнить(РежимПредставленияОбъектаСервиса, "Гиперссылка") = 0 Тогда
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);	
			
	ИначеЕсли СтрСравнить(РежимПредставленияОбъектаСервиса, "ПолеВвода") = 0 Тогда	
		
		Если Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Картинка", БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Картинка", БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой);
		КонецЕсли;
		
		РежимОбновленияДоступность = ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса)
			ИЛИ Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Количество() > 0;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Доступность", РежимОбновленияДоступность);
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьВстроенныеРеквизитыФормыВидаНоменклатуры(Форма)
	
	СсылкаНаОбъект = Форма.РаботаСНоменклатурой_СсылкаНаОбъект;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.СброситьДанныеОбъектаСервиса(Форма);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "ВХарактеристики";
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЗагружатьХарактеристикиВХарактеристики КАК ЗагружатьХарактеристикиВХарактеристики
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставленияКатегорий = Новый Массив;
	Идентификаторы = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ПредставленияКатегорий.Добавить(Выборка.ПредставлениеКатегории);
		Идентификаторы.Добавить(Выборка.ИдентификаторКатегории, Выборка.ПредставлениеКатегории);
	КонецЦикла;

	Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса   = Новый ФорматированнаяСтрока(СтрСоединить(ПредставленияКатегорий, "; "),,,,"Ссылка");
	Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически      = Выборка.ОбновляетсяАвтоматически;
	Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик    = ?(Выборка.ЗагружатьХарактеристикиВХарактеристики, "ВХарактеристики", "ВНоменклатуру");
	Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса = Идентификаторы;

КонецПроцедуры

Процедура ЗаполнитьВстроенныеРеквизитыФормыНоменклатуры(Форма, ГруппаРодитель = Неопределено, ОтображатьДанныеХарактеристик = Ложь)
	
	СсылкаНаОбъект = Форма.РаботаСНоменклатурой_СсылкаНаОбъект;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.СброситьДанныеОбъектаСервиса(Форма);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
			
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик КАК РежимЗагрузкиХарактеристик,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";	
	
	Запрос.УстановитьПараметр("Сопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("Номенклатура",         СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(Выборка.ПредставлениеНоменклатуры,,,,"Ссылка");
		Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса = Выборка.ИдентификаторНоменклатуры;
		Форма.РаботаСНоменклатурой_ИдентификаторХарактеристики = Выборка.ИдентификаторХарактеристики;
		Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически    = Выборка.ОбновляетсяАвтоматически;
		Форма.РаботаСНоменклатурой_ИдентификаторКатегории      = Выборка.ИдентификаторКатегории;
		Форма.РаботаСНоменклатурой_ПредставлениеКатегории      = Выборка.ПредставлениеКатегории;

		Если Выборка.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики Тогда
			Если ОтображатьДанныеХарактеристик Тогда
				НастроитьГиперссылкуСопоставленияХарактеристик(Форма);
			КонецЕсли;
		ИначеЕсли Выборка.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление Тогда
			ЗаполнитьВстроенныеРеквизитыФормыНоменклатурыДляРежимаСопоставление(Форма, ГруппаРодитель);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВстроенныеРеквизитыФормыНоменклатурыДляРежимаСопоставление(Форма, ГруппаРодитель)
	
	Если ГруппаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для режима Сопоставление отображается только гиперссылка на характеристики.
	
	ЗаголовокПредставления = ПредставлениеСопоставленныхХарактеристик(Форма.РаботаСНоменклатурой_СсылкаНаОбъект);
	
	Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(ЗаголовокПредставления,,,,"Ссылка");
	Форма.РаботаСНоменклатурой_ИдентификаторыХарактеристик = "";
	
	Для каждого ЭлементФормы Из ГруппаРодитель.ПодчиненныеЭлементы.ГруппаСсылкаНаОбъект1СНоменклатуры.ПодчиненныеЭлементы Цикл
		
		Форма.РаботаСНоменклатурой_ЭтоРежимТолькоСопоставление = Истина;
		
		Если ЭлементФормы.Имя = "ПредставлениеНоменклатурыСервиса" Тогда
			ПодготовитьГиперссылкуПредставленияДляРежимаСопоставление(ЭлементФормы);
		Иначе
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьГиперссылкуПредставленияДляРежимаСопоставление(ЭлементФормы)
		
	ЭлементФормы.Видимость   = Истина;
	ЭлементФормы.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементФормы.Гиперссылка = Истина;
	ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
		
КонецПроцедуры

Процедура ДобавитьЭлементыФормыСервиса(Форма, ГруппаРодитель, ВыбиратьРежимОбновления = Истина)
	
	РежимПредставленияОбъектаСервиса = Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса;
	
	Если Форма.РаботаСНоменклатурой_ТипОбъекта = "Номенклатура" Тогда
		ИмяЭлемента       = "ПредставлениеНоменклатурыСервиса";
		ЗаголовокЭлемента = НСтр("ru = '1С:Номенклатура'");
	ИначеЕсли Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры" Тогда	
		ИмяЭлемента       = "ПредставлениеКатегорииСервиса";
		ЗаголовокЭлемента = НСтр("ru = 'Категория 1С:Номенклатуры'");
	КонецЕсли;
	
	ГруппаФормы                     = Форма.Элементы.Добавить("ГруппаСсылкаНаОбъект1СНоменклатуры", Тип("ГруппаФормы"), ГруппаРодитель);
	ГруппаФормы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
	Если РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		ДобавитьЭлементыФормыРежимаПолеВвода(Форма, ГруппаФормы, ИмяЭлемента, ЗаголовокЭлемента,
			ВыбиратьРежимОбновления);
	ИначеЕсли РежимПредставленияОбъектаСервиса = "Гиперссылка" Тогда	
		ДобавитьЭлементыФормыРежимаГиперссылка(Форма, ГруппаФормы, ИмяЭлемента, ЗаголовокЭлемента,
			ВыбиратьРежимОбновления);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить режим представления объекта сервиса.'")	
	КонецЕсли;	
					
КонецПроцедуры

Процедура ДобавитьЭлементыФормыРежимаГиперссылка(
			Форма, 
			ГруппаФормы, 
			ИмяЭлемента, 
			ЗаголовокЭлемента,
			ВыбиратьРежимОбновления)
	
	ПравоИзменения = ПравоИзмененияДанных();
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Гиперссылка = Ложь;
	
	НовыйЭлемент.ПутьКДанным = "РаботаСНоменклатурой_ПредставлениеОбъектаСервиса";
	НовыйЭлемент.Заголовок   = СтрШаблон(НСтр("ru = '%1'"), ЗаголовокЭлемента);		
	
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиРаботаСНоменклатурой");
	
	// Гиперссылка очистки
	
	НовыйЭлемент = Форма.Элементы.Добавить("РаботаСНоменклатурой_ОчиститьОбъектСервиса", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.Видимость = Ложь;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Очистить'");
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
	
	// Гиперссылка обновления
	Если ВыбиратьРежимОбновления Тогда
	НовыйЭлемент = Форма.Элементы.Добавить("РежимОбновления", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.Видимость = Ложь;
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
	КонецЕсли;
	
	// Иконка перечитать
	
	НовыйЭлемент             = Форма.Элементы.Добавить("РаботаСНоменклатурой_ОбновитьСейчас", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка    = БиблиотекаКартинок.Перечитать;
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой");
	НовыйЭлемент.Видимость   = ПравоИзменения;
	
	// Гиперссылка характеристик
	
	НовыйЭлемент             = Форма.Элементы.Добавить("РаботаСНоменклатурой_Характеристики", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.Видимость   = Ложь; // видимость элемента будет установлена после чтения режима загрузки характеристик
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Сопоставлено характеристик'");
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
	
	// Декорация длительной операции
	
	НовыйЭлемент          = Форма.Элементы.Добавить("РаботаСНоменклатуройДекорацияДлительнойОперации", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.Видимость = Истина;
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыРежимаПолеВвода(
			Форма, 
			ГруппаФормы, 
			ИмяЭлемента, 
			ЗаголовокЭлемента,
			ВыбиратьРежимОбновления)
	
	ПравоИзменения = ПравоИзмененияДанных();
	
	// Элемент для отображения объекта сервиса
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	НовыйЭлемент.ПутьКДанным = "РаботаСНоменклатурой_ПредставлениеОбъектаСервиса";
	НовыйЭлемент.Заголовок   = СтрШаблон(НСтр("ru = '%1'"), ЗаголовокЭлемента);
	
	// Кнопки
	
	НовыйЭлемент.КнопкаВыбора   = ПравоИзменения;
	НовыйЭлемент.КнопкаОчистки  = ПравоИзменения;
	НовыйЭлемент.КнопкаОткрытия = Истина;
	
	// Обработчики
	
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораРаботаСНоменклатурой");
	НовыйЭлемент.УстановитьДействие("Очистка",      "Подключаемый_ОчисткаРаботаСНоменклатурой");
	НовыйЭлемент.УстановитьДействие("Открытие",     "Подключаемый_ОткрытьРаботаСНоменклатурой");
	
	// Иконка режима обновления
	Если ВыбиратьРежимОбновления Тогда
	НовыйЭлемент             = Форма.Элементы.Добавить("РежимОбновления", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка    = БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой;
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой");
	НовыйЭлемент.Видимость   = ПравоИзменения;
	КонецЕсли;
	
	// Гиперссылка характеристик
	
	НовыйЭлемент             = Форма.Элементы.Добавить("РаботаСНоменклатурой_Характеристики", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.Видимость   = Ложь; // видимость элемента будет установлена после чтения режима загрузки характеристик
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Сопоставлено характеристик'");
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
	
	// Декорация длительной операции
	
	НовыйЭлемент          = Форма.Элементы.Добавить("РаботаСНоменклатуройДекорацияДлительнойОперации", Тип("ДекорацияФормы"), ГруппаФормы);
	НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяРеквизита = "РаботаСНоменклатурой_СервисДоступен";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево")));
	КонецЕсли;
	
	Если СервисДоступен Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, 
				"РаботаСНоменклатурой_ПредставлениеОбъектаСервиса") Тогда
			Возврат;
		КонецЕсли;
		
		Если РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
			ОписаниеТипаПредставления = Новый ОписаниеТипов("Строка");
		Иначе
			ОписаниеТипаПредставления = Новый ОписаниеТипов("ФорматированнаяСтрока");
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ПредставлениеОбъектаСервиса",       ОписаниеТипаПредставления));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторОбъектаСервиса",       Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ОбновляетсяАвтоматически",          Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СтрокаПоискаОбъектаСервиса",        Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ОбъектСервисаИзменен",              Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры", Новый ОписаниеТипов("СписокЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторЗадания",              Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса",  Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения",    Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ТипОбъекта",                        Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса",     Новый ОписаниеТипов("СписокЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СоздатьДополнительныеРеквизиты",    Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_АдресДанныхЗаполнения",             Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторыХарактеристик",       Новый ОписаниеТипов("СписокЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ЗакрытьФормуПослеСозданияОбъектов", Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_РежимЗагрузкиХарактеристик",        Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторХарактеристики",       Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ЭтоЗаписьОбъекта",                  Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СсылкаНаОбъект",                    Новый ОписаниеТипов("Неопределено")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ЗагрузитьИзображения",              Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ЭтоРежимТолькоСопоставление",       Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ЗаполненыДанныеАутентификации",     Новый ОписаниеТипов("Булево")));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторКатегории",            Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ПредставлениеКатегории",            Новый ОписаниеТипов("Строка")));
		
	КонецЕсли;
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхНоменклатуры

Функция РазвернутыеДанныеПоШтрихкодам(ДанныеПоШтрихкодам) Экспорт
	
	ШтрихкодыСервиса = Новый ТаблицаЗначений;
	
	ШтрихкодыСервиса.Колонки.Добавить("Штрихкод",                       Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("НаименованиеНоменклатурыПолное", Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("НаименованиеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("НаименованиеХарактеристики",     Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("ИдентификаторНоменклатуры",      Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("ИдентификаторХарактеристики",    Новый ОписаниеТипов("Строка"));
	ШтрихкодыСервиса.Колонки.Добавить("НаименованиеЕдиницыИзмерения",   Новый ОписаниеТипов("Строка"));
	
	РазвернутьШтрихкодыСервиса(ШтрихкодыСервиса, ДанныеПоШтрихкодам);
	
	Возврат ШтрихкодыСервиса;
	
КонецФункции

Процедура РазвернутьШтрихкодыСервиса(ШтрихкодыСервиса, ДанныеПоШтрихкодам)
	
	Для каждого Номенклатура Из ДанныеПоШтрихкодам Цикл
		
		Если ЗначениеЗаполнено(Номенклатура.Характеристики) Тогда
			
			// Штрихкоды переданы в разрезе характеристик.
			
			Для каждого Характеристика Из Номенклатура.Характеристики Цикл
				Для каждого Штрихкод Из Характеристика.Штрихкоды Цикл
					
					Если Не ЗначениеЗаполнено(Штрихкод) Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ШтрихкодыСервиса.Добавить();
					
					НоваяСтрока.Штрихкод                     = Штрихкод;
					НоваяСтрока.НаименованиеНоменклатурыПолное = СтрШаблон("%1, %2", Номенклатура.Наименование, Характеристика.Наименование);
					НоваяСтрока.НаименованиеНоменклатуры       = Номенклатура.Наименование;
					НоваяСтрока.НаименованиеХарактеристики     = Характеристика.Наименование;
					НоваяСтрока.ИдентификаторНоменклатуры      = Номенклатура.Идентификатор;
					НоваяСтрока.ИдентификаторХарактеристики    = Характеристика.Идентификатор;
					НоваяСтрока.НаименованиеЕдиницыИзмерения   = Номенклатура.НаименованиеЕдиницыИзмерения;
					
				КонецЦикла;
			КонецЦикла;	
		Иначе
			
			// Штрихкоды переданы в разрезе номенклатуры (характеристики не используются).
			
			Для каждого Штрихкод Из Номенклатура.Штрихкоды Цикл
				НоваяСтрока = ШтрихкодыСервиса.Добавить();
				
				НоваяСтрока.Штрихкод                       = Штрихкод;
				НоваяСтрока.НаименованиеНоменклатурыПолное = Номенклатура.Наименование;
				НоваяСтрока.НаименованиеНоменклатуры       = Номенклатура.Наименование;
				НоваяСтрока.ИдентификаторНоменклатуры      = Номенклатура.Идентификатор;
				НоваяСтрока.НаименованиеЕдиницыИзмерения   = Номенклатура.НаименованиеЕдиницыИзмерения;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеНоменклатурыСервиса(ДанныеПоНоменклатуре, Отказ)
	
	ИдентификаторПроизводителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторПроизводителя"));
	ИдентификаторБрендов        = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторБренда"));
	ИдентификаторКатегории      = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"));
	
	ЗаполнитьДанныеПоКатегориям(ИдентификаторКатегории, ДанныеПоНоменклатуре, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеПоПроизводителям(ИдентификаторПроизводителей, ДанныеПоНоменклатуре, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеПоБрендам(ИдентификаторБрендов, ДанныеПоНоменклатуре, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыХарактеристик = Новый Массив;

	ДополнитьСтруктуруДанныхНоменклатурыСервиса(ДанныеПоНоменклатуре, ИдентификаторыХарактеристик);
	
	ЗаполнитьРеквизитыИЗначенияХарактеристик(
		ИдентификаторыХарактеристик, ДанныеПоНоменклатуре, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьЛишниеКолонкиДанныхНоменклатурыСервиса(ДанныеПоНоменклатуре)
	
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторПроизводителя");
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторБренда");
	ДанныеПоНоменклатуре.Колонки.Удалить("НаименованиеПроизводителя");
	ДанныеПоНоменклатуре.Колонки.Удалить("НаименованиеБренда");
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторРекламнойЗаписи");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДанныхНоменклатурыСервиса(ТаблицаНоменклатуры, ИдентификаторыХарактеристик = Неопределено)
	
	Для каждого Номенклатура Из ТаблицаНоменклатуры Цикл
		
		Номенклатура.ВидНоменклатурыПоУмолчанию = 
			Новый Структура("ВидНоменклатуры, ЗагружатьХарактеристикиВХарактеристики, ВариантИспользованияХарактеристик", 
			Неопределено, Ложь, "");
			
		Номенклатура.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы"); // Ссылка на дополнительный реквизит
		Номенклатура.ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы"); // Ссылка на значение дополнительного реквизита

		Если ЗначениеЗаполнено(Номенклатура.Категория) Тогда
			ПреобразоватьЗначенияРеквизитов(Номенклатура.ДополнительныеРеквизиты, Номенклатура.Категория.ДополнительныеРеквизиты);	
		КонецЕсли;

		// Расшифровка характеристик
		
		Номенклатура.Характеристики.Колонки.Добавить("ДополнительныеРеквизиты", Новый ОписаниеТипов("ТаблицаЗначений"));
		
		КолонкиДополнительныхРеквизитов = Номенклатура.ДополнительныеРеквизиты.СкопироватьКолонки();
		
		Номенклатура.Характеристики.ЗаполнитьЗначения(КолонкиДополнительныхРеквизитов, "ДополнительныеРеквизиты");
		
		Если ИдентификаторыХарактеристик <> Неопределено Тогда
			Для каждого Характеристика Из Номенклатура.Характеристики Цикл
				ИдентификаторыХарактеристик.Добавить(Характеристика.Идентификатор);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторыХарактеристик) Тогда
		ИдентификаторыХарактеристик = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыХарактеристик);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИЗначенияХарактеристик(ИдентификаторыХарактеристик, ТаблицаНоменклатуры, Отказ)
		
	Если ИдентификаторыХарактеристик.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
	
	ПараметрыЗапросаХарактеристик.ИдентификаторыХарактеристик = ИдентификаторыХарактеристик;
	ПараметрыЗапросаХарактеристик.НаборПолей = "Максимальный";
	
	ДанныеХарактеристик = ДанныеХарактеристикСервиса(ПараметрыЗапросаХарактеристик, Ложь);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Номенклатура Из ТаблицаНоменклатуры Цикл
		Для каждого Характеристика Из Номенклатура.Характеристики Цикл
			
			СтрокаХарактеристики = ДанныеХарактеристик.Найти(Характеристика.Идентификатор, "Идентификатор");
			
			Если СтрокаХарактеристики = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Характеристика.ДополнительныеРеквизиты = СтрокаХарактеристики.ДополнительныеРеквизиты.Скопировать();
			
			Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
			Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы");
			
			Если ЗначениеЗаполнено(Номенклатура.Категория) Тогда
				ПреобразоватьЗначенияРеквизитов(Характеристика.ДополнительныеРеквизиты, Номенклатура.Категория.Характеристики.ДополнительныеРеквизиты);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, 
			ДанныеПоНоменклатуре, 
			ВидНоменклатуры = Неопределено, 
			ОтрабатыватьХарактеристики = Истина) Экспорт
	
	ДанныеПоНоменклатуре.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
	ДанныеПоНоменклатуре.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре.Характеристики Цикл
		ЭлементКоллекции.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
		ЭлементКоллекции.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокаСоответствияКатегория = Неопределено;
	
	Если ЗначениеЗаполнено(СоответствиеРеквизитовИЗначений) Тогда
		СтрокаСоответствияКатегория = 
			СоответствиеРеквизитовИЗначений.Строки.Найти(ДанныеПоНоменклатуре.Категория.Идентификатор, "ИдентификаторКатегории");
	КонецЕсли;
	
	Если СтрокаСоответствияКатегория = Неопределено 
		ИЛИ СтрокаСоответствияКатегория.Строки.Количество() = 0 Тогда
		
		Возврат;	
	КонецЕсли;
	
	ДанныеПоНоменклатуре.Категория.ВидыНоменклатурыИнформационнойБазы = 
		СтрокаСоответствияКатегория.Строки.ВыгрузитьКолонку("ВидНоменклатуры");
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		СтрокаСоответствияВидНоменклатуры = СтрокаСоответствияКатегория.Строки.Найти(ВидНоменклатуры, "ВидНоменклатуры");
		Если СтрокаСоответствияВидНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаСоответствияВидНоменклатуры = СтрокаСоответствияКатегория.Строки[0];
	КонецЕсли;
	
	Если СтрокаСоответствияВидНоменклатуры.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию, СтрокаСоответствияВидНоменклатуры);
	
	Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры) Тогда
		ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик
			= ВариантИспользованияХарактеристик(
				ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры);
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДанныеПоНоменклатуре.ДополнительныеРеквизиты Цикл
		ЗаполнитьСсылкиРеквизитовИЗначенийНоменклатуры(ДополнительныйРеквизит, СтрокаСоответствияВидНоменклатуры);	
	КонецЦикла;	
	
	Если ОтрабатыватьХарактеристики Тогда
		Для каждого Характеристика Из ДанныеПоНоменклатуре.Характеристики Цикл
			Для каждого ДополнительныйРеквизит Из Характеристика.ДополнительныеРеквизиты Цикл
				ЗаполнитьСсылкиРеквизитовИЗначенийНоменклатуры(ДополнительныйРеквизит, СтрокаСоответствияВидНоменклатуры);	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКатегориям(ИдентификаторыКатегории, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы          = ИдентификаторыКатегории;
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Категория Из ТаблицаКатегорий Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторКатегории", Категория.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Категория = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Категория);
			Номенклатура.Категория.Вставить("ВидыНоменклатурыИнформационнойБазы", Новый Массив);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоБрендам(ИдентификаторыБрендов, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыБрендов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаБренды();
	ПараметрыЗапроса.ИдентификаторыБрендов   = ИдентификаторыБрендов;
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаБренды(ПараметрыЗапроса);
	ТаблицаБрендов   = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Бренд Из ТаблицаБрендов Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторБренда", Бренд.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Бренд = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Бренд);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоПроизводителям(ИдентификаторыПроизводителей, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыПроизводителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыПроизводителей = ИдентификаторыПроизводителей;
	ПараметрыЗапроса.НаборПолей                   = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	ТаблицаПроизводителей    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Производитель Из ТаблицаПроизводителей Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторПроизводителя", Производитель.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Производитель = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Производитель);
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусыПроверкиНоменклатуры(ДанныеПоНоменклатуре, ИдентификаторыСПараметрами)
	
	Статусы = СтатусыПроверкиНоменклатуры();
	
	ДанныеПоНоменклатуре.Колонки.Добавить("СтатусПроверки",             Новый ОписаниеТипов("Массив"));
	ДанныеПоНоменклатуре.Колонки.Добавить("ВыбранныеХарактеристики",    Новый ОписаниеТипов("Массив"));
	ДанныеПоНоменклатуре.Колонки.Добавить("ЗагружатьВсеХарактеристики", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаНоменклатуры Из ДанныеПоНоменклатуре Цикл
		
		ДополнительныеПараметры = ИдентификаторыСПараметрами[СтрокаНоменклатуры.Идентификатор].ПараметрыСоздания;
				
		УстановитьВидНоменклатурыИРежимЗагрузкиХарактеристик(СтрокаНоменклатуры, ДополнительныеПараметры);
		
		// Вид номенклатуры не сопоставлен
		
		Если СтрокаНоменклатуры.Категория.ВидыНоменклатурыИнформационнойБазы.Количество() = 0
			И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.ВидНоменклатуры) Тогда
			СтрокаНоменклатуры.СтатусПроверки.Добавить(Статусы.НеСопоставленаКатегория);
		КонецЕсли;
		
		// Сопоставлено несколько видов номенклатуры
		
		Если СтрокаНоменклатуры.Категория.ВидыНоменклатурыИнформационнойБазы.Количество() > 1 
			И Не ЗначениеЗаполнено(ДополнительныеПараметры.ВидНоменклатуры) Тогда
			СтрокаНоменклатуры.СтатусПроверки.Добавить(Статусы.НесколькоВидовНоменклатуры);
		КонецЕсли;

		// Присутствуют характеристики.
		
		ЕстьХарактеристики = СтрокаНоменклатуры.Характеристики.Количество() > 0;
		
		Если НастройкиПодсистемы().ИспользоватьХарактеристики
			И ЕстьХарактеристики 
			И Не ДополнительныеПараметры.ХарактеристикиВыбраны Тогда
			
			СтрокаНоменклатуры.СтатусПроверки.Добавить(Статусы.ПрисутствуютХарактеристики);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ХарактеристикиВыбраны И ЕстьХарактеристики Тогда

			// Заполнение выбранных характеристик, для отображения в форме настройки загрузки.
			
			Для каждого ЭлементКоллекции Из ИдентификаторыСПараметрами[СтрокаНоменклатуры.Идентификатор].ИдентификаторыХарактеристик Цикл
				СтрокаНоменклатуры.ВыбранныеХарактеристики.Добавить(ЭлементКоллекции);
			КонецЦикла;
		КонецЕсли;

		СтрокаНоменклатуры.ЗагружатьВсеХарактеристики = ДополнительныеПараметры.ЗагружатьВсеХарактеристики;

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьФильтрыКатегорииВСервисе(Знач ИдентификаторКатегории, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение фильтров категории.
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Или ТаблицаКатегорий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Дополнительные реквизиты, дополнительные реквизиты характеристик.
	
	ДополнительныеРеквизиты = ТаблицаКатегорий[0].ДополнительныеРеквизиты;
	ДополнительныеРеквизиты.Колонки.Добавить("ЕдиницаИзмерения");
	ДополнительныеРеквизиты.Колонки.Добавить("ЭтоРеквизитХарактеристики", Новый ОписаниеТипов("Булево"));
	
	Для каждого ЭлементКоллекции Из ТаблицаКатегорий[0].Характеристики.ДополнительныеРеквизиты Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		НоваяСтрока.ЭтоРеквизитХарактеристики = Истина;
	КонецЦикла;
			
	Если ДополнительныеРеквизиты.Количество() Тогда
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаДополнительныеРеквизиты();
		ПараметрыЗапроса.Идентификаторы = ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор");
		ПараметрыЗапроса.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
		
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса);
		
		ТаблицаРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Не Отказ Тогда
			Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл 
				ДопРеквизит = ТаблицаРеквизитов.Найти(Реквизит.Идентификатор, "Идентификатор");
				Если Не ДопРеквизит = Неопределено Тогда 
					Реквизит.ЕдиницаИзмерения = ДопРеквизит.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Мерные характеристики.
	МерныеХарактеристики = ОписаниеПредставленияМерныхХарактеристик();
	
	Для каждого ЭлементКоллекции Из ТаблицаКатегорий[0].МерныеХарактеристики Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение.ЕдиницаИзмерения.Наименование) Тогда
			НоваяСтрока = ДополнительныеРеквизиты.Добавить();
			
			НоваяСтрока.Тип           = "Число";
			НоваяСтрока.Наименование  = МерныеХарактеристики.Получить(ЭлементКоллекции.Ключ);
			НоваяСтрока.Идентификатор = ЭлементКоллекции.Ключ;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Получение производителей категории.
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	Производители    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ДополнительныеРеквизиты.Сортировать("Ранг Возр, Наименование Возр");
	
	Если Не ДополнительныеРеквизиты = Неопределено
		И Не Производители = Неопределено
		И Производители.Количество() Тогда
		
		ФильтрПоПроизводителю = ДополнительныеРеквизиты.Вставить(0);
		ФильтрПоПроизводителю.Наименование  = НСтр("ru = 'Производитель'");
		ФильтрПоПроизводителю.Тип           = "Список";
		ФильтрПоПроизводителю.Идентификатор = "Производитель";
	КонецЕсли;
	
	Возврат ДополнительныеРеквизиты;
	
КонецФункции

// Получить данные по номенклатуре.
//
// Параметры:
//  ИдентификаторыНоменклатуры			 - Массив (Строка) - идентификаторы номенклатуры.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - заполнить ссылки на соответствующую номенклатуру базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данны номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуре(Знач ИдентификаторыНоменклатуры, 
			ЗаполнитьСоответствиеНоменклатуры = Ложь, 
			Отказ = Ложь, 
			КодСостояния = Неопределено) Экспорт 
	
	Если ТипЗнч(ИдентификаторыНоменклатуры) = Тип("Строка")Тогда
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыНоменклатуры);
	КонецЕсли;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ПолучитьДанныеПоНоменклатуре(
		ИдентификаторыНоменклатуры, ЗаполнитьСоответствиеНоменклатуры, Отказ, КодСостояния);
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПоНоменклатуре) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Количество() = 0 Тогда
		Возврат ДанныеПоНоменклатуре;
	КонецЕсли;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"));
	ПутьДоКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ДанныеПоНоменклатуре.Колонки.Добавить("ПутьДоКатегорий");
	Если Не Отказ Тогда 
		КоличествоЗаписей = ДанныеПоНоменклатуре.Количество();
		Для Индекс = 0 По КоличествоЗаписей-1 Цикл 
			СтрокаДанных = ДанныеПоНоменклатуре[Индекс];
			Путь = ПутьДоКатегорий[Индекс];
			Если Путь.Количество() Тогда 
				Наименования = Путь.ВыгрузитьКолонку("Наименование");
				Если Наименования.Количество() = 1 Тогда 
					СтрокаДанных.ПутьДоКатегорий = Наименования[0];
				ИначеЕсли Наименования.Количество() > 1 Тогда 
					НаименованиеКатегории = Новый Массив;
					НаименованиеКатегории.Добавить(Наименования[0]);
					МаксимальнаяДлина = 85;
					Занято = СтрДлина(Наименования[0]) + СтрДлина(Наименования[Наименования.ВГраница()]) + 9 ;
					Для ИндексПути = 1 По Наименования.Количество()-2 Цикл 
						ДлинаОбщая = Занято + СтрДлина(Наименования[ИндексПути]) + 3;
						Если ДлинаОбщая <= МаксимальнаяДлина Тогда 
							НаименованиеКатегории.Добавить(Наименования[ИндексПути]);
							Занято = Занято + СтрДлина(Наименования[ИндексПути]) + 3;
						ИначеЕсли ИндексПути < Наименования.Количество()-1 Тогда
							Если ДлинаОбщая <= 100 Тогда 
								НаименованиеКатегории.Добавить(Наименования[ИндексПути]);
							КонецЕсли;	
							НаименованиеКатегории.Добавить("...");
							Прервать;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
					НаименованиеКатегории.Добавить(Наименования[Наименования.ВГраница()]);
					СтрокаДанных.ПутьДоКатегорий = СтрСоединить(НаименованиеКатегории, " \ ");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

Процедура ПреобразоватьЗначенияРеквизитов(ДополнительныеРеквизиты, ТаблицаТипов)
	
	Для каждого ТекущийРеквизит Из ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = ТаблицаТипов.Найти(ТекущийРеквизит.Идентификатор, "Идентификатор");
		
		Если СтрокаРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрСравнить(СтрокаРеквизита.Тип, "Число") = 0 И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда
			
			ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущийРеквизит.Значение);
			
			Если ЧислоИзСтроки <> Неопределено Тогда
				ТекущийРеквизит.Значение = ЧислоИзСтроки;
			КонецЕсли;

		ИначеЕсли СтрСравнить(СтрокаРеквизита.Тип, "Булево") = 0  И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда	

			Если СтрСравнить(ТекущийРеквизит.Значение, "false") = 0 Тогда
				ТекущийРеквизит.Значение = Ложь;	
			ИначеЕсли СтрСравнить(ТекущийРеквизит.Значение, "true") = 0 Тогда
				ТекущийРеквизит.Значение = Истина;		
			КонецЕсли;
			
		ИначеЕсли СтрСравнить(СтрокаРеквизита.Тип, "Дата") = 0  И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда	
			
			ТекущийРеквизит.Значение = ДатаИзСтроки(ТекущийРеквизит.Значение);
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ДатаИзСтроки(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаДанных, "-") > 1 Тогда // ожидается формат "YYYY-MM-DDThh:mm:ss" или "YYYY-MM-DD"
		Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	Иначе
		
		ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		
		Если ЧислоИзСтроки <> Неопределено Тогда
			Результат = РаботаСНоменклатуройСлужебный.ДатаИзUnixTime(ЧислоИзСтроки);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура УстановитьВидНоменклатурыИРежимЗагрузкиХарактеристик(СтрокаНоменклатуры, ДополнительныеПараметры)
	
	// Если вид номенклатуры для загрузки не был проставлен автоматически, 
	// устанавливается вид номенклатуры выбранный пользователем.
	
	Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры)
		И ЗначениеЗаполнено(ДополнительныеПараметры.ВидНоменклатуры) Тогда
		
		СтрокаНоменклатуры.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры = ДополнительныеПараметры.ВидНоменклатуры;
		
		СтрокаНоменклатуры.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик =
			ВариантИспользованияХарактеристик(ДополнительныеПараметры.ВидНоменклатуры);

	КонецЕсли;
	
	РежимыЗагрузки = РаботаСНоменклатуройСлужебныйКлиентСервер.РежимыЗагрузкиХарактеристик();
	
	Если ВедетсяУчетПоХарактеристикам()
		И СтрокаНоменклатуры.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик <> "НеВедутся"
		И ДополнительныеПараметры.РежимЗагрузкиХарактеристик = РежимыЗагрузки.ВНаименование Тогда
		
		ДополнительныеПараметры.РежимЗагрузкиХарактеристик = РежимыЗагрузки.ВХарактеристики;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Номенклатура) Тогда
		ДополнительныеПараметры.ХарактеристикиВыбраны = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиРеквизитовИЗначенийНоменклатуры(ДополнительныйРеквизит, ДеревоСоответствий)
	
	СоответствиеРеквизита = ДеревоСоответствий.Строки.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторРеквизитаКатегории");
	
	Если СоответствиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйРеквизит.РеквизитИнформационнойБазы = СоответствиеРеквизита.РеквизитОбъекта;
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.ИдентификаторЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗначения = СоответствиеРеквизита.Строки.Найти(ДополнительныйРеквизит.ИдентификаторЗначения, "ИдентификаторЗначения");
	
	Если СоответствиеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйРеквизит.ЗначениеИнформационнойБазы = СоответствиеЗначения.ЗначениеОбъекта;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПредставленияНоменклатурыИХарактеристик

Функция ЭтоМернаяХарактеристика(Реквизит)
		
	Возврат РаботаСНоменклатуройСлужебный.
		СоответствиеИменМерныхХарактеристик().Получить(Реквизит.Идентификатор) <> Неопределено;
	
КонецФункции

Функция НаборПолейДляСпискаНоменклатуры()
	
	Возврат РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
КонецФункции

Процедура ЗаполнитьОтборыДополнительныхРеквизитов(ПараметрыЗапроса, ПараметрыПоиска, РеквизитыИсключения)
	
	Если ПараметрыПоиска.Свойство("ДополнительныеРеквизиты") Тогда
		РеквизитыИсключения.Добавить("ДополнительныеРеквизиты");
		Для Каждого Реквизит Из ПараметрыПоиска.ДополнительныеРеквизиты Цикл
			Если ЭтоМернаяХарактеристика(Реквизит) Тогда
				ПараметрыЗапроса.МерныеХарактеристики.Вставить(Реквизит.Идентификатор, Реквизит);
			Иначе
				ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.ДополнительныеРеквизиты.Добавить(), Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("РеквизитыХарактеристик") Тогда
		РеквизитыИсключения.Добавить("РеквизитыХарактеристик");
		Для Каждого Реквизит Из ПараметрыПоиска.РеквизитыХарактеристик Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.РеквизитыХарактеристик.Добавить(), Реквизит);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокНоменклатурыИХарактеристик(Знач ПараметрыПоиска, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	РеквизитыИсключения = Новый Массив;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	
	ЗаполнитьОтборыДополнительныхРеквизитов(ПараметрыЗапроса, ПараметрыПоиска, РеквизитыИсключения);
	
	Если Не ПараметрыПоиска.Свойство("НомерСтраницыДанных") Тогда
		ПараметрыПоиска.Вставить("НомерСтраницыДанных", 1);
	КонецЕсли;
	
	Если Не ПараметрыПоиска.Свойство("РежимОтображенияХарактеристик") Тогда
		ПараметрыПоиска.Вставить("РежимОтображенияХарактеристик", "Группировка");
	КонецЕсли;

	Если ПараметрыПоиска.РежимОтображенияХарактеристик = "Линейный" Тогда
		ПараметрыЗапроса.ВариантПостраничнойНавигации 
			= РаботаСНоменклатуройСлужебный.ВариантыПостраничнойНавигации().ПоХарактеристикам;
	КонецЕсли;
	
	ПараметрыЗапроса.НомерСтраницы = ПараметрыПоиска.НомерСтраницыДанных;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыПоиска,, СтрСоединить(РеквизитыИсключения, ","));
	ПараметрыЗапроса.НаборПолей = НаборПолейДляСпискаНоменклатуры();
	ПараметрыЗапроса.КоличествоЗаписей = РазмерПорцииДанныхНоменклатуры();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	
	ТаблицаНоменклатуры = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТаблицаНоменклатуры.Колонки.Добавить("ПредставлениеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл 
		Если СтрокаНоменклатуры.ЕдиницаИзмерения.Свойство("Наименование") Тогда
			СтрокаНоменклатуры.ПредставлениеЕдиницыИзмерения = СтрокаНоменклатуры.ЕдиницаИзмерения.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИспользуемыеИдентификаторы(ТаблицаНоменклатуры, "Номенклатура");
	
	ЗаполнитьСписокНоменклатуры(ТаблицаНоменклатуры, ПараметрыПоиска.РежимОтображенияХарактеристик);
		
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Процедура ЗаполнитьСписокНоменклатуры(ТаблицаНоменклатуры, РежимОтображенияХарактеристик) Экспорт
	
	Если РежимОтображенияХарактеристик = "Линейный" Тогда
		// Заполнение номенклатуры и характеристик развернутым списком
		ЗаполнитьСписокНоменклатурыЛинейно(ТаблицаНоменклатуры);
		
	ИначеЕсли РежимОтображенияХарактеристик = "Группировка" Тогда	
		// Заполнение номенклатуры с группировкой по номенклатуре
		ЗаполнитьСписокНоменклатурыСГруппировкой(ТаблицаНоменклатуры);	
		
	ИначеЕсли РежимОтображенияХарактеристик = "БезХарактеристик" Тогда	
		// Заполнение номенклатуры без характеристик
		ЗаполнитьСписокНоменклатурыБезХарактеристик(ТаблицаНоменклатуры);	
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка передачи режима отображения характеристик'");	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСписокНоменклатурыЛинейно(ТаблицаНоменклатуры)
	
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеХарактеристики",  Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("Загружена",                   Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",                Новый ОписаниеТипов("Неопределено"));
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика",              Новый ОписаниеТипов("Неопределено"));	
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ИдентификаторХарактеристики") = Неопределено Тогда
		// Если идентификаторы характеристик не переданы, номенклатура, имеющая характеристики, разворачивается по характеристикам.
		РазвернутьСтрокиПоХарактеристикам(ТаблицаНоменклатуры);
	КонецЕсли;	
		
	Идентификаторы = Новый ТаблицаЗначений; // Таблица для соединения в запросе
	
	Идентификаторы.Колонки.Добавить("Идентификатор",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	Идентификаторы.Колонки.Добавить("ИдентификаторХарактеристики", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		
	Для каждого ЭлементКоллекции Из ТаблицаНоменклатуры Цикл
		
		НоваяСтрока = Идентификаторы.Добавить();
		
		НоваяСтрока.Идентификатор = ЭлементКоллекции.ИспользуемыйИдентификатор;
		НоваяСтрока.ИдентификаторХарактеристики = ЭлементКоллекции.ИдентификаторХарактеристики;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор КАК ИдентификаторНоменклатуры,
	|	ТаблицаНоменклатуры.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ НоменклатураИХарактеристикиСервиса
	|ИЗ
	|	&НоменклатураИХарактеристики КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	МАКСИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик) КАК РежимЗагрузкиХарактеристик,
	|	МАКСИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ИдентификаторыИСсылкиНоменклатуры
	|ИЗ
	|	НоменклатураИХарактеристикиСервиса КАК НоменклатураИХарактеристикиСервиса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	&РежимСопоставление КАК РежимЗагрузкиХарактеристикСопоставление
	|ПОМЕСТИТЬ НоменклатураСопоставленнаяСХарактеристиками
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИХарактеристикиСервиса КАК НоменклатураИХарактеристикиСервиса
	|		ПО СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика <> &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НоменклатураИХарактеристикиСервиса.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ИдентификаторыИСсылкиНоменклатуры.РежимЗагрузкиХарактеристик ЕСТЬ NULL
	|				ТОГДА НоменклатураСопоставленнаяСХарактеристиками.РежимЗагрузкиХарактеристикСопоставление
	|			ИНАЧЕ ИдентификаторыИСсылкиНоменклатуры.РежимЗагрузкиХарактеристик
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК РежимЗагрузкиХарактеристик
	|ИЗ
	|	НоменклатураИХарактеристикиСервиса КАК НоменклатураИХарактеристикиСервиса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|			И НоменклатураИХарактеристикиСервиса.ИдентификаторХарактеристики = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыИСсылкиНоменклатуры КАК ИдентификаторыИСсылкиНоменклатуры
	|		ПО НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры = ИдентификаторыИСсылкиНоменклатуры.ИдентификаторНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСопоставленнаяСХарактеристиками КАК НоменклатураСопоставленнаяСХарактеристиками
	|		ПО НоменклатураИХарактеристикиСервиса.ИдентификаторНоменклатуры = НоменклатураСопоставленнаяСХарактеристиками.ИдентификаторНоменклатурыСервиса";
	
	Запрос.УстановитьПараметр("НоменклатураИХарактеристики", Идентификаторы);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",        ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Сопоставлено",                Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("РежимСопоставление",          Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеНоменклатуры = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
		
	Для каждого ЭлементКоллекции Из ТаблицаНоменклатуры Цикл
		
		СтрокиНоменклатуры = ДанныеНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
			ЭлементКоллекции.ИспользуемыйИдентификатор, ЭлементКоллекции.ИдентификаторХарактеристики));
		
		Если СтрокиНоменклатуры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры = СтрокиНоменклатуры[0];
		
		Если ЭлементКоллекции.КоличествоХарактеристик = 0 Тогда
			
			// Характеристики в сервисе не используются.
			
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
				ЭлементКоллекции.Загружена = 1;
			КонецЕсли;
		Иначе
			
			// Характеристики в сервисе используются.
			
			Если СтрокаНоменклатуры.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики
				ИЛИ СтрокаНоменклатуры.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление Тогда
				
				// Если номенклатура загружается без характеристик или была привязка номенклатуры ИБ к корневой 1С:Номенклатуре, 
				// имеющей характеристики - характеристики не доступны для загрузки.
				
				ЭлементКоллекции.Загружена = 3;
			Иначе
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
					ЭлементКоллекции.Загружена = 1;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНоменклатурыСГруппировкой(ТаблицаНоменклатуры)
	
	ТаблицаНоменклатуры.Колонки.Добавить("Загружена",    Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Неопределено"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	МАКСИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик) КАК РежимЗагрузкиХарактеристик,
	|	СУММА(ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЗагруженныхХарактеристик
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&Идентификаторы)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса";
	
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаНоменклатуры.ВыгрузитьКолонку("ИспользуемыйИдентификатор"));
	Запрос.УстановитьПараметр("Сопоставлено", Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеНоменклатуры = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
		
	Для каждого ЭлементКоллекции Из ТаблицаНоменклатуры Цикл
		
		СтрокаНоменклатуры = ДанныеНоменклатуры.Найти(ЭлементКоллекции.ИспользуемыйИдентификатор, "ИдентификаторНоменклатуры");
		
		Если СтрокаНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаНоменклатуры.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики Тогда
			
			// Режим без поддержки характеристик - номенклатура отмечается как загруженная
			
			ЭлементКоллекции.Загружена = 1;

		Иначе
			Если ЭлементКоллекции.КоличествоХарактеристик = 0 Тогда
				
				// Если характеристики не используются, проставляется флаг загружено
				
				ЭлементКоллекции.Загружена = 1;
			ИначеЕсли ЭлементКоллекции.КоличествоХарактеристик > 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.РежимЗагрузкиХарактеристик) Тогда
					
					// Если характеристики используются, проставляется флаг в зависимости от количества загруженных характеристик
					
					Если ЭлементКоллекции.КоличествоХарактеристик <> СтрокаНоменклатуры.КоличествоЗагруженныхХарактеристик Тогда
						ЭлементКоллекции.Загружена = 2;
					Иначе
						ЭлементКоллекции.Загружена = 1;
					КонецЕсли;
					
				Иначе
					
					// Если производилась привязка характеристики ИБ к номенклатуре сервиса,
					// имеющей характеристики - режим загрузки указан не будет, такая номенклатура помечается как загруженная.
					
					ЭлементКоллекции.Загружена = 1;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНоменклатурыБезХарактеристик(ТаблицаНоменклатуры)
	
	ТаблицаНоменклатуры.Колонки.Добавить("Загружена",    Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Неопределено"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&Идентификаторы)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("Идентификаторы",       ТаблицаНоменклатуры.ВыгрузитьКолонку("ИспользуемыйИдентификатор"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Сопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеНоменклатуры = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
		
	Для каждого ЭлементКоллекции Из ТаблицаНоменклатуры Цикл
		
		СтрокаНоменклатуры = ДанныеНоменклатуры.Найти(ЭлементКоллекции.ИспользуемыйИдентификатор, "ИдентификаторНоменклатуры");
		
		Если СтрокаНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЭлементКоллекции.Загружена    = 1;
		ЭлементКоллекции.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемыеИдентификаторы(ТаблицаДанных, ТипДанных)
	
	Если ТаблицаДанных.Колонки.Найти("ИспользуемыйИдентификатор") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("ИспользуемыйИдентификатор", Новый ОписаниеТипов("Строка"))
	КонецЕсли;
	
	ИдентификаторыДляПоискаСоответствия = Новый Массив;
	
	Для каждого ТекущаяНоменклатура Из ТаблицаДанных Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяНоменклатура.НазначенныеИдентификаторы) Тогда
			ТекущаяНоменклатура.ИспользуемыйИдентификатор = ТекущаяНоменклатура.Идентификатор;
			Продолжить;
		КонецЕсли;	
		
		ИдентификаторыДляПоискаСоответствия.Добавить(ТекущаяНоменклатура.Идентификатор);
		
		Для каждого ТекущийИдентификатор Из ТекущаяНоменклатура.НазначенныеИдентификаторы Цикл
			ИдентификаторыДляПоискаСоответствия.Добавить(ТекущийИдентификатор.Идентификатор);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИдентификаторыДляПоискаСоответствия.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ТипДанных = "Номенклатура" Тогда
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторНоменклатурыСервиса)
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &Характеристика
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
		
		Запрос.УстановитьПараметр("ИдентификаторНоменклатурыСервиса", ИдентификаторыДляПоискаСоответствия);
		Запрос.УстановитьПараметр("Характеристика",                   ПустаяСсылкаНаХарактеристику());
		Запрос.УстановитьПараметр("Сопоставлено",                     Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
		
	ИначеЕсли ТипДанных = "Категории" Тогда	
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторКатегории)";
		
		Запрос.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторыДляПоискаСоответствия);
		
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторОбъекта");
	
	Для каждого ТекущаяНоменклатура Из ТаблицаДанных Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяНоменклатура.НазначенныеИдентификаторы) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выгрузка.Найти(ТекущаяНоменклатура.Идентификатор) <> Неопределено Тогда
			ТекущаяНоменклатура.ИспользуемыйИдентификатор = ТекущаяНоменклатура.Идентификатор;
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекущийИдентификатор Из ТекущаяНоменклатура.НазначенныеИдентификаторы Цикл
			Если Выгрузка.Найти(ТекущийИдентификатор.Идентификатор) <> Неопределено Тогда
				ТекущаяНоменклатура.ИспользуемыйИдентификатор = ТекущийИдентификатор.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекущаяНоменклатура.ИспользуемыйИдентификатор) Тогда
			ТекущаяНоменклатура.ИспользуемыйИдентификатор = ТекущаяНоменклатура.Идентификатор;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

Процедура РазвернутьСтрокиПоХарактеристикам(ТаблицаНоменклатуры)
	
	ТаблицаНоменклатуры.Колонки.Добавить("ИдентификаторХарактеристики", Новый ОписаниеТипов("Строка"));
	
	ИтоговаяТаблицаХарактеристик = ТаблицаНоменклатуры.СкопироватьКолонки();
	
	Счетчик = 0;
	
	Пока Счетчик < ТаблицаНоменклатуры.Количество() Цикл
		
		Если ТаблицаНоменклатуры[Счетчик].КоличествоХарактеристик > 0 Тогда
						
			Для каждого ЭлементКоллекции Из ТаблицаНоменклатуры[Счетчик].Характеристики Цикл
				
				НоваяСтрока = ИтоговаяТаблицаХарактеристик.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаНоменклатуры[Счетчик], 
					"Наименование, Идентификатор, ИспользуемыйИдентификатор, ПредставлениеЕдиницыИзмерения, КоличествоХарактеристик");
				
				НоваяСтрока.ИдентификаторХарактеристики = ЭлементКоллекции.Идентификатор;
				НоваяСтрока.НаименованиеХарактеристики = ЭлементКоллекции.Наименование;

			КонецЦикла;
			
			ТаблицаНоменклатуры.Удалить(Счетчик);
			
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
	КонецЦикла;
		
	Для каждого ЭлементКоллекции Из ИтоговаяТаблицаХарактеристик Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ЭлементКоллекции);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКатегорий

Процедура ЗаполнитьСоответствиеРеквизита(ДополнительныйРеквизит, СоответствияВидаНоменклатуры)
	
	Если СоответствияВидаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение соответствий реквизитов.
	
	СоответствиеРеквизита = СоответствияВидаНоменклатуры.Строки.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторРеквизитаКатегории");
	
	Если СоответствиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ДополнительныйРеквизит.РеквизитИнформационнойБазы = СоответствиеРеквизита.РеквизитОбъекта;
	ДополнительныйРеквизит.ДатаОбновления = СоответствиеРеквизита.ДатаОбновленияРеквизита;
	
	// Заполнение соответствий значений.
	
	// Колонки со значениями может не быть, поскольку значения получаются отдельным запросом.
	
	Если ДополнительныйРеквизит.Владелец().Колонки.Найти("Значения") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныйРеквизит.Значения.Колонки.Найти("ЗначениеИнформационнойБазы") = Неопределено Тогда
		ДополнительныйРеквизит.Значения.Колонки.Добавить("ЗначениеИнформационнойБазы");
	КонецЕсли;
	
	Если ДополнительныйРеквизит.Значения.Колонки.Найти("ДатаОбновления") = Неопределено Тогда
		ДополнительныйРеквизит.Значения.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
		
	ДополнительныйРеквизит.Значения.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	
	Для каждого ТекущееЗначение Из ДополнительныйРеквизит.Значения Цикл
		
		СоответствиеЗначения = СоответствиеРеквизита.Строки.Найти(ТекущееЗначение.Идентификатор, "ИдентификаторЗначения");
		
		Если СоответствиеЗначения <> Неопределено Тогда
			ТекущееЗначение.ЗначениеИнформационнойБазы = СоответствиеЗначения.ЗначениеОбъекта;
			ТекущееЗначение.ДатаОбновления = СоответствиеЗначения.ДатаОбновленияЗначения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий)
	
	Если ТипЗнч(ТаблицаКатегорий) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИспользуемыеИдентификаторы(ТаблицаКатегорий, "Категории");
	
	ТаблицаКатегорий.Колонки.Добавить("ВидыНоменклатуры", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторКатегории)
	|ИТОГИ ПО
	|	ИдентификаторКатегории";
	
	Запрос.УстановитьПараметр("ИдентификаторКатегории", ТаблицаКатегорий.ВыгрузитьКолонку("ИспользуемыйИдентификатор"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаКатегории = ТаблицаКатегорий.Найти(Выборка.ИдентификаторКатегории, "ИспользуемыйИдентификатор");
		
		Если СтрокаКатегории <> Неопределено Тогда
			ДетальныеЗаписи = Выборка.Выбрать();
			Пока ДетальныеЗаписи.Следующий() Цикл
				СтрокаКатегории.ВидыНоменклатуры.Добавить(ДетальныеЗаписи.ВидНоменклатуры);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий, ПреобразоватьПутьВСтроку = Истина, НаборПолей = "min")
	
	Если ТипЗнч(ТаблицаКатегорий) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
		
	Если ПреобразоватьПутьВСтроку Тогда
		ТаблицаКатегорий.Колонки.Добавить("ПутьДоКатегории", Новый ОписаниеТипов("Строка"));
	Иначе
		ТаблицаКатегорий.Колонки.Добавить("ПутьДоКатегории");	
	КонецЕсли;
	
	Если ТаблицаКатегорий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор"), НаборПолей);
	ПутьДоКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ПутьДоКатегорий Цикл
		
		Если ЭлементКоллекции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторКатегории = ЭлементКоллекции[0].Идентификатор;
		
		СтрокаКатегории = ТаблицаКатегорий.Найти(ИдентификаторКатегории, "Идентификатор");
		
		Если СтрокаКатегории <> Неопределено Тогда
			
			ЭлементКоллекции.Удалить(0); // Удаление наименования конечной категории
			
			Если ПреобразоватьПутьВСтроку Тогда
				СтрокаКатегории.ПутьДоКатегории = СтрСоединить(ЭлементКоллекции.ВыгрузитьКолонку("Наименование"), " \ ");
			Иначе
				СтрокаКатегории.ПутьДоКатегории = ЭлементКоллекции.Скопировать(,"Идентификатор, Наименование, ИдентификаторРодителя");	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Идентификаторы дочерних категорий.
//
// Параметры:
//  ИдентификаторыРодительскихКатегорий	 - Массив (Строка) - идентификаторы категорий.
// 
// Возвращаемое значение:
//  Массив - идентификаторы.
//
Функция ИдентификаторыВсехДочернихЛистовыхКатегорий(ИдентификаторыРодительскихКатегорий, РасширенноеОписаниеКатегорий = Ложь) Экспорт
	
	НомерСтраницы = 1;
	ОграничениеПакетаЗапроса = 1000;
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ИдентификаторыРодительскихКатегорий;
	ПоисковыйЗапрос.ТолькоКонечныеПотомки  = Истина;
	ПоисковыйЗапрос.ТолькоПрямыеПотомки    = Ложь;
	ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	ПоисковыйЗапрос.КоличествоЗаписей = ОграничениеПакетаЗапроса;
	ПоисковыйЗапрос.НомерСтраницы = НомерСтраницы;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДочерниеЛистовыеКатегорий = Новый Массив;
	
	Если РасширенноеОписаниеКатегорий Тогда
		Для каждого ЭлементКоллекции Из ТаблицаКатегорий Цикл
			ДочерниеЛистовыеКатегорий.Добавить(
				Новый Структура("Идентификатор, Наименование", 
					ЭлементКоллекции.Идентификатор, 
					ЭлементКоллекции.Наименование))
		КонецЦикла;
	Иначе
		ДочерниеЛистовыеКатегорий = ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор");
	КонецЕсли;
	
	Пока ТаблицаКатегорий.Количество() = ОграничениеПакетаЗапроса Цикл 
		НомерСтраницы = НомерСтраницы + 1;
		
		ПоисковыйЗапрос.НомерСтраницы = НомерСтраницы;
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		Если РасширенноеОписаниеКатегорий Тогда
			Для каждого ЭлементКоллекции Из ТаблицаКатегорий Цикл
				ДочерниеЛистовыеКатегорий.Добавить(
					Новый Структура("Идентификатор, Наименование", 
						ЭлементКоллекции.Идентификатор, 
						ЭлементКоллекции.Наименование))
			КонецЦикла;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДочерниеЛистовыеКатегорий, ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор"));	
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ДочерниеЛистовыеКатегорий;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПредставлениеОбъектов

Процедура ВывестиКлассификаторы(Классификаторы, ТабличныйДокумент, Макет, КарточкаКуплена)
	
	Если Классификаторы = Неопределено
		ИЛИ Классификаторы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбластьСвойстваШапка  = Макет.ПолучитьОбласть("СвойстваШапка");
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьСвойстваШапка.Параметры.ЗаголовокШапки = НСтр("ru = 'Классификаторы'");
	ТабличныйДокумент.Вывести(ОбластьСвойстваШапка);
	
	Для каждого ЭлементКоллекции Из Классификаторы Цикл
		
		ОбластьСвойстваСтрока.Параметры.ИмяСвойства 
			= ПреобразованноеНаименованиеКлассификатора(ЭлементКоллекции.Наименование);
		
		Если КарточкаКуплена Тогда
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ЭлементКоллекции.Идентификатор;
		Иначе
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ПредставлениеСкрытогоЗначения();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока);
	КонецЦикла;
	
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока); // Пустая строка
		
КонецПроцедуры

Функция ПреобразованноеНаименованиеКлассификатора(Знач Наименование)
	
	Наименование = ВРег(Наименование);
	
	СоответствиеКлассификаторов = Новый Соответствие;
	
	СоответствиеКлассификаторов.Вставить("OKPD2",  НСтр("ru = 'ОКПД2'"));
	СоответствиеКлассификаторов.Вставить("TNVED",  НСтр("ru = 'ТН ВЭД'"));
	СоответствиеКлассификаторов.Вставить("EGAIS",  НСтр("ru = 'ЕГАИС'"));
	СоответствиеКлассификаторов.Вставить("OKVED2", НСтр("ru = 'ОКВЕД2'"));
	
	Результат = ?(СоответствиеКлассификаторов[Наименование] = Неопределено,
		Наименование,
		СоответствиеКлассификаторов[Наименование]);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиМерныеХарактеристики(ДанныеНоменклатуры, ТабличныйДокумент, Макет)
	
	МерныеХарактеристики = Новый Структура;
	
	МерныеХарактеристики.Вставить("Вес",
		Новый Структура("ПредставлениеХарактеристики, ПредставлениеЗначения",
			ОписаниеПредставленияМерныхХарактеристик().Получить("Вес"), НСтр("ru = '%1 %2'")));
		
	МерныеХарактеристики.Вставить("Объем",
		Новый Структура("ПредставлениеХарактеристики, ПредставлениеЗначения",
			ОписаниеПредставленияМерныхХарактеристик().Получить("Объем"), НСтр("ru = '%1 %2'")));
	
	МерныеХарактеристики.Вставить("Длина",
		Новый Структура("ПредставлениеХарактеристики, ПредставлениеЗначения",
			ОписаниеПредставленияМерныхХарактеристик().Получить("Длина"), НСтр("ru = '%1 %2'")));
	
	МерныеХарактеристики.Вставить("Площадь",
		Новый Структура("ПредставлениеХарактеристики, ПредставлениеЗначения",
			ОписаниеПредставленияМерныхХарактеристик().Получить("Площадь"), НСтр("ru = '%1 %2'")));
			
	МерныеХарактеристики.Вставить("КоличествоВУпаковке", 
		Новый Структура("ПредставлениеХарактеристики, ПредставлениеЗначения",
			ОписаниеПредставленияМерныхХарактеристик().Получить("КоличествоВУпаковке"), НСтр("ru = '%1 %2'")));
			
	ЗаполненныеХарактеристики = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из МерныеХарактеристики Цикл
		Если ЭлементКоллекции.Ключ = "КоличествоВУпаковке" Тогда
			Если ДанныеНоменклатуры[ЭлементКоллекции.Ключ].Количество > 0 Тогда
				ЗаполненныеХарактеристики.Добавить(ЭлементКоллекции);
			КонецЕсли;
		Иначе
			Если ДанныеНоменклатуры[ЭлементКоллекции.Ключ].ЧислительКратности > 0 Тогда
				ЗаполненныеХарактеристики.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗаполненныеХарактеристики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьСвойстваШапка  = Макет.ПолучитьОбласть("СвойстваШапка");
	
	ОбластьСвойстваШапка.Параметры.ЗаголовокШапки = НСтр("ru = 'Мерные характеристики'");
	ТабличныйДокумент.Вывести(ОбластьСвойстваШапка);
		
	Для Каждого ЭлементКоллекции Из ЗаполненныеХарактеристики Цикл
		
		ТекущаяХарактеристика = ДанныеНоменклатуры[ЭлементКоллекции.Ключ];
		
		ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
		
		Если ЭлементКоллекции.Ключ = "КоличествоВУпаковке" Тогда
			ОбластьСвойстваСтрока.Параметры.ИмяСвойства = ЭлементКоллекции.Значение.ПредставлениеХарактеристики;
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = СтрШаблон(ЭлементКоллекции.Значение.ПредставлениеЗначения,
				ТекущаяХарактеристика.Количество,
				ТекущаяХарактеристика.ЕдиницаИзмерения.Наименование);
		Иначе
			ОбластьСвойстваСтрока.Параметры.ИмяСвойства = ЭлементКоллекции.Значение.ПредставлениеХарактеристики;
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = СтрШаблон(ЭлементКоллекции.Значение.ПредставлениеЗначения,
				ТекущаяХарактеристика.ЧислительКратности,
				ТекущаяХарактеристика.ЕдиницаИзмерения.Наименование);
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока);
	КонецЦикла;
	
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока); // Пустая строка
	
КонецПроцедуры

Процедура ВывестиКоллекцию(Коллекция, Заголовок, ТабличныйДокумент, Макет, ЗаполнятьЗначение = Ложь)
	
	Если Коллекция = Неопределено
		ИЛИ Коллекция.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьСвойстваШапка  = Макет.ПолучитьОбласть("СвойстваШапка");
	
	Если ЗаполнятьЗначение Тогда
		ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	Иначе
		Если Макет.Области.Найти("СвойствоБезЗначения") = Неопределено Тогда
			ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
		Иначе
			ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойствоБезЗначения");
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСвойстваШапка.Параметры.ЗаголовокШапки = СтрШаблон(Заголовок, Коллекция.Количество());
	ТабличныйДокумент.Вывести(ОбластьСвойстваШапка, 0);
	
	Для Счетчик = 0 По ОбластьСвойстваСтрока.Параметры.Количество() - 1 Цикл
		ОбластьСвойстваСтрока.Параметры.Установить(Счетчик, Неопределено);	
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		ОбластьСвойстваСтрока.Параметры.ИмяСвойства = ЭлементКоллекции.Наименование;
		
		Если ЗаполнятьЗначение Тогда
			ЗначениеСвойства = ?(ЗначениеЗаполнено(ЭлементКоллекции.Значение), 
				ЭлементКоллекции.Значение, 
				ЭлементКоллекции.СтроковоеЗначение);

			Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) И ТипЗнч(ЭлементКоллекции.Значение) = Тип("Строка") Тогда
				Если СтрСравнить(ЭлементКоллекции.Значение, "true") = 0 Тогда
					ЗначениеСвойства = Истина;
				ИначеЕсли СтрСравнить(ЭлементКоллекции.Значение, "false") = 0 Тогда	
					ЗначениеСвойства = Ложь;
				КонецЕсли;	
			КонецЕсли;
				
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ЗначениеСвойства;	
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока, 1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИзображения(
			Изображения, 
			ОбластьКартинка, 
			ОбластьНавигацияПоКартинкам, 
			ТабличныйДокумент, 
			ДанныеИзображений,
			ИзображениеСкрыто)
	
	Если ИзображениеСкрыто Тогда
		ВывестиПустоеИзображение(ТабличныйДокумент, ОбластьКартинка);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Изображения) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ДвоичныеДанныеИзображения = РаботаСНоменклатуройСлужебный.ДвоичныеДанныеПоАдресуURL(ЭлементКоллекции.ИзображениеURL);
		
		Если ДвоичныеДанныеИзображения <> Неопределено Тогда
			ДанныеИзображений.Добавить(ДвоичныеДанныеИзображения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеИзображений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКартинка.Рисунки.Рисунок.Картинка = Новый Картинка(ДанныеИзображений[0]);
	
	Если Изображения.Количество() > 1 Тогда
		
		ОбластьКартинка.Области.ЗаголовокИзображения.Текст = 
			СтрШаблон("Изображение (%1/%2)", 1, Изображения.Количество());

	Иначе
		
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Картинка    = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Гиперссылка = Ложь;
		ОбластьКартинка.Рисунки.СледующееИзображение.Картинка     = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.СледующееИзображение.Гиперссылка  = Ложь;
		
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьКартинка);	
		
КонецПроцедуры

Функция ПредставлениеСкрытогоЗначения()
	
	Возврат НСтр("ru = 'Значение скрыто'");
	
КонецФункции

Процедура СформироватьКарточкуНоменклатуры(
			Знач ДанныеНоменклатуры,
			Знач ДанныеХарактеристики,
			Знач АдресРезультата,
			ДанныеИзображений,
			ЭтоРежимПросмотра)
		
	ПлатныеРеквизиты = Новый Структура;
	КарточкаКуплена = Ложь;
	
	ЗаполнитьПлатныеРеквизиты(ДанныеНоменклатуры, ПлатныеРеквизиты, КарточкаКуплена);
	
	// Вывод данных в табличный документ.
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
	
	ОбластьШапка                = Макет.ПолучитьОбласть("Шапка");
	ОбластьОписание             = Макет.ПолучитьОбласть("Описание");
	ОбластьКартинка             = Макет.ПолучитьОбласть("Картинка");
	ОбластьНавигацияПоКартинкам = Макет.ПолучитьОбласть("НавигацияПоКартинкам");
		
	ВывестиШапкуКарточкиНоменклатуры(ТабличныйДокумент, ОбластьШапка, ДанныеНоменклатуры, 
		ДанныеХарактеристики, ЭтоРежимПросмотра, ПлатныеРеквизиты);
	
	ВывестиКлассификаторы(ДанныеНоменклатуры.Классификаторы, ТабличныйДокумент, Макет, КарточкаКуплена);
	
	ВывестиМерныеХарактеристики(ДанныеНоменклатуры, ТабличныйДокумент, Макет);
	
	ВывестиИзображения(ДанныеНоменклатуры.Изображения, ОбластьКартинка, ОбластьНавигацияПоКартинкам, 
		ТабличныйДокумент, ДанныеИзображений, ПлатныеРеквизиты.Свойство("Изображения"));
		
	ВывестиОписаниеКарточкиНоменклатуры(ТабличныйДокумент, ОбластьОписание, ДанныеНоменклатуры, ПлатныеРеквизиты);
	
	ВывестиДополнительныеРеквизитыИХарактеристики(ДанныеНоменклатуры, ДанныеХарактеристики, 
		ТабличныйДокумент, Макет, КарточкаКуплена);
	
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	
	ОформитьСкрытыеРеквизитыВКарточкеНоменклатуры(ТабличныйДокумент, КарточкаКуплена);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьПлатныеРеквизиты(ДанныеНоменклатуры, ПлатныеРеквизиты, КарточкаКуплена)
	
	КарточкаКуплена = ДанныеНоменклатуры.ЗаполненныеРеквизиты.Количество() = 0;
	
	Если КарточкаКуплена Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Реквизит Из ДанныеНоменклатуры.ЗаполненныеРеквизиты Цикл
		ПлатныеРеквизиты.Вставить(Реквизит, ПредставлениеСкрытогоЗначения());
	КонецЦикла;
	
	ПлатныеРеквизиты.Вставить("ПутьДоКатегорий", ПредставлениеСкрытогоЗначения());
			
КонецПроцедуры

Процедура ОформитьСкрытыеРеквизитыВКарточкеНоменклатуры(ТабличныйДокумент, КарточкаКуплена)
	
	Если КарточкаКуплена Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиСкрытыхЗначений = Неопределено;
	
	Пока Истина Цикл
		
		ОбластиСкрытыхЗначений = ТабличныйДокумент.НайтиТекст(ПредставлениеСкрытогоЗначения(), ОбластиСкрытыхЗначений);
		
		Если ОбластиСкрытыхЗначений = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбластиСкрытыхЗначений.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЭДЦвет;
		ОбластиСкрытыхЗначений.Гиперссылка = Ложь;
		ОбластиСкрытыхЗначений.Расшифровка = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуКарточкиНоменклатуры(
			ТабличныйДокумент, 
			ОбластьШапка, 
			ДанныеНоменклатуры, 
			ДанныеХарактеристики, 
			ЭтоРежимПросмотра, 
			ПлатныеРеквизиты)
	
	ОбластьШапка.Параметры.Заполнить(ДанныеНоменклатуры);
	
	Если ЗначениеЗаполнено(ДанныеХарактеристики) Тогда
		ОбластьШапка.Параметры.Наименование = НаименованиеПоНоменклатуреИХарактеристике(
			ОбластьШапка.Параметры.Наименование, ДанныеХарактеристики.Наименование);
			
		СтрокаХарактеристики = ДанныеНоменклатуры.Характеристики.Найти(ДанныеХарактеристики.Идентификатор, "Идентификатор");	
		
		Если СтрокаХарактеристики <> Неопределено Тогда
			ОбластьШапка.Параметры.ШтрихКоды = СтрСоединить(СтрокаХарактеристики.ШтрихКоды, "; ");	
		КонецЕсли;
		
	Иначе
		ОбластьШапка.Параметры.ШтрихКоды = СтрСоединить(ДанныеНоменклатуры.ШтрихКоды, "; ");	
	КонецЕсли;
	
	Если ДанныеНоменклатуры.НоменклатураПрограммы.Количество() = 0 Тогда
		
		Если ПравоИзмененияДанных() И Не ЭтоРежимПросмотра Тогда
			ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = НСтр("ru = 'Загрузить'");
		Иначе
			ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = НСтр("ru = '<Не загружена>'");
			Шапка_НоменклатураПрограммы = ОбластьШапка.Область("Шапка_НоменклатураПрограммы");
			Шапка_НоменклатураПрограммы.Гиперссылка = Ложь;
			Шапка_НоменклатураПрограммы.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			Шапка_НоменклатураПрограммы.ПараметрРасшифровки = "";
		КонецЕсли;
		
	ИначеЕсли ДанныеНоменклатуры.НоменклатураПрограммы.Количество() = 1 Тогда 
		ОбластьШапка.Параметры.НоменклатураПрограммы =              ДанныеНоменклатуры.НоменклатураПрограммы[0];
		ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = ОбластьШапка.Параметры.НоменклатураПрограммы;
	Иначе
		ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = СтрШаблон(НСтр("ru = 'Список (%1)'"), ДанныеНоменклатуры.НоменклатураПрограммы.Количество());
	КонецЕсли;
	
	ОбластьШапка.Параметры.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения.Наименование;
	ОбластьШапка.Параметры.СтавкаНДС        = ПредставлениеСтавкиНДС(ДанныеНоменклатуры.СтавкаНДС);
	
	ОбластьШапка.Параметры.Заполнить(ПлатныеРеквизиты);	
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ВывестиОписаниеКарточкиНоменклатуры(ТабличныйДокумент, ОбластьОписание, ДанныеНоменклатуры, ПлатныеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатуры.Описание) 
		И Не ПлатныеРеквизиты.Свойство("Описание") Тогда
		
		Возврат;
	КонецЕсли;	
		
	ОбластьОписание.Параметры.Описание = ДанныеНоменклатуры.Описание;
	ОбластьОписание.Параметры.Заполнить(ПлатныеРеквизиты);
	ТабличныйДокумент.Вывести(ОбластьОписание);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыИХарактеристикиКатегории(ДанныеПоКатегории, ТабличныйДокумент, Макет)
	
	Если (ДанныеПоКатегории.Характеристики = Неопределено 
			ИЛИ ДанныеПоКатегории.Характеристики.Количество() = 0)
		И (ДанныеПоКатегории.ДополнительныеРеквизиты = Неопределено 
			ИЛИ ДанныеПоКатегории.ДополнительныеРеквизиты.Количество() = 0) Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ВывестиКоллекцию(ДанныеПоКатегории.ДополнительныеРеквизиты, 
		НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет);
		
	ВывестиКоллекцию(ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты, 
		НСтр("ru = 'Реквизиты характеристик (всего %1)'"), ТабличныйДокумент, Макет);
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
			
КонецПроцедуры

Процедура ВывестиДополнительныеРеквизитыИХарактеристики(ДанныеНоменклатуры, ДанныеХарактеристики, ТабличныйДокумент, Макет, КарточкаКуплена)
	
	Если (ДанныеНоменклатуры.Характеристики = Неопределено 
			ИЛИ ДанныеНоменклатуры.Характеристики.Количество() = 0)
		И (ДанныеНоменклатуры.ДополнительныеРеквизиты = Неопределено 
			ИЛИ ДанныеНоменклатуры.ДополнительныеРеквизиты.Количество() = 0) Тогда
		
		Возврат;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Если ЗначениеЗаполнено(ДанныеХарактеристики) Тогда
		
		// Если запрос идет по конкретной характеристике, выводятся дополнительные реквизиты номенклатуры и характеристики.
		
		Для каждого ТекущийРеквизит Из ДанныеХарактеристики.ДополнительныеРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры.ДополнительныеРеквизиты.Добавить(), ТекущийРеквизит);
		КонецЦикла;
		
		Если Не КарточкаКуплена Тогда // Отработка пустых строк, если карточка не куплена.
			Для каждого ЭлементКоллекции Из ДанныеНоменклатуры.ДополнительныеРеквизиты Цикл
				ЭлементКоллекции.Значение = ПредставлениеСкрытогоЗначения();
			КонецЦикла;				
		КонецЕсли;
		
		ВывестиКоллекцию(ДанныеНоменклатуры.ДополнительныеРеквизиты, 
			НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет, Истина);
	Иначе
		
		// Если отбора по характеристике нет, выводятся дополнительные реквизиты и массив характеристик номенклатуры.
		
		Если Не КарточкаКуплена Тогда // Отработка пустых строк, если карточка не куплена.
			Для каждого ЭлементКоллекции Из ДанныеНоменклатуры.ДополнительныеРеквизиты Цикл
				ЭлементКоллекции.Значение = ПредставлениеСкрытогоЗначения();
			КонецЦикла;
		КонецЕсли;
					
		ВывестиКоллекцию(ДанныеНоменклатуры.ДополнительныеРеквизиты, 
			НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет, Истина);
					
		ВывестиКоллекцию(ДанныеНоменклатуры.Характеристики, 
			НСтр("ru = 'Характеристики (всего %1)'"), ТабличныйДокумент, Макет);
			
		Если КарточкаКуплена 
			И ДанныеНоменклатуры.Характеристики.Количество() > 0 Тогда
			
			ВывестиГиперссылкуХарактеристик(ТабличныйДокумент, Макет);
		КонецЕсли;	

	КонецЕсли;

	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		
КонецПроцедуры

Процедура ВывестиГиперссылкуХарактеристик(ТабличныйДокумент, Макет)
	
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");	
	
	ОбластьСвойстваСтрока.Параметры.ИмяСвойства              = НСтр("ru = 'Показать все'");
	ОбластьСвойстваСтрока.Параметры.ИмяСвойстваРасшифровка   = "ПоказатьХарактеристики";
	ОбластьСвойстваСтрока.Области.СвойстваСтрока.Гиперссылка = Истина;
	ОбластьСвойстваСтрока.Области.СвойстваСтрока.ЦветТекста  = ЦветаСтиля.ГиперссылкаЦвет;
	ОбластьСвойстваСтрока.Области.СвойстваСтрока.Защита      = Истина;
	
	ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока);
	
КонецПроцедуры

Процедура ВывестиПустоеИзображение(ТабличныйДокумент, ОбластьКартинка)
	
	ОбластьКартинка.Параметры.ОписаниеКартинки = НСтр("ru = 'Изображение скрыто'");
	
	ОбластьКартинка.Рисунки.ПредыдущееИзображение.Картинка    = БиблиотекаКартинок.Пустая;
	ОбластьКартинка.Рисунки.ПредыдущееИзображение.Гиперссылка = Ложь;
	ОбластьКартинка.Рисунки.СледующееИзображение.Картинка     = БиблиотекаКартинок.Пустая;
	ОбластьКартинка.Рисунки.СледующееИзображение.Гиперссылка  = Ложь;
	
	ТабличныйДокумент.Вывести(ОбластьКартинка);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистрамиСоответствий

Процедура ЗаполнитьСоответствияРеквизитовИЗначений(Знач ОбъединенныеДанныеПоКатегориям, Знач ВидНоменклатуры) Экспорт
	
	СоответствиеРеквизитовИЗначений = СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ВидНоменклатуры);
	
	ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
		ОбъединенныеДанныеПоКатегориям.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
		
	ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
		ОбъединенныеДанныеПоКатегориям.Характеристики.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
		
КонецПроцедуры

Функция ПараметрыПроверкиИспользованияИдентификаторов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура",                       Неопределено);
	Результат.Вставить("Характеристика",                     Неопределено);
	Результат.Вставить("ИдентификаторНоменклатурыСервиса",   "");
	Результат.Вставить("ИдентификаторХарактеристикиСервиса", "");
	Результат.Вставить("УчитыватьПроверенные",               Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьИспользованиеИдентификаторовПриПривязке(
			НоменклатураСсылка, 
			ХарактеристикаСсылка, 
			ДанныеЗаполнения, 
			ИдентификаторыИспользуются)
	
	ПараметрыПроверки = ПараметрыПроверкиИспользованияИдентификаторов();
	ЗаполнитьЗначенияСвойств(ПараметрыПроверки, ДанныеЗаполнения);
	
	ПараметрыПроверки.Номенклатура = НоменклатураСсылка;
	ПараметрыПроверки.Характеристика = ХарактеристикаСсылка;
	
	Если ИдентификаторыИспользуются(ПараметрыПроверки) Тогда
		ИдентификаторыИспользуются = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторыИспользуются(ПараметрыПроверки) Экспорт
	
	СтатусыДляПроверки = Новый Массив;
	
	СтатусыДляПроверки.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	Если ПараметрыПроверки.УчитыватьПроверенные Тогда
		СтатусыДляПроверки.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Проверено);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатурыСервиса
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В(&СтатусыДляПроверки)";
	
	Запрос.УстановитьПараметр("Номенклатура",                       ПараметрыПроверки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",                     ПараметрыПроверки.Характеристика);
	Запрос.УстановитьПараметр("ИдентификаторНоменклатурыСервиса",   ПараметрыПроверки.ИдентификаторНоменклатурыСервиса);
	Запрос.УстановитьПараметр("ИдентификаторХарактеристикиСервиса", ПараметрыПроверки.ИдентификаторХарактеристикиСервиса);
	Запрос.УстановитьПараметр("СтатусыДляПроверки",                 СтатусыДляПроверки);
	
	// Если переданы ссылки - в выборку не попадают переданные объекты:
	
	УсловиеОтбораСсылок = "";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.Номенклатура) И ЗначениеЗаполнено(ПараметрыПроверки.Характеристика) Тогда
		УсловиеОтбораСсылок = 
			" И НЕ (СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
				| И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &Характеристика)";	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПроверки.Номенклатура) И Не ЗначениеЗаполнено(ПараметрыПроверки.Характеристика) Тогда
		УсловиеОтбораСсылок = " И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура <> &Номенклатура";
	КонецЕсли;
	
	ДополнительныйЗапросПриПривязкеХарактеристики = "";
	УсловиеИдентификатораХарактеристики           = "";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ИдентификаторХарактеристикиСервиса) Тогда
		
		УсловиеИдентификатораХарактеристики 
			= " И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = &ИдентификаторХарактеристикиСервиса";
			
		// Запрос для проверки принадлежности характеристики номенклатуре	
			
		ДополнительныйЗапросПриПривязкеХарактеристики =
		
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатурыСервиса
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В(&СтатусыДляПроверки)
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура <> &Номенклатура";
		
	КонецЕсли;
	
	ИтоговыйЗапрос = Новый Массив;
	
	ИтоговыйЗапрос.Добавить(Запрос.Текст);
	ИтоговыйЗапрос.Добавить(УсловиеОтбораСсылок);
	ИтоговыйЗапрос.Добавить(УсловиеИдентификатораХарактеристики);
	ИтоговыйЗапрос.Добавить(ДополнительныйЗапросПриПривязкеХарактеристики);
	
	Запрос.Текст = СтрСоединить(ИтоговыйЗапрос, "");
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ВидНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеРеквизитов.ОбъектСопоставления КАК ВидНоменклатуры,
	|	СоответствиеРеквизитов.РеквизитОбъекта КАК РеквизитОбъекта,
	|	СоответствиеРеквизитов.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	СоответствиеРеквизитов.ПредставлениеРеквизитаКатегории КАК ПредставлениеРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеОбъекта,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории, """") КАК ИдентификаторЗначения,
	|	СоответствиеРеквизитов.ДатаОбновления КАК ДатаОбновленияРеквизита,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновленияЗначения
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|		ПО СоответствиеРеквизитов.ОбъектСопоставления = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И СоответствиеРеквизитов.РеквизитОбъекта = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|ГДЕ
	|	СоответствиеРеквизитов.ОбъектСопоставления = &ВидНоменклатуры
	|ИТОГИ
	|	МАКСИМУМ(РеквизитОбъекта),
	|	МАКСИМУМ(ДатаОбновленияРеквизита)
	|ПО
	|	ИдентификаторРеквизитаКатегории";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений) Экспорт
	
	Если ДополнительныеРеквизиты.Колонки.Найти("РеквизитИнформационнойБазы") = Неопределено Тогда
		ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Колонки.Найти("ДатаОбновления") = Неопределено Тогда
		ДополнительныеРеквизиты.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
		
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		ЗаполнитьСоответствиеРеквизита(ДополнительныйРеквизит, СоответствиеРеквизитовИЗначений);
	КонецЦикла;
		
КонецПроцедуры

// Удаление записи по номенклатуре и характеристике из регистра соответствия.
//
// Параметры:
//  НоменклатураСсылка	 - ЛюбаяСсылка - ссылка на номенклатуру.
//  ХарактеристикаСсылка - ЛюбаяСсылка - ссылка на характеристику.
//
Процедура УдалитьСоответствиеНоменклатурыИХарактеристики(НоменклатураСсылка, ХарактеристикаСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	НаборЗаписей.Отбор.Характеристика.Установить(ХарактеристикаСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Процедура ОчиститьСоответствияПоВидуНоменклатуры(ВидНоменклатуры, Отказ = Ложь) Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		// Вид номенклатуры
		
		НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Реквизиты
		
		НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Значения
		
		НаборЗаписей = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Очистка привязки вида номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записать соответствие значений дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры		 - Ссылка - вид номенклатуры.
//  РеквизитОбъекта		 - Ссылка - дополнительный реквизит.
//  ЗначенияРеквизита	 - Ссылка - значение реквизита.
//  РежимДополнения		 - Булев - Истина, если реквизит нужно добавить.
//
Процедура ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатуры, РеквизитОбъекта, ЗначенияРеквизита, РежимДополнения = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Замещать = Не РежимДополнения;
		
		ДатаОбновления = ТекущаяДатаСеанса();
		
		НаборЗаписей = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		НаборЗаписей.Отбор.РеквизитОбъекта.Установить(РеквизитОбъекта);
		
		УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		Для каждого ЭлементКоллекции Из ЗначенияРеквизита Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеРеквизитаВидаНоменклатуры) Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				НоваяЗапись.ОбъектСопоставления                     = ВидНоменклатуры;
				НоваяЗапись.РеквизитОбъекта                         = РеквизитОбъекта;
				НоваяЗапись.Значение                                = ЭлементКоллекции.ЗначениеРеквизитаВидаНоменклатуры;
				НоваяЗапись.ИдентификаторЗначенияРеквизитаКатегории = ЭлементКоллекции. ИдентификаторЗначенияРеквизитаКатегории;
				НоваяЗапись.ПредставлениеЗначенияРеквизитаКатегории = ЭлементКоллекции.ЗначениеРеквизитаКатегории;
				НоваяЗапись.ДатаОбновления                          = ДатаОбновления;
				
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать(Замещать);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

// Установка режима обновления номенклатуры.
//
// Параметры:
//  НоменклатураБазы			 - Массив - номенклатура.
//  ОбновляетсяАвтоматически	 - Булево - режим обновления.
//
Процедура УстановитьРежимОбновленияНоменклатуры(НоменклатураБазы, ОбновляетсяАвтоматически) Экспорт
	
	Если Не ЗначениеЗаполнено(НоменклатураБазы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НоменклатураБазы) = Тип("Массив") Тогда
		НоменклатураСсылки = НоменклатураБазы;
	Иначе
		НоменклатураСсылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураБазы);	
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из НоменклатураСсылки Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(ЭлементКоллекции);
		НаборЗаписей.Отбор.Характеристика.Установить(ПустаяСсылкаНаХарактеристику());
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НаборЗаписей[0].СтатусСопоставления <> Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено 
			ИЛИ НаборЗаписей[0].РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление Тогда
			
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей[0].ОбновляетсяАвтоматически = ОбновляетсяАвтоматически;
		
		Если ОбновляетсяАвтоматически Тогда
			НаборЗаписей[0].ДатаОбновления = ТекущаяДатаСеанса();
		КонецЕсли; 
			
		НаборЗаписей.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

// Изменение даты обновления номенклатуры.
//
// Параметры:
//  НоменклатураБазы			 - Ссылка - номенклатура.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры сервиса.
//  ДатаОбновления				 - Дата - новая дата обновления.
//
Процедура ИзменитьДатуОбновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, ДатаОбновления = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураБазы);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ДатаОбновления = ?(ЗначениеЗаполнено(ДатаОбновления), ДатаОбновления, ТекущаяДатаСеанса());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Установка режима обновления вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			 - Ссылка - вид номенклатуры.
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  ОбновляетсяАвтоматически - Булево - режим обновления.
//
Процедура УстановитьРежимОбновленияВидаНоменклатуры(ВидНоменклатуры, ИдентификаторыКатегорий, ОбновляетсяАвтоматически) Экспорт
	
	Для каждого Идентификатор Из ИдентификаторыКатегорий Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
		НаборЗаписей.Отбор.ИдентификаторКатегории.Установить(Идентификатор);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписей[0].ОбновляетсяАвтоматически = ОбновляетсяАвтоматически;
		
		Если ОбновляетсяАвтоматически Тогда
			НаборЗаписей[0].ДатаОбновления = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);

	КонецЦикла;
	
КонецПроцедуры

// Изменение даты обновления вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			     - Ссылка - вид номенклатуры.
//  ИдентификаторКатегории	     - Строка - идентификатор категории.
//  ДатаОбновления				 - Дата - новая дата обновления.
//
Процедура ИзменитьДатуОбновленияВидаНоменклатуры(ВидНоменклатуры, ИдентификаторыКатегорий, ДатаОбновления = Неопределено) Экспорт
	
	НачатьТранзакцию();

	Попытка
		
		Для каждого ЭлементКоллекции Из ИдентификаторыКатегорий Цикл
			
			НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры.Ссылка);
			НаборЗаписей.Отбор.ИдентификаторКатегории.Установить(ЭлементКоллекции);
			
			УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей[0].ДатаОбновления = ?(ЗначениеЗаполнено(ДатаОбновления), ДатаОбновления, ТекущаяДатаСеанса());
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;	
				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры


// Запись соответствия реквизитов.
//
// Параметры:
//  ПараметрыСоответствия	 - ТаблицаЗначений - данные по реквизитам.
//  РежимДополнения			 - Булево - Истина, если реквизит нужно добавить.
//
Процедура ЗаписатьСоответствиеРеквизитов(ВидНоменклатуры, ПараметрыСоответствия, РежимДополнения = Ложь) Экспорт
	
	НачатьТранзакцию();

	Попытка
		
		Замещать = Не РежимДополнения;
		
		ДатаОбновления = ТекущаяДатаСеанса();
		
		НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		Для каждого ЭлементКоллекции Из ПараметрыСоответствия Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции.РеквизитОбъекта) Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				НоваяЗапись.ОбъектСопоставления = ВидНоменклатуры;
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭлементКоллекции);
				
				Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаОбновления) Тогда
					НоваяЗапись.ДатаОбновления = ДатаОбновления;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Замещать);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Запись соответствия вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры	 - Ссылка - вид номенклатуры.
//  ДанныеЗаполнения - Структура - см. ПараметрыЗаписиСоответствияВидаНоменклатуры.
//
Процедура ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаписи.ВидНоменклатуры)
		ИЛИ Не ЗначениеЗаполнено(ПараметрыЗаписи.ИдентификаторыКатегорий) Тогда
		
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения параметров записи соответствия вида номенклатуры и категории'");
	КонецЕсли;
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	ЭтоЕдинственнаяЗапись = (ПараметрыЗаписи.ИдентификаторыКатегорий.Количество() = 1);
	Если ПараметрыЗаписи.Замещать Тогда
		НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ПараметрыЗаписи.ВидНоменклатуры);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ЭтоЕдинственнаяЗапись = Истина Тогда 
		// Если запись осуществляется без замещения и количество новых идентификаторов ровно 1.
		// Дополнительно надо проверить существующие записи с другими идентификаторами
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЭтоЕдинственнаяЗапись КАК ЭтоЕдинственнаяЗапись
		|ИЗ
		|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры
		|	И СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории <> &ИдентификаторКатегории";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ПараметрыЗаписи.ВидНоменклатуры);
		Запрос.УстановитьПараметр("ИдентификаторКатегории", ПараметрыЗаписи.ИдентификаторыКатегорий[0].Значение);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЭтоЕдинственнаяЗапись = Ложь;
			Выборка               = Результат.Выбрать();
			Пока Выборка.НайтиСледующий(Новый Структура("ЭтоЕдинственнаяЗапись", Истина)) Цикл 
				// Сброс признака у всех существующих записей
				ЕдинственнаяЗапись = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЕдинственнаяЗапись, Выборка);
				ЕдинственнаяЗапись.Прочитать();
				ЕдинственнаяЗапись.ЭтоЕдинственнаяЗапись = Ложь;
				ЕдинственнаяЗапись.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ПараметрыЗаписи.ИдентификаторыКатегорий Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ПараметрыЗаписи.ВидНоменклатуры);
		НаборЗаписей.Отбор.ИдентификаторКатегории.Установить(ЭлементКоллекции.Значение);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.ВидНоменклатуры                        = ПараметрыЗаписи.ВидНоменклатуры;
		НоваяЗапись.ИдентификаторКатегории                 = ЭлементКоллекции.Значение;
		НоваяЗапись.ПредставлениеКатегории                 = ЭлементКоллекции.Представление;
		НоваяЗапись.ЗагружатьХарактеристикиВХарактеристики = ПараметрыЗаписи.ЗагружатьХарактеристикиВХарактеристики;
		НоваяЗапись.ОбновляетсяАвтоматически               = ПараметрыЗаписи.ОбновляетсяАвтоматически;
		НоваяЗапись.ЭтоГруппаКатегорий                     = ПараметрыЗаписи.ЭтоГруппаКатегорий;
		НоваяЗапись.ДатаОбновления                         = ДатаОбновления;
		
		НоваяЗапись.ЭтоЕдинственнаяЗапись                  = ЭтоЕдинственнаяЗапись;
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
			
КонецПроцедуры

Функция ПустаяТаблицаСоответствияРеквизитов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("РеквизитОбъекта",                  Новый ОписаниеТипов("Неопределено"));
	Результат.Колонки.Добавить("ИдентификаторРеквизитаКатегории",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПредставлениеРеквизитаКатегории",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаОбновления",                   Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ЯвляетсяРеквизитомХарактеристики", Новый ОписаниеТипов("Булево"));
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатурой

Функция РезультатОбновленияНоменклатуры(ОбновляемыеОбъекты)
	
	ДатыОбновленияНоменклатуры         = Новый ТаблицаЗначений;
	РезультатАнализаНоменклатуры       = Новый ТаблицаЗначений;
	РеквизитыНоменклатурыДляОбновления = Новый ТаблицаЗначений;
	ИдентификаторыНоменклатуры         = Новый Массив;
	
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("Номенклатура");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("РеквизитОбъекта");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("НовоеЗначение");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("ИдентификаторЗначения", Новый ОписаниеТипов("Строка"));
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));	
	
	Результат = Новый Структура("РезультатАнализаНоменклатуры, РеквизитыНоменклатурыДляОбновления",
		Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		
	Если ОбновляемыеОбъекты = Неопределено Тогда
		
		РаботаСНоменклатуройСлужебный.ПолучитьДатыОбновленияНоменклатуры(ДатыОбновленияНоменклатуры, Истина);
		
		Если ДатыОбновленияНоменклатуры.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли;
		
		ДанныеОбновленияПоНоменклатуре = ПолучитьИзмененияИзСервисаПоНоменклатуре(ДатыОбновленияНоменклатуры);
		
		Если Не ЗначениеЗаполнено(ДанныеОбновленияПоНоменклатуре) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ИдентификаторыНоменклатуры = ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("Идентификатор");
	Иначе 
		
		ИдентификаторНоменклатуры = ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыеОбъекты));
			
		Если ИдентификаторНоменклатуры.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли; 	
		
		ИдентификаторыНоменклатуры = ИдентификаторНоменклатуры.ВыгрузитьКолонку("ИдентификаторНоменклатурыСервиса");
	КонецЕсли; 
		
	РаботаСНоменклатуройСлужебный.РазобратьИзмененияНоменклатуры(
		ИдентификаторыНоменклатуры, 
		РезультатАнализаНоменклатуры, 
		РеквизитыНоменклатурыДляОбновления,
		ОбновляемыеОбъекты);
	
	Результат.РезультатАнализаНоменклатуры = РезультатАнализаНоменклатуры;
	Результат.РеквизитыНоменклатурыДляОбновления = РеквизитыНоменклатурыДляОбновления;
	
	Возврат Результат;
	
КонецФункции

Функция ОсновнаяЗаписьСоответствияНоменклатуры(НоменклатураСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик КАК РежимЗагрузкиХарактеристик,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеХарактеристикиСервиса КАК ПредставлениеХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("Номенклатура",         НоменклатураСсылка);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Сопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Выгрузка) Тогда
		Возврат Выгрузка[0];
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
		
КонецФункции

// Удаление записей номенклатуры из технических регистров.
//
// Параметры:
//  НоменклатураСсылка	 - ЛюбаяСсылка - ссылка на номенклатуру.
//
Процедура ОчиститьСоответствияПоНоменклатуре(НоменклатураСсылка)
	
	НачатьТранзакцию();
	
	Попытка	
	
		// Очистка соответствия.
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
				
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Очистка привязки номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Статусы проверки номенклатуры перед ее загрузкой.
// 
// Возвращаемое значение:
//   Структура - в качестве значения, представление статуса в интерфейсе.
//
Функция СтатусыПроверкиНоменклатуры() Экспорт
	
	Статусы = Новый Структура();
	
	Статусы.Вставить("НеСопоставленаКатегория",    "НеСопоставленаКатегория");
	Статусы.Вставить("НесколькоВидовНоменклатуры", "НесколькоВидовНоменклатуры");
	Статусы.Вставить("НеВсеРеквизитыСопоставлены", "НеВсеРеквизитыСопоставлены");
	Статусы.Вставить("ПрисутствуютХарактеристики", "ПрисутствуютХарактеристики");
	
	Возврат Статусы;
	
КонецФункции

Процедура ЗагрузитьХарактеристикиПоРанееСозданнойНоменклатуре(
			НоменклатураДляЗагрузкиХарактеристик, 
			ИдентификаторыНоменклатуры,
			ИдентификаторыСПараметрами, 
			СозданнаяНоменклатура, 
			КоличествоСозданныхХарактеристик)
	
	// Создание характеристик, для номенклатуры, которая в базе уже есть.	
	
	Для каждого ЭлементКоллекции Из НоменклатураДляЗагрузкиХарактеристик Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		
		ПараметрыЗагрузки = ПараметрыЗагрузкиХарактеристик();
		
		ПараметрыЗагрузки.Номенклатура                = НоменклатураДляЗагрузкиХарактеристик[Идентификатор];
		ПараметрыЗагрузки.ИдентификаторыХарактеристик = ИдентификаторыСПараметрами[Идентификатор].ИдентификаторыХарактеристик;
		ПараметрыЗагрузки.ЗагружатьВсеХарактеристики  = ИдентификаторыСПараметрами[Идентификатор].ПараметрыСоздания.ЗагружатьВсеХарактеристики;
		
		ЗагрузитьХарактеристикиПорционно(ПараметрыЗагрузки, КоличествоСозданныхХарактеристик, СозданнаяНоменклатура);
				
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИдентификаторыНоменклатуры, Идентификатор);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьНоменклатуруИХарактеристикиПродолжение(ПараметрыПроцедуры, АдресРезультата, АдресДополнительногоРезультата, КоличествоСозданныхЭлементов)
		
	ИдентификаторыНоменклатуры           = Новый Массив;       // массив для запросов к сервису
	ИдентификаторыСПараметрами           = Новый Соответствие; // данные для непосредственного создания номенклатура
	НоменклатураДляЗагрузкиХарактеристик = Новый Соответствие; // идентификаторы номенклатуры, которая уже существует в базе
	СозданнаяНоменклатура                = Новый Массив;       // массив структура созданных элементов номенклатуры
	КоличествоСозданныхХарактеристик     = 0;                  // количество созданных характеристик, для уже созданной номенклатуры
	
	УдалитьЗадействованныеИдентификаторыНоменклатуры(ПараметрыПроцедуры.Идентификаторы);
	
	ПодготовитьДанныеДляСозданияНоменклатуры(ПараметрыПроцедуры, ИдентификаторыНоменклатуры, 
		ИдентификаторыСПараметрами, НоменклатураДляЗагрузкиХарактеристик);
		
	Если НоменклатураДляЗагрузкиХарактеристик.Количество() > 0 Тогда
		ЗагрузитьХарактеристикиПоРанееСозданнойНоменклатуре(НоменклатураДляЗагрузкиХарактеристик, 
			ИдентификаторыНоменклатуры, ИдентификаторыСПараметрами, СозданнаяНоменклатура, КоличествоСозданныхХарактеристик);
	КонецЕсли;	
		
	Результат = РезультатСозданияНоменклатуры();
	
	Если ИдентификаторыНоменклатуры.Количество() = 0 Тогда // если создавались характеристики и больше объектов нет - метод завершается
				
		Результат.Создано           = КоличествоСозданныхХарактеристик;
		Результат.ДолжноБытьСоздано = КоличествоСозданныхХарактеристик;
		Результат.НовыеЭлементы     = СозданнаяНоменклатура;

		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
		Возврат;
		
	КонецЕсли;
	
	// Покупка карточек
	
	Отказ = Ложь;
	РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ); 
	
	Если Отказ Тогда 
		ВызватьИсключение НСтр("ru = 'Не удалось совершить покупку карточек'"); 
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПокупки, "ЕстьОшибки, ОписаниеОшибки");
	
	Если Результат.ЕстьОшибки Тогда 
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры);
	
	Если ДанныеПоНоменклатуре = Неопределено Тогда 
		ВызватьИсключение НСтр("ru = 'Не удалось получить данные номенклатуры'"); 
	КонецЕсли;
	
	АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымНоменклатуры(ДанныеПоНоменклатуре);
	
	РазрешеноПакетноеСоздание = РазрешеноПакетноеСозданиеНоменклатуры();
	
	ИдентификаторыНоменклатурыДляЗагрузки = Новый Массив;
	
	Если ВедетсяУчетВидовНоменклатуры() Тогда
		ПодготовитьИдентификаторыНоменклатурыДляЗагрузки(
			ДанныеПоНоменклатуре, ИдентификаторыСПараметрами, ИдентификаторыНоменклатурыДляЗагрузки);
	Иначе 
		ИдентификаторыНоменклатурыДляЗагрузки = ИдентификаторыНоменклатуры;
	КонецЕсли; 
		
	Если РазрешеноПакетноеСоздание Тогда
		
		// Если номенклатура не прошла проверку, открывается форма настройка загрузки.
		
		КоличествоЭлементовКСозданию = 0;            // количество отработанных идентификаторов номенклатуры
		НоменклатураДляЗагрузки      = Новый Массив; // массив строк таблицы данных номенклатуры
		
		Для Каждого СтрокаНоменклатуры Из ДанныеПоНоменклатуре Цикл 			
			Если ИдентификаторыНоменклатурыДляЗагрузки.Найти(СтрокаНоменклатуры.Идентификатор) <> Неопределено Тогда
				НоменклатураДляЗагрузки.Добавить(СтрокаНоменклатуры);	
			КонецЕсли;
		КонецЦикла;
		
		ЗагрузитьОтобраннуюНоменклатуру(ДанныеПоНоменклатуре, НоменклатураДляЗагрузки, 
			СозданнаяНоменклатура, ИдентификаторыСПараметрами, КоличествоЭлементовКСозданию);
				
		Результат.Создано           = СозданнаяНоменклатура.Количество() + КоличествоСозданныхХарактеристик;
		Результат.ДолжноБытьСоздано = ПараметрыПроцедуры.Идентификаторы.Количество();
		Результат.НовыеЭлементы     = СозданнаяНоменклатура;
		
		КоличествоСозданныхЭлементов = Результат.Создано;
		
		// Если в таблице данных есть строки - значит не вся номенклатура была создана.
		// Строки таблицы - данные не отработанной номенклатуры.
		
		Если ДанныеПоНоменклатуре.Количество() > 0 Тогда
			
			ИдентификаторыНоменклатуры = Новый Соответствие;
			
			Для каждого ТекущаяНоменклатура Из ДанныеПоНоменклатуре Цикл
				ИдентификаторыНоменклатуры.Вставить(ТекущаяНоменклатура.Категория.Идентификатор);
			КонецЦикла;
			
			ПоместитьВоВременноеХранилище(ДанныеПоНоменклатуре, АдресДополнительногоРезультата);
			
			Результат.НоменклатураДляАнализа              = АдресДополнительногоРезультата;
			Результат.КоличествоНоменклатурыДляНастройки  = ДанныеПоНоменклатуре.Количество();
			Результат.КоличествоКатегорийДляНастройки     = ИдентификаторыНоменклатуры.Количество();
			
		КонецЕсли;
	
	Иначе
		
		// При интерактивном создании, происходит проверка, как и при пакетном создании.
		// Если проверка не пройдена, открывается форма настройки загрузки.
		
		Если ИдентификаторыНоменклатурыДляЗагрузки.Количество() = 0 Тогда
			
			// Проверка не пройдена.
			
			ПоместитьВоВременноеХранилище(ДанныеПоНоменклатуре, АдресДополнительногоРезультата);
			
			Результат.НоменклатураДляАнализа              = АдресДополнительногоРезультата;
			Результат.КоличествоНоменклатурыДляНастройки  = 1;
			Результат.КоличествоКатегорийДляНастройки     = 1;
			
		Иначе
			
			// Проверка пройдена - происходит интерактивное создание.
			
			ПоместитьВоВременноеХранилище(ДанныеПоНоменклатуре, АдресДополнительногоРезультата);
			
			Результат.СозданиеИнтерактивно  = Истина;
			Результат.АдресДанныхЗаполнения = АдресДополнительногоРезультата;
			
		КонецЕсли;
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);	
	
КонецПроцедуры

Процедура ПодготовитьИдентификаторыНоменклатурыДляЗагрузки(
			ДанныеПоНоменклатуре, 
			ИдентификаторыСПараметрами, 
			ИдентификаторыНоменклатурыДляЗагрузки)
	
	ЗаполнитьВидНоменклатурыИЗначенияДополнительныхРеквизитов(ДанныеПоНоменклатуре, ИдентификаторыСПараметрами);
	
	УстановитьСтатусыПроверкиНоменклатуры(ДанныеПоНоменклатуре, ИдентификаторыСПараметрами);
	
	ИдентификаторыНоменклатурыДляЗагрузки = НоменклатураДляЗагрузки(ДанныеПоНоменклатуре);
		
КонецПроцедуры

Процедура ЗаполнитьВидНоменклатурыИЗначенияДополнительныхРеквизитов(ДанныеПоНоменклатуре, ИдентификаторыСПараметрами)
	
	// Если в системе ведется учет по видам номенклатуры, 
	// происходит заполнение соответствие реквизитов и значений по дополнительным реквизитам.
	
	СоответствиеРеквизитовИЗначений = Неопределено;

	ПолучитьСоответствиеРеквизитовИЗначений(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений);

	Для каждого СтрокаДанныхПоНоменклатуре Из ДанныеПоНоменклатуре Цикл
		
		ВидНоменклатуры = ИдентификаторыСПараметрами[СтрокаДанныхПоНоменклатуре.Идентификатор].ПараметрыСоздания.ВидНоменклатуры;
		
		ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(
			СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре, ВидНоменклатуры, Ложь);
			
	КонецЦикла;

КонецПроцедуры

Функция НоменклатураПоШтрихкодам(Штрихкоды, Отказ)
		
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатураПоШтрихкодам();
	ПоисковыйЗапрос.Штрихкоды = Штрихкоды;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатураПоШтрихкодам(ПоисковыйЗапрос);
	ТаблицаНоменклатуры = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат ТаблицаНоменклатуры;
		
КонецФункции

Функция ШтрихкодыНоменклатуры(Номенклатура, Характеристика)
	
	НоменклатураИХарактеристики = Новый ТаблицаЗначений;
	
	НоменклатураИХарактеристики.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	НоменклатураИХарактеристики.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	
	НоваяСтрока = НоменклатураИХарактеристики.Добавить();
	
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Характеристика = Характеристика;
	
	ДанныеПоШтрихкодам = Новый ТаблицаЗначений;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам);
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Штрихкод) Тогда
			Результат.Добавить(ЭлементКоллекции.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

Процедура УдалитьЗадействованныеИдентификаторыНоменклатуры(ИдентификаторыНоменклатуры)
	
	Идентификаторы = Новый ТаблицаЗначений;
	
	Идентификаторы.Колонки.Добавить("ИдентификаторНоменклатуры", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	Идентификаторы.Колонки.Добавить("ИдентификаторХарактеристики", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	
	Для каждого ЭлементКоллекции Из ИдентификаторыНоменклатуры Цикл
		ЗаполнитьЗначенияСвойств(Идентификаторы.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТаблицаИдентификаторов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Идентификаторы.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	Идентификаторы.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО Идентификаторы.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|			И Идентификаторы.ИдентификаторХарактеристики = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик <> &ЗагрузкиХарактеристикКакХарактеристики)
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &СтатусСопоставлено)";
	
	Запрос.УстановитьПараметр("ЗагрузкиХарактеристикКакХарактеристики", Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики);
	Запрос.УстановитьПараметр("СтатусСопоставлено",                     Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов",                 Идентификаторы);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	КоличествоЭлементовКоллекции = ИдентификаторыНоменклатуры.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		СтруктураПоиска = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики", "", "");
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ИдентификаторыНоменклатуры[Индекс]);
		
		Если Выгрузка.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			
			ИдентификаторыНоменклатуры.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСКатегориями

Функция КатегорииПоСтрокеПоиска(ПараметрыПоиска, Отказ)
	
	КоличествоЗаписей       = ПараметрыПоиска.КоличествоКатегорийВРезультате;
	НаборПолей              = ПараметрыПоиска.НаборПолей;
	ПоисковаяСтрока         = ПараметрыПоиска.СтрокаПоиска;
	ТолькоКонечныеКатегории = ПараметрыПоиска.ТолькоЛистовыеКатегории;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	
	Если НаборПолей = "Минимальный" Тогда
		ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	Иначе
		ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	КонецЕсли;
	
	ПоисковыйЗапрос.КоличествоЗаписей       = КоличествоЗаписей;
	ПоисковыйЗапрос.ПоисковаяСтрока         = ПоисковаяСтрока;
	ПоисковыйЗапрос.ТолькоКонечныеКатегории = ТолькоКонечныеКатегории;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат ТаблицаКатегорий;
			
КонецФункции

Функция ДополнительныеРеквизиты(ИдентификаторыРеквизитов = Неопределено, ИдентификаторКатегории = Неопределено, Отказ = Ложь)
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаДополнительныеРеквизиты();
	
	Если ЗначениеЗаполнено(ИдентификаторыРеквизитов) Тогда
		ПараметрыЗапроса.Идентификаторы = ИдентификаторыРеквизитов;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды  = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса);
	
	ТаблицаРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ПолноеОписаниеКатегории(Знач ИдентификаторыКатегорий, Отказ = Ложь, КодСостояния = Неопределено)
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ИдентификаторыКатегорий;
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	КодСостояния= ПараметрыКоманды.КодСостояния;
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	Возврат ТаблицаКатегорий;
		
КонецФункции

Процедура СоздатьДополнительныеОбъектыДляВидаНоменклатуры(ВидНоменклатуры, ДанныеЗаполнения, РежимДополнения = Ложь)
	
	ДанныеРеквизитов = ОбъединитьДанныеДополнительныхРеквизитов(ДанныеЗаполнения);
	
	Если РежимДополнения Тогда
		
		// Создание реквизитов и значений при привязке категорий к существующему виду номенклатуры.
		
		ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(ДанныеРеквизитов.ДополнительныеРеквизиты, 
			СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ВидНоменклатуры));
			
		ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(ДанныеРеквизитов.Характеристики.ДополнительныеРеквизиты, 
			СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ВидНоменклатуры));
			
		РаботаСНоменклатуройСлужебный.ДополнитьРеквизитыИЗначения(
			ВидНоменклатуры,
			ДанныеРеквизитов.ДополнительныеРеквизиты,
			Ложь,
			Неопределено,
			Истина);
			
		РаботаСНоменклатуройСлужебный.ДополнитьРеквизитыИЗначения(
			ВидНоменклатуры,
			ДанныеРеквизитов.Характеристики.ДополнительныеРеквизиты,
			Истина,
			Неопределено,
			Истина);
		
	Иначе
		
		// Создание реквизитов и значений при создании нового вида номенклатуры.
		
		ДополнительныеРеквизиты = ПустаяТаблицаСоответствияРеквизитов();
		
		СоздатьДополнительныеРеквизитыИЗначения(ВидНоменклатуры, ДанныеРеквизитов, ДополнительныеРеквизиты);
		
		ЗаписатьСоответствиеРеквизитов(ВидНоменклатуры, ДополнительныеРеквизиты, РежимДополнения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СохранятьИерархиюКатегорийПриЗагрузке() Экспорт
	
	Возврат НастройкиПодсистемы().СохранятьИерархиюКатегорийПриЗагрузке;
	
КонецФункции

Функция ВеткаКатегорийНоменклатуры(Знач ИдентификаторыКатегорий) Экспорт
	
	Отказ     = Ложь;
	Результат = Новый Структура;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ТолькоКорневые = Истина;
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	КорневыеКатегории = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторыКатегорий) <> Тип("Массив") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ИдентификаторыКатегорий);
	ИдентификаторыКатегорийУзлов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторыДляЗапросаКатегорий = Новый Массив;
	СоответствиеУзловИПутей           = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из ИдентификаторыКатегорийУзлов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;
				
		ИдентификаторыПути = ЭлементКоллекции.ВыгрузитьКолонку("Идентификатор");
		СоответствиеУзловИПутей.Вставить(ИдентификаторыПути[0], ИдентификаторыПути);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыДляЗапросаКатегорий, ИдентификаторыПути);
		
	КонецЦикла;
	
	ИдентификаторыДляЗапросаКатегорий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыДляЗапросаКатегорий);
	
	Если ИдентификаторыДляЗапросаКатегорий.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось построить дерево выбранных категорий'");
	КонецЕсли;
	
	ТаблицаКатегорий = ПолучитьДанныеКатегорийПоИдентификаторам(ИдентификаторыДляЗапросаКатегорий, Истина, Отказ);	
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	Результат.Вставить("ИдентификаторыКатегорийУзлов", СоответствиеУзловИПутей);
	Результат.Вставить("ТаблицаКатегорий",             ТаблицаКатегорий);
	Результат.Вставить("КорневыеКатегории",            КорневыеКатегории);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСХарактеристиками

// Функция возвращает массив режимов загрузки характеристик, которые не должны учитывать при обновлении, 
// поиска идентификаторов номенклатуры и т.д.
// 
// Возвращаемое значение:
//  Массив - массив режимов.
//
Функция РежимыЗагрузкиХарактеристикИсключения() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ПустаяСсылка());
	Результат.Добавить(Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление);
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьОсновнуюЗаписьСоответствияНоменклатуры(НоменклатураСсылка, ЗначенияЗаполнения, СоздатьЗаписьПриОтсутствии = Ложь) Экспорт 
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	НаборЗаписей.Отбор.Характеристика.Установить(ПустаяСсылкаНаХарактеристику());
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Если СоздатьЗаписьПриОтсутствии = Ложь Тогда
			Возврат;
		КонецЕсли;
		СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(НоменклатураСсылка) Тогда
			СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.СтатусСопоставления        = СтатусСопоставления;
		Запись.Номенклатура               = НоменклатураСсылка;
		Запись.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ХарактеристикиНеИспользуются;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЗначенияЗаполнения);	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ДанныеХарактеристикиКакДанныеНоменклатуры(
			СтрокаДанныхНоменклатуры, 
			ИдентификаторХарактеристики,
			НаименованиеДоИзменения,
			ДополнительныеРеквизитыДоИзменения) Экспорт
	
	СтрокаХарактеристики = 	СтрокаДанныхНоменклатуры.ДанныеХарактеристик.Найти(ИдентификаторХарактеристики);
	
	Если СтрокаХарактеристики <> Неопределено Тогда
		
		НаименованиеДоИзменения = СтрокаДанныхНоменклатуры.Наименование;
		ДополнительныеРеквизитыДоИзменения = СтрокаДанныхНоменклатуры.ДополнительныеРеквизиты.Скопировать();
		
		СтрокаДанныхНоменклатуры.Наименование = НаименованиеПоНоменклатуреИХарактеристике(
			СтрокаДанныхНоменклатуры.Наименование, СтрокаХарактеристики.Наименование);
		
		Для каждого ДополнительныйРеквизит Из СтрокаХарактеристики.ДополнительныеРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(
				СтрокаДанныхНоменклатуры.ДополнительныеРеквизиты.Добавить(), ДополнительныйРеквизит);
		КонецЦикла;	
	КонецЕсли;	
			
КонецФункции

Процедура СоздатьХарактеристики(ДанныеЗаполнения, Номенклатура, ПараметрыТекущейНоменклатуры, СозданнаяНоменклатура)
	
	ВариантИспользованияХарактеристик 
		= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик;
		
	ВидНоменклатуры 
		= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
				
	Если Не ЗначениеЗаполнено(ВариантИспользованияХарактеристик)
		И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		ВариантИспользованияХарактеристик = ВариантИспользованияХарактеристик(ВидНоменклатуры);
	КонецЕсли;	
	
	ПараметрыЗагрузки = ПараметрыЗагрузкиХарактеристик();
	
	ПараметрыЗагрузки.Номенклатура                = Номенклатура;
	ПараметрыЗагрузки.ВидНоменклатуры             = ВидНоменклатуры;
	ПараметрыЗагрузки.ИдентификаторНоменклатуры   = ДанныеЗаполнения.Идентификатор;
	ПараметрыЗагрузки.ПредставлениеНоменклатуры   = ДанныеЗаполнения.Наименование;
	ПараметрыЗагрузки.ИдентификаторыХарактеристик = ПараметрыТекущейНоменклатуры.ИдентификаторыХарактеристик;
	ПараметрыЗагрузки.ЗагружатьВсеХарактеристики  = ПараметрыТекущейНоменклатуры.ПараметрыСоздания.ЗагружатьВсеХарактеристики;
		
	ЗагрузитьХарактеристикиПорционно(ПараметрыЗагрузки, 0, СозданнаяНоменклатура);
				
КонецПроцедуры

Функция ПараметрыЗагрузкиХарактеристик()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура",                Неопределено);
	Результат.Вставить("ВидНоменклатуры",             Неопределено);
	Результат.Вставить("ИдентификаторНоменклатуры",   "");
	Результат.Вставить("ПредставлениеНоменклатуры",   "");
	Результат.Вставить("ИдентификаторыХарактеристик", Новый Массив);
	Результат.Вставить("ЗагружатьВсеХарактеристики",  Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьГиперссылкуСопоставленияХарактеристик(
			Форма, 
			КоличествоХарактеристикСопоставлено = Неопределено)
		
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Заголовок = 
		ПредставлениеСопоставленныхХарактеристик(Форма.РаботаСНоменклатурой_СсылкаНаОбъект, КоличествоХарактеристикСопоставлено);
		
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Видимость = Истина;
	
КонецПроцедуры

Процедура СоздатьПорциюХарактеристик(Номенклатура, 
			ВидНоменклатуры, 
			ДанныеХарактеристик, 
			СозданныеОбъекты, 
			ИдентификаторНоменклатуры = "")
	
	Если Не ЗначениеЗаполнено(ДанныеХарактеристик) Тогда
		Возврат;
	КонецЕсли;
	
	ВариантИспользованияХарактеристик = "";
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВариантИспользованияХарактеристик = ВариантИспользованияХарактеристик(ВидНоменклатуры);
	КонецЕсли;
	
	СозданныеОбъекты = Новый Массив;
	
	СоответствиеРеквизитов = СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ВидНоменклатуры);
	
	ЗагруженныеХарактеристики = Новый ТаблицаЗначений;
	
	Если ВариантИспользованияХарактеристик = "Общие" Тогда
		ЗагруженныеХарактеристики = ЗагруженныеХарактеристикиПоВладельцу(
			ВидНоменклатуры, ДанныеХарактеристик.ВыгрузитьКолонку("Идентификатор"));
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого ДанныеЗаполнения Из ДанныеХарактеристик Цикл
				
			ХарактеристикаСсылка = Неопределено;
			
			Если ВариантИспользованияХарактеристик = "Общие" Тогда
				
				СсылкиНаСозданныеХарактеристики = ЗагруженныеХарактеристики.НайтиСтроки(
					Новый Структура("ИдентификаторХарактеристики", ДанныеЗаполнения.Идентификатор));
					
				// Проверка наличия характеристики для текущего вида номенклатуры.
					
				Если СсылкиНаСозданныеХарактеристики.Количество() = 0 Тогда
					
					// Создание характеристик с заполнение дополнительных свойств
					
					ЗаполнитьСоответствиеДополнительныхРеквизитовНоменклатуры(ДанныеЗаполнения.ДополнительныеРеквизиты, СоответствиеРеквизитов);
					
					РаботаСНоменклатуройПереопределяемый.
						СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, ВидНоменклатуры, ХарактеристикаСсылка);
				Иначе
					// Если характеристика для текущего вида номенклатуры найдена - проставляется существующая характеристика.
					ХарактеристикаСсылка = СсылкиНаСозданныеХарактеристики[0].ХарактеристикаСсылка;
					
				КонецЕсли;
			Иначе
				// Создание индивидуальных характеристик.
				РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику(ДанныеЗаполнения, Номенклатура, ХарактеристикаСсылка);
				
			КонецЕсли;
			
			СозданныйОбъект = Новый Структура;
			
			СозданныйОбъект.Вставить("ИдентификаторХарактеристики", ДанныеЗаполнения.Идентификатор);
			СозданныйОбъект.Вставить("ИдентификаторНоменклатуры",   ИдентификаторНоменклатуры);
			СозданныйОбъект.Вставить("Характеристика",              ХарактеристикаСсылка);
			СозданныйОбъект.Вставить("Номенклатура",                Номенклатура);
			СозданныйОбъект.Вставить("ПредставлениеХарактеристики", ДанныеЗаполнения.Наименование);
			
			СозданныеОбъекты.Добавить(СозданныйОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Загрузка характеристик'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получение режима загрузки характеристик для номенклатуры.
//
// Параметры:
//  ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры сервиса.
// 
// Возвращаемое значение:
//  Ссылка, Неопределено - Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.
//
Функция РежимЗагрузкиХарактеристик(ИдентификаторНоменклатуры)
	
	// Второй подзапрос необходим для получения соответствия режима Сопоставление, 
	// когда характеристика ИБ сопоставляется с 1С:Номенклатурой, имеющей характеристики
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик КАК РежимЗагрузкиХарактеристик,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатуры
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление),
	|	2
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатуры
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",      ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Сопоставлено",              Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РежимЗагрузкиХарактеристик;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

Процедура ИсключитьЗагруженныеХарактеристики(Результат, Идентификатор, НоменклатураИсключение)
	
	ИдентификаторыДляЗапроса = Новый ТаблицаЗначений;
	
	ИдентификаторыДляЗапроса.Колонки.Добавить("ИдентификаторНоменклатуры",   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ИдентификаторыДляЗапроса.Колонки.Добавить("ИдентификаторХарактеристики", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	
	Для каждого ЭлементКоллекции Из Результат Цикл
		НоваяСтрока = ИдентификаторыДляЗапроса.Добавить();
		НоваяСтрока.ИдентификаторНоменклатуры = Идентификатор;
		НоваяСтрока.ИдентификаторХарактеристики = ЭлементКоллекции.Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИдентификаторыСервиса.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИдентификаторыСервиса.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ИдентификаторыНоменклатурыИХарактеристик
	|ИЗ
	|	&ИдентификаторыСервиса КАК ИдентификаторыСервиса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыНоменклатурыИХарактеристик.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	ИдентификаторыНоменклатурыИХарактеристик КАК ИдентификаторыНоменклатурыИХарактеристик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО ИдентификаторыНоменклатурыИХарактеристик.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|			И ИдентификаторыНоменклатурыИХарактеристик.ИдентификаторХарактеристики = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено)
	|ГДЕ
	|	(&ВсеЗаписи
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура <> &Номенклатура)";
	
	Запрос.УстановитьПараметр("ИдентификаторыСервиса", ИдентификаторыДляЗапроса);
	Запрос.УстановитьПараметр("ВсеЗаписи",             Не ЗначениеЗаполнено(НоменклатураИсключение));
	Запрос.УстановитьПараметр("Номенклатура",          НоменклатураИсключение);
	Запрос.УстановитьПараметр("Сопоставлено",          Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Счетчик = 0;
	
	Пока Счетчик < Результат.Количество() Цикл
		
		ТекущаяСтрока = Результат[Счетчик];
		
		Если Выгрузка.Найти(ТекущаяСтрока.Идентификатор, "ИдентификаторХарактеристики") <> Неопределено Тогда
			Результат.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеХарактеристикСервиса(ПараметрыМетода,  Отказ) Экспорт
	
	ИсключитьЗагруженные      = ПараметрыМетода.ИсключитьЗагруженные;
	ИдентификаторНоменклатуры = ПараметрыМетода.ИдентификаторНоменклатуры;
	НоменклатураИсключение    = ПараметрыМетода.НоменклатураИсключение;
	
	Если ЗначениеЗаполнено(ПараметрыМетода.ДополнительныеРеквизиты)
		ИЛИ ЗначениеЗаполнено(ПараметрыМетода.РеквизитыХарактеристик) Тогда
		
		// Если задан отбор по атрибутам, получение характеристик идет через 
		// запрос номенклатуры.
		
		Результат = ХарактеристикиПоЗапросуНоменклатуры(ПараметрыМетода, Отказ);
	Иначе
		
		// Если не задан отбор по атрибутам, получение характеристик идет через 
		// запрос характеристик.
				
		Результат = ХарактеристикиПоЗапросуХарактеристик(ПараметрыМетода, Отказ);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Если ИсключитьЗагруженные Тогда
		ИсключитьЗагруженныеХарактеристики(Результат, ИдентификаторНоменклатуры, НоменклатураИсключение);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыМетода.ИдентификаторКатегории) 
		ИЛИ ЗначениеЗаполнено(ПараметрыМетода.ТаблицаТипов) Тогда
		
		ПреобразоватьЗначенияХарактеристик(Результат, ПараметрыМетода);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПреобразоватьЗначенияХарактеристик(ДанныеХарактеристик, ПараметрыМетода)

	Если ЗначениеЗаполнено(ПараметрыМетода.ИдентификаторКатегории) Тогда
		
		ДанныеКатегории = ДанныеКатегорийСервиса(ПараметрыМетода.ИдентификаторКатегории);
		
		Если Не ЗначениеЗаполнено(ДанныеКатегории) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаТипов = ДанныеКатегории[0].Характеристики.ДополнительныеРеквизиты;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыМетода.ТаблицаТипов) Тогда	
		ТаблицаТипов = ПараметрыМетода.ТаблицаТипов;
	КонецЕсли;
	
	Для каждого Характеристика Из ДанныеХарактеристик Цикл
		ПреобразоватьЗначенияРеквизитов(Характеристика.ДополнительныеРеквизиты, ТаблицаТипов);
	КонецЦикла;
	
КонецПроцедуры

Функция ХарактеристикиПоЗапросуНоменклатуры(ПараметрыМетода, Отказ)
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	
	ПараметрыЗапроса.ВариантПостраничнойНавигации = РаботаСНоменклатуройСлужебный.ВариантыПостраничнойНавигации().ПоХарактеристикам;
	ПараметрыЗапроса.Идентификаторы               = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода.ИдентификаторНоменклатуры);
	ПараметрыЗапроса.НаборПолей                   = НаборПолейДляСпискаНоменклатуры();
	ПараметрыЗапроса.КоличествоЗаписей            = РазмерПорцииДанныхХарактеристик();
	
	РеквизитыИсключения = Новый Массив;
	
	ЗаполнитьОтборыДополнительныхРеквизитов(ПараметрыЗапроса, ПараметрыМетода, РеквизитыИсключения);
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыМетода, "", СтрСоединить(РеквизитыИсключения, ","));
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
		
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ 
		ИЛИ НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат Результат[0].Характеристики;
	
КонецФункции

Функция ХарактеристикиПоЗапросуХарактеристик(ПараметрыМетода, Отказ)
	
	ИдентификаторНоменклатуры   = ПараметрыМетода.ИдентификаторНоменклатуры;
	ИдентификаторыХарактеристик = ПараметрыМетода.ИдентификаторыХарактеристик;
	НаборПолей                  = ПараметрыМетода.НаборПолей;
	ЗаполнитьПризнакЗагрузки    = ПараметрыМетода.ЗаполнитьПризнакЗагрузки;
	НомерСтраницыДанных         = ПараметрыМетода.НомерСтраницыДанных;
		
	ПолеИдентификаторов = "";
	Идентификатор       = Неопределено;
	
	Если ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		ПолеИдентификаторов = "ИдентификаторНоменклатуры";
		Идентификатор = ИдентификаторНоменклатуры;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдентификаторыХарактеристик) Тогда
		ПолеИдентификаторов = "Идентификаторы";
		Идентификатор = ИдентификаторыХарактеристик;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПолеИдентификаторов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаХарактеристики();
	
	Если НаборПолей = "Минимальный" Тогда
		ПараметрыПоиска[ПолеИдентификаторов] = Идентификатор;
		ПараметрыПоиска.НаборПолей           = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	Иначе
		ПараметрыПоиска[ПолеИдентификаторов] = Идентификатор;
		ПараметрыПоиска.НаборПолей           = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	КонецЕсли;	
	
	ПараметрыПоиска.НомерСтраницы     = НомерСтраницыДанных;
	ПараметрыПоиска.КоличествоЗаписей = РазмерПорцииДанныхХарактеристик();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаХарактеристики(ПараметрыПоиска);
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция ВариантИспользованияХарактеристик(ВидНоменклатуры) Экспорт
	
	Результат = "НеВедутся";
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		РаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСопоставленныхХарактеристик(Номенклатура, 
			КоличествоХарактеристикСопоставлено = Неопределено, 
			ШаблонПредставления = "") Экспорт
	
	Если КоличествоХарактеристикСопоставлено = Неопределено Тогда
		КоличествоХарактеристикСопоставлено = КоличествоСопоставленныхХарактеристикПоНоменклатуре(Номенклатура);
	КонецЕсли;
	
	КоличествоХарактеристикВсего = 0;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьКоличествоХарактеристик(Номенклатура, КоличествоХарактеристикВсего);
	
	Если ЗначениеЗаполнено(ШаблонПредставления) Тогда
		Результат = СтрШаблон(
			ШаблонПредставления, 
				Формат(КоличествоХарактеристикСопоставлено, "ЧЦ=15; ЧН="), 
				Формат(КоличествоХарактеристикВсего, "ЧЦ=15; ЧН="))
	Иначе
		Результат = СтрШаблон(
			НСтр("ru = 'Сопоставлено характеристик: %1 из %2'"), 
				Формат(КоличествоХарактеристикСопоставлено, "ЧЦ=15; ЧН="), 
				Формат(КоличествоХарактеристикВсего, "ЧЦ=15; ЧН="))
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ПустаяСсылкаНаХарактеристику() Экспорт
	
	Результат = Неопределено;
	
	ТипХарактеристики = Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип.Типы()[0];
	
	Если ТипХарактеристики = Тип("Строка") Тогда
		Результат = "";
	Иначе
		Результат = Новый (ТипХарактеристики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяХарактеристикаСтрокойДляЗапроса() Экспорт 
	
	ЗначениеПараметра = "Неопределено";
	
	ПустаяХарактеристика = Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип.ПривестиЗначение();
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ПустаяХарактеристика) Тогда
		ЗначениеПараметра = СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", ОбщегоНазначения.ИмяТаблицыПоСсылке(ПустаяХарактеристика));
	ИначеЕсли ТипЗнч(ПустаяХарактеристика) = Тип("Строка") Тогда 
		ЗначениеПараметра = """""";
	ИначеЕсли ТипЗнч(ПустаяХарактеристика) = Тип("Число") Тогда 
		ЗначениеПараметра = "0";
	ИначеЕсли ТипЗнч(ПустаяХарактеристика) = Тип("Булево") Тогда 
		ЗначениеПараметра = "ЛОЖЬ";
	ИначеЕсли ТипЗнч(ПустаяХарактеристика) = Тип("Дата") Тогда 
		ЗначениеПараметра = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ЗагрузитьХарактеристикиПорционно(ПараметрыЗагрузки, КоличествоСозданныхОбъектов, СозданныеОбъекты = Неопределено)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.РаботаСНоменклатурой.ЗагрузкаХарактеристик");
	
	ЗагрузитьХарактеристикиПорционноПродолжение(ПараметрыЗагрузки, КоличествоСозданныхОбъектов, СозданныеОбъекты);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоСозданныхОбъектов/10);
	
КонецПроцедуры

Процедура ЗагрузитьХарактеристикиПорционноПродолжение(ПараметрыЗагрузки, КоличествоСозданныхОбъектов, СозданныеОбъекты = Неопределено)
	
	Номенклатура                = ПараметрыЗагрузки.Номенклатура;
	ВидНоменклатуры             = ПараметрыЗагрузки.ВидНоменклатуры;
	ИдентификаторНоменклатуры   = ПараметрыЗагрузки.ИдентификаторНоменклатуры;
	ПредставлениеНоменклатуры   = ПараметрыЗагрузки.ПредставлениеНоменклатуры;
	ИдентификаторыХарактеристик = ПараметрыЗагрузки.ИдентификаторыХарактеристик;
	ЗагружатьВсеХарактеристики  = ПараметрыЗагрузки.ЗагружатьВсеХарактеристики;
	
	РазмерПорцииДанных                = РазмерПорцииДанныхХарактеристик();
	ГраницаМассива                    = ?(ЗагружатьВсеХарактеристики, -1, ИдентификаторыХарактеристик.ВГраница());
	ВариантИспользованияХарактеристик = "";
	
	Если Не ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		
		ИдентификаторыНоменклатуры = ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(Номенклатура);
		СтрокаНоменклатуры = ИдентификаторыНоменклатуры.Найти(Номенклатура);
		Если СтрокаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторНоменклатуры = СтрокаНоменклатуры.ИдентификаторНоменклатурыСервиса;
		ПредставлениеНоменклатуры = СтрокаНоменклатуры.ПредставлениеНоменклатурыСервиса;
		
	КонецЕсли;
	
	Если ВидНоменклатуры = Неопределено Тогда
		РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(Номенклатура, ВидНоменклатуры);
	КонецЕсли;
	
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
	
	СозданныеХарактеристики = Новый Массив;
	
	ПараметрыМетода.НаборПолей = "Максимальный";
	НомерСтраницыДанных = 1;
	
	Пока Истина Цикл // цикл создания характеристик
				
		ПараметрыМетода.НомерСтраницыДанных = НомерСтраницыДанных;
		
		Если ЗагружатьВсеХарактеристики Тогда
			ПараметрыМетода.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
		Иначе
			ПараметрыМетода.ИдентификаторыХарактеристик = ИдентификаторыХарактеристик;
		КонецЕсли;
		
		ДанныеХарактеристик = ДанныеХарактеристикСервиса(ПараметрыМетода, Ложь);
		
		Если Не ЗначениеЗаполнено(ДанныеХарактеристик) Тогда
			Прервать;
		КонецЕсли;
		
		УдалитьЗадействованныеИдентификаторы(ИдентификаторНоменклатуры, ДанныеХарактеристик);
		
		СозданныеХарактеристики.Очистить(); // очистка массива для загрузки больших объемов
		
		СоздатьПорциюХарактеристик(Номенклатура, ВидНоменклатуры, 
			ДанныеХарактеристик, СозданныеХарактеристики, ИдентификаторНоменклатуры);
		
		ЗаписатьСоответствиеХарактеристик(Номенклатура, ИдентификаторНоменклатуры, 
			ПредставлениеНоменклатуры, СозданныеХарактеристики);
		
		КоличествоСозданныхОбъектов = КоличествоСозданныхОбъектов + СозданныеХарактеристики.Количество();
		
		НомерСтраницыДанных = НомерСтраницыДанных + 1;
				
	КонецЦикла;
	
	// Заполнение массива созданных объектов.
	
	Если СозданныеОбъекты <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из СозданныеХарактеристики Цикл
			Шаблон = РаботаСНоменклатуройСлужебныйКлиентСервер.ШаблонДанныхНоменклатуры();
			ЗаполнитьЗначенияСвойств(Шаблон, ЭлементКоллекции);
			СозданныеОбъекты.Добавить(Шаблон);
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗадействованныеИдентификаторы(Знач ИдентификаторНоменклатуры, ДанныеХарактеристик)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатурыСервиса
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса В(&ИдентификаторХарактеристикиСервиса)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ИдентификаторХарактеристикиСервиса", ДанныеХарактеристик.ВыгрузитьКолонку("Идентификатор"));
	Запрос.УстановитьПараметр("ИдентификаторНоменклатурыСервиса",   ИдентификаторНоменклатуры);
	Запрос.УстановитьПараметр("Сопоставлено",                       Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Счетчик = 0;
	
	Пока Счетчик < ДанныеХарактеристик.Количество() Цикл
		
		Если Выгрузка.Найти(ДанныеХарактеристик[Счетчик].Идентификатор, "ИдентификаторХарактеристикиСервиса") <> Неопределено Тогда
			ДанныеХарактеристик.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьПризнакЗагрузкиХарактеристик(ИдентификаторНоменклатуры, ДанныеХарактеристик)
	
	ДанныеХарактеристик.Колонки.Добавить("Загружена",      Новый ОписаниеТипов("Число"));
	ДанныеХарактеристик.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("Неопределено"));
	
	РежимЗагрузки = РежимЗагрузкиХарактеристик(ИдентификаторНоменклатуры);
	
	Если РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики 
		ИЛИ РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление Тогда
		
		// Если номенклатура характеристики была загружена в режиме без характеристик - проставляется серый флаг
		
		Для каждого ЭлементКоллекции Из ДанныеХарактеристик Цикл
			ЭлементКоллекции.Загружена = 3;
		КонецЦикла;
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса В(&ИдентификаторыХарактеристик)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = &ИдентификаторНоменклатуры
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ИдентификаторыХарактеристик", ДанныеХарактеристик.ВыгрузитьКолонку("Идентификатор"));
	Запрос.УстановитьПараметр("ИдентификаторНоменклатуры",   ИдентификаторНоменклатуры);
	Запрос.УстановитьПараметр("Сопоставлено",                Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных = ДанныеХарактеристик.Найти(Выборка.ИдентификаторХарактеристики, "Идентификатор");
		
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.Загружена = 1;
		СтрокаДанных.Характеристика = Выборка.Характеристика;
	КонецЦикла;		
		
КонецПроцедуры

Процедура ЗаписатьСоответствиеХарактеристик(Номенклатура, 
			ИдентификаторНоменклатуры, 
			ПредставлениеНоменклатуры, 
			ДанныеДляЗаписи)
	
	ДатаЗаписи = ТекущаяДатаСеанса();
	
	Для каждого ЭлементКоллекции Из ДанныеДляЗаписи Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Характеристика) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();
		
		ПараметрыЗаписи.ИдентификаторНоменклатурыСервиса   = ИдентификаторНоменклатуры;
		ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса   = ПредставлениеНоменклатуры;
		ПараметрыЗаписи.ИдентификаторХарактеристикиСервиса = ЭлементКоллекции.ИдентификаторХарактеристики;
		ПараметрыЗаписи.ПредставлениеХарактеристикиСервиса = ЭлементКоллекции.ПредставлениеХарактеристики;
		ПараметрыЗаписи.ОбновляетсяАвтоматически           = Ложь;
		ПараметрыЗаписи.ДатаОбновления                     = ДатаЗаписи;

		ЗаписатьСоответствиеНоменклатурыИХарактеристик(Номенклатура, ЭлементКоллекции.Характеристика, ПараметрыЗаписи)
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПредставленияМерныхХарактеристик()
	
	МерныеХарактеристики = Новый Соответствие;
	МерныеХарактеристики.Вставить("Вес",                 НСтр("ru = 'Вес'"));
	МерныеХарактеристики.Вставить("Длина",               НСтр("ru = 'Длина'"));
	МерныеХарактеристики.Вставить("Площадь",             НСтр("ru = 'Площадь'"));
	МерныеХарактеристики.Вставить("Объем",               НСтр("ru = 'Объем'"));
	МерныеХарактеристики.Вставить("КоличествоВУпаковке", НСтр("ru = 'Количество в упаковке'"));
	
	Возврат МерныеХарактеристики;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОбъектов

Процедура ЗаполнитьВстроенныеРеквизитыФормыНоменклатурыПриИнтерактивномСоздании(Форма, ДанныеЗаполнения)
	
	Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения 
		= Форма.Параметры.РаботаСНоменклатурой_АдресДанныхЗаполнения;
		
	ДанныеНоменклатуры = ДанныеЗаполнения[0];
		
	ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(ДанныеНоменклатуры.Наименование,,,, "Ссылка");
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Идентификатор) Тогда
		
		Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса = ДанныеНоменклатуры.Идентификатор;
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = ПредставлениеОбъектаСервиса;
		Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически    = Ложь;
		Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен        = Истина;
		Форма.Модифицированность                               = Истина;
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.Категория) Тогда
			Форма.РаботаСНоменклатурой_ИдентификаторКатегории = ДанныеНоменклатуры.Категория.Идентификатор;
			Форма.РаботаСНоменклатурой_ПредставлениеКатегории = ДанныеНоменклатуры.Категория.Наименование;
		КонецЕсли;
		
	Иначе
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.СброситьДанныеОбъектаСервиса(Форма);
		
	КонецЕсли;
	
	// Если номенклатура открывается в режиме интерактивного создания и в сервисе есть
	// характеристики, происходит настройка формы для визуализации предстоящего процесса
	// создания характеристик.
	
	Если ДанныеЗаполнения.Колонки.Найти("ВыбранныеХарактеристики") <> Неопределено Тогда
		НастроитьФормуНоменклатурыДляЗагрузкиХарактеристик(Форма, ДанныеНоменклатуры);
	КонецЕсли;

КонецПроцедуры

Процедура НастроитьФормуНоменклатурыДляЗагрузкиХарактеристик(Форма, ДанныеНоменклатуры)
	
	Если ДанныеНоменклатуры.ЗагружатьВсеХарактеристики Тогда
		Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Все";
	ИначеЕсли ЗначениеЗаполнено(ДанныеНоменклатуры.ВыбранныеХарактеристики) Тогда	
		Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Выбранные";
		Форма.РаботаСНоменклатурой_ИдентификаторыХарактеристик.ЗагрузитьЗначения(ДанныеНоменклатуры.ВыбранныеХарактеристики);
	КонецЕсли;

	Если РаботаСНоменклатуройСлужебныйКлиентСервер.БудутЗагружатьсяХарактеристики(Форма) Тогда
		НастроитьГиперссылкуХарактеристикПослеЗаполнения(Форма, ДанныеНоменклатуры.КоличествоХарактеристик);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНоменклатурыВФорме(Форма, ДанныеЗаполнения)
	
	ДанныеЗаполнения = ПолучитьДанныеИзВременногоХранилища(
		Форма.Параметры.РаботаСНоменклатурой_АдресДанныхЗаполнения, Тип("ТаблицаЗначений"));
		
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме(Форма, Неопределено, ДанныеЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормыВидаНоменклатуры(Форма, ПараметрыЗакрытияФормы)
	
	Если ПараметрыЗакрытияФормы.АвтоматическийРежимОбновления Тогда
		НастроитьФормуПриАвтоматическомОбновлении(Форма);
		Возврат;	
	КонецЕсли;
	
	// Заполнение объекта
	
	ТребуетсяСоздатьРеквизиты = Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_СсылкаНаОбъект) 
		И ЗначениеЗаполнено(ПараметрыЗакрытияФормы.АдресДанныхКатегории);
		
	ИзмененРежимОбновления            = Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически = Истина;
	ИзмененРежимЗагрузкиХарактеристик = Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик <> ПараметрыЗакрытияФормы.РежимЗагрузкиХарактеристик;
	
	Форма.РаботаСНоменклатурой_СоздатьДополнительныеРеквизиты = ТребуетсяСоздатьРеквизиты;
	Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения          = ПараметрыЗакрытияФормы.АдресДанныхКатегории;
	Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик     = ПараметрыЗакрытияФормы.РежимЗагрузкиХарактеристик;
	Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически       = Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_СсылкаНаОбъект);
	ИдентификаторыКатегорий                                   = ПараметрыЗакрытияФормы.ИдентификаторыКатегорий;
	
	ИдентификаторыДоЗаполнения = Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.ВыгрузитьЗначения();
	
	ПредставленияКатегорий = Новый Массив;
	
	Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = "";
	Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Очистить();
	
	Для каждого ЭлементКоллекции Из ИдентификаторыКатегорий Цикл
		ПредставленияКатегорий.Добавить(ЭлементКоллекции.Представление);
		Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
	КонецЦикла;
	
	ИдентификаторыПослеЗаполнения = Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.ВыгрузитьЗначения();
	
	Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = СтрСоединить(ПредставленияКатегорий, "; ");
	Иначе
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(СтрСоединить(ПредставленияКатегорий, "; "),,,, "Ссылка");
	КонецЕсли;
	
	// Если поменялся перечень категорий или был изменен режим обновления, 
	// или статус изменения уже был установлен - объект помечается как измененный.
	
	Если Не Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен Тогда
		
		Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен = 
			Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(ИдентификаторыДоЗаполнения, ИдентификаторыПослеЗаполнения)
			ИЛИ ИзмененРежимОбновления
			ИЛИ ИзмененРежимЗагрузкиХарактеристик;		
			
	КонецЕсли;
			
	Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		РежимОбновленияДоступность = ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса)
			Или ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса);	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Доступность", РежимОбновленияДоступность);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Картинка", БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой);			
	Иначе
		РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);
	КонецЕсли;
	
	Если Не ПараметрыЗакрытияФормы.Свойство("ТаблицаОтличий") 
		ИЛИ Не ЭтоАдресВременногоХранилища(ПараметрыЗакрытияФормы.ТаблицаОтличий) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТаблицаОтличий = ПолучитьИзВременногоХранилища(ПараметрыЗакрытияФормы.ТаблицаОтличий);
	
	Если ТипЗнч(ТаблицаОтличий) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКатегорий = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыЗакрытияФормы.АдресДанныхКатегории) Тогда
		ДанныеКатегорий = ПолучитьИзВременногоХранилища(ПараметрыЗакрытияФормы.АдресДанныхКатегории);
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатурыВФорме(Форма, ТаблицаОтличий, ДанныеКатегорий);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормыНоменклатуры(Форма, Знач ПараметрыЗакрытияФормы)
	
	Перем ДанныеДляЗаполнения, ДанныеНоменклатуры;
	
	Если ТипЗнч(ПараметрыЗакрытияФормы) = Тип("Строка") Тогда
		ПараметрыЗакрытияФормы = ДанныеВременногоХранилища(ПараметрыЗакрытияФормы);
		Если ПараметрыЗакрытияФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеДляЗаполнения = ПараметрыЗакрытияФормы.ТаблицаОтличий;
		ДанныеНоменклатуры = ПараметрыЗакрытияФормы.ДанныеСервиса;
		
		ПараметрыЗакрытияФормы.Вставить("АдресДанныхНоменклатуры", 
			ПоместитьВоВременноеХранилище(ДанныеНоменклатуры, Форма.УникальныйИдентификатор));
	ИначеЕсли ПараметрыЗакрытияФормы.АвтоматическийРежимОбновления Тогда
		
		НастроитьФормуПриАвтоматическомОбновлении(Форма);
		Возврат;
	
	Иначе
		ДанныеНоменклатуры = ПолучитьИзВременногоХранилища(ПараметрыЗакрытияФормы.АдресДанныхНоменклатуры);
		Если ПараметрыЗакрытияФормы.Свойство("ТаблицаОтличий") Тогда 
			ДанныеДляЗаполнения = ДанныеВременногоХранилища(ПараметрыЗакрытияФормы.ТаблицаОтличий);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТехническиеРеквизитыФормыНоменклатуры(Форма, ПараметрыЗакрытияФормы);
	
	Если ТипЗнч(ДанныеДляЗаполнения) <> Тип("ТаблицаЗначений") 
		Или ДанныеДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме(Форма, 
		ДанныеДляЗаполнения.Скопировать(
			Новый Структура("Пометка, ЭтоДополнительныйРеквизит", Истина, Ложь)), ДанныеНоменклатуры);
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, 
		ДанныеДляЗаполнения.Скопировать(
			Новый Структура("Пометка, ЭтоДополнительныйРеквизит", Истина, Истина)));
	
КонецПроцедуры


Процедура ЗаполнитьТехническиеРеквизитыФормыНоменклатуры(Форма, ПараметрыФормы)

	Если Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса <> ПараметрыФормы.ИдентификаторНоменклатуры Тогда
		Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен = Истина;
	КонецЕсли;

	Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик  = ПараметрыФормы.РежимЗагрузкиХарактеристик;
	Форма.РаботаСНоменклатурой_ИдентификаторыХарактеристик = ПараметрыФормы.ИдентификаторыХарактеристик;
	Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса = ПараметрыФормы.ИдентификаторНоменклатуры;
	Форма.РаботаСНоменклатурой_ИдентификаторХарактеристики = ПараметрыФормы.ИдентификаторХарактеристики;
	Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически = Не ЗначениеЗаполнено(
		Форма.РаботаСНоменклатурой_СсылкаНаОбъект);
	Форма.РаботаСНоменклатурой_ЗагрузитьИзображения        = ПараметрыФормы.ЗагрузитьИзображения;
	Форма.РаботаСНоменклатурой_ИдентификаторКатегории      = ПараметрыФормы.ИдентификаторКатегории;
	Форма.РаботаСНоменклатурой_ПредставлениеКатегории      = ПараметрыФормы.НаименованиеКатегории;

	Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения = ПараметрыФормы.АдресДанныхНоменклатуры;

	Форма.Модифицированность = Истина;
	
	// Отображение гиперссылки характеристик, если характеристики будут созданы.
	
	Если РаботаСНоменклатуройСлужебныйКлиентСервер.БудутЗагружатьсяХарактеристики(Форма) Тогда
		НастроитьГиперссылкуХарактеристикПослеЗаполнения(Форма, ПараметрыФормы.КоличествоХарактеристик);	
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = ПараметрыФормы.НаименованиеНоменклатуры;
		
		РежимОбновленияДоступность 
			= ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса)
				ИЛИ ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса);	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Доступность", РежимОбновленияДоступность);
		РежимОбновленияКартинка = 
			?(Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически, 
				БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой, 
				БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Картинка", РежимОбновленияКартинка);
	Иначе
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = 
			Новый ФорматированнаяСтрока(ПараметрыФормы.НаименованиеНоменклатуры,,,, "Ссылка");
	
		РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВстроенныеРеквизитыФормыВидаНоменклатурыПриИнтерактивномСоздании(Форма)
	
	Форма.РаботаСНоменклатурой_СоздатьДополнительныеРеквизиты = Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_СсылкаНаОбъект);
	Форма.РаботаСНоменклатурой_ОбъектСервисаИзменен           = Истина;
	Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически       = Истина;
	
	ДанныеЗаполнения = ПолучитьДанныеИзВременногоХранилища(
		Форма.Параметры.РаботаСНоменклатурой_АдресДанныхЗаполнения, Тип("ТаблицаЗначений"));
	
	Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения = Форма.Параметры.РаботаСНоменклатурой_АдресДанныхЗаполнения;
	
	Наименования = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеЗаполнения Цикл
		Наименования.Добавить(ЭлементКоллекции.Наименование);
		Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Добавить(
			ЭлементКоллекции.Идентификатор, ЭлементКоллекции.Наименование);
	КонецЦикла;
		
	Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса 
		= Новый ФорматированнаяСтрока(СтрСоединить(Наименования, "; "),,,, "Ссылка");
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатурыВФорме(Форма, Неопределено, ДанныеЗаполнения);

КонецПроцедуры

#КонецОбласти

#Область Биллинг

Функция ЕстьДоступныеОпции(Отказ)
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроверкаОпции();
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийБаланс(Отказ)
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаБалансОпций();
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкаФорм

Функция СтатусыВеденияУчетаХарактеристик() Экспорт
	
	Статусы = Новый Структура;
	
	Статусы.Вставить("НеВедутся");
	Статусы.Вставить("Индивидуальные");
	Статусы.Вставить("Общие");
	
	Для каждого ЭлементКоллекции Из Статусы Цикл
		Статусы[ЭлементКоллекции.Ключ] = ЭлементКоллекции.Ключ;
	КонецЦикла;
	
	Возврат Статусы;
		
КонецФункции

Процедура СформироватьПодсказкуКВидуНоменклатуры(Данные, РеквизитХраненияПодсказки) Экспорт
	
	ВидНоменклатуры                     = Данные.ВидНоменклатуры;
	ИдентификаторКатегории              = Данные.ИдентификаторКатегории;
	НаименованиеКатегории               = Данные.НаименованиеКатегории;
	СтатусВеденияУчетаХарактеристик     = Данные.СтатусВеденияУчетаХарактеристик;
	КоличествоСопоставленныхРеквизитов  = Данные.КоличествоСопоставленныхРеквизитов;
	КоличествоДополнительныхРеквизитов  = Данные.КоличествоДополнительныхРеквизитов;
	ИспользуютсяХарактеристикиВСервисе  = Данные.ИспользуютсяХарактеристикиВСервисе;
	ВидыНоменклатурыКатегории           = Данные.ВидыНоменклатурыКатегории;
	ВидНоменклатурыСопоставлен          = Данные.ВидНоменклатурыСопоставлен;
	
	ЗаголовокЭлемента = "";
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		Если НЕ ВидНоменклатурыСопоставлен Тогда
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				ЗаголовокЭлемента = СтроковыеФункции.ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Вид номенклатуры ""%1"" не сопоставлен с категорией ""%2"". <a href = ""Сопоставить"">Сопоставить</a>'"), 
							ВидНоменклатуры, НаименованиеКатегории));
			Иначе
				ЗаголовокЭлемента = СтрШаблон(
					НСтр("ru = 'Вид номенклатуры ""%1"" не сопоставлен с категорией ""%2"".'"), 
						ВидНоменклатуры, НаименованиеКатегории);				
			КонецЕсли;
		Иначе 
			
			// Вид номенклатуры сопоставлен.
			
			Если СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().НеВедутся Тогда
				
				Если ИспользуютсяХарактеристикиВСервисе Тогда
					ЗаголовокЭлемента = СтрШаблон(
						НСтр("ru = 'Для вида номенклатуры ""%1"" не ведутся характеристики'"), ВидНоменклатуры);				
				Иначе
					
					// Если характеристики в сервисе не ведутся.
					
					Если КоличествоДополнительныхРеквизитов > 0 
						И КоличествоСопоставленныхРеквизитов <> КоличествоДополнительныхРеквизитов Тогда
						
						// Если вид номенклатуры сопоставлен, подсчитывается количество несопоставленных реквизитов
						ЗаголовокЭлемента 
							= ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставленныхРеквизитов, КоличествоДополнительныхРеквизитов);
					Иначе
						ЗаголовокЭлемента = СтрШаблон(
							НСтр("ru = 'Вид номенклатуры ""%1"" сопоставлен'"), ВидНоменклатуры);
					КонецЕсли;
					
				КонецЕсли;

			ИначеЕсли СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().Индивидуальные Тогда	
				ЗаголовокЭлемента = СтрШаблон(
					НСтр("ru = 'Для вида номенклатуры ""%1"" ведутся индивидуальные характеристики'"), ВидНоменклатуры);
				
			ИначеЕсли СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().Общие Тогда		
				
				// Если характеристики ведутся и в сервисе, и в виде номенклатуры.
				
				Если КоличествоДополнительныхРеквизитов > 0 
					И КоличествоСопоставленныхРеквизитов <> КоличествоДополнительныхРеквизитов Тогда
					
					// Если вид номенклатуры сопоставлен, подсчитывается количество несопоставленных реквизитов
					ЗаголовокЭлемента 
						= ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставленныхРеквизитов, КоличествоДополнительныхРеквизитов);
				Иначе
					ЗаголовокЭлемента = СтрШаблон(
						НСтр("ru = 'Вид номенклатуры ""%1"" сопоставлен'"), ВидНоменклатуры);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ВидыНоменклатурыКатегории.Количество() = 0 Тогда // вид номенклатуры не найден
			ЗаголовокЭлемента = СтрШаблон(
				НСтр("ru = 'Не найден вид номенклатуры, сопоставленный с категорией ""%1""'"), НаименованиеКатегории);
			
		ИначеЕсли ВидыНоменклатурыКатегории.Количество() > 1 Тогда  // найдено несколько видов номенклатуры
			ЗаголовокЭлемента = СтрШаблон(
				НСтр("ru = 'Найдено несколько видов номенклатуры, сопоставленный с категорией ""%1""'"), НаименованиеКатегории);
			
		КонецЕсли;
		
	КонецЕсли;
		 
	РеквизитХраненияПодсказки = ЗаголовокЭлемента;
		
КонецПроцедуры

Функция ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставлено, КоличествоВсего)
	
	Возврат СтрШаблон(НСтр("ru = 'Сопоставлено реквизитов: %1 из %2'"), КоличествоСопоставлено, КоличествоВсего);
	
КонецФункции

Процедура НастроитьФормуПриАвтоматическомОбновлении(Форма)
	
	Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РежимОбновления", 
				"Картинка", БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой);
	Иначе
		Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически = Истина;
		РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);
	КонецЕсли;	
	
	Форма.Прочитать();
		
КонецПроцедуры

Процедура НастроитьГиперссылкуХарактеристикПослеЗаполнения(Форма, КоличествоХарактеристик)
	
	КоличествоДляЗаголовка = 0;
	
	Если Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Все" Тогда
		КоличествоДляЗаголовка = КоличествоХарактеристик;
	ИначеЕсли Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Выбранные" Тогда
		КоличествоДляЗаголовка = Форма.РаботаСНоменклатурой_ИдентификаторыХарактеристик.Количество();
	Иначе
		КоличествоДляЗаголовка = 0;	
	КонецЕсли;
	
	Если Не РаботаСНоменклатуройСлужебныйКлиентСервер.БудутЗагружатьсяХарактеристики(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Заголовок 	
		= СтрШаблон(
			НСтр("ru = 'Будет создано характеристик: %1'"), 
				КоличествоДляЗаголовка);
	
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Видимость = Истина;
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Доступность = Ложь;
		
КонецПроцедуры

Процедура УсловноеОформлениеГиперссылкиЗапросаДанных(Форма, ИмяТаблицыФормы) Экспорт
	
	ИмяКолонкиУсловия       = ИмяТаблицыФормы + ".ЭтоСтрокаЗапросаДанных";
	ИмяКолонкиСГиперссылкой = ИмяТаблицыФормы + "ГиперссылкаЗапросаДанных";
	УсловноеОформление      = Форма.УсловноеОформление;
	
	// Видимость гиперссылки Ложь
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяКолонкиУсловия);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Ложь;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиСГиперссылкой);
	
	// Видимость гиперссылки Истина
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость",               Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",                   НСтр("ru = 'Показать еще'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",              ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяКолонкиУсловия);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Истина;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиСГиперссылкой);
	
	// Видимость полей с текстом
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяКолонкиУсловия);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Истина;
	
	// Оформляемое поле
	
	ДобавитьПоляДляСкрытия(Форма.Элементы[ИмяТаблицыФормы].ПодчиненныеЭлементы, 
		ЭлементУсловногоОформления.Поля.Элементы, ИмяКолонкиСГиперссылкой);
				
КонецПроцедуры

Процедура ДобавитьПоляДляСкрытия(КоллекцияДляОбхода, КоллекцияДляДобавления, ИмяЭлементаИсключение)
	
	Для каждого ЭлементКоллекции Из КоллекцияДляОбхода Цикл
		
		Если ЭлементКоллекции.Имя = ИмяЭлементаИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ДобавитьПоляДляСкрытия(ЭлементКоллекции.ПодчиненныеЭлементы, КоллекцияДляДобавления, ИмяЭлементаИсключение);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ПолеФормы") Тогда
			ПолеЭлемента = КоллекцияДляДобавления.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодсчитатьКоличествоДополнительныхРеквизитов(ТекущаяНоменклатура, СтруктураДанных) Экспорт
	
	// Подсчет не сопоставленных реквизитов
	
	НеСопоставленоРеквизитов                  = 0;
	ВсегоРеквизитов                           = 0;

	НеСопоставленоДополнительныхРеквизитов    = 0;
	ВсегоДополнительныхРеквизитов             = 0;

	НеСопоставленоРеквизитовХарактеристик     = 0;
	ВсегоРеквизитовХарактеристик              = 0;
	
	ДанныеКатегории = ТекущаяНоменклатура.Категория;
	
	СоответствиеРеквизитовИЗначений = СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(СтруктураДанных.ВидНоменклатуры);
	
	// Дополнительные реквизиты
		
	ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
		ДанныеКатегории.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
	
	НеСопоставленоДополнительныхРеквизитов = ДанныеКатегории.ДополнительныеРеквизиты.
		НайтиСтроки(Новый Структура("РеквизитИнформационнойБазы", Неопределено)).Количество();
	
	ВсегоДополнительныхРеквизитов = ДанныеКатегории.ДополнительныеРеквизиты.Количество();
	
	// Дополнительные реквизиты характеристик
	
	Если ТекущаяНоменклатура.Характеристики.Количество() > 0 Тогда
				
		ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
			ДанныеКатегории.Характеристики.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
				
		НеСопоставленоРеквизитовХарактеристик = ДанныеКатегории.Характеристики.ДополнительныеРеквизиты.
			НайтиСтроки(Новый Структура("РеквизитИнформационнойБазы", Неопределено)).Количество();
		
		ВсегоРеквизитовХарактеристик = ДанныеКатегории.Характеристики.ДополнительныеРеквизиты.Количество();		
		
	КонецЕсли;
	
	НеСопоставленоРеквизитов = НеСопоставленоДополнительныхРеквизитов + НеСопоставленоРеквизитовХарактеристик;
	ВсегоРеквизитов = ВсегоДополнительныхРеквизитов + ВсегоРеквизитовХарактеристик;

	СтруктураДанных.КоличествоДополнительныхРеквизитов = ВсегоРеквизитов;
	СтруктураДанных.КоличествоСопоставленныхРеквизитов = ВсегоРеквизитов - НеСопоставленоРеквизитов;
	
КонецПроцедуры

Процедура НастроитьДинамическийСписокФормыНоменклатуры(Форма, ЭлементТаблицаФормы, ГруппаРодитель)
	
	ПутьКДаннымСписка = ЭлементТаблицаФормы.ПутьКДанным;
	
	// Колонки динамического списка
	
	// Группа колонок
	
	ГруппаКолонок                  = Форма.Элементы.Добавить("РаботаСНоменклатуройГруппаКолонок", Тип("ГруппаФормы"), ЭлементТаблицаФормы);
	ГруппаКолонок.Группировка      = ГруппировкаКолонок.ВЯчейке;
	ГруппаКолонок.Заголовок        = НСтр("ru = '1С:Номенклатура'");
	ГруппаКолонок.КартинкаШапки    = БиблиотекаКартинок.ИконкаБелыйФонРаботаСНоменклатурой;
	ГруппаКолонок.ОтображатьВШапке = Истина;
	
	// Представление номенклатура сервиса
	
	НовыйЭлемент                   = Форма.Элементы.Добавить("НоменклатураСервиса", Тип("ПолеФормы"), ГруппаКолонок);
	НовыйЭлемент.Вид               = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным       = ПутьКДаннымСписка + ".НоменклатураРаботаСНоменклатурой";
	НовыйЭлемент.ГиперссылкаЯчейки = Истина;
	НовыйЭлемент.ОтображатьВШапке  = Ложь;
		
	// Режим обновления
	
	НовыйЭлемент                  = Форма.Элементы.Добавить("КартинкаРежимаОбновления", Тип("ПолеФормы"), ГруппаКолонок);
	НовыйЭлемент.Вид              = ВидПоляФормы.ПолеКартинки;
	НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.РежимОбновленияВСпискеРаботаСНоменклатурой;
	НовыйЭлемент.ПутьКДанным      = ПутьКДаннымСписка + ".КартинкаРежимаОбновленияРаботаСНоменклатурой";
	НовыйЭлемент.ОтображатьВШапке = Ложь;
	
	// Идентификатор номенклатуры сервиса
	
	НовыйЭлемент               = Форма.Элементы.Добавить("ИдентификаторНоменклатуры", Тип("ПолеФормы"), ГруппаКолонок);
	НовыйЭлемент.Вид           = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным   = ПутьКДаннымСписка + ".ИдентификаторНоменклатурыРаботаСНоменклатурой";
	НовыйЭлемент.Видимость     = Ложь;
	
	// Установка признака обязательного использования
	
	Форма[ПутьКДаннымСписка].УстановитьОбязательноеИспользование("ИдентификаторНоменклатурыРаботаСНоменклатурой", Истина);
	Форма[ПутьКДаннымСписка].УстановитьОбязательноеИспользование("КодСтатусаСопоставленияРаботаСНоменклатурой", Истина);

	УстановитьПараметрыДинамическогоСписка(Форма[ПутьКДаннымСписка].Параметры);

	УстановитьУсловноеОформлениеДинамическогоСпискаНоменклатуры(Форма[ПутьКДаннымСписка].УсловноеОформление);

КонецПроцедуры

Процедура УстановитьПараметрыДинамическогоСписка(ПараметрыЗапроса)
	
	Если ПараметрыЗапроса.ДоступныеПараметры.Элементы.Найти("ПустаяХарактеристика") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыНайдено = Новый Массив;
	
	СтатусыНайдено.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Выбрано);
	СтатусыНайдено.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Проверено);
	
	ПараметрыЗапроса.УстановитьЗначениеПараметра("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Сопоставление",        Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("Сопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("НеСопоставлено",       Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено);
	ПараметрыЗапроса.УстановитьЗначениеПараметра("СтатусыНайдено",       СтатусыНайдено);

	ПараметрыЗапроса.УстановитьЗначениеПараметра("СтрокаНайдено",         НСтр("ru = 'Найдено'") + ": ");
	ПараметрыЗапроса.УстановитьЗначениеПараметра("СтрокаНайденыВарианты", НСтр("ru = 'Найдены варианты'"));
	ПараметрыЗапроса.УстановитьЗначениеПараметра("СтрокаСопоставить",     ?(ПравоИзмененияДанных(), НСтр("ru = 'Сопоставить'"), НСтр("ru = '<Не сопоставлено>'")));
	
КонецПроцедуры

Процедура ДобавитьКомандыФормыСпискаНоменклатуры(Форма, ГруппаРодитель, ДобавитьКомандыСопоставления)
	
	// Группа команд
	
	ГруппаКнопок           = Форма.Элементы.Добавить("ПодобратьНоменклатуруИзСервиса", Тип("ГруппаФормы"), ГруппаРодитель);
	ГруппаКнопок.Картинка  = БиблиотекаКартинок.ИконкаБелыйФонРаботаСНоменклатурой;
	ГруппаКнопок.Заголовок = НСтр("ru = '1С:Номенклатура'");
	
	#Область КомандыПодбораИзСервиса
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("РаботаСНоменклатуройПодобратьНоменклатуруИзСервиса");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Загрузить номенклатуру'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Загрузить номенклатуру из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.ДобавитьРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент            = Форма.Элементы.Добавить("РаботаСНоменклатуройПодобратьНоменклатуруИзСервиса", Тип("КнопкаФормы"), ГруппаКнопок);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "РаботаСНоменклатуройПодобратьНоменклатуруИзСервиса";
	
	#КонецОбласти
	
	Если Не ДобавитьКомандыСопоставления Тогда
		Возврат;
	КонецЕсли;
	
	#Область КомандыПоискаСопоставления
	
	// Группа - разделитель
	
	ВложеннаяГруппаКнопок     = Форма.Элементы.Добавить("РаботаСНоменклатуройГруппаКомандСопоставления", Тип("ГруппаФормы"), ГруппаКнопок);
	ВложеннаяГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("РаботаСНоменклатуройСопоставитьВыделеннуюНоменклатуру");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Сопоставить выделенное'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Сопоставить выделенную номенклатуру с 1С:Номенклатурой'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.СопоставлениеРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент            = Форма.Элементы.Добавить("РаботаСНоменклатуройСопоставитьВыделеннуюНоменклатуру", Тип("КнопкаФормы"), ВложеннаяГруппаКнопок);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "РаботаСНоменклатуройСопоставитьВыделеннуюНоменклатуру";
	
	// Кнопка поиска сопоставления всей номенклатуры
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("РаботаСНоменклатуройСопоставитьВсюНоменклатуру");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Сопоставить все'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Сопоставить всю номенклатуру с 1С:Номенклатурой'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.СопоставлениеРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент            = Форма.Элементы.Добавить("РаботаСНоменклатуройСопоставитьВсюНоменклатуру", Тип("КнопкаФормы"), ВложеннаяГруппаКнопок);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "РаботаСНоменклатуройСопоставитьВсюНоменклатуру";
	
	#КонецОбласти	
	
#Область КомандыАвтоматическогоОбновления

	// Группа - разделитель
	
	ВложеннаяГруппаКнопок     = Форма.Элементы.Добавить("РаботаСНоменклатуройГруппаКомандОбновления", Тип("ГруппаФормы"), ГруппаКнопок);
	ВложеннаяГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
		
	// Кнопка автоматического обновления
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("РаботаСНоменклатуройВключитьАвтоматическоеОбновление");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Включить автоматическое обновление'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Включить автоматическое обновление'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент            = Форма.Элементы.Добавить("РаботаСНоменклатуройВключитьАвтоматическоеОбновление", Тип("КнопкаФормы"), ВложеннаяГруппаКнопок);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "РаботаСНоменклатуройВключитьАвтоматическоеОбновление";
	НовыйЭлемент.ТолькоВоВсехДействиях = Истина;
	
	// Кнопка ручного обновления
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("РаботаСНоменклатуройВключитьРучноеОбновление");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Включить ручное обновление'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Включить ручное обновление'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент            = Форма.Элементы.Добавить("РаботаСНоменклатуройВключитьРучноеОбновление", Тип("КнопкаФормы"), ВложеннаяГруппаКнопок);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "РаботаСНоменклатуройВключитьРучноеОбновление";
	НовыйЭлемент.ТолькоВоВсехДействиях = Истина;
	
#КонецОбласти	
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеДинамическогоСпискаНоменклатуры(УсловноеОформление)
	
	// Номенклатура не сопоставлялась или не найдена
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНесопоставленногоОбъектаБЭД);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КодСтатусаСопоставленияРаботаСНоменклатурой");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НоменклатураРаботаСНоменклатурой");
	
	// Номенклатура или выбрана, или проверена, или найдено несколько вариантов
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаЕстьВариантыДляСопоставления);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КодСтатусаСопоставленияРаботаСНоменклатурой");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НоменклатураРаботаСНоменклатурой");
			
	// Номенклатура сопоставлялась и подтверждена
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	КодыСопоставленных = Новый СписокЗначений;
	
	КодыСопоставленных.Добавить(2);
	КодыСопоставленных.Добавить(3);
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КодСтатусаСопоставленияРаботаСНоменклатурой");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = КодыСопоставленных;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НоменклатураРаботаСНоменклатурой");
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитов

Процедура ЗаблокироватьРеквизиты(Форма, ТаблицаФормы, СсылкаНаОбъект) Экспорт
	
	Если Не ПодсистемаЗапретаРедактированияРеквизитовСуществует() Тогда
		Возврат;
	КонецЕсли;
		
	ПолноеИмя = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	БлокируемыеРеквизиты = Форма.БлокируемыеРеквизиты;
	
	БлокируемыеРеквизиты.ЗагрузитьЗначения(БлокируемыеРеквизитыОбъекта(ПолноеИмя));
	
	Если Не ЗначениеЗаполнено(БлокируемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаРеквизитыЗаблокированы.Видимость 
		= ЕстьПравоИзмененияЗаблокированныхРеквизитов() 
			И ЕстьИзмененияВБлокируемыхРеквизитах(ТаблицаФормы, БлокируемыеРеквизиты);
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.СнятьПометкиСБлокируемыхРеквизитов(Форма, ТаблицаФормы, Истина);
	
КонецПроцедуры

Функция ЕстьИзмененияВБлокируемыхРеквизитах(ТаблицаФормы, БлокируемыеРеквизиты)
	
	Для каждого ЭлементКоллекции Из БлокируемыеРеквизиты Цикл
		
		СтрокиРеквизита = ТаблицаФормы.
			НайтиСтроки(Новый Структура("РеквизитОбъекта", ЭлементКоллекции.Значение));
		
		Если СтрокиРеквизита.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
				
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

Функция ЕстьПравоИзмененияЗаблокированныхРеквизитов()
	
	Результат = Ложь;
	
	Результат = Пользователи.РолиДоступны("РедактированиеРеквизитовОбъектов");
	
	РаботаСНоменклатуройПереопределяемый.
		ПриОпределенииПравНаРедактированиеРеквизитов(Результат);
		
	Возврат Результат;	
		
КонецФункции

Функция ПодсистемаЗапретаРедактированияРеквизитовСуществует()
	
	Возврат	ОбщегоНазначения.
		ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов");
	
КонецФункции

Функция БлокируемыеРеквизитыОбъекта(ПолноеИмя) Экспорт
	
	Результат = Новый Массив;
	
	МодульЗапретРедактированияРеквизитовОбъектов
		= ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		
	Если ЗапретРедактированияРеквизитовОбъектов <> Неопределено Тогда
		Результат = ЗапретРедактированияРеквизитовОбъектов.БлокируемыеРеквизитыОбъекта(ПолноеИмя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьИспользованиеОбъекта(ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	СсылкаНаОбъект      = ПараметрыМетода.СсылкаНаОбъект;
	ИзмененныеРеквизиты = ПараметрыМетода.ИзмененныеРеквизиты;
	
	СтандартнаяОбработка = Истина;
	
	СсылкиОбнаружены = Ложь;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Объект ""%1"" уже используется в других местах в программе.
			|Не рекомендуется разрешать редактирование реквизитов из-за риска рассогласования данных.'"), СсылкаНаОбъект);
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("СсылкиОбнаружены", СсылкиОбнаружены);
	РезультатПроверки.Вставить("ТекстСообщения",   ТекстСообщения);
	
	РаботаСНоменклатуройПереопределяемый.ПриПроверкеИспользованияОбъекта(
		СсылкаНаОбъект, ИзмененныеРеквизиты, РезультатПроверки, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		РезультатПроверки.СсылкиОбнаружены = ОбщегоНазначения.ЕстьСсылкиНаОбъект(СсылкаНаОбъект);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

Процедура АктуализироватьИдентификаторыОбъектов(Идентификаторы, ТипОбъектов, СсылкиНаОбъекты = Неопределено) Экспорт
	
	ДанныеСервиса = НазначенныеИдентификаторы(Идентификаторы, ТипОбъектов);
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	УстаревшиеИдентификаторы = Новый Массив;
	СоответствиеИдентификаторов = Новый Соответствие;
	
	ЗаполнитьИдентификаторы(ДанныеСервиса, СоответствиеИдентификаторов, УстаревшиеИдентификаторы);
	
	Если УстаревшиеИдентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОбъектов = "Категории" Тогда
		
		АктуализироватьКатегории(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты);
		
	ИначеЕсли ТипОбъектов = "Номенклатура" Тогда
		
		АктуализироватьНоменклатуру(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты);
		
	ИначеЕсли ТипОбъектов = "Характеристики" Тогда
		
		АктуализироватьХарактеристики(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты);
						
	ИначеЕсли ТипОбъектов = "Реквизиты" Тогда
		
		АктуализироватьРеквизиты(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты);
		
	ИначеЕсли ТипОбъектов = "Значения" Тогда
		
		АктуализироватьЗначения(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка передачи типа объекта.'");
	КонецЕсли;
		
КонецПроцедуры

Процедура АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымНоменклатуры(
			ДанныеПоНоменклатуре,
			Знач СсылкиНаОбъекты = Неопределено) Экспорт
			
	ИдентификаторыКатегорий = ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории");
			
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыКатегорий, "Категории", СсылкиНаОбъекты);
	
	ИдентификаторыРеквизитов = Новый Массив;
	ИдентификаторыЗначений = Новый Массив;
	
	ЗаполнитьИдентификаторыРеквизитовДляНоменклатуры(ДанныеПоНоменклатуре, ИдентификаторыРеквизитов, ИдентификаторыЗначений);
	
	Если Не ЗначениеЗаполнено(СсылкиНаОбъекты) Тогда
		СсылкиНаОбъекты = РаботаСНоменклатуройСлужебный.ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий);
	КонецЕсли;
		
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыРеквизитов, "Реквизиты", СсылкиНаОбъекты);
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыЗначений, "Значения", СсылкиНаОбъекты);
			
КонецПроцедуры

Процедура АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымКатегорий(
			ДанныеСервиса, 
			Знач СсылкиНаОбъекты = Неопределено) Экспорт
	
	ИдентификаторыКатегорий = ДанныеСервиса.ВыгрузитьКолонку("Идентификатор");		
			
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыКатегорий, "Категории", СсылкиНаОбъекты);
	
	ИдентификаторыРеквизитов = Новый Массив;
	ИдентификаторыЗначений   = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса Цикл
		ЗаполнитьИдентификаторыРеквизитовДляКатегории(ЭлементКоллекции, ИдентификаторыРеквизитов, ИдентификаторыЗначений);
	КонецЦикла;
	
	ИдентификаторыРеквизитов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыРеквизитов);
	ИдентификаторыЗначений   = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыЗначений);
	
	Если Не ЗначениеЗаполнено(СсылкиНаОбъекты) Тогда
		СсылкиНаОбъекты = РаботаСНоменклатуройСлужебный.ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий);
	КонецЕсли;
		
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыРеквизитов, "Реквизиты", СсылкиНаОбъекты);
	АктуализироватьИдентификаторыОбъектов(ИдентификаторыЗначений, "Значения", СсылкиНаОбъекты);
			
КонецПроцедуры

Процедура АктуализироватьКатегории(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторКатегории)
	|	И (&ПоВсемОбъектам
	|			ИЛИ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры В (&СсылкиНаОбъекты))";
	
	Запрос.УстановитьПараметр("ИдентификаторКатегории", УстаревшиеИдентификаторы);
	Запрос.УстановитьПараметр("СсылкиНаОбъекты",        СсылкиНаОбъекты);
	Запрос.УстановитьПараметр("ПоВсемОбъектам",         Не ЗначениеЗаполнено(СсылкиНаОбъекты));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НовыйИдентификатор = СоответствиеИдентификаторов[Выборка.ИдентификаторКатегории];
		
		Если Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;

		МенеджерЗаписи = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ВидНоменклатуры = Выборка.ВидНоменклатуры;
		МенеджерЗаписи.ИдентификаторКатегории = Выборка.ИдентификаторКатегории;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда 
			МенеджерЗаписи.ИдентификаторКатегории = НовыйИдентификатор;
			МенеджерЗаписи.Записать();
		КонецЕсли;			
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АктуализироватьНоменклатуру(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторНоменклатурыСервиса)
	|	И (&ПоВсемОбъектам
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В (&СсылкиНаОбъекты))";	
	
	Запрос.УстановитьПараметр("ИдентификаторНоменклатурыСервиса", УстаревшиеИдентификаторы);
	Запрос.УстановитьПараметр("СсылкиНаОбъекты",                  СсылкиНаОбъекты);
	Запрос.УстановитьПараметр("ПоВсемОбъектам",                   Не ЗначениеЗаполнено(СсылкиНаОбъекты));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НовыйИдентификатор = СоответствиеИдентификаторов[Выборка.ИдентификаторНоменклатурыСервиса];
		
		Если Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
				
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
		
		НаборЗаписей.Прочитать();
		
		Для каждого ЭлементКоллекции Из НаборЗаписей Цикл
			ЭлементКоллекции.ИдентификаторНоменклатурыСервиса = НовыйИдентификатор;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Процедура АктуализироватьХарактеристики(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса В(&ИдентификаторХарактеристикиСервиса)
	|	И (&ПоВсемОбъектам
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика В (&СсылкиНаОбъекты))";	
	
	Запрос.УстановитьПараметр("ИдентификаторХарактеристикиСервиса", УстаревшиеИдентификаторы);
	Запрос.УстановитьПараметр("СсылкиНаОбъекты",                    СсылкиНаОбъекты);
	Запрос.УстановитьПараметр("ПоВсемОбъектам",                     Не ЗначениеЗаполнено(СсылкиНаОбъекты));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НовыйИдентификатор = СоответствиеИдентификаторов[Выборка.ИдентификаторХарактеристикиСервиса];
		
		Если Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
				
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
		
		НаборЗаписей.Прочитать();
		
		Для каждого ЭлементКоллекции Из НаборЗаписей Цикл
			ЭлементКоллекции.ИдентификаторХарактеристикиСервиса = НовыйИдентификатор;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АктуализироватьРеквизиты(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты)
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления КАК ОбъектСопоставления,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории В(&ИдентификаторРеквизитаКатегории)
	|	И (&ПоВсемОбъектам
	|			ИЛИ СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления В (&СсылкиНаОбъекты))";	
		
	Запрос.УстановитьПараметр("ИдентификаторРеквизитаКатегории", УстаревшиеИдентификаторы);
	Запрос.УстановитьПараметр("СсылкиНаОбъекты",                 СсылкиНаОбъекты);
	Запрос.УстановитьПараметр("ПоВсемОбъектам",                  Не ЗначениеЗаполнено(СсылкиНаОбъекты));
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		
		НовыйИдентификатор = СоответствиеИдентификаторов[Выборка.ИдентификаторРеквизитаКатегории];
		
		Если Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ОбъектСопоставления = Выборка.ОбъектСопоставления;
		МенеджерЗаписи.РеквизитОбъекта = Выборка.РеквизитОбъекта;
		МенеджерЗаписи.ИдентификаторРеквизитаКатегории = Выборка.ИдентификаторРеквизитаКатегории;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда 
			
			МенеджерЗаписи.ИдентификаторРеквизитаКатегории = НовыйИдентификатор;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АктуализироватьЗначения(УстаревшиеИдентификаторы, СоответствиеИдентификаторов, СсылкиНаОбъекты)
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления КАК ОбъектСопоставления,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение КАК Значение,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначенияРеквизитаКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории В(&ИдентификаторЗначенияРеквизитаКатегории)
	|	И (&ПоВсемОбъектам
	|			ИЛИ СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления В (&СсылкиНаОбъекты))";		
	
	Запрос.УстановитьПараметр("ИдентификаторЗначенияРеквизитаКатегории", УстаревшиеИдентификаторы);
	Запрос.УстановитьПараметр("СсылкиНаОбъекты", СсылкиНаОбъекты);
	Запрос.УстановитьПараметр("ПоВсемОбъектам", Не ЗначениеЗаполнено(СсылкиНаОбъекты));
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		
		НовыйИдентификатор = СоответствиеИдентификаторов[Выборка.ИдентификаторЗначенияРеквизитаКатегории];
		
		Если Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ОбъектСопоставления = Выборка.ОбъектСопоставления;
		МенеджерЗаписи.РеквизитОбъекта = Выборка.РеквизитОбъекта;
		МенеджерЗаписи.Значение = Выборка.Значение;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда 
			МенеджерЗаписи.ИдентификаторЗначенияРеквизитаКатегории = НовыйИдентификатор;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторы(ДанныеСервиса, СоответствиеИдентификаторов, УстаревшиеИдентификаторы)
	
	Для каждого ТекущийОбъект Из ДанныеСервиса Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.НазначенныеИдентификаторы) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого УстаревшийИдентификатор Из ТекущийОбъект.НазначенныеИдентификаторы Цикл
			
			УстаревшиеИдентификаторы.Добавить(УстаревшийИдентификатор.Идентификатор);
			
			СоответствиеИдентификаторов.Вставить(УстаревшийИдентификатор.Идентификатор, ТекущийОбъект.Идентификатор);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция НазначенныеИдентификаторы(Идентификаторы, ТипОбъектов)
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	Если ТипОбъектов = "Категории" Тогда
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
		
		ПараметрыЗапроса.Идентификаторы = Идентификаторы;
		ПараметрыЗапроса.НаборПолей     = НаборПолей;
				
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыЗапроса);
		
	ИначеЕсли ТипОбъектов = "Номенклатура" Тогда	
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
		
		ПараметрыЗапроса.Идентификаторы = Идентификаторы;
		ПараметрыЗапроса.НаборПолей     = НаборПолей;
				
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
		
	ИначеЕсли ТипОбъектов = "Характеристики" Тогда	
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаХарактеристики();
		
		ПараметрыЗапроса.Идентификаторы = Идентификаторы;
		ПараметрыЗапроса.НаборПолей     = НаборПолей;
				
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
				
	ИначеЕсли ТипОбъектов = "Реквизиты" Тогда	
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаДополнительныеРеквизиты();
		
		ПараметрыЗапроса.Идентификаторы = Идентификаторы;
		ПараметрыЗапроса.НаборПолей     = НаборПолей;
				
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса);
		
	ИначеЕсли ТипОбъектов = "Значения" Тогда	
		
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов();
		
		ПараметрыЗапроса.Идентификаторы = Идентификаторы;
		ПараметрыЗапроса.НаборПолей     = НаборПолей;
		
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитов(ПараметрыЗапроса);
	
	КонецЕсли;
	
	Отказ = Ложь;
		
	ТаблицаДанных = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанных.Колонки.Добавить("ОбъектУдален", Новый ОписаниеТипов("Булево"));
	
	РасшифровкаКодаСостояния = РаботаСНоменклатуройСлужебный.РасшифровкаКодаСостояния(ПараметрыКоманды.КодСостояния);
	
	Если РасшифровкаКодаСостояния.ОбъектУдален Тогда
		ТаблицаДанных.ЗаполнитьЗначения(Истина, "ОбъектУдален");
	КонецЕсли;
	
	КолонкиРезультата = "Идентификатор, НазначенныеИдентификаторы, ОбъектУдален";
	
	Возврат ТаблицаДанных.Скопировать(, КолонкиРезультата);
	
КонецФункции

Процедура ЗаполнитьИдентификаторыРеквизитовДляНоменклатуры(СтрокиНоменклатуры, ИдентификаторыРеквизитов, ИдентификаторыЗначений)
	
	Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
		
		Для каждого ЭлементКоллекции Из Номенклатура.ДополнительныеРеквизиты Цикл
			ИдентификаторыРеквизитов.Добавить(ЭлементКоллекции.Идентификатор);
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторЗначения) Тогда
				ИдентификаторыЗначений.Добавить(ЭлементКоллекции.ИдентификаторЗначения);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыРеквизитовДляКатегории(ДанныеКатегории, ИдентификаторыРеквизитов, ИдентификаторыЗначений)
		
	Для каждого Реквизит Из ДанныеКатегории.ДополнительныеРеквизиты Цикл
		
		ИдентификаторыРеквизитов.Добавить(Реквизит.Идентификатор);
		
		Для каждого Значение Из Реквизит.ИдентификаторыЗначений Цикл
			ИдентификаторыЗначений.Добавить(Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Реквизит Из ДанныеКатегории.Характеристики.ДополнительныеРеквизиты Цикл
		ИдентификаторыРеквизитов.Добавить(Реквизит.Идентификатор);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПредставлениеОбъектовПриОшибках

Функция ПредставлениеПревышениеЛимита()
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_ПредставлениеПревышенияЛимита");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеУдаленногоОбъекта(ТипОбъекта = "")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	
	ТекущаяОбласть = ТабличныйДокумент.Область(2, 1);
	
	Если ТипОбъекта = "Номенклатура" Тогда
		ТекущаяОбласть.Текст = НСтр("ru = 'Номенклатура была удалена из сервиса.'");	
	ИначеЕсли ТипОбъекта = "Категория" Тогда	
		ТекущаяОбласть.Текст = НСтр("ru = 'Категория была удалена из сервиса.'");
	Иначе
		ТекущаяОбласть.Текст = НСтр("ru = 'Запрашиваемый объект был удален из сервиса.'");
	КонецЕсли;
	
	ТекущаяОбласть.Отступ = 2;
	ТекущаяОбласть.Шрифт = Метаданные.ЭлементыСтиля.УвеличенныйШрифтБЭД.Значение;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеОбъектОтсутствует(ТипОбъекта)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	
	ТекущаяОбласть = ТабличныйДокумент.Область(2, 1);
	
	Если ТипОбъекта = "Номенклатура" Тогда
		ТекущаяОбласть.Текст = НСтр("ru = 'Номенклатура не найдена.'");
	ИначеЕсли ТипОбъекта = "Категория" Тогда	
		ТекущаяОбласть.Текст = НСтр("ru = 'Категория не найдена.'");
	КонецЕсли;
	
	ТекущаяОбласть.Отступ = 2;
	ТекущаяОбласть.Шрифт = Метаданные.ЭлементыСтиля.УвеличенныйШрифтБЭД.Значение;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СервисДоступенПользователю()
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой")
		И ПравоЧтенияДанных();
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементаМассиваСтруктур(Коллекция, ЗначениеДляПоиска, КлючСтруктуры)
	
	Для каждого ЭлементМассива Из Коллекция Цикл
		Если ЭлементМассива[КлючСтруктуры] = ЗначениеДляПоиска Тогда
			Возврат ЭлементМассива;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция КодОсновногоЯзыка()
	
	Возврат ОбщегоНазначения.КодОсновногоЯзыка();
	
КонецФункции

Функция ИмяСобытияПодсистемы(ИмяСобытия)
	
	Возврат СтрШаблон("%1.%2", НСтр("ru = 'Работа с номенклатурой'", КодОсновногоЯзыка()), ИмяСобытия);
	
КонецФункции

Процедура ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(ИмяСобытия, ИнформацияОбИсключении = Неопределено) Экспорт
	
	ПредставлениеОшибки = ?(ИнформацияОбИсключении = Неопределено, "", ПодробноеПредставлениеОшибки(ИнформацияОбИсключении));
	
	ЗаписьЖурналаРегистрации(ИмяСобытияПодсистемы(ИмяСобытия), УровеньЖурналаРегистрации.Ошибка, , , ПредставлениеОшибки);
		
КонецПроцедуры

Функция РазмерПорцииДанныхИнформационнойБазы()
	
	Возврат 1000;
		
КонецФункции

Процедура ИсключитьНеКупленнуюНоменклатуру(
			ИдентификаторыНоменклатуры, 
			ДанныеПоНоменклатуре, 
			Отказ = Неопределено)
	
	ИсключитьДанныеНеКупленнойНоменклатуры(ДанныеПоНоменклатуре);
				
	// При передаче признака отказа, отрабатывается отсутствие данных:
	
	Если Отказ <> Неопределено И ДанныеПоНоменклатуре.Количество() = 0 Тогда
		Если ИдентификаторыНоменклатуры.Количество() = 1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Карточка не приобретена или приобретена под другой учетной записью, операция прервана.'"),,,, Отказ);
		ИначеЕсли ИдентификаторыНоменклатуры.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Отсутствуют приобретенные карточки, операция прервана.'"),,,, Отказ);						
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ИсключитьДанныеНеКупленнойНоменклатуры(ДанныеПоНоменклатуре, ИсключенныеИдентификаторы = Неопределено) Экспорт
	
	Счетчик = 0;
	
	Пока Счетчик < ДанныеПоНоменклатуре.Количество() Цикл
		Если ЗначениеЗаполнено(ДанныеПоНоменклатуре[Счетчик].ЗаполненныеРеквизиты) Тогда
			Если ИсключенныеИдентификаторы <> Неопределено Тогда
				ИсключенныеИдентификаторы.Добавить(ДанныеПоНоменклатуре[Счетчик].Идентификатор);
			КонецЕсли;
			ДанныеПоНоменклатуре.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ИдентификаторНайден(ИдентификаторНоменклатуры, НазначенныйИдентификатор)
	
	Возврат ИдентификаторНоменклатуры = НазначенныйИдентификатор.Идентификатор 
		ИЛИ НазначенныйИдентификатор.НазначенныеИдентификаторы.Найти(
			ИдентификаторНоменклатуры) <> Неопределено;
	
КонецФункции

Процедура УстановитьРежимЗагрузкиХарактеристикПриПривязке(Форма, РежимЗагрузки)
	
	Если ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения) Тогда
		
		// Интерактивный режим создания номенклатуры.
		
		ДанныеНоменклатуры = ПолучитьИзВременногоХранилища(Форма.РаботаСНоменклатурой_АдресДанныхЗаполнения);
		
		ИспользуютсяХарактеристикиВСервисе = Ложь;
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) 
			И ДанныеНоменклатуры[0].Характеристики.Количество() > 0 Тогда
			
			ИспользуютсяХарактеристикиВСервисе = Истина;
		КонецЕсли;
		
		Если Не ИспользуютсяХарактеристикиВСервисе Тогда
			Возврат;
		КонецЕсли;
		
		ВидНоменклатуры = Неопределено;
		
		РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры);
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) 
			И ВариантИспользованияХарактеристик(ВидНоменклатуры) = "Общие" Тогда
			
			РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики; 
		Иначе
			РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики;
		КонецЕсли;
			
	Иначе
		
		// Первоначальная привязка номенклатуры.
		
		Если Не ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторХарактеристики) 
			И Не РаботаСНоменклатуройСлужебныйКлиентСервер.БудутЗагружатьсяХарактеристики(Форма) Тогда
			
			Если Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "БезПоддержкиХарактеристик" Тогда
				РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики; 
			ИначеЕсли Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Поддержка" Тогда		
				РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики; 
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторХарактеристики) Тогда
			
			РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру;
			
		ИначеЕсли РаботаСНоменклатуройСлужебныйКлиентСервер.БудутЗагружатьсяХарактеристики(Форма) Тогда
			
			РежимЗагрузки = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики;		
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеПоНоменклатуреИХарактеристике(НаименованиеНоменклатуры, НаименованиеХарактеристики) Экспорт
	
	Результат = СтрШаблон("%1, %2", НаименованиеНоменклатуры, НаименованиеХарактеристики);
	
	РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике(
		НаименованиеНоменклатуры, НаименованиеХарактеристики, Результат);
	
	Возврат Результат;	
		
КонецФункции

Функция РежимЗагрузкиХарактеристикПоСтроке(РежимЗагрузкиХарактеристикСтрокой)
	
	РежимыЗагрузкиХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.РежимыЗагрузкиХарактеристик();
	
	РежимЗагрузкиПеречисление = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ПустаяСсылка();
	
	Если РежимЗагрузкиХарактеристикСтрокой = РежимыЗагрузкиХарактеристик.ВХарактеристики Тогда
		РежимЗагрузкиПеречисление = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики;
	ИначеЕсли РежимЗагрузкиХарактеристикСтрокой = РежимыЗагрузкиХарактеристик.НеЗагружать Тогда	
		РежимЗагрузкиПеречисление = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики;
	Иначе
		РежимЗагрузкиПеречисление = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру;	
	КонецЕсли;	
	
	Возврат РежимЗагрузкиПеречисление;
	
КонецФункции

Процедура ЗаполнитьСоответствиеДополнительныхРеквизитовНоменклатуры(
			ДополнительныеРеквизиты, СтрокаСоответствияВидНоменклатуры)
	
	Если ДополнительныеРеквизиты.Колонки.Найти("РеквизитИнформационнойБазы") = Неопределено Тогда
		ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Колонки.Найти("ЗначениеИнформационнойБазы") = Неопределено Тогда
		ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы");
	КонецЕсли;
		
	ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
	ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		ЗаполнитьСсылкиРеквизитовИЗначенийНоменклатуры(ДополнительныйРеквизит, СтрокаСоответствияВидНоменклатуры);	
	КонецЦикла;	
	
КонецПроцедуры

Функция ПараметрыСозданияПрикладныхФорм()
	
	Результат = Новый Структура;
	
	Результат.Вставить("РежимПредставленияОбъектаСервиса", "ПолеВвода");
	Результат.Вставить("ОтображатьХарактеристики",         Истина);
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьДанныеИзВременногоХранилища(АдресВременногоХранилища, ОжидаемыйТип = Неопределено, ВызыватьИсключение = Истина) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(АдресВременногоХранилища) 
		И ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		
		ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Если ОжидаемыйТип = Неопределено Тогда
			Результат = ДанныеИзХранилища;
			
		ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
			
			Если ТипЗнч(ДанныеИзХранилища) = ОжидаемыйТип Тогда
				Результат = ДанныеИзХранилища;
			Иначе
				Если ВызыватьИсключение Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка получения данных'");
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка получения данных'");
		КонецЕсли;
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

// Заполнение списка значений видов номенклатуры, найденных по строке.
//
// Параметры:
//  СписокВыбора - СписокЗначений - заполняемый список значений.
//  СтрокаПоиска - Строка - строка, по которой осуществляется поиск.
//
Процедура ЗаполнитьВидыНоменклатурыПоСтрокеПоиска(СписокВыбора, Знач СтрокаПоиска) Экспорт
	
	ИсходнаяСтрока = СтрокаПоиска;	
	
	Результат = Новый СписокЗначений;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить 
		И ПолнотекстовыйПоиск.ИндексАктуален() Тогда
		
		// Полнотекстовый поиск
		
		КоличествоВариантовПоиска = 5;
		
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, КоличествоВариантовПоиска);
		
		ТипВидаНоменклатуры        = Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
		МетаданныеВидаНоменклатуры = Метаданные.НайтиПоТипу(ТипВидаНоменклатуры);

		Если МетаданныеВидаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокПоиска.ОбластьПоиска.Добавить(МетаданныеВидаНоменклатуры);
		
		Попытка
			СписокПоиска.ПерваяЧасть();
		Исключение
			Возврат;
		КонецПопытки;
		
		Для Каждого Элемент Из СписокПоиска Цикл
			Результат.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	Иначе
		
		// Поиск по запросу
	
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, " ", "%");
		
		СтрокаПоиска = "%" + СтрокаПоиска + "%";
		
		ТипВидаНоменклатуры = Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
		
		СсылкаНаВид = Новый (ТипВидаНоменклатуры);
		
		ПолноеИмя = СсылкаНаВид.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВидыНоменклатуры.Наименование КАК Наименование
		|ИЗ
		|	&ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидыНоменклатуры", ПолноеИмя);
		
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	
	КонецЕсли;
	
	// Форматирование списка результата
	
	ПодстрокиНаименования = СтрРазделить(ИсходнаяСтрока, " ");
	
	Для каждого СтрокаРезультата Из Результат Цикл
		
		Представление = СтрокаРезультата.Представление;
		
		Для каждого Подстрока Из ПодстрокиНаименования Цикл
			
			Если СтрДлина(Подстрока) < 3 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Представление, Подстрока) <> 0 Тогда
				Представление = СтрЗаменить(Представление, Подстрока, "<b>" + Подстрока + "</b>");
			ИначеЕсли Найти(Представление, НРег(Подстрока)) <> 0 Тогда
				Представление = СтрЗаменить(Представление, НРег(Подстрока), "<b>" + НРег(Подстрока) + "</b>");
			ИначеЕсли Найти(Представление, ТРег(Подстрока)) <> 0 Тогда	
				Представление = СтрЗаменить(Представление, ТРег(Подстрока), "<b>" + ТРег(Подстрока) + "</b>");	
			КонецЕсли;
			
		КонецЦикла;
		
		СписокВыбора.Добавить(СтрокаРезультата.Значение, 
			ФорматированнаяСтрока(Представление, ЦветаСтиля.РезультатУспехЦвет),,
			БиблиотекаКартинок.УправлениеПоиском);
				
	КонецЦикла;
				
КонецПроцедуры

Функция ФорматированнаяСтрока(Знач СтрокаСТегами, Знач ЦветВыделения = Неопределено)
	
	СтрокиСВыделением = Новый СписокЗначений;
	Пока СтрНайти(СтрокаСТегами, "<b>") <> 0 Цикл
		НачалоВыделения = СтрНайти(СтрокаСТегами, "<b>");
		СтрокаДоОткрывающегоТега = Лев(СтрокаСТегами, НачалоВыделения - 1);
		СтрокиСВыделением.Добавить(СтрокаДоОткрывающегоТега);
		СтрокаПослеОткрывающегоТега = Сред(СтрокаСТегами, НачалоВыделения + 3);
		КонецВыделения = СтрНайти(СтрокаПослеОткрывающегоТега, "</b>");
		ВыделенныйФрагмент = Лев(СтрокаПослеОткрывающегоТега, КонецВыделения - 1);
		СтрокиСВыделением.Добавить(ВыделенныйФрагмент,, Истина);
		СтрокаПослеВыделения = Сред(СтрокаПослеОткрывающегоТега, КонецВыделения + 4);
		СтрокаСТегами = СтрокаПослеВыделения;
	КонецЦикла;
	СтрокиСВыделением.Добавить(СтрокаСТегами);
	
	СтрокиСоСсылками = Новый СписокЗначений;
	Для Каждого ЧастьСтроки Из СтрокиСВыделением Цикл
		
		СтрокаСТегами = ЧастьСтроки.Значение;
		
		Если ЧастьСтроки.Пометка Тогда
			СтрокиСоСсылками.Добавить(СтрокаСТегами,, Истина);
			Продолжить;
		КонецЕсли;
		
		НачалоВыделения = СтрНайти(СтрокаСТегами, "<a href = ");
		Пока НачалоВыделения <> 0 Цикл
			СтрокаДоОткрывающегоТега = Лев(СтрокаСТегами, НачалоВыделения - 1);
			СтрокиСоСсылками.Добавить(СтрокаДоОткрывающегоТега, );
			
			СтрокаПослеОткрывающегоТега = Сред(СтрокаСТегами, НачалоВыделения + 9);
			ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
			
			Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
			Если СтрНачинаетсяС(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			
			СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
			КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
			ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
			СтрокиСоСсылками.Добавить(ТекстСсылки, Ссылка);
			
			СтрокаПослеВыделения = Сред(СтрокаПослеСсылки, КонецВыделения + 4);
			СтрокаСТегами = СтрокаПослеВыделения;
			
			НачалоВыделения = СтрНайти(СтрокаСТегами, "<a href = ");
		КонецЦикла;
		СтрокиСоСсылками.Добавить(СтрокаСТегами);
		
	КонецЦикла;
	
	ШрифтВыделения = Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение;
	МассивСтроки = Новый Массив;
	Для Каждого ЧастьСтроки Из СтрокиСоСсылками Цикл
		
		Если ЧастьСтроки.Пометка Тогда
			
			Если ЦветВыделения <> Неопределено Тогда
				МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение, ШрифтВыделения, ЦветВыделения));
			Иначе
				МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение, ШрифтВыделения));	
			КонецЕсли;
			
		ИначеЕсли Не ПустаяСтрока(ЧастьСтроки.Представление) Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение,,,, ЧастьСтроки.Представление));
		Иначе
			МассивСтроки.Добавить(ЧастьСтроки.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецФункции

Функция ЭтоИнтерактивноеСоздание(Форма, СсылкаНаОбъект)
	
	Возврат Не ЗначениеЗаполнено(СсылкаНаОбъект)
		И Форма.Параметры.Свойство("РаботаСНоменклатурой_АдресДанныхЗаполнения") 
			И ЭтоАдресВременногоХранилища(Форма.Параметры.РаботаСНоменклатурой_АдресДанныхЗаполнения);
	
КонецФункции

Процедура УбратьРанееЗагруженныеКатегории(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторКатегории", 
		Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.Измерения.ИдентификаторКатегории.Тип);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаИдентификаторов, Идентификаторы, "ИдентификаторКатегории");
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ПОМЕСТИТЬ ВТИдентификаторыКатегорий
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИдентификаторыКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	ВТИдентификаторыКатегорий КАК ВТИдентификаторыКатегорий
	|ГДЕ
	|	НЕ ВТИдентификаторыКатегорий.ИдентификаторКатегории В
	|				(ВЫБРАТЬ
	|					СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
	|				ИЗ
	|					РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой)";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторКатегории");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СообщитьПользователюОНарушенииПравДоступа()
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеНоменклатуры(КоличествоОбновленныхЗаписей)
	
	РаботаСНоменклатуройСлужебный.ОбновитьАвтоматическиОбновляемыеОбъекты(КоличествоОбновленныхЗаписей);

КонецПроцедуры

Функция НовыйЭлементВидаНоменклатуры(ДанныеЗаполнения)
	
	// Создание вида номенклатуры
	
	ВидНоменклатурыСсылка = Неопределено;
	
	РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка);
	
	Если Не ЗначениеЗаполнено(ВидНоменклатурыСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
	
	ПараметрыЗаписи.ВидНоменклатуры = ВидНоменклатурыСсылка;
	ПараметрыЗаписи.ИдентификаторыКатегорий.Добавить(ДанныеЗаполнения.Идентификатор, ДанныеЗаполнения.Наименование);
	
	ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);
	
	// Создание дополнительных реквизитов и значений
	
	ДополнительныеРеквизиты = ПустаяТаблицаСоответствияРеквизитов();
	
	СоздатьДополнительныеРеквизитыИЗначения(ВидНоменклатурыСсылка, ДанныеЗаполнения, ДополнительныеРеквизиты);
	
	ЗаписатьСоответствиеРеквизитов(ВидНоменклатурыСсылка, ДополнительныеРеквизиты);
	
	Возврат ВидНоменклатурыСсылка;
	
КонецФункции

Процедура СоздатьДополнительныеРеквизитыИЗначения(ВидНоменклатурыСсылка, ДанныеЗаполнения, ДополнительныеРеквизиты)
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, Ложь);	
	КонецЦикла;
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.Характеристики.ДополнительныеРеквизиты Цикл
		СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, Истина);	
	КонецЦикла;
	
	РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатурыСсылка, 
		ДополнительныеРеквизиты.Скопировать(Новый Структура("ЯвляетсяРеквизитомХарактеристики", Ложь)).ВыгрузитьКолонку("РеквизитОбъекта"), Ложь);
	
	РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатурыСсылка, 
		ДополнительныеРеквизиты.Скопировать(Новый Структура("ЯвляетсяРеквизитомХарактеристики", Истина)).ВыгрузитьКолонку("РеквизитОбъекта"), Истина);
	
КонецПроцедуры

Функция ПолучитьДанныеКатегорийПоИдентификаторам(ИдентификаторыКатегорий, ДанныеПоРодителям = Ложь, Отказ = Ложь)
	
	// Порционное получение данных сделано не через пейджинг, 
	// поскольку есть ограничение на максимальное количество идентификатор для метода сервиса.
	
	Если ТипЗнч(ИдентификаторыКатегорий) = Тип("Строка") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	ИмяПоля = "Идентификаторы";
	
	Если ДанныеПоРодителям Тогда
		ИмяПоля = "ИдентификаторыРодителей";
	КонецЕсли;
	
	ОграничениеПакетаЗапроса = 500;
	ОбщийСчетчик             = 0;
	МаксимальныйИндекс       = ИдентификаторыКатегорий.ВГраница();
	ТаблицаКатегорийИтоговая = Неопределено;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	
	ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	Пока Истина Цикл
		
		ПорцияИдентификаторов = Новый Массив;
		
		Для Счетчик = 1 По ОграничениеПакетаЗапроса Цикл
			
			ТекущийИндекс = ОбщийСчетчик + Счетчик - 1;
			
			Если ТекущийИндекс > МаксимальныйИндекс Тогда
				Прервать;
			КонецЕсли;
			
			ПорцияИдентификаторов.Добавить(ИдентификаторыКатегорий[ТекущийИндекс]);
			
		КонецЦикла;
		
		ОбщийСчетчик = ОбщийСчетчик + ОграничениеПакетаЗапроса;
		
		Если ПорцияИдентификаторов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПоисковыйЗапрос[ИмяПоля] = ПорцияИдентификаторов;

		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыИЗначенияКатегорий(ТаблицаКатегорий, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТаблицаКатегорийИтоговая = Неопределено Тогда
			ТаблицаКатегорийИтоговая = ТаблицаКатегорий.СкопироватьКолонки();
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТаблицаКатегорий Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаКатегорийИтоговая.Добавить(), СтрокаТЗ);
		КонецЦикла;

	КонецЦикла;
	
	Если ТаблицаКатегорийИтоговая = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Возврат ТаблицаКатегорийИтоговая;
	
КонецФункции

Функция ПолучитьЗначенияВсехДополнительныхРеквизитов(ИдентификаторыКатегорий, Отказ = Ложь)
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий();
	
	ПараметрыЗапроса.Идентификаторы = ИдентификаторыКатегорий;
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса);
	
	Возврат РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецФункции

Процедура ОтправитьДанныеПорционно(ИзмененныеОбъекты, ДанныеДляОтправки, ТипОбъектов, Отказ)

	Если СтрСравнить(ТипОбъектов, "Категории") = 0 Тогда
		ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
		ИмяПараметра = "ОбновляемыеКатегории";
	ИначеЕсли СтрСравнить(ТипОбъектов, "Номенклатура") = 0  Тогда	
		ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();	
		ИмяПараметра = "ОбновлениеНоменклатуры";
	КонецЕсли;
	
	РазмерПорции          = КоличествоСтрокДанныхДляПроверкиОбновления();
	КоличествоСтрокДанных = ДанныеДляОтправки.Количество();
	СтрокиДляОтправки     = Новый Массив;
	СчетчикПорции         = 0;
	СчетчикСтрокДанных    = 0;
	ТаблицаСоздана        = Ложь;
	
	Для каждого ЭлементКоллекции Из ДанныеДляОтправки Цикл
		
		СтрокиДляОтправки.Добавить(ЭлементКоллекции);
		
		СчетчикПорции = СчетчикПорции + 1;
		СчетчикСтрокДанных = СчетчикСтрокДанных + 1;
		
		Если СчетчикПорции = РазмерПорции ИЛИ СчетчикСтрокДанных = КоличествоСтрокДанных Тогда
			
			ПараметрыПоиска[ИмяПараметра] = СтрокиДляОтправки;
			ПараметрыПоиска.НаборПолей    = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
			
			Если СтрСравнить(ТипОбъектов, "Категории") = 0 Тогда
				ПараметрыКоманды              = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыПоиска);
			ИначеЕсли СтрСравнить(ТипОбъектов, "Номенклатура") = 0  Тогда	
				ПараметрыКоманды              = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыПоиска);	
			КонецЕсли;
			
			ОбновляемыеОбъекты = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);	
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;

			Если НЕ ТаблицаСоздана Тогда
				ИзмененныеОбъекты = ОбновляемыеОбъекты.Скопировать();
				ТаблицаСоздана = Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОбновляемыеОбъекты, ИзмененныеОбъекты);
			КонецЕсли;
			
			СчетчикПорции = 0;
			СтрокиДляОтправки.Очистить();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСтавкиНДС(Знач СтавкаНДС)
	
	СтавкаНДССтрокой = Строка(СтавкаНДС);
	
	Если Найти("-", СтавкаНДССтрокой) > 0 Тогда
		Возврат СтавкаНДССтрокой;
	Иначе
		Возврат СтавкаНДССтрокой + "%";	
	КонецЕсли;
	
КонецФункции

// Количество строк коллекции для проверки обновления номенклатуры и видов номенклатуры.
// 
// Возвращаемое значение:
//  Число - количество строк.
//
Функция КоличествоСтрокДанныхДляПроверкиОбновления()
	
	Возврат 10000;
	
КонецФункции

Функция РазмерПорцииДанныхНоменклатуры() Экспорт
	
	Возврат 100;
	
КонецФункции

Функция РазмерПорцииДанныхХарактеристик() Экспорт
	
	Возврат 100;
	
КонецФункции

Процедура СформироватьТехническоеПредставлениеНоменклатуры(
			ТекущиеИдентификаторы, 
			ДанныеПоНоменклатуре, 
			ХранилищеКэшей, 
			ПредставлениеНоменклатуры, 
			РасшифровкаСостояния)
	
	// Обработка ошибок.
	
	ПутьКТабличномуДокументу = ХранилищеКэшей.Получить(
		ТекущиеИдентификаторы.ИдентификаторНоменклатуры 
			+ ТекущиеИдентификаторы.ИдентификаторХарактеристики);
	
	Если РасшифровкаСостояния.ОбъектУдален Тогда
		
		ПоместитьВоВременноеХранилище(ПредставлениеУдаленногоОбъекта(), ПутьКТабличномуДокументу);
		
	ИначеЕсли РасшифровкаСостояния.ПревышеноКоличествоЗапросов Тогда
		
		ПоместитьВоВременноеХранилище(ПредставлениеПревышениеЛимита(), ПутьКТабличномуДокументу);
		ПредставлениеНоменклатуры.ПревышенЛимит = Истина;
		
	ИначеЕсли РасшифровкаСостояния.ОбъектНеНайден Тогда
		
		ПоместитьВоВременноеХранилище(ПредставлениеОбъектОтсутствует("Номенклатура"), ПутьКТабличномуДокументу);
		ПредставлениеНоменклатуры.ПревышенЛимит = Ложь;	

	КонецЕсли;
		
	ПредставлениеНоменклатуры.ПутьКТабличномуДокументу    = ПутьКТабличномуДокументу;
	
КонецПроцедуры

// Параметры записи соответствия вида номенклатуры.
// 
// Возвращаемое значение:
//  Структура - параметры записи.
//
Функция ПараметрыЗаписиСоответствияВидаНоменклатуры() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ВидНоменклатуры",                        Неопределено);
	Параметры.Вставить("ОбновляетсяАвтоматически",               Истина);
	Параметры.Вставить("ЗагружатьХарактеристикиВХарактеристики", Истина);
	Параметры.Вставить("ЭтоГруппаКатегорий",                     Ложь);
	Параметры.Вставить("ИдентификаторыКатегорий",                Новый СписокЗначений);
	Параметры.Вставить("Замещать",                               Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Функция возвращает ссылки и идентификаторы загруженных характеристик с отбором по виду номенклатуры.
//
// Параметры:
//  ВладелецХарактеристик		 - Ссылка - ссылка на вид номенклатуры.
//  ИдентификаторыХарактеристик	 - Массив(Строка) - идентификаторы характеристик.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки: ХарактеристикаСсылка, ИдентификаторХарактеристики.
//
Функция ЗагруженныеХарактеристикиПоВладельцу(ВладелецХарактеристик, ИдентификаторыХарактеристик)
	
	// Подготовка текста запроса.
	// Основа запроса - запрос характеристик по владельцу, далее идет внутреннее соединение 
	// с регистром соответствия номенклатуры и характеристик.
	
	ТекстЗапроса = "";
	
	РаботаСНоменклатуройПереопределяемый.ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ПакетЗапроса.Операторы[0];	
		
	ПакетЗапроса.Операторы[0].ВыбиратьРазличные = Истина;
		
	ТаблицаХарактеристик = ОператорЗапроса.Источники[0];
	СоответствиеНоменклатуры = ОператорЗапроса.Источники.
		Добавить("РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой","СоответствиеНоменклатуры");
		
	СоответствиеНоменклатуры.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	СоответствиеНоменклатуры.Соединения[0].Условие = 
		Новый ВыражениеСхемыЗапроса("Характеристики.Ссылка = СоответствиеНоменклатуры.Характеристика 
			|И СоответствиеНоменклатуры.ИдентификаторХарактеристикиСервиса В (&ИдентификаторыХарактеристик)
			|И СоответствиеНоменклатуры.Характеристика <> &ПустаяХарактеристика");
	
	ОператорЗапроса.ВыбираемыеПоля.Добавить("СоответствиеНоменклатуры.ИдентификаторХарактеристикиСервиса");
	
	ПакетЗапроса.Колонки[0].Псевдоним = "ХарактеристикаСсылка";
	ПакетЗапроса.Колонки[1].Псевдоним = "ИдентификаторХарактеристики";
		
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Выполнение запроса.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
			
	Запрос.УстановитьПараметр("ПустаяХарактеристика",        ПустаяСсылкаНаХарактеристику());
	Запрос.УстановитьПараметр("Владелец",                    ВладелецХарактеристик);
	Запрос.УстановитьПараметр("ИдентификаторыХарактеристик", ИдентификаторыХарактеристик);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДополнительныеРеквизитыИЗначенияКатегорий(ТаблицаКатегорий, Отказ)
	
	ИдентификаторыКатегорий = ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор");
	
	ЗначенияКатегорий = ПолучитьЗначенияВсехДополнительныхРеквизитов(ИдентификаторыКатегорий, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДополнительныхРеквизитов = Новый Массив;
	
	Для каждого ТекущаяКатегорий Из ТаблицаКатегорий Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ИдентификаторыДополнительныхРеквизитов, 
			ТекущаяКатегорий.ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор"),
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ИдентификаторыДополнительныхРеквизитов, 
			ТекущаяКатегорий.Характеристики.ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор"),
			Истина);
			
	КонецЦикла;
	
	ОграничениеПакетаЗапроса = 500;
	ОбщийСчетчик             = 0;
	МаксимальныйИндекс       = ИдентификаторыДополнительныхРеквизитов.ВГраница();
	ДополнительныеРеквизиты  = Неопределено;
	
	Пока Истина Цикл
		
		ПорцияИдентификаторов = Новый Массив;
		
		Для Счетчик = 1 По ОграничениеПакетаЗапроса Цикл
			
			ТекущийИндекс = ОбщийСчетчик + Счетчик - 1;
			
			Если ТекущийИндекс > МаксимальныйИндекс Тогда
				Прервать;
			КонецЕсли;
			
			ПорцияИдентификаторов.Добавить(ИдентификаторыДополнительныхРеквизитов[ТекущийИндекс]);
			
		КонецЦикла;
		
		ОбщийСчетчик = ОбщийСчетчик + ОграничениеПакетаЗапроса;
		
		Если ПорцияИдентификаторов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТаблицаРеквизитов = ДополнительныеРеквизиты(
			ПорцияИдентификаторов, 
			Неопределено, 
			Отказ);

		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты = Неопределено Тогда
			ДополнительныеРеквизиты = ТаблицаРеквизитов.СкопироватьКолонки("Идентификатор, ДатаИзменения");
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТаблицаРеквизитов Цикл
			ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты.Добавить(), СтрокаТЗ, "Идентификатор, ДатаИзменения");
		КонецЦикла;
		
	КонецЦикла;
		
	Для каждого Категория Из ТаблицаКатегорий Цикл
		
		Категория.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
		Категория.ДополнительныеРеквизиты.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
		Категория.ДополнительныеРеквизиты.Колонки.Добавить("Значения");
		
		Категория.Характеристики.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
		Категория.Характеристики.ДополнительныеРеквизиты.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
		Категория.Характеристики.ДополнительныеРеквизиты.Колонки.Добавить("Значения");
		
		ЗначенияТекущейКатегории = ЗначенияКатегорий.Скопировать(Новый Структура("ИдентификаторКатегории", Категория.Идентификатор));
		
		////////////////////////////////////////////////////////////////////////////////
		
		Для каждого ДополнительныйРеквизит Из Категория.ДополнительныеРеквизиты Цикл
			
			СтрокаРеквизита = ДополнительныеРеквизиты.Найти(ДополнительныйРеквизит.Идентификатор, "Идентификатор");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.ДатаИзменения = СтрокаРеквизита.ДатаИзменения;
			КонецЕсли;
			
			СтрокаРеквизита = ЗначенияТекущейКатегории.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторДополнительногоРеквизита");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.Значения = СтрокаРеквизита.Значения.Скопировать();
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ЗначениеИнформационнойБазы");
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДополнительныйРеквизит Из Категория.Характеристики.ДополнительныеРеквизиты Цикл
			
			СтрокаРеквизита = ДополнительныеРеквизиты.Найти(ДополнительныйРеквизит.Идентификатор, "Идентификатор");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.ДатаИзменения = СтрокаРеквизита.ДатаИзменения;
			КонецЕсли;
			
			СтрокаРеквизита = ЗначенияТекущейКатегории.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторДополнительногоРеквизита");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.Значения = СтрокаРеквизита.Значения.Скопировать();
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ЗначениеИнформационнойБазы");
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

#Область ДлительныеОперации

Процедура СохранитьПодтвержденныеСопоставления(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ЗаполнятьНоменклатуруПриСопоставлении      = Параметры.ЗаполнятьНоменклатуруПриСопоставлении;
	УстанавливатьАвтоматическийРежимОбновления = Параметры.УстанавливатьАвтоматическийРежимОбновления;
	НоменклатураДляСопоставления               = Параметры.НоменклатураДляСопоставления;
	ПодсистемаВладелец                         = Параметры.ПодсистемаВладелец;
	
	НоменклатураСсылка               = Неопределено;
	ХарактеристикаСсылка             = Неопределено;
	ВидыНоменклатурыДляСопоставления = Новый Массив;
	
	Пока Истина Цикл // Порционное чтение данных
		
		ДанныеРегистраСоответствий = ДанныеРегистраДляСопоставления(
			ПодсистемаВладелец, НоменклатураДляСопоставления, НоменклатураСсылка, ХарактеристикаСсылка);

		Если Не ЗначениеЗаполнено(ДанныеРегистраСоответствий) Тогда
			Прервать;	
		КонецЕсли;
		
		КоличествоСтрок = ДанныеРегистраСоответствий.Количество();
		
		Если КоличествоСтрок > РазмерПорцииДанныхИнформационнойБазы() Тогда
			НоменклатураСсылка = ДанныеРегистраСоответствий[КоличествоСтрок - 1].Номенклатура;
			ХарактеристикаСсылка = ДанныеРегистраСоответствий[КоличествоСтрок - 1].Характеристика;
			ДанныеРегистраСоответствий.Удалить(ДанныеРегистраСоответствий[КоличествоСтрок - 1]);
		КонецЕсли;
				
		НоменклатураСсылкиИдентификаторы = 
			ДанныеРегистраСоответствий.Скопировать(, "Номенклатура, ИдентификаторНоменклатурыСервиса");	
		
		НоменклатураСсылкиИдентификаторы.Свернуть("Номенклатура, ИдентификаторНоменклатурыСервиса");		
						
		ЗаписатьСоответствиеНоменклатуры(
			ДанныеРегистраСоответствий, 
			УстанавливатьАвтоматическийРежимОбновления, 
			Отказ);
										
		Если ЗаполнятьНоменклатуруПриСопоставлении Тогда
			
			ЗаполнитьНоменклатуруПриСопоставлении(НоменклатураСсылкиИдентификаторы, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			// Данные по категориям доступны только для купленной номенклатуры, 
			// поэтому сохранение сопоставления видов номенклатуры происходит только при 
			// режиме заполнения номенклатуры (происходит покупка карточек).
			
			ЗаписатьСоответствиеВидовНоменклатуры(
				НоменклатураСсылкиИдентификаторы,  
				ВидыНоменклатурыДляСопоставления);	
			
		КонецЕсли;

		Если КоличествоСтрок <= РазмерПорцииДанныхИнформационнойБазы() Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Отказ",                            Отказ);
	Результат.Вставить("ВидыНоменклатурыДляСопоставления", ВидыНоменклатурыДляСопоставления);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			
КонецПроцедуры

Процедура ОбновитьВариантыСопоставленияНоменклатуры(Знач Параметры, Знач АдресРезультата) Экспорт
		
	Номенклатура = Параметры.Номенклатура;
	Характеристика = Параметры.Характеристика;
	
	СтрокаПоиска = СокрЛП(СтрШаблон("%1 %2", Строка(Номенклатура), Строка(Характеристика)));
		
	ПараметрыЗапроса                   = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.СтрокаПоиска      = СтрокаПоиска;
	ПараметрыЗапроса.КоличествоЗаписей = 50;
	ПараметрыЗапроса.НаборПолей        = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	ПараметрыЗапроса.Штрихкоды         = ШтрихкодыНоменклатуры(Номенклатура, Характеристика);
	ПараметрыКоманды                   = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);

	Отказ = Ложь;
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);	
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемыеЗапросы

Процедура ПодготовитьЗапросФормыСопоставленияНоменклатуры(Список, НоменклатураДляОтбора, ОтображатьСопоставленные)
	
	РежимыЗагрузки = Новый Массив;	
	
	РежимыЗагрузки.Добавить(Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики);
	РежимыЗагрузки.Добавить(Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление);
		
	Список.ТекстЗапроса =	
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В (ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Проверено), ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сопоставлено,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.КоличествоВариантов КАК КоличествоСовпадений,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеХарактеристикиСервиса КАК ПредставлениеХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик В (&РежимЗагрузкиХарактеристик)";
	
	Если Не ОтображатьСопоставленные Тогда
		Список.ТекстЗапроса = Список.ТекстЗапроса + " И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления <> &Сопоставлено";
		Список.Параметры.УстановитьЗначениеПараметра("Сопоставлено", Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураДляОтбора) Тогда
		Список.ТекстЗапроса = Список.ТекстЗапроса + " И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В ИЕРАРХИИ (&НоменклатураДляОтбора)";
		Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДляОтбора", НоменклатураДляОтбора);	
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("РежимЗагрузкиХарактеристик", РежимыЗагрузки);
				
КонецПроцедуры

Процедура ПодготовитьЗапросСтатистикиСопоставленияНоменклатуры(Запрос, НоменклатураДляОтбора = Неопределено)
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.ТочноеСовпадение
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ТочноеСовпадение,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.ТочноеСовпадение
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК НеточноеСовпадение,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.КоличествоВариантов = 0
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК НетСовпадений,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Проверено)
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КоличествоПодготовлено
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	(&ВсяНоменклатура
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В ИЕРАРХИИ (&НоменклатураДляОтбора))
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик <> ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления <> &Сопоставлено";
	
	Запрос.УстановитьПараметр("НоменклатураДляОтбора", НоменклатураДляОтбора);
	Запрос.УстановитьПараметр("Сопоставлено",          Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("ВсяНоменклатура",       Не ЗначениеЗаполнено(НоменклатураДляОтбора));
		
КонецПроцедуры

Процедура ПодготовитьЗапросСопоставленийДляСохранения(
			Запрос, 
			НоменклатураДляСопоставления, 
			Номенклатура, 
			Характеристика)
	
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеХарактеристикиСервиса КАК ПредставлениеХарактеристикиСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик КАК РежимЗагрузкиХарактеристик
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Проверено)
	|	И (&ВсяНоменклатура
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В ИЕРАРХИИ (&НоменклатураДляОтбора))
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура >= &Номенклатура
	|	И ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика >= &Характеристика
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура",          Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",        Характеристика);
	Запрос.УстановитьПараметр("НоменклатураДляОтбора", НоменклатураДляСопоставления);
	Запрос.УстановитьПараметр("ВсяНоменклатура",       Не ЗначениеЗаполнено(НоменклатураДляСопоставления));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(РазмерПорцииДанныхИнформационнойБазы() + 1, "ЧГ="));
				
КонецПроцедуры

Процедура ПодготовитьЗапросДляПоискаНоменклатурыВСервисе(
			Запрос, 
			НоменклатураДляОтбора, 
			НоменклатураСсылка, 
			ХарактеристикаСсылка)
	
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик <> ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики)
	|	И (&ВсяНоменклатура
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В ИЕРАРХИИ (&НоменклатураДляОтбора))
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура >= &НоменклатураСсылка
	|	И ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &НоменклатураСсылка
	|				ТОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика >= &ХарактеристикаСсылка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("НоменклатураДляОтбора", НоменклатураДляОтбора);
	Запрос.УстановитьПараметр("ВсяНоменклатура",       Не ЗначениеЗаполнено(НоменклатураДляОтбора));
	Запрос.УстановитьПараметр("НоменклатураСсылка",    НоменклатураСсылка);
	Запрос.УстановитьПараметр("ХарактеристикаСсылка",  ХарактеристикаСсылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(РазмерПорцииДанныхИнформационнойБазы() + 1, "ЧГ="));	
	
КонецПроцедуры

Процедура ПодготовитьЗапросДляПроверкиНаличияПодтвержденныхЗаписей(Запрос, НоменклатураДляСопоставления) Экспорт
	
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ПолеПроверки
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Проверено)
	|	И (&ВсяНоменклатура
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В ИЕРАРХИИ (&НоменклатураДляОтбора))";
	
	Запрос.УстановитьПараметр("ВсяНоменклатура", Не ЗначениеЗаполнено(НоменклатураДляСопоставления));
	Запрос.УстановитьПараметр("НоменклатураДляОтбора", НоменклатураДляСопоставления);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромСоответствия

Процедура НайтиНоменклатуруПоШрихкодуИЗаписатьРезультат(ДанныеПоШтрихкодам, Отказ)
	
	РезультатПоиска = Новый ТаблицаЗначений;
	
	РезультатПоиска.Колонки.Добавить("Номенклатура");
	РезультатПоиска.Колонки.Добавить("Характеристика");
	РезультатПоиска.Колонки.Добавить("ИдентификаторНоменклатурыСервиса");
	РезультатПоиска.Колонки.Добавить("ПредставлениеНоменклатурыСервиса");
	РезультатПоиска.Колонки.Добавить("ИдентификаторХарактеристикиСервиса");
	РезультатПоиска.Колонки.Добавить("ПредставлениеХарактеристикиСервиса");
	
	НайденныеШтрихкоды = ДанныеПоШтрихкодам.Скопировать(, "Штрихкод");
	
	НайденныеШтрихкоды.Свернуть("Штрихкод");
	
	Штрихкоды = Новый Массив;
	
	Для каждого ЭлементКоллекции Из НайденныеШтрихкоды Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Штрихкод) Тогда
			Штрихкоды.Добавить(ЭлементКоллекции.Штрихкод);
		КонецЕсли;
	КонецЦикла;	
	
	Если Штрихкоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураПоШтрихкодам = НоменклатураПоШтрихкодам(Штрихкоды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутыеДанныеПоШтрихкодам = РазвернутыеДанныеПоШтрихкодам(НоменклатураПоШтрихкодам);
	
	Для каждого Номенклатура Из РазвернутыеДанныеПоШтрихкодам Цикл

		СтрокиПоискаШтрихкоды = ДанныеПоШтрихкодам.НайтиСтроки(Новый Структура("Штрихкод", Номенклатура.Штрихкод));
		
		Для каждого ЭлементСтрокиТаблицыПоиска Из СтрокиПоискаШтрихкоды Цикл
			
			НоваяСтрока = РезультатПоиска.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСтрокиТаблицыПоиска);
			
			НоваяСтрока.ИдентификаторНоменклатурыСервиса   = Номенклатура.ИдентификаторНоменклатуры;
			НоваяСтрока.ПредставлениеНоменклатурыСервиса   = Номенклатура.НаименованиеНоменклатуры;
			НоваяСтрока.ИдентификаторХарактеристикиСервиса = Номенклатура.ИдентификаторХарактеристики;
			НоваяСтрока.ПредставлениеХарактеристикиСервиса = Номенклатура.НаименованиеХарактеристики;

		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьРезультатПоиска(РезультатПоиска);
		
КонецПроцедуры

Процедура ЗаписатьСоответствиеНоменклатуры(
			ДанныеРегистраСоответствий, 
			УстанавливатьАвтоматическийРежимОбновления, 
			Отказ)
			
	ДанныеЗаполнения = ПараметрыЗаписиСоответствияНоменклатуры();
	
	НоменклатураСХарактеристиками = Новый Соответствие;

	СчетчикТранзакции = 0;
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого ЭлементКоллекции Из ДанныеРегистраСоответствий Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.Характеристика) Тогда
				НоменклатураСХарактеристиками.Вставить(ЭлементКоллекции.Номенклатура);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЭлементКоллекции);
			
			ДанныеЗаполнения.ОбновляетсяАвтоматически = УстанавливатьАвтоматическийРежимОбновления;
			
			ЗаписатьСоответствиеНоменклатурыИХарактеристик(ЭлементКоллекции.Номенклатура, ЭлементКоллекции.Характеристика,
				ДанныеЗаполнения);
								
			Если СчетчикТранзакции = 1000 Тогда
				СчетчикТранзакции = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			Иначе
				СчетчикТранзакции = СчетчикТранзакции + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НоменклатураСХарактеристиками.Количество() Тогда
			ИзменитьОсновныеЗаписиСоответствияНоменклатуры(
				КлючиКоллекцииКакМассив(НоменклатураСХарактеристиками), Истина);
		КонецЕсли;
				
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(
			НСтр("ru = 'Ошибка сохранения сопоставлений номенклатуры'", КодОсновногоЯзыка()), 
			ИнформацияОбОшибке());
	КонецПопытки;	
	
КонецПроцедуры

Функция КлючиКоллекцииКакМассив(ДанныеДляПреобразования) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеДляПреобразования Цикл
		Результат.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

Процедура ИзменитьОсновныеЗаписиСоответствияНоменклатуры(Номенклатура, ТолькоСопоставленные = Ложь) Экспорт
				
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса) КАК КоличествоИдентификаторовНоменклатуры,
	|	МАКСИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса) КАК ИдентификаторНоменклатурыСервиса,
	|	МИНИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса) КАК ИдентификаторХарактеристикиСервиса,
	|	МАКСИМУМ(СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса) КАК ПредставлениеНоменклатурыСервиса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Проверено
	|				ТОГДА 1
	|			КОГДА СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено
	|				ТОГДА 2
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодСтатусаСопоставления,
	|	ЛОЖЬ КАК ЭтоРежимСопоставлениеБезСопоставленныхХарактеристик
	|ПОМЕСТИТЬ ДанныеПоКоличествуХарактеристик
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	(&НеУчитыватьСтатус
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&Номенклатура)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = &ПустойРежимЗагрузки
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура,
	|	0,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&Номенклатура)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = &РежимСопоставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКоличествуХарактеристик.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.КоличествоИдентификаторовНоменклатуры) КАК КоличествоИдентификаторовНоменклатуры,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.ИдентификаторНоменклатурыСервиса) КАК ИдентификаторНоменклатурыСервиса,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.ИдентификаторХарактеристикиСервиса) КАК ИдентификаторХарактеристикиСервиса,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.ПредставлениеНоменклатурыСервиса) КАК ПредставлениеНоменклатурыСервиса,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.КодСтатусаСопоставления) КАК КодСтатусаСопоставления,
	|	МАКСИМУМ(ДанныеПоКоличествуХарактеристик.ЭтоРежимСопоставлениеБезСопоставленныхХарактеристик) КАК ЭтоРежимСопоставлениеБезСопоставленныхХарактеристик
	|ИЗ
	|	ДанныеПоКоличествуХарактеристик КАК ДанныеПоКоличествуХарактеристик
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоКоличествуХарактеристик.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",        Номенклатура);
	Запрос.УстановитьПараметр("Сопоставлено",        Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	Запрос.УстановитьПараметр("Проверено",           Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Проверено);
	Запрос.УстановитьПараметр("НеУчитыватьСтатус",   Не ТолькоСопоставленные);
	Запрос.УстановитьПараметр("ПустойРежимЗагрузки", Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ПустаяСсылка());
	Запрос.УстановитьПараметр("РежимСопоставление",  Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
		
		Если Выборка.КодСтатусаСопоставления = 1 Тогда
			СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Проверено;
		ИначеЕсли Выборка.КодСтатусаСопоставления = 2 Тогда	
			СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено;
		КонецЕсли;
		
		ЗначенияДляЗаписи = Новый Структура;
		
		ЗначенияДляЗаписи.Вставить("ПредставлениеНоменклатурыСервиса", "");
		ЗначенияДляЗаписи.Вставить("ИдентификаторНоменклатурыСервиса", "");
		ЗначенияДляЗаписи.Вставить("СтатусСопоставления",              СтатусСопоставления);
		ЗначенияДляЗаписи.Вставить("РежимЗагрузкиХарактеристик",       Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики);
		
		Если Выборка.КоличествоИдентификаторовНоменклатуры > 1 
			ИЛИ (Выборка.КоличествоИдентификаторовНоменклатуры = 1 
				И Не ЗначениеЗаполнено(Выборка.ИдентификаторХарактеристикиСервиса)) Тогда
			
			// Режим сопоставления устанавливается если:
			//	- несколько характеристик сервиса, разной номенклатуры были привязаны к характеристикам одной номенклатуры ИБ
			//	- есть хоть одна характеристика, привязанная к номенклатуре сервиса
			
			ЗначенияДляЗаписи.ПредставлениеНоменклатурыСервиса = СтрШаблон(НСтр("ru = 'Сопоставлено характеристик (%1)'"), 
				КоличествоСопоставленныхХарактеристикПоНоменклатуре(Выборка.Номенклатура));
			
			ЗначенияДляЗаписи.СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено;
			
			ЗначенияДляЗаписи.РежимЗагрузкиХарактеристик = 
				Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.Сопоставление;
			
		Иначе
			
			Если Выборка.КоличествоИдентификаторовНоменклатуры = 0
				И Выборка.ЭтоРежимСопоставлениеБезСопоставленныхХарактеристик Тогда
				
				// Если КоличествоИдентификаторовНоменклатуры = 0, значит это запись в режиме Сопоставление,
				// не имеющая сопоставленных характеристик. Для таких записей статус сопоставления сбрасывается.
				
				ЗначенияДляЗаписи.РежимЗагрузкиХарактеристик       = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики;
				ЗначенияДляЗаписи.СтатусСопоставления              = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
				ЗначенияДляЗаписи.ПредставлениеНоменклатурыСервиса = "";
				
			Иначе
				ЗаполнитьЗначенияСвойств(ЗначенияДляЗаписи, Выборка);
				
				ЗначенияДляЗаписи.РежимЗагрузкиХарактеристик =
					Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики;
			КонецЕсли;

		КонецЕсли;
		
		ИзменитьОсновнуюЗаписьСоответствияНоменклатуры(Выборка.Номенклатура, ЗначенияДляЗаписи);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьЗаписьНоменклатурыДляСопоставления(Номенклатура, Характеристика = Неопределено)
	
	ХарактеристикаДляОтбора = ?(Не ЗначениеЗаполнено(Характеристика), ПустаяСсылкаНаХарактеристику(), Характеристика);
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(ХарактеристикаДляОтбора);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 
		И НаборЗаписей[0].СтатусСопоставления <> Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();
	
	ПараметрыЗаписи.СтатусСопоставления      = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
	ПараметрыЗаписи.ОбновляетсяАвтоматически = Ложь;
	
	ЗаписатьСоответствиеНоменклатурыИХарактеристик(Номенклатура, Характеристика, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ЗарегистрироватьНоменклатуруДляСопоставления(
			ПодсистемаВладелец, 
			НоменклатураДляСопоставления = Неопределено)
			
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.РаботаСНоменклатурой.ЗарегистрироватьНоменклатуруДляСопоставления");
	
	КоличествоСозданныхЗаписей = 0;
			
	ПорцияДанных = РазмерПорцииДанныхИнформационнойБазы() + 1;
	
	ТекстЗапроса = "";
	
	РаботаСНоменклатуройПереопределяемый.ТекстЗапросаНоменклатурыИХарактеристик(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ПодсистемаВладелец = "ТорговыеПредложения" 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьДанныеИЗапросРегистрацииСопоставленияНоменклатуры(Запрос);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован запрос получения номенклатуры и характеристик'");
	КонецЕсли;
		
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	
	КолонкаНоменклатура = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("Номенклатура");
	КолонкаХарактеристика = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("Характеристика"); 
	
	Если КолонкаНоменклатура = Неопределено 
		ИЛИ КолонкаХарактеристика = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Ошибка запроса данных номенклатуры и характеристик'");
	КонецЕсли;
	
	ПолеНоменклатуры = Строка(КолонкаНоменклатура.Поля[0]);
	ПолеХарактеристики = Строка(КолонкаХарактеристика.Поля[0]);
	
	Для каждого ОператорЗапроса Из ПакетЗапроса.Операторы Цикл
		
		// ПЕРВЫЕ
	
		ОператорЗапроса.КоличествоПолучаемыхЗаписей = ПорцияДанных;
		
		// ЛЕВОЕ СОЕДИНЕНИЕ

		ТаблицаИсходная = ОператорЗапроса.Источники[0];
		СоответствиеНоменклатуры = ОператорЗапроса.Источники.
			Добавить("РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой","СоответствиеНоменклатуры");
			
		СоответствиеНоменклатуры.Соединения.Очистить();	

		СоответствиеНоменклатуры.Соединения.Добавить(ТаблицаИсходная, 
			СтрШаблон("%1  = СоответствиеНоменклатуры.Номенклатура И %2 = СоответствиеНоменклатуры.Характеристика", 
				ПолеНоменклатуры, ПолеХарактеристики));
			
		СоответствиеНоменклатуры.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
					
		Если ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
			ОператорЗапроса.Отбор.Добавить(ПолеНоменклатуры + " В ИЕРАРХИИ (&НоменклатураДляСопоставления)");
		КонецЕсли;
			
		ОператорЗапроса.Отбор.Добавить(ПолеНоменклатуры + " >= &Номенклатура");	
		ОператорЗапроса.Отбор.Добавить(СтрШаблон(
			"ВЫБОР КОГДА %1 = &Номенклатура ТОГДА %2 >= &Характеристика ИНАЧЕ ИСТИНА КОНЕЦ", 
				ПолеНоменклатуры, ПолеХарактеристики));
		ОператорЗапроса.Отбор.Добавить("СоответствиеНоменклатуры.Номенклатура ЕСТЬ NULL");
				
	КонецЦикла;
		
	// УПОРЯДОЧИТЬ ПО
	
	ПакетЗапроса.Порядок.Добавить(КолонкаНоменклатура);
	ПакетЗапроса.Порядок.Добавить(КолонкаХарактеристика);
		
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НоменклатураСсылка     = Неопределено;
	ХарактеристикаСсылка   = Неопределено;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	ПустаяХарактеристика = ПустаяСсылкаНаХарактеристику();
	
	Запрос.УстановитьПараметр("ПустаяХарактеристика",         ПустаяХарактеристика);
	Запрос.УстановитьПараметр("НоменклатураДляСопоставления", НоменклатураДляСопоставления);
	
	Пока Истина Цикл // Порционное чтение
		
		Запрос.УстановитьПараметр("Номенклатура",   НоменклатураСсылка);
		Запрос.УстановитьПараметр("Характеристика", ХарактеристикаСсылка);
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеДляРегистрации = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
				
		КоличествоСтрок = ДанныеДляРегистрации.Количество();
		
		КоличествоСозданныхЗаписей = КоличествоСозданныхЗаписей + КоличествоСтрок;
		
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоСтрок > РазмерПорцииДанныхИнформационнойБазы() Тогда
			НоменклатураСсылка = ДанныеДляРегистрации[КоличествоСтрок - 1].Номенклатура;	
			ХарактеристикаСсылка = ДанныеДляРегистрации[КоличествоСтрок - 1].Характеристика;	
			ДанныеДляРегистрации.Удалить(ДанныеДляРегистрации[КоличествоСтрок - 1]);
		КонецЕсли;
		
		НачатьТранзакцию(); // Объем данных равен РазмерПорцииДанныхИнформационнойБазы()
		
		Попытка
			СформироватьНесопоставленныеЗаписи(ДанныеДляРегистрации);
			
			ЗафиксироватьТранзакцию();	
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(
				НСтр("ru = 'Регистрация номенклатуры для сопоставления'", КодОсновногоЯзыка()), ИнформацияОбОшибке());
		КонецПопытки;
		
		Если КоличествоСтрок <= РазмерПорцииДанныхИнформационнойБазы() Тогда
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоСозданныхЗаписей/10);
	
КонецПроцедуры

Процедура СформироватьНесопоставленныеЗаписи(ДанныеДляРегистрации)
	
	НоменклатураСОсновнойЗаписью = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеДляРегистрации Цикл
				
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Характеристика) Тогда
			
			// Номенклатура без характеристик
							
			СоздатьЗаписьНоменклатурыДляСопоставления(ЭлементКоллекции.Номенклатура);
			
		Иначе
			
			// Номенклатура с характеристиками
			
			ПроверитьНаличиеОсновнойЗаписиИЗаписать(НоменклатураСОсновнойЗаписью, ЭлементКоллекции);
			
			СоздатьЗаписьНоменклатурыДляСопоставления(ЭлементКоллекции.Номенклатура, ЭлементКоллекции.Характеристика);
			
		КонецЕсли;

	КонецЦикла;	

КонецПроцедуры

Процедура ЗаполнитьРезультатПоиска(РезультатПоиска)
	
	НоменклатураИХарактеристики = РезультатПоиска.Скопировать();
	
	НоменклатураИХарактеристики.Свернуть("Номенклатура, Характеристика");
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	СчетчикТранзакций = 0;
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого ЭлементКоллекции Из НоменклатураИХарактеристики Цикл

			СтрокиПоСсылкам = РезультатПоиска.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
				ЭлементКоллекции.Номенклатура, ЭлементКоллекции.Характеристика));
			
			Запись = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьМенеджерЗаписи();	

			Запись.Номенклатура   = ЭлементКоллекции.Номенклатура;
			Запись.Характеристика = ЭлементКоллекции.Характеристика;
			
			Запись.Прочитать();
						
			ЗаполнитьЗначенияСвойств(Запись, ЭлементКоллекции);
			
			Если СтрокиПоСсылкам.Количество() > 0 Тогда
				
				СтрокаДанных = СтрокиПоСсылкам[0];
				
				Запись.КоличествоВариантов                = СтрокиПоСсылкам.Количество();
				Запись.СтатусСопоставления                = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Выбрано;
				Запись.ИдентификаторНоменклатурыСервиса   = СтрокаДанных.ИдентификаторНоменклатурыСервиса;
				Запись.ПредставлениеНоменклатурыСервиса   = СтрокаДанных.ПредставлениеНоменклатурыСервиса;
				Запись.ИдентификаторХарактеристикиСервиса = СтрокаДанных.ИдентификаторХарактеристикиСервиса;
				Запись.ПредставлениеХарактеристикиСервиса = СтрокаДанных.ПредставлениеХарактеристикиСервиса;
				Запись.ТочноеСовпадение                   = Истина;
				
			КонецЕсли;	
			
			Запись.ДатаОбновления = ДатаОбновления;
			
			Запись.Записать(Истина);
			
			Если СчетчикТранзакций = 1000 Тогда
				СчетчикТранзакций = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			Иначе
				СчетчикТранзакций = СчетчикТранзакций + 1;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Поиск соответствий 1С:Номенклатура'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПолучитьСохраненныеДанныеПоискаНоменклатурыСервиса(
			ПодсистемаВладелец, 
			НоменклатураДляОтбора, 
			НоменклатураСсылка, 
			ХарактеристикаСсылка, 
			ДанныеПоШтрихкодам)
	
	Запрос = Новый Запрос;
	
	ПодготовитьЗапросДляПоискаНоменклатурыВСервисе(
				Запрос, 
				НоменклатураДляОтбора, 
				НоменклатураСсылка, 
				ХарактеристикаСсылка);
	
	Если ПодсистемаВладелец = "ТорговыеПредложения" 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения")Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьЗапросСопоставленияНоменклатуры(Запрос);	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НоменклатураИХарактеристики = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПоШтрихкодам = Новый ТаблицаЗначений;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам);
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСопоставления

Процедура СформироватьСписокФормыСопоставления(ПодсистемаВладелец, Форма) Экспорт
	
	ПодготовитьЗапросФормыСопоставленияНоменклатуры(Форма.Список, Форма.НоменклатураДляСопоставления, Форма.ОтображатьСопоставленные);
			
	Если ПодсистемаВладелец = "ТорговыеПредложения"
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьЗапросСопоставленияНоменклатуры(Форма.Список);
	КонецЕсли;
	
КонецПроцедуры

Функция СтатистикаСопоставленияНоменклатуры(ПодсистемаВладелец, Номенклатура = Неопределено) Экспорт

	Запрос = Новый Запрос;
			
	ПодготовитьЗапросСтатистикиСопоставленияНоменклатуры(Запрос, Номенклатура);
				
	Если ПодсистемаВладелец = "ТорговыеПредложения" 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьЗапросСопоставленияНоменклатуры(Запрос);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Количество",             0);
	Результат.Вставить("ТочноеСовпадение",       0);
	Результат.Вставить("НеточноеСовпадение",     0);
	Результат.Вставить("НетСовпадений",          0);
	Результат.Вставить("КоличествоПодготовлено", 0);
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Количество()
		И РезультатЗапроса[0].Количество <> Null Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[0]);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ДанныеРегистраДляСопоставления(ПодсистемаВладелец, НоменклатураДляСопоставления, Номенклатура, Характеристика)
	
	Запрос = Новый Запрос;
			
	ПодготовитьЗапросСопоставленийДляСохранения(Запрос, НоменклатураДляСопоставления, Номенклатура, Характеристика);
	
	Если ПодсистемаВладелец = "ТорговыеПредложения" 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьЗапросСопоставленияНоменклатуры(Запрос);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
		
КонецФункции

Процедура ЗаполнитьНоменклатуруПриСопоставлении(ОбновленнаяНоменклатура, Отказ)
	
	Если ОбновленнаяНоменклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыНоменклатурыДляПокупки = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ОбновленнаяНоменклатура Цикл		
		Если ИдентификаторыНоменклатурыДляПокупки.Найти(ЭлементКоллекции.ИдентификаторНоменклатурыСервиса) = Неопределено Тогда
			ИдентификаторыНоменклатурыДляПокупки.Добавить(ЭлементКоллекции.ИдентификаторНоменклатурыСервиса);
		КонецЕсли;
	КонецЦикла;
	
	ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатурыДляПокупки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройСлужебный.РазобратьИзмененияНоменклатуры(
		ИдентификаторыНоменклатурыДляПокупки, Неопределено, Неопределено, Неопределено, Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаписатьСоответствиеВидовНоменклатуры(
			НоменклатураСсылкиИдентификаторы, 
			ВидыНоменклатурыДляСопоставления)
	
	НоменклатурыВидыНоменклатуры = Новый ТаблицаЗначений;
		
	РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре(
		НоменклатураСсылкиИдентификаторы.ВыгрузитьКолонку("Номенклатура"), НоменклатурыВидыНоменклатуры);
	
	НоменклатурыВидыНоменклатуры = НоменклатураСНеСопоставленнымиВидами(НоменклатурыВидыНоменклатуры);
		
	ИдентификаторыДляПокупки = 
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			НоменклатурыВидыНоменклатуры.ВыгрузитьКолонку("ИдентификаторНоменклатуры"));
		
	ДанныеНоменклатурыСервиса = ДанныеНоменклатурыСервиса(ИдентификаторыДляПокупки, Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатурыСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяНоменклатура Из ДанныеНоменклатурыСервиса Цикл
		
		СтрокаНоменклатуры = НоменклатурыВидыНоменклатуры.Найти(ТекущаяНоменклатура.Идентификатор, 
			"ИдентификаторНоменклатуры");
				
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
		
		ПараметрыЗаписи.ВидНоменклатуры = СтрокаНоменклатуры.ВидНоменклатуры;
		ПараметрыЗаписи.ОбновляетсяАвтоматически = Ложь;
		ПараметрыЗаписи.ИдентификаторыКатегорий.Добавить(ТекущаяНоменклатура.ИдентификаторКатегории, ТекущаяНоменклатура.НаименованиеКатегории);
		
		ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);
		
		ВидыНоменклатурыДляСопоставления.Добавить(СтрокаНоменклатуры.ВидНоменклатуры);
		
	КонецЦикла;

КонецПроцедуры

Функция НоменклатураСНеСопоставленнымиВидами(НоменклатурыВидыНоменклатуры)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДанныеНоменклатурыВидыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДанныеНоменклатурыВидыНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ НоменклатураВидыНоменклатуры
	|ИЗ
	|	&НоменклатурыВидыНоменклатуры КАК ДанныеНоменклатурыВидыНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураВидыНоменклатуры.Номенклатура КАК Номенклатура,
	|	НоменклатураВидыНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	НоменклатураВидыНоменклатуры КАК НоменклатураВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураВидыНоменклатуры.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = &ПустаяХарактеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураВидыНоменклатуры.ВидНоменклатуры = СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Идентификаторы.Номенклатура КАК Номенклатура,
	|	Идентификаторы.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Идентификаторы.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ИдентификаторКатегории ЕСТЬ NULL
	|	И НЕ Идентификаторы.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("НоменклатурыВидыНоменклатуры", НоменклатурыВидыНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаНаХарактеристику());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНаличиеОсновнойЗаписиИЗаписать(НоменклатураСОсновнойЗаписью, ЭлементКоллекции)
	
	Если НоменклатураСОсновнойЗаписью[ЭлементКоллекции.Номенклатура] <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОсновнаяЗаписьСоответствияНоменклатуры(ЭлементКоллекции.Номенклатура) = Неопределено Тогда
		
		// Если номенклатура с характеристиками регистрируется впервые, создается основная запись
		
		Параметры = ПараметрыЗаписиСоответствияНоменклатуры();
		
		Параметры.ОбновляетсяАвтоматически = Ложь;
		Параметры.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакХарактеристики;
		Параметры.СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
		
		ЗаписатьСоответствиеНоменклатурыИХарактеристик(ЭлементКоллекции.Номенклатура, Неопределено, Параметры);
		
	КонецЕсли;
	
	НоменклатураСОсновнойЗаписью.Вставить(ЭлементКоллекции.Номенклатура, Истина);
	
КонецПроцедуры

Процедура ПоискСоответствийНоменклатурыСервиса(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
		
	ЗарегистрироватьНоменклатуруДляСопоставления(ПараметрыПроцедуры.ПодсистемаВладелец, ПараметрыПроцедуры.Номенклатура);
	
	НоменклатураСсылка = Неопределено;
	ХарактеристикаСсылка = Неопределено;
	
	Отказ = Ложь;
	
	Пока Истина Цикл // Порционная обработка данных
		
		ДанныеПоШтрихкодам = Новый ТаблицаЗначений;
		
		ПолучитьСохраненныеДанныеПоискаНоменклатурыСервиса(
			ПараметрыПроцедуры.ПодсистемаВладелец,
			ПараметрыПроцедуры.Номенклатура, 
			НоменклатураСсылка, 
			ХарактеристикаСсылка, 
			ДанныеПоШтрихкодам);
				
		Если ДанныеПоШтрихкодам.Количество()  = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		КоличествоСтрок = ДанныеПоШтрихкодам.Количество();
		
		Если КоличествоСтрок > РазмерПорцииДанныхИнформационнойБазы() Тогда
			НоменклатураСсылка = ДанныеПоШтрихкодам[КоличествоСтрок - 1].Номенклатура;
			ХарактеристикаСсылка = ДанныеПоШтрихкодам[КоличествоСтрок - 1].Характеристика;
			ДанныеПоШтрихкодам.Удалить(ДанныеПоШтрихкодам[КоличествоСтрок - 1]);
		КонецЕсли;		
		
		НайтиНоменклатуруПоШрихкодуИЗаписатьРезультат(ДанныеПоШтрихкодам, Отказ);
		
		Если КоличествоСтрок <= РазмерПорцииДанныхИнформационнойБазы() Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
		
	ПоместитьВоВременноеХранилище(Отказ, АдресРезультата);
		
КонецПроцедуры

// Получение структуры реквизитов сопоставления рубрикатора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица реквизитов с указанными типами колонок.
//
Функция ОписаниеРеквизитовСопоставленияРубрикатора()
	
	ТипСтрока        = Новый ОписаниеТипов("Строка");
	ТипБулево        = Новый ОписаниеТипов("Булево");
	ТипОписаниеТипов = Новый ОписаниеТипов("ОписаниеТипов");
	ТипРеквизит      = Новый ОписаниеТипов("ПеречислениеСсылка.РеквизитыНоменклатурыДляВыгрузки");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РеквизитОбъекта",                 Метаданные.ОпределяемыеТипы.РеквизитыСопоставленияРаботаСНоменклатурой.Тип);
	Таблица.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("Сопоставлено",                    ТипСтрока);
	Таблица.Колонки.Добавить("ТипЗначения",                     ТипОписаниеТипов);
	Таблица.Колонки.Добавить("ТипРеквизитаРубрикатора",         ТипСтрока);
	Таблица.Колонки.Добавить("ВозможноСопоставление",           ТипБулево);
	Таблица.Колонки.Добавить("ФормализованныйРеквизит",         ТипРеквизит); 
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",                ТипСтрока); 
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьДополнительныеРеквизиты(Знач ДанныеПоКатегории, ДополнительныеРеквизиты) Экспорт
	
	Если ДанныеПоКатегории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Очистить();
	ЗаполнитьРеквизитыКатегорий(ДанныеПоКатегории, ДополнительныеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКатегорий(Знач ДанныеПоКатегории, ДополнительныеРеквизиты)
	
	Для Каждого ЭлементКоллекции Из ДанныеПоКатегории.ДополнительныеРеквизиты Цикл
		ДобавитьСтрокуДополнительногоРеквизита(ЭлементКоллекции, Ложь, ДополнительныеРеквизиты);
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты Цикл
		ДобавитьСтрокуДополнительногоРеквизита(ЭлементКоллекции, Истина, ДополнительныеРеквизиты);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДополнительногоРеквизита(ЭлементКоллекции, ЯвляетсяХарактеристикой, ДополнительныеРеквизиты)
	
	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
	
	НоваяСтрока.РеквизитВидаНоменклатуры         = ЭлементКоллекции.РеквизитИнформационнойБазы;
	НоваяСтрока.РеквизитКатегории                = ЭлементКоллекции.Наименование;
	НоваяСтрока.ТипРеквизитаКатегории            = ЭлементКоллекции.Тип;
	НоваяСтрока.ИдентификаторРеквизитаКатегории  = ЭлементКоллекции.Идентификатор;
	НоваяСтрока.ЯвляетсяРеквизитомХарактеристики = ЯвляетсяХарактеристикой;
	
	Если ЗначениеЗаполнено(ЭлементКоллекции.Значения) Тогда
		
		КоличествоСопоставленныхЗначений = ЭлементКоллекции.Значения.Количество()
			- ЭлементКоллекции.Значения.НайтиСтроки(Новый Структура("ЗначениеИнформационнойБазы", Неопределено)).Количество();
		
		НоваяСтрока.СопоставленоЗначений 
			= РаботаСНоменклатуройСлужебный.ТекстКоличествоСопоставленныхЗначений(
			КоличествоСопоставленныхЗначений,
			ЭлементКоллекции.Значения.Количество());
		
		НоваяСтрока.КоличествоЗначенийВСервисе = ЭлементКоллекции.Значения.Количество();
		
		Если КоличествоСопоставленныхЗначений <> НоваяСтрока.КоличествоЗначенийВСервисе Тогда
			НоваяСтрока.ЕстьНесопоставленныеЗначения = Истина;
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область БлокировкаДанных

// Устанавливает управляемую блокировку по значениям полей.
//
// Параметры:
//  Пространство - Строка - пространство блокировки.
//  Поля - Структура - ключ задает имя поля пространства блокировки, а значение:
//                     1. Источник задан: соответствующее поле источника, содержащее значения для блокировки.
//                     2. Источник не задан: непосредственно значение для блокировки.
//  Источник - РезультатЗапроса, Табличная часть, ТаблицаЗначений  - источник данных.
//  Режим - РежимБлокировкиДанных - режим блокировки.
//        - Неопределено - значение по умолчанию "Исключительный".
//
Процедура УстановитьУправляемуюБлокировку(Знач Пространство, Знач Поля = Неопределено, Знач Источник = Неопределено, Знач Режим = Неопределено)
	
	Если Режим = Неопределено Тогда
		Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Если Поля = Неопределено Тогда
		Поля = Новый Структура;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Пространство);
	Если Источник = Неопределено Тогда
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.УстановитьЗначение(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	Иначе
		ЭлементБлокировки.ИсточникДанных = Источник;
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ЭлементБлокировки.Режим = Режим;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Устанавливает управляемую блокировку по набору записей.
// Используются установленные отборы в наборе.
//
// Параметры:
//  Набор - НаборЗаписей - набор, по которому нужно установить блокировку.
//  Режим - РежимБлокировкиДанных - режим блокировки.
//        - Строка - допустимые значения "Разделяемый" и "Исключительный".
//        - Неопределено - значение по умолчанию "Исключительный".
//
//
Процедура УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Знач Набор, Знач Режим = Неопределено)
	
	МетаданныеОбъекта = Набор.Метаданные();
	ПространствоБлокировки = МетаданныеОбъекта.ПолноеИмя();
	
	Поля = Новый Структура;
	Для каждого ЭлементОтбора Из Набор.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			Поля.Вставить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУправляемуюБлокировку(ПространствоБлокировки, Поля,, Режим);
	
КонецПроцедуры

#КонецОбласти

Функция РеквизитыМетаданныхКакДополнительныеРеквизиты()
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитОбъекта", Метаданные.ОпределяемыеТипы.РеквизитыСопоставленияРаботаСНоменклатурой.Тип);
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения",     Новый ОписаниеТипов("ОписаниеТипов"));
	ДополнительныеРеквизиты.Колонки.Добавить("Представление",   ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДополнительныеРеквизиты.Индексы.Добавить("РеквизитОбъекта"); // Индекс.
	
	СоответствиеРеквизитов = Новый Соответствие;
	РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СоответствиеРеквизитов);
	Для Каждого Реквизит Из СоответствиеРеквизитов Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитОбъекта = Реквизит.Ключ;
		НоваяСтрока.ТипЗначения     = Реквизит.Значение.ТипЗначения;
		НоваяСтрока.Представление   = Реквизит.Значение.Представление;
	КонецЦикла;
	
	Возврат ДополнительныеРеквизиты;
	
КонецФункции

Функция СопоставленныеДополнительныеРеквизиты(Знач ВидНоменклатуры, Знач ВсеДополнительныеРеквизиты)
	
	ВидыНоменклатуры        = Новый СписокЗначений;
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	
	КолонкиРеквизитов = Новый Структура("Свойство, Синоним, ТипЗначения",
		"РеквизитОбъекта", "Представление", "ТипЗначения");
	ДанныеСтроки = ОбщегоНазначения.СкопироватьРекурсивно(КолонкиРеквизитов);
	Для каждого Колонка Из КолонкиРеквизитов Цикл
		ДополнительныеРеквизиты.Колонки.Добавить(Колонка.Ключ);
		ДанныеСтроки[Колонка.Ключ] = Неопределено;
	КонецЦикла;
	ВидыНоменклатуры.Добавить(ВидНоменклатуры);

	РаботаСНоменклатуройПереопределяемый.ДополнительныеРеквизитыНоменклатурыДляВыгрузки(ДополнительныеРеквизиты,
		ВидыНоменклатуры);
	
	Для каждого ОписаниеРеквизита Из ДополнительныеРеквизиты Цикл
		НовыйРеквизит = ВсеДополнительныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ОписаниеРеквизита);
		Для каждого Колонка Из КолонкиРеквизитов Цикл
			НовыйРеквизит[Колонка.Значение] = ДанныеСтроки[Колонка.Ключ];
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВсеДополнительныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта
	|ПОМЕСТИТЬ ДополнительныеРеквизиты
	|ИЗ
	|	&ВсеДополнительныеРеквизиты КАК ВсеДополнительныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СоответствиеРеквизитовПоВидам.ИдентификаторРеквизитаКатегории КАК СТРОКА(1))) = """"
	|			ТОГДА СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории
	|		ИНАЧЕ СоответствиеРеквизитовПоВидам.ИдентификаторРеквизитаКатегории
	|	КОНЕЦ КАК ИдентификаторРеквизитаКатегории,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит, ЗНАЧЕНИЕ(Перечисление.РеквизитыНоменклатурыДляВыгрузки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.РеквизитыНоменклатурыДляВыгрузки.ПустаяСсылка)
	|			ТОГДА СоответствиеОбщихРеквизитов.ФормализованныйРеквизит
	|		ИНАЧЕ СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит
	|	КОНЕЦ КАК ФормализованныйРеквизит
	|ИЗ
	|	ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВидам
	|		ПО (СоответствиеРеквизитовПоВидам.ОбъектСопоставления = &ВидНоменклатуры)
	|			И ДополнительныеРеквизиты.РеквизитОбъекта = СоответствиеРеквизитовПоВидам.РеквизитОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
	|		ПО (СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
	|			И ДополнительныеРеквизиты.РеквизитОбъекта = СоответствиеОбщихРеквизитов.РеквизитОбъекта";
	
	Запрос.УстановитьПараметр("ВсеДополнительныеРеквизиты", ВсеДополнительныеРеквизиты);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустойВидНоменклатуры", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.ПривестиЗначение());
	
	СопоставленныеРеквизиты = Запрос.Выполнить().Выгрузить();
	СопоставленныеРеквизиты.Индексы.Добавить("РеквизитОбъекта"); // Индекс.
	СопоставленныеРеквизиты.Колонки.Добавить("ТипЗначения",   Новый ОписаниеТипов("ОписаниеТипов"));
	СопоставленныеРеквизиты.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Для каждого ОписаниеРеквизита Из ВсеДополнительныеРеквизиты Цикл
		СтрокиРеквизитов = СопоставленныеРеквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", ОписаниеРеквизита.РеквизитОбъекта));
		Для каждого СтрокаРеквизита Из СтрокиРеквизитов Цикл
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ОписаниеРеквизита);
		КонецЦикла;
	КонецЦикла;
	
	СопоставленныеРеквизиты.Индексы.Очистить();
	СопоставленныеРеквизиты.Индексы.Добавить("ИдентификаторРеквизитаКатегории"); // Индекс.
	СопоставленныеРеквизиты.Сортировать("Представление");
	
	Возврат СопоставленныеРеквизиты;
	
КонецФункции

Функция РасчетСоответствийЗначений(ВидНоменклатуры, СопоставленныеРеквизиты)
	
	РеквизитыСсылочногоТипа = Новый Массив;
	Для каждого ОписаниеРеквизита Из СопоставленныеРеквизиты Цикл
		ЭтоСсылка = Ложь;
		Для каждого ОписаниеТипа Из ОписаниеРеквизита.ТипЗначения.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(ОписаниеТипа) Тогда
				ЭтоСсылка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоСсылка = Истина Тогда
			РеквизитыСсылочногоТипа.Добавить(ОписаниеРеквизита.РеквизитОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РаботаСНоменклатуройСлужебный.РасчетСоответствийЗначенийРеквизитов(ВидНоменклатуры, РеквизитыСсылочногоТипа);
	
КонецФункции

#Область СозданиеНоменклатуры

Процедура НайтиСопоставленнуюНоменклатуру(ДанныеСервиса)
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений();
	ТаблицаДляЗапроса.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаДляЗапроса.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(400));
	ТаблицаДляЗапроса.Колонки.Добавить("Номенклатура", 
		Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	
	Для Каждого Элемент Из ДанныеСервиса Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДляЗапроса.Добавить(), Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросаПоискСопоставленнойНоменклатуры());
	Запрос.УстановитьПараметр("ТаблицаДляЗапроса", ТаблицаДляЗапроса);
	
	ДанныеСервиса = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ТекстЗапросаПоискСопоставленнойНоменклатуры()
	
	Возврат "ВЫБРАТЬ
	|	ДанныеСервиса.Идентификатор,
	|	ДанныеСервиса.Наименование,
	|	ДанныеСервиса.Номенклатура
	|ПОМЕСТИТЬ ДанныеСервиса
	|ИЗ
	|	&ТаблицаДляЗапроса КАК ДанныеСервиса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСервиса.Идентификатор,
	|	ДанныеСервиса.Наименование,
	|	ДанныеСервиса.Номенклатура КАК Номенклатура
	|ИЗ
	|	ДанныеСервиса КАК ДанныеСервиса
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатуры
	|		ГДЕ
	|			СоответствиеНоменклатуры.ИдентификаторНоменклатурыСервиса = ДанныеСервиса.Идентификатор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСервиса.Идентификатор,
	|	ДанныеСервиса.Наименование,
	|	СоответствиеНоменклатуры.Номенклатура
	|ИЗ
	|	ДанныеСервиса КАК ДанныеСервиса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатуры
	|		ПО ДанныеСервиса.Идентификатор = СоответствиеНоменклатуры.ИдентификаторНоменклатурыСервиса
	|ГДЕ
	|	(СоответствиеНоменклатуры.Номенклатура, ИСТИНА) В
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(Соответствие.Номенклатура),
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК Соответствие
	|		ГДЕ
	|			Соответствие.ИдентификаторНоменклатурыСервиса = ДанныеСервиса.Идентификатор)";
	
КонецФункции

#КонецОбласти

#КонецОбласти
