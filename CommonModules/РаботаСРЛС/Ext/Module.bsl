
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАЗБОРА ОПИСАНИЙ, ПОЛУЧАЕМЫХ С ДИСКА ИТС
#Область ФункцииРазбораОписаний

// Функция разбирает текст сообщения с диска ИТС в формате РЛС
//
// Параметры:
//  ТекстСообщения - Строка - сообщение, полученное с диска ИТС
//
// Возвращаемое значение
//  Структура - разобранные данные
//
Функция РазобратьСообщениеСДискаИТС(Знач ТекстСообщения) Экспорт

	ЧтениеСообщения = Новый ЧтениеXML;
	ЧтениеСообщения.УстановитьСтроку(ТекстСообщения);
	
	Возврат РазобратьСообщение(ЧтениеСообщения);
	
КонецФункции

// Функция разбирает файл, полученный с диска ИТС в формате РЛС
//
// Параметры:
//  ИмяФайлаАдресВХранилище - Строка - имя файла на диске или адрес файла во временном хранилище
//
// Возвращаемое значение:
//  Структура - разобранные данные
//
Функция РазобратьСодержимоеФайлаСДискаИТС(ИмяФайла) Экспорт
	
	ЧтениеСообщения = Новый ЧтениеXML;
	ЧтениеСообщения.ОткрытьФайл(ИмяФайла);
	
	РезультатРазбора = РазобратьСообщение(ЧтениеСообщения);
	
	ЧтениеСообщения.Закрыть();
	
	Возврат РезультатРазбора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Описание товаров
#Область ОписаниеТоваров

// Преобразовывает считанное в структуру описание товара во внутреннюю структуру
//
// Параметры:
//  Описание - Структура, Соответствие
//
// Возвращаемое значение:
//  Структура - описание товара во внутреннем формате
//
Функция ПреобразоватьОписаниеТовараВоВнутреннийФормат(Описание, ДатаОбновления) Экспорт
	
	ОписаниеТовара = Новый Структура;
	ОписаниеТовара.Вставить("ТипСообщения", "ОписаниеТовара");
	ОписаниеТовара.Вставить("ДатаОбновления", ДатаОбновления);
	
	СоответствиеФорматов = ПолучитьСоответствиеВнутреннегоФорматаИФорматаРЛС();
	
	Для Каждого КлючИЗначение Из Описание Цикл
		
		ИмяПоля = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		
		ОписаниеПоля = Неопределено;
		Если СоответствиеФорматов.Свойство(ИмяПоля, ОписаниеПоля) Тогда
			ИмяПоля = ОписаниеПоля.Имя;
			Если ТипЗнч(Значение) = Тип("Массив") Тогда
				Для Индекс = 0 По Значение.ВГраница() Цикл
					Значение[Индекс] = ПривестиКВнутреннемуТипу(СокрЛП(Значение[Индекс]), ОписаниеПоля.Тип);
				КонецЦикла;
			Иначе
				Значение = ПривестиКВнутреннемуТипу(СокрЛП(Значение), ОписаниеПоля.Тип);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеТовара.Вставить(ИмяПоля, Значение);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеФорматов Цикл
		Если ОписаниеТовара.Свойство(КлючИЗначение.Значение.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючИЗначение.Значение.Тип));
		ОписаниеТовара.Вставить(КлючИЗначение.Значение.Имя, ОписаниеТипа.ПривестиЗначение());
	КонецЦикла;
	
	ОписаниеТовара.Вставить(
		"НомерРЛС",
		ПривестиКВнутреннемуТипу(ПолучитьНомерРЛСИзПутиКОписаниюЛС(ОписаниеТовара.СсылкаНаОписаниеВБазеРЛС), Тип("Число")));
	
	Возврат ОписаниеТовара;
	
КонецФункции

// Функция получает номер РЛС из пути к описанию ЛС на диске ИТС
//
// Параметры:
//  ПутьКОписанию - Строка - путь к описанию ЛС на диске ИТС
//
// Возвращаемое значение:
//  Строка - номер РЛС
//
Функция ПолучитьНомерРЛСИзПутиКОписаниюЛС(ПутьКОписанию) Экспорт
	
	НомерРЛС = "";
	ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКОписанию, "/");
	Если ЧастиПути.Количество() > 0 Тогда
		НомерРЛС = ЧастиПути[ЧастиПути.ВГраница()];
		НомерРЛС = СтрЗаменить(НомерРЛС, ".html", "");
	КонецЕсли;
	
	Возврат НомерРЛС;
	
КонецФункции

#КонецОбласти // ОписаниеТоваров

////////////////////////////////////////////////////////////////////////////////
// Классификаторы
#Область Классификаторы

// Выполняет чтение классификатора в формате json
// и возвращает считанные данные во внутреннем формате.
//
// Параметры:
//  ИмяФайла - Строка - имя файла классификатора.
//
// Возвращаемое значение:
//  Классификатор - Структура - считанные данные классификатора.
//
Функция ПрочитатьДанныеКлассификатораJSON(ИмяФайла) Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ИмяФайла, "windows-1251");
	
	Классификатор = Новый Структура;
	Классификатор.Вставить("ТипСообщения" , "Классификатор");
	Классификатор.Вставить("Идентификатор");
	Классификатор.Вставить("Справочник"   );
	Классификатор.Вставить("Элементы"     , Новый ТаблицаЗначений);
	
	Классификатор.Элементы.Колонки.Добавить("Код");
	Классификатор.Элементы.Колонки.Добавить("КодРодителя");
	Классификатор.Элементы.Колонки.Добавить("Наименование");
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ЛокальноеИмя = ВРег(Чтение.ТекущееЗначение);
			Чтение.Прочитать();
			Если ЛокальноеИмя = "ID" Тогда
				Классификатор.Вставить("Идентификатор", Строка(Чтение.ТекущееЗначение));
			ИначеЕсли ЛокальноеИмя = "ITEM" Тогда
				ПрочитатьЭлементыКлассификатора(Чтение, Классификатор.Элементы);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат Классификатор;
	
КонецФункции

#КонецОбласти // Классификаторы

#КонецОбласти // ФункцииРазбораОписаний

////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КЛАССИФИКАТОРОВ РЛС В БАЗУ
#Область ЗагрузкаКлассификаторовРЛС

// Процедура загружает таблицу классификатора в справочник
//
// Параметры:
//  Классификатор - таблица классификатора с полями Код, КодРодителя, Наименование
//  МетаданныеСправочника - метаданные справочника, в который загружается классификатор
//
Процедура ЗагрузитьКлассификатор(Классификатор, МетаданныеСправочника) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеСправочника.ПолноеИмя());
	ЕстьМетод = Ложь;
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(
		Менеджер, "ЗагрузитьКлассификатор", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Классификатор),,, ЕстьМетод);
	
	Если ЕстьМетод Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаКода = МетаданныеСправочника.ДлинаКода;
	КС = Новый КвалификаторыСтроки(ДлинаКода);
	
	Классификатор.Колонки.Код.Имя = "Код1";
	Классификатор.Колонки.КодРодителя.Имя = "КодРодителя1";
	Классификатор.Колонки.Наименование.Имя = "Наименование1";
	
	Классификатор.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",, КС));
	Классификатор.Колонки.Добавить("КодРодителя", Новый ОписаниеТипов("Строка",, КС));
	Классификатор.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(МетаданныеСправочника.ДлинаНаименования)));
	
	Классификатор.ЗагрузитьКолонку(Классификатор.ВыгрузитьКолонку("Код1"), "Код");
	Классификатор.ЗагрузитьКолонку(Классификатор.ВыгрузитьКолонку("КодРодителя1"), "КодРодителя");
	Классификатор.ЗагрузитьКолонку(Классификатор.ВыгрузитьКолонку("Наименование1"), "Наименование");
	
	Классификатор.Колонки.Удалить("Код1");
	Классификатор.Колонки.Удалить("КодРодителя1");
	Классификатор.Колонки.Удалить("Наименование1");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Классификатор.Код			КАК Код,
	|	Классификатор.КодРодителя	КАК КодРодителя,
	|	Классификатор.Наименование	КАК Наименование
	|ПОМЕСТИТЬ
	|	Классификатор
	|ИЗ
	|	&Классификатор КАК Классификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Классификатор.Код			КАК Код,
	|	Классификатор.КодРодителя	КАК КодРодителя,
	|	Классификатор.Наименование	КАК Наименование,
	|	Справочник.Ссылка			КАК Ссылка,
	|	Справочник.ПометкаУдаления	КАК ПометкаУдаления,
	|	Справочник.Родитель.Код 	КАК КодРодителяСтарый,
	|	Справочник.Наименование 	КАК НаименованиеСтарое
	|ИЗ
	|	Классификатор КАК Классификатор
	|		ПОЛНОЕ СОЕДИНЕНИЕ
	|			Справочник." + МетаданныеСправочника.Имя + " КАК Справочник
	|			ПО
	|				Классификатор.Код = Справочник.Код
	|";
	
	ТаблицаКлассификатора = Запрос.Выполнить().Выгрузить();
	
	СтрокиКлассификатора = ТаблицаКлассификатора.НайтиСтроки(Новый Структура("КодРодителя", NULL));
	Для Каждого ЭлементКлассификатора Из СтрокиКлассификатора Цикл
		Если Не ЭлементКлассификатора.ПометкаУдаления Тогда
			Элемент = ЭлементКлассификатора.Ссылка.ПолучитьОбъект();
			Элемент.УстановитьПометкуУдаления(Истина, Ложь);
		КонецЕсли;
		ТаблицаКлассификатора.Удалить(ЭлементКлассификатора);
	КонецЦикла;
	
	ОбновитьЭлементыКлассификатораПоРодителю(ТаблицаКлассификатора, МетаданныеСправочника);
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаКлассификаторовРЛС

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАЗБОРА ОПИСАНИЙ, ПОЛУЧАЕМЫХ С ДИСКА ИТС
#Область ФункцииРазбораОписаний

Функция РазобратьСообщение(ЧтениеСообщения)
	
	Если Не ЧтениеСообщения.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru='Пустой XML'"));
	КонецЕсли;
	
	ТипСообщения = ВРЕГ(ЧтениеСообщения.ЛокальноеИмя);
	Если ТипСообщения = "ARTICLE" Тогда
		Возврат РазобратьОписаниеТовара(ЧтениеСообщения);
	КонецЕсли;
	Если ТипСообщения = "RESULTSET" Тогда
		Возврат РазобратьРезультатПоискаЛС(ЧтениеСообщения);
	КонецЕсли;
	Если ТипСообщения = "DICT" Тогда
		Возврат РазобратьКлассификатор(ЧтениеСообщения);
	КонецЕсли;
	
	ВызватьИсключение(НСтр("ru='Ошибка в структуре XML: неизвестный тип сообщения'"));
	
КонецФункции

Функция ПривестиКВнутреннемуТипу(ТекстЗначения, ТипЗначения)
	
	Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения);
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ТекстЗначения);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Попытка
			Значение = Булево(ТекстЗначения);
		Исключение
			Значение = ЗначениеЗаполнено(ТекстЗначения);
		КонецПопытки;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) И ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗначения) = "Перечисление" Тогда
		Значение = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОписаниеТипа.ПривестиЗначение()).Получить(Число(ТекстЗначения) - 1);
	Иначе
		Значение = ОписаниеТипа.ПривестиЗначение(ТекстЗначения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОписаниеРеквизита(Имя, Тип)
	Возврат Новый Структура("Имя, Тип", Имя, Тип);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Описание товаров
#Область ОписаниеТоваров

Функция РазобратьОписаниеТовара(ЧтениеОписания)
	
	// <ARTICLE updatedate=UPDATEDATE computername=COMPNAME username=USERNAME>
	//  <P name=Имя>
	//    Значение
	//      ИЛИ
	//    <V>Значение</V>
	//      ...
	//    <V>Значение</V>
	//  </P>
	//  ...
	// </ARTICLE>
	
	ДатаОбновления = ПривестиКВнутреннемуТипу(ЧтениеОписания.ПолучитьАтрибут("updatedate"), Тип("Дата"));
	ОписаниеТовара = Новый Структура;
	Пока ЧтениеОписания.Прочитать() Цикл
		
		Если ЧтениеОписания.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеОписания.Имя = "P" Тогда
				ИмяПоля = ЧтениеОписания.ПолучитьАтрибут("name");
				ОписаниеТовара.Вставить(ИмяПоля);
			ИначеЕсли ЧтениеОписания.Имя = "V" Тогда
				Если ТипЗнч(ОписаниеТовара[ИмяПоля]) <> Тип("Массив") Тогда
					ОписаниеТовара[ИмяПоля] = Новый Массив;
				КонецЕсли;
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка разбора описания товара. Некорректное имя свойства: %1'"),
					ЧтениеОписания.Имя);
			КонецЕсли;
			
		ИначеЕсли ЧтениеОписания.ТипУзла = ТипУзлаXML.Текст Тогда
				
			ЗначениеСвойства = СокрЛП(ЧтениеОписания.Значение);
			
			Если ТипЗнч(ОписаниеТовара[ИмяПоля]) = Тип("Массив") Тогда
				ОписаниеТовара[ИмяПоля].Добавить(ЗначениеСвойства);
			Иначе
				ОписаниеТовара[ИмяПоля] = ЗначениеСвойства;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОписания.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеОписания.Имя = "ARTICLE" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПреобразоватьОписаниеТовараВоВнутреннийФормат(ОписаниеТовара, ДатаОбновления);
	
КонецФункции

Функция ПолучитьСоответствиеВнутреннегоФорматаИФорматаРЛС()
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипБулево = Тип("Булево");
	ТипДата = Тип("Дата");
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("URL"                    , ОписаниеРеквизита("СсылкаНаОписаниеВБазеРЛС", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Коды ЛС
	СтруктураВозврата.Вставить("DRUGID"                 , ОписаниеРеквизита("УникальныйКодРосздравнадзора", ТипЧисло));
	СтруктураВозврата.Вставить("PackNX"                 , ОписаниеРеквизита("КодРосздравнадзора", ТипЧисло));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Основные поля
	СтруктураВозврата.Вставить("NAME"                   , ОписаниеРеквизита("Наименование", ТипСтрока));
	
	СтруктураВозврата.Вставить("TRADENAME"              , ОписаниеРеквизита("ТорговоеНаименование", ТипСтрока));
	СтруктураВозврата.Вставить("TRADENAMEID"            , ОписаниеРеквизита("ТорговоеНаименование_Код", ТипСтрока));
	СтруктураВозврата.Вставить("ENGTRADENAME"           , ОписаниеРеквизита("ТорговоеНаименование_АнглийскоеНаименование", ТипСтрока));
	СтруктураВозврата.Вставить("LATNAME"                , ОписаниеРеквизита("ТорговоеНаименование_ЛатинскоеНаименование", ТипСтрока));
	
	СтруктураВозврата.Вставить("NDV"                    , ОписаниеРеквизита("ДействующиеВеществаМНН", ТипСтрока));
	СтруктураВозврата.Вставить("RUSNDV"                 , ОписаниеРеквизита("ДействующиеВеществаМНН_Наименование", ТипСтрока));
	СтруктураВозврата.Вставить("ENGNDV"                 , ОписаниеРеквизита("ДействующиеВеществаМНН_АнглийскоеНаименование", ТипСтрока));
	СтруктураВозврата.Вставить("LATNDV"                 , ОписаниеРеквизита("ДействующиеВеществаМНН_ЛатинскоеНаименование", ТипСтрока));
	СтруктураВозврата.Вставить("LATRNDV"                , ОписаниеРеквизита("ДействующиеВеществаМНН_ЛатинскоеНаименованиеРодительныйПадеж", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Классификация
	СтруктураВозврата.Вставить("TFR"                    , ОписаниеРеквизита("ТоварыФармРынка", ТипСтрока));
	СтруктураВозврата.Вставить("ATC"                    , ОписаниеРеквизита("АТХ", ТипСтрока));
	СтруктураВозврата.Вставить("PHARMAACTIONS"          , ОписаниеРеквизита("Фармдействие", ТипСтрока));
	СтруктураВозврата.Вставить("OKPD2"                  , ОписаниеРеквизита("ОКПД2", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Лекарственная форма
	СтруктураВозврата.Вставить("DRUGFORM_SHORTNAME"     , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGFORM_FULLNAME"      , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("GROUP_DRUGFORM"         , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма_Группа", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGFORM_LATNAME"       , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименование", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGFORM_LATFULLNAME"   , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGFORM_LATPARENTNAME" , ОписаниеРеквизита("ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименованиеРодительныйПадеж", ТипСтрока));
	// Масса лекарственной формы
	СтруктураВозврата.Вставить("DFMASS"                 , ОписаниеРеквизита("ФормаВыпуска_Масса", ТипЧисло));
	СтруктураВозврата.Вставить("DFMASS_SHORTNAME"       , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаМассы", ТипСтрока));
	СтруктураВозврата.Вставить("DFMASS_FULLNAME"        , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаМассы_НаименованиеПолное", ТипСтрока));
	// Концентрация лекарственной формы
	СтруктураВозврата.Вставить("DFCONC"                 , ОписаниеРеквизита("ФормаВыпуска_Концентрация", ТипЧисло));
	СтруктураВозврата.Вставить("DFCONC_SHORTNAME"       , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаКонцентрации", ТипСтрока));
	СтруктураВозврата.Вставить("DFCONC_FULLNAME"        , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаКонцентрации_НаименованиеПолное", ТипСтрока));
	// Единиц действия лекарственной формы
	СтруктураВозврата.Вставить("DFACT"                  , ОписаниеРеквизита("ФормаВыпуска_ЕдиницДействия", ТипЧисло));
	СтруктураВозврата.Вставить("DFACT_SHORTNAME"        , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаДействия", ТипСтрока));
	СтруктураВозврата.Вставить("DFACT_FULLNAME"         , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаДействия_НаименованиеПолное", ТипСтрока));
	// Размеры лекарственной формы
	СтруктураВозврата.Вставить("DFSIZE"                 , ОписаниеРеквизита("ФормаВыпуска_Размер", ТипСтрока));
	СтруктураВозврата.Вставить("DFSIZE_SHORTNAME"       , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаРазмера", ТипСтрока));
	СтруктураВозврата.Вставить("DFSIZE_FULLNAME"        , ОписаниеРеквизита("ФормаВыпуска_ЕдиницаРазмера_НаименованиеПолное", ТипСтрока));
	// Характеристики лекарственной формы
	СтруктураВозврата.Вставить("DFCHAR_SHORTNAME"       , ОписаниеРеквизита("ХарактеристикиЛФ", ТипСтрока));
	СтруктураВозврата.Вставить("DFCHAR_FULLNAME"        , ОписаниеРеквизита("ХарактеристикиЛФ_НаименованиеПолное", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Производитель
	СтруктураВозврата.Вставить("FIRM_MANUFACTOR"        , ОписаниеРеквизита("Производитель", ТипСтрока));
	СтруктураВозврата.Вставить("FIRM_MANUFACTOR_ADR"    , ОписаниеРеквизита("Производитель_Адрес", ТипСтрока));
	СтруктураВозврата.Вставить("COUNTRY_MANUFACTOR"     , ОписаниеРеквизита("Производитель_Страна", ТипСтрока));
	СтруктураВозврата.Вставить("FIRM_REGISTRATOR"       , ОписаниеРеквизита("Регистратор", ТипСтрока));
	СтруктураВозврата.Вставить("COUNTRY_REGISTRATOR"    , ОписаниеРеквизита("Регистратор_Страна", ТипСтрока));
	СтруктураВозврата.Вставить("FIRM_PACKED"            , ОписаниеРеквизита("Упаковщик", ТипСтрока));
	СтруктураВозврата.Вставить("COUNTRY_PACKED"         , ОписаниеРеквизита("Упаковщик_Страна", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Упаковки
	
	//    Упаковка 1
	СтруктураВозврата.Вставить("PPACK_SHORTNAME"        , ОписаниеРеквизита("Упаковка1", ТипСтрока));
	СтруктураВозврата.Вставить("PPACK_FULLNAME"         , ОписаниеРеквизита("Упаковка1_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGSINPPACK"           , ОписаниеРеквизита("Упаковка1_Коэффициент01", ТипЧисло));
	СтруктураВозврата.Вставить("DRUGDOSE"               , ОписаниеРеквизита("Упаковка1_КоличествоДоз", ТипЧисло));
	//        Масса упаковки 1
	СтруктураВозврата.Вставить("PPACKMASS_SHORTNAME"    , ОписаниеРеквизита("Упаковка1_ЕдиницаМассы", ТипСтрока));
	СтруктураВозврата.Вставить("PPACKMASS_FULLNAME"     , ОписаниеРеквизита("Упаковка1_ЕдиницаМассы_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("PPACKMASS"              , ОписаниеРеквизита("Упаковка1_Масса", ТипЧисло));
	//        Объем упаковки 1
	СтруктураВозврата.Вставить("PPACKVOLUME_SHORTNAME"  , ОписаниеРеквизита("Упаковка1_ЕдиницаОбъема", ТипСтрока));
	СтруктураВозврата.Вставить("PPACKVOLUME_FULLNAME"   , ОписаниеРеквизита("Упаковка1_ЕдиницаОбъема_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("PPACKVOLUME"            , ОписаниеРеквизита("Упаковка1_Объем", ТипЧисло));
	//    Упаковка 2
	СтруктураВозврата.Вставить("UPACK_SHORTNAME"        , ОписаниеРеквизита("Упаковка2", ТипСтрока));
	СтруктураВозврата.Вставить("UPACK_FULLNAME"         , ОписаниеРеквизита("Упаковка2_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("PPACKINUPACK"           , ОписаниеРеквизита("Упаковка2_Коэффициент12", ТипЧисло));
	//    Упаковка 3
	СтруктураВозврата.Вставить("SPACK_SHORTNAME"        , ОписаниеРеквизита("Упаковка3", ТипСтрока));
	СтруктураВозврата.Вставить("SPACK_FULLNAME"         , ОписаниеРеквизита("Упаковка3_НаименованиеПолное", ТипСтрока));
	СтруктураВозврата.Вставить("UPACKINSPACK"           , ОписаниеРеквизита("Упаковка3_Коэффициент23", ТипЧисло));
	
	// В комплекте с лекарственной формой
	СтруктураВозврата.Вставить("DRUGSET_SHORTNAME"      , ОписаниеРеквизита("Комплектация", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGSET_FULLNAME"       , ОписаниеРеквизита("Комплектация_НаименованиеПолное", ТипСтрока));
	
	СтруктураВозврата.Вставить("EAN"                    , ОписаниеРеквизита("Штрихкод", ТипСтрока));
	СтруктураВозврата.Вставить("DRUGLIFETIME"           , ОписаниеРеквизита("СрокГодности", ТипЧисло));
	СтруктураВозврата.Вставить("STORCOND"               , ОписаниеРеквизита("УсловияХранения", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Принадлежность к спискам
	СтруктураВозврата.Вставить("NORECIPE"               , ОписаниеРеквизита("БезрецептурныйОтпуск", ТипЧисло));
	СтруктураВозврата.Вставить("DLO"                    , ОписаниеРеквизита("ДЛО", ТипБулево));
	СтруктураВозврата.Вставить("STRONG"                 , ОписаниеРеквизита("СильнодействующиеИЯды", Тип("ПеречислениеСсылка.СпискиСильнодействующихИЯдовитыхВеществ")));
	СтруктураВозврата.Вставить("NARCO"                  , ОписаниеРеквизита("Наркотические", Тип("ПеречислениеСсылка.СпискиНаркотическихВеществ")));
	СтруктураВозврата.Вставить("LISTTYPE"               , ОписаниеРеквизита("СпискиАиБ", Тип("ПеречислениеСсылка.СпискиАиБ")));
	СтруктураВозврата.Вставить("JNVLS"                  , ОписаниеРеквизита("ЖНВЛП", Тип("ПеречислениеСсылка.СпискиЖНВЛП")));
	СтруктураВозврата.Вставить("PHARMGROUP"             , ОписаниеРеквизита("ФармакологическиеГруппы", ТипСтрока));
	СтруктураВозврата.Вставить("PHARMGROUPSIN"          , ОписаниеРеквизита("ФармакоТерапевтическаяГруппа", ТипСтрока));
	///////////////////////////////////////////////////////////////////////////////////////////
	// Регистрация
	СтруктураВозврата.Вставить("REGNUM"                 , ОписаниеРеквизита("РегистрационныйНомер", ТипСтрока));
	СтруктураВозврата.Вставить("REGDATE"                , ОписаниеРеквизита("ДатаРегистрации", ТипДата));
	СтруктураВозврата.Вставить("REGCERTID"              , ОписаниеРеквизита("НормативныйДокумент", ТипСтрока));
	СтруктураВозврата.Вставить("STATUS"                 , ОписаниеРеквизита("СтатусДействия", ТипЧисло));
	СтруктураВозврата.Вставить("STATUSDATE"             , ОписаниеРеквизита("ДатаОкончанияДействия", ТипДата));
	СтруктураВозврата.Вставить("REGNOMENID"             , ОписаниеРеквизита("НомерРЛСРегистрации", ТипЧисло));
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти // ОписаниеТоваров

////////////////////////////////////////////////////////////////////////////////
// Результаты поиска
#Область РезультатыПоиска

Функция РазобратьРезультатПоискаЛС(ЧтениеРезультатовПоиска)
	
	// <RESULTSET datetime="DD.MM.YY HH:MM:SS" url="URL результатов поиска">
	//	<RESULT url="URL документа" path="атрибут PATH документ">
	//		<COLUMN name="Название">
	//			<![CDATA[Аспирин]]>
	//		</COLUMN>
	//		<COLUMN name="Производитель">
	//			<![CDATA[Байер]]>
	//		</COLUMN>
	//		<COLUMN name="Упаковщик">
	//			<![CDATA[Байер]]>
	//		</COLUMN>
	//		<COLUMN name="Свойства">
	//			<![CDATA[ЖВ]]>
	//		</COLUMN>
	//		<ATTRIBUTE name="ATTRIBNAME" id="ATTRIBID">
	//			<![CDATA[Значение атрибута]]>
	//		</ATTRIBUTE>
	//	</RESULT>
	//	<RESULT>
	//		...
	//	</RESULT>
	//	...
	// </RESULTSET>
	
	РезультатыПоиска = Новый Структура;
	РезультатыПоиска.Вставить("ТипСообщения", "РезультатыПоискаЛС");
	РезультатыПоиска.Вставить("ДатаПоиска", ЧтениеРезультатовПоиска.ПолучитьАтрибут("datetime"));
	РезультатыПоиска.Вставить("Результаты", Новый Массив);
	
	Пока ЧтениеРезультатовПоиска.Прочитать() Цикл
		
		Если ЧтениеРезультатовПоиска.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЛокальноеИмя = ВРег(ЧтениеРезультатовПоиска.ЛокальноеИмя);
			Если ЛокальноеИмя = "RESULT" Тогда
				
				РезультатПоиска = Новый Структура;
				РезультатПоиска.Вставить("URL", ЧтениеРезультатовПоиска.ПолучитьАтрибут("url"));
				РезультатПоиска.Вставить("PATH", ЧтениеРезультатовПоиска.ПолучитьАтрибут("path"));
				РезультатПоиска.Вставить("Колонки", Новый Соответствие);
				РезультатПоиска.Вставить("Атрибуты", Новый Массив);
				РезультатыПоиска.Результаты.Добавить(РезультатПоиска);
				
			ИначеЕсли ЛокальноеИмя = "COLUMN" Тогда
				
				ИмяКолонки = ЧтениеРезультатовПоиска.ПолучитьАтрибут("name");
				Если ЧтениеРезультатовПоиска.Прочитать() И ЧтениеРезультатовПоиска.ТипУзла = ТипУзлаXML.Текст Тогда
					РезультатПоиска.Колонки.Вставить(ИмяКолонки, СокрЛП(ЧтениеРезультатовПоиска.Значение));
				КонецЕсли;
				
			ИначеЕсли ЛокальноеИмя = "ATTRIBUTE" Тогда
				
				Атрибут = Новый Структура("Имя, Идентификатор, Значение");
				Атрибут.Имя = ЧтениеРезультатовПоиска.ПолучитьАтрибут("name");
				Атрибут.Идентификатор = ЧтениеРезультатовПоиска.ПолучитьАтрибут("id");
				Если ЧтениеРезультатовПоиска.Прочитать() И ЧтениеРезультатовПоиска.ТипУзла = ТипУзлаXML.Текст Тогда
					Атрибут.Значение = СокрЛП(ЧтениеРезультатовПоиска.Значение);
				КонецЕсли;
				РезультатПоиска.Атрибуты.Добавить(Атрибут);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПоиска;
	
КонецФункции

#КонецОбласти // РезультатыПоиска

////////////////////////////////////////////////////////////////////////////////
// Классификаторы
#Область Классификаторы

Функция РазобратьКлассификатор(ЧтениеКлассификатора)
	
	// <DICT VER="1.0" name=Справочник id=ИдентификаторКлассификатора>
	//	<ITEM id=Код>
	//		<ITEMNAME>Наименование</ITEMNAME>
	//		<ITEM id=Код>
	//			<ITEMNAME>Наименование</ITEMNAME>
	//			...
	//		</ITEM>
	//		...
	//	</ITEM>
	//	...
	// </DICT>
	
	Классификатор = Новый Структура;
	Классификатор.Вставить("ТипСообщения", "Классификатор");
	Классификатор.Вставить("Идентификатор", ЧтениеКлассификатора.ПолучитьАтрибут("id"));
	Классификатор.Вставить("Справочник", ЧтениеКлассификатора.ПолучитьАтрибут("name"));
	Классификатор.Вставить("Элементы", Новый ТаблицаЗначений);
	
	Классификатор.Элементы.Колонки.Добавить("Код");
	Классификатор.Элементы.Колонки.Добавить("КодРодителя");
	Классификатор.Элементы.Колонки.Добавить("Наименование");
	
	Родители = Новый Массив();
	Родители.Добавить(Неопределено);
	
	Пока ЧтениеКлассификатора.Прочитать() Цикл
		
		ЛокальноеИмя = ЧтениеКлассификатора.ЛокальноеИмя;
		Если ЧтениеКлассификатора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЛокальноеИмя = "ITEM" Тогда
				
				ЭлементКлассификатора = Классификатор.Элементы.Добавить();
				ЭлементКлассификатора.Код = ЧтениеКлассификатора.ПолучитьАтрибут("id");
				Родитель = Родители[Родители.ВГраница()];
				ЭлементКлассификатора.КодРодителя = ?(Родитель = Неопределено, "", Родитель.Код);
				
				Родители.Добавить(ЭлементКлассификатора);
				
			ИначеЕсли ЛокальноеИмя = "ITEMNAME" Тогда
				
				Если ЧтениеКлассификатора.Прочитать() И ЧтениеКлассификатора.ТипУзла = ТипУзлаXML.Текст Тогда
					Родители[Родители.ВГраница()].Наименование = ЧтениеКлассификатора.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеКлассификатора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЛокальноеИмя = "ITEM" Тогда
				Родители.Удалить(Родители.ВГраница());
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Классификатор;
	
КонецФункции

Процедура ПрочитатьЭлементыКлассификатора(Чтение, Элементы, Родитель = Неопределено)
	
	Пока Чтение.Прочитать() Цикл
		
		ТипЗначения = Чтение.ТипТекущегоЗначения;
		Если ТипЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ЭлементКлассификатора = Элементы.Добавить();
			ЭлементКлассификатора.КодРодителя = ?(Родитель = Неопределено, "", Родитель.Код);
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ЛокальноеИмя = ВРег(Чтение.ТекущееЗначение);
			Чтение.Прочитать();
			Если ЛокальноеИмя = "ITEMNAME" Тогда
				ЭлементКлассификатора.Наименование = Чтение.ТекущееЗначение;
			ИначеЕсли ЛокальноеИмя = "ITEMID" Тогда
				ЭлементКлассификатора.Код = Чтение.ТекущееЗначение;
			ИначеЕсли ЛокальноеИмя = "ITEM" Тогда
				ПрочитатьЭлементыКлассификатора(Чтение, Элементы, ЭлементКлассификатора)
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Классификаторы

#КонецОбласти // ФункцииРазбораОписаний

////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КЛАССИФИКАТОРОВ РЛС В БАЗУ
#Область ЗагрузкаКлассификаторовРЛС

Процедура ОбновитьЭлементыКлассификатораПоРодителю(ТаблицаКлассификатора, МетаданныеСправочника, КодРодителя = "", Родитель = Неопределено)
	
	СтрокиКлассификатора = ТаблицаКлассификатора.НайтиСтроки(Новый Структура("КодРодителя", КодРодителя));
	
	Для Каждого ЭлементКлассификатора Из СтрокиКлассификатора Цикл
		
		Если ЭлементКлассификатора.Ссылка = NULL Тогда
			
			Элемент = Справочники[МетаданныеСправочника.Имя].СоздатьЭлемент();
			Элемент.Родитель = Родитель;
			Элемент.Код = ЭлементКлассификатора.Код;
			Элемент.Наименование = ЭлементКлассификатора.Наименование;
			Элемент.Записать();
			
			ЭлементКлассификатора.Ссылка = Элемент.Ссылка;
			
		Иначе
			
			Если ЭлементКлассификатора.КодРодителяСтарый <> КодРодителя 
			 Или ЭлементКлассификатора.Наименование <> ЭлементКлассификатора.НаименованиеСтарое
			 Или ЭлементКлассификатора.ПометкаУдаления Тогда
				
				Элемент = ЭлементКлассификатора.Ссылка.ПолучитьОбъект();
				Если Элемент.ПометкаУдаления Тогда
					Элемент.УстановитьПометкуУдаления(Ложь, Ложь);
				КонецЕсли;;
				Элемент.Родитель = Родитель;
				Элемент.Наименование = ЭлементКлассификатора.Наименование;
				Элемент.Записать();
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если ЭлементКлассификатора.Код <> NULL Тогда
			ОбновитьЭлементыКлассификатораПоРодителю(ТаблицаКлассификатора, МетаданныеСправочника, ЭлементКлассификатора.Код, ЭлементКлассификатора.Ссылка);
		КонецЕсли;
		
		ТаблицаКлассификатора.Удалить(ЭлементКлассификатора);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаКлассификаторовРЛС

#КонецОбласти // СлужебныеПроцедурыИФункции
