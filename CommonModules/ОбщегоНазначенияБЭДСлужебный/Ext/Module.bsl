#Область СлужебныеПроцедурыИФункции

Функция ТекстПолейДляЗапроса(Поля, Знач ИмяТаблицы, ЭтоПоляУсловия) Экспорт
	
	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "ИмяТаблицы";
	КонецЕсли;
	Если ТипЗнч(Поля) = Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		МассивПолей = СтрРазделить(Поля, ",", Ложь);
	КонецЕсли;
	Сч = 0;
	Для каждого Поле Из МассивПолей Цикл
		ИменаТаблицыИПоля = СтрРазделить(Поле, ".");
		ЕстьИмяТаблицы = ИменаТаблицыИПоля.Количество() > 1;
		Если Не ЕстьИмяТаблицы Тогда
			МассивПолей[Сч] = ИмяТаблицы + "." + СокрЛП(Поле);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Разделитель = ?(ЭтоПоляУсловия, Символы.ПС + "И ", "," + Символы.ПС);
	Возврат СтрСоединить(МассивПолей, Разделитель);
	
КонецФункции

#Область РаботаСФормулами

Функция КоллекцияПриведенныхЗначенийОперандов(ЗначенияОперандов, ВерсияМеханикиРасчета) Экспорт
	
	КоллекцияПриведенныхЗначенийОперандов = Новый Соответствие;	
	
	Для Каждого ЗначениеОперанда Из ЗначенияОперандов Цикл
		
		Значение = ЗначениеОперанда.Значение;
		
		ТипЗначения = ТипЗнч(Значение);
		Если ВерсияМеханикиРасчета = "2.0" Тогда
			ПриведенноеЗначение = Значение;
		ИначеЕсли ТипЗначения = Тип("Число") Тогда
			ПриведенноеЗначение = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
		ИначеЕсли ТипЗначения = Тип("Дата") Тогда
			ПриведенноеЗначение = СтрШаблон("'%1'", Формат(Значение, "ДФ=ггггММддччммсс; ДП=00010101"));
		ИначеЕсли ТипЗначения = Тип("Булево") Или ТипЗначения = Тип("Строка") Тогда
			ПриведенноеЗначение = Значение;
		Иначе
			ПриведенноеЗначение = СтрЗаменить(Значение, """", """""");
		КонецЕсли;
		
		КоллекцияПриведенныхЗначенийОперандов.Вставить(ЗначениеОперанда.Ключ, ПриведенноеЗначение);
		
	КонецЦикла;
	
	Возврат КоллекцияПриведенныхЗначенийОперандов;

КонецФункции

Функция ПозицииСимволаВСтроке(Символ, Строка) Экспорт

	Результат = Новый Массив;
	
	ПозицияВСтроке = 1;
	ДлинаСтроки    = СтрДлина(Строка);
	Пока Истина Цикл
		ПозицияВСтроке = СтрНайти(Строка, Символ,, ПозицияВСтроке);
		
		Если ЗначениеЗаполнено(ПозицияВСтроке) Тогда
			Результат.Добавить(ПозицияВСтроке);
			ПозицияВСтроке = ПозицияВСтроке + 1;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПозицияВСтроке) Или ПозицияВСтроке > ДлинаСтроки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область АвтоматизированноеТестированиеСлужебныеПроцедурыИФункции

// Присваивает имена параметризованным ячейкам переданной области
//
// Параметры:
//  ОбластьМакета		 - ТабличныйДокумент - табличный документ.
//  ПрефиксДляИмен		 - Строка - префикс для имен ячеек (рекомендуется передавать имя области).
//  ИндексПрефикса		 - Число - индекс или номер строки, который будет прибавлен к префиксу.
//
Процедура ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, Знач ПрефиксДляИмен, Знач ИндексПрефикса) Экспорт
	
	// Обойдем все ячейки выводимой области и заполним имена для ячеек, содержащих параметры.
	Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ОбластьМакета.ШиринаТаблицы Цикл
			Ячейка = ОбластьМакета.Область(НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр
				И ЗначениеЗаполнено(Ячейка.Параметр) Тогда
				Ячейка.Имя = ПрефиксДляИмен + ИндексПрефикса + "_" + Ячейка.Параметр;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСхемыЗапросов

// Объединить пакет запросов.
//
// Параметры:
//  Запрос1 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся приемником.
//  Запрос2 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся источником.
//
Процедура ОбъединитьПакетЗапросов(Запрос1, Запрос2) Экспорт
	
	Если Запрос2.Операторы.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Объединение запросов производится только для одного оператора'");
	КонецЕсли;
	
	// Обработка операторов.
	Для каждого Источники2 Из Запрос2.Операторы[0].Источники Цикл
		
		Если Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Источники2.Источник.Псевдоним) = Неопределено Тогда
			Запрос1.Операторы[0].Источники.Добавить(Источники2.Источник.ИмяТаблицы, Источники2.Источник.Псевдоним);
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление выбираемых полей.
	Для каждого ВыбираемоеПоле2 Из Запрос2.Операторы[0].ВыбираемыеПоля Цикл
		ИндексКолонки2 = Запрос2.Операторы[0].ВыбираемыеПоля.Индекс(ВыбираемоеПоле2);
		Колонка2 = Запрос2.Колонки.Получить(ИндексКолонки2);
		Колонка1 = Запрос1.Колонки.Найти(Колонка2.Псевдоним);
		Если Колонка1 = Неопределено Тогда
			Запрос1.Операторы[0].ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2));
			// Установка имени колонки.
			Колонка1 = Запрос1.Колонки.Получить(Запрос1.Колонки.Количество()-1);
			Колонка1.Псевдоним = Колонка2.Псевдоним;
		Иначе
			Запрос1.Операторы[0].ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2),
				Запрос1.Колонки.Индекс(Колонка1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Источники2 Из Запрос2.Операторы[0].Источники Цикл
		
		Если Источники2.Соединения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Источник1 = Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Источники2.Источник.Псевдоним);
		ПсевдонимыИсточника1 = Новый Массив;
		Для каждого Соединение1 Из Источник1.Соединения Цикл
			ПсевдонимыИсточника1.Добавить(Соединение1.Источник.Источник.Псевдоним);
		КонецЦикла;
		
		СписокКорректировкиСоединений = Новый Соответствие;
		Для каждого Соединение2 Из Источники2.Соединения Цикл
			
			Псевдоним2 = Соединение2.Источник.Источник.Псевдоним;
			Если ПсевдонимыИсточника1.Найти(Псевдоним2) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИсточникСхемы = Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Псевдоним2);
			Если ИсточникСхемы = Неопределено Тогда
				Источник1.Соединения.Добавить(Соединение2.Источник, Строка(Соединение2.Условие));
			Иначе
				Источник1.Соединения.Добавить(ИсточникСхемы, Строка(Соединение2.Условие));
				ПоследнееСоединение = Источник1.Соединения.Получить(Источник1.Соединения.Количество()-1);
				Если ПоследнееСоединение.ТипСоединения <> Соединение2.ТипСоединения Тогда
					СписокКорректировкиСоединений.Вставить(ПоследнееСоединение, Соединение2.ТипСоединения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокКорректировкиСоединений.Количество() Тогда
			Для каждого Соединение1 Из СписокКорректировкиСоединений Цикл
				Соединение1.Ключ.ТипСоединения = Соединение1.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Перебор и подстановка полей запроса.
	Для каждого Колонка2 Из Запрос2.Колонки Цикл
		Колонка1 = Запрос1.Колонки.Найти(Колонка2.Псевдоним);
		Если Колонка1 <> Неопределено Тогда
			Если ПоляСхемыЗапросовИдентичны(Колонка1.Поля, Колонка2.Поля) Тогда
				Продолжить;
			КонецЕсли;
			ИндексКолонки1 = Запрос1.Колонки.Индекс(Колонка1);
			ИндексКолонки2 = Запрос2.Колонки.Индекс(Колонка2);
			Запрос1.Операторы[0].ВыбираемыеПоля.Установить(ИндексКолонки1, Запрос2.Операторы[0].ВыбираемыеПоля.Получить(ИндексКолонки2));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить запрос в пакет запросов.
//
// Параметры:
//  Схема1 - СхемаЗапроса - пакет запроса являющимся приемником.
//  Запрос2 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся источником.
//
Процедура ДобавитьЗапросВПакет(Схема1, ЗапросСхемы2) Экспорт
	
	ЗапросСхемы1 = Схема1.ПакетЗапросов.Добавить(ТипЗнч(ЗапросСхемы2));
	ЗаполнитьЗначенияСвойств(ЗапросСхемы1, ЗапросСхемы2);
	
	Если ТипЗнч(ЗапросСхемы2) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		// Для уничтожения таблицы ничего не заполняется.
		Возврат;
	КонецЕсли;
	
	// Кэширование полей в колонках источника.
	ПоляПоКолонкам2 = Новый Соответствие;
	Для каждого ЭлементКоллекцииКолонки2 Из ЗапросСхемы2.Колонки Цикл
		Для каждого ЭлементКоллекцииПоляКолонок2 Из ЭлементКоллекцииКолонки2.Поля Цикл
			ПоляПоКолонкам2.Вставить(ЭлементКоллекцииПоляКолонок2, ЗапросСхемы2.Колонки.Индекс(ЭлементКоллекцииКолонки2));
		КонецЦикла;
	КонецЦикла;
	
	// Добавление операторов запроса.
	Для каждого ОператорЗапросаСхемы2 Из ЗапросСхемы2.Операторы Цикл
		
		// Обход автоматического создания первого оператора запроса.
		Если ЗапросСхемы2.Операторы.Индекс(ОператорЗапросаСхемы2) = 0 Тогда
			ОператорЗапросаСхемы1 = ЗапросСхемы1.Операторы.Получить(0);
		Иначе
			ОператорЗапросаСхемы1 = ЗапросСхемы1.Операторы.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОператорЗапросаСхемы1, ОператорЗапросаСхемы2);
		
		// Добавление источников запроса.
		Для каждого Источники2 Из ОператорЗапросаСхемы2.Источники Цикл
			Источник1 = ОператорЗапросаСхемы1.Источники.Добавить(Источники2.Источник.ИмяТаблицы, Источники2.Источник.Псевдоним);
		КонецЦикла;
		
		// Добавление выбираемых полей.
		Для каждого ВыбираемоеПоле2 Из ОператорЗапросаСхемы2.ВыбираемыеПоля Цикл
			
			ИндексКолонки2 = ОператорЗапросаСхемы2.ВыбираемыеПоля.Индекс(ВыбираемоеПоле2);
			Колонка2 = ЗапросСхемы2.Колонки.Получить(ИндексКолонки2);
			Колонка1 = ЗапросСхемы1.Колонки.Найти(Колонка2.Псевдоним);
			
			ИндексКолонки = ПоляПоКолонкам2.Получить(ВыбираемоеПоле2);
			Если Колонка1 = Неопределено Тогда
				ОператорЗапросаСхемы1.ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2));
				// Установка имени колонки.
				Колонка1 = ЗапросСхемы1.Колонки.Получить(ЗапросСхемы1.Колонки.Количество()-1);
				Колонка1.Псевдоним = Колонка2.Псевдоним;
			Иначе
				ОператорЗапросаСхемы1.ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2), ИндексКолонки);
			КонецЕсли;
		КонецЦикла;
		
		// Добавление соединений.
		СписокКорректировкиСоединений = Новый Соответствие;
		Для каждого Источники2 Из ОператорЗапросаСхемы2.Источники Цикл
			Источник1 = ОператорЗапросаСхемы1.Источники.Получить(ОператорЗапросаСхемы2.Источники.Индекс(Источники2));
			Для каждого Соединение2 Из Источники2.Соединения Цикл
				Источник1.Соединения.Добавить(Соединение2.Источник.Источник.Псевдоним, Строка(Соединение2.Условие));
				ПоследнееСоединение = Источник1.Соединения.Получить(Источник1.Соединения.Количество()-1);
				Если ПоследнееСоединение.ТипСоединения <> Соединение2.ТипСоединения Тогда
					СписокКорректировкиСоединений.Вставить(ПоследнееСоединение, Соединение2.ТипСоединения);
				КонецЕсли;
			КонецЦикла;
			Если СписокКорректировкиСоединений.Количество() Тогда
				Для каждого Соединение1 Из СписокКорректировкиСоединений Цикл
					Соединение1.Ключ.ТипСоединения = Соединение1.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление отборов.
		Для каждого ОтборыЗапроса2 Из ОператорЗапросаСхемы2.Отбор Цикл
			ОператорЗапросаСхемы1.Отбор.Добавить(Строка(ОтборыЗапроса2));
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Служебная функция - определение идентичности полей схемы запросов.
//
// Параметры:
//  Коллекция1	 - ПоляСхемыЗапроса - поля схемы приемника.
//  Коллекция2	 - ПоляСхемыЗапроса - поля схемы источника.
// 
// Возвращаемое значение:
//  Булево - результат сравнения.
//
Функция ПоляСхемыЗапросовИдентичны(Коллекция1, Коллекция2)
	
	Если Коллекция1.Количество() <> Коллекция2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерИндекса = 0 По Коллекция1.Количество() - 1 Цикл
		Если Коллекция1[НомерИндекса] <> Коллекция2[НомерИндекса] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Очищает псевдонимы для выражений, использующих параметры.
// При загрузке текста запроса в СхемаЗапроса, для выражений отбора компоновки данных,
// например, {ГДЕ Поле1 = &Параметр}. добавляется псевдоним: {ГДЕ (Поле1 = &Параметр) КАК Псевдоним1},
// после чего использование отбора становится невозможным, т.е. параметр пропадает из таблицы параметров
// и установка значений и использования параметра не меняет поведение списка
// 
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - Схема запроса
//
Процедура ОчиститьПсевдонимыВыраженийОтбораКомпоновкиДанных(СхемаЗапроса) Экспорт
	Для Каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл
		Для Каждого Оператор Из Пакет.Операторы Цикл
			Для Каждого Выражение Из Оператор.ВыраженияОтбораКомпоновкиДанных Цикл
				Если СтрНайти(Выражение.Выражение, "&") > 0 Тогда
					Выражение.Псевдоним = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти