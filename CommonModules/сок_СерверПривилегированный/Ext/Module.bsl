
Процедура сок_ПереносЗаявок() Экспорт
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаНач",'20231101');
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЗаявкаНаЗакупку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку
	|ГДЕ
	|	ЗаявкаНаЗакупку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|	И НЕ ЗаявкаНаЗакупку.ПометкаУдаления
	|	И ЗаявкаНаЗакупку.Дата < &Дата
	|	И ЗаявкаНаЗакупку.Дата > &ДатаНач";
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр из Выборка Цикл
		Элемент=Стр.Ссылка.ПолучитьОбъект();
		Элемент.Дата=ТекущаяДата();
		//Удалить
		//Элемент=Документы.ЗаявкаНаЗакупку.СоздатьДокумент();
		
		Для Каждого СтрТЧ Из Элемент.Товары Цикл    
			Если СтрТЧ.ДатаПоступления<Элемент.Дата Тогда
				СтрТЧ.ДатаПоступления=Элемент.Дата;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Элемент.ПоступлениеОднойДатой И Элемент.ДатаПоступления<Элемент.Дата Тогда
			Элемент.ДатаПоступления=Элемент.Дата;
			ДатаПоступленияТЧ=Элемент.Дата;
		Иначе                                           
			ДатаПоступленияТЧ='19000101';
			Для Каждого СтрТЧ Из Элемент.Товары Цикл    
				ДатаПоступленияТЧ=Макс(ДатаПоступленияТЧ,СтрТЧ.ДатаПоступления);
			КонецЦикла
		КонецЕсли;	
		Элемент.ДатаПоступленияТЧ=ДатаПоступленияТЧ;
		
		
		Попытка
			Элемент.Записать(?(Элемент.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		Исключение
			ЗаписьЖурналаРегистрации("ПереносЗаявокНаЗакупку",УровеньЖурналаРегистрации.Ошибка,,Стр.Ссылка,"Не удалось перенести на текущую дату "+Стр.ссылка);
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры


Процедура сок_ПередЗаписьюЗапретБухгалтерииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Ложь Тогда Источник=Документы.ПоступлениеТоваров.СоздатьДокумент(); КонецЕсли;
	
	Если Источник.ПровереноБухгалтерией Тогда
		Если РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.сок_Бухгалтерия)  или Источник.ДополнительныеСвойства.Свойство("ЗаписьВЗакрытомПериоде") Тогда
		Иначе
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры



Функция ПолучитьЦенуСтрокиТовара(Отделение,Дата,Номенклатура,ЕдиницаИзмерения,СерияНоменклатуры,Партия) Экспорт
	Запрос=Новый	 Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НаценкиКСебестоимостиСрезПоследних.МинимальнаяСумма КАК МинимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.МаксимальнаяСумма КАК МаксимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.Наценка КАК Наценка
	|ИЗ
	|	РегистрСведений.НаценкиКСебестоимости.СрезПоследних КАК НаценкиКСебестоимостиСрезПоследних
	|ГДЕ
	|	НаценкиКСебестоимостиСрезПоследних.Использовать";
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("МинимальнаяСумма, МаксимальнаяСумма");
	ЦенаВозврата = -1;
	Если ЗначениеЗаполнено(Партия) Тогда
		Если Ложь Тогда Партия=Справочники.ПартииНоменклатуры.СоздатьЭлемент(); конецесли;       
		Отбор = новый Структура("Номенклатура,СерияНоменклатуры",Номенклатура,СерияНоменклатуры);
		Масс=Партия.ДокументОприходования.Товары.НайтиСтроки(Отбор);
		Если Масс.Количество()>0 Тогда
			СтрН=Масс[0];
			Если Ложь Тогда СтрН=Документы.ПоступлениеТоваров.СоздатьДокумент().Товары.Добавить() КонецЕсли;
			//Если СтрН.ЕдиницаИзмерения=ЕдиницаИзмерения Тогда      
				 ЦенаВозврата=СтрН.Цена;
			//Иначе
			//КонецЕсли;	
		конецЕсли;	
	Иначе 
		ЦенаВозврата=-1;
	КонецЕсли;	 
	Если СокрЛП(Отделение)="Операционный блок Г." Тогда
		Для Каждого Стр из Выборка Цикл
			Если Стр.МинимальнаяСумма<=ЦенаВозврата И ЦенаВозврата<Стр.МаксимальнаяСумма Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Себестоимость: "+ЦенаВозврата+" наценка: "+Стр.Наценка);
				ЦенаВозврата=Окр(ЦенаВозврата*(1+Стр.Наценка/100),2);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	Возврат ЦенаВозврата;
конецФункции	


#Область ОтпускТоваровВотделение

Процедура ОтпускВОтделениеПеревестиВСостояниеВПолучено(СсылкаНаОбъект) Экспорт
	Если СсылкаНаОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	Элемент = СсылкаНаОбъект.ПолучитьОбъект();
	Элемент.ВсеТоварыРаспределены=Ложь;
	Если Ложь Тогда Элемент = Документы.ОтпускТоваровВОтделение.СоздатьДокумент(); КонецЕсли;
	
	
	
	
	Запрос = Новый Запрос;   
	Запрос.УстановитьПараметр("Номенклатура",Элемент.Товары.ВыгрузитьКолонку("Номенклатура"));
	Масс=Новый Массив;
	Масс.Добавить(Перечисления.СостоянияТребований.ОжиданиеПриходаБезЗаказа);
	Масс.Добавить(Перечисления.СостоянияТребований.Поступило);
	Запрос.УстановитьПараметр("Состояние",Масс);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	|	СостоянияТребованийОтделений.Требование КАК Требование,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	|	СостоянияТребованийОтделений.Состояние КАК Состояние,
	|	СостоянияТребованийОтделений.Описание КАК Описание,
	|	СостоянияТребованийОтделений.Количество КАК Количество,
	|	СостоянияТребованийОтделений.СуммаВЗаказеПоставщику КАК СуммаВЗаказеПоставщику,
	|	СостоянияТребованийОтделений.ФормализованноеТребование КАК ФормализованноеТребование,
	|	СостоянияТребованийОтделений.ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку,
	|	СостоянияТребованийОтделений.ДатаЗаказа КАК ДатаЗаказа,
	|	СостоянияТребованийОтделений.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СостоянияТребованийОтделений.ПриходнаяНакладная КАК ПриходнаяНакладная,
	|	СостоянияТребованийОтделений.ДокументПередачиВОтделение КАК ДокументПередачиВОтделение,
	|	СостоянияТребованийОтделений.Комментарий КАК Комментарий,
	|	СостоянияТребованийОтделений.Установлен КАК Установлен
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.Номенклатура В(&Номенклатура)
	|	И СостоянияТребованийОтделений.Состояние В(&Состояние)";
	Выборка = Запрос.Выполнить().Выгрузить();
	
	
	///Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	
	ТЗ=Элемент.Товары.Выгрузить();
	ТЗ.Свернуть("Номенклатура,Партия,ИдентификаторСтроки,КодСтроки","КоличествоВЕдиницахИзмерения");
	Для Каждого СтрТ из ТЗ Цикл
		Списать=СтрТ.КоличествоВЕдиницахИзмерения;
		Если Списать>0 Тогда
			Масс=Выборка.НайтиСтроки(Новый структура("ИдентификаторСтроки,КодСтроки",СтрТ.ИдентификаторСтроки,СтрТ.КодСтроки));
			Если Масс.Количество()>0 Тогда
				СтрМ=Масс[0];
				Если СтрМ.Количество=СтрТ.Количество Тогда
					Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Рег,СтрМ);
					Если НЕ ЗначениеЗаполнено(Рег.ПриходнаяНакладная) И ЗначениеЗаполнено(СтрТ.Партия) Тогда
						Рег.ПриходнаяНакладная=СтрТ.Партия.ДокументОприходования;
					КонецЕсли;	
					Рег.Записать(Истина);
					Списать=Списать-СтрМ.Количество;
					СтрМ.Количество=0;
				КонецЕсли;	
			КонецЕсли;	
			//По всем позициям идентиифкатора
			Если Списать>0 Тогда
				Масс=Выборка.НайтиСтроки(Новый структура("ИдентификаторСтроки",СтрТ.ИдентификаторСтроки));
				Для Каждого СтрМ из Масс Цикл
					Если СтрМ.Количество=0 Тогда
						Продолжить;
					КонецЕсли;	
						
					Если Списать>=СтрМ.Количество Тогда
						Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(Рег,СтрМ);
						Если НЕ ЗначениеЗаполнено(Рег.ПриходнаяНакладная) И ЗначениеЗаполнено(СтрТ.Партия) Тогда
							Рег.ПриходнаяНакладная=СтрТ.Партия.ДокументОприходования;
						КонецЕсли;	
						Рег.Записать(Истина);
						Списать=Списать-СтрМ.Количество;
						СтрМ.Количество=0;
					Иначе
						Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(Рег,СтрМ);
						Если НЕ ЗначениеЗаполнено(Рег.ПриходнаяНакладная) И ЗначениеЗаполнено(СтрТ.Партия) Тогда
							Рег.ПриходнаяНакладная=СтрТ.Партия.ДокументОприходования;
						КонецЕсли;	
						Рег.Записать(Истина);
						сок_Проверки.РазбитьСтрокуРегистраСостоянияТребованийНаДве(Рег,Списать,Истина,СтрМ.КодСтроки);
						СтрМ.Количество=СтрМ.Количество-Списать;
						Списать=0;
					КонецЕсли;	
					
					Если Списать=0 Тогда 
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			//По всем позициям номенклатуры
			Если Списать>0 Тогда
				Масс=Выборка.НайтиСтроки(Новый структура("Номенклатура",СтрТ.Номенклатура));
				Для Каждого СтрМ из Масс Цикл
					Если СтрМ.Количество=0 Тогда
						Продолжить;
					КонецЕсли;	
						
					Если Списать>=СтрМ.Количество Тогда
						Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(Рег,СтрМ);
						Если НЕ ЗначениеЗаполнено(Рег.ПриходнаяНакладная) И ЗначениеЗаполнено(СтрТ.Партия) Тогда
							Рег.ПриходнаяНакладная=СтрТ.Партия.ДокументОприходования;
						КонецЕсли;	
						Рег.Записать(Истина);
						Списать=Списать-СтрМ.Количество;
						СтрМ.Количество=0;
					Иначе
						Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(Рег,СтрМ);
						Если НЕ ЗначениеЗаполнено(Рег.ПриходнаяНакладная) И ЗначениеЗаполнено(СтрТ.Партия) Тогда
							Рег.ПриходнаяНакладная=СтрТ.Партия.ДокументОприходования;
						КонецЕсли;	
						Рег.Записать(Истина);
						сок_Проверки.РазбитьСтрокуРегистраСостоянияТребованийНаДве(Рег,Списать,Истина,СтрМ.КодСтроки);
						СтрМ.Количество=СтрМ.Количество-Списать;
						Списать=0;
					КонецЕсли;	
					
					Если Списать=0 Тогда 
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
			Если Списать>0 Тогда
				ОбщегоНазначения.СообщитьПользователю("Не удалось распределить по идентификаторам "+СтрТ.Номенклатура+" в количестве "+Списать);
				Элемент.ВсеТоварыРаспределены=Ложь;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
	
	
	Элемент.Статус=Перечисления.СтатусыПеремещенийТоваров.Принято;
	попытка
		Элемент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения="Не удалось изменить статус "+СсылкаНаОбъект;     
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;	

	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОтпускВОтделениеВернутьВСостояниеКОтгрузке(СсылкаНаОбъект) Экспорт
	Элемент = СсылкаНаОбъект.ПолучитьОбъект();
	
	Если Ложь Тогда Элемент = Документы.ОтпускТоваровВОтделение.СоздатьДокумент() КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачиВОтделение",СсылкаНаОбъект);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ДокументПередачиВОтделение = &ДокументПередачиВОтделение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();       
	
	Элемент.Статус=Перечисления.СтатусыПеремещенийТоваров.КОтгрузке;
	Элемент.Записать(РежимЗаписиДокумента.Проведение);
	
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Рег.Отбор.ИдентификаторСтроки.Установить(Выборка.ИдентификаторСтроки);
		Рег.Отбор.КодСтроки.Установить(Выборка.КодСтроки);
		Рег.Прочитать();
		Для Каждого СтрР из Рег Цикл
			СтрР.Состояние=Перечисления.СостоянияТребований.Поступило;
			СтрР.ДокументПередачиВОтделение=Документы.ОтпускТоваровВОтделение.ПустаяСсылка();
		КонецЦикла;
		Рег.ОбменДанными.Загрузка=Истина;
		Рег.Записать(Истина);
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

#КонецОбласти


#Область ПоступлениеТоваров


Процедура ПоступлениеТоваров_ВерутьВСостояниеЗаказано(СсылкаНаОбъект,Отказ) Экспорт
	
	
	Если НЕ СсылкаНаОбъект.Статус=Перечисления.сок_СостоянияПриходныхНакладных.Получено Тогда
		//ОбщегоНазначения.СообщитьПользователю("Для возврата в состояние ""Заказано"" необходимо что бы документ был в состоянии ""Получено"". Возврт не возможен. "+СсылкаНаОбъект,,,,Отказ);
		Возврат;
	КонецЕсли;	
	
	Если СсылкаНаОбъект.НовыйСпособУчета И 
		 СсылкаНаОбъект.Проведен Тогда
	 Иначе
		ОбщегоНазначения.СообщитьПользователю("Для возврата в состояние ""Заказано"" необходимо что бы документ проведен и Новй способ учета. "+СсылкаНаОбъект,,,,Отказ);
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	Элемент=СсылкаНаОбъект.ПолучитьОбъект();
	Элемент.Статус=Перечисления.сок_СостоянияПриходныхНакладных.ВЗакупке;
	Элемент.Записать(РежимЗаписиДокумента.Проведение);
	
	Если Ложь Тогда СсылкаНаОбъект=Документы.ПоступлениеТоваров.СоздатьДокумент(); КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриходнаяНакладная",СсылкаНаОбъект);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	|	СостоянияТребованийОтделений.Требование КАК Требование,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	|	СостоянияТребованийОтделений.Состояние КАК Состояние,
	|	СостоянияТребованийОтделений.Описание КАК Описание,
	|	СостоянияТребованийОтделений.Количество КАК Количество,
	|	СостоянияТребованийОтделений.СуммаВЗаказеПоставщику КАК СуммаВЗаказеПоставщику,
	|	СостоянияТребованийОтделений.ФормализованноеТребование КАК ФормализованноеТребование,
	|	СостоянияТребованийОтделений.ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку,
	|	СостоянияТребованийОтделений.ДатаЗаказа КАК ДатаЗаказа,
	|	СостоянияТребованийОтделений.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СостоянияТребованийОтделений.ПриходнаяНакладная КАК ПриходнаяНакладная,
	|	СостоянияТребованийОтделений.ДокументПередачиВОтделение КАК ДокументПередачиВОтделение,
	|	СостоянияТребованийОтделений.Комментарий КАК Комментарий,
	|	СостоянияТребованийОтделений.Установлен КАК Установлен
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ПриходнаяНакладная = &ПриходнаяНакладная";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Рег,Выборка);
		Рег.Установлен=Ложь;
		Рег.ПриходнаяНакладная=Документы.ПоступлениеТоваров.ПустаяСсылка();
		Рег.Состояние=Перечисления.СостоянияТребований.Заказано;
		Рег.Записать(Истина);
		Если ЗначениеЗаполнено(Рег.ДокументПередачиВОтделение) Тогда
			ОбщегоНазначения.СообщитьПользователю("Сняли признак ""Передано"" с записи регистра ""Состояния требований отделений"" "+Рег.ИдентификаторСтроки+" Код строки "+Рег.КодСтроки+" для документа "+рег.ДокументПередачиВОтделение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если сок_Сервер.ОтменитьЗаявкуНаРасходованиеДенежныхСредств(СсылкаНаОбъект,СсылкаНаОбъект.ЗаказПоставщику) Тогда
		ЗафиксироватьТранзакцию();
		
	Иначе     
		ОтменитьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоступлениеТоваров_ВСостояниеПолученоПослеНаСервере(СсылкаНаОбъект,Отказ) Экспорт
	Если Ложь Тогда СсылкаНаОбъект=Документы.ПоступлениеТоваров.СоздатьДокумент(); Конецесли;
	
	Если НЕ СсылкаНаОбъект.НовыйСпособУчета Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+СсылкаНаОбъект+" ведется по старому. Изменние статуса на ""Получен"" не возможно.",СсылкаНаОбъект,,,Отказ);
		Возврат;
	КонецЕсли;	 

	Если НЕ СсылкаНаОбъект.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+СсылкаНаОбъект+" не проведен. Изменние статуса на ""Получен"" не возможно.",СсылкаНаОбъект,,,Отказ);
		Возврат;
	КонецЕсли;	 
	
	Если СсылкаНаОбъект.Статус=Перечисления.сок_СостоянияПриходныхНакладных.Получено  Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+СсылкаНаОбъект+" уже в состоянии ""Получен"". Изменние статуса на ""Получен"" не возможно.",СсылкаНаОбъект,,,Отказ);
		Возврат;
	КонецЕсли;	 
	
	Если СсылкаНаОбъект.ВсеИдентификаторыПодобраны Тогда
		НачатьТранзакцию();
		
		Элемент=СсылкаНаОбъект.ПолучитьОбъект();
		Элемент.Статус=Перечисления.сок_СостоянияПриходныхНакладных.Получено;
		Элемент.Записать(РежимЗаписиДокумента.Проведение);
		
		Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
		Рег.ОбменДанными.Загрузка=Истина;
		
		Для Каждого Стр из СсылкаНаОбъект.ТоварыТребований Цикл    
			Рег.Отбор.ИдентификаторСтроки.Установить(Стр.ИдентификаторСтроки);
			Рег.Отбор.КодСтроки.Установить(Стр.КодСтроки);
			Рег.Прочитать();
			Для Каждого СтрР из Рег Цикл
				СтрР.Состояние=?(ЗначениеЗаполнено(СтрР.ДокументПередачиВОтделение),Перечисления.СостоянияТребований.Передано,Перечисления.СостоянияТребований.Поступило);
				СтрР.ПриходнаяНакладная=СсылкаНаОбъект;
			КонецЦикла;
			Рег.Записать(Истина);
		КонецЦикла;	  
		Если СсылкаНаОбъект.ДоговорКонтрагента.ФормироватьЗаявкиНаРасходованиеДенежныхСредств И СсылкаНаОбъект.ДоговорКонтрагента.ДатаНачалаФормированияЗаказов<=СсылкаНаОбъект.Дата Тогда
			Если СсылкаНаОбъект.ДоговорКонтрагента.ПроцентОтсрочки>0 Тогда
				сок_Сервер.СоздатьЗаявкуНаРасходованиеДенежныхСредств(СсылкаНаОбъект.Ссылка,СсылкаНаОбъект.ЗаказПоставщику,ТекущаяДата()+СсылкаНаОбъект.ДоговорКонтрагента.ДнейОтсрочки*86400,
																	  Окр(СсылкаНаОбъект.СуммаДокумента*СсылкаНаОбъект.ДоговорКонтрагента.ПроцентОтсрочки/100,2));
			КонецЕсли;	
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+СсылкаНаОбъект+" переверден в состояние ""Получен"".",СсылкаНаОбъект);
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У документа "+СсылкаНаОбъект+" подобраны не все идентификаторы. Изменние статуса на ""Получен"" не возможно.",СсылкаНаОбъект,,,Отказ);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти