
#Область ПрограммныйИнтерфейс

// Вызывается при загрузке уведомления об отгрузке.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОПриемкеМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОбОтгрузке(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.СоставТранспортныхУпаковок);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке уведомления об отгрузке в РФ.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОВвозеЛПвРФМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОбОтгрузкеВРФ(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке уведомления о приемке.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОбОтгрузкеМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОПриемке(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.СоставТранспортныхУпаковок);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке уведомления о перемещении.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОПеремещенииМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОПеремещении(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке уведомления о выбытии проведенного через РВ или ККТ.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП,
//           ДокументОбъект.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП,
//           ДокументОбъект.УведомлениеОВыдачеВОтделенияМДЛП,
//           ДокументОбъект.УведомлениеОВыбытииМДЛП
//     - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОВыбытии(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке уведомления о завершении окончательной упаковки переданного через РЭ.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияОЗавершенииОкончательнойУпаковки(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке данных о составе упаковки.
//
// Параметры:
//  Объект - ДокументОбъект.ЗапросСоставаУпаковкиМДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеДанныхОСоставеУпаковки(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке данных о выводе.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеУведомленияОРозничнойПродаже(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьДолиУпаковокВТабличныхЧастях(Объект.Товары, Объект.НомераУпаковок);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке данных о ввозе лекарственных препаратов в РФ.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеУведомленияОВвозеЛПвРФ(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке данных об упаковке лекарственного препарата и нанесении средств идентификации за пределами территории РФ (информация с СКЗКМ).
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФМДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеУведомленияОбУпаковкеЛПиНанесенииСредствИдентификацииЗаПределамиРФ(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке данных о смене собственника в зоне таможенного контроля.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФМДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеУведомленияОСменеСобственникаВЗТК(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке данных об эмиссии КМ.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОбЭмиссииКММДЛП - загружаемый документ.
//
Процедура ПриЗагрузкеУведомленияОбЭмиссииКМ(Объект) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при загрузке уведомления владельца об оприходовании.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОбОтгрузкеМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияВладельцаОбОприходовании(Объект) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьНоменклатуруВТабличнойЧасти(Объект.Товары);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается при загрузке уведомления владельца об оприходовании.
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОбОтгрузкеМДЛП, ДокументОбъект.УведомлениеОбОтгрузкеВРФМДЛП, ДокументОбъект.УведомлениеОСменеСобственникаВЗТКМДЛП - загружаемое уведомление.
//
Процедура ПриЗагрузкеУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(Объект) Экспорт
	
	
	
КонецПроцедуры

// Выполняет действия при изменении GTIN, номера серии, годен до.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормы - Документ, в которой произошло событие,
//  ТекущаяСтрока - СтрокаТабличнойЧасти - строка таблицы товаров,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииПараметровНоменклатуры(Объект, ТекущаяСтрока, ПараметрыЗаполнения) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ПриИзмененииПараметровНоменклатуры(Объект, ТекущаяСтрока, ПараметрыЗаполнения);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормы - Документ, в которой произошло событие,
//  ТекущаяСтрока - СтрокаТабличнойЧасти - строка таблицы товаров,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Объект, ТекущаяСтрока, ПараметрыЗаполнения) Экспорт
	
	// БольничнаяАптека
	Если ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Выполняет действия при изменении цены в таблице Товары.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормы - Документ, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииЦены(Объект, ТекущаяСтрока, ПараметрыЗаполнения) Экспорт
	
	// БольничнаяАптека
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Заполняет реквизит "Серия" в товарной табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыКоллекция
//  ИмяТабличнойЧасти - Строка - Товарная табличная часть документа;
//  СтрокиКОбработке - Массив - Массив строк табличной части;
//  ПараметрыУказанияСерий - Структура - Параметры указания серий, формируется в модулях менеджеров документов.
//  Результат - Структура - см. ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий(), нужно заполнить информацию об ошибках и результате операции.
//
Процедура ЗаполнитьСгенерироватьСерии(Объект, ИмяТабличнойЧасти, СтрокиКОбработке = Неопределено, ПараметрыУказанияСерий = Неопределено, Результат) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ЗаполнитьСгенерироватьСерии(Объект, ИмяТабличнойЧасти, СтрокиКОбработке, Результат);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Проверяет использование нескольких организаций в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Несколько организаций используются.
//
Функция ИспользоватьНесколькоОрганизаций() Экспорт
	
	// БольничнаяАптека
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	// Конец БольничнаяАптека
	Возврат Истина;
	
КонецФункции

// Проверяет использование мест деятельности организаций в информационной базе.
// 
// Возвращаемое значение:
//  Булево - места деятельности используются.
//
Функция ИспользоватьМестаДеятельности() Экспорт
	
	// БольничнаяАптека
	Возврат Истина;
	// Конец БольничнаяАптека
	Возврат Ложь;
	
КонецФункции

// Проверяет использование мест деятельности контрагентов в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Места деятельности используются.
//
Функция ИспользоватьМестаДеятельностиКонтрагентов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет использование характеристик номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Характеристики используются.
//
Функция ИспользоватьХарактеристикиНоменклатуры() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет использование серий номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Серии используются.
//
Функция ИспользоватьСерииНоменклатуры() Экспорт
	
	// БольничнаяАптека
	Возврат Истина;
	// Конец БольничнаяАптека
	Возврат Ложь;
	
КонецФункции

// Проверяет использование упаковок номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Упаковки используются.
//
Функция ИспользоватьУпаковкиНоменклатуры() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Позволяет определить получение валюты регламентированного учета.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - Валюта регламентированного учета.
//
Функция ВалютаРегламентированногоУчета() Экспорт
	
	// БольничнаяАптека
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	// Конец БольничнаяАптека
	Возврат "RUR";
	
КонецФункции

// Возвращает структуру, содержащую Страну, Регистрационный номер, наименование, признак физического лица, ИНН и КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГИСМ - Контрагент.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     Страна  - Строка - Страна регистрации контрагента.
//     РегистрационныйНомер  - Строка - Регистрационный номер контрагента.
//     Наименование  - Строка - Наименование контрагента.
//     НаименованиеПолное  - Строка - Полное наименование контрагента.
//     ЭтоФизическоеЛицо  - Булево - Признак физического лица.
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     ЮридическийАдрес - Строка - Юридический адрес контрагента.
//
Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Реквизиты = Новый Структура("Страна, РегистрационныйНомер, Наименование, НаименованиеПолное, ЭтоФизическоеЛицо, ИТИН, ИНН, КПП, ЮридическийАдрес");
	// БольничнаяАптека
	РеквизитыКонтрагента = Справочники.Контрагенты.ПолучитьРеквизитыКонтрагента(Контрагент);
	ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитыКонтрагента);
	Реквизиты.ЭтоФизическоеЛицо = (РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	ЮридическийАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагенты,
		ТекущаяДатаСеанса());
	Реквизиты.ЮридическийАдрес = ЮридическийАдрес;
	Реквизиты.ИТИН = РеквизитыКонтрагента.РегистрационныйНомер;
	Реквизиты.Страна = РеквизитыКонтрагента.СтранаРегистрации;
	// Конец БольничнаяАптека
	Возврат Реквизиты;
	
КонецФункции

// В функции нужно определить описание типов объектов прикладного решения.
// На пример:
//	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
//	Типы = Новый Массив;
//	Типы.Добавить(Тип("СправочникСсылка.Склады"));
//	Типы.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
//	ТипОбъектМестаДеятельностиОрганизации = Новый ОписаниеТипов(Типы);
//	ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
//
// Параметры:
//  ТипОрганизация - ОписаниеТипов - описание типа для собственной организации,
//  ТипОбъектМестаДеятельностиОрганизации - ОписаниеТипа - описание типа для собственного объекта места деятельности,
//  ТипКонтрагент - ОписаниеТипа - описание типа для сторонней организации,
//  ТипОбъектМестаДеятельностиКонтрагента - ОписаниеТипа - описание типа для стороннего объекта места деятельности.
//
//
Процедура ОписаниеТиповОрганизацииКонтрагентаОбъектаМестаДеятельности(
		ТипОрганизация = Неопределено,
		ТипОбъектМестаДеятельностиОрганизации = Неопределено,
		ТипКонтрагент = Неопределено,
		ТипОбъектМестаДеятельностиКонтрагента = Неопределено) Экспорт
	
	// БольничнаяАптека
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипОбъектМестаДеятельностиОрганизации = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	// БольничнаяАптека
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(Форма, ПрефиксыЭлементовФормы);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Получить количество возможных документов-оснований для сопоставления с документом-уведомлением.
//
// Параметры:
//  Объект - ДокументОбъект.Уведомление - документ для которого подбираются документ-основание.
// 
// Возвращаемое значение:
//  Число - количество документов.
//
Функция ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект) Экспорт
	
	КоличествоДокументов = 0;
	
	// БольничнаяАптека
	КоличествоДокументов = ИнтеграцияМДЛПБольничнаяАптека.ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект);
	// Конец БольничнаяАптека
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Нужно реализовать проверку наличия расхождений между Уведомлением и Основанием.
//
// Параметры:
//  Уведомление - ДокументСсылка.Уведомление - проверяемое уведомление,
//  Основание - ДокументСсылка - проверяемое основание уведомления.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуУведомлениемИОснованием(Уведомление, Основание) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЕстьРасхожденияМеждуУведомлениемИОснованием(Уведомление, Основание);
	// Конец БольничнаяАптека
	Возврат Ложь;
	
КонецФункции

// Нужно заполнить список возможных уведомлений для связи с основанием.
//
// Параметры:
//  МетаданныеУведомления - ОбъектМетаданных - метаданные уведомления, возможные значения которого надо получить;
//  Основание - Ссылка - основание уведомления, для которого подбираются уведомления.
//
// Возвращаемое значение:
//  Массив - список подходящих уведомлений.
//
Функция ВозможныеУведомленияПоОснованию(МетаданныеУведомления, Основание) Экспорт
	
	ВозможныеУведомления = Новый Массив;
	// БольничнаяАптека
	ВозможныеУведомления = ИнтеграцияМДЛПБольничнаяАптека.ВозможныеУведомленияПоОснованию(МетаданныеУведомления, Основание);
	// Конец БольничнаяАптека
	Возврат ВозможныеУведомления;
	
КонецФункции

// Можно переопределить необходимость добавления команды создания уведомления для учетного документа.
//
// Возвращаемое значение:
//   Ложь - команда создания уведомления не будет добавлена
//
Функция НужноСоздатьУведомленияПоОснованию(МетаданныеУведомления, Основание) Экспорт
	
	// БольничнаяАптека
	ТипОснования = ТипЗнч(Основание);
	ТипУведомления = ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеУведомления.ПолноеИмя()).ПустаяСсылка());
	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров")
	   И ТипУведомления = Тип("ДокументСсылка.УведомлениеОПеремещенииМДЛП") Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецФункции

// Можно установить возможность отключения требования создания уведомления на основании учетного документа.
//
// Возвращаемое значение:
//   Истина - будет добавлена команда отключения требования создания уведомления на основании учетного документа.
//
Функция МожноОтключитьТребованиеСозданияРаспоряженияНаОформление(Основание) Экспорт
	
	// БольничнаяАптека
	ТипОснования = ТипЗнч(Основание);
	
	ТипыДокументов = Новый Массив;
	
	// Для целей несопоставимой инвентаризации между документами учета и документами-уведомлениями.
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеНедостачТоваров"));
	
	Возврат ТипыДокументов.Найти(ТипОснования) <> Неопределено;
	// Конец БольничнаяАптека
	
КонецФункции

// Можно переопределить использование действия ЗапроситеИнформациюОбУпаковках в документе.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документа, в котором используется действие ЗапроситеИнформациюОбУпаковках.
//  НастройкиПоУмолчанию - Соответствие - настройки использования действия ЗапроситеИнформациюОбУпаковках в документах по умолчанию.
//   * Ключ - Строка - полное имя документа, такое же, как возвращает метод Ссылка.Метаданные().ПолноеИмя().
//   * Значение - Булево - признак использования действия ЗапроситеИнформациюОбУпаковках для документа по умолчанию.
//
// Возвращаемое значение:
//  Булево - признак использования действия ЗапроситеИнформациюОбУпаковках в документе.
//           Истина - в статусе документа, среди дальнейших действий, первым необходимым действием будет ЗапроситеИнформациюОбУпаковках.
//
Функция ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ДокументСсылка, НастройкиПоУмолчанию) Экспорт
	
КонецФункции

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  НепроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возникает при проведении документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//  СтандартнаяОбработка - Булево - признак необходимости выполнения стандартной обработки проведения документа.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Возникает при отмене проведения документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа отмены проведения документа,
//  СтандартнаяОбработка - Булево - признак необходимости выполнения стандартной обработки отмены проведения документа.
//
Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	
	
КонецПроцедуры

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтбореОбразцов(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтбореОбразцов(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукции(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВыпускеГотовойПродукции(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукцииЗаПределамиРФ(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВыпускеГотовойПродукцииЗаПределамиРФ(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОРозничныхПродажах(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОРозничныхПродажах(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемке(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладПолучатель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОПриемкеМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПриемке(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияУведомленияОПриемке(ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФ(ДокументОснование) Экспорт
	
	
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВвозеЛПвРФ(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезИмпортера(ДокументОснование) Экспорт
	
	
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВвозеЛПвРФБезИмпортера(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтгрузке(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОбОтгрузкеМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтгрузке(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияУведомленияОбОтгрузке(ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтгрузкеВРФ(ДокументОснование) Экспорт
	
	
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтгрузкеВРФ(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещении(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОПеремещенииМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПеремещении(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОПеремещенииМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещенииГЛО(ДокументОснование) Экспорт
	
	
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПеремещенииГЛО(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещенииМеждуЗТК(ДокументОснование) Экспорт
	
	
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПеремещенииМеждуЗТК(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтпускеПоЛьготномуРецепту(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтпускеПоЛьготномуРецепту(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыдачеВОтделения(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОВыдачеВОтделенияМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВыдачеВОтделения(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОВыдачеВОтделенияМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПередачеНаУничтожение(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОПередачеНаУничтожениеМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПередачеНаУничтожение(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОПередачеНаУничтожениеМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОФактеУничтожения(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОФактеУничтоженияМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОФактеУничтожения(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОФактеУничтоженияМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыбытии(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладОтправитель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОВыбытииМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВыбытии(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОВыбытииМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПовторномВводеВОборот(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладПолучатель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПовторномВводеВОборот(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП, ДокументОснование, "Оприходование");
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияОдностороннихУведомлений(Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП, ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВводеВОборот(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВводеВОборот(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОСменеСобственникаВЗТК(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОСменеСобственникаВЗТК(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемкеНовымСобственникомЛПвЗТК(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПриемкеНовымСобственникомЛПвЗТК(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОРезультатахТаможенногоОформления(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОРезультатахТаможенногоОформления(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемкеНаСкладИмпортера(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПриемкеНаСкладИмпортера(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОПередачеКМТаможенномуСкладу(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОПередачеКМТаможенномуСкладу(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбЭмиссииКМ(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбЭмиссииКМ(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОприходовании(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	ЗапрашиваемыеРеквизиты = ИнтеграцияМДЛПБольничнаяАптека.СтруктураРеквизитыРасчетаСтатусаОформления();
	ЗапрашиваемыеРеквизиты.МестоДеятельности = СкладыСервер.ИмяРеквизитаСкладПолучатель(ДокументОснование);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, ЗапрашиваемыеРеквизиты);
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОбОприходованииМДЛП;
	ЗаписьТребуется = ИнтеграцияМДЛПБольничнаяАптека.ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, ДокументОснование);
	
	ИнтеграцияМДЛП.РассчитатьСтатусОформления(
		МетаданныеУведомления,
		ДокументОснование,
		ЗначенияРеквизитов,
		ЗаписьТребуется);
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОприходовании(ДокументОснование) Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.ЗапросСтатусаОформленияУведомленияОбОприходовании(ДокументОснование);
	// Конец БольничнаяАптека
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезПодтверждения(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОВвозеЛПвРФБезПодтверждения(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияВладельцаОбОприходовании(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияВладельцаОбОприходовании(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтпускеЛППоДокументамОтличнымОтЧека(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтпускеЛППоДокументамОтличнымОтЧека(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияИнвентаризационнойОписиМДЛП(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияИнвентаризационнойОписиМДЛП(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияИнвентаризацииПотребительскихУпаковокМДЛП(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияИнвентаризацииПотребительскихУпаковокМДЛП(ДокументОснование) Экспорт
	
КонецФункции

// Рассчитывает статус оформления документа учетной системы.
// См. ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Основание уведомления.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтсутствииЛПНаБалансе(ДокументОснование) Экспорт
	
КонецПроцедуры

// Возвращает запрос для расчета статуса оформления. Используется при вызове ИнтеграцияМДЛП.РассчитатьСтатусОформления.
//
// ВозвращаемоеЗначение:
//  Запрос - Выборка из результата запроса должна содержать одну строку с полями:
//    * ЕстьОформленныеТовары - Булево
//    * ЕстьНеОформленныеТовары - Булево
//    * ЕстьПолностьюОформленныеТовары - Булево
//    * ЕстьОшибкиОформления - Булево
//
Функция ЗапросСтатусаОформленияУведомленияОбОтсутствииЛПНаБалансе(ДокументОснование) Экспорт
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

// Позволяет переопределить стандартный механизм заполнения документов, выводимых в панели маркировки.
//
// Параметры:
//  ТаблицаДокументы     - ТаблицаЗначений - 
//  СтандартнаяОбработка - Булево - если установить Ложь, то стандартное заполнение пропускается.
//
Процедура ПередЗаполнениемДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОЗавершенииЭтапаОкончательнойУпаковкиТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтбореОбразцовТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВыпускеГотовойПродукцииТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтгрузкеТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОбОтгрузкеМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтгрузкеВРФТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПриемкеТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОПриемкеМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВвозеЛПвРФТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВвозеЛПвРФБезИмпортераТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОРозничныхПродажахТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПеремещенииТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОПеремещенииМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПеремещенииГЛОТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПеремещенииМеждуЗТКТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтпускеПоЛьготномуРецептуТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВыдачеВОтделенияТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОВыдачеВОтделенияМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПередачеНаУничтожениеТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОПередачеНаУничтожениеМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОФактеУничтоженияТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОФактеУничтоженияМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВыбытииТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОВыбытииМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПовторномВводеВОборотТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбАгрегированииИТрансформацииУпаковокТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВводеВОборотТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОСменеСобственникаВЗТКТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПриемкеНовымСобственникомЛПвЗТКТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОРезультатахТаможенногоОформленияТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПриемкеНаСкладИмпортераТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОПередачеКМТаможенномуСкладуТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбЭмиссииКМТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОприходованииТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.УведомлениеОбОприходованииМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОВвозеЛПвРФБезПодтвержденияМДЛПТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеВладельцаОбОприходованииТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ИнвентаризационнаяОписьМДЛПТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ИнвентаризацияПотребительскихУпаковокМДЛПТекстЗапросаОформите() Экспорт
	
	// БольничнаяАптека
	Возврат ИнтеграцияМДЛПБольничнаяАптека.УведомлениеТекстЗапросаОформите(Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП);
	// Конец БольничнаяАптека
	
КонецФункции

// Возвращает текст запроса, подсчитывающий количество документов требующих оформления.
// Выборка результата запроса должна содержать поле "КоличествоДокументов".
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция УведомлениеОбОтсутствииЛПНаБалансеТекстЗапросаОформите() Экспорт
	
	
	
КонецФункции


// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеВладельцаОбОприходованииТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбАгрегированииИТрансформацииУпаковокТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОприходованииТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтбореОбразцовТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтгрузкеВРФТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтгрузкеТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтпускеПоЛьготномуРецептуТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбЭмиссииКМТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВводеВОборотТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВвозеЛПвРФБезИмпортераТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВвозеЛПвРФБезПодтвержденияТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВвозеЛПвРФТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВыбытииТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВыдачеВОтделенияТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОВыпускеГотовойПродукцииТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОЗавершенииЭтапаОкончательнойУпаковкиТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПередачеКМТаможенномуСкладуТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПередачеНаУничтожениеТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПеремещенииГЛОТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПеремещенииТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПеремещенииМеждуЗТКТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПовторномВводеВОборотТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПриемкеТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПриемкеНаСкладИмпортераТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОПриемкеНовымСобственникомЛПвЗТКТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОРезультатахТаможенногоОформленияТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОРозничныхПродажахТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОСменеСобственникаВЗТКТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОФактеУничтоженияТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УдалитьЗапросСоставаУпаковкиТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция ИнвентаризационнаяОписьТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция ИнвентаризацияПотребительскихУпаковокТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

// Переопределяет текст запроса динамического списка СписокКОформлению панели маркировки для документов требующих оформления.
// Выборка результата запроса должна содержать поля аналогичные исходному тексту запроса.
// Исходный текст запроса см. в функции Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов.
//
// Возвращаемое значение:
//  Строка - Текст запроса. Если возвращается Неопределено, тогда будет использован исходный текст запроса.
//
Функция УведомлениеОбОтсутствииЛПНаБалансеТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	
	
КонецФункции

#КонецОбласти

#Область Отчеты

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	
	
КонецПроцедуры

Процедура ОпределитьНастройкиФормы(Отчет, Форма, КлючВарианта, Настройки) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОписаниеТиповОрганизацииКонтрагентаОбъектаМестаДеятельности.
//
// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентМДЛП - значение по умолчанию для собственной организации,
//  МестоДеятельности - ОпределяемыйТип.ОбъектМестаДеятельностиМДЛП - значение по умолчанию для собственного объекта места деятельности,
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентМДЛП - значение по умолчанию для сторонней организации,
//  МестоДеятельностиКонтрагента - ОпределяемыйТип.ОбъектМестаДеятельностиМДЛП - значение по умолчанию для стороннего объекта места деятельности.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		Организация = Неопределено,
		МестоДеятельности = Неопределено,
		Контрагент = Неопределено,
		МестоДеятельностиКонтрагента = Неопределено) Экспорт
	
	// БольничнаяАптека
	Организация       = Справочники.Организации.ПустаяСсылка();
	МестоДеятельности = Справочники.Склады.ПустаяСсылка();
	Контрагент        = Справочники.Контрагенты.ПустаяСсылка();
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
