
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Процедура вызывает обработчики строки
//
// Параметры:
//  ТекущаяСтрока - данные обрабатываемой строки
//  СтруктураДействий - структура с выполняемыми действиями
//  КэшированныеЗначения - структура с кэшированными значениями
//
Процедура ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьСерииНоменклатурыУпаковкиПартии(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЕдиницуИзмерения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЕдиницуИзмеренияПоОтбору(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСопоставленнуюНоменклатуруПоставщика(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПараметрыУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗабраковкуСерий(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоэффициент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиниц(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоэффициентЕдиницыОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковку(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗарегистрированнуюЦенуПроизводителя(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦену(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСумму(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуЛьготы(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыСтатьиДоходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыСтатьиРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет метод ОбработатьСтрокуТабличнойЧасти для каждой строки табличной части
//
// Параметры:
//  ТабличнаяЧасть - 
//  СтруктураДействий - структура с выполняемыми действиями
//  КэшированныеЗначения - структура с кэшированными значениями
//
Процедура ОбработатьТабличнуюЧасть(ТабличнаяЧасть, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку полученных штрихкодов в форме
//
Процедура ОбработатьШтрихкоды(Форма, Объект, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	ИзменятьКоличество = ПараметрыДействия.ИзменятьКоличество;
	Если ИзменятьКоличество
	   И ПараметрыДействия.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыДействия.ИмяТабличнойЧасти];
	Модифицированность = Ложь; // Форма на текущий момент может быть уже модифицированной, по этому изменяем значение переменной, а не свойство формы.
	
	ОбработатьШтрихкодыТабличнойЧасти(ТабличнаяЧасть, ПараметрыДействия, КэшированныеЗначения, Модифицированность);
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку полученных штрихкодов в табличной части
//
// Параметры:
//  ТабличнаяЧасть
//  ПараметрыДействия
//  КэшированныеЗначения
//  Модифицированность
//
Процедура ОбработатьШтрихкодыТабличнойЧасти(ТабличнаяЧасть, ПараметрыДействия, КэшированныеЗначения, Модифицированность) Экспорт
	
	Модифицированность = Ложь;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	НеизвестныеШтрихкодыТовара = Новый Массив;
	НеизвестныеШтрихкодыУпаковок = Новый Массив;
	Для Каждого ДанныеШтрихкода Из ПараметрыДействия.Штрихкоды Цикл
		Если КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.Штрихкод] = Неопределено
		 Или КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.Штрихкод].НеизвестныйШтрихкод Тогда
			Если ДанныеШтрихкода.ТипШтрихкода = "ШтрихкодМДЛП" И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар Тогда
				НеизвестныеШтрихкодыУпаковок.Добавить(ДанныеШтрихкода);
			Иначе
				НеизвестныеШтрихкодыТовара.Добавить(ДанныеШтрихкода.Штрихкод);
				Если ДанныеШтрихкода.Свойство("GTIN") И ЗначениеЗаполнено(ДанныеШтрихкода.GTIN) Тогда
					Если КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.GTIN] = Неопределено
					 Или КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.GTIN].НеизвестныйШтрихкод Тогда
						НеизвестныеШтрихкодыТовара.Добавить(ДанныеШтрихкода.GTIN);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НеизвестныеШтрихкодыТовара.Количество() > 0 Тогда
		ЗаполнитьДанныеПоШтрихкодамТоваров(НеизвестныеШтрихкодыТовара, КэшированныеЗначения);
	КонецЕсли;
	Если НеизвестныеШтрихкодыУпаковок.Количество() > 0 Тогда
		ЗаполнитьДанныеПоШтрихкодамУпаковок(НеизвестныеШтрихкодыУпаковок, КэшированныеЗначения, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыУчетаНоменклатуры = ПараметрыДействия.ПараметрыУчетаНоменклатуры;
	Если ПараметрыУчетаНоменклатуры = Неопределено Тогда
		ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	КонецЕсли;
	
	СтатусыУказанияСерий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияСерий();
	СтатусыУказанияПартий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияПартий();
	
	ТекущаяСтрока = Неопределено;
	
	Для Каждого ТекущийШтрихкод Из ПараметрыДействия.Штрихкоды Цикл
		
		ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.Штрихкод];
		Если ДанныеШтрихкода.НеизвестныйШтрихкод
		   И ТекущийШтрихкод.ТипШтрихкода <> "ШтрихкодМДЛП"
		   И ТекущийШтрихкод.Свойство("GTIN")
		   И ЗначениеЗаполнено(ТекущийШтрихкод.GTIN) Тогда
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.GTIN];
		КонецЕсли;
		
		Если ДанныеШтрихкода.НеизвестныйШтрихкод И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			// Не удалось найти ни упаковку ни номенклатуру.
			// Работа выполняется только со штрихкодом.
			
			ПараметрыДействия.НеизвестныеШтрихкоды.Добавить(ТекущийШтрихкод);
			
			Если Не ПараметрыДействия.ИзменятьКоличество Или ПараметрыДействия.ПропускатьНенайденныеШтрихкоды Тогда
				Продолжить;
			КонецЕсли;
			
			// Отбор для поиска уже существующих строк в табличной части.
			Отбор = Новый Структура;
			Если ДанныеШтрихкода.ШтрихкодУпаковки Тогда
				Если ПараметрыДействия.ЕстьКолонкаНомерКиЗ Тогда
					Отбор.Вставить(ПараметрыДействия.ИмяКолонкиНомерКиЗ, ТекущийШтрихкод.SGTIN);
				КонецЕсли;
				Отбор.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.GTIN);
			Иначе
				Отбор.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.Штрихкод);
			КонецЕсли;
			
			// Значения заполнения полей строки табличной части.
			ЗаполняемыеЗначения = Новый Структура;
			Если ДанныеШтрихкода.ШтрихкодУпаковки Тогда
				
				Если ПараметрыДействия.ЕстьКолонкаНомерКиЗ Тогда
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиНомерКиЗ, ТекущийШтрихкод.SGTIN);
				КонецЕсли;
				ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.GTIN);
				
				Если ПараметрыДействия.ЕстьКолонкаШтрихкодBase64 Тогда
					ШтрихкодBase64 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "ШтрихкодBase64");
					ЗаполняемыеЗначения.Вставить("ШтрихкодBase64", ШтрихкодBase64);
				КонецЕсли;
				
				Если ПараметрыДействия.ЕстьКолонкаРезультатПроверкиКМ Тогда
					РезультатПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "РезультатПроверкиКМ");
					ЗаполняемыеЗначения.Вставить("РезультатПроверкиКМ", РезультатПроверкиКМ);
					Если ПараметрыДействия.ЕстьКолонкаКодСтатусаПроверкиКМ Тогда
						КодСтатусаПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "КодСтатусаПроверкиКМ");
						ЗаполняемыеЗначения.Вставить("КодСтатусаПроверкиКМ", КодСтатусаПроверкиКМ);
					КонецЕсли;
					Если ПараметрыДействия.ЕстьКолонкаПояснениеСтатусаПроверкиКМ Тогда
						ПояснениеСтатусаПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "ПояснениеСтатусаПроверкиКМ");
						ЗаполняемыеЗначения.Вставить("ПояснениеСтатусаПроверкиКМ", ПояснениеСтатусаПроверкиКМ);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.Штрихкод);
			КонецЕсли;
			
			Если ПараметрыДействия.ЕстьКолонкаКоличество Тогда
				Если ДанныеШтрихкода.ШтрихкодУпаковки И ПараметрыДействия.ПроверятьУникальностьУпаковокМДЛП Тогда
					// Количество маркированной продукции не может быть больше 1 потребительской упаковки.
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиКоличество, 1);
				Иначе
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиКоличество, ТекущийШтрихкод.Количество);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			// Удалось найти или конкретную упаковку или номенклатуру.
			
			Если ДанныеШтрихкода.НеизвестныйШтрихкод И ПараметрыДействия.ПропускатьНенайденныеШтрихкоды Тогда
				ПараметрыДействия.НеизвестныеШтрихкоды.Добавить(ТекущийШтрихкод);
				Продолжить;
			КонецЕсли;
			
			ТекущиеПараметрыНоменклатуры = Новый Структура("Номенклатура", ДанныеШтрихкода.Номенклатура);
			Если ПараметрыУчетаНоменклатуры.СуффиксыСтатусов.Количество() = 0 Тогда
				ТекущиеПараметрыНоменклатуры.Вставить("СтатусУказанияСерий", СтатусыУказанияСерий.СтатусСерииНеУказываются);
				ТекущиеПараметрыНоменклатуры.Вставить("СтатусУказанияПартий", СтатусыУказанияПартий.СтатусПартииНеУказываются);
			Иначе
				Для Каждого Суффикс Из ПараметрыУчетаНоменклатуры.СуффиксыСтатусов Цикл
					ТекущиеПараметрыНоменклатуры.Вставить("СтатусУказанияСерий" + Суффикс, СтатусыУказанияСерий.СтатусСерииНеУказываются);
					ТекущиеПараметрыНоменклатуры.Вставить("СтатусУказанияПартий" + Суффикс, СтатусыУказанияПартий.СтатусПартииНеУказываются);
				КонецЦикла;
			КонецЕсли;
			
			ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатурыПриИзмененииРеквизитовВСтроке(ТекущиеПараметрыНоменклатуры, ПараметрыУчетаНоменклатуры);
			
			// Отбор для поиска уже существующих строк в табличной части.
			Отбор = Новый Структура;
			Если ПараметрыДействия.ШтрихкодыВТЧ Тогда
				Если ДанныеШтрихкода.ШтрихкодУпаковки Тогда
					Если ПараметрыДействия.ЕстьКолонкаНомерКиЗ Тогда
						Отбор.Вставить(ПараметрыДействия.ИмяКолонкиНомерКиЗ, ТекущийШтрихкод.SGTIN);
					КонецЕсли;
					Отбор.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.GTIN);
				Иначе
					Отбор.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.Штрихкод);
				КонецЕсли;
			Иначе
				Отбор.Вставить("Номенклатура");
				Отбор.Вставить("ЕдиницаИзмерения");
				Если ТекущиеПараметрыНоменклатуры.СтатусУказанияСерий <> СтатусыУказанияСерий.СтатусСерииНеУказываются Тогда
					Отбор.Вставить("СерияНоменклатуры");
				КонецЕсли;
				Если ТекущиеПараметрыНоменклатуры.СтатусУказанияПартий <> СтатусыУказанияПартий.СтатусПартииНеУказываются Тогда
					Отбор.Вставить("Партия");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Отбор, ДанныеШтрихкода);
			КонецЕсли;
			
			// Значения заполнения полей строки табличной части.
			ЗаполняемыеЗначения = Новый Структура;
			ЗаполняемыеЗначения.Вставить("Номенклатура");
			ЗаполняемыеЗначения.Вставить("ЕдиницаИзмерения");
			Если ТекущиеПараметрыНоменклатуры.СтатусУказанияСерий <> СтатусыУказанияСерий.СтатусСерииНеУказываются Тогда
				ЗаполняемыеЗначения.Вставить("СерияНоменклатуры");
			КонецЕсли;
			Если ТекущиеПараметрыНоменклатуры.СтатусУказанияПартий <> СтатусыУказанияПартий.СтатусПартииНеУказываются Тогда
				ЗаполняемыеЗначения.Вставить("Партия");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗаполняемыеЗначения, ДанныеШтрихкода);
			
			Если ПараметрыДействия.ШтрихкодыВТЧ Тогда
				Если ДанныеШтрихкода.ШтрихкодУпаковки Тогда
					
					Если ПараметрыДействия.ЕстьКолонкаНомерКиЗ Тогда
						ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиНомерКиЗ, ТекущийШтрихкод.SGTIN);
					КонецЕсли;
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.GTIN);
					
					Если ПараметрыДействия.ЕстьКолонкаШтрихкодBase64 Тогда
						ШтрихкодBase64 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "ШтрихкодBase64");
						ЗаполняемыеЗначения.Вставить("ШтрихкодBase64", ШтрихкодBase64);
					КонецЕсли;
					
					Если ПараметрыДействия.ЕстьКолонкаРезультатПроверкиКМ Тогда
						РезультатПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "РезультатПроверкиКМ");
						ЗаполняемыеЗначения.Вставить("РезультатПроверкиКМ", РезультатПроверкиКМ);
						Если ПараметрыДействия.ЕстьКолонкаКодСтатусаПроверкиКМ Тогда
							КодСтатусаПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "КодСтатусаПроверкиКМ");
							ЗаполняемыеЗначения.Вставить("КодСтатусаПроверкиКМ", КодСтатусаПроверкиКМ);
						КонецЕсли;
						Если ПараметрыДействия.ЕстьКолонкаПояснениеСтатусаПроверкиКМ Тогда
							ПояснениеСтатусаПроверкиКМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "ПояснениеСтатусаПроверкиКМ");
							ЗаполняемыеЗначения.Вставить("ПояснениеСтатусаПроверкиКМ", ПояснениеСтатусаПроверкиКМ);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиШтрихкод, ТекущийШтрихкод.Штрихкод);
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыДействия.ЕстьКолонкаКоличество Тогда
				Если ДанныеШтрихкода.ШтрихкодУпаковки И ПараметрыДействия.ПроверятьУникальностьУпаковокМДЛП Тогда
					// Количество маркированной продукции не может быть больше 1 потребительской упаковки.
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиКоличество, 1);
				Иначе
					ЗаполняемыеЗначения.Вставить(ПараметрыДействия.ИмяКолонкиКоличество, ТекущийШтрихкод.Количество);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(Отбор, ПараметрыДействия.ОтборСтрок);
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Отбор);
		
		Если Не ПараметрыДействия.ИзменятьКоличество Тогда
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаТабличнойЧасти = Неопределено;
				
				НазваниеТовара = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СерияНоменклатуры, ДанныеШтрихкода.Партия);
				Текст = НСтр("ru = 'В табличной части не найдена строка с товаром ""%1 (%2)""'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НазваниеТовара, Строка(ДанныеШтрихкода.ЕдиницаИзмерения));
				ОбщегоНазначения.СообщитьПользователю(Текст);
				
			Иначе
				СтрокаТабличнойЧасти = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполняемыеЗначения);
				
				ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыДействия.ДействияСДобавленнымиСтроками, КэшированныеЗначения);
				
			Иначе
				
				СтрокаТабличнойЧасти = НайденныеСтроки[0];
				
				Если ДанныеШтрихкода.ШтрихкодУпаковки И ПараметрыДействия.ПроверятьУникальностьУпаковокМДЛП Тогда
					// Количество маркированной продукции не может быть больше 1 потребительской упаковки.
					Текст = НСтр("ru = 'Упаковка с номером %1 может быть добавлена только один раз.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекущийШтрихкод.SGTIN);
					ОбщегоНазначения.СообщитьПользователю(Текст);
				Иначе
					
					Для Каждого КлючИЗначение Из ЗаполняемыеЗначения Цикл
						Если ПараметрыДействия.ЕстьКолонкаКоличество И КлючИЗначение.Ключ = ПараметрыДействия.ИмяКолонкиКоличество Тогда
							СтрокаТабличнойЧасти[КлючИЗначение.Ключ] = СтрокаТабличнойЧасти[КлючИЗначение.Ключ] + КлючИЗначение.Значение;
						ИначеЕсли Не ЗначениеЗаполнено(СтрокаТабличнойЧасти[КлючИЗначение.Ключ]) Тогда
							СтрокаТабличнойЧасти[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыДействия.ДействияСИзмененнымиСтроками, КэшированныеЗначения);
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДействия.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
КонецПроцедуры

// Обновляет данные ненайденных ранее штрихкодов, если данные по ним появились
//
Процедура ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	Модифицированность = Ложь;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	СтрокиДляОбработки = Новый Массив;
	ТолькоПоЗарегистрированным = (ПараметрыДействия.ЗарегистрированныеШтрихкоды.Количество() > 0);
	
	ТабличнаяЧасть = Объект[ПараметрыДействия.ИмяТабличнойЧасти];
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Штрихкод) Тогда
			Если ТолькоПоЗарегистрированным И ПараметрыДействия.ЗарегистрированныеШтрихкоды.Найти(СтрокаТабличнойЧасти.Штрихкод) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НеизвестныеШтрихкоды.Добавить(СтрокаТабличнойЧасти.Штрихкод);
			СтрокиДляОбработки.Добавить(СтрокаТабличнойЧасти);
			
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОбработанныхСтрок = 0;
	Если НеизвестныеШтрихкоды.Количество() Тогда
		
		ЗаполнитьДанныеПоШтрихкодамТоваров(НеизвестныеШтрихкоды, КэшированныеЗначения);
		
		Для каждого СтрокаТабличнойЧасти Из СтрокиДляОбработки Цикл
			
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[СтрокаТабличнойЧасти.Штрихкод];
			Если ДанныеШтрихкода.НеизвестныйШтрихкод Тогда
				ПараметрыДействия.НеизвестныеШтрихкоды.Добавить(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(СтрокаТабличнойЧасти.Штрихкод, 1));
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеШтрихкода);
				СтрокаТабличнойЧасти.Штрихкод = "";
				
				ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыДействия.ДействияСИзмененнымиСтроками, КэшированныеЗначения);
				КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("Модифицированность", Модифицированность);
	ПараметрыДействия.Вставить("КоличествоОбработанныхСтрок", КоличествоОбработанныхСтрок);
	
КонецПроцедуры

// Проверяет заполнение источников финансирования в списке товаров документа
//
Процедура ПроверитьЗаполнениеИсточникаФинансирования(Объект, НепроверяемыеРеквизиты, Отказ, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИсточникФинансирования)
	   И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсточникФинансирования, "ЭтоГруппа")
	   И ОбщегоНазначенияБольничнаяАптека.ЕстьРеквизитТабличнойЧастиОбъекта("ИсточникФинансирования", Объект.Метаданные(), ИмяТабличнойЧасти) Тогда
		НепроверяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + ".ИсточникФинансирования");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет источник финансирования в таблице товаров.
//
// Параметры:
//  Объект - ДокументОбъект - объект в котором заполняются источники финансирования.
//  НесколькоИсточниковФинансированияВОдномДокументе - Булево, Неопределено - если Неопределено, то значение будет
//            определено по складу объекта
//  ИмяТабличнойЧасти - Строка - имя табличной части в которой заполняются источники финансирования
//
Процедура ЗаполнитьИсточникФинансирования(Объект, НесколькоИсточниковФинансированияВОдномДокументе = Неопределено, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ИсточникФинансирования)
	 Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсточникФинансирования, "ЭтоГруппа") Тогда
		Возврат;
	КонецЕсли;
	
	Если НесколькоИсточниковФинансированияВОдномДокументе = Неопределено Тогда
		ИмяРеквизитаСклад = СкладыСервер.ИмяРеквизитаСкладОтправитель(Объект);
		НесколькоИсточниковФинансированияВОдномДокументе = Не СкладыСервер.ЭтоРозничныйСклад(Объект[ИмяРеквизитаСклад]);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СкладПолучатель") Тогда
			НесколькоИсточниковФинансированияВОдномДокументе = НесколькоИсточниковФинансированияВОдномДокументе
				И Не СкладыСервер.ЭтоРозничныйСклад(Объект.СкладПолучатель);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеТовара Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеТовара.ИсточникФинансирования)
		 Или Не НесколькоИсточниковФинансированияВОдномДокументе
		   И ДанныеТовара.ИсточникФинансирования <> Объект.ИсточникФинансирования Тогда
			ДанныеТовара.ИсточникФинансирования = Объект.ИсточникФинансирования;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет дубли строк в табличной части и выводит сообщения о наличии дублей.
//
// Параметры:
//  Объект - проверяемый объект
//  ИмяТабличнойЧасти - имя проверяемой табличной части объекта
//  КлючевыеРеквизиты - массив имен реквизитов, по которым определяется уникальность строки
//  Отказ - отказ продолжения операции
//
Процедура ПроверитьНаличиеДублейСтрок(Объект, ИмяТабличнойЧасти, КлючевыеРеквизиты, Отказ) Экспорт
	
	МетаданныеТабличнойЧасти = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
	
	ПредставлениеТабличнойЧасти = МетаданныеТабличнойЧасти.Синоним;
	
	ПредставлениеРеквизитов = "";
	ТекстПолейВыборки = "";
	ТекстСоединения = "";
	Для Каждого ИмяРеквизита Из КлючевыеРеквизиты Цикл
		ТекстПолейВыборки = ТекстПолейВыборки + "
		|	" + ИмяРеквизита + ",";
		ТекстСоединения = ТекстСоединения + "
		|	И ИсходнаяТаблица." + ИмяРеквизита + " = " + "ДублирующиесяСтроки." + ИмяРеквизита;
		ПредставлениеРеквизитов = ПредставлениеРеквизитов + """" + МетаданныеТабличнойЧасти.Реквизиты[ИмяРеквизита].Синоним + """, ";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПолейВыборки, 1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеРеквизитов, 2);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НомерСтроки,
	|	%1
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоСтрок,
	|	%1
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	%1
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки КАК ДублирующаяСтрока,
	|	ДублирующиесяСтроки.НомерСтроки КАК ИсходнаяСтрока
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО
	|			ИсходнаяТаблица.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки
	|			%2
	|";
	
	Запрос = Новый Запрос(СтрШаблон(ТекстЗапроса, ТекстПолейВыборки, ТекстСоединения));
	Запрос.УстановитьПараметр("ИсходнаяТаблица", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки," + ТекстПолейВыборки));
	
	Если КлючевыеРеквизиты.Количество() = 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Данные в строке %1 списка ""%2"" совпадают с данными в строке %3 по значению поля %4.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Данные в строке %1 списка ""%2"" совпадают с данными в строке %3 по сочетанию значений полей %4.'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Выборка.ДублирующаяСтрока,
			ПредставлениеТабличнойЧасти,
			Выборка.ИсходнаяСтрока,
			ПредставлениеРеквизитов);
			
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, Выборка.ДублирующаяСтрока, "НомерСтроки");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет пересчет цен и сумм в табличной части Товары из валюты в валюту
//
// Параметры:
//  Таблица                     - табличная часть, для которого необходимо осуществить пересчет
//  ЦенаВключаетНДС             - Булево - Истина, если цена включает НДС
//  ПараметрыТекущегоКурса      - курс и кратность валюты, из которой необходимо пересчитать цены
//  ПараметрыНовогоКурса        - курс и кратность валюты, в которую необходимо пересчитать цены
//  ИмяКолонкиКоличество        - 
//
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(Таблица,
												ЦенаВключаетНДС,
												ПараметрыТекущегоКурса,
												ПараметрыНовогоКурса,
												ИмяКолонкиКоличество = Неопределено) Экспорт
												
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму(), ИмяКолонкиКоличество);
	ПараметрыПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого ТекущаяСтрока Из Таблица Цикл
		
		ТекущаяСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.Цена, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
//  ПараметрыЗаполнения - Структура - Структура параметров заполнения
//    Обязательные поля:
//      "Дата" - Дата - Дата документа
//      "Валюта" - СправочникСсылка.Валюты - Валюта документа
//      "ВидЦены" - СправочникСсылка.ВидыЦен - вид цены по которому заполняются цены
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
//  ВыделенныеСтроки - Массив - Массив выделенных строк
//  СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
//  КэшированныеЗначения - Структура - Структура кэшированных значений
//
Процедура ЗаполнитьЦены(ПараметрыЗаполнения, ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ИменаКолонок = Новый Структура;
	ИменаКолонок.Вставить("НомерСтроки");
	ИменаКолонок.Вставить("Номенклатура");
	ИменаКолонок.Вставить("СерияНоменклатуры");
	ИменаКолонок.Вставить("Партия");
	ИменаКолонок.Вставить("ЕдиницаИзмерения");
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		Таблица = ТабличнаяЧасть.Скопировать(ВыделенныеСтроки, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИменаКолонок));
	Иначе
		Таблица = ТабличнаяЧасть.Выгрузить(ВыделенныеСтроки, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИменаКолонок));
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки        КАК НомерСтроки,
	|	Таблица.Номенклатура       КАК Номенклатура,
	|	Таблица.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	Таблица.Партия             КАК Партия,
	|	Таблица.ЕдиницаИзмерения   КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.ЕдиницаИзмерения <> ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, Товары.ЕдиницаИзмерения)
	|			ТОГДА  КоэффициентыЕдиницИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|	* ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|	/ ВЫБОР
	|		КОГДА Товары.ЕдиницаИзмерения <> ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, Товары.ЕдиницаИзмерения)
	|			ТОГДА  КоэффициентыУпаковокЦены.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|				ВидЦены = &ВидЦены
	|				И (Номенклатура, СерияНоменклатуры, Партия) В
	|				(ВЫБРАТЬ
	|					Номенклатура, СерияНоменклатуры, Партия
	|				ИЗ
	|					Товары)
	|		) КАК ЦеныНоменклатуры
	|	ПО
	|		Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|		И Товары.СерияНоменклатуры = ЦеныНоменклатуры.СерияНоменклатуры
	|		И Товары.Партия = ЦеныНоменклатуры.Партия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницИзмерения
	|	ПО
	|		Товары.Номенклатура = КоэффициентыЕдиницИзмерения.Номенклатура
	|		И Товары.ЕдиницаИзмерения = КоэффициентыЕдиницИзмерения.ЕдиницаИзмерения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыУпаковокЦены
	|	ПО
	|		ЦеныНоменклатуры.Номенклатура = КоэффициентыУпаковокЦены.Номенклатура
	|		И ЦеныНоменклатуры.Упаковка = КоэффициентыУпаковокЦены.ЕдиницаИзмерения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|	ПО
	|		ЦеныНоменклатуры.Валюта = КурсыВалютыЦены.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	ПО
	|		ИСТИНА
	|");
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Дата", ПараметрыЗаполнения.Дата);
	Запрос.УстановитьПараметр("ВидЦены", ПараметрыЗаполнения.ВидЦены);
	Запрос.УстановитьПараметр("Валюта", ПараметрыЗаполнения.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Цена = Выборка.Цена;
		Если СтруктураДействий <> Неопределено Тогда
			ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные комиссии по постоянное действующей комиссии
//
// Параметры:
//  ДействующаяКомиссия - СправочникСсылка.ПостоянноДействующиеКомиссии
//  Объект - 
//  СоставКомиссии - 
//
Процедура ЗаполнитьДанныеКомиссииИзПостоянноДействующейКомиссии(ДействующаяКомиссия, Объект, СоставКомиссии) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДатаПриказа КАК ДатаПриказа,
	|	НомерПриказа КАК НомерПриказа,
	|	СоставКомиссии.(
	|		ЧленКомиссии КАК ЧленКомиссии,
	|		Должность КАК Должность,
	|		Председатель КАК Председатель)
	|ИЗ
	|	Справочник.ПостоянноДействующиеКомиссии
	|ГДЕ
	|	Ссылка = &Комиссия
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставКомиссии.Председатель УБЫВ,
	|	СоставКомиссии.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("Комиссия", ДействующаяКомиссия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Приказ = Новый Структура("НомерПриказа, ДатаПриказа");
	ЗаполнитьЗначенияСвойств(Приказ, Выборка, "НомерПриказа, ДатаПриказа");
	ЗаполнитьЗначенияСвойств(Объект, Приказ);
	
	СоставКомиссии.Загрузить(Выборка.СоставКомиссии.Выгрузить());
	
КонецПроцедуры

// Возвращает параметры для округления
//
// Возвращаемое значение:
//  Структура:
//    *ТоварВШапке - Булево - значение по умолчанию Ложь.
//    *ИмяТабличнойЧасти - Строка - значение по умолчанию "Товары".
//    *Суффиксы - Массив - значение по умолчанию "" - если в ТЧ два реквизита "Количество", то второй назван с суффиксом.
//                        если суффикс передан, то проверяются оба реквизита
//    *УсловиеОтбораСтрокДляОкругления - Строка - Условие выбора строк для проверки округления.
//                        в качестве имени таблицы нужно использовать имя переданное в ИмяТабличнойЧасти.
//
Функция ПараметрыПроверкиЗаполненияКоличества() Экспорт
	
	ПараметрыОкругления = Новый Структура;
	ПараметрыОкругления.Вставить("ТоварВШапке"                    , Ложь);
	ПараметрыОкругления.Вставить("ИмяТабличнойЧасти"              , "Товары");
	ПараметрыОкругления.Вставить("Суффиксы"                       , Новый Массив);
	ПараметрыОкругления.Вставить("УсловиеОтбораСтрокДляОкругления", "");
	
	Возврат ПараметрыОкругления;
	
КонецФункции

// Проверки заполнения реквизита Количество и КоличествоУпаковок в документах.
//
// Параметры:
//  Объект                 -ДокументОбъект -  проверяемый документ.
//  НепроверяемыеРеквизиты - Массив        - непроверяемых реквизитов.
//  Отказ                  - Булево        - отказ продолжения операции.
//  ПараметрыПроверки      - Структура     - см. ОбработкаТабличнойЧастиСервер.ПараметрыПроверкиЗаполненияКоличества().
//
Процедура ПроверитьЗаполнениеКоличества(Объект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	Суффиксы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПроверки.Суффиксы);
	Если Суффиксы.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПараметрыПроверки.ИмяТабличнойЧасти;
	МетаданныеОбъекта = объект.Метаданные();
	
#Область ПроверкаКоличества
	
	Если ПараметрыПроверки.ТоварВШапке Тогда
		
		Для Каждого Суффикс Из Суффиксы Цикл
			
			СуффиксКоличествоУпаковок = СуффиксРеквизита("КоличествоВЕдиницахИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
			НепроверяемыеРеквизиты.Добавить("Количество" + Суффикс);
			НепроверяемыеРеквизиты.Добавить("КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок);
			
			ЗаполнятьРеквизитОбязательно = (
				МетаданныеОбъекта.Реквизиты["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок].ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			
			Если Объект["Количество" + Суффикс] = 0 И Объект["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок] <> 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения'"),
						Объект,
						"КоличествоВЕдиницахИзмерения" + Суффикс,
						,
						Отказ);
				
			ИначеЕсли ЗаполнятьРеквизитОбязательно И Объект["Количество" + Суффикс] = 0 И Объект["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок] = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнено поле ""%ПредставлениеПоляКоличество%""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеПоляКоличество%", МетаданныеОбъекта.Реквизиты["Количество" + Суффикс].Синоним);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
						Объект,
						"КоличествоВЕдиницахИзмерения" + Суффикс,
						,
						Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОписаниеПроверяемойТаблицы = МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти];
		Для Каждого Суффикс Из Суффиксы Цикл
			
			СуффиксКоличествоУпаковок = СуффиксРеквизита("КоличествоВЕдиницахИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
			
			НепроверяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + ".Количество" + Суффикс);
			НепроверяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + ".КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок);
			
			ПредставлениеТЧ = ОписаниеПроверяемойТаблицы.Синоним;
			ПредставлениеКоличествоУпаковок = ОписаниеПроверяемойТаблицы.Реквизиты["Количество" + Суффикс].Синоним;
			ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
			ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеКолонки%", ПредставлениеКоличествоУпаковок);
			ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
			ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			ЗаполнятьРеквизитОбязательно = (
				ОписаниеПроверяемойТаблицы.Реквизиты["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок].ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
				
				Если СтрокаТабличнойЧасти["Количество" + Суффикс] = 0 И СтрокаТабличнойЧасти["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок] <> 0 Тогда
					
					ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТабличнойЧасти.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
					
				ИначеЕсли ЗаполнятьРеквизитОбязательно И СтрокаТабличнойЧасти["Количество" + Суффикс] = 0 И СтрокаТабличнойЧасти["КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок] = 0 Тогда
					
					ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТабличнойЧасти.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область ПроверкаОкругления
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|";
	
	Для Каждого Суффикс Из Суффиксы Цикл
		СуффиксНоменклатуры = СуффиксРеквизита("Номенклатура", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
		СуффиксУпаковки = СуффиксРеквизита("ЕдиницаИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
		СуффиксКоличествоУпаковок = СуффиксРеквизита("КоличествоВЕдиницахИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура" + СуффиксНоменклатуры + " КАК Справочник.Номенклатура) КАК Номенклатура" + Суффикс + ",
		|	ВЫРАЗИТЬ(ТаблицаТовары.ЕдиницаИзмерения" + СуффиксУпаковки + " КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения" + Суффикс + ",
		|	ТаблицаТовары.Коэффициент" + СуффиксУпаковки + " КАК Коэффициент" + Суффикс + ",
		|	ТаблицаТовары.КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок + "  КАК КоличествоУпаковок" + Суффикс + ",
		|	ТаблицаТовары.Количество" + Суффикс + "  КАК Количество" + Суффикс + ",";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТовары.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&УсловиеОтбораСтрокДляОкругления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0     КАК НомерСтроки,
	|	""""  КАК Суффикс,
	|	Неопределено КАК ЕдиницаХранения,
	|	Неопределено КАК ЕдиницаИзмерения,
	|	0     КАК Коэффициент,
	|	ЛОЖЬ  КАК НужноОкруглять,
	|	0     КАК КоличествоВДокументе,
	|	0     КАК Количество,
	|	0     КАК КоличествоОкругленное
	|ПОМЕСТИТЬ ДанныеДляПроверки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ЛОЖЬ
	|";
	
	Для Каждого Суффикс Из Суффиксы Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки                                   КАК НомерСтроки,
		|	""" + Суффикс + """                                         КАК Суффикс,
		|	ТаблицаТовары.Номенклатура" + Суффикс + ".ЕдиницаИзмерения  КАК ЕдиницаХранения,
		|	ТаблицаТовары.ЕдиницаИзмерения" + Суффикс + "               КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Коэффициент" + Суффикс + "                    КАК Коэффициент,
		|	ТаблицаТовары.ЕдиницаИзмерения" + Суффикс + ".ТипЕдиницы В (&МерныеТипы)
		|	                                                            КАК НужноОкруглять,
		|	ТаблицаТовары.Количество" + Суффикс + "                     КАК КоличествоВДокументе,
		|	ВЫРАЗИТЬ(ТаблицаТовары.КоличествоУпаковок" + Суффикс + " * ТаблицаТовары.Коэффициент" + Суффикс + " КАК ЧИСЛО(15,3))
		|	                                                            КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество" + Суффикс + " КАК ЧИСЛО(15, 0))
		|	                                                            КАК КоличествоОкругленное
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Номенклатура" + Суффикс + ".ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.КоличествоШтук)
		|";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТовары.Суффикс                      КАК Суффикс,
	|	ТаблицаТовары.ЕдиницаХранения              КАК ЕдиницаХранения,
	|	ТаблицаТовары.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.НужноОкруглять               КАК НужноОкруглять,
	|	ТаблицаТовары.КоличествоВДокументе         КАК КоличествоВДокументе,
	|	ТаблицаТовары.Количество                   КАК Количество,
	|	ТаблицаТовары.КоличествоОкругленное        КАК КоличествоОкругленное,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТаблицаТовары.НужноОкруглять
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаТовары.Количество - ТаблицаТовары.КоличествоОкругленное > 0
	|							ТОГДА ТаблицаТовары.Количество - ТаблицаТовары.КоличествоОкругленное
	|						ИНАЧЕ ТаблицаТовары.КоличествоОкругленное - ТаблицаТовары.Количество
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаТовары.КоличествоВДокументе - ТаблицаТовары.Количество > 0
	|						ТОГДА ТаблицаТовары.КоличествоВДокументе - ТаблицаТовары.Количество
	|					ИНАЧЕ ТаблицаТовары.Количество - ТаблицаТовары.КоличествоВДокументе
	|				КОНЕЦ
	|		КОНЕЦ / ТаблицаТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК КоличествоОтклонение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТаблицаТовары.НужноОкруглять
	|				ТОГДА &ДопустимыйПроцентОтклонения * ТаблицаТовары.КоличествоОкругленное / ТаблицаТовары.Коэффициент / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоМаксимальнаяПогрешность
	|ИЗ
	|	ДанныеДляПроверки КАК ТаблицаТовары
	|ГДЕ
	|	(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ТаблицаТовары.НужноОкруглять
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаТовары.Количество - ТаблицаТовары.КоличествоОкругленное > 0
	|									ТОГДА ТаблицаТовары.Количество - ТаблицаТовары.КоличествоОкругленное
	|								ИНАЧЕ ТаблицаТовары.КоличествоОкругленное - ТаблицаТовары.Количество
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаТовары.КоличествоВДокументе - ТаблицаТовары.Количество > 0
	|								ТОГДА ТаблицаТовары.КоличествоВДокументе - ТаблицаТовары.Количество
	|							ИНАЧЕ ТаблицаТовары.Количество - ТаблицаТовары.КоличествоВДокументе
	|						КОНЕЦ
	|				КОНЕЦ / ТаблицаТовары.Коэффициент КАК ЧИСЛО(15, 3))) > (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ТаблицаТовары.НужноОкруглять
	|						ТОГДА &ДопустимыйПроцентОтклонения * ТаблицаТовары.КоличествоОкругленное / ТаблицаТовары.Коэффициент / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 3)))
	|	
	|";
	
	Если ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", 
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления, ИмяТабличнойЧасти + ".", "ТаблицаТовары."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", "ИСТИНА");
	КонецЕсли;
	
	ДопустимыйПроцентОтклонения = Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДопустимыйПроцентОтклонения", ДопустимыйПроцентОтклонения);
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Если ПараметрыПроверки.ТоварВШапке Тогда
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
		Для Каждого Суффикс Из Суффиксы Цикл
			СуффиксНоменклатуры = СуффиксРеквизита("Номенклатура", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
			СуффиксУпаковки = СуффиксРеквизита("ЕдиницаИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
			СуффиксКоличествоУпаковок = СуффиксРеквизита("КоличествоВЕдиницахИзмерения", Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
			
			Если Таблица.Колонки.Найти("Номенклатура" + СуффиксНоменклатуры) = Неопределено Тогда
				Таблица.Колонки.Добавить("Номенклатура" + СуффиксНоменклатуры, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Если Таблица.Колонки.Найти("ЕдиницаИзмерения" + СуффиксУпаковки) = Неопределено Тогда
				Таблица.Колонки.Добавить("ЕдиницаИзмерения" + СуффиксУпаковки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
				Таблица.Колонки.Добавить("Коэффициент" + СуффиксУпаковки, ОбщегоНазначения.ОписаниеТипаЧисло(20, 9, ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
			Если Таблица.Колонки.Найти("КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок) = Неопределено Тогда
				Таблица.Колонки.Добавить("КоличествоВЕдиницахИзмерения" + СуффиксКоличествоУпаковок, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
			КонецЕсли;
			
			Таблица.Колонки.Добавить("Количество" + Суффикс, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Объект);
		
		Запрос.УстановитьПараметр("ТаблицаТовары", Таблица);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыПроверки.ИмяТабличнойЧасти].Выгрузить());
	КонецЕсли;
	
	Если ПараметрыПроверки.ТоварВШапке Тогда
		ШаблонОшибкаПересчета = НСтр("ru = 'Количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с погрешностью - %КоличествоОтклонение% %Упаковка%, что недопустимо, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		Если ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения%, при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе
			ШаблонОшибкаОкругления = НСтр("ru = 'Количество в ""%Упаковка%"" не кратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
	Иначе
		ШаблонОшибкаПересчета = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с отклонением - %КоличествоОтклонение% %Упаковка%, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		Если ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения% в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"", при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе
			ШаблонОшибкаОкругления = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" не кратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
		ШаблонОшибкаОкругления = СтрЗаменить(ШаблонОшибкаОкругления, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НужноОкруглять Тогда
			ТекстСообщения = ШаблонОшибкаОкругления;
		Иначе
			ТекстСообщения = ШаблонОшибкаПересчета;
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БазоваяЕдиницаИзмерения%", Выборка.ЕдиницаХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтклонение%", Выборка.КоличествоОтклонение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.ЕдиницаИзмерения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоМаксимальнаяПогрешность%", Выборка.КоличествоМаксимальнаяПогрешность);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОкругленное%", Выборка.КоличествоОкругленное);
		СуффиксКоличества = СуффиксРеквизита("КоличествоВЕдиницахИзмерения", Выборка.Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
		Если ПараметрыПроверки.ТоварВШапке Тогда
			Поле = "КоличествоВЕдиницахИзмерения" + СуффиксКоличества;
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, Выборка.НомерСтроки, "КоличествоВЕдиницахИзмерения" + СуффиксКоличества);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
	КонецЦикла;
	
#КонецОбласти
	
КонецПроцедуры

// Округляет количество товара до целых штук при указании количества в документе в мерных единицах измерения
//
// Параметры:
//  Объект              - ДокументОбъект       - заполняемый документ.
//  РежимЗаписи         - РежимЗаписиДокумента
//  ПараметрыОкругления - Структура            - см. ОбработкаТабличнойЧастиСервер.ПараметрыПроверкиЗаполненияКоличества().
//
Процедура ОкруглитьКоличествоШтучныхТоваров(Объект, РежимЗаписи = Неопределено, ПараметрыОкругления = Неопределено) Экспорт
	
	Если РежимЗаписи <> Неопределено
	   И РежимЗаписи <> РежимЗаписиДокумента.Проведение
	   И ТипЗнч(РежимЗаписи) <> Тип("РежимЗаписиДокумента")
	   И Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОкругления = Неопределено Тогда
		ПараметрыОкругления = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Метаданные();
	Суффиксы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОкругления.Суффиксы);
	Если Суффиксы.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	Для Каждого Суффикс Из Суффиксы Цикл
		СуффиксНоменклатуры = СуффиксРеквизита("Номенклатура", Суффикс, МетаданныеДокумента, ПараметрыОкругления);
		СуффиксУпаковки = СуффиксРеквизита("ЕдиницаИзмерения", Суффикс, МетаданныеДокумента, ПараметрыОкругления);
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаТовары.Номенклатура" + СуффиксНоменклатуры + " КАК Номенклатура" + Суффикс + ",
		|	ТаблицаТовары.ЕдиницаИзмерения" + СуффиксУпаковки + " КАК ЕдиницаИзмерения" + Суффикс + ",
		|	ТаблицаТовары.Количество" + Суффикс + "  КАК Количество" + Суффикс + ",
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество" + Суффикс + " КАК ЧИСЛО(15, 0)) КАК Количество" + Суффикс + "Округленное,"
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&УсловиеОтбораСтрокДляОкругления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0     КАК НомерСтроки,
	|	""""  КАК Суффикс,
	|	0     КАК КоличествоОкругленное
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ЛОЖЬ
	|";
	
	Для Каждого Суффикс Из Суффиксы Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки  КАК НомерСтроки,
		|	""" + Суффикс + """ КАК Суффикс,
		|	ТаблицаТовары.Количество" + Суффикс + "Округленное КАК КоличествоОкругленное
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Количество" + Суффикс + " <> ТаблицаТовары.Количество" + Суффикс + "Округленное
		|	И ТаблицаТовары.Номенклатура" + Суффикс + ".ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.КоличествоШтук)
		|	И ТаблицаТовары.ЕдиницаИзмерения" + Суффикс + ".ТипЕдиницы В (&МерныеТипы)
		|";
	КонецЦикла;
	
	Если ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления <> "" Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&УсловиеОтбораСтрокДляОкругления", 
			СтрЗаменить(ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления, ПараметрыОкругления.ИмяТабличнойЧасти + ".", "ТаблицаТовары."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", "ИСТИНА");
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ПараметрыОкругления.ТоварВШапке Тогда
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
		Для Каждого Суффикс Из Суффиксы Цикл
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Номенклатура" + Суффикс, МетаданныеДокумента) Тогда
				Таблица.Колонки.Добавить("Номенклатура" + Суффикс, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ИначеЕсли Таблица.Колонки.Найти("Номенклатура") = Неопределено Тогда
				Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЕдиницаИзмерения" + Суффикс, МетаданныеДокумента) Тогда
				Таблица.Колонки.Добавить("ЕдиницаИзмерения" + Суффикс, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
			ИначеЕсли Таблица.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
				Таблица.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
			КонецЕсли;
			
			Таблица.Колонки.Добавить("Количество" + Суффикс, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Объект);
		
		Запрос.УстановитьПараметр("ТаблицаТовары", Таблица);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыОкругления.ИмяТабличнойЧасти].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПараметрыОкругления.ТоварВШапке Тогда
			Объект["Количество" + Выборка.Суффикс] = Выборка.КоличествоОкругленное;
		Иначе
			Объект[ПараметрыОкругления.ИмяТабличнойЧасти][Выборка.НомерСтроки - 1]["Количество" + Суффикс] = Выборка.КоличествоОкругленное;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условное оформление
#Область УсловноеОформление

// Заполняет условное оформление формы для серий номенклатуры
//
Процедура УстановитьОформлениеСерийНоменклатуры(Форма,
                                                ИмяПоляСерии = "ТоварыСерияНоменклатуры",
                                                ПутьКФлагуВестиУчетПоСериям = "Объект.Товары.СтатусУказанияСерий") Экспорт
	
	СтатусыСерий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияСерий();
	УстановитьОформлениеПолеНеИспользуется(Форма, ИмяПоляСерии, ПутьКФлагуВестиУчетПоСериям, СтатусыСерий.СтатусСерииНеУказываются, НСтр("ru='<серии не указываются>'"));
	
КонецПроцедуры

// Заполняет условное оформление формы для партий номенклатуры
//
Процедура УстановитьОформлениеПартий(Форма,
                                     ИмяПоляПартия = "ТоварыПартия",
                                     ПутьКФлагуВестиУчетПоПартиям = "Объект.Товары.СтатусУказанияПартий") Экспорт
	
	СтатусыПартий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияПартий();
	УстановитьОформлениеПолеНеИспользуется(Форма, ИмяПоляПартия, ПутьКФлагуВестиУчетПоПартиям, СтатусыПартий.СтатусПартииНеУказываются, НСтр("ru='<партии не указываются>'"));
	
КонецПроцедуры

// Заполняет условное оформление формы для номеров ГТД
//
Процедура УстановитьОформлениеНомераГТД(Форма,
                                        ИмяПоляНомерГТД = "ТоварыНомерГТД",
                                        ПутьКФлагуВестиУчетПоГТД = "Объект.Товары.ВестиУчетПоГТД") Экспорт
	
	УстановитьОформлениеПолеНеИспользуется(Форма, ИмяПоляНомерГТД, ПутьКФлагуВестиУчетПоГТД, Ложь, НСтр("ru='<ГТД не используются>'"));
	
КонецПроцедуры

// Заполняет условное оформление формы для суммы с НДС
//
Процедура УстановитьОформлениеЦенаВключаетНДС(Форма, ИмяПоляСуммаСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляСуммаСНДС].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Заполняет условное оформление формы для суммы НДС
//
Процедура УстановитьОформлениеСуммаНДС(Форма, ИмяПоляСуммаНДС = "ТоварыСуммаНДС", ПутьКПолюСтавкаНДС = "Объект.Товары.СтавкаНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляСуммаНДС].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтавкаНДС);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Ставки = Новый СписокЗначений;
	Ставки.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Ставки.Добавить(Перечисления.СтавкиНДС.НДС0);
	ОтборЭлемента.ПравоеЗначение = Ставки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС
// в зависимости от того, облагается ли продажа НДС или ЕНВД
//
// Параметры:
//  Форма - Форма - Содержит данную форму
//  ИмяПоляСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                              если оно отличается от "ТоварыСтавкаНДС"
//  ИмяПоляСуммыНДС  - Строка - Наименование элемента формы, содержащего сумму НДС,
//                              если оно отличается от "ТоварыСуммаНДС"
//  ИмяПоляСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                              если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьОформлениеСуммНДС(Форма,
	                                  ИмяПоляСтавкиНДС = "ТоварыСтавкаНДС",
	                                  ИмяПоляСуммыНДС  = "ТоварыСуммаНДС",
	                                  ИмяПоляСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляСтавкиНДС].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляСуммыНДС].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляСуммыСНДС].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Заполняет условное оформление формы для забракованных серий номенклатуры
//
Процедура УстановитьОформлениеЗабракованнойСерии(Форма, ИмяПоляСерия = "ТоварыСерияНоменклатуры", ПутьКФлагуЗабраковки = "Объект.Товары.СерияЗабракована") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляСерия].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКФлагуЗабраковки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерияЗабракованаЦветТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.СерияЗабракованаШрифт);
	
КонецПроцедуры

// Заполняет условное оформление формы для источников финансирования
//
Процедура УстановитьОформлениеИсточниковФинансирования(Форма, ИмяПоляИсточникФинансирования = "ТоварыИсточникФинансирования", ПутьКПолюИсточникФинансирования = "Объект.ИсточникФинансирования") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляИсточникФинансирования].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюИсточникФинансирования);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Заполняет условное оформление формы для поля списка Дата
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ИмяСписка - Строка - имя динамического списка.
//  ИмяПоляДата - Строка - имя элемента формы "Дата".
//
Процедура УстановитьОформлениеПоляДата(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(Форма, ИмяСписка + ".Дата", ИмяПоляДата);
	
КонецПроцедуры

#КонецОбласти // УсловноеОформление

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбмена

// Копирует выделенные строки таблицы товаров в буфер обмена
//
Процедура СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, ТабличнаяЧасть, ВыделенныеСтроки) Экспорт
	
	Товары = ПустаяТаблицаДанныхБуфераОбмена();
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТекущаяСтрока);
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПредставлениеОбъекта = Объект.ИмяФормы;
	ИначеЕсли Объект.Свойство("Ссылка") Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеОбъекта = СтрЗаменить(НСтр("ru='%1 (новый)'"), "%1", Объект.Ссылка.Метаданные().Синоним);
		Иначе
			ПредставлениеОбъекта = Строка(Объект.Ссылка);
		КонецЕсли;
	Иначе
		ПредставлениеОбъекта = Строка(Объект);
	КонецЕсли;
	
	ПредставлениеТоваров = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';%1 строка;;%1 строки;%1 строк;%1 строки'"), Товары.Количество());
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1: %2", ПредставлениеОбъекта, ПредставлениеТоваров);
	
	БуферОбмена.СкопироватьДанные(ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена(), Товары, Представление);
	
КонецПроцедуры

// Возвращает последние скопированные в буфер обмена строки таблицы товаров
//
Функция ПолучитьТекущиеТоварыИзБуфераОбмена(Отбор = Неопределено) Экспорт
	
	Товары = БуферОбмена.ПолучитьТекущиеДанные(ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена());
	Товары = ПолучитьТоварыСУчетомОтбора(Товары, Отбор);
	Возврат Товары;
	
КонецФункции

// Возвращает выбранные в буфере обмена строки таблицы товаров
//
Функция ПолучитьВыбранныеТоварыИзБуфераОбмена(ВыбранныеТовары, Отбор = Неопределено) Экспорт
	
	ИдентификаторБуфера = ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена();
	Товары = ПустаяТаблицаДанныхБуфераОбмена();
	Для Каждого ВыбранноеЗначение Из ВыбранныеТовары Цикл
		ДанныеБуфера = БуферОбмена.ПолучитьДанные(ИдентификаторБуфера, ВыбранноеЗначение);
		Если ДанныеБуфера <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеБуфера, Товары);
		КонецЕсли;
	КонецЦикла;
	
	Товары = ПолучитьТоварыСУчетомОтбора(Товары, Отбор);
	Возврат Товары;
	
КонецФункции

// Вставляет в табличную часть товаров выбранные в буфере обмена строки таблицы товаров
//
Функция ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, ДействияПриДобавлении = Неопределено, Отбор = Неопределено) Экспорт
	
	Если ВыбранныеТовары = Неопределено Тогда
		Товары = ПолучитьТекущиеТоварыИзБуфераОбмена(Отбор);
	Иначе
		Товары = ПолучитьВыбранныеТоварыИзБуфераОбмена(ВыбранныеТовары, Отбор);
	КонецЕсли;
	
	Если Товары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если ДействияПриДобавлении <> Неопределено Тогда
			ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, ДействияПриДобавлении, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Очищает буфер обмена товарами
//
Процедура ОчиститьБуферОбмена() Экспорт
	
	БуферОбмена.Очистить(ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена());
	
КонецПроцедуры

// Определяет отсутствие данных в буфере обмена товарами
//
Функция БуферОбменаПустой() Экспорт
	
	Возврат БуферОбмена.Пустой(ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена());
	
КонецФункции 

Функция ПустаяТаблицаДанныхБуфераОбмена()
	
	БуферОбменаТоварами = Обработки.БуферОбменаТоваров.Создать();
	Возврат БуферОбменаТоварами.Товары.Выгрузить();
	
КонецФункции

Функция ПолучитьТоварыСУчетомОтбора(Знач Товары, Отбор)
	
	Если Отбор = Неопределено Или Не ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановленОтборКомпоновкиДанных(Отбор) Тогда
		Возврат Товары;
	КонецЕсли;
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "Источник";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.ИмяОбъекта = "Товары";
	НаборДанных.Имя = "Товары";
	
	Для Каждого Колонка Из Товары.Колонки Цикл
		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Колонка.Имя;
		ПолеНабора.ПутьКДанным = Колонка.Имя;
		ПолеНабора.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДополнитьОтборКомпоновкиДанных(КомпоновщикНастроек.Настройки.Отбор, Отбор);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	
	Для Каждого ДоступноеПоле Из Группировка.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ПолеВыбора = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = ДоступноеПоле.Поле;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, Новый Структура("Товары", Товары));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат ПроцессорВывода.ЗакончитьВывод();
	
КонецФункции

#КонецОбласти // БуферОбмена

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполнения

Процедура ПроверитьКорректностьСерииНоменклатурыУпаковкиПартии(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу())
	 Или СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу())
	 Или СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу()) Тогда
		РезультатПроверки = ПроверитьПринадлежностьСерииНоменклатурыУпаковкиПартииВладельцу(ТекущаяСтрока, СтруктураДействий);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатПроверки);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьЕдиницуИзмеренияПоОтбору()) Тогда
		
		СписокЕдиницПоОтбору = ОтборНоменклатуры.ЕдиницыИзмеренияПоОтбору(ТекущаяСтрока);
		Если СписокЕдиницПоОтбору.Найти(ТекущаяСтрока.ЕдиницаИзмерения) = Неопределено Тогда
			ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмерения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ВариантЗаполнения;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), ВариантЗаполнения)
	   И Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		ЕдиницаИзмерения = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ТекущаяСтрока.Номенклатура, ВариантЗаполнения);
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		КэшированныеЗначения.ЕдиницыИзмерения.Вставить(ТекущаяСтрока.Номенклатура, ЕдиницаИзмерения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмеренияПоОтбору(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору()) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ОтборНоменклатуры.ЕдиницаИзмеренияПоОтбору(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыУчетаНоменклатуры;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры) Тогда
		
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатурыПриИзмененииРеквизитовВСтроке(ТекущаяСтрока, ПараметрыУчетаНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Справочники.Номенклатура.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьЗабраковкуСерий(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗабраковкуСерий()) Тогда
		ТекущаяСтрока.СерияЗабракована = Справочники.СерииНоменклатуры.СерияЗабракована(ТекущаяСтрока.СерияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП()) Тогда
		ТекущаяСтрока.СерияПромаркированаДляЦелейМДЛП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.СерияНоменклатуры, "СерияПромаркированаДляЦелейМДЛП");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоэффициент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициент()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
			ТекущаяСтрока.Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ЕдиницаИзмерения);
		Иначе
			ТекущаяСтрока.Коэффициент = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоэффициентЕдиницыОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа()) Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа) Тогда
			
			Коэффициент = ОтборНоменклатуры.КоэффициентЕдиницыЗаказа(
				ТекущаяСтрока.НоменклатураЗаказа,
				ТекущаяСтрока.ЕдиницаИзмеренияЗаказа,
				ТекущаяСтрока.Номенклатура);
			
			Если Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не удалось определить коэффициент единицы заказа.'"));
			КонецЕсли;
			
		Иначе
			Коэффициент = 0;
		КонецЕсли;
		
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = Коэффициент;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем НалогообложениеНДС;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСтавкуНДС(), НалогообложениеНДС) Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "СтавкаНДС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуЗакупки(), ПараметрыДействия) Тогда
		
		Цена = ЗапасыСервер.ПолучитьЦенуПоследнейЗакупки(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.ЕдиницаИзмерения,
			ПараметрыДействия.Дата,
			ПараметрыДействия.Документ,
			ПараметрыДействия.Склад,
			ПараметрыДействия.Контрагент,
			ПараметрыДействия.Валюта);
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если Не СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуПродажи(), ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметраОтбораЦены = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(ПараметраОтбораЦены, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ПараметраОтбораЦены, ПараметрыДействия);
	
	ИмяКолонкиЦена = ?(ПараметрыДействия.Свойство("ИмяКолонкиЦена"), ПараметрыДействия.ИмяКолонкиЦена, "Цена");
	Если ЗначениеЗаполнено(ПараметраОтбораЦены.ВидЦены) Тогда
		Если Не ЗначениеЗаполнено(ПараметраОтбораЦены.Дата) Тогда
			ПараметраОтбораЦены.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока[ИмяКолонкиЦена] = ПолучитьЦенуПоОтбору(ПараметраОтбораЦены);
	Иначе
		ТекущаяСтрока[ИмяКолонкиЦена] = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗарегистрированнуюЦенуПроизводителя(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), ПараметрыДействия) Тогда
		
		Цена = РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП.ЗарегистрированнаяЦенаПроизводителя(
			ТекущаяСтрока.Номенклатура,
			ПараметрыДействия.Дата,
			ПараметрыДействия.Валюта);
			
		Если Цена <> 0 Тогда
			Упаковка = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ТекущаяСтрока.Номенклатура, НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
			Если Упаковка <> ТекущаяСтрока.ЕдиницаИзмерения Тогда
				КоэффициентСтаройЕдиницы = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекущаяСтрока.Номенклатура, Упаковка);
				КоэффициентНовойЕдиницы = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ЕдиницаИзмерения);
				
				Цена = Цена * КоэффициентНовойЕдиницы / КоэффициентСтаройЕдиницы;
			КонецЕсли;
		КонецЕсли;
			
		ТекущаяСтрока.ЗарегистрированнаяЦенаПроизводителя = Цена;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика()) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура      КАК Номенклатура,
		|	НоменклатураПоставщиков.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА НоменклатураПоставщиков.Номенклатура <> &Номенклатура
		|			ТОГДА ИСТИНА
		|		КОГДА НоменклатураПоставщиков.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) И НоменклатураПоставщиков.ЕдиницаИзмерения <> &ЕдиницаИзмерения
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                     КАК НеобходимоПерезаполнить
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика
		|");
		
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура"          , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения"      , ТекущаяСтрока.ЕдиницаИзмерения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) И Выборка.НеобходимоПерезаполнить Тогда
				
				ТекущаяСтрока.Номенклатура = Выборка.Номенклатура;
				Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
					ТекущаяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
					Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу()) Тогда
						СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), Выборка.ЕдиницаИзмерения);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Контрагент;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Контрагент) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	НоменклатураПоставщиков.Номенклатура      КАК Номенклатура,
			|	НоменклатураПоставщиков.ЕдиницаИзмерения  КАК ЕдиницаИзмерения
			|ИЗ
			|	Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
			|	ВЫБОР
			|		КОГДА НоменклатураПоставщиков.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьУпаковка
			|ИЗ
			|	Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Контрагент
			|	И НоменклатураПоставщиков.Номенклатура = &Номенклатура
			|	И (НоменклатураПоставщиков.ЕдиницаИзмерения = &ЕдиницаИзмерения ИЛИ НоменклатураПоставщиков.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
			|	И (НЕ НоменклатураПоставщиков.ЭтоГруппа)
			|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕстьУпаковка УБЫВ
			|");
			
			Запрос.УстановитьПараметр("Контрагент"            , Контрагент);
			Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
			Запрос.УстановитьПараметр("Номенклатура"          , ТекущаяСтрока.Номенклатура);
			Запрос.УстановитьПараметр("ЕдиницаИзмерения"      , ТекущаяСтрока.ЕдиницаИзмерения);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Выборка1 = РезультатЗапроса[0].Выбрать();
			Выборка2 = РезультатЗапроса[1].Выбрать();
			
			// Определение наличии упаковки в первой записи выборки 2
			// если выборка не сработала, присваиваем значение "Ложь"
			ЕстьУпаковка1 = (Выборка2.Следующий() И Выборка2.ЕстьУпаковка = 1);
			
			ПерезаполнятьНоменклатуруПоставщика = Ложь;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
				
				Если Выборка1.Следующий() Тогда
					
					Если ЗначениеЗаполнено(Выборка1.Номенклатура) И (Выборка1.Номенклатура <> ТекущаяСтрока.Номенклатура
					 Или (Выборка1.ЕдиницаИзмерения <> ТекущаяСтрока.ЕдиницаИзмерения И (ЕстьУпаковка1 Или ЗначениеЗаполнено(Выборка1.ЕдиницаИзмерения)))) Тогда
						
						ПерезаполнятьНоменклатуруПоставщика = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ПерезаполнятьНоменклатуруПоставщика = Истина;
			КонецЕсли;
			
			Если ПерезаполнятьНоменклатуруПоставщика Тогда
				
				Если Выборка2.Количество() = 1 Тогда
					
					ТекущаяСтрока.НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
				ИначеЕсли Выборка2.Количество() > 1 Тогда
					
					НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
					Выборка2.Следующий();
					ЕстьУпаковка2 = Выборка2.ЕстьУпаковка;
					
					Если ЕстьУпаковка1 <> ЕстьУпаковка2 Тогда
						ТекущаяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
					Иначе
						ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
					КонецЕсли;
					
				Иначе
					
					ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыСтатьиДоходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Реквизиты;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиДоходов(), Реквизиты) Тогда
		
		ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьСлужебныеРеквизитыВСтроке(ТекущаяСтрока, КэшированныеЗначения.СлужебныеРеквизитыСтатейДоходов, Реквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыСтатьиРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Реквизиты;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов(), Реквизиты) Тогда
		
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСлужебныеРеквизитыВСтроке(ТекущаяСтрока, КэшированныеЗначения.СлужебныеРеквизитыСтатейРасходов, Реквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСопоставленнуюНоменклатуруПоставщика(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(), СтруктураПараметровДействия) Тогда
		
		ВыводитьПредупреждение = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураПоставщиков.Ссылка)  КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура        КАК Номенклатура,
		|	НоменклатураПоставщиков.ЕдиницаИзмерения    КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Контрагент
		|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
		|	И НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|	И НоменклатураПоставщиков.ЕдиницаИзмерения = &ЕдиницаИзмерения
		|	И НоменклатураПоставщиков.Ссылка <> &НоменклатураПоставщика
		|	И ВЫРАЗИТЬ(&НоменклатураПоставщика КАК Справочник.НоменклатураКонтрагентов).Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.ЕдиницаИзмерения
		|");
		
		Запрос.УстановитьПараметр("Контрагент"            , СтруктураПараметровДействия.Контрагент);
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура"          , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения"      , ТекущаяСтрока.ЕдиницаИзмерения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					ВыводитьПредупреждение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыПересчетаИЗаполнения

#Область Прочее

Функция ПроверитьПринадлежностьСерииНоменклатурыУпаковкиПартииВладельцу(ТекущаяСтрока, СтруктураДействий)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	РезультатПроверки = Новый Структура;
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу()) Тогда
		РезультатПроверки.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу()) Тогда
		РезультатПроверки.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу()) Тогда
		РезультатПроверки.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	ВыбранныеПоля = "";
	Соединения = "";
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу()) Тогда
		ВыбранныеПоля = ВыбранныеПоля + ",
			|	ЕстьNULL(СправочникСерии.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры";
		Соединения = Соединения + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		Справочник.СерииНоменклатуры КАК СправочникСерии
			|	ПО
			|		СправочникСерии.Ссылка = &СерияНоменклатуры
			|		И СправочникСерии.Владелец = СправочникНоменклатура.Ссылка
			|		И СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСерии";
		Запрос.УстановитьПараметр("СерияНоменклатуры", ТекущаяСтрока.СерияНоменклатуры);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу()) Тогда
		ВыбранныеПоля = ВыбранныеПоля + ",
			|	ЕстьNULL(Партии.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия";
		Соединения = Соединения + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрНакопления.СвободныеОстатки.Обороты(
			|			,,,
			|			Номенклатура = &Номенклатура
			|				И Партия = &Партия
			|				И Номенклатура.ВидНоменклатуры.ИспользоватьПартии) КАК Партии
			|	ПО
			|		Партии.Номенклатура = СправочникНоменклатура.Ссылка";
		Запрос.УстановитьПараметр("Партия", ТекущаяСтрока.Партия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу()) Тогда
		ВыбранныеПоля = ВыбранныеПоля + ",
			|	ЕстьNULL(СправочникЕдиницы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения";
		Соединения = Соединения + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		Справочник.ЕдиницыИзмерения КАК СправочникЕдиницы
			|	ПО
			|		СправочникЕдиницы.Ссылка = &ЕдиницаИзмерения
			|		И СправочникЕдиницы.Ссылка В (&СписокЕдиниц)";
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("СписокЕдиниц", НоменклатураСервер.ЕдиницыИзмерения(ТекущаяСтрока.Номенклатура));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|	%1
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|	%2
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|";
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ВыбранныеПоля, Соединения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(РезультатПроверки, Выборка);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|				ВидЦены = &ВидЦены
	|				И Номенклатура = &Номенклатура
	|				И СерияНоменклатуры = ВЫБОР КОГДА &СерияНоменклатуры = НЕОПРЕДЕЛЕНО ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ИНАЧЕ &СерияНоменклатуры КОНЕЦ
	|				И Партия = ВЫБОР КОГДА &Партия = НЕОПРЕДЕЛЕНО ТОГДА ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) ИНАЧЕ &Партия КОНЕЦ
	|	) КАК ЦеныНоменклатурыСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|		ПО 
	|			ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|		ПО ИСТИНА
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Цена = Выборка.Цена;
	
	ЕдиницаИзмерения = Неопределено;
	Если ПараметрыОтбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения) И ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		
		Цена = Цена
			* НоменклатураСервер.КоэффициентЕдиницыИзмерения(ПараметрыОтбора.Номенклатура, ЕдиницаИзмерения)
			/ НоменклатураСервер.КоэффициентЕдиницыИзмерения(ПараметрыОтбора.Номенклатура, Выборка.Упаковка);
			
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодамТоваров(Штрихкоды, КэшированныеЗначения)
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(Штрихкоды);
	
	Для каждого ДанныеПоШтрихкоду Из ДанныеПоШтрихкодам Цикл
		
		Если ЗначениеЗаполнено(ДанныеПоШтрихкоду.Значение.Номенклатура) И Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения) Тогда
			ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ДанныеПоШтрихкоду.Значение.Номенклатура);
		КонецЕсли;
		
		КэшированныеЗначения.Штрихкоды.Вставить(ДанныеПоШтрихкоду.Ключ, ДанныеПоШтрихкоду.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоШтрихкодамУпаковок(Штрихкоды, КэшированныеЗначения, ПараметрыДействия) Экспорт
	
	ДанныеШтрихкодов = Новый ТаблицаЗначений;
	ДанныеШтрихкодов.Колонки.Добавить("Штрихкод"     , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеШтрихкодов.Колонки.Добавить("НомерУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(27));
	ДанныеШтрихкодов.Колонки.Добавить("КлючУпаковки" , ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеШтрихкодов.Колонки.Добавить("GTIN"         , ОбщегоНазначения.ОписаниеТипаСтрока(14));
	ДанныеШтрихкодов.Колонки.Добавить("НомерСерии"   , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеШтрихкодов.Колонки.Добавить("ГоденДо"      , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого ДанныеШтрихкода Из Штрихкоды Цикл
		
		НоваяСтрока = ДанныеШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод      = ДанныеШтрихкода.Штрихкод;
		НоваяСтрока.НомерУпаковки = ДанныеШтрихкода.SGTIN;
		НоваяСтрока.КлючУпаковки  = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(ДанныеШтрихкода.SGTIN);
		НоваяСтрока.GTIN          = ДанныеШтрихкода.GTIN;
		НоваяСтрока.НомерСерии    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода, "Серия");
		НоваяСтрока.ГоденДо       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода, "ГоденДо");
		
		КэшированныеЗначения.Штрихкоды.Вставить(ДанныеШтрихкода.Штрихкод, ОбработкаТабличнойЧастиКлиентСервер.СтруктураКэшируемойИнформацииПоШтрихкоду(ДанныеШтрихкода.Штрихкод));
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод       КАК Штрихкод,
	|	Штрихкоды.НомерУпаковки  КАК НомерУпаковки,
	|	Штрихкоды.КлючУпаковки   КАК КлючУпаковки,
	|	Штрихкоды.GTIN           КАК GTIN,
	|	Штрихкоды.НомерСерии     КАК НомерСерии,
	|	Штрихкоды.ГоденДо        КАК ГоденДо
	|ПОМЕСТИТЬ ДанныеШтрихкодов
	|ИЗ
	|	&Штрихкоды КАК Штрихкоды
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ                                   КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод              КАК Штрихкод,
	|	УпаковкиТоваров.Ссылка                 КАК УпаковкаТовара,
	|	УпаковкиТоваров.Номенклатура           КАК Номенклатура,
	|	УпаковкиТоваров.СерияНоменклатуры      КАК СерияНоменклатуры,
	|	УпаковкиТоваров.Партия                 КАК Партия,
	|	УпаковкиТоваров.Номенклатура.Упаковка  КАК ЕдиницаИзмерения,
	
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодов.НомерСерии <> """"
	|			ТОГДА ДанныеШтрихкодов.НомерСерии
	|		ИНАЧЕ ЕСТЬNULL(УпаковкиТоваров.СерияНоменклатуры.Номер, """")
	|	КОНЕЦ                                  КАК НомерСерии,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодов.ГоденДо <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШтрихкодов.ГоденДо
	|		КОГДА УпаковкиТоваров.ГоденДо <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА УпаковкиТоваров.ГоденДо
	|		ИНАЧЕ ЕСТЬNULL(УпаковкиТоваров.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                  КАК ГоденДо
	
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И УпаковкиТоваров.КлючУпаковки = ДанныеШтрихкодов.КлючУпаковки
	|		И ДанныеШтрихкодов.ГоденДо В (УпаковкиТоваров.ГоденДо, ДАТАВРЕМЯ(1,1,1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА                                                КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод                             КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиМаркируемогоТовара.ПустаяСсылка)  КАК УпаковкаТовара,
	|	ШтрихкодыНоменклатуры.Номенклатура                    КАК Номенклатура,
	|	ЕСТЬNULL(СправочникСерии.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))  КАК СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)  КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	
	|	ДанныеШтрихкодов.НомерСерии                           КАК НомерСерии,
	|	ДанныеШтрихкодов.ГоденДо                              КАК ГоденДо
	
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|	ПО
	|		ШтрихкодыНоменклатуры.Штрихкод = ДанныеШтрихкодов.GTIN
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Владелец = ШтрихкодыНоменклатуры.Номенклатура
	|		И СправочникСерии.Номер = ДанныеШтрихкодов.НомерСерии
	|		И (СправочникСерии.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И СправочникСерии.ГоденДо > &ТекущаяДата)
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И УпаковкиТоваров.КлючУпаковки = ДанныеШтрихкодов.КлючУпаковки
	|		И ДанныеШтрихкодов.ГоденДо В (УпаковкиТоваров.ГоденДо, ДАТАВРЕМЯ(1,1,1))
	|ГДЕ
	|	НЕ &ПропускатьНенайденные
	|	И УпаковкиТоваров.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА                                                КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод                             КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиМаркируемогоТовара.ПустаяСсылка)  КАК УпаковкаТовара,
	|	ЕСТЬNULL(СправочникСерии.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))  КАК Номенклатура,
	|	ЕСТЬNULL(СправочникСерии.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)  КАК Партия,
	|	СправочникСерии.Владелец.Упаковка                     КАК ЕдиницаИзмерения,
	
	|	ДанныеШтрихкодов.НомерСерии                           КАК НомерСерии,
	|	ДанныеШтрихкодов.ГоденДо                              КАК ГоденДо
	
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|	ПО
	|		ШтрихкодыНоменклатуры.Штрихкод = ДанныеШтрихкодов.GTIN
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Номер = ДанныеШтрихкодов.НомерСерии
	|		И (СправочникСерии.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И СправочникСерии.ГоденДо > &ТекущаяДата)
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И УпаковкиТоваров.КлючУпаковки = ДанныеШтрихкодов.КлючУпаковки
	|		И ДанныеШтрихкодов.ГоденДо В (УпаковкиТоваров.ГоденДо, ДАТАВРЕМЯ(1,1,1))
	|ГДЕ
	|	НЕ &ПропускатьНенайденные
	|	И УпаковкиТоваров.Ссылка ЕСТЬ NULL
	|	И ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("Штрихкоды", ДанныеШтрихкодов);
	Запрос.УстановитьПараметр("ТекущаяДата", ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -6));
	Запрос.УстановитьПараметр("ПропускатьНенайденные", ПараметрыДействия.ПропускатьНенайденныеШтрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИнформацияПоШтрихкоду = КэшированныеЗначения.Штрихкоды[Выборка.Штрихкод];
		ИнформацияПоШтрихкоду.ШтрихкодУпаковки = Истина;
		ИнформацияПоШтрихкоду.НеизвестныйШтрихкод = Выборка.НеизвестныйШтрихкод;
		ИнформацияПоШтрихкоду.УпаковкаМаркированногоТовара = Выборка.УпаковкаТовара;
		ИнформацияПоШтрихкоду.Номенклатура = Выборка.Номенклатура;
		ИнформацияПоШтрихкоду.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		ИнформацияПоШтрихкоду.Партия = Выборка.Партия;
		ИнформацияПоШтрихкоду.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(ИнформацияПоШтрихкоду.Номенклатура) И Не ЗначениеЗаполнено(ИнформацияПоШтрихкоду.ЕдиницаИзмерения) Тогда
			ИнформацияПоШтрихкоду.ЕдиницаИзмерения = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ИнформацияПоШтрихкоду.Номенклатура, НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		КонецЕсли;
		
		Если ПараметрыДействия.ЗаполнитьНезаполненныеНомерСерииИГоденДо Тогда
			ИнформацияПоШтрихкоду.НомерСерии = Выборка.НомерСерии;
			ИнформацияПоШтрихкоду.ГоденДо    = Выборка.ГоденДо;
		КонецЕсли;
		
		КэшированныеЗначения.Штрихкоды.Вставить(Выборка.Штрихкод, ИнформацияПоШтрихкоду);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуффиксРеквизита(ИмяРеквизита, Суффикс, МетаданныеОбъекта, ПараметрыПроверки);
	
	Если ПараметрыПроверки.ТоварВШапке Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита + Суффикс, МетаданныеОбъекта) Тогда
			Возврат Суффикс;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияБольничнаяАптека.ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита + Суффикс, МетаданныеОбъекта, ПараметрыПроверки.ИмяТабличнойЧасти) Тогда
			Возврат Суффикс;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти // Прочее

////////////////////////////////////////////////////////////////////////////////
// Условное оформление
#Область УсловноеОформление

Процедура УстановитьОформлениеПолеНеИспользуется(Форма, ИмяПоля, ПутьКФлагу, ЗначениеФлага, ТекстНеИспользуется)
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоля].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКФлагу);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЗначениеФлага;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеИспользуется);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти // УсловноеОформление

#КонецОбласти // СлужебныеПроцедурыИФункции
