
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Функция ПолучитьДоступныеВерсииКлассификатора(Знач Параметры) Экспорт
	
	ТранспортныйМодуль = ОбменССервисомМинздраваРФКлиентСервер.ПолучитьПараметрыСервера(Параметры.АдресСервисаМинздраваРФ);
	
	ДанныеHTTPЗапроса = ОбменССервисомМинздраваРФКлиентСервер.ДанныеHTTPЗапроса("GET");
	ДанныеHTTPЗапроса.АдресЗапроса = СформироватьАдресРесурса_ВерсииКлассификатора(Параметры);
	ДанныеHTTPЗапроса.Заголовки = Новый Соответствие;
	ДанныеHTTPЗапроса.Заголовки.Вставить("Content-Type", "application/json");
	
	РезультатЗапроса = ОбменССервисомМинздраваРФКлиентСервер.ВыполнитьHTTPЗапрос(ТранспортныйМодуль, ДанныеHTTPЗапроса);
	Если РезультатЗапроса.Статус = "Успешно" Тогда
		Возврат ОбработатьОтвет_ВерсииКлассификатора(РезультатЗапроса.ОтветТранспортногоМодуля);
	Иначе
		ВызватьИсключение РезультатЗапроса.ОписаниеОшибки;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.НомерСтраницы) Тогда
		Параметры.НомерСтраницы = 1;
	КонецЕсли;
	
	МаксимальныйРазмерСтраницы = 10000;
	
	// Размер страницы фиксируем и не меняем, т.к. очередная порция результата http-запроса каждый раз пересчитывается по формуле НомерСтраницы * РазмерСтраницы.
	ЗагружатьВсеЗаписи = Не ЗначениеЗаполнено(Параметры.РазмерСтраницы);
	Если ЗагружатьВсеЗаписи Тогда
		ИсходныйРазмерСтраницы   = МаксимальныйРазмерСтраницы;
		Параметры.РазмерСтраницы = МаксимальныйРазмерСтраницы;
	Иначе
		ИсходныйРазмерСтраницы   = Параметры.РазмерСтраницы;
		Параметры.РазмерСтраницы = Мин(Параметры.РазмерСтраницы, МаксимальныйРазмерСтраницы);
	КонецЕсли;
	
	Результат = Новый Структура("ОбщееКоличествоДанных, ЗагруженноеКоличествоДанных, ДанныеКлассификатора", 0, 0, Новый ТаблицаЗначений);
	Пока Истина Цикл
		
		// Получение данных.
		ТранспортныйМодуль = ОбменССервисомМинздраваРФКлиентСервер.ПолучитьПараметрыСервера(Параметры.АдресСервисаМинздраваРФ);
		
		ДанныеHTTPЗапроса = ОбменССервисомМинздраваРФКлиентСервер.ДанныеHTTPЗапроса("GET");
		ДанныеHTTPЗапроса.АдресЗапроса = СформироватьАдресРесурса_ДанныеКлассификатора(Параметры);
		ДанныеHTTPЗапроса.Заголовки = Новый Соответствие;
		ДанныеHTTPЗапроса.Заголовки.Вставить("Content-Type", "application/json");
		
		РезультатЗапроса = ОбменССервисомМинздраваРФКлиентСервер.ВыполнитьHTTPЗапрос(ТранспортныйМодуль, ДанныеHTTPЗапроса);
		Если РезультатЗапроса.Статус = "Успешно" Тогда
			РезультатПорции = ОбработатьОтвет_ДанныеКлассификатора(Параметры, РезультатЗапроса.ОтветТранспортногоМодуля);
		Иначе
			ВызватьИсключение РезультатЗапроса.ОписаниеОшибки;
		КонецЕсли;
		
		// Расчет необходимости получения очередной порции данных.
		
		Если РезультатПорции.ЗагруженноеКоличествоДанных = 0 Тогда
			// Если очередная порция вернулась без данных, прерываем получение данных, предотвращая в том числе потенциальное зацикливание.
			Прервать;
		КонецЕсли;
		
		Если Результат.ЗагруженноеКоличествоДанных = 0 Тогда
			// Это первая порция данных.
			Результат = РезультатПорции;
		Иначе
			// Дополним общий результат данными из очередной порции, но только на то количество записей, которое не превышает общее запрошенное количество.
			Результат.ОбщееКоличествоДанных = РезультатПорции.ОбщееКоличествоДанных;
			Для Каждого СтрокаИсточник Из РезультатПорции.ДанныеКлассификатора Цикл
				ЗаполнитьЗначенияСвойств(Результат.ДанныеКлассификатора.Добавить(), СтрокаИсточник);
				Результат.ЗагруженноеКоличествоДанных = Результат.ЗагруженноеКоличествоДанных + 1;
				Если Не ЗагружатьВсеЗаписи И Результат.ЗагруженноеКоличествоДанных >= ИсходныйРазмерСтраницы Тогда
					Прервать; // Все запрошенное количество записей получено.
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.ОбщееКоличествоДанных > Результат.ЗагруженноеКоличествоДанных
			И (ЗагружатьВсеЗаписи Или Результат.ЗагруженноеКоличествоДанных < ИсходныйРазмерСтраницы) Тогда
			// Если еще не все данные получили, тогда в следующей итерации получим очередную порцию.
			Параметры.НомерСтраницы = Параметры.НомерСтраницы + 1;
		Иначе
			// Все данные получены.
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Статусы = Новый Структура("Создано, Обновлено, ПомеченоНаУдаление, Ошибки", 0, 0, 0, Новый Массив);
	
	ДанныеКлассификатора = Параметры.ДанныеКлассификатора;
	Для Каждого СтрокаКлассификатора Из ДанныеКлассификатора Цикл
		
		Если Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
			ЗагрузитьДанныеКлассификатора_СтруктурныеПодразделения(СтрокаКлассификатора, Статусы);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
			ЗагрузитьДанныеКлассификатора_Отделения(СтрокаКлассификатора, Статусы);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неподдерживаемый тип классификатора.'");
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	Результат.Вставить("Статусы"             , Статусы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка версий классификаторов
#Область ЗагрузкаВерсийКлассификаторов

Функция ПараметрыЗагрузки_ВерсииКлассификатора(ТипКлассификатора, НомерСтраницы = 0, РазмерСтраницы = 0) Экспорт
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ.Получить().Получить();
	
	Если ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_СтруктурныеПодразделения;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Отделения;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Должности() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Должности;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Должности1002() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Должности1002;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый тип классификатора.'");
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресСервисаМинздраваРФ");
	Параметры.Вставить("АдресРесурса");
	Параметры.Вставить("ИдентификаторПользователя");
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЗагрузки);
	
	Параметры.Вставить("ИдентификаторКлассификатора", ИдентификаторКлассификатора);
	Параметры.Вставить("ТипКлассификатора"          , ТипКлассификатора);
	Параметры.Вставить("НомерСтраницы"              , НомерСтраницы);
	Параметры.Вставить("РазмерСтраницы"             , РазмерСтраницы);
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьАдресРесурса_ВерсииКлассификатора(Параметры)
	
	Шаблон = "[АдресРесурса]/versions";
	Шаблон = Шаблон + "?userKey=[ИдентификаторПользователя]";
	Шаблон = Шаблон + "&identifier=[ИдентификаторКлассификатора]";
	
	Если ЗначениеЗаполнено(Параметры.НомерСтраницы) Тогда
		Шаблон = Шаблон + "&page=[НомерСтраницы]";
		Шаблон = Шаблон + "&size=[РазмерСтраницы]";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Параметры);
	
КонецФункции

Функция ОбработатьОтвет_ВерсииКлассификатора(Ответ)
	
	ДанныеИзСайта = ОбменССервисомМинздраваРФКлиентСервер.ПреобразоватьJSONВЗначение(Ответ, Ложь);
	
	ЗагружаемыйСписокВерсий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "list");
	Если ЗначениеЗаполнено(ЗагружаемыйСписокВерсий) Тогда
		
		СписокВерсий = Новый СписокЗначений;
		
		АктуальнаяВерсияУстановлена = Ложь;
		Для Каждого ЭлементСписка Из ЗагружаемыйСписокВерсий Цикл
			Если Не АктуальнаяВерсияУстановлена И ЭлементСписка.archive = Ложь Тогда
				ПризнакАктуальности = НСтр("ru = 'актуальная'");
				АктуальнаяВерсияУстановлена = Истина;
			Иначе
				ПризнакАктуальности = "";
			КонецЕсли;
			СписокВерсий.Добавить(ЭлементСписка.version, СтрШаблон("%1 (%2) %3", ЭлементСписка.version, ЭлементСписка.publishDate, ПризнакАктуальности));
		КонецЦикла;
		
	Иначе
		ВызватьИсключение ДанныеИзСайта.resultText;
	КонецЕсли;
	
	Возврат СписокВерсий;
	
КонецФункции

#КонецОбласти // ЗагрузкаВерсийКлассификаторов

////////////////////////////////////////////////////////////////////////////////
// Получение данных классификаторов
#Область ПолучениеДанныхКлассификаторов

Функция ПараметрыПолучения_ДанныеКлассификатора(ТипКлассификатора, Версия, НомерСтраницы = 0, РазмерСтраницы = 0, ПолеУпорядочивания = "", ФильтрыПолей = Неопределено) Экспорт
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ.Получить().Получить();
	
	Если ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_СтруктурныеПодразделения;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Отделения;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Должности() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Должности;
	ИначеЕсли ТипКлассификатора = ТипКлассификатора_Должности1002() Тогда
		ИдентификаторКлассификатора = ПараметрыЗагрузки.ИдентификаторКлассификатора_Должности1002;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый тип классификатора.'");
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресСервисаМинздраваРФ");
	Параметры.Вставить("АдресРесурса");
	Параметры.Вставить("ИдентификаторПользователя");
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЗагрузки);
	
	Параметры.Вставить("ИдентификаторКлассификатора", ИдентификаторКлассификатора);
	Параметры.Вставить("ТипКлассификатора"          , ТипКлассификатора);
	Параметры.Вставить("ВерсияДанныхКлассификатора" , Версия);
	Параметры.Вставить("НомерСтраницы"              , НомерСтраницы);
	Параметры.Вставить("РазмерСтраницы"             , РазмерСтраницы);
	Параметры.Вставить("ПолеУпорядочивания"         , ПолеУпорядочивания);
	Параметры.Вставить("ФильтрыПолей"               , ФильтрыПолей);
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьАдресРесурса_ДанныеКлассификатора(ИсходныеПараметры)
	
	Параметры = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ИсходныеПараметры);
	
	Если Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
		СоответствияФормата = СоответствияФорматаДанных_СтруктурныеПодразделения();
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
		СоответствияФормата = СоответствияФорматаДанных_Отделения();
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Должности() Тогда
		СоответствияФормата = СоответствияФорматаДанных_Должности();
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Должности1002() Тогда
		СоответствияФормата = СоответствияФорматаДанных_Должности1002();
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый тип классификатора.'");
	КонецЕсли;
	
	Шаблон = "[АдресРесурса]/data";
	Шаблон = Шаблон + "?userKey=[ИдентификаторПользователя]";
	Шаблон = Шаблон + "&identifier=[ИдентификаторКлассификатора]";
	
	Если ЗначениеЗаполнено(Параметры.ВерсияДанныхКлассификатора) Тогда
		Шаблон = Шаблон + "&version=[ВерсияДанныхКлассификатора]";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НомерСтраницы) Тогда
		Шаблон = Шаблон + "&page=[НомерСтраницы]";
		Шаблон = Шаблон + "&size=[РазмерСтраницы]";
		Параметры.НомерСтраницы  = Формат(Параметры.НомерСтраницы, "ЧГ=0");
		Параметры.РазмерСтраницы = Формат(Параметры.РазмерСтраницы, "ЧГ=0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПолеУпорядочивания) Тогда
		
		ОписаниеВнешнихДанных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СоответствияФормата, Параметры.ПолеУпорядочивания);
		Если ОписаниеВнешнихДанных <> Неопределено Тогда
			Параметры.ПолеУпорядочивания = ОписаниеВнешнихДанных.Имя;
		КонецЕсли;
		
		Шаблон = Шаблон + "&sorting=[ПолеУпорядочивания]";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ФильтрыПолей) Тогда
		
		Для Каждого КлючИЗначение Из Параметры.ФильтрыПолей Цикл
			
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеВнешнихДанных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СоответствияФормата, КлючИЗначение.Ключ);
			Если ОписаниеВнешнихДанных <> Неопределено Тогда
				ПолеФильтра = ОписаниеВнешнихДанных.Имя;
			Иначе
				ПолеФильтра = КлючИЗначение.Ключ;
			КонецЕсли;
			
			Шаблон = Шаблон + СтрШаблон("&filters=%1|%2", ПолеФильтра, КлючИЗначение.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Параметры);
	
КонецФункции

Функция ОбработатьОтвет_ДанныеКлассификатора(Параметры, Ответ)
	
	Результат = Новый Структура("ОбщееКоличествоДанных, ЗагруженноеКоличествоДанных, ДанныеКлассификатора", 0, 0, Новый ТаблицаЗначений);
	
	ДанныеИзСайта = ОбменССервисомМинздраваРФКлиентСервер.ПреобразоватьJSONВЗначение(Ответ, Ложь);
	
	ЗагружаемыеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "list");
	Если ЗначениеЗаполнено(ЗагружаемыеДанные) Тогда
		
		Если Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
			Результат.ОбщееКоличествоДанных       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "total", 0);
			Результат.ЗагруженноеКоличествоДанных = ЗагружаемыеДанные.Количество();
			Результат.ДанныеКлассификатора        = ПолучитьДанныеКлассификатора_СтруктурныеПодразделения(Параметры, ЗагружаемыеДанные);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
			Результат.ОбщееКоличествоДанных       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "total", 0);
			Результат.ЗагруженноеКоличествоДанных = ЗагружаемыеДанные.Количество();
			Результат.ДанныеКлассификатора        = ПолучитьДанныеКлассификатора_Отделения(Параметры, ЗагружаемыеДанные);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Должности() Тогда
			Результат.ОбщееКоличествоДанных       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "total", 0);
			Результат.ЗагруженноеКоличествоДанных = ЗагружаемыеДанные.Количество();
			Результат.ДанныеКлассификатора        = ПолучитьДанныеКлассификатора_Должности(Параметры, ЗагружаемыеДанные);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Должности1002() Тогда
			Результат.ОбщееКоличествоДанных       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзСайта, "total", 0);
			Результат.ЗагруженноеКоличествоДанных = ЗагружаемыеДанные.Количество();
			Результат.ДанныеКлассификатора        = ПолучитьДанныеКлассификатора_Должности1002(Параметры, ЗагружаемыеДанные);
		Иначе
			ВызватьИсключение НСтр("ru = 'Непрддерживаемый тип классификатора.'");
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеИзСайта.resultText) Тогда
		ВызватьИсключение ДанныеИзСайта.resultText;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Структурные подразделения"
#Область ПолучениеДанныхКлассификатора_СтруктурныеПодразделения

Функция ТипКлассификатора_СтруктурныеПодразделения() Экспорт
	
	Возврат "СтруктурныеПодразделения";
	
КонецФункции

Функция ФильтрыПолейЗагрузкиДанныхКлассификатора_СтруктурныеПодразделения() Экспорт
	
	ФильтрыПолей = Новый Структура;
	
	СоответствияФормата = СоответствияФорматаДанных_СтруктурныеПодразделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ФильтрыПолей.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ФильтрыПолей;
	
КонецФункции

Функция СтруктураДанныхКлассификатора_СтруктурныеПодразделения() Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"      , 0);
	ДанныеКлассификатора.Вставить("Версия"          , "");
	ДанныеКлассификатора.Вставить("Организация"     , Неопределено);
	ДанныеКлассификатора.Вставить("Ссылка"          , Неопределено);
	ДанныеКлассификатора.Вставить("Информация"      , "");
	ДанныеКлассификатора.Вставить("ЗагрузкаДоступна", Истина);
	ДанныеКлассификатора.Вставить("ПометкаУдаления" , Ложь);
	ДанныеКлассификатора.Вставить("НаличиеДублей"   , Ложь);
	
	СоответствияФормата = СоответствияФорматаДанных_СтруктурныеПодразделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ДанныеКлассификатора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_СтруктурныеПодразделения()
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("ИдентификаторОрганизации", Новый Структура("Индекс, Имя, Тип", 0, "mo_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Идентификатор"           , Новый Структура("Индекс, Имя, Тип", 1, "depart_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ДатаСоздания"            , Новый Структура("Индекс, Имя, Тип", 2, "depart_create_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	СоответствияФормата.Вставить("ДатаИзменения"           , Новый Структура("Индекс, Имя, Тип", 3, "depart_modify_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	СоответствияФормата.Вставить("ДатаЛиквидации"          , Новый Структура("Индекс, Имя, Тип", 4, "depart_liquidation_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	СоответствияФормата.Вставить("Наименование"            , Новый Структура("Индекс, Имя, Тип", 5, "depart_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("Тип"                     , Новый Структура("Индекс, Имя, Тип", 7, "depart_type_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("Вид"                     , Новый Структура("Индекс, Имя, Тип", 9, "depart_kind_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ПолучитьДанныеКлассификатора_СтруктурныеПодразделения(Параметры, ЗагружаемыеДанные)
	
	ДанныеКлассификатора = Новый Массив;
	
	СоответствияФормата = СоответствияФорматаДанных_СтруктурныеПодразделения();
	
	Смещение = Параметры.РазмерСтраницы * (Параметры.НомерСтраницы - 1);
	Для Индекс = 0 По ЗагружаемыеДанные.ВГраница() Цикл
		
		ЗагружаемыйЭлементДанных = ЗагружаемыеДанные[Индекс];
		
		ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_СтруктурныеПодразделения();
		ПолученныйЭлементДанных.КлючСтроки  = Индекс + Смещение;
		ПолученныйЭлементДанных.Версия      = Параметры.ВерсияДанныхКлассификатора;
		
		ДобавитьЭлементДанныхКлассификатора_СтруктурныеПодразделения(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата);
		
		ДанныеКлассификатора.Добавить(ПолученныйЭлементДанных);
		
	КонецЦикла;
	
	СопоставитьДанныеКлассификатора_СтруктурныеПодразделения(ДанныеКлассификатора);
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДобавитьЭлементДанныхКлассификатора_СтруктурныеПодразделения(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата)
	
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		
		ЗагружаемоеЗначениеВКолонке = ЗагружаемыйЭлементДанных[КлючИЗначение.Значение.Индекс];
		
		Если ЗагружаемоеЗначениеВКолонке.column = КлючИЗначение.Значение.Имя Тогда
			ПолученныйЭлементДанных[КлючИЗначение.Ключ] = ПривестиКВнутреннемуТипу(ЗагружаемоеЗначениеВКолонке.value, КлючИЗначение.Значение.Тип.Типы()[0]);
		Иначе
			ВызватьИсключение НСтр("ru = 'Структура загружаемых данных не поддерживается. Выберите другую версию классификатора.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СопоставитьДанныеКлассификатора_СтруктурныеПодразделения(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.КодOID  КАК ИдентификаторОрганизации,
	|	Данные.Ссылка  КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.КодOID              КАК Идентификатор,
	|	Данные.Владелец.КодOID     КАК ИдентификаторОрганизации,
	|	Данные.НаименованиеПолное  КАК Наименование,
	|	Данные.Ссылка              КАК Ссылка,
	|	Данные.Владелец            КАК Организация,
	|	Данные.ПометкаУдаления     КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|");
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеСправочникаОрганизации              = Результаты[0].Выгрузить();
	ДанныеСправочникаПодразделенияОрганизаций = Результаты[1].Выгрузить();
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		// 1. Поиск загружаемой организации.
		Отбор = Новый Структура("ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаОрганизации.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок <> 1 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько организаций с одинаковыми значениями реквизитов ""Код OID"".'");
				ЭлементДанных.Информация = НСтр("ru = 'В следствии чего невозможно однозначно определить значение для заполнения реквизита ""Организация"" подразделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ПодразделениеЛиквидировано = ЗначениеЗаполнено(ЭлементДанных.ДатаЛиквидации);
		
		ЭлементДанных.Организация = НайденныеСтроки[0].Организация;
		
		// 2. Поиск подразделений по идентификатору.
		Отбор = Новый Структура("Идентификатор");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько подразделений с одинаковыми реквизитами ""Код OID"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				
				Если ПодразделениеЛиквидировано Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации
						И НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 3. Поиск подразделения по наименованию и идентификатору организации.
		Отбор = Новый Структура("Наименование, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		Отбор.Вставить("Идентификатор", "");
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько подразделений с одинаковыми значениями реквизитов ""Код OID"" организации и ""Наименование"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				
				Если ПодразделениеЛиквидировано Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к заполнению реквизита ""Код OID"".'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и заполнению реквизита ""Код OID"".'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 4. Подразделение не найдено.
		Если ПодразделениеЛиквидировано Тогда
			
			ЭлементДанных.ЗагрузкаДоступна = Ложь;
			ЭлементДанных.Информация       = НСтр("ru = 'Получена дата ликвидации подразделения.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Элемент справочника не найден в информационной базе.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
			
		Иначе
			
			ЭлементДанных.ЗагрузкаДоступна = Истина;
			ЭлементДанных.Информация       = НСтр("ru = 'Загрузка приведет к созданию нового элемента справочника.'");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_СтруктурныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Отделения"
#Область ПолучениеДанныхКлассификатора_Отделения

Функция ТипКлассификатора_Отделения() Экспорт
	
	Возврат "Отделения";
	
КонецФункции

Функция ФильтрыПолейЗагрузкиДанныхКлассификатора_Отделения() Экспорт
	
	ФильтрыПолей = Новый Структура;
	
	СоответствияФормата = СоответствияФорматаДанных_Отделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ФильтрыПолей.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ФильтрыПолей;
	
КонецФункции

Функция СтруктураДанныхКлассификатора_Отделения() Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"      , 0);
	ДанныеКлассификатора.Вставить("Версия"          , "");
	ДанныеКлассификатора.Вставить("Организация"     , Неопределено);
	ДанныеКлассификатора.Вставить("Подразделение"   , Неопределено);
	ДанныеКлассификатора.Вставить("Ссылка"          , Неопределено);
	ДанныеКлассификатора.Вставить("Информация"      , "");
	ДанныеКлассификатора.Вставить("ЗагрузкаДоступна", Истина);
	ДанныеКлассификатора.Вставить("ПометкаУдаления" , Ложь);
	ДанныеКлассификатора.Вставить("Тип"             , "");
	ДанныеКлассификатора.Вставить("НаличиеДублей"   , Ложь);
	
	СоответствияФормата = СоответствияФорматаДанных_Отделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ДанныеКлассификатора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_Отделения()
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("ИдентификаторОрганизации"                , Новый Структура("Индекс, Имя, Тип", 0, "mo_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ИдентификаторПодразделения"              , Новый Структура("Индекс, Имя, Тип", 1, "depart_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Идентификатор"                           , Новый Структура("Индекс, Имя, Тип", 12, "oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Наименование"                            , Новый Структура("Индекс, Имя, Тип", 13, "hospital_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("НаименованиеТипаОтделения"               , Новый Структура("Индекс, Имя, Тип", 15, "hospital_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("ДатаУпразднения"                         , Новый Структура("Индекс, Имя, Тип", 16, "hospital_liquidation_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	СоответствияФормата.Вставить("НаименованиеТипаАмбулаторногоКабинета"   , Новый Структура("Индекс, Имя, Тип", 18, "ambulance_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("НаименованиеТипаДиагностическогоКабинета", Новый Структура("Индекс, Имя, Тип", 21, "lab_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ПолучитьДанныеКлассификатора_Отделения(Параметры, ЗагружаемыеДанные)
	
	ДанныеКлассификатора = Новый Массив;
	
	СоответствияФормата = СоответствияФорматаДанных_Отделения();
	
	Смещение = Параметры.РазмерСтраницы * (Параметры.НомерСтраницы - 1);
	Для Индекс = 0 По ЗагружаемыеДанные.ВГраница() Цикл
		
		ЗагружаемыйЭлементДанных = ЗагружаемыеДанные[Индекс];
		
		ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_Отделения();
		ПолученныйЭлементДанных.КлючСтроки  = Индекс + Смещение;
		ПолученныйЭлементДанных.Версия      = Параметры.ВерсияДанныхКлассификатора;
		
		ДобавитьЭлементДанныхКлассификатора_Отделения(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата);
		
		ЗаполнитьНаименованиеПоТипу = Не ЗначениеЗаполнено(ПолученныйЭлементДанных.Наименование);
		
		Если ЗначениеЗаполнено(ПолученныйЭлементДанных.НаименованиеТипаОтделения) Тогда
			
			ПолученныйЭлементДанных.Тип = НСтр("ru = 'Отделение'");
			Если ЗаполнитьНаименованиеПоТипу Тогда
				ПолученныйЭлементДанных.Наименование = ПолученныйЭлементДанных.НаименованиеТипаОтделения;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ПолученныйЭлементДанных.НаименованиеТипаАмбулаторногоКабинета) Тогда
			
			ПолученныйЭлементДанных.Тип = НСтр("ru = 'Кабинет'");
			Если ЗаполнитьНаименованиеПоТипу Тогда
				ПолученныйЭлементДанных.Наименование = ПолученныйЭлементДанных.НаименованиеТипаАмбулаторногоКабинета;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ПолученныйЭлементДанных.НаименованиеТипаДиагностическогоКабинета) Тогда
			
			ПолученныйЭлементДанных.Тип = НСтр("ru = 'Кабинет'");
			Если ЗаполнитьНаименованиеПоТипу Тогда
				ПолученныйЭлементДанных.Наименование = ПолученныйЭлементДанных.НаименованиеТипаДиагностическогоКабинета;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеКлассификатора.Добавить(ПолученныйЭлементДанных);
		
	КонецЦикла;
	
	СопоставитьДанныеКлассификатора_Отделения(ДанныеКлассификатора);
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДобавитьЭлементДанныхКлассификатора_Отделения(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата)
	
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		
		ЗагружаемоеЗначениеВКолонке = ЗагружаемыйЭлементДанных[КлючИЗначение.Значение.Индекс];
		
		Если ЗагружаемоеЗначениеВКолонке.column = КлючИЗначение.Значение.Имя Тогда
			ПолученныйЭлементДанных[КлючИЗначение.Ключ] = ПривестиКВнутреннемуТипу(ЗагружаемоеЗначениеВКолонке.value, КлючИЗначение.Значение.Тип.Типы()[0]);
		Иначе
			ВызватьИсключение НСтр("ru = 'Структура загружаемых данных не поддерживается. Выберите другую версию классификатора.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СопоставитьДанныеКлассификатора_Отделения(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.КодOID           КАК ИдентификаторПодразделения,
	|	Данные.Владелец.КодOID  КАК ИдентификаторОрганизации,
	|	Данные.Ссылка           КАК Подразделение,
	|	Данные.Владелец         КАК Организация,
	|	Данные.ПометкаУдаления  КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.КодOID                           КАК Идентификатор,
	|	Данные.Владелец.КодOID                  КАК ИдентификаторОрганизации,
	|	Данные.ПодразделениеОрганизации.КодOID  КАК ИдентификаторПодразделения,
	|	Данные.НаименованиеПолное               КАК Наименование,
	|	Данные.Ссылка                           КАК Ссылка,
	|	Данные.Владелец                         КАК Организация,
	|	Данные.ПодразделениеОрганизации         КАК Подразделение,
	|	Данные.ПометкаУдаления                  КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ОтделенияОрганизаций КАК Данные
	|");
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеСправочникаПодразделенияОрганизаций = Результаты[0].Выгрузить();
	ДанныеСправочникаОтделенияОрганизаций     = Результаты[1].Выгрузить();
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		// 1. Поиск загружаемого вышестоящего подразделения.
		Отбор = Новый Структура("ИдентификаторПодразделения, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок <> 1 Тогда
			
			ЭлементДанных.ЗагрузкаДоступна = Ложь;
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация       = НСтр("ru = 'В информационной базе существует несколько подразелений с одинаковыми значениями реквизитов ""Код OID"".'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'В следствии чего невозможно однозначно определить значение для заполнения реквизита ""Подразделение"" отделения.'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе не существует подразелений с загружаемыми значениями реквизитов ""Код OID"" и ""Код OID"" организации подразделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'В следствии чего невозможно заполнить реквизит ""Подразделение"" отделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ОтделениеУпразднено = ЗначениеЗаполнено(ЭлементДанных.ДатаУпразднения);
		
		ЭлементДанных.Организация   = НайденныеСтроки[0].Организация;
		ЭлементДанных.Подразделение = НайденныеСтроки[0].Подразделение;
		
		// 2. Поиск отделений по идентификатору.
		Отбор = Новый Структура("Идентификатор");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаОтделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько отделений с одинаковыми реквизитами ""Код OID"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				
				Если ОтделениеУпразднено Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если НайденныеСтроки[0].ИдентификаторОрганизации   = ЭлементДанных.ИдентификаторОрганизации
						И НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения
						И НайденныеСтроки[0].Наименование               = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации   = ЭлементДанных.ИдентификаторОрганизации
							И НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации
							И НайденныеСтроки[0].Наименование             = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Подразделение"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Подразделение"".'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Подразделение"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Подразделение"".'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значений реквизитов ""Подразделение"" и ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значений реквизитов ""Подразделение"" и ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения
							И НайденныеСтроки[0].Наименование               = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Подразделение"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Подразделение"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"", ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"", ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 3. Поиск отделения по наименованию, идентификатору вышестоящего подразделения и организации.
		Отбор = Новый Структура("Наименование, ИдентификаторПодразделения, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		Отбор.Вставить("Идентификатор", "");
		НайденныеСтроки = ДанныеСправочникаОтделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько отделений с одинаковыми значениями реквизитов ""Код OID"" организации отделения, ""Код OID"" вышестоящего подразделения отделения и ""Наименование"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				
				Если ОтделениеУпразднено Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к заполнению реквизита ""Код OID"".'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и заполнению реквизита ""Код OID"".'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 4. Отделение не найдено.
		Если ОтделениеУпразднено Тогда
			
			ЭлементДанных.ЗагрузкаДоступна = Ложь;
			ЭлементДанных.Информация       = НСтр("ru = 'Получена дата упразднения отделения.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Элемент справочника не найден в информационной базе.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
			
		Иначе
			
			ЭлементДанных.ЗагрузкаДоступна = Истина;
			ЭлементДанных.Информация       = НСтр("ru = 'Загрузка приведет к созданию нового элемента справочника.'");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_Отделения

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Должности ФРМР"
#Область ПолучениеДанныхКлассификатора_ДолжностиФРМР

Функция ТипКлассификатора_Должности() Экспорт
	
	Возврат "Должности";
	
КонецФункции

Функция СтруктураДанныхКлассификатора_Должности()
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"                          , 0);
	ДанныеКлассификатора.Вставить("Версия"                              , "");
	
	ДанныеКлассификатора.Вставить("КодДолжности"                        , "");
	ДанныеКлассификатора.Вставить("КодРодителя"                         , "");
	ДанныеКлассификатора.Вставить("Должность"                           , "");
	ДанныеКлассификатора.Вставить("ДолжностьМедицинская"                , Ложь);
	ДанныеКлассификатора.Вставить("ОкончаниеДействия"                   , Дата(1,1,1));
	ДанныеКлассификатора.Вставить("КодПоФорме30"                        , "");
	ДанныеКлассификатора.Вставить("ТребуетсяНаличиеСертификата"         , Ложь);
	ДанныеКлассификатора.Вставить("ДолжностьОбразовательногоУчреждения" , Ложь);
	ДанныеКлассификатора.Вставить("ДолжностьПодсистемыЗемскийДоктор"    , Ложь);
	ДанныеКлассификатора.Вставить("ОтображениеВШтатномРасписании"       , Ложь);
	ДанныеКлассификатора.Вставить("ФедеральныйКод"                      , "");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_Должности()
	
	// Формат полей файла должностей Минздрава.
	// 1) id, Код , Целочисленный, уникальный идентификатор записи, числовой формат, целое число, обязательное поле;
	// 2) parent_id, Код родительской записи , Целочисленный, позволяет проследить иерархическую структуру данного справочника, числовой формат, целое число;
	// 3) work_position, Должность медицинского персонала, Строчный, текстовый формат;
	// 4) med, Признак медицинской должности , Целочисленный, признак требуется наличие сертификата, числовой формат, целое число. Значения: 1 – true, 0 – false;
	// 5) date_end, Дата окончания действия, Дата, формат дата/время;
	// 6) form_30, Код строки по форме №30 , Целочисленный, числовой формат, целое число;
	// 7) need_cert, Признак требуется наличие сертификата , Целочисленный, числовой формат, целое число. Значения: 1 – true, 0 – false;
	// 8) educ, Признак должности образовательного учреждения , Целочисленный, числовой формат, целое число. Значения: 1 – true, 0 – false;
	// 9) zs, Признак наличия должности в подсистеме Земский доктор/фельдшер, Целочисленный, числовой формат, целое число. Значения: 1 – true, 0 – false;
	// 10) show_staff_list, Признак отображения в штатном расписании, Целочисленный, числовой формат, целое число. Значения: 1 – true, 0 – false;
	// 11) federal_code, Код из справочника 1.2.643.5.1.13.13.11.1002, Целочисленный, числовой формат, целое число.
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("КодДолжности"                         , Новый Структура("Индекс, Имя, Тип", 0, "id", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("КодРодителя"                          , Новый Структура("Индекс, Имя, Тип", 1, "parent_id", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Должность"                            , Новый Структура("Индекс, Имя, Тип", 2, "work_position", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("ДолжностьМедицинская"                 , Новый Структура("Индекс, Имя, Тип", 3, "med", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ОкончаниеДействия"                    , Новый Структура("Индекс, Имя, Тип", 4, "date_end", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	СоответствияФормата.Вставить("КодПоФорме30"                         , Новый Структура("Индекс, Имя, Тип", 5, "form_30", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ТребуетсяНаличиеСертификата"          , Новый Структура("Индекс, Имя, Тип", 6, "need_cert", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ДолжностьОбразовательногоУчреждения"  , Новый Структура("Индекс, Имя, Тип", 7, "educ", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ДолжностьПодсистемыЗемскийДоктор"     , Новый Структура("Индекс, Имя, Тип", 8, "zs", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ОтображениеВШтатномРасписании"        , Новый Структура("Индекс, Имя, Тип", 9, "show_staff_list", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ФедеральныйКод"                       , Новый Структура("Индекс, Имя, Тип", 10, "federal_code", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ТаблицаДанныхКлассификатораДолжностейМинздрава()
	
	Должности = Новый ТаблицаЗначений;
	Должности.Колонки.Добавить("КлючСтроки");
	Должности.Колонки.Добавить("Версия");
	
	ОписаниеПолей = СоответствияФорматаДанных_Должности();
	Для каждого ТекущееПоле Из ОписаниеПолей Цикл
		Должности.Колонки.Добавить(ТекущееПоле.Ключ, ТекущееПоле.Значение.Тип);
	КонецЦикла;
	
	Должности.Индексы.Добавить("КодДолжности");
	Возврат Должности;
	
КонецФункции

Функция ПолучитьДанныеКлассификатора_Должности(Параметры, ЗагружаемыеДанные)
	
	ДанныеКлассификатора = ТаблицаДанныхКлассификатораДолжностейМинздрава();
	
	СоответствияФормата = СоответствияФорматаДанных_Должности();
	
	Смещение = Параметры.РазмерСтраницы * (Параметры.НомерСтраницы - 1);
	Для Индекс = 0 По ЗагружаемыеДанные.ВГраница() Цикл
		
		ЗагружаемыйЭлементДанных = ЗагружаемыеДанные[Индекс];
		
		ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_Должности();
		ПолученныйЭлементДанных.КлючСтроки  = Индекс + Смещение;
		ПолученныйЭлементДанных.Версия      = Параметры.ВерсияДанныхКлассификатора;
		
		ДобавитьЭлементДанныхКлассификатора_Должности(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата);
		
		ЗаполнитьЗначенияСвойств(ДанныеКлассификатора.Добавить(), ПолученныйЭлементДанных);
	
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДобавитьЭлементДанныхКлассификатора_Должности(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата)
	
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		
		ЗагружаемоеЗначениеВКолонке = ЗагружаемыйЭлементДанных[КлючИЗначение.Значение.Индекс];
		
		Если ЗагружаемоеЗначениеВКолонке.column = КлючИЗначение.Значение.Имя Тогда
			ПолученныйЭлементДанных[КлючИЗначение.Ключ] = ПривестиКВнутреннемуТипу(ЗагружаемоеЗначениеВКолонке.value, КлючИЗначение.Значение.Тип.Типы()[0]);
		Иначе
			ВызватьИсключение НСтр("ru = 'Структура загружаемых данных не поддерживается. Выберите другую версию классификатора.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_Должности

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Должности 1002"
#Область ПолучениеДанныхКлассификатора_Должности1002

Функция ТипКлассификатора_Должности1002() Экспорт
	
	Возврат "Должности1002";
	
КонецФункции

Функция СтруктураДанныхКлассификатора_Должности1002()
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"                          , 0);
	ДанныеКлассификатора.Вставить("Версия"                              , "");
	
	ДанныеКлассификатора.Вставить("КодДолжности"                        , "");
	ДанныеКлассификатора.Вставить("КодРодителя"                         , "");
	ДанныеКлассификатора.Вставить("НомерСтрокиДляСортировки"            , "");
	ДанныеКлассификатора.Вставить("Должность"                           , "");
	ДанныеКлассификатора.Вставить("ДолжностьПротивоположныйПол"         , "");
	ДанныеКлассификатора.Вставить("ПризнакСоответствияНПА"              ,  "");
	ДанныеКлассификатора.Вставить("ПризнакГруппировочныхЗаписей"        , Ложь);
	ДанныеКлассификатора.Вставить("КодПоОтчетнойСтатистическойФорме30"  , "");
	ДанныеКлассификатора.Вставить("ПризнакАктуальностиЗаписи"           , Ложь);
	ДанныеКлассификатора.Вставить("ДатаОкончанияДействияЗаписи"         , "");
	ДанныеКлассификатора.Вставить("Комментарий"                         , "");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_Должности1002()
	
	// Формат полей файла должностей Минздрава.
	//1) ID, Код, Целочисленный, уникальный идентификатор записи, числовой формат, обязательное поле;
	//2) PID, Код родительской записи , Целочисленный, позволяет проследить иерархическую структуру данного справочника, числовой формат;
	//3) SORT, Номер строки, Целочисленный, код, используемый для сортировки записей в иерархическом порядке, числовой формат, обязательное поле;
	//4) NAME, Название, Строчный, название, определяющее должность работника или группу должностей определенного вида, текстовый формат, обязательное поле;
	//5) EQUIVALENT, Синоним, Строчный, эквивалентное название должности, используемое для указания должности работника противоположного пола, текстовый формат, не обязательное поле;
	//6) NORMATIVE, Признак соответствия НПА, Целочисленный, признак, отражающий регулирование должности нормативно-правовым актом (НПА), (соответствия: 
	//	1 - Приказ МЗ РФ от 20.12.2012 № 1183н, 
	//	2 - Постановление Правительства РФ от 08.08.2013 № 678, 
	//	3 - Приказ Минздравсоцразвития РФ от 11.01.2011 № 1н, 
	//	4 - Приказ Минздравсоцразвития РФ от 03.07.2008 № 305н, 
	//	5 - Постановление Минтруда РФ от 21.08.1998 № 37), числовой формат, необязательное поле.;
	//7) GROUP, Признак группировочных записей, Целочисленный, признак группировочных (родительских) записей справочника, числовой формат. Если значение признака = 1, то данная запись является родительской и в непосредственной работе не используются;
	//8) FORM_30, Код по отчетной статистической Форме № 30 , Целочисленный, используется для сопоставления кодов справочника с кодами отчетной формы №30 (Раздел II. «Штаты медицинской организации», табл. 1 «Должности и физические лица медицинской организации (1100)»);
	//9) ACTUAL, Признак актуальности записи, Целочисленный, (1 – запись актуальна, 0 – запись не используется), числовой формат, обязательное поле;
	//10) DATA_END, Дата окончания действия записи, Строчный, соответствует дате соответствующего приказа, текстовый формат;
	//11) COMMENT, Комментарий, Строчный, для записи комментариев, не обязательное поле, текстовый формат;
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("КодДолжности"                         , Новый Структура("Индекс, Имя, Тип", 0, "ID", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("КодРодителя"                          , Новый Структура("Индекс, Имя, Тип", 1, "PID", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("НомерСтрокиДляСортировки"             , Новый Структура("Индекс, Имя, Тип", 2, "SORT", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Должность"                            , Новый Структура("Индекс, Имя, Тип", 3, "NAME", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("ДолжностьПротивоположныйПол"          , Новый Структура("Индекс, Имя, Тип", 4, "EQUIVALENT", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("ПризнакСоответствияНПА"               , Новый Структура("Индекс, Имя, Тип", 5, "NORMATIVE", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ПризнакГруппировочныхЗаписей"         , Новый Структура("Индекс, Имя, Тип", 6, "GROUP", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("КодПоОтчетнойСтатистическойФорме30"   , Новый Структура("Индекс, Имя, Тип", 7, "FORM_30", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ПризнакАктуальностиЗаписи"            , Новый Структура("Индекс, Имя, Тип", 8, "ACTUAL", Новый ОписаниеТипов("Булево")));
	СоответствияФормата.Вставить("ДатаОкончанияДействияЗаписи"          , Новый Структура("Индекс, Имя, Тип", 9, "DATA_END", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Комментарий"                          , Новый Структура("Индекс, Имя, Тип", 10, "COMMENT", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ТаблицаДанныхКлассификатораДолжностейМинздрава1002()
	
	Должности = Новый ТаблицаЗначений;
	Должности.Колонки.Добавить("КлючСтроки");
	Должности.Колонки.Добавить("Версия");
	
	ОписаниеПолей = СоответствияФорматаДанных_Должности1002();
	Для каждого ТекущееПоле Из ОписаниеПолей Цикл
		Должности.Колонки.Добавить(ТекущееПоле.Ключ, ТекущееПоле.Значение.Тип);
	КонецЦикла;
	
	Должности.Индексы.Добавить("КодДолжности");
	Возврат Должности;
	
КонецФункции

Функция ПолучитьДанныеКлассификатора_Должности1002(Параметры, ЗагружаемыеДанные)
	
	ДанныеКлассификатора = ТаблицаДанныхКлассификатораДолжностейМинздрава1002();
	
	СоответствияФормата = СоответствияФорматаДанных_Должности1002();
	
	Смещение = Параметры.РазмерСтраницы * (Параметры.НомерСтраницы - 1);
	Для Индекс = 0 По ЗагружаемыеДанные.ВГраница() Цикл
		
		ЗагружаемыйЭлементДанных = ЗагружаемыеДанные[Индекс];
		
		ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_Должности1002();
		ПолученныйЭлементДанных.КлючСтроки  = Индекс + Смещение;
		ПолученныйЭлементДанных.Версия      = Параметры.ВерсияДанныхКлассификатора;
		
		ДобавитьЭлементДанныхКлассификатора_Должности1002(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата);
		
		ЗаполнитьЗначенияСвойств(ДанныеКлассификатора.Добавить(), ПолученныйЭлементДанных);
		
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДобавитьЭлементДанныхКлассификатора_Должности1002(ЗагружаемыйЭлементДанных, ПолученныйЭлементДанных, СоответствияФормата)
	
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		
		ЗагружаемоеЗначениеВКолонке = ЗагружаемыйЭлементДанных[КлючИЗначение.Значение.Индекс];
		
		Если ЗагружаемоеЗначениеВКолонке.column = КлючИЗначение.Значение.Имя Тогда
			ПолученныйЭлементДанных[КлючИЗначение.Ключ] = ПривестиКВнутреннемуТипу(ЗагружаемоеЗначениеВКолонке.value, КлючИЗначение.Значение.Тип.Типы()[0]);
		Иначе
			ВызватьИсключение НСтр("ru = 'Структура загружаемых данных не поддерживается. Выберите другую версию классификатора.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_Должности

#КонецОбласти // ПолучениеДанныхКлассификаторов

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных классификатора
#Область ЗагрузкаДанныхКлассификаторов

Функция ПараметрыЗагрузки_ДанныеКлассификатора(ТипКлассификатора, ДанныеКлассификатора) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипКлассификатора"   , ТипКлассификатора);
	Параметры.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Структурные подразделения"
#Область ЗагрузкаДанныхКлассификатора_СтруктурныеПодразделения

Процедура ЗагрузитьДанныеКлассификатора_СтруктурныеПодразделения(СтрокаКлассификатора, Статусы)
	
	Попытка
		
		ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
		
		Ликвидация = ЗначениеЗаполнено(СтрокаКлассификатора.ДатаЛиквидации);
		
		Если Не ЭлементЗагружен И Ликвидация Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементЗагружен Тогда
			ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
		Иначе
			ЭлементКлассификатораОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		КонецЕсли;
		
		Если Не Ликвидация Тогда
			ЭлементКлассификатораОбъект.Владелец        = СтрокаКлассификатора.Организация;
			ЭлементКлассификатораОбъект.КодOID          = СтрокаКлассификатора.Идентификатор;
			ЭлементКлассификатораОбъект.ПометкаУдаления = Ложь;
			Если ЗначениеЗаполнено(СтрокаКлассификатора.Наименование) Тогда
				ЭлементКлассификатораОбъект.Наименование       = СтрокаКлассификатора.Наименование;
				ЭлементКлассификатораОбъект.НаименованиеПолное = СтрокаКлассификатора.Наименование;
			КонецЕсли;
		Иначе
			ЭлементКлассификатораОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.Записать();
		ЭлементКлассификатораОбъект.Разблокировать();
		
		СтрокаКлассификатора.Ссылка          = ЭлементКлассификатораОбъект.Ссылка;
		СтрокаКлассификатора.ПометкаУдаления = ЭлементКлассификатораОбъект.ПометкаУдаления;
		
		Если Ликвидация Тогда
			СтрокаКлассификатора.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
		Иначе
			СтрокаКлассификатора.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
		Если Не ЭлементЗагружен Тогда
			Статусы.Создано = Статусы.Создано + 1;
		ИначеЕсли Ликвидация Тогда
			Статусы.ПомеченоНаУдаление = Статусы.ПомеченоНаУдаление + 1;
		Иначе
			Статусы.Обновлено = Статусы.Обновлено + 1;
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Загрузка классификатора ""Структурные подразделения""'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать подразделение ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Наименование);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЖурналаРегистрации, ИмяСобытия,, УровеньЖурналаРегистрации.Ошибка);
		Статусы.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхКлассификатора_СтруктурныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// Классификатор "Отделения"
#Область ЗагрузкаДанныхКлассификатора_Отделения

Процедура ЗагрузитьДанныеКлассификатора_Отделения(СтрокаКлассификатора, Статусы)
	
	Попытка
		
		ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
		
		Упразднение = ЗначениеЗаполнено(СтрокаКлассификатора.ДатаУпразднения);
		
		Если Не ЭлементЗагружен И Упразднение Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементЗагружен Тогда
			ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
		Иначе
			ЭлементКлассификатораОбъект = Справочники.ОтделенияОрганизаций.СоздатьЭлемент();
		КонецЕсли;
		
		Если Не Упразднение Тогда
			ЭлементКлассификатораОбъект.Владелец                 = СтрокаКлассификатора.Организация;
			ЭлементКлассификатораОбъект.ПодразделениеОрганизации = СтрокаКлассификатора.Подразделение;
			ЭлементКлассификатораОбъект.КодOID                   = СтрокаКлассификатора.Идентификатор;
			ЭлементКлассификатораОбъект.ПометкаУдаления          = Ложь;
			Если ЗначениеЗаполнено(СтрокаКлассификатора.Наименование) Тогда
				ЭлементКлассификатораОбъект.Наименование       = СтрокаКлассификатора.Наименование;
				ЭлементКлассификатораОбъект.НаименованиеПолное = СтрокаКлассификатора.Наименование;
			КонецЕсли;
		Иначе
			ЭлементКлассификатораОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.Записать();
		ЭлементКлассификатораОбъект.Разблокировать();
		
		СтрокаКлассификатора.Ссылка          = ЭлементКлассификатораОбъект.Ссылка;
		СтрокаКлассификатора.ПометкаУдаления = ЭлементКлассификатораОбъект.ПометкаУдаления;
		
		Если Упразднение Тогда
			СтрокаКлассификатора.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
		Иначе
			СтрокаКлассификатора.Информация = НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
		Если Не ЭлементЗагружен Тогда
			Статусы.Создано = Статусы.Создано + 1;
		ИначеЕсли Упразднение Тогда
			Статусы.ПомеченоНаУдаление = Статусы.ПомеченоНаУдаление + 1;
		Иначе
			Статусы.Обновлено = Статусы.Обновлено + 1;
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Загрузка классификатора ""Отделения""'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать отделение ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Наименование);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЖурналаРегистрации, ИмяСобытия,, УровеньЖурналаРегистрации.Ошибка);
		Статусы.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхКлассификатора_Отделения

#КонецОбласти // ЗагрузкаДанныхКлассификаторов

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция ПривестиКВнутреннемуТипу(ТекстЗначения, ТипЗначения)
	
	Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения);
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = ПреобразоватьСтрокуВДату(ТекстЗначения);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Попытка
			Значение = Булево(ТекстЗначения);
		Исключение
			Значение = ЗначениеЗаполнено(ТекстЗначения);
		КонецПопытки;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) И ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗначения) = "Перечисление" Тогда
		Значение = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОписаниеТипа.ПривестиЗначение()).Получить(Число(ТекстЗначения) - 1);
	Иначе
		Значение = ОписаниеТипа.ПривестиЗначение(ТекстЗначения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПреобразоватьСтрокуВДату(СтрокаДаты) Экспорт
	
	Результат = '00010101';
	ОписаниеДата = Новый ОписаниеТипов("Дата");
	
	Если Не ПустаяСтрока(СтрокаДаты) Тогда
		Результат = ОписаниеДата.ПривестиЗначение(СтрокаДаты);
		Если Не ЗначениеЗаполнено(Результат) Тогда //Дата не в каноническом виде, будем преобразовывать самостоятельно
			СтрокаРазделителей = ".-/\T+:MSK";
			СтрокаЧисел = "0123456789";
			ДлинаСтроки = СтрДлина(СтрокаДаты);
			МассивЧастейДаты = Новый Массив;
			ВременнаяСтрока = "";
			КоличествоЧастейДаты = 0;
			Для Сч = 1 По ДлинаСтроки Цикл
				СимволСтроки = Сред(СтрокаДаты, Сч, 1);
				Если Найти(СтрокаЧисел, СимволСтроки) Тогда
					ВременнаяСтрока = ВременнаяСтрока + СимволСтроки;
				ИначеЕсли Найти(СтрокаРазделителей, СимволСтроки) Тогда
					Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
						МассивЧастейДаты.Добавить(ВременнаяСтрока);
						ВременнаяСтрока = "";
						КоличествоЧастейДаты = КоличествоЧастейДаты + 1;
					КонецЕсли;
				Иначе
					МассивЧастейДаты.Очистить();
					Прервать; //неверный формат даты
				КонецЕсли;
				Если КоличествоЧастейДаты = 6 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
				МассивЧастейДаты.Добавить(ВременнаяСтрока);
			КонецЕсли;
			Если МассивЧастейДаты.Количество() = 3 Тогда
				Если СтрДлина(МассивЧастейДаты[0]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[0], МассивЧастейДаты[1], МассивЧастейДаты[2]);
				ИначеЕсли СтрДлина(МассивЧастейДаты[2]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				Иначе
					Результат = ПолучитьДату("20" + МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				КонецЕсли;
			ИначеЕсли МассивЧастейДаты.Количество() = 6 Тогда
				Если СтрДлина(МассивЧастейДаты[0]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[0], МассивЧастейДаты[1], МассивЧастейДаты[2], МассивЧастейДаты[3], МассивЧастейДаты[4], МассивЧастейДаты[5]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДату(Год, Месяц, День, Час = 0, Минута = 0, Секунда = 0)
	
	Попытка
		Результат = Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
		Результат = '00010101';
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Знач Комментарий, Знач Событие = "", Знач Данные = Неопределено, Знач Уровень = Неопределено) Экспорт
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(Событие),
		Уровень,
		,
		Данные,
		Комментарий);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации(Уточнение = "")
	
	Событие = НСтр("ru = 'Обмен с сервисом Минздрава РФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(Уточнение) Тогда
		Событие = Событие + "." + Уточнение;
	КонецЕсли;
	Возврат Событие;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

// (см. процедуру ОбновлениеИнформационнойБазыБольничнаяАптека.ОперативныеОбработчики)
//
Процедура ОбновитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФНеразделенно(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления.Свойство("РазделенныеОбработчики") Тогда
		
		Обработчик = ПараметрыОбновления.РазделенныеОбработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ОбменССервисомМинздраваРФ.ОбновитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ";
		Обработчик.МонопольныйРежим = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// (см. процедуру ОбновлениеИнформационнойБазыБольничнаяАптека.ОперативныеОбработчики)
//
Процедура ОбновитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ(ПараметрыОбновления = Неопределено) Экспорт
	
	// ПараметрыОбновления.МонопольныйРежим = Истина устанавливать не нужно.
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ.Получить().Получить();
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("ФиксированнаяСтруктура") Тогда
		Константа = Константы.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ;
		Менеджер = Константа.СоздатьМенеджерЗначения();
		Константа.Установить(Менеджер.ЗначениеПоУмолчанию());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти