
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Компоновка данных
#Область КомпоновкаДанных

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - макет компоновки данных, из которого требуется получить запрос.
//  ИмяНабораДанных - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//  Запрос, сформированный на основании макета компоновки
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт
	
	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);
	
	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - схема компоновки данных, для которой получается макет компоновки
//  Настройки - настройки компоновки, применяемые к схеме
//
// Возвращаемое значение:
//  Макет компоновки данных
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
КонецФункции

// Удаляет отбор из настроек и пользовательских настроек отчета.
// Если переданы настройки компоновки данных, то только из них.
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных.
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		ЭлементПользовательскихНастроек = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		Иначе
			Для Каждого ЭлементНастроек Из ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
					ЭлементыПользовательскихОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ЭлементНастроек, ИмяЭлемента);
					Для Каждого ЭлементПользовательскогоОтбора Из ЭлементыПользовательскихОтборов Цикл
						ЭлементНастроек.Элементы.Удалить(ЭлементПользовательскогоОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - КоллекцияПолейГруппировкиКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт
	
	ЧастиИмени = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	
	ТекущееИмя = ЧастиИмени[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВерхняяГраница = ЧастиИмени.ВГраница();
	Для Индекс = 1 По ВерхняяГраница Цикл
		ТекущееИмя = ТекущееИмя + "." + ЧастиИмени[Индекс];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;
	
КонецФункции

#КонецОбласти // КомпоновкаДанных

////////////////////////////////////////////////////////////////////////////////
// Работа с метаданными
#Область РаботаСМетаданными

// Позволяет определить есть ли среди реквизитов объекта
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеОбъекта - объект описания метаданных (документа, справочника, ...),
//                      среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СвойстваОбъекта = Новый Структура("СтандартныеРеквизиты");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, МетаданныеОбъекта);
	
	Если СвойстваОбъекта.СтандартныеРеквизиты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоСтандартныйРеквизит(СвойстваОбъекта.СтандартныеРеквизиты, ИмяРеквизита);
	
КонецФункции

// Позволяет определить есть ли среди реквизитов табличной части объекта
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита.
//  МетаданныеОбъекта - объект описания метаданных объекта, среди реквизитов которого производится поиск.
//  ИмяТабличнойЧасти  - строковое имя табличной части объекта, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита, МетаданныеОбъекта, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	Возврат ТабличнаяЧасть <> Неопределено И ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ТабличнаяЧасть);
	
КонецФункции

// Функция возвращает имя табличной части, к которой принадлежит переданная строка
//
// Параметры:
//  СтрокаТабличнойЧасти - ссылка на строку табличной части
//
// Возвращаемое значение:
//   Строка - имя табличной части, как оно задано в конфигураторе
//
Функция ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
КонецФункции

// Функция возвращает метаданные документа, которому принадлежит переданная строка
//
// Параметры:
//  СтрокаТабличнойЧасти - ссылка на строку табличной части
//
// Возвращаемое значение:
//   Метаданные - метаданные документа, как оно задано в конфигураторе
//
Функция ПолучитьМетаданныеДокументаПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();
	
КонецФункции

// Возвращает представления типов
//
Функция ПолучитьПредставленияТипов(Типы) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	ТипыОбъекта = Типы;
	
	Для Каждого ТипОбъекта Из ТипыОбъекта Цикл
		
		ОбъектСсылка = Новый(ТипОбъекта);
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипОбъекта);
		Представление = ОбъектСсылка.Метаданные().ПредставлениеОбъекта;
		
		Если ПустаяСтрока(Представление) Тогда
			Представление = ОбъектСсылка.Метаданные().Синоним;
		КонецЕсли;
		
		СписокТипов.Добавить(ВидОбъекта + "." + ОбъектСсылка.Метаданные().Имя, Представление);
	КонецЦикла;
	
	СписокТипов.СортироватьПоПредставлению();
	
	Возврат СписокТипов;
	
КонецФункции

// Формирует массив имен измерений регистра сведений
//
Функция ИменаИзмеренийРегистраСведений(ИмяРегистра, ВключитьСПрефиксомУдалить = Ложь) Экспорт
	
	Регистр = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	Если Регистр = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неправильно указано имя регистра сведений ""%ИмяРегистра%""'");
		ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%ИмяРегистра%", ИмяРегистра);
	КонецЕсли;
	
	ИменаИзмерений = Новый Массив;
	Для Каждого Измерение Из Регистр.Измерения Цикл
		Если ВключитьСПрефиксомУдалить Или Не СтрНачинаетсяС(Измерение.Имя, "Удалить") Тогда
			ИменаИзмерений.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаИзмерений;
	
КонецФункции

// Возвращает представление объекта, заданное в метаданных объекта
//
// Параметры:
//  ОбъектМетаданныхИлиИмя - ОбъектМетаданных, Строка - Объект метаданных или полное имя объекта
//                                                      для которого нужно получить представление.
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеОбъекта(ОбъектМетаданныхИлиИмя) Экспорт
	
	МетаданныеОбъекта = ?(ТипЗнч(ОбъектМетаданныхИлиИмя) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ОбъектМетаданныхИлиИмя), ОбъектМетаданныхИлиИмя);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
	
КонецФункции

#КонецОбласти // РаботаСМетаданными

////////////////////////////////////////////////////////////////////////////////
// Работа со статусами документов
#Область Статусы

// Определяет использование статусов
//
// Параметры:
//  Ссылка - ОбъектСсылка - ссылка для которой определяется использование статусов
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользоватьСтатусы(Ссылка) Экспорт
	
	МетаданныеСсылки = Ссылка.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Статус", МетаданныеСсылки) Тогда
		Возврат ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеСсылки.Реквизиты.Статус)
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Изменяет статус переданных объектов
//
Функция УстановитьСтатусОбъектов(Знач Объекты, Знач НовыйСтатус, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Объекту %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Объект %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	// Получение соответствие типов документов из массива документов разных типов
	ТипЗначения = ТипЗнч(Объекты);
	Если ТипЗначения = Тип("Массив") Или ТипЗначения = Тип("ФиксированныйМассив") Тогда
		СписокОбъектов = Объекты;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объекты)) Тогда
		СписокОбъектов = Новый Массив;
		СписокОбъектов.Добавить(Объекты);
	Иначе
		СписокОбъектов = Объекты;
	КонецЕсли;
	СоответствиеТипов = РазложитьМассивСсылокПоТипам(СписокОбъектов);
	
	КоличествоОбработанных = 0;
	Для Каждого СоставОбъектов Из СоответствиеТипов Цикл
		
		// Получение менеджера документов данного типа
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СоставОбъектов.Ключ);
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставОбъектов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерОбъектов.СформироватьЗапросПроверкиПриСменеСтатуса(МассивСсылок, НовыйСтатус, ДополнительныеПараметры);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Выборка.СтатусСовпадает Тогда
				
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			// Проверки уникальные для каждого из типов документов
			Если Не МенеджерОбъектов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Если Выборка.ЗаписьПроведением Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Объект.Записать();
				КонецЕсли;
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Проверяет возможность ручного изменения статуса объекта
//
// Параметры:
//  ОбъектСсылка - ссылка на проверяемый объект
//
// Возвращаемое значение:
//  Истина - разрешено ручное изменение
//
Функция РазрешеноРучноеИзменениеСтатусаОбъекта(ОбъектСсылка) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектСсылка);
	Возврат ВыполнитьНеобязательныйМетодОбъекта(Менеджер, "РазрешеноРучноеИзменениеСтатуса",, Истина, Истина);
	
КонецФункции

#КонецОбласти // Статусы

////////////////////////////////////////////////////////////////////////////////
// Процедуры отбора по актуальности
#Область ОтборПоАктуальности

// Устанавливает в форме списка документов отбор по актуальности
//
// Параметры:
//  Список       - ДинамическийСписок - список, в котором необходимо установить отбор
//  Актуальность - Строка - строка отбора по актуальности
//
Процедура УстановитьОтборВСпискеПоАктуальности(Список, Актуальность) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"Просрочен",
		Актуальность = НСтр("ru='Просрочен'"),
		ВидСравненияКомпоновкиДанных.Равно,,
		Актуальность = НСтр("ru='Не просрочен'") ИЛИ Актуальность = НСтр("ru='Просрочен'"));
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по дате события
//
// Параметры:
//  Список      - ДинамическийСписок - список, в котором необходимо установить отбор
//  ДатаСобытия - Дата - дата, на которую документ будет просрочен
//
Процедура УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия) Экспорт
	
	ВидСравненияДатыСобытия = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru='Отбор по дате события'"), 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияДатыСобытия,
		ДатаСобытия,,
		ЗначениеЗаполнено(ДатаСобытия));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Дата(1,1,1),,
		ЗначениеЗаполнено(ДатаСобытия));
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности
//
// Параметры:
//  Список       - ДинамическийСписок - список, в котором необходимо установить отбор
//  Актуальность - Строка - строка отбора по актуальности
//  ДатаСобытия  - Дата - дата, на которую документы считаются неактуальными
//
Процедура ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия) Экспорт
	
	Если Не ЗначениеЗаполнено(Актуальность) Тогда
		ДатаСобытия      = Дата(1,1,1);
	ИначеЕсли Актуальность = НСтр("ru = 'Сегодня'") Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	ИначеЕсли Актуальность = НСтр("ru = 'Завтра'") Тогда
		ДатаСобытия = ТекущаяДатаСеанса() + 86400;
	ИначеЕсли Актуальность = НСтр("ru = 'Послезавтра'") Тогда
		ДатаСобытия = ТекущаяДатаСеанса() + 2*86400;
	ИначеЕсли Актуальность = НСтр("ru = 'Через неделю'") Тогда
		ДатаСобытия = ТекущаяДатаСеанса() + 7*86400;
	// Отрабатываем старые значения, из сохранившихся настроек
	ИначеЕсли Актуальность = "Все" Или СтрНайти(Актуальность, НСтр("ru = 'Истекающие на'")) > 0 Тогда
		Актуальность = "";
		ДатаСобытия  = Дата(1,1,1);
	ИначеЕсли Актуальность = НСтр("ru = 'Просроченные'") Тогда
		Актуальность = НСтр("ru = 'Просрочен'");
		ДатаСобытия  = Дата(1,1,1);
	ИначеЕсли Актуальность = НСтр("ru = 'Не просроченные'") Тогда
		Актуальность = НСтр("ru = 'Не просрочен'");
		ДатаСобытия  = Дата(1,1,1);
	КонецЕсли;
	
	УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
	УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия);
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности.
//
// Параметры:
//  Список               - ДинамическийСписок - список, в котором необходимо установить отбор
//  Актуальность         - Строка - строка отбора по актуальности
//  ДатаАктуальности     - Дата - дата, на которую документы считаются неактуальными
//  ДатаСобытия          - Дата - дата, на которую документ будет просрочен
//  СтандартнаяОбработка - Булево - флаг выполнения стандартной обработки при очистке значения поля
//
Процедура ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Актуальность) Тогда
		Актуальность = "";
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список выбора для отбора по актуальности
//
// Параметры:
//  СписокВыбораАктуальности - СписокВыбора - список выбора, который необходимо заполнить
//
Процедура ЗаполнитьСписокВыбораОтбораПоАктуальности(СписокВыбораАктуальности) Экспорт
	
	СписокВыбораАктуальности.Добавить("Не просрочен",     НСтр("ru='Не просрочен'"));
	СписокВыбораАктуальности.Добавить("Просрочен",        НСтр("ru='Просрочен'"));
	СписокВыбораАктуальности.Добавить("Истекает на дату", НСтр("ru='Истекает на дату...'"));
	СписокВыбораАктуальности.Добавить("Сегодня",          НСтр("ru='Сегодня'"));
	СписокВыбораАктуальности.Добавить("Завтра",           НСтр("ru='Завтра'"));
	СписокВыбораАктуальности.Добавить("Послезавтра",      НСтр("ru='Послезавтра'"));
	СписокВыбораАктуальности.Добавить("Через неделю",     НСтр("ru='Через неделю'"));
	
КонецПроцедуры

#КонецОбласти // ОтборПоАктуальности

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции формирования печатных форм
#Область ФормированиеПечатныхФорм

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, десятая, десятых, десятых, м, 1'");
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, сотая, сотых, сотых, м, 2'");
		
	Иначе
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3'");
		
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество, "ДП=Истина", ПараметрыПрописи);
	
КонецФункции

// Функция возвращает представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(НаименованиеНоменклатуры, Серия = Неопределено, Партия = Неопределено) Экспорт
	
	Результат = "(";
	
	Если ЗначениеЗаполнено(Серия) Тогда
		Результат = Результат + Серия;
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Партия;
	КонецЕсли;
	
	Результат = Результат + ")";
	
	Возврат СокрЛП(НаименованиеНоменклатуры) + ?(Результат = "()", "", " " + Результат);
	
КонецФункции

#КонецОбласти // ФормированиеПечатныхФорм

///////////////////////////////////////////////////////////////////////////////////////////
// Автозаполнение реквизитов документа по статистике
#Область АвтозаполнениеПоСтатистике

Функция ШаблонЗапросаЗначенийАвтозаполнения(ИмяВидаОбъекта)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
	|	СтатистикаСДатами.ОбъектПоиска КАК ОбъектПоиска,
	|	СУММА(СтатистикаСДатами.Использование) КАК ОбщийВес
	|ПОМЕСТИТЬ Статистика_%ИмяОбъектаПоиска%
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 5
	|		ВидОбъекта.%ИмяОбъектаПоиска% КАК ОбъектПоиска,
	|		1 КАК Использование
	|	ИЗ
	|		" + ИмяВидаОбъекта + " КАК ВидОбъекта
	|	ГДЕ
	|		НЕ ВидОбъекта.ПометкаУдаления
	|		%ДополнительныеУсловия%
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ВидОбъекта.Дата УБЫВ) КАК СтатистикаСДатами
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатистикаСДатами.ОбъектПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщийВес УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Статистика.ОбщийВес) КАК ОбщийВес
	|ПОМЕСТИТЬ ОбщееКоличество_%ИмяОбъектаПоиска%
	|ИЗ
	|	Статистика_%ИмяОбъектаПоиска% КАК Статистика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОбъектПоиска
	|ИЗ
	|	(ВЫБРАТЬ
	|		Статистика.ОбъектПоиска КАК ОбъектПоиска,
	|		100 * Статистика.ОбщийВес / ОбщееКоличество.ОбщийВес КАК ВесПоСтатистике
	|	ИЗ
	|		Статистика_%ИмяОбъектаПоиска% КАК Статистика
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбщееКоличество_%ИмяОбъектаПоиска% КАК ОбщееКоличество
	|			ПО ИСТИНА) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ВесПоСтатистике > 50";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗначенийАвтозаполнения(Ссылка, СтруктураСвойствАвтозаполнения)
	
	ТекстЗапроса           = "";
	ДополнительныеУсловия  = "";
	
	ИмяВидаОбъекта    = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	ПараметрыЗапроса  = СтруктураСвойствАвтозаполнения.ПараметрыЗапроса;
	ПоляЗапроса       = СтруктураСвойствАвтозаполнения.ПоляЗапроса;
	
	// Сформируем текст дополнительных условий
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл 
		ДополнительныеУсловия = ДополнительныеУсловия + "И " + ПараметрЗапроса + " = &" + ПараметрЗапроса + Символы.ПС;
	КонецЦикла;
	
	ШаблонТекстаЗапроса = ШаблонЗапросаЗначенийАвтозаполнения(ИмяВидаОбъекта);
	
	// Сформируем текст пакета запросов
	Для Каждого ПолеЗапроса Из ПоляЗапроса Цикл 
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапросаСОбъектомПоиска             = СтрЗаменить(ШаблонТекстаЗапроса, "%ИмяОбъектаПоиска%", ПолеЗапроса);
		ТекстЗапросаСОбъектомПоискаИПараметрами = СтрЗаменить(ТекстЗапросаСОбъектомПоиска, "%ДополнительныеУсловия%", ДополнительныеУсловия);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСОбъектомПоискаИПараметрами;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает значения автозаполнения по статистике и заполняет ими переданную структуру.
// Заполненные свойства не перезаполняются и выступают в роли отбора.
// Свойства с типом Булево всегда считаются заполненными.
// Свойства, которые не найдены в метаданных объекта удаляются из структуры.
//
// Параметры:
//  Ссылка - ссылка на заполняемый объект
//  ЗначенияАвтозаполнения - Структура - свойства, которые нужно заполнить
//
Процедура ЗаполнитьЗначенияАвтозаполнения(Ссылка, ЗначенияАвтозаполнения) Экспорт
	
	// Проверим доступность свойств в объекте метаданных,
	// выделим параметры и поля запросов
	ПараметрыЗапроса = Новый Массив;
	ПоляЗапроса = Новый Массив;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого СвойствоАвтозаполнения Из ЗначенияАвтозаполнения Цикл
		
		КлючСвойства = СвойствоАвтозаполнения.Ключ;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(КлючСвойства, МетаданныеОбъекта) Тогда
			
			Если ЗначениеЗаполнено(СвойствоАвтозаполнения.Значение) Тогда
				ПараметрыЗапроса.Добавить(КлючСвойства);
			Иначе
				ПоляЗапроса.Добавить(КлючСвойства);
			КонецЕсли;
			
		Иначе
			ЗначенияАвтозаполнения.Удалить(КлючСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСвойствАвтозаполнения = Новый Структура;
	СтруктураСвойствАвтозаполнения.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	СтруктураСвойствАвтозаполнения.Вставить("ПоляЗапроса", ПоляЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗначенийАвтозаполнения(Ссылка, СтруктураСвойствАвтозаполнения);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса, ЗначенияАвтозаполнения[ПараметрЗапроса]);
	КонецЦикла; 
	
	РезультатыПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	СчетчикПолей = 2;
	Для Каждого ПолеЗапроса Из ПоляЗапроса Цикл
		
		РезультатПакета = РезультатыПакетаЗапросов[СчетчикПолей];
		Если Не РезультатПакета.Пустой() Тогда
			
			ВыборкаРезультата = РезультатПакета.Выбрать();
			ВыборкаРезультата.Следующий();
			
			ЗначенияАвтозаполнения[ПолеЗапроса] = ВыборкаРезультата.ОбъектПоиска;
			
		КонецЕсли;
		
		СчетчикПолей = СчетчикПолей + 3;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты документа по статистике.
//
// Параметры:
//  Объект                       - ДокументОбъект - заполняемый документ
//  ДанныеЗаполнения             - Произвольный - соответствующий параметр обработчика ОбработкаЗаполнения()
//  ИменаРеквизитовДляЗаполнения - Строка - имена заполняемых реквизитов документа
//  ИменаРеквизитовДляОтбора     - Строка - имена реквизитов, по которым выполняется отбор статистики
//  ОтборПоАвтору                - Строка - добавлять отбор по пользователю-автору документа
//
Процедура ЗаполнитьПоЗначениямАвтозаполнения(Объект, ДанныеЗаполнения, Знач ИменаРеквизитовДляЗаполнения, Знач ИменаРеквизитовДляОтбора = "") Экспорт
	
	ДанныеЗаполненияОпределены = (ДанныеЗаполнения <> Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	СвойстваАвтозаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения);
	
	Если Не ПустаяСтрока(ИменаРеквизитовДляОтбора) Тогда
		СтруктураОтбора    = Новый Структура(ИменаРеквизитовДляОтбора);
		ЕстьНепустыеОтборы = Ложь;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			СвойстваАвтозаполнения.Вставить(КлючИЗначение.Ключ, Объект[КлючИЗначение.Ключ]);
			
			Если ЗначениеЗаполнено(Объект[КлючИЗначение.Ключ]) Тогда
				ЕстьНепустыеОтборы = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНепустыеОтборы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваАвтозаполнения.Вставить("Автор", Объект.Автор);
	
	// Данные заполнения используются только в случае
	// создания документа в списке с установленным отбором
	// или переданной из вне структуры.
	Если ДанныеЗаполненияОпределены И ДанныеЗаполненияСтруктура Тогда
		ЗаполнитьЗначенияСвойств(СвойстваАвтозаполнения, ДанныеЗаполнения);
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
		СписокЗаполняемыхПолей = Новый Структура(ИменаРеквизитовДляЗаполнения);
		Для Каждого Поле Из СписокЗаполняемыхПолей Цикл
			Реквизит = МетаданныеОбъекта.Реквизиты[Поле.Ключ];
			Значение = Объект[Поле.Ключ];
			Если ЗначениеЗаполнено(Значение) И Реквизит.ЗначениеЗаполнения <> Значение Тогда
				СвойстваАвтозаполнения[Поле.Ключ] = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияАвтозаполнения(Объект.Ссылка, СвойстваАвтозаполнения);
	
	// Исключим перезаполнение пустыми значениями.
	ИсключаемыеСвойства = "";
	Для Каждого СвойствоАвтозаполнения Из СвойстваАвтозаполнения Цикл 
		Если СвойствоАвтозаполнения.Значение = Неопределено
		 Или Не ЗначениеЗаполнено(СвойствоАвтозаполнения.Значение) Тогда
			ИсключаемыеСвойства = ИсключаемыеСвойства + "," + СвойствоАвтозаполнения.Ключ;
		КонецЕсли;
	КонецЦикла;
	ИсключаемыеСвойства = Сред(ИсключаемыеСвойства, 2);
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения, ИменаРеквизитовДляЗаполнения, ИсключаемыеСвойства);
	
КонецПроцедуры

// Вызывается из подписки ЗаполнитьРеквизитыОбъекта.
// Проверяет заполненность реквизитов формы,
// связанных с функциональными опциями ИспользоватьНесколькоОрганизаций.
//
// Параметры:
//  Объект               - Произвольный - объект
//  ДанныеЗаполнения     - Структура
//  СтандартнаяОбработка - Структура
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Объект.Ссылка.Метаданные())
	   И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Организация"". В информационной базе введено несколько организаций,
				                             |Включите функциональную опцию ""Использовать несколько организаций"".'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Организация"". Возможно, в информационной базе не введено ни одной организации.'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // АвтозаполнениеПоСтатистике

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения реквизитов объектов
#Область ПроверкаЗаполнения

// Проверяет корректность заполнения договора контрагента в объекте
//
Процедура ПроверитьЗаполнениеДоговораКонтрагента(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ЗакупкиСервер.ПолучитьОсновныеРеквизитыДоговора(Объект.ДоговорКонтрагента);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если Объект.Контрагент <> РеквизитыДоговора.Контрагент Тогда
				Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Объект.Контрагент = РеквизитыДоговора.Контрагент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				Если Объект.Организация <> РеквизитыДоговора.Организация Тогда
					Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Объект.Организация = РеквизитыДоговора.Организация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения подразделения в объекте
//
Процедура ПроверитьЗаполнениеПодразделенияОрганизации(Объект, ИмяРеквизита = "ПодразделениеОрганизации") Экспорт
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		ОрганизацияПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяРеквизита], "Владелец");
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Типы = Новый Массив;
			Типы.Добавить(ТипЗнч(Объект[ИмяРеквизита]));
			ТипРеквизита = Новый ОписаниеТипов(Типы);
			Если Объект.Организация <> ОрганизацияПодразделения Тогда
				Объект[ИмяРеквизита] = ТипРеквизита.ПривестиЗначение();
			КонецЕсли;
		Иначе
			Объект.Организация = ОрганизацияПодразделения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет зависимые реквизиты объекта по складу
//
Процедура ЗаполнитьРеквизитыПоСкладу(Объект, ИмяРеквизита = "Склад") Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ДанныеПоРозничномуМагазинуЗаполнены = Ложь;
	ПервыйСклад = Истина;
	
	ИменаРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяРеквизита);
	Для Каждого ИмяРеквизитаСклад Из ИменаРеквизитов Цикл
		
		Склад = Объект[ИмяРеквизитаСклад];
		Если ЗначениеЗаполнено(Склад) Тогда
			
			РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ИсточникФинансирования, УчетныйВидЦены, ИсточникИнформацииОЦенахДляПечати");
			Если ПервыйСклад Тогда
				
				ЕстьИсточникИнформацииОЦенах = ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсточникИнформацииОЦенахДляПечати", МетаданныеОбъекта);
				Если ЕстьИсточникИнформацииОЦенах И Не ЗначениеЗаполнено(Объект.ИсточникИнформацииОЦенахДляПечати) Тогда
					Объект.ИсточникИнформацииОЦенахДляПечати = РеквизитыСклада.ИсточникИнформацииОЦенахДляПечати;
					Если Не ЗначениеЗаполнено(Объект.ИсточникИнформацииОЦенахДляПечати) Тогда
						Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
					КонецЕсли;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидЦены", МетаданныеОбъекта)
				   И Не ЗначениеЗаполнено(Объект.ВидЦены)
				   И (Не ЕстьИсточникИнформацииОЦенах
				 Или ЕстьИсточникИнформацииОЦенах И Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен) Тогда
					Объект.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(РеквизитыСклада.УчетныйВидЦены);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования") Тогда
				
				Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
					
					Если Не ДанныеПоРозничномуМагазинуЗаполнены Тогда
						
						Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсточникФинансирования", МетаданныеОбъекта) Тогда
							Объект.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
						КонецЕсли;
						Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
							Если ЕстьРеквизитТабличнойЧастиОбъекта("ИсточникФинансирования", МетаданныеОбъекта, ТабличнаяЧасть.Имя) Тогда
								Для Каждого ТекущаяСтрока Из Объект[ТабличнаяЧасть.Имя] Цикл
									ТекущаяСтрока.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						
						ДанныеПоРозничномуМагазинуЗаполнены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСклад Тогда
			ПервыйСклад = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПроверкаЗаполнения

////////////////////////////////////////////////////////////////////////////////
// Зависимость констант
#Область ЗависимостьКонстант

// Возвращает состав набор констант.
//
// Параметры:
//  Набор - КонстантыНабор
//
// Возвращаемое значение:
//  Структура
//    Ключ - имя константы из набора
//
Функция ПолучитьСоставНабораКонстант(Набор) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого МетаКонстанта Из Метаданные.Константы Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Набор, МетаКонстанта.Имя) Тогда
			Результат.Вставить(МетаКонстанта.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗависимостьКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты      = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты       = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

Процедура ДобавитьИнвертируемыеКонстанты(ТаблицаКонстант, ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты = "") Экспорт
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьЗависимостьКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Ложь,   ИмяПодчиненнойКонстанты, Истина);
	ДобавитьЗависимостьКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Истина, ИмяПодчиненнойКонстанты, Ложь);
	
КонецПроцедуры

// Возвращает признак возможности изменения значения константы.
//
// Параметры:
//  ИмяКонстанты - Строка - Имя контролируемой константы.
//  ЗначениеКонстанты - Произвольный - контролируемое значение константы
//
// Возвращаемое значение
//  Булево - Истина, если значение константы можно изменить.
//
Функция ВозможноИзменитьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты) Экспорт
	
	РодительскиеКонстанты = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ПолучитьКонтролируемыеЗначенияРодительскихКонстант(ИмяКонстанты, ЗначениеКонстанты);
	Для Каждого КлючЗначение Из РодительскиеКонстанты Цикл
		Если КлючЗначение.Значение  = Константы[КлючЗначение.Ключ].Получить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти // ЗависимостьКонстант

////////////////////////////////////////////////////////////////////////////////
// Интеграция с библиотеками
#Область ИнтеграцияСБиблиотеками

// (см. Модуль сеанса УстановкаПараметровСеанса)
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	ОбменДаннымиСМИС.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указано "*", значит в модуле менеджера определены обе функции.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "*"); // определены обе функции.
//   Объекты.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
//   Объекты.Вставить(Метаданные.Справочники.Партнеры.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке
//		|РеквизитыНеРедактируемыеВГрупповойОбработке");
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.КассыККМ.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Контрагенты.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Номенклатура.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.СерииНоменклатуры.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.КЛП.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.СМНН.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	
	Объекты.Вставить(Метаданные.Справочники.ВнутреннееПотреблениеТоваровВОтделенииПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВнутреннееПотреблениеТоваровПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВозвратТоваровОтКлиентаПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ВозвратТоваровПоставщикуПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ДоговорыКонтрагентовПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗаказНаПеремещениеПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗаказПоставщикуПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ОтпускТоваровВОтделениеПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПередачаТоваровНаСторонуПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПеремещениеТоваровМеждуОтделениямиПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПеремещениеТоваровПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПоступлениеТоваровПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.СпецификацияКДоговоруПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ТребованиеОтделенияПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ФормулярныйСписокНоменклатурыПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ОбъектыВводимыеНаОсновании", "ВводНаОснованииБольничнаяАптека.УстановитьПараметрСеанса");
	
	Обработчики.Вставить("ПроводитьБезКонтроляОстатковТоваровПоРегиструСебестоимости", "ЗапасыСервер.УстановитьПараметрСеанса");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Исключения) Экспорт
	
	Исключения.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Исключения, РасширеннаяАналитикаУчета.ПолучитьИсключенияПоискаСсылок());
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ИТСМедицина.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	
КонецПроцедуры

#КонецОбласти // ИнтеграцияСБиблиотеками

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции
#Область Прочее

// Проверяет использование объекта
//
// Параметры:
//  Параметры       - Структура - содержит объект использование которого нужно проверить
//  АдресХранилища  - Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт
	
	ЕстьСсылки = ОбщегоНазначения.ЕстьСсылкиНаОбъект(Параметры.Объект);
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);
	
КонецПроцедуры

// Функция получает представление номенклатуры
//
// Параметры:
//  Номенклатура - ссылка на элемент справочника Номенклатура
//  СерияНоменклатуры - ссылка на элемент справочника СерииНоменклатуры
//  Партия - ссылка на элемент справочника ПартииНоменклатуры
//
// Возвращаемое значение:
//  Строка - представление номенклатуры
//
Функция ПолучитьПредставлениеНоменклатуры(Номенклатура, СерияНоменклатуры, Партия) Экспорт
	
	Результат = СокрЛП(Номенклатура);
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Результат = Результат + " / " + СерияНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партия) Тогда
		Результат = Результат + " / " + Партия;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие массивов документов по типам
//
// Параметры:
//   МассивСсылок - Массив - Массив ссылок
//
// Возвращаемое значение:
//  Соответствие - Ключ: Полное имя типа ссылки; Значение: Массив ссылок этого типа
//
Функция РазложитьМассивСсылокПоТипам(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ИмяТипа = Объект.Метаданные().ПолноеИмя();
		СписокОбъектовТекущегоТипа = СоответствиеТипов[ИмяТипа];
		Если СписокОбъектовТекущегоТипа = Неопределено Тогда
			СписокОбъектовТекущегоТипа = Новый Массив;
			СоответствиеТипов.Вставить(ИмяТипа, СписокОбъектовТекущегоТипа);
		КонецЕсли;
		СписокОбъектовТекущегоТипа.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//  Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
//  Статус             - Статус документ, на основании которого осуществляется ввод
//  ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
//  ЕстьОшибкиСтатус   - Булево - Если Истина - документ, на основании которого осуществляется ввод, имеет некорректный статус
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
                                               ЕстьОшибкиПроведен = Ложь,
                                               Статус = Неопределено,
                                               ЕстьОшибкиСтатус = Ложь,
                                               ДопустимыеСтатусы = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа невозможен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		Если ДопустимыеСтатусы = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании невозможен.'");
		ИначеЕсли ТипЗнч(ДопустимыеСтатусы) = Тип("Массив") Тогда
			
			СтрокаДопустимыхСтатусов = "";
			
			Для Каждого ДопустимыйСтатус Из ДопустимыеСтатусы Цикл
				СтрокаДопустимыхСтатусов = СтрокаДопустимыхСтатусов + """"+ ДопустимыйСтатус + """, ";
			КонецЦикла;
			
			СтрокаДопустимыхСтатусов = Лев(СтрокаДопустимыхСтатусов, СтрДлина(СтрокаДопустимыхСтатусов) - 2);
			
			Если ДопустимыеСтатусы.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании невозможен.'");
			ИначеЕсли ДопустимыеСтатусы.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании возможен только в статусе %СтрокаДопустимыхСтатусов%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
			Иначе
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании возможен только в статусах %СтрокаДопустимыхСтатусов%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании возможен только в статусе ""%СтрокаДопустимыхСтатусов%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", ДопустимыеСтатусы);
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает или сбрасывает флаг Согласован у документа.
// Вызывается из процедуры ПередЗаписью документа.
//
// Параметры:
//  ДокументОбъект     - ДокументОбъект - Документ, в котором необходимо изменить флаг Согласован
//  РежимЗаписи        - Режим записи документа
//  СтатусНеСогласован - Статус документа, в котором флаг Согласован должен быть сброшен
//
Процедура ИзменитьПризнакСогласованностиДокумента(ДокументОбъект, Знач РежимЗаписи, Знач СтатусНеСогласован = Неопределено) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись
	 Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если ДокументОбъект.Согласован Тогда
			ДокументОбъект.Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Документ не имеет статуса
		Если СтатусНеСогласован = Неопределено Тогда
			
			Если Не ДокументОбъект.Согласован Тогда
				ДокументОбъект.Согласован = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(СтатусНеСогласован) = Тип("Массив") Тогда
				ДокументСогласован = (СтатусНеСогласован.Найти(ДокументОбъект.Статус) = Неопределено);
			Иначе
				ДокументСогласован = (ДокументОбъект.Статус <> СтатусНеСогласован);
			КонецЕсли;
			
			Если ДокументОбъект.Согласован <> ДокументСогласован Тогда
				ДокументОбъект.Согласован = ДокументСогласован;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 			 = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = МенеджерОборудованияВызовСервера.ТипыИспользуемогоОборудованияТекущегоРабочегоМеста();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
	
КонецФункции

// Проверяет соответствие полей файла ожидаемым
//
// Параметры:
//  Файл - XBase
//  ОписаниеПолейФайла - Структура
//      Ключ - Строка - ИмяПоля
//      Значение - Структура - описание свойств поля
//  ОписаниеОшибки          - Строка - Если структура файла не соответствует описанию поле,
//                                     то в эту переменную записывается текст ошибки.
//  ОписаниеПолейИсключения - Массив - (необязательный) имена полей,
//                                     которые не должны присутствовать в проверяемом файле.
//
// Возвращаемое значение:
//  Булево - Истина, если структура файла соответствует описанию
//
Функция ПроверитьСтруктуруDBFФайла(Файл, ОписаниеПолейФайла, ОписаниеОшибки = "", ОписаниеПолейИсключения = Неопределено) Экспорт
	
	Для Каждого Поле Из ОписаниеПолейФайла Цикл
		
		ПолеФайла = Файл.Поля.Найти(Поле.Ключ);
		Если ПолеФайла = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = '%1Отсутствует поле ""%2"".'");
			ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ОписаниеОшибки);
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ОписаниеОшибки, Поле.Ключ);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Свойство Из Поле.Значение Цикл
			Если ПолеФайла[Свойство.Ключ] <> Свойство.Значение Тогда
				ШаблонОшибки = НСтр("ru = '%1Не совпадает описание поля ""%2"" свойство ""%3"" ожидается ""%4"", а в файле ""%5"".'");
				ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ОписаниеОшибки);
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, ОписаниеОшибки, Поле.Ключ, Свойство.Ключ, Свойство.Значение, ПолеФайла[Свойство.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОписаниеПолейИсключения <> Неопределено Тогда
		Для Каждого Поле Из ОписаниеПолейИсключения Цикл
		
			ПолеФайла = Файл.Поля.Найти(Поле);
			Если ПолеФайла <> Неопределено Тогда
				ШаблонОшибки = НСтр("ru = '%1Поле ""%2"" присутствует в файле, а его быть не должно.'");
				ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки + Символы.ПС, ОписаниеОшибки);
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ОписаниеОшибки, Поле);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак, является ли подсистема Больничная аптека основной.
//
// Возвращаемое значение:
//  Булево - Истина, если конфигурация - основная.
//
Функция ЭтоОсновнаяПодсистемаКонфигурации(СтрогаяПроверка = Ложь) Экспорт
	
	ЭтоОсновнаяПодсистема = СтрНачинаетсяС(ВРег(Метаданные.Имя), ВРег("БольничнаяАптека"));
	Если Не ЭтоОсновнаяПодсистема И Не СтрогаяПроверка Тогда
		ЭтоОсновнаяКонфигурацияПереопределение = Ложь;
		ОбщегоНазначенияБольничнаяАптекаПереопределяемый.ПриОпределенииОсновнойПодсистемыКонфигурации(ЭтоОсновнаяКонфигурацияПереопределение);
		ЭтоОсновнаяПодсистема = ЭтоОсновнаяКонфигурацияПереопределение = Истина;
	КонецЕсли;
	
	Возврат ЭтоОсновнаяПодсистема;
	
КонецФункции

// Устанавливает исключительную блокировку по ссылке
//
Процедура ЗаблокироватьСсылку(Ссылка) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Управляет объектную блокировку.
// Вызывает исключение, если объект уже заблокирован.
//
// Параметры:
//  Объект   - любой объект ссылочного типа информационной базы.
//  Включить - Булево - определяет, будет ли включена объектная блокировка.
//
Процедура ЗаблокироватьОбъект(Объект) Экспорт
	
	Попытка
		Объект.Заблокировать();
	Исключение
		
		Текст = НСтр("ru = 'Не удалось заблокировать данные объекта ""%1"".
			|Возможно, объект редактируется другим пользователем.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект.Ссылка);
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает количество элементов объект метаданных.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Параметры:
//  МетаданныеОбъекта - Метаданные - метаданные объекта для которого нужно определить количество элементов.
//  УчитыватьПредопределенные - Булево - определяет необходимость учитывать предопределенные значения при подсчете количества.
//
// Возвращаемое значение:
//     Число - количество элементов.
//
Функция КоличествоЭлементов(МетаданныеОбъекта, УчитыватьПредопределенные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	#Таблица КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|";
	
	Если  Не УчитыватьПредопределенные И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеОбъекта, "Предопределенные") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ Таблица.Предопределенный";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", МетаданныеОбъекта.ПолноеИмя());
	
	Количество = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Изменяет текущий склад в документах при изменении подразделения.
//
// Параметры:
//  Подразделение - СправочникСсылка.ОтделенияОрганизаций, СправочникСсылка.ПодразделенияОрганизаций - подразделение,
//          для которого изменяется склад.
//  Склад - СправочникСсылка.Склады - заменяемый склад.
//  ОсновнойСклад - СправочникСсылка.Склады - основной склад подразделения.
//
Процедура ИзменитьСкладПриНеобходимости(Подразделение, Склад, ОсновнойСклад, ТаблицаОбъекта = Неопределено) Экспорт
	
	ЗаменятьСклад = (Склад = ОсновнойСклад) Или Не ЗначениеЗаполнено(Склад);
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОсновнойСклад = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.ОтделенияОрганизаций") Тогда
		ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Подразделение, ТаблицаОбъекта);
	Иначе
		ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладПоУмолчанию(Неопределено, Подразделение, ТаблицаОбъекта);
	КонецЕсли;
	
	Если ЗаменятьСклад И ЗначениеЗаполнено(ОсновнойСклад) Тогда
		Склад = ОсновнойСклад;
	КонецЕсли;
	
КонецПроцедуры

// Выполнить экспортный метод объекта встроенного языка по имени при его наличии.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
// Выполняет метод объекта при его наличии.
//
// Параметры:
//  Объект                   - Произвольный - объект, метод которого нужно выполнить.
//  ИмяМетода                - Строка       - имя метода объекта, который нужно выполнить.
//  ПараметрыМетода          - Массив       - значения параметров метода.
//  ЕстьВозвращаемоеЗначение - Булево       - если Истина, то будет возвращен результат выполнения метода.
//  ЗначениеПоУмолчанию      - Произвольный - значение, которое будет возвращено, если у объекта нет выполняемого метода.
//  ЕстьМетодОбъекта         - Булево       - в параметр возвращается признак существования выполняемого метода у объекта.
//
// Возвращаемое значение:
//  Произвольный - если параметр ЕстьВозвращаемоеЗначение установлен в Истина, то будет возвращен результат выполнения метода,
//                 иначе Неопределено. Если у объекта отсутствует выполняемый метод, то возвращается значение параметра ЗначениеПоУмолчанию.
//
Функция ВыполнитьНеобязательныйМетодОбъекта(Объект, ИмяМетода, Параметры = Неопределено, ЕстьВозвращаемоеЗначение = Ложь, ЗначениеПоУмолчанию = Неопределено, ЕстьМетодОбъекта = Неопределено) Экспорт
	
	Попытка
		Тест = Новый Структура(ИмяМетода, ИмяМетода);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное значение параметра ИмяМетода (%1) в ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта'"), ИмяМетода);
	КонецПопытки;
	
	// СтандартныеПодсистемы
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		Если МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности()
			И Не МодульРаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
			
			ПрофильИнформационнойБазы = МодульРаботаВБезопасномРежиме.ПрофильБезопасностиИнформационнойБазы();
			Если ЗначениеЗаполнено(ПрофильИнформационнойБазы) Тогда
				
				УстановитьБезопасныйРежим(ПрофильИнформационнойБазы);
				Если БезопасныйРежим() = Истина Тогда
					УстановитьБезопасныйРежим(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы
	
	СтрокаПараметров = "";
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			СтрокаПараметров = СтрокаПараметров + ", Параметры[" + Индекс + "]";
		КонецЦикла;
		СтрокаПараметров = Сред(СтрокаПараметров, 3);
	КонецЕсли;
	
	ЛокальнаяПеременная = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	СтрокаВызоваМетода = ЛокальнаяПеременная + " = Объект;";
	Если ЕстьВозвращаемоеЗначение Тогда
		СтрокаВызоваМетода = СтрокаВызоваМетода + " Результат = ";
	КонецЕсли;
	СтрокаВызоваМетода = СтрокаВызоваМетода + ЛокальнаяПеременная + "." + ИмяМетода + "(" + СтрокаПараметров + ")";
	
	Результат = Неопределено;
	
	Попытка
		Выполнить СтрокаВызоваМетода;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Если Ошибка.ИсходнаяСтрока = СтрокаВызоваМетода И СтрЗаканчиваетсяНа(Ошибка.Описание, "(" + ИмяМетода + ")") Тогда
			ЕстьМетодОбъекта = Ложь;
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	ЕстьМетодОбъекта = Истина;
	Возврат Результат;
	
КонецФункции

// Выполнить экспортный метод объекта встроенного языка по имени.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  Объект - Произвольный - объект встроенного языка 1С:Предприятия, содержащий методы (например, ОбработкаОбъект),
//  ИмяМетода - Строка - имя экспортной процедуры модуля объекта обработки.
//  Параметры - Массив - параметры передаются в метод <ИмяМетода>
//    в порядке расположения элементов массива.
//  ЕстьВозвращаемоеЗначение - Булево - определяет, возвращает метод значение или нет.
//
// Возвращаемое значение:
//  Произвольное - если ЕстьВозвращаемоеЗначение равно Истина, то результат выполнения метода, иначе Неопределено.
//
Функция ВыполнитьМетодОбъекта(Объект, ИмяМетода, Параметры = Неопределено, ЕстьВозвращаемоеЗначение = Ложь) Экспорт
	
	Попытка
		Тест = Новый Структура(ИмяМетода, ИмяМетода);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное значение параметра ИмяМетода (%1) в ОбщегоНазначенияБольничнаяАптека.ВыполнитьМетодОбъекта'"), ИмяМетода);
	КонецПопытки;
	
	// СтандартныеПодсистемы
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		Если МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности()
			И Не МодульРаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
			
			ПрофильИнформационнойБазы = МодульРаботаВБезопасномРежиме.ПрофильБезопасностиИнформационнойБазы();
			Если ЗначениеЗаполнено(ПрофильИнформационнойБазы) Тогда
				
				УстановитьБезопасныйРежим(ПрофильИнформационнойБазы);
				Если БезопасныйРежим() = Истина Тогда
					УстановитьБезопасныйРежим(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы
	
	СтрокаПараметров = "";
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			СтрокаПараметров = СтрокаПараметров + ", Параметры[" + Индекс + "]";
		КонецЦикла;
		СтрокаПараметров = Сред(СтрокаПараметров, 3);
	КонецЕсли;
	
	Выражение = "Объект." + ИмяМетода + "(" + СтрокаПараметров + ")";
	Если ЕстьВозвращаемоеЗначение Тогда
		Выражение = "Результат = " + Выражение;
	КонецЕсли;
	
	Результат = Неопределено;
	Выполнить Выражение;
	Возврат Результат;
	
КонецФункции

// Проверяет, что переданное имя ИмяПроцедуры является именем экспортной процедуры конфигурации.
// Может использоваться для проверки, что переданная строка не содержит произвольного алгоритма
// на встроенном языке 1С:Предприятия перед использованием его в операторах Выполнить и Вычислить
// при их использовании для динамического вызова методов конфигурации.
//
// В случае если переданная строка не является именем процедуры конфигурации, генерируется исключение.
//
// Параметры:
//   ИмяПроцедуры - Строка - проверяемое имя экспортной процедуры.
//
Процедура ПроверитьИмяМетодаКонфигурации(Знач ИмяМетода) Экспорт
	
	ЧастиИмени = СтрРазделить(ИмяМетода, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра ИмяМетода (передано значение: ""%1"") в ОбщегоНазначенияБольничнаяАптека.ПроверитьИмяМетодаКонфигурации'"), ИмяМетода);
	КонецЕсли;
	
	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра ИмяМетода (передано значение: ""%1"") в ОбщегоНазначенияБольничнаяАптека.ПроверитьИмяМетодаКонфигурации:
				|Не найден общий модуль ""%2"".'"),
			ИмяМетода,
			ИмяОбъекта);
	КонецЕсли;
	
	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неправильный формат параметра ИмяМетода (передано значение: ""%1"") в ОбщегоНазначенияБольничнаяАптека.ПроверитьИмяМетодаКонфигурации:
				           |Не найден менеджер объекта ""%2"".'"),
				ИмяМетода,
				ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ИмяМетодаОбъекта = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Безопасное выполнение метода'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра ИмяМетода (передано значение: ""%1"") в ОбщегоНазначенияБольничнаяАптека.ПроверитьИмяМетодаКонфигурации:
			           |Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.'"),
			ИмяМетода, ИмяМетодаОбъекта);
	КонецПопытки;
	
КонецПроцедуры

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - текущий документ.
//  ВсеРеквизиты - Массив - массив всех реквизитов документа, которые необходимо очищать.
//  РеквизитыОперации - Массив - массив реквизитов документа, которые относятся к хозяйственной операции документа.
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач ВсеРеквизиты, Знач РеквизитыОперации) Экспорт
	
	// Удалим из массива реквизиты, относящиеся к хозяйственной операции.
	Для Каждого ЭлементМассива Из РеквизитыОперации Цикл
		
		Номер = ВсеРеквизиты.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			ВсеРеквизиты.Удалить(Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для Каждого ЭлементМассива Из ВсеРеквизиты Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		
		// Реквизит табличной части.
		Если Позиция <> 0 Тогда
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Неопределено;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		ИначеЕсли МетаданныеОбъекта.ТабличныеЧасти.Найти(ЭлементМассива) <> Неопределено Тогда
			Продолжить;
			
		// Реквизит шапки.
		Иначе
			
			Если ЗначениеЗаполнено(ДокументОбъект[ЭлементМассива]) Тогда
				ДокументОбъект[ЭлементМассива] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистим необходимые реквизиты табличной части.
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		
		Для Каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
			
			Для Каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				
				Для Каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[ЭлементМассива]) Тогда
						СтрокаТаблицы[ЭлементМассива] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список пользователей, имеющих какую-нибудь роль из указанных в качестве параметра.
//
// Параметры:
//  ДоступныеРоли - Массив - массив с идентификаторами ролей.
//  ПредставлениеТекущегоПользователя - Строка - представление текущего пользователя.
//
// Возвращаемое значение:
//  СписокЗначений с элементами СправочникСсылка.Пользователи.
//
Функция ПользователиСДоступнымиРолями(ДоступныеРоли, ПредставлениеТекущегоПользователя = Неопределено) Экспорт
	
	Если ПредставлениеТекущегоПользователя = Неопределено Тогда
		ПредставлениеТекущегоПользователя = НСтр("ru = '<Мои документы>'");
	КонецЕсли;
	
	// Запрос получения списка всех пользователей. Выполняется в привилегированном режиме
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиГруппДоступаРоли.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПрофилиГруппДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль В(&ДоступныеРоли)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ГруппыПользователейСостав.Пользователь, ГруппыДоступаПользователи.Пользователь) КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|	ПО
	|		ГруппыДоступаПользователи.Пользователь = ГруппыПользователейСостав.Ссылка
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль В
	|			(ВЫБРАТЬ
	|				ПрофилиГруппДоступа.Ссылка
	|			ИЗ
	|				ПрофилиГруппДоступа КАК ПрофилиГруппДоступа)
	|";
	
	Запрос.УстановитьПараметр("ДоступныеРоли", ДоступныеРоли);
	
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Запрос получения списка "разрешенных" пользователей
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователей)
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование
	|";
	Запрос.УстановитьПараметр("МассивПользователей", ВсеПользователи);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СписокПользователей = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТекущийПользователь = Выборка.Пользователь Тогда
			СписокПользователей.Вставить(0, Выборка.Пользователь, ПредставлениеТекущегоПользователя);
		Иначе
			СписокПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

// Заполняет список пользователями, которым доступно изменение объектов и видны текущему пользователю.
//
// Параметры:
//  Список - СписокЗначений - список для заполнения.
//  ОписанияОбъектовМетаданных - Массив, ОбъектМетаданных, Тип, Строка - описание метаданных, для которых проверяется право изменения.
//  ПредставлениеТекущегоПользователя - Строка - представление текущего пользователя в списке
//
Процедура ЗаполнитьСписокПользователейСПравомИзменения(Список, ОписанияОбъектовМетаданных, ПредставлениеТекущегоПользователя = Неопределено) Экспорт
	
	Если ТипЗнч(ОписанияОбъектовМетаданных) = Тип("Массив")
	 Или ТипЗнч(ОписанияОбъектовМетаданных) = Тип("ФиксированныйМассив") Тогда
		ОбъектыМетаданных = ОписанияОбъектовМетаданных;
	Иначе
		ОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияОбъектовМетаданных);
	КонецЕсли;
	
	Роли = Новый Массив;
	
	Для Каждого ОписаниеОбъектаМетаданных Из ОбъектыМетаданных Цикл
		
		ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
		Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
			Если ОбъектМетаданных = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначенияБольничнаяАптека.ЗаполнитьСписокПользователейСПравомИзменения().
					           |
					           |Объект метаданных не найден по типу:
					           |""%1"".'"),
					ОписаниеОбъектаМетаданных);
			Иначе
				ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
			КонецЕсли;
			
		ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
			ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных;
			
		ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("ОбъектМетаданных") Тогда
			ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных.ПолноеИмя();
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначенияБольничнаяАптека.ЗаполнитьСписокПользователейСПравомИзменения().
				           |
				           |Указан недопустимый тип параметра ОписанияОбъектовМетаданных:
				           |""%1"".'"),
				ТипОписанияОбъектаМетаданных);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Роли, ОбщегоНазначенияБольничнаяАптекаПовтИсп.РолиСПравомИзменения(ПолноеИмяОбъектаМетаданных), Истина);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Роли) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПользователиСДоступнымиРолями(Роли, ПредставлениеТекущегоПользователя), Список);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Параметры.Вставить("НастройкиИТСМедицина", Новый ФиксированнаяСтруктура(ИТСМедицина.ПолучитьНастройкиИТСМедицина()));
	КонецЕсли;
	
КонецПроцедуры

// Формирует параметры для обхода дерева, для функции ПолучитьОчереднойЭлементДерева.
//
// Параметры:
//  Дерево       - ДеревоЗначений, ДанныеФормыДерево - древовидная структура данных, которую необходимо обойти.
//  МетодОбхода  - Строка - метод обхода дерева, может принимать значения:
//                 ВШирину - сначала обрабатывается каждый узел на уровне, прежде чем перейти на следующий уровень.
//                 ВГлубину - дерево проходится вниз насколько это можно на каждом потомке, прежде чем переходить к следующей родственной ветке.
//
// Возвращаемое значение:
//  ПараметрыОбхода - Структура - параметры обхода дерева, передаваемые в функцию ПолучитьОчереднойЭлементДерева:
//    * СтекИлиОчередь - Массив - коллекция, используемая для обхода дерева.
//    * МетодОбхода    - метод обхода из параметров функции.
//    * ТипДерева      - тип значения дерева обхода.
//
Функция ПараметрыОбходаДерева(Дерево, МетодОбхода = "ВШирину") Экспорт
	
	ТипДерева = ТипЗнч(Дерево);
	Если ТипДерева = Тип("ДанныеФормыДерево") Тогда
		Список = Дерево.ПолучитьЭлементы();
	Иначе
		Список = Дерево.Строки;
	КонецЕсли;
	
	СтекИлиОчередь = Новый Массив;
	СтекИлиОчередь.Добавить(Новый Структура("ИндексСписка, Список", 0, Список));
	
	ПараметрыОбхода = Новый Структура;
	ПараметрыОбхода.Вставить("СтекИлиОчередь", СтекИлиОчередь);
	ПараметрыОбхода.Вставить("МетодОбхода"   , МетодОбхода);
	ПараметрыОбхода.Вставить("ТипДерева"     , ТипДерева);
	
	Возврат ПараметрыОбхода;
	
КонецФункции

// Получает очередной элемент древовидной структуры данных.
//
// Параметры:
//  ПараметрыОбхода - Структура - параметры обхода дерева (см. функцию ПараметрыОбходаДерева).
//
// Возвращаемое значение:
//  ВозвращаемыйЭлемент - СтрокаДереваЗначений, ДанныеФормыЭлементДерева - элемент древовидной структуры данных.
//
Функция ПолучитьОчереднойЭлементДерева(ПараметрыОбхода) Экспорт
	
	СтекИлиОчередь = ПараметрыОбхода.СтекИлиОчередь;
	МетодОбхода    = ПараметрыОбхода.МетодОбхода;
	ТипДерева      = ПараметрыОбхода.ТипДерева;
	
	Пока СтекИлиОчередь.Количество() > 0 Цикл
		
		Порция = СтекИлиОчередь[0];
		Список       = Порция.Список;
		ИндексСписка = Порция.ИндексСписка;
		СтекИлиОчередь.Удалить(0);
		
		Граница = Список.Количество() - 1;
		Если ИндексСписка <= Граница Тогда
			
			ВозвращаемыйЭлемент = Список[ИндексСписка];
			
			СтекИлиОчередь.Вставить(0, Новый Структура("ИндексСписка, Список", ИндексСписка + 1, Список));
			
			Если ТипДерева = Тип("ДанныеФормыДерево") Тогда
				СледующийСписок = ВозвращаемыйЭлемент.ПолучитьЭлементы();
			Иначе
				СледующийСписок = ВозвращаемыйЭлемент.Строки;
			КонецЕсли;
			
			Если СледующийСписок.Количество() > 0 Тогда
				Порция = Новый Структура("ИндексСписка, Список", 0, СледующийСписок);
				Если МетодОбхода = "ВШирину" Тогда
					СтекИлиОчередь.Добавить(Порция);
				ИначеЕсли МетодОбхода = "ВГлубину" Тогда
					СтекИлиОчередь.Вставить(0, Порция);
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемыйЭлемент;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)
	
	ЧастиИмени = Новый Массив;
	ОстатокИмени = ПолноеИмя;
	
	Пока Не ПустаяСтрока(ОстатокИмени) Цикл
		Если Лев(ОстатокИмени, 1) = "[" Тогда
			
			Позиция = СтрНайти(ОстатокИмени, "]");
			Если Позиция = 0 Тогда
				ЧастиИмени.Добавить(Сред(ОстатокИмени, 2));
				ОстатокИмени = "";
			Иначе
				ЧастиИмени.Добавить(Лев(ОстатокИмени, Позиция));
				ОстатокИмени = Сред(ОстатокИмени, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = СтрНайти(ОстатокИмени, ".");
			Если Позиция = 0 Тогда
				ЧастиИмени.Добавить(ОстатокИмени);
				ОстатокИмени = "";
			Иначе
				ЧастиИмени.Добавить(Лев(ОстатокИмени, Позиция - 1));
				ОстатокИмени = Сред(ОстатокИмени, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧастиИмени;
	
КонецФункции

Функция МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	
	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль(ИмяОМ);
		
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда
		
		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
		
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить менеджер для объекта ""%1""'"), Имя);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
