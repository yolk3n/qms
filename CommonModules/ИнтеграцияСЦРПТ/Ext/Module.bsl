///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСЦРПТ".
// ОбщийМодуль.ИнтеграцияСЦРПТ.
//
// Серверные процедуры и функции для работы с сервисом обмена данными с ЦРПТ:
//  - создание нового идентификатора соединения;
//  - обработки событий подсистем Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает идентификатор соединения ЦРПТ на основании переданного запроса.
//
// Параметры:
//  ПараметрыЗапросаJSON - Строка - запрос для отправки в сервис ЦРПТ;
//  ЗаголовкиЗапроса - Соответствие - содержит заголовки, которые необходимо отправить в ЦРПТ;
//  ПараметрыURL - Соответствие - содержит параметры запроса, которые необходимо отправить в ЦРПТ;
//  ДанныеБиблиотеки - Структура - содержит идентификатор библиотеки и версию библиотеки,
//    от имени которой формируется запрос:
//   * Идентификатор - Строка - идентификатор библиотеки;
//   * Версия - Строка - версия библиотеки.
//
// Возвращаемое значение:
//  Структура - результат создания получения идентификатора соединения:
//    * ДанныеОтвета - Соответствие, Неопределено - ответ ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * ЗаголовкиОтвета - Соответствие, Неопределено - заголовки ответа ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//         - <Пустая строка> - создание нового заказа выполнено успешно;
//         - "НеверныйФорматЗапроса" - передан некорректный запрос
//             на получение идентификатора соединения;
//         - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//             подключения к Порталу 1С:ИТС;
//         - "ПревышеноКоличествоПопыток" - превышено количество попыток
//             обращения к сервису с некорректным логином и паролем;
//         - "ОшибкаПодключения" - ошибка при подключении к сервису;
//         - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//         - "НеизвестнаяОшибка" - при получении информации возникла
//             неизвестная (не обрабатываемая) ошибка;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ИдентификаторСоединения(
		ПараметрыЗапросаJSON,
		ЗаголовкиЗапроса,
		ПараметрыURL,
		ДанныеБиблиотеки) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения идентификатора соединения ЦРПТ.'"),
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("ДанныеОтвета", Неопределено);
	РезультатОперации.Вставить("ЗаголовкиОтвета", Неопределено);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	
	URLОперации = URLОперацииСервиса("/connections/register");
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type",  "application/json");
	Заголовки.Вставить("Authorization", РезультатИПП.Аутентификация);
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыЗапросаСервис = connections_register(
		ПараметрыЗапросаJSON,
		ЗаголовкиЗапроса,
		ПараметрыURL,
		ДанныеБиблиотеки);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод" , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета" , 1);
	ПараметрыОтправки.Вставить("Заголовки" , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки" , ПараметрыЗапросаСервис);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси" , ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	ПараметрыОтправки.Вставить("Таймаут" , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		
		ДанныеОшибки = ДанныеОшибкиСервиса(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			ДанныеОшибки,
			"ДанныеОтвета, ЗаголовкиОтвета, СообщениеОбОшибке");
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить идентификатор соединения.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При получении идентификатора соединения сервис вернул ошибку.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				Строка(РезультатОперации.СообщениеОбОшибке),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(РезультатОтправки.Содержимое);
	ОтветШлюза = ПрочитатьJSON(
		ЧтениеОтвета,
		Истина);
	
	РезультатОперации.ДанныеОтвета = ОтветШлюза.Получить("crptResponse");
	РезультатОперации.ЗаголовкиОтвета = ОтветШлюза.Получить("crptResponseHeaders");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение идентификатора соединения ЦРПТ.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис интеграции с ЦРПТ (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВызовОпераций

// Формирует параметры запроса для операции
// /api/program1c/connections/register.
//
Функция connections_register(
		ПараметрыЗапросаJSON,
		ЗаголовкиЗапроса,
		ПараметрыURL,
		ДанныеБиблиотеки)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("crptRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("headers");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючЗначение Из ЗаголовкиЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Значение);
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryParameters");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючЗначение Из ПараметрыURL Цикл
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Значение);
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("bodyBase64");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Base64ИзСтроки(ПараметрыЗапросаJSON));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientInfo");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИнтернетПоддержкаПользователей.ИмяПрограммы());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("libraryId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеБиблиотеки.Идентификатор);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("libraryVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеБиблиотеки.Версия);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    *Аутентификация - Строка - заголовок аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",       "");
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.Аутентификация = "Bearer " + РезультатПолученияТикета.Тикет;
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом интеграции с ЦРПТ необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		Иначе
			Результат.Аутентификация = "Basic " + Base64ИзСтроки(ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет URL для вызова сервиса интеграции с ЦРПТ.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция)
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/public/api/program1c"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса обмена данными с ЦРПТ.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	
	Возврат "products-marking-crpt.1c.ru";
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Определяет по коду состояния тип ошибки сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если ПустаяСтрока(КодСостояния) Тогда
		Возврат "";
	КонецЕсли;
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 400 Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат КодОшибкиПревышеноКоличествоПопыток();
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат КодОшибкиОшибкаСервиса();
	ИначеЕсли КодСостояния = 0
		Или КодСостояния = 503 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю и результат обработки в ЦРПТ.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//    ИнтеграцияСЦРПТ.ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Структура - результат обработки ошибки:
//    * ТипОшибки - Строка - строковый тип возникшей ошибки, который
//        может быть обработан вызывающим методом;
//    * ДанныеОтвета - Соответствие, Неопределено - ответ ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * ЗаголовкиОтвета - Соответствие, Неопределено - заголовки ответа ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ДанныеОшибкиСервиса(КодОшибки, ТелоJSON = "")
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("ТипОшибки", "");
	ДанныеОшибки.Вставить("ДанныеОтвета", Неопределено);
	ДанныеОшибки.Вставить("ЗаголовкиОтвета", Неопределено);
	ДанныеОшибки.Вставить("СообщениеОбОшибке", "");
	
	Если ЗначениеЗаполнено(ТелоJSON) Тогда
		ПолучитьДанныеОшибкиСервиса(ТелоJSON, ДанныеОшибки);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса() И ДанныеОшибки.ТипОшибки = "BAD_REQUEST" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() И ДанныеОшибки.ТипОшибки = "REGISTRATION_KEY_NOT_FOUND" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Неверный идентификатор или версия библиотеки. Ключ регистрации не обнаружен.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() И ДанныеОшибки.ТипОшибки = "UNKNOWN_PROGRAM" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Программа по идентификатору не найдена. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() И ДанныеОшибки.ТипОшибки = "BACKEND_API_ERROR" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Сервис ЦРПТ вернул ошибку.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() И ДанныеОшибки.ТипОшибки = "UNAUTHORIZED" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиПревышеноКоличествоПопыток() Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиОшибкаПодключения() Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиОшибкаСервиса() И ДанныеОшибки.ТипОшибки = "BACKEND_CALL_ERROR" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка при вызове сервиса ЦРПТ.'");
	ИначеЕсли КодОшибки = КодОшибкиОшибкаСервиса() И ДанныеОшибки.ТипОшибки = "BACKEND_API_ERROR" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Сервис ЦРПТ вернул ошибку.'");
	ИначеЕсли КодОшибки = КодОшибкиОшибкаСервиса() И ДанныеОшибки.ТипОшибки = "BACKEND_UNDECODEABLE_RESPONSE" Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Ответ сервиса ЦРПТ не поддается расшифровке.'");
	ИначеЕсли КодОшибки = КодОшибкиОшибкаСервиса() Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Ошибка работы с сервисом ЦРПТ.'");
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеОшибки.СообщениеОбОшибке) Тогда
		ДанныеОшибки.СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
КонецФункции

// Производит чтение ошибки сервиса из тела ответа и формирует результат обработки.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//  ДанныеОшибки - Структура - результат обработки ошибки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//        может быть обработан вызывающим методом:
//    * ДанныеОтвета - Соответствие, Неопределено - ответ ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * ЗаголовкиОтвета - Соответствие, Неопределено - заголовки ответа ЦРПТ преобразованный методом ПрочитатьJSON.
//        Может быть возвращено значение Неопределено, если в процессе вызова были ошибки;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Процедура ПолучитьДанныеОшибкиСервиса(ТелоJSON, ДанныеОшибки)
	
	// Ответ сервиса:
	//
	// {
	//  "type": "string",
	//  "title": "string",
	//  "status": 400,
	//  "detail": "string",
	//  "instance": "string",
	//  "backendErrorResponseHeaders": "string",
	//  "backendErrorResponse": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		
		Результат = ПрочитатьJSON(ЧтениеОтвета, Истина);
		
		ДанныеОшибки.ТипОшибки = Результат.Получить("type");
		ДанныеОшибки.ДанныеОтвета = Результат.Получить("backendErrorResponse");
		ДанныеОшибки.ЗаголовкиОтвета = Результат.Получить("backendErrorResponseHeaders");
		
	Исключение
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать тело ошибки сервиса:
					|%1
					|
					|%2'"),
			ТелоJSON,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Лев(ИнформацияОбОшибке, 5120),
			Истина);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль()
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса()
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаСервиса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаСервиса()
	
	Возврат "ОшибкаСервиса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения()
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "ПревышеноКоличествоПопыток".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПревышеноКоличествоПопыток()
	
	Возврат "ПревышеноКоличествоПопыток";
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интеграция с ЦРПТ'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Формирует строку Base64 из обычной строки
//
// Параметры:
//  Значение  - Строка - преобразует строку в Base64.
//
// Возвращаемое значение:
//  Строка - результат преобразования.
//
Функция Base64ИзСтроки(Значение)
	
	Результат = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Значение));
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
