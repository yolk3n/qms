/// Функции, именующие магические константы в коде
//
// Модуль сделан повторно используемым, поскольку это работает быстрее, чем вызов обычной функции,
// тем более, что константы всё равно не меняются.
//
// Конечно, правильнее было бы назвать модуль ДемистификацияКонстант,
// но название МагическиеКонстанты больше ласкает слух.
/// 
#Область Открытый_интерфейс

/// Рождество Христово
Функция ПустаяДата() Экспорт
	
	Возврат '0001-01-01';
	
КонецФункции

// Пустой уникальный идентификатор
Функция ПустойУникальныйИдентификатор() Экспорт
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции

/// Максимальная дата (без времени) в запросах
Функция МаксимальнаяДата() Экспорт
	
	Возврат '3999-12-31';
	
КонецФункции

/// Число секунд в тридцатиминутном интервале времени
//
// Возвращаемое значение:
//   Число - результат вычисления выражения 30 * 60.
///
Функция ТридцатьМинутВСекундах() Экспорт
	
	Возврат 30 * 60;
	
КонецФункции

/// Число секунд в пятнадцатиминутном интервале времени
//
// Возвращаемое значение:
//   Число - результат вычисления выражения 15 * 60.
///
Функция ПятнадцатьМинутВСекундах() Экспорт
	
	Возврат 15 * 60;
	
КонецФункции

/// Разность дат, равная в среднем одному году
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - среднее число секунд в году.
///
Функция ОдинГод() Экспорт
	
	// По григорианскому календарю каждый четвертый год,
	// кроме трех из четырех лет за 400 лет состоит из 366 дней,
	// а остальные из 365. Значит в среднем число дней будет...
	// (100 - 3 - это каждый четвертый за 400 лет кроме трех).
	СреднееЧислоДнейВГоду_ = (365 * 400 + 100 - 3) / 400;
	
	// Обратите внимание, что среднее число секунд в году будет
	// целым, так как 24 * 60 * 60 нацело делится на 400.
	Возврат СреднееЧислоДнейВГоду_ * МагическиеКонстанты.ОдниСутки();
	
КонецФункции

/// Разность дат, равная одной неделе
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - число секунд в неделе.
///
Функция ОднаНеделя() Экспорт
	
	Возврат '2019-02-27' - '2019-02-20';
	
КонецФункции

/// Разность дат, равная одним суткам
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - число секунд в сутках.
///
Функция ОдниСутки() Экспорт
	
	Возврат '0001-01-02' - '0001-01-01';
	
КонецФункции

/// Разность дат, равная одному часу
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - число секунд в часе.
///
Функция ОдинЧас() Экспорт
	
	Возврат '0001-01-01 01:00:00' - '0001-01-01 00:00:00';
	
КонецФункции

/// Разность дат, равная одной минуте
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - число секунд в минуте.
///
Функция ОднаМинута() Экспорт
	
	Возврат '0001-01-01 00:01:00' - '0001-01-01 00:00:00';
	
КонецФункции

/// Среднее число секунд в году, то есть в 365.25 днях
//
// Возвращаемое значение:
//   Число - в текущей версии платформы - число секунд в 365 с четвертью днях.
///
Функция СреднееЧислоСекундВГоду() Экспорт
	
	Возврат ('2019-02-27' - '2015-02-27') / 4;
	
КонецФункции

/// Строка допустимых пробельных символов
//
// Возвращаемое значение:
//   Строка - Строка, состоящая из пробела и символов объекта Символы.
///
Функция ПробельныеСимволы() Экспорт
	
	Возврат
		СтрШаблон(
			" %1%2%3%4%5%6",
			Символы.ВК,
			Символы.ВТаб,
			Символы.НПП,
			Символы.ПС,
			Символы.ПФ,
			Символы.Таб
		)
	;
	
КонецФункции

/// Разделитель групп разрядов в строковом представлении чисел по умолчанию
Функция РазделительГруппРазрядов() Экспорт
	
	// Возьмем строковое представление числа 1111.
	ТысячаСтрокой_ = Строка(1111);
	
	// Удалим из него все единицы. Останется только разделитель групп разрадов, если он есть.
	РазделительГрупп_ = СтрЗаменить(ТысячаСтрокой_, "1", "");
	
	// Вернем этот разделитель.
	Возврат РазделительГрупп_;
	
КонецФункции

/// Безопасный разделитель для функции СтрСоединить
//
// Этот разделитель не должен встречаться ни среди разделителей групп
// разрядов, ни в качестве разделитея целой и дробной части,
// ни в уникальных идентификаторах.
//
// Возвращаемое значение:
//   Строка - Строка из одного символа.
///
Функция Разделитель1() Экспорт
	Возврат "|";
КонецФункции

/// Безопасный разделитель для функции СтрСоединить
//
// Этот разделитель не должен встречаться ни среди разделителей групп
// разрядов, ни в качестве разделитея целой и дробной части,
// ни в уникальных идентификаторах.
//
// Возвращаемое значение:
//   Строка - Строка из одного символа.
///
Функция Разделитель2() Экспорт
	Возврат ";";
КонецФункции

/// Незаполненное значение
//
// В качестве незаполненного значения будем использовать значение типа Дата.
// Во-первых, его можно использовать в качестве значения по умолчанию параметров
// процедур и функций.
// Во-вторых, предполагая, что внутреннее представление типа Дата - это целое число
// (число секунд), можно сделать вывод, что операции сравнения с ним быстрые,
// по крайней мере быстрее сравнения строк.
// Само значение было выбрано исходя из того, что практической значимости
// у дат, относящихся к первому тысячелетию нашей эры, нет.
// Дата была выбрана как дата рождения В. И. Ленина, а при выборе года обнаружилось,
// что по некоторым данным 22 апреля 571 года родился пророк Мухаммед.
// В итоге выбор пал именно на эту дату. Время выбрано случайным образом.
//
// Возвращамое значение:
//   Дата - Дата 22 апреля 571 года 15 часов 29 минут 26 секунд. 
///
Функция НезаполненноеЗначение() Экспорт
	Возврат '05710422152926';
КонецФункции

/// Все буквы
//
// Возвращаемое значение:
//   Строка - Все буквы русского и латинского алфавитов в нижнем и верхнем регистре и символ "_".
///
Функция Буквы() Экспорт
	
	ЛатинскиеБуквы_ = "abcdefghijklmnopqrstuvwxyz";
	РусскиеБуквы_ = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Возврат "_" + НРег(ЛатинскиеБуквы_ + РусскиеБуквы_) + ВРег(ЛатинскиеБуквы_ + РусскиеБуквы_);
	
КонецФункции

/// Буквы и цифры
//
// Возвращаемое значение:
//   Строка - все буквы и все цифры.
///
Функция БуквыИЦифры() Экспорт
	
	Возврат "0123456789" + Буквы();
	
КонецФункции

/// Сравнимые на больше-меньше типы данных 1С:Предприятия
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов, содержащее все типы,
//     поддерживающие сравнение на больше-меньше.
///
Функция СравнимыеТипы() Экспорт
	
	Возврат Новый ОписаниеТипов("Число, Дата, Строка, Булево");
	
КонецФункции

#КонецОбласти
