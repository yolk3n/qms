
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает список номенклатуры по отбору во временную таблицу
//
// Параметры:
//  ТаблицаЗаказа - ТаблицаЗначений - таблица с колонками НоменклатураЗаказа и ЕдиницаИзмеренияЗаказа.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет сохранена временная таблица
//  ИмяВременнойТаблицы - Строка - имя временной таблицы
//
Процедура ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "НоменклатураПоЗаказу") Экспорт
	
	ИсходнаяТаблицаЗаказа = ТаблицаЗаказа.Скопировать(, "НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	ИсходнаяТаблицаЗаказа.Свернуть("НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	
	НоменклатураПоОтбору_ФОЛС = ПолучитьНоменклатуруПоОтбору_ФОЛС(ИсходнаяТаблицаЗаказа);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НоменклатураПоОтбору.НоменклатураЗаказа                  КАК НоменклатураЗаказа,
	|	НоменклатураПоОтбору.ЕдиницаИзмеренияЗаказа              КАК ЕдиницаИзмеренияЗаказа,
	|	НоменклатураПоОтбору.Номенклатура                        КАК Номенклатура,
	|	НоменклатураПоОтбору.ЕдиницаИзмерения                    КАК ЕдиницаИзмерения,
	|	НоменклатураПоОтбору.МинимальнаяЕдиницаОтпускаИзАптеки   КАК МинимальнаяЕдиницаОтпуска,
	|	НоменклатураПоОтбору.ОсновнаяЕдиницаУчета                КАК ОсновнаяЕдиницаУчета,
	|	НоменклатураПоОтбору.Приоритет                           КАК Приоритет,
	|	НоменклатураПоОтбору.ПервичнаяУпаковка                   КАК ПервичнаяУпаковка,
	|	НоменклатураПоОтбору.ВторичнаяУпаковка                   КАК ВторичнаяУпаковка,
	|	НоменклатураПоОтбору.ТретичнаяУпаковка                   КАК ТретичнаяУпаковка
	|ИЗ
	|	&НоменклатураПоОтбору_ФОЛС КАК НоменклатураПоОтбору
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяВременнойТаблицы;
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НоменклатураПоОтбору_ФОЛС", НоменклатураПоОтбору_ФОЛС);
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет связь номенклатуры со строками заказа
//
// Параметры:
//  ТаблицаЗаказа - ТаблицаЗначений - таблица с колонками НоменклатураЗаказа и ЕдиницаИзмеренияЗаказа.
//  СписокНоменклатуры - Массив - список номенклатуры 
//
// Возвращаемое значение:
//  ДеревоЗначений -
//    Номенклатура
//    НоменклатураЗаказа
//    ЕдиницаИзмеренияЗаказа
//    КоэффициентЕдиницыЗаказа
//
Функция ПолучитьСвязьНоменклатурыСЗаказом(ТаблицаЗаказа, СписокНоменклатуры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НоменклатураПоЗаказу.Номенклатура КАК Номенклатура,
	|	НоменклатураПоЗаказу.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	НоменклатураПоЗаказу.ЕдиницаИзмеренияЗаказа КАК ЕдиницаИзмеренияЗаказа
	|ИЗ
	|	НоменклатураПоЗаказу КАК НоменклатураПоЗаказу
	|ГДЕ
	|	НоменклатураПоЗаказу.Номенклатура В (&Номенклатура)
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПоЗаказу.Приоритет
	|
	|ИТОГИ ПО Номенклатура
	|";
	
	НоменклатураПоЗаказу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	НоменклатураПоЗаказу.Колонки.Добавить("КоэффициентЕдиницыЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 9, ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого СтрокаНоменклатуры Из НоменклатураПоЗаказу.Строки Цикл
		УдаляемыеСтроки = Новый Массив;
		Для Каждого СтрокаЗаказа Из СтрокаНоменклатуры.Строки Цикл
			СтрокаЗаказа.КоэффициентЕдиницыЗаказа = КоэффициентЕдиницыЗаказа(СтрокаНоменклатуры.Номенклатура, СтрокаЗаказа.НоменклатураЗаказа, СтрокаЗаказа.ЕдиницаИзмеренияЗаказа);
			Если СтрокаЗаказа.КоэффициентЕдиницыЗаказа = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаЗаказа);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СтрокаНоменклатуры.Строки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат НоменклатураПоЗаказу;
	
КонецФункции

// Возвращает структуру с параметрами получения остатков номенклатуры
//
Функция ПараметрыПолученияОстатков() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаОстатков"                 , Дата(1, 1, 1));
	Параметры.Вставить("Организация"                  , Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("Склад"                        , Справочники.Склады.ПустаяСсылка());
	Параметры.Вставить("МестоХранения"                , Справочники.МестаХранения.ПустаяСсылка());
	Параметры.Вставить("ИсточникФинансирования"       , Справочники.ИсточникиФинансирования.ПустаяСсылка());
	Параметры.Вставить("БезЗабракованныхИПросроченных", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Подбирает номенклатуру из остатков на складе по строке заказа
//
// Параметры:
//  ТаблицаЗаказа        - ТаблицаЗначений - таблица со строками заказа
//  ПараметрыОстатков    - Структура - см. ОтборНоменклатуры.ПараметрыПолученияОстатков()
//  ПодбиратьСУчетомМинимальнойЕдиницыОтпуска - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьОстаткиНоменклатурыПоЗаказу(ТаблицаЗаказа, ПараметрыОстатков, ПодбиратьСУчетомМинимальнойЕдиницыОтпуска = Истина) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ПараметрыОстатков.Организация);
	Запрос.УстановитьПараметр("Склад", ПараметрыОстатков.Склад);
	Запрос.УстановитьПараметр("МестоХранения", ПараметрыОстатков.МестоХранения);
	Запрос.УстановитьПараметр("ИсточникФинансирования", ПараметрыОстатков.ИсточникФинансирования);
	ДатаОстатков = ПараметрыОстатков.ДатаОстатков;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаОстатков) + 1);
	Запрос.УстановитьПараметр("ПредельнаяДатаСрокаГодности", ?(ЗначениеЗаполнено(ДатаОстатков), НачалоДня(ДатаОстатков), НачалоДня(ТекущаяДатаСеанса())));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладах.Номенклатура            КАК Номенклатура,
	|	ТоварыНаСкладах.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ТоварыНаСкладах.Партия                  КАК Партия,
	|	ТоварыНаСкладах.МестоХранения           КАК МестоХранения,
	|	ТоварыНаСкладах.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток  КАК Остаток,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток > ЕСТЬNULL(ОстаткиНаДату.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиНаДату.ВРезервеСоСкладаОстаток, 0)
	|			ТОГДА ЕСТЬNULL(ОстаткиНаДату.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиНаДату.ВРезервеСоСкладаОстаток, 0)
	|		ИНАЧЕ ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток
	|	КОНЕЦ                                   КАК ОстатокНаДату,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыНаСкладах.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
	|		ИНАЧЕ ТоварыНаСкладах.СерияНоменклатуры.ГоденДо
	|	КОНЕЦ                                   КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыНаСкладах.Партия.ДокументОприходования.Дата, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
	|		ИНАЧЕ ТоварыНаСкладах.Партия.ДокументОприходования.Дата
	|	КОНЕЦ                                   КАК ДатаПартии
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Врем.Номенклатура
	|					ИЗ
	|						НоменклатураПоЗаказу КАК Врем)) КАК ТоварыНаСкладах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СвободныеОстатки.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Врем.Номенклатура
	|					ИЗ
	|						НоменклатураПоЗаказу КАК Врем)) КАК ОстаткиНаДату
	|	ПО
	|		ТоварыНаСкладах.Номенклатура = ОстаткиНаДату.Номенклатура
	|		И ТоварыНаСкладах.СерияНоменклатуры = ОстаткиНаДату.СерияНоменклатуры
	|		И ТоварыНаСкладах.Партия = ОстаткиНаДату.Партия
	|		И ТоварыНаСкладах.ИсточникФинансирования = ОстаткиНаДату.ИсточникФинансирования
	|		И ТоварыНаСкладах.МестоХранения = ОстаткиНаДату.МестоХранения
	|		
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоЗаказу.НоменклатураЗаказа         КАК НоменклатураЗаказа,
	|	НоменклатураПоЗаказу.ЕдиницаИзмеренияЗаказа     КАК ЕдиницаИзмеренияЗаказа,
	|	НоменклатураПоЗаказу.Номенклатура               КАК Номенклатура,
	|	НоменклатураПоЗаказу.Приоритет                  КАК Приоритет,
	|	НоменклатураПоЗаказу.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	НоменклатураПоЗаказу.МинимальнаяЕдиницаОтпуска  КАК МинимальнаяЕдиницаОтпуска,
	|	НоменклатураПоЗаказу.ОсновнаяЕдиницаУчета       КАК ОсновнаяЕдиницаУчета,
	|	НоменклатураПоЗаказу.ПервичнаяУпаковка          КАК Упаковка1,
	|	НоменклатураПоЗаказу.ВторичнаяУпаковка          КАК Упаковка2,
	|	НоменклатураПоЗаказу.ТретичнаяУпаковка          КАК Упаковка3,
	|	ТаблицаОстатков.СерияНоменклатуры               КАК СерияНоменклатуры,
	|	ТаблицаОстатков.СрокГодности                    КАК СрокГодности,
	|	ТаблицаОстатков.ДатаПартии                      КАК ДатаПартии
	|ИЗ
	|	НоменклатураПоЗаказу КАК НоменклатураПоЗаказу
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		НоменклатураПоЗаказу.Номенклатура = ТаблицаОстатков.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПоЗаказу.Приоритет,
	|	ТаблицаОстатков.СрокГодности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура            КАК Номенклатура,
	|	ТаблицаОстатков.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ТаблицаОстатков.Партия                  КАК Партия,
	|	ТаблицаОстатков.МестоХранения           КАК МестоХранения,
	|	ТаблицаОстатков.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	ТаблицаОстатков.СрокГодности            КАК СрокГодности,
	|	ТаблицаОстатков.Остаток                 КАК Остаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.ДатаПартии
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ТекстЗапросаОстатков = НастроитьЗапросОстатковПоПараметрам(СхемаЗапроса.ПакетЗапросов[0].ПолучитьТекстЗапроса(), ПараметрыОстатков);
	СхемаЗапроса.ПакетЗапросов[0].УстановитьТекстЗапроса(ТекстЗапросаОстатков);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Остатки = РезультатыЗапроса[2].Выгрузить();
	СписокНоменклатурыПоТребованию = РезультатыЗапроса[1].Выгрузить();
	
	ТаблицаПодбора = Новый ТаблицаЗначений;
	ТаблицаПодбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПодбора.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПодбора.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 9, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("КоличествоВЕдиницахИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("ИсточникФинансирования", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансирования"));
	ТаблицаПодбора.Колонки.Добавить("МестоХранения", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
	ТаблицаПодбора.Колонки.Добавить("Заказ", Метаданные.Обработки.ПодборТоваровВДокументСписанияПоЗаказу.ТабличныеЧасти.Корзина.Реквизиты.Заказ.Тип);
	ТаблицаПодбора.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("НоменклатураЗаказа", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("ЕдиницаИзмеренияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПодбора.Колонки.Добавить("КоэффициентЕдиницыЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 9, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("КоличествоВЕдиницахЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	КэшированныеЗначения = Новый Структура("Упаковки", Новый Соответствие);
	
	Для Каждого СтрокаТребования Из ТаблицаЗаказа Цикл
		
		КоличествоТребования = СтрокаТребования.Количество;
		
		ОтборПоЗаказу = Новый Структура;
		ОтборПоЗаказу.Вставить("НоменклатураЗаказа", СтрокаТребования.НоменклатураЗаказа);
		ОтборПоЗаказу.Вставить("ЕдиницаИзмеренияЗаказа", СтрокаТребования.ЕдиницаИзмеренияЗаказа);
		
		ИсточникФинансированияЗаказа = Неопределено;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТребования, "ИсточникФинансированияЗаказа")
		   И ЗначениеЗаполнено(СтрокаТребования.ИсточникФинансированияЗаказа) Тогда
			ИсточникФинансированияЗаказа = СтрокаТребования.ИсточникФинансированияЗаказа;
		КонецЕсли;
		
		НоменклатураПоЗаказу = СписокНоменклатурыПоТребованию.НайтиСтроки(ОтборПоЗаказу);
		Для Сч = 1 По 2 Цикл
			
			Для Каждого Номенклатура Из НоменклатураПоЗаказу Цикл
				
				Если КоличествоТребования = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Попытка
					Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, СтрокаТребования.ЕдиницаИзмеренияЗаказа);
					Если Коэффициент = 0 Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить;
				КонецПопытки;
				
				КоличествоВБазовыхЕдиницах = КоличествоТребования * Коэффициент;
				
				Отбор = Новый Структура("Номенклатура, СерияНоменклатуры", Номенклатура.Номенклатура, Номенклатура.СерияНоменклатуры);
				Если Сч = 1 И ЗначениеЗаполнено(ИсточникФинансированияЗаказа) Тогда
					Отбор.Вставить("ИсточникФинансирования", ИсточникФинансированияЗаказа);
				КонецЕсли;
				ОстаткиНоменклатуры = Остатки.НайтиСтроки(Отбор);
				
				УказанаМинимальнаяЕдиница = Ложь;
				МинимальнаяЕдиница = Номенклатура.ЕдиницаИзмерения;
				Если ПодбиратьСУчетомМинимальнойЕдиницыОтпуска И ЗначениеЗаполнено(Номенклатура.МинимальнаяЕдиницаОтпуска) Тогда
					
					МинимальнаяЕдиница = Номенклатура.МинимальнаяЕдиницаОтпуска;
					УказанаМинимальнаяЕдиница = Истина;
					
				КонецЕсли;
					
				КоэффициентМинимальнойЕдиницы = НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, МинимальнаяЕдиница);
				
				Упаковки = КэшированныеЗначения.Упаковки.Получить(Номенклатура.Номенклатура);
				Если Упаковки = Неопределено Тогда
					
					Упаковки = Новый Массив();
					
					// Основная единица учета
					Если ЗначениеЗаполнено(Номенклатура.ОсновнаяЕдиницаУчета) Тогда
						ПараметрыУпаковки = Новый Структура;
						ПараметрыУпаковки.Вставить("Упаковка", Номенклатура.ОсновнаяЕдиницаУчета);
						ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, Номенклатура.ОсновнаяЕдиницаУчета));
						Упаковки.Добавить(ПараметрыУпаковки);
					КонецЕсли;
					
					УпаковкиНоменклатуры = НоменклатураСервер.ПолучитьУпаковкиНоменклатуры(Номенклатура.Номенклатура);
					// Прочие упаковки
					Для каждого Упаковка Из УпаковкиНоменклатуры Цикл
						
						Если УказанаМинимальнаяЕдиница И Упаковка = МинимальнаяЕдиница Тогда
							Прервать;
						КонецЕсли;
						
						ПараметрыУпаковки = Новый Структура;
						ПараметрыУпаковки.Вставить("Упаковка", Упаковка);
						ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, Упаковка));
						
						Если СтрокаТребования.ЕдиницаИзмеренияЗаказа = Упаковка Тогда
							Упаковки.Вставить(0, ПараметрыУпаковки);
						Иначе
							Упаковки.Добавить(ПараметрыУпаковки);
						КонецЕсли;
						
					КонецЦикла;
					
					// Минимальная единица учета
					ПараметрыУпаковки = Новый Структура;
					ПараметрыУпаковки.Вставить("Упаковка", МинимальнаяЕдиница);
					ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, МинимальнаяЕдиница));
					Если СтрокаТребования.ЕдиницаИзмеренияЗаказа = МинимальнаяЕдиница Тогда
						Упаковки.Вставить(0, ПараметрыУпаковки);
					Иначе
						Упаковки.Добавить(ПараметрыУпаковки);
					КонецЕсли;
					
					КэшированныеЗначения.Упаковки.Вставить(Номенклатура.Номенклатура, Упаковки);
					
				КонецЕсли;
				
				Для Каждого ОстатокНоменклатуры Из ОстаткиНоменклатуры Цикл
					
					Если КоличествоВБазовыхЕдиницах <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					КоличествоОстаток = ОстатокНоменклатуры.Остаток;
					Если КоличествоОстаток <= 0 Или (УказанаМинимальнаяЕдиница И КоличествоОстаток < КоэффициентМинимальнойЕдиницы) Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоНовойСтроки = 0;
					
					Если УказанаМинимальнаяЕдиница Тогда
						// Будем подбирать количество в базовых единицах кратное коэффициенту минимальной упаковки.
						Если КоличествоОстаток > КоличествоВБазовыхЕдиницах Тогда
							Если КоличествоВБазовыхЕдиницах % КоэффициентМинимальнойЕдиницы = 0 Тогда
								// Если количествоВБазовыхЕдиницах кратно коэффициенту мин. единицы то берем это количество.
								КоличествоНовойСтроки = КоличествоВБазовыхЕдиницах;
							Иначе
								// Иначе берем количество кратное коэффициенту мин. упаковки.
								КоличествоБазовыхВМинЕдинице = (Цел(КоличествоВБазовыхЕдиницах / КоэффициентМинимальнойЕдиницы) + 1) * КоэффициентМинимальнойЕдиницы;
								Если КоличествоОстаток >= КоличествоБазовыхВМинЕдинице Тогда
									КоличествоНовойСтроки = КоличествоБазовыхВМинЕдинице
								Иначе
									КоличествоНовойСтроки = Цел(КоличествоВБазовыхЕдиницах / КоэффициентМинимальнойЕдиницы) * КоэффициентМинимальнойЕдиницы;
								КонецЕсли;
							КонецЕсли;
						Иначе
							// Берем количество кратное коэффициенту мин. упаковки.
							КоличествоНовойСтроки = Цел(КоличествоОстаток / КоэффициентМинимальнойЕдиницы) * КоэффициентМинимальнойЕдиницы;
						КонецЕсли;
						
					Иначе
						
						Если КоличествоОстаток > КоличествоВБазовыхЕдиницах Тогда
							КоличествоНовойСтроки = КоличествоВБазовыхЕдиницах;
						Иначе
							КоличествоНовойСтроки = КоличествоОстаток;
						КонецЕсли;
						
					КонецЕсли;
					
					КоличествоВБазовыхЕдиницах = КоличествоВБазовыхЕдиницах - КоличествоНовойСтроки;
					ОстатокНоменклатуры.Остаток = ОстатокНоменклатуры.Остаток - КоличествоНовойСтроки;
					
					Для Каждого СтруктураУпаковки Из Упаковки Цикл
						
						Если КоличествоНовойСтроки = 0 Тогда
							Прервать;
						КонецЕсли;
						
						КоличествоУпаковок = Цел(КоличествоНовойСтроки / СтруктураУпаковки.Коэффициент);
						Если Не КоличествоУпаковок = 0 Или СтруктураУпаковки.Упаковка = МинимальнаяЕдиница Тогда
							
							НоваяСтрока = ТаблицаПодбора.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ОстатокНоменклатуры);
							
							НоваяСтрока.ЕдиницаИзмерения = СтруктураУпаковки.Упаковка;
							НоваяСтрока.Коэффициент = СтруктураУпаковки.Коэффициент;
							НоваяСтрока.Количество = ?(СтруктураУпаковки.Упаковка = МинимальнаяЕдиница, КоличествоНовойСтроки, КоличествоУпаковок * НоваяСтрока.Коэффициент);
							НоваяСтрока.КоличествоВЕдиницахИзмерения =  ?(СтруктураУпаковки.Упаковка = МинимальнаяЕдиница, НоваяСтрока.Количество / НоваяСтрока.Коэффициент, КоличествоУпаковок);
							
							НоваяСтрока.Заказ = СтрокаТребования.Заказ;
							НоваяСтрока.КодСтроки = СтрокаТребования.КодСтроки;
							НоваяСтрока.НоменклатураЗаказа = СтрокаТребования.НоменклатураЗаказа;
							НоваяСтрока.ЕдиницаИзмеренияЗаказа = СтрокаТребования.ЕдиницаИзмеренияЗаказа;
							НоваяСтрока.КоэффициентЕдиницыЗаказа = Коэффициент;
							НоваяСтрока.КоличествоВЕдиницахЗаказа = НоваяСтрока.Количество / Коэффициент;
							
							КоличествоНовойСтроки = КоличествоНовойСтроки - НоваяСтрока.Количество;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если КоличествоВБазовыхЕдиницах = 0 Тогда
					КоличествоТребования = 0;
				Иначе
					КоличествоТребования = КоличествоВБазовыхЕдиницах / Коэффициент;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ИсточникФинансированияЗаказа) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоТребования > 0 Тогда
			ТекстСообщения = НСтр("ru='Для строки требования ""%СтрокаТребования%"" получилось подобрать %Количество% из %КоличествоЗаказа%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаТребования%", СокрЛП(СтрокаТребования.НоменклатураЗаказа) + "(" + СокрЛП(СтрокаТребования.ЕдиницаИзмеренияЗаказа) + ")");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", СтрокаТребования.Количество - КоличествоТребования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоЗаказа%", СтрокаТребования.Количество);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПодбора;
	
КонецФункции

// Возвращает количество базовых единиц номенклатуры в единице измерения заказа
//
// Параметры:
//  НоменклатураЗаказа - СправочникСсылка.КлючиАналитикиОписанияОтбораНоменклатуры
//  ЕдиницаИзмерения   - СправочникСсылка.ЕдиницыИзмерения
//  Номенклатура       - СправочникСсылка.Номенклатура
//
// Возвращаемое значение:
//  Число
//
Функция КоэффициентЕдиницыЗаказа(НоменклатураЗаказа, ЕдиницаИзмерения, Номенклатура) Экспорт
	
	ПараметрыОтбора = РасширеннаяАналитикаУчета.ПолучитьЗначенияАналитики(НоменклатураЗаказа);
	
	Если НоменклатураСоответствуетПараметрамОтбора(Номенклатура, ПараметрыОтбора) Тогда
		Возврат НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура, ЕдиницаИзмерения, 0);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает единицы измерения номенклатуры по отбору
//
// Параметры:
//  ПараметрыОтбора - Структура
//    Номенклатура           - СправочникСсылка.Номенклатура
//    ТорговоеНаименование   - СправочникСсылка.ТорговыеНаименования
//    ДействующиеВеществаМНН - СправочникСсылка.ДействующиеВеществаМНН
//    ФормаВыпуска           - СправочникСсылка.ФормыВыпуска
//
// Возвращаемое значение:
//  Массив(СправочникСсылка.ЕдиницыИзмерения)
//
Функция ЕдиницыИзмеренияПоОтбору(ПараметрыОтбора) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		Возврат НоменклатураСервер.ЕдиницыИзмерения(ПараметрыОтбора.Номенклатура);
	Иначе
		Возврат АптечныеТовары.ЕдиницыИзмеренияПрепарата(ПараметрыОтбора);
	КонецЕсли;
	
КонецФункции

// Возвращает единицу измерения соответствующую отбору
//
// Параметры:
//  ПараметрыОтбора - Структура - должна содержать поле Номенклатура, если указанное поле не заполнено,
//                                то должны присутствовать поля ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска.
//
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмерения
//
Функция ЕдиницаИзмеренияПоОтбору(ПараметрыОтбора) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		Возврат НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ПараметрыОтбора.Номенклатура);
	КонецЕсли;
	
	Возврат АптечныеТовары.ОсновнаяЕдиницаИзмерения(ПараметрыОтбора);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция НастроитьЗапросОстатковПоПараметрам(ТекстЗапросаОстатков, ПараметрыОстатков)
	
	ДатаОстатков = ПараметрыОстатков.ДатаОстатков;
	
	ЗапросОстатков = Новый СхемаЗапроса;
	ЗапросОстатков.УстановитьТекстЗапроса(ТекстЗапросаОстатков);
	ПоляЗапроса = ЗапросОстатков.ПакетЗапросов[0].Колонки;
	Если ЗначениеЗаполнено(ДатаОстатков) Тогда
		
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("Остаток")));
		ПоляЗапроса.Найти("ОстатокНаДату").Псевдоним = "Остаток";
	Иначе
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("ОстатокНаДату")));
		ЗапросОстатков.ПакетЗапросов[0].Операторы[0].Источники.Удалить("ОстаткиНаДату");
	КонецЕсли;
	
	Оператор = ЗапросОстатков.ПакетЗапросов[0].Операторы[0];
	
	Если ПараметрыОстатков.БезЗабракованныхИПросроченных Тогда
		Источник = Оператор.Источники.Добавить("РегистрСведений.КэшИнформацииОбОбъектах", "СерияЗабракована");
		ИсточникОстатков = Оператор.Источники.НайтиПоПсевдониму("ТоварыНаСкладах");
		ИсточникОстатков.Соединения.Добавить(Источник, "ТоварыНаСкладах.СерияНоменклатуры = СерияЗабракована.Объект");
		
		Оператор.Отбор.Добавить("ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) = ЛОЖЬ");
		
		Оператор.Отбор.Добавить("
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТоварыНаСкладах.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|		ИНАЧЕ ТоварыНаСкладах.СерияНоменклатуры.ГоденДо
		|	КОНЕЦ > &ПредельнаяДатаСрокаГодности
		|");
	КонецЕсли;
	
	ИсточникОстатков = Оператор.Источники.НайтиПоПсевдониму("ТоварыНаСкладах");
	Параметры = ИсточникОстатков.Источник.Параметры[1];
	Если ЗначениеЗаполнено(ПараметрыОстатков.ИсточникФинансирования) Тогда
		Параметры.Выражение = Новый ВыражениеСхемыЗапроса(Строка(Параметры.Выражение) + Символы.ПС + "И ИсточникФинансирования В ИЕРАРХИИ (&ИсточникФинансирования)");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОстатков.МестоХранения) Тогда
		Параметры.Выражение = Новый ВыражениеСхемыЗапроса(Строка(Параметры.Выражение) + Символы.ПС + " И МестоХранения = &МестоХранения");
	КонецЕсли;
	
	Возврат ЗапросОстатков.ПолучитьТекстЗапроса();
	
КонецФункции

Функция НоменклатураСоответствуетПараметрамОтбора(Номенклатура, ПараметрыОтбора)
	
	Если Номенклатура = ПараметрыОтбора.Номенклатура Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		ОписаниеНоменклатурыЗаказа = НоменклатураСервер.ОписаниеНоменклатуры(ПараметрыОтбора.Номенклатура);
	Иначе
		ОписаниеНоменклатурыЗаказа = Новый Структура("ЭтоЛекарственноеСредство", Истина);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(ОписаниеНоменклатурыЗаказа, ПараметрыОтбора, "ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска");
	КонецЕсли;
	
	ОписаниеНоменклатуры = НоменклатураСервер.ОписаниеНоменклатуры(Номенклатура);
	Если ОписаниеНоменклатуры.ЭтоЛекарственноеСредство И ОписаниеНоменклатурыЗаказа.ЭтоЛекарственноеСредство Тогда
		Если АптечныеТовары.ПрепаратыСинонимичны(ОписаниеНоменклатуры, ОписаниеНоменклатурыЗаказа) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных номенклатуры по отбору
#Область ПолучениеДанныхНоменклатурыПоОтбору

Функция ПолучитьНоменклатуруПоОтбору_ФОЛС(ИсходнаяТаблицаЗаказа)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа      КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа  КАК ЕдиницаИзмеренияЗаказа
	|ПОМЕСТИТЬ ИсходнаяТаблицаЗаказа
	|ИЗ
	|	&ТаблицаЗаказа КАК ТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа                              КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа                          КАК ЕдиницаИзмеренияЗаказа,
	|	АналитикаТребования.Номенклатура                              КАК Номенклатура,
	|	АналитикаТребования.ТорговоеНаименование                      КАК ТорговоеНаименование,
	|	АналитикаТребования.ДействующиеВеществаМНН                    КАК ДействующиеВеществаМНН,
	|	АналитикаТребования.ФормаВыпуска                              КАК ФормаВыпуска,
	|	АналитикаТребования.ФормаВыпуска.ЛекарственнаяФорма           КАК ЛекарственнаяФорма,
	|	АналитикаТребования.ФормаВыпуска.ЛекарственнаяФорма.Группа    КАК ГруппаЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.ЕдиницаИзмерения             КАК ЕдиницаИзмеренияЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы  КАК ТипЕдиницыИзмеренияЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.ЕдиницаИзмерения.Коэффициент КАК КоэффициентЕдиницыИзмеренияЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаЕдиницыИзмеренияЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.Количество                   КАК КоличествоЛекарственнойФормы,
	|	АналитикаТребования.ФормаВыпуска.НеНормализованныеДанные      КАК НеНормализованныеДанные
	|ПОМЕСТИТЬ ТаблицаЗаказа
	|ИЗ
	|	ИсходнаяТаблицаЗаказа КАК ТаблицаЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикаТребования
	|		ПО
	|			ТаблицаЗаказа.НоменклатураЗаказа = АналитикаТребования.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходнаяТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа                      КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа                  КАК ЕдиницаИзмеренияЗаказа,
	|	ДанныеНоменклатуры.Ссылка                             КАК Номенклатура,
	|	ДанныеНоменклатуры.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
	|	ДанныеНоменклатуры.МинимальнаяЕдиницаОтпускаИзАптеки  КАК МинимальнаяЕдиницаОтпускаИзАптеки,
	|	ДанныеНоменклатуры.ОсновнаяЕдиницаУчета               КАК ОсновнаяЕдиницаУчета,
	
	|	ПервичнаяУпаковка.Упаковка                            КАК ПервичнаяУпаковка,
	|	ВторичнаяУпаковка.Упаковка                            КАК ВторичнаяУпаковка,
	|	ТретичнаяУпаковка.Упаковка                            КАК ТретичнаяУпаковка,
	
	|	МИНИМУМ(
	|		ВЫБОР
	|			КОГДА ТаблицаЗаказа.Номенклатура = ДанныеНоменклатуры.Ссылка
	|				
	|				ТОГДА 10
	|				
	|			КОГДА ТаблицаЗаказа.ТорговоеНаименование <> ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|					И ТаблицаЗаказа.ТорговоеНаименование = ДанныеНоменклатуры.ЭлементКАТ.ТорговоеНаименование
	|				
	|				ТОГДА ВЫБОР
	|					КОГДА (ДанныеНоменклатуры.ЕдиницаИзмерения = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ПервичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ВторичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ТретичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа)
	|						ТОГДА 20
	|					ИНАЧЕ 25
	|				КОНЕЦ
	|				
	|			КОГДА ТаблицаЗаказа.ДействующиеВеществаМНН <> ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)
	|					И ТаблицаЗаказа.ДействующиеВеществаМНН = ДанныеНоменклатуры.ЭлементКАТ.ДействующиеВеществаМНН
	|				
	|				ТОГДА ВЫБОР
	|					КОГДА (ДанныеНоменклатуры.ЕдиницаИзмерения = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ПервичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ВторичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа
	|							ИЛИ ТретичнаяУпаковка.Упаковка = ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа)
	|						ТОГДА 30
	|					ИНАЧЕ 35
	|				КОНЕЦ
	|				
	|		КОНЕЦ
	|		+ ВЫБОР
	|			КОГДА ФормыВыпускаНеЧеткийПоиск.Ссылка = ТаблицаЗаказа.ФормаВыпуска
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	)                                                     КАК Приоритет
	|ИЗ
	|	ТаблицаЗаказа КАК ТаблицаЗаказа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ФормыВыпуска КАК ФормыВыпускаНеЧеткийПоиск
	|		ПО
	|			ФормыВыпускаНеЧеткийПоиск.Ссылка = ТаблицаЗаказа.ФормаВыпуска
	|			ИЛИ(
	|				(ТаблицаЗаказа.ЛекарственнаяФорма = ФормыВыпускаНеЧеткийПоиск.ЛекарственнаяФорма
	|					ИЛИ (ТаблицаЗаказа.ГруппаЛекарственнойФормы <> ЗНАЧЕНИЕ(Справочник.ГруппыЛекарственныхФорм.ПустаяСсылка)
	|							И ТаблицаЗаказа.ГруппаЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЛекарственнаяФорма.Группа))
	|				И (ТаблицаЗаказа.ЕдиницаИзмеренияЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения
	|						И ТаблицаЗаказа.КоличествоЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.Количество
	|					ИЛИ
	|						ВЫБОР
	|							КОГДА ТаблицаЗаказа.ТипЕдиницыИзмеренияЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.ТипЕдиницы
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗаказа.ТипЕдиницыИзмеренияЛекарственнойФормы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|											ТОГДА ТаблицаЗаказа.КоличествоЛекарственнойФормы * ТаблицаЗаказа.КоэффициентЕдиницыИзмеренияЛекарственнойФормы
	|													= ФормыВыпускаНеЧеткийПоиск.Количество * ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.Коэффициент
	|										ИНАЧЕ ТаблицаЗаказа.БазоваяЕдиницаЕдиницыИзмеренияЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения
	|												И ТаблицаЗаказа.КоличествоЛекарственнойФормы * ТаблицаЗаказа.КоэффициентЕдиницыИзмеренияЛекарственнойФормы
	|													= ФормыВыпускаНеЧеткийПоиск.Количество
	|											ИЛИ
	|												ТаблицаЗаказа.ЕдиницаИзмеренияЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения
	|												И ТаблицаЗаказа.КоличествоЛекарственнойФормы =
	|													ФормыВыпускаНеЧеткийПоиск.Количество * ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.Коэффициент
	|											ИЛИ
	|												ТаблицаЗаказа.БазоваяЕдиницаЕдиницыИзмеренияЛекарственнойФормы = ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения
	|												И ТаблицаЗаказа.КоэффициентЕдиницыИзмеренияЛекарственнойФормы <> 0
	|												И ТаблицаЗаказа.КоличествоЛекарственнойФормы * ТаблицаЗаказа.КоэффициентЕдиницыИзмеренияЛекарственнойФормы =
	|													ФормыВыпускаНеЧеткийПоиск.Количество * ФормыВыпускаНеЧеткийПоиск.ЕдиницаИзмерения.Коэффициент
	|									КОНЕЦ
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|				И ТаблицаЗаказа.НеНормализованныеДанные = ФормыВыпускаНеЧеткийПоиск.НеНормализованныеДанные)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК ДанныеНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиЛекарственныхСредств КАК ПервичнаяУпаковка
	|				ПО
	|					ДанныеНоменклатуры.ЭтоЛекарственноеСредство
	|					И ДанныеНоменклатуры.ЭлементКАТ = ПервичнаяУпаковка.КАТ
	|					И ПервичнаяУпаковка.НомерУпаковки = 1
	|				
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиЛекарственныхСредств КАК ВторичнаяУпаковка
	|				ПО
	|					ДанныеНоменклатуры.ЭтоЛекарственноеСредство
	|					И ДанныеНоменклатуры.ЭлементКАТ = ВторичнаяУпаковка.КАТ
	|					И ВторичнаяУпаковка.НомерУпаковки = 2
	|				
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиЛекарственныхСредств КАК ТретичнаяУпаковка
	|				ПО
	|					ДанныеНоменклатуры.ЭтоЛекарственноеСредство
	|					И ДанныеНоменклатуры.ЭлементКАТ = ТретичнаяУпаковка.КАТ
	|					И ТретичнаяУпаковка.НомерУпаковки = 3
	|		ПО
	|			ДанныеНоменклатуры.Ссылка = ТаблицаЗаказа.Номенклатура
	|			ИЛИ (
	|				ДанныеНоменклатуры.ЭтоЛекарственноеСредство
	|				И (ТаблицаЗаказа.ТорговоеНаименование <> ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|					И ТаблицаЗаказа.ТорговоеНаименование = ДанныеНоменклатуры.ЭлементКАТ.ТорговоеНаименование
	|				ИЛИ ТаблицаЗаказа.ДействующиеВеществаМНН <> ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)
	|					И ТаблицаЗаказа.ДействующиеВеществаМНН = ДанныеНоменклатуры.ЭлементКАТ.ДействующиеВеществаМНН)
	|				И ДанныеНоменклатуры.ЭлементКАТ.ФормаВыпуска = ФормыВыпускаНеЧеткийПоиск.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказа.НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа,
	|	ДанныеНоменклатуры.Ссылка,
	|	ДанныеНоменклатуры.ЕдиницаИзмерения,
	|	ДанныеНоменклатуры.МинимальнаяЕдиницаОтпускаИзАптеки,
	|	ДанныеНоменклатуры.ОсновнаяЕдиницаУчета,
	|	ПервичнаяУпаковка.Упаковка,
	|	ВторичнаяУпаковка.Упаковка,
	|	ТретичнаяУпаковка.Упаковка
	|");
	
	Запрос.УстановитьПараметр("ТаблицаЗаказа", ИсходнаяТаблицаЗаказа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // ПолучениеДанныхНоменклатурыПоОтбору

#КонецОбласти // СлужебныеПроцедурыИФункции
