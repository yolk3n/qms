
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Процедура вызывает обработчики строки
//
// Параметры:
//  ТекущаяСтрока - данные обрабатываемой строки
//  СтруктураДействий - структура с выполняемыми действиями
//  КэшированныеЗначения - структура с кэшированными значениями
//
Процедура ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Или СтруктураДействий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Тогда
		
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		
		Возврат;
		
	КонецЕсли;
	
	ПроверитьКорректностьСерииНоменклатурыУпаковкиПартии(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЕдиницуИзмерения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЕдиницуИзмеренияПоОтбору(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПараметрыУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗабраковкуСерий(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоэффициент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиниц(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоДаннымУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоэффициентЕдиницыОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковку(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦену(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСумму(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуЛьготы(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРегл(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерактивные процедуры
#Область ИнтерактивныйПроцедуры

// Возвращает параметры выбора партии по умолчанию
//
// Параметры:
//  Отбор - отбор партий
//  ТекущаяСтрока - дополнительный отбор партий
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыВыбораПартии(Отбор, ТекущаяСтрока) Экспорт
	
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("НачалоПериода");
	ОтборПартий.Вставить("КонецПериода");
	ОтборПартий.Вставить("Организация");
	ОтборПартий.Вставить("Склад");
	ОтборПартий.Вставить("Номенклатура");
	ОтборПартий.Вставить("СерияНоменклатуры");
	
	ЗаполнитьЗначенияСвойств(ОтборПартий, Отбор);
	ЗаполнитьЗначенияСвойств(ОтборПартий, ТекущаяСтрока);
	
	ПараметрыВыбораПартии = Новый Структура;
	ПараметрыВыбораПартии.Вставить("ПараметрыКомпоновки", ОтборПартий);
	ПараметрыВыбораПартии.Вставить("МожноСоздаватьПартию", Ложь);
	ПараметрыВыбораПартии.Вставить("ВыборВОтделении", Ложь);
	
	Возврат ПараметрыВыбораПартии;
	
КонецФункции

// Процедура обрабатывает событие "ПередВыбором" поля "Партия" в списке "Товары"
//
// Параметры:
//  Форма - форма, в которой осуществляется выбор
//  Элемент - элемент формы для которого обрабатывается событие
//  СтандартнаяОбработка - признак стандартной обработки события
//  ТекущаяСтрока - данные текущей строки, для элемента которой осуществляется выбор
//  ПараметрыВыбора - структура с дополнительными параметрами выбора
//
Процедура ВыбратьПартиюНоменклатуры(Форма, Элемент, ПараметрыВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаВыбора", ПараметрыВыбора, Элемент);
	
КонецПроцедуры

// Обрабатывает начало выбора аналитики статьи расходов
//
Процедура ОбработатьНачалоВыбораАналитикиРасходов(Объект, Элемент, СтандартнаяОбработка) Экспорт
	
	Если Объект.АналитикаРасходовПрочиеРасходы Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Владелец", Объект.СтатьяРасходов));
		ОткрытьФорму("Справочник.ПрочиеРасходы.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнтерактивныйПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Разбиение строки
#Область РазбиениеСтрок

// Разбивает текущую строку на две
//
Процедура РазбитьСтрокуТЧ(ТабличнаяЧасть, ТекущаяСтрока, Оповещение = Неопределено, Знач ИмяКолонкиКоличество = "", Знач Заголовок = "", Знач РазрешитьНулевоеКоличество = Ложь) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
	КонецЕсли;
	
	Если ТекущаяСтрока[ИмяКолонкиКоличество] = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = НСтр("ru = 'Введите количество товара в новой строке'");
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ПараметрыОперации.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ПараметрыОперации.Вставить("ИмяКолонкиКоличество", ИмяКолонкиКоличество);
	ПараметрыОперации.Вставить("Заголовок", Заголовок);
	ПараметрыОперации.Вставить("РазрешитьНулевоеКоличество", РазрешитьНулевоеКоличество);
	ПараметрыОперации.Вставить("Оповещение", Оповещение);
	
	ПоказатьВводКоличестваНовойСтроки(ПараметрыОперации);
	
КонецПроцедуры

// продолжение РазбитьСтрокуТЧ
//
Процедура ПоказатьВводКоличестваНовойСтроки(ПараметрыОперации) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличестваНовойСтроки", ЭтотОбъект, ПараметрыОперации);
	
	Количество = ПараметрыОперации.ТекущаяСтрока[ПараметрыОперации.ИмяКолонкиКоличество];
	ПоказатьВводЧисла(Оповещение, Количество, ПараметрыОперации.Заголовок, 15, 3);
	
КонецПроцедуры

// продолжение РазбитьСтрокуТЧ
//
Процедура ПослеВводаКоличестваНовойСтроки(Количество, ПараметрыОперации) Экспорт
	
	Если Количество = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ПараметрыОперации.ТекущаяСтрока;
	ИмяКолонкиКоличество = ПараметрыОперации.ИмяКолонкиКоличество;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВводКоличестваНовойСтроки", ЭтотОбъект, ПараметрыОперации);
	Если Количество = 0 И Не ПараметрыОперации.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Количество < 0 Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Количество > ТекущаяСтрока[ИмяКолонкиКоличество] Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Количество = ТекущаяСтрока[ИмяКолонкиКоличество] И Не ПараметрыОперации.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно быть меньше количества в текущей.'");
		ПоказатьПредупреждение(Оповещение, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ПараметрыОперации.ТабличнаяЧасть;
	
	ИндексТекущейСтроки = ТабличнаяЧасть.Индекс(ТекущаяСтрока);
	НоваяСтрока         = ТабличнаяЧасть.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ИмяКолонкиКоличество]   = Количество;
	ТекущаяСтрока[ИмяКолонкиКоличество] = ТекущаяСтрока[ИмяКолонкиКоличество] - НоваяСтрока[ИмяКолонкиКоличество];
	
	Если ПараметрыОперации.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОперации.Оповещение, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РазбиениеСтрок

////////////////////////////////////////////////////////////////////////////////
// Заполнение реквизита в выделенных строках
#Область ЗаполнениеРеквизитовВВыделенныхСтроках

// Проверяет возможность заполнения строк табличной части
//
Функция ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(ТабличнаяЧасть, ВыделенныеСтроки, ПредставлениеТабличнойЧасти, ПредставлениеРеквизита) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Не заполнена таблица %1. Реквизит ""%2"" не может быть заполнен'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения, ПредставлениеТабличнойЧасти, ПредставлениеРеквизита);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для заполнения реквизита ""%1""'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеРеквизита);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет значение реквизита в выделенных строках
//
Функция ЗаполнитьРеквизитВВыделенныхСтроках(ТабличнаяЧасть, ВыделенныеСтроки, ИмяРеквизита, Значение) Экспорт
	
	ЗаполненныхСтрок = 0;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ИмяРеквизита = "СтатьяРасходов" Тогда
			СтрокаТаблицы.СтатьяРасходов = Значение.СтатьяРасходов;
			СтрокаТаблицы.АналитикаРасходов = Значение.АналитикаРасходов;
			СтрокаТаблицы.АналитикаРасходовПрочиеРасходы = Значение.АналитикаРасходовПрочиеРасходы;
			СтрокаТаблицы.АналитикаРасходовКонтролироватьЗаполнениеАналитики = Значение.АналитикаРасходовКонтролироватьЗаполнениеАналитики;
		ИначеЕсли ИмяРеквизита = "СтатьяДоходов" Тогда
			СтрокаТаблицы.СтатьяДоходов = Значение.СтатьяДоходов;
			СтрокаТаблицы.АналитикаДоходов = Значение.АналитикаДоходов;
			СтрокаТаблицы.АналитикаДоходовКонтролироватьЗаполнениеАналитики = Значение.АналитикаДоходовКонтролироватьЗаполнениеАналитики;
		Иначе
			СтрокаТаблицы[ИмяРеквизита] = Значение;
		КонецЕсли;
		
		ЗаполненныхСтрок = ЗаполненныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат ЗаполненныхСтрок;
	
КонецФункции

// Показывает информацию о заполнении реквизита в выделенных строках
//
Процедура ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(Значение, ЗаполненоСтрок, ВыделеноСтрок, ПредставлениеРеквизита) Экспорт
	
	Если ЗаполненоСтрок = 0 Тогда // Если ни одна выделенная строка не была заполнена
		
		ТекстОповещения = НСтр("ru='Выделенные строки не заполнены'");
		Пояснение = НСтр("ru='Колонка ""%1"" в выделенных строках не была заполнена'");
		Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, ПредставлениеРеквизита);
		
	ИначеЕсли ЗаполненоСтрок = ВыделеноСтрок Тогда // Если все выделенные строки были заполнены
		
		ТекстОповещения = НСтр("ru='Выделенные строки заполнены'");
		Пояснение =НСтр("ru='Колонка ""%1"" в выделенных строках заполнена значением ""%2""'");
		Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, ПредставлениеРеквизита, Значение);
		
	Иначе // Если не все выделенные строки были заполнены
		
		ТекстОповещения = НСтр("ru='Часть выделенных строк заполнена'");
		Пояснение = НСтр("ru='Колонка ""%1"" в %2 из %3 заполнена значением ""%4""'");
		ПредставлениеЗаполнено = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1-ой строке;;%1-х строках;%1-и строках;%1 строках'"), ЗаполненоСтрок);
		ПредставлениеВыделено = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1-ой выделенной;;%1-х выделенных;%1-и выделенных;%1 выделенных'"), ВыделеноСтрок);
		Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, ПредставлениеРеквизита, ПредставлениеЗаполнено, ПредставлениеВыделено, Значение);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещения,, Пояснение, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеРеквизитовВВыделенныхСтроках

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область Штрихкоды

// Выполняет обработку полученных штрихкодов в форме
//
// Параметры:
//  Форма
//  Объект
//  ПараметрыДействия
//  КэшированныеЗначения
//
Процедура ОбработатьШтрихкоды(Форма, Объект, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	ИзменятьКоличество = ПараметрыДействия.ИзменятьКоличество;
	Если ИзменятьКоличество И ПараметрыДействия.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Модифицированность = Ложь; // Форма на текущий момент может быть уже модифицированной, по этому изменяем значение переменной, а не свойство формы.
	КопияТабличнойЧасти = Объект[ПараметрыДействия.ИмяТабличнойЧасти]; // При передаче с клиента на сервер в любом случае создается и возвращается копия, а не сам объект.
	
	ОбработкаТабличнойЧастиВызовСервера.ОбработатьШтрихкодыТабличнойЧасти(КопияТабличнойЧасти, ПараметрыДействия, КэшированныеЗначения, Модифицированность);
	
	Если Модифицированность Тогда
		
		ТабличнаяЧасть = Объект[ПараметрыДействия.ИмяТабличнойЧасти];
		Для Каждого ТекущиеДанныеИсточник Из КопияТабличнойЧасти Цикл
			
			ТекущиеДанныеПриемник = ТабличнаяЧасть.НайтиПоИдентификатору(ТекущиеДанныеИсточник.ПолучитьИдентификатор());
			Если ТекущиеДанныеПриемник = Неопределено Тогда
				ТекущиеДанныеПриемник = ТабличнаяЧасть.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекущиеДанныеПриемник, ТекущиеДанныеИсточник);
			
		КонецЦикла;
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает структуру обработки штрихкодов
//
// Параметры:
//  Штрихкоды - штрихкод или массив штрихкодов
//  ДействияСДобавленнымиСтроками - структура действий для новый строк
//  ДействияСИзмененнымиСтроками - структура действий для измененных строк
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыОбработкиШтрихкодов(Штрихкоды, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками) Экспорт
	
	ДанныеШтрихкодов = ПодготовитьВходящиеШтирхкодыДляОбработки(Штрихкоды);
	
	ПараметрыОбработкиШтрихкода = Новый Структура;
	ПараметрыОбработкиШтрихкода.Вставить("Штрихкоды"                      , ДанныеШтрихкодов);
	ПараметрыОбработкиШтрихкода.Вставить("ИзменятьКоличество"             , Истина);
	ПараметрыОбработкиШтрихкода.Вставить("ПараметрыУчетаНоменклатуры"     , Неопределено);
	ПараметрыОбработкиШтрихкода.Вставить("ПропускатьНенайденныеШтрихкоды" , Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("ДействияСДобавленнымиСтроками"  , ДействияСДобавленнымиСтроками);
	ПараметрыОбработкиШтрихкода.Вставить("ДействияСИзмененнымиСтроками"   , ДействияСИзмененнымиСтроками);
	ПараметрыОбработкиШтрихкода.Вставить("БлокироватьДанныеФормы"         , Истина);
	
	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаКоличество"          , Истина);
	ПараметрыОбработкиШтрихкода.Вставить("ИмяКолонкиКоличество"           , "КоличествоВЕдиницахИзмерения");
	ПараметрыОбработкиШтрихкода.Вставить("ИмяТабличнойЧасти"              , "Товары");
	ПараметрыОбработкиШтрихкода.Вставить("ШтрихкодыВТЧ"                   , Ложь);
	
	ПараметрыОбработкиШтрихкода.Вставить("НеизвестныеШтрихкоды"           , Новый Массив);
	ПараметрыОбработкиШтрихкода.Вставить("ОтборСтрок"                     , Новый Структура);
	
	ПараметрыОбработкиШтрихкода.Вставить("ПроверятьУникальностьУпаковокМДЛП", Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаНомерКиЗ"              , Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("ИмяКолонкиНомерКиЗ"               , "НомерКиЗ");
	ПараметрыОбработкиШтрихкода.Вставить("ИмяКолонкиШтрихкод"               , "Штрихкод");
	
	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаШтрихкодBase64"        , Ложь);

	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаРезультатПроверкиКМ"       , Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаКодСтатусаПроверкиКМ"      , Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("ЕстьКолонкаПояснениеСтатусаПроверкиКМ", Ложь);
	
	ПараметрыОбработкиШтрихкода.Вставить("ПовторитьПоискТовараБезУчетаСерии"        , Ложь);
	ПараметрыОбработкиШтрихкода.Вставить("СообщатьОДобавленииИзмененииСтрокиТоваров", Ложь);
	
	ПараметрыОбработкиШтрихкода.Вставить("ЗаполнитьНезаполненныеНомерСерииИГоденДо", Ложь);
	
	Возврат ПараметрыОбработкиШтрихкода;
	
КонецФункции

Функция ПодготовитьВходящиеШтирхкодыДляОбработки(Штрихкоды) Экспорт
	
	Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(Штрихкоды);
	КонецЕсли;
	
	Для Каждого ДанныеШтрихкода Из МассивШтрихкодов Цикл
		
		ДанныеИзШтрихкода = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьДанныеИзШтрихкода(ДанныеШтрихкода.Штрихкод);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеШтрихкода, ДанныеИзШтрихкода, Истина);
		
	КонецЦикла;
	
	Возврат МассивШтрихкодов;
	
КонецФункции

// Функция получает структуру обработки перезаполнения строки ТЧ по штрихкоду
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыОбработкиНенайденныхШтрихкодов() Экспорт
	
	ПараметрыОбработкиШтрихкода = Новый Структура;
	ПараметрыОбработкиШтрихкода.Вставить("ДействияСИзмененнымиСтроками", Новый Структура);
	ПараметрыОбработкиШтрихкода.Вставить("ИмяТабличнойЧасти"           , "Товары");
	ПараметрыОбработкиШтрихкода.Вставить("ЗарегистрированныеШтрихкоды" , Новый Массив);
	ПараметрыОбработкиШтрихкода.Вставить("НеизвестныеШтрихкоды"        , Новый Массив);
	
	Возврат ПараметрыОбработкиШтрихкода;
	
КонецФункции

// Показывает диалог ввода штрихкода, после закрытия вызывает процедуру ПослеВводаШтрихкода.
//
// Параметры:
//  Источник - УникальныйИдентификатор - идентификатор формы для которой показывается диалог
//
Процедура ПоказатьВводШтрихкода(Источник) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаШтрихкода", ЭтотОбъект, Источник);
	ПоказатьВводЗначения(Оповещение, "", НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

// Обрабатывает ввод штрихкода. Если штрихкод указан, то выполняется оповещение открытых форм
// с событием "ВведенШтрихкод", в качестве источника оповещения указывается параметр, переданный
// в метод ПоказатьВводШтрихкода.
//
// Параметры:
//  Значение - Строка, Неопределено - введенный штрихкод
//  Источник - УникальныйИдентификатор
//
Процедура ПослеВводаШтрихкода(Значение, Источник) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Оповестить("ВведенШтрихкод", Значение, Источник);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщения пользователю о не найденных штрихкодах
//
// Параметры:
//  ПараметрыДействия - параметры обработки штрихкодов
//
Процедура СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия) Экспорт
	
	Для Каждого НеизвестныйШтрихкод Из ПараметрыДействия.НеизвестныеШтрихкоды Цикл
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НеизвестныйШтрихкод, "ТипУпаковки") = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные упаковки со штрихкодом не найдены: %1'"),
				НеизвестныйШтрихкод.Штрихкод)
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"),
				НеизвестныйШтрихкод.Штрихкод,
				НеизвестныйШтрихкод.Количество);
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие ненайденных штрихкодов в табличной части
//
// Параметры:
//  ТабличнаяЧасть - таблица значений с колонкой "Штрихкод"
//
// Возвращаемое значение:
//  Булево - Истина, если есть штрихкоды в табличной части
//
Функция ЕстьНенайденныеШтрихкоды(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Штрихкод) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Сообщает пользователю о результате обновления данных по штрихкодам
//
// Параметры:
//  ПараметрыДействия
//
Процедура СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия.КоличествоОбработанныхСтрок Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Данные обновлены в %1'"),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru=';%1-ой строке;;%1-х строках;%1-и строках;%1 строках'"),
				ПараметрыДействия.КоличествоОбработанныхСтрок));
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Нет данных для заполнения.'");
		
	КонецЕсли;
	
	Состояние(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура обрабатывает ненайденные штрихкоды из табличной части документа
//
Процедура ОбработатьНенайденныеШтрихкоды(Товары, Форма) Экспорт
	
	ДанныеШтрихкодов = Новый Массив();
	Для Каждого СтрокаТовара Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
			ДанныеШтрихкодов.Добавить(
				ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(СтрокаТовара.Штрихкод, СтрокаТовара.КоличествоВЕдиницахИзмерения));
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеШтрихкодов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В документе отсутствуют штрихкоды.'");
		ПоказатьПредупреждение(, ТекстСообщения, 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеизвестныеШтрихкоды", ДанныеШтрихкодов);
	
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", ПараметрыФормы, Форма);
	
КонецПроцедуры

#КонецОбласти // Штрихкоды

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбмена

// Проверяет наличие строк для копирования
//
// Параметры:
//  ТекущаяСтрока
//
// Возвращаемое значение:
//  Булево - Ложь, если не выбраны строки для копирования
//
Функция ВозможноКопированиеСтрок(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строки табличной части.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается в формах документов и справочников при копировании строк.
// 
// Параметры:
//  КоличествоВыделенных - количество выделенных строк табличной части
//
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоВыделенных) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='В буфер обмена скопировано %1'"),
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru=';%1 строка;;%1 строки;%1 строк;%1 строки'"), КоличествоВыделенных));
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	Оповестить(БуферОбменаКлиент.СобытиеКопированиеВБуферОбмена(),, ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена());
	
КонецПроцедуры

// Вызывается в формах документов и справочников при вставке строк.
// 
// Параметры:
//  КоличествоВставленных - количество вставленных строк в табличную часть
//
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоВставленных) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Из буфера обмена вставлено %1'"),
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru=';%1 строка;;%1 строки;%1 строк;%1 строки'"), КоличествоВставленных));
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Открывает форму буфера обмена товаров
//
Процедура ОткрытьБуферОбмена(Форма) Экспорт
	
	ОткрытьФорму(ИмяФормыБуфераОбменаТоварами(),, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Проверяет, что выбрано значение из буфера обмена
//
Функция НужноОбработатьВставкуИзБуфераОбмена(Форма, ИсточникВыбора) Экспорт
	
	Возврат ИсточникВыбора.ИмяФормы = ИмяФормыБуфераОбменаТоварами() И Не Форма.ТолькоПросмотр;
	
КонецФункции

// Проверяет необходимость обработки события буфера обмена
//
Функция ОбрабатыватьОповещениеОтБуфераОбмена(Форма, ИмяСобытия, Источник) Экспорт
	
	Возврат Источник = ОбработкаТабличнойЧастиКлиентСервер.ИдентификаторБуфераОбмена();
	
КонецФункции

// Определяет доступность команд вставки из буфера обмена
//
Функция ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия) Экспорт
	
	ЕстьДанныеВБуфереОбмена = Истина;
	Если ИмяСобытия = БуферОбменаКлиент.СобытиеОчисткаБуфераОбмена() Тогда
		ЕстьДанныеВБуфереОбмена = Ложь;
	КонецЕсли;
	
	Возврат ЕстьДанныеВБуфереОбмена;
	
КонецФункции

Функция ИмяФормыБуфераОбменаТоварами()
	
	Возврат "Обработка.БуферОбменаТоваров.Форма.БуферОбмена";
	
КонецФункции

#КонецОбласти // БуферОбмена

// Копирует значения реквизитов текущей строки табличной части в служебный реквизит формы.
// Имя служебного реквизита должно состоять из имени табличной части и постфикса КешТекущейСтроки.
//
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, содержащая таблицу.
//   ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит формы.
//
Процедура КешироватьТекущуюСтроку(Форма, ИмяТабличнойЧасти) Экспорт
	
	ТекущиеДанные = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	СтруктураКеш = Новый Структура(Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"]);
	ЗаполнитьЗначенияСвойств(СтруктураКеш, ТекущиеДанные);
	Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"] = Новый ФиксированнаяСтруктура(СтруктураКеш);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполнения

Процедура ПроверитьКорректностьСерииНоменклатурыУпаковкиПартии(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу()) Тогда
		ТекущаяСтрока.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу()) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу()) Тогда
		ТекущаяСтрока.Партия = Неопределено;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьЕдиницуИзмеренияПоОтбору()) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмерения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмерения())
	   И Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = КэшированныеЗначения.ЕдиницыИзмерения[ТекущаяСтрока.Номенклатура];
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмеренияПоОтбору(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору()) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыУчетаНоменклатуры;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры) Тогда
		
		СтатусыУказанияСерий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияСерий();
		СтатусыУказанияПартий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияПартий();
		
		Если ПараметрыУчетаНоменклатуры.СуффиксыСтатусов.Количество() = 0 Тогда
			ТекущаяСтрока.СтатусУказанияСерий = СтатусыУказанияСерий.СтатусСерииНеУказываются;
			ТекущаяСтрока.СтатусУказанияПартий = СтатусыУказанияПартий.СтатусПартииНеУказываются;
		Иначе
			Для Каждого Суффикс Из ПараметрыУчетаНоменклатуры.СуффиксыСтатусов Цикл
				ТекущаяСтрока["СтатусУказанияСерий" + Суффикс] = СтатусыУказанияСерий.СтатусСерииНеУказываются;
				ТекущаяСтрока["СтатусУказанияПартий" + Суффикс] = СтатусыУказанияПартий.СтатусПартииНеУказываются;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД(), ПараметрыДействия) Тогда
		Если Не ЗначениеЗаполнено(ПараметрыДействия) Тогда
			ПараметрыДействия = "ВестиУчетПоГТД";
		КонецЕсли;
		ТекущаяСтрока[ПараметрыДействия] = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), ПараметрыДействия) Тогда
		
		Если ТипЗнч(ПараметрыДействия) = Тип("Строка") Тогда
			ПараметрыДействия = Новый Структура(ПараметрыДействия);
		ИначеЕсли ТипЗнч(ПараметрыДействия) = Тип("Массив") Тогда
			ПараметрыДействия = Новый Структура(СтрСоединить(ПараметрыДействия, ","));
		КонецЕсли;
		Для Каждого КлючЗначение Из ПараметрыДействия Цикл
			ТекущаяСтрока[КлючЗначение.Ключ] = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗабраковкуСерий(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗабраковкуСерий()) Тогда
		ТекущаяСтрока.СерияЗабракована = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоэффициент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициент()) Тогда
		ТекущаяСтрока.Коэффициент = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоэффициентЕдиницыОтбораНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа()) Тогда
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСтавкуНДС()) Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуПродажи()) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыПересчетаИЗаполнения

#Область Прочее

Функция НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ЗначениеИзСтруктуры;
	Перем СерияНоменклатуры;
	Перем Упаковка;
	Перем Партия;
	
	Если СтруктураДействий.Свойство("НеобходимоОбработатьВсюТЧ")
		И СтруктураДействий.НеобходимоОбработатьВсюТЧ Тогда
		ТекстИсключения = НСтр("ru = 'Для обработки всей ТЧ, необходимо сделать контекстный вызов серверной функции ""ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть""'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), СерияНоменклатуры);
	СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), Упаковка);
	СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу(), Партия);
	
	Если (ЗначениеЗаполнено(СерияНоменклатуры)
	 Или ЗначениеЗаполнено(Упаковка) Или ЗначениеЗаполнено(Партия))
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьЕдиницуИзмеренияПоОтбору())
	   И ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения)
	   И (ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			Или ЗначениеЗаполнено(ТекущаяСтрока.ТорговоеНаименование)
			Или ЗначениеЗаполнено(ТекущаяСтрока.ДействующиеВеществаМНН)) Тогда
		Возврат Истина;
	КонецЕсли;
		
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПараметрыУчета(), ЗначениеИзСтруктуры)
	   И (ЗначениеИзСтруктуры.ИспользоватьСерии Или ЗначениеИзСтруктуры.ИспользоватьПартии)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(), ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(), ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ЗначениеИзСтруктуры)
	   И Не ЗначениеИзСтруктуры.НеВыполнятьПроверкуДляПользователя
	   И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД())
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре())
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗабраковкуСерий()) И ЗначениеЗаполнено(ТекущаяСтрока.СерияНоменклатуры) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП()) И ЗначениеЗаполнено(ТекущаяСтрока.СерияНоменклатуры) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмерения()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И КэшированныеЗначения.ЕдиницыИзмерения[ТекущаяСтрока.Номенклатура] = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		 Или (ЗначениеЗаполнено(ТекущаяСтрока.ТорговоеНаименование) Или ЗначениеЗаполнено(ТекущаяСтрока.ДействующиеВеществаМНН)) И ЗначениеЗаполнено(ТекущаяСтрока.ФормаВыпуска) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициент()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения)
		 Или ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмерения()) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа(), ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа) И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСтавкуНДС(), ЗначениеИзСтруктуры) Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуЗакупки()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя()) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуПродажи(), ЗначениеИзСтруктуры)
	   И ЗначениеЗаполнено(ЗначениеИзСтруктуры.ВидЦены)
	   И ЗначениеЗаполнено(ЗначениеИзСтруктуры.Валюта) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураПолейТЧ = Новый Структура;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СерияНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьУпаковкуПоВладельцу()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьПартиюПоВладельцу()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Партия");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьЕдиницуИзмеренияПоОтбору()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ТорговоеНаименование");
		СтруктураПолейТЧ.Вставить("ДействующиеВеществаМНН");
		СтруктураПолейТЧ.Вставить("ФормаВыпуска");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмерения()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ТорговоеНаименование");
		СтруктураПолейТЧ.Вставить("ДействующиеВеществаМНН");
		СтруктураПолейТЧ.Вставить("ФормаВыпуска");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыДействия) Тогда
		Если ПараметрыДействия.СуффиксыСтатусов.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Количество");
			СтруктураПолейТЧ.Вставить("СерияНоменклатуры");
			СтруктураПолейТЧ.Вставить("Партия");
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
			СтруктураПолейТЧ.Вставить("СтатусУказанияПартий");
		Иначе
			Для Каждого Суффикс Из ПараметрыДействия.СуффиксыСтатусов Цикл
				СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
				СтруктураПолейТЧ.Вставить("Количество" + Суффикс);
				СтруктураПолейТЧ.Вставить("СерияНоменклатуры" + Суффикс);
				СтруктураПолейТЧ.Вставить("Партия" + Суффикс);
				СтруктураПолейТЧ.Вставить("СтатусУказанияСерий" + Суффикс);
				СтруктураПолейТЧ.Вставить("СтатусУказанияПартий" + Суффикс);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика()) Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре()) Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика()) Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД(), ПараметрыДействия) Тогда
		Если Не ЗначениеЗаполнено(ПараметрыДействия) Тогда
			ПараметрыДействия = "ВестиУчетПоГТД";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить(ПараметрыДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), ПараметрыДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		Если ТипЗнч(ПараметрыДействия) = Тип("Строка") Тогда
			ПараметрыДействия = Новый Структура(ПараметрыДействия);
		ИначеЕсли ТипЗнч(ПараметрыДействия) = Тип("Массив") Тогда
			ПараметрыДействия = Новый Структура(СтрСоединить(ПараметрыДействия, ","));
		КонецЕсли;
		Для Каждого КлючЗначение Из ПараметрыДействия Цикл
			СтруктураПолейТЧ.Вставить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗабраковкуСерий()) Тогда
		СтруктураПолейТЧ.Вставить("СерияНоменклатуры");
		СтруктураПолейТЧ.Вставить("СерияЗабракована");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьПризнакСерияПромаркированаДляЦелейМДЛП()) Тогда
		СтруктураПолейТЧ.Вставить("СерияНоменклатуры");
		СтруктураПолейТЧ.Вставить("СерияПромаркированаДляЦелейМДЛП");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициент()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
		СтруктураПолейТЧ.Вставить("Коэффициент", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоличествоЕдиниц()) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмерения", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Коэффициент", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоличествоУпаковок()) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмерения", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Коэффициент", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоличествоПоДаннымУчета()) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмеренияПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("Коэффициент", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоличествоУпаковокПоДаннымУчета()) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмеренияПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("Коэффициент", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа()) Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураЗаказа");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияЗаказа");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоэффициентЕдиницыЗаказа", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа()) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КоэффициентЕдиницыЗаказа", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьСтавкуНДС()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьСуммуНДС()) Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	ИмяКолонкиКоличество = Неопределено;
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьСумму(), ИмяКолонкиКоличество) Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		Если Не ЗначениеЗаполнено(ИмяКолонкиКоличество) Тогда
			ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяКолонкиКоличество, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьСуммуСНДС()) Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьСуммуЛьготы()) Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС"  , 0);
		СтруктураПолейТЧ.Вставить("СуммаЛьготы", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьСуммуРегл()) Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл", 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьНДСРегл()) Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;
	
	ИмяКолонкиКоличество = Неопределено;
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьЦену(), ИмяКолонкиКоличество) Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("Цена", 0);
		Если Не ЗначениеЗаполнено(ИмяКолонкиКоличество) Тогда
			ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяКолонкиКоличество, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), ПараметрыДействия) Тогда
		Для Каждого ИмяРеквизитаЦена Из ПараметрыДействия.ИменаРеквизитовЦена Цикл
			СтруктураПолейТЧ.Вставить(ИмяРеквизитаЦена, 0);
		КонецЦикла;
		СтруктураПолейТЧ.Вставить(ПараметрыДействия.ИмяКолонкиКоличество, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьРасхождения()) Тогда
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмерения", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоУчету", 0);
		СтруктураПолейТЧ.Вставить("КоличествоВЕдиницахИзмеренияПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения", Ложь);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуЗакупки()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЦенуПродажи(), ПараметрыДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СерияНоменклатуры");
		СтруктураПолейТЧ.Вставить("Партия");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
		ИмяКолонкиЦена = ?(ПараметрыДействия.Свойство("ИмяКолонкиЦена"), ПараметрыДействия.ИмяКолонкиЦена, "Цена");
		СтруктураПолейТЧ.Вставить(ИмяКолонкиЦена, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя()) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
		СтруктураПолейТЧ.Вставить("ЗарегистрированнаяЦенаПроизводителя", 0);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
