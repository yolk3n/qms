////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебныйКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Ожидает завершения выполнения процедуры в фоновом задании и открывает форму ожидания длительной операции.
// см. ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//   ОповещениеОЗавершении        - ОписаниеОповещения      - операция, которую нужно будет вызвать после
//                                                            выполнения задания из ДлительнаяОперация.
//   ДлительнаяОперация           - Структура               - см. ДлительныеОперации.ВыполнитьВФоне.
//   Форма                        - ФормаКлиентскогоПриложения.
//   ИдентификаторЗадания         - УникальныйИдентификатор - идентификатор задания.
//   ДекорацияДлительногоОжидания - ДекорацияФормы          - картинка длительного выполнения операции.
//
Процедура НачатьОжиданиеПолученияДанныхСервиса(ОповещениеОЗавершении,
	ДлительнаяОперация,
	Форма,
	ИдентификаторЗадания = Неопределено,
	ДекорацияДлительногоОжидания = Неопределено) Экспорт
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения        = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания              = ДекорацияДлительногоОжидания = Неопределено;
	ПараметрыОжидания.ОповещениеПользователя.Показать   = Ложь;
	ПараметрыОжидания.ВыводитьСообщения                 = Ложь;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	Если НЕ ДекорацияДлительногоОжидания = Неопределено
		И НЕ ДлительнаяОперация = Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		ДекорацияДлительногоОжидания.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЗавершения.Вставить("ВыводитьОшибки",        Ложь);

	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения("ДлительнаяОперацияЗавершение",
		РаботаСНоменклатуройКлиент, ПараметрыЗавершения);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение, ПараметрыОжидания);
		
КонецПроцедуры

#Область РаботаСКатегориями

// Возвращает данные хранимые в кэше категорий.
//
// Возвращаемое значение:
//  Структура - кэш категорий, хранимый в сеансе пользователя см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//
Функция ПолучитьКэшКатегорий() Экспорт
	
	КэшПриложения = КэшКатегорийПодсистемы();
	
	КэшКатегорий     = Неопределено;
	НаименованиеКэша = "КэшКатегорий";
	
	КэшПриложения.Свойство(НаименованиеКэша, КэшКатегорий);
	
	Если КэшКатегорий = Неопределено Тогда
		КэшПриложения.Вставить(НаименованиеКэша, Новый Структура);
	КонецЕсли;
	
	Возврат КэшПриложения[НаименованиеКэша];
	
КонецФункции

// Сохраняет измененные данные в кэше категорий.
//
// Параметры:
//  КэшКатегорий   - Структура - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//
Процедура СохранитьКэшКатегорий(КэшКатегорий) Экспорт
	
	КэшПриложения = КэшКатегорийПодсистемы();
	КэшПриложения.КэшКатегорий = КэшКатегорий;
	
КонецПроцедуры

// Устанавливает видимость и доступность элементов формы области категорий при длительном выполнении операций.
//
// Параметры:
//   Элементы          - ВсеЭлементыФормы.
//   КоличествоЗаданий - Число - количество запущенных заданий в фоне.
//
Процедура УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(Элементы, Знач КоличествоЗаданий) Экспорт
	
	ДлительнаяОперацияНеАктивна                             = КоличествоЗаданий = 0;
	Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = НЕ ДлительнаяОперацияНеАктивна;
	Элементы.СтрокаПоискаКатегорий.Доступность              = ДлительнаяОперацияНеАктивна;
	Элементы.ПоказатьСкрытьКатегории.Доступность            = ДлительнаяОперацияНеАктивна;
	Элементы.ПоказатьСкрытьОтборы.Доступность               = ДлительнаяОперацияНеАктивна;
	Элементы.ДекорацияЗагрузкаКатегорийИзОтборов.Видимость  = НЕ ДлительнаяОперацияНеАктивна;

КонецПроцедуры

// Подготавливает операцию поиска категорий по строке для вызова в фоне.
//
// Параметры:
//  ТекстПоиска              - Строка                  - строка поиска.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания     - УникальныйИдентификатор - идентификатор задания.
//
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПоискКатегорийПоСтроке(Знач СтрокаПоискаКатегорий, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт
	
	// Поиск рубрикатора всегда осуществляем напрямую из системы, без использования кэша,
	// т.к. необходимой ветки может не быть в кэше.
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыПоискаКатегорийПоСтроке();
	
	ПараметрыПоиска.СтрокаПоиска                   = СтрокаПоискаКатегорий;
	ПараметрыПоиска.НаборПолей                     = "Максимальный";
	ПараметрыПоиска.РезультатВМассиве              = Ложь;
	
	Возврат РаботаСНоменклатуройСлужебныйВызовСервера.НайтиКатегорииПоСтрокеПоискаВФоне(
				ПараметрыПоиска, УникальныйИдентификатор, ИдентификаторЗадания);

КонецФункции

// Заполняет дерево категорий на форме результатом поиска категорий по строке.
//
// Параметры:
//  КэшКатегорий     - Структура         - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ДеревоКатегорий - ДанныеФормыДерево - дерево категорий на форме.
//
Процедура ЗаполнитьРазделыПоискаРубрики(КэшКатегорий, ДеревоКатегорий) Экспорт
	
	СтрокиДерева = ДеревоКатегорий.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	Для Каждого СтрокаКэша Из КэшКатегорий Цикл
		
		СтрокаРаздел = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаздел, СтрокаКэша.Значение);
		
		Если СтрокаРаздел.ЛистоваяКатегория Тогда
			СтрокаРаздел.ИндексКартинки = 3;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дерево категорий на форме результатом полученных категорий с сервиса.
//
// Параметры:
//  КэшКатегорий     - Структура         - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ДеревоКатегорий - ДанныеФормыДерево - дерево категорий на форме.
//
Процедура ЗаполнитьРазделыРубрики(КэшКатегорий, ДеревоКатегорий) Экспорт
	
	СтрокиДерева = ДеревоКатегорий.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	Если НЕ ЗначениеЗаполнено(КэшКатегорий) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКэшаКорняРаздела = Неопределено;
	Если НЕ КэшКатегорий.Свойство("_", СтрокаКэшаКорняРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКорневогоРаздела  = СтрокиДерева.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКорневогоРаздела, СтрокаКэшаКорняРаздела);
	СтрокаКорневогоРаздела.ЛистоваяКатегория = Ложь;
	СтрокаКорневогоРаздела.ВОбработке       = Истина;
	СтрокаКорневогоРаздела.ИндексКартинки   = 12;
	СтрокиКорневогоРаздела = СтрокаКорневогоРаздела.ПолучитьЭлементы();
	
	ИдентификаторРодителя  = "";
	Для Каждого СтрокаКэша Из КэшКатегорий Цикл
		
		Если СтрокаКэша.Ключ = "_" + РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаКэшаЗначение = СтрокаКэша.Значение;
		Если СтрокаКэшаЗначение.ИдентификаторРодителя = ИдентификаторРодителя
			И СтрокаКэшаЗначение.Идентификатор <> ИдентификаторРодителя Тогда
			
			НоваяСтрока = СтрокиКорневогоРаздела.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэшаЗначение);

			Если СтрокаКэшаЗначение.ЛистоваяКатегория Тогда
				НоваяСтрока.ИндексКартинки = 3;
			Иначе
				НоваяВетка = НоваяСтрока.ПолучитьЭлементы().Добавить();
				НоваяВетка.ПустаяГруппа = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
			
	СтрокаКорневогоРаздела.ДочерниеПодгружены = Истина;
	СтрокаКорневогоРаздела.ВОбработке         = Ложь;
	
КонецПроцедуры

// Заполняет дерево категорий на форме результатом полученных категорий с сервиса до выбранной позиции.
//
// Параметры:
//  КэшКатегорий                    - Структура         - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ДеревоКатегорий                - ДанныеФормыДерево - дерево категорий на форме.
//   МассивИдентификаторовРодителей - Массив            - массив строк идентификаторов родителей категорий.
//   ДеревоОтборов                  - ДанныеФормыДерево - дерево отборов на форме.
//   ДополнительныеПараметры        - Структура:
//      * ЕстьФиксированныеОтборы         - Булево - признак наличия в дереве отборов на форме фиксированных отборов.
//      * ИсключитьВыводПроизводителей    - Булево - признак исключения вывода в дерево отборов свойства "Производитель".
//      * ИспользоватьИнтервалВводаДанных - Булево - признак использования интервала для ввода данных с типом число или дата.
//
Процедура ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, ДеревоКатегорий, МассивИдентификаторовРодителей,
			ДеревоОтборов = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		
	МассивРодителейИДочернихКатегорий = НайтиДочерниеКатегорииПоРодителю(МассивИдентификаторовРодителей, КэшКатегорий);
	
	Для Каждого ЭлементРодитель Из МассивРодителейИДочернихКатегорий Цикл
		ТекущаяВетка = Неопределено;
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(ДеревоКатегорий, ЭлементРодитель.ИдентификаторРодителя, ТекущаяВетка, , Истина);
		Если ТекущаяВетка <> Неопределено И НЕ ТекущаяВетка.ДочерниеПодгружены Тогда
			ТекущаяВетка.ВОбработке  = Истина;
			ПодчиненныеСтроки = ТекущаяВетка.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() И ПодчиненныеСтроки[0].ПустаяГруппа Тогда
				ПодчиненныеСтроки.Очистить();
			КонецЕсли;
			Для Каждого СтрокаДочернейКатегории Из ЭлементРодитель.МассивДочерних Цикл
				СтрокаКэша  = КэшКатегорий[СтрокаДочернейКатегории.Представление];
				НоваяСтрока = ПодчиненныеСтроки.Вставить(СтрокаДочернейКатегории.Значение);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);
				Если НоваяСтрока.ЛистоваяКатегория Тогда
					НоваяСтрока.ИндексКартинки = 3;
					Если СтрокаКэша.СвойстваКэшированы И ДеревоОтборов <> Неопределено Тогда
						СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий, СтрокаКэша.Идентификатор, ТекущаяВетка, ДополнительныеПараметры);
					КонецЕсли;
				Иначе
					НоваяВетка = НоваяСтрока.ПолучитьЭлементы().Добавить();
					НоваяВетка.ПустаяГруппа = Истина;
				КонецЕсли;
			КонецЦикла;
			ТекущаяВетка.ДочерниеПодгружены     = Истина;
			ТекущаяВетка.ДочерниеКэшированы     = Истина;
			ТекущаяВетка.ВОбработке             = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие в кэше необходимой дочерней категории.
//
// Параметры:
//  КэшКатегорий           - Структура - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//  ИдентификаторКатегории - Строка    - идентификатор строки категории.
//
// Возвращаемое значение:
//  Булево - Истина, если в кэше есть выбранная дочерняя категория.
//
Функция ЗагрузитьДанныеДочернихИзКэша(Знач ИдентификаторКатегории, Знач КэшКатегорий) Экспорт
	
	Если ИдентификаторКатегории <> Неопределено И ЗначениеЗаполнено(КэшКатегорий) Тогда
		СтрокаРубрикатораИзКэша = Неопределено;
		Если КэшКатегорий.Свойство("_" + ИдентификаторКатегории, СтрокаРубрикатораИзКэша)
			И СтрокаРубрикатораИзКэша.ДочерниеКэшированы Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает дополнительные реквизиты и характеристики категории.
//
// Параметры:
//   ИдентификаторКатегории             - Строка         - идентификатор строки категории.
//   Форма                              - ФормаКлиентскогоПриложения.
//   ПараметрыЗавершения                - Структура:
//      * СтрокаДереваКатегории  - ДанныеФормыЭлементДерева - строка дерева категорий.
//   ИдентификаторЗадания               - УникальныйИдентификатор.
//   ЭлементДлительностиЗагрузкиСвойств - ДекорацияФормы - картинка длительного выполнения операции.
//   ЭлементСтрокиПоискаКатегории       - ПолеФормы      - поле формы строки поиска категорий.
//
Процедура ПолучитьДополнительныеРеквизитыКатегории(ИдентификаторКатегории, Форма, ПараметрыЗавершения, ИдентификаторЗадания,
				ЭлементДлительностиЗагрузкиСвойств, ЭлементСтрокиПоискаКатегории) Экспорт
				
	ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьФильтрыКатегорииВФоне(
		ИдентификаторКатегории, Форма.УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыЗавершения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
				
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьСвойстваЛистовойКатегорииЗавершение",
			Форма, ПараметрыЗавершения);
			
		ЭлементСтрокиПоискаКатегории.Доступность     = Ложь;
		ЭлементДлительностиЗагрузкиСвойств.Видимость = Истина;

		НачатьОжиданиеПолученияДанныхСервиса(ОповещениеОЗавершении,
			ДлительнаяОперация, Форма, ИдентификаторЗадания,
				ЭлементДлительностиЗагрузкиСвойств);
				
	КонецЕсли;
				
КонецПроцедуры

// Обрабатывает свойства листовых категорий полученных из сервиса.
//
// Параметры:
//   АдресРезультата                    - Строка               - адрес временного хранилища с данными из сервиса.
//   ДеревоОтборов                      - ДанныеФормыДерево    - дерево отборов на форме.
//   ДополнительныеПараметры            - Структура:
//      * ЕстьФиксированныеОтборы         - Булево                   - признак наличия в дереве отборов на форме фиксированных отборов.
//      * ИдентификаторЗадания            - УникальныйИдентификатор  - идентификатор задания.
//      * ИдентификаторКатегории          - Строка                   - идентификатор строки категории.
//      * ИсключитьВыводПроизводителей    - Булево                   - признак исключения вывода в дерево отборов свойства "Производитель".
//      * ИспользоватьИнтервалВводаДанных - Булево                   - признак использования интервала для ввода данных с типом число или дата.
//      * СтрокаДереваКатегории           - ДанныеФормыЭлементДерева - строка дерева категорий.
//   ЭлементДлительностиЗагрузкиСвойств - ДекорацияФормы       - картинка длительного выполнения операции.
//   ЭлементСтрокиПоискаКатегории       - ПолеФормы            - поле формы строки поиска категорий.
//
Процедура ОбработатьСвойстваЛистовойКатегории(АдресРезультата, ДеревоОтборов, ДополнительныеПараметры,
				ЭлементДлительностиЗагрузкиСвойств, ЭлементСтрокиПоискаКатегории) Экспорт
		
	КэшКатегорий           = ПолучитьКэшКатегорий();
	ИдентификаторКатегории = ДополнительныеПараметры.ИдентификаторКатегории;
	СтрокаДереваКатегории  = ДополнительныеПараметры.СтрокаДереваКатегории;
	
	РаботаСНоменклатуройСлужебныйВызовСервера.ОбработатьДанныеДополнительныхРеквизитов(АдресРезультата, КэшКатегорий, ИдентификаторКатегории);
	
	СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий, ИдентификаторКатегории, СтрокаДереваКатегории,
		ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(КэшКатегорий) Тогда
		СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли;
		
	ЭлементДлительностиЗагрузкиСвойств.Видимость = Ложь;
	ЭлементСтрокиПоискаКатегории.Доступность     = Истина;
	
КонецПроцедуры

// Получает значения дополнительного реквизита из сервиса.
//
// Параметры:
//   Форма                     - ФормаКлиентскогоПриложения.
//   ДлительностьЗагрузки      - ДекорацияФормы          - картинка длительного выполнения загрузки свойств отборов.
//   ИдентификаторЗадания      - УникальныйИдентификатор  - идентификатор задания.
//   ДополнительныеПараметры   - Структура:
//      * ИдентификаторКатегории        - Строка - идентификатор строки категории.
//      * ИдентификаторРеквизита        - Строка - строка дополнительного реквизита категории.
//      * ИдентификаторСтрокиДерева     - Число  - идентификатор строки дерева отборов.
//      * ПолучитьДанныеСервисаПоОтбору - Булево - признак необходимости получения данных по отбору из сервиса.
//      * Представление                 - Строка - наименование категории.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Форма, ДлительностьЗагрузки, ИдентификаторЗадания, ДополнительныеПараметры) Экспорт
					
	ИдентификаторРеквизита  = ДополнительныеПараметры.ИдентификаторРеквизита;
	ИдентификаторКатегории  = ДополнительныеПараметры.ИдентификаторКатегории;
	
	Если НЕ ДополнительныеПараметры.Свойство("ПолучитьДанныеСервисаПоОтбору") Тогда
		ДополнительныеПараметры.Вставить("ПолучитьДанныеСервисаПоОтбору", Ложь);
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПолучитьЗначенияДополнительныхРеквизитовПродолжение",
		Форма, ДополнительныеПараметры);
		
	ДлительностьЗагрузки.Видимость = Истина;
	
	Если ИдентификаторРеквизита = "Производитель" Тогда 
		
		РаботаСНоменклатуройКлиент.ПолучитьПроизводителейКатегории(ОписаниеЗавершения,
			ИдентификаторКатегории, Форма, ИдентификаторЗадания, ДлительностьЗагрузки);
	Иначе
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("ИдентификаторДополнительногоРеквизита", ИдентификаторРеквизита);
		ПараметрыПоиска.Вставить("ИдентификаторКатегории",                ИдентификаторКатегории);
	
		РаботаСНоменклатуройКлиент.ПолучитьЗначенияДополнительногоРеквизитаКатегории(ОписаниеЗавершения,
			ПараметрыПоиска, Форма, ИдентификаторЗадания, ДлительностьЗагрузки);
	КонецЕсли;
		
КонецПроцедуры

// Обрабатывает полученные значения дополнительного реквизита листовой категории из сервиса.
//
// Параметры:
//   АдресРезультата                    - Строка            - адрес временного хранилища с данными из сервиса.
//   ДополнительныеПараметры            - Структура:
//      * ИдентификаторЗадания          - УникальныйИдентификатор - идентификатор задания.
//      * ИдентификаторКатегории        - Строка                  - идентификатор строки категории.
//      * ИдентификаторРеквизита        - Строка                  - строка дополнительного реквизита категории.
//      * ИдентификаторСтрокиДерева     - Число                   - идентификатор строки дерева отборов.
//      * ПолучитьДанныеСервисаПоОтбору - Булево                  - признак необходимости получения данных по отбору из сервиса.
//      * Представление                 - Строка                  - наименование категории.
//   ДеревоОтборов                      - ДанныеФормыДерево - дерево отборов на форме.
//   ЭлементДлительностиЗагрузкиСвойств - ДекорацияФормы    - картинка длительного выполнения операции.
//
Процедура ОбработатьЗначенияДополнительныхРеквизитов(АдресРезультата, ДополнительныеПараметры, ДеревоОтборов,
			ЭлементДлительнойЗагрузкиСвойств) Экспорт
	
	КэшКатегорий = ПолучитьКэшКатегорий();
		
	РаботаСНоменклатуройСлужебныйВызовСервера.ОбработатьЗначенияДополнительныхРеквизитовСервиса(АдресРезультата,
		КэшКатегорий, ДополнительныеПараметры);

	Если ЗначениеЗаполнено(КэшКатегорий) Тогда
		СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли;
	
	ДополнитьДеревоОтборовЗначениямиВыбораСписка(ДополнительныеПараметры, КэшКатегорий, ДеревоОтборов);
		
	ЭлементДлительнойЗагрузкиСвойств.Видимость = Ложь;

КонецПроцедуры

// Открывает форму загрузки категорий.
//
// Параметры:
//   Форма         - ФормаКлиентскогоПриложения.
//   ТекущаяСтрока - Строка - идентификатор строки категории.
//
Процедура КатегорияСтрокаПоискаНачалоВыбора(Форма, ТекущаяКатегория) Экспорт
	
	ПараметрыФормыВыбора = РаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиКатегорий();
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда 
		ПараметрыФормыВыбора.ИдентификаторыВыбранныхКатегорий.Добавить(ТекущаяКатегория);
	КонецЕсли;
	
	ПараметрыФормыВыбора.РежимВыбораКатегорий      = Истина;
	ПараметрыФормыВыбора.СкрыватьОписаниеКатегорий = Истина;
	ПараметрыФормыВыбора.ОдиночныйРежимВыбора      = Истина;
	ПараметрыФормыВыбора.РазрешеноВыбиратьГруппы   = Истина;

	ПараметрыФормыВыбора.ЗаголовокФормы            = НСтр("ru = 'Выбор категории'");
	
	Оповещение = Новый ОписаниеОповещения("КатегорияПослеВыбора", Форма);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуЗагрузкиКатегорий(ПараметрыФормыВыбора, Форма,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Удаляет категорию из списка идентификаторов развернутых категорий.
//
// Параметры:
//   Строка                     - Число             - идентификатор строки категории в дереве категорий.
//   Категории                  - ДанныеФормыДерево - дерево категорий на форме.
//   СписокРазвернутыхКатегорий - СписокЗначений    - список идентификаторов развернутых групп категорий.
//
Процедура КатегорииПередСворачиванием(Строка, Категории, СписокРазвернутыхКатегорий) Экспорт
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = СписокРазвернутыхКатегорий.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка <> Неопределено Тогда
		СписокРазвернутыхКатегорий.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость загрузки категории из сервиса.
//
// Параметры:
//   СтрокаДерева               - ДанныеФормыЭлементДерева - строка дерева категорий.
//   СписокРазвернутыхКатегорий - СписокЗначений           - список идентификаторов развернутых групп категорий.
//   КоличествоЗаданий          - Число                    - количество запущенных заданий в фоне.
//   НеТребуетсяЗагрузка        - Булево                   - признак отсутствия необходимости загрузки категории.
//
Процедура КатегорииПередРазворачиванием(СтрокаДерева, СписокРазвернутыхКатегорий, КоличествоЗаданий, НеТребуетсяЗагрузка) Экспорт
	
	Если СтрокаДерева.ЛистоваяКатегория
		ИЛИ СтрокаДерева.ВОбработке Тогда
		НеТребуетсяЗагрузка = Истина;
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = СписокРазвернутыхКатегорий.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка = Неопределено Тогда
		СписокРазвернутыхКатегорий.Добавить(СтрокаДерева.Идентификатор);
	КонецЕсли;
	
	Если СтрокаДерева.ДочерниеПодгружены
		Или КоличествоЗаданий > 10 Тогда
		НеТребуетсяЗагрузка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает в дереве категорий структуру развернутых категории.
//
// Параметры:
//   ДеревоКатегорийФормы           - ТаблицаФормы              - форма дерева значений "Категории".
//   РазвернутыеСтрокиИндекс        - ФиксированноеСоответствие - содержит идентификаторы категорий и их индексы в дереве категорий:
//     * Ключ     - Строка - идентификатор развернутой строки категории.
//     * Значение - Число  - идентификатор строки категории в дереве категорий.
//   Категории                      - ДанныеФормыДерево         - дерево категорий на форме.
//   СписокРазвернутыхКатегорий     - СписокЗначений            - список идентификаторов развернутых групп категорий.
//   ОбластьКатегорийОткрыта        - Булево                    - признак включенной кнопки "Категории" и раскрытой области категории.
//   МассивИдентификаторовРодителей - Массив                    - массив строк идентификаторов родителей категорий.
//
Процедура ВосстановитьРазвернутыеСтроки(ДеревоКатегорийФормы, РазвернутыеСтрокиИндекс, Категории, СписокРазвернутыхКатегорий,
			ОбластьКатегорийОткрыта = Истина, МассивИдентификаторовРодителей = Неопределено) Экспорт
				
	ЗаполнитьИндексыРазвернутыхСтрок(Категории, РазвернутыеСтрокиИндекс, СписокРазвернутыхКатегорий, МассивИдентификаторовРодителей);
	
	Если ОбластьКатегорийОткрыта Тогда
		Для Каждого ИдентификаторСтроки Из РазвернутыеСтрокиИндекс Цикл
			ЗначениеИдентификатора = ИдентификаторСтроки.Значение;
			КатегорияРазвернута = ДеревоКатегорийФормы.Развернут(ЗначениеИдентификатора);
			Если КатегорияРазвернута <> Неопределено И НЕ КатегорияРазвернута Тогда
				ДеревоКатегорийФормы.Развернуть(ЗначениеИдентификатора);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает дерево категорий из кэша категорий.
//
// Параметры:
//   КэшКатегорий               - Структура                 - кэш категорий, хранимый в сеансе пользователя:
//     * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//     * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ИдентификаторКатегории     - Строка                    - идентификатор строки категории.
//   Категории                  - ДанныеФормыДерево         - дерево категорий на форме.
//   СписокРазвернутыхКатегорий - СписокЗначений            - список идентификаторов развернутых групп категорий.
//   РазвернутыеСтрокиИндекс    - ФиксированноеСоответствие - содержит идентификаторы категорий и их индексы в дереве категорий:
//     * Ключ     - Строка    - идентификатор развернутой строки категории.
//     * Значение - Число     - идентификатор строки категории в дереве категорий.
//   Элементы                   - ВсеЭлементыФормы.
//
Процедура ВосстановитьКатегорииИзКэша(КэшКатегорий, ИдентификаторКатегории, Категории, СписокРазвернутыхКатегорий,
			РазвернутыеСтрокиИндекс, Элементы) Экспорт
	
	ОбластьКатегорийОткрыта = Элементы.ПоказатьСкрытьКатегории.Пометка;
		
	ВосстановитьДеревоИзКэшаКатегорий(КэшКатегорий, Категории, "", СписокРазвернутыхКатегорий);
	
	ЭлементыКатегории = Элементы.Категории;
	
	ВосстановитьРазвернутыеСтроки(ЭлементыКатегории, РазвернутыеСтрокиИндекс, Категории, СписокРазвернутыхКатегорий, ОбластьКатегорийОткрыта);
	
	НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории,
		ЭлементыКатегории, Категории, Истина, ОбластьКатегорийОткрыта, Истина);
		
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы,
				Категории.ПолучитьЭлементы().Количество() > 0);

КонецПроцедуры

// Находит и сворачивает категорию, которую открыли, но она не загрузилась перед сменой категории.
//
// Параметры:
//   Категории              - ДанныеФормыДерево - дерево категорий на форме.
//   ИдентификаторКатегории - Строка            - идентификатор строки категории.
//   Элементы               - ВсеЭлементыФормы.
//   КоличествоЗаданий      - Число             - количество запущенных заданий в фоне.
//
Процедура НайтиИСвернутьОткрытуюНеЗагруженнуюКатегорию(Категории, ИдентификаторКатегории, Элементы, КоличествоЗаданий) Экспорт
	
	ТекущаяВетка = Неопределено;
	РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории, ТекущаяВетка, ,Истина);
	Если ТекущаяВетка <> Неопределено Тогда
		ТекущаяВетка.ВОбработке = Ложь;
		ИдентификаторСтроки = ТекущаяВетка.ПолучитьИдентификатор();
		СтрокаРазвернута = Элементы.Категории.Развернут(ИдентификаторСтроки);
		Если СтрокаРазвернута <> Неопределено И НЕ СтрокаРазвернута
			И Элементы.Категории.Развернут(ИдентификаторСтроки) Тогда
			Элементы.Категории.Свернуть(ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(Элементы, КоличествоЗаданий);
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Категории.ПолучитьЭлементы().Количество() > 0);
	
КонецПроцедуры

// Проверяет наличие категории в кэше и позиционируется на ней.
//
// Параметры:
//   КэшКатегорий              - Структура                  - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ИдентификаторКатегории     - Строка                    - идентификатор строки категории.
//   Категории                  - ДанныеФормыДерево         - дерево категорий на форме.
//   СписокРазвернутыхКатегорий - СписокЗначений            - список идентификаторов развернутых групп категорий.
//   РазвернутыеСтрокиИндекс    - ФиксированноеСоответствие - содержит идентификаторы категорий и их индексы в дереве категорий:
//     * Ключ     - Строка - идентификатор развернутой строки категории.
//     * Значение - Число  - идентификатор строки категории в дереве категорий.
//   Элементы                   - ВсеЭлементыФормы.
//   ОбластьКатегорийОткрыта    - Булево                    - признак включенной кнопки "Категории" и раскрытой области категории.
//
// Возвращаемое значение:
//  Булево - Истина, если в кэше есть выбранная категория и она выведена на форму в дерево категорий.
//
Функция ВосстановитьКатегорииИзКэшаИНайтиТекущуюВетку(КэшКатегорий, ИдентификаторКатегории, Категории, СписокРазвернутыхКатегорий,
				РазвернутыеСтрокиИндекс, Элементы, ОбластьКатегорийОткрыта = Истина) Экспорт
	
	Если ЗначениеЗаполнено(КэшКатегорий) Тогда
		
		Если ИдентификаторКатегории = Неопределено
			ИЛИ ИдентификаторКатегории = "" Тогда
			ВосстановитьКатегорииИзКэша(КэшКатегорий, "", Категории, СписокРазвернутыхКатегорий, РазвернутыеСтрокиИндекс, Элементы);
			Возврат Истина;
		КонецЕсли;
		
		ВосстановитьДеревоИзКэшаКатегорий(КэшКатегорий, Категории, "", СписокРазвернутыхКатегорий);
		
		СтрокаКатегорииИзКэша = Неопределено;
		Если КэшКатегорий.Свойство("_" + ИдентификаторКатегории, СтрокаКатегорииИзКэша) Тогда
			
			ВеткаРодителя = Неопределено;
			ТекущаяВетка  = Неопределено;
			РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(
				Категории, ИдентификаторКатегории, ТекущаяВетка, , Истина, ВеткаРодителя);
			
			Если ВеткаРодителя <> Неопределено И ТекущаяВетка <> Неопределено И ВеткаРодителя.ДочерниеПодгружены Тогда
				
				ВосстановитьРазвернутыеСтроки(Элементы.Категории, РазвернутыеСтрокиИндекс,
					Категории, СписокРазвернутыхКатегорий, ОбластьКатегорийОткрыта);
				
				Элементы.Категории.ТекущаяСтрока = ТекущаяВетка.ПолучитьИдентификатор();
				РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы,
					Категории.ПолучитьЭлементы().Количество() > 0);
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Находит и позиционирует в дереве категорий на строке индикатора категории.
//
// Параметры:
//   ИдентификаторКатегории         - Строка            - идентификатор строки категории.
//   ДеревоКатегорийФормы           - ТаблицаФормы      - форма дерева значений "Категории".
//   Категории                      - ДанныеФормыДерево - дерево категорий на форме.
//   ОкноПриложенияОткрыто          - Булево            - признак открытой формы приложения.
//   ОбластьКатегорийОткрыта        - Булево            - признак включенной кнопки "Категории" и раскрытой области категории.
//   ВыбранныйИдентификатор         - Число             - идентификатор строки категории в дереве категорий.
//
Процедура НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории, ДеревоКатегорийФормы, Категории, ОкноПриложенияОткрыто,
				ОбластьКатегорийОткрыта = Истина, ВыбранныйИдентификатор = Неопределено) Экспорт
	
	Если ИдентификаторКатегории <> Неопределено И ОкноПриложенияОткрыто Тогда
		ТекущаяВетка = Неопределено;
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории, ТекущаяВетка, , Истина);
		Если ТекущаяВетка <> Неопределено Тогда
			ВыбранныйИдентификатор = ТекущаяВетка.ПолучитьИдентификатор();
			Если ОбластьКатегорийОткрыта Тогда
				СтрокаРазвернута = ДеревоКатегорийФормы.Развернут(ВыбранныйИдентификатор);
				Если СтрокаРазвернута <> Неопределено И НЕ СтрокаРазвернута Тогда
					ДеревоКатегорийФормы.Развернуть(ВыбранныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			Если ДеревоКатегорийФормы.ТекущаяСтрока <> ВыбранныйИдентификатор Тогда
				ДеревоКатегорийФормы.ТекущаяСтрока = ВыбранныйИдентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево категорий сопоставленными категориями номенклатуры
//
// Параметры:
//  Форма                         - ФормаКлиентскогоПриложения - форма, на которой расположено дерево категорий
//  ДеревоКатегорий               - ДанныеФормыДерево - дерево категорий, строка которого разворачивается
//  ИспользуемыеКатегории         - Массив из Строка - массив идентификаторов используемых категорий
//  РежимПросмотраДереваКатегорий - Строка - режим просмотра дерева:
//      *ДеревоИспользуемых - дерево, состоящее из категорий, сопоставленных с номенклатурой
//      *ДеревоЦеликом - полное дерево категорий сервиса
//      *Список - отображать дерево без иерархии
//  ИдентификаторЗадания          - УникальныйИдентификатор - уникальный идентификатор фонового задания
//  ЭлементФормы                  - ТаблицаФормы - элемент формы, отображающий дерево категорий
//  ОписаниеОповещенияОЗавершении -ОписаниеОповещения - обработчик, выполняемый после заполнения дерева
//
Процедура ЗаполнитьДеревоПоВыбраннымКатегориям(Форма, ДеревоКатегорий, ИспользуемыеКатегории, 
		РежимПросмотраДереваКатегорий, ИдентификаторЗадания, ЭлементФормы, ОписаниеОповещенияОЗавершении) Экспорт 
	Перем ДанныеОсновнойКатегории;

	КэшКатегорий = ПолучитьКэшКатегорий();
	
	ОтсутствующиеВКэшеКатегории = ПолучитьОтсутствующиеКатегорииКэша(КэшКатегорий, ИспользуемыеКатегории, РежимПросмотраДереваКатегорий);
	
	Если КэшКатегорий.Свойство("_", ДанныеОсновнойКатегории) И ДанныеОсновнойКатегории.ДочерниеКэшированы И ОтсутствующиеВКэшеКатегории.Количество() = 0 Тогда
		СформироватьДеревоКатегорийИзКэша(ДеревоКатегорий, ИспользуемыеКатегории, РежимПросмотраДереваКатегорий, 
			ЭлементФормы, ОписаниеОповещенияОЗавершении);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДеревоКатегорий"               , ДеревоКатегорий);
	ДополнительныеПараметры.Вставить("ИспользуемыеКатегории"         , ИспользуемыеКатегории);
	ДополнительныеПараметры.Вставить("РежимПросмотраДереваКатегорий" , РежимПросмотраДереваКатегорий);
	ДополнительныеПараметры.Вставить("ЭлементФормы"                  , ЭлементФормы);
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияОЗавершении" , ОписаниеОповещенияОЗавершении);
	
	ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКэшКатегорийСервисаВФоне(ОтсутствующиеВКэшеКатегории, РежимПросмотраДереваКатегорий, ИдентификаторЗадания, Форма.УникальныйИдентификатор);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьПолучениеДанныхКатегории(ДлительнаяОперация, ДополнительныеПараметры);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхКатегории", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания       = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьСообщения          = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли; 

КонецПроцедуры

// Получает соответствие идентификаторов и строк дерева категорий
//
// Параметры:
//  ДеревоКатегорий - ДанныеФормыДерево - дерево категорий на форме
// 
// Возвращаемое значение:
//  Соответствие - соответствие идентификаторов и строк дерева формы
//
Функция СтрокиСуществующихКатегорий(ДеревоКатегорий) Экспорт 

	Результат = Новый Соответствие;
	
	ДобавитьСтрокиДочернихКатегорий(Результат, ДеревоКатегорий.ПолучитьЭлементы());
	
	Возврат Результат;

КонецФункции

// Добавляет строку категории в дерево категорий по идентификатору.
//
// Параметры:
//  ДеревоКатегорий               - ДанныеФормыДерево - дерево категорий на форме
//  ИдентификаторКатегории        - Строка - идентификатор добавляемой категории
//  РежимПросмотраДереваКатегорий - Строка - режим просмотра дерева:
//      *ДеревоИспользуемых - дерево, состоящее из категорий, сопоставленных с номенклатурой
//      *ДеревоЦеликом - полное дерево категорий сервиса
//      *Список - отображать дерево без иерархии
//  КэшКатегорий                  - Структура - данные кэша категорий.
//      см. РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий
//  СтрокиСуществующихКатегорий   - Соответствие - соответствие идентификаторов категорий
//      и строк дерева. см РаботаСНоменклатуройСлужебныйКлиент.СтрокиСуществующихКатегорий
//  ДобавлятьПустуюКатегорию      - Булево - признак добавления в группы пустых строк для
//      отображения картинки развертывания
// 
// Возвращаемое значение:
//  Строка - строка дерева формы добавленной категории
//
Функция ДобавитьКатегориюВДерево(ДеревоКатегорий, ИдентификаторКатегории, РежимПросмотраДереваКатегорий,
		КэшКатегорий, СтрокиСуществующихКатегорий, ДобавлятьПустуюКатегорию) Экспорт 
	Перем ДанныеКатегории;
	
	ДобавленнаяСтрока = СтрокиСуществующихКатегорий[ИдентификаторКатегории];
	
	Если ДобавленнаяСтрока <> Неопределено Тогда
		Возврат ДобавленнаяСтрока;
	КонецЕсли;

	Если НЕ КэшКатегорий.Свойство("_" + ИдентификаторКатегории, ДанныеКатегории) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИдентификаторКатегории = "" Тогда
	
		СтрокаКатегории = ДеревоКатегорий.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКатегории, ДанныеКатегории);
		СтрокаКатегории.ЛистоваяКатегория  = Ложь;
		СтрокаКатегории.ВОбработке         = Истина;
		СтрокаКатегории.ИндексКартинки     = 12;
		СтрокаКатегории.ДочерниеПодгружены = Истина;
		СтрокиСуществующихКатегорий.Вставить(ИдентификаторКатегории, СтрокаКатегории);
		Возврат СтрокаКатегории;
		
	КонецЕсли;
	
	Если РежимПросмотраДереваКатегорий = "Список" Тогда
		СтрокаРодителя = ДобавитьКатегориюВДерево(ДеревоКатегорий, "", РежимПросмотраДереваКатегорий, КэшКатегорий, 
			СтрокиСуществующихКатегорий, ДобавлятьПустуюКатегорию);
	Иначе
		СтрокаРодителя = ДобавитьКатегориюВДерево(ДеревоКатегорий, ДанныеКатегории.ИдентификаторРодителя,
			РежимПросмотраДереваКатегорий, КэшКатегорий, СтрокиСуществующихКатегорий, ДобавлятьПустуюКатегорию);
	КонецЕсли;
	
	Если СтрокаРодителя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Сортировка без вызова сервера
	КонтекстДерева   = СтрокаРодителя.ПолучитьЭлементы();
	Индекс           = -1;
	ИндексУстановлен = Ложь;
	
	Для каждого СтрокаДерева Из КонтекстДерева Цикл
	
		Индекс = Индекс + 1;
		
		Если СтрокаДерева.ЛистоваяКатегория > ДанныеКатегории.ЛистоваяКатегория Тогда
			ИндексУстановлен = Истина;
			Прервать;
		ИначеЕсли СтрокаДерева.ЛистоваяКатегория = ДанныеКатегории.ЛистоваяКатегория 
			И СтрокаДерева.Ранг > ДанныеКатегории.Ранг Тогда
			ИндексУстановлен = Истина;
			Прервать;
		ИначеЕсли СтрокаДерева.ЛистоваяКатегория = ДанныеКатегории.ЛистоваяКатегория 
			И СтрокаДерева.Ранг = ДанныеКатегории.Ранг
			И СтрокаДерева.Наименование > ДанныеКатегории.Наименование Тогда
			ИндексУстановлен = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ИндексУстановлен Тогда
		СтрокаКатегории = КонтекстДерева.Вставить(Индекс);
	Иначе
		СтрокаКатегории = КонтекстДерева.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаКатегории, ДанныеКатегории);
	Если ДанныеКатегории.ЛистоваяКатегория Тогда
		СтрокаКатегории.ИндексКартинки = 3;
	ИначеЕсли ДобавлятьПустуюКатегорию Тогда
		ПустаяКатегория = СтрокаКатегории.ПолучитьЭлементы().Добавить();
		ПустаяКатегория.ПустаяГруппа = Истина;
	КонецЕсли; 
	СтрокиСуществующихКатегорий.Вставить(ИдентификаторКатегории, СтрокаКатегории);
	
	Возврат СтрокаКатегории;

КонецФункции
 
// Разворачивает строку категории.
//
// Параметры:
//  Форма                         - ФормаКлиентскогоПриложения - форма, на которой расположено дерево категорий
//  ДеревоКатегорий               - ДанныеФормыДерево - дерево категорий, строка которого разворачивается
//  ЭлементФормыДеревоКатегорий   - ТаблицаФормы - элемент формы, отображающий дерево категорий
//  Строка                        - ДанныеФормыЭлементДерева - разворачиваемая строка дерева
//  РежимПросмотраДереваКатегорий - Строка - режим просмотра дерева:
//      *ДеревоИспользуемых - дерево, состоящее из категорий, сопоставленных с номенклатурой
//      *ДеревоЦеликом - полное дерево категорий сервиса
//      *Список - отображать дерево без иерархии
//  ОписаниеОповещенияОЗавершении -ОписаниеОповещения - обработчик, выполняемый после
//          разворачивания строки дерева
//  Отказ                         - Булево - признак отказа от разворачивания строки дерева
//
Процедура РазвернутьКатегорию(Форма, ДеревоКатегорий, ЭлементФормыДеревоКатегорий, Строка,
		РежимПросмотраДереваКатегорий, ОписаниеОповещенияОЗавершении, Отказ) Экспорт 

	СтрокаДерева = ДеревоКатегорий.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Или РежимПросмотраДереваКатегорий <> "ДеревоЦеликом" Тогда
		Возврат;
	КонецЕсли;
		
	КэшКатегорий = ПолучитьКэшКатегорий();
	
	Если СтрокаДерева.ДочерниеПодгружены Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		Возврат;
	ИначеЕсли ЗагрузитьДанныеДочернихИзКэша(СтрокаДерева.Идентификатор, КэшКатегорий) Тогда
		
		ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, ДеревоКатегорий,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДерева.Идентификатор));
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	Иначе
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаДерева"                  , СтрокаДерева);
		ДополнительныеПараметры.Вставить("ЭлементФормыДеревоКатегорий"   , ЭлементФормыДеревоКатегорий);
		ДополнительныеПараметры.Вставить("ДеревоКатегорий"               , ДеревоКатегорий);
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияОЗавершении" , ОписаниеОповещенияОЗавершении);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазвернутьКатегориюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКэшКатегорийСервисаВФоне(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДерева.Идентификатор), РежимПросмотраДереваКатегорий, 
			Новый УникальныйИдентификатор, Форма.УникальныйИдентификатор);
			
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДлительнаяОперация);
		Иначе
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

#Область ВыгрузкаНоменклатуры

Функция ЗаголовокДекорацииУсловияОтбора(НастройкиОтбора) Экспорт 
	
	ПредставлениеОтбора = НСтр("ru = '&lt;вся номенклатура>'");
	Лимит               = 70;
	
	Если ТипЗнч(НастройкиОтбора) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтборИспользование = Ложь;
		ТекущийОтбор = НастройкиОтбора.Отбор;
		Для каждого ПараметрОтбора Из ТекущийОтбор.Элементы Цикл
			ОтборИспользование = ОтборИспользование ИЛИ ПараметрОтбора.Использование;
		КонецЦикла;
		
		Если ТекущийОтбор.Элементы.Количество() И ОтборИспользование Тогда
			ПредставлениеТекущегоОтбора = Строка(ТекущийОтбор);
			Если СтрДлина(ПредставлениеТекущегоОтбора) > Лимит Тогда
				ПредставлениеТекущегоОтбора = Лев(ПредставлениеТекущегоОтбора, Лимит-3) + "...";
			КонецЕсли;
			ПредставлениеОтбора = ПредставлениеТекущегоОтбора;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = НСтр("ru='Условия отбора новой номенклатуры: <span style=""font: НаклонныйШрифтРаботаСНоменклатурой"">%1</span> <a href = ""ИзменитьОтбор"">Изменить</a>'");
	Возврат СтроковыеФункцииКлиент.ФорматированнаяСтрока(Заголовок, ПредставлениеОтбора);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСДеревомОтборов

// Процедура вызывается при выборе значения в дереве отборов.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   ПредставлениеОтбора      - ПолеФормы          - поле формы дерева отборов "ПредставлениеОтбора".
//   Представление            - ПолеФормы          - поле формы колонки дерева отборов "Представление".
//   ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//   СтруктураОписанияТипов   - Структура:
//      * ЧастиДаты                - ЧастиДаты - части даты.
//      * ДлинаЧисла               - Число     - длина вводимого числа.
//      * ТочностьЧисла            - Число     - разрядность вводимого числа.
//      * ДлинаСтроки              - Число     - длина вводимой строки.
//      * РазрешенаМногострочность - Булево    - признак использования многострочности.
//
Процедура ДеревоОтборовВыбор(ДеревоОтборов, Знач ПредставлениеОтбора, Знач Представление,
			Знач ОповещениеПослеОбработки = Неопределено, Знач СтруктураОписанияТипов = Неопределено) Экспорт
	
	ТекущийЭлемент = ДеревоОтборов.ТекущийЭлемент;
	Если НЕ ТекущийЭлемент = ПредставлениеОтбора
		И НЕ ТекущийЭлемент = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 1 Тогда // нажали на поле с типом Дата или Число на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 2 ИЛИ ВариантДействий = 4 Тогда // нажали на гиперссылку с "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	КонецЕсли;
	
	Если ВариантДействий = 1 ИЛИ ВариантДействий = 3 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.УстановкаИнтервала", СтруктураПараметров, ЭтотОбъект, , , ,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Вызывается при изменении значения в дереве отборов по свойствам.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после
//                                                   выполнения обработки данных при изменении.
//   СтруктураОписанияТипов   - Структура:
//      * ЧастиДаты                - ЧастиДаты - части даты.
//      * ДлинаЧисла               - Число     - длина вводимого числа.
//      * ТочностьЧисла            - Число     - разрядность вводимого числа.
//      * ДлинаСтроки              - Число     - длина вводимой строки.
//      * РазрешенаМногострочность - Булево    - признак использования многострочности.
//
Процедура ДеревоОтборовОтборПриИзменении(ДеревоОтборов, ОповещениеПослеОбработки = Неопределено,
			СтруктураОписанияТипов = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 4 Тогда // нажали на поле с типом Дата или Число на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 7 Тогда // установили флажок на строке с незаполненным "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
	Если ВариантДействий = 3 ИЛИ ВариантДействий = 4 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.УстановкаИнтервала", СтруктураПараметров, ЭтотОбъект, , , ,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Возвращает строковое представление интервала отбора.
//
// Параметры:
//  ИнтервалОт - Число, Строка, Дата - начальное значение интервала,
//  ИнтервалДо - Число, Строка, Дата - конечное значение интервала.
//
// Возвращаемое значение:
//  Строка - представление интервала.
//
Функция ПредставлениеИнтервалаОтбора(Знач ИнтервалОт, Знач ИнтервалДо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнтервалОт)
		И НЕ ЗначениеЗаполнено(ИнтервалДо) Тогда
		
		ПредставлениеОтбора =  НСтр("ru = '<не задано>'");
		Возврат ПредставлениеОтбора;
	КонецЕсли;
	
	ПредставлениеОтбораОт = "";
	ПредставлениеОтбораДо = "";
	
	Если ЗначениеЗаполнено(ИнтервалОт) Тогда
		ЗначениеИнтервалаОт = ?(ТипЗнч(ИнтервалОт) = Тип("Дата"), Формат(ИнтервалОт, "ДЛФ=ДД"), ИнтервалОт);
		ПредставлениеОтбораОт = НСтр("ru = 'от'") + " " + ЗначениеИнтервалаОт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалДо) Тогда
		ЗначениеИнтервалаДо = ?(ТипЗнч(ИнтервалДо) = Тип("Дата"), Формат(ИнтервалДо, "ДЛФ=ДД"), ИнтервалДо);
		ПредставлениеОтбораДо = НСтр("ru = 'до'") + " " + ЗначениеИнтервалаДо;
	КонецЕсли;
	
	ПредставлениеОтбора = СтрШаблон("%1 %2", ПредставлениеОтбораОт, ПредставлениеОтбораДо);
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

// Получает и заполняет из кэша категорий на форме дерево отборов дополнительными реквизитами.
//
// Параметры:
//   ДеревоОтборов              - ДанныеФормыДерево        - дерево отборов на форме.
//   КэшКатегорий               - Структура                - кэш категорий, хранимый в сеансе пользователя:
//      * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//      * Значение - Структура - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ИдентификаторКатегории     - Строка                   - идентификатор строки категории.
//   СтрокаДереваКатегории      - ДанныеФормыЭлементДерева - строка дерева категорий.
//   ДополнительныеПараметры    - Структура:
//      * ЕстьФиксированныеОтборы         - Булево - признак наличия в дереве отборов на форме фиксированных отборов.
//      * ИсключитьВыводПроизводителей    - Булево - признак исключения вывода в дерево отборов свойства "Производитель".
//      * ИспользоватьИнтервалВводаДанных - Булево - признак использования интервала для ввода данных с типом число или дата.
//
Процедура СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий, ИдентификаторКатегории,
			СтрокаДереваКатегории = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
			
	ЕстьФиксированныеОтборы         = Ложь;
	ИсключитьВыводПроизводителей    = Ложь;
	ИспользоватьИнтервалВводаДанных = Истина;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ЕстьФиксированныеОтборы") Тогда
			ЕстьФиксированныеОтборы = ДополнительныеПараметры.ЕстьФиксированныеОтборы;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИсключитьВыводПроизводителей") Тогда
			ИсключитьВыводПроизводителей = ДополнительныеПараметры.ИсключитьВыводПроизводителей;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИспользоватьИнтервалВводаДанных") Тогда
			ИспользоватьИнтервалВводаДанных = ДополнительныеПараметры.ИспользоватьИнтервалВводаДанных;
		КонецЕсли;
	КонецЕсли;
			
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	
	Если ЕстьФиксированныеОтборы Тогда
		УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	Иначе
		СтрокиДереваОтборов.Очистить();
	КонецЕсли;
	
	СтрокаКэша = Неопределено;
	
	Если НЕ КэшКатегорий.Свойство("_" + ИдентификаторКатегории, СтрокаКэша) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Неопределено;
	СтрокаКэша.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	Если ДополнительныеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Производитель = Неопределено;
	ДополнительныеРеквизиты.Свойство("_Производитель", Производитель);
	
	Если НЕ ИсключитьВыводПроизводителей И Производитель <> Неопределено Тогда
		ЗаполнитьДеревоОтборовПоДопРеквизитам(Производитель, СтрокиДереваОтборов, СтрокаДереваКатегории, ИспользоватьИнтервалВводаДанных);
	КонецЕсли;
	
	МассивРеквизитовХарактеристик = Новый Массив;
	Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		
		Реквизит = ДополнительныйРеквизит.Значение;
		
		Если Реквизит.Идентификатор = "Производитель" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ЭтоРеквизитХарактеристики Тогда
			МассивРеквизитовХарактеристик.Добавить(Реквизит);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьДеревоОтборовПоДопРеквизитам(Реквизит, СтрокиДереваОтборов, СтрокаДереваКатегории, ИспользоватьИнтервалВводаДанных);
		
	КонецЦикла;
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого РеквизитХарактеристики Из МассивРеквизитовХарактеристик Цикл
		ЗаполнитьДеревоОтборовПоДопРеквизитам(РеквизитХарактеристики, СтрокиДереваОтборов, СтрокаДереваКатегории, ИспользоватьИнтервалВводаДанных);
	КонецЦикла;
	
	Если СтрокаДереваКатегории <> Неопределено Тогда
		СтрокаДереваКатегории.СвойстваКэшированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает элементы дерева отборов по дополнительным реквизитам.
//
// Параметры:
//   СтрокаОтбора           - ДанныеФормыЭлементДерева - строка дерева отборов.
//   БыстрыеОтборы          - СписокЗначений           - список выбранных отборов для вывода на форме.
//   ЭлементБыстрыхОтборов  - ЭлементыФормы            - элемент формы БыстрыеОтборы.
//   СтруктураАтрибутов     - Структура                - возвращает структуру с параметрами для запроса в сервисе.
//   МассивПроизводителей   - Массив                   - возвращает массив идентификаторов значений по свойству "Производитель".
//
Процедура ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(СтрокаОтбора, БыстрыеОтборы,
				СтруктураАтрибутов, МассивПроизводителей = Неопределено) Экспорт
	
	ИдентификаторОтбора         = СтрокаОтбора.Идентификатор;
	
	ЗначениеОтбора    = СтрокаОтбора.ЗначениеОтбора;
	ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
	
	ИдентификаторыЗначений = Новый Массив;
	
	Если ЗначениеОтбора = "Список" Тогда
		
		СтрокаПроизводитель     = ИдентификаторОтбора = "Производитель";
		СтрокиОтбораСписок      = СтрокаОтбора.ПолучитьЭлементы();
		СтрокаЗначенийОтборов   = "";
		ВсеЗначенияВыбраны      = Истина;
		
		Для Каждого ЭлементСписка Из СтрокиОтбораСписок Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементСписка.Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			Если ЭлементСписка.Отбор Тогда
				Если МассивПроизводителей <> Неопределено И СтрокаПроизводитель Тогда
					МассивПроизводителей.Добавить(ЭлементСписка.Идентификатор);
				Иначе
					ИдентификаторыЗначений.Добавить(ЭлементСписка.Идентификатор);
				КонецЕсли;
				СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ") + ЭлементСписка.Представление;
			Иначе
				ВсеЗначенияВыбраны = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторыЗначений.Количество() Тогда
			СтруктураАтрибутов = Новый Структура("Идентификатор, ИдентификаторыЗначений",
				ИдентификаторОтбора, ИдентификаторыЗначений);
		КонецЕсли;
		
		Если ВсеЗначенияВыбраны Тогда
			
			ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + НСтр("ru = 'Все'");
		
		ИначеЕсли НЕ ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
			
			ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + СтрокаЗначенийОтборов;
			
		КонецЕсли;
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		
		Если (СтрокаОтбора.ФиксированноеЗначение
			И НЕ ЗначениеЗаполнено(СтрокаОтбора.ИнтервалОт) И НЕ ЗначениеЗаполнено(СтрокаОтбора.ИнтервалДо))
			ИЛИ (НЕ СтрокаОтбора.ФиксированноеЗначение И НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеОтбора)) Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаОтбора.ФиксированноеЗначение Тогда
			СтруктураАтрибутов = Новый Структура("Идентификатор, МинимальноеЗначение, МаксимальноеЗначение",
				ИдентификаторОтбора, СтрокаОтбора.ИнтервалОт, СтрокаОтбора.ИнтервалДо);
		Иначе
			СтруктураАтрибутов = Новый Структура("Идентификатор, Значение",
				ИдентификаторОтбора, СтрокаОтбора.ЗначениеОтбора);
		КонецЕсли;

		ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + СтрокаОтбора.ПредставлениеОтбора;
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Булево") Тогда
		
		СтруктураАтрибутов = Новый Структура("Идентификатор, Значение",
			ИдентификаторОтбора, Истина);
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, СтрокаОтбора.Представление + ": " + СтрокаОтбора.Отбор);
			
	КонецЕсли;
	
КонецПроцедуры

// Удаляет на форме из дерева отборов нефиксированные отборы.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево - дерево отборов на форме.
//
Процедура УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов) Экспорт
	
	ЭлементыОтборов     = ДеревоОтборов.ПолучитьЭлементы();
	КоличествоЭлементов = ЭлементыОтборов.Количество();
	
	МассивИндексовНаУдалениеОтборов = Новый Массив;
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ИндексОтбора  = КоличествоЭлементов - ОбратныйИндекс;
		ЭлементОтбора = ЭлементыОтборов[ИндексОтбора];
		
		Если ЭлементОтбора.ФиксированныйОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИндексовНаУдалениеОтборов.Добавить(ИндексОтбора);
	КонецЦикла;

	Для Каждого ИндексЭлемента Из МассивИндексовНаУдалениеОтборов Цикл
		ЭлементОтбора = ЭлементыОтборов[ИндексЭлемента];
		ЭлементыОтборов.Удалить(ЭлементОтбора);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет дерево отборов значениями из списка дополнительного реквизита.
//
// Параметры:
//   ДополнительныеПараметры  - Структура:
//      * ИдентификаторЗадания          - УникальныйИдентификатор - идентификатор задания.
//      * ИдентификаторКатегории        - Строка                  - идентификатор строки категории.
//      * ИдентификаторРеквизита        - Строка                  - строка дополнительного реквизита категории.
//      * ИдентификаторСтрокиДерева     - Число                   - идентификатор строки дерева отборов.
//      * ПолучитьДанныеСервисаПоОтбору - Булево                  - признак необходимости получения данных по отбору из сервиса.
//      * Представление                 - Строка                  - наименование категории.
//   КэшКатегорий             - Структура         - кэш категорий, хранимый в сеансе пользователя:
//      * Ключ     - Строка             - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//      * Значение - Структура          - см. РаботаСНоменклатуройСлужебный.ЗаполнитьСтруктуруКэшаКатегорий.
//   ДеревоОтборов            - ДанныеФормыДерево - дерево отборов на форме.
//
Процедура ДополнитьДеревоОтборовЗначениямиВыбораСписка(ДополнительныеПараметры, КэшКатегорий, ДеревоОтборов) Экспорт
	
	СтрокаДополнительногоРеквизита = Неопределено;
	СтрокаКэшаКатегорий            = Неопределено;
	КэшКатегорий.Свойство("_" + ДополнительныеПараметры.ИдентификаторКатегории, СтрокаКэшаКатегорий);
	
	СтрокаДополнительногоРеквизита = Неопределено;
	Если СтрокаКэшаКатегорий.Свойство("ДополнительныеРеквизиты") Тогда
		СтрокаДополнительногоРеквизита = Неопределено;
		Если НЕ СтрокаКэшаКатегорий.ДополнительныеРеквизиты.Свойство("_" + ДополнительныеПараметры.ИдентификаторРеквизита, СтрокаДополнительногоРеквизита) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбораЗначенийДопРеквизита = Неопределено;
	Если НЕ СтрокаДополнительногоРеквизита.Свойство("СписокВыбораЗначенийДопРеквизита", СписокВыбораЗначенийДопРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеСервисаПоОтбору = ДополнительныеПараметры.ПолучитьДанныеСервисаПоОтбору;
	ИдентификаторДерева           = ДополнительныеПараметры.ИдентификаторСтрокиДерева;
	СтрокаДереваОтборов           = ДеревоОтборов.НайтиПоИдентификатору(ИдентификаторДерева);
	
	Если СтрокаДереваОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваОтборов.ПолучитьЭлементы().Очистить();
	
	ИдентификаторыЗначений = Неопределено;
	ДополнительныеПараметры.Свойство("ИдентификаторыЗначений", ИдентификаторыЗначений);
	
	УстановитьОтбор = ПолучитьДанныеСервисаПоОтбору;
	Для Каждого ЭлементСпискаРеквизита Из СписокВыбораЗначенийДопРеквизита Цикл
		Если ИдентификаторыЗначений <> Неопределено Тогда
			НайденныйИдентификатор = ИдентификаторыЗначений.НайтиПоЗначению(ЭлементСпискаРеквизита.Идентификатор);
			УстановитьОтбор = НайденныйИдентификатор <> Неопределено;
		КонецЕсли;
		НоваяСтрокаДерева = СтрокаДереваОтборов.ПолучитьЭлементы().Добавить();
		НоваяСтрокаДерева.Идентификатор   = ЭлементСпискаРеквизита.Идентификатор;
		НоваяСтрокаДерева.ИмяРеквизита    = ЭлементСпискаРеквизита.Наименование;
		НоваяСтрокаДерева.Представление   = ЭлементСпискаРеквизита.Наименование;
		
		НоваяСтрокаДерева.Отбор           = УстановитьОтбор;
	КонецЦикла;
	
	СтрокаДереваОтборов.ДочерниеПодгружены = Истина;
	СтрокаДереваОтборов.ВРаботе            = Ложь;
	
КонецПроцедуры

// Разворачивает строку дерева отборов.
//
// Параметры:
//   ДеревоОтборов             - ДанныеФормыДерево  - дерево отборов на форме.
//   ИдентификаторСтрокиДерева - Число              - идентификатор строки дерева отборов.
//   ДеревоОтборовФормы        - ТаблицаФормы       - форма дерева значений "Отборы".
//
Процедура РазвернутьСтрокуДереваОтборов(ИдентификаторСтрокиДерева, ДеревоОтборов, ДеревоОтборовФормы) Экспорт
	
	ТекущаяСтрокаОтбора = ДеревоОтборов.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если ТекущаяСтрокаОтбора <> Неопределено Тогда
		ЭлементРазвернут = ДеревоОтборовФормы.Развернут(ИдентификаторСтрокиДерева);
		Если ЭлементРазвернут <> Неопределено И НЕ ЭлементРазвернут Тогда
			ДеревоОтборовФормы.Развернуть(ИдентификаторСтрокиДерева);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// Обновляет статистику результатов выгрузки
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ОбновитьСтатистикуРезультатов(Форма) Экспорт 
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодсчетСтатистикиРезультатов") Тогда
		Возврат;
	КонецЕсли;
	
	ПодсчетСтатистикиРезультатов = Форма.ПодсчетСтатистикиРезультатов;
	
	Если ТипЗнч(ПодсчетСтатистикиРезультатов) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	Если ПодсчетСтатистикиРезультатов.Статус = "Выполнено" Тогда
		ОбновлениеСтатистикиЗавершение(ПодсчетСтатистикиРезультатов, Форма);
	Иначе 
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновлениеСтатистикиЗавершение", ЭтотОбъект, Форма);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПодсчетСтатистикиРезультатов, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеСтатистикиЗавершение(Результат, Форма) Экспорт 
	
	Если НЕ (Результат.Свойство("Статус")
		И Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.СтатистикаРезультатов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ОбновитьЗаголовкиКнопокСостояние(Форма);
	
КонецПроцедуры

Процедура ОбновитьЗаголовкиКнопокСостояние(Форма) Экспорт 
	
	Элементы               = Форма.Элементы;
	ПрефиксКомандСостояние = Форма.ПрефиксКомандСостояние;
	СтатистикаРезультатов  = Форма.СтатистикаРезультатов;
	
	Для каждого ПараметрыКнопки Из СтатистикаРезультатов Цикл
		ИмяКоманды         = ПрефиксКомандСостояние + ПараметрыКнопки.Ключ;
		РазмерПорции       = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
		КоличествоПоКнопке = ПараметрыКнопки.Значение;
		
		Если КоличествоПоКнопке >= РазмерПорции Тогда
			ПредставлениеКоличества = СтрШаблон(НСтр("ru = 'более %1'"), Формат(РазмерПорции, "ЧГ=0"));
		Иначе
			ПредставлениеКоличества = Формат(КоличествоПоКнопке, "ЧН=0; ЧГ=0");
		КонецЕсли;
		
		СостояниеПредставление = Элементы[ИмяКоманды].Заголовок;
		ПоложениеСкобки        = СтрНайти(СостояниеПредставление, " (");
		Если ПоложениеСкобки > 0 Тогда
			СостояниеПредставление = Лев(СостояниеПредставление, ПоложениеСкобки - 1);
		КонецЕсли;
		Элементы[ИмяКоманды].Заголовок = СтрШаблон("%1 (%2)", СостояниеПредставление, ПредставлениеКоличества);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьПроверкуВыгрузкиНоменклатуры() Экспорт 

	ПодключитьОбработчикОжидания("ПроверитьВыгрузкуНоменклатуры", 5);

КонецПроцедуры

Функция НовыйРежимПолученияШтрихкодов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПолучитьШтрихкоды",            Ложь);
	Результат.Вставить("ИспользоватьШтрихкодыБазы",    Истина);
	Результат.Вставить("ПолучитьТехническиеШтрихкоды", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ЗначениеИзСтрокиJSON(Значение, ПрочитатьВСоответствие = Ложь) Экспорт 
	
	#Если ВебКлиент Тогда
		Возврат РаботаСНоменклатуройСлужебныйВызовСервера.ЗначениеИзСтрокиJSON(Значение, ПрочитатьВСоответствие);
	#Иначе
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Значение);
			Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
			ЧтениеJSON.Закрыть();
			Возврат Результат;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКатегориями

Функция КэшКатегорийПодсистемы()
	
	ИмяПодсистемы = "ЭлектронноеВзаимодействие.РаботаСНоменклатурой";
	Если ПараметрыПриложения[ИмяПодсистемы] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПодсистемы, Новый Структура);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПодсистемы];
	
КонецФункции

Процедура ВосстановитьДеревоИзКэшаКатегорий(Знач КэшКатегорий, ДеревоКатегорий,
					Знач ИдентификаторРодителяРубрикатора, СписокРазвернутыхКатегорий) Экспорт
	
	СтрокиДерева = ДеревоКатегорий.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	СтрокаКэшаРодителяКатегории = Неопределено;
	Если НЕ КэшКатегорий.Свойство("_" + ИдентификаторРодителяРубрикатора, СтрокаКэшаРодителяКатегории) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторРодителяРубрикатора = "" Тогда
		СтрокаКорневогоРаздела = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорневогоРаздела, СтрокаКэшаРодителяКатегории);
		СтрокаКорневогоРаздела.ЛистоваяКатегория = Ложь;
		СтрокаКорневогоРаздела.ВОбработке        = Истина;
		СтрокаКорневогоРаздела.ИндексКартинки    = 12;
		СтрокиДерева  = СтрокаКорневогоРаздела.ПолучитьЭлементы();
		
		ЭлементСписка = СписокРазвернутыхКатегорий.НайтиПоЗначению(СтрокаКорневогоРаздела.Идентификатор);
		Если ЭлементСписка = Неопределено Тогда
			СписокРазвернутыхКатегорий.Добавить(СтрокаКорневогоРаздела.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	МассивРодителейВКэше = НайтиВсехРодителейКатегорийВКэше(КэшКатегорий);
	
	МассивРодителейИДочернихКатегорий = НайтиДочерниеКатегорииПоРодителю(МассивРодителейВКэше, КэшКатегорий);

	ВосстановитьСтрокиДереваИзКэшаРубрикатора(КэшКатегорий, СтрокиДерева, ИдентификаторРодителяРубрикатора, МассивРодителейИДочернихКатегорий);
	
	Если ИдентификаторРодителяРубрикатора = "" Тогда
		СтрокаКорневогоРаздела.ВОбработке         = Ложь;
		СтрокаКорневогоРаздела.ДочерниеПодгружены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСтрокиДереваИзКэшаРубрикатора(Знач КэшКатегорий, СтрокаДереваРодитель,
				Знач ИдентификаторРодителя,Знач МассивРодителейИДочернихКатегорий)

	Для Каждого ЭлементКоллекции Из МассивРодителейИДочернихКатегорий Цикл
		Если ЭлементКоллекции.ИдентификаторРодителя = ИдентификаторРодителя Тогда
			Для Каждого СтрокаДочернейКатегории Из ЭлементКоллекции.МассивДочерних Цикл
				
				Если СтрокаДочернейКатегории.Представление = "_" + РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой() Тогда
					Продолжить; // Категория отсутствующая в сервисе 1С:Номенклатура
				КонецЕсли; 
				
				СтрокаКэша  = КэшКатегорий[СтрокаДочернейКатегории.Представление];
				
				НоваяСтрока = СтрокаДереваРодитель.Вставить(СтрокаДочернейКатегории.Значение);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);
				НоваяСтрока.ВОбработке        = Истина;
				
				Если НоваяСтрока.ЛистоваяКатегория Тогда
					НоваяСтрока.ИндексКартинки = 3;
				Иначе
					Если НоваяСтрока.ДочерниеКэшированы Тогда
						ВосстановитьСтрокиДереваИзКэшаРубрикатора(КэшКатегорий, НоваяСтрока.ПолучитьЭлементы(), СтрокаКэша.Идентификатор, МассивРодителейИДочернихКатегорий);
						НоваяСтрока.ДочерниеПодгружены = Истина;
					Иначе
						НоваяВетка = НоваяСтрока.ПолучитьЭлементы().Добавить();
						НоваяВетка.ПустаяГруппа = Истина;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.ВОбработке = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НайтиВсехРодителейКатегорийВКэше(Знач КэшКатегорий)
	
	МассивРодителейВКэше = Новый Массив;
	Для Каждого СтрокаКэша Из КэшКатегорий Цикл
		СтрокаКэшаЗначение = СтрокаКэша.Значение;
		Если МассивРодителейВКэше.Найти(СтрокаКэшаЗначение.ИдентификаторРодителя) = Неопределено Тогда
			МассивРодителейВКэше.Добавить(СтрокаКэшаЗначение.ИдентификаторРодителя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРодителейВКэше;
	
КонецФункции

Функция НайтиДочерниеКатегорииПоРодителю(Знач МассивИдентификаторовРодителей, Знач КэшКатегорий)
	
	МассивРодителейИДочернихКатегорий = Новый Массив;
	
	Для Каждого ИдентификаторРодителя Из МассивИдентификаторовРодителей Цикл;
		СписокДочернихКатегорий = Новый СписокЗначений;
		Для Каждого СтрокаКэша Из КэшКатегорий Цикл
			СтрокаКэшаЗначение = СтрокаКэша.Значение;
			Если СтрокаКэшаЗначение.ИдентификаторРодителя = ИдентификаторРодителя
				И СтрокаКэшаЗначение.Идентификатор <> ИдентификаторРодителя Тогда
				СписокДочернихКатегорий.Добавить(СтрокаКэшаЗначение.ИндексСтрокиКатегории, СтрокаКэша.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если СписокДочернихКатегорий.Количество() > 0 Тогда
			СписокДочернихКатегорий.СортироватьПоЗначению();
			МассивРодителейИДочернихКатегорий.Добавить(Новый Структура("ИдентификаторРодителя, МассивДочерних",
				ИдентификаторРодителя, СписокДочернихКатегорий));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРодителейИДочернихКатегорий;
	
КонецФункции

Процедура ЗаполнитьИндексыРазвернутыхСтрок(Категории, РазвернутыеСтрокиИндекс, СписокРазвернутыхКатегорий, МассивИдентификаторовРодителей = Неопределено)

	Если МассивИдентификаторовРодителей <> Неопределено Тогда
		Для Каждого ИдентификаторРодителя Из МассивИдентификаторовРодителей Цикл
			НайденныйЭлемент = СписокРазвернутыхКатегорий.НайтиПоЗначению(ИдентификаторРодителя);
			Если НайденныйЭлемент = Неопределено Тогда
				СписокРазвернутыхКатегорий.Добавить(ИдентификаторРодителя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазвернутыеСтроки = Новый Соответствие;
	Для Каждого РазвернутаяСтрока Из СписокРазвернутыхКатегорий Цикл
		ИдентификаторКатегории = РазвернутаяСтрока.Значение;
		СтрокаРодитель = Неопределено;
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории, СтрокаРодитель, , Истина);
		Если СтрокаРодитель <> Неопределено Тогда
			РазвернутыеСтроки.Вставить(ИдентификаторКатегории, СтрокаРодитель.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	РазвернутыеСтрокиИндекс = Новый ФиксированноеСоответствие(РазвернутыеСтроки);

КонецПроцедуры

Функция ПолучитьОтсутствующиеКатегорииКэша(КэшКатегорий, ИспользуемыеКатегории,
		РежимПросмотраДереваКатегорий)
	Перем ДанныеКатегории;
	
	ОтсутствующиеВКэшеКатегории = Новый Массив;
	
	Для каждого ИспользуемаяКатегория Из ИспользуемыеКатегории Цикл
		
		Если ИспользуемаяКатегория = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой() Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ КэшКатегорий.Свойство("_" + ИспользуемаяКатегория, ДанныеКатегории) Тогда
			ОтсутствующиеВКэшеКатегории.Добавить(ИспользуемаяКатегория);
			Продолжить;
		КонецЕсли;
		
		Пока НЕ РежимПросмотраДереваКатегорий = "Список"
			И НЕ ПустаяСтрока(ДанныеКатегории.ИдентификаторРодителя) Цикл
			ИдентификаторРодителя = ДанныеКатегории.ИдентификаторРодителя;
			Если НЕ КэшКатегорий.Свойство("_" + ИдентификаторРодителя, ДанныеКатегории) Тогда
				ОтсутствующиеВКэшеКатегории.Добавить(ИдентификаторРодителя);
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтсутствующиеВКэшеКатегории);

КонецФункции

Процедура ДобавитьСтрокиДочернихКатегорий(СтрокиСуществующихКатегорий, СтрокиДерева)

	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокиСуществующихКатегорий.Вставить(СтрокаДерева.Идентификатор, СтрокаДерева);
		ДобавитьСтрокиДочернихКатегорий(СтрокиСуществующихКатегорий, СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла; 

КонецПроцедуры
 
Процедура СформироватьДеревоКатегорийИзКэша(ДеревоКатегорий, ИспользуемыеКатегории, РежимПросмотраДереваКатегорий, 
		ЭлементФормы, ОписаниеОповещенияОЗавершении)
		
	Если Не ЭлементФормы.ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекущейКатегории = ЭлементФормы.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	КэшКатегорий = ПолучитьКэшКатегорий();
	ДобавитьДанныеКлиентскогоКэша(КэшКатегорий);
	ДобавленныеСтроки = Новый Соответствие;
	ДеревоКатегорий.ПолучитьЭлементы().Очистить();

	Если РежимПросмотраДереваКатегорий = "ДеревоЦеликом" Тогда
		Для каждого КэшКатегории Из КэшКатегорий Цикл
			Если ПустаяСтрока(КэшКатегории.Значение.ИдентификаторРодителя) Тогда
				ДобавитьКатегориюВДерево(ДеревоКатегорий, КэшКатегории.Значение.Идентификатор, РежимПросмотраДереваКатегорий, КэшКатегорий, ДобавленныеСтроки, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ИспользуемаяКатегория Из ИспользуемыеКатегории Цикл
		ДобавитьКатегориюВДерево(ДеревоКатегорий, ИспользуемаяКатегория, РежимПросмотраДереваКатегорий, КэшКатегорий, ДобавленныеСтроки, Ложь);
	КонецЦикла;
	
	Если ДеревоКатегорий.ПолучитьЭлементы().Количество() <> 0 Тогда
		ЭлементФормы.Развернуть(ДеревоКатегорий.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), РежимПросмотраДереваКатегорий = "ДеревоИспользуемых");
	КонецЕсли;
	
	Если Не ИдентификаторТекущейКатегории = Неопределено Тогда
		УстановитьТекущуюСтрокуДерева(ДеревоКатегорий, ЭлементФормы,
			Новый Структура("Идентификатор", ИдентификаторТекущейКатегории));
	КонецЕсли; 
	
КонецПроцедуры

Функция СтрокаСоответствуетОтбору(Строка, СтруктураОтбора)

	Для каждого Отбор Из СтруктураОтбора Цикл
		Если НЕ Строка[Отбор.Ключ] = Отбор.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции
 
Процедура УстановитьТекущуюСтрокуКонтекстаДерева(СтрокиДерева, ЭлементФормы, СтруктураОтбора, ПоискЗавершен = Ложь)
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ПоискЗавершен Тогда
			Возврат;
		ИначеЕсли СтрокаСоответствуетОтбору(СтрокаДерева, СтруктураОтбора) Тогда
			ЭлементФормы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			ПоискЗавершен = Истина;
			Возврат;
		Иначе
			УстановитьТекущуюСтрокуКонтекстаДерева(СтрокаДерева.ПолучитьЭлементы(), ЭлементФормы, СтруктураОтбора, ПоискЗавершен);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьТекущуюСтрокуДерева(ДеревоФормы, ЭлементФормы, СтруктураОтбора)
	УстановитьТекущуюСтрокуКонтекстаДерева(ДеревоФормы.ПолучитьЭлементы(), ЭлементФормы, СтруктураОтбора);
КонецПроцедуры

Процедура ДобавитьДанныеКлиентскогоКэша(КэшКатегорий)

	ДанныеИзменены = Ложь;

	Если НЕ КэшКатегорий.Свойство("_") Тогда
	
		СтруктураКорневогоРаздела = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеСлужебнойКорневойКатегории();
		
		КэшКатегорий.Вставить("_", СтруктураКорневогоРаздела);
		
		ДанныеИзменены = Истина;
	
	КонецЕсли; 
	
	ИдентификаторКатегорииРаботаСНоменклатурой =
		РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой();
	
	Если НЕ КэшКатегорий.Свойство("_" + ИдентификаторКатегорииРаботаСНоменклатурой) Тогда
	
		СтруктураКорневогоРаздела = Новый Структура;
		СтруктураКорневогоРаздела.Вставить("Идентификатор",                 ИдентификаторКатегорииРаботаСНоменклатурой);
		СтруктураКорневогоРаздела.Вставить("ИдентификаторРодителя",         "");
		СтруктураКорневогоРаздела.Вставить("Наименование",                  НСтр("ru='Автоматически из 1С:Номенклатура'"));
		СтруктураКорневогоРаздела.Вставить("КоличествоПодчиненных",         0);
		СтруктураКорневогоРаздела.Вставить("ДатаИзменения",                 '00010101');
		СтруктураКорневогоРаздела.Вставить("ДочерниеКэшированы",            Ложь);
		СтруктураКорневогоРаздела.Вставить("Ранг",                          0);
		СтруктураКорневогоРаздела.Вставить("ЛистоваяКатегория",             Истина);
		СтруктураКорневогоРаздела.Вставить("ИндексСтрокиКатегории",         0);
		
		КэшКатегорий.Вставить("_" + ИдентификаторКатегорииРаботаСНоменклатурой, СтруктураКорневогоРаздела);
		
		ДанныеИзменены = Истина;
	
	КонецЕсли; 
	
	Если ДанныеИзменены Тогда
		СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли; 

КонецПроцедуры

Процедура ОбработатьПолучениеДанныхКатегории(ДлительнаяОперация, ДополнительныеПараметры) Экспорт 
	
	Если ДлительнаяОперация = Неопределено ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	ВыполнитьСлияниеКэша(ДлительнаяОперация.АдресРезультата);
	
	СформироватьДеревоКатегорийИзКэша(ДополнительныеПараметры.ДеревоКатегорий,
		ДополнительныеПараметры.ИспользуемыеКатегории, ДополнительныеПараметры.РежимПросмотраДереваКатегорий,
		ДополнительныеПараметры.ЭлементФормы, ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	
КонецПроцедуры

Функция ВыполнитьСлияниеКэша(АдресДанныхСервиса) 
	
	КэшКатегорий = ПолучитьКэшКатегорий();
	СерверныйКэш = РаботаСНоменклатуройСлужебныйВызовСервера.ЗаполнитьКэшДаннымиСервиса(АдресДанныхСервиса);
	
	Если СерверныйКэш = Неопределено ИЛИ СерверныйКэш.Количество() = 0 Тогда
		СохранитьКэшКатегорий(КэшКатегорий);
		Возврат КэшКатегорий;
	КонецЕсли; 

	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшКатегорий, СерверныйКэш, Истина);
	СохранитьКэшКатегорий(КэшКатегорий);
	
	Возврат КэшКатегорий;

КонецФункции

Процедура РазвернутьКатегориюЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт 

	КэшКатегорий = ВыполнитьСлияниеКэша(ДлительнаяОперация.АдресРезультата);

	ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, ДополнительныеПараметры.ДеревоКатегорий,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.СтрокаДерева.Идентификатор));
		
	ДополнительныеПараметры.СтрокаДерева.ДочерниеПодгружены = Истина;
	
	СтрокиДерева = ДополнительныеПараметры.СтрокаДерева.ПолучитьЭлементы();
	ДополнительныеПараметры.ЭлементФормыДеревоКатегорий.Развернуть(ДополнительныеПараметры.СтрокаДерева.ПолучитьИдентификатор());
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтборов

// Открывает форму для ввода данных.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   СтруктураОписанияТипов   - Структура:
//      *ЧастиДаты                - ЧастиДаты - части даты.
//      *ДлинаЧисла               - Число     - длина вводимого числа.
//      *ТочностьЧисла            - Число     - разрядность вводимого числа.
//      *ДлинаСтроки              - Число     - длина вводимой строки.
//      *РазрешенаМногострочность - Булево    - признак использования многострочности.
//   ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после
//                                                   выполнения обработки ввода данных.
//
Процедура ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки = Неопределено, ЗначениеОтбора = Неопределено)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ЗначениеОтбора = Неопределено Тогда
		ЗначениеОтбора    = ТекущиеДанные.ЗначениеОтбора;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные");
	ДополнительныеПараметры.Вставить("ОповещениеПослеОбработки" , ОповещениеПослеОбработки);
	ДополнительныеПараметры.Вставить("ТекущиеДанные"            , ТекущиеДанные);
	ДополнительныеПараметры.Вставить("СтруктураОписанияТипов"   , СтруктураОписанияТипов);
	ДополнительныеПараметры.Вставить("ДеревоОтборов"            , ДеревоОтборов);
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ВывестиПолеВводаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// параметры ввода данных по умолчанию.
	ТипДаты                  = ЧастиДаты.Дата;
	ДлинаЧисла               = 15;
	ТочностьЧисла            = 3;
	ДлинаСтроки              = 0;
	РазрешенаМногострочность = Истина;
	
	Если ТипЗначенияОтбора = Тип("Дата") Тогда
		Если СтруктураОписанияТипов <> Неопределено
			И СтруктураОписанияТипов.Свойство("ЧастиДаты") Тогда
			ТипДаты = СтруктураОписанияТипов.ЧастиДаты;
		КонецЕсли;
		ПоказатьВводДаты(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ТипДаты);
	ИначеЕсли ТипЗначенияОтбора = Тип("Число") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаЧисла") Тогда
				ДлинаЧисла = СтруктураОписанияТипов.ДлинаЧисла;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("ТочностьЧисла") Тогда
				ТочностьЧисла = СтруктураОписанияТипов.ТочностьЧисла;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводЧисла(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ДлинаЧисла, ТочностьЧисла);
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаСтроки") Тогда
				ДлинаСтроки = СтруктураОписанияТипов.ДлинаСтроки;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("Многострочность") Тогда
				РазрешенаМногострочность = СтруктураОписанияТипов.Многострочность;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводСтроки(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ДлинаСтроки, РазрешенаМногострочность);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат вводимых данных.
//
// Параметры:
//  ЗначениеВыбора          - Число - вводимое значение на форме ввода данных.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения обработки ввода данных.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура ВывестиПолеВводаДанныхЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
		
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные            = ДополнительныеПараметры.ТекущиеДанные;
	УстанавливатьОтбор       = Ложь;
	
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ЗначениеВыбора <> ТекущиеДанные.ЗначениеОтбора Тогда
			
			Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
				ТипЗначения = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
				Если ТипЗначения = Тип("Число") Тогда
					Если ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры) Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеВыбора;
			Если НЕ ЗначениеЗаполнено(ЗначениеВыбора) Тогда
				ПредставлениеОтбора = НСтр("ru = '<не задано>'");
			ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Дата") Тогда
				ПредставлениеОтбора = Формат(ЗначениеВыбора, "ДЛФ=ДД");
			Иначе
				ПредставлениеОтбора = ЗначениеВыбора;
			КонецЕсли;
			ТекущиеДанные.ПредставлениеОтбора = ПредставлениеОтбора;
			УстанавливатьОтбор                = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора);
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтбор);
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры)
	
	НеверноеЗначение     = Ложь;
	МаксимальноеЗначение = ТекущиеДанные.МаксимальноеЗначение;
	МинимальноеЗначение  = ТекущиеДанные.МинимальноеЗначение;
	
	Если ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
		МаксимальноеЗначение = Число(МаксимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора > МаксимальноеЗначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		МинимальноеЗначение  = Число(МинимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < МинимальноеЗначение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МаксимальноеЗначение)
		И НЕ ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < 0;
	КонецЕсли;
	
	Если НеверноеЗначение Тогда
		ОчиститьСообщения();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано неверное значение. %1 %2'"),
			?(ЗначениеЗаполнено(МинимальноеЗначение), НСтр("ru = 'Минимально значение:'") + " " + ТекущиеДанные.МинимальноеЗначение + ". ", ""),
			?(ЗначениеЗаполнено(МаксимальноеЗначение), НСтр("ru = 'Максимальное значение:'") + " " + ТекущиеДанные.МаксимальноеЗначение, ""));
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВывестиПолеВводаДанных(ДополнительныеПараметры.ДеревоОтборов, ДополнительныеПараметры.СтруктураОписанияТипов,
			ДополнительныеПараметры.ОповещениеПослеОбработки, ЗначениеВыбора);
			
		Возврат Истина;
		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// Обрабатывает результат вводимых данных на форме установки интервала.
//
// Параметры:
//  ЗначениеВыбора         - Структура:
//    * ИнтервалОт     - Число, Дата             - выбранное значение на форме.
//    * ИнтервалДо     - Число, Дата             - выбранное значение на форме.
//    * ЗначениеОтбора - Строка, СписокЗначений  - выбранное значение на форме.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения заполнения фиксированного отбора.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт
				Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
				ТекущиеДанные.ПредставлениеОтбора = ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт, ЗначениеВыбора.ИнтервалДо);
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт) Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			Если ТекущиеДанные.ЗначениеОтбора <> ЗначениеОтбора Тогда
				
				ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
				ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
				
				УстанавливатьОтборСписка = Истина;
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;

КонецПроцедуры

// Возвращает параметры текущей строки с типом "Строка" в поле "ЗначениеОтбора", передаваемые в форму установки интервала.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСтроки(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "Число" или "Дата" в поле "ЗначениеОтбора",
// передаваемые в форму установки интервала.
// В дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева при работе с типом Число или Дата необходимы колонки:
//    ИнтервалОт            - Дата, Число.
//    ИнтервалДо            - Дата, Число.
//    МаксимальноеЗначение  - Строка.
//    МинимальноеЗначение   - Строка.
//
// Параметры:
//   ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОт",              ТекущиеДанные.ИнтервалОт);
	СтруктураПараметров.Вставить("ЗначениеДо",              ТекущиеДанные.ИнтервалДо);
	СтруктураПараметров.Вставить("МаксимальноеЗначение",    ТекущиеДанные.МаксимальноеЗначение);
	СтруктураПараметров.Вставить("МинимальноеЗначение",     ТекущиеДанные.МинимальноеЗначение);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "СписокЗначений" в поле "ЗначениеОтбора", передаваемые в форму установки интервала
// В дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева при работе с типом СписокЗначений необходима колонка:
//    СписокВыбора - СписокЗначений.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	СтруктураПараметров.Вставить("СписокВыбора",            ТекущиеДанные.СписокВыбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает число - код варианта действий, которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево  - дерево отборов на форме (см. обязательные колонки в "ДеревоОтборовВыбор").
//
// Возвращаемое значение:
// Число.
//  0 - нажали на поле списка, если список не был развернут - развернется,
//  1 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата в строке с "фиксированным" значением,
//  2 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата с "не фиксированным" значением,
//  3 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "фиксированным" значением,
//  4 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "не фиксированным" значением,
//  5 - было выбрано значение поля "ЗначениеОтбора" с типом "СписокЗначений" с "фиксированным" значением.
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	ВариантДействий = 0;
	
	Если ТипЗначенияОтбора = Тип("Число")
		ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 1;
		Иначе
			ВариантДействий = 2;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка")
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 3;
		Иначе
			ВариантДействий = 4;
		КонецЕсли;
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 5;
		КонецЕсли;

	ИначеЕсли НЕ ТекущиеДанные.ОтборДоступен
		И ТекущиеДанные.ЗначениеОтбора = "Список" Тогда //
		
		ТекущаяСтрока = ДеревоОтборов.ТекущаяСтрока;
		Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
			ДеревоОтборов.Свернуть(ТекущаяСтрока);
		Иначе
			ДеревоОтборов.Развернуть(ТекущаяСтрока);
		КонецЕсли;

	КонецЕсли;
		
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает число - код варианта действия, которое было выполнено с деревом отборов.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево  - дерево отборов на форме (см. обязательные колонки в "ДеревоОтборовВыбор").
//
// Возвращаемое значение: 
// Число.
// 0 - никакого изменения значений в дереве отборов не произошло;
// 1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
// 2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//    кабеля и у него установили/сняли флажок;
// 3 - был УСТАНОВЛЕН флажок на строке с типом "Строка" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 4 -  был УСТАНОВЛЕН флажок на строке с типом "Число" или "Дата" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 5 -  был УСТАНОВЛЕН флажок на строке с типом "СписокЗначений" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 6 - был установлен/снят флажок на заполненной строке без признака "фиксированное значение".
// 7 - было выбрано значение с типом число, дата или строка без признака "фиксированное значение",
//    в этом случае откроется окно ввода числа или даты.
//
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если ТипЗначенияОтбора = Тип("Строка") И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Строка"
				
			ИначеЕсли (ТипЗначенияОтбора = Тип("Дата") ИЛИ ТипЗначенияОтбора = Тип("Число"))
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт)
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо) Тогда
				
				ВариантДействий = 4; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Дата" или "Число"
				
			ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)Тогда
					
				ВариантДействий = 5; // УСТАНОВИЛИ флажок на незаполненном значение с типом "СписокЗначений"
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если (ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Число")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Дата")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Строка"))
			И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
			
			ВариантДействий = 6; // установили/сняли флажок на заполненном поле без признака "фиксированное значения"
			
			Если ТекущиеДанные.Отбор Тогда
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
					ВариантДействий = 7; //УСТАНОВИЛИ флажок на незаполненном значением поле без признака "фиксированное значения"
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
			
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда // выбрана строка-родитель
				
				// Установить/снять значение флажка отбора для всех подчиненных строк.
				
				ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
				КонецЦикла;
				
			Иначе
				
				// Выбрана подчиненная строка.
				
				Родитель.Отбор = Ложь;
				
				ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
				
				// Пройти по всем подчиненным строкам родителя выбранной строки, и если
				// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
				// и родительской строки.
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					
					Если ЭлементДерева.Отбор Тогда
						Родитель.Отбор = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

Процедура ЗаполнитьДеревоОтборовПоДопРеквизитам(Реквизит, СтрокиДереваОтборов, СтрокаДереваКатегории = Неопределено,
		ИспользоватьИнтервалВводаДанных = Истина)
			
	ТипРеквизита = Реквизит.Тип;
	
	НаименованиеЕдиницыИзмерения = "";
	Если Реквизит.ЕдиницаИзмерения <> Неопределено Тогда 
		НаименованиеЕдиницыИзмерения = Реквизит.ЕдиницаИзмерения.Наименование;
	КонецЕсли;
	Представление = Реквизит.Наименование + ?(ПустаяСтрока(НаименованиеЕдиницыИзмерения),"", ", " + НаименованиеЕдиницыИзмерения);
	
	СтрокаРеквизита = СтрокиДереваОтборов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
	СтрокаРеквизита.ИмяРеквизита    = Реквизит.Наименование;
	СтрокаРеквизита.Представление   = Представление;
	СтрокаРеквизита.ЭтоДопРеквизит  = Реквизит.ЭтоРеквизитХарактеристики;
	СтрокаРеквизита.ОтборДоступен   = Истина;
	
	Если ТипРеквизита = "Дата" Тогда
		
		СтрокаРеквизита.ИнтервалОт             = Дата('00010101');
		СтрокаРеквизита.ИнтервалДо             = Дата('00010101');
		СтрокаРеквизита.ФиксированноеЗначение  = ИспользоватьИнтервалВводаДанных;
		СтрокаРеквизита.ЗначениеОтбора         = Дата('00010101');
		СтрокаРеквизита.ПредставлениеОтбора    = НСтр("ru = '<не задано>'");
		
	ИначеЕсли ТипРеквизита = "Число" Тогда
		
		СтрокаРеквизита.ИнтервалОт             = 0;
		СтрокаРеквизита.ИнтервалДо             = 0;
		СтрокаРеквизита.ФиксированноеЗначение  = ИспользоватьИнтервалВводаДанных;
		СтрокаРеквизита.ЗначениеОтбора         = 0;
		СтрокаРеквизита.ПредставлениеОтбора    = НСтр("ru = '<не задано>'");
		
	ИначеЕсли ТипРеквизита = "Булево" Тогда
		
		СтрокаРеквизита.ЗначениеОтбора         = Истина;
		
	ИначеЕсли ТипРеквизита = "Строка" Тогда
		
		СтрокаРеквизита.ЗначениеОтбора         = "";
		СтрокаРеквизита.ФиксированноеЗначение  = Истина;
		СтрокаРеквизита.ПредставлениеОтбора    = НСтр("ru = '<не задано>'");
		
	ИначеЕсли ТипРеквизита = "Список" Тогда
		
		СтрокаРеквизита.ОтборДоступен          = Ложь;
		СтрокаРеквизита.ЗначениеОтбора         = ТипРеквизита;
		
		Если Реквизит.Свойство("СписокВыбораЗначенийДопРеквизита") Тогда
			СписокЗначенийДопРеквизиты = Реквизит.СписокВыбораЗначенийДопРеквизита;
			Для Каждого ЗначениеСписка Из СписокЗначенийДопРеквизиты Цикл
				НоваяСтрока = СтрокаРеквизита.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Идентификатор = ЗначениеСписка.Идентификатор;
				НоваяСтрока.ИмяРеквизита  = ЗначениеСписка.Наименование;
				НоваяСтрока.ОтборДоступен = Ложь;
				НоваяСтрока.Представление = ЗначениеСписка.Наименование;
			КонецЦикла;
			СтрокаРеквизита.ДочерниеПодгружены = Истина;
			Если СтрокаДереваКатегории <> Неопределено Тогда
				СтрокаДереваКатегории.СписокКэшированныхСвойств.Добавить(СтрокаРеквизита.Идентификатор);
			КонецЕсли;
		Иначе
			СтрокаРеквизита.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти