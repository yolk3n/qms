#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу сведений о форматах электронных документов.
// Сведения задаются в макете Обработки.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок указаны в макете Обработки.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//
Функция СведенияОФорматахЭлектронныхДокументовИзМакета() Экспорт

	Результат = Новый ТаблицаЗначений;
	УстановитьПривилегированныйРежим(Истина);
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ВерсииФорматовЭлектронныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбрабатываемыеСсылочныеТипы = Новый Массив;
	ОбрабатываемыеСсылочныеТипы.Добавить("Перечисления");
	ОбрабатываемыеСсылочныеТипы.Добавить("ПланыВидовХарактеристик");
	ОбрабатываемыеСсылочныеТипы.Добавить("Справочники");
	
	// Получим колонки таблицы форматов
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	Для Сч = 1 По ОбластьШапки.ШиринаТаблицы Цикл
		ИмяКолонки = ОбластьШапки.Область(1, Сч).Текст;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			ПредставлениеТипаКолонки = ОбластьШапки.Область(2, Сч).Текст;
			ТипКолонки = Новый ОписаниеТипов(ПредставлениеТипаКолонки);
			Если ИмяКолонки = "ТипЭлектронногоДокумента" Тогда
				ТипКолонки = Новый ОписаниеТипов(ТипКолонки,
					Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.Типы());
			КонецЕсли;
			
			Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним строки
	ОбластьСтрок = Макет.ПолучитьОбласть("Строки");
	Для НомерСтроки = 1 По ОбластьСтрок.ВысотаТаблицы Цикл
		Если ЗначениеЗаполнено(ОбластьСтрок.Область(НомерСтроки, 1).Текст) Тогда
			НоваяСтрока = Результат.Добавить();
			
			Для НомерКолонки = 1 По Результат.Колонки.Количество() Цикл
				Колонка = Результат.Колонки[НомерКолонки - 1];
				
				ТекстЯчейки = СокрЛП(ОбластьСтрок.Область(НомерСтроки, НомерКолонки).Текст);
				
				Если Колонка.Имя = "ТипЭлектронногоДокумента" Тогда
					ТипЗначения = Тип("ПеречислениеСсылка.ТипыДокументовЭДО");
				Иначе
					ТипЗначения = Колонка.ТипЗначения.Типы()[0];
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗначения);
					ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
					ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
					
					Если ОбрабатываемыеСсылочныеТипы.Найти(ИмяБазовогоТипа) <> Неопределено Тогда
						МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
						ЗначениеЯчейки = МенеджерОбъекта[ТекстЯчейки];
					Иначе
						ШаблонОшибки = НСтр("ru='В макете %1 использован неподдерживаемый ссылочный тип (%2)'");
						СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
							Метаданные.Обработки.ОбменСКонтрагентами.Макеты.ВерсииФорматовЭлектронныхДокументов.Синоним, ПолноеИмяОбъекта);
						ВызватьИсключение СтрокаОшибки;
					КонецЕсли;
				Иначе	
					Если ТипЗначения = Тип("Дата") И ЗначениеЗаполнено(ТекстЯчейки) Тогда
						ЗначениеЯчейки = ФорматыЭДО.ДатаИзСтроки(ТекстЯчейки);
					ИначеЕсли ТипЗначения = Тип("Массив") И ЗначениеЗаполнено(ТекстЯчейки) Тогда
						ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЯчейки, ",", Истина, Истина);
					Иначе
						ЗначениеЯчейки = Колонка.ТипЗначения.ПривестиЗначение(ТекстЯчейки);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока[Колонка.Имя] = ЗначениеЯчейки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПрикладныхФорматов = ФорматыЭДО.ПрикладныеФорматы();
	Если ТаблицаПрикладныхФорматов.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрикладныхФорматов, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция преобразует из представления ставки НДС в значение перечисления.
//
// Параметры:
//  ПредставлениеСтавкиНДС - Число, Строка - представление ставки НДС;
//
// Возвращаемое значение:
//   ПеречислениеСсылка, СправочникСсылка, Неопределено - значение ставки НДС прикладного решения.
//
Функция СтавкаНДСИзПредставления(ПредставлениеСтавкиНДС) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(ПредставлениеСтавкиНДС) = Тип("Строка") Тогда
		СтрСтавкаНДС = СокрЛП(ПредставлениеСтавкиНДС);
	ИначеЕсли ТипЗнч(ПредставлениеСтавкиНДС) = Тип("Число") Тогда
		СтрСтавкаНДС = Строка(ПредставлениеСтавкиНДС);
	Иначе // неправильный тип
		СтрСтавкаНДС = Неопределено;
	КонецЕсли;
	
	Если СтрСтавкаНДС = Неопределено ИЛИ СтрНайти(НСтр("ru ='БЕЗ НДС'"), ВРег(СтрСтавкаНДС)) > 0 Тогда
		ЗначениеНДС = НСтр("ru ='без НДС'");
	Иначе
		СтрСтавкаНДС = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрСтавкаНДС, ",", "."), "\", "/"), " ", ""), "%", "");
		// # - разделитель представлений ставок.
		Если СтрНайти("0", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "0";
		ИначеЕсли СтрНайти("10#0.1#0.10", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "10";
		ИначеЕсли СтрНайти("18#0.18", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "18";
		ИначеЕсли СтрНайти("20#0.2#0.20", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "20";
		ИначеЕсли СтрНайти("10/110#0.0909#9.0909", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "10/110";
		ИначеЕсли СтрНайти("18/118#0.1525#15.2542", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "18/118";
		ИначеЕсли СтрНайти("20/120#0.1667#16.6667", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "20/120";
		Иначе
			ЗначениеНДС = ПредставлениеСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	
	СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(ЗначениеНДС);
	
	Возврат СтавкаНДС;
	
КонецФункции

#КонецОбласти