//|                                                                                           |
//| ░██████╗░█████╗░██╗░░██╗░█████╗░██╗░░░░░░█████╗░██╗░░░██╗       ██╗░░░██╗░█████╗░███╗░░██╗|
//| ██╔════╝██╔══██╗██║░██╔╝██╔══██╗██║░░░░░██╔══██╗██║░░░██║       ╚██╗░██╔╝██╔══██╗████╗░██║|
//| ╚█████╗░██║░░██║█████═╝░██║░░██║██║░░░░░██║░░██║╚██╗░██╔╝       ░╚████╔╝░███████║██╔██╗██║|
//| ░╚═══██╗██║░░██║██╔═██╗░██║░░██║██║░░░░░██║░░██║░╚████╔╝░       ░░╚██╔╝░░██╔══██║██║╚████║|
//| ██████╔╝╚█████╔╝██║░╚██╗╚█████╔╝███████╗╚█████╔╝░░╚██╔╝░░       ░░░██║░░░██║░░██║██║░╚███║|
//| ╚═════╝░░╚════╝░╚═╝░░╚═╝░╚════╝░╚══════╝░╚════╝░░░░╚═╝░░░       ░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚══╝|
//|                                                                                           |
//|_____________________________________lostcay@yandex.ru_____________________________________|
//|                                                                                           |
//|                     ░█████╗░░░██╗██╗░░░░██╗██████╗░░█████╗░██████╗░██████╗░               |
//|                     ██╔══██╗░██╔╝██║░░░██╔╝╚════██╗██╔══██╗╚════██╗╚════██╗               |
//|                     ██║░░██║██╔╝░██║░░██╔╝░░░███╔═╝██║░░██║░░███╔═╝░█████╔╝               |
//|                     ██║░░██║███████║░██╔╝░░██╔══╝░░██║░░██║██╔══╝░░░╚═══██╗               |
//|                     ╚█████╔╝╚════██║██╔╝░░░███████╗╚█████╔╝███████╗██████╔╝               |
//|                     ░╚════╝░░░░░░╚═╝╚═╝░░░░╚══════╝░╚════╝░╚══════╝╚═════╝░               |
//|___________________________________________________________________________________________|
#Область Интерфейс

Функция ПолучитьДанныеАвторизации(ТокенАвторизации="") Экспорт
	
	Результат=Новый Структура("Пользователь,ЗаголовокОтвета",Справочники.Пользователи.ПустаяСсылка());
	
	Токен = СтрЗаменить(ТокенАвторизации,"Basic ","");
	Токен=Base64Значение(Токен);
	Если Токен=Неопределено Тогда
		Результат.ЗаголовокОтвета=ПолучитьЗаголовок(401,"unauthorized");
		Возврат Результат;
	КонецЕсли;
	Токен = ПолучитьСтрокуИзДвоичныхДанных(Токен);
	ИмяПользователя = Лев(Токен,СтрНайти(Токен,":",,,1)-1);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если ПользовательИБ=Неопределено ИЛИ Токен="" Тогда
		Результат.ЗаголовокОтвета=ПолучитьЗаголовок(401,"unauthorized: login error");
		Возврат Результат;
	КонецЕсли;
	
	ПарольВхоядщий = Прав(Токен,СтрДлина(Токен)-СтрНайти(Токен,":",,,1));
	
	ХешПароляВхоядщий = Новый ХешированиеДанных(ХешФункция.SHA1);
    ХешПароляВхоядщий.Добавить(ПарольВхоядщий);
	ХешПароляВхоядщий=Base64Строка(ХешПароляВхоядщий.ХешСумма);
	
	ХешПароляИБ = СтрРазделить(ПользовательИБ.СохраняемоеЗначениеПароля,",")[0];
	
	Если НЕ ХешПароляИБ=ХешПароляВхоядщий Тогда
		Результат.ЗаголовокОтвета=ПолучитьЗаголовок(401,"unauthorized: password error");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Пользователь=Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);
	Результат.ЗаголовокОтвета=ПолучитьЗаголовок(200);
	Возврат Результат;
КонецФункции


Функция ПолучитьОтветПинг(Запрос) Экспорт
	
	Токен=Запрос.ПараметрыЗапроса.Получить("token");
	
	ДанныеАвторизации=ПолучитьДанныеАвторизации(Токен);
	
	Ответ=ПолучитьОтвет(ДанныеАвторизации.ЗаголовокОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОтветНеформализованныеТребования(Запрос) Экспорт
	
	Метод=НРег(Запрос.ПараметрыURL.Получить("метод"));
	HTTPМетод=ВРег(Запрос.HTTPМетод);
	ДанныеАвторизации=ПолучитьДанныеАвторизации(Запрос.ПараметрыЗапроса.Получить("token"));
	
	Если ДанныеАвторизации.Пользователь.Пустая() Тогда
		Возврат ПолучитьОтвет(ДанныеАвторизации.ЗаголовокОтвета);
	КонецЕсли;
	
	//Сок_Служебное.Десериализация_JSON(Запрос.ПолучитьТелоКакСтроку())
	
	Если HTTPМетод="GET" И Метод="list" Тогда
		ТелоОтвета=Неопределено;
		//ТелоОтвета=ПолучитьТелоОтвета_НеформализованныеТребования_Список(ДанныеАвторизации.Пользователь);
	ИначеЕсли HTTPМетод="GET" И Метод="item" Тогда
		ТелоОтвета=Неопределено;
		//ТелоОтвета=ПолучитьТелоОтвета_НеформализованныеТребования_Элемент(ДанныеАвторизации.Пользователь,ЧатСсылка);
	ИначеЕсли HTTPМетод="POST" И Метод="create" Тогда
		ТелоЗапроса=Запрос.ПолучитьТелоКакСтроку();
		
		Попытка
			ТелоЗапроса=Сок_Служебное.Десериализация_JSON(ТелоЗапроса);
		Исключение
			Возврат ПолучитьОтвет(ПолучитьЗаголовок(403,"invalid JSON row"))
		КонецПопытки;
		
		ТелоОтвета=ПолучитьТелоОтвета_НеформализованныеТребования_Создать(ДанныеАвторизации.Пользователь,ТелоЗапроса);
		
	Иначе
		Возврат ПолучитьОтвет(ПолучитьЗаголовок(403,"invalid method ""/"+Метод+""""))
	КонецЕсли;
	
	Возврат ПолучитьОтвет(ДанныеАвторизации.ЗаголовокОтвета,ТелоОтвета);
	
КонецФункции


Функция ПолучитьТелоОтвета_НеформализованныеТребования_Создать(Пользователь,Данные)
	
	Результат=Новый Структура("id");
	
	Док=Документы.сок_НеФормализованноеТребованиеОтделения.СоздатьДокумент();
	Док.Дата=ТекущаяДата();
	Док.Тема="Заказ от "+Пользователь+" "+ТекущаяДата();
	Док.Автор=Пользователь;
	Док.Ответственный=Пользователь;
	Док.Отделение=Пользователь.Отделение;
	Док.Организация=Пользователь.Отделение.Владелец;
	Док.СкладОтправитель=Сок_Сервер.ПолучитьСкладАптека();
	Док.СкладПолучатель=Справочники.Склады.НайтиПоНаименованию("",Ложь);
	Док.Статус=Перечисления.сок_СостоянияНеформализованныхТребований.НеСогласован;
	Док.ИсточникФинансирования=Справочники.ИсточникиФинансирования.НайтиПоНаименованию("Платные",Ложь);
	Док.Комментарий=Данные.data.DetailedDescription;
	
	Для Каждого Стр Из Данные.data.table Цикл
		Если ПустаяСтрока(Стр.description) Тогда
			Продолжить;
		КонецЕсли;
		НовСтр=Док.Товары.Добавить();
		НовСтр.Описание=Стр.description;
		НовСтр.ПолноеОписание=Стр.fulldescription;
		Количество=СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Стр.cnt);
		НовСтр.Количество=?(Количество=Неопределено,0,Количество);
	КонецЦикла;
	
	Если НЕ Док.Товары.Количество()=0 Тогда
		Попытка
			Док.Записать();
			Результат.id=Строка(Док.Ссылка.УникальныйИдентификатор());
		Исключение
			Результат.id=Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого Стр Из Данные.file Цикл
		Если НЕ Стр.info.error=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДД = Base64Значение(Стр.data);
		ВременноеХранилище = ПоместитьВоВременноеХранилище(ДД);
		ИмяФайла = Стр.info.name;
		Инд=СтрНайти(ИмяФайла,".",НаправлениеПоиска.СКонца);
		
		ПараметрыФайла=РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.Автор = Пользователь;
		ПараметрыФайла.ВладелецФайлов = Док.Ссылка;
		ПараметрыФайла.ИмяБезРасширения=Лев(ИмяФайла,Инд-1);
		ПараметрыФайла.РасширениеБезТочки=Прав(ИмяФайла,СтрДлина(ИмяФайла)-Инд);
		
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла,ВременноеХранилище);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурИФункции

Функция ПолучитьЗаголовок(Статус=200,Ошибка=Неопределено)
	
	Результат=Новый Структура("status",Статус);
	Если НЕ Ошибка=Неопределено Тогда
		Результат.Вставить("error",Ошибка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОтвет(Заголовок,Тело=Неопределено)
	
	Структ=Новый Структура;
	Структ.Вставить("header",Заголовок);
	Если НЕ Тело=Неопределено Тогда
		Структ.Вставить("data",Тело);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	ТелоОтвета=Сок_Служебное.Сериализация_JSON(Структ);
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти


#Область ОбменБитФинанс


Функция ОправитьСообщениеВБитФинанс(ТелоЗапроса) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	Соединение = Новый HTTPСоединение("192.168.156.127",443,"ServiceWebUser","123456",,,ssl);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	
	//********** Для рабочей
	//СтрокаСоединенияИнформационнойБазы()
	ТекстЗапроса = "/bf/hs/SokExchange/exchange";
	//*********** Дляб тестовой
	//ТекстЗапроса = "/bit_test/hs/SokExchange/exchange";
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	//Все что выше остается всегда, не трагаем
	
	Запрос.УстановитьТелоИзСтроки(ЗначениеВстрокуВнутр(ТелоЗапроса));//Сюда тело запроса, то, что будет приходить принимающему серверу
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);//А это то, что нам ответил сервер
	Если Ответ.КодСостояния=200 Тогда
		попытка    
			Структ =  ЗначениеИзСтрокиВнутр(ТелоОтвета);
			Структ.Вставить("ОшибкаСоединения",Ложь);
			
		Исключение   
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка "+ТелоОтвета);
			Структ =  Новый Структура("Ок,Ид,ТелоОтвета,ОшибкаСоединения",Ложь,"",ТелоОтвета,Истина);
		Конецпопытки;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка "+ТелоОтвета);
		Структ =  Новый Структура("Ок,Ид,ТелоОтвета,ОшибкаСоединения",Ложь,"",ТелоОтвета,Истина);
	КонецЕсли;	
	
	Возврат Структ;
КонецФункции

#Конецобласти

#Область ПолучениеСлужебныхДанныхИзБитФинанс

Процедура ОтправитьЗапросНаПодключениеОрганизации(Элемент) Экспорт
	Если Ложь Тогда Элемент = Справочники.Организации.СоздатьЭлемент(); КонецЕсли;
	
	Структ=Новый Структура("Команда,ИНН,КПП","ДанныеОрганизации",Элемент.ИНН,Элемент.КПП);
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.Ок Тогда
		Элемент.ПодключенБитФинанс=Истина;
		Элемент.ИдБитФинанс=Рез.Ид;
		Сообщить("Соединили "+Элемент.Наименование+" и организацию в Бит-Финанс "+Рез.Наименование);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти организацию в Бит-Финанс ИНН"+Элемент.ИНН+" КПП "+Элемент.КПП);
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
	КонецЕсли;
КонецПроцедуры	

Процедура ОтправитьЗапросНаПодключениеКонтрагента(Элемент) Экспорт
	Если Ложь Тогда Элемент = Справочники.Контрагенты.СоздатьЭлемент(); КонецЕсли;
	
	Если Элемент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
		Сообщить("Контрагент "+Элемент.Наименование+" является иностанной компанией. Решистрация заявок на расходование денежных средств на такие организации не предусмотрена.");
		Возврат;
	КонецЕсли;
	
	Если Элемент.ИНН="" Тогда
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
		Сообщить("Контрагент "+Элемент.Наименование+" не указан ИНН");
		Возврат;
	КонецЕсли;
	
	Если Элемент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо И СтрДлина(Элемент.ИНН)<>10 Тогда
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
		Сообщить("Контрагент "+Элемент.Наименование+" ИНН должен иметь длину 10 знаков");
		Возврат;
	КонецЕсли;

	Если Элемент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СтрДлина(Элемент.ИНН)<>12 Тогда
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
		Сообщить("Контрагент "+Элемент.Наименование+" ИНН должен иметь длину 12 знаков");
		Возврат;
	КонецЕсли;
	
	Если Элемент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо И Элемент.КПП="" Тогда
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
		Сообщить("Контрагент "+Элемент.Наименование+" не указан КПП");
		Возврат;
	КонецЕсли;	
	
	Структ=Новый Структура("Команда,ИНН,КПП","ПолучитьДанныеКонтрагента",Элемент.ИНН,Элемент.КПП);
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.ОшибкаСоединения Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка соединения с Бит-Финанс.");
	ИначеЕсли Рез.Ок Тогда
		Элемент.ПодключенБитФинанс=Истина;
		Элемент.ИдБитФинанс=Рез.Ид;
		Сообщить("Соединили "+Элемент.Наименование+" и контрагента в Бит-Финанс "+Рез.Наименование);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти контрагента в Бит-Финанс ИНН"+Элемент.ИНН+" КПП "+Элемент.КПП);
		Элемент.ПодключенБитФинанс=Ложь;
		Элемент.ИдБитФинанс="";
	КонецЕсли;
КонецПроцедуры	

Процедура ОтправитьЗапросНаПодключениеДоговора(Элемент) Экспорт
	Если Ложь Тогда Элемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент(); КонецЕсли;
	
	Структ=Новый Структура("Команда,ИдКонтрагента,ИдОрганизации,НомерДоговора,ДатаДоговора","ПолучитьДанныеДоговора",СокрЛП(Элемент.Контрагент.ИдБитФинанс),
																													 СокрЛП(Элемент.Организация.ИдБитФинанс),
																													 Элемент.НомерДоговора,Элемент.ДатаДоговора);
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.Ок Тогда
		Элемент.ПодключенБитФинанс=Истина;
		Элемент.ИдБитФинанс=Рез.Ид;
		Сообщить("Соединили "+Элемент.Наименование+" и договор в Бит-Финанс "+Рез.Наименование);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти договор контрагента в Бит-Финанс контрагент "+Элемент.Владелец+
														  " организация "+Элемент.Организация+" номер "+Элемент.НомерДоговора+
														   " от "+Формат(Элемент.ДатаДоговора,"ДЛФ=Д"));
		Элемент.ИдБитФинанс="";         
		Элемент.ПодключенБитФинанс=Ложь;
	КонецЕсли;
КонецПроцедуры	

Процедура ОтправитьЗапросНаПодключениеБаковскогоСчетаКонтрагента(Элемент) Экспорт
	Если Ложь Тогда Элемент = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент(); КонецЕсли;
	
	Структ=Новый Структура("Команда,ИдКонтрагента,НомерСчета,БикБанка","ПолучитьДанныеБанковскогоСчетаконтрагента",СокрЛП(Элемент.Владелец.ИдБитФинанс),
																											      Элемент.НомерСчета,Элемент.Банк.Код);
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.Ок Тогда
		Элемент.ПодключенБитФинанс=Истина;
		Элемент.ИдБитФинанс=Рез.Ид;
		Сообщить("Соединили "+Элемент.Наименование+" и счет контрагента в Бит-Финанс "+Рез.Наименование);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти банковский счет контрагента в Бит-Финанс контрагент "+Элемент.Владелец+
														  "№ "+Элемент.НомерСчета+" БИК: "+Элемент.Банк.Код);
		Элемент.ИдБитФинанс="";
		Элемент.ПодключенБитФинанс=Ложь;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПолучитьСписокЦФО() Экспорт

	Структ=Новый Структура("Команда",
	                       "ПолучитьСписокЦФО");
						   
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.Ок Тогда
		Для Каждого Стр из Рез.ЦФО Цикл
			 СсылкаНаОбъект=Справочники.сок_ЦФО.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Ид));
			 Если Стр.Порядок=0 Тогда
				 Родитель = Справочники.сок_ЦФО.ПустаяСсылка();
			 Иначе
				 Родитель =Справочники.сок_ЦФО.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ИдРодителя));
			 КонецЕсли;	 
			 Элемент = СсылкаНаОбъект.ПолучитьОбъект();
			 Если Элемент=Неопределено Тогда
				 Элемент = Справочники.сок_ЦФО.СоздатьЭлемент();
				 Элемент.УстановитьСсылкуНового(СсылкаНаОбъект);
			 Конецесли;	 
			 Элемент.Наименование=Стр.Наименование;
			 Элемент.Код=Стр.Код;
			 Элемент.ПометкаУдаления=Стр.ПометкаУдаления;
			 Элемент.ОбменДанными.Загрузка=Истина;
			 Элемент.Записать();
		КонецЦикла;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить списко ЦФО");
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

Процедура ПолучитьСписокСтатейДДС() Экспорт

	Структ=Новый Структура("Команда",
	                       "ПолучитьСписокСтатей");
						   
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	Если Рез.Ок Тогда
		Для Каждого Стр из Рез.Статьи Цикл
			 СсылкаНаОбъект=Справочники.сок_СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Ид));
			 Если Стр.Порядок=0 Тогда
				 Родитель = Справочники.сок_СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
			 Иначе
				 Родитель =Справочники.сок_СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ИдРодителя));
			 КонецЕсли;	 
			 Элемент = СсылкаНаОбъект.ПолучитьОбъект();
			 Если Элемент=Неопределено Тогда
				 Элемент = Справочники.сок_СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
				 Элемент.УстановитьСсылкуНового(СсылкаНаОбъект);
			 Конецесли;	 
			 Элемент.Наименование=Стр.Наименование;
			 Элемент.Код=Стр.Код;
			 Элемент.ПометкаУдаления=Стр.ПометкаУдаления;
			 Элемент.ОбменДанными.Загрузка=Истина;
			 Элемент.Записать();
		КонецЦикла;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить списко статей движения денежных стредств.");
	КонецЕсли;
	
КонецПроцедуры	

#Область ОтправкаПрикрепленныхФайлов

Процедура ОтправитьПрикрепленныйФайл(ВладелецФайла,Спр,КоличествоПопыток=3)
	Если Ложь Тогда Спр=Справочники.сок_ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.СоздатьЭлемент(); КонецЕсли;
	
	Данные=РаботаСфайлами.ДвоичныеДанныеФайла(Спр);
	Структ=Новый Структура("Команда,ИДДокумента,Ид,Наименование,ДатаСоздания,Данные,
							|ПутьКФайлу,ДатаМодификацииУниверсальная,Расширение,Размер", 
				  "ПрисоединенныйФайл",
				  СокрЛП(ВладелецФайла.Ссылка.УникальныйИдентификатор()),	
				  СокрЛП(СПр.Ссылка.УникальныйИдентификатор()),
				  Спр.Наименование,
				  Спр.ДатаСоздания,
				  ЗначениеВСтрокуВнутр(Данные),
				  Спр.ПутьКФайлу,
				  Спр.ДатаМодификацииУниверсальная,
	              Спр.Расширение,
				  Спр.Размер);
	
	Для П=1 По КоличествоПопыток Цикл
		Рез = ОправитьСообщениеВБитФинанс(Структ);
		Если Рез.Ок Тогда
			Возврат;
		ИначеЕсли Рез.ОшибкаСоединения Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет соединения с Бит-Финанс. Прикрепленный файл "+Спр+" не отправлен.");
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалесь отправить прикрепленный файл "+Спр+".");
КонецПроцедуры	

Процедура ОтправитьПрисоедиенныеФайлыПоОдномойЗаявке(СсылкаНаОбъект) Экспорт
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ЗаказПоставщику) И ЗначениеЗаполнено(СсылкаНаОбъект.ЗаказПоставщику.ПрикрепленныйСчет) Тогда
			ОтправитьПрикрепленныйФайл(СсылкаНаОбъект,СсылкаНаОбъект.ЗаказПоставщику.ПрикрепленныйСчет);
	КонецЕсли;	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДокументОснование) И НЕ СсылкаНаОбъект.ДокументОснование=СсылкаНаОбъект.ЗаказПоставщику И ЗначениеЗаполнено(СсылкаНаОбъект.ДокументОснование.ПрикрепленныйСчет) Тогда
			ОтправитьПрикрепленныйФайл(СсылкаНаОбъект,СсылкаНаОбъект.ДокументОснование.ПрикрепленныйСчет);
	КонецЕсли;	
	Спр = Справочники.сок_ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Выбрать(,,Новый Структура("ВладелецФайла",СсылкаНаОбъект));
	Пока Спр.Следующий() Цикл                                                                  
		ОтправитьПрикрепленныйФайл(СсылкаНаОбъект,Спр.Ссылка);
	КонецЦикла;	       
КонецПроцедуры	


Процедура ОтправитьМассивПрикрепленныхФайловПоМассивуЗаявок(МассивЗаявок) Экспорт
	Для Каждого СтрМ из МассивЗаявок Цикл
		ОтправитьПрисоедиенныеФайлыПоОдномойЗаявке(СтрМ)
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

#Область ОтправкаЗаявкиНаРасходованиеДенежныхСредств

Функция ОтправитьЗаявкуНаРасходованиеДенежныхСредств(Элемент) Экспорт
	
	
	Если Ложь Тогда Элемент = Документы.сок_ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент() КонецЕсли;
	
	
	
	Если НЕ Элемент.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Элемент.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена организация. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Элемент.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен контрагент. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Элемент.ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен договор контрагента. Отправка не возможна. "+Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Элемент.БанковскийСчетКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен баноквский счет контрагента. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	                            
	

	Если НЕ ЗначениеЗаполнено(Элемент.КодНазначенияПлатежа) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен код назначения платежа. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Элемент.НазначениеПлатежа) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено назначение платежа. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	   
	
	Если Элемент.СуммаДокумента=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана сума платежа. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
		Возврат Ложь;
	КонецЕсли;	

	Для Каждого СтрР из Элемент.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрР.ЦФО) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расшифровки платежа "+СтрР.НомерСтроки+" не заполнено ЦФО. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
			Возврат Ложь;
		КонецЕсли;	

		Если НЕ ЗначениеЗаполнено(СтрР.СтатьяДвиженияДенежныхСредств) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расшифровки платежа "+СтрР.НомерСтроки+" не заполнена статья оборотов. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
			Возврат Ложь;
		КонецЕсли;	
		
		Если СтрР.Сумма=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расшифровки платежа "+СтрР.НомерСтроки+" не указана сума платежа. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
			Возврат Ложь;
		КонецЕсли;	

		Если СтрР.СтавкаНДС=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расшифровки платежа "+СтрР.НомерСтроки+" не указана ставка НДС. Отправка не возможна. "+Элемент.Ссылка,Элемент.Ссылка);
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЦикла;
	
	Масс=Новый Массив;
	Для Каждого СтрТ из Элемент.РасшифровкаПлатежа Цикл
		СтруктМ= Новый Структура("ИДЦФО,ИДСтатьи,Сумма,СуммаНДС,СтавкаНДС",
					СокрЛП(СтрТ.ЦФО.УникальныйИдентификатор()),
					СокрЛП(СтрТ.СтатьяДвиженияДенежныхСредств.УникальныйИдентификатор()),
					СтрТ.Сумма,
					СтрТ.СуммаНДС,
					СокрЛП(СтрТ.СтавкаНДС));
		
		Масс.Добавить(СтруктМ);
	КонецЦикла;	
	Комментарий="Вид заявки: "+Элемент.ВидЗаявки+" Основание: "+СокрЛП(Элемент.ДокументОснование.Метаданные().Синоним)+" № "+Элемент.ДокументОснование.Номер+" от "+Формат(Элемент.ДокументОснование.Дата,"ДЛФ=Д");
	Структ=Новый Структура("Команда,ИДДокумента,ИдСчета,Дата,ДатаПлатежа,ИдОрганизации,ИдКонтрагента,ИДДоговора,НазначениеПлатежа,Пользователь,СуммаДокумента,Комментарий,РасшифровкаПлатежа",
	                       "ОтправитьЗаявкуНаРасходованиеДенежныхСредств",
						   СокрЛП(Элемент.Ссылка.УникальныйИдентификатор()),	
						   СокрЛП(Элемент.БанковскийСчетКонтрагента.ИдБитФинанс),	
						   Элемент.Дата,
						   Элемент.ДатаОплатыПлан,
						   СокрЛП(Элемент.Организация.ИдБитФинанс),
						   СокрЛП(Элемент.Контрагент.ИдБитФинанс),	
						   СокрЛП(Элемент.ДоговорКонтрагента.ИдБитФинанс),	
						   СокрЛП(Элемент.КодНазначенияПлатежа)+" "+Элемент.НазначениеПлатежа,
						   СокрЛП(ПараметрыСеанса.ТекущийПользователь), 
						   Элемент.СуммаДокумента,
						   Комментарий,
						   Масс
						   );
						   
	Рез = ОправитьСообщениеВБитФинанс(Структ);
	
	Если Рез.Ок Тогда
		Если НЕ Рез.Проведен Тогда
			Элемент.НомерВБитФинанс=Рез.Номер;
			Элемент.Отправлена=Истина;
			Элемент.ДатаОтправки=ТекущаяДата();
			Попытка
				Элемент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			Конецпопытки;	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявку выгрузили, но не удалось запустить на согласование, возможно не корректное заполнение или превышение бюджета. "+" "+Рез.ТелоОтвета);
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправили в Бит финанс"+Элемент.Ссылка+" Ответ сервера:"+Рез.ТелоОтвета);
			Если Рез.Свойство("ПроверитьСтатусИНомер") И Рез.ПроверитьСтатусИНомер=Истина Тогда
				Если НЕ Элемент.НомерВБитФинанс=Рез.Номер ИЛИ НЕ Элемент.СостояниеЗаявки=Рез.СостояниеЗаявки Тогда
					Элемент.НомерВБитФинанс=Рез.Номер;
					Элемент.СостояниеЗаявки=Рез.СостояниеЗаявки;
					Элемент.ОбменДанными.Загрузка=Истина;
					Элемент.Записать();
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		//Отправим присоединенные файлы                                                            
		ОтправитьПрисоедиенныеФайлыПоОдномойЗаявке(Элемент.Ссылка);
		Возврат Истина;
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отправить заявку "+Элемент.Ссылка+" Ответ сервера: "+Рез.ТелоОтвета);
		Возврат Ложь;
	КонецЕсли;
КонецФункции        


Процедура ОтправитьМассивЗаявокНаРасходованиеДенежныхСредств(МассивСсылок) Экспорт
	Для Каждого Стр из МассивСсылок Цикл
		Элемент = Стр.ПолучитьОбъект();
		Если Ложь Тогда Элемент = Документы.сок_ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент() КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.Организация) Тогда
			ТекстСобщения="Не заполена организация.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;	
		
		Если НЕ Элемент.Организация.ПодключенБитФинанс Тогда
			ТекстСобщения="Организация "+Элемент.Организация+" не сопоставлена с оргнанизацией в БИТ:Финанс. Выгрузка не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;	
		
		
		Если НЕ ЗначениеЗаполнено(Элемент.Контрагент) Тогда
			ТекстСобщения="Не заполен контраген.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;
		
		Если НЕ Элемент.Контрагент.ПодключенБитФинанс Тогда
			ТекстСобщения="Контрагент "+Элемент.Контрагент+" не сопставлен с контрагентом в БИТ:Финанс. Выгрузка не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;	

		Если НЕ ЗначениеЗаполнено(Элемент.ДоговорКонтрагента) Тогда
			ТекстСобщения="Не заполен договор.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;
		
		Если НЕ Элемент.ДоговорКонтрагента.ПодключенБитФинанс Тогда
			ТекстСобщения="Договор "+Элемент.ДоговорКонтрагента+" не сопставлен с договором в БИТ:Финанс. Выгрузка не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;	

		Если НЕ ЗначениеЗаполнено(Элемент.БанковскийСчетКонтрагента) Тогда
			ТекстСобщения="Не заполен банковский счет.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;
		
		Если НЕ Элемент.БанковскийСчетКонтрагента.ПодключенБитФинанс Тогда
			ТекстСобщения="Банковский счет  "+Элемент.БанковскийСчетКонтрагента+" не сопставлен с банковским счетом  в БИТ:Финанс. Выгрузка не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения,Стр);
			Продолжить;
		КонецЕсли;	
		
		ОтправитьЗаявкуНаРасходованиеДенежныхСредств(Элемент);
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти































