
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ПараметрыОтбора - Структура
//
Процедура ОткрытьПолучениеДанныхДокументовИзРЭМД(Форма, ПараметрыПодбора, Уникальность = Ложь, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ПолучениеДанныхДокументовИзРЭМД.Форма", ПараметрыПодбора, Форма, Уникальность,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Проверяет необходимость обработки
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма-владелец.
//  ИсточникВыбора - Произвольный - форма, где осуществлен выбор.
//
// Возвращаемое значение:
//  Булево - Истина, если это результат подбора товаров по отбору
//
Функция ОбработатьПолучениеДанныхДокументовИзРЭМД(Форма, ИсточникВыбора) Экспорт
	
	Возврат (ИсточникВыбора.ИмяФормы = "Обработка.ПолучениеДанныхДокументовИзРЭМД.Форма.Форма");
	
КонецФункции


// Обрабатывает нажатие на гиперссылку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ТекстСЭМДОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("Форма", Форма);
	Обработчик = Новый ОписаниеОповещения("ТекстСЭМДОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект, Контекст);
	
	ЗаписатьДокументВФормеПриНеобходимости(Обработчик, Форма, Истина);
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - выбранный пользователем ответ,
//  Контекст - Структура - контекст формы документа:
//   * Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ТекстСЭМДОбработкаНавигационнойСсылкиЗавершение(ОбъектЗаписан, Контекст) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуГиперссылки(
		Контекст.Форма.Объект.Ссылка,
		Контекст.НавигационнаяСсылкаФорматированнойСтроки,
		Контекст.Форма);
	
КонецПроцедуры

// Выполняет обработку команды по открытию или созданию СЭМД.
//
// Параметры:
//  Документ - ДокументСсылка - Документ, на основании которого необходимо создать СЭМД или открыть существующий.
//  Команда - Строка - Выполняемая команда.
//  ФормаВладелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//
Процедура ВыполнитьКомандуГиперссылки(Документ, Команда, Форма) Экспорт
	
	Если СтрНачинаетсяС(Команда, "Открыть") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ"   , Документ);
		ПараметрыФормы.Вставить("РежимРаботы", "РежимПросмотра");
		ПараметрыФормы.Вставить("ТипСЭМД"    , ФедеральныеВебСервисыРЭМД.ПолучитьТипРЭМДПоДокументу(Документ));
		
		ОткрытьФорму("Обработка.ПередачаДанныхДокументовВРЭМД.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли СтрНачинаетсяС(Команда, "Создать") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ"   , Документ);
		ПараметрыФормы.Вставить("РежимРаботы", "РежимПередачиДанных");
		ПараметрыФормы.Вставить("ТипСЭМД"    , ФедеральныеВебСервисыРЭМД.ПолучитьТипРЭМДПоДокументу(Документ));
		
		ОткрытьФорму("Обработка.ПередачаДанныхДокументовВРЭМД.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли СтрНачинаетсяС(Команда, "ДобавитьПодпись") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ"   , Документ);
		ПараметрыФормы.Вставить("РежимРаботы", "РежимДобавленияПодписей");
		ПараметрыФормы.Вставить("ТипСЭМД"    , ФедеральныеВебСервисыРЭМД.ПолучитьТипРЭМДПоДокументу(Документ));
		
		ОткрытьФорму("Обработка.ПередачаДанныхДокументовВРЭМД.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(Команда);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаписатьДокументВФормеПриНеобходимости(ОповещениеПриЗавершении, Форма, ТребуетсяПроведение) Экспорт
	
	ТекстВопроса = "";
	Если Форма.Объект.Ссылка.Пустая() Или Не Форма.Объект.Проведен И ТребуетсяПроведение Тогда
		
		Если ТребуетсяПроведение Тогда
			ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Документ не записан. Записать?'");
		КонецЕсли;
		
	ИначеЕсли Форма.Модифицированность Тогда
		
		Если ТребуетсяПроведение Или Форма.Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Документ был изменен. Записать?'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("Форма", Форма);
		Контекст.Вставить("ТребуетсяПроведение", ТребуетсяПроведение);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Обработчик = Новый ОписаниеОповещения("ЗаписатьДокументВФормеПриНеобходимости_ПослеПодтверждения", ИнтеграцияМДЛПСлужебныйКлиент, Контекст);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументВФормеПриНеобходимости_ПослеПодтверждения(Ответ, Контекст) Экспорт
	
	ЗаписаноУспешно = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Контекст.ТребуетсяПроведение Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписаноУспешно = Контекст.Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи));
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, ЗаписаноУспешно);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
