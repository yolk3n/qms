
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////
// Внесения и выемки ДС
#Область ВнесенияИВыемкиДС

// Создает документ внесения денежных средств в кассу ККМ.
//
// Параметры:
//  КассаККМ      - СправочникСсылка.КассыККМ.
//  Дата          - дата изъятия.
//  СуммаВнесения - Число
//
// Возвращаемое значение:
//  ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ, Неопределено
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ДанныеЗаполнения) Экспорт
	
	НовыйДокумент = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
	НовыйДокумент.Заполнить(Новый Структура("КассаККМ", ДанныеЗаполнения.КассаККМ));
	
	НовыйДокумент.Дата           = ТекущаяДатаСеанса();
	НовыйДокумент.СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

// Создает документ выемки денежных средств из кассы ККМ
//
// Параметры:
//  КассаККМ     - СправочникСсылка.КассыККМ
//  Дата         - дата изъятия
//  СуммаИзъятия - Число
//
// Возвращаемое значение:
//  ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ, Неопределено
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ДанныеЗаполнения) Экспорт
	
	НовыйДокумент = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	НовыйДокумент.Заполнить(Новый Структура("КассаККМ", ДанныеЗаполнения.КассаККМ));
	
	НовыйДокумент.Дата           = ТекущаяДатаСеанса();
	НовыйДокумент.СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

#КонецОбласти // ВнесенияИВыемкиДС

//////////////////////////////////////////////////////////////////////////////
// Проверки состояния кассовой смены
#Область ПроверкиСостоянияКассовойСмены

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
//
// Возвращаемое значение:
//  Структура - поля структуры определены в функции ПолучитьПустоеОписаниеКассовойСмены().
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументКассоваяСмена.Номер                                            КАК НомерКассовойСмены,
	|	ДокументКассоваяСмена.Ссылка                                           КАК КассоваяСмена,
	|	ДокументКассоваяСмена.Статус                                           КАК СтатусКассовойСмены,
	|	ДокументКассоваяСмена.КассаККМ                                         КАК КассаККМ,
	|	ДокументКассоваяСмена.КассаККМ.ВалютаДенежныхСредств                   КАК Валюта,
	|	ДокументКассоваяСмена.КассаККМ.ВалютаДенежныхСредств.Представление     КАК ВалютаПредставление,
	|	ДокументКассоваяСмена.Организация                                      КАК Организация,
	|	ДокументКассоваяСмена.КассаККМ.Склад                                   КАК Склад,
	|	ДокументКассоваяСмена.КассаККМ.Склад.ИсточникФинансирования            КАК ИсточникФинансирования,
	|	ДокументКассоваяСмена.КассаККМ.Склад.РозничныйВидЦены                  КАК ВидЦены,
	|	ДокументКассоваяСмена.КассаККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС  КАК ЦенаВключаетНДС,
	|	ДокументКассоваяСмена.КассаККМ.Склад.ЛьготныйВидЦены                   КАК ВидЦеныЛьготныхТоваров,
	|	ДокументКассоваяСмена.КассаККМ.Склад.ЛьготныйВидЦены.ЦенаВключаетНДС   КАК ЦенаВключаетНДСЛьготныхТоваров,
	|	ВЫБОР
	|		КОГДА ДокументКассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                  КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА ДокументКассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ДокументКассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ ДокументКассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ                                                                  КАК ДатаИзмененияСтатуса,
	|
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО)                 КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0)            КАК НаличностьВКассе,
	|	ЕСТЬNULL(СубъектыОбращения.МестоДеятельности.Идентификатор, """")      КАК ИдентификаторМестаДеятельностиМДЛП
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|	ПО
	|		ОтчетОРозничныхПродажах.КассоваяСмена = ДокументКассоваяСмена.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|	ПО
	|		ДокументКассоваяСмена.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК СубъектыОбращения
	|	ПО
	|		СубъектыОбращения.ОрганизацияКонтрагент = ДокументКассоваяСмена.Организация
	|		И СубъектыОбращения.ОбъектМестаДеятельности = ДокументКассоваяСмена.КассаККМ.Склад
	|ГДЕ
	|	ДокументКассоваяСмена.Проведен
	|	И ДокументКассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ
	|");
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьПустоеОписаниеКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
		Если ОписаниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта
		   И ТекущаяДатаСеанса() - ОписаниеКассовойСмены.ДатаИзмененияСтатуса >= 86400 Тогда
			ОписаниеКассовойСмены.Ошибка24Часа = Истина;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КассыККМ.Ссылка                                                    КАК КассаККМ,
		|	КассыККМ.Владелец                                                  КАК Организация,
		|	КассыККМ.Склад                                                     КАК Склад,
		|	КассыККМ.Склад.РозничныйВидЦены                                    КАК ВидЦены,
		|	КассыККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС                    КАК ЦенаВключаетНДС,
		|	КассыККМ.Склад.ЛьготныйВидЦены                                     КАК ВидЦеныЛьготныхТоваров,
		|	КассыККМ.Склад.ЛьготныйВидЦены.ЦенаВключаетНДС                     КАК ЦенаВключаетНДСЛьготныхТоваров,
		|	КассыККМ.Склад.ИсточникФинансирования                              КАК ИсточникФинансирования,
		|	КассыККМ.ВалютаДенежныхСредств                                     КАК Валюта,
		|	КассыККМ.ВалютаДенежныхСредств.Представление                       КАК ВалютаПредставление,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0)        КАК НаличностьВКассе,
		|	ЕСТЬNULL(СубъектыОбращения.МестоДеятельности.Идентификатор, """")  КАК ИдентификаторМестаДеятельностиМДЛП
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|	ПО
		|		ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СубъектыОбращенияМДЛП КАК СубъектыОбращения
		|	ПО
		|		СубъектыОбращения.ОрганизацияКонтрагент = КассыККМ.Владелец
		|		И СубъектыОбращения.ОбъектМестаДеятельности = КассыККМ.Склад
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ
		|");
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
	КонецЕсли;
	
	ОписаниеКассовойСмены.СведенияООрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОписаниеКассовойСмены.Организация, ТекущаяДатаСеанса());
	Если ЗначениеЗаполнено(ОписаниеКассовойСмены.Склад) Тогда
		ОписаниеКассовойСмены.АдресСклада = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			ОписаниеКассовойСмены.Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада,, ТекущаяДатаСеанса());
	КонецЕсли;
	
	НастройкаСистемыНалогообложения = НастройкаСистемыНалогообложения(ОписаниеКассовойСмены.Организация, ОписаниеКассовойСмены.Склад);
	ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, НастройкаСистемыНалогообложения);
	
	Если ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ОписаниеКассовойСмены.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, НачалоКассовойСмены, ОкончаниеКассовойСмены, КассоваяСмена = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|");
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
// Параметры:
//  КассоваяСмена  - ДокументСсылка.ОтчетОРозничныхПродажах
//  Дата           - 
//  ОписаниеОшибки - Строка - будет помещено описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, если кассовая смена открыта, и с момента открытия не прошло 24 часа
//
Функция СменаОткрыта(ОтчетОРозничныхПродажах, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КассоваяСмена.Статус                  КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены     КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены  КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена
	|");
	
	Запрос.УстановитьПараметр("КассоваяСмена", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетОРозничныхПродажах, "КассоваяСмена"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

#КонецОбласти // ПроверкиСостоянияКассовойСмены

//////////////////////////////////////////////////////////////////////////////
// Открытие и закрытие кассовой смены
#Область ОткрытиеИЗакрытиеКассовойСмены

// Функция выполняет открытие кассовой смены.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ
//  ОписаниеОшибки - Строка - будет помещено описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина, если смена открыта
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	ВыполненоУспешно = Истина;
	
	СостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	Если СостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			ВыполненоУспешно = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВыполненоУспешно = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
// Параметры:
//  КассаККМ       - СправочникСсылка.КассыККМ
//  ОписаниеОшибки - Строка - будет помещено описание ошибки
//
// Возвращаемое значение:
//  Массив(ДокументСсылка.ОтчетОРозничныхПродажах)
//
Функция ЗакрытьКассовуюСменуВыполнитьАрхивацию(КассаККМ, БылаОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	ОтчетыОРозничныхПродажах = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		КассоваяСмена = ЗакрытьКассовуюСмену(КассаККМ);
		Если КассоваяСмена = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Кассовая смена не открыта.'");
		КонецЕсли;
		
		ВыполнитьАвтоматическуюИнкассацию(КассаККМ, БылаОшибкаПриСнятииZОтчета, ОписаниеОшибки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОтчетыОРозничныхПродажах;
	КонецПопытки;
	
	// Удаление отложенных и чеков, по которым был зарезервирован товар.
	УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки);
	
	// Заполнение отчета о розничных продажах
	ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		Возврат ОтчетыОРозничныхПродажах;
	КонецЕсли;
	
	ОперацияПриЗакрытииКассовойСмены = Константы.ОперацияПриЗакрытииКассовойСмены.Получить();
	// Архивирование чеков ККМ
	Если ОперацияПриЗакрытииКассовойСмены = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ Тогда
		
		ПараметрыЗадания = ПараметрыВыполненияОперацийСЧекамиККМ(ОтчетОРозничныхПродажах);
		ВыполнитьАрхивированиеЧековККМ(ПараметрыЗадания);
		
	ИначеЕсли ОперацияПриЗакрытииКассовойСмены = Перечисления.ОперацииПриЗакрытииКассовойСмены.УдалениеЧековККМ Тогда
		
		ПараметрыЗадания = ПараметрыВыполненияОперацийСЧекамиККМ(ОтчетОРозничныхПродажах);
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.СсылкаСуществует(ОтчетОРозничныхПродажах) Тогда
		// Отчет о розничных продажах мог быть удален при удалении чеков, если за смену не было продаж.
		ОтчетыОРозничныхПродажах.Добавить(ОтчетОРозничныхПродажах);
	КонецЕсли;
	
	Возврат ОтчетыОРозничныхПродажах;
	
КонецФункции

// Функция выполняет закрытие кассовой смены.
//
// Параметры:
//  КассоваяСменаОбъект - ДокументОбъект.ОтчетОРозничныхПродажах
//
// Возвращаемое значение:
//  Структура("ОтчетОРозничныхПродажах, ОписаниеОшибки", ДокументСсылка.ОтчетОРозничныхПродажах или Неопределено, Строка)
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОтчетОРозничныхПродажахОбъект = ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена).ПолучитьОбъект();
	ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, ОписаниеОшибки);
	
	Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
	
КонецФункции

// Возвращает параметры задания архивирования или удаления чеков ККМ по умолчанию
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.ОтчетОРозничныхПродажах
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыВыполненияОперацийСЧекамиККМ(КассоваяСмена) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("КассоваяСмена"               , КассоваяСмена);
	ПараметрыЗадания.Вставить("ОбработкаВыполнена"          , Ложь);
	ПараметрыЗадания.Вставить("ЗаписыватьВЖурналРегистрации", Ложь);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Выполняет архивирование чеков ККМ по кассовой смене.
//
Процедура ВыполнитьАрхивированиеЧековККМ(ПараметрыЗадания, АдресХранилища = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЧекККМ.КассоваяСмена  КАК КассоваяСмена,
	|	ЧекККМ.Ссылка         КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.КассоваяСмена В (&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.КассоваяСмена  КАК КассоваяСмена,
	|	ЧекККМВозврат.Ссылка         КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМВозврат.КассоваяСмена В (&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМКоррекции.КассоваяСмена  КАК КассоваяСмена,
	|	ЧекККМКоррекции.Ссылка         КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|ГДЕ
	|	НЕ ЧекККМКоррекции.Архивный
	|	И ЧекККМКоррекции.Проведен
	|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМКоррекции.КассоваяСмена В (&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка  КАК КассоваяСмена,
	|	НЕОПРЕДЕЛЕНО                    КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта)
	|	И ОтчетОРозничныхПродажах.Ссылка В (&КассоваяСмена)
	|
	|ИТОГИ ПО
	|	КассоваяСмена
	|");
	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	
	ВыборкаКассовыхСмен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаКассовыхСмен.КассоваяСмена, "ОтчетОРозничныхПродажахЗаполненПоКассовойСмене") Тогда
			ОписаниеОшибки = СтрЗаменить(НСтр("ru='По кассовой смене %1 не заполнен отчет о розничных продажах.'"), "%1", ВыборкаКассовыхСмен.КассоваяСмена);
			Если ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'")+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ВыборкаЧековККМ = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаЧековККМ.Следующий() Цикл
				Если ВыборкаЧековККМ.Ссылка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
				ЧекККМОбъект.Архивный = Истина;
				ЧекККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы;
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При архивировании чеков ККМ произошла ошибка.
			                      |Архивирование чеков ККМ не выполнено.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			Если ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'")
					+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	ПараметрыЗадания.ОбработкаВыполнена = Результат;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ по кассовой смене.
//
Процедура ВыполнитьУдалениеЧековККМ(ПараметрыЗадания, АдресХранилища = "") Экспорт
	
	ВыполнитьАрхивированиеЧековККМ(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыполнения = ПараметрыЗадания.ОбработкаВыполнена;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка         КАК Ссылка,
	|	ЧекККМ.КассоваяСмена  КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
	|	И ЧекККМ.КассоваяСмена.СтатусКассовойСмены =
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка         КАК Ссылка,
	|	ЧекККМВозврат.КассоваяСмена  КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
	|	И ЧекККМВозврат.КассоваяСмена.СтатусКассовойСмены =
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка                КАК Ссылка,
	|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена  КАК КассоваяСмена
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
	|	И ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусКассовойСмены = 
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМКоррекции.Ссылка         КАК Ссылка,
	|	ЧекККМКоррекции.КассоваяСмена  КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|ГДЕ
	|	ЧекККМКоррекции.Проведен
	|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМКоррекции.КассоваяСмена В(&КассоваяСмена)
	|	И ЧекККМКоррекции.КассоваяСмена.СтатусКассовойСмены =
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументКассоваяСмена.Ссылка     КАК Ссылка,
	|	ОтчетыОРозничныхПродажах.Ссылка  КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетОРозничныхПродажах КАК ОтчетыОРозничныхПродажах
	|	ПО
	|		ОтчетыОРозничныхПродажах.КассоваяСмена = ДокументКассоваяСмена.Ссылка
	|ГДЕ
	|	ОтчетыОРозничныхПродажах.Ссылка В(&КассоваяСмена)
	|	И ОтчетыОРозничныхПродажах.СтатусКассовойСмены = 
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|
	|ИТОГИ ПО
	|	КассоваяСмена
	|");
	
	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКассовыхСмен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ТипДокумента = ТипЗнч(ВыборкаДокументов.Ссылка);
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
					
					ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ЧекККМ = Неопределено;
					ДокументОбъект.Записать();
					
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЧекККМ")
					  Или ТипДокумента = Тип("ДокументСсылка.ЧекККМВозврат")
					  Или ТипДокумента = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
					
					ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Удалить();
					
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КассоваяСмена") Тогда
					// Кассовая смена будет удалена ниже
				КонецЕсли;
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажах = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена;
			Если ОтчетОРозничныхПродажах.Товары.Количество() = 0 И ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Количество() = 0 Тогда
				ОтчетОРозничныхПродажах.Удалить(); // За кассовую смену не было чеков
			Иначе
				ОтчетОРозничныхПродажах.КассоваяСмена = Неопределено;
				ОтчетОРозничныхПродажах.ОбменДанными.Загрузка = Истина;
				ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				ОтчетОРозничныхПродажах.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КассоваяСмена) Тогда
				КассоваяСменаОбъект = КассоваяСмена.ПолучитьОбъект();
				КассоваяСменаОбъект.Удалить();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			РезультатВыполнения = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При удалении чеков ККМ произошла ошибка.
			                      |Удаление чеков ККМ не выполнено.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
			Если ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					НСтр("ru = 'Во время регламентного удаления чеков ККМ произошла ошибка.'") + Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ПараметрыЗадания.ОбработкаВыполнена = РезультатВыполнения;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОткрытиеИЗакрытиеКассовойСмены

//////////////////////////////////////////////////////////////////////////////
// Регламентные задания
#Область РегламентныеЗадания

// Процедура выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура АрхивированиеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АрхивированиеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта)
	|	И Документ.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|");
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Начато регламентное архивирование чеков ККМ.'"));
		
		ПараметрыЗадания = ПараметрыВыполненияОперацийСЧекамиККМ(Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.ЗаписыватьВЖурналРегистрации = Истина;
		
		ВыполнитьАрхивированиеЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Закончено регламентное архивирование чеков ККМ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет удаление чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Дата < &ДатаХраненияЧеков
	|	И Документ.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|");
	
	КоличествоДнейХраненияЧеков = Константы.КоличествоДнейХраненияЗаархивированныхЧеков.Получить() * 86400;
	ДатаХраненияЧеков = ТекущаяДатаСеанса() - КоличествоДнейХраненияЧеков;
	
	Запрос.УстановитьПараметр("ДатаХраненияЧеков", ДатаХраненияЧеков);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Начато регламентное удаление чеков ККМ.'"));
		
		ПараметрыЗадания = ПараметрыВыполненияОперацийСЧекамиККМ(Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.ЗаписыватьВЖурналРегистрации = Истина;
		
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Закончено регламентное удаление чеков ККМ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет удаление отложенных чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеОтложенныхЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеОтложенныхЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Начато регламентное удаление отложенных чеков ККМ.'"));
	
	НачатьТранзакцию();
	
	Попытка
		
		Выборка = ВыбратьОтложенныеЧекиККМ();
		Пока Выборка.Следующий() Цикл
			ЧекККМОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			НСтр("ru = 'Во время регламентного удаления отложенных чеков ККМ произошла ошибка.'")
				+ Символы.ПС + ОписаниеОшибки);
		Возврат;
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Закончено регламентное удаление отложенных чеков ККМ.'"));
	
КонецПроцедуры

#КонецОбласти // РегламентныеЗадания

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

// Получить права доступа РМК для пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка - Пользователь
// 
// Возвращаемое значение:
//  Структура - Права доступа пользователя
//
Функция ПраваДоступаРМК(Пользователь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НастройкиПродажДляПользователей.Ссылка КАК Ссылка,
	|	НастройкиПродажДляПользователей.РМК_Отложить КАК Отложить,
	|	НастройкиПродажДляПользователей.РМК_Зарезервировать КАК Зарезервировать,
	|	НастройкиПродажДляПользователей.РМК_ВыемкаДенег КАК ВыемкаДенег,
	|	НастройкиПродажДляПользователей.РМК_ВнесениеДенег КАК ВнесениеДенег,
	|	НастройкиПродажДляПользователей.РМК_ОткрытьСмену КАК ОткрытьСмену,
	|	НастройкиПродажДляПользователей.РМК_ЗакрытьСмену КАК ЗакрытьСмену,
	|	НастройкиПродажДляПользователей.РМК_ВозвратТовара КАК ВозвратТовара,
	|	НастройкиПродажДляПользователей.РМК_КорректировкаСтрок КАК КорректировкаСтрок
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ГруппыПользователей.Состав КАК Т
	|	ГДЕ
	|		Т.Пользователь = &Пользователь
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ГруппыПользователей КАК Т
	|	ГДЕ
	|		Т.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|	) КАК ГруппыПользователей
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиПродажДляПользователей КАК НастройкиПродажДляПользователей
	|	ПО
	|		ГруппыПользователей.Ссылка = НастройкиПродажДляПользователей.Владелец
	|ГДЕ
	|	НастройкиПродажДляПользователей.РМК_Использовать
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	НастройкиПродажДляПользователей.Ссылка,
	|	НастройкиПродажДляПользователей.РМК_Отложить,
	|	НастройкиПродажДляПользователей.РМК_Зарезервировать,
	|	НастройкиПродажДляПользователей.РМК_ВыемкаДенег,
	|	НастройкиПродажДляПользователей.РМК_ВнесениеДенег,
	|	НастройкиПродажДляПользователей.РМК_ОткрытьСмену,
	|	НастройкиПродажДляПользователей.РМК_ЗакрытьСмену,
	|	НастройкиПродажДляПользователей.РМК_ВозвратТовара,
	|	НастройкиПродажДляПользователей.РМК_КорректировкаСтрок
	|ИЗ
	|	Справочник.НастройкиПродажДляПользователей КАК НастройкиПродажДляПользователей
	|ГДЕ
	|	НастройкиПродажДляПользователей.Владелец = &Пользователь
	|	И НастройкиПродажДляПользователей.РМК_Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.Приоритет                     КАК Приоритет,
	|	МАКСИМУМ(Настройки.Отложить)            КАК Отложить,
	|	МАКСИМУМ(Настройки.Зарезервировать)     КАК Зарезервировать,
	|	МАКСИМУМ(Настройки.ВыемкаДенег)         КАК ВыемкаДенег,
	|	МАКСИМУМ(Настройки.ВнесениеДенег)       КАК ВнесениеДенег,
	|	МАКСИМУМ(Настройки.ОткрытьСмену)        КАК ОткрытьСмену,
	|	МАКСИМУМ(Настройки.ЗакрытьСмену)        КАК ЗакрытьСмену,
	|	МАКСИМУМ(Настройки.ВозвратТовара)       КАК ВозвратТовара,
	|	МАКСИМУМ(Настройки.КорректировкаСтрок)  КАК КорректировкаСтрок
	|ИЗ
	|	Настройки КАК Настройки
	|
	|СГРУППИРОВАТЬ ПО
	|	Настройки.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	ПраваДоступа = ПраваДоступаПоУмолчанию();
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПраваДоступа, Выборка);
	КонецЕсли;
	
	ПраваДоступа.ВозвратТовараТолькоТекущейСмены = Не ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровОтКлиента);
	
	Возврат ПраваДоступа;
	
КонецФункции

// Возвращает реквизиты кассира
//
// Параметры:
//  Кассир - СправочникСсылка.Пользователи - 
// 
// Возвращаемое значение:
//  - Структура
//
Функция РеквизитыКассира(Кассир) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.ИНН, """")           КАК ИНН,
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.Наименование, """")  КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Кассир
	|");
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РеквизитыКассира = Новый Структура;
	РеквизитыКассира.Вставить("ИНН");
	РеквизитыКассира.Вставить("Наименование");
	
	ВыборкаРеквизитыКассира = Запрос.Выполнить().Выбрать();
	Если ВыборкаРеквизитыКассира.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыКассира, ВыборкаРеквизитыКассира);
	КонецЕсли;
	
	Возврат РеквизитыКассира;
	
КонецФункции

Процедура ПодписатьГорячиеКлавишиНаКнопках(Форма) Экспорт
	
	Для Каждого Команда Из Форма.Команды Цикл
		ПредставлениеСочетанияКлавиш = УправляемаяФорма.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		Если СтрНайти(Команда.Заголовок, ПредставлениеСочетанияКлавиш) = 0 Тогда
			Команда.Заголовок = Команда.Заголовок + Символы.ПС + ПредставлениеСочетанияКлавиш;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеФискальнойОперации() Экспорт
	
	ДанныеФискальнойОперации = Новый Структура;
	ДанныеФискальнойОперации.Вставить("ОтправлятьEmailЧерезОФД", Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("ОтправлятьSMSЧерезОФД"  , Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("НеПечататьФискальныйЧек", ПолучитьФункциональнуюОпцию("НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю"));
	ДанныеФискальнойОперации.Вставить("ОтправительEmail");
	ДанныеФискальнойОперации.Вставить("ВариантОтправкиЭлектронногоЧека");
	ДанныеФискальнойОперации.Вставить("КонтактныеДанныеЭлектронногоЧека");
	
	Возврат ДанныеФискальнойОперации;
	
КонецФункции

// Возвращает представление фискальной операции объекта.
//
// Параметры:
//  Объект - ОпределяемыйТип.ОснованиеФискальнойОперации
//
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция ПредставлениеДанныхФискальнойОперации(Объект) Экспорт
	
	ВозможноПробитиеЧека = Ложь;
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ВозможноПробитиеЧека = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	КонецЕсли;
	
	ДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Объект);
	
	СтрокиПредставления = Новый Массив;
	
	Если ДанныеЖурнала <> Неопределено Тогда
		
		Если ДанныеЖурнала.ТипДокумента <> Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции Тогда
			Текст = НСтр("ru = 'Пробит чек №%1'");
		Иначе
			Текст = НСтр("ru = 'Пробит чек коррекции №%1'");
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеЖурнала.НомерЧекаККМ);
		Текст = Новый ФорматированнаяСтрока(Текст,, ЦветаСтиля.ЦветГиперссылки,, "ОткрытьЗаписьЖурналаФискальныхОпераций");
		
		СтрокиПредставления.Добавить(Текст);
		
	ИначеЕсли ВозможноПробитиеЧека Тогда
		
		Текст = НСтр("ru = 'Пробить чек'");
		Текст = Новый ФорматированнаяСтрока(Текст,, ЦветаСтиля.ЦветГиперссылки,, "ПробитьЧек");
		
		СтрокиПредставления.Добавить(Текст);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрокиПредставления);
	
КонецФункции

// Сравнивает переданную версию ФФД с актуальной (На текущий момент актуальная версия 1.0.5)
//
// Параметры:
//  ВерсияФФД - Строка - Версия ФФД.
// 
// Возвращаемое значение:
//  Булево - Истина, если версия не ниже 1.0.5.
//
Функция ПоддерживаетсяВерсияФФД1_0_5(ВерсияФФД) Экспорт
	
	ПроверяемаяВерсия = СтрРазделить(ВерсияФФД, ".");
	Пока ПроверяемаяВерсия.Количество() < 4 Цикл
		ПроверяемаяВерсия.Добавить("0");
	КонецЦикла;
	ПроверяемаяВерсия = СтрСоединить(ПроверяемаяВерсия, ".");
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПроверяемаяВерсия, "1.0.5.0") >= 0;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытия

Процедура СинхронизироватьКассовуюСменуСОтчетомОРозничныхПродажах(КассоваяСмена, Отказ) Экспорт
	
	Если КассоваяСмена.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если КассоваяСмена.ДополнительныеСвойства.Свойство("НеСинхронизироватьКассовуюСменуСОтчетомОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОРозничныхПродажах = ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена.Ссылка);
	Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
		НужноЗаписатьОтчет = Ложь;
		Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта
		   И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыКассовойСмены.Закрыта
		   И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Закрыта;
			ОтчетОРозничныхПродажахОбъект.Дата = КассоваяСмена.Дата;
			НужноЗаписатьОтчет = Истина;
		ИначеЕсли КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта
				И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыКассовойСмены.Открыта Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта;
			НужноЗаписатьОтчет = Истина;
		КонецЕсли;
		Если НужноЗаписатьОтчет Тогда
			Попытка
				РежимЗаписи = ?(ОтчетОРозничныхПродажахОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписи);
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Синхронизация статусов кассовой смены'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			СоздатьОтчетОРозничныхПродажах(КассоваяСмена);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Создание отчета о розничных продажах'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытия

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ЗакрытьКассовуюСмену(КассаККМ)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Истина;
	
	СостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	Если СостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
		КассоваяСменаОбъект.Статус                 = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Иначе
		// Смена не открыта.
	КонецЕсли;
	
	Возврат СостояниеКассовойСмены.КассоваяСмена;

КонецФункции

Функция УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки)
	
	НачатьТранзакцию();
	
	Попытка
		ОтчетОРозничныхПродажах = ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена);
		ВыборкаЧековККМ = ВыбратьОтложенныеЧекиККМ(ОтчетОРозничныхПродажах);
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При удалении отложенных чеков произошла ошибка.
			           |Дополнительное описание:
			           |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, ОписаниеОшибки)
	
	// Подготовка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                        КАК Ссылка,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры             КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                        КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования        КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.КоличествоВЕдиницахИзмерения  КАК КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент                   КАК Коэффициент,
	|	ТаблицаТовары.Цена                          КАК Цена,
	|	ТаблицаТовары.СтавкаНДС                     КАК СтавкаНДС,
	|	ТаблицаТовары.Сумма                         КАК Сумма,
	|	ТаблицаТовары.СуммаНДС                      КАК СуммаНДС,
	|	ТаблицаТовары.СуммаСНДС                     КАК СуммаСНДС,
	|	ТаблицаТовары.Ссылка.Склад                  КАК Склад,
	|	ТаблицаТовары.Ссылка.Валюта                 КАК Валюта,
	|	ТаблицаТовары.Ссылка.ВидЦены                КАК ВидЦены,
	|	ТаблицаТовары.Ссылка.КассаККМ               КАК КассаККМ,
	|	ТаблицаТовары.Ссылка.Организация            КАК Организация
	|ПОМЕСТИТЬ ТоварыЧеков
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.ИсточникФинансирования,
	|	-ТаблицаТовары.Количество,
	|	-ТаблицаТовары.КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	-ТаблицаТовары.Сумма,
	|	-ТаблицаТовары.СуммаНДС,
	|	-ТаблицаТовары.СуммаСНДС,
	|	ТаблицаТовары.Ссылка.Склад,
	|	ТаблицаТовары.Ссылка.Валюта,
	|	ТаблицаТовары.Ссылка.ВидЦены,
	|	ТаблицаТовары.Ссылка.КассаККМ,
	|	ТаблицаТовары.Ссылка.Организация
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.ИсточникФинансирования,
	|	-ТаблицаТовары.Количество,
	|	-ТаблицаТовары.КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	-ТаблицаТовары.Сумма,
	|	-ТаблицаТовары.СуммаНДС,
	|	-ТаблицаТовары.СуммаСНДС,
	|	ТаблицаТовары.Ссылка.Склад,
	|	ТаблицаТовары.Ссылка.Валюта,
	|	ТаблицаТовары.Ссылка.ВидЦены,
	|	ТаблицаТовары.Ссылка.КассаККМ,
	|	ТаблицаТовары.Ссылка.Организация
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|		ПО
	|			ЧекККМКоррекции.ДокументОснование = ТаблицаТовары.Ссылка
	|			И ЧекККМКоррекции.Ссылка.КассоваяСмена = &КассоваяСмена
	|			И ЧекККМКоррекции.Ссылка.Проведен
	|			И ЧекККМКоррекции.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                        КАК Ссылка,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры             КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                        КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования        КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.КоличествоВЕдиницахИзмерения  КАК КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент                   КАК Коэффициент,
	|	ТаблицаТовары.Цена                          КАК Цена,
	|	ТаблицаТовары.СтавкаНДС                     КАК СтавкаНДС,
	|	ТаблицаТовары.Сумма                         КАК Сумма,
	|	ТаблицаТовары.СуммаНДС                      КАК СуммаНДС,
	|	ТаблицаТовары.СуммаСНДС                     КАК СуммаСНДС,
	|	ТаблицаТовары.Ссылка.Склад                  КАК Склад,
	|	ТаблицаТовары.Ссылка.Валюта                 КАК Валюта,
	|	ТаблицаТовары.Ссылка.ВидЦены                КАК ВидЦены,
	|	ТаблицаТовары.Ссылка.КассаККМ               КАК КассаККМ,
	|	ТаблицаТовары.Ссылка.Организация            КАК Организация
	|ИЗ
	|	Документ.ЧекККМКоррекции.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыЧеков.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	ТоварыЧеков КАК ТоварыЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                         КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                    КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                               КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования               КАК ИсточникФинансирования,
	|	ТаблицаТовары.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент                          КАК Коэффициент,
	|	ТаблицаТовары.Цена                                 КАК Цена,
	|	ТаблицаТовары.СтавкаНДС                            КАК СтавкаНДС,
	|	СУММА(ТаблицаТовары.Количество)                    КАК Количество,
	|	СУММА(ТаблицаТовары.КоличествоВЕдиницахИзмерения)  КАК КоличествоВЕдиницахИзмерения,
	|	СУММА(ТаблицаТовары.Сумма)                         КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаНДС)                      КАК СуммаНДС,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                     КАК СуммаСНДС,
	|	ТаблицаТовары.Склад                                КАК Склад,
	|	ТаблицаТовары.Валюта                               КАК Валюта,
	|	ТаблицаТовары.ВидЦены                              КАК ВидЦены,
	|	ТаблицаТовары.КассаККМ                             КАК КассаККМ,
	|	ТаблицаТовары.Организация                          КАК Организация
	|ИЗ
	|	ТоварыЧеков КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.ИсточникФинансирования,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Валюта,
	|	ТаблицаТовары.ВидЦены,
	|	ТаблицаТовары.КассаККМ,
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал  КАК ЭквайринговыйТерминал,
	|	ЧекККМОплатаПлатежнымиКартами.ВидПлатежнойКарты      КАК ВидПлатежнойКарты,
	|	ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты    КАК НомерПлатежнойКарты,
	|	ЧекККМОплатаПлатежнымиКартами.КодАвторизации         КАК КодАвторизации,
	|	ЧекККМОплатаПлатежнымиКартами.Сумма                  КАК Сумма,
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ        КАК КассаККМ,
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация     КАК Организация,
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Склад           КАК Склад,
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Валюта          КАК Валюта,
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦены         КАК ВидЦены
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЧекиККМ КАК ЧекиККМ
	|	ПО
	|		ЧекиККМ.Ссылка = ЧекККМОплатаПлатежнымиКартами.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.КодАвторизации,
	|	-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Склад,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Валюта,
	|	ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦены
	|ИЗ
	|	Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЧекиККМ КАК ЧекиККМ
	|	ПО
	|		ЧекиККМ.Ссылка = ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка
	|ГДЕ
	|	ЧекККМВозвратОплатаПлатежнымиКартами.ОплатаОтменена
	|";
	
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажахОбъект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИндексПоследнегоЗапроса = Результат.ВГраница();
	Товары                  = Результат[ИндексПоследнегоЗапроса - 1].Выгрузить();
	ОплатаПлатежнымиКартами = Результат[ИндексПоследнегоЗапроса    ].Выгрузить();
	
	ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
	ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.СуммаСНДС <> 0 Тогда
			СтрокаТабличнойЧастиТовары = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ОтчетОРозничныхПродажахОбъект);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ОтчетОРозничныхПродажахОбъект, ПараметрыУчетаНоменклатуры);
	
	Для Каждого СтрокаТЧ Из ОплатаПлатежнымиКартами Цикл
		
		Если СтрокаТЧ.Сумма <> 0 Тогда
			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
		ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.ОтчетОРозничныхПродажахЗаполненПоКассовойСмене = Истина;
	
	Попытка
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При формировании отчета о розничных продажах произошла ошибка.
					 |Дополнительное описание:
					 |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При формировании отчета о розничных продажах произошла ошибка.
					 |Дополнительное описание:
					 |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
	
КонецФункции

Функция ВыбратьОтложенныеЧекиККМ(КассоваяСмена = Неопределено)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.ОтложенДо КАК ОтложенДо,
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтложенДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЧекККМ.ОтложенДо < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0
	|	И ЧекККМ.КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|");
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ТекущееВремя",  ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ПолучитьПустоеОписаниеКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	СостояниеКассовойСмены.Вставить("Ошибка24Часа", Ложь);
	СостояниеКассовойСмены.Вставить("ОписаниеОшибки", "");
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Валюта");
	СостояниеКассовойСмены.Вставить("ВалютаПредставление");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("ВидЦены");
	СостояниеКассовойСмены.Вставить("Склад");
	СостояниеКассовойСмены.Вставить("ИсточникФинансирования");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	
	// Описание реквизитов для ценообразования льготных товаров.
	СостояниеКассовойСмены.Вставить("ВидЦеныЛьготныхТоваров");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДСЛьготныхТоваров");
	
	// Описание реквизитов реализации маркированных товаров.
	СостояниеКассовойСмены.Вставить("ИдентификаторМестаДеятельностиМДЛП");
	
	// Прочее
	СостояниеКассовойСмены.Вставить("ОтчетОРозничныхПродажах");
	СостояниеКассовойСмены.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	СостояниеКассовойСмены.Вставить("СведенияООрганизации");
	СостояниеКассовойСмены.Вставить("АдресСклада", "");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

Функция ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата УБЫВ,
	|	ОтчетОРозничныхПродажах.Ссылка УБЫВ
	|";
	Запрос.УстановитьПараметр("Ссылка", КассоваяСмена);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СоздатьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки = "")
	
	НовыйОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	НовыйОтчетОРозничныхПродажах.Дата = КассоваяСмена.Дата;
	НовыйОтчетОРозничныхПродажах.Заполнить(Новый Структура("КассаККМ", КассоваяСмена.КассаККМ));
	
	НовыйОтчетОРозничныхПродажах.КассоваяСмена = КассоваяСмена.Ссылка;
	НовыйОтчетОРозничныхПродажах.СтатусКассовойСмены = КассоваяСмена.Статус;
	
	Если НовыйОтчетОРозничныхПродажах.ПроверитьЗаполнение() Тогда
		НовыйОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйОтчетОРозничныхПродажах;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПраваДоступаПоУмолчанию()
	
	ЗначениеПоУмолчанию = Истина;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Отложить"       , ЗначениеПоУмолчанию);
	ВозвращаемоеЗначение.Вставить("Зарезервировать", ЗначениеПоУмолчанию);
	
	ВозвращаемоеЗначение.Вставить("ВыемкаДенег"  , ЗначениеПоУмолчанию);
	ВозвращаемоеЗначение.Вставить("ВнесениеДенег", ЗначениеПоУмолчанию);
	
	ВозвращаемоеЗначение.Вставить("ОткрытьСмену", ЗначениеПоУмолчанию);
	ВозвращаемоеЗначение.Вставить("ЗакрытьСмену", ЗначениеПоУмолчанию);
	
	ВозвращаемоеЗначение.Вставить("ВозвратТовара", Ложь);
	ВозвращаемоеЗначение.Вставить("ВозвратТовараТолькоТекущейСмены", Истина);
	
	ВозвращаемоеЗначение.Вставить("КорректировкаСтрок", ЗначениеПоУмолчанию);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НалогообложениеНДС(Организация, Склад, Дата = Неопределено) Экспорт
	
	Настройка = НастройкаСистемыНалогообложения(Организация, Склад, Дата);
	
	Возврат Настройка.НалогообложениеНДС;
	
КонецФункции

Функция НастройкаСистемыНалогообложения(Организация, Склад, Дата = Неопределено) Экспорт
	
	НастройкаСистемыНалогообложения = Новый Структура;
	НастройкаСистемыНалогообложения.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	НастройкаСистемыНалогообложения.Вставить("НалогообложениеНДС"    , Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НастройкаСистемыНалогообложения.РозничнаяТорговляОблагаетсяЕНВД  КАК РозничнаяТорговляОблагаетсяЕНВД,
	|	НастройкаСистемыНалогообложения.СистемаНалогообложения           КАК СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкаСистемыНалогообложения.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Склад = &Склад) КАК НастройкаСистемыНалогообложения
	|");
	Запрос.УстановитьПараметр("Дата"       , Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад"      , Склад);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.РозничнаяТорговляОблагаетсяЕНВД Тогда
			НастройкаСистемыНалогообложения.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
			НастройкаСистемыНалогообложения.Вставить("НалогообложениеНДС"    , Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
		ИначеЕсли Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.УпрощеннаяДоходы Тогда
			НастройкаСистемыНалогообложения.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход);
			НастройкаСистемыНалогообложения.Вставить("НалогообложениеНДС"    , Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		ИначеЕсли Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.УпрощеннаяДоходыМинусРасходы Тогда
			НастройкаСистемыНалогообложения.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход);
			НастройкаСистемыНалогообложения.Вставить("НалогообложениеНДС"    , Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкаСистемыНалогообложения;
	
КонецФункции

Функция ВыполнитьАвтоматическуюИнкассацию(КассаККМ, БылаОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Результат = Истина;
	
	Если Не БылаОшибкаПриСнятииZОтчета Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КассыККМ.Ссылка                                              КАК КассаККМ,
		|	КассыККМ.АвтоматическаяИнкассация                            КАК АвтоматическаяИнкассация,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0)  КАК СуммаДокумента
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|	ПО
		|		ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ
		|	И КассыККМ.АвтоматическаяИнкассация
		|	И ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) > 0
		|";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции