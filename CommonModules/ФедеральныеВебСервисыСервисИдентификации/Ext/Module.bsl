
#Область ПрограммныйИнтерфейс

#Область ОбработчикиЗапросовОтМИС

/// Обработка запроса на получение полиса ОМС через идентификации.
//
// Параметры:
//   Параметры - Строка -
//     XML тела входящего запроса
//   Заголовок - Строка -
//     XML заголовка входящего запроса
//
// Возвращаемое значение:
//   Строка -
//     XML с телом ответа на запрос.
///
Функция sendIdentity(Параметры, Заголовок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		// Построим DOM из заголовка запроса SOAP.
		ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(Заголовок);
		
		КорневойЭлемент_ = ДокументDOM_.ЭлементДокумента;
	
		// Получим OID медицинской организации.
		ДанныеЗаголовка_ = ДанныеТега(Заголовок, "Header");
		ИдКлиента_ = ДанныеЗаголовка_.transportHeader.authInfo.clientEntityId;
		ИдСообщения_ = СтрЗаменить(ДанныеЗаголовка_.MessageID, "urn:uuid:", "");
		
		Если Не ЗначениеЗаполнено(ИдКлиента_) Тогда
			ТекстОшибки_ ="ФедеральныеВебСервисы.СервисОбогащения: не указан идентификатор МИС.";
			Возврат СформироватьСообщениеОбОшибкеSendIdentityResponse(ТекстОшибки_);
		КонецЕсли;
		
		ДанныеПациента_ = ПолучитьДанныеПациентаИзЗапроса(Параметры);
		
		OIDМО_ = ДанныеПациента_.OID;
		
		Если ЗначениеЗаполнено(ДанныеПациента_.ДокументВид) Тогда
			Результат_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисИдентификации.ПолучитьСообщениеСОтветомПоДаннымПациента(ДанныеПациента_);
			
			Если ЗначениеЗаполнено(Результат_) И ЗначениеЗаполнено(Результат_.ОтветСервиса) Тогда
				РазыменовательПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИСервисИдентификации();
				
				ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(Результат_.ОтветСервиса);
				ТипРезультата_ = ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел;
				XPath_ = "//SOAP-ENV:Body/*";
				РезультатXPath_ = ДокументDOM_.ВычислитьВыражениеXPath(
					XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезультата_
				);
				
				ТелоSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
				ТелоSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ТелоSOAP_);
				СообщениеОтвет_ = ТелоSOAPСтрокой_;
			
				Возврат СообщениеОтвет_;
			КонецЕсли;
		КонецЕсли;
		
		НовоеСообщение_ = СформироватьНовоеСообщенияДляСервисаИдентификации(
			Параметры,
			ИдКлиента_,
			Заголовок
		);
		
		РезультатОбмена_ = ОтправитьЗапросВСервисИдентификации(НовоеСообщение_);
		
		РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисИдентификации.ЗаписатьСообщениеЗапрос(
			ИдСообщения_,
			ИдКлиента_,
			РезультатОбмена_.Статус,
			РезультатОбмена_.СообщениеЗапрос,
			РезультатОбмена_.СообщениеОтвет,
			РезультатОбмена_.Идентификатор,
			РезультатОбмена_.ДатаЗапроса,
			РезультатОбмена_.ДатаОтвета,
			РезультатОбмена_.Результат,
			OIDМО_,
			ДанныеПациента_
		);
		
		ЗапуститьФоновоеЗадание();
		
		Возврат РезультатОбмена_.ОтветSOAP;
		
	Исключение
		
		Возврат СформироватьСообщениеОбОшибкеSendIdentityResponse(ОписаниеОшибки());
		
	КонецПопытки;
КонецФункции

/// Обработка запроса данных из очереди, формирующейся в регистре ФедеральныеВебСервисыСМЭВ.
//
// Параметры:
//   Параметры - Строка -
//     XML тела входящего запроса
//   Заголовок - Строка -
//     XML заголовка входящего запроса
//
// Возвращаемое значение:
//   Строка -
//     XML с телом ответа на запрос.
///
Функция getIdentity(Параметры, Заголовок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(Параметры);
		РазыменовательПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИСервисИдентификации();
		
		ТипРезСтрока_ = ТипРезультатаDOMXPath.Строка;
		
		XPath_ = "//egisz:getIdentityRequest/egisz:IdentityResultRequest/egisz:RequestMessageID/text()";
		
		RequestMessageID_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
		
		ДанныеСообщения_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисИдентификации.ПолучитьСообщениеСОтветомСервисаИдентификации(RequestMessageID_);
		
		Если Не ЗначениеЗаполнено(ДанныеСообщения_) Тогда
			СообщениеОтвет_ = СформироватьСообщениеОбОшибкеGetIdentityResponse("Не найден запрос по данному идентификатору");
		Иначе
			ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ДанныеСообщения_.ОтветСервиса);
			ТипРезультата_ = ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел;
			XPath_ = "//SOAP-ENV:Body/*";
			РезультатXPath_ = ДокументDOM_.ВычислитьВыражениеXPath(
				XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезультата_
			);
			
			ТелоSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
			ТелоSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ТелоSOAP_);
			СообщениеОтвет_ = ТелоSOAPСтрокой_;
		КонецЕсли;
		
		ЗапуститьФоновоеЗадание();
		
		Возврат СообщениеОтвет_;
		
	Исключение
		
		Возврат СформироватьСообщениеОбОшибкеGetIdentityResponse(ОписаниеОшибки());
		
	КонецПопытки;
КонецФункции

#КонецОбласти

Функция ОтправитьЗапросВСервисИдентификации(Запрос, ЗапросРезультата = Ложь)
	
	РезультатОбмена_ = Новый Структура(
		"ОтветSOAP, Статус, Успех, Результат, Идентификатор, ДатаЗапроса, ДатаОтвета, СообщениеЗапрос, СообщениеОтвет, ДанныеПолиса"
	);
	
	Если Не ЗапросРезультата Тогда
		РезультатОбмена_.Вставить("СообщениеЗапрос", Запрос);
	КонецЕсли;
	
	АдресСервера_ = ПолучитьАдресСервисаИдентификации();
	
	СтруктураURI_ = ФедеральныеВебСервисыСервер.СтруктураURI(АдресСервера_);
	
	РесурсНаСервере_ = "";
	ПозицияЗавершенияСхемы_ = СтрНайти(АдресСервера_, "://");
	Если ПозицияЗавершенияСхемы_ > 0 Тогда
		АдресСервера_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3);
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения_ = "";
	
	// Если схема не равна https, то тогда считаем, что используется незащищенное соединение.
	Соединение_ = Неопределено;
	Если ЗначениеЗаполнено(СтруктураURI_.Схема) И НРег(СтруктураURI_.Схема) = "https" Тогда
		Соединение_ = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	СоединениеHTTP_ = Новый HTTPСоединение(АдресСервера_, , , , , , Соединение_);
	Если СоединениеHTTP_ = Неопределено Тогда
		ТекстОшибки_ = НСтр("ru = 'Не удалось установить соединение с сервером:
						   |%1'");
		ТекстОшибки_ = СтрШаблон(ТекстОшибки_, ОписаниеОшибкиУстановкиСоединения_);
		ЗаписьЖурналаРегистрации(
			"Обмен данными с сервисом идентификации: Ошибка соединения", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки_
		);
		
		РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		РезультатОбмена_.Вставить("Результат", ТекстОшибки_);
		РезультатОбмена_.Вставить("СообщениеОтвет", ТекстОшибки_);
		РезультатОбмена_.Вставить("Успех", Ложь);
		Возврат РезультатОбмена_;
	КонецЕсли;
	
	ДатаЗапроса_ = ТекущаяДатаСеанса();
	
	Попытка
		
		HTTPЗапрос_ = Новый HTTPЗапрос(РесурсНаСервере_);
		
		HTTPЗапрос_.УстановитьТелоИзСтроки(Запрос);
		
		ЗаголовкиHTTP_ = HTTPЗапрос_.Заголовки;
		ЗаголовкиHTTP_.Вставить("Content-Type", "text/xml");
		
		//Запись в журнал регистрации xml-строки об отправке сообщений в сервис идентификации
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен данными с сервисом идентификации. Отправка сообщений в сервис идентификации.'"),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Запрос
		);
		
		HTTPОтвет_ = СоединениеHTTP_.ОтправитьДляОбработки(HTTPЗапрос_);
		
		СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
		
		РезультатОбмена_.Вставить("СообщениеОтвет", СтрокаОтвета_);
		
		ДатаОтвета_ = ТекущаяДатаСеанса();
		
		Если Не ЗапросРезультата Тогда
			РезультатОбработки_ = РазобратьОтветСервераSendIdentityRequest(СтрокаОтвета_);
		Иначе
			РезультатОбработки_ = РазобратьОтветСервераGetIdentityRequest(СтрокаОтвета_);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РезультатОбмена_, РезультатОбработки_);
		
	Исключение
		
		ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			"Обмен данными с ФСС: Ошибка запроса HTTP",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки_
		);
		
		РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		РезультатОбмена_.Вставить("Результат", ТекстОшибки_);
		РезультатОбмена_.Вставить("Успех", Ложь);
		ДатаОтвета_ = ТекущаяДатаСеанса();
	КонецПопытки;
	
	РезультатОбмена_.Вставить("ДатаЗапроса", ДатаЗапроса_);
	РезультатОбмена_.Вставить("ДатаОтвета", ДатаОтвета_);
	
	Возврат РезультатОбмена_;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

/// Запускает фоновое выполнение запросов к очереди сервиса идентификации.
///
Процедура ЗапуститьФоновоеЗадание() Экспорт
	ИмяМетода_ = "ФедеральныеВебСервисыСервисИдентификации.ЗапроситьДанныеИзОчередиСервисаИдентификации";
	
	// Проверка, выполняется ли фоновое задание по запросу очереди из СМЭВ 3.
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", ИмяМетода_);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗадания_ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФоновыеЗадания_.Количество() = 0 Тогда
		НаименованиеФоновогоЗадания_ = ИмяМетода_;
		ФоновыеЗадания.Выполнить(ИмяМетода_, , , НаименованиеФоновогоЗадания_);
	КонецЕсли;
КонецПроцедуры

/// Выполнение запроса сообщений из очереди сервиса идентификации.
///
Процедура ЗапроситьДанныеИзОчередиСервисаИдентификации() Экспорт
	
	// Проверяем наличие заявок, которые ожидают ответа от сервиса идентификации.
	
	СледующийЗапросВОчереди_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисИдентификации.СледующийЗапросВОчереди();
	Если СледующийЗапросВОчереди_ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеЗапрос_ = ПолучитьСообщениеGetIdentityRequest(
		СледующийЗапросВОчереди_.ИдентификаторСообщенияИзСервиса,
		СледующийЗапросВОчереди_.OIDМО
	);
	
	РезультатОбмена_ = ОтправитьЗапросВСервисИдентификации(СообщениеЗапрос_, Истина);
	
	РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисИдентификации.ЗаписатьОтвет(
		СледующийЗапросВОчереди_.ИдентификаторСообщенияИзМИС,
		РезультатОбмена_.Статус,
		РезультатОбмена_.СообщениеОтвет,
		РезультатОбмена_.ДатаОтвета,
	);
	
	ЗапроситьДанныеИзОчередиСервисаИдентификации();
	
КонецПроцедуры

Функция ПолучитьАдресСервисаИдентификации()
	Возврат Константы.ФедеральныеВебСервисыСервисИдентификацииАдрес.Получить();
КонецФункции

Функция ПолучитьИдентификаторИПС()
	Возврат Константы.ФедеральныеВебСервисыИдентификаторИСвИПС.Получить();
КонецФункции

Функция ПолучитьДанныеПациентаИзЗапроса(СтрокаXML)
	
	ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(СтрокаXML);
	РазыменовательПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИСервисИдентификации();
	
	Результат_ = Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, ДокументВид, ДокументНомер, ДокументСерия, OID");
	
	ТипРезСтрока_ = ТипРезультатаDOMXPath.Строка;
	
	XPathIdentityRequestRequest_ = "//egisz:sendIdentityRequest/egisz:IdentityRequestRequest";
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:MedicalOrgOID/text()";
	OID_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Результат_.OID = OID_;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:FamilyName/text()";
	Фамилия_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Результат_.Фамилия = Фамилия_;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:FirstName/text()";
	Имя_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Результат_.Имя = Имя_;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:Patronymic/text()";
	Отчество_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Если ЗначениеЗаполнено(Отчество_) Тогда
		Результат_.Отчество = Отчество_;
	КонецЕсли;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:BirthDate/text()";
	ДатаРождения_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Результат_.ДатаРождения = ДатаИзСтрокиyyyyMMdd(ДатаРождения_);
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:IdentityDocument/egisz:DocType/text()";
	ДокументВид_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Если ЗначениеЗаполнено(ДокументВид_) Тогда
		Результат_.ДокументВид = ДокументВид_;
	КонецЕсли;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:IdentityDocument/egisz:DocSer/text()";
	ДокументСерия_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Если ЗначениеЗаполнено(ДокументСерия_) Тогда
		Результат_.ДокументСерия = ДокументСерия_;
	КонецЕсли;
	
	XPath_ = XPathIdentityRequestRequest_ + "/egisz:IdentityDocument/egisz:DocNum/text()";
	ДокументНомер_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath_, ДокументDOM_, РазыменовательПИ_, ТипРезСтрока_).СтроковоеЗначение;
	Если ЗначениеЗаполнено(ДокументНомер_) Тогда
		Результат_.ДокументНомер = ДокументНомер_;
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

#Область ОбработкаОтветов

Функция РазобратьОтветСервераSendIdentityRequest(СтрокаXML)
	
	РазыменовательПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИСервисИдентификации();
	
	Результат_ = Новый Структура("Успех, Статус, Идентификатор, Результат, ОтветSOAP");
	
	ЧтениеXML_ = Новый ЧтениеXML;
	ЧтениеXML_.УстановитьСтроку(СтрокаXML);
	ПостроительDOM_ = Новый ПостроительDOM;
	ДокDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
	
	ТипРезСтрока_ = ТипРезультатаDOMXPath.Строка;
	ТипРезИтератор_ = ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов;
	
	ТипРезультата_ = ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел;
	XPath_ = "//SOAP-ENV:Body/*";
	РезультатXPath_ = ДокDOM_.ВычислитьВыражениеXPath(
		XPath_, ДокDOM_, РазыменовательПИ_, ТипРезультата_
	);
	
	ТелоSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
	ТелоSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ТелоSOAP_);
	
	Результат_.ОтветSOAP = ТелоSOAPСтрокой_;
	
	XPath_ = "//SOAP-ENV:Body/SOAP-ENV:Fault/faultcode/text()";
	
	РезКодОшибки_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
	
	Если ЗначениеЗаполнено(РезКодОшибки_.СтроковоеЗначение) Тогда
		Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		Результат_.Вставить("Успех", Ложь);
		
		XPath_ = "//SOAP-ENV:Body/@wsu:Id";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Результат_.Вставить("Идентификатор", Рез_.СтроковоеЗначение);
		
		ОписаниеОшибки_ = РезКодОшибки_.СтроковоеЗначение;
		XPath_ = "//SOAP-ENV:Body/SOAP-ENV:Fault/faultstring/text()";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
			ОписаниеОшибки_ = ОписаниеОшибки_ + " " + Рез_.СтроковоеЗначение;
		КонецЕсли;
		Результат_.Вставить("Результат", ОписаниеОшибки_);
	Иначе
		
		XPath_ = "//SOAP-ENV:Body/egisz:sendIdentityResponse/egisz:IdentityRequestResponse/egisz:status/text()";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Если Рез_.СтроковоеЗначение = "error" Тогда
			Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
			Результат_.Вставить("Успех", Ложь);
			
			XPathОшибки_ = "//SOAP-ENV:Body/egisz:sendIdentityResponse/egisz:IdentityRequestResponse/egisz:errors/egisz:item";
			РезОшибки_ = ДокDOM_.ВычислитьВыражениеXPath(XPathОшибки_, ДокDOM_, РазыменовательПИ_, ТипРезИтератор_);
			
			Элемент_ = РезОшибки_.ПолучитьСледующий();
			МассивОшибок_ = Новый Массив;
			Пока Элемент_ <> Неопределено Цикл
				XPath_ = XPathОшибки_ + "/egisz:message/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				МассивОшибок_.Добавить(Рез_.СтроковоеЗначение);
				Элемент_ = РезОшибки_.ПолучитьСледующий();
			КонецЦикла;
			Результат_.Вставить("Результат", СтрСоединить(МассивОшибок_, ";"));
		Иначе
			Результат_.Вставить("Результат", "Запрос принят на обработку");
			Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ВПроцессеОбработки);
			Результат_.Вставить("Успех", Истина);
		КонецЕсли;
		
		XPath_ = "//SOAP-ENV:Body/egisz:sendIdentityResponse/egisz:IdentityRequestResponse/egisz:RequestMessageID/text()";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Результат_.Вставить("Идентификатор", Рез_.СтроковоеЗначение);
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

Функция РазобратьОтветСервераGetIdentityRequest(СтрокаXML)
	
	РазыменовательПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИСервисИдентификации();
	
	Результат_ = Новый Структура("Успех, Статус, Идентификатор, Результат, ДанныеПолиса");
	
	ЧтениеXML_ = Новый ЧтениеXML;
	ЧтениеXML_.УстановитьСтроку(СтрокаXML);
	ПостроительDOM_ = Новый ПостроительDOM;
	ДокDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
	
	ТипРезСтрока_ = ТипРезультатаDOMXPath.Строка;
	ТипРезИтератор_ = ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов;
	
	ТипРезультата_ = ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел;
	XPath_ = "//SOAP-ENV:Body/*";
	РезультатXPath_ = ДокDOM_.ВычислитьВыражениеXPath(
		XPath_, ДокDOM_, РазыменовательПИ_, ТипРезультата_
	);
	
	ТелоSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
	ТелоSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ТелоSOAP_);
	
	XPath_ = "//SOAP-ENV:Body/SOAP-ENV:Fault/faultcode/text()";
	
	РезКодОшибки_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
	
	Если ЗначениеЗаполнено(РезКодОшибки_.СтроковоеЗначение) Тогда
		Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		Результат_.Вставить("Успех", Ложь);
		
		XPath_ = "//SOAP-ENV:Body/@wsu:Id";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Результат_.Вставить("Идентификатор", Рез_.СтроковоеЗначение);
		
		ОписаниеОшибки_ = РезКодОшибки_.СтроковоеЗначение;
		XPath_ = "//SOAP-ENV:Body/SOAP-ENV:Fault/faultstring/text()";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
			ОписаниеОшибки_ = ОписаниеОшибки_ + " " + Рез_.СтроковоеЗначение;
		КонецЕсли;
		Результат_.Вставить("Результат", ОписаниеОшибки_);
	Иначе
		
		XPath_ = "//SOAP-ENV:Body/egisz:getIdentityResponse/egisz:IdentityResultResponse/egisz:status/text()";
		Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
		Если Рез_.СтроковоеЗначение = "error" Тогда
			Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
			Результат_.Вставить("Успех", Ложь);
			
			XPathОшибки_ = "//SOAP-ENV:Body/egisz:getIdentityResponse/egisz:IdentityResultResponse/egisz:errors/egisz:item";
			РезОшибки_ = ДокDOM_.ВычислитьВыражениеXPath(XPathОшибки_, ДокDOM_, РазыменовательПИ_, ТипРезИтератор_);
			
			Элемент_ = РезОшибки_.ПолучитьСледующий();
			МассивОшибок_ = Новый Массив;
			Пока Элемент_ <> Неопределено Цикл
				XPath_ = XPathОшибки_ + "/egisz:message/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				МассивОшибок_.Добавить(Рез_.СтроковоеЗначение);
				Элемент_ = РезОшибки_.ПолучитьСледующий();
			КонецЦикла;
			Результат_.Вставить("Результат", СтрСоединить(МассивОшибок_, ";"));
		Иначе
			XPath_ = "//SOAP-ENV:Body/egisz:getIdentityResponse/egisz:IdentityResultResponse/egisz:Result/text()";
			Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
			Если Рез_.СтроковоеЗначение = "NoResponse" Тогда
				
				Результат_.Вставить("Результат", "Ответ не был получен от ГИС ОМС");
				Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ВПроцессеОбработки);
				
			ИначеЕсли Рез_.СтроковоеЗначение = "NotIdentified" Тогда
				
				Результат_.Вставить("Результат", "Отсутствуют сведения о страховании");
				Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.Выполнено);
				
			Иначе
				
				ДанныеПолиса_ = Новый Структура(
					"КодСубъекта, НаименованиеСубъекта, РеестровыйНомерМО, НаименованиеМО, НомерПолисаОМС, ВидПолиса, 
					|НомерВременногоПолиса, ДатаНачалаДействия, ДатаОкончанияДействия, ТелефонПредставителяСМО, ТелефонТФОМС"
				);
				
				XPathInsurance_ = "//SOAP-ENV:Body/egisz:getIdentityResponse/egisz:IdentityResultResponse/egisz:Insurance";
				
				XPath_ = XPathInsurance_ + "/egisz:Region/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("КодСубъекта", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:RegionName/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("НаименованиеСубъекта", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:InsuranceOrganizationCode/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("РеестровыйНомерМО", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:InsuranceOrganization/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("НаименованиеМО", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:UnitedPolicyNumber/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("НомерПолисаОМС", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:PolicyType/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("ВидПолиса", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:PolicyNumber/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("НомерВременногоПолиса", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:StartDate/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("ДатаНачалаДействия", ДатаИзСтрокиyyyyMMdd(Рез_.СтроковоеЗначение));
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:EndDate/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("ДатаОкончанияДействия", ДатаИзСтрокиyyyyMMdd(Рез_.СтроковоеЗначение));
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:InsuranceRepresentativePhoneNum/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("ТелефонПредставителяСМО", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				XPath_ = XPathInsurance_ + "/egisz:TfomsContactCenterHotlinePhoneNum/text()";
				Рез_ = ДокDOM_.ВычислитьВыражениеXPath(XPath_, ДокDOM_, РазыменовательПИ_, ТипРезСтрока_);
				Если ЗначениеЗаполнено(Рез_.СтроковоеЗначение) Тогда
					ДанныеПолиса_.Вставить("ТелефонТФОМС", Рез_.СтроковоеЗначение);
				КонецЕсли;
				
				Результат_.Вставить("ДанныеПолиса", ДанныеПолиса_);
				Результат_.Вставить("Результат", "Данные полиса ОМС получены");
				Результат_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.Выполнено);
			КонецЕсли;
			
			Результат_.Вставить("Успех", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

Функция ДатаИзСтрокиyyyyMMdd(Значение) Экспорт
	
	Попытка
		Возврат Дата(Лев(Значение, 4), Сред(Значение, 6, 2), Сред(Значение, 9, 2));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Возвращает Структуру Тега из Тела сообщения.
Функция ДанныеТега(Тело, ИмяТэга)
	
	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(Тело);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	getMessageResponse_ = DOM_.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru", ИмяТэга);
	
	Если getMessageResponse_.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ДанныеОтвета_ = Новый Структура;
		Dom2Структура(getMessageResponse_[0], ДанныеОтвета_);
	КонецЕсли;
	
	Возврат ДанныеОтвета_;
	
КонецФункции

Процедура Dom2Структура(Dom, Результат) Экспорт
	Для Каждого Узел_ Из Dom.ДочерниеУзлы Цикл
		
		ИмяУзла_ = УбратьПрефиксИзИмени(Узел_.ИмяУзла);
		
		Если Узел_.ДочерниеУзлы.Количество() > 0 И Узел_.ДочерниеУзлы[0].ИмяУзла <> "#text" Тогда
			
			Результат.Вставить(ИмяУзла_, Новый Структура);
			
			Dom2Структура(Узел_, Результат[ИмяУзла_]);
			
		Иначе
			Результат.Вставить(ИмяУзла_, Узел_.ТекстовоеСодержимое);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция УбратьПрефиксИзИмени(ИмяУзла)
	Номер_ = стрНайти(ИмяУзла, ":");
	Если Номер_ > 0 Тогда
		Возврат Прав(ИмяУзла, стрДлина(ИмяУзла) - Номер_);
	Иначе
		Возврат ИмяУзла;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ФормированиеСообщений

Функция СформироватьНовоеСообщенияДляСервисаИдентификации(ТелоСообщения, ИдКлиента, Заголовок)
	
	КонвертSOAP_ = ШаблонСообщенияSendIdentityRequest();
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%sendIdentityRequest%", ТелоСообщения);
	
	ХеширумыеОбласти_ = Новый Массив;
	
	Для Сч_ = 1 По 4 Цикл
		КонвертSOAP_ = СтрЗаменить(
			КонвертSOAP_,
			СтрЗаменить("%Идентификатор%Номер%%", "%Номер%", Сч_),
			Новый УникальныйИдентификатор
		);
		
		ПодписываемыеДанные_ = "id-" + Новый УникальныйИдентификатор;
		
		КонвертSOAP_ = СтрЗаменить(
			КонвертSOAP_,
			СтрЗаменить("%ОбластьХеш%Номер%%", "%Номер%", Сч_),
			ПодписываемыеДанные_
		);
		
		ПодписываемыеДанные_ = "#" + ПодписываемыеДанные_;
		Структура_ = Новый Структура;
		Структура_.Вставить(
			"XPathПодписываемыйТег",
			СтрШаблон(
				"(//. | //@* | //namespace::*)[
				|	ancestor-or-self::*[
				|		attribute::*[
				|			local-name()='Id'
				|			and string()='%1'
				|			and namespace-uri()='%2'
				|		]
				|	]
				|]",
				Сред(ПодписываемыеДанные_, 2),
				xmlns.wsu()
			)
		);
		
		Структура_.Вставить("ОбластьХеш", ОбластьХеш(ПодписываемыеДанные_, Сч_));
		
		ХеширумыеОбласти_.Добавить(Структура_);
	КонецЦикла;
	
	Структура_ = Новый Структура;
	Структура_.Вставить(
		"XPathПодписываемыйТег",
		СтрШаблон(
			"(//. | //@* | //namespace::*)[
			|	ancestor-or-self::*[
			|		attribute::*[
			|			local-name()='Id'
			|			and string()='%1'
			|		]
			|	]
			|]",
			Сред("#body", 2)
		)
	);
	Структура_.Вставить("ОбластьХеш", ОбластьХеш("#body", 5));
	
	ХеширумыеОбласти_.Добавить(Структура_);
	
	ПараметрыXMLDSig_ = ЭлектроннаяПодписьКлиентСервер.ПараметрыXMLDSig();
	
	ПараметрыXMLDSig_.Вставить("ХеширумыеОбласти", ХеширумыеОбласти_);
	
	ПараметрыXMLDSig_.XPathSignedInfo = СтрШаблон(
		"(//. | //@* | //namespace::*)[
		|	ancestor-or-self::*[
		|		local-name()='SignedInfo'
		|	]
		|]"
	);
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%ИдентификаторИС%", ПолучитьИдентификаторИПС());
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%АдресИС%", ПолучитьАдресСервисаИдентификации());
	
	UTC_ = УниверсальноеВремя(ТекущаяДатаСеанса());
	
	ДатаЗапроса_ = Формат(UTC_, "ДФ=yyyy-MM-ddTHH:mm:ss") + "." + (ТекущаяУниверсальнаяДатаВМиллисекундах()%1000) + "Z";
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%ДатаЗапроса%", ДатаЗапроса_);
	ПодписанныйКонверт_ = ПодписатьНаСервере(КонвертSOAP_, ПараметрыXMLDSig_);
	
	Возврат ПодписанныйКонверт_;
КонецФункции

Функция ПолучитьСообщениеGetIdentityRequest(RequestMessageID, OIDМО)

	КонвертSOAP_ = ШаблонСообщенияGetIdentityRequest();
	
	ХеширумыеОбласти_ = Новый Массив;
	
	Для Сч_ = 1 По 4 Цикл
		КонвертSOAP_ = СтрЗаменить(
			КонвертSOAP_,
			СтрЗаменить("%Идентификатор%Номер%%", "%Номер%", Сч_),
			Новый УникальныйИдентификатор
		);
		
		ПодписываемыеДанные_ = "id-" + Новый УникальныйИдентификатор;
		
		КонвертSOAP_ = СтрЗаменить(
			КонвертSOAP_,
			СтрЗаменить("%ОбластьХеш%Номер%%", "%Номер%", Сч_),
			ПодписываемыеДанные_
		);
		
		ПодписываемыеДанные_ = "#" + ПодписываемыеДанные_;
		Структура_ = Новый Структура;
		Структура_.Вставить(
			"XPathПодписываемыйТег",
			СтрШаблон(
				"(//. | //@* | //namespace::*)[
				|	ancestor-or-self::*[
				|		attribute::*[
				|			local-name()='Id'
				|			and string()='%1'
				|			and namespace-uri()='%2'
				|		]
				|	]
				|]",
				Сред(ПодписываемыеДанные_, 2),
				xmlns.wsu()
			)
		);
		
		Структура_.Вставить("ОбластьХеш", ОбластьХеш(ПодписываемыеДанные_, Сч_));
		
		ХеширумыеОбласти_.Добавить(Структура_);
	КонецЦикла;
	
	Структура_ = Новый Структура;
	Структура_.Вставить(
		"XPathПодписываемыйТег",
		СтрШаблон(
			"(//. | //@* | //namespace::*)[
			|	ancestor-or-self::*[
			|		attribute::*[
			|			local-name()='Id'
			|			and string()='%1'
			|		]
			|	]
			|]",
			Сред("#body", 2)
		)
	);
	Структура_.Вставить("ОбластьХеш", ОбластьХеш("#body", 5));
	
	ХеширумыеОбласти_.Добавить(Структура_);
	
	ПараметрыXMLDSig_ = ЭлектроннаяПодписьКлиентСервер.ПараметрыXMLDSig();
	
	ПараметрыXMLDSig_.Вставить("ХеширумыеОбласти", ХеширумыеОбласти_);
	
	ПараметрыXMLDSig_.XPathSignedInfo = СтрШаблон(
		"(//. | //@* | //namespace::*)[
		|	ancestor-or-self::*[
		|		local-name()='SignedInfo'
		|	]
		|]"
	);
	
	Данные_ = Новый Соответствие;
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%ИдентификаторИС%", ПолучитьИдентификаторИПС());
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%АдресИС%", ПолучитьАдресСервисаИдентификации());
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%ИдентификаторЗапроса%", RequestMessageID);
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%OID_МО%", OIDМО);
	
	UTC_ = УниверсальноеВремя(ТекущаяДатаСеанса());
	
	ДатаЗапроса_ = Формат(UTC_, "ДФ=yyyy-MM-ddTHH:mm:ss") + "." + (ТекущаяУниверсальнаяДатаВМиллисекундах()%1000) + "Z";
	КонвертSOAP_ = СтрЗаменить(КонвертSOAP_, "%ДатаЗапроса%", ДатаЗапроса_);
	
	ПодписанныйКонверт_ = ПодписатьНаСервере(КонвертSOAP_, ПараметрыXMLDSig_);
	
	Возврат ПодписанныйКонверт_;
	
КонецФункции

Функция ШаблонСообщенияSendIdentityRequest()
	Возврат
		"<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:a=""http://www.w3.org/2005/08/addressing"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
		|	<s:Header>
		|	<wsse:Security xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
		|	<wsse:BinarySecurityToken EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" wsu:Id=""X509-%Идентификатор1%"">%BinarySecurityToken%</wsse:BinarySecurityToken>
		|		<wsu:Timestamp wsu:Id=""TS-%Идентификатор2%"">
		|			<wsu:Created>%ДатаЗапроса%</wsu:Created>
		|		</wsu:Timestamp>
		|		<ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" Id=""SIG-%Идентификатор3%"">
		|			<ds:SignedInfo>
		|				<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|				<ds:SignatureMethod Algorithm=""%SignatureMethod%""/>
		|				%Хеш1%
		|				%Хеш2%
		|				%Хеш3%
		|				%Хеш4%
		|				%Хеш5%
		|				</ds:SignedInfo>
		|				<ds:SignatureValue xmlns=""http://www.w3.org/2000/09/xmldsig#"">%SignatureValue%</ds:SignatureValue>
		|				<ds:KeyInfo>
		|					<wsse:SecurityTokenReference>
		|						<wsse:Reference URI=""#X509-%Идентификатор1%""/>
		|					</wsse:SecurityTokenReference>
		|				</ds:KeyInfo>
		|			</ds:Signature>
		|		</wsse:Security>
		|		<transportHeader xmlns=""http://egisz.rosminzdrav.ru"">
		|			<authInfo>
		|				<clientEntityId>%ИдентификаторИС%</clientEntityId>
		|			</authInfo>
		|		</transportHeader>
		|		<a:MessageID xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш1%"">%Идентификатор4%</a:MessageID>
		|		<a:ReplyTo xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш2%"">
		|			<a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>
		|		</a:ReplyTo>
		|		<a:To xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш3%"">%АдресИС%</a:To>
		|		<a:Action xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш4%"">sendIdentityRequest</a:Action>
		|	</s:Header>
		|	<s:Body xmlns:d2p1=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" d2p1:Id=""body"">
		|		%sendIdentityRequest%
		|	</s:Body>
		|</s:Envelope>"
	;
КонецФункции

Функция ШаблонСообщенияGetIdentityRequest()
	Возврат
		"<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:a=""http://www.w3.org/2005/08/addressing"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
		|	<s:Header>
		|	<wsse:Security xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
		|	<wsse:BinarySecurityToken EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" wsu:Id=""X509-%Идентификатор1%"">%BinarySecurityToken%</wsse:BinarySecurityToken>
		|		<wsu:Timestamp wsu:Id=""TS-%Идентификатор2%"">
		|			<wsu:Created>%ДатаЗапроса%</wsu:Created>
		|		</wsu:Timestamp>
		|		<ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" Id=""SIG-%Идентификатор3%"">
		|			<ds:SignedInfo>
		|				<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|				<ds:SignatureMethod Algorithm=""%SignatureMethod%""/>
		|				%Хеш1%
		|				%Хеш2%
		|				%Хеш3%
		|				%Хеш4%
		|				%Хеш5%
		|				</ds:SignedInfo>
		|				<ds:SignatureValue xmlns=""http://www.w3.org/2000/09/xmldsig#"">%SignatureValue%</ds:SignatureValue>
		|				<ds:KeyInfo>
		|					<wsse:SecurityTokenReference>
		|						<wsse:Reference URI=""#X509-%Идентификатор1%""/>
		|					</wsse:SecurityTokenReference>
		|				</ds:KeyInfo>
		|			</ds:Signature>
		|		</wsse:Security>
		|		<transportHeader xmlns=""http://egisz.rosminzdrav.ru"">
		|			<authInfo>
		|				<clientEntityId>%ИдентификаторИС%</clientEntityId>
		|			</authInfo>
		|		</transportHeader>
		|		<a:MessageID xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш1%"">%Идентификатор4%</a:MessageID>
		|		<a:ReplyTo xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш2%"">
		|			<a:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>
		|		</a:ReplyTo>
		|		<a:To xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш3%"">%АдресИС%</a:To>
		|		<a:Action xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""%ОбластьХеш4%"">getIdentityRequest</a:Action>
		|	</s:Header>
		|	<s:Body xmlns:d2p1=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" d2p1:Id=""body"">
		|		<ns1:getIdentityRequest xmlns:ns1=""http://egisz.rosminzdrav.ru"">
		|			<ns1:IdentityResultRequest>
		|				<ns1:MedicalOrgOID>%OID_МО%</ns1:MedicalOrgOID>
		|				<ns1:RequestMessageID>%ИдентификаторЗапроса%</ns1:RequestMessageID>
		|			</ns1:IdentityResultRequest>
		|		</ns1:getIdentityRequest>
		|	</s:Body>
		|</s:Envelope>"
	;
КонецФункции

Функция СформироватьСообщениеОбОшибкеSendIdentityResponse(Ошибка)
	Возврат
		СтрШаблон(
			"<ns2:sendIdentityResponse xmlns:ns2=""http://egisz.rosminzdrav.ru"">
			|	<ns2:IdentityRequestResponse>
			|		<ns2:RequestMessageID>%1</ns2:RequestMessageID>
			|		<ns2:status>error</ns2:status>
			|		<ns2:errors>
			|			<ns2:item>
			|				<ns2:message>%2</ns2:message>
			|			</ns2:item>
			|		</ns2:errors>
			|	</ns2:IdentityRequestResponse>
			|</ns2:sendIdentityResponse>",
			Новый УникальныйИдентификатор,
			Ошибка
		);
КонецФункции

Функция СформироватьСообщениеОбОшибкеGetIdentityResponse(Ошибка)
	Возврат
		СтрШаблон(
			"<ns2:getIdentityResponse xmlns:ns2=""%1"">
			|	<ns2:IdentityResultResponse>
			|		<ns2:Result>Error</ns2:Result>
			|		<ns2:RequestMessageID>%2</ns2:RequestMessageID>
			|		<ns2:status>error</ns2:status>
			|		<ns2:errors>
			|			<ns2:item>
			|				<ns2:message>%3</ns2:message>
			|			</ns2:item>
			|		</ns2:errors>
			|	</ns2:IdentityResultResponse>
			|</ns2:getIdentityResponse>",
			xmlns.egisz(),
			Новый УникальныйИдентификатор,
			Ошибка
		);
КонецФункции

#КонецОбласти

#Область ФормированиеПодписи

Функция ОбластьХеш(URI, Номер)
	
	Возврат СтрЗаменить(
		"<ds:Reference URI=""%URI%"">
		|            <ds:Transforms>
		|              <ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|            </ds:Transforms>
		|            <ds:DigestMethod Algorithm=""%DigestMethod%""/>
		|            <ds:DigestValue>%DigestValue%</ds:DigestValue>
		|          </ds:Reference>",
		"%URI%",
		URI
	);
КонецФункции

Функция ПодписатьНаСервере(КонвертSOAP, ДанныеАлгоритмаПодписания)
	
	Сертификат_ = ФедеральныеВебСервисыЭлектроннаяПодпись.ПолучитьСертификатПодписанияСообщенийSOAP();
	РеквизитыСертификата_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат_, "Программа,ДанныеСертификата");
	МенеджерКриптографии_ = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Подписание");
	
	Пароль_ = ФедеральныеВебСервисыЭлектроннаяПодпись.ПарольКСертификату(Сертификат_);
	
	Если ЗначениеЗаполнено(Пароль_) Тогда
		МенеджерКриптографии_.ПарольДоступаКЗакрытомуКлючу = Пароль_;
	КонецЕсли;
	
	ДанныеСертификата_ = РеквизитыСертификата_.ДанныеСертификата.Получить();
	СертификатДД_ = Новый СертификатКриптографии(ДанныеСертификата_);
	
	Конверт_ = ЭлектроннаяПодписьСлужебный.Подписать(КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатДД_, МенеджерКриптографии_);
	
	Возврат Конверт_;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти