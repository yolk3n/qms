
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает валюту регламентированного учета
//
// Возвращаемое значение
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

// Процедура получает метод оценки стоимости товаров.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация
//	Дата - Дата, на которую необходимо получить метод оценки
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - Метод оценки стоимости товаров
//
Функция ПолучитьМетодОценкиСтоимостиТоваров(Знач Организация, Знач Дата) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Настройка.МетодОценки КАК МетодОценки
	|ИЗ
	|	РегистрСведений.НастройкаМетодовОценкиСтоимостиТоваров.СрезПоследних(
	|		&Период, Организация = &Организация
	|	) КАК Настройка
	|");
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.МетодОценки;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает виды платежных карт, обслуживаемые эквайринговым терминалом
//
// Параметры
//	ЭквайринговыйТерминал - СправочникСсылка.ЭквайринговыеТерминалы
//
// Возвращаемое значение
//	Массив - список видов обслуживаемых карт
//
Функция ПолучитьВидыПлатежныхКартЭквайринговогоТерминала(ЭквайринговыйТерминал) Экспорт
	
	Если ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		Менеджер = Справочники.ЭквайринговыеТерминалы;
	Иначе
		Менеджер = ОбщегоНазначения.ОбщийМодуль("ЗначениеНастроекПовтИсп");
	КонецЕсли;
	
	Возврат Менеджер.ПолучитьВидыПлатежныхКартЭквайринговогоТерминала(ЭквайринговыйТерминал);
	
КонецФункции

// Функция возвращает структуру с параметрами шаблона серий номенклатуры
// Параметры:
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
// Возвращаемое значение
//  Структура:
//     ИспользоватьСерии - если для вида номенклатуры серии не ведутся, то в этом параметре возвращается ЛОЖЬ,
//                         а остальные заполняются значениями по умолчанию
//     ВидНоменклатуры
//     ИспользоватьНомерСерии
//     ИспользоватьСрокГодностиСерии
//     УказыватьСрокГодностиСерииСТочностьюДоЧасов
//     ФорматнаяСтрокаСрокаГодности
//
Функция ПараметрыСерийНоменклатуры(ВидНоменклатуры) Экспорт
	
	Возврат Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
	
КонецФункции

// Возвращает единицу измерения "Доза"
//
Функция ПолучитьЕдиницуИзмеренияДоз() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("639"))[0];
	
КонецФункции

// Возвращает единицу измерения "Штука"
//
Функция ПолучитьЕдиницуИзмеренияШтук() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("796"))[0];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ ЗНАЧЕНИЙ ПО УМОЛЧАНИЮ
#Область ЗначенияПоУмолчанию

// Получает организацию, если она одна в ИБ
// Если переданная в качестве параметра организация уже заполнена - возвращает ее.
// Если организация не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе организацию. Если организация
// в базе не одна - возвращает пустую ссылку на организацию
//
// Параметры
//  Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.Организации
//
Функция ПолучитьОрганизациюПоУмолчанию(Знач Организация = Неопределено, ТаблицаОбъекта = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация;
	КонецЕсли;
	
	Если ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию(ТаблицаОбъекта);
	КонецЕсли;
	
	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецФункции

// Возвращает склад аптеки, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, для которого заполняется склад
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.Склады
//
Функция ПолучитьСкладПоУмолчанию(Знач Склад = Неопределено, Подразделение = Неопределено, ТаблицаОбъекта = Неопределено) Экспорт
	
	Возврат ПолучитьСкладПоУмолчаниюСлужебный(Склад, Перечисления.ТипыСкладов.ТипыСкладовАптеки(), Подразделение, ТаблицаОбъекта);
	
КонецФункции

// Возвращает розничный склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, для которого заполняется склад
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.Склады
//
Функция ПолучитьРозничныйСкладПоУмолчанию(Знач Склад = Неопределено, Подразделение = Неопределено, ТаблицаОбъекта = Неопределено) Экспорт
	
	Возврат ПолучитьСкладПоУмолчаниюСлужебный(Склад, Перечисления.ТипыСкладов.ТипыРозничныхСкладов(), Подразделение, ТаблицаОбъекта);
	
КонецФункции

// Возвращает склад аптеки, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, для которого заполняется склад
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.Склады
//
Функция ПолучитьСкладАптекиПоУмолчанию(Знач Склад = Неопределено, Подразделение = Неопределено, ТаблицаОбъекта = Неопределено) Экспорт
	
	Возврат ПолучитьСкладПоУмолчаниюСлужебный(Склад, Перечисления.ТипыСкладов.БольничнаяАптека, Подразделение, ТаблицаОбъекта);
	
КонецФункции

// Возвращает склад отделения, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//  Отделение - СправочникСсылка.ОтделенияОрганизаций - Отделение, для которого заполняется склад
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.Склады
//
Функция ПолучитьСкладОтделенияПоУмолчанию(Знач Склад = Неопределено, Отделение = Неопределено, ТаблицаОбъекта = Неопределено) Экспорт
	
	Возврат ПолучитьСкладПоУмолчаниюСлужебный(Склад, Перечисления.ТипыСкладов.Отделение, Отделение, ТаблицаОбъекта);
	
КонецФункции

// Возвращает подразделение, если оно одно в ИБ
// Если переданное в качестве параметра подразделение уже заполнено - возвращает его.
// Если подразделение не передано в качестве параметра или передано пустое,
// возвращает единственное в информационной базе подразделение. Если подразделение
// в базе не одно - возвращает пустую ссылку на подразделение
//
// Параметры
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, которое нужно заполнить
//  Организация - владелец подразделения
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.ПодразделенияОрганизаций
//
Функция ПолучитьПодразделениеПоУмолчанию(Знач Подразделение = Неопределено, Организация, ТаблицаОбъекта = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Владелец") = Организация Тогда
			Возврат Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.ПолучитьПодразделениеПоУмолчанию(Организация, ТаблицаОбъекта);
	
КонецФункции

// Возвращает отделение, если оно одно в ИБ
// Если переданное в качестве параметра отделение уже заполнено - возвращает его.
// Если отделение не передано в качестве параметра или передано пустое,
// возвращает единственное в информационной базе отделение. Если отделение
// в базе не одно - возвращает пустую ссылку на отделение
//
// Параметры
//  Отделение - СправочникСсылка.ОтделенияОрганизаций
//  Организация - владелец отделения
//  ТаблицаОбъекта - Строка - имя таблицы (например: "Документ.ПоступлениеТоваров")
//
// Возвращаемое значение
//  СправочникСсылка.ОтделенияОрганизаций
//
Функция ПолучитьОтделениеПоУмолчанию(Знач Отделение = Неопределено, Организация, ТаблицаОбъекта = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Отделение) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отделение, "Владелец") = Организация Тогда
			Возврат Отделение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ОтделенияОрганизаций.ПолучитьОтделениеПоУмолчанию(Организация, ТаблицаОбъекта);
	
КонецФункции

// Возвращает договор, если он один в ИБ
// Если переданный в качестве параметра договор уже заполнен - возвращает его.
// Если договор не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе договор. Если договор
// в базе не один - возвращает пустую ссылку на Договор
//
// Параметры
// 	Подразделение - СправочникСсылка.ДоговорыКонтрагентов - Договор, который нужно заполнить
//	Контрагент - Контрагент, с которым заключен договор
//  Организация - организация, которая заключила договор
//
// Возвращаемое значение
// 	СправочникСсылка.ДоговорыКонтрагентов
//
Функция ПолучитьДоговорПоУмолчанию(Знач Договор = Неопределено, Знач Контрагент, Знач Организация) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ЗапрашиваемыеРеквизиты = Новый Структура("Организация");
		Если ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
			ЗапрашиваемыеРеквизиты.Вставить("Контрагент", "Владелец");
		Иначе
			ЗапрашиваемыеРеквизиты.Вставить("Контрагент");
		КонецЕсли;
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ЗапрашиваемыеРеквизиты);
		Если РеквизитыДоговора.Контрагент = Контрагент И РеквизитыДоговора.Организация = Организация Тогда
			Возврат Договор;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		МенеджерДоговоров = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Возврат МенеджерДоговоров.ПолучитьДоговорПоУмолчанию(Контрагент, Организация);
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

// Возвращает эквайринговый терминал, если он один в ИБ
//
// Параметры
//	КассаККМ - СправочникСсылка
//
// Возвращаемое значение
// 	СправочникСсылка.ЭквайринговыеТерминалы
//
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(Знач КассаККМ, Организация = Неопределено, Знач ЭквайринговыйТерминал = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		Возврат ЭквайринговыйТерминал;
	КонецЕсли;
	
	Возврат Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(КассаККМ, Организация);
	
КонецФункции

#КонецОбласти // ЗначенияПоУмолчанию

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНККЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСкладПоУмолчаниюСлужебный(Знач Склад = Неопределено, ТипСклада = Неопределено, Знач Подразделение = Неопределено, ТаблицаОбъекта = Неопределено)

	Если ЗначениеЗаполнено(Склад) Тогда
		Возврат Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ОсновнойСклад = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, Новый Структура("Ссылка, ТипСклада", "ОсновнойСклад", "ОсновнойСклад.ТипСклада"));
		Если ТипЗнч(ТипСклада) = Тип("Массив") Тогда
			Если ТипСклада.Найти(ОсновнойСклад.ТипСклада) <> Неопределено Тогда
				Возврат ОсновнойСклад.Ссылка;
			КонецЕсли;
		ИначеЕсли ТипСклада = ОсновнойСклад.ТипСклада Тогда
			Возврат ОсновнойСклад.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Склады.ПолучитьСкладПоУмолчанию(ТипСклада, ТаблицаОбъекта);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
