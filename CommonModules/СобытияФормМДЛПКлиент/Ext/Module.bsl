
#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров заполнения табличной части.
//
Функция СтруктураПараметрыЗаполнения() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПересчитатьСумму"             , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьЦену"              , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц"  , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок", Ложь);
	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки"           , Истина);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Обработчик события перед удалением строки товара.
//
Процедура ТоварыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	// Необходимо скопировать идентификаторы строк,
	// т.к. при удалении строки таблицы удаляется и элемент формы.
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из ИдентификаторыСтрок Цикл
		
		Объект = Форма.Объект;
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Отбор = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
		
		НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			Объект.НомераУпаковок.Удалить(СтрокаТЧ);
		КонецЦикла;
		Объект.Товары.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УдалитьСтрокиУпаковокИзТабличнойЧасти(ТабличнаяЧасть, СтрокиКУдалению, СоставУпаковок = Неопределено, НомераУпаковокСостава = Неопределено, ИерархияУпаковок = Неопределено) Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтроки Из СтрокиКУдалению Цикл
		ТекущаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Состояние = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СостояниеПодтверждения"), ТекущаяСтрока.СостояниеПодтверждения, Неопределено);
		Если ЗначениеЗаполнено(Состояние)
		   И Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
		   И Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ") Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеСтроки.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из УдаляемыеСтроки Цикл
		Если СоставУпаковок <> Неопределено Тогда
			НайденныйСтроки = СоставУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из НайденныйСтроки Цикл
				Если НомераУпаковокСостава <> Неопределено Тогда
					НайденныйСтрокиНомеровУпаковок = НомераУпаковокСостава.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
					Для Каждого СтрокаНомераУпаковки Из НайденныйСтрокиНомеровУпаковок Цикл
						НомераУпаковокСостава.Удалить(СтрокаНомераУпаковки);
					КонецЦикла;
				КонецЕсли;
				СоставУпаковок.Удалить(СтрокаСостава);
			КонецЦикла;
		КонецЕсли;
		Если ИерархияУпаковок <> Неопределено Тогда
			НайденныйСтрокиИерархииУпаковок = ИерархияУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
			Для Каждого СтрокаИерархии Из НайденныйСтрокиИерархииУпаковок Цикл
				ИерархияУпаковок.Удалить(СтрокаИерархии);
			КонецЦикла;
		КонецЕсли;
		ТабличнаяЧасть.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Возврат УдаляемыеСтроки.Количество() > 0;
	
КонецФункции

// Показывает оповещение пользователя об окончании заполнения серий
//
// Параметры:
//  Результат - Структура - см. ИнтеграцияМДЛП.РезультатЗаполненияСерий
//
Процедура ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии заполнены'"),
			,
			НСтр("ru = 'Серии заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Серии не заполнены'"),
			,
			НСтр("ru = 'Ни в одной строке серии не заполнены'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Результат.Ошибки);
	
КонецПроцедуры

// Процедура показывает ввод штрихкода и оповещает в случае успешного ввода
//
// Параметры:
//  ОповещениеУспешногоВвода - ОписаниеОповещения - описание оповещения успешного ввода штрихкода
//  Заголовок                - Строка             - переопределяемый заголовок
//
Процедура ПоказатьВводШтрихкода(ОповещениеУспешногоВвода, Количество = Неопределено, Заголовок = "") Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = 'Введите штрихкод'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура(
		"ОповещениеУспешногоВвода, Количество",
		ОповещениеУспешногоВвода,
		Количество);
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьВводШтрихкодаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводЗначения(Оповещение, "", Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(
		ОповещениеУспешногоВвода,
		Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
	
КонецПроцедуры

#КонецОбласти
