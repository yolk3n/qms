
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеНастройки

// Определяет, используется ли обмен электронными документами с контрагентами.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево
Функция ИспользуетсяОбменЭлектроннымиДокументами(КонтекстДиагностики = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КонтекстДиагностики <> Неопределено Тогда
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Выполнение действий по электронным документам'"),
			НастройкиЭДОКлиентСервер.ВидОшибкиНеВключеноИспользованиеОбменаЭД(),
			ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, используется ли обмен электронными документами с между организациями.
// 
// Возвращаемое значение:
// 	Булево
Функция ОбменЭлектроннымиДокументамиМеждуОрганизациями() Экспорт
	
	Возврат ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭДМеждуОрганизациями");;
	
КонецФункции

// Определяет, используется ли партнеры и контрагенты.
// 
// Возвращаемое значение:
// 	Булево
Функция ИспользуютсяПартнерыИКонтрагенты() Экспорт
	
	Возврат ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьПартнеровИКонтрагентов");
	
КонецФункции

// Определяет, используется ли прямой обмен электронными документами.
// 
// Возвращаемое значение:
// 	Булево
Функция ИспользуетсяПрямойОбменЭлектроннымиДокументами() Экспорт
	
	Возврат ПрямойОбменДоступен()
		И ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьПрямойОбменЭлектроннымиДокументами");
	
КонецФункции

// Определяет, доступно ли использование прямого обмена электронными документами.
// 
// Возвращаемое значение:
// 	Булево
Функция ПрямойОбменДоступен() Экспорт
	
	Использовать = Ложь;
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Использовать = ИнтеграцияЭДО.ИспользоватьПрямойОбмен();
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

// Определяет, используется ли механизм ознакомления с электронными документами.
// 
// Возвращаемое значение:
// 	 Булево
Функция ОзнакомлениеСЭлектроннымиДокументами() Экспорт
	
	Возврат Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Получить();
	
КонецФункции

// Определяет, используется ли отложенная отправка электронных документов.
// 
// Возвращаемое значение:
// 	Булево
Функция ОтложеннаяОтправкаЭлектронныхДокументов() Экспорт
	
	Возврат Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить();
	
КонецФункции

// Определяет, создаются ли контрагенты автоматически.
// 
// Возвращаемое значение:
// 	Произвольный, Булево - Описание
Функция СоздаватьКонтрагентовАвтоматически() Экспорт
	
	Возврат Константы.СоздаватьКонтрагентовАвтоматическиБЭД.Получить();
	
КонецФункции

// Возвращает срок хранения транспортного контейнера ЭДО.
// 
// Возвращаемое значение:
// 	Число, Произвольный - Описание
Функция СрокХраненияТранспортногоКонтейнера() Экспорт
	
	Возврат Константы.СрокХраненияТранспортногоКонтейнераЭДО.Получить();
	
КонецФункции

// Определяет, нужно ли отправлять входящие документы на утверждение.
// 
// Возвращаемое значение:
// 	Булево
Функция ОтправлятьВходящиеДокументыНаУтверждение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ОтправлятьВходящиеДокументыНаУтверждение.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Определяет, используется ли внутренние электронные документы.
// 
// Возвращаемое значение:
// 	Булево
Функция ИспользуютсяВнутренниеДокументы() Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ИспользуютсяВнутренниеДокументы();
	
КонецФункции

// Возвращает признак использования сертификатов пользователя в облачном сервисе.
//
// Возвращаемое значение:
//  Булево - флаг использования в сертификатов пользователя в облачном сервисе.
//
Функция ИспользованиеСертификатовОблачногоСервисаВозможно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользованиеВозможно = Константы.ИспользоватьСертификатыОблачногоСервисаВЭДО.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользованиеВозможно;
	
КонецФункции

// Включает / отключает возможность обмена электронными документами.
// 
Процедура УстановитьИспользованиеЭДО(Используется) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	ИспользуетсяОбменЭД = ИспользуетсяОбменЭлектроннымиДокументами(КонтекстДиагностики);
	Если ИспользуетсяОбменЭД <> Используется Тогда
		Константы.ИспользоватьОбменЭД.Установить(Используется);
	КонецЕсли;
	
	// Использование электронных подписей только включаем. Выключение не производим, поскольку они могут использоваться
	// для другого функционала 
	Если Используется Тогда
		ИспользуютсяЭП = НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
		Если Не ИспользуютсяЭП Тогда
			КриптографияБЭД.ВключитьИспользованиеЭлектронныхПодписей();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Запускает проверку настроек регламентных заданий в фоне.
// 
// Параметры:
// 	НовоеЗначение - Булево
// 	ИдентификаторФормы - Строка
// Возвращаемое значение:
// 	См. ДлительныеОперации.ВыполнитьПроцедуру
Функция НачатьВыполнениеДействийПередИзменениемИспользованияУтверждения(НовоеЗначение, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"НастройкиЭДОСлужебный.ВыполнитьДействияПередИзменениемИспользованияУтверждения", НовоеЗначение);
	
КонецФункции

#КонецОбласти

#Область НастройкиОтправки

// Создает настройки отправки электронных документов.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Контрагент - ОпределяемыйТип.УчастникЭДО
// 	ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// 	ИдентификаторОрганизации - Строка
// 	ИдентификаторКонтрагента - Строка
// 	Отказ - Булево - устанавливается в Истину, если настройки создать не удалось.
Процедура СоздатьНастройкиОтправки(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента,
	Знач ИдентификаторОрганизации, Знач ИдентификаторКонтрагента, Отказ = Ложь) Экспорт
	
	НастройкиОтправкиЭДО.СоздатьНастройкиОтправки(Организация, Контрагент, ДоговорКонтрагента,
		ИдентификаторОрганизации, ИдентификаторКонтрагента, Отказ);
	
КонецПроцедуры

// См. НастройкиОтправкиЭДО.СоздатьНастройкиИнтеркампани
Функция СоздатьНастройкиИнтеркампани(КлючНастроек) Экспорт
	
	Возврат НастройкиОтправкиЭДО.СоздатьНастройкиИнтеркампани(КлючНастроек);
	
КонецФункции

// Возвращает настройки отправки.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// Возвращаемое значение:
// 	См. НастройкиОтправкиЭДО.НастройкиОтправки
Функция НастройкиОтправки(КлючНастроекОтправки) Экспорт
	
	Возврат НастройкиОтправкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться настройки отправки для прямого обмена.
// Запрос содержит следующие поля:
//   * ИдентификаторОтправителя - Строка - идентификатор учетной записи отправителя
//   * ИдентификаторПолучателя - Строка - идентификатор учетной записи получателя
//   * АдресОтправителя - Строка - каталог отправителя при отправке через FTP или Email
//   * АдресПолучателя - Строка - каталог получателя при отправке через FTP или Email
//   * ВидДокумента - Строка - вид документа.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНастроекОтправкиДляПрямогоОбмена(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресОтправителя КАК АдресОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресПолучателя КАК АдресПолучателя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД В (&СпособыПрямогоОбмена)";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("СпособыПрямогоОбмена", СинхронизацияЭДО.СпособыПрямогоОбмена()); 
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает описание полей ключа настроек отправки
// 
// Возвращаемое значение:
// 	Структура:
// * Отправитель - Строка
// * Получатель - Строка
// * Договор - Строка
// * ВидДокумента - Строка
Функция НовоеОписаниеПолейКлючаНастройкиОтправки() Экспорт
	
	ПоляКлючаНастройки = Новый Структура;
	ПоляКлючаНастройки.Вставить("Отправитель", "");
	ПоляКлючаНастройки.Вставить("Получатель", "");
	ПоляКлючаНастройки.Вставить("Договор", "");
	ПоляКлючаНастройки.Вставить("ВидДокумента", "");
	
	Возврат ПоляКлючаНастройки;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться настройки отправки.
// Запрос содержит следующие поля:
//   * ИдентификаторОтправителя - Строка - идентификатор учетной записи отправителя.
//   * ОбменБезПодписи - Булево - использование электронной подписи для прямого обмена.
//   * Отправитель - ОпределяемыйТип.Организация
//   * Получатель - ОпределяемыйТип.УчастникЭДО
//   * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборНастроекОтправки
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНастроекОтправкиУчетныхЗаписей(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборНастроекОтправки();
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи КАК ОбменБезПодписи,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента
	|
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК ИмяВременнойТаблицы
	|ГДЕ
	|	НЕ ИмяВременнойТаблицы.ОбменБезПодписи
	|	И &ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторОтправителя) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ИдентификаторОтправителя В(&%1)", Отбор.ИдентификаторОтправителя));
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса,
		ИмяВременнойТаблицы, "", ПоляУсловия);
	
	Возврат ОписаниеЗапроса;
		
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться настройки отправки.
// Запрос содержит следующие поля:
//   * Отправитель - ОпределяемыйТип.Организация
//   * Получатель - ОпределяемыйТип.УчастникЭДО
//   * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * Формат - Строка
//   * ИдентификаторОтправителя - Строка - идентификатор учетной записи отправителя
//   * ИдентификаторПолучателя - Строка - идентификатор учетной записи получателя
//   * СпособОбмена - ПеречислениеСсылка.СпособОбменаЭД 
//   * ОбменБезПодписи - Булево - использование электронной подписи для прямого обмена
//   * ТребуетсяОтветнаяПодпись - Булево
//   * ТребуетсяИзвещениеОПолучении - Булево
//   * ВыгружатьДополнительныеСведения - Булево
//   * Формировать - Булево
//   * ЗаполнениеКодаТовара - Строка.
//
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборНастроекОтправки
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНастроекОтправки(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборНастроекОтправки();
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата КАК Формат,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбмена,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи КАК ОбменБезПодписи,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Формировать КАК Формировать,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресОтправителя КАК АдресОтправителя
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|ГДЕ
	|	НЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи
	|	И &ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторОтправителя) Тогда
		ПоляУсловия.Добавить(СтрШаблон("НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя В(%1)",
			Отбор.ИдентификаторОтправителя));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.Отправитель) Тогда
		ПоляУсловия.Добавить(СтрШаблон("НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель В(%1)",
			Отбор.Отправитель));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.Получатель) Тогда
		ПоляУсловия.Добавить(СтрШаблон("НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель В(%1)",
			Отбор.Получатель));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.Договор) Тогда
		ПоляУсловия.Добавить(СтрШаблон("НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор В(%1)", Отбор.Договор));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.ВидДокумента) Тогда
		ПоляУсловия.Добавить(СтрШаблон("НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента В(%1)",
			Отбор.ВидДокумента));
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса,
		ИмяВременнойТаблицы, "", ПоляУсловия);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Инициализирует структуру для отбора настроек отправки.
// 
// Возвращаемое значение:
// 	Структура:
// * ИдентификаторОтправителя - Строка - параметр или выражение для отбора по идентификатору отправителя
// * ИдентификаторПолучателя - Строка - параметр или выражение для отбора по идентификатору получателя
// * Отправитель - Строка - параметр или выражение для отбора по отправителю
// * Получатель - Строка - параметр или выражение для отбора по получателю
// * Договор - Строка - параметр или выражение для отбора по договору
// * ВидДокумента - Строка - параметр или выражение для отбора по виду документа
Функция НовыйОтборНастроекОтправки() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторОтправителя", "");
	Отбор.Вставить("ИдентификаторПолучателя", "");
	Отбор.Вставить("Отправитель", "");
	Отбор.Вставить("Получатель", "");
	Отбор.Вставить("Договор", "");
	Отбор.Вставить("ВидДокумента", "");
	
	Возврат Отбор;
	
КонецФункции

Функция ЗапросНастроекОтправкиДляВалидацииМаршрутов(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор,
	|	СертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыПодписейОрганизации
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = СертификатыПодписейОрганизации.ИдентификаторЭДО
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания <> ЗНАЧЕНИЕ(Справочник.МаршрутыПодписания.ПустаяСсылка)";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
		
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Определяет наличие настроек отправки для учетной записи.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Булево
Функция ЕстьНастройкиУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	Отбор = НовыйОтборНастроекОтправки();
	Отбор.ИдентификаторОтправителя = "ИдентификаторЭДО";
	ЗапросНастроек = ЗапросНастроекОтправкиУчетныхЗаписей("НастройкиОтправкиЭлектронныхДокументовПоВидам",
		Отбор);
		
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторЭДО
		|	И НЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторУчетнойЗаписи);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Определяет наличие настроек отправки.
// 
// Параметры:
// 	Отправитель - Строка
// 	Получатель - Строка
// Возвращаемое значение:
// 	Булево
Функция ЕстьНастройкиОтправки(Отправитель, Получатель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиОтправкиЭлектронныхДокументов.Получатель = &Получатель";
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Получатель" , Получатель);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает настройку заполнения дополнительных полей.
// 
// Параметры:
// 	КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// 	Формат - Строка
// 	ТекстОшибки - Строка
// Возвращаемое значение:
// 	- Неопределено -.
// 	- ТаблицаЗначений - с колонками:
// * Идентификатор - Строка
// * Имя - Строка
// * Представление - Строка 
// * Описание - Строка
// * Правило - Строка
// * Заполнение - Строка
// * Значение - Строка
// * Раздел - Строка
Функция НастройкаЗаполненияДополнительныхПолей(КлючНастроек, Формат = "", ТекстОшибки = Неопределено) Экспорт
	
	Возврат НастройкиОтправкиЭДО.НастройкаЗаполненияДополнительныхПолей(КлючНастроек, Формат, ТекстОшибки);
	
КонецФункции

// Возвращает Email/каталог получателя.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// 	* Ключ - Строка - адрес получателя почтового сообщения.
// 	* Значение - Булево - всегда Истина.
Функция АдресаПолучателейПочтовыхСообщений(ИдентификаторУчетнойЗаписи) Экспорт
	
	Отправители = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресПолучателя КАК АдресПолучателя
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД = &СпособОбменаЭД";
	
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторУчетнойЗаписи);
	Запрос.УстановитьПараметр("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Отправители;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(); // см. ВыборкаАдресаПолучателейПочтовыхСообщений 
	Пока Выборка.Следующий() Цикл
		Отправители.Вставить(НРег(Выборка.АдресПолучателя), Истина);
	КонецЦикла;
	
	Возврат Отправители;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя
//  Организация - ОпределяемыйТип.Организация
//  Контрагент - ОпределяемыйТип.УчастникЭДО
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа
//  СоздаватьНастройки - Булево - создавать настройки при отсутствии
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОтправкиПоИдентификаторам(ИДОтправителя, ИДПолучателя,
						Организация, Контрагент,
						ВидДокумента = Неопределено, СоздаватьНастройки = Истина) Экспорт
	
	Возврат НастройкиОтправкиЭДО.ПолучитьНастройкиОтправкиПоИдентификаторам(ИДОтправителя, ИДПолучателя, Организация,
		Контрагент, ВидДокумента, СоздаватьНастройки);
	
КонецФункции

// Выполняет обновление формата в настройка при изменении в сервисе настроек 1С или
// при поддержке нового формата абонентом.
//
Процедура ОбновитьФорматПоУмолчаниюВНастройках() Экспорт
	
	Запросы = Новый Массив;
	
	ЗапросПоддерживаемыхФорматов = ЗапросАктуальныхПоддерживаемыхФорматов("ПоддерживаемыеФорматы");
	Запросы.Добавить(ЗапросПоддерживаемыхФорматов);
	
	ЗапросФорматовПоУмолчанию = ЭлектронныеДокументыЭДО.ЗапросФорматовПоУмолчанию("втНастройкиПоУмолчанию");
	Запросы.Добавить(ЗапросФорматовПоУмолчанию);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоддерживаемыеФорматы.ИдентификаторАбонента КАК ИдентификаторЭДО,
	|	ПоддерживаемыеФорматы.Формат КАК Формат,
	|	ПоддерживаемыеФорматы.ВидДокумента КАК ВидЭД
	|ПОМЕСТИТЬ втНастройкиКонтрагентов
	|ИЗ
	|	ПоддерживаемыеФорматы КАК ПоддерживаемыеФорматы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОтправки.Отправитель КАК Отправитель,
	|	НастройкиОтправки.Получатель КАК Получатель,
	|	НастройкиОтправки.Договор КАК Договор,
	|	НастройкиОтправки.ВидДокумента КАК ВидЭД,
	|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиОтправки.ВерсияФормата КАК Формат,
	|	НастройкиОтправки.УдалитьВидДокумента,
	|	НастройкиОтправки.УдалитьПрикладнойВидЭД
	|ПОМЕСТИТЬ втНастройкиДляОбновления
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
	|ГДЕ
	|	НЕ НастройкиОтправки.ВерсияФорматаУстановленаВручную
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНастройкиДляОбновления.Отправитель КАК Отправитель,
	|	втНастройкиДляОбновления.Получатель КАК Получатель,
	|	втНастройкиДляОбновления.Договор КАК Договор,
	|	втНастройкиДляОбновления.ВидЭД КАК ВидДокумента,
	|	ЕСТЬNULL(втНастройкиКонтрагентов.Формат, втНастройкиПоУмолчанию.Формат) КАК ВерсияФормата,
	|	втНастройкиДляОбновления.УдалитьВидДокумента,
	|	втНастройкиДляОбновления.УдалитьПрикладнойВидЭД
	|ИЗ
	|	втНастройкиДляОбновления КАК втНастройкиДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНастройкиПоУмолчанию КАК втНастройкиПоУмолчанию
	|		ПО втНастройкиДляОбновления.ВидЭД = втНастройкиПоУмолчанию.ВидДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиКонтрагентов КАК втНастройкиКонтрагентов
	|		ПО втНастройкиДляОбновления.ИдентификаторПолучателя = втНастройкиКонтрагентов.ИдентификаторЭДО
	|		И втНастройкиДляОбновления.ВидЭД = втНастройкиКонтрагентов.ВидЭД
	|ГДЕ
	|	ЕСТЬNULL(втНастройкиКонтрагентов.Формат, втНастройкиПоУмолчанию.Формат) <> втНастройкиДляОбновления.Формат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНастройкиПоУмолчанию.ВидДокумента КАК ВидДокумента,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНастройкиПоУмолчанию.Формат) КАК КоличествоФорматов
	|ИЗ
	|	втНастройкиПоУмолчанию КАК втНастройкиПоУмолчанию
	|СГРУППИРОВАТЬ ПО
	|	втНастройкиПоУмолчанию.ВидДокумента
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНастройкиПоУмолчанию.Формат) > 1";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	РезультатЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	
	Шаблон = НСтр("ru = 'Для вида ЭД ''%1'' указан одинаковый приоритет у %2 форматов'");
	
	Выборка = РезультатЗапроса[14].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтрШаблон(Шаблон, Выборка.ВидДокумента, Выборка.КоличествоФорматов);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление форматов в настройках отправки ЭДО'"), ТекстОшибки);
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса[13].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка,, "ВерсияФормата");
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ВерсияФормата = Выборка.ВерсияФормата;
		МенеджерЗаписи.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление настройки отправки.
// 
// Параметры:
// 	КлючНастройки - РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументов
// Возвращаемое значение:
// 	Строка - Описание
Функция ПредставлениеНастройкиОтправки(КлючНастройки) Экспорт
	
	Возврат НастройкиОтправкиЭДО.ПредставлениеНастройкиОтправки(КлючНастройки);
	
КонецФункции

// См. НастройкиОтправкиЭДО.ИспользуетсяУПД_УКД
Функция ИспользуетсяУПД_УКД(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат НастройкиОтправкиЭДО.ИспользуетсяУПД_УКД(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции  

// См. НастройкиОтправкиЭДО.ОбщиеПараметрыНастроек
Функция ОбщиеПараметрыНастроек(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат НастройкиОтправкиЭДО.ОбщиеПараметрыНастроек(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// См. НастройкиОтправкиЭДО.СсылкаНаОбъектНастройкиЭДО
Функция СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат НастройкиОтправкиЭДО.СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// См. НастройкиОтправкиЭДО.ИмяТипаНастройкиОтправки
Функция ИмяТипаНастройкиОтправки() Экспорт
	
	Возврат НастройкиОтправкиЭДО.ИмяТипаНастройкиОтправки();
	
КонецФункции

// См. НастройкиОтправкиЭДО.ИмяПоляДляОтображенияОшибкиПоМаршруту
Функция ИмяПоляДляОтображенияОшибкиПоМаршруту(НомерСтроки) Экспорт
	
	Возврат НастройкиОтправкиЭДО.ИмяПоляДляОтображенияОшибкиПоМаршруту(НомерСтроки);
	
КонецФункции

#КонецОбласти

#Область НастройкиОтраженияВУчете

// См. НастройкиОтраженияВУчетеЭДО.НастройкиОтраженияВУчете
Функция НастройкиОтраженияВУчете(КлючНастроек) Экспорт
	
	Возврат НастройкиОтраженияВУчетеЭДО.НастройкиОтраженияВУчете(КлючНастроек);
	
КонецФункции

Процедура ЗаписатьНастройкуПолученияДокументов(КлючНастроек, СпособОбработки, НеПредлагатьСохранятьНастройки, Отказ) Экспорт
	
	НастройкиОтраженияВУчетеЭДО.ЗаписатьНастройкуПолученияДокументов(КлючНастроек, СпособОбработки,
		НеПредлагатьСохранятьНастройки, Отказ);
	
КонецПроцедуры

// Создает настройки отражения в учете.
//
// Параметры:
//  Организация	 - ОпределяемыйТип.Организация
//  Контрагент	 - ОпределяемыйТип.КонтрагентБЭД
//  ИдентификаторОрганизации - Строка
//  ИдентификаторКонтрагента - Строка
//  Отказ - Булево - если Истина, настройки создать не удалось
Процедура СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента,
	Отказ = Ложь) Экспорт
	
	НастройкиОтраженияВУчетеЭДО.СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, ИдентификаторОрганизации,
		 ИдентификаторКонтрагента, Отказ);
	
КонецПроцедуры

// Возвращает настройки получения ЭД по ИД участников.
//
// Параметры:
//  ИдентификаторОтправителя - Строка
//  ИдентификаторПолучателя  - Строка
//  Организация   - ОпределяемыйТип.Организация
//  Контрагент  - ОпределяемыйТип.УчастникЭДО
//  СоздаватьНастройки - Булево - создавать настройки автоматически
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиПолученияПоИдентификаторам(ИдентификаторОтправителя, ИдентификаторПолучателя,
							Организация, Контрагент,
							СоздаватьНастройки = Истина) Экспорт
	
	Возврат НастройкиОтраженияВУчетеЭДО.ПолучитьНастройкиПолученияПоИдентификаторам(ИдентификаторОтправителя,
		ИдентификаторПолучателя, Организация, Контрагент, СоздаватьНастройки);
	
КонецФункции

#КонецОбласти

#Область НастройкиВнутреннегоЭДО

// См. НастройкиВнутреннегоЭДОКлиентСервер.НовоеОписаниеПолейКлючаНастройкиВнутреннегоЭДО
Функция НовоеОписаниеПолейКлючаНастройкиВнутреннегоЭДО() Экспорт
	
	Возврат НастройкиВнутреннегоЭДОКлиентСервер.НовоеОписаниеПолейКлючаНастройкиВнутреннегоЭДО();
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.КлючОбъектаНастроекВнутреннегоЭДО
Функция КлючОбъектаНастроекВнутреннегоЭДО(КлючНастройки) Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.КлючОбъектаНастроекВнутреннегоЭДО(КлючНастройки);
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.НовыйОтборНастроекВнутреннегоЭДО
Функция НовыйОтборНастроекВнутреннегоЭДО() Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.ЗапросНастроекВнутреннегоЭДО
Функция ЗапросНастроекВнутреннегоЭДО(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ЗапросНастроекВнутреннегоЭДО(ИмяВременнойТаблицы, Отбор);
		
КонецФункции

// Определяет наличие настроек внутреннего электронного документооборота.
// 
// Возвращаемое значение:
// 	Булево
Функция ЕстьНастройкиВнутреннегоЭДО() Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ЕстьНастройкиВнутреннегоЭДО() 
	
КонецФункции

Функция ЕстьПравоНастройкиИспользованияВнутреннегоЭДО(ВыводитьСообщение) Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ЕстьПравоНастройкиИспользованияВнутреннегоЭДО(ВыводитьСообщение);
	
КонецФункции

Функция ЕстьПравоНастройкиАвтоматическогоСозданияКонтрагентов(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Константы.СоздаватьКонтрагентовАвтоматическиБЭД);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.ТекстЗапросаДополнениеНастройкамиВнутреннегоЭДО
Функция ТекстЗапросаДополнениеНастройкамиВнутреннегоЭДО(ИмяИсходнойТаблицы, ПоляТаблицы, ПоляКлючаНастройки) Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ТекстЗапросаДополнениеНастройкамиВнутреннегоЭДО(ИмяИсходнойТаблицы,
		ПоляТаблицы, ПоляКлючаНастройки);
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.ЗапросОсновныхВидовВнутреннихДокументов
Функция ЗапросОсновныхВидовВнутреннихДокументов(ИмяВременнойТаблицы) Экспорт
	
	Возврат НастройкиВнутреннегоЭДО.ЗапросОсновныхВидовВнутреннихДокументов(ИмяВременнойТаблицы);
	
КонецФункции

// См. НастройкиВнутреннегоЭДО.УстановитьИспользованиеВнутреннегоЭДО
Процедура УстановитьИспользованиеВнутреннегоЭДО(Использовать) Экспорт
	
	НастройкиВнутреннегоЭДО.УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает наличие у пользователя прав на настройку ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоНастройкиОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на чтение настройки электронного документооборота.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоЧтенияНастройкиОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО);
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Чтение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает предупреждения по настройкам отправки.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// 	
// Возвращаемое значение:
// 	Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента
Функция ПредупрежденияКомпонента(КлючНастроекОтправки) Экспорт
	
	Возврат НастройкиЭДОСлужебный.ПредупрежденияПоНастройкеОбменаНаДату(КлючНастроекОтправки);
	
КонецФункции

// Возвращает доступные виды предупреждений.
// 
// Возвращаемое значение:
// 	Структура:
// 	* УстаревшийФорматОтправителя - Строка
// 	* УстаревшийФорматПолучателя - Строка 
// 	* НеподдерживаемыйСпособОбмена - Строка
// 	* СрокДействияСертификатов - Строка
// 	* ДатаПоследнейАктивностиПолучателя - Строка
// 	* Неклассифицированное - Строка
Функция ВидыПредупреждений() Экспорт
	
	ВидыПредупреждений = Новый Структура;
	ВидыПредупреждений.Вставить("УстаревшийФорматОтправителя", "УстаревшийФорматОтправителя");
	ВидыПредупреждений.Вставить("УстаревшийФорматПолучателя", "УстаревшийФорматПолучателя");
	ВидыПредупреждений.Вставить("НеподдерживаемыйСпособОбмена", "НеподдерживаемыйСпособОбмена");
	ВидыПредупреждений.Вставить("СрокДействияСертификатов", "СрокДействияСертификатов");
	ВидыПредупреждений.Вставить("ДатаПоследнейАктивностиПолучателя", "ДатаПоследнейАктивностиПолучателя");
	ВидыПредупреждений.Вставить("Неклассифицированное", "Неклассифицированное");
	
	Возврат ВидыПредупреждений;

КонецФункции

// Возвращает поддерживаемые форматы электронных документов.
// 
// Параметры:
// 	ИдентификаторАбонента - Строка
// Возвращаемое значение:
// 	ТаблицаЗначений:
// 	 * Формат - Строка
// 	 * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 	 * ИдентификаторАбонента - Строка, Массив из Строка -
Функция АктуальныеПоддерживаемыеФорматыАбонента(ИдентификаторАбонента) Экспорт
	
	Запросы = Новый Массив;
	Отбор = СинхронизацияЭДО.НовыйОтборПоддерживаемыхФорматов();
	Отбор.ИдентификаторЭДО = "&ИдентификаторЭДО";
	ЗапросПоддерживаемыхФорматов = ЗапросАктуальныхПоддерживаемыхФорматов("ПоддерживаемыеФорматы",
		Отбор);
	Запросы.Добавить(ЗапросПоддерживаемыхФорматов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоддерживаемыеФорматы.Формат КАК Формат,
		|	ПоддерживаемыеФорматы.ВидДокумента КАК ВидДокумента,
		|	ПоддерживаемыеФорматы.ИдентификаторАбонента КАК ИдентификаторАбонента
		|ИЗ
		|	ПоддерживаемыеФорматы КАК ПоддерживаемыеФорматы";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторАбонента);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращает описание запроса для валидации маршрута
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка
// Возвращаемое значение:
// 	См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНастроекОтправкиДляВалидацииМаршрута(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор,
	|	СертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыПодписейОрганизации
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = СертификатыПодписейОрганизации.ИдентификаторЭДО
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания = &МаршрутПодписания";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
		
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция СоответствиеСтарыхФорматовНовым() Экспорт
	
	СоответствиеФорматов = Новый Соответствие;
	СоответствиеФорматов.Вставить("Соглашение об изменении стоимости_ФНС 5.01", "OKORDOC");
	СоответствиеФорматов.Вставить("Счет-фактура_ФНС 5.01 (УПД:Счет-фактура и первичный документ)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Счет-фактура_ФНС 5.02", "ON_SFAKT_1_897_01_05_02");
	СоответствиеФорматов.Вставить("Заказ товара_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Акт об оказании услуг_ФНС 5.01 (с 2016г.)", "DP_REZRUISP_1_990_01_05_01");
	СоответствиеФорматов.Вставить("Каталог товаров_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Акт об оказании услуг_ФНС 5.01", "DP_IAKTPRM_1_987_00_05_01");
	СоответствиеФорматов.Вставить("Акт об оказании услуг_ФНС 2019 (УПД:Первичный документ)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Акт об оказании услуг_ФНС 5.01 (УПД:Первичный документ)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Товарная накладная_ФНС 5.01", "DP_OTORG12_1_986_00_05_01");
	СоответствиеФорматов.Вставить("Товарная накладная_ФНС 5.01 (с 2016г.)", "DP_TOVTORGPR_1_992_01_05_01");
	СоответствиеФорматов.Вставить("Коммерческое предложение_BN Commerce offering", "BNCommerceOffering");
	СоответствиеФорматов.Вставить("Товарная накладная_ФНС 2019 (УПД:Первичный документ)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Товарная накладная_ФНС 5.01 (УПД:Первичный документ)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Отчет о списании комиссионного товара_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Счет на оплату_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Счет-фактура_ФНС 5.01 (УПД:Счет-фактура)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Счет-фактура_ФНС 2019 (УПД:Счет-фактура и первичный документ)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Счет-фактура_ФНС 2019 (УПД:Счет-фактура)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Корректировочный счет-фактура_ФНС 5.02", "ON_KORSFAKT_1_911_01_05_02");
	СоответствиеФорматов.Вставить("Корректировочный счет-фактура_ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)", "ON_KORSCHFDOPPR_1_996_01_05_01");
	СоответствиеФорматов.Вставить("УКД_ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)", "ON_KORSCHFDOPPR_1_996_01_05_01");
	СоответствиеФорматов.Вставить("Ответ на заказ_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Корректировочный счет-фактура_ФНС 5.01 (УКД:Корректировочный счет-фактура)", "ON_KORSCHFDOPPR_1_996_01_05_01");
	СоответствиеФорматов.Вставить("УПД_ФНС 5.01 (УПД:Первичный документ)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Заказ товара_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Корректировочный счет-фактура_", "ON_NKORSCHFDOPPR_1_996_03_05_01");
	СоответствиеФорматов.Вставить("Соглашение об изменении стоимости_ФНС 5.01 (УКД:Первичный документ)", "ON_KORSCHFDOPPR_1_996_01_05_01");
	СоответствиеФорматов.Вставить("Соглашение об изменении стоимости_", "ON_NKORSCHFDOPPR_1_996_03_05_01");
	СоответствиеФорматов.Вставить("Акт на передачу прав_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("УКД_", "ON_NKORSCHFDOPPR_1_996_03_05_01");
	СоответствиеФорматов.Вставить("Отчет о списании комиссионного товара_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Акт на передачу прав_ФНС 5.01 (УПД:Первичный документ)", "ON_SCHFDOPPR_1_995_01_05_01");
	СоответствиеФорматов.Вставить("Счет на оплату_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Акт на передачу прав_ФНС 2019 (УПД:Первичный документ)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Каталог товаров_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Прайс-лист_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Прайс-лист_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Ответ на заказ_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Акт о расхождениях_ФНС 5.01 (Акт о расхождениях)", "DP_PRIRASXPRIN_1_994_01_05_01");
	СоответствиеФорматов.Вставить("Отчет о продажах комиссионного товара_CML 4.02", "CML_4");
	СоответствиеФорматов.Вставить("Отчет о продажах комиссионного товара_CML 2.08", "CML_2_08");
	СоответствиеФорматов.Вставить("Запрос коммерческих предложений_BN Commerce offering", "BNCommerceOffering");
	СоответствиеФорматов.Вставить("УПД_ФНС 2019 (УПД:Первичный документ)", "ON_NSCHFDOPPR_1_997_01_05_01");
	СоответствиеФорматов.Вставить("Акт сверки 1.0", "Акт сверки 1.0");
	СоответствиеФорматов.Вставить("Акт сверки взаиморасчетов_ФНС 5.01 (данные организации)", "ON_AKTSVEROTP_1_972_01_05_01_01");
	СоответствиеФорматов.Вставить("Акт сверки взаиморасчетов_ФНС 5.01 (данные контрагента)", "ON_AKTSVERPOL_1_972_02_05_01_01");
	СоответствиеФорматов.Вставить("Счет на оплату_ФНС 1.01", "ON_CHETOP_1_998_01_01_01");
	СоответствиеФорматов.Вставить("Договорной документ_ФНС 1.01",
		Обработки.ФорматДоговорнойДокумент101.ПространствоИмен());

	Возврат СоответствиеФорматов;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. СинхронизацияЭДОСобытия.ПриУдаленииУчетнойЗаписи
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	НастройкиОтправкиЭДО.ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи);
	НастройкиОтраженияВУчетеЭДО.ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	НастройкиВнутреннегоЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	НастройкиОтправкиЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	НастройкиОтраженияВУчетеЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	НастройкиВнутреннегоЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	НастройкиОтправкиЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	НастройкиОтраженияВУчетеЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
КонецПроцедуры

Процедура ПослеИзмененияПриглашения(СведенияОПриглашении) Экспорт

	Если СведенияОПриглашении.Статус = Перечисления.СтатусыПриглашений.Принято Тогда
		Если ЗначениеЗаполнено(СведенияОПриглашении.Контрагент) Тогда
			Настройки = ПолучитьНастройкиОтправкиПоИдентификаторам(Неопределено, Неопределено,
				СведенияОПриглашении.Организация, СведенияОПриглашении.Контрагент, Неопределено, Ложь);
			
			Если Не ЗначениеЗаполнено(Настройки)
				Или (СинхронизацияЭДО.ЭтоПрямойОбмен(Настройки.СпособОбменаЭД)
					И ЗначениеЗаполнено(Настройки.ДоговорКонтрагента)) Тогда
				НастройкиОтправкиЭДО.СоздатьНастройкиОтправки(СведенияОПриглашении.Организация,
					СведенияОПриглашении.Контрагент, Неопределено, СведенияОПриглашении.ИдентификаторОрганизации,
					СведенияОПриглашении.ИдентификаторКонтрагента);
			КонецЕсли;
			
			ПолучитьНастройкиПолученияПоИдентификаторам(СведенияОПриглашении.ИдентификаторКонтрагента,
				СведенияОПриглашении.ИдентификаторОрганизации, СведенияОПриглашении.Организация,
				СведенияОПриглашении.Контрагент, Истина);
		КонецЕсли;
	ИначеЕсли СведенияОПриглашении.Статус = Перечисления.СтатусыПриглашений.ОжидаемСогласия И СведенияОПриглашении.СоздаватьНастройкиЭДО = Истина Тогда
		СоздатьНастройкиОтправки(
			СведенияОПриглашении.Организация, СведенияОПриглашении.Контрагент, Неопределено,
			СведенияОПриглашении.ИдентификаторОрганизации, СведенияОПриглашении.ИдентификаторКонтрагента);
		
		СоздатьНастройкиОтраженияВУчете(СведенияОПриглашении.Организация,
			СведенияОПриглашении.Контрагент, "", "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросАктуальныхПоддерживаемыхФорматов(ИмяВременнойТаблицы, Отбор = Неопределено)
	
	Если Отбор = Неопределено Тогда
		Отбор = СинхронизацияЭДО.НовыйОтборПоддерживаемыхФорматов();
	КонецЕсли;
	
	Запросы = Новый Массив;
	ЗапросАктуальныхФорматов = ЭлектронныеДокументыЭДО.ЗапросАктуальныхФорматов("АктуальныеФорматы");
	Запросы.Добавить(ЗапросАктуальныхФорматов);
	
	ЗапросПоддерживаемыхФорматов = СинхронизацияЭДО.ЗапросПоддерживаемыхФорматов(
		"ПоддерживаемыеФорматыЭлектронныхДокументов", Отбор);
	Запросы.Добавить(ЗапросПоддерживаемыхФорматов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	АктуальныеФорматы.ВидДокумента КАК ВидДокумента,
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторАбонента КАК ИдентификаторАбонента
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеФорматы КАК АктуальныеФорматы
		|		ПО ПоддерживаемыеФорматыЭлектронныхДокументов.Формат = АктуальныеФорматы.Формат";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ИтоговыйЗапрос.Текст, ИмяВременнойТаблицы, "", "");
	Для Каждого Параметр Из ИтоговыйЗапрос.Параметры Цикл
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

#КонецОбласти