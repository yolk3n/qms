
#Область СлужебныеПроцедурыИФункции

// Описание
// 
// Параметры:
// 	ПараметрыПолучения - см. НастройкиЭДОСлужебныйКлиентСервер.НовыеПараметрыПолученияДанныхДляНастройкиСвязиСКонтрагентом
// Возвращаемое значение:
// 	Структура:
// * ПроверкаСертификатов - Структура:
//    ** ЕстьДоступныеСертификаты - Булево
//    ** ОжидаетсяВыпускСертификата - Булево
// * ОтпечаткиСертификатов - см. КриптографияБЭД.ПолучитьОтпечаткиСертификатов
// * ИдентификаторыОрганизации - СписокЗначений - см. РаботаСАбонентамиЭДО.ДанныеПоИдентификаторамАбонентов , 
//                               ключ ИдентификаторыОрганизации функции.
// * ПараметрыСвязиИдентификаторовЭДО - ТаблицаЗначений, Неопределено - 
//          см. РаботаСАбонентамиЭДО.ДанныеПоИдентификаторамАбонентов , ключ ПараметрыСвязиИдентификаторовЭДО функции
Функция ДанныеДляНастройкиСвязиСКонтрагентом(ПараметрыПолучения) Экспорт
	
	СтруктураВозврата = Новый Структура(
		"ПроверкаСертификатов,
		|ИдентификаторыОрганизации,
		|ПараметрыСвязиИдентификаторовЭДО");
	
	ДоступныеСертификаты = КриптографияБЭД.ПользователюДоступенСертификатИлиЗаявлениеНаВыпуск(ПараметрыПолучения.Организация,
		ПараметрыПолучения.ОтпечаткиСертификатов);
	СтруктураВозврата.ПроверкаСертификатов = ДоступныеСертификаты;
	
	НовыеПараметрыПолученияДанныхАбонентов = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияДанныхАбонентов();
	НовыеПараметрыПолученияДанныхАбонентов.Организация = ПараметрыПолучения.Организация;
	НовыеПараметрыПолученияДанныхАбонентов.Контрагент = ПараметрыПолучения.Контрагент;
	НовыеПараметрыПолученияДанныхАбонентов.ИдентификаторКонтрагента = ПараметрыПолучения.ИдентификаторКонтрагента;
	НовыеПараметрыПолученияДанныхАбонентов.ИдентификаторОрганизации = ПараметрыПолучения.ИдентификаторОрганизации;
	НовыеПараметрыПолученияДанныхАбонентов.ПриоритетПодключенные = ПараметрыПолучения.ПриоритетПодключенные;
	
	ДанныеПоИдентификаторамАбонентов = РаботаСАбонентамиЭДО.ДанныеПоИдентификаторамАбонентов(
		НовыеПараметрыПолученияДанныхАбонентов);
	СтруктураВозврата.ИдентификаторыОрганизации = ДанныеПоИдентификаторамАбонентов.ИдентификаторыОрганизации;
	СтруктураВозврата.ПараметрыСвязиИдентификаторовЭДО =
		ДанныеПоИдентификаторамАбонентов.ПараметрыСвязиИдентификаторовЭДО;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получение текста предупреждений отправки документа по выбранным настройкам обмена ЭДО
//
// Параметры:
//  КлючНастроекОтправки  - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
//  ИдентификаторПолучателя - Строка
//  ДатаПроверки - Дата
// Возвращаемое значение:
//  Структура   - Найденные предупреждения.
//
Функция ПредупрежденияПоНастройкеОбменаНаДату(КлючНастроекОтправки, ИдентификаторПолучателя = "",
	ДатаПроверки = Неопределено) Экспорт
	
	Предупреждения = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
		ДатаПроверки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запросы = Новый Массив;
	
	Отбор = РаботаСАбонентамиЭДО.НовыйОтборАбонентовЭДО();
	Отбор.ИдентификаторЭДО = "&ИдентификаторПолучателя";
	Отбор.ЭтоПользователь1С = Истина;
	ЗапросАбонентов = РаботаСАбонентамиЭДО.ЗапросАбонентовЭДО("АбонентыЭДО", Отбор);
	Запросы.Добавить(ЗапросАбонентов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АбонентыЭДО.СрокДействияСертификатов <= &ТекущаяДата
		|		И АбонентыЭДО.СрокДействияСертификатов <> &ПустаяДата КАК СрокДействияСертификатов,
		|	АбонентыЭДО.ДатаПоследнейАктивности <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2)
		|		И АбонентыЭДО.ДатаПоследнейАктивности <> &ПустаяДата КАК ДатаПоследнейАктивности,
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание
		|ИЗ
		|	АбонентыЭДО КАК АбонентыЭДО";
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
	Если НастройкиОтправки = Неопределено Тогда
		НастройкиОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
		НастройкиОтправки.Отправитель = КлючНастроекОтправки.Отправитель;
		НастройкиОтправки.Получатель = КлючНастроекОтправки.Получатель;
		НастройкиОтправки.ВидДокумента = КлючНастроекОтправки.ВидДокумента;
		НастройкиОтправки.ИдентификаторПолучателя = ИдентификаторПолучателя;
	КонецЕсли;
	
	ДанныеОФорматах = ДанныеОФорматахОтправителяИПолучателя(КлючНастроекОтправки.ВидДокумента,
		НастройкиОтправки.Формат, НастройкиОтправки.ИдентификаторПолучателя, ДатаПроверки);
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторПолучателя", НастройкиОтправки.ИдентификаторПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("ТекущаяДата"            , ТекущаяДатаСеанса());
	ИтоговыйЗапрос.УстановитьПараметр("ПустаяДата"             , Дата(1, 1, 1));
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	АбонентыЭДО = РезультатЗапроса.Выбрать();
	Пока АбонентыЭДО.Следующий() Цикл
		
		Если ЗначениеЗаполнено(АбонентыЭДО.КраткоеОписание) Тогда
			ТекстИдентификатора = СтрШаблон(НСтр("ru = '%1 (%2)'"), АбонентыЭДО.ИдентификаторЭДО, АбонентыЭДО.КраткоеОписание);
		Иначе
			ТекстИдентификатора = АбонентыЭДО.ИдентификаторЭДО;
		КонецЕсли;
		
		Если АбонентыЭДО.СрокДействияСертификатов Тогда
			ДобавитьПредупреждениеСрокДействияСертификатов(Предупреждения, ТекстИдентификатора);
		КонецЕсли;
		
		Если АбонентыЭДО.ДатаПоследнейАктивности Тогда
			ДобавитьПредупреждениеДатаПоследнейАктивности(Предупреждения, ТекстИдентификатора);
		КонецЕсли;
	КонецЦикла;
	
	ФорматыОтправителя = ДанныеОФорматах.ФорматыОтправителя;
	Если ФорматыОтправителя <> Неопределено Тогда
		
		УстаревшийФорматКонтрагента = Новый Структура;
		УстаревшийФорматКонтрагента.Вставить("ВидЭД"                                   , ФорматыОтправителя.ВидДокумента);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_НовыйФормат_Представление"  , ФорматыОтправителя.Отправитель_НовыйФормат_Представление);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_НовыйФормат_СсылкаНаПриказ" , ФорматыОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_Представление"       , ФорматыОтправителя.Отправитель_Формат_Представление);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_СсылкаНаПриказ"       , ФорматыОтправителя.Отправитель_Формат_СсылкаНаПриказ);
		УстаревшийФорматКонтрагента.Вставить("ПоддерживаетсяКонфигурацией"             , ФорматыОтправителя.ПоддерживаетсяКонфигурацией);
		
		ДобавитьПредупреждениеУстаревшийФорматОтправителя(Предупреждения, УстаревшийФорматКонтрагента,
			ФорматыОтправителя.Регламентированный);
	КонецЕсли;
	
	ФорматыПолучателя = ДанныеОФорматах.ФорматыПолучателя;
	Если ФорматыПолучателя <> Неопределено Тогда
		Если ФорматыПолучателя.Устарел Тогда
			УстаревшийФорматКонтрагента = Новый Структура;
			УстаревшийФорматКонтрагента.Вставить("ВидЭД"                             , ФорматыПолучателя.ВидДокумента);
			УстаревшийФорматКонтрагента.Вставить("Получатель_Формат_Представление"   , ФорматыПолучателя.Получатель_Формат_Представление);
			УстаревшийФорматКонтрагента.Вставить("Получатель_Формат_СсылкаНаПриказ"  , ФорматыПолучателя.Получатель_Формат_СсылкаНаПриказ);
			УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_Представление" , ФорматыПолучателя.Отправитель_Формат_Представление);
			УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_СсылкаНаПриказ" , ФорматыПолучателя.Отправитель_Формат_СсылкаНаПриказ);
			
			ДобавитьПредупреждениеУстаревшийФорматПолучателя(Предупреждения, УстаревшийФорматКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Предупреждения;
	
КонецФункции

Процедура ДобавитьПредупреждениеСрокДействияСертификатов(Предупреждения, УчетнаяЗапись)
	
	Предупреждение = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента();
	Предупреждение.Вид = НастройкиЭДО.ВидыПредупреждений().СрокДействияСертификатов;
	Предупреждение.ТекстОшибки = СтрШаблон(НСтр("ru = 'У учетной записи %1 отсутствуют действующие сертификаты. Документ можно отправить, но он не будет получен, пока контрагент не перевыпустит хотя бы один сертификат. Рекомендуем связаться с контрагентом и сообщить о данной проблеме.'"), УчетнаяЗапись);
	Предупреждения.Добавить(Предупреждение);
	
КонецПроцедуры

Процедура ДобавитьПредупреждениеДатаПоследнейАктивности(Предупреждения, УчетнаяЗапись)
	
	Предупреждение = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента();
	Предупреждение.Вид = НастройкиЭДО.ВидыПредупреждений().ДатаПоследнейАктивностиПолучателя;
	Предупреждение.ТекстОшибки = СтрШаблон(НСтр("ru = 'Контрагент последний раз использовал  учетную запись %1  более 2 месяцев назад. Возможно он ей уже не пользуется'"), УчетнаяЗапись);
	Предупреждения.Добавить(Предупреждение);
	
КонецПроцедуры

Процедура ДобавитьПредупреждениеУстаревшийФорматОтправителя(Предупреждения, УстаревшийФорматОтправителя, Регламентированный)
	
	УстаревшийФормат = СтрШаблон("<a href='%1'>%2</a>",
			УстаревшийФорматОтправителя.Отправитель_Формат_СсылкаНаПриказ,
			УстаревшийФорматОтправителя.Отправитель_Формат_Представление);
	АктуальныйФормат = СтрШаблон("<a href='%1'>%2</a>",
			УстаревшийФорматОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ,
			УстаревшийФорматОтправителя.Отправитель_НовыйФормат_Представление);
	
	Если Регламентированный Тогда
		Если УстаревшийФорматОтправителя.ПоддерживаетсяКонфигурацией Тогда
			Решение = НСтр("ru = 'Чтобы отправка документов стала возможна, необходимо изменить настройки отправки документа'");
		Иначе
			Решение = НСтр("ru = 'Чтобы отправка документов стала возможна, необходимо обновить конфигурацию'");
		КонецЕсли;
	Иначе
		Если УстаревшийФорматОтправителя.ПоддерживаетсяКонфигурацией Тогда
			Решение = НСтр("ru = 'Измените настройки отправки документа и повторите создание документа'");
		Иначе
			Решение = НСтр("ru = 'По возможности обновите конфигурацию.'");
		КонецЕсли;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Для обмена документами ""<b>%1</b>"" используется устаревший формат ""%2"". Актуальным является формат ""%3"".%4'");
	ТекстОшибки = СтроковыеФункции.ФорматированнаяСтрока(Шаблон, Строка(УстаревшийФорматОтправителя.ВидЭД),
		УстаревшийФормат, АктуальныйФормат, Решение);
	
	Предупреждение = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента();
	Предупреждение.Вид = НастройкиЭДО.ВидыПредупреждений().УстаревшийФорматОтправителя;
	Предупреждение.ТекстОшибки = ТекстОшибки;
	Если Регламентированный Тогда
		Предупреждение.Блокирующее = Истина;
	КонецЕсли;
	Предупреждения.Добавить(Предупреждение);
	
КонецПроцедуры

Процедура ДобавитьПредупреждениеУстаревшийФорматПолучателя(Предупреждения, УстаревшийФорматПолучателя)
	
	УстаревшийФормат = СтрШаблон("<a href='%1'>%2</a>",
		УстаревшийФорматПолучателя.Получатель_Формат_СсылкаНаПриказ,
		УстаревшийФорматПолучателя.Получатель_Формат_Представление);
	АктуальныйФормат = СтрШаблон("<a href='%1'>%2</a>",
		УстаревшийФорматПолучателя.Отправитель_Формат_СсылкаНаПриказ,
		УстаревшийФорматПолучателя.Отправитель_Формат_Представление);
	
	Решение = НСтр("ru = 'Чтобы отправка документов стала возможна, необходимо изменить настройки отправки документа'");
	
	Шаблон = НСтр("ru = 'Контрагент использует для обмена документами ""<b>%1</b>"" устаревший формат ""%2"". Документ будет отправлен в формате ""%3"", вследствие чего у получателя могут возникнуть проблемы при отображении документа. По возможности свяжитесь контрагентом и порекомендуйте обновить программное обеспечение'");
	ТекстОшибки = СтроковыеФункции.ФорматированнаяСтрока(Шаблон, Строка(УстаревшийФорматПолучателя.ВидЭД),
		УстаревшийФормат, АктуальныйФормат, Решение);
	
	Предупреждение = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента();
	Предупреждение.Вид = НастройкиЭДО.ВидыПредупреждений().УстаревшийФорматОтправителя;
	Предупреждение.ТекстОшибки = ТекстОшибки;
	Предупреждения.Добавить(Предупреждение);
	
КонецПроцедуры

Функция ДанныеОФорматахОтправителяИПолучателя(ВидЭлектронногоДокумента, ВерсияФормата, ИдентификаторПолучателя, ДатаПроверки = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ФорматыОтправителя", Неопределено);
	Результат.Вставить("ФорматыПолучателя", Неопределено);
	
	Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
		ДатаПроверки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФорматыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов();
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторФормата", ВерсияФормата);
	Отбор.Вставить("Отключен", Истина);
	ОтключенныеФорматы = ФорматыЭлектронныхДокументов.НайтиСтроки(Отбор);
	ФорматОтключен = ОтключенныеФорматы.Количество();
	Если ФорматОтключен Тогда
		СтарыйФормат = ОтключенныеФорматы[0];
		ФорматыЭлектронныхДокументов.Сортировать("Приоритет Убыв");
		Форматы = ФорматыЭлектронныхДокументов.НайтиСтроки(Новый Структура("ВидДокумента", ВидЭлектронногоДокумента));
		Если Форматы.Количество() Тогда
			НовыйФормат = Форматы[0];
		КонецЕсли;
		ФорматыОтправителя = Новый Структура;
		ФорматыОтправителя.Вставить("Отправитель_Формат_Представление", СтарыйФормат.ПредставлениеФормата);
		ФорматыОтправителя.Вставить("Отправитель_Формат_СсылкаНаПриказ", СтарыйФормат.СсылкаНаПриказОВведении);
		ФорматыОтправителя.Вставить("Регламентированный", СтарыйФормат.Формализованный);
		ФорматыОтправителя.Вставить("Отправитель_НовыйФормат_Представление", НовыйФормат.ПредставлениеФормата);
		ФорматыОтправителя.Вставить("Отправитель_НовыйФормат_СсылкаНаПриказ", НовыйФормат.СсылкаНаПриказОВведении);
		ФорматыОтправителя.Вставить("ВидДокумента", ВидЭлектронногоДокумента);
		ФорматыОтправителя.Вставить("ПоддерживаетсяКонфигурацией", СтарыйФормат.ПоддерживаетсяКонфигурацией); 
		
		Результат.ФорматыОтправителя = ФорматыОтправителя;
	КонецЕсли;
	
	ВариантыЗаполнения = ЭлектронныеДокументыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО();
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидЭлектронногоДокумента);
	Отбор = Новый Структура;
	Отбор.Вставить("ТипДокумента", ОписаниеВидаДокумента.ТипДокумента);
	ВариантыЗаполнения = ВариантыЗаполнения.Скопировать(Отбор);
	ВариантыЗаполнения.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ВариантыЗаполнения.ЗаполнитьЗначения(ВидЭлектронногоДокумента, "ВидДокумента");
	
	Отбор = РаботаСАбонентамиЭДО.НовыйОтборПоддерживаемыхФорматов();
	Отбор.ИдентификаторЭДО = "&ИдентификаторПолучателя";
	ЗапросФорматовАбонента = СинхронизацияЭДО.ЗапросПоддерживаемыхФорматов(
		"ПоддерживаемыеФорматыЭлектронныхДокументов", Отбор);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросФорматовАбонента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыЗаполнения.Формат КАК Формат,
		|	ВариантыЗаполнения.ВидДокумента КАК ВидДокумента,
		|	ВариантыЗаполнения.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ ВариантыЗаполнения
		|ИЗ
		|	&ВариантыЗаполнения КАК ВариантыЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Форматы.ИдентификаторФормата КАК ИдентификаторФормата,
		|	Форматы.ВидДокумента КАК ВидДокумента,
		|	Форматы.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ Форматы
		|ИЗ
		|	&Форматы КАК Форматы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВариантыЗаполнения.ВидДокумента КАК ВидДокумента,
		|	ВариантыЗаполнения.Формат КАК Формат
		|ИЗ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВариантыЗаполнения КАК ВариантыЗаполнения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Форматы КАК Форматы
		|			ПО Форматы.ИдентификаторФормата = ВариантыЗаполнения.Формат
		|				И Форматы.ВидДокумента = ВариантыЗаполнения.ВидДокумента
		|		ПО ПоддерживаемыеФорматыЭлектронныхДокументов.Формат = ВариантыЗаполнения.Формат
		|			И ПоддерживаемыеФорматыЭлектронныхДокументов.ВариантЗаполнения = ВариантыЗаполнения.ВариантЗаполнения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Форматы.Приоритет УБЫВ";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ВариантыЗаполнения", ВариантыЗаполнения);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("Форматы", ФорматыЭлектронныхДокументов.Скопировать(, "ИдентификаторФормата, ВидДокумента, Приоритет"));
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторФормата", Выборка.Формат);
		Отбор.Вставить("Формализованный", Ложь);
		ФорматыКонтрагента = ФорматыЭлектронныхДокументов.НайтиСтроки(Отбор);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторФормата", ВерсияФормата);
		ФорматыОрганизации = ФорматыЭлектронныхДокументов.НайтиСтроки(Отбор);
		Если ФорматыКонтрагента.Количество() И ФорматыОрганизации.Количество() Тогда
			ФорматКонтрагента = ФорматыКонтрагента[0];
			ФорматОрганизации = ФорматыОрганизации[0];
			
			ФорматыПолучателя = Новый Структура;
			ФорматыПолучателя.Вставить("ВидДокумента", ВидЭлектронногоДокумента);
			ФорматыПолучателя.Вставить("Получатель_Формат_Представление", ФорматКонтрагента.ПредставлениеФормата);
			ФорматыПолучателя.Вставить("Получатель_Формат_СсылкаНаПриказ", ФорматКонтрагента.СсылкаНаПриказОВведении);
			ФорматыПолучателя.Вставить("Устарел", ФорматКонтрагента.Отключен);
			ФорматыПолучателя.Вставить("Отправитель_Формат_Представление", ФорматОрганизации.ПредставлениеФормата);
			ФорматыПолучателя.Вставить("Отправитель_Формат_СсылкаНаПриказ", ФорматОрганизации.СсылкаНаПриказОВведении);
			Результат.ФорматыПолучателя = ФорматыПолучателя;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьДействияПередИзменениемИспользованияУтверждения(НовоеЗначение) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	Отказ = Ложь;
	НастройкиЭДОСобытия.ПередИзменениемИспользованияУтверждения(НовоеЗначение, КонтекстДиагностики, Отказ);
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Отказ);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

#Область Обновление

// См. НастройкиЭДОСобытия.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_2_2

#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВерсиюФорматаИсходящихЭД207_208

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.2.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД207_208";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_1_2_7

#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВерсиюФорматаИсходящихЭД501_502

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.7.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД501_502";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_2

#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_УдалитьОтветныеТитулы

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.УдалитьОтветныеТитулы";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#Область НастройкиЭДОСлужебный_НастроитьАвтоПереходНаНовыеВерсииФорматовЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.20";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "НастройкиЭДОСлужебный.НастроитьАвтоПереходНаНовыеВерсииФорматовЭД";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_6

#Область НастройкиЭДОСлужебный_ЗаполнитьВходящиеДокументыНастроек

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "НастройкиЭДОСлужебный.ЗаполнитьВходящиеДокументыНастроек";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_10

#Область ОбменСКонтрагентами_ВключитьИспользованиеОзнакомленийСЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.10.25";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "НастройкиЭДОСлужебный.ВключитьИспользованиеОзнакомленийСЭД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("362ddf11-9595-418f-b695-436b7c60794d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьОзнакомлениеСЭлектроннымиДокументами";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьОзнакомлениеСЭлектроннымиДокументами";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: включение отправки на ознакомление электронных документов.
	|Отправка электронных документов на ознакомление временно не производится.'");
	
#КонецОбласти

#КонецОбласти

#Область Версия_1_6_1

#Область НастройкиЭДОСлужебный_УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.1.4";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "НастройкиЭДОСлужебный.УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45562b2d-f775-4a8e-a881-5b8029f1779d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.СоздаватьКонтрагентовАвтоматическиБЭД";
	Обработчик.ИзменяемыеОбъекты = "Константа.СоздаватьКонтрагентовАвтоматическиБЭД";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: Установка константы разрешающей автоматическое создание контрагентов при работе с ЭДО'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_6_4

#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.6.4.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b46394ef-478c-49bd-a670-c508adb73281");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника """"Настройки ЭДО"""". 
	|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПрямойОбменЭлектроннымиДокументами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ОператорыЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостояниеОрганизацийБЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостоянияКонтрагентовБЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьПрофилиНастроекЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьСоглашенияОбИспользованииЭД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьПрямойОбменЭлектроннымиДокументами.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостояниеОрганизацийБЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияКонтрагентовБЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.УдалитьСоглашенияОбИспользованииЭД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.УдалитьСоглашенияОбИспользованииЭД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСертификатыЭП.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область НастройкиЭДОСлужебный_ВключитьУтверждениеВходящихДокументов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.4.10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "НастройкиЭДОСлужебный.ВключитьУтверждениеВходящихДокументов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("928d2a7d-c7d1-43ae-bfdd-eddabc6f01a8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьОбменЭД,"
		+ "Константа.ОтправлятьВходящиеДокументыНаУтверждение";
	Обработчик.ИзменяемыеОбъекты = "Константа.ОтправлятьВходящиеДокументыНаУтверждение";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: Включает необходимость утверждения входящих документов, если включен обмен с контрагентами'");

#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Обработчик обновления БЭД 1.6.1.4
// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура,Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.СоздаватьКонтрагентовАвтоматическиБЭД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		Менеджер = Константы.СоздаватьКонтрагентовАвтоматическиБЭД.СоздатьМенеджерЗначения();
		Менеджер.Прочитать();
		
		Если Не Менеджер.Значение Тогда
			Менеджер.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Создавать контрагентов автоматически БЭД"" по причине:'") 
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Создавать контрагентов автоматически БЭД"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Создавать контрагентов автоматически БЭД"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);

	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.4
// Заполняет в справочнике СоглашенияОбИспользованииЭД табличную часть ВходящиеДокументы
// способами по умолчанию.
//
Процедура ЗаполнитьВходящиеДокументыНастроек() Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Настройка = Выборка.Ссылка.ПолучитьОбъект();
			Настройка.ВходящиеДокументы.Очистить();
			ТаблицаПредопределенногоПрофиля = ИнтеграцияЭДО.ТаблицаПредопределенногоПрофиля(
				ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов().Автоматически);
			ТаблицаПредопределенногоПрофиля.Колонки.ТипДокумента.Имя = "ВходящийДокумент";
			ТаблицаПредопределенногоПрофиля.Колонки.ПрикладнойТипДокумента.Имя = "ПрикладнойВидЭД";
			Настройка.ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Настройка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.20
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура НастроитьАвтоПереходНаНовыеВерсииФорматовЭД() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Включает использование механизма ознакомления с электронными документами.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьИспользованиеОзнакомленийСЭД(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		Менеджер = Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.СоздатьМенеджерЗначения();
		Менеджер.Прочитать();
		
		Если Не Менеджер.Значение Тогда
			Менеджер.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать ознакомление с электронными документами"" по причине:'") 
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать ознакомление с электронными документами"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать ознакомление с электронными документами"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

// Обработчик обновления БЭД 1.6.4
// Включает константу ОтправлятьВходящиеДокументыНаУтверждение.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьУтверждениеВходящихДокументов(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.ОтправлятьВходящиеДокументыНаУтверждение;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		Менеджер = Константы.ОтправлятьВходящиеДокументыНаУтверждение.СоздатьМенеджерЗначения();
		Менеджер.Прочитать();
		
		Если Не Менеджер.Значение И Константы.ИспользоватьОбменЭД.Получить() Тогда
			Менеджер.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Отправлять входящие документы на утверждение"" по причине:'") 
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Отправлять входящие документы на утверждение"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Отправлять входящие документы на утверждение"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти