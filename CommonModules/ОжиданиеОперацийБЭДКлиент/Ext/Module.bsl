#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// Конструктор контекста ожидания выполнения операции.
// 
// Параметры:
// 	ПараметрыОжиданияОперации - см. ОжиданиеОперацийБЭДСлужебныйКлиентСервер.НовыеПараметры 
// Возвращаемое значение:
// 	Структура - данные контекста ожидания операции. Для работы с контекстом используются методы данного модуля. 
Функция НовыйКонтекст(ПараметрыОжиданияОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыОжиданияОперации", ПараметрыОжиданияОперации);
	Результат.Вставить("ФормаВладелец");
	Результат.Вставить("ОперацияВыполняется", Ложь);
	Результат.Вставить("ВыполняетсяИнтерактивноеДействие", Ложь);
	Результат.Вставить("ИдентификаторОперации", Новый УникальныйИдентификатор);
	Результат.Вставить("ОбработчикПрерывания");
	Результат.Вставить("ОбработчикОбновленияПрогресса", Новый ОписаниеОповещения("ОбновлениеПрогресса",
		ОжиданиеОперацийБЭДСлужебныйКлиент, Результат));
	Результат.Вставить("ОбработчикПередИнтерактивнымДействием", Новый ОписаниеОповещения("ПередИнтерактивнымДействием",
		ОжиданиеОперацийБЭДСлужебныйКлиент, Результат));
	Результат.Вставить("ОбработчикПослеИнтерактивногоДействия", Новый ОписаниеОповещения("ПослеИнтерактивногоДействия",
		ОжиданиеОперацийБЭДСлужебныйКлиент, Результат));
	
	Возврат Результат;
	
КонецФункции

// См. ОжиданиеОперацийБЭДСлужебныйКлиентСервер.НовыеПараметры
Функция НовыеПараметры() Экспорт

	Возврат ОжиданиеОперацийБЭДСлужебныйКлиентСервер.НовыеПараметры();

КонецФункции

// Отмечает, что началось выполнение операции. Требуется для того, чтобы модуль, вызывающий асинхронную операцию, смог
// принять решение, открывать форму ожидания или нет.
// 
// Параметры:
// 	КонтекстОжиданияОперации - см. НовыйКонтекст 
Процедура ОтметитьНачалоВыполнения(КонтекстОжиданияОперации) Экспорт
	
	Если КонтекстОжиданияОперации <> Неопределено Тогда
		КонтекстОжиданияОперации.ОперацияВыполняется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет асинхронной операции установить обработчик, который будет вызван при отмене операции из интерфейса. 
// 
// Параметры:
// 	Обработчик - ОписаниеОповещения - обработчик оповещения, который будет вызван при интерактивной отмене операции.
// 		Результат в обработчик не передается. Все необходимое для идентификации операции необходимо добавить
// 		в ДополнительныеПараметры обработчика оповещения.  
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура УстановитьОбработчикПрерывания(Обработчик, КонтекстОжиданияОперации) Экспорт
	
	Если КонтекстОжиданияОперации <> Неопределено Тогда
		КонтекстОжиданияОперации.ОбработчикПрерывания = Обработчик;
	КонецЕсли;
		
КонецПроцедуры

// Позволяет подписаться на событие перед выполнением интерактивного действия (запрос пароля, открытие формы запроса
// данных и т.д.). Имеет смысл, когда интерфейс, вызывающий асинхронную операцию, использует вместо стандартной формы
// ожидания операции свои механизмы и хочет реагировать на выполнение интерактивных действий в асинхронной операции.
// Используется только в паре с УстановитьОбработчикОбработчикПослеИнтерактивногоДействия.
// 
// Параметры:
// 	Обработчик - ОписаниеОповещения - обработчик, который будет вызван перед выполнением интерактивного действия.
// 		Результат в обработчик не передается. Все необходимое для идентификации операции необходимо добавить
// 		в ДополнительныеПараметры обработчика оповещения.  
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура УстановитьОбработчикПередИнтерактивнымДействием(Обработчик, КонтекстОжиданияОперации) Экспорт
	
	КонтекстОжиданияОперации.ОбработчикПередИнтерактивнымДействием = Обработчик;
		
КонецПроцедуры

// Позволяет подписаться на событие после выполнением интерактивного действия (запрос пароля, открытие формы запроса
// данных и т.д.). Имеет смысл, когда интерфейс, вызывающий асинхронную операцию, использует вместо стандартной формы
// ожидания операции свои механизмы и хочет реагировать на выполнение интерактивных действий в асинхронной операции.
// Используется только в паре с УстановитьОбработчикПередИнтерактивнымДействием.
// 
// Параметры:
// 	Обработчик - ОписаниеОповещения - обработчик, который будет вызван после выполнением интерактивного действия.
// 		Результат в обработчик не передается. Все необходимое для идентификации операции необходимо добавить
// 		в ДополнительныеПараметры обработчика оповещения.  
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура УстановитьОбработчикОбработчикПослеИнтерактивногоДействия(Обработчик, КонтекстОжиданияОперации) Экспорт
	
	КонтекстОжиданияОперации.ОбработчикПослеИнтерактивногоДействия = Обработчик;
		
КонецПроцедуры

// Определяет, выполняется ли асинхронная операция.
// 
// Параметры:
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
// Возвращаемое значение:
// 	Булево - Истина, если операция выполняется.
Функция ОперацияВыполняется(КонтекстОжиданияОперации) Экспорт

	Возврат КонтекстОжиданияОперации.ОперацияВыполняется;
	
КонецФункции

#КонецОбласти

#Область Действия

// Открывает форму ожидания операции.
// 
// Параметры:
// 	ФормаВладелец - ФормаКлиентскогоПриложения - форма, которая будет владельцем формы ожидания.
// 	КонтекстОжиданияОперации - см. НовыйКонтекст. 
Процедура ОткрытьФормуОжидания(ФормаВладелец, КонтекстОжиданияОперации) Экспорт

	КонтекстОжиданияОперации.ФормаВладелец = ФормаВладелец;
	
	Если Не КонтекстОжиданияОперации.ВыполняетсяИнтерактивноеДействие Тогда
		ПараметрыОповещенияОЗакрытии = Новый Структура;
		ПараметрыОповещенияОЗакрытии.Вставить("ОбработчикПрерывания", КонтекстОжиданияОперации.ОбработчикПрерывания);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормы", ОжиданиеОперацийБЭДСлужебныйКлиент,
			КонтекстОжиданияОперации);
	
		ПараметрыОжиданияОперации = КонтекстОжиданияОперации.ПараметрыОжиданияОперации;
		ПараметрыОжиданияОперации.Вставить("ИдентификаторОперации", КонтекстОжиданияОперации.ИдентификаторОперации);
		ОткрытьФорму("Обработка.ОбщегоНазначенияБЭД.Форма.ОжиданиеОперации",
			ПараметрыОжиданияОперации, ФормаВладелец, КонтекстОжиданияОперации.ИдентификаторОперации, , ,
			ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

// Обновляет параметры формы ожидания операции.
// Для использования асинхронной операцией.
// 
// Параметры:
// 	ПараметрыОжиданияОперации - см. НовыеПараметры.
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура ОбновитьПрогресс(ПараметрыОжиданияОперации, КонтекстОжиданияОперации) Экспорт

	КонтекстОжиданияОперации.ПараметрыОжиданияОперации = ПараметрыОжиданияОперации;
	ВыполнитьОбработкуОповещения(КонтекстОжиданияОперации.ОбработчикОбновленияПрогресса, ПараметрыОжиданияОперации);
	
КонецПроцедуры

// Оповещает интерфейс ожидания выполнения операции о начале выполнения интерактивных действий в асинхронной операции.
// 
// Параметры:
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура НачатьИнтерактивноеДействие(КонтекстОжиданияОперации) Экспорт

	КонтекстОжиданияОперации.ВыполняетсяИнтерактивноеДействие = Истина;
	ВыполнитьОбработкуОповещения(КонтекстОжиданияОперации.ОбработчикПередИнтерактивнымДействием);
	
КонецПроцедуры

// Оповещает интерфейс ожидания выполнения операции об окончании выполнения интерактивных действий в асинхронной операции.
// 
// Параметры:
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура ЗакончитьИнтерактивноеДействие(КонтекстОжиданияОперации) Экспорт

	КонтекстОжиданияОперации.ВыполняетсяИнтерактивноеДействие = Ложь;
	ВыполнитьОбработкуОповещения(КонтекстОжиданияОперации.ОбработчикПослеИнтерактивногоДействия);
	
КонецПроцедуры

// Закрывает форму ожидания выполнения операции, см. ОткрытьФормуОжидания.
// 
// Параметры:
// 	КонтекстОжиданияОперации - см. НовыйКонтекст.
Процедура ЗакрытьФормуОжидания(КонтекстОжиданияОперации) Экспорт

	Оповестить(ОжиданиеОперацийБЭДСлужебныйКлиентСервер.ИмяСобытияЗакрытияФормы(), КонтекстОжиданияОперации);

КонецПроцедуры

#КонецОбласти

#Область СтарыйИнтерфейсОжидания

// Заполняет структуру параметров значениями по умолчанию.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется значениями по умолчанию. 
//
// 
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
КонецПроцедуры

// Заполняет структуру параметров новыми расчетными значениями.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется расчетными значениями. 
//
// 
Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
