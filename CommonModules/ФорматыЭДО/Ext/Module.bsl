////////////////////////////////////////////////////////////////////////////////
// Общий модуль ФорматыЭДО
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Форматы

// Возвращает поддерживаемые форматы электронных документов.
//
// Возвращаемое значение:
//  Структура - форматы:
//   * CML208 - Строка - идентификатор формата CML 2.08.
//   * CML402 - Строка - идентификатор формата CML 4.02.
//   * ФНС - Структура - форматы ФНС:
//    ** УПД - Структура - форматы УПД (ММВ-7-15/155@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** УПД2019 - Структура - форматы УПД 2019 (ММВ-7-15/820@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** УКД - Структура - форматы УКД (ММВ-7-15/189@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** УКД2020 - Структура - форматы УКД (ЕД-7-26/736@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** ПередачаТоваров - Структура - форматы передачи товаров (ММВ-7-10/551@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** ПередачаРабот - Структура - форматы передачи результатов работ (ММВ-7-10/552@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** АктОРасхождениях - Структура - форматы документа о приемке и расхождениях (ММВ-7-15/423@):
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** ТорговаяОперация - Структура - форматы торговой операции (ММВ-7-6/172@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** ПриемкаСдачаРабот - Структура - форматы приемки-сдачи работ (ММВ-7-6/172@):
//     *** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//     *** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//    ** СчетФактура - Строка - идентификатор формата счета-фактуры (ММВ-7-6/93@).
//    ** КорректировочныйСчетФактура - Строка - идентификатор формата корректировочного счета-фактуры (ММВ-7-6/93@).
//    ** ИзвещениеОПолучении - Строка - идентификатор формата извещения о получении (ММВ-7-6/363@).
//    ** ПодтверждениеДатыОтправки - Строка - идентификатор формата подтверждения даты отправки (ММВ-7-6/363@).
//    ** ПодтверждениеДатыПолучения - Строка - идентификатор формата подтверждения даты получения (ММВ-7-6/363@).
//    ** УведомлениеОбУточнении - Строка - идентификатор формата уведомления об уточнении (ММВ-7-6/363@).
//    ** УведомлениеОбУточнении0101 - Строка - идентификатор формата уведомления об уточнении 0101.
//    ** МашиночитаемаяДоверенность - Строка
//    ** МашиночитаемаяДоверенность2022 - Строка
//    ** АктСверкиВзаиморасчетов - Структура - форматы акта сверки взаимных расчетов (ЕД-7-26/405@):
//     *** ИнформацияОтправителя - Строка - идентификатор формата информации отправителя.
//     *** ИнформацияПолучателя - Строка - идентификатор формата информации получателя.
//    ** СчетНаОплату101 - Строка - форматы счета на оплату (версия 1.01).
//    ** АктПриемкиСтроительныхРаботУслуг - Структура - ЕД-7-26/691@:
//     *** ИнформацияПодрядчика - Строка
//     *** ИнформацияЗаказчика - Строка
//    ** ДоговорнойДокумент101 - Строка - PDF/А-3 формат договорного документа (версия 1.01).
//   * КорректировочныйДокумент1С - Структура - формат корректировочного документа 1С:
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * БизнесСеть - Структура - формат бизнес-сети:
//    ** КоммерческоеПредложение - Строка - идентификатор формата коммерческого предложения.
//    ** ЗапросКоммерческогоПредложения - Строка - идентификатор формата запроса коммерческого предложения.
//   * ПредложениеОбАннулировании - Строка - идентификатор формата предложения об аннулировании.
//   * ПрикладнойФормат - Структура - форматы прикладных видов электронных документов:
//    ** ОсновнойДокумент - Строка - идентификатор основного документа.
//
Функция ПоддерживаемыеФорматы() Экспорт
	
	ФорматыCML = ФорматыЭДО_CML.ПоддерживаемыеФорматы();
	ФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
	
	Форматы = Новый Структура;
	
	Форматы.Вставить("CML208", ФорматыCML.CML208);
	Форматы.Вставить("CML402", ФорматыCML.CML402);
	
	Форматы.Вставить("ФНС", Новый Структура);
	
	Форматы.ФНС.Вставить("УПД", Новый Структура);
	Форматы.ФНС.УПД.Вставить("ИнформацияПродавца", ФорматыФНС.УПД.ИнформацияПродавца);
	Форматы.ФНС.УПД.Вставить("ИнформацияПокупателя", ФорматыФНС.УПД.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("УПД2019", Новый Структура);
	Форматы.ФНС.УПД2019.Вставить("ИнформацияПродавца", ФорматыФНС.УПД2019.ИнформацияПродавца);
	Форматы.ФНС.УПД2019.Вставить("ИнформацияПокупателя", ФорматыФНС.УПД2019.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("УКД", Новый Структура);
	Форматы.ФНС.УКД.Вставить("ИнформацияПродавца", ФорматыФНС.УКД.ИнформацияПродавца);
	Форматы.ФНС.УКД.Вставить("ИнформацияПокупателя", ФорматыФНС.УКД.ИнформацияПокупателя);

	Форматы.ФНС.Вставить("УКД2020", Новый Структура);
	Форматы.ФНС.УКД2020.Вставить("ИнформацияПродавца", ФорматыФНС.УКД2020.ИнформацияПродавца);
	Форматы.ФНС.УКД2020.Вставить("ИнформацияПокупателя", ФорматыФНС.УКД2020.ИнформацияПокупателя);	
	
	Форматы.ФНС.Вставить("ПередачаТоваров", Новый Структура);
	Форматы.ФНС.ПередачаТоваров.Вставить("ИнформацияПродавца", ФорматыФНС.ПередачаТоваров.ИнформацияПродавца);
	Форматы.ФНС.ПередачаТоваров.Вставить("ИнформацияПокупателя", ФорматыФНС.ПередачаТоваров.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("ПередачаРабот", Новый Структура);
	Форматы.ФНС.ПередачаРабот.Вставить("ИнформацияПродавца", ФорматыФНС.ПередачаРабот.ИнформацияПродавца);
	Форматы.ФНС.ПередачаРабот.Вставить("ИнформацияПокупателя", ФорматыФНС.ПередачаРабот.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("АктОРасхождениях", Новый Структура);
	Форматы.ФНС.АктОРасхождениях.Вставить("ИнформацияПокупателя", ФорматыФНС.АктОРасхождениях.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("ТорговаяОперация", Новый Структура);
	Форматы.ФНС.ТорговаяОперация.Вставить("ИнформацияПродавца", ФорматыФНС.ТорговаяОперация.ИнформацияПродавца);
	Форматы.ФНС.ТорговаяОперация.Вставить("ИнформацияПокупателя", ФорматыФНС.ТорговаяОперация.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("ПриемкаСдачаРабот", Новый Структура);
	Форматы.ФНС.ПриемкаСдачаРабот.Вставить("ИнформацияПродавца", ФорматыФНС.ПриемкаСдачаРабот.ИнформацияПродавца);
	Форматы.ФНС.ПриемкаСдачаРабот.Вставить("ИнформацияПокупателя", ФорматыФНС.ПриемкаСдачаРабот.ИнформацияПокупателя);
	
	Форматы.ФНС.Вставить("СчетФактура", ФорматыФНС.СчетФактура);
	Форматы.ФНС.Вставить("КорректировочныйСчетФактура", ФорматыФНС.КорректировочныйСчетФактура);
	
	Форматы.ФНС.Вставить("ИзвещениеОПолучении", ФорматыФНС.ИзвещениеОПолучении);
	Форматы.ФНС.Вставить("ПодтверждениеДатыОтправки", ФорматыФНС.ПодтверждениеДатыОтправки);
	Форматы.ФНС.Вставить("ПодтверждениеДатыПолучения", ФорматыФНС.ПодтверждениеДатыПолучения);
	Форматы.ФНС.Вставить("УведомлениеОбУточнении", ФорматыФНС.УведомлениеОбУточнении);
	Форматы.ФНС.Вставить("УведомлениеОбУточнении0101", ФорматыФНС.УведомлениеОбУточнении0101);

	Форматы.ФНС.Вставить("МашиночитаемаяДоверенность", ФорматыФНС.МашиночитаемаяДоверенность);
	Форматы.ФНС.Вставить("МашиночитаемаяДоверенность2022", ФорматыФНС.МашиночитаемаяДоверенность2022);
	
	Форматы.ФНС.Вставить("АктСверкиВзаиморасчетов", Новый Структура);
	Форматы.ФНС.АктСверкиВзаиморасчетов.Вставить("ИнформацияОтправителя",
		ФорматыФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя);
	Форматы.ФНС.АктСверкиВзаиморасчетов.Вставить("ИнформацияПолучателя",
		ФорматыФНС.АктСверкиВзаиморасчетов.ИнформацияПолучателя);
	
	Форматы.ФНС.Вставить("СчетНаОплату101", ФорматыФНС.СчетНаОплату101);
	Форматы.ФНС.Вставить("ДоговорнойДокумент101", ФорматыФНС.ДоговорнойДокумент101);
	
	Форматы.ФНС.Вставить("АктПриемкиСтроительныхРаботУслуг", Новый Структура);
	Форматы.ФНС.АктПриемкиСтроительныхРаботУслуг.Вставить("ИнформацияПодрядчика",
		ФорматыФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика);
	Форматы.ФНС.АктПриемкиСтроительныхРаботУслуг.Вставить("ИнформацияЗаказчика",
		ФорматыФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияЗаказчика);
	
	Форматы.Вставить("КорректировочныйДокумент1С", Новый Структура);
	Форматы.КорректировочныйДокумент1С.Вставить("ИнформацияПродавца", "");
	Форматы.КорректировочныйДокумент1С.Вставить("ИнформацияПокупателя", "");
	
	Форматы.Вставить("БизнесСеть", Новый Структура);
	Форматы.БизнесСеть.Вставить("КоммерческиеПредложения", ФорматыФНС.БизнесСеть.КоммерческиеПредложения);
	
	Форматы.Вставить("ПредложениеОбАннулировании", ФорматыФНС.ПредложениеОбАннулировании);
	
	Форматы.Вставить("ПрикладнойФормат", Новый Структура);
	Форматы.ПрикладнойФормат.Вставить("ОсновнойДокумент", "");
	
	Возврат Форматы;
	
КонецФункции

Функция ЗапросАктуальныхФорматов(ИмяВременнойТаблицы) Экспорт
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФорматыЭлектронныхДокументов.Формат КАК Формат
	|ПОМЕСТИТЬ втДействующиеФорматы
	|ИЗ
	|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|ГДЕ
	|	(ФорматыЭлектронныхДокументов.ДатаНачалаДействия = &ПустаяДата
	|			ИЛИ ФорматыЭлектронныхДокументов.ДатаНачалаДействия <= &ТекущаяДата)
	|	И (ФорматыЭлектронныхДокументов.ДатаОкончанияДействия = &ПустаяДата
	|			ИЛИ ФорматыЭлектронныхДокументов.ДатаОкончанияДействия >= &ТекущаяДата)
	|	И ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаФорматов.ТипДокумента КАК ТипДокумента,
	|	РасшифровкаФорматов.Формат КАК Формат
	|ПОМЕСТИТЬ втРасшифровка
	|ИЗ
	|	&РасшифровкаФорматов КАК РасшифровкаФорматов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасшифровка.Формат КАК Формат,
	|	СвязьВидовФорматов.ВидДокумента КАК ВидДокумента,
	|	СвязьВидовФорматов.Приоритет КАК ФорматПриоритет
	|ПОМЕСТИТЬ втПоддерживаемыеФорматы
	|ИЗ
	|	втРасшифровка КАК втРасшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовФорматов
	|		ПО втРасшифровка.ТипДокумента = СвязьВидовФорматов.ВидДокумента.ТипДокумента
	|			И втРасшифровка.Формат = СвязьВидовФорматов.Формат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеФорматы КАК втДействующиеФорматы
	|		ПО втРасшифровка.Формат = втДействующиеФорматы.Формат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРасшифровка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоддерживаемыеФорматы.ВидДокумента КАК ВидДокумента,
	|	МАКСИМУМ(втПоддерживаемыеФорматы.ФорматПриоритет) КАК ФорматПриоритет
	|ПОМЕСТИТЬ втПриоритетныеПоддерживаемыеФорматы
	|ИЗ
	|	втПоддерживаемыеФорматы КАК втПоддерживаемыеФорматы
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоддерживаемыеФорматы.ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоддерживаемыеФорматы.Формат КАК Формат,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	втПоддерживаемыеФорматы КАК втПоддерживаемыеФорматы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритетныеПоддерживаемыеФорматы КАК втПриоритетныеПоддерживаемыеФорматы
	|		ПО втПоддерживаемыеФорматы.ВидДокумента = втПриоритетныеПоддерживаемыеФорматы.ВидДокумента
	|			И втПоддерживаемыеФорматы.ФорматПриоритет = втПриоритетныеПоддерживаемыеФорматы.ФорматПриоритет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО (ВидыДокументовЭДО.ТипДокумента = втПоддерживаемыеФорматы.ВидДокумента.ТипДокумента)";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ПустаяДата", Дата(1, 1, 1));
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("РасшифровкаФорматов", РасшифровкаВариантовЗаполненияФорматовЭДО());
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ПрикладныеФорматы() Экспорт
	Возврат ИнтеграцияЭДО.ПрикладныеФорматыЭлектронныхДокументов();
КонецФункции

Функция ЗапросФорматовЭлектронныхДокументов(ИмяВременнойТаблицы) Экспорт
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК ИдентификаторСервиса
		|	ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов";
		
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Процедура ОбновитьФорматыЭлектронныхДокументов(Форматы, ДатаИзменения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	Если Форматы.ДатаПоследнегоИзменения <> ДатаИзменения ИЛИ Не ЕстьЗаписи Тогда
		
		ФорматыЭлектронныхДокументов = Форматы.ФорматыЭлектронныхДокументов;
		ФорматыЭлектронныхДокументов.Колонки.Добавить("ПоддерживаетсяКонфигурацией", Новый ОписаниеТипов("Булево"));
		ФорматыЭлектронныхДокументов.Индексы.Добавить("Формат");
		
		ТаблицаИзМакета = ФорматыЭДОПовтИсп.СведенияОФорматахЭлектронныхДокументовИзМакета();
		ТаблицаИзМакета.Свернуть("ИдентификаторФормата");
		ПоддерживаемыеФорматы = ТаблицаИзМакета.ВыгрузитьКолонку("ИдентификаторФормата");
		
		Для Каждого Формат Из ПоддерживаемыеФорматы Цикл
			
			Отбор = Новый Структура("Формат", Формат);
			НайденныеСтроки = ФорматыЭлектронныхДокументов.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				
				СтрокаТЧ.ПоддерживаетсяКонфигурацией = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК ИдентификаторСервиса,
		|	ФорматыЭлектронныхДокументов.Представление КАК Представление,
		|	ФорматыЭлектронныхДокументов.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ФорматыЭлектронныхДокументов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ФорматыЭлектронныхДокументов.Регламентированный КАК Регламентированный,
		|	ФорматыЭлектронныхДокументов.ПриказОВведенииФормата КАК ПриказОВведении,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК СсылкаНаПриказОВведении,
		|	ФорматыЭлектронныхДокументов.ПространстваИмен КАК ПространстваИмен,
		|	ФорматыЭлектронныхДокументов.ЭтоУПД КАК ЭтоУПД,
		|	ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией КАК ПоддерживаетсяКонфигурацией,
		|	ФорматыЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента КАК ТекстПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента КАК ПараметрыПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.УсловиеВыводаПредупреждения КАК УсловиеВыводаПредупреждения
		|ПОМЕСТИТЬ СписокФорматовЭлектронныхДокументов
		|ИЗ
		|	&ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	NULL КАК ИдентификаторСервиса,
		|	NULL КАК Представление,
		|	NULL КАК ДатаНачалаДействия,
		|	NULL КАК ДатаОкончанияДействия,
		|	NULL КАК Регламентированный,
		|	NULL КАК ЭтоУПД,
		|	NULL КАК ПриказОВведении,
		|	NULL КАК СсылкаНаПриказОВведении,
		|	NULL КАК ПространстваИмен,
		|	NULL КАК ПоддерживаетсяКонфигурацией,
		|	NULL КАК ТекстПредупрежденияДляВходящегоДокумента,
		|	NULL КАК ПараметрыПредупрежденияДляВходящегоДокумента,
		|	NULL КАК УсловиеВыводаПредупреждения,
		|	ИСТИНА КАК УдалитьСтроку
		|ИЗ
		|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокФорматовЭлектронныхДокументов КАК СписокФорматовЭлектронныхДокументов
		|		ПО (ФорматыЭлектронныхДокументов.ИдентификаторСервиса = (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))))
		|ГДЕ
		|	СписокФорматовЭлектронныхДокументов.Формат ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокФорматовЭлектронныхДокументов.Формат,
		|	СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса,
		|	СписокФорматовЭлектронныхДокументов.Представление,
		|	СписокФорматовЭлектронныхДокументов.ДатаНачалаДействия,
		|	СписокФорматовЭлектронныхДокументов.ДатаОкончанияДействия,
		|	СписокФорматовЭлектронныхДокументов.Регламентированный,
		|	СписокФорматовЭлектронныхДокументов.ЭтоУПД,
		|	СписокФорматовЭлектронныхДокументов.ПриказОВведении,
		|	СписокФорматовЭлектронныхДокументов.СсылкаНаПриказОВведении,
		|	СписокФорматовЭлектронныхДокументов.ПространстваИмен,
		|	СписокФорматовЭлектронныхДокументов.ПоддерживаетсяКонфигурацией,
		|	СписокФорматовЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента,
		|	СписокФорматовЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента,
		|	СписокФорматовЭлектронныхДокументов.УсловиеВыводаПредупреждения,
		|	ЛОЖЬ
		|ИЗ
		|	СписокФорматовЭлектронныхДокументов КАК СписокФорматовЭлектронныхДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО ((ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))))
		|			И ((ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.Формат КАК СТРОКА(50))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.Формат, """") КАК СТРОКА(50)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.Представление КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.Представление, """") КАК СТРОКА(1024)))
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ДатаНачалаДействия <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ДатаНачалаДействия, """")
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ДатаОкончанияДействия <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ДатаОкончанияДействия, """")
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ПоддерживаетсяКонфигурацией <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией, ЛОЖЬ)
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.УсловиеВыводаПредупреждения КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.УсловиеВыводаПредупреждения, """") КАК СТРОКА(1024)))
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ЭтоУПД <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ЭтоУПД, ЛОЖЬ)
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ПриказОВведении КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПриказОВведении, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.СсылкаНаПриказОВведении КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведении, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ПространстваИмен КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПространстваИмен, """") КАК СТРОКА(1024))))";
		
		Запрос.УстановитьПараметр("ФорматыЭлектронныхДокументов", Форматы.ФорматыЭлектронныхДокументов);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		НачатьТранзакцию();
		
		Попытка
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Набор = РегистрыСведений.ФорматыЭлектронныхДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.Формат.Установить(ВыборкаДетальныеЗаписи.Формат);
				
				Если ВыборкаДетальныеЗаписи.УдалитьСтроку Тогда
					Набор.Записать();
				Иначе
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					Набор.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Информация = ИнформацияОбОшибке();
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление форматов ЭДО из сервиса настроек'"),
				ПодробноеПредставлениеОшибки(Информация));
			
		КонецПопытки;
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОтборФорматовЭлектронныхДокументов() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Действует", Истина);
	Отбор.Вставить("ПоддерживаетсяКонфигурацией", Истина);
	Отбор.Вставить("ВидыДокументов", Новый Массив);
	
	Возврат Отбор;
КонецФункции

Функция ФорматыЭлектронныхДокументов(Отбор = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	Результат.Колонки.Добавить("ИдентификаторФормата", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Результат.Колонки.Добавить("ПредставлениеФормата", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДатаНачалаДействия", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончанияДействия", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("Формализованный", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПриказОВведении", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СсылкаНаПриказОВведении", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВозможноИспользованиеУПД", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("ПространстваИмен", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТекстПредупрежденияДляВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПараметрыПредупрежденияДляВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("УсловиеВыводаПредупреждения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПоддерживаетсяКонфигурацией", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязьВидовИФорматовЭД.ВидДокумента КАК ВидДокумента,
		|	ФорматыЭлектронныхДокументов.Формат КАК ИдентификаторФормата,
		|	ФорматыЭлектронныхДокументов.Представление КАК ПредставлениеФормата,
		|	ФорматыЭлектронныхДокументов.ДатаОкончанияДействия < &ТекущаяДата
		|		И ФорматыЭлектронныхДокументов.ДатаОкончанияДействия <> &ПустаяДата КАК Отключен,
		|	ФорматыЭлектронныхДокументов.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ФорматыЭлектронныхДокументов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ФорматыЭлектронныхДокументов.Формализованный КАК Формализованный,
		|	ФорматыЭлектронныхДокументов.ПриказОВведении КАК ПриказОВведении,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведении КАК СсылкаНаПриказОВведении,
		|	ФорматыЭлектронныхДокументов.ЭтоУПД КАК ВозможноИспользованиеУПД,
		|	СвязьВидовИФорматовЭД.Приоритет КАК Приоритет,
		|	ФорматыЭлектронныхДокументов.ПространстваИмен КАК ХранилищеПространстваИмен,
		|	ФорматыЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента КАК ТекстПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента КАК ПараметрыПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.УсловиеВыводаПредупреждения КАК УсловиеВыводаПредупреждения,
		|	ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией КАК ПоддерживаетсяКонфигурацией
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовИФорматовЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО СвязьВидовИФорматовЭД.Формат = ФорматыЭлектронныхДокументов.Формат
		|ГДЕ
		|	&ОтборПоВидамДокументов
		|	И &ОтборПоддерживаетсяКонфигурацией
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДокумента,
		|	Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустаяДата" , Дата(1, 1, 1));
	
	Если Отбор <> Неопределено
		И ЗначениеЗаполнено(Отбор.ВидыДокументов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоВидамДокументов",
			"СвязьВидовИФорматовЭД.ВидДокумента В (&ВидыДокументов)");
		Запрос.УстановитьПараметр("ВидыДокументов", Отбор.ВидыДокументов);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоВидамДокументов", Истина);
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоддерживаетсяКонфигурацией",
			"ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией = &ОтборПоддерживаетсяКонфигурацией");
		Запрос.УстановитьПараметр("ОтборПоддерживаетсяКонфигурацией", Отбор.ПоддерживаетсяКонфигурацией);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоддерживаетсяКонфигурацией", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Действует = ФорматДействует(Выборка, ТекущаяДата);
		
		Если Отбор <> Неопределено
			И Отбор.Действует <> Действует Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.Действует = Действует;
		СтрокаТаблицы.ПространстваИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			Выборка.ХранилищеПространстваИмен, ",", Истина, Истина);
		
	КонецЦикла;
	
	ПрикладныеФорматы = ПрикладныеФорматы();
	Если Не ЗначениеЗаполнено(ПрикладныеФорматы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипыПрикладныхФорматов = ПрикладныеФорматы.ВыгрузитьКолонку("ПрикладнойТипДокумента");
	ВидыДокументовПоПрикладнымТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоПрикладнымТипам(ТипыПрикладныхФорматов);
	
	ОтборВидовДокументов = Неопределено;
	Если Отбор <> Неопределено
		И ЗначениеЗаполнено(Отбор.ВидыДокументов) Тогда
		ОтборВидовДокументов = Отбор.ВидыДокументов;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПрикладныеФорматы Цикл
		Действует = ФорматДействует(СтрокаТаблицы, ТекущаяДата);
		ВидДокумента = ВидыДокументовПоПрикладнымТипам[СтрокаТаблицы.ПрикладнойТипДокумента];
		Если Не ЗначениеЗаполнено(ВидДокумента)
			Или ОтборВидовДокументов <> Неопределено И ОтборВидовДокументов.Найти(ВидДокумента) = Неопределено
			Или Отбор <> Неопределено И Отбор.Действует <> Действует Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ВидДокумента = ВидДокумента;
		НоваяСтрока.Действует = Действует;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВариантыЗаполненияПолейЭлектронныхДокументов(ТипДокумента, Формат) Экспорт
	
	ВидЭлектронногоДокумента = ТипДокумента;
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмениИИдентификатору("УПД", Формат);
	ЭтоУПД_2019 = ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019");
	ЭтоПередачаТоваров = (ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ЭтоСчетФактура = ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.УПД;
	
	СоответствиеВариантов = Новый Соответствие;
	
	Если (ЭтоПередачаТоваров И Формат = "ON_SCHFDOPPR_1_995_01_05_01")
		ИЛИ (ЭтоПередачаТоваров И ЭтоУПД_2019)
		ИЛИ ЭтоСчетФактура Тогда
		
		СоответствиеВариантов.Вставить("УПД_ТоварКод", "ТоварКод");
		
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная 
			И Формат = "DP_TOVTORGPR_1_992_01_05_01" Тогда
		
		СоответствиеВариантов.Вставить("ПередачаТоваров_ТоварКод", "ТоварКод");
		
	КонецЕсли;
	
	ВариантыЗаполненияПолейФормата = Новый Структура;
	
	Если СоответствиеВариантов.Количество() = 0 Тогда 
		Возврат ВариантыЗаполненияПолейФормата;
	КонецЕсли;
	
	ВариантыЗаполненияПолей = Новый Структура;
	ВариантыЗаполненияПолей.Вставить("УПД_ТоварКод", Новый СписокЗначений);
	ВариантыЗаполненияПолей.Вставить("ПередачаТоваров_ТоварКод", Новый СписокЗначений);
	
	ВариантыЗаполненияПолей.УПД_ТоварКод.Добавить("Код", НСтр("ru = 'Внутренний код'"));
	ВариантыЗаполненияПолей.УПД_ТоварКод.Добавить("Штрихкод", НСтр("ru = 'Штрихкод'"));
	
	ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.Добавить("Код", НСтр("ru = 'Внутренний код'"));
	ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.Добавить("Штрихкод", НСтр("ru = 'Штрихкод'"));
	
	ВариантыЗаполненияПолей = Новый ФиксированнаяСтруктура(ВариантыЗаполненияПолей);
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(
		ВариантыЗаполненияПолей);
	
	Для Каждого СоответствиеВарианта Из СоответствиеВариантов Цикл
		ЗначениеСвойства = Неопределено;
		Если ВариантыЗаполненияПолей.Свойство(СоответствиеВарианта.Ключ, ЗначениеСвойства)
			И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			ВариантыЗаполненияПолейФормата.Вставить(СоответствиеВарианта.Значение, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВариантыЗаполненияПолейФормата;
	
КонецФункции

Функция НовыйОтборЗапросаФорматовПоУмолчанию() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидДокумента", "");
	Возврат Отбор;
	
КонецФункции

Функция ЗапросФорматовПоУмолчанию(ИмяВременнойТаблицы = "", Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборЗапросаФорматовПоУмолчанию();
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат
		|ПОМЕСТИТЬ втФорматы
		|ИЗ
		|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|ГДЕ
		|	(ФорматыЭлектронныхДокументов.ДатаНачалаДействия = &ПустаяДата
		|	ИЛИ ФорматыЭлектронныхДокументов.ДатаНачалаДействия <= &ТекущаяДата)
		|	И (ФорматыЭлектронныхДокументов.ДатаОкончанияДействия = &ПустаяДата
		|	ИЛИ ФорматыЭлектронныхДокументов.ДатаОкончанияДействия >= &ТекущаяДата)
		|	И ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязьВидовФорматов.ВидДокумента КАК ВидДокумента,
		|	МАКСИМУМ(СвязьВидовФорматов.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втПриоритетныеСвязи
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовФорматов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФорматы КАК втДействующиеФорматы
		|		ПО СвязьВидовФорматов.Формат = втДействующиеФорматы.Формат
		|		И &ОтборПоВидуДокумента
		|СГРУППИРОВАТЬ ПО
		|	СвязьВидовФорматов.ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязьВидовИФорматов.ВидДокумента КАК ВидДокумента,
		|	СвязьВидовИФорматов.Формат КАК Формат
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовИФорматов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритетныеСвязи КАК втПриоритетныеСвязи
		|		ПО СвязьВидовИФорматов.ВидДокумента = втПриоритетныеСвязи.ВидДокумента
		|		И СвязьВидовИФорматов.Приоритет = втПриоритетныеСвязи.Приоритет";
	
	ОтборПоВидуДокумента = "";
	Если ЗначениеЗаполнено(Отбор.ВидДокумента) Тогда
		ОтборПоВидуДокумента = "И СвязьВидовФорматов.ВидДокумента " + Отбор.ВидДокумента;
	КонецЕсли;
	
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "И &ОтборПоВидуДокумента", ОтборПоВидуДокумента);
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ПустаяДата", Дата(1, 1, 1));
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Выполняет проверку на то, что переданные двоичные данные являются сводным УПД.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные ЭД.
//
// Возвращаемое значение:
//  Булево - признак того, что это сводный УПД.
//
Функция ЭтоСводныйУПД(ДвоичныеДанные) Экспорт
	
	ПараметрыДокумента = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные);
	Если ПараметрыДокумента = Неопределено
		ИЛИ ПараметрыДокумента.ИсходныйФормат <> ПоддерживаемыеФорматы().ФНС.УПД2019.ИнформацияПродавца Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанные.ОткрытьПотокДляЧтения());
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если ТипЗнч(ДанныеXDTO.Документ.СвСчФакт.СвПрод) = Тип("СписокXDTO") Тогда
		Если ДанныеXDTO.Документ.СвСчФакт.СвПрод.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеXDTO.Документ.СвСчФакт.СвПокуп) = Тип("СписокXDTO") Тогда
		Если ДанныеXDTO.Документ.СвСчФакт.СвПокуп.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоФорматПространства(ПространствоФорматов, Формат) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ПространствоФорматов) = Тип("Структура") Тогда
		Для Каждого ЭлементПространства Из ПространствоФорматов Цикл
			Если ЭтоФорматПространства(ЭлементПространства.Значение, Формат) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = ПространствоФорматов = Формат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСтандартныйФормат(Формат) Экспорт
	СтандартныеФорматы = ПоддерживаемыеФорматы();
	Возврат ЭтоФорматПространства(СтандартныеФорматы, Формат);
КонецФункции

Функция ЭтоСлужебноеИмяДополнительногоПоля(ИмяПоля, Формат) Экспорт
	
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();	
	
	Результат = Ложь;
	
	Если СтрНачинаетсяС(ИмяПоля, ПрефиксДополнительныхДанныхЭлектронныхДокументов()) Тогда
		Результат = Истина;
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		Если ИмяПоля = "ИД"
			Или ИмяПоля = "ИДЭДДокументаОснования"
			Или ИмяПоля = "ИдентификаторДокументаОснования"
			Или ИмяПоля = "ВидСчетаФактуры"
			Или ИмяПоля = "ТолькоУслуги"
			Или ИмяПоля = "ДанныеКомиссионера"
			Или ИмяПоля = "ИныеСведенияОбОтгрузке"
			Или ИмяПоля = "cis"
			Или ИмяПоля = "sscc" Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца
		ИЛИ Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		
		Если ИмяПоля = "ИД"
			ИЛИ ИмяПоля = "ИДЭДДокументаОснования"
			ИЛИ ИмяПоля = "ИдентификаторДокументаОснования" Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.CML208 Тогда
		
		Если ИмяПоля = "ИД"
			ИЛИ ИмяПоля = "СпособДоставки"
			ИЛИ ИмяПоля = "АдресДоставки"
			ИЛИ ИмяПоля = "АдресДоставкиЗначенияПолей"
			ИЛИ ИмяПоля = "_ТЗ_ДокументыОснования" Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КНДПоИмениФайлаФНС(ИмяФайла) Экспорт
	
	КНД = "";
	
	Если СтрНачинаетсяС(ИмяФайла, "ON_NSCHFDOPPR") Тогда
		КНД = "1115131";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_NSCHFDOPPOK") Тогда
		КНД = "1115132";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_NKORSCHFDOPPR") Тогда
		КНД = "1115133";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_NKORSCHFDOPPOK") Тогда
		КНД = "1115134";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_SCHFDOPPR") Тогда
		КНД = "1115125";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_SCHFDOPPOK") Тогда
		КНД = "1115126";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_KORSCHFDOPPR") Тогда
		КНД = "1115127";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_KORSCHFDOPPOK") Тогда
		КНД = "1115128";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_REZRUISP") Тогда
		КНД = "1175012";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_REZRUZAK") Тогда
		КНД = "1175013";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_ZAKTPRM") Тогда
		КНД = "1175007";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_TOVTORGPR") Тогда
		КНД = "1175010";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_TOVTORGPOK") Тогда
		КНД = "1175011";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_PTORG12") Тогда
		КНД = "1175005";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "DP_PRIRASXPRIN") Тогда
		КНД = "1175014";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_AKTSVEROTP") Тогда
		КНД = "1110332";	
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_AKTSVERPOL") Тогда
		КНД = "1110333";
	ИначеЕсли СтрНачинаетсяС(ИмяФайла, "ON_CHETOP") Тогда
		КНД = "1110379";
	Иначе
		Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ИмяФайла);
		Если Обработка <> Неопределено Тогда
			Попытка
				КНД = Обработка.КНД();
			Исключение
				ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
				Шаблон = НСтр(
					"ru = 'Обработка %1, не удалось определить КНД, по причине:
					|%2'");
				ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
					УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат КНД;

КонецФункции

Функция НовыйПараметрыПолученияКНД() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ТипДокумента");
	Параметры.Вставить("ТипРегламента");
	Параметры.Вставить("ИмяФайла");
	Параметры.Вставить("Подтверждение", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция КНДПоСвойствамДокумента(СвойстваДокумента) Экспорт
	ТипДокумента = СвойстваДокумента.ТипДокумента;
	ТипРегламента = СвойстваДокумента.ТипРегламента;
	Подтверждение = Ложь;
	Если СвойстваДокумента.Подтверждение Тогда
		Подтверждение = Истина;
	КонецЕсли;
	ИмяФайла = "";
	
	Если СвойстваДокумента.ИмяФайла <> "" Тогда
		ИмяФайла = СвойстваДокумента.ИмяФайла;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КНД = "1115101";
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
			КНД = "1115131";
			Если Подтверждение Тогда
				КНД = "1115132";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
			КНД = "1115132";
		Иначе
			КНД = "1115125";
			Если Подтверждение Тогда
				КНД = "1115126";
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КНД = "1115108";
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPR") > 0 Тогда
			КНД = "1115133";
			Если Подтверждение Тогда
				КНД = "1115134";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPOK") > 0 Тогда
			КНД = "1115134";
		Иначе
			КНД = "1115127";
			Если Подтверждение Тогда
				КНД = "1115128";
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КНД = "1175004";
			Если Подтверждение Тогда
				КНД = "1175005";
			КонецЕсли;
			
		ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД Тогда
			Если СтрНайти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
				КНД = "1115131";
				Если Подтверждение Тогда
					КНД = "1115132";
				КонецЕсли;
			ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
				КНД = "1115132";
			Иначе
				КНД = "1115125";
				Если Подтверждение Тогда
					КНД = "1115126";
				КонецЕсли;
			КонецЕсли;
		Иначе
			КНД = "1175010";
			Если Подтверждение Тогда
				КНД = "1175011";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда
		
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КНД = "1175006";
			Если Подтверждение Тогда
				КНД = "1175007";
			КонецЕсли;
		ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД Тогда
			Если СтрНайти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
				КНД = "1115131";
				Если Подтверждение Тогда
					КНД = "1115132";
				КонецЕсли;
			ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
				КНД = "1115132";
			Иначе
				КНД = "1115125";
				Если Подтверждение Тогда
					КНД = "1115126";
				КонецЕсли;
			КонецЕсли;
		Иначе
			КНД = "1175012";
			Если Подтверждение Тогда
				КНД = "1175013";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости 
		И ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД Тогда
		
		Если СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPR") > 0 Тогда
			КНД = "1115133";
			Если Подтверждение Тогда
				КНД = "1115134";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPOK") > 0 Тогда
			КНД = "1115134";
		Иначе
			КНД = "1115127";
			Если Подтверждение Тогда
				КНД = "1115128";
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		
		КНД = "1175014";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда	
		
		Если СтрНайти(ИмяФайла, "ON_AKTSVEROTP") > 0 Тогда
			КНД = "1110332";
		ИначеЕсли СтрНайти(ИмяФайла, "ON_AKTSVERPOL") > 0 Тогда
			КНД = "1110333";
		КонецЕсли;
		
	Иначе
		Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ИмяФайла);
		Если Обработка <> Неопределено Тогда
			Попытка
				КНД = Обработка.КНД();
			Исключение
				ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
				Шаблон = НСтр(
					"ru = 'Обработка %1, не удалось определить КНД, по причине:
					|%2'");
				ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
					УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КНД;
	
КонецФункции

// Проверяет являются ли переданные двоичные данные машиночитаемой доверенностью
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоМЧД(ОписаниеФайла) Экспорт
	
	Если ОписаниеФайла.ДвоичныеДанные <> Неопределено Тогда
		ДанныеФайлаЭД = ДанныеФайлаЭД(ОписаниеФайла, "", Неопределено, , Истина);
		
		ЭтоМЧД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвДов") <> Неопределено
			Или РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Довер.СвДов") <> Неопределено
			Или РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Передов.СвДовПер") <> Неопределено;
		
		Возврат ЭтоМЧД;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет соответствует ли имя файла УПД ЕИС.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла.
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоУПДЕИС(ИмяФайла) Экспорт

	Результат = Ложь;
	ИдентификаторОператораЕИС = "2ZK";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		ОператорФедеральногоКазначейства = МодульЭлектронноеАктированиеЕИС.ОператорЭДОФедеральногоКазначейства();
	    ИдентификаторОператораЕИС = ОператорФедеральногоКазначейства.Идентификатор;
	КонецЕсли;
	
	Если (СтрНачинаетсяС(ИмяФайла, "ON_SCHFDOPPR")
		Или СтрНачинаетсяС(ИмяФайла, "ON_NSCHFDOPPR"))
		И СтрНайти(ИмяФайла, ИдентификаторОператораЕИС) <> 0 Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствует ли имя файла УКД ЕИС.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла.
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоУКДЕИС(ИмяФайла) Экспорт

	Результат = Ложь;
	ИдентификаторОператораЕИС = "2ZK";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		ОператорФедеральногоКазначейства = МодульЭлектронноеАктированиеЕИС.ОператорЭДОФедеральногоКазначейства();
	    ИдентификаторОператораЕИС = ОператорФедеральногоКазначейства.Идентификатор;
	КонецЕсли;
	
	Если (СтрНачинаетсяС(ИмяФайла, "ON_KORSCHFDOPPR")
		Или СтрНачинаетсяС(ИмяФайла, "ON_NKORSCHFDOPPR"))
		И СтрНайти(ИмяФайла, ИдентификаторОператораЕИС) <> 0 Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Получает обработку формата по имени формата.
// 
// Параметры:
//  ИмяФормата - Строка - См. ФорматыЭДО.ПоддерживаемыеФорматы
// 
// Возвращаемое значение:
//  - Неопределено
//  - ОбработкаМенеджер.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  - ОбработкаМенеджер.ФорматАктПриемкиСтроительныхРаботИнформацияЗаказчикаЭДО
//  - ОбработкаМенеджер.ФорматДоговорнойДокумент101
//
Функция ОбработкаФормата(ИмяФормата) Экспорт
	Для Каждого Обработка Из ОбработкиФорматов() Цикл
		Попытка
			Если ВРег(Обработка.ИмяФормата()) = ВРег(ИмяФормата) Тогда
				Возврат Обработка;
			КонецЕсли;
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Обработка %1, не удалось выполнить поиск менеджера формата ЭД, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Найти обработку формата по имени файла обмена.
// 
// Параметры:
//  ИмяФайлаОбмена - Строка - Имя файла обмена
// 
// Возвращаемое значение:
//  см. ОбработкаФормата
Функция НайтиОбработкуФорматаПоФайлуОбмена(ИмяФайлаОбмена) Экспорт
	Для Каждого Обработка Из ОбработкиФорматов() Цикл
		Попытка
			Если Обработка.ЭтоФайлФормата(ИмяФайлаОбмена) Тогда
				Возврат Обработка;
			КонецЕсли;
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Обработка %1, не удалось выполнить поиск менеджера формата ЭД, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Обработки форматов.
// 
// Возвращаемое значение:
//  Массив Из см. ОбработкаФормата
//
Функция ОбработкиФорматов() Экспорт
	СписокМетаданных = МетаданныеОбработокФорматов();
	Количество = СписокМетаданных.Количество();
	Если Количество > 0 Тогда
		ОбработкиФорматов = Новый Массив(Количество);
		Для Индекс = 0 По ОбработкиФорматов.ВГраница() Цикл
			ПолноеИмя = СписокМетаданных[Индекс].ПолноеИмя();
			ОбработкиФорматов[Индекс] = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		КонецЦикла;
		Возврат ОбработкиФорматов;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции

// Определеяет, что объект является ОбработкойОбъектом или ОбработкойМенеджером формата ЭД.
// 
// Параметры:
//  Объект - Произвольный
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбработкаФормата(Объект) Экспорт
	Если Объект <> Неопределено Тогда
		ТипОбъекта = ТипЗнч(Объект);
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		ОбработкиФорматов = МетаданныеОбработокФорматов();
		Если ОбработкиФорматов.Найти(МетаданныеОбъекта) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Возвращает сведения о формате.
// 
// Параметры:
//  Формат - Строка
// 
// Возвращаемое значение:
//  Структура
//    * ИдентификаторСервиса - Строка
//    * ПредставлениеФормата - Строка
//  Неопределено
Функция ПолучитьСведенияОФормате(Формат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК ИдентификаторСервиса,
	|	ФорматыЭлектронныхДокументов.Представление КАК ПредставлениеФормата
	|ИЗ
	|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|ГДЕ
	|	ФорматыЭлектронныхДокументов.Формат = &Формат";
	Запрос.УстановитьПараметр("Формат", Формат);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    Результат = Новый Структура("ИдентификаторСервиса, ПредставлениеФормата");
	    ЗаполнитьЗначенияСвойств(Результат, Выборка);
	    Возврат Результат;
	Иначе
	    Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДокумента

#Область ЗаполнениеДанныхПодписантов

// Заполняет данные МЧД подписанта в файле электронного документа.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла() - описание файла для добавления подписей.
//  Организация - ОпределяемыйТип.Организация - организация.
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  СодержаниеДокумента - см. НовоеОписаниеФайлаДокумента - Описание файла документа.
//
// Возвращаемое значение:
//  см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла - описание файла после добавления сведений подписанта.
//
Функция ЗаполнитьДанныеДоверенностейДокумента(ОписаниеФайла, Организация, Доверенности, СодержаниеДокумента) Экспорт

	ОписаниеОшибки = "";
	ДанныеФайлаЭД = ДанныеФайлаЭД(ОписаниеФайла, ОписаниеОшибки);
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;

	ПространствоИмен = ДанныеФайлаЭД.Тип().URIПространстваИмен;

	ИнфПолФХЖ1 = ДанныеФайлаЭД.Документ.СвСчФакт.ИнфПолФХЖ1;
	Если ИнфПолФХЖ1 = Неопределено Тогда
		ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПолФХЖ1", ПространствоИмен);
		ДанныеФайлаЭД.Документ.СвСчФакт.ИнфПолФХЖ1 = ИнфПолФХЖ1;
	КонецЕсли;
	ТекстИнф = ИнфПолФХЖ1.ТекстИнф;

	МассивМЧД = Новый Массив;
	Если ТекстИнф <> Неопределено Тогда
		Для каждого Информация Из ТекстИнф Цикл
			Если ВРег(Информация.Идентиф) = Врег("МЧД") Тогда
				МассивМЧД.Добавить(Информация.Значен);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Ошибки = Неопределено;

	Для Каждого Доверенность Из Доверенности Цикл
		
		МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИдентификаторМЧД(Доверенность);
		
		Если МассивМЧД.Найти(МЧД) = Неопределено Тогда
			ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", "МЧД", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", МЧД,  Истина, Ошибки);
			ТекстИнф.Добавить(ТекстИнфТип);
		КонецЕсли;
		
	КонецЦикла;
	
	ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДанныеФайлаЭД, Ложь);
	ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
	
	ИтоговыйФайл = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ИтоговыйФайл.ДвоичныеДанные = ДвоичныеДанные;
	ИтоговыйФайл.ИмяФайла = ОписаниеФайла.ИмяФайла;
	
	Возврат ИтоговыйФайл;

КонецФункции

// Возвращает признак доступности заполнения данных МЧД в документе.
// 
// Параметры:
// 	СодержаниеДокумента - см. НовоеОписаниеФайлаДокумента - Описание файла документа.
//
// Возвращаемое значение:
//  Булево - признак доступности заполнения данных.
//
Функция ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента) Экспорт
	
	Возврат ЗаполнениеДанныхДоверенностиДоступноПоФормату(СодержаниеДокумента.Формат);
	
КонецФункции

// Заполняет данные подписанта в файле электронного документа.
// 
// Параметры:
// 	ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  Организация - ОпределяемыйТип.Организация
//  СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  СодержаниеДокумента - см. НовоеОписаниеФайлаДокумента
//  ВыбраннаяМЧД -Неопределено
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//
Функция ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла,
	Организация, СертификатПодписи, СодержаниеДокумента, ВыбраннаяМЧД = Неопределено) Экспорт

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();

	ТипДокумента = СодержаниеДокумента.ТипДокумента;
	Формат = СодержаниеДокумента.Формат;	

	ОписаниеОшибки = "";
	ДанныеФайлаЭД = ДанныеФайлаЭД(ОписаниеФайла, ОписаниеОшибки);	
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ЛокальноеИмя = "";
	ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
	
	// Получим данные для заполнения Тега Подписант
	ПараметрыСертификатов = КриптографияБЭД.СвойстваСертификатов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СертификатПодписи));

	ПараметрыСертификата = ПараметрыСертификатов.Получить(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	Фирма               = ПараметрыСертификата.Фирма;
	
	// Если в сертификате не заполнена фирма и по нему требуется МЧД, то в качестве фирмы указываем
	// полное наименование организации, т.к. она используется для заполнения обязательных атрибутов,
	// значения которых должны быть отличны от пустой строки.
	Если ПустаяСтрока(Фирма) Тогда
		
		ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
		
		Фирма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизитаНаименованиеОрганизации);
		
	КонецЕсли;
	
	// В случае, если должность в сертификате не заполнена, заполняем ее одинарным прочерком,
	// "---" используется в случае, когда подписант еще не известен (при формировании электронного документа).
	ДолжностьПоСертификату = "-";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;

	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(Организация);
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Организация);
	
	// Заполнение блока подписанта в ЭД.
	Если Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);

			ДанныеСвидетельства = ИнтеграцияЭДО.ДанныеСвидетельстваОРегистрацииИП(Организация);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;

		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ,
				Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
				"Статус", "4", Истина, Ошибки);
			ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
				"ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ", Ошибки);

		Если (Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца)
			И ДанныеФайлаЭД.Документ.СвПродПер <> Неопределено
			И ДанныеФайлаЭД.Документ.СвПродПер.СвПер.СвЛицПер = Неопределено Тогда

			СведенияЛица = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);

			ТоварПередал = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТоварПередал, "РабОргПрод", СведенияЛица, Истина, Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвПродПер.СвПер, "СвЛицПер", ТоварПередал,
				Истина, Ошибки);

		КонецЕсли;

	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);

			ДанныеСвидетельства = ИнтеграцияЭДО.ДанныеСвидетельстваОРегистрацииИП(Организация);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;

		ИндексПодписанта = ДанныеФайлаЭД.ИнфПок.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина,
				Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ИП", ИП, Истина,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта],
				"Статус", "4", Истина, Ошибки);
			ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта],
				"ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.СброситьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ФЛ", Ошибки);

		Если (Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя)  
			И ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин	= Неопределено Тогда

			СведенияЛица = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);

			ТоварПринял = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТоварПринял, "РабОргПок", СведенияЛица, Истина, Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин", ТоварПринял,
				Истина, Ошибки);

		КонецЕсли;

	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Или ТипДокумента
		= Перечисления.ТипыДокументовЭДО.УПД Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Или ТипДокумента
		= Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);

			ДанныеСвидетельства = ИнтеграцияЭДО.ДанныеСвидетельстваОРегистрацииИП(Организация);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
	
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Или ТипДокумента
		= Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Или ТипДокумента
		= Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);

			ДанныеСвидетельства = ИнтеграцияЭДО.ДанныеСвидетельстваОРегистрацииИП(Организация);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;

		Если ПространствоИменСхемы = "TORGPR" Или ПространствоИменСхемы = "RUISP" Тогда // Передача товаров, акт результатов работ (Исполнитель).
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;

			Если Не ЭтоФизЛицо Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ,
					Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП,
					Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
					"Статус", "4", Истина, Ошибки);
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
				ИмяСвойства = ?(ПространствоИменСхемы = "RUISP", "ОснПолнПодп", "ОснПолн");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
					ИмяСвойства, ОснованиеПолномочий, Истина, Ошибки);
			КонецЕсли;

			РаботаСФайламиБЭД.СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ", Ошибки);

		ИначеЕсли ПространствоИменСхемы = "TORGPOK" Или ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров, акт результатов работ (Заказчик).

			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ,
					Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП,
					Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
					"Статус", "4", Истина, Ошибки);
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
					"ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
			КонецЕсли;

			РаботаСФайламиБЭД.СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ", Ошибки);

		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПродавца Тогда

				ОтпускРазрешил = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш",
					ПространствоИменСхемы);
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО",
					ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "ФИО", ФИО, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "Должность", ДолжностьПоСертификату, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш",
					ОтпускРазрешил, Истина, Ошибки);


		ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПокупателя Тогда

				ГрузПолучил = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил",
					ПространствоИменСхемы);
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО",
					ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина,
					Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил",
					ГрузПолучил, Истина, Ошибки);

		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот 
			И Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПродавца Тогда

			ПодписьИсполнителя = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн",
					ПространствоИменСхемы);
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО",
					ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "ФИО", ФИО, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "Должность", ДолжностьПоСертификату,
					Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн",
					ПодписьИсполнителя, Истина, Ошибки);

		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот
			И Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПокупателя Тогда

			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда

				ПодписьЗаказ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ",
					ПространствоИменСхемы);
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО",
					ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина,
					Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ",
					ПодписьЗаказ, Истина, Ошибки);

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);

	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату
		И СтрНайти(ОписаниеФайла.ИмяФайла, "ON_CHETOP") Тогда
		
		ЛокальноеИмя = "Файл";
		ВерсияСхемы = "4.01";
		
		ПодписантТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.Подписант", ПространствоИменСхемы), ВерсияСхемы);
		Подписант = ПолучитьОбъектТипаCML(ПодписантТип, ПространствоИменСхемы);
		
		Если ЭлектронныеДокументыЭДО.ТребуетсяМашиночитаемаяДоверенность(Организация, СертификатПодписи) Тогда
			// В соответствии с электронной доверенностью в машиночитаемой форме хранение, которой осуществляется
			// в информационной системе, при этом сведения о ней указаны в электронном документе.
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СпосПодтПолном", "3", Истина, Ошибки);

			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				// Сведения о доверенности.
				СвДоверЭлТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.Подписант.СвДоверЭл", ПространствоИменСхемы), ВерсияСхемы);
				СвДоверЭл = ПолучитьОбъектТипаCML(СвДоверЭлТип, ПространствоИменСхемы);
				
				РеквизитыМЧД =
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбраннаяМЧД, "НомерДоверенности, ДатаВыдачи");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверЭл, "НомДовер", 
					РеквизитыМЧД.НомерДоверенности, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверЭл, "ДатаДовер", 
					Формат(РеквизитыМЧД.ДатаВыдачи, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
					
				Подписант.СвДоверЭл.Добавить(СвДоверЭл);	
			КонецЕсли;
			
		Иначе
			// В соответствии с данными, содержащимися в электронной подписи.
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СпосПодтПолном", "1", Истина, Ошибки);
		КонецЕсли;
		
		// Усиленная квалифицированная электронная подпись.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ТипПодпис", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
		
		// ФИО.
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
		
		ДанныеФайлаЭД.Документ.Подписант.Очистить();
		ДанныеФайлаЭД.Документ.Подписант.Добавить(Подписант);

	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда

		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
			Подписанты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
			Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист Тогда
			Подписанты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
			Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант",
				ПространствоИменСхемы);
		Иначе
			Подписанты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
			Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;

		Если ДолжностьПоСертификату <> "---" Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
		КонецЕсли;

		Подписанты.Подписант.Добавить(Подписант);
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, Ошибки);
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь,
				Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, Ошибки);
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда

		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", ПараметрыСертификата.Фирма, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);

			ДанныеСвидетельства = ИнтеграцияЭДО.ДанныеСвидетельстваОРегистрацииИП(Организация);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки); // Лицо, ответственное за оформление события (операции).
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, Ошибки); // Работник организации - покупателя.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", НСтр("ru = 'Должностные обязанности'"), Истина,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ПризнОзнак", "1", Истина, Ошибки);

		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ,
				Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
				"Статус", "4", Истина, Ошибки);
			ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта],
				"ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ", Ошибки);
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда
		
		ЛокальноеИмя = "Файл";
		
		Если СтрНайти(ОписаниеФайла.ИмяФайла, "ON_AKTSVEROTP") Тогда
			ПространствоИменСхемы = "ON_AKTSVEROTP_1_972_01_05_01_01";			
		ИначеЕсли СтрНайти(ОписаниеФайла.ИмяФайла, "ON_AKTSVERPOL") Тогда
			ПространствоИменСхемы = "ON_AKTSVERPOL_1_972_02_05_01_01";
		КонецЕсли;	
			
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИменСхемы);		
		// Файл.
		СвойствоФайл = Пакет.КорневыеСвойства.Получить("Файл");
		Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(СвойствоФайл.Тип, ПространствоИменСхемы);
		// Документ.
		СвойствоДокумент = Файл.Свойства().Получить("Документ");
		Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(СвойствоДокумент.Тип, ПространствоИменСхемы);
		// Подписант.
		СвойствоПодписант = Документ.Свойства().Получить("Подписант");
		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(СвойствоПодписант.Тип, ПространствоИменСхемы);
		
		Если ЭлектронныеДокументыЭДО.ТребуетсяМашиночитаемаяДоверенность(Организация, СертификатПодписи) Тогда
			// Лицо, имеющее полномочия на подписание документа на основании доверенности в электронной форме.
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СтатПодп", "2", Истина, Ошибки);

			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				// Сведения о доверенности.
				СвойствоСвДовер = Подписант.Свойства().Получить("СвДовер");
				СвДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(СвойствоСвДовер.Тип, ПространствоИменСхемы);
				
				РеквизитыМЧД =
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбраннаяМЧД, "НомерДоверенности, ДатаВыдачи");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер, "НомДовер", 
					РеквизитыМЧД.НомерДоверенности, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер, "ДатаНач", 
					Формат(РеквизитыМЧД.ДатаВыдачи, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
					
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СвДовер", СвДовер, Истина, Ошибки);	
			КонецЕсли;
			
		Иначе
			// Лицо, имеющее полномочия на подписание документа без доверенности.
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СтатПодп", "1", Истина, Ошибки);
		КонецЕсли;
		
		// Усиленная квалифицированная электронная подпись.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ТипПодпис", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
		
		// ФИО.
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);	
	
	Иначе
		Попытка
			Обработка = ОбработкаФормата(Формат);
			Если ТипЗнч(Обработка) <> Тип("Неопределено") И Обработка.ЗаполнениеДанныхПодписантаДоступно() Тогда
				ЛокальноеИмя = "Файл";
				ДанныеПодписанта = НовыеДанныеПодписанта(Организация, СертификатПодписи, ВыбраннаяМЧД);
				Обработка.ЗаполнитьДанныеПодписанта(ДанныеФайлаЭД, ДанныеПодписанта, Ошибки);
			КонецЕсли;
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Обработка %1, не удалось заполнить данные подписанта, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЕсли;

	// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
	Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда				
		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДанныеФайлаЭД, Ложь, "windows-1251", ЛокальноеИмя);
		ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИменСхемы);
	Иначе
		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДанныеФайлаЭД)
	КонецЕсли;
	
	ИтоговыйФайл = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ИтоговыйФайл.ДвоичныеДанные = ДвоичныеДанные;
	ИтоговыйФайл.ИмяФайла = ОписаниеФайла.ИмяФайла;
	
	Возврат ИтоговыйФайл;

КонецФункции

// Возвращает признак доступности заполнения данных подписанта в документе
// 
// Параметры:
// 	СодержаниеДокумента - см. НовоеОписаниеФайлаДокумента
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Экспорт
	
	ТипДокумента = СодержаниеДокумента.ТипДокумента;
	Формат = СодержаниеДокумента.Формат;	

	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();
	
	Обработка = ОбработкаФормата(Формат);
	Если ТипЗнч(Обработка) = Тип("Неопределено") Тогда
		Возврат Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПокупателя 
			Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПокупателя 
			Или Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПродавца
			Или Формат = ПоддерживаемыеФорматы.ФНС.ТорговаяОперация.ИнформацияПокупателя 
			Или Формат = ПоддерживаемыеФорматы.ФНС.УведомлениеОбУточнении 
			Или Формат = ПоддерживаемыеФорматы.ФНС.УведомлениеОбУточнении0101
			Или Формат = ПоддерживаемыеФорматы.ФНС.ИзвещениеОПолучении 
			Или Формат = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя
			Или Формат = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияПолучателя
			Или Формат = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101
			Или Формат = ПоддерживаемыеФорматы.ПредложениеОбАннулировании
			Или Формат = ПоддерживаемыеФорматы.CML208 
			  И (ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров 
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист 
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ 
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату 
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
				Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	Иначе
		Попытка
			Возврат Обработка.ЗаполнениеДанныхПодписантаДоступно();
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Обработка %1, не удалось определить доступность заполнения данных подписанта, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Формирует электронный документ.
//
// Параметры:
//  Формат - Строка - формат документа (см. ПоддерживаемыеФорматы).
//  Данные - ДеревоЗначений - данные для заполнения документа.
//
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДокумента
//
Функция СформироватьДокумент(Знач Формат, Знач Данные) Экспорт
	
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();
	Если Формат = ПоддерживаемыеФорматы.CML208 Или Формат = ПоддерживаемыеФорматы.CML402 Тогда 
		Возврат ФорматыЭДО_CML.СформироватьДокумент(Формат, Данные);
	Иначе
		Возврат ФорматыЭДО_ФНС.СформироватьДокумент(Формат, Данные);
	КонецЕсли;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолей(Знач ТипДокумента, Знач Формат, Знач ТипРаздела) Экспорт
	
	ТекстЗапроса = Неопределено;
	ТипРазделов = ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();
	Если ТипРаздела = ТипРазделов.Шапка Тогда
		
		Параметры = НовыеПараметрыЗапросаКонструктораДополнительныхПолейШапки(ТипДокумента, Формат);
		
		ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки(
			Параметры, ТекстЗапроса);
		
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстОшибки = НСтр("ru = 'Необходимо проверить процедуру ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.'");
		КонецЕсли;
		
	ИначеЕсли ТипРаздела = ТипРазделов.Таблица Тогда
		
		ПолучитьЗапросКонструктораДополнительныхПолейТаблицы(ТекстЗапроса);
		
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстОшибки = НСтр("ru = 'Необходимо проверить определяемые типы ""НоменклатураБЭД"", ""ХарактеристикаНоменклатурыБЭД"", ""УпаковкаНоменклатурыБЭД"".'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не определен запрос конструктора дополнительных полей для вида электронного документа ""%1"".'"),
			ТипДокумента);
		ТекстОшибки = ТекстСообщения + " " + ТекстОшибки;
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ВызватьИсключение ТекстСообщения
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДокументаПоУчету

// Инициализирует настройки формирования электронного документа по объекту учета.
//
// Возвращаемое значение:
//  Структура - параметры формирования:
//   * Формат - Строка - формат документа (см. ПоддерживаемыеФорматы).
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип документа.
//   * Организация - ОпределяемыеТипы.Организация - организация.
//   * Контрагент - ОпределяемыеТипы.УчастникЭДО - контрагент.
//   * Договор - ОпределяемыеТипы.ДоговорСКонтрагентомЭДО - договор контрагента.
//   * ВыгружатьДополнительныеСведения - Булево - признак выгрузки дополнительных сведений.
//   * ОтключитьРассчетДополнительныхПолей - Булево - признак отключения расч. счета дополнительных полей.
//   * ЗаполнениеКодаТовара - Строка - значение из списка, заданного в 
//                                     ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов.
//
Функция НовыеНастройкиФормированияДокументаПоОбъектуУчета() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Формат", "");
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Параметры.Вставить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип.ПривестиЗначение());
	Параметры.Вставить("Договор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
	Параметры.Вставить("ВыгружатьДополнительныеСведения", Истина);
	Параметры.Вставить("ОтключитьРассчетДополнительныхПолей", Ложь);
	Параметры.Вставить("ЗаполнениеКодаТовара", "");
	
	Возврат Параметры;
	
КонецФункции

// Инициализирует данные для заполнения документа.
//
// Возвращаемое значение:
//  Структура - данные для заполнения:
//   * ВерсияПрограммы - Строка - версия программы, с помощью которой сформирован файл. По умолчанию "1С:Предприятие 8".
//   * УникальныйИдентификатор - Строка- 36 символьный глобально уникальный идентификатор.
//   * Товары - Массив - список товаров.
//   * ЗначенияДополнительныхПолей - Структура - значения дополнительных полей электронного документа.
//   * Участники - Структура - участники ЭДО:
//    ** ИдентификаторОтправителя - Строка - идентификатор отправителя.
//    ** ИдентификаторПолучателя - Строка - идентификатор получателя.
//    ** Оператор - Структура - информация об операторе ЭДО отправителя:
//     *** Наименование - Строка - наименование оператора.
//     *** ИНН - Строка - ИНН оператора.
//     *** Идентификатор - Строка - идентификатор отправителя.
//
Функция НовыеДанныеДляФормированияОсновногоТитула() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ВерсияПрограммы", "1С:Предприятие 8");
	Данные.Вставить("УникальныйИдентификатор", "");
	Данные.Вставить("ДанныеДокумента", Новый ДеревоЗначений);
	Данные.Вставить("ЗначенияДополнительныхПолей", Новый Структура);
	Данные.Вставить("Участники", Новый Структура);
	Данные.Участники.Вставить("ИдентификаторОтправителя", "");
	Данные.Участники.Вставить("ИдентификаторПолучателя", "");
	Данные.Участники.Вставить("Оператор", Новый Структура);
	Данные.Участники.Оператор.Вставить("Наименование", "");
	Данные.Участники.Оператор.Вставить("ИНН", "");
	Данные.Участники.Оператор.Вставить("Идентификатор", "");
	
	Возврат Данные;
	
КонецФункции

// Инициализирует данные для заполнения документа.
//
// Возвращаемое значение:
//  Структура - данные для заполнения:
//   * ВерсияПрограммы - Строка - версия программы, с помощью которой сформирован файл. По умолчанию "1С:Предприятие 8".
//   * УникальныйИдентификатор - Строка- 36 символьный глобально уникальный идентификатор.
//   * Участники - Структура - участники ЭДО:
//    ** ИдентификаторОтправителя - Строка - идентификатор отправителя.
//    ** ИдентификаторПолучателя - Строка - идентификатор получателя.
//    ** Оператор - Структура - информация об операторе ЭДО отправителя:
//     *** Наименование - Строка - наименование оператора.
//     *** ИНН - Строка - ИНН оператора.
//     *** Идентификатор - Строка - идентификатор отправителя.
//   * ПодписиОснования - Массив из Строка - подписи к основанию в формате Base64 без переносов строк.
//   * Основание - Структура - структура данных электронного документа:
//    ** ДвоичныеДанные - ДвоичныеДанные - двоичные данные основного титула.
//    ** ИмяБезРасширения - Строка - имя файла электронного документа (без расширения).
//
Функция НовыеДанныеДляФормированияОтветногоТитула() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ВерсияПрограммы", "1С:Предприятие 8");
	Данные.Вставить("УникальныйИдентификатор", "");
	Данные.Вставить("ДанныеДокумента", Новый ДеревоЗначений);
	Данные.Вставить("Участники", Новый Структура);
	Данные.Участники.Вставить("ИдентификаторОтправителя", "");
	Данные.Участники.Вставить("ИдентификаторПолучателя", "");
	Данные.Участники.Вставить("Оператор", Новый Структура);
	Данные.Участники.Оператор.Вставить("Наименование", "");
	Данные.Участники.Оператор.Вставить("ИНН", "");
	Данные.Участники.Оператор.Вставить("Идентификатор", "");
	Данные.Вставить("ПодписиОснования", Новый Массив);
	Данные.Вставить("Основание", Новый Структура);
	Данные.Основание.Вставить("ДвоичныеДанные", Неопределено);
	Данные.Основание.Вставить("ИмяБезРасширения", "");
	
	Возврат Данные;
	
КонецФункции

// Инициализирует данные для заполнения служебного сообщения.
//  
// Возвращаемое значение:
//  Структура - данные для заполнения:
//   * ВерсияПрограммы - Строка - версия программы, с помощью которой сформирован файл. По умолчанию "1С:Предприятие 8".
//   * УникальныйИдентификатор - Строка - 36 символьный глобально уникальный идентификатор.
//   * Участники - Структура - участники ЭДО:
//    ** Отправитель - Структура - данные отправителя:
//    	*** Идентификатор - Строка - идентификатор отправителя.
//    	*** Ссылка - СправочникСсылка - ссылка на отправителя.
//    ** Получатель - Структура - данные получателя:
//      *** Тип - Строка - "Оператор" или "Абонент" в зависимости от типа Получателя.
//    	*** Абонент - Структура - данные абонента. Заполняется, если Тип = "Абонент".
//    	  **** Идентификатор - Строка - идентификатор получателя.
//    	  **** Ссылка - СправочникСсылка - ссылка на получателя.
//    	*** Оператор - Структура - данные оператора. Заполняется, если Тип = "Оператор".
//        **** Наименование - Строка - наименование оператора.
//        **** ИНН - Строка - ИНН оператора.
//        **** Идентификатор - Строка - идентификатор отправителя.
//   * ПодписиОснования - Массив из Строка - подписи к основанию в формате Base64 без переносов строк.
//   * Основание - Структура - структура данных электронного документа:
//    ** ИмяБезРасширения - Строка - имя файла электронного документа (без расширения).
//    ** ДатаВремяПолучения - Дата - дата и время получения основания.
//   * ТекстУточнения - Строка - текст уточнения.
//
Функция НовыеДанныеДляФормированияСлужебногоСообщения() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ВерсияПрограммы", "1С:Предприятие 8");
	Данные.Вставить("УникальныйИдентификатор");
	Данные.Вставить("Участники", Новый Структура);
	
	Данные.Участники.Вставить("Получатель", Новый Структура);
	Данные.Участники.Получатель.Вставить("Тип", "");
	
	Данные.Участники.Получатель.Вставить("Абонент", Новый Структура);	
	Данные.Участники.Получатель.Абонент.Вставить("Идентификатор", "");
	Данные.Участники.Получатель.Абонент.Вставить("Ссылка", Неопределено);
	
	Данные.Участники.Получатель.Вставить("Оператор", Новый Структура);
	Данные.Участники.Получатель.Оператор.Вставить("Наименование", "");
	Данные.Участники.Получатель.Оператор.Вставить("ИНН", "");
	Данные.Участники.Получатель.Оператор.Вставить("Идентификатор", "");
	
	Данные.Участники.Вставить("Отправитель", Новый Структура);
	Данные.Участники.Отправитель.Вставить("Идентификатор", "");
	Данные.Участники.Отправитель.Вставить("Ссылка", Неопределено);

	Данные.Вставить("ПодписиОснования", Новый Массив);
	Данные.Вставить("Основание", Новый Структура);
	Данные.Основание.Вставить("ИмяБезРасширения", "");
	Данные.Основание.Вставить("ДатаВремяПолучения", Дата(1, 1, 1, 1, 1, 1));
	Данные.Вставить("ТекстУточнения", "");
	
	Возврат Данные;
	
КонецФункции

// Инициализирует данные для заполнения прикладного документа.
//
// Возвращаемое значение:
//  Структура - данные для заполнения:
//   * УникальныйИдентификатор - Строка- 36 символьный глобально уникальный идентификатор.
//   * ИдентификаторОтправителя - Строка - идентификатор отправителя.
//   * ИдентификаторПолучателя - Строка - идентификатор получателя.
//   * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип документа.
//
Функция НовыеДанныеДляФормированияПрикладногоДокумента() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("УникальныйИдентификатор");
	Данные.Вставить("ИдентификаторОтправителя", "");
	Данные.Вставить("ИдентификаторПолучателя", "");
	Данные.Вставить("ПрикладнойТипДокумента", Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.ПривестиЗначение());
	
	Возврат Данные;
	
КонецФункции

// Формирует электронный документ основного титула по учету.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Настройки - см. НовыеНастройкиФормированияДокументаПоОбъектуУчета
//  Данные - см. НовыеДанныеДляФормированияОсновногоТитула
//
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДокументаПоУчету
//
Функция СформироватьДанныеОсновногоТитулаПоОбъектуУчета(ОбъектУчета, Настройки, Данные) Экспорт
	
	Формат = Настройки.Формат;
	ДанныеДокумента = Данные.ДанныеДокумента;
	СчетФактура = Неопределено;
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();
	
	РезультатПоУчету = НовыйРезультатФормированияДокументаПоУчету();
	
	Если ТипЗнч(ДанныеДокумента) = Тип("ДеревоЗначений") И ДанныеДокумента.Строки.Количество() = 0 Тогда
		
		РезультатПоУчету.ЕстьОшибки = Истина;
		
		// Ошибки обработки объекта могли быть сообщены пользователю в фоновом задании.
		// Получим их и добавим с явной привязкой к объекту.
		СообщенияОбОшибках = ПолучитьСообщенияПользователю();
		Если СообщенияОбОшибках.Количество() = 0 Тогда
			ОбщегоНазначенияБЭД.ДобавитьОшибку(РезультатПоУчету.Ошибки.ЗаполнениеДанных, Неопределено);
		Иначе
			Для Каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
				// Проверить, что сообщение по нужному объекту. Иначе сообщим еще раз.
				Если СообщениеОбОшибке.КлючДанных = ОбъектУчета Тогда
					ДанныеОшибки = ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки();
					ДанныеОшибки.ПутьКДаннымСообщения = СообщениеОбОшибке.ПутьКДанным;
					ОбщегоНазначенияБЭД.ДобавитьОшибку(РезультатПоУчету.Ошибки.ЗаполнениеДанных,
						СообщениеОбОшибке.Текст, ДанныеОшибки);
				Иначе
					СообщениеОбОшибке.Сообщить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат РезультатПоУчету;
		
	КонецЕсли;
		
	Если Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		СчетФактура = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДанныеДокумента,
			"СсылкаКорректировочногоСчетаФактуры");
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца 
		Или	Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		СчетФактура = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДанныеДокумента,
			"СсылкаСчетаФактуры");
		
	КонецЕсли;
	
	Если Настройки.ОтключитьРассчетДополнительныхПолей 
		Или (ТипЗнч(Данные.ЗначенияДополнительныхПолей) = Тип("Структура") 
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные.ЗначенияДополнительныхПолей, "ОтключитьРассчетДополнительныхПолей", Ложь )) Тогда
		ЗначенияДополнительныхПолей = Новый Структура("Успех", Истина);
	Иначе
		НастройкаЗаполнения = НастройкаЗаполненияДополнительныхПолей(ОбъектУчета, Настройки);
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ЗначенияДополнительныхПолей = ДополнитьДокументДаннымиДополнительныхПолей(НастройкаЗаполнения, СчетФактура, Настройки, ДанныеДокумента,
				Данные.ЗначенияДополнительныхПолей);
		Иначе
			ЗначенияДополнительныхПолей = ДополнитьДокументДаннымиДополнительныхПолей(НастройкаЗаполнения, ОбъектУчета, Настройки, ДанныеДокумента,
				Данные.ЗначенияДополнительныхПолей);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьДанныеДокумента(ДанныеДокумента, Данные);
	
	Результат = СформироватьДокумент(Формат, ДанныеДокумента);
	
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		РезультатПоУчету.Ошибки.ЗаполнениеДанных = Результат.Ошибки;
		РезультатПоУчету.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Не ЗначенияДополнительныхПолей.Успех Тогда
		РезультатПоУчету.Ошибки.ЗначенияДополнительныхПолей = ЗначенияДополнительныхПолей;
		РезультатПоУчету.Ошибки.ЗначенияДополнительныхПолей.Вставить("Формат", Настройки.Формат);
		РезультатПоУчету.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если РезультатПоУчету.ЕстьОшибки Тогда
		Возврат РезультатПоУчету;
	КонецЕсли;
	
	РезультатПоУчету.Документ = Результат.Документ;
	РезультатПоУчету.ДополнительныйДокумент = Результат.ДополнительныйДокумент;
	РезультатПоУчету.Содержание = ПрочитатьСодержаниеДокумента(Результат.Документ);
	
	Возврат РезультатПоУчету;
	
КонецФункции

// Формирует электронный документ по учету.
//
// Параметры:
//  Формат - Строка - формат документа (см. ПоддерживаемыеФорматы).
//  Данные - см. НовыеДанныеДляФормированияОтветногоТитула
//
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДокументаПоУчету
//
Функция СформироватьДанныеОтветногоТитула(Формат, Данные) Экспорт
	
	ДанныеДокумента = Данные.ДанныеДокумента;
	
	ДополнитьДанныеДокумента(ДанныеДокумента, Данные);
	
	Результат = СформироватьДокумент(Формат, ДанныеДокумента);
	
	РезультатПоУчету = НовыйРезультатФормированияДокументаПоУчету();
	
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		РезультатПоУчету.Ошибки.ЗаполнениеДанных = Результат.Ошибки;
		РезультатПоУчету.ЕстьОшибки = Истина;
	КонецЕсли;
	
	РезультатПоУчету.Документ = Результат.Документ;
	РезультатПоУчету.Содержание = ПрочитатьСодержаниеДокумента(Результат.Документ);
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС.
	Если ЗначениеЗаполнено(Результат.ДополнительныйДокумент)
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
		И СтрНачинаетсяС(Результат.ДополнительныйДокумент.ИмяФайла, "PRIL_") Тогда
		РезультатПоУчету.ДополнительныйДокумент = Результат.ДополнительныйДокумент;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС.
	
	Возврат РезультатПоУчету;
	
КонецФункции

// Формирует электронный документ по учету.
//
// Параметры:
//  ТипДокумента - Перечисления.ТипыДокументовЭДО - вид документа.
//  Данные - см. НовыеДанныеДляФормированияСлужебногоСообщения
//
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДокументаПоУчету
//
Функция СформироватьДанныеСлужебногоСообщения(Знач ТипДокумента, Знач Данные) Экспорт
	
	Форматы = ПоддерживаемыеФорматы();
	ДанныеПоУчету = ДанныеСлужебнойКвитанции(ТипДокумента, Данные);
	
	Если ДанныеПоУчету = Неопределено Тогда
		Возврат РезультатФормированияСОшибкойПолученияДанныхПоУчету();
	КонецЕсли;
	
	ДанныеДокумента = ДанныеПоУчету.Данные;
	
	ДополнитьДанныеДокумента(ДанныеДокумента, Данные);
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении Тогда
		Формат = Форматы.ФНС.ИзвещениеОПолучении;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Формат = Форматы.ПредложениеОбАннулировании;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		Формат = Форматы.ФНС.УведомлениеОбУточнении;
	КонецЕсли;
	
	Результат = СформироватьДокумент(Формат, ДанныеДокумента);
	
	РезультатПоУчету = НовыйРезультатФормированияДокументаПоУчету();
	
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		РезультатПоУчету.Ошибки.ЗаполнениеДанных = Результат.Ошибки;
		РезультатПоУчету.ЕстьОшибки = Истина;
	КонецЕсли;	
	
	РезультатПоУчету.Документ = Результат.Документ;
	РезультатПоУчету.Содержание = ДанныеПоУчету.Содержание;
	
	Возврат РезультатПоУчету;
	
КонецФункции

// Формирует прикладной электронный документ по учету.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Данные - см. НовыеДанныеДляФормированияПрикладногоДокумента
//
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДокументаПоУчету
//
Функция СформироватьДанныеПрикладногоДокумента(Знач ОбъектУчета, Знач Данные) Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("СсылкаНаОбъект",           ОбъектУчета);
	ПараметрыФормирования.Вставить("ТипЭлектронногоДокумента", Данные.ПрикладнойТипДокумента);
	ПараметрыФормирования.Вставить("ДатаФормирования",         ТекущаяДатаСеанса());
	ПараметрыФормирования.Вставить("ИдентификаторФайла",       Данные.УникальныйИдентификатор);
	ПараметрыФормирования.Вставить("ИдентификаторОрганизации", Данные.ИдентификаторОтправителя);
	ПараметрыФормирования.Вставить("ИдентификаторКонтрагента", Данные.ИдентификаторПолучателя);
		
	РезультатФормирования = ДанныеПрикладногоЭлектронногоДокумента(ОбъектУчета, ПараметрыФормирования);	
	
	Результат = НовыйРезультатФормированияДокументаПоУчету();
	
	Если РезультатФормирования = Неопределено Тогда
		Возврат РезультатФормированияСОшибкойПолученияДанныхПоУчету();
	КонецЕсли;
		
	Результат.Документ.ДвоичныеДанные = РезультатФормирования.ДанныеФайла;
	Результат.Документ.ИмяФайла = РезультатФормирования.ИмяФайла + "." + РезультатФормирования.Расширение;
	
	Результат.Содержание = НовоеОписаниеФайлаДокумента();

	Результат.Содержание.НомерДокумента = РезультатФормирования.НомерДокументаОтправителя;
	Результат.Содержание.ДатаДокумента = РезультатФормирования.ДатаДокументаОтправителя;
	Результат.Содержание.СуммаДокумента = РезультатФормирования.СуммаДокумента;
	Результат.Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	Результат.Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
	Результат.Содержание.ПрикладнойТипДокумента = Данные.ПрикладнойТипДокумента;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматЭлектронногоДокументаПоИмениИИдентификатору(Знач Имя, Знач Идентификатор = "", Знач Назначение = "") Экспорт
	
	Возврат ФорматыЭДО_ФНС.ФорматЭлектронногоДокументаПоИмениИИдентификатору(Имя, Идентификатор, Назначение);
	
КонецФункции

Функция ДополнительныеВидыДокументовУПД(ОписаниеФайла) Экспорт
	
	ВидыПередаточногоДокумента = Новый Массив;
	
	ОписаниеОшибки = "";
	ДанныеФайла = ДанныеФайлаЭД(ОписаниеФайла, ОписаниеОшибки);
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат ВидыПередаточногоДокумента;
	КонецЕсли;
	
	Товары = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "Документ.ТаблСчФакт.СведТов",, Истина);
	Если Товары = Неопределено Тогда
		Товары = Новый Массив;
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	ТолькоПрава = Истина;
	ЕстьПризнак = Ложь;
	Для каждого СтрокаТовара Из Товары Цикл
		
		Признак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаТовара, "ДопСведТов.ПрТовРаб",, "Строка");
		Если ЗначениеЗаполнено(Признак) Тогда
			ЕстьПризнак = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		Если Не (Признак = "2" ИЛИ Признак = "3") Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		Если Признак <> "4" Тогда
			ТолькоПрава = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПризнак Тогда
		Если ТолькоУслуги Тогда
			ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
				Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот));
		ИначеЕсли ТолькоПрава Тогда
			ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
				Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав));
		Иначе
			ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
				Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная));
		КонецЕсли;
	Иначе
		ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная));
		ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот));
		ВидыПередаточногоДокумента.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав));
	КонецЕсли;

	Возврат ВидыПередаточногоДокумента;

КонецФункции

// Инициализирует результат формирования документа по учету.
//
// Возвращаемое значение:
//  Структура - результат формирования:
//   * Документ - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла()
//   * ДополнительныйДокумент - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла()
//   * Содержание - см. НовоеОписаниеФайлаДокумента
//   * Ошибки - См. НовоеОписаниеОшибокФормированияДокумента
//   * ЕстьОшибки - Булево - признак наличия ошибок формирования документа.
Функция НовыйРезультатФормированияДокументаПоУчету() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("ДополнительныйДокумент", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());	
	Результат.Вставить("Содержание", Неопределено);
	Результат.Вставить("Ошибки", НовоеОписаниеОшибокФормированияДокумента());
	Результат.Вставить("ЕстьОшибки", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДокумента

// Новый результат проверки.
// 
// Возвращаемое значение:
//  Структура:
// * Ошибки - Булево
// * ТекстОшибки - Строка
//
Функция НовыйРезультатПроверки() Экспорт
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Ошибки", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки", "");
	Возврат РезультатПроверки;
КонецФункции

// Выполняет проверку электронного документа.
//
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  см. НовыйРезультатПроверки
//
Функция ПроверитьДокумент(ОписаниеФайла) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульПодсистемы.ЭтоТитулЭПД(ОписаниеФайла.ИмяФайла) Тогда
			Возврат МодульПодсистемы.ПроверитьДокумент(ОписаниеФайла);
		КонецЕсли;
	КонецЕсли;
	
	СодержаниеДокумента = ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Формат = СодержаниеДокумента.Формат;
	
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();
	
	Если Не ЭтоФорматПространства(ПоддерживаемыеФорматы.ФНС, Формат) Тогда
		Возврат НовыйРезультатПроверки();
	КонецЕсли;
	
	РезультатПроверки = ФорматыЭДО_ФНС.ПроверитьДокумент(Формат, ОписаниеФайла);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ЧтениеЭД

// Формирует электронный документ основного титула по учету.
//
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла = описание файла документа. 
//
// Возвращаемое значение:
//  НовоеОписаниеФайлаДокумента, Неопределено - содержание файла.
//
Функция ПрочитатьСодержаниеДокумента(ОписаниеФайла) Экспорт
	
	СодержаниеДокумента = СодержаниеДокументаПоПравиламКонвертации(ОписаниеФайла);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульПодсистемы.ЭтоТитулЭПД(ОписаниеФайла.ИмяФайла) Тогда
			Возврат МодульПодсистемы.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СодержаниеДокумента) Тогда
		СодержаниеДокумента = СодержаниеДокументаПоДаннымПрикладногоРешения(ОписаниеФайла);
	КонецЕсли;
	
	Возврат СодержаниеДокумента;
	
КонецФункции

Функция ФорматОтветногоТитула(ФорматОсновногоТитула) Экспорт
	Возврат СоответствиеТитулов()[ФорматОсновногоТитула];
КонецФункции

// Новое описание файла документа.
// 
// Возвращаемое значение:
//  Структура:
// * ИдентификаторДокумента - Строка
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - Неопределено
// * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// * НомерДокумента - Строка
// * ДатаДокумента - Дата
// * СуммаДокумента - Число
// * ЕстьМаркировка - Булево
// * Отправитель - см. НовоеОписаниеУчастникаЭДО
// * Получатель - см. НовоеОписаниеУчастникаЭДО
// * Формат - Строка
// * ОтражениеВУчете - Неопределено
//
Функция НовоеОписаниеФайлаДокумента() Экспорт
	
	Содержание = Новый Структура;
	Содержание.Вставить("ИдентификаторДокумента", "");
	Содержание.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка()); 
	Содержание.Вставить("ПрикладнойТипДокумента", Неопределено); 
	Содержание.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	Содержание.Вставить("НомерДокумента", "");
	Содержание.Вставить("ДатаДокумента", Дата(1,1,1));
	Содержание.Вставить("СуммаДокумента", 0);
	Содержание.Вставить("ЕстьМаркировка", Ложь);
	Содержание.Вставить("Отправитель", НовоеОписаниеУчастникаЭДО());
	Содержание.Вставить("Получатель", НовоеОписаниеУчастникаЭДО());
	Содержание.Вставить("Формат", "");	
	Содержание.Вставить("ОтражениеВУчете", Неопределено);
	
	Возврат Содержание;
	
КонецФункции

// Формирует пустую структура параметров получения данных электронного документа.
//
// Возвращаемое значение:
//  Структура - параметры:
//   * ОсновнойФайл - см. _РаботаСФайламиБЭД.НовоеОписаниеФайла - описание основного файла.
//   * ДополнительныйФайл - _РаботаСФайламиБЭД.НовоеОписаниеФайла - описание дополнительного файла.
//   * Направление - Перечисление.НаправленияЭДО - направление.
Функция НовыеПараметрыПолученияДанныхДокумента() Экспорт
	
	ДанныеФайла = Новый Структура;
	
	ДанныеФайла.Вставить("ОсновнойФайл", РаботаСФайламиБЭД.НовоеОписаниеФайла());
	ДанныеФайла.Вставить("ДополнительныйФайл",  РаботаСФайламиБЭД.НовоеОписаниеФайла());
	
	ДанныеФайла.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ДанныеЭлектронногоДокумента(ПараметрыПолученияДанных) Экспорт
	
	ЭтоПроизвольныйДокумент = Ложь;
	СтруктураРазбора = ДанныеЭлектронногоДокументаОсновныхТипов(ПараметрыПолученияДанных);
	
	Если СтруктураРазбора = Неопределено Тогда
		СтруктураРазбора = ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(ПараметрыПолученияДанных, "xml");
	КонецЕсли;
	
	Если СтруктураРазбора = Неопределено Тогда
		ЭтоПроизвольныйДокумент = Истина;
		СтруктураРазбора = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(
			ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные);
		
		Если ЗначениеЗаполнено(СтруктураРазбора) Тогда
			ОписаниеФайла = НовоеОписаниеФайлаДокумента();
			ОписаниеФайла.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
			
			ТипДокументаЗначениеСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРазбора, "ТипДокумента");
			Если ЗначениеЗаполнено(ТипДокументаЗначениеСервиса) Тогда
				ОписаниеФайла.ТипДокумента = СинхронизацияЭДО.ТипДокументаПоЗначениюСервиса(ТипДокументаЗначениеСервиса);
			КонецЕсли;
			
			СтруктураРазбора.Свойство("ИдентификаторДокумента", ОписаниеФайла.ИдентификаторДокумента);
			СтруктураРазбора.Свойство("НомерДокумента", ОписаниеФайла.НомерДокумента);
			СтруктураРазбора.Свойство("ДатаДокумента", ОписаниеФайла.ДатаДокумента);
			СтруктураРазбора.Свойство("СуммаДокумента", ОписаниеФайла.СуммаДокумента);
			
			СтруктураРазбора.Вставить("Содержание", ОписаниеФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРазбора = Неопределено
		Или ТипЗнч(СтруктураРазбора) <> Тип("Структура") Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Неизвестный тип электронного документа при чтении данных из файла %1.'"),
			ПараметрыПолученияДанных.ОсновнойФайл.ИмяФайла);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоПроизвольныйДокумент И СтруктураРазбора.Свойство("ОтражениеВУчете") Тогда
		
		ДанныеCML = КонвертацияЭДО.ДанныеCMLПроизвольногоДокумента(ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные,
			СтруктураРазбора);
		Если ДанныеCML <> Неопределено Тогда
			ПараметрыПолученияДанныхCML = НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолученияДанныхCML.ОсновнойФайл.ДвоичныеДанные = ДанныеCML;
			ПараметрыПолученияДанныхCML.ОсновнойФайл.ИмяФайла = ПараметрыПолученияДанных.ОсновнойФайл.ИмяФайла;
			СтруктураРазбораCML = ДанныеЭлектронногоДокументаОсновныхТипов(ПараметрыПолученияДанныхCML);
			Если СтруктураРазбораCML <> Неопределено Тогда
				СтруктураРазбора = СтруктураРазбораCML;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРазбора;
	
КонецФункции

// Извлекает номера машиночитаемых доверенностей из файла формализованного электронного документа 
//
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  Формат - Строка
//
// Возвращаемое значение:
//  Массив из Строка - номера машиночитаемых доверенностей
//
Функция НомераМашиночитаемыхДоверенностей(ОписаниеФайла, Формат) Экспорт
	
	НомераДоверенностей = Новый Массив;
	
	Если Не ЗаполнениеДанныхДоверенностиДоступноПоФормату(Формат) Тогда
		Возврат НомераДоверенностей;
	КонецЕсли;
	
	ФорматыЭДО_ФНС.ЗаполнитьНомераМашиночитаемыхДоверенностей(НомераДоверенностей, ОписаниеФайла, Формат);
	
	Возврат НомераДоверенностей;
	
КонецФункции

Процедура ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоДанных, Ошибки) Экспорт
	
	НайденнаяСтрока = Неопределено;
	ТипУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника");
	
	Если ТипУчастника = "ИП" Тогда
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ОГРНИП",, НайденнаяСтрока);
	Иначе
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",, НайденнаяСтрока);	
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ОГРН) Тогда
		ИдентификаторОператораЭДО = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ИдОперЭДО");
		Если Не СинхронизацияЭДО.ДоступноПодключениеБезОГРН(ИдентификаторОператораЭДО) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, НайденнаяСтрока, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает текст уточнения электронного документа.
//
// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла() - описание файла документа.
//
// Возвращаемое значение:
//  Строка - текст уточнения.
//
Функция ТекстУточнения(ОписаниеФайла) Экспорт
			
	ТекстУточнения = "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения());
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Если СтрНайти(ОписаниеФайла.ИмяФайла, "DP_UVUTOCH") > 0 Тогда
		
		СвойстваСвУведУточ = Данные.Документ.СвУведУточ.Свойства();
		
		Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено 
			И Данные.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
			И ТипЗнч(Данные.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда

			ТекстУточнения = Данные.Документ.СвУведУточ.ТекстУведУточ;
		КонецЕсли;

	ИначеЕсли СтрНайти(ОписаниеФайла.ИмяФайла, "DP_PRANNUL") > 0 
		И ТипЗнч(Данные.Документ.СвПредАн.ТекстПредАн) = Тип("Строка") Тогда
		
		ТекстУточнения = Данные.Документ.СвПредАн.ТекстПредАн;
		
	КонецЕсли;
	
	Возврат ТекстУточнения;	
	
КонецФункции

// Функция-конструктор таблицы с информацией о товарах из электронного документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ИД - Строка
// * Штрихкод - Строка
// * Наименование - Строка
// * НаименованиеХарактеристики - Строка
// * КодТовара - Строка
// * Артикул - Строка
// * БазоваяЕдиницаКод - Строка
// * БазоваяЕдиницаНаименование - Строка
// * БазоваяЕдиницаНаименованиеПолное - Строка
// * БазоваяЕдиницаМеждународноеСокращение - Строка
// * БазоваяЕдиницаНаименованиеКраткое - Строка
// * СтавкаНДС - Строка
// * Описание - Строка
// * Сопоставление - см. НовыеДанныеДляСопоставленияТоваров
// * ИсторияИдентификаторов - Массив Из Строка
// * ТипНоменклатурыФНС - ПеречислениеСсылка.ТипыНоменклатурыФНС
// * КодПоКТРУ - Строка
// * КодТНВЭД - Строка
// * СтранаПроисхожденияКод - Строка
// * ПрослеживаемыйТовар - Булево
// * МаркируемыйТовар - Булево
//
Функция НоваяТаблицаТоваров() Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	
	ТаблицаТоваров.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеКраткое", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(3000));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатурыФНС");
	ТаблицаТоваров.Колонки.Добавить("КодПоКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("КодТНВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("МаркируемыйТовар", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#Область XDTO

Функция ЭтоПростойТипЭлементаXDTO(Элемент) Экспорт
	
	ЭтоПростойТип = Истина;
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("СписокXDTO")
		ИЛИ ТипЭлемента = Тип("ОбъектXDTO")
		ИЛИ ТипЭлемента = Тип("ЗначениеXDTO") Тогда
		ЭтоПростойТип = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПростойТип;
	
КонецФункции

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы) Экспорт
	
	МассивПути = РаботаСФайламиБЭД.ЭлементыПутиТипаXDTO(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция получает тип значения CML.
//
// Параметры:
//  Тип - Тип - исходный тип.
//  ВерсияСхемы - Строка - версия схемы CML.
//
// Возвращаемое значение:
//  ТипЗначения - тип значения CML.
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

Функция ЕстьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, НеПроверятьЗаполнение = Ложь) Экспорт
	
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	ПроверятьЗаполнение = Не НеПроверятьЗаполнение;
	
	Если Результат И ПроверятьЗаполнение Тогда
		Если ОбъектXDTO[ИмяСвойства] = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует строковое представление даты в форматах DD.MM.YYYY, YYYY-MM-DD в дату.
//
// Параметры:
//  Строка	 - Строка - представление даты.
// Возвращаемое значение:
//  Дата - преобразованное значение.
//
Функция ДатаИзСтроки(Строка) Экспорт
	
	ЧастьДаты    = "";
	ЧастьВремени = "000000";
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Строка, 3, 1)) Тогда
		ЧастьДаты = Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2);
		// заполним дополнительно время для формата "dd.MM.yyyy HH.mm.ss".
		Если СтрДлина(Строка) = 19 Тогда
			ЧастьВремени = СтрЗаменить(Сред(Строка, 12), ".", "");
		КонецЕсли;
	Иначе
		ЧастьДаты = Сред(Строка, 1, 4) + Сред(Строка, 6, 2) + Сред(Строка, 9, 2);
		// заполним дополнительно время для формата 20 символов.
		Если СтрДлина(Строка) = 20 Тогда
			ЧастьВремени = СтрЗаменить(Сред(Строка, 12), ":", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Дата(ЧастьДаты + ЧастьВремени);
	
КонецФункции

#КонецОбласти

#Область ПредставлениеДанных

// Конструктор параметров визуализации документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВыводитьДопДанные - Булево - признак включения режима вывода дополнительных данных.
// 	* ВыводитьБанковскиеРеквизиты - Булево -  признак включения режима вывода банковских реквизитов.
// 	* ВыводитьКопияВерна - Булево -  признак включения режима вывода отметки "Копия верна".
// 	* ПодсказкаQRКода - Строка -  текст подсказки QR кода.
// 	* ПубличнаяСсылкаQRКода - Строка -  текст публичной ссылки QR кода.
//
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	
	ПараметрыВизуализацииДокумента = Новый Структура;
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьДопДанные", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьБанковскиеРеквизиты", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьКопияВерна", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ПодсказкаQRКода", "");
	ПараметрыВизуализацииДокумента.Вставить("ПубличнаяСсылкаQRКода", "");
	
	Возврат ПараметрыВизуализацииДокумента;
	
КонецФункции

// Формирует представление двоичных данных сообщения.
// 
// Параметры:
// 	ДанныеФайла - ДвоичныеДанные - Данные сообщения для которого формируется представление.
// 	ДанныеФайлаДляИзвлеченияПараметров - ДвоичныеДанные, Массив из ДвоичныеДанные - Данные сообщения (или их массив) для получения параметров.
// 	ПараметрыВизуализации - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
//	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
//
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - печатная форма электронного документа.
//
Функция ПредставлениеДанныхДокумента(ДанныеФайла, ДанныеФайлаДляИзвлеченияПараметров = Неопределено,
	ПараметрыВизуализации = Неопределено, КонтекстДиагностики = Неопределено) Экспорт

	Возврат КонвертацияЭДО.ВизуализацияЭлектронногоДокумента(ДанныеФайла, ДанныеФайлаДляИзвлеченияПараметров, 
		ПараметрыВизуализации, КонтекстДиагностики);

КонецФункции

#КонецОбласти
	
#Область ИнформацияОТоваре

// Получает информацию о товаре из электронного документа.
//
// Параметры:
//  Параметры - см. НовыеПараметрыПолученияДанныхДокумента - параметры получения.
//  ИменаДопКолонок - Строка - имена дополнительных колонок через запятую.
//
Функция ИнформацияОТовареИзФайла(Параметры, ИменаДопКолонок = "") Экспорт
	
	ТаблицаВозврата = Неопределено;
	ОписаниеОшибки = "";	
	
	ДанныеФайлаЭД = ДанныеФайлаЭД(Параметры.ОсновнойФайл, ОписаниеОшибки,,, Истина);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеФайлаЭД) = Тип("Структура") Тогда
		ДанныеФайлаЭД = ДанныеФайлаЭД.ДанныеДокумента;
	КонецЕсли;
	
	// Формат BN Commerce Offering
	ПространствоИменBNCommerceOffering = ПространствоИменBNCommerceOffering();
	ТипCommerceOfferRequest = ПолучитьТипЗначенияCML("CommerceOfferRequest", ПространствоИменBNCommerceOffering);
	ТипCommerceOffer = ПолучитьТипЗначенияCML("CommerceOffer", ПространствоИменBNCommerceOffering);
	
	Попытка
		
		НаборДанных = Неопределено;
		ЭтоCML208   = Ложь;
		
		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
				МодульПодсистемыОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
				Если МодульПодсистемыОбменСГИСЭПД.ЭтоТитулЭПД(ДанныеФайлаЭД.ИдФайл) Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено 
			И СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_PRIRASXPRIN") > 0 Тогда
			НоменклатураАктаОРасхождениях(ДанныеФайлаЭД, ТаблицаВозврата);
			Возврат ТаблицаВозврата;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Каталог.Товары.Товар") <> Неопределено Тогда
			НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Каталог.Товары.Товар",,, Истина);
			ЭтоCML208 = Истина;
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Товары.Товар") <> Неопределено Тогда
			НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Товары.Товар",,, Истина);
			ЭтоCML208 = Истина;
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "ПакетПредложений.Предложения.Предложение") <> Неопределено Тогда
			Список = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "ПакетПредложений.Предложения.Предложение",,, Истина);
			Если Список.Количество() Тогда
				НаборДанных = Список;
				ЭтоCML208 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоCML208 Тогда
			ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
		КонецЕсли;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			НаборДанных = ДанныеФайлаЭД["Предложения"].Предложение;
			ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
		ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			Если ДанныеФайлаЭД["Товары"] <> Неопределено Тогда
				НаборДанных = ДанныеФайлаЭД["Товары"].Товар;
				ДопПараметры = Новый Структура("ИменаДопКолонок", ИменаДопКолонок);
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(МашиночитаемыеДоверенности.ВерсияФорматаОбъектаМЧД(ДанныеФайлаЭД)) Тогда
			Возврат Неопределено;
		ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			Если ФорматыЭДО_ФНС.ЭтоПространствоИменАктСверкиВзаиморасчетов(ДанныеФайлаЭД.ИдФайл) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
			
		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДеревоДопДанных", РазобратьУниверсальныйДопФайл(Параметры.ДополнительныйФайл));
			ДопПараметры.Вставить("ЕстьСвойствоИдФайл", Истина);
			ДопПараметры.Вставить("ИменаДопКолонок", ИменаДопКолонок);
			Если ДанныеФайлаЭД.Свойства().Получить("ВерсПрог") <> Неопределено Тогда
				ДопПараметры.Вставить("ВерсПрог", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "ВерсПрог"));
			КонецЕсли;
			
			
			Если СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.ТаблСчФакт.СведТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары");
					ДопПараметры.Вставить("ВидСчетаФактуры", ВидСчетаФактурыПоОбъектуXDTO(ДанныеФайлаЭД));
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NSCHFDOPPR") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.ТаблСчФакт.СведТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ВерсПрог", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "ВерсПрог"));
					ДопПараметры.Вставить("ИмяТЧ", "Товары");
					ДопПараметры.Вставить("ВидСчетаФактуры", ВидСчетаФактурыПоОбъектуXDTO(ДанныеФайлаЭД));
					ИнфПродГосЗакКазн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, 
						"Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн");
					ДопПараметры.Вставить("ЭтоГосЗакКазн", ИнфПродГосЗакКазн <> Неопределено);
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0
				Или СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NKORSCHFDOPPR") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.ТаблКСчФ.СведТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвТНО.ТН.Таблица.СвТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвТНО.ТН.Таблица.СвТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда
				
				НаборДанныхОписанияРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвАктИ.ОписРабот",,, Истина);
				Если НаборДанныхОписанияРабот <> Неопределено Тогда
					// Переберем номенклатуру из всех табличных частей акта.
					Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
						НомерСтроки = 1;
						НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементОписания, "Работа",,, Истина);
						Если НаборДанных <> Неопределено Тогда
							ДопПараметры.Вставить("ИмяТЧ", "Услуги");
							ДопПараметры.Вставить("НомерСтроки", НомерСтроки);
							СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
						КонецЕсли;
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "KORSFAKT") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.ТаблКСчФ.СведТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "SFAKT") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.ТаблСчФакт.СведТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвДокПТПрКроме.СодФХЖ2.СвТов",,, Истина);
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда
				
				НаборДанныхОписанияРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СвДокПРУ.СодФХЖ1.ОписРабот",,, Истина);
				Если НаборДанныхОписанияРабот <> Неопределено Тогда
					Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
						НомерСтроки = 1;
						НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементОписания, "Работа",,, Истина);
						Если НаборДанных <> Неопределено Тогда
							ДопПараметры.Вставить("ИмяТЧ", "Услуги");
							ДопПараметры.Вставить("НомерСтроки", НомерСтроки);
							СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
						КонецЕсли;
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_CHETOP") > 0 Тогда	
				
				НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.СведТовЦенПок",,, Истина);	
				Если НаборДанных <> Неопределено Тогда
					ДопПараметры.Вставить("ИмяТЧ", "Товары"); 
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ДопПараметры);
				КонецЕсли;
			Иначе
				Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ДанныеФайлаЭД.ИдФайл);
				Если Обработка <> Неопределено Тогда
					ТаблицаВозврата = Обработка.ИнформацияОТоваре(ДанныеФайлаЭД);
				КонецЕсли;
				Если ТаблицаВозврата = Неопределено Тогда
					Возврат ТаблицаВозврата;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаЭД.Тип() = ТипCommerceOfferRequest
			Или ДанныеФайлаЭД.Тип() = ТипCommerceOffer Тогда
			
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, ДанныеФайлаЭД.products, ДопПараметры);
			
		КонецЕсли;
		
		Если ДанныеФайлаЭД.Свойства().Получить("contract") <> Неопределено
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
			МодульПодсистемы.НоменклатураКонтрактаЕИС(ДанныеФайлаЭД, ТаблицаВозврата);
		КонецЕсли;
		
		Если ТаблицаВозврата = Неопределено Тогда
			ТаблицаВозврата = ИнформацияОТовареПрикладногоДокумента(Параметры.ОсновнойФайл.ДвоичныеДанные, "xml");
		КонецЕсли;
		
		Если ТаблицаВозврата = Неопределено Тогда
			ТаблицаВозврата = ИнформацияОТовареПроизвольногоДокумента(Параметры.ОсновнойФайл.ДвоичныеДанные);
		КонецЕсли;
		
		Если ТаблицаВозврата = Неопределено Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1.'"), Параметры.ОсновнойФайл.ИмяФайла);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ВидОперации = НСтр("ru = 'Чтение информации о товаре электронного документа'");
		ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиКратко = СтрШаблон(НСтр(
			"ru = 'Не удалось прочитать информацию о товаре электронного документа: %1'"),
			Параметры.ОсновнойФайл.ИмяФайла);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибкиПодробно, ТекстОшибкиКратко);
		ВызватьИсключение ТекстОшибкиПодробно;
	КонецПопытки;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Идентификатор - Строка
// * Наименование - Строка
// * Характеристика - Строка
// * ЕдиницаИзмерения - Строка
// * ЕдиницаИзмеренияКод - Строка
// * Артикул - Строка
// * СтавкаНДС - Строка
// * СодержитИзменяемыеДанные - Булево
// * ИсторияИдентификаторов - Массив Из Строка
// * ШтрихкодКомбинации - Строка
// * ШтрихкодыНоменклатуры - Строка
// * ТипНоменклатурыФНС - ПеречислениеСсылка.ТипыНоменклатурыФНС
// * КодНоменклатуры - Строка
// * КодПоКТРУ - Строка
// * КодТНВЭД - Строка
// * СтранаПроисхожденияКод - Строка
// * ПрослеживаемыйТовар - Булево
// * МаркируемыйТовар - Булево
//
Функция НовыеДанныеДляСопоставленияТоваров() Экспорт
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор"           , "");
	Сопоставление.Вставить("Наименование"            , "");
	Сопоставление.Вставить("Характеристика"          , "");
	Сопоставление.Вставить("ЕдиницаИзмерения"        , "");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод"     , "");
	Сопоставление.Вставить("Артикул"                 , "");
	Сопоставление.Вставить("СтавкаНДС"               , "");
	Сопоставление.Вставить("СодержитИзменяемыеДанные", Ложь);
	Сопоставление.Вставить("ИсторияИдентификаторов"  , Новый Массив);
	Сопоставление.Вставить("ШтрихкодКомбинации"      , "");
	Сопоставление.Вставить("ШтрихкодыНоменклатуры"   , "");
	Сопоставление.Вставить("ТипНоменклатурыФНС"    , Перечисления.ТипыНоменклатурыФНС.ПустаяСсылка());
	Сопоставление.Вставить("КодНоменклатуры"       , "");
	Сопоставление.Вставить("КодПоКТРУ"             , "");
	Сопоставление.Вставить("КодТНВЭД"              , "");
	Сопоставление.Вставить("СтранаПроисхожденияКод", "");
	Сопоставление.Вставить("ПрослеживаемыйТовар"   , Ложь);
	Сопоставление.Вставить("МаркируемыйТовар"      , Ложь);
	
	Возврат Сопоставление;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеПоля

// Параметры:
//  ТипЭлектронногоДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  Формат - Строка - См. ФорматыЭДО.ПоддерживаемыеФорматы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Разделы дополнительных полей формата электронного документа:
// * Тип - Строка - См. ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей
// * Имя - Строка
// * Представление - Строка
// * ПутьКЭлементуXML - Строка
// * ПутьКРеквизитуДереваДопДанные - Строка
// * ПутьКРеквизитуДереваСумма - Строка
Функция РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ТипЭлектронногоДокумента, Формат) Экспорт
	
	РазделыДополнительныхПолей = Новый ТаблицаЗначений;
	РазделыДополнительныхПолей.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	РазделыДополнительныхПолей.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	РазделыДополнительныхПолей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	РазделыДополнительныхПолей.Колонки.Добавить("ПутьКЭлементуXML", Новый ОписаниеТипов("Строка"));
	РазделыДополнительныхПолей.Колонки.Добавить("ПутьКРеквизитуДереваДопДанные", Новый ОписаниеТипов("Строка"));
	РазделыДополнительныхПолей.Колонки.Добавить("ПутьКРеквизитуДереваСумма", Новый ОписаниеТипов("Строка"));

	Обработка = ОбработкаФормата(Формат);
	Попытка
		Если Обработка = Неопределено Тогда
			ФорматыЭДО_ФНС.ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей, ТипЭлектронногоДокумента, Формат);
		Иначе
			Обработка.ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей);
		КонецЕсли;
	Исключение
		ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
		Шаблон = НСтр(
			"ru = 'Обработка %1, не удалось определить разделы дополнительных полей, по причине:
			|%2'");
		ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Возврат РазделыДополнительныхПолей;
	
КонецФункции
	
#КонецОбласти
	
#Область ПоставляемыеДанные	
	
Процедура ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	КонвертацияЭДО.ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики);
	
КонецПроцедуры	
	
#КонецОбласти	

#Область Прочее

// Возвращает префикс дополнительных данных, которые используются в служебных целях подсистемы, 
// но передаются в одном элементе с прикладными дополнительными данными электронного документа.
//
// Возвращаемое значение:
//  Строка - префикс служебных дополнительных данных.
//
Функция ПрефиксДополнительныхДанныхЭлектронныхДокументов() Экспорт
	
	Возврат "Для1С_";
	
КонецФункции

// Возвращает таблицу с данными для расшифровки формата и вида ЭД в Формат, вариант заполнения и
//																				и в обратном направлении
//
// Возвращаемое значение:
//  ТаблицаЗначений   - Расшифровка вариантов заполнения.
//
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	ВариантыЗаполнения = Новый ТаблицаЗначений;
	ВариантыЗаполнения.Колонки.Добавить("Формат"            , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ТипДокумента"      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	
	// Перечисление.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "BNCommerceOffering";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений;
	НоваяСтрока.ВариантЗаполнения = "ЗапросКоммерческихПредложений";
	
	// Перечисление.ТипыДокументовЭДО.КоммерческоеПредложение
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "BNCommerceOffering";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение;
	НоваяСтрока.ВариантЗаполнения = "КоммерческоеПредложение";
	
	//Перечисления.ВидыЭД.АктИсполнитель
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_REZRUISP_1_990_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	НоваяСтрока.ВариантЗаполнения = "ПередачаРезультатовРабот";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	НоваяСтрока.ВариантЗаполнения = "ДОП";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	НоваяСтрока.ВариантЗаполнения = "ДОП2019";
	///////////////////////////////////////////////////////////////////////////////////
	
	//Перечисления.ВидыЭД.АктНаПередачуПрав
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав;
	НоваяСтрока.ВариантЗаполнения = "ДОП";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав;
	НоваяСтрока.ВариантЗаполнения = "ДОП2019";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД;
	НоваяСтрока.ВариантЗаполнения = "СЧФДОП";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД;
	НоваяСтрока.ВариантЗаполнения = "СЧФДОП";

	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером;
	НоваяСтрока.ВариантЗаполнения = "СвРК";

	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;
	НоваяСтрока.ВариантЗаполнения = "СвЗК";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_TOVTORGPR_1_992_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	НоваяСтрока.ВариантЗаполнения = "ПередачаТоваров";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	НоваяСтрока.ВариантЗаполнения = "ДОП";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	НоваяСтрока.ВариантЗаполнения = "ДОП2019";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = "СЧФ";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = "СЧФ";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	НоваяСтрока.ВариантЗаполнения = "СЧФ";
	
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	НоваяСтрока.ВариантЗаполнения = "ДОП";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД;
	НоваяСтрока.ВариантЗаполнения = "СЧФДОП";
	///////////////////////////////////////////////////////////////////////////////////
	
	#Область ON_NKORSCHFDOPPR_1_996_03_05_01
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	НоваяСтрока.ВариантЗаполнения = "СЧФ";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	НоваяСтрока.ВариантЗаполнения = "ДОП";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД;
	НоваяСтрока.ВариантЗаполнения = "СЧФДОП";

	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером;
	НоваяСтрока.ВариантЗаполнения = "СвИСРК";

	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером;
	НоваяСтрока.ВариантЗаполнения = "СвИСЗК";
	
	#КонецОбласти
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров;
	НоваяСтрока.ВариантЗаполнения = "Каталог";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	НоваяСтрока.ВариантЗаполнения = "СчетНаОплату";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист;
	НоваяСтрока.ВариантЗаполнения = "Контрагент";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара;
	НоваяСтрока.ВариантЗаполнения = "ЗаказТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ;
	НоваяСтрока.ВариантЗаполнения = "ЗаказКлиента";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОПродажахКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОСписанииКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации;
	НоваяСтрока.ВариантЗаполнения = "РеквизитыОрганизации";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_PRIRASXPRIN_1_994_01_05_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях;
	НоваяСтрока.ВариантЗаполнения = "ДокументОПриемкеИРасхождениях";
	/////////////////////////////////////////////////////////////////////////////////// 
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_AKTSVEROTP_1_972_01_05_01_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов;
	НоваяСтрока.ВариантЗаполнения = "АктСверкиВзаиморасчетов";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_CHETOP_1_998_01_01_01";
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	НоваяСтрока.ВариантЗаполнения = "СчетНаОплату101";
	///////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = Обработки.ФорматДоговорнойДокумент101.ПространствоИмен();
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент;
	НоваяСтрока.ВариантЗаполнения = "ДоговорнойДокумент101";
	///////////////////////////////////////////////////////////////////////////////////
	
	ВариантыЗаполнения.Индексы.Добавить("Формат, ТипДокумента");
	ВариантыЗаполнения.Индексы.Добавить("Формат, ВариантЗаполнения");
	
	Возврат ВариантыЗаполнения;
	
КонецФункции

#КонецОбласти
	
#Область ОбновлениеИБ

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_9

#Область ПравилаПреобразованияФорматов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "КонвертацияЭДО.ВыполнитьЗаполнениеПравилПреобразования";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("086b4610-a498-466e-8d21-97d7edf79578");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ФорматыДляПреобразования,"+
		"РегистрСведений.ПравилаПреобразованияФорматов," +
		"Константа.ДатаЗагрузкиОписанияФорматовДляПреобразования";
	Обработчик.ЧитаемыеОбъекты = "Константа.ДатаЗагрузкиОписанияФорматовДляПреобразования";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: заполнение правил преобразования форматов.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "КонвертацияЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1d5f8647-63c2-4ed6-845c-c3708b5bde91");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление правил преобразования форматов (начальное заполнение).'");
	
#КонецОбласти

#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДокумента

// Инициализирует результат формирования документа.
//
// Возвращаемое значение:
//  Структура - результат формирования:
//   * Документ - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла()
//   * ДополнительныйДокумент - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла()
//   * Ошибки - Массив - ошибки при формировании документа.
//
Функция НовыйРезультатФормированияДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("ДополнительныйДокумент", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("Ошибки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкаЗаполненияДополнительныхПолей(ОбъектУчета, ПараметрыПолучения)
	
	ТекстОшибки = Неопределено;
	ОтборОписанияОбъектаУчета = Новый Структура;
	ОтборОписанияОбъектаУчета.Вставить("Организация", ПараметрыПолучения.Организация);
	ОтборОписанияОбъектаУчета.Вставить("Контрагент", ПараметрыПолучения.Контрагент);
	ОтборОписанияОбъектаУчета.Вставить("Договор", ПараметрыПолучения.Договор);
	ОтборОписанияОбъектаУчета.Вставить("ТипДокумента", ПараметрыПолучения.ТипДокумента);
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчетаПоОтбору(ОбъектУчета, ОтборОписанияОбъектаУчета);
	КлючНастроекОтправки = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
	
	Если КлючНастроекОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючНастройкиДопПолей = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
	КлючНастройкиДопПолей.ВидДокумента = КлючНастроекОтправки.ВидДокумента;
	КлючНастройкиДопПолей.Договор = КлючНастроекОтправки.Договор;
	КлючНастройкиДопПолей.Отправитель = КлючНастроекОтправки.Отправитель;
	КлючНастройкиДопПолей.Получатель = КлючНастроекОтправки.Получатель;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	Если НастройкиОтправки <> Неопределено Тогда
		КлючНастройкиДопПолей.ВидДокумента = НастройкиОтправки.ВидДокумента;
		КлючНастройкиДопПолей.Договор = НастройкиОтправки.Договор;
		КлючНастройкиДопПолей.Отправитель = НастройкиОтправки.Отправитель;
		КлючНастройкиДопПолей.Получатель = НастройкиОтправки.Получатель;
	КонецЕсли;
	
	НастройкаЗаполнения = НастройкиЭДО.НастройкаЗаполненияДополнительныхПолей(КлючНастройкиДопПолей, ПараметрыПолучения.Формат, ТекстОшибки);
		
	Если НастройкаЗаполнения = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Не удалось получить настройки дополнительных полей на основании %1 по причине:'"),
				ОбъектУчета));
			МассивСтрок.Добавить(ТекстОшибки);
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Проверьте корректность настроек заполнения дополнительных полей
				|в настройке ЭДО для вида электронного документа ""%1"" и формата ""%2""'"),
					КлючНастроекОтправки.ВидДокумента, ПараметрыПолучения.Формат));
			ТекстСообщения = СтрСоединить(МассивСтрок, Символы.ПС);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат НастройкаЗаполнения;
	
КонецФункции

Функция ДополнитьДокументДаннымиДополнительныхПолей(НастройкаЗаполнения, ДокументДляИспользованияВФормулах,
	ПараметрыПолучения, ОписаниеДанныхЭД, КэшДополнительныхДанных)

	Результат = Новый Структура;
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("Успех", Истина);

	Если НастройкаЗаполнения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДополнительныеДанные = Новый Структура;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОписаниеДанныхЭД", ОписаниеДанныхЭД);
	ПараметрыЗаполнения.Вставить("НастройкиОбмена", ПараметрыПолучения);
	ПараметрыЗаполнения.Вставить("НастройкаЗаполнения", НастройкаЗаполнения);
	ПараметрыЗаполнения.Вставить("СсылкаНаОбъект", ДокументДляИспользованияВФормулах);

	РазделыДополнительныхПолей = РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
		ПараметрыПолучения.ТипДокумента, ПараметрыПолучения.Формат);

	ОшибкиВычисления = Новый Структура;
	РезультатЗаполнения = Истина;

	ТипыРазделовДополнительныхПолей = ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();

	Для Каждого Раздел Из РазделыДополнительныхПолей Цикл

		ПараметрыЗаполнения.Вставить("Раздел", Раздел);

		ДанныеРаздела = Неопределено;
		Если КэшДополнительныхДанных <> Неопределено Тогда
			КэшДополнительныхДанных.Свойство(Раздел.Имя, ДанныеРаздела);
		КонецЕсли;

		ДанныеРазделаЗаполнены = Ложь;

		Если Раздел.Тип = ТипыРазделовДополнительныхПолей.Шапка Тогда

			Если ДанныеРаздела = Неопределено Тогда
				ДанныеРаздела = ВычислитьЗначенияДополнительныхПолейШапки(ПараметрыЗаполнения, ОшибкиВычисления);
			КонецЕсли;
			ДанныеРазделаЗаполнены = ЗаполнитьДанныеДополнительныхПолейШапки(ДанныеРаздела, ПараметрыЗаполнения);

		ИначеЕсли Раздел.Тип = ТипыРазделовДополнительныхПолей.Таблица Тогда

			Если ДанныеРаздела = Неопределено Тогда
				ДанныеРаздела = ВычислитьЗначенияДополнительныхПолейТаблицы(ПараметрыЗаполнения, ОшибкиВычисления);
			КонецЕсли;
			ДанныеРазделаЗаполнены = ЗаполнитьДанныеДополнительныхПолейТаблицы(ДанныеРаздела, ПараметрыЗаполнения);

		КонецЕсли;

		Если Не ДанныеРазделаЗаполнены Тогда
			РезультатЗаполнения = Ложь;
		КонецЕсли;

		ДополнительныеДанные.Вставить(Раздел.Имя, ДанныеРаздела);

	КонецЦикла;

	Результат.Данные = ДополнительныеДанные;
	Результат.Ошибки = ОшибкиВычисления;
	Результат.Успех = РезультатЗаполнения;

	Возврат Результат;

КонецФункции

// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
// * Организация - ОпределяемыйТип.Организация
// * СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция НовыеДанныеПодписанта(Организация = Неопределено, СертификатПодписи = Неопределено,
	Доверенность = Неопределено) Экспорт
	Данные = Новый Структура;
	Если ТипЗнч(Организация) = Тип("Неопределено") Тогда
		ПустаяОрганизация = Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение(Неопределено);
		Данные.Вставить("Организация", ПустаяОрганизация);
	Иначе
		Данные.Вставить("Организация", Организация);
	КонецЕсли;
	Если ТипЗнч(СертификатПодписи) = Тип("Неопределено") Тогда
		ПустойСертификат = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
		Данные.Вставить("СертификатПодписи", ПустойСертификат);
	Иначе
		Данные.Вставить("СертификатПодписи", СертификатПодписи);
	КонецЕсли;
	Если ТипЗнч(Доверенность) = Тип("Неопределено") Тогда
		ПустаяДоверенность = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
		Данные.Вставить("Доверенность", ПустаяДоверенность);
	Иначе
		Данные.Вставить("Доверенность", Доверенность);
	КонецЕсли;
	Возврат Данные;
КонецФункции

#Область ВычислениеЗначенийДополнительныхПолей

Процедура ПолучитьЗапросКонструктораДополнительныхПолейТаблицы(ТекстЗапроса, ВычислениеЗначений = Ложь)
	
	ИмяТаблицыНоменклатура   = ИмяТаблицыНоменклатура();
	ИмяТаблицыХарактеристики = ИмяТаблицыХарактеристика();
	ИмяТаблицыУпаковки       = ИмяТаблицыУпаковка();
	
	Если ИмяТаблицыНоменклатура = Неопределено
		И ИмяТаблицыХарактеристики = Неопределено
		И ИмяТаблицыУпаковки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВычислениеЗначений Тогда
		МассивЗапросов = Новый Массив;
		
		Если ИмяТаблицыНоменклатура <> Неопределено Тогда
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК СсылкаНаОбъект,
				|	Номенклатура.Ссылка КАК Номенклатура,
				|	NULL КАК Характеристика,
				|	NULL КАК Упаковка
				|ИЗ
				|	&ИмяТаблицыНоменклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка В(&Номенклатура)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыНоменклатура", ИмяТаблицыНоменклатура);
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ИмяТаблицыХарактеристики <> Неопределено Тогда
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Характеристики.Ссылка,
				|	NULL,
				|	Характеристики.Ссылка,
				|	NULL
				|ИЗ
				|	&ИмяТаблицыХарактеристики КАК Характеристики
				|ГДЕ
				|	Характеристики.Ссылка В(&Характеристика)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыХарактеристики", ИмяТаблицыХарактеристики);
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ИмяТаблицыУпаковки <> Неопределено Тогда
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Упаковки.Ссылка,
				|	NULL,
				|	NULL,
				|	Упаковки.Ссылка
				|ИЗ
				|	&ИмяТаблицыУпаковки КАК Упаковки
				|ГДЕ
				|	Упаковки.Ссылка В(&Упаковка)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыУпаковки", ИмяТаблицыУпаковки);
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		ТекстЗапроса = СтрСоединить(МассивЗапросов, "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
	Иначе
		МассивПолей = Новый Массив;
		МассивТаблиц = Новый Массив;
		
		Если ИмяТаблицыНоменклатура <> Неопределено Тогда
			МассивПолей.Добавить("Номенклатура.Ссылка КАК Номенклатура");
			МассивТаблиц.Добавить(ИмяТаблицыНоменклатура + " КАК Номенклатура");
		КонецЕсли;
		
		Если ИмяТаблицыХарактеристики <> Неопределено Тогда
			МассивПолей.Добавить("Характеристики.Ссылка КАК Характеристика");
			МассивТаблиц.Добавить(ИмяТаблицыХарактеристики + " КАК Характеристики");
		КонецЕсли;
		
		Если ИмяТаблицыУпаковки <> Неопределено Тогда
			МассивПолей.Добавить("Упаковки.Ссылка КАК Упаковка");
			МассивТаблиц.Добавить(ИмяТаблицыУпаковки + " КАК Упаковки");
		КонецЕсли;
		
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ %1 ИЗ %2",
			СтрСоединить(МассивПолей, ","),
			СтрСоединить(МассивТаблиц, ","));
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьЗначенияДополнительныхПолейШапки(ПараметрыЗаполнения, ОшибкиВычисления)
	
	ДополнительныеДанные = Новый Структура;
	
	ПараметрыОтбора = Новый Структура("Раздел, Заполнение", ПараметрыЗаполнения.Раздел.Имя, "ПоФормуле");
	МассивНастроекПоФормуле = ПараметрыЗаполнения.НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	Если МассивНастроекПоФормуле.Количество() = 0 Тогда
		Возврат ДополнительныеДанные;
	КонецЕсли;
	
	НастройкиОбмена = ПараметрыЗаполнения.НастройкиОбмена;
	
	ТекстЗапроса = ЗапросКонструктораДополнительныхПолей(
		НастройкиОбмена.ТипДокумента, НастройкиОбмена.Формат, ПараметрыЗаполнения.Раздел.Тип);
	
	Попытка
		// Получим из формулы операнды и подготовим их к передаче в СКД.
		МассивОперандов = Новый Массив;
		ОперандыФормул  = Новый Соответствие;
		Для Каждого НастройкаПоФормуле Из МассивНастроекПоФормуле Цикл
			МассивОперандовФормулы = ОбщегоНазначенияБЭД.МассивОперандовФормулы(
				НастройкаПоФормуле.Значение);
			Если МассивОперандовФормулы.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОперандов, МассивОперандовФормулы, Истина);
				ОперандыФормул.Вставить(НастройкаПоФормуле, МассивОперандовФормулы);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивОперандов) Тогда
			
			Счетчик = 0;
			ВыбранныеПоляКомпоновки = Новый Соответствие;
			Для Каждого Операнд Из МассивОперандов Цикл
				ИмяОперанда = СтрШаблон("Поле%1", Счетчик);
				ВыбранныеПоляКомпоновки.Вставить(Операнд, ИмяОперанда);
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			ПараметрыСхемыКомпоновки = Новый Соответствие;
			ПараметрыСхемыКомпоновки.Вставить("Ссылка", ПараметрыЗаполнения.СсылкаНаОбъект);
			
			ТаблицаДанных = ОбщегоНазначенияБЭД.ВыполнитьЗапросЧерезСКД(ТекстЗапроса, ВыбранныеПоляКомпоновки, ПараметрыСхемыКомпоновки);
			
			ЗначенияОперандов = ТаблицаДанных[0];
			
		КонецЕсли;
		
	Исключение
		ОбработатьОшибкуВыполненияЗапросаКонструктораДополнительныхПолей(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПараметрыЗаполнения);
		Возврат ДополнительныеДанные;
	КонецПопытки;

	ОшибкиПоРазделу = Неопределено;
	
	Для Каждого НастройкаПоФормуле Из МассивНастроекПоФормуле Цикл
		
		Формула = НастройкаПоФормуле.Значение;
		ДанныеЗначенийОперандов = Новый Соответствие;
		МассивОперандовФормулы = ОперандыФормул[НастройкаПоФормуле];
		Если ЗначениеЗаполнено(МассивОперандовФормулы) Тогда
			Для Каждого Операнд Из МассивОперандовФормулы Цикл
				ЗначениеОперанда = ЗначенияОперандов[ВыбранныеПоляКомпоновки[Операнд]];
				ДанныеЗначенийОперандов.Вставить(Операнд, ЗначениеОперанда);
			КонецЦикла;
		КонецЕсли;
		
		Попытка 
			ЗначениеФормулы = ОбщегоНазначенияБЭД.РезультатВычисленияФормулы(Формула, ДанныеЗначенийОперандов,
				НастройкаПоФормуле.Версия);
			ДополнительныеДанные.Вставить(НастройкаПоФормуле.Идентификатор, ЗначениеФормулы);
		Исключение
			ПредставлениеПоля = ?(ЗначениеЗаполнено(НастройкаПоФормуле.Представление),
				НастройкаПоФормуле.Представление, НастройкаПоФормуле.Имя);
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось вычислить значение поля ""%1"".'"), ПредставлениеПоля);
			
			Если ОшибкиПоРазделу = Неопределено Тогда
				ОшибкиПоРазделу = Новый Соответствие;
			КонецЕсли;
			
			ОшибкиПоРазделу.Вставить(НастройкаПоФормуле.Идентификатор, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПоРазделу) Тогда
		ОшибкиВычисления.Вставить(ПараметрыЗаполнения.Раздел.Имя, ОшибкиПоРазделу);
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

Функция ВычислитьЗначенияДополнительныхПолейТаблицы(ПараметрыЗаполнения, ОшибкиВычисления)
	
	МассивДополнительныхДанных = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("Раздел", ПараметрыЗаполнения.Раздел.Имя);
	МассивНастроек = ПараметрыЗаполнения.НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	Если МассивНастроек.Количество() = 0 Тогда
		Возврат МассивДополнительныхДанных;
	КонецЕсли;
	
	ПутьКДопДанным = ПараметрыЗаполнения.Раздел.ПутьКРеквизитуДереваДопДанные;
	ПутьКДаннымТаблицы = Лев(ПутьКДопДанным, СтрНайти(ПутьКДопДанным, ".", НаправлениеПоиска.СКонца) - 1);
	ПутьКДаннымСопоставления = ПутьКДаннымТаблицы + ".Сопоставление";
	ПутьКРеквизитуДереваСумма = ПараметрыЗаполнения.Раздел.ПутьКРеквизитуДереваСумма;
	
	ИсточникиДанных = Новый Структура;
	Если ИмяТаблицыНоменклатура() <> Неопределено Тогда
		ИсточникиДанных.Вставить("Номенклатура", Новый Структура);
	КонецЕсли;
	
	Если ИмяТаблицыХарактеристика() <> Неопределено Тогда
		ИсточникиДанных.Вставить("Характеристика", Новый Структура);
	КонецЕсли;
	
	Если ИмяТаблицыУпаковка() <> Неопределено Тогда
		ИсточникиДанных.Вставить("Упаковка", Новый Структура);
	КонецЕсли;
	
	Для Каждого Источник Из ИсточникиДанных Цикл
		Источник.Значение.Вставить("ПутьКДанным", ПутьКДаннымСопоставления + "." + Источник.Ключ + "ИБ");
		Источник.Значение.Вставить("МассивСсылок", Новый Массив);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ПолныйПуть", ПутьКДаннымСопоставления);
	
	ОписаниеДанныхЭД = ПараметрыЗаполнения.ОписаниеДанныхЭД;
	ТипОписанияДанных = ТипЗнч(ОписаниеДанныхЭД);
	Если ТипОписанияДанных = Тип("ДеревоЗначений") Тогда
		НайденныеСтроки = ОписаниеДанныхЭД.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		Для Каждого Сопоставление Из НайденныеСтроки Цикл
			
			КлючСтроки = Новый Структура;
			
			Для Каждого Источник Из ИсточникиДанных Цикл
				СсылкаНаОбъект = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Сопоставление, Источник.Значение.ПутьКДанным);
				Если ЗначениеЗаполнено(СсылкаНаОбъект)
					И Источник.Значение.МассивСсылок.Найти(СсылкаНаОбъект) = Неопределено Тогда
					Источник.Значение.МассивСсылок.Добавить(СсылкаНаОбъект)
				КонецЕсли;
				КлючСтроки.Вставить(Источник.Ключ, СсылкаНаОбъект);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПутьКРеквизитуДереваСумма) Тогда
				Сумма = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Сопоставление.Родитель, ПутьКРеквизитуДереваСумма);
				КлючСтроки.Вставить("Сумма", Сумма);
			КонецЕсли;
			
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("КлючСтроки", КлючСтроки);
			
			МассивДополнительныхДанных.Добавить(ДополнительныеДанные);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Раздел, Заполнение", ПараметрыЗаполнения.Раздел.Имя, "ПоФормуле");
	МассивНастроекПоФормуле = ПараметрыЗаполнения.НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	Если МассивНастроекПоФормуле.Количество() = 0 Тогда
		Возврат МассивДополнительныхДанных;
	КонецЕсли;
	
	ТекстЗапроса = Неопределено;
	ПолучитьЗапросКонструктораДополнительныхПолейТаблицы(ТекстЗапроса, Истина);
	
	Попытка
		МассивОперандов = Новый Массив;
		ОперандыФормул = Новый Соответствие;
		Для Каждого НастройкаПоФормуле Из МассивНастроекПоФормуле Цикл
			МассивОперандовФормулы = ОбщегоНазначенияБЭД.МассивОперандовФормулы(
				НастройкаПоФормуле.Значение);
			Если МассивОперандовФормулы.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОперандов, МассивОперандовФормулы, Истина);
				ОперандыФормул.Вставить(НастройкаПоФормуле, МассивОперандовФормулы);
			КонецЕсли;
		КонецЦикла;
		
		Счетчик = 0;
		ВыбранныеПоляКомпоновки = Новый Соответствие;
		ВыбранныеПоляКомпоновки.Вставить("СсылкаНаОбъект", "СсылкаНаОбъект");
		Для Каждого Операнд Из МассивОперандов Цикл
			ИмяОперанда = СтрШаблон("Поле%1", Счетчик);
			ВыбранныеПоляКомпоновки.Вставить(Операнд, ИмяОперанда);
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ПараметрыСхемыКомпоновки = Новый Соответствие;
		Для Каждого Источник Из ИсточникиДанных Цикл
			ПараметрыСхемыКомпоновки.Вставить(Источник.Ключ, Источник.Значение.МассивСсылок);
		КонецЦикла;
		
		ЗначенияОперандов = ОбщегоНазначенияБЭД.ВыполнитьЗапросЧерезСКД(ТекстЗапроса, ВыбранныеПоляКомпоновки, ПараметрыСхемыКомпоновки);
	Исключение
		ОбработатьОшибкуВыполненияЗапросаКонструктораДополнительныхПолей(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПараметрыЗаполнения);
		Возврат МассивДополнительныхДанных;
	КонецПопытки;
	
	ОшибкиПоСтрокамРаздела = Неопределено;
	
	НомерСтроки = 1;
	Для Каждого ДополнительныеДанные Из МассивДополнительныхДанных Цикл
		
		ЗначенияПолей = Новый Структура;
		
		ОшибкиПоСтроке = Неопределено;
		
		Для Каждого НастройкаПоФормуле Из МассивНастроекПоФормуле Цикл
			
			Формула = НастройкаПоФормуле.Значение;
			
			МассивОперандовФормулы = ОперандыФормул[НастройкаПоФормуле];
			ДанныеЗначенийОперандов = Новый Соответствие;
			Если ЗначениеЗаполнено(МассивОперандовФормулы) Тогда
				Для Каждого Операнд Из МассивОперандовФормулы Цикл
					
					ЗначениеОперанда = Неопределено;
					ПозицияСимвола = СтрНайти(Операнд, ".");
					Источник = ?(ПозицияСимвола, Лев(Операнд, ПозицияСимвола - 1), Операнд);
					СсылкаНаОбъект = ДополнительныеДанные.КлючСтроки[Источник];
					НайденнаяСтрока = ЗначенияОперандов.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
					Если НайденнаяСтрока <> Неопределено Тогда
						ЗначениеОперанда = НайденнаяСтрока[ВыбранныеПоляКомпоновки[Операнд]];
					КонецЕсли;
					
					ДанныеЗначенийОперандов.Вставить(Операнд, ЗначениеОперанда);
					
				КонецЦикла;
			КонецЕсли;
			
			Попытка 
				ЗначениеФормулы = ОбщегоНазначенияБЭД.РезультатВычисленияФормулы(Формула, ДанныеЗначенийОперандов,
					НастройкаПоФормуле.Версия);
				ЗначенияПолей.Вставить(НастройкаПоФормуле.Идентификатор, ЗначениеФормулы);
			Исключение
				ПредставлениеПоля = ?(ЗначениеЗаполнено(НастройкаПоФормуле.Представление),
					НастройкаПоФормуле.Представление, НастройкаПоФормуле.Имя);
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось вычислить значение поля ""%1"" в строке %2 списка ""%3"".'"),
					ПредставлениеПоля, НомерСтроки, ПараметрыЗаполнения.Раздел.Представление);
				
				Если ОшибкиПоСтроке = Неопределено Тогда
					ОшибкиПоСтроке = Новый Соответствие;
				КонецЕсли;
				
				ОшибкиПоСтроке.Вставить(НастройкаПоФормуле.Идентификатор, ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗначенияПолей) Тогда
			ДополнительныеДанные.Вставить("ЗначенияПолей", ЗначенияПолей);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОшибкиПоСтроке) Тогда
			Если ОшибкиПоСтрокамРаздела = Неопределено Тогда
				ОшибкиПоСтрокамРаздела = Новый Соответствие;
			КонецЕсли;
			ОшибкиПоСтрокамРаздела.Вставить(НомерСтроки, ОшибкиПоСтроке);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПоСтрокамРаздела) Тогда
		ОшибкиВычисления.Вставить(ПараметрыЗаполнения.Раздел.Имя, ОшибкиПоСтрокамРаздела);
	КонецЕсли;
	
	Возврат МассивДополнительныхДанных;
	
КонецФункции

Процедура ОбработатьОшибкуВыполненияЗапросаКонструктораДополнительныхПолей(ИнформацияОбОшибке, ПараметрыЗаполнения)
	
	Операция = НСтр("ru = 'Заполнение дополнительных полей.'");
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить значения операндов формулы для вычисления значений дополнительных полей раздела ""%1"".'"),
		ПараметрыЗаполнения.Раздел.Имя);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Не удалось выполнить запрос конструктора дополнительных полей.'"));
	
	СсылкаНаНастройкуЭДО = НастройкиЭДО.СсылкаНаОбъектНастройкиЭДО(ПараметрыЗаполнения.НастройкиОбмена.Организация,
		ПараметрыЗаполнения.НастройкиОбмена.Контрагент, ПараметрыЗаполнения.НастройкиОбмена.Договор);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Настройка ЭДО: %1'"), СсылкаНаНастройкуЭДО));
		
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Вид электронного документа: %1'"),
		ПараметрыЗаполнения.НастройкиОбмена.ТипДокумента));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Формат: %1'"),
		ПараметрыЗаполнения.НастройкиОбмена.Формат));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Раздел дополнительных полей: %1'"), ПараметрыЗаполнения.Раздел.Имя));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(ИнформацияОбОшибке);
	
	ПодробныйТекстОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
	
	ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения,,
		ПараметрыЗаполнения.СсылкаНаОбъект);
	
КонецПроцедуры

Функция НовыеПараметрыЗапросаКонструктораДополнительныхПолейШапки(ТипДокумента, Формат)
	
	ИспользоватьУПД = ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД; // оставлено для совместимости
	ИспользоватьУКД = ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД; // оставлено для совместимости
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента", ТипДокумента);
	Параметры.Вставить("ИспользоватьУПД", ИспользоватьУПД);
	Параметры.Вставить("ИспользоватьУКД", ИспользоватьУКД);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает полное имя таблицы номенклатуры.
// 
// Возвращаемое значение:
//  - Строка
//  - Неопределено
Функция ИмяТаблицыНоменклатура()
	
	Возврат ИмяТаблицыПрикладнойСущности("Номенклатура", "НоменклатураБЭД");
	
КонецФункции

// Возвращает полное имя таблицы характеристик.
// 
// Возвращаемое значение:
//  - Строка
//  - Неопределено
Функция ИмяТаблицыХарактеристика()
	
	Возврат ИмяТаблицыПрикладнойСущности("ХарактеристикиНоменклатуры", "ХарактеристикаНоменклатурыБЭД");
	
КонецФункции

// Возвращает полное имя таблицы упаковок.
// 
// Возвращаемое значение:
//  - Строка
//  - Неопределено
Функция ИмяТаблицыУпаковка()
	
	Возврат ИмяТаблицыПрикладнойСущности("УпаковкиНоменклатуры", "УпаковкаНоменклатурыБЭД");
	
КонецФункции

// Возвращает полное имя таблицы прикладной сущности. Учитывает сценарий, когда в состав определяемого типа
// включены несколько таблиц, в этом случае тип уточняется через переопределяемый метод.
// 
// Возвращаемое значение:
//  - Строка
//  - Неопределено
Функция ИмяТаблицыПрикладнойСущности(ИмяСущности, ИмяОпределяемогоТипа)
	
	ИмяСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника(ИмяСущности);
	ИменаТаблиц = ОбщегоНазначенияБЭД.ИменаТаблицОпределяемогоТипа(ИмяОпределяемогоТипа);
	
	Если ЗначениеЗаполнено(ИмяСправочника) Тогда 
		ИмяТаблицы = СтрШаблон("Справочник.%1", ИмяСправочника);
		Если ИменаТаблиц.Найти(ИмяТаблицы) <> Неопределено Тогда 
			Возврат ИмяТаблицы;
		КонецЕсли;
	КонецЕсли;
	
	Если ИменаТаблиц.Количество() Тогда
		Возврат ИменаТаблиц[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеДокументаПоУчету

Функция НовыеДанныеДокументаПоУчету()
	
	ДанныеПоУчету = Новый Структура;
	ДанныеПоУчету.Вставить("Данные");
	ДанныеПоУчету.Вставить("Содержание", НовоеОписаниеФайлаДокумента());
	
	Возврат ДанныеПоУчету;
	
КонецФункции

Функция ДанныеСлужебнойКвитанции(Знач ТипДокумента, Знач ДанныеЭД)

	Данные = Неопределено;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении Тогда
		Данные = ИзвещениеОПолучении_Данные(ДанныеЭД);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Данные = ПредложениеОбАннулировании_Данные(ДанныеЭД);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		Данные = УведомлениеОбУточнении_Данные(ДанныеЭД);
	КонецЕсли;
		
	Возврат Данные;
	
КонецФункции

Функция РезультатФормированияСОшибкойПолученияДанныхПоУчету()
		
	Результат = НовыйРезультатФормированияДокументаПоУчету();
	
	Результат.ЕстьОшибки = Истина;
	ОбщегоНазначенияБЭД.ДобавитьОшибку(Результат.Ошибки.ЗаполнениеДанных, НСтр(
		"ru = 'Произошла ошибка получения данных для формирования электронного документа'"));
		
	Возврат Результат;
	
КонецФункции

#Область Прикладные

#Область ИзвещениеОПолучении

Функция ИзвещениеОПолучении_Данные(ДанныеДляФормирования)
	
	Данные = ИзвещениеОПолучении_НовыеДанные();
	
	Отказ = Ложь;
	
	ФорматыЭДОСобытия.ЗаполнитьДанные_ИзвещениеОПолучении(Данные, ДанныеДляФормирования, Отказ);
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУчета = НовыеДанныеДокументаПоУчету();
	ДанныеУчета.Данные = Данные;
	
	Возврат ДанныеУчета;
	
КонецФункции

Функция ИзвещениеОПолучении_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ИзвещениеОПолучении");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ПредложениеОбАннулировании

Функция ПредложениеОбАннулировании_Данные(ДанныеДляФормирования)
	
	Данные = ПредложениеОбАннулировании_НовыеДанные();
	
	Отказ = Ложь;
	
	ФорматыЭДОСобытия.ЗаполнитьДанные_ПредложениеОбАннулировании(Данные, ДанныеДляФормирования, Отказ);
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУчета = НовыеДанныеДокументаПоУчету();
	ДанныеУчета.Данные = Данные;
	
	Возврат ДанныеУчета;
	
КонецФункции

Функция ПредложениеОбАннулировании_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ПредложениеОбАннулировании");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область УведомлениеОбУточнении

Функция УведомлениеОбУточнении_Данные(ДанныеДляФормирования)
	
	Данные = УведомлениеОбУточнении_НовыеДанные();
	
	Отказ = Ложь;
	
	ФорматыЭДОСобытия.ЗаполнитьДанные_УведомлениеОбУточнении(Данные, ДанныеДляФормирования, Отказ);
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУчета = НовыеДанныеДокументаПоУчету();
	ДанныеУчета.Данные = Данные;
	
	Возврат ДанныеУчета;
	
КонецФункции

Функция УведомлениеОбУточнении_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УведомлениеОбУточнении");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

// Формирование файла электронного документа прикладного формата.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект, по которому необходимо сформировать электронный документ.
//  ПараметрыФормирования - Структура - см. ОбменСКонтрагентамиВнутренний.НовыеПараметрыФормированияЭлектронногоДокумента.
//
// Возвращаемое значение:
//  Структура - параметры с данными документа.
//
Функция ДанныеПрикладногоЭлектронногоДокумента(ОбъектУчета, ПараметрыФормирования)
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ДанныеФайла");
	РезультатФормирования.Вставить("ИмяФайла");
	РезультатФормирования.Вставить("Расширение");
	РезультатФормирования.Вставить("НаименованиеДокументаОтправителя");
	РезультатФормирования.Вставить("НомерДокументаОтправителя");
	РезультатФормирования.Вставить("ДатаДокументаОтправителя");
	РезультатФормирования.Вставить("СуммаДокумента");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПриФормированииФайлаПрикладногоЭлектронногоДокумента(
		ПараметрыФормирования, РезультатФормирования, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РезультатФормирования.ДанныеФайла = Неопределено Тогда 
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "СформироватьФайлПрикладногоЭлектронногоДокумента/ПроверкаПараметра/ДанныеФайла");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатФормирования.ИмяФайла) Тогда 
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "СформироватьФайлПрикладногоЭлектронногоДокумента/ПроверкаПараметра/ИмяФайла");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатФормирования.Расширение) Тогда 
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "СформироватьФайлПрикладногоЭлектронногоДокумента/ПроверкаПараметра/Расширение");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатФормирования.НаименованиеДокументаОтправителя) Тогда
		РезультатФормирования.НаименованиеДокументаОтправителя = ОбъектУчета.Метаданные().Синоним;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатФормирования.НомерДокументаОтправителя) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(
			ОбъектУчета, РезультатФормирования.НомерДокументаОтправителя);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатФормирования.ДатаДокументаОтправителя) Тогда
		РезультатФормирования.ДатаДокументаОтправителя = ТекущаяДатаСеанса();
	КонецЕсли;
		
	Возврат РезультатФормирования;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанных

Процедура ДополнитьДанныеДокумента(Данные, Знач ДополнительныеДанные, Знач Замещать = Ложь)
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ДеревоЗначений") Тогда
		Для Каждого КлючЗначение Из ДополнительныеДанные Цикл
			Путь = КлючЗначение.Ключ;
			Значение = КлючЗначение.Значение;
			Если Не Замещать Тогда
				ТекущееЗначение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, Путь, Ложь);
				Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(Данные, Путь, Значение);
		КонецЦикла;
	КонецЕсли;
	Если ЭтоОбработкаФормата(Данные) Тогда
		Попытка
			Данные.УстановитьДополнительныеДанныеДляФормирования(ДополнительныеДанные);
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Менеджер %1, Не удалось дополнить данные документа, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Данные), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЧтениеЭД

#Область ФормированиеСодержания

// Возвращает содержание документа по правилам конвертации.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла = описание файла документа. 
//
// Возвращаемое значение:
//  НовоеОписаниеФайлаДокумента, Неопределено - содержание файла.
Функция СодержаниеДокументаПоПравиламКонвертации(ОписаниеФайла)
	
	Файл = Новый Файл(ОписаниеФайла.ИмяФайла);
	
	ДвоичныеДанные = Неопределено;
	
	Если НРег(Файл.Расширение) = ".xml" Тогда
		ДвоичныеДанные = ОписаниеФайла.ДвоичныеДанные;
	ИначеЕсли НРег(Файл.Расширение) = ".zip" Тогда
		ДанныеДоверенности = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайла);
		ДвоичныеДанные = ДанныеДоверенности.ДвоичныеДанные;
	ИначеЕсли НРег(Файл.Расширение) = ".pdf" Тогда
		ДвоичныеДанные = Обработки.ФорматДоговорнойДокумент101.ДанныеДокументаИзФайлаОбмена(ОписаниеФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДокумента = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные);
	Если Не ЗначениеЗаполнено(ПараметрыДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СодержаниеДокумента = НовоеОписаниеФайлаДокумента();
	ЗаполнитьЗначенияСвойств(СодержаниеДокумента, ПараметрыДокумента);
	СодержаниеДокумента.ТипДокумента = СинхронизацияЭДО.ТипДокументаПоЗначениюСервиса(ПараметрыДокумента.ТипДокумента);
	СодержаниеДокумента.ТипРегламента = ТипРегламентаПоЗначениюСервиса(ПараметрыДокумента.ТипРегламента);
	СодержаниеДокумента.Формат = ПараметрыДокумента.ИсходныйФормат;
	
	Возврат СодержаниеДокумента;
	
КонецФункции

// Возвращает содержание документа по данным прикладного решения.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла = описание файла документа. 
//
// Возвращаемое значение:
//  НовоеОписаниеФайлаДокумента, Неопределено - содержание файла.
Функция СодержаниеДокументаПоДаннымПрикладногоРешения(ОписаниеФайла)
	
	ПараметрыПолучения = НовыеПараметрыПолученияДанныхДокумента();
	ПараметрыПолучения.ОсновнойФайл = ОписаниеФайла;
	
	Файл = Новый Файл(ОписаниеФайла.ИмяФайла);
	
	СтруктураРазбора = ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(ПараметрыПолучения, Файл.Расширение);
	
	Если Не ЗначениеЗаполнено(СтруктураРазбора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СодержаниеДокумента = НовоеОписаниеФайлаДокумента();
	ЗаполнитьЗначенияСвойств(СодержаниеДокумента, СтруктураРазбора.Содержание);
	
	Возврат СодержаниеДокумента;
	
КонецФункции

Функция ТипРегламентаПоЗначениюСервиса(Значение)
	
	ТипРегламента = Перечисления.ТипыРегламентовЭДО.ПустаяСсылка();
	
	Если Значение = "Неформализованный" Тогда
		ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	ИначеЕсли Значение = "Формализованный" Тогда
		ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный;
	ИначеЕсли Значение = "УПД" Тогда
		ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД;
	ИначеЕсли Значение = "ФормализованныйАктСверки" Тогда
		ТипРегламента = Перечисления.ТипыРегламентовЭДО.ФормализованныйАктСверки;
	КонецЕсли;
	
	Возврат ТипРегламента;
	
КонецФункции

#КонецОбласти

Функция НовоеОписаниеУчастникаЭДО() Экспорт
	
	ОписаниеУчастника = Новый Структура;
	ОписаниеУчастника.Вставить("Наименование", "");
	ОписаниеУчастника.Вставить("ИНН", ""); 
	ОписаниеУчастника.Вставить("КПП", ""); 
	
	Возврат ОписаниеУчастника;
	
КонецФункции

// Возвращает данные электронного документа
//
// Параметры:
// 	ПараметрыПолученияДанных - см. НовыеПараметрыПолученияДанныхДокумента
// 	
// Возвращаемое значение:
//  - Неопределено
//  - Структура Из КлючИЗначение:
//  * ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  * НовыйЭД - СтрокаДереваЗначений
//  * Содержание - Неопределено
//
Функция ДанныеЭлектронногоДокументаОсновныхТипов(ПараметрыПолученияДанных)

	Если Не ЗначениеЗаполнено(ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОписаниеОшибки      = "";
	ПространствоИменФНС = Неопределено;
	ИмяКорневогоУзла    = ""; // для идентификации файла с реквизитами организации

	ДеревоРазбора = ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора();
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если ЗначениеЗаполнено(ПараметрыПолученияДанных.Направление) Тогда
		НовыйЭД.НаправлениеЭД = ПараметрыПолученияДанных.Направление;
	Иначе
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыПолученияДанных.ДополнительныйФайл.ДвоичныеДанные) Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ПараметрыПолученияДанных.ДополнительныйФайл);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
		
	ДанныеФайлаЭД = ДанныеФайлаЭД(ПараметрыПолученияДанных.ОсновнойФайл, ОписаниеОшибки, ПространствоИменФНС, ИмяКорневогоУзла, Истина);
	
	Если ТипЗнч(ДанныеФайлаЭД) = Тип("Структура") Тогда
		Вложения      = ДанныеФайлаЭД.ПрисоединенныеФайлы;
		ВложенияHTML  = ДанныеФайлаЭД.ПрисоединенныеФайлыHTML;
		ДанныеФайлаЭД = ДанныеФайлаЭД.ДанныеДокумента;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОшибкаРазбора = Истина;
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРазбора = Новый Структура;
	ДанныеРазбора.Вставить("ДеревоРазбора"            , ДеревоРазбора);
	ДанныеРазбора.Вставить("СсылкиНаОбъектыПоИндексам", Новый Соответствие);
	
				
	// Блок для форматов ФНС.
	Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда //чтение файлов без namespace по форматам ФНС
		
		МодульПодсистемыОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульПодсистемыОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		КонецЕсли;
		
		Если МодульПодсистемыОбменСГИСЭПД <> Неопределено
			И МодульПодсистемыОбменСГИСЭПД.ЭтоТитулЭПД(ДанныеФайлаЭД.ИдФайл) Тогда
				МодульПодсистемыОбменСГИСЭПД.ПрочитатьТитулЭПД(ДанныеФайлаЭД, ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные, НовыйЭД);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПродавцаXDTO_5_01(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_SCHFDOPPR_1_995_01_05_01";
					
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NSCHFDOPPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПродавцаXDTO_2019(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_NSCHFDOPPR_1_997_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_SCHFDOPPOK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПокупателяXDTO_5_01(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_SCHFDOPPR_1_995_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NSCHFDOPPOK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПокупателяXDTO_2019(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_NSCHFDOPPR_1_997_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПродавцаУКДXDTO_5_02(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01";
				
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_KORSCHFDOPPOK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПокупателяУКДXDTO_5_02(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NKORSCHFDOPPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПродавцаУКДXDTO_2020(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_NKORSCHFDOPPOK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПокупателяУКДXDTO_2020(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_NKORSCHFDOPPR_1_996_03_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьСчетФактуруXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_SFAKT_1_897_01_05_02";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьКорректировочныйСчетФактуруXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_KORSFAKT_1_911_01_05_02";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьТОРГ12XDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_OTORG12_1_986_00_05_01";
	
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "PTORG12") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьТОРГ12ПокупательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_OTORG12_1_986_00_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьАкт501XDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_IAKTPRM_1_987_00_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ZAKTPRM") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьАкт501ЗаказчикXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_IAKTPRM_1_987_00_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьКорректировочныйДокументXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "OKORDOC";
				
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "PKORDOC") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьКорректировочныйДокументПолучательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "PKORDOC";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_IZVPOL") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИзвещениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_IZVPOL";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_UVUTOCH") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьУточнениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_PRANNUL") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПредложениеОбАннулированииXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПодтверждениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПодтверждениеДатыОтправкиXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПодтверждениеДатыПолученияXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "POD") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПодтверждениеXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПередачаТоваровПродавецXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_TOVTORGPR_1_992_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПередачаТоваровПокупательXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_TOVTORGPR_1_992_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПередачаРаботИсполнительXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_REZRUISP_1_990_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUZAK") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьПередачаРаботЗаказчикXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_REZRUISP_1_990_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "DP_PRIRASXPRIN") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьАктОРасхожденияхXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "DP_PRIRASXPRIN_1_994_01_05_01";
			
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_AKTSVEROTP") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюОтправителяАктСверкиВзаиморасчетовXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_AKTSVEROTP_1_972_01_05_01_01";
	
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_AKTSVERPOL") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьИнформациюПолучателяАктСверкиВзаиморасчетовXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_AKTSVERPOL_1_972_02_05_01_01";
		ИначеЕсли СтрНайти(ДанныеФайлаЭД.ИдФайл, "ON_CHETOP") > 0 Тогда
			ФорматыЭДО_ФНС.ПрочитатьСчетНаОплату101XDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
			НовыйЭД.ВерсияФормата = "ON_CHETOP_1_998_01_01_01";
		Иначе
			Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ДанныеФайлаЭД.ИдФайл);
			Если Обработка <> Неопределено Тогда
				Попытка
					Обработка.ПрочитатьФайлОбмена(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора);
				Исключение
					ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
					Шаблон = НСтр(
						"ru = 'Обработка %1, не удалось прочитать файл обмена, по причине:
						|%2'");
					ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
					ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
						УровеньЖурналаРегистрации.Ошибка);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		// Помещаем в шапку имя пространства имен, чтобы по нему формировать ответный титул.
		Если Не ПространствоИменФНС = Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПространствоИмен", ПространствоИменФНС);
		КонецЕсли;
		
	КонецЕсли;
		
	ВерсияФорматаМЧД = МашиночитаемыеДоверенности.ВерсияФорматаОбъектаМЧД(ДанныеФайлаЭД);
	Если Не ПустаяСтрока(ВерсияФорматаМЧД) Тогда
		МашиночитаемыеДоверенности.ПрочитатьМЧД(ДанныеФайлаЭД, НовыйЭД);
		НовыйЭД.ВерсияФормата = ВерсияФорматаМЧД;
	КонецЕсли;
	
	// Блок для формата 2.08
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ") <> Неопределено Тогда //CML_2_08
		
		ЭДокумент = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ");
		Если ВРег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДокумент, "ХозОперация")) = ВРег(НСтр("ru = 'Отчет о продажах комиссионного товара'")) Тогда
			
			ФорматыЭДО_CML.ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭДокумент, ДанныеРазбора, НовыйЭД, ОшибкаРазбора); 
			
		ИначеЕсли ВРег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДокумент, "ХозОперация")) = ВРег(НСтр("ru = 'Отчет о списании комиссионного товара'")) Тогда
			ФорматыЭДО_CML.ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭДокумент, ДанныеРазбора, НовыйЭД, ОшибкаРазбора); 
	
		ИначеЕсли ВРег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДокумент, "ХозОперация")) = ВРег(НСтр("ru = 'Счет на оплату'")) Тогда
			ФорматыЭДО_CML.ПрочитатьСчетНаОплатуXDTO(ЭДокумент, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли ВРег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДокумент, "ХозОперация")) = ВРег(НСтр("ru = 'Заказ товара'")) Тогда
			ФорматыЭДО_CML.ПрочитатьЗаказXDTO(ЭДокумент, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
			
		ИначеЕсли ВРег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДокумент, "ХозОперация")) = ВРег(НСтр("ru = 'Передача прав'")) Тогда
			ФорматыЭДО_CML.ПрочитатьАктНаПередачуПравXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
					
		КонецЕсли;
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "ПакетПредложений") <> Неопределено Тогда
		ФорматыЭДО_CML.ПрочитатьПрайсXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Каталог") <> Неопределено Тогда
		ФорматыЭДО_CML.ПрочитатьКаталогXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
	ИначеЕсли ИмяКорневогоУзла = "Контрагент" Тогда
		ФорматыЭДО_CML.ПрочитатьРеквизитыОрганизацииXDTO(ДанныеФайлаЭД, ДанныеРазбора, НовыйЭД, ОшибкаРазбора);
	КонецЕсли;
	
	// Формат BN Commerce Offering
	ПространствоИменBNCommerceOffering = ПространствоИменBNCommerceOffering();
	ТипCommerceOfferRequest = ПолучитьТипЗначенияCML("CommerceOfferRequest", ПространствоИменBNCommerceOffering);
	ТипCommerceOffer        = ПолучитьТипЗначенияCML("CommerceOffer", ПространствоИменBNCommerceOffering);
	
	Если ДанныеФайлаЭД.Тип() = ТипCommerceOfferRequest Тогда
		ФорматыЭДОСобытия.ПрочитатьЗапросКоммерческихПредложений(ДанныеФайлаЭД, Вложения, НовыйЭД);
	ИначеЕсли ДанныеФайлаЭД.Тип() = ТипCommerceOffer Тогда
		ФорматыЭДОСобытия.ПрочитатьКоммерческоеПредложение(ДанныеФайлаЭД, Вложения, ВложенияHTML, НовыйЭД);
	КонецЕсли;
	
	Если ДанныеФайлаЭД.Свойства().Получить("contract") <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПрочитатьКонтракт(ДанныеФайлаЭД, НовыйЭД);	
	КонецЕсли;
	
	Если ДанныеФайлаЭД.Свойства().Получить("ИдПрилож") <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПрочитатьПриложение(ДанныеФайлаЭД, НовыйЭД);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭД.ВидЭД) Тогда
		ОшибкаРазбора = Истина;
		Возврат Неопределено;
	Иначе
		Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтавкаНДС"), Истина);
		Для Каждого СтрокаДерева Из Строки Цикл
			СтавкаНДС = ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(СтрокаДерева.ЗначениеРеквизита);
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтрокаДерева.ЗначениеРеквизита = СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Новый Структура("ДеревоРазбора, НовыйЭД, Содержание", ДеревоРазбора, НовыйЭД, Неопределено);
	
КонецФункции

// Возвращает параметры файла прикладного электронного документа.
//
// Параметры:
// 	ПараметрыПолученияДанных - см. НовыеПараметрыПолученияДанныхДокумента
// 	РасширениеФайла - Строка
//
// Возвращаемое значение:
//  Структура:
//    * ТипЭлектронногоДокумента         - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип
//                                         электронного документа.
//    * НаименованиеДокументаОтправителя - Строка - Наименование документа по данным отправителя.
//    * НомерДокументаОтправителя        - Строка - Номер документа по данным отправителя.
//    * ДатаДокументаОтправителя         - Дата  - Дата документа по данным отправителя.
//    * СуммаДокумента                   - Число - Сумма документа по данным отправителя 
//    * Отправитель                      - см. НовоеОписаниеУчастникаЭДО
//    * Получатель                       - см. НовоеОписаниеУчастникаЭДО
//
Функция ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(ПараметрыПолученияДанных, РасширениеФайла)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипЭлектронногоДокумента");
	Параметры.Вставить("НаименованиеДокументаОтправителя");
	Параметры.Вставить("НомерДокументаОтправителя");
	Параметры.Вставить("ДатаДокументаОтправителя");
	Параметры.Вставить("СуммаДокумента");
	Параметры.Вставить("Отправитель", НовоеОписаниеУчастникаЭДО());
	Параметры.Вставить("Получатель", НовоеОписаниеУчастникаЭДО());
	
	РасширениеБезТочки = СтрЗаменить(РасширениеФайла, ".", "");
	
	ДанныеФайла = ПараметрыПолученияДанных.ОсновнойФайл.ДвоичныеДанные;
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПараметровФайлаПрикладногоЭлектронногоДокумента(
		ДанныеФайла, РасширениеБезТочки, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Параметры.ТипЭлектронногоДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ВидЭД", Перечисления.ТипыДокументовЭДО.Прикладной);
	Параметры.Вставить("ПрикладнойВидЭД", Параметры.ТипЭлектронногоДокумента);
	
	Содержание = НовоеОписаниеФайлаДокумента();
	Содержание.НомерДокумента = Параметры.НомерДокументаОтправителя;
	Содержание.ДатаДокумента = Параметры.ДатаДокументаОтправителя;
	Содержание.СуммаДокумента = Параметры.СуммаДокумента;
	Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
	Содержание.ПрикладнойТипДокумента =  Параметры.ТипЭлектронногоДокумента;
	Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	Содержание.Отправитель = Параметры.Отправитель;
	Содержание.Получатель = Параметры.Получатель;
	
	Параметры.Вставить("Содержание",Содержание);
	
	Возврат Параметры;
	
КонецФункции

// Получает данные электронного документа.
//
// Параметры:
//  ДанныеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла - описание файла ЭД.
//  ОписаниеОшибки - Строка - описание ошибки.
//  ПространствоИменФНС - Строка - пространство имен по которому в дальнейшем может формироваться ответный титул.
//  ИмяКорневогоУзла - Строка - служит для идентификации файлов в формате BN Commerce Offering.
//  МягкоеЧтение - Булево - определяет будет ли для файлов в формате CML вырезаться пространство имен.
//
// Возвращаемое значение:
//  ОбъектXDTO.
//
Функция ДанныеФайлаЭД(ДанныеФайла, ОписаниеОшибки, ПространствоИменФНС = Неопределено, ИмяКорневогоУзла = "", МягкоеЧтение = Ложь)
	
	ДанныеФайлаЭД = Неопределено;
	ПространствоИменФайла = "";
	ДвоичныеДанныеФайла = ДанныеФайла.ДвоичныеДанные;
	
	Если НРег(Прав(ДанныеФайла.ИмяФайла, 4)) = ".zip" Тогда
		ДанныеМЧД = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ДанныеФайла);
		Если ЭтоМЧД(ДанныеМЧД) Тогда
			ДвоичныеДанныеФайла = ДанныеМЧД.ДвоичныеДанные;
		КонецЕсли;
	ИначеЕсли НРег(Прав(ДанныеФайла.ИмяФайла, 4)) = ".pdf" Тогда
		ДвоичныеДанныеФайла = Обработки.ФорматДоговорнойДокумент101.ДанныеДокументаИзФайлаОбмена(ДанныеФайла);
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при распознавании машиночитаемой части файла:
			|%1. Возможно, файл не соответствует формату.'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ДанныеФайла.ИмяФайла);
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ПотокДанныхФайла = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ЧтениеXML.ОткрытьПоток(ПотокДанныхФайла);
		
		Если ЧтениеXML.Прочитать() Тогда
			
			ИмяКорневогоУзла = ЧтениеXML.ЛокальноеИмя;
			ПространствоИменФайла = ЧтениеXML.URIПространстваИмен;
			
			// Для форматов ФНС.
			ИдФайл   = "";
			ВерсФорм = "";
			
			Если ПространствоИменФайла = ФорматыЭДО_CML.ПространствоИменCML208() И МягкоеЧтение Тогда
				// Для актуальных CML вырезаем пространство имен.
				Кодировка = ЧтениеXML.КодировкаXML;
				ЧтениеXML.Закрыть();
				УдалитьПространствоИменCML(ДвоичныеДанныеФайла, Кодировка);
				
			Иначе
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					Если ЧтениеXML.Имя = "ИдФайл" Тогда
						ИдФайл = ЧтениеXML.Значение;
						
					ИначеЕсли ЧтениеXML.Имя = "ВерсФорм" Тогда
						ВерсФорм = ЧтениеXML.Значение;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ЧтениеXML.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла:
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДанныеФайла.ИмяФайла);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ИдФайл) И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		// Чтение файлов по форматам ФНС
		
		URIПространстваИмен = "";
		
		Если Не МягкоеЧтение Тогда
			
			// Установим пространство имен для актуальных форматов, если нужно читать строго в соответствии со схемой.
			
			Если СтрНайти(ИдФайл, "ON_SCHFDOPPR") Тогда
				URIПространстваИмен = "ON_SCHFDOPPR_5_01";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_NSCHFDOPPR") Тогда
				URIПространстваИмен = "ON_NSCHFDOPPR_2019";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_SCHFDOPPOK") Тогда
				URIПространстваИмен = "ON_SCHFDOPPOK_5_01";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_NSCHFDOPPOK") Тогда
				URIПространстваИмен = "ON_NSCHFDOPPOK_2019";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_KORSCHFDOPPR") Тогда
				URIПространстваИмен = "ON_KORSCHFDOPPR";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_KORSCHFDOPPOK") Тогда
				URIПространстваИмен = "ON_KORSCHFDOPPOK";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_NKORSCHFDOPPR") Тогда
				URIПространстваИмен = "ON_NKORSCHFDOPPR_2020";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_NKORSCHFDOPPOK") Тогда
				URIПространстваИмен = "ON_NKORSCHFDOPPOK_2020";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_IZVPOL") И ВерсФорм <> "1.01" Тогда
				URIПространстваИмен = "DP_IZVPOL";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_UVUTOCH") Тогда
				
				Если ВерсФорм = "1.01" Тогда
					URIПространстваИмен = "DP_UVUTOCH_01_01";
				Иначе
					URIПространстваИмен = "DP_UVUTOCH";
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_PRANNUL") Тогда
				
				Если ВерсФорм = "1.02" Тогда
					URIПространстваИмен = "DP_PRANNUL_01_02";
				Иначе
					URIПространстваИмен = "DP_PRANNUL";
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ИдФайл, "POD_DPIZVPOL") Тогда
				URIПространстваИмен = "DP_IZVPOL";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_PDOTPR") Тогда
				URIПространстваИмен = "DP_PDOTPR";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_PDPOL") Тогда
				URIПространстваИмен = "DP_PDPOL";
				
			ИначеЕсли СтрНайти(ИдФайл, "POD") Тогда
				URIПространстваИмен = "PDO";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_TOVTORGPR") Тогда // Передача товаров продавец
				URIПространстваИмен = "TORGPR";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_TOVTORGPOK") Тогда // Передача товаров покупатель
				URIПространстваИмен = "TORGPOK";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_REZRUISP") Тогда // Передача товаров покупатель
				URIПространстваИмен = "RUISP";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_REZRUZAK") Тогда // Передача товаров покупатель
				URIПространстваИмен = "RUZAK";
				
			ИначеЕсли СтрНайти(ИдФайл, "DP_PRIRASXPRIN") Тогда
				URIПространстваИмен = "DP_PRIRASXPRIN_5_01";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_AKTSVEROTP") Тогда
				URIПространстваИмен = "ON_AKTSVEROTP_1_972_01_05_01_01";
				
			ИначеЕсли СтрНайти(ИдФайл, "ON_AKTSVERPOL") Тогда
				URIПространстваИмен = "ON_AKTSVERPOL_1_972_02_05_01_01";	
			Иначе
				Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ИдФайл);
				Если Обработка <> Неопределено Тогда
					Попытка
						URIПространстваИмен = Обработка.ПространствоИмен();
					Исключение
						ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
						Шаблон = НСтр(
							"ru = 'Обработка %1, не удалось определить пространство имен, по причине:
							|%2'");
						ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
						ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
							УровеньЖурналаРегистрации.Ошибка);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Устанавливаем пространство имен для устаревших форматов всегда.
		
		Если СтрНайти(ИДФайл, "ON_SFAKT") Тогда
			
			Если ВерсФорм = "5.01" Тогда
				URIПространстваИмен = "SFAKT";
			Иначе
				URIПространстваИмен = "SFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ИдФайл, "ON_KORSFAKT") Тогда // корректировочный счет-фактура
			
			Если ВерсФорм = "5.01" Тогда
				URIПространстваИмен = "KORSFAKT";
			Иначе
				URIПространстваИмен = "KORSFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "OKORDOC";
			
		ИначеЕсли СтрНайти(ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "PKORDOC";
			
		ИначеЕсли СтрНайти(ИдФайл, "ON_AKTSVEROTP") > 0 Тогда // Акт сверки взаиморасчетов титул отправителя
			URIПространстваИмен = "ON_AKTSVEROTP_1_972_01_05_01_01";
			
		ИначеЕсли СтрНайти(ИдФайл, "ON_AKTSVERPOL") > 0 Тогда // Акт сверки взаиморасчетов титул получателя
			URIПространстваИмен = "ON_AKTSVERPOL_1_972_02_05_01_01";	
			
		ИначеЕсли СтрНайти(ИдФайл, "ON_CHETOP") > 0 Тогда // Счет на оплату
			URIПространстваИмен = "ON_CHETOP_1_998_01_01_01";

		Иначе
			
			Форматы = Новый Массив;
			Форматы.Добавить("OTORG12"); // торг-12 титул продавца
			Форматы.Добавить("PTORG12"); // торг-12 титул покупателя
			Форматы.Добавить("IAKTPRM"); // Акт титул исполнителя
			Форматы.Добавить("ZAKTPRM"); // Акт титул заказчика
			
			Для Каждого Формат Из Форматы Цикл
				
				Если СтрНайти(ИдФайл, Формат) Тогда
					ПотокДанныхФайла.Перейти(0, ПозицияВПотоке.Начало);
					ЧтениеXML.ОткрытьПоток(ПотокДанныхФайла);
					ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
					ЧтениеXML.Закрыть();
					
					URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, Формат);
					ПространствоИменФНС = URIПространстваИмен;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(URIПространстваИмен) Тогда
			Обработка = НайтиОбработкуФорматаПоФайлуОбмена(ИдФайл);
			Если Обработка <> Неопределено Тогда
				Попытка
					URIПространстваИмен = Обработка.ПространствоИмен();
				Исключение
					ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
					Шаблон = НСтр(
						"ru = 'Менеджер %1, не удалось определить пространство имен, по причине:
						|%2'");
					ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Обработка), ОписаниеОшибки());
					ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
						УровеньЖурналаРегистрации.Ошибка);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПространствоИменФайла) И ЗначениеЗаполнено(URIПространстваИмен) Тогда
			
			ПотокДанныхФайла.Перейти(0, ПозицияВПотоке.Начало);
			ЧтениеXML.ОткрытьПоток(ПотокДанныхФайла);

			ПостроительDOM = Новый ПостроительDOM();
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
			
			ПотокЗаписи = Новый ПотокВПамяти;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьПоток(ПотокЗаписи);
			
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
			ЗаписьXML.Закрыть();
			
			ДвоичныеДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
			 
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Попытка
			
			Если ИмяКорневогоУзла = "CommerceOfferRequest"
				Или ИмяКорневогоУзла = "CommerceOffer" Тогда
				ДанныеФайлаЭД = ФорматыЭДОСобытия.ДанныеФайлаФорматаBNCommerceOffering(ДвоичныеДанныеФайла); 
			ИначеЕсли URIПространстваИмен = "ON_AKTSVEROTP_1_972_01_05_01_01"
				Или URIПространстваИмен = "ON_AKTSVERPOL_1_972_02_05_01_01"
				Или URIПространстваИмен = "ON_AKTREZRABP_1_971_01_01_00_01"
				Или URIПространстваИмен = "ON_AKTREZRABZ_1_971_02_01_00_01"
				Или URIПространстваИмен = Обработки.ФорматДоговорнойДокумент101.ПространствоИмен() Тогда
				// У корневого свойства xdto-пакетов не указан тип,
				// поэтому при чтение данных необходимо определять тип на основании самого корневого свойства.				
				Пакет = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);				
				СвойствоФайл = Пакет.КорневыеСвойства.Получить("Файл");				
				
				ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
				ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СвойствоФайл.Тип);
				
			ИначеЕсли URIПространстваИмен = "ON_CHETOP_1_998_01_01_01" Тогда	
				
				ВерсияСхемы = "4.01";
				ФайлТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл", URIПространстваИмен), ВерсияСхемы);	
				ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
				ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФайлТип);	
				
			Иначе
				ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
				ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,
					?(ЗначениеЗаполнено(URIПространстваИмен), ПолучитьТипЗначенияCML("Файл", URIПространстваИмен), Неопределено));
			КонецЕсли;
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла:
			|%1'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДанныеФайла.ИмяФайла);
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
				
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДанныеФайлаЭД;
	
КонецФункции

#Область ИнформацияОТоваре

Функция ИнформацияОТовареПроизвольногоДокумента(ДвоичныеДанныеФайла, ИсходныйФормат = Неопределено)
	
	ПотокДанныхФайла = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
	
	Если ИсходныйФормат = Неопределено Тогда
		ПараметрыФайлаXML = КонвертацияЭДО.ПреобразоватьФорматЭД(ПотокДанныхФайла);
		Если ПараметрыФайлаXML = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПараметрыФайлаXML.Свойство("ИсходныйФормат", ИсходныйФормат);
		ПотокДанныхФайла.Перейти(0, ПозицияВПотоке.Начало);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйФормат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИтоговыйФормат", "ТаблицаНоменклатуры");
	ПараметрыПреобразования.Вставить("ИсходныйФормат", ИсходныйФормат);
	
	ИнформацияОТоваре = КонвертацияЭДО.ПреобразоватьФорматЭД(ПотокДанныхФайла, ПараметрыПреобразования);
	
	Если ИнформацияОТоваре = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнитьИнформациюОТовареДаннымиДляСопоставления(ИнформацияОТоваре);
	
	ПотокДанныхФайла.Закрыть();
	
	Возврат ИнформацияОТоваре;
	
КонецФункции

Функция ИнформацияОТовареПрикладногоДокумента(ДвоичныеДанныеФайла, РасширениеФайла)
	
	ИнформацияОТоваре = НоваяТаблицаТоваров();
	
	ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииИнформацииОТовареИзФайлаПрикладногоЭлектронногоДокумента(
		ДвоичныеДанныеФайла, РасширениеФайла, ИнформацияОТоваре);
	
	Если ИнформацияОТоваре.Количество() Тогда
		ДополнитьИнформациюОТовареДаннымиДляСопоставления(ИнформацияОТоваре);
		Возврат ИнформацияОТоваре;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура НоменклатураАктаОРасхождениях(Знач Объект, ТаблицаНоменклатуры)
	
	ТаблицаНоменклатуры = НоваяТаблицаТоваров();
	
	НоменклатураАктаОРасхождениях_5_01(Объект, ТаблицаНоменклатуры);
	
КонецПроцедуры

Процедура НоменклатураАктаОРасхождениях_5_01(Знач Объект, ТаблицаНоменклатуры)
	
	РезПрием = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Документ.СодФХЖ2.РезПрием",,, Истина);
	
	Если РезПрием = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПриемки Из РезПрием Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.НаимТов",, "Строка");
		НоваяСтрока.НаименованиеХарактеристики = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.ХарактТов",, "Строка");
		НоваяСтрока.КодТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.КодТов",, "Строка");
		НоваяСтрока.Артикул = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.АртикулТов",, "Строка");
		НоваяСтрока.БазоваяЕдиницаКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ОКЕИ_Тов",, "Строка");
		НоваяСтрока.БазоваяЕдиницаНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "НаимЕдИзм",, "Строка");
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное = НоваяСтрока.БазоваяЕдиницаНаименование;
		
		ИнфПолРезПрием = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ИнфПолРезПрием",,, Истина);
		ДополнительныеДанные = ПрочитатьАктОРасхожденияхТекстИнфТип(ИнфПолРезПрием);
		
		Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
		ДлинаПрефикса = СтрДлина(Префикс);
		Сопоставление = Новый Структура;
		Для Каждого Элемент Из ДополнительныеДанные Цикл
			Если Лев(Элемент.Ключ, ДлинаПрефикса) = Префикс Тогда
				Ключ = Сред(Элемент.Ключ, ДлинаПрефикса + 1);
				Сопоставление.Вставить(Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(Сопоставление) Тогда
			НоваяСтрока.Сопоставление = Сопоставление;
		КонецЕсли;
		Если Сопоставление.Свойство("Идентификатор") Тогда
			НоваяСтрока.ИД = Сопоставление.Идентификатор;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИД) Тогда
			СопоставлениеПоУмолчанию = НовыеДанныеДляСопоставленияТоваровПоДаннымНоменклатуры(
				"", НоваяСтрока.Наименование, НоваяСтрока.НаименованиеХарактеристики, НоваяСтрока.БазоваяЕдиницаНаименование);
			НоваяСтрока.ИД = СопоставлениеПоУмолчанию.Идентификатор;
			
			СтарыйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(НоваяСтрока.Наименование + "###");
			НоваяСтрока.ИсторияИдентификаторов = Новый Массив;
			НоваяСтрока.ИсторияИдентификаторов.Добавить(СтарыйИД);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьИнформациюОТовареДаннымиДляСопоставления(ТаблицаНоменклатуры, Ложь, Ложь);
	
КонецПроцедуры

Функция ПрочитатьАктОРасхожденияхТекстИнфТип(Знач ТекстИнф)
	
	Результат = Новый Соответствие;
	
	Если ТекстИнф = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементТекстИнф Из ТекстИнф Цикл
		
		Результат.Вставить(ЭлементТекстИнф.Идентиф, ЭлементТекстИнф.Значен);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВидСчетаФактурыПоОбъектуXDTO(Знач Объект)
	
	ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф",,, Истина);
	Если ТекстИнф = Неопределено Тогда
		Возврат "Реализация";
	КонецЕсли;
	
	Для каждого Информация Из ТекстИнф Цикл
		
		Если ВРег(Информация.Идентиф) = Врег("ВидСчетаФактуры") Тогда
			Возврат Информация.Значен;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "Реализация";
	
КонецФункции

// Формирует таблицу номенклатуры, работ, услуг и их характеристик и свойств по данным электронного документа 
// 
// Параметры:
//  ТЗ - см. НоваяТаблицаТоваров - Таблица значений, содержит результат вызова
//  НаборДанных - ОбъектXDTO - Источник данных
//  ДопПараметры - Структура -  с полями:
//   * ДеревоДопДанных - см. ДеревоДопДанных - Дерево содержащее дополнительные данные;
//   * ИмяТЧ - Строка - Имя табличной части для чтения доп данных;
//   * НомерСтроки - Число - Номер строки для чтения доп данных;
//   * ЕстьСвойствоИдФайл - Булево - Признак наличия ИдФайл в источнике данных;
//   * ИменаДопКолонок - Строка - Имена колонок через запятую;
//   * ВидСчетаФактуры - Строка - Признак авансовой счет фактору, проверяется только значение "Авансовый";
//   * ВерсПрог - Строка - Версия программы для для сравнения с реквизитом Файл.ВерсПрог;
//   * ЭтоГосЗакКазн - Булево - Признак государственного заказа.
Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, ДопПараметры = Неопределено) 
	
	ДеревоДопДанных = Неопределено;
	ЕстьСвойствоИдФайл = Ложь;
	ИмяТЧ = Неопределено;
	НомерСтроки = Неопределено;
	ИменаДопКолонок = "";
	ЭтоСчетФактураНаАванс = Ложь;
	ВерсПрог = "";
	ВерсПрог1С = "1С:Предприятие 8";
	ЭтоГосЗакКазн = Ложь;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда 
		
		ДопПараметры.Свойство("ДеревоДопДанных", ДеревоДопДанных);
		ДопПараметры.Свойство("ИмяТЧ",           ИмяТЧ);
		ДопПараметры.Свойство("НомерСтроки",     НомерСтроки);
		
		Если ДопПараметры.Свойство("ЕстьСвойствоИдФайл") Тогда 
			ЕстьСвойствоИдФайл = ДопПараметры.ЕстьСвойствоИдФайл;
		КонецЕсли;
		Если ДопПараметры.Свойство("ИменаДопКолонок") Тогда 
			ИменаДопКолонок = ДопПараметры.ИменаДопКолонок;
		КонецЕсли;
		Если ДопПараметры.Свойство("ВидСчетаФактуры") Тогда
			ЭтоСчетФактураНаАванс = (ВРег(ДопПараметры.ВидСчетаФактуры) = ВРег("Авансовый"));
		КонецЕсли;
		Если ДопПараметры.Свойство("ВерсПрог") Тогда
			ВерсПрог = ДопПараметры.ВерсПрог;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ЭтоГосЗакКазн") Тогда
			ЭтоГосЗакКазн = ДопПараметры.ЭтоГосЗакКазн;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ = НоваяТаблицаТоваров();
	
	СвойстваНоменклатурыЭталон = Новый Структура;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		СвойстваНоменклатурыЭталон.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	СодержитИзменяемыеДанные = Ложь;
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		
		СвойстваНоменклатуры = ОбщегоНазначения.СкопироватьРекурсивно(СвойстваНоменклатурыЭталон);
		
		ДопСведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекЭлемент, "ДопСведТов");
		Если ДопСведТов <> Неопределено Тогда
			ПрТовРаб = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "ПрТовРаб",, "Строка");
			Если ПрТовРаб = "2" ИЛИ ПрТовРаб = "3" Тогда // Это работа или услуга.
				СодержитИзменяемыеДанные = Истина;
			КонецЕсли;
			СвойстваНоменклатуры.ТипНоменклатурыФНС = ТипНоменклатурыФНС(ПрТовРаб);
			НаимЕдИзм = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "НаимЕдИзм",, "Строка");
			Если ЗначениеЗаполнено(НаимЕдИзм) Тогда
				СвойстваНоменклатуры.БазоваяЕдиницаНаименование = НаимЕдИзм;
			КонецЕсли;
			ХарактерТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "ХарактерТов",, "Строка");
			Если ЗначениеЗаполнено(ХарактерТов) Тогда
				СвойстваНоменклатуры.НаименованиеХарактеристики = ХарактерТов;
			КонецЕсли;
			АртикулТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "АртикулТов",, "Строка");
			Если ЗначениеЗаполнено(АртикулТов) Тогда
				СвойстваНоменклатуры.Артикул = АртикулТов;
			КонецЕсли;
			КодТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КодТов",, "Строка");
			Если ЭтоГосЗакКазн Тогда
				СвойстваНоменклатуры.КодПоКТРУ = КодТов;
			Иначе
				СвойстваНоменклатуры.КодТовара = КодТов;
			КонецЕсли;
			СвойстваНоменклатуры.КодТНВЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КодВидТов",, "Строка");
			СведПрослеж = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "СведПрослеж");
			СвойстваНоменклатуры.ПрослеживаемыйТовар = (СведПрослеж <> Неопределено);
			НомСредИдентТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "НомСредИдентТов");
			СвойстваНоменклатуры.МаркируемыйТовар = (НомСредИдентТов <> Неопределено);
		КонецЕсли;
		
		СвТД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекЭлемент, "СвТД");
		Если СвТД <> Неопределено Тогда
			СвойстваНоменклатуры.СтранаПроисхожденияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СвТД,
				"КодПроисх", , "Строка");
		КонецЕсли;
		
		Элемент = ТекЭлемент;
		НаименованиеРаботыДопДанные = "";
		Если ЕстьСвойствоИдФайл
			И ЕстьСвойствоXDTO(ТекЭлемент, "ИнфПолСтр")
			И (ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) ИЛИ Не ДеревоДопДанных = Неопределено) Тогда
			
			Если СтрНайти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				СвойстваТекЭлемента = ТекЭлемент.Свойства();
				Если СвойстваТекЭлемента.Получить("НомТов") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомТов);
				ИначеЕсли СвойстваТекЭлемента.Получить("НомСтр") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомСтр);
				ИначеЕсли СвойстваТекЭлемента.Получить("Номер") <> Неопределено Тогда
					НомСтр = Строка(НомерСтроки) + "." + ТекЭлемент.Номер;
				Иначе
					Продолжить;
				КонецЕсли;
				
				// Зачитаем параметры строки ТЧ из доп. данных.
				ПрочитатьИнфПол(ТекЭлемент.ИнфПолСтр, ДеревоДопДанных, ИмяТЧ, НомСтр);
				Если ДеревоДопДанных <> Неопределено И ДеревоДопДанных.Строки.Количество() > 0 Тогда
					СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
					СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
					Если СтрокиДерева.Количество() > 0 Тогда
						СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомСтр);
						СтрокиДерева = СтрокиДерева[0].Строки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиДерева.Количество() > 0 Тогда
							СтрокаВладелец = СтрокиДерева[0];
							СтрокаИД = СтрокаВладелец.Строки.Найти("ИД", "ИмяРеквизита");
							СтрокаБЕНаименованиеПолное  = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеПолное"     , "ИмяРеквизита");
							СтрокаБЕНаименованиеКраткое = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеКраткое"    , "ИмяРеквизита");
							СтрокаБЕМСокращение         = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаМеждународноеСокращение", "ИмяРеквизита");
							СтрокаБЕНаименование        = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименование"           , "ИмяРеквизита");
							СтрокаБЕКод                 = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаКод"                    , "ИмяРеквизита");
							Если СтрокаИД <> Неопределено Тогда
								СвойстваНоменклатуры.ИД = СтрокаИД.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеПолное <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаНаименованиеПолное = СтрокаБЕНаименованиеПолное.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеКраткое <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаНаименованиеКраткое = СтрокаБЕНаименованиеКраткое.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕМСокращение <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаМеждународноеСокращение = СтрокаБЕМСокращение.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименование <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаНаименование = СтрокаБЕНаименование.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕКод <> Неопределено Тогда
								СвойстваНоменклатуры.БазоваяЕдиницаКод = СтрокаБЕКод.ЗначениеРеквизита;
							КонецЕсли;
							// В некоторых случаях наименование работы может передаваться через доп данные.
							СтрокаНаименованиеРаботы = СтрокаВладелец.Строки.Найти("Наименование", "ИмяРеквизита");
							Если Не СтрокаНаименованиеРаботы = Неопределено Тогда
								 НаименованиеРаботыДопДанные = СтрокаНаименованиеРаботы.ЗначениеРеквизита;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимРабот;
			
			Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование)
				И НЕ ТекЭлемент.Свойства().Получить("Описание") = Неопределено Тогда
				СвойстваНоменклатуры.Наименование = ТекЭлемент.Описание;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование) Тогда
			СвойстваНоменклатуры.Наименование = НаименованиеРаботыДопДанные;
		КонецЕсли;
		
		НовЗапись = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СвойстваНоменклатуры);
		
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		
		ИнфПолФХЖ2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИнфПолФХЖ2",,, Истина);
		Если ИнфПолФХЖ2 <> Неопределено Тогда
			Если ВерсПрог = ВерсПрог1С Тогда
				НовЗапись.ИД = ЗначениеДопРеквизита(ИнфПолФХЖ2, "ИД");
			КонецЕсли;
			Сопоставление = Новый Структура;
			Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
			ДлинаПрефикса = СтрДлина(Префикс);
			Для Каждого ДопИнформация Из ИнфПолФХЖ2 Цикл
				// В пространстве имен "ON_CHETOP_1_998_01_01_01" тип "ИнфПолТип"
				// содержит доп. реквизиты в списке элементов "ТекстИнф" типа "ТекстИнфТип".
				ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопИнформация, "ТекстИнф",,, Истина);
				Если ТекстИнф <> Неопределено Тогда 
					Для Каждого ЭлементСписка Из ТекстИнф Цикл
						Если Лев(ЭлементСписка.Идентиф, ДлинаПрефикса) = Префикс Тогда
							ИмяСвойства = Сред(ЭлементСписка.Идентиф, ДлинаПрефикса + 1);
							Сопоставление.Вставить(ИмяСвойства, ЭлементСписка.Значение);
						КонецЕсли;
					КонецЦикла;
				Иначе	
				    Если Лев(ДопИнформация.Идентиф, ДлинаПрефикса) = Префикс Тогда
						ИмяСвойства = Сред(ДопИнформация.Идентиф, ДлинаПрефикса + 1);
						Сопоставление.Вставить(ИмяСвойства, ДопИнформация.Значен);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Сопоставление) Тогда
				НовЗапись.Сопоставление = Сопоставление;
			КонецЕсли;
		КонецЕсли;
		
		ОписанияРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИнфПолеОписРабот",,, Истина);
		Если ОписанияРабот <> Неопределено И ВерсПрог = ВерсПрог1С Тогда 
			НовЗапись.ИД = ЗначениеДопРеквизита(ОписанияРабот, "ИД");
		КонецЕсли;
		
		// В CML документах Ид товара передается через доп данные, которые находятся в значении реквизитов.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			Ид = ЗначениеСвойстваДопДанныхСтроки(Элемент, "Ид");
			НовЗапись.ИД = Ид;
		КонецЕсли;                                         
	
		Если НЕ ТекЭлемент.Свойства().Получить("КодТов") = Неопределено Тогда
			НовЗапись.КодТовара = ТекЭлемент.КодТов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовЗапись.КодТовара) Тогда
			ДопСведТовКодТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекЭлемент, "ДопСведТов.КодТов",, "Строка");
			Если ЗначениеЗаполнено(ДопСведТовКодТовара) Тогда
				НовЗапись.КодТовара = ДопСведТовКодТовара;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекЭлемент.Свойства().Получить("ХарактерТов") = Неопределено Тогда
			НовЗапись.НаименованиеХарактеристики = ТекЭлемент.ХарактерТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИТов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_ТовДо") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_ТовДо;
		КонецЕсли;	
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзмДо") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзмДо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовЗапись.БазоваяЕдиницаНаименование) Тогда
			БазоваяЕдиницаНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекЭлемент, "ДопСведТов.НаимЕдИзмДо",, "Строка");
			Если ЗначениеЗаполнено(БазоваяЕдиницаНаименование) Тогда
				НовЗапись.БазоваяЕдиницаНаименование = БазоваяЕдиницаНаименование;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеКраткое") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеКраткое = Элемент.БазоваяЕдиница.НаименованиеКраткое;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовЗапись.Артикул) Тогда
			ДопСведТовАртикул = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекЭлемент, "ДопСведТов.АртикулТовара",, "Строка");
			Если ЗначениеЗаполнено(ДопСведТовАртикул) Тогда
				НовЗапись.Артикул = ДопСведТовАртикул;
			КонецЕсли;
		КонецЕсли;
				
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("НалСт") = Неопределено Тогда
			НовЗапись.СтавкаНДС = Элемент.НалСт;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("СтавкаНДС") <> Неопределено Тогда
			Если ТипЗнч(Элемент.СтавкаНДС) = Тип("Число") Тогда
				НовЗапись.СтавкаНДС = Формат(Элемент.СтавкаНДС, "ЧГ=0");
			Иначе
				НовЗапись.СтавкаНДС = Строка(Элемент.СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Штрихкод") = Неопределено Тогда
			НовЗапись.Штрихкод = Элемент.Штрихкод;
		КонецЕсли;
		
		ДополнительныеРеквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ДополнительныеРеквизиты",,, Истина);
		Если ДополнительныеРеквизиты <> Неопределено Тогда
			Для Каждого ЭлементДанных Из ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОбщегоНазначения.ОписаниеТипаСтрока(300));
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		НаборЗначенийРеквизитов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина);
		Если НаборЗначенийРеквизитов <> Неопределено
			И НовЗапись.Сопоставление = Неопределено Тогда
			
			Сопоставление = Новый Структура;
			Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
			ДлинаПрефикса = СтрДлина(Префикс);
			Для Каждого ЗначениеРеквизита Из НаборЗначенийРеквизитов Цикл
				Если Лев(ЗначениеРеквизита.Наименование, ДлинаПрефикса) = Префикс Тогда
					ИмяСвойства = Сред(ЗначениеРеквизита.Наименование, ДлинаПрефикса + 1);
					Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Массив") ИЛИ ТипЗнч(ЗначениеРеквизита.Значение) = Тип("СписокXDTO") Тогда
						Сопоставление.Вставить(ИмяСвойства, ЗначениеРеквизита.Значение[0]);
					Иначе
						Сопоставление.Вставить(ИмяСвойства, ЗначениеРеквизита.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Сопоставление) Тогда
				НовЗапись.Сопоставление = Сопоставление;
			КонецЕсли;
			
		КонецЕсли;
		
		ОписанияРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИнфПолеОписРабот",,, Истина);
		Если ОписанияРабот <> Неопределено
			И НовЗапись.Сопоставление = Неопределено Тогда
			
			Сопоставление = Новый Структура;
			Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
			ДлинаПрефикса = СтрДлина(Префикс);
			Для Каждого ДопДанные Из ОписанияРабот Цикл
				Если Лев(ДопДанные.Идентиф, ДлинаПрефикса) = Префикс Тогда
					ИмяСвойства = Сред(ДопДанные.Идентиф, ДлинаПрефикса + 1);
					Сопоставление.Вставить(ИмяСвойства, ДопДанные.Значен);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Сопоставление) Тогда
				НовЗапись.Сопоставление = Сопоставление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("product") <> Неопределено
			И НовЗапись.Сопоставление = Неопределено Тогда
			
			ФорматыЭДОСобытия.ЗаполнитьДанныеНоменклатурыДляСопоставленияКоммерческихПредложений(Элемент, НовЗапись);
			
		КонецЕсли;
		
		// По услугам может быть заполнено описание, но не заполнено наименование. В этом случае будем
		// использовать описание как наименование.
		Если Не ЗначениеЗаполнено(НовЗапись.Наименование) И ЗначениеЗаполнено(НовЗапись.Описание) Тогда
			НовЗапись.Наименование = НовЗапись.Описание;
		КонецЕсли;
		
		Для каждого КлючЗначение Из СвойстваНоменклатуры Цикл
			
			ЗначениеСвойства = КлючЗначение.Значение;
			ЗначениеЗаписи = НовЗапись[КлючЗначение.Ключ];
			Если Не ЗначениеЗаполнено(ЗначениеСвойства)
				И ЗначениеЗаполнено(ЗначениеЗаписи) Тогда
				
				СвойстваНоменклатуры[КлючЗначение.Ключ] = ЗначениеЗаписи;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если пришел пустой ИД, используем вместо него наименование товара.
		// Актуально для входящих ЭД из учетных систем отличных от 1С.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			СопоставлениеПоУмолчанию = НовыеДанныеДляСопоставленияТоваровПоДаннымНоменклатуры(
				"", СвойстваНоменклатуры.Наименование, СвойстваНоменклатуры.НаименованиеХарактеристики, СвойстваНоменклатуры.БазоваяЕдиницаНаименование);
			НовЗапись.ИД = СопоставлениеПоУмолчанию.Идентификатор;
			
			СтарыйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(ВРег(СтрЗаменить(НовЗапись.Наименование, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(НовЗапись.НаименованиеХарактеристики, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(НовЗапись.КодТовара, " ", ""))
																					+ "#" + ВРег(СтрЗаменить(НовЗапись.Артикул, " ", "")));;
			НовЗапись.ИсторияИдентификаторов = Новый Массив;
			НовЗапись.ИсторияИдентификаторов.Добавить(СтарыйИД);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьИнформациюОТовареДаннымиДляСопоставления(ТЗ, ЭтоСчетФактураНаАванс, СодержитИзменяемыеДанные);
	
	// Удаляем переносы строки из идентификатора.
	Для Каждого СтрокаТовара Из ТЗ Цикл
		Если СтрокаТовара.Сопоставление = Неопределено
			Или Не СтрокаТовара.Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТовара.Сопоставление.Идентификатор = СтрЗаменить(СтрокаТовара.Сопоставление.Идентификатор, Символы.ПС, "");
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в информацию о товаре данные для сопоставления номенклатуры, 
// формирую их из других полей. Исключение счета-фактуры на аванс, 
// для которых данные сопоставления автоматически не заполняются.
//
// Параметры:
//  ИнформацияОТоваре - ТаблицаЗначений - информация о товарах, в которую нужно добавить данные для сопоставления.
//  ЭтоСчетФактураНаАванс - Булево - признак того, что информация о товарах получена из счета-фактуры на аванс.
//  СодержитИзменяемыеДанные - Булево - признак того, что свойства номенклатуры могут изменяться с сохранением идентификатора.
//
Процедура ДополнитьИнформациюОТовареДаннымиДляСопоставления(ИнформацияОТоваре, ЭтоСчетФактураНаАванс = Ложь, СодержитИзменяемыеДанные = Ложь) Экспорт
	
	ПустаяТаблицаНоменклатуры = НоваяТаблицаТоваров();
	Для Каждого Колонка Из ПустаяТаблицаНоменклатуры.Колонки Цикл
		Если ИнформацияОТоваре.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ИнформацияОТоваре.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоСчетФактураНаАванс Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаСтавкаНДС = (ИнформацияОТоваре.Колонки.Найти("СтавкаНДС") <> Неопределено);
	ЕстьКолонкаБазоваяЕдиницаНаименованиеКраткое =
		(ИнформацияОТоваре.Колонки.Найти("БазоваяЕдиницаНаименованиеКраткое") <> Неопределено);
	ЕстьКолонкаБазоваяЕдиницаНаименованиеПолное =
		(ИнформацияОТоваре.Колонки.Найти("БазоваяЕдиницаНаименованиеПолное") <> Неопределено);
	
	Для Каждого СтрокаТовара Из ИнформацияОТоваре Цикл
		
		Сопоставление = НовыеДанныеДляСопоставленияТоваров();
		ЗаполнитьЗначенияСвойств(Сопоставление, СтрокаТовара);
		Сопоставление.Идентификатор               = СтрокаТовара.ИД;
		Сопоставление.Характеристика              = СтрокаТовара.НаименованиеХарактеристики;
		
		Сопоставление.ЕдиницаИзмерения            = СтрокаТовара.БазоваяЕдиницаНаименование;
		Если ПустаяСтрока(Сопоставление.ЕдиницаИзмерения)
			И ЕстьКолонкаБазоваяЕдиницаНаименованиеКраткое
			И Не ПустаяСтрока(СтрокаТовара.БазоваяЕдиницаНаименованиеКраткое) Тогда
			Сопоставление.ЕдиницаИзмерения = СтрокаТовара.БазоваяЕдиницаНаименованиеКраткое;
		ИначеЕсли ПустаяСтрока(Сопоставление.ЕдиницаИзмерения)
			И ЕстьКолонкаБазоваяЕдиницаНаименованиеПолное
			И Не ПустаяСтрока(СтрокаТовара.БазоваяЕдиницаНаименованиеПолное) Тогда
			Сопоставление.ЕдиницаИзмерения = СтрокаТовара.БазоваяЕдиницаНаименованиеПолное;
		КонецЕсли;
		Сопоставление.ЕдиницаИзмеренияКод         = СтрокаТовара.БазоваяЕдиницаКод;
		
		Если ЕстьКолонкаСтавкаНДС Тогда
			Сопоставление.СтавкаНДС = СтрокаТовара.СтавкаНДС;
		КонецЕсли;
		Сопоставление.СодержитИзменяемыеДанные    = СодержитИзменяемыеДанные;
		Если ЗначениеЗаполнено(СтрокаТовара.ИсторияИдентификаторов) Тогда
			Сопоставление.ИсторияИдентификаторов = СтрокаТовара.ИсторияИдентификаторов;
		КонецЕсли;
		Сопоставление.ШтрихкодКомбинации          = СтрокаТовара.Штрихкод;
		Сопоставление.ШтрихкодыНоменклатуры       = СтрокаТовара.Штрихкод;
		
		Сопоставление.КодНоменклатуры = СтрокаТовара.КодТовара;
		
		Если СтрокаТовара.Сопоставление = Неопределено Тогда
			СтрокаТовара.Сопоставление = Сопоставление;
		ИначеЕсли Не СтрокаТовара.Сопоставление.Свойство("Идентификатор")
			Или Не СтрокаТовара.Сопоставление.Свойство("Наименование") Тогда
			
			Для каждого КлючЗначение Из СтрокаТовара.Сопоставление Цикл
				Сопоставление.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			СтрокаТовара.Сопоставление = Сопоставление;
		
		Иначе
			Для каждого КлючЗначение Из Сопоставление Цикл
				ЗначениеСопоставления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТовара.Сопоставление,
					КлючЗначение.Ключ);
				Если Не ЗначениеЗаполнено(ЗначениеСопоставления) Тогда
					СтрокаТовара.Сопоставление.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сопоставление.Идентификатор) Тогда
			Сопоставление.Идентификатор = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(Сопоставление);
			Если ТипЗнч(Сопоставление.ИсторияИдентификаторов) <> Тип("Массив") Тогда
				Сопоставление.ИсторияИдентификаторов = Новый Массив;
			КонецЕсли;
			СтарыйИД = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоДаннымНоменклатуры(Сопоставление.Наименование,
				Сопоставление.Характеристика, Сопоставление.ЕдиницаИзмерения);
			Сопоставление.ИсторияИдентификаторов.Добавить(СтарыйИД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСвойстваДопДанныхСтроки(СтрокаXDTO, ИмяСвойства)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	
	ДопДерево = ДеревоДопДанных();
	
	ПрочитатьИнфПол(ДопДанные, ДопДерево, "СтрокаТЧ");
	
	СтрокаТЧ = ДопДерево.Строки.Найти("СтрокаТЧ", "ЗначениеРеквизита");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРеквизита = СтрокаТЧ.Строки.Найти(ИмяСвойства, "ИмяРеквизита");
	Если СтрокаРеквизита = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаРеквизита.ЗначениеРеквизита;
	
КонецФункции

Функция ЗначениеДопРеквизитаДокумента(ИмяРеквизита, ЭД) Экспорт
	
	ЗначениеРеквизита = Неопределено;
	
	Если ЭД.Свойства().Получить("ЗначенияРеквизитов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов")) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина);
	
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		
		Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекРеквизит, "Наименование");
		Значение     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекРеквизит, "Значение");
		
		Если ВРег(Наименование) = ВРег(ИмяРеквизита) Тогда
			ЗначениеРеквизита = Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("СписокXDTO") Тогда
		Если ЗначениеРеквизита.Количество() = 1 Тогда
			ЗначениеРеквизита = ЗначениеРеквизита[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ЗначениеДопРеквизита(КоллекцияЗначений, ИмяРеквизита)
	
	Результат = Неопределено;
	Для Каждого КлючЗначение Из КоллекцияЗначений Цикл
		
		// В пространстве имен "ON_CHETOP_1_998_01_01_01" тип "ИнфПолТип"
		// содержит доп. реквизиты в списке элементов "ТекстИнф" типа "ТекстИнфТип".
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(КлючЗначение, "ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда 
			Для Каждого ЭлементСписка Из ТекстИнф Цикл
				Если ВРег(ЭлементСписка.Идентиф) = ВРег(ИмяРеквизита) Тогда
					Результат = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		Иначе	
			Если ВРег(КлючЗначение.Идентиф) = ВРег(ИмяРеквизита) Тогда
				Результат = КлючЗначение.Значен;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипНоменклатурыФНС(Признак)
	
	Результат = Перечисления.ТипыНоменклатурыФНС.ПустаяСсылка();
	
	Если Признак = "1" Тогда
		Результат = Перечисления.ТипыНоменклатурыФНС.Имущество;
	ИначеЕсли Признак = "2" Тогда
		Результат = Перечисления.ТипыНоменклатурыФНС.Работа;
	ИначеЕсли Признак = "3" Тогда
		Результат = Перечисления.ТипыНоменклатурыФНС.Услуга;
	ИначеЕсли Признак = "4" Тогда
		Результат = Перечисления.ТипыНоменклатурыФНС.ИмущественныеПрава;
	ИначеЕсли Признак = "5" Тогда
		Результат = Перечисления.ТипыНоменклатурыФНС.Иное;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеДляСопоставленияТоваровПоДаннымНоменклатуры(Знач Идентификатор, Знач Наименование, Знач Характеристика, Знач ЕдиницаИзмерения)
	
	Если Наименование = Неопределено Тогда
		Наименование = "";
	КонецЕсли;
	Если Характеристика = Неопределено Тогда
		Характеристика = "";
	КонецЕсли;
	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = "";
	КонецЕсли;
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор"   , Идентификатор);
	Сопоставление.Вставить("Наименование"    , Наименование);
	Сопоставление.Вставить("Характеристика"  , Характеристика);
	Сопоставление.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Возврат Сопоставление;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура УдалитьПространствоИменCML(ДвоичныеДанныеФайла, Кодировка = Неопределено)
	
	ПотокXML = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
	
	Если Кодировка = Неопределено Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьПоток(ПотокXML);
		ЧтениеXML.Прочитать();
		Кодировка = ЧтениеXML.КодировкаXML;
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
	ПространствоИмен = ФорматыЭДО_CML.ПространствоИменCML208();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПотокXML, Кодировка);
	
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """" , "");
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xsi:type=""Контрагент"""            , "");
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xsi:type=""КоммерческаяИнформация""", "");
	
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	ТекстДокумента = Текст.ПолучитьТекст();
	
	ПотокЗаписи = Новый ПотокВПамяти(); 
	
	Текст = Новый ЗаписьТекста(ПотокЗаписи, Кодировка);
	Текст.Записать(ТекстДокумента);
	Текст.Закрыть();
	
	ДвоичныеДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецПроцедуры

Функция ПространствоИменАкта(ДанныеФайлаЭД, ИдентификаторЭД)
	
	ФлагФНС =0;
	Если СтрДлина(ДанныеФайлаЭД.Документ.ВремДок) = 8 Тогда   // например 12.45.55
		ФлагФНС = 1;
	Иначе
		ФлагФНС = 2;
	КонецЕсли;
	Если ДанныеФайлаЭД.СвУчДокОбор.Свойства().Получить("СвОЭДОтпрСФ") <> Неопределено Тогда
		ФлагФНС = 3;
	КонецЕсли;
	
	ПространствоИмен = ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД);
	
	Возврат ПространствоИмен;
	
КонецФункции

Функция ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД)
	
	// Имена для Акта исполнителя
	АктыИсполнителя = Новый Соответствие;
	АктыИсполнителя.Вставить(1, "IAKTPRM");
	АктыИсполнителя.Вставить(2, "IAKTPRM2");
	АктыИсполнителя.Вставить(3, "IAKTPRM_5_01_02");
	
	// Имена для Акта заказчика
	АктыЗаказчика = Новый Соответствие;
	АктыЗаказчика.Вставить(1, "ZAKTPRM");
	АктыЗаказчика.Вставить(2, "ZAKTPRM2");
	АктыЗаказчика.Вставить(3, "ZAKTPRM_5_01_02");
	
	// Имена для Титула продавца
	ТитулыПокупателя = Новый Соответствие;
	ТитулыПокупателя.Вставить(1, "PTORG12");
	ТитулыПокупателя.Вставить(2, "PTORG12");
	ТитулыПокупателя.Вставить(3, "PTORG_5_01_02");
	
	// Имена для Титула покупателя
	ТитулыПродавца = Новый Соответствие;
	ТитулыПродавца.Вставить(1, "OTORG12");
	ТитулыПродавца.Вставить(2, "OTORG12");
	ТитулыПродавца.Вставить(3, "OTORG_5_01_02");

	
	ИменаВидовЭД = Новый Соответствие;
	ИменаВидовЭД.Вставить("IAKTPRM", АктыИсполнителя);
	ИменаВидовЭД.Вставить("ZAKTPRM", АктыЗаказчика);
	ИменаВидовЭД.Вставить("PTORG12", ТитулыПокупателя);
	ИменаВидовЭД.Вставить("OTORG12", ТитулыПродавца);
	
	ТаблицаИмен = ИменаВидовЭД.Получить(ИдентификаторЭД);
	
	ИмяПространства = ТаблицаИмен.Получить(ФлагФНС);
	
	Возврат ИмяПространства;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено) Экспорт
	
	// Тег <Данные> - обязательный для xml-строки в формате универсального доп.файла.
	Если СтрНайти(СтрокаXML, "<Данные>") > 0 Тогда
		
		СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
			+ СтрокаXML + "</ДопФайл>";
			
		ДеревоСозданоРаньше = Истина;
		Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
			ДеревоДопДанных = ДеревоДопДанных();
			ДеревоСозданоРаньше = Ложь;
		КонецЕсли;
		
		ОбъектXML = Новый ЧтениеXML;
		Попытка
			ОбъектXML.УстановитьСтроку(СтрокаXML);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			ОбъектXML.Закрыть();
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Данные") <> Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
				Если СтрокаДЗ = Неопределено Тогда
					СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
					СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
					Если НомерСтроки = Неопределено Тогда
						СтрокаДЗ.ИмяРеквизита = "Набор";
					Иначе
						СтрокаДЗ.ИмяРеквизита = "Список";
					КонецЕсли;
				КонецЕсли;
				Если НомерСтроки <> Неопределено Тогда
					СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
					
					// Поиск подчиненных по разделителю "."
					ИндексРазделителяНомера = СтрНайти(Строка(НомерСтроки), ".");
					Если ИндексРазделителяНомера Тогда
						СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
						СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
					КонецЕсли;
					
					Если СтрокиДЗ.Количество() > 0 Тогда
						СтрокаДЗ = СтрокиДЗ[0];
					ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
						ДеревоЭлектронногоДокументаБЭД.СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
					Иначе
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
			КонецЕсли;
		Исключение
			Если Не ДеревоСозданоРаньше Тогда
				ДеревоДопДанных = Неопределено;
			КонецЕсли;
			ОбъектXML.Закрыть();
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных.
										|Подробнее см. в журнале регистрации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает признак доступности заполнения данных МЧД в указанном формате.
// 
// Параметры:
//  Формат - Строка
//
// Возвращаемое значение:
//  Булево - признак доступности заполнения данных.
//
Функция ЗаполнениеДанныхДоверенностиДоступноПоФормату(Формат)
	
	ПоддерживаемыеФорматы = ПоддерживаемыеФорматы();
	Возврат Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция СоответствиеТитулов()
	
	Форматы = ПоддерживаемыеФорматы();
	
	СоответствиеТитулов = Новый Соответствие;
	
	СоответствиеТитулов.Вставить(Форматы.ФНС.УПД2019.ИнформацияПродавца, Форматы.ФНС.УПД2019.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.УПД.ИнформацияПродавца, Форматы.ФНС.УПД.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.УКД.ИнформацияПродавца, Форматы.ФНС.УКД.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.УКД2020.ИнформацияПродавца, Форматы.ФНС.УКД2020.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.ПередачаТоваров.ИнформацияПродавца,
		Форматы.ФНС.ПередачаТоваров.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.ПередачаРабот.ИнформацияПродавца,
		Форматы.ФНС.ПередачаРабот.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.ПриемкаСдачаРабот.ИнформацияПродавца,
		Форматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя);
	СоответствиеТитулов.Вставить(Форматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя,
		Форматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияПолучателя);

	Для Каждого Менеджер Из ОбработкиФорматов() Цикл
		Попытка
			Менеджер.ЗаполнитьСоответствиеТитулов(СоответствиеТитулов);
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Менеджер %1, не удалось определить соответствие титулов, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Менеджер), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЦикла;

	Возврат СоответствиеТитулов;
	
КонецФункции

Функция ФорматДействует(СведенияОФормате, ТекущаяДата);
	
	Действует = Ложь;
	
	Если Не СведенияОФормате.Отключен
		И (НЕ ЗначениеЗаполнено(СведенияОФормате.ДатаНачалаДействия) 
			ИЛИ СведенияОФормате.ДатаНачалаДействия <= ТекущаяДата)
		И (НЕ ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
			ИЛИ КонецДня(СведенияОФормате.ДатаОкончанияДействия) >= ТекущаяДата) Тогда
		Действует = Истина;
	КонецЕсли;
	
	Возврат Действует;
	
КонецФункции

Функция ЗаполнитьДанныеДополнительныхПолейШапки(ДополнительныеДанные, ПараметрыЗаполнения)
	
	Результат = Истина;
	
	ПараметрыОтбора = Новый Структура("Раздел", ПараметрыЗаполнения.Раздел.Имя);
	МассивНастроек = ПараметрыЗаполнения.НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	Если МассивНастроек.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДерева = Новый Соответствие;
	Для Каждого НастройкаПоля Из МассивНастроек Цикл
		ЗначениеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеДанные, НастройкаПоля.Идентификатор);
		Если ЗначениеЗаполнено(ЗначениеПоля) Или ЗначениеПоля = 0 Тогда
			ФорматироватьЗначениеПоля(ЗначениеПоля, НастройкаПоля);
			ДанныеДерева.Вставить(НастройкаПоля.Имя, ЗначениеПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНастроек.Количество() = ДанныеДерева.Количество() Тогда
		ПутьКДопДанным = ПараметрыЗаполнения.Раздел.ПутьКРеквизитуДереваДопДанные;
		ОписаниеДанныхЭД = ПараметрыЗаполнения.ОписаниеДанныхЭД;
		Если ЭтоОбработкаФормата(ОписаниеДанныхЭД) Тогда
			Попытка
				ОписаниеДанныхЭД.ЗаполнитьДанныеДополнительныхПолей(ПараметрыЗаполнения.Раздел, ДанныеДерева);
			Исключение
				ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
				Шаблон = НСтр(
					"ru = 'Менеджер %1, Не удалось заполнить данные дополнительных полей, по причине:
					|%2'");
				ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(ОписаниеДанныхЭД), ОписаниеОшибки());
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
					УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
		Иначе
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ОписаниеДанныхЭД, ПутьКДопДанным + ".НомерСтроки") Тогда
				СтруктураДанныхДерева = Новый Структура;
				Для Каждого Реквизит Из ДанныеДерева Цикл
					СтруктураДанныхДерева.Вставить("Идентификатор", Реквизит.Ключ);
					СтруктураДанныхДерева.Вставить("Значение", Реквизит.Значение);
					ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ОписаниеДанныхЭД, СтруктураДанныхДерева,
						ПутьКДопДанным);
				КонецЦикла;
			Иначе
				СтрокаДопДанных = ОписаниеДанныхЭД.Строки.Найти(ПутьКДопДанным, "ПолныйПуть", Истина);
				Если ЗначениеЗаполнено(СтрокаДопДанных) Тогда
					ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, ДанныеДерева, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьСтруктуруПоДопДанным(Дерево, СтруктураДопДанных)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
			Структура = Новый Структура;
			СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, Структура);
		ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
		Иначе
			СтруктураДопДанных.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьУниверсальныйДопФайл(ДанныеФайла)
	
	ДеревоДопДанных = ДеревоДопДанных();
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.ДвоичныеДанные) Тогда
		Возврат ДеревоДопДанных;
	КонецЕсли;
	
	Расширение = Прав(ДанныеФайла.ИмяФайла, 3);
	Если ЗначениеЗаполнено(Расширение) И НРег(Расширение) <> "xml" Тогда
		Возврат ДеревоДопДанных;
	КонецЕсли;
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьПоток(ДанныеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения());
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ДанныеФайла.ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДеревоДопДанных;
	
КонецФункции

Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Реквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектРазбора, "Реквизит",,, Истина);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		РеквизитИмя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Имя");
		РеквизитЗначение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Значение");
		
		Если Не ЗначениеЗаполнено(РеквизитИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(
			"ИмяРеквизита, ЗначениеРеквизита", РеквизитИмя, РеквизитЗначение);
			
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита       = РеквизитИмя;
			СтрДЗ.ЗначениеРеквизита  = РеквизитЗначение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Реквизит") <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДанныеДополнительныхПолейТаблицы(МассивДополнительныхДанных, ПараметрыЗаполнения)
	
	Результат = Истина;
	
	ПараметрыОтбора = Новый Структура("Раздел", ПараметрыЗаполнения.Раздел.Имя);
	МассивНастроек = ПараметрыЗаполнения.НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	Если МассивНастроек.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивДополнительныхДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКДопДанным = ПараметрыЗаполнения.Раздел.ПутьКРеквизитуДереваДопДанные;
	ПутьКДаннымТаблицы = Лев(ПутьКДопДанным, СтрНайти(ПутьКДопДанным, ".", НаправлениеПоиска.СКонца) - 1);
	
	ОписаниеДанныхЭД = ПараметрыЗаполнения.ОписаниеДанныхЭД;
	Если ТипЗнч(ОписаниеДанныхЭД) = Тип("ДеревоЗначений") Тогда
		ПараметрыОтбора = Новый Структура("ПолныйПуть", ПутьКДаннымТаблицы);
		НайденныеСтроки = ОписаниеДанныхЭД.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		ИндексСтроки = 0;
		
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			
			ДополнительныеДанные = МассивДополнительныхДанных[ИндексСтроки];
			
			ЗначенияПолей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеДанные, "ЗначенияПолей");
			Если Не ЗначениеЗаполнено(ЗначенияПолей) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
			
			ДанныеСтрокиДерева = Новый Соответствие;
			Для Каждого НастройкаПоля Из МассивНастроек Цикл
				ЗначениеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПолей, НастройкаПоля.Идентификатор);
				Если ЗначениеЗаполнено(ЗначениеПоля) Или ЗначениеПоля = 0 Тогда
					ФорматироватьЗначениеПоля(ЗначениеПоля, НастройкаПоля);
					ДанныеСтрокиДерева.Вставить(НастройкаПоля.Имя, ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивНастроек.Количество() = ДанныеСтрокиДерева.Количество() Тогда
				СтрокаДопДанных = СтрокаДерева.Строки.Найти(ПутьКДопДанным, "ПолныйПуть");
				Если СтрокаДопДанных <> Неопределено Тогда
					ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, ДанныеСтрокиДерева, Истина);
				КонецЕсли;
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
	
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ФорматироватьЗначениеПоля(ЗначениеПоля, НастройкаПоля)
	
	Если НастройкаПоля.Заполнение = "ВручнуюДатой"
		ИЛИ НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда
		ЗначениеПоля = Формат(ЗначениеПоля, НастройкаПоля.Значение);
	КонецЕсли;
	
	Если НастройкаПоля.Заполнение = "ВручнуюЧислом" И ЗначениеПоля = "" Тогда
		ЗначениеПоля = 0;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для сопоставления номенклатуры, полученные из доп. данных электронного документа.
// Добавляет автоматически рассчитываемую информацию.
//
// Параметры:
//  Сопоставление - Структура - данные для сопоставления извлеченные из ЭД.
//
// Возвращаемое значение:
//  Структура - данные для сопоставления, подготовленные для вставки в дерево ЭД.
//
Функция ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Знач Сопоставление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Наименование");
	Результат.Вставить("Характеристика");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("ЕдиницаИзмеренияКод");
	Результат.Вставить("Артикул");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("ШтрихкодКомбинации");
	Результат.Вставить("ШтрихкодыНоменклатуры");
	Результат.Вставить("НоменклатураИБ");
	Результат.Вставить("ХарактеристикаИБ");
	Результат.Вставить("УпаковкаИБ");
	
	ЗаполнитьЗначенияСвойств(Результат, Сопоставление);
	
	// Обрезаем пробелы у строковых реквизитов.
	Для Каждого КлючИЗначение Из Результат Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, СокрЛП(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат.Идентификатор) Тогда
		Результат.Идентификатор = СтрЗаменить(Результат.Идентификатор, Символы.ПС, "");
	КонецЕсли;
	
	// Проверим, что пришел наш идентификатор.
	НоменклатураИБ = ИнтеграцияЭДО.НайтиНоменклатуруИБПоИдентификатору(Результат.Идентификатор);
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Результат.Вставить("Идентификатор", "");
		Результат.Вставить("НоменклатураИБ", НоменклатураИБ.Номенклатура);
		Результат.Вставить("ХарактеристикаИБ", НоменклатураИБ.Характеристика);
		Результат.Вставить("УпаковкаИБ", НоменклатураИБ.Упаковка);
		Возврат Результат;
	КонецЕсли;
	
	// Преобразуем ставку НДС в прикладное значение.
	Результат.СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(Результат.СтавкаНДС);
	
	// Если пришло несколько штрихкодов, то преобразуем их в массив.
	Если СтрНайти(Результат.ШтрихкодыНоменклатуры, ",") > 0 Тогда
		Результат.ШтрихкодыНоменклатуры = СтрРазделить(Результат.ШтрихкодыНоменклатуры, ",");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьФорматЭлектронногоДокумента(Знач Формат, Знач Имя, Знач Версия = "", Знач Назначение = "")
	
	Возврат ФорматыЭДО_ФНС.ПроверитьФорматЭлектронногоДокумента(Формат, Имя, Версия, Назначение);	
	
КонецФункции

Функция ПространствоИменBNCommerceOffering()
	
	Возврат "http://1cbn.ru/bn-commerce-offering/XMLSchema";
	
КонецФункции

// Возвращает пустое описание ошибок формирования документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗаполнениеДанных - Массив
// * ЗначенияДополнительныхПолей - Структура
Функция НовоеОписаниеОшибокФормированияДокумента()
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ЗаполнениеДанных", Новый Массив);
	ОписаниеОшибки.Вставить("ЗначенияДополнительныхПолей", Новый Структура);
	Возврат ОписаниеОшибки;
КонецФункции

Функция МетаданныеОбработокФорматов()
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить(Метаданные.Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО);
	МассивМетаданных.Добавить(Метаданные.Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияЗаказчикаЭДО);
	МассивМетаданных.Добавить(Метаданные.Обработки.ФорматДоговорнойДокумент101);
	Возврат МассивМетаданных;
КонецФункции

#КонецОбласти