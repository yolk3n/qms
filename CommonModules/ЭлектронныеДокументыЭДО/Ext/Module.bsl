
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

Функция СвойстваСообщения(Сообщение, Свойства) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение, Свойства);
КонецФункции

// Определяет, является ли переданная ссылка ссылкой на электронный документ.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлектронныйДокумент(Ссылка) Экспорт
	
	Возврат ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО");
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВходящийЭДО(ЭлектронныйДокумент) Экспорт
	Возврат ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО");
КонецФункции

#КонецОбласти

#Область ПроверкаПрав

// Возвращает признак наличия прав на чтение электронных документов.
// 
// Возвращаемое значение:
// 	Булево - признак наличия прав на чтение электронных документов.
Функция ЕстьПравоЧтенияДокументов() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ЕстьПраво = Истина;
		
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Документы.СообщениеЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Чтение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия прав на обработку электронных документов.
// 
// Параметры:
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево - признак наличия прав на обработку электронных документов.
Функция ЕстьПравоОбработкиДокументов(КонтекстДиагностики = Неопределено) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Документы.СообщениеЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И КонтекстДиагностики <> Неопределено Тогда
		ТекстСообщения = ОбработкаНеисправностейБЭДКлиентСервер.ТекстСообщенияОНарушенииПравДоступа();
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Выполнение действий по электронным документам'"),
			ВидОшибкиНетПравНаОбработкуДокументов(), ТекстСообщения, ТекстСообщения);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики = Неопределено) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами(КонтекстДиагностики)
		ИЛИ Не ЕстьПравоОбработкиДокументов(КонтекстДиагностики)
		ИЛИ ИнтеграцияБСПБЭД.ПользовательНедействителен(КонтекстДиагностики) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Форматы

// Возвращает структуру отбора сведений по форматам электронных документов.
// 
// Возвращаемое значение:
//  См. ФорматыЭДО.НовыйОтборФорматовЭлектронныхДокументов
//
Функция НовыйОтборФорматовЭлектронныхДокументов() Экспорт
	Возврат ФорматыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
КонецФункции

// Возвращает сведения о форматах электронных документов.
// 
// Параметры:
//  Отбор - Неопределено
//        - См. НовыйОтборФорматовЭлектронныхДокументов
//
// Возвращаемое значение:
//  См.  ФорматыЭДО.ФорматыЭлектронныхДокументов
//
Функция ФорматыЭлектронныхДокументов(Отбор = Неопределено) Экспорт
	Возврат ФорматыЭДО.ФорматыЭлектронныхДокументов(Отбор);
КонецФункции

// Возвращает описание запроса актуальных форматов.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблице для обращения в основном запросе.
// Возвращаемое значение:
// 	См. ФорматыЭДО.ЗапросАктуальныхФорматов
Функция ЗапросАктуальныхФорматов(ИмяВременнойТаблицы) Экспорт
	Возврат ФорматыЭДО.ЗапросАктуальныхФорматов(ИмяВременнойТаблицы);
КонецФункции

// Возвращает описание запроса форматов электронных документов.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблице для обращения в основном запросе.
// Возвращаемое значение:
// 	См. ФорматыЭДО.ЗапросФорматовЭлектронныхДокументов
Функция ЗапросФорматовЭлектронныхДокументов(ИмяВременнойТаблицы) Экспорт
	Возврат ФорматыЭДО.ЗапросФорматовЭлектронныхДокументов(ИмяВременнойТаблицы);
КонецФункции

// Обновляет форматы электронных документов по предоставленным данным.
// 
// Параметры:
// 	Форматы - ТаблицаЗначений -
// 	ДатаИзменения - Дата -
Процедура ОбновитьФорматыЭлектронныхДокументов(Форматы, ДатаИзменения) Экспорт
	ФорматыЭДО.ОбновитьФорматыЭлектронныхДокументов(Форматы, ДатаИзменения);
КонецПроцедуры

// Обновляет связи видов и форматов электронных документов по предоставленным данным.
// 
// Параметры:
// 	СвязьВидовИФорматов - ТаблицаЗначений -
// 	ДатаИзменения - Дата -
Процедура ОбновитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов, ДатаИзменения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовИФорматовДокументовЭДО";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	Если СвязьВидовИФорматов.ДатаПоследнегоИзменения <> ДатаИзменения ИЛИ Не ЕстьЗаписи Тогда
		
		ЗагрузитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокСвязейСервиса.ВидЭлектронногоДокумента КАК ВидДокумента,
	|	СписокСвязейСервиса.ФорматЭлектронногоДокумента КАК Формат,
	|	СписокСвязейСервиса.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ СписокСвязейСервиса
	|ИЗ
	|	&СписокСвязейСервиса КАК СписокСвязейСервиса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСвязейСервиса.ВидДокумента КАК ВидДокумента,
	|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
	|	СписокСвязейСервиса.Приоритет КАК Приоритет
	|ИЗ
	|	СписокСвязейСервиса КАК СписокСвязейСервиса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|		ПО ((ВЫРАЗИТЬ(СписокСвязейСервиса.Формат КАК СТРОКА(50))) = ФорматыЭлектронныхДокументов.ИдентификаторСервиса)";
	
	Запрос.УстановитьПараметр("СписокСвязейСервиса", СвязьВидовИФорматов.СвязьВидовИФорматовЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Набор = РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Загрузить(РезультатЗапроса.Выгрузить());
	
	Набор.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает таблицу с данными для расшифровки формата и вида ЭД в Формат.
//
// Возвращаемое значение:
//  ТаблицаЗначений - См. ФорматыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО.
//
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	Возврат ФорматыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО();
	
КонецФункции

// Возвращает формат по умолчанию для указанного вида электронного документа
// 
// Параметры:
// 	* ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
// Возвращаемое значение:
// 	 Строка - Идентификатор формата электронного документа.
Функция ФорматПоУмолчанию(ВидДокумента) Экспорт
	Отбор = НовыйОтборЗапросаФорматовПоУмолчанию();
	Отбор.ВидДокумента = "= &ОтборВидДокумента";
	ОписаниеЗапроса = ЗапросФорматовПоУмолчанию("", Отбор);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборВидДокумента", ВидДокумента);
	РезультатЗапроса = ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса);
	ВыборкаФормата = РезультатЗапроса.Выбрать();
	Если ВыборкаФормата.Следующий() Тогда
		Возврат ВыборкаФормата.Формат;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает пустую структуру для отбора форматов по умолчанию.
// 
// Возвращаемое значение:
// 	См. _ФорматыЭДО.НовыйОтборЗапросаФорматовПоУмолчанию
Функция НовыйОтборЗапросаФорматовПоУмолчанию() Экспорт
	Возврат ФорматыЭДО.НовыйОтборЗапросаФорматовПоУмолчанию();
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться форматы по умолчанию.
// Запрос содержит следующие поля:
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * Формат - Строка
//
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - См. НовыйОтборЗапросаФорматовПоУмолчанию
// Возвращаемое значение:
// 	См. _ФорматыЭДО.ЗапросФорматовПоУмолчанию
Функция ЗапросФорматовПоУмолчанию(ИмяВременнойТаблицы = "", Отбор = Неопределено) Экспорт
	Возврат ФорматыЭДО.ЗапросФорматовПоУмолчанию(ИмяВременнойТаблицы, Отбор);
КонецФункции

// Возвращает поддерживаемые форматы электронных документов.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.ПоддерживаемыеФорматы
Функция ПоддерживаемыеФорматы() Экспорт
	Возврат ФорматыЭДО.ПоддерживаемыеФорматы();
КонецФункции

// Формирует пустую структура параметров получения данных электронного документа.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента
Функция НовыеПараметрыПолученияДанныхДокумента() Экспорт
	Возврат ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
КонецФункции

Функция ЭтоСтандартныйФормат(Формат) Экспорт
	Возврат ФорматыЭДО.ЭтоСтандартныйФормат(Формат);
КонецФункции

Функция ЭтоСлужебноеИмяДополнительногоПоля(ИмяПоля, Формат) Экспорт
	Возврат ФорматыЭДО.ЭтоСлужебноеИмяДополнительногоПоля(ИмяПоля, Формат);
КонецФункции

Функция ПрефиксСлужебныхДополнительныхДанных() Экспорт
	Возврат ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
КонецФункции

Процедура ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки) Экспорт
	
	ФорматыЭДО.ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки);
	
КонецПроцедуры

Функция ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения) Экспорт
	Возврат ФорматыЭДО.ДанныеЭлектронногоДокумента(ПараметрыПолучения);
КонецФункции

#КонецОбласти

#Область Направления

Функция ДоступныеНаправленияДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Внутренний", Перечисления.НаправленияЭДО.Внутренний);
	Результат.Вставить("Входящий", Перечисления.НаправленияЭДО.Входящий);
	Результат.Вставить("Интеркампани", Перечисления.НаправленияЭДО.Интеркампани);
	Результат.Вставить("Исходящий", Перечисления.НаправленияЭДО.Исходящий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыДокументов

// Возвращает типы электронных документов, для которых доступно формирование на основании объекта учета.
// 
// Возвращаемое значение:
// 	Структура:
// * АктВыполненныхРабот - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктНаПередачуПрав - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктОРасхождениях - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктСверкиВзаиморасчетов - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДоговорнойДокумент - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗаказТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗапросКоммерческихПредложений - ПеречислениеСсылка.ТипыДокументовЭДО
// * КаталогТоваров - ПеречислениеСсылка.ТипыДокументовЭДО
// * КоммерческоеПредложение - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировочныйСчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтветНаЗаказ - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОПродажахКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОСписанииКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрайсЛист - ПеречислениеСсылка.ТипыДокументовЭДО
// * СоглашениеОбИзмененииСтоимости - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетНаОплату - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ТоварнаяНакладная - ПеречислениеСсылка.ТипыДокументовЭДО
// * РеквизитыОрганизации - ПеречислениеСсылка.ТипыДокументовЭДО
// * УПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * УКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктПриемкиСтроительныхРаботУслуг - ПеречислениеСсылка.ТипыДокументовЭДО
// * КонтрактЕИС - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * ВозвратТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПередачаТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * МашиночитаемаяДоверенность - ПеречислениеСсылка.ТипыДокументовЭДО
//
Функция СтандартныеТипыДокументов() Экспорт
	
	ТипыДокументов = Новый Структура;

	ТипыДокументов.Вставить("АктВыполненныхРабот", Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Вставить("АктНаПередачуПрав", Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Вставить("АктОРасхождениях", Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументов.Вставить("АктСверкиВзаиморасчетов", Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ТипыДокументов.Вставить("ДоговорнойДокумент", Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);
	ТипыДокументов.Вставить("ЗаказТовара", Перечисления.ТипыДокументовЭДО.ЗаказТовара);
	ТипыДокументов.Вставить("ЗапросКоммерческихПредложений",
		Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
	ТипыДокументов.Вставить("КаталогТоваров", Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	ТипыДокументов.Вставить("КоммерческоеПредложение", Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение);
	ТипыДокументов.Вставить("КорректировочныйСчетФактура", Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ТипыДокументов.Вставить("ОтветНаЗаказ", Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ);
	ТипыДокументов.Вставить("ОтчетОПродажахКомиссионногоТовара",
		Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара);
	ТипыДокументов.Вставить("ОтчетОСписанииКомиссионногоТовара",
		Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара);
	ТипыДокументов.Вставить("ПрайсЛист", Перечисления.ТипыДокументовЭДО.ПрайсЛист);
	ТипыДокументов.Вставить("СоглашениеОбИзмененииСтоимости",
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Вставить("СчетНаОплату", Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	ТипыДокументов.Вставить("СчетФактура", Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДокументов.Вставить("ТоварнаяНакладная", Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Вставить("РеквизитыОрганизации", Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации);
	ТипыДокументов.Вставить("УПД", Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументов.Вставить("УКД", Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументов.Вставить("АктПриемкиСтроительныхРаботУслуг",
		Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);

	ТипыДокументов.Вставить("КонтрактЕИС", Перечисления.ТипыДокументовЭДО.КонтрактЕИС);
	ТипыДокументов.Вставить("ДокументПриемкиЕИСУПД", Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД);
	ТипыДокументов.Вставить("ДокументПриемкиЕИСУКД", Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД);
	ТипыДокументов.Вставить("РезультатРассмотренияАктаПриемкиЕИСУПД",
		Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУПД);
	ТипыДокументов.Вставить("РезультатРассмотренияАктаПриемкиЕИСУКД",
		Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУКД);

	ТипыДокументов.Вставить("СведенияОРеализацииКомиссионером",
		Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером);
	ТипыДокументов.Вставить("СведенияОЗакупкеКомиссионером",
		Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером);
	ТипыДокументов.Вставить("КорректировкаСведенийОРеализацииКомиссионером",
		Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером);
	ТипыДокументов.Вставить("КорректировкаСведенийОЗакупкеКомиссионером",
		Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером);

	ТипыДокументов.Вставить("ВозвратТоваровМеждуОрганизациями",
		Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями);
	ТипыДокументов.Вставить("ПередачаТоваровМеждуОрганизациями",
		Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями);
	ТипыДокументов.Вставить("МашиночитаемаяДоверенность", Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ПриОпределенииСтандартныхТиповДокументов(ТипыДокументов);
	КонецЕсли;

	Возврат ТипыДокументов;
	
КонецФункции

// Возвращает доступные типы для электронного документа произвольного формата.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ТипыДокументовЭДО - типы электронного документа.
Функция ТипыДокументовПроизвольногоФормата() Экспорт
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВзаимозачета);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Ведомость);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Договор);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС11);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС2);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС3);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Отчет);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПриложениеКАкту);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Прочее);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Спецификация);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Уведомление);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);
	
	Возврат ТипыДокументов;
КонецФункции

// Определяет является ли тип документа стандартным.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Тип является стандартным.
//
Функция ЭтоСтандартныйТипДокумента(ТипДокумента) Экспорт
	Для Каждого СтандартныйТип Из СтандартныеТипыДокументов() Цикл
		Если СтандартныйТип.Значение = ТипДокумента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Определяет является ли тип документа прикладным.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак прикладного типа.
//
Функция ЭтоПрикладнойТипДокумента(ТипДокумента) Экспорт
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
КонецФункции

// Определяет является ли тип документа типом документов интеркампани.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак типа документа интеркампани.
//
Функция ЭтоТипДокументаИнтеркампани(ТипДокумента) Экспорт
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями
КонецФункции

// Определяет является ли тип документа типом служебных документов.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак типа служебного документа.
//
Функция ЭтоТипДокументаСлужебный(ТипДокумента) Экспорт
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании;
КонецФункции

// Определяет тип служебного документа по типу элемента регламента.
// 
// Параметры:
// 	ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента.
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
Функция ТипСлужебногоДокумента(ТипЭлементаРегламента) Экспорт
	
	ТипДокумента = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ИОП
		ИЛИ (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоИОП(ТипЭлементаРегламента)) Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ
		ИЛИ (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ТипЭлементаРегламента)) Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

#КонецОбласти

#Область ВидыДокументов

// Возвращает новые параметры поиска вида документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - Новые параметры поиска вида документа:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - Произвольный
// * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
// * ИдентификаторКомандыПечати - Строка
// * ПредставлениеКомандыПечати - Строка
// 
Функция НовыеПараметрыПоискаВидаДокумента(ТипДокумента) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента", ТипДокумента);
	Параметры.Вставить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Параметры.Вставить("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Параметры.Вставить("ИдентификаторКомандыПечати", "");
	Параметры.Вставить("ПредставлениеКомандыПечати", "");
	Возврат Параметры;
КонецФункции

// Ищет вид документа.
// 
// Параметры:
//  ПараметрыПоиска см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.ВидыДокументовЭДО
//  
Функция НайтиВидДокумента(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = &ТипДокумента
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипДокумента", ПараметрыПоиска.ТипДокумента);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ПараметрыПоиска.ПрикладнойТипДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ПараметрыПоиска.ИдентификаторОбъектаУчета);
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", ПараметрыПоиска.ИдентификаторКомандыПечати);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает виды исходящих электронных документов, используемые в конфигурации.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовИсходящие() Экспорт
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ИспользуемыеТипыДокументов Цикл
		Если ТипДокумента.Значение["ИспользоватьДляИсходящих"] Тогда
			ТипыДокументов.Добавить(ТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыДокументов, ТипыДокументовИнтеркампани());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает все виды исходящих электронных документов, включая прикладные, используемые в конфигурации.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументовЭДО
Функция ИспользуемыеВидыДокументовИсходящиеПрикладные() Экспорт
	
	ВидыЭлектронныхДокументов = ИспользуемыеВидыДокументовИсходящие();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыЭлектронныхДокументов,	ПрикладныеВидыДокументов());
		
	Возврат ВидыЭлектронныхДокументов;	
	
КонецФункции

// Возвращает виды входящих электронных документов, используемые в конфигурации.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовВходящие() Экспорт
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ИспользуемыеТипыДокументов Цикл
		Если ТипДокумента.Значение["ИспользоватьДляВходящих"] Тогда
			ТипыДокументов.Добавить(ТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыДокументов, ТипыДокументовИнтеркампани());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает виды электронных документов, используемые в конфигурации, при обмене между организациями.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовИнтеркампани() Экспорт
	
	ТипыДокументов = ТипыДокументовИнтеркампани();
	
	ВидыДокументовПоТипам = НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает виды электронных документов, используемые в конфигурации, при прямом обмене.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовПрямогоОбмена() Экспорт
	
	ТипыДокументов = ТипыДокументовПрямогоОбмена();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает прикладные виды электронных документов.
// 
// Возвращаемое значение:
// Массив из СправочникСсылка.ВидыДокументовЭДО - набор видов электронных документов.
Функция ПрикладныеВидыДокументов() Экспорт
	
	ВидыДокументов = Новый Массив;
	ТипыДокументов = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		ВидДокумента = ВидДокументаПоПрикладномуТипу(ТипДокумента);
		ВидыДокументов.Добавить(ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает виды доступные для формирования электронного документа произвольного формата.
// 
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ВидыДокументовЭДО - доступные виды документов.
Функция ВидыДокументовДляПроизвольногоФормата() Экспорт
	
	ТипыДокументов = ТипыДокументовПроизвольногоФормата();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает вид электронного документа по доступному типу электронного документа.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Значение элемента структуры СтандартныеТипыДокументов.
// Возвращаемое значение:
// 	СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоТипу(ТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""Тип документа""'");
	КонецЕсли;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Возвращает виды электронных документов по стандартным типам электронных документов.
// Не подходит для поиска по внутренним и прикладным типам документов.
// 
// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО - Набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие - Описание:
//   * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Ссылка на тип документа.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
//                                                     Для внутреннего и прикладного документа возвращается пустая ссылка.
Функция ВидыДокументовПоСтандартнымТипам(ТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	ВидыДокументовЭДО.ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ТипДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Если ТипыДокументов.Количество() = Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если Не ЗначениеЗаполнено(ТипДокумента)
			ИЛИ Результат[ТипДокумента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		Результат.Вставить(ТипДокумента, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вид электронного документа по прикладному типу электронного документа.
// 
// Параметры:
// 	ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Значение прикладного типа электронного документа.
// Возвращаемое значение:
// 	СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоПрикладномуТипу(ПрикладнойТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ПрикладнойТипДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""Прикладной тип документа""'");
	КонецЕсли;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Перечисления.ТипыДокументовЭДО.Прикладной);
	ПараметрыПоиска.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Возвращает виды электронных документов по прикладным типам электронных документов.
// 
// Параметры:
//  ПрикладныеТипыДокументов - Массив из ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие - Описание:
//   * Ключ - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидыДокументовПоПрикладнымТипам(ПрикладныеТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента В (&ПрикладныеТипыДокументов)";
	
	Запрос.УстановитьПараметр("ПрикладныеТипыДокументов", ПрикладныеТипыДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ПрикладнойТипДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Если ПрикладныеТипыДокументов.Количество() = Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПрикладнойТип Из ПрикладныеТипыДокументов Цикл
		Если Не ЗначениеЗаполнено(ПрикладнойТип)
			ИЛИ Результат[ПрикладнойТип] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Перечисления.ТипыДокументовЭДО.Прикладной);
		ПараметрыПоиска.ПрикладнойТипДокумента = ПрикладнойТип;
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		Результат.Вставить(ПрикладнойТип, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание вида электронного документа.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
// Возвращаемое значение:
// 	Структура - Описание:
// ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// ** ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Прикладной тип электронного документа.
// ** ИдентификаторКомандыПечати - Строка - Идентификатор команды печати.
// ** ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка на идентификатор объекта метаданных.
Функция ОписаниеВидаДокумента(ВидДокумента) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
		"ТипДокумента, ПрикладнойТипДокумента, ИдентификаторКомандыПечати, ИдентификаторОбъектаУчета");
КонецФункции

// Возвращает описания видов электронных документов.
// 
// Параметры:
// 	ВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на виды электронных документов.
// Возвращаемое значение:
// 	Соответствие - Описание:
// * Ключ - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
// * Значение - Структура - См. ОписаниеВидаДокумента
Функция ОписанияВидовДокументов(ВидыДокументов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДокументов,
		"ТипДокумента, ПрикладнойТипДокумента, ИдентификаторКомандыПечати, ИдентификаторОбъектаУчета");
КонецФункции

// Определяет соответствует ли тип вида документа прикладному типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоПрикладнойВидДокумента(ВидДокумента) Экспорт
	Возврат ТипВидаДокументаСоответствуетТипу(ВидДокумента,
		Перечисления.ТипыДокументовЭДО.Прикладной);
КонецФункции

// Определяет соответствует ли тип вида документа внутреннему типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ТипВидаДокументаСоответствуетТипу(ВидДокумента,
		Перечисления.ТипыДокументовЭДО.Внутренний);
КонецФункции

// Возвращает заменяемые виды документов для видов УПД и УКД.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * УПД - Структура - Описание:
// ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид документа УПД.
// ** ЗаменяемыеВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на заменяемые виды УПД.
// * УКД - Структура - Описание:
// ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид документа УКД.
// ** ЗаменяемыеВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на заменяемые виды УКД.
Функция ВидыДокументовЗаменяемыеУПДУКД() Экспорт
	
	ЗаменяемыеВиды = Новый Структура;
	ЗаменяемыеВиды.Вставить("УПД", Новый Структура);
	ЗаменяемыеВиды.УПД.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ЗаменяемыеВиды.УПД.Вставить("ЗаменяемыеВидыДокументов", Новый Массив);
	ЗаменяемыеВиды.Вставить("УКД", Новый Структура);
	ЗаменяемыеВиды.УКД.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ЗаменяемыеВиды.УКД.Вставить("ЗаменяемыеВидыДокументов", Новый Массив);
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	
	ВидыДокументовПоТипам = ВидыДокументовПоТипам(ТипыДокументов);
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
			ЗаменяемыеВиды.УПД.ВидДокумента = ВидыДокументовПоТипам[ТипДокумента];
			МассивВидов = ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов;
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			ЗаменяемыеВиды.УКД.ВидДокумента = ВидыДокументовПоТипам[ТипДокумента];
			МассивВидов = ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов;
		Иначе
			МассивВидов.Добавить(ВидыДокументовПоТипам[ТипДокумента]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаменяемыеВиды;
	
КонецФункции

// Определяет дополнительные виды электронных документов по данным файла.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.ДополнительныеВидыДокументовУПД
Функция ДополнительныеВидыДокументовУПД(ОписаниеФайла) Экспорт
	Возврат ФорматыЭДО.ДополнительныеВидыДокументовУПД(ОписаниеФайла);
КонецФункции

// Возвращает пустую структуру для отбора видов документов.
// 
// Возвращаемое значение:
// 	Структура:
// * Ссылка - Строка - Параметр или выражение для отбора по ссылке.
Функция НовыйОтборВидовДокументов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", "");
	Отбор.Вставить("ТипДокумента", "");
	Отбор.Вставить("ИдентификаторОбъектаУчета", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться виды документов.
// Запрос содержит следующие поля:
//   * Ссылка - СправочникСсылка.ВидыДокументовЭДО
//   * Наименование - Строка
//   * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//   * ИдентификаторКомандыПечати - Строка.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборВидовДокументов
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса()
Функция ЗапросВидовДокументов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборВидовДокументов();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыДокументовЭДО.Ссылка,
	|	ВидыДокументовЭДО.Наименование,
	|	ВидыДокументовЭДО.ТипДокумента,
	|	ВидыДокументовЭДО.ИдентификаторКомандыПечати,
	|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|ГДЕ
	|&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Ссылка) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.Ссылка В (%1)", Отбор.Ссылка));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ТипДокумента) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.ТипДокумента В (%1)", Отбор.ТипДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ИдентификаторОбъектаУчета) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.ИдентификаторОбъектаУчета В (%1)", Отбор.ИдентификаторОбъектаУчета));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает вид внутреннего электронного документа, если документ не найден, создает
// и возвращает ссылку на созданный элемент.
//
// Параметры:
//  ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КомандаПечати - Структура:
//    * Идентификатор - Строка
//    * Представление - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
//
Функция НайтиСоздатьВидВнутреннегоДокумента(ИдентификаторОбъектаУчета, КомандаПечати) Экспорт
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Перечисления.ТипыДокументовЭДО.Внутренний);
	ПараметрыПоиска.ИдентификаторОбъектаУчета  = ИдентификаторОбъектаУчета;
	ПараметрыПоиска.ИдентификаторКомандыПечати = КомандаПечати.Идентификатор;
	ПараметрыПоиска.ПредставлениеКомандыПечати = КомандаПечати.Представление;
	
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Возвращает команды печати доступные для внутреннего ЭДО.
// 
// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданных - объект метаданных конфигурации.
// Возвращаемое значение:
// 	ТаблицаЗначений - См. ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО
Функция КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных) Экспорт
	
	Возврат ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных);
	
КонецФункции

// Изменяет виды сообщений при изменении вида документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Устанавливаемый вид электронного документа.
// 	Отказ - Булево - Признак отказа от записи изменения.
Процедура ПриИзмененииВидаДокумента(ЭлектронныйДокумент, ВидДокумента, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщениеЭДО.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|ГДЕ
			|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТипыЭлементовРегламента = Новый Массив;
		ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
		
		Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.ВидСообщения = ВидДокумента;
			СообщениеОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа
//  ДобавлятьПредопределенныеСпособы - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс	 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийВидаДокумента(ВидДокумента, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "ТипДокумента, ПрикладнойТипДокумента");
	
	ТипДокумента = ЗначенияРеквизитов.ТипДокумента;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ТипДокумента = ЗначенияРеквизитов.ПрикладнойТипДокумента;
	КонецЕсли;
	
	Возврат ИнтеграцияЭДО.СписокОперацийТипаДокумента(ТипДокумента, ДобавлятьПредопределенныеСпособы, Префикс);
	
КонецФункции

// Заполняет наименование вида документа.
// 
// Параметры:
//  ВидДокументаОбъект - СправочникОбъект.ВидыДокументовЭДО
//  ПредставлениеКомандыПечати - Строка
// 
Процедура ЗаполнитьНаименованиеВидаДокумента(ВидДокументаОбъект, ПредставлениеКомандыПечати = "") Экспорт
	
	Если ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ПрикладнойТипДокумента);
	ИначеЕсли ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Если ЗначениеЗаполнено(ПредставлениеКомандыПечати) Тогда
			ВидДокументаОбъект.Наименование = ПредставлениеКомандыПечати;
		Иначе
			ВидДокументаОбъект.Наименование = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПечатиОбъекта(
				ВидДокументаОбъект.ИдентификаторОбъектаУчета, ВидДокументаОбъект.ИдентификаторКомандыПечати)
		КонецЕсли;
	Иначе
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ТипДокумента);
		ВидДокументаОбъект.КраткоеНаименование = КраткоеНаименованиеТипаДокумента(ВидДокументаОбъект.ТипДокумента);
	КонецЕсли;
	
	Если ПустаяСтрока(ВидДокументаОбъект.КраткоеНаименование) Тогда
		ВидДокументаОбъект.КраткоеНаименование = ВидДокументаОбъект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// Возвращает ключ настроек отправки по объекту учета.
//
// Параметры:
//  ОписаниеОбъектаУчета - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//
// Возвращаемое значение:
//  См. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки, Неопределено - ключ настроек отправки.
//  	Неопределено, если не удалось определить.
//
Функция КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета) Экспорт
	
	Если ОписаниеОбъектаУчета.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	
	Если ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ВидДокумента = ВидДокументаПоПрикладномуТипу(ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
	Иначе
		ВидДокумента = ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
	КонецЕсли;
	
	КлючНастроек.ВидДокумента = ВидДокумента;
	КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
	КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
	КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
	
	Возврат КлючНастроек;
	
КонецФункции

Функция ШаблоныНастроекОтправкиВидовДокументов(ВидыДокументов) Экспорт
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ШаблоныНастроек = Новый ТаблицаЗначений;
	ШаблоныНастроек.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ШаблоныНастроек.Колонки.Добавить("Формат", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ШаблоныНастроек.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("ПриоритетГруппы", Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ШаблоныНастроек.Колонки.Добавить("ДокументУчета", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("МаршрутПодписания", Новый ОписаниеТипов("СправочникСсылка.МаршрутыПодписания"));
	ШаблоныНастроек.Колонки.Добавить("ТребуетсяИзвещениеОПолучении", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("ТребуетсяОтветнаяПодпись", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьПодпись", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьИзвещение", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьОтветнуюПодпись", ОписаниеТиповБулево);
	
	ОтборФорматов = НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.ВидыДокументов = ВидыДокументов;
	ОтборФорматов.Действует = Истина;
	Форматы = ФорматыЭлектронныхДокументов(ОтборФорматов);
	
	ПредставленияОснованийПоТипам = ИнтеграцияЭДО.ПредставленияОснованийПоТипамДокументов();
	
	ОписанияВидовДокументов = ОписанияВидовДокументов(ВидыДокументов);
	
	Для Каждого Элемент Из ОписанияВидовДокументов Цикл
		
		ВидДокумента = Элемент.Ключ;
		ОписаниеВида = Элемент.Значение;
		
		ИдентификаторФормата = "";
		СведенияОФормате = Форматы.Найти(ВидДокумента, "ВидДокумента");
		Если СведенияОФормате <> Неопределено Тогда
			ИдентификаторФормата = СведенияОФормате.ИдентификаторФормата;
		КонецЕсли;
		
		ШаблонНастройкиВида = ШаблоныНастроек.Добавить();
		ШаблонНастройкиВида.ВидДокумента = ВидДокумента;
		ШаблонНастройкиВида.Формат = ИдентификаторФормата;
		ШаблонНастройкиВида.Приоритет = ПриоритетТипаДокументаПриОтображенииВСписке(ОписаниеВида.ТипДокумента);
		ПараметрыГруппы = ПараметрыГруппыТипаДокументаПриОтображенииВСписке(ОписаниеВида.ТипДокумента);
		ШаблонНастройкиВида.Группа = ПараметрыГруппы.Группа;
		ШаблонНастройкиВида.ПриоритетГруппы = ПараметрыГруппы.ПриоритетГруппы;
		ШаблонНастройкиВида.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
		
		Если ЭтоПрикладнойТипДокумента(ОписаниеВида.ТипДокумента) Тогда
			ТипДокументаДляПредставления = ОписаниеВида.ПрикладнойТипДокумента;
		Иначе
			ТипДокументаДляПредставления = ОписаниеВида.ТипДокумента;
		КонецЕсли;
		
		ПредставлениеОснования = ПредставленияОснованийПоТипам[ТипДокументаДляПредставления];
		Если ПредставлениеОснования = Неопределено Тогда // не задано соответствие
			ШаблонСообщения = НСтр("ru = 'В переопределяемом модуле прикладного решения необходимо указать представление документа ИБ(основания) и хоз. операции для типа документа %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ТипДокументаДляПредставления);
			
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;
		ШаблонНастройкиВида.ДокументУчета = ПредставлениеОснования;
		
		НастройкиРегламента = НастройкиРегламента(ОписаниеВида, ИдентификаторФормата);
		ЗаполнитьЗначенияСвойств(ШаблонНастройкиВида, НастройкиРегламента);
		
	КонецЦикла;
	
	ШаблоныНастроек.Сортировать("ПриоритетГруппы, Приоритет");
	
	Возврат ШаблоныНастроек;
	
КонецФункции

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль	 - Строка - см. ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица предопределенного профиля:
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//   * СпособОбработки - Строка - текстовый идентификатор способа обработки.
//
Функция ШаблонНастроекОтраженияВУчете(Профиль) Экспорт
	
	ТаблицаПрофиля = ИнтеграцияЭДО.ТаблицаПредопределенногоПрофиля(Профиль);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПрофиля", ТаблицаПрофиля);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПрофиля.ТипДокумента КАК ТипДокумента,
		|	ТаблицаПрофиля.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ТаблицаПрофиля.СпособОбработки КАК СпособОбработки
		|ПОМЕСТИТЬ ТаблицаПрофиля
		|ИЗ
		|	&ТаблицаПрофиля КАК ТаблицаПрофиля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ТаблицаПрофиля.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	ТаблицаПрофиля КАК ТаблицаПрофиля
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ТаблицаПрофиля.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ТаблицаПрофиля.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает настройки регламента ЭДО.
// 
// Параметры:
// 	ОписаниеВидаДокумента - См. ОписаниеВидаДокумента
// 	Формат - Строка - Идентификатор формата электронного документа.
// Возвращаемое значение:
// 	Структура - Описание:
// * РедактироватьОтветнуюПодпись - Булево - Возможность редактирования признака ожидания ответной подписи.
// * РедактироватьИзвещение - Булево - Возможность редактирования признака ожидания извещения.
// * РедактироватьПодпись - Булево - Возможность редактирования признака использования подписи.
// * ТребуетсяОтветнаяПодпись - Булево - Значение признака ожидания ответной подписи по умолчанию.
// * ТребуетсяИзвещениеОПолучении - Булево - Значение признака ожидания извещения по умолчанию.
Функция НастройкиРегламента(ОписаниеВидаДокумента, Формат) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТребуетсяИзвещениеОПолучении", Истина);
	Настройки.Вставить("ТребуетсяОтветнаяПодпись",     Истина);
	Настройки.Вставить("РедактироватьПодпись",         Ложь);
	Настройки.Вставить("РедактироватьИзвещение",       Истина);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Истина);
	
	ТипДокумента = ОписаниеВидаДокумента.ТипДокумента;
	
	Если ЭтоПрикладнойТипДокумента(ТипДокумента) Тогда
		НастройкиПрикладныхФорматов = ИнтеграцияЭДО.НастройкиРегламентаПрикладногоФормата(
			ОписаниеВидаДокумента.ПрикладнойТипДокумента, Формат);
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПрикладныхФорматов);
		Возврат Настройки;
	КонецЕсли;
	
	Настройки.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеПоУмолчанию(ТипДокумента);
	Настройки.ТребуетсяОтветнаяПодпись = ТребуетсяОтветнаяПодписьПоУмолчанию(ТипДокумента);
	Настройки.РедактироватьОтветнуюПодпись = РедактироватьОтветнуюПодпись(ТипДокумента);
	
	Возврат Настройки;
	
КонецФункции

Функция ДокументооборотНастроен(ОбъектУчета) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ОбъектУчета) = Тип("Структура") Тогда
		СтрокаОписания = ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, ОбъектУчета);
		ОписаниеОбъектаУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОписания);
	Иначе
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
		ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	КонецЕсли;
	
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		
		Результат = Ложь;
		
		Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ОтборНастроек = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
			ОтборНастроек.Организация = "&Организация";
			ОписаниеЗапроса = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроек);
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЕстьНастройки
				|ИЗ
				|	НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
				|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
				|		И НастройкиВнутреннегоЭДО.Формировать
				|		И ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
				|		И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
			Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
			
			Если ТипЗнч(ОбъектУчета) = Тип("Структура") Тогда
				ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Метаданные.НайтиПоПолномуИмени(ОбъектУчета.ПолноеИмяМетаданных));
			Иначе 
				ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные());
			КонецЕсли;
			Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
			Запрос.УстановитьПараметр("Организация", СтрокаОписания.Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Результат = Не РезультатЗапроса.Пустой();
		Иначе
			КлючНастроекОтправки = КлючНастроекОтправкиОбъектаУчета(СтрокаОписания);
			Настройки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
			Если ЗначениеЗаполнено(Настройки) И Настройки.Формировать Тогда
				Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
					Результат = Истина;
				Иначе
					Результат = СинхронизацияЭДО.ДокументооборотНастроен(Настройки.ИдентификаторОтправителя,
						Настройки.ИдентификаторПолучателя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если хотя бы по одному описанию объекта учета документооборот не настроен, возвращаем Ложь.
		Если Не Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу настроек отправки по переданному набору объектов учета.
// 
// Параметры:
// 	ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета
// Возвращаемое значение:
// 	Соответствие - настройки переданных объектов учета:
//   * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета из переданного массива.
//   * Значение - Неопределено - в случае, если настроек не существует, либо передан объект учета, по которому не могут
//                              быть созданы внешние электронные документы.
//              - Структура - настройки с ключами:
//    ** Отправитель - ОпределяемыйТип.Организация
//    ** Получатель - ОпределяемыйТип.УчастникЭДО
//    ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//    ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** Формат - Строка
//    ** ИдентификаторОтправителя - Строка
//    ** ИдентификаторПолучателя - Строка
//    ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//    ** ТребуетсяОтветнаяПодпись - Булево
//    ** ТребуетсяИзвещениеОПолучении - Булево
//    ** ВыгружатьДополнительныеСведения - Булево
//    ** ВерсияФорматаУстановленаВручную - Булево
//    ** Формировать - Булево
//    ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//    ** ЗаполнениеКодаТовара - Строка
//    ** ОбменБезПодписи - Булево
//    ** ГотовностьКОбмену - Булево
//    ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа
//
Функция НастройкиОтправкиОбъектовУчета(ОбъектыУчета) Экспорт
	
	Результат = Новый Соответствие();
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.Договор КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ОписанияОбъектовУчета
		|ИЗ
		|	&ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Отправитель,
		|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	НастройкиОтправки.Договор КАК Договор,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	НастройкиОтправки.ВерсияФормата КАК Формат,
		|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправки.СпособОбменаЭД КАК СпособОбмена,
		|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправки.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправки.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправки.ОбменБезПодписи КАК ОбменБезПодписи,
		|	НастройкиОтправки.Формировать КАК Формировать,
		|	НастройкиОтправки.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправки.Отправитель
		|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправки.Получатель
		|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправки.ВидДокумента
		|		И НастройкиОтправки.Договор В (ОписанияОбъектовУчета.ДоговорКонтрагента, &ПустойДоговор)
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление В (&НаправленияНастроекОтправки)
		|УПОРЯДОЧИТЬ ПО
		|	Договор УБЫВ";
	
	НаправленияНастроекОтправки = Новый Массив();
	НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Исходящий);
	Если НастройкиЭДО.ОбменЭлектроннымиДокументамиМеждуОрганизациями() Тогда
		НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Интеркампани);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаправленияНастроекОтправки", НаправленияНастроекОтправки);
	Запрос.УстановитьПараметр("ОписанияОбъектовУчета", ОписанияОбъектовУчета);
	Запрос.УстановитьПараметр("ПустойДоговор", 
		Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Результат[Выборка.ОбъектУчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройка = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
		Настройка.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(Настройка, Выборка);
		Результат.Вставить(Выборка.ОбъектУчета, Настройка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусДокумента

Функция СтатусДокумента(ЭлектронныйДокумент) Экспорт
	
	Результат = "";
	
	Статусы = ДоступныеСтатусыДокумента();
	
	СостояниеДокумента = СостояниеДокумента(ЭлектронныйДокумент);
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		Результат = Статусы.Утвержден;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Результат = Статусы.Отклонен;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		Результат = ?(ЭтоВходящийЭДО(ЭлектронныйДокумент), Статусы.УтверждениеВОбработке, Статусы.ВОбработке);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		Результат = Статусы.ВОбработке;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		Результат = Статусы.Получен;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеПолучен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Результат = Статусы.НеНачат;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Результат = Статусы.ОтклонениеВОбработке;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		Результат = Статусы.Ошибка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Обработка состояний для извещения о получении информации отправителя.
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСостоянияСообщений();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	СостоянияДокументовЭДО = Запрос.Выполнить().Выгрузить();
	
	ЕстьПодтверждениеИнформацииОтправителя = Ложь;
	ЕстьПредложениеОбАннулировании = Ложь;
	ЕстьУведомлениеОбУточнении = Ложь;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СостоянияДокументовЭДО Цикл
		
		Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден
			ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
				И (СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен
					ИЛИ СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Получен) Тогда
			ЕстьПодтверждениеИнформацииОтправителя = Истина;
		ИначеЕсли СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			ЕстьПредложениеОбАннулировании = Истина;
		ИначеЕсли СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(СтрокаТаблицы.ТипЭлементаРегламента)) Тогда
			ЕстьУведомлениеОбУточнении = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПредложениеОбАннулировании
		ИЛИ ЕстьУведомлениеОбУточнении Тогда
		Результат = Статусы.ОтклонениеВОбработке;
	ИначеЕсли ЕстьПодтверждениеИнформацииОтправителя
		ИЛИ Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТребуетсяПодтверждение") Тогда
		Результат = Статусы.Утвержден;
	Иначе
		Результат = ?(ЭтоВходящийЭДО(ЭлектронныйДокумент), Статусы.УтверждениеВОбработке, Статусы.ВОбработке);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеДокумента

// Возвращает начальное состояние исходящего электронного документа.
// 
// Возвращаемое значение:
// 	ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
Функция НачальноеСостояниеДокумента() Экспорт
	
	Возврат РегламентыЭДО.НачальноеСостояниеДокумента();
	
КонецФункции

// Возвращает текущее состояния документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// Возвращаемое значение:
// 	см. ФорматыЭлектронныхДокументов.СостояниеДокумента
Функция СостояниеДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РегламентыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Состояние;
	
КонецФункции

Функция СостояниеДокументаПодробное(ЭлектронныйДокумент) Экспорт
	
	Состояние = Новый Структура;
	Состояние.Вставить("Значение", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Состояние.Вставить("Дополнение", "");
	Состояние.Вставить("ДатаИзменения", '00010101');
	Состояние.Вставить("Комментарий", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Значение,
		|	СостоянияДокументовЭДО.СостояниеДополнение КАК Дополнение,
		|	СостоянияДокументовЭДО.ДатаИзменения КАК ДатаИзменения,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Состояние, Выборка);
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция ЗапросСостоянийДокументов(ИмяВременнойТаблицы, ИмяПараметраЭлектронныйДокумент) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК Ссылка,
	|	СостоянияДокументовЭДО.Состояние КАК Состояние,
	|	СостоянияДокументовЭДО.СостояниеДополнение КАК СостояниеДополнение
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|ГДЕ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент В(&ЭлектронныйДокумент)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭлектронныйДокумент", ИмяПараметраЭлектронныйДокумент);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// См. РегламентыЭДО.СостоянияЗавершенногоЭДО().
Функция СостоянияЗавершенногоЭДО() Экспорт
	
	Возврат РегламентыЭДО.СостоянияЗавершенногоЭДО();
	
КонецФункции

// Функция возвращает электронные документы (из переданных), по которым не завершен документооборот.
//
// Параметры:
// 	ЭлектронныеДокументы - Массив - Электронные документы.
// Возвращаемое значение:
// 	Массив - Электронные документы, по которым не завершен документооборот.
//
Функция НезавершенныеДокументы(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.УстановитьПараметр("СостоянияЗавершенногоЭДО", РегламентыЭДО.СостоянияЗавершенногоЭДО());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|ГДЕ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
	|	И СостоянияДокументовЭДО.Состояние НЕ В (&СостоянияЗавершенногоЭДО)";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостоянияДокументов(ЭлектронныеДокументы) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.Состояние);
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СхемаРегламента

// См. РегламентыЭДО.НоваяСхемаРегламента
Функция НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы = Неопределено) Экспорт
	
	Возврат РегламентыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	
КонецФункции

// См. РегламентыЭДО.ЭлементыСхемыРегламентаБезДанных
Функция ЭлементыСхемыРегламентаБезДанных(СхемаРегламента) Экспорт
	
	Возврат РегламентыЭДО.ЭлементыСхемыРегламентаБезДанных(СхемаРегламента);
	
КонецФункции

Функция ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент) Экспорт
	Запрос = Новый Запрос(ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО(ЭлектронныйДокумент)));
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ПредставлениеДокумента

// Возвращает пустые свойства электронного документа для формирования представления.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
Функция НовыеСвойстваПредставленияДокумента() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Свойства.Вставить("НомерДокумента", "");
	Свойства.Вставить("ДатаДокумента", Дата(1,1,1));
	Возврат Свойства;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Значение - см. НовыеСвойстваПредставленияДокумента
Функция СвойстваДокументовДляПредставления(ЭлектронныеДокументы) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы,
		"ВидДокумента, НомерДокумента, ДатаДокумента");
КонецФункции

// Получение представления по свойствам электронного документа.
//
// Параметры:
//  СвойстваДокумента - Структура - параметры из которых формируется представление документа:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//  * НомерДокумента - Строка - номер электронного документа.
//  * ДатаДокумента - Дата - дата электронного документа.
//  ЭтоНовый - Булево
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый = Ложь) Экспорт
	Возврат ЭлектронныеДокументыЭДОКлиентСервер.ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый);
КонецФункции

Функция ЗапросПараметровПредставленияДокументов(ИмяВременнойТаблицы, ИмяПараметраСообщенияЭДО) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ВидСообщения КАК ВидДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&СообщенияЭДО)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СообщенияЭДО", ИмяПараметраСообщенияЭДО);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Процедура ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение) Экспорт
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеДляШтампа = ДанныеДляШтампаЭлектроннойПодписи(Сообщение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение.ЭлектронныйДокумент, "СпособОбмена");
		Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(СпособОбмена) Тогда
			МодульЭлектронноеАктированиеЕИС.ПриФормированииШтампаЭлектроннойПодписи(ДанныеДляШтампа);
		КонецЕсли;
	КонецЕсли;
	
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписи(ДанныеДляШтампа);
	Если Штамп.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.ПрисоединитьОбластьКТабличномуДокументу(ТабличныйДокумент, Штамп, "Штамп");
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеОбъектаУчета

// Возвращает описание набора электронных документов по основанию.
// 
// Параметры:
//  ИсточникДанных - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - Неопределено - если отбор по виду документа не требуется.
//               - СправочникСсылка.ВидыДокументовЭДО - значение отбора описаний электронных документов.
// 
// Возвращаемое значение:
//  См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
Функция ОписаниеОбъектаУчета(ОбъектУчета, ВидДокумента = Неопределено) Экспорт
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	Если Не ЗначениеЗаполнено(ОписаниеОбъектаУчета)
		ИЛИ Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ОписаниеОбъектаУчета;
	КонецЕсли;
	
	Отбор = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "ТипДокумента, ПрикладнойТипДокумента");
	Возврат ОписаниеОбъектаУчета.Скопировать(Отбор);
	
КонецФункции

#КонецОбласти

#Область ОписаниеСообщения

// Возвращает пустое описание сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ДополнительнаяИнформация - Строка - сопроводительная записка к сообщению.
//  * Данные - См. ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету
//  * УстановленныеПодписи - Массив из см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция НовоеОписаниеСообщения() Экспорт
	ОписаниеСообщения = Новый Структура;
	ОписаниеСообщения.Вставить("ВидСообщения", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("ДополнительнаяИнформация", "");
	ОписаниеСообщения.Вставить("Данные", ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету());
	ОписаниеСообщения.Вставить("УстановленныеПодписи", Новый Массив);
	Возврат ОписаниеСообщения;
КонецФункции

Функция ОписаниеСообщенияОтправителя(ОбъектУчета, ДанныеОбъектаУчета, НастройкиОтправки, ЗначенияДополнительныхПолей = Неопределено) Экспорт
	
	ЭтоИнтеркампани = СинхронизацияЭДО.ЭтоИнтеркампани(НастройкиОтправки.СпособОбмена);
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(НастройкиОтправки.СпособОбмена) Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		ОписаниеВидаДокумента = ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВидаДокумента.ТипДокумента) Тогда
			Возврат МодульОбменСГИСЭПД.ОписаниеСообщенияОтправителя(ОбъектУчета, НастройкиОтправки);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
	
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ДанныеДокумента = ДанныеОбъектаУчета;
	ДанныеДляФормирования.ЗначенияДополнительныхПолей = ЗначенияДополнительныхПолей;
	
	Если ДанныеДляФормирования.Свойство("Участники") Тогда
		
		ДанныеДляФормирования.Участники.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
		ДанныеДляФормирования.Участники.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
		
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			
			СведенияОбОператоре = МодульЭлектронноеАктированиеЕИС.ОператорЭДОФедеральногоКазначейства();
			ДанныеДляФормирования.Участники.Оператор.Наименование = СведенияОбОператоре.Наименование;
			ДанныеДляФормирования.Участники.Оператор.ИНН = СведенияОбОператоре.ИНН;
			ДанныеДляФормирования.Участники.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
			
		Иначе
			
			Если Не ЭтоИнтеркампани И ДанныеДляФормирования.Участники.Свойство("Оператор") Тогда
				
				СведенияОбОператоре = СинхронизацияЭДО.СведенияОбОператоре(НастройкиОтправки.ИдентификаторОтправителя);
				ДанныеДляФормирования.Участники.Оператор.Наименование = СведенияОбОператоре.Наименование;
				ДанныеДляФормирования.Участники.Оператор.ИНН = СведенияОбОператоре.ИНН;
				ДанныеДляФормирования.Участники.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеВидаДокумента = ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
	
	НастройкиФормирования = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
	НастройкиФормирования.ТипДокумента = ОписаниеВидаДокумента.ТипДокумента;
	НастройкиФормирования.Формат = НастройкиОтправки.Формат;
	НастройкиФормирования.Организация = НастройкиОтправки.Отправитель;
	НастройкиФормирования.Контрагент = НастройкиОтправки.Получатель;
	НастройкиФормирования.Договор = НастройкиОтправки.Договор;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеОсновногоТитулаПоОбъектуУчета(ОбъектУчета,
		НастройкиФормирования, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = ?(ЭтоИнтеркампани, Перечисления.НаправленияЭДО.Интеркампани,
		Перечисления.НаправленияЭДО.Исходящий);
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

Функция ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета, НастройкиОтправки, ПрикладнойТипДокумента) Экспорт
	
	Данные = ФорматыЭДО.НовыеДанныеДляФормированияПрикладногоДокумента();	
	
	Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	Данные.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
	Данные.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
	Данные.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеПрикладногоДокумента(
		ОбъектУчета, Данные);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

Функция ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета, НастройкиВнутреннегоЭДО) Экспорт
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Внутренний;
	ОписаниеСообщения.ВидСообщения = НастройкиВнутреннегоЭДО.ВидДокумента;
	ОписаниеСообщения.Данные = ВнутренниеДокументыЭДО.СформироватьДанныеВнутреннегоДокумента(
		ОбъектУчета, НастройкиВнутреннегоЭДО);
	
	Возврат ОписаниеСообщения;
	
КонецФункции

Функция НовоеСодержаниеСообщения() Экспорт
	Возврат ФорматыЭДО.НовоеОписаниеФайлаДокумента();
КонецФункции

#КонецОбласти

#Область ДанныеСообщения

Функция ПредставлениеДанныхСообщения(ВидДокумента, ДанныеФайла, ДанныеФайлаОтвета = Неопределено, ПараметрыВизуализации = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	ОписаниеВида = ОписаниеВидаДокумента(ВидДокумента);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
		ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ПрикладнойТипДокумента;
		
		Возврат ИнтеграцияЭДО.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВида.ТипДокумента) Тогда
		
		Возврат МодульОбменСГИСЭПД.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла);
		
	Иначе
		Возврат ФорматыЭДО.ПредставлениеДанныхДокумента(ДанныеФайла, ДанныеФайлаОтвета, ПараметрыВизуализации,
			КонтекстДиагностики);
	КонецЕсли;
	
КонецФункции

// Формирует представление данных сообщения.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Сообщение для которого формируется представление.
// 	СообщениеОтвета - ДокументСсылка.СообщениеЭДО, Массив - Информация получателя для сообщения, переданного первым параметром,
// 		или массив сообщений для извлечения параметров.
// 	ПараметрыВизуализации - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
//	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
//
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - ТабличныйДокумент, Неопределено - Табличный с представлением.
//   * Успех - Булево - Табличный документ сформирован.
//
Функция ПредставлениеДанныхСообщенияПоСсылке(Сообщение, СообщениеОтвета = Неопределено, СообщениеЗапроса = Неопределено, 
	ПараметрыВизуализации = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	СвойстваСообщения = СвойстваСообщения(Сообщение, "ОсновнойФайл, ВидСообщения");
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(СвойстваСообщения.ОсновнойФайл);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ИмяФайла = ДанныеФайла.Наименование;
	ОписаниеВида = ОписаниеВидаДокумента(СвойстваСообщения.ВидСообщения);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		Если ЗначениеЗаполнено(ПараметрыВизуализации) Тогда
			ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
			ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		КонецЕсли;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ПрикладнойТипДокумента;
		ПараметрыПредставления.ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваСообщения.ОсновнойФайл);
		
		Возврат ИнтеграцияЭДО.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДвоичныеДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли (ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОбОшибкеЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.КвитанцияЕИС)
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		Если ЗначениеЗаполнено(ПараметрыВизуализации) Тогда
			ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
			ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		КонецЕсли;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ТипДокумента;
		ПараметрыПредставления.ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваСообщения.ОсновнойФайл);
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		Возврат МодульПодсистемы.СоздатьРезультатПредставленияДокументаЕИС(ДвоичныеДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		Или ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(ИмяФайла) Тогда
		
		ДвоичныеДанныеФайла = ДвоичныеДанныеСообщения(Сообщение);
		
		Возврат МашиночитаемыеДоверенности.ТабличныйДокументМЧД(ДвоичныеДанныеФайла, Истина);
	
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
		Или ФорматыЭДО_ФНС.ЭтоПространствоИменАктСверкиВзаиморасчетов(ИмяФайла) Тогда	
		
		ДвоичныеДанныеФайлаЗапроса = Неопределено;

		Если ЗначениеЗаполнено(СообщениеЗапроса) Тогда
			СвойстваСообщения = СвойстваСообщения(СообщениеЗапроса, "ОсновнойФайл");
			ДвоичныеДанныеФайлаЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(СвойстваСообщения.ОсновнойФайл);
		КонецЕсли;

		Возврат ФорматыЭДО.ПредставлениеДанныхДокумента(ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаЗапроса, 
			ПараметрыВизуализации, КонтекстДиагностики);
	
	ИначеЕсли МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВида.ТипДокумента) Тогда
		
		Возврат МодульОбменСГИСЭПД.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДвоичныеДанныеФайла);
			
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда	
		
		Возврат ВнутренниеДокументыЭДО.ПредставлениеДанныхВнутреннегоДокумента(ДвоичныеДанныеФайла);
		
	Иначе
		ДвоичныеДанныеФайлаОтвета = Неопределено;

		Если ЗначениеЗаполнено(СообщениеОтвета) Тогда
			Если ТипЗнч(СообщениеОтвета) = Тип("Массив") Тогда
				ДвоичныеДанныеФайлаОтвета = Новый Массив;
				ФалыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СообщениеОтвета, "ОсновнойФайл");
				Для Каждого ФайлСообщения Из ФалыСообщений Цикл
					ДанныеФайлаСообщения = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСообщения.Значение);
					ДвоичныеДанныеФайлаОтвета.Добавить(ДанныеФайлаСообщения);
				КонецЦикла;	
			Иначе	
				СвойстваСообщения = СвойстваСообщения(СообщениеОтвета, "ОсновнойФайл");
				ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(СвойстваСообщения.ОсновнойФайл);
			КонецЕсли;
		КонецЕсли;

		Возврат ФорматыЭДО.ПредставлениеДанныхДокумента(ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета,
			ПараметрыВизуализации, КонтекстДиагностики);
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеДанныхВнутреннегоСообщения(ДвоичныеДанныеАрхива) Экспорт
	
	Возврат ВнутренниеДокументыЭДО.ПредставлениеДанныхВнутреннегоДокумента(ДвоичныеДанныеАрхива);
	
КонецФункции

// Формирует табличный документ карточки электронного документа.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО
//  ОтветноеСообщение - ДокументСсылка.СообщениеЭДО, Неопределено - Ответное сообщение ЭДО
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Представление карточки сообщения
Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СообщениеЭДО.ВидСообщения) КАК ВидДокументаПредставление,
		|	СообщениеЭДО.ЭлектронныйДокумент.Номер КАК НомерДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.Дата КАК ДатаДокумента,
		|	СообщениеЭДО.ДополнительнаяИнформация КАК СопроводительнаяЗаписка,
		|	СообщениеЭДО.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	СообщениеЭДО.ЭлектронныйДокумент.Организация КАК Организация,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	СообщениеЭДО.ОсновнойФайл КАК ФайлСсылка,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ОсновнойФайл.Расширение КАК РасширениеФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Сообщение";
	
	Запрос.Параметры.Вставить("Сообщение", Сообщение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Документ.СообщениеЭДО.ПФ_MXL_КарточкаЭД_%1",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Выборка.Следующий() Тогда
	
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапка.Параметры.ИмяФайла = Выборка.ПолноеИмяФайла;
		ОбластьШапка.Параметры.НомерДокумента = Выборка.НомерДокумента;
		ОбластьШапка.Параметры.ДатаДокумента = Выборка.ДатаДокумента;
		
		Если Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			Отправитель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Организация);
			Получатель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Контрагент);
		Иначе
			Отправитель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Контрагент);
			Получатель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Организация);
		КонецЕсли;
		
		ОбластьШапка.Параметры.Отправитель = Отправитель;
		ОбластьШапка.Параметры.Получатель = Получатель;
		
		Файл = Новый Файл(Выборка.ПолноеИмяФайла);
		ОбластьШапка.Параметры.Идентификатор = Файл.ИмяБезРасширения;
		ОбластьШапка.Параметры.ВидДокумента = Выборка.ВидДокументаПредставление;

		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьШапка, "Шапка");
		
		Если ЗначениеЗаполнено(Выборка.СопроводительнаяЗаписка) Тогда
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("СопроводительнаяЗаписка");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(Выборка);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
				ОбластьСопроводительнаяЗаписка, "СопроводительнаяЗаписка");
		КонецЕсли;
		
		ОбластьТребуемыеПодписи = Макет.ПолучитьОбласть("ТребуемыеПодписи");
		
		ПодписьОтправителя = Отправитель;
		ПодписьПолучателя = ?(Выборка.ТребуетсяПодтверждение, Получатель, НСтр("ru = 'Не требуется'"));
			
		ОбластьТребуемыеПодписи.Параметры.ПредставлениеОтправителя = ПодписьОтправителя;
		ОбластьТребуемыеПодписи.Параметры.ПредставлениеПолучателя = ПодписьПолучателя;
		
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьТребуемыеПодписи, "ТребуемыеПодписи");

		УстановленныеПодписи = УстановленныеПодписиСУчетомДоверенностей(Сообщение);
		
		Если ЗначениеЗаполнено(ОтветноеСообщение) Тогда
			ОтветныеПодписи = УстановленныеПодписиСУчетомДоверенностей(ОтветноеСообщение);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УстановленныеПодписи, ОтветныеПодписи);
		КонецЕсли;
		
		ЕстьПодписиПоДоверенности = Ложь;
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			ИнтерфейсДокументовЭДО.СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись.СвойстваПодписи);
			Если Подпись.ЭтоПодписьПоДоверенности Тогда
				ЕстьПодписиПоДоверенности = Истина;
			КонецЕсли;
		КонецЦикла;

		ОбластьСертификатыЗаголовок = Макет.ПолучитьОбласть("СертификатыЗаголовок");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
			ТабличныйДокумент, ОбластьСертификатыЗаголовок, "СертификатыЗаголовок");
			
		ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
		Если ЕстьПодписиПоДоверенности Тогда
			ОбластьСертификаты = Макет.ПолучитьОбласть("СертификатыПоДоверенности");
		КонецЕсли;
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьСертификаты, "Сертификаты");
		
		Если ЗначениеЗаполнено(УстановленныеПодписи) Тогда
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Если ЕстьПодписиПоДоверенности Тогда
				ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрокаПоДоверенности");
			КонецЕсли;
			НомерСтроки = 1;
			
			Для Каждого Подпись Из УстановленныеПодписи Цикл
				
				ОбластьСертификатыСтрока.Параметры.Заполнить(Подпись.СвойстваПодписи);
				ЕстьДоверенность = Ложь;
				
				Если ЕстьПодписиПоДоверенности Тогда
					ОбластьСертификатыСтрока.Параметры.Доверенность = "";
				КонецЕсли;
				 
				Если Подпись.ЭтоПодписьПоДоверенности Тогда 
					ЕстьДоверенность = Подпись.СвойстваДоверенности <> Неопределено;
					Если ЕстьДоверенность Тогда
						ОбластьСертификатыСтрока.Параметры.Доверенность =
							СтрШаблон("%1%2%3-%4",
								Подпись.СвойстваДоверенности.НомерДоверенности,
								Символы.ПС,
								Формат(Подпись.СвойстваДоверенности.ДатаВыдачи, "ДЛФ=D"),
								Формат(Подпись.СвойстваДоверенности.ДатаОкончания, "ДЛФ=D"));
					Иначе
						ОбластьСертификатыСтрока.Параметры.Доверенность = НСтр("ru='Доверенность не найдена'"); 
					КонецЕсли;
				КонецЕсли;
				
				ОбластьСертификатыСтрока.Параметры.КомуВыдан = Подпись.СвойстваПодписи.Владелец;
				ОбластьСертификатыСтрока.Параметры.Сертификат = Подпись.СвойстваПодписи.Владелец;
				
				ПодписьВерна = Подпись.СвойстваПодписи.ПодписьВерна;
				
				Если Подпись.ЭтоПодписьПоДоверенности Тогда
					
					ПодписьВернаПоДоверенности = Ложь;
					
					Если ЗначениеЗаполнено(Подпись.РезультатПроверкиПоМЧД) Тогда
						ПодписьВернаПоДоверенности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
							Подпись.РезультатПроверкиПоМЧД, "ПодписьВерна", Ложь);
					КонецЕсли;
					
					ПодписьВерна = ПодписьВерна И ПодписьВернаПоДоверенности;
					
				КонецЕсли;
				
				СтатусПодписи = ?(ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"));
				СимволРазделитель = ?(ЕстьДоверенность, Символы.ПС, " ");
				ДатаПроверки = "(" + Формат(Подпись.СвойстваПодписи.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
				ОбластьСертификатыСтрока.Параметры.Статус = СтатусПодписи + СимволРазделитель + ДатаПроверки;

				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьСертификатыСтрока,
					"СертификатыСтрока", НомерСтроки);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.ТекущаяДата = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьПодпись, "Подпись");
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Очищает дополнительную информацию (сопроводительную записку) для указанного электронного документа.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
Процедура ОчиститьДополнительнуюИнформациюСообщения(Сообщение) Экспорт
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.ДополнительнаяИнформация = "";
	СообщениеОбъект.Записать();
КонецПроцедуры

// Получает информацию о товаре из файла электронного документа.
//
// Параметры:
//  ПараметрыПолучения - см. ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента.
// Возвращаемое значение:
// 	См. ФорматыЭДО.ИнформацияОТовареИзФайла.
Функция ДанныеНоменклатурыДокумента(ПараметрыПолучения) Экспорт

	Возврат ФорматыЭДО.ИнформацияОТовареИзФайла(ПараметрыПолучения);

КонецФункции

// Получает информацию по данным электронного документа.
//
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
// Возвращаемое значение:
// 	См. КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента.
Функция РаспознатьСообщение(Сообщение) Экспорт
	
	ДвоичныеДанные = ДвоичныеДанныеСообщения(Сообщение);
	
	Возврат КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные);
	
КонецФункции


Функция ЭтоСводныйУПД(ДвоичныеДанные) Экспорт
	Возврат ФорматыЭДО.ЭтоСводныйУПД(ДвоичныеДанные);
КонецФункции

// Возвращает ссылку на электронный документ по сообщению.
//
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
// 	ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, 
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат СвойстваСообщения(Сообщение, "ЭлектронныйДокумент").ЭлектронныйДокумент;
КонецФункции

Функция СообщениеОтправлено(Статус) Экспорт
	Возврат Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен
		ИЛИ Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
КонецФункции

// Получает описание сообщения по двоичным данным.
//
// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
// Возвращаемое значение:
// 	См. ФорматыЭДО.ПрочитатьСодержаниеДокумента.
Функция СодержаниеСообщения(ОписаниеФайла) Экспорт

	Возврат ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	
КонецФункции

Функция ЭтоСлужебныйСообщение(Сообщение) Экспорт
	ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ТипЭлементаРегламента");
	Возврат РегламентыЭДО.ЭтоСлужебноеСообщение(ТипЭлементаРегламента);
КонецФункции

Функция ДокументыСообщений(Сообщения) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сообщения, "ЭлектронныйДокумент", Истина);
КонецФункции

// Возвращает данные кратких наименованиях типов сообщений ЭДО.
//
// Параметры:
// 	Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// 	 * Ключ - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО.
// 	 * Значение - Строка - Краткое наименование типа сообщения.
Функция ТипыСообщенийКратко(Сообщения) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка,
	|	СообщениеЭДО.ТипЭлементаРегламента
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.Ссылка В (&Сообщения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТипСообщенияКратко = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипЭлементаРегламента);
		Результат.Вставить(Выборка.Ссылка, ТипСообщенияКратко);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеДокумента

Функция ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныйДокументВходящийЭДО.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента
		|	КОНЕЦ КАК ТипДокумента,
		|	СообщениеЭДО.Представление КАК Представление,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Отправитель,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Получатель,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторОтправителя,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторПолучателя,
		|	ПрисоединенныеФайлы.Ссылка КАК ОсновнойФайл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ИмяОсновногоФайла,
		|	ПрисоединенныеФайлыДоп.Ссылка КАК ДополнительныйФайл,
		|	ПрисоединенныеФайлыДоп.ПолноеИмяФайла КАК ИмяДополнительногоФайла,
		|	СостоянияЭДО.Состояние КАК СостояниеДокумента,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)
		|		И (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
		|		И (ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СостоянияЭДО.ЭлектронныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлыДоп
		|		ПО (ПрисоединенныеФайлыДоп.ВладелецФайла = СообщениеЭДО.Ссылка)
		|		И (ПрисоединенныеФайлыДоп.Ссылка <> СообщениеЭДО.ОсновнойФайл)
		|		И НЕ ПрисоединенныеФайлыДоп.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ВЫБОР
		|		КОГДА
		|			ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента
		|	КОНЕЦ,
		|	СообщениеЭДО.Представление,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента,
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлыДоп.Ссылка,
		|	ПрисоединенныеФайлыДоп.ПолноеИмяФайла,
		|	СостоянияЭДО.Состояние,
		|	СообщениеЭДО.Направление
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО   
		|		ПО СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)
		|		И (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
		|		И (ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО (СообщениеЭДО.ЭлектронныйДокумент = СостоянияЭДО.ЭлектронныйДокумент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлыДоп
		|		ПО (ПрисоединенныеФайлыДоп.ВладелецФайла = СообщениеЭДО.Ссылка)
		|		И (ПрисоединенныеФайлыДоп.Ссылка <> СообщениеЭДО.ОсновнойФайл)
		|		И НЕ ПрисоединенныеФайлыДоп.ПометкаУдаления";
	
	Запрос.Параметры.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.Параметры.Вставить("ТитулыОтправителя", ТитулыОтправителя);
	
	НаборДанных = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Данные = НовыеДанныеДокументовДляОтраженияВУчете();
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		Данные.ДанныеОсновногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл);
		Данные.ДанныеОсновногоФайла.ИмяФайла = Выборка.ИмяОсновногоФайла;
		Если ЗначениеЗаполнено(Выборка.ДополнительныйФайл) Тогда
			Данные.ДанныеДополнительногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ДополнительныйФайл);
			Данные.ДанныеДополнительногоФайла.ИмяФайла = Выборка.ИмяДополнительногоФайла;
		КонецЕсли;
		
		НаборДанных.Добавить(Данные);
		
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

Функция СведенияСообщенияУчастникаЭДО(ЭлектронныйДокумент) Экспорт
		
	Подписи = Новый ТаблицаЗначений;
	Подписи.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Подписи.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Подписи.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("ОписаниеВидаДокумента", Новый Структура);
	Сведения.ОписаниеВидаДокумента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Сведения.ОписаниеВидаДокумента.Вставить("ПрикладнойТипДокумента", Неопределено);
	Сведения.ОписаниеВидаДокумента.Вставить("ИдентификаторКомандыПечати", "");
	
	Сведения.Вставить("Подписи", Подписи);
	Сведения.Вставить("ОбъектыУчета", Новый Массив);
	Сведения.Вставить("Актуальный", Ложь);
	Сведения.Вставить("СодержитМаркируемыеТовары", Ложь);
	
	Сведения.Вставить("Сообщения", Новый Структура);
	Сведения.Сообщения.Вставить("ДанныеОтправителя", Новый Структура);
	Сведения.Сообщения.ДанныеОтправителя.Вставить("ИмяФайлаБезРасширения", "");
	Сведения.Сообщения.ДанныеОтправителя.Вставить("Расширение", "");
	Сведения.Сообщения.Вставить("ДанныеПолучателя", Новый Структура);
	Сведения.Сообщения.ДанныеПолучателя.Вставить("ИмяФайлаБезРасширения", "");
	Сведения.Сообщения.ДанныеПолучателя.Вставить("Расширение", "");
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
			|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
			|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
			|	ЭлектронныйДокументВходящийЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
			|		И ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	Иначе
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
			|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
			|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
			|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
			|		И ЭлектронныйДокументИсходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ТипЭлементаРегламента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)");
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат Сведения;
	КонецЕсли;
	
	ВыборкаОписанияВида = РезультатыЗапроса[0].Выбрать();
	ВыборкаОписанияВида.Следующий();
	ЗаполнитьЗначенияСвойств(Сведения.ОписаниеВидаДокумента, ВыборкаОписанияВида);
	ЗаполнитьЗначенияСвойств(Сведения, ВыборкаОписанияВида);
	
	ВыборкаОбъектовУчета = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОбъектовУчета.Следующий() Цикл
		Сведения.ОбъектыУчета.Добавить(ВыборкаОбъектовУчета.ОбъектУчета);
		Если ВыборкаОбъектовУчета.Актуальный Тогда
			Сведения.Актуальный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Сведения.Актуальный = Не РезультатыЗапроса[1].Пустой();
	
	ВыборкаФайлов = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаФайлов.Следующий() Цикл
		Если ВыборкаОписанияВида.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ПростыеПодписи = УстановленныеПростыеПодписи(ВыборкаФайлов.Ссылка);
			Для Каждого СвойстваПодписи Из ПростыеПодписи Цикл
				СтрокаПодписи = Сведения.Подписи.Добавить();
				СтрокаПодписи.Подписант = СвойстваПодписи.УстановившийПодпись;
				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
				СтрокаПодписи.Владелец = СвойстваПодписи.ВладелецПодписи;
			КонецЦикла;
		Иначе
			ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаФайлов.Ссылка);
			Для Каждого СвойстваПодписи Из ЭлектронныеПодписи Цикл
				СтрокаПодписи = Сведения.Подписи.Добавить();
				СтрокаПодписи.Подписант = СвойстваПодписи.УстановившийПодпись;
				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
				СтрокаПодписи.Владелец = СвойстваПодписи.КомуВыданСертификат;
			КонецЦикла;
		КонецЕсли;
		
		// Заполним сведения о сообщениях
		Если ВыборкаФайлов.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ТипЭлементаРегламента = "ДанныеОтправителя";
		Иначе
			ТипЭлементаРегламента = "ДанныеПолучателя";			
		КонецЕсли;
		
		СведенияОИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыборкаФайлов.ПолноеИмяФайла);
		ЭлементСведений = Сведения.Сообщения[ТипЭлементаРегламента]; 
		ЭлементСведений.ИмяФайлаБезРасширения = СведенияОИмениФайла.ИмяБезРасширения;
		ЭлементСведений.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОИмениФайла.Расширение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Сведения.Сообщения.ДанныеПолучателя.ИмяФайлаБезРасширения) Тогда
		Сведения.Сообщения.ДанныеПолучателя = Неопределено;
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция ЕстьОтклонениеАннулирования(ЭлектронныйДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПОА_УОУ)
		|	И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

Функция СообщениеОтправителя(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Функция ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОсновнойФайл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	СообщениеЭДО.Ссылка КАК СообщениеЭДО,
	|	ПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ВнутреннийДокументАктуален(ОбъектУчета, ВидДокумента, ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК Файл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанныеАрхива = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Файл);
	
	Возврат ВнутренниеДокументыЭДО.ВнутреннийДокументооборотАктуален(ОбъектУчета,
		ВидДокумента, ДвоичныеДанныеАрхива);
	
КонецФункции

Функция ПредставлениеДокумента(ЭлектронныйДокумент, СвойстваДокумента = Неопределено) Экспорт
	
	Если СвойстваДокумента = Неопределено Тогда
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"ВидДокумента, НомерДокумента, ДатаДокумента, ВидДокумента.ТипДокумента");
	КонецЕсли;
	
	Если СвойстваДокумента.Свойство("ВидДокументаТипДокумента") Тогда
		ТипДокумента = СвойстваДокумента.ВидДокументаТипДокумента;
	ИначеЕсли СвойстваДокумента.Свойство("ТипДокумента") Тогда
		ТипДокумента = СвойстваДокумента.ТипДокумента;
	Иначе
		ВызватьИсключение  НСтр("ru = 'Не определен тип документа'");
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда
		ОсновнойФайл = ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
		СвойстваДокумента.ВидДокумента = Строка(ОсновнойФайл);
	КонецЕсли;
	
	СвойстваДокумента.Удалить("ВидДокументаТипДокумента");
	
	Возврат ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	
КонецФункции

Функция НовыеПараметрыВизуализацииДокумента() Экспорт

	Возврат ФорматыЭДО.НовыеПараметрыВизуализацииДокумента();
	
КонецФункции

Функция СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета) Экспорт
	
	ДанныеДокументов = СинхронизацияЭДО.НовыеДанныеОбъектов();
	
	ОписанияЗапросов = Новый Массив;
	ОписанияЗапросов.Добавить(ИнтеграцияЭДО.ЗапросСведенийПоОбъектамУчетаИУчастникамЭДО(
		ОписанияОбъектовУчета, "СведенияПоОбъектамУчета"));
	ОписанияЗапросов.Добавить(ЗапросАктуальныхФорматов("АктуальныеФорматы"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияПоОбъектамУчета.ОбъектУчета КАК ОбъектУчета,
		|	СведенияПоОбъектамУчета.Направление КАК Направление,
		|	СведенияПоОбъектамУчета.ТипДокумента КАК ТипДокумента,
		|	СведенияПоОбъектамУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	СведенияПоОбъектамУчета.Организация КАК Организация,
		|	СведенияПоОбъектамУчета.Контрагент КАК Контрагент,
		|	СведенияПоОбъектамУчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СведенияПоОбъектамУчета.ОрганизацияИНН КАК ОрганизацияИНН,
		|	СведенияПоОбъектамУчета.ОрганизацияКПП КАК ОрганизацияКПП,
		|	СведенияПоОбъектамУчета.КонтрагентИНН КАК КонтрагентИНН,
		|	СведенияПоОбъектамУчета.КонтрагентКПП КАК КонтрагентКПП,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК ВидДокументаНаименование,
		|	АктуальныеФорматы.Формат
		|ИЗ
		|	СведенияПоОбъектамУчета КАК СведенияПоОбъектамУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СведенияПоОбъектамУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И СведенияПоОбъектамУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеФорматы КАК АктуальныеФорматы
		|		ПО ВидыДокументовЭДО.Ссылка = АктуальныеФорматы.ВидДокумента";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПредставления = НовыеСвойстваПредставленияДокумента();
	
	ТекстОшибки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Настройки = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
		Настройки.ТипДокумента = Выборка.ТипДокумента;
		Настройки.Формат = Выборка.Формат;
		Настройки.ОтключитьРассчетДополнительныхПолей = Истина;
		Настройки.Организация = Выборка.Организация;
		Настройки.Контрагент = Выборка.Контрагент;
		Настройки.Договор = Выборка.ДоговорКонтрагента;
		
		Данные = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
		Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		Данные.Участники.ИдентификаторОтправителя = Выборка.ОрганизацияИНН + ?(ПустаяСтрока(Выборка.ОрганизацияКПП),"",
			"_" + Выборка.ОрганизацияКПП);
		Данные.Участники.ИдентификаторПолучателя = Выборка.КонтрагентИНН + ?(ПустаяСтрока(Выборка.КонтрагентКПП),"",
			"_" + Выборка.КонтрагентКПП);
		
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Настройки);
		ПараметрыФормирования.Отправитель = Настройки.Организация;
		ПараметрыФормирования.Получатель = Настройки.Контрагент;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(Выборка.ОбъектУчета,
			ПараметрыФормирования);
		Данные.ДанныеДокумента = ОписаниеДанных.Данные;
		
		РезультатФормирования = ФорматыЭДО.СформироватьДанныеОсновногоТитулаПоОбъектуУчета(
			Выборка.ОбъектУчета, Настройки, Данные);
		
		Если РезультатФормирования.ЕстьОшибки Тогда
			
			Для Каждого ОписаниеОшибки Из РезультатФормирования.Ошибки.ЗаполнениеДанных Цикл
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС;
				КонецЕсли;	
				ТекстОшибки = ТекстОшибки + ОписаниеОшибки.ТекстОшибки;
				
			КонецЦикла;
				
			Продолжить;	
		КонецЕсли;
		
		Содержание = РезультатФормирования.Содержание;
		
		НовыеДанные = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеДокументов);
		НовыеДанные.Объект = Выборка.ОбъектУчета;
		НовыеДанные.СпособОбмена = Перечисления.СпособыОбменаЭД.БыстрыйОбмен;
		НовыеДанные.ИдентификаторДокументооборота = Строка(Новый УникальныйИдентификатор);
		НовыеДанные.ИдентификаторСообщения = Содержание.ИдентификаторДокумента;
		НовыеДанные.ТипРегламента = Содержание.ТипРегламента;
		НовыеДанные.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
		НовыеДанные.ТипДокумента = Выборка.ТипДокумента;
		НовыеДанные.ВидДокумента = Выборка.ВидДокумента;
		НовыеДанные.ИдентификаторОтправителя = Данные.Участники.ИдентификаторОтправителя;
		НовыеДанные.ИдентификаторПолучателя = Данные.Участники.ИдентификаторПолучателя;
		НовыеДанные.Организация = Выборка.Организация;
		НовыеДанные.Контрагент = Выборка.Контрагент;
		НовыеДанные.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
		
		ОписаниеДокумента = СинхронизацияЭДО.НовоеОписаниеДокумента();
		ОписаниеДокумента.Номер = Содержание.НомерДокумента;
		ОписаниеДокумента.Дата = Содержание.ДатаДокумента;
		ОписаниеДокумента.Сумма = Содержание.СуммаДокумента;
		НовыеДанные.ОписаниеДокумента = ОписаниеДокумента;
		
		НовыеДанные.ОписаниеДанных.ИмяФайла = РезультатФормирования.Документ.ИмяФайла;
		НовыеДанные.ОписаниеДанных.ДвоичныеДанные = РезультатФормирования.Документ.ДвоичныеДанные;
		
		ПараметрыПредставления.ВидДокумента = Выборка.ВидДокументаНаименование;
		ПараметрыПредставления.НомерДокумента = Содержание.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = Содержание.ДатаДокумента;
		НовыеДанные.Представление = ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		
	КонецЦикла;
	
	РезультатФормирования = Новый Структура("ДанныеДокументов, ТекстОшибки", 
		ДанныеДокументов, ТекстОшибки);
	Возврат РезультатФормирования;
	
КонецФункции

Процедура ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(ДокументОбъект, СвязанныеОбъектыУчета) Экспорт
	
	ДокументОбъект.ИдентификаторыОснований.Очистить();
	
	Если Не ЗначениеЗаполнено(СвязанныеОбъектыУчета) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаСвязанныхОбъектовУчета = НоваяТаблицаСвязанныхОбъектовУчета();
	
	Для Каждого ОбъектУчета Из СвязанныеОбъектыУчета Цикл
		СтрокаТаблицы = ТаблицаСвязанныхОбъектовУчета.Добавить();
		СтрокаТаблицы.ОбъектУчета = ОбъектУчета;
	КонецЦикла;
	
	РезультатЗапроса = РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(ТаблицаСвязанныхОбъектовУчета);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.ИдентификаторыОснований.Добавить();
		ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваДокумента(Документ, Свойства) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Свойства);
КонецФункции

// См. ОбменСКонтрагентами.ДанныеЭлектронногоДокумента.
Функция ДанныеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОтправителя");
	Результат.Вставить("ДанныеПолучателя");
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщениеЭДО.ОсновнойФайл,
	|	СообщениеЭДО.ТипЭлементаРегламента,
	|	СообщениеЭДО.Направление
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.ОсновнойФайл);
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл);
		
		Если НРег(ДанныеФайла.Расширение) = "xml" Тогда
			ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайла.ИмяФайла       = ДанныеФайла.ИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
			
			ПараметрыПолученияДанных = ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолученияДанных.Направление = Выборка.Направление;
			ПараметрыПолученияДанных.ОсновнойФайл = ОписаниеФайла;
			ДанныеСообщения = ФорматыЭДО.ДанныеЭлектронногоДокумента(ПараметрыПолученияДанных);
			
			// Для информации отправителя заполним информацию по сопоставлению.
			Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
				И ДанныеСообщения <> Неопределено Тогда
				
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
				ИнтеграцияЭДО.ЗаполнитьНоменклатуруИБВДеревеДокумента(Контрагент, ДанныеСообщения.НовыйЭД);
			КонецЕсли;
						
			СодержаниеСообщения = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
			
			Если ДанныеСообщения <> Неопределено И СодержаниеСообщения <> Неопределено Тогда
				ИмяКлюча = ?(Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
					"ДанныеОтправителя", "ДанныеПолучателя");
				
				Результат[ИмяКлюча] = Новый Структура("Формат, Содержание");
				Результат[ИмяКлюча].Содержание = ДанныеСообщения.НовыйЭД.ЗначениеРеквизита;
				Результат[ИмяКлюча].Формат = СодержаниеСообщения.Формат;
			КонецЕсли;
			
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные файла информации отправителя для предоставления в ФНС.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 	                    - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.  
// Возвращаемое значение:
// 	Структура - данные файла:
// * ИмяФайла - Строка
// * ДвоичныеДанные - ДвоичныеДанные 
// * Размер - Число
// * КНД - Строка - номер по классификатору налоговых документов.
// * УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи 
Функция ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(ЭлектронныйДокумент) Экспорт

	Возврат ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);

КонецФункции

// Формирует данные файла информации получателя для предоставления в ФНС.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 	                    - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.  
// Возвращаемое значение:
// 	Структура - данные файла:
// * ИмяФайла - Строка
// * ДвоичныеДанные - ДвоичныеДанные 
// * Размер - Число
// * КНД - Строка - номер по классификатору налоговых документов.
// * УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи
Функция ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(ЭлектронныйДокумент) Экспорт

	Возврат ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент, 
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);

КонецФункции

// Возвращает текст запроса для выгрузки электронных документов для предоставления в ФНС.
//
// Возвращаемое значение:
// 	Строка - Текст запроса.
//
Функция ТекстЗапросаДляВыгрузкиЭДДляФНС() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
	|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
	|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента НЕ В (&ТипыДокументовЭДОВыгрузкиДляФНС) КАК
	|		ТипДокументаНеПодходитДляВыгрузки,
	|	СообщениеЭДО.Направление КАК НаправлениеЭДО,
	|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокументаЭДО,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот) КАК
	|		ПроверятьДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
	|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
	|	ЭлектронныйДокументИсходящийЭДО.Организация,
	|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
	|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента НЕ В (&ТипыДокументовЭДОВыгрузкиДляФНС),
	|	СообщениеЭДО.Направление,
	|	СообщениеЭДО.ТипЭлементаРегламента,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот)
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
	|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|ИТОГИ
	|ПО
	|	Организация";
	
КонецФункции

// Модифицирует структуру ДанныеФайла,
// заменяя СсылкаНаДвоичныеДанныеФайла 
// или добавляя СсылкаНаДвоичныеДанныеВизуализации.
// 
// Параметры:
// 	ДанныеФайла - см. РаботаСФайлами.ДанныеФайла
// 	УникальныйИдентификатор - УникальныйИдентификатор
// 	ДополнитьФайломВизуализации - Булево
Процедура ПодменитьФайлНаФайлСВизуализацией(
	ДанныеФайла, 
	УникальныйИдентификатор, 
	ДополнитьФайломВизуализации = Ложь) Экспорт
	
	Если НРег(ДанныеФайла.Расширение) <> НРег("pdf") ИЛИ ДанныеФайла.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	ДоступнаРаботаСPDF = Истина;
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияПлатформы);
	Если (ВерсияПлатформыБезНомераСборки = "8.3.16"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.16.1883") < 0)
		Или (ВерсияПлатформыБезНомераСборки = "8.3.17"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.17.2127") < 0)
		Или (ВерсияПлатформыБезНомераСборки = "8.3.18"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.18.1267") < 0) Тогда
		ДоступнаРаботаСPDF = Ложь;
	КонецЕсли;
	
	Если Не ДоступнаРаботаСPDF Тогда
		Возврат;
	КонецЕсли;	
	
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписиКартинкой(ДанныеДляШтампаЭлектроннойПодписи(ДанныеФайла.Владелец));
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	СтрокаДляВыполнения = 
		"ЗаписьPDF = Новый ЗаписьPDF(ИмяВременногоФайла);
		|Описание = Новый ОписаниеОтображаемогоОбъектаPDF;
		|Описание.Объект = Штамп;
		|ЗаписьPDF.ЗаписатьОтображаемыйОбъект(Описание);
		|ЗаписьPDF.Закрыть();";
	
	Попытка
		Выполнить(СтрокаДляВыполнения); // АПК:487 Исполняемый код безопасен.
	Исключение	
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Вставка штампа ЭП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат;
	КонецПопытки;	
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресСШтампом = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	Если Не ДополнитьФайломВизуализации Тогда
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = АдресСШтампом;
	Иначе	
		ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеВизуализации", АдресСШтампом);
	КонецЕсли;	
	
	ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = "";
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Возвращает данные для формирования реестра электронных документов.
//
// Параметры:
// 	ЭлектронныеДокументы - Массив - Электронные документы.
// Возвращаемое значение:
// 	ТаблицаЗначений - Данные электронных документов для формирования реестра.
//
Функция ДанныеДокументовДляРеестраЭлектронныхДокументов(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
	|	ЭлектронныйДокументВходящийЭДО.Контрагент,
	|	ЭлектронныйДокументВходящийЭДО.Организация,
	|	ЭлектронныйДокументВходящийЭДО.Ответственный,
	|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
	|	""Вх."" КАК НаправлениеКратко
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
	|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
	|	ЭлектронныйДокументИсходящийЭДО.Организация,
	|	ЭлектронныйДокументИсходящийЭДО.Ответственный,
	|	ЭлектронныйДокументИсходящийЭДО.СуммаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента,
	|	""Исх.""
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерДокумента,
	|	Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаДанных Из Результат Цикл
		СвойстваДокумента = Новый Структура("НомерДокумента,ДатаДокумента,ВидДокумента,ТипДокумента");
		ЗаполнитьЗначенияСвойств(СвойстваДокумента, СтрокаДанных);
		СтрокаДанных.ПредставлениеДокумента = ПредставлениеДокумента(СтрокаДанных.Ссылка, СвойстваДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  см. НовыеСвойстваДокументовДляОписанияПакетов
Функция СвойстваДокументовДляОписанияПакетов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПодписиДокумента

// Возвращает структуру результата проверки подписи.
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ПодписиДляПроверки - Массив из Структура: См. НовыеПараметрыПроверкиПодписи
//
Функция НовыйРезультатПроверкиПодписей() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ПодписиДляПроверки", Новый Массив);
	Возврат Результат;
	
КонецФункции

// Возвращает новые данные подписи с учетом доверенности.
// 
// Возвращаемое значение:
//  Структура:
//   * СвойстваПодписи - См. НовыеДанныеПодписи
//   * ЭтоПодписьПоДоверенности - Булево
//   * СвойстваДоверенности - Неопределено,
//   						- см. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
//   * РезультатПроверкиПоМЧД - Неопределено, 
//   						  - см. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//   						  
//   * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
Функция НовыеДанныеПодписиСУчетомДоверенности() Экспорт
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("СвойстваПодписи", Неопределено);
	ДанныеПодписи.Вставить("ЭтоПодписьПоДоверенности", Ложь);
	ДанныеПодписи.Вставить("СвойстваДоверенности", Неопределено);
	ДанныеПодписи.Вставить("РезультатПроверкиПоМЧД", Неопределено);
	ДанныеПодписи.Вставить("ПодписанныйОбъект", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	
	Возврат ДанныеПодписи;
	
КонецФункции

// Возвращает установленные подписи по электронному документу.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
// 	ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей - вид электронной подписи.
// Возвращаемое значение:
// 	Массив из См. НовыеДанныеПодписи.
Функция УстановленныеПодписи(Сообщение, ВидПодписи = Неопределено) Экспорт
	
	ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ОсновнойФайл");
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Подписи = УстановленныеПодписиФайла(ПрисоединенныйФайл, ВидПодписи);
	
	Возврат Подписи;
	
КонецФункции

// Возвращает результат проверки подписей электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура: См. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
		
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрисоединенныйФайл");
	
	Возврат ПроверитьПодписиФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	
КонецФункции

// Возвращает результат проверки подписей сообщения ЭДО.
// 
// Параметры:
//  СообщениеЭДО        - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура: см. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиСообщения(СообщениеЭДО, КонтекстДиагностики) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &СообщениеЭДО";
		
	Запрос.УстановитьПараметр("СообщениеЭДО", СообщениеЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрисоединенныйФайл");
	
	Возврат ПроверитьПодписиФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	
КонецФункции

// Возвращает признак успешной записи результата проверки подписей электронного документа.
// 
// Параметры:
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
// Возвращаемое значение:
//  Булево - признак успешной записи
Функция ЗаписатьРезультатПроверкиПодписейДокумента(ПроверенныеПодписи) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверенныеПодписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РезультатПроверкиФайла Из ПроверенныеПодписи Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(РезультатПроверкиФайла.Ключ);
		
		Для Каждого СохраненныеСвойстваПодписи Из УстановленныеПодписи Цикл
			СвойстваПодписиПослеПроверки = ПолучитьРезультатПроверкиПодписи(РезультатПроверкиФайла.Значение,
				СохраненныеСвойстваПодписи.Подпись);
			Если СвойстваПодписиПослеПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбработатьРезультатПроверкиПодписиФайла(РезультатПроверкиФайла.Ключ, СохраненныеСвойстваПодписи,
				СвойстваПодписиПослеПроверки, УстановленныеПодписи.Количество());
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ДокументыНаПодписи

 Функция НовыйОтборДокументовНаПодписи() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Организация");
	Отбор.Вставить("Контрагент");
	Отбор.Вставить("ВидДокумента");
	Отбор.Вставить("Направление");
	Возврат Отбор;
КонецФункции

Функция ЗапросДокументовНаПодписи(Отбор) Экспорт
	
	ОтборОбъектовДляПодписания = МаршрутыПодписанияБЭД.НовыйОтборОбъектовДляПодписания();
	ОтборОбъектовДляПодписания.Объект =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Подписание)";
	ОписаниеЗапроса = МаршрутыПодписанияБЭД.ЗапросОбъектовДляПодписания("ОбъектыДляПодписания", ОтборОбъектовДляПодписания);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыДляПодписания.Сертификат КАК Сертификат,
		|	ВЫБОР
		|		КОГДА СообщениеЭДО.ТипЭлементаРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|				И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		ИНАЧЕ СообщениеЭДО.Направление
		|	КОНЕЦ КАК Направление
		|ПОМЕСТИТЬ ДокументыДляПодписания
		|ИЗ
		|	ОбъектыДляПодписания КАК ОбъектыДляПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ОбъектыДляПодписания.Объект = СообщениеЭДО.Ссылка");
	
	ТекстыЗапросаПоНаправлению = Новый Массив;
	Если Не ЗначениеЗаполнено(Отбор.Направление)
		ИЛИ Отбор.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		ТекстыЗапросаПоНаправлению.Добавить(
			"ВЫБРАТЬ
			|	ДокументыДляПодписания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ДокументыДляПодписания.Сертификат КАК Сертификат,
			|	ДокументыДляПодписания.Направление КАК Направление,
			|	ДокументЭДО.Организация КАК Организация,
			|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
			|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
			|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
			|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента
			|ИЗ
			|	ДокументыДляПодписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ПО ДокументыДляПодписания.ЭлектронныйДокумент = ДокументЭДО.Ссылка
			|ГДЕ
			|	&УсловиеОтбора");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отбор.Направление)
		ИЛИ Отбор.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
		ТекстыЗапросаПоНаправлению.Добавить(
			"ВЫБРАТЬ
			|	ДокументыДляПодписания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ДокументыДляПодписания.Сертификат КАК Сертификат,
			|	ДокументыДляПодписания.Направление КАК Направление,
			|	ДокументЭДО.Организация КАК Организация,
			|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
			|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
			|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
			|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента
			|ИЗ
			|	ДокументыДляПодписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
			|		ПО ДокументыДляПодписания.ЭлектронныйДокумент = ДокументЭДО.Ссылка
			|ГДЕ
			|	&УсловиеОтбора");
	КонецЕсли;
	
	РазделительЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыЗапросаПоНаправлению, РазделительЗапроса));
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
		
	УсловиеОтбора = Новый Массив;
	
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "Организация");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "Контрагент");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "ВидДокумента");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументыДляПодписания", "Направление");
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	Иначе
		Запрос.УстановитьПараметр("УсловиеОтбора", Истина);
	КонецЕсли;

	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СвязанныеДокументы

Функция НовыйОтборСвязанныхДокументовВходящегоЭДО() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Отбор.Вставить("ИдентификаторыСвязи", Новый Массив);
	Возврат Отбор;
КонецФункции

Функция ЗапросСвязанныхДокументовВходящегоЭДО(Отбор, ИмяВременнойТаблицы = "") Экспорт
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	Если Не ЗначениеЗаполнено(Отбор.ЭлектронныйДокумент) Тогда
		Возврат ОписаниеЗапроса;
	КонецЕсли;
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.ИдентификаторСвязи,
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторыОснований КАК
		|		ЭлектронныйДокументВходящийЭДОИдентификаторыОснований
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.Ссылка = &ОтборЭлектронныйДокумент
		|;
		|
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
		|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыДокументооборотов
		|		ПО ДокументЭДО.ИдентификаторДокументооборота = ВТ_ИдентификаторыДокументооборотов.ИдентификаторДокументооборота
		|ГДЕ
		|	ВТ_ИдентификаторыДокументооборотов.ИдентификаторДокументооборота ЕСТЬ NULL";
	
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныйДокумент", Отбор.ЭлектронныйДокумент);
	
	Если ЗначениеЗаполнено(Отбор.ИдентификаторыСвязи) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборИдентификаторыСвязи", Отбор.ИдентификаторыСвязи);
		
		ОписаниеЗапроса.Текст = ОписаниеЗапроса.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		
		ОписаниеЗапроса.Текст = ОписаниеЗапроса.Текст
			+ "ВЫБРАТЬ
			|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыСвязи
			|		ПО ДокументЭДО.ИдентификаторСвязи = ВТ_ИдентификаторыСвязи.ИдентификаторСвязи
			|ГДЕ
			|	ДокументЭДО.ИдентификаторСвязи В (&ОтборИдентификаторыСвязи)
			|	И ВТ_ИдентификаторыСвязи.ИдентификаторСвязи ЕСТЬ NULL";
			
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДействияПоЭДО

// Возвращает набор действий по указанному состоянию и свойствам электронного документа.
// 
// Параметры:
// 	СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
// 	СвойстваДокумента - ДокументОбъект.ЭлектронныйДокументВходящийЭДО, ДокументОбъект.ЭлектронныйДокументИсходящийЭДО, Структура - Свойства:
// 	* Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	* НаОзнакомлении - Булево - Признак необходимости ознакомиться с электронным документом.
// 	* СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - Способ обмена электронным документом.
// 	* ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// Возвращаемое значение:
// 	Соответствие - Набор действий по состоянию ЭДО.
Функция ДействияПоСостояниюДокумента(СостояниеДокумента, СвойстваДокумента) Экспорт
	Возврат ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента);
КонецФункции

// Определяет, доступно ли переформирование для типа документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ПереформированиеДоступно(ТипДокумента) Экспорт
	
	ТипыДокументовПереформированиеЗапрещено = Новый Массив;
	ТипыДокументовПереформированиеЗапрещено.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	ТипыДокументовПереформированиеЗапрещено.Добавить(Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);
	
	Возврат ТипыДокументовПереформированиеЗапрещено.Найти(ТипДокумента) = Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбработкаДействийПоЭДО

// Возвращает пустой результат действий по ЭДО.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура:
//  * Итог                - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * КонтекстПодписания  - См. КонтекстИнтерактивногоПодписания
//  * КонтекстОтправки    - Неопределено,
//                          См. СинхронизацияЭДОСлужебный.НовыйКонтекстОтправки()
//
Функция НовыйРезультатДействийПоЭДО(КонтекстДиагностики) Экспорт
	РезультатДействий = Новый Структура;
	РезультатДействий.Вставить("Итог", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	РезультатДействий.Вставить("ОшибкиФормирования", Новый Массив);
	РезультатДействий.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	РезультатДействий.Вставить("КонтекстПодписания", Новый Структура);
	РезультатДействий.Вставить("КонтекстОтправки", Неопределено);
	Возврат РезультатДействий;
КонецФункции

// Выполняет указанные действия по ЭДО над переданными объектами.
// 
// Параметры:
// 	ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Структура - Описание:
// * Итог - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
// * ОшибкиФормирования -  Массив из см. НовоеОписаниеОшибкиФормирования - описания ошибок при формировании.
// * ДанныеДляИнтерактивногоПодписания - Массив из см. ОписаниеНабораДанныхДляИнтерактивногоПодписания - данные для инициализации подписания с клиента.
// * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики()
Функция ВыполнитьДействияПоЭДО(ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	РезультатДействий = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	
	Если ПараметрыВыполнения.Свойство("ДанныеРучногоФормированияОтветногоТитула") Тогда 
		КонтекстДиагностики.Вставить("ДанныеРучногоФормированияОтветногоТитула", 
			ПараметрыВыполнения.ДанныеРучногоФормированияОтветногоТитула);
	КонецЕсли;
	
	Если ОтсутствуютОбъектыДействий(ПараметрыВыполнения.ОбъектыДействий) Тогда
		Возврат РезультатДействий;
	КонецЕсли;
	
	ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики);
	
	ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполнения, РезультатДействий);
	
	Возврат РезультатДействий;
	
КонецФункции

// Возвращает описание длительной операции выполнения действий по ЭДО.
// 
// Параметры:
//  ПараметрыВыполненияДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//  Структура - См. ДлительныеОперации.ВыполнитьФункцию
Функция ВыполнитьДействияПоЭДОВФоне(ПараметрыВыполненияДействий, КонтекстДиагностики = Неопределено) Экспорт
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО", ПараметрыВыполненияДействий, КонтекстДиагностики);
КонецФункции

Процедура ДобавитьДействие(НаборДействий, Действие) Экспорт
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Действие);
КонецПроцедуры

Функция НовыйИдентификаторДокументооборота() Экспорт
	Возврат Строка(Новый УникальныйИдентификатор);
КонецФункции

Процедура ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписаниеСообщения) Экспорт
	
	ДокументОбъект.ВидДокумента = ОписаниеСообщения.ВидСообщения;
	ДокументОбъект.НомерДокумента = ОписаниеСообщения.Данные.Содержание.НомерДокумента;
	ДокументОбъект.ДатаДокумента = ОписаниеСообщения.Данные.Содержание.ДатаДокумента;
	ДокументОбъект.СуммаДокумента = ОписаниеСообщения.Данные.Содержание.СуммаДокумента;
	ДокументОбъект.СодержитМаркируемыеТовары = ОписаниеСообщения.Данные.Содержание.ЕстьМаркировка;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидПодписи) Тогда
		ДокументОбъект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиНовогоДокумента(ДокументОбъект, ОписаниеСообщения, КонтекстДиагностики, ОбъектыУчета = Неопределено) Экспорт
	
	Действие = Перечисления.ДействияПоЭДО.Сформировать;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ДокументОбъект.Ссылка, ДокументОбъект);
	
	СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
	ЗаполнитьЗначенияСвойств(СостоянияЭлементовРегламента.Добавить(), СообщениеОбъект);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторыОснований)
		И ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
		ОбновитьСвязанныеДокументы(ОписаниеСообщения.Данные.Содержание.ТипДокумента,
			ДокументОбъект.ИдентификаторыОснований.Выгрузить(), Действие, КонтекстДиагностики);
	КонецЕсли;
	
	ДополненияСостоянийЭДО = Неопределено;
	Если Не ДокументОбъект.ОбменБезПодписи Тогда
		
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
			СписокПодписантов = СписокПодписантовИнтеркампани(ДокументОбъект.Организация, ДокументОбъект.Контрагент);
		Иначе
			МаршрутПодписания = ДокументОбъект.МаршрутПодписания;
			СписокПодписантов = ДокументОбъект.СписокПодписантов.Выгрузить();
		КонецЕсли;
		
		Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
			И Не ЗначениеЗаполнено(СписокПодписантов) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен список подписантов'");
		КонецЕсли;
		
		ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект, МаршрутПодписания, СписокПодписантов);
		
		ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
			СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыОповещенияПодписантов",
			ПараметрыОповещенияПодписантов);
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		Иначе
			ВидПодписи = ДокументОбъект.ВидПодписи;
		КонецЕсли;
		
		ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ВидПодписи,
			ПараметрыМаршрута.ВесМаршрута);
		
	КонецЕсли;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриФормировании(ДокументОбъект, СостоянияЭлементовРегламента,
		ДокументОбъект.Дата, ОбъектыУчета, КонтекстДиагностики, ДополненияСостоянийЭДО);
	
	ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ДокументОбъект.Дата, СообщениеОбъект);
	
КонецПроцедуры

Процедура ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики) Экспорт
	
	ПараметрыОповещенияПодписантов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПараметрыОповещенияПодписантов");
	
	Если ЗначениеЗаполнено(ПараметрыОповещенияПодписантов) Тогда
		ОповеститьОДокументеКПодписанию(ПараметрыОповещенияПодписантов.СообщениеОбъект,
			ПараметрыОповещенияПодписантов.ТаблицаПодписания);
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОСобытия.ПослеФормированияЭлектронногоДокумента(ДокументОбъект.Ссылка, КонтекстДиагностики);
	
КонецПроцедуры

// Возвращает преобразованный результат действий по ЭДО
// 
// Параметры:
//  РезультатДействийПоЭДОФоне - См. НовыйРезультатДействийПоЭДО
// Возвращаемое значение:
//  См. НовыйРезультатДействийПоЭДО
Функция ОбработатьРезультатДействийПоЭДОФоне(РезультатДействийПоЭДОФоне) Экспорт
	
	КонтекстПодписания = РезультатДействийПоЭДОФоне.КонтекстПодписания;
	
	Если ЗначениеЗаполнено(КонтекстПодписания) Тогда
		
		ПоместитьДанныеДляПодписанияВХранилище(КонтекстПодписания);
		
		КонтекстПодписания.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
			КонтекстПодписания.КонтекстНаСервере, Новый УникальныйИдентификатор);
		
		КонтекстПодписания.КонтекстНаСервере = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатДействийПоЭДОФоне;
	
КонецФункции

// Конвертирует переданные двоичные данные в произвольный электронный документ.
//
// Параметры:
//  ПараметрыСоздания - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибки - Массив из См. НовоеОписаниеОшибкиФормирования
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	
	Если ВыполнениеДействийПоЭДОЗапрещено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(Содержание) Тогда
		Содержание = НовоеСодержаниеСообщения();
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	Иначе
		ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
		Если ФорматыЭДО.ЭтоФорматПространства(ПоддерживаемыеФорматы.ФНС, Содержание.Формат) Тогда
			ВызватьИсключение НСтр("ru = 'Создание электронного документа регламентированного формата недоступно из файла'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.НомерДокумента) Тогда
		Содержание.НомерДокумента = ПараметрыСоздания.НомерДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.ДатаДокумента) Тогда
		Содержание.ДатаДокумента = ПараметрыСоздания.ДатаДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.СуммаДокумента) Тогда
		Содержание.СуммаДокумента = ПараметрыСоздания.СуммаДокумента;
	КонецЕсли;
	
	ВидДокумента = ПараметрыСоздания.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Содержание.ТипДокумента);
		ВидДокумента = НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	КлючНастройкиОтправки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
	КлючНастройкиОтправки.Отправитель = ПараметрыСоздания.Организация;
	КлючНастройкиОтправки.Получатель = ПараметрыСоздания.Контрагент;
	КлючНастройкиОтправки.Договор = ПараметрыСоздания.Договор;
	КлючНастройкиОтправки.ВидДокумента = ВидДокумента;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастройкиОтправки);
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Подписанты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСоздания, "Подписанты");
	Если НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
		И Не ЗначениеЗаполнено(Подписанты) Тогда
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	НастройкиДокумента = НовыеНастройкиОтправкиДокумента();
	НастройкиДокумента.Организация = НастройкиОтправки.Отправитель;
	НастройкиДокумента.Контрагент = НастройкиОтправки.Получатель;
	НастройкиДокумента.ДоговорКонтрагента = НастройкиОтправки.Договор;
	НастройкиДокумента.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	НастройкиДокумента.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	НастройкиДокумента.СпособОбмена = НастройкиОтправки.СпособОбмена;
	НастройкиДокумента.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	НастройкиДокумента.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	НастройкиДокумента.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	НастройкиДокумента.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	НастройкиДокумента.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	Если ЗначениеЗаполнено(Подписанты) Тогда
		НастройкиДокумента.Подписанты = Подписанты;
		НастройкиДокумента.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
	КонецЕсли;
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные.Содержание = Содержание;
	ОписаниеСообщения.Данные.Документ = ОписаниеФайла;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	ДокументОбъект = СоздатьИсходящийДокумент(НастройкиДокумента, ОписаниеСообщения, КонтекстДиагностики, Неопределено,
		ПараметрыСоздания.ОбъектыУчета);
	
	Результат.ЭлектронныйДокумент = ДокументОбъект.Ссылка;
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Отправляет все документы в соответствующем состоянии для указанных идентификаторов организаций.
// 
// Параметры:
// 	ИдентификаторыОрганизаций - Массив из Строка - набор идентификаторов организаций, по которым производится отправка
// 	ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Неопределено - если выполнение действий запрещено.
// 	См. СинхронизацияЭДО.ОтправитьОбъекты
Функция ОтправитьВсеДокументы(ИдентификаторыОрганизаций, ОтпечаткиСертификатов = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизаций)
		ИЛИ ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыДействийПоЭДО.ОбъектыДействий.ИдентификаторыОрганизаций = ИдентификаторыОрганизаций;
	ПараметрыДействийПоЭДО.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	ДобавитьДействие(ПараметрыДействийПоЭДО.НаборДействий, Перечисления.ДействияПоЭДО.Отправить);
	
	РезультатОтправки = ОтправитьСообщения(ПараметрыДействийПоЭДО, КонтекстДиагностики);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Устанавливает ответственного по электронному документу.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	Ответственный - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Комментарий - Строка - Описание причины смены ответственного.
// Возвращаемое значение:
// 	Булево - Истина, если ответственный успешно установлен.
Функция УстановитьОтветственногоПоДокументу(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий = "") Экспорт
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПеренаправитьДокумент(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий);
	
КонецФункции

Функция ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеОбъектов, КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов = Неопределено, МенеджерКриптографии = Неопределено) Экспорт
	
	Результат = НовыйРезультатЗагрузкиДокументов();
	Результат.КонтекстДиагностики = КонтекстДиагностики;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъектов)
		ИЛИ ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнитьДанныеОбъектовДляЗагрузки(ДанныеОбъектов);
	
	БезПодписей = Истина;
	Для Каждого СтрокаДанных Из ДанныеОбъектов Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ПодписиОсновныхДанных)
			ИЛИ ЗначениеЗаполнено(СтрокаДанных.ПодписиДополнительныхДанных) Тогда
			БезПодписей = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если БезПодписей Тогда
		ПроверенныеПодписи = Новый Соответствие;
		Результат = ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов,
			ПроверенныеПодписи, КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов);
		Возврат Результат;
	КонецЕсли;
	
	ТребуетсяПроверкаПодписейНаКлиенте = Истина;
	
	Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере()
		И (ОтпечаткиСертификатов.Сервер.Доступность
			ИЛИ ОтпечаткиСертификатов.Облако.Доступность) Тогда
		
		ТребуетсяПроверкаПодписейНаКлиенте = Ложь;
	КонецЕсли;
	
	Если ТребуетсяПроверкаПодписейНаКлиенте Тогда
		КонтекстПроверки = НовыйКонтекстПроверкиПодписей();
		КонтекстПроверки.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
		КонтекстПроверки.ПаролиСертификатов = ПаролиСертификатов;
		КонтекстПроверки.ДанныеДокументов = ДанныеОбъектов;
		Результат.КонтекстПроверкиПодписей = КонтекстПроверки;
		Возврат Результат;
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено
		И ОтпечаткиСертификатов.Сервер.Доступность Тогда
		МенеджерКриптографии = КриптографияБЭД.МенеджерКриптографии();
	КонецЕсли;
	
	ПроверенныеПодписи = ПроверитьПодписиПоОбъектамКонтейнеров(ДанныеОбъектов, МенеджерКриптографии,
		КонтекстДиагностики);
	
	Результат = ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов,
		ПроверенныеПодписи, КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов);
	
	Возврат Результат;
	
КонецФункции

// Возвращает обработанный результат загрузки.
// 
// Параметры:
//  РезультатЗагрузкиВФоне - См. НовыйРезультатЗагрузкиДокументов
// 
// Возвращаемое значение:
//  Структура:
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * КонтекстСобытияПослеЗагрузки - Структура
//  * ПодписиДляПроверки - Массив из См. НовыеПараметрыПроверкиПодписиНаКлиенте
//  * РезультатДействийПоЭДО - См. НовыйРезультатДействийПоЭДО
//  * АдресКонтекстаНаСервере - Строка
//
Функция ОбработатьРезультатЗагрузкиВФоне(РезультатЗагрузкиВФоне) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтекстДиагностики", РезультатЗагрузкиВФоне.КонтекстДиагностики);
	Результат.Вставить("ПодписиДляПроверки");
	Результат.Вставить("РезультатДействийПоЭДО");
	Результат.Вставить("АдресКонтекстаНаСервере", "");
	
	Если ЗначениеЗаполнено(РезультатЗагрузкиВФоне.РезультатДействийПоЭДО) Тогда
		Результат.РезультатДействийПоЭДО = ОбработатьРезультатДействийПоЭДОФоне(
			РезультатЗагрузкиВФоне.РезультатДействийПоЭДО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
		РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей, Новый УникальныйИдентификатор);
	
	ПодписиДляПроверки = Новый Массив;
	
	Для Каждого ДанныеДокумента Из РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей.ДанныеДокументов Цикл
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ОписаниеДанных)
			И ЗначениеЗаполнено(ДанныеДокумента.ПодписиОсновныхДанных) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиОсновныхДанных Цикл
				ПараметрыПроверки = НовыеПараметрыПроверкиПодписиНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Истина;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ОписаниеДополнительныхДанных)
			И ЗначениеЗаполнено(ДанныеДокумента.ПодписиДополнительныхДанных) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиДополнительныхДанных Цикл
				ПараметрыПроверки = НовыеПараметрыПроверкиПодписиНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДополнительныхДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Ложь;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ПодписиДляПроверки = ПодписиДляПроверки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения загруженного электронного документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ИсправленнаяВерсияДокумента - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * Организация - ОпределяемыйТип.Организация
// * Контрагент  - ОпределяемыйТип.КонтрагентБЭД
// * ИдентификаторОтправителя - Строка
// * ИдентификаторПолучателя - Строка
// * ОписаниеДанных - См. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
// * ОписаниеДополнительныхДанных - См. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
Функция НовыеСведенияЗагруженногоДокумента() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ИсправленнаяВерсияДокумента",Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Контрагент",  Неопределено);
	Результат.Вставить("ИдентификаторОтправителя", "");
	Результат.Вставить("ИдентификаторПолучателя", "");
	Результат.Вставить("ОписаниеДанных", СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта());
	Результат.Вставить("ОписаниеДополнительныхДанных", СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта());
	Возврат Результат;
КонецФункции

// Закрывает электронный документ.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Комментарий - Строка - Описание причины закрытия.
// Возвращаемое значение:
// 	Булево - Истина, если ЭлектронныйДокумент закрыт.
Функция ЗакрытьДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "") Экспорт
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтекстДиагностики) Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ЗакрытьПринудительно(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий);
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаСостоянияДокумента() Экспорт
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса данных элементов схемы регламента.
// 
// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка - текст запроса.
Функция ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО) Экспорт
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
		|	СообщениеЭДО.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
		|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
		|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщениеЭДО.Дата";
	ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	Возврат СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокументаЭДО", ИмяТаблицыДокументаЭДО);
КонецФункции

#КонецОбласти

#Область ДополнительныеПоля

Функция ВариантыЗаполненияПолейЭлектронныхДокументов(ВидДокумента, Формат) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(ТипДокумента, Формат);
КонецФункции

// Возвращает доступные разделы дополнительных полей по формату.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
Функция РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ВидДокумента, Формат) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ТипДокумента, Формат);
КонецФункции

Функция ЗапросКонструктораДополнительныхПолей(ВидДокумента, Формат, ТипРаздела) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.ЗапросКонструктораДополнительныхПолей(ТипДокумента, Формат, ТипРаздела);
КонецФункции

#КонецОбласти

#Область ОбработкаСобытий

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
Процедура ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОшибкаПередачи)
		ИЛИ СинхронизацияЭДО.ЭтоОшибкаПовторнойОтправки(ОшибкаПередачи) Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ИтогДействийПоЭДО") Тогда
			ДополнительныеПараметры.Вставить("ИтогДействийПоЭДО",
				ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
		КонецЕсли;
		ОбработатьОтправленноеСообщение(Объект, ОшибкаПередачи, КонтекстДиагностики, Отказ,
			ДополнительныеПараметры.ИтогДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Если Не ЗафиксироватьОшибкуПередачи(Объект, Перечисления.ДействияПоЭДО.Отправить,
		ОшибкаПередачи.Блокирующая, ОшибкаПередачи.Описание, КонтекстДиагностики) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов
Процедура ПослеОтправкиОбъектов(РезультатОтправки, КонтекстДиагностики) Экспорт
	
	Сообщения = Новый Массив;
	Для Каждого РезультатОтправкиОбъекта Из РезультатОтправки.ОтправленныеОбъекты Цикл
		Если РезультатОтправкиОбъекта.Значение Тогда
			Сообщения.Добавить(РезультатОтправкиОбъекта.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Сообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		И СостоянияДокументовЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)";
	
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(
			Выборка.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеИзмененияСтатусаПриглашения
Процедура ПослеИзмененияСтатусаПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента, Статус, КонтекстДиагностики) Экспорт
	
	Если Статус = Перечисления.СтатусыПриглашений.Принято Тогда
		ВозобновитьДокументыПослеПолученияСогласияПоПриглашению(ИдентификаторОрганизации, ИдентификаторКонтрагента,
			КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если Статус = Перечисления.СтатусыПриглашений.ОжидаемСогласия Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
		
	ИначеЕсли Статус = Перечисления.СтатусыПриглашений.Отклонено Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения;
		
	ИначеЕсли Статус = Перечисления.СтатусыПриглашений.ТребуетсяОтправить
		ИЛИ Статус = Перечисления.СтатусыПриглашений.Ошибка Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
		ОстановитьДокументыПослеИзмененияПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента,
			ПричинаОстановки, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИсправленииОшибкиПередачи
Процедура ПриИсправленииОшибкиПередачи(ИдентификаторДокументооборота, КонтекстДиагностики) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки = &ПричинаОстановки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки = &ПричинаОстановки";
	
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ПричинаОстановки", Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозобновитьДокумент(Выборка.ЭлектронныйДокумент, Действие, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИзмененииСтатусаТранспортногоКонтейнера
Процедура ПриИзмененииСтатусаТранспортногоКонтейнера(Контейнер, НовыйСтатус, КонтекстДиагностики) Экспорт
	
	Если НовыйСтатус <> Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен
		ИЛИ ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат;
	КонецЕсли;
	
	НаборСообщений = СинхронизацияЭДО.ОбъектыТранспортногоКонтейнера(Контейнер);
	
	ОтменитьОтправку(НаборСообщений, КонтекстДиагностики);
	
КонецПроцедуры

// См. НастройкиЭДОСобытия.ПередИзменениемИспользованияУтверждения
Процедура ПередИзменениемИспользованияУтверждения(ИспользоватьУтверждение, КонтекстДиагностики, Отказ) Экспорт
	
	Если ИспользоватьУтверждение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = &СостояниеУтверждение";
	Запрос.УстановитьПараметр("СостояниеУтверждение", Перечисления.СостоянияСообщенийЭДО.Утверждение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СнятьСУтверждения(Выборка.Ссылка, ИспользоватьУтверждение, КонтекстДиагностики) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Событие возникает при установки /снятии пометки удаления электронного документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	ПометкаУдаления - Булево - признак установки / снятия пометки.
// 	Отказ - Булево - признак отказа от установки пометки удаления.
Процедура ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			СообщениеОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронныеДокументыЭДОСобытия.ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ);
	
КонецПроцедуры

// Событие возникает перед непосредственным удалением электронного документа из базы данных.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	Отказ - Булево - признак отказа от удаления электронного документа.
Процедура ПередУдалениемДокумента(ЭлектронныйДокумент, Отказ) Экспорт
	
	ЭлектронныеДокументыЭДОСобытия.ПередУдалениемДокумента(ЭлектронныйДокумент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек.
//
Процедура ПриОпределенииНастроекФайлов(Настройки) Экспорт
	
	Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);
	Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);
	Настройки.НеВыводитьВИнтерфейс.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументВходящийЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеЭДО, Истина);
	Списки.Вставить(Метаданные.Справочники.СообщениеЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЖурналДействийПоЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияДокументовЭДО, Истина);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ЭлектронныйДокументВходящийЭДО.Чтение.Организации
	|Документ.ЭлектронныйДокументВходящийЭДО.Изменение.Организации
	|Документ.ЭлектронныйДокументИсходящийЭДО.Чтение.Организации
	|Документ.ЭлектронныйДокументИсходящийЭДО.Изменение.Организации
	|Документ.СообщениеЭДО.Чтение.Организации
	|Документ.СообщениеЭДО.Изменение.Организации
	|Справочник.СообщениеЭДОПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СообщениеЭДОПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.ЖурналДействийПоЭДО.Чтение.Организации
	|РегистрСведений.ЖурналДействийПоЭДО.Изменение.Организации
	|РегистрСведений.СостоянияДокументовЭДО.Чтение.Организации
	|РегистрСведений.СостоянияДокументовЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных 
Процедура ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ФорматыЭДО.ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияБРОЭДО

// Возвращает данные файлов основного титула, ответного титула и подписей к ним 
// для указанных объектов учета с завершенным документооборотом. Данные получаются только для документов
// следующих типов:
// УПД, СчетФактура, ТоварнаяНакладная, АктВыполненныхРабот, АктНаПередачуПрав,
// УКД, КорректировочныйСчетФактура, СоглашениеОбИзмененииСтоимости,
// АктОРасхождениях,  АктСверкиВзаиморасчетов, АктПриемкиСтроительныхРаботУслуг.
//
// Параметры:
//  ОбъектыУчета - Массив из ЛюбаяСсылка - ссылки на объекты учета.
//  УникальныйИдентификатор - УникальныйИдентификатор - для данных помещаемых во временное хранилище.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные файлов по объектам учета:
//    * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета, переданный в параметре ОбъектыУчета.
//    * Значение - Массив из Структура - Данные файлов:
//     ** Тип - Строка - тип файла. Возможные значения "ОсновнойТитул", "ОтветныйТитул",
//                       "ОсновнаяПодпись", "ОтветнаяПодпись".
//     ** КНД - Строка - КНД документа. Пустая строка для типов "ОсновнаяПодпись" и "ОтветнаяПодпись". 
//     ** Данные - Строка - адрес во временном хранилище с двоичными данными файла.
//     ** Имя - Строка - имя файла с расширением.
//
Функция ДанныеФайловЭлектронныхДокументовДляВыгрузкиВФНС(Знач ОбъектыУчета, Знач УникальныйИдентификатор) Экспорт
	
	ДанныеФайловПоОбъектамУчета = Новый Соответствие;
	
	ТипыДокументовОтбор = Новый Массив;
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	
	ТипыЭлементовРегламентаОтбор = Новый Массив;
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	РезультатЗапроса = РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументовОтбор, ТипыЭлементовРегламентаОтбор);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеФайловПоОбъектамУчета;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КНД = ФорматыЭДО.КНДПоИмениФайлаФНС(Выборка.ПолноеИмяФайла);
		Если ПустаяСтрока(КНД) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайлов = ДанныеФайловПоОбъектамУчета[Выборка.ОбъектУчета];
		Если ДанныеФайлов = Неопределено Тогда
			ДанныеФайлов = Новый Массив;
			ДанныеФайловПоОбъектамУчета.Вставить(Выборка.ОбъектУчета, ДанныеФайлов);
		КонецЕсли;
		
		ДанныеФайла = НовыеДанныеФайлаДляВыгрузкиВФНС();
		
		Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ДанныеФайла.Тип = "ОсновнойТитул";
			ТипПодписи = "ОсновнаяПодпись";
		Иначе
			ДанныеФайла.Тип = "ОтветныйТитул";
			ТипПодписи = "ОтветнаяПодпись";
		КонецЕсли;
		
		ДанныеФайла.КНД = КНД;
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Файл);
		ДанныеФайла.Данные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		ДанныеФайла.Имя = Выборка.ПолноеИмяФайла;
		ДанныеФайлов.Добавить(ДанныеФайла);
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.Файл);
		Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
			ДанныеФайлов = ДанныеФайловПоОбъектамУчета[Выборка.ОбъектУчета];
			ДанныеФайла = НовыеДанныеФайлаДляВыгрузкиВФНС();
			ДанныеФайла.КНД = КНД;
			ДанныеФайла.Тип = ТипПодписи;
			ДанныеФайла.Данные = ПоместитьВоВременноеХранилище(СвойстваПодписи.Подпись, УникальныйИдентификатор);
			Если ЗначениеЗаполнено(СвойстваПодписи.ИмяФайлаПодписи) Тогда
				ДанныеФайла.Имя = СвойстваПодписи.ИмяФайлаПодписи;
			Иначе
				ДанныеФайла.Имя = ИмяФайлаПодписи(Выборка.ПолноеИмяФайла, СвойстваПодписи.ПорядковыйНомер);
			КонецЕсли;
			ДанныеФайлов.Добавить(ДанныеФайла);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеФайловПоОбъектамУчета;
	
КонецФункции

// Возвращает свойства основного титула для объектов учета с завершенным документооборотом.
// Данные получаются только для документов следующих типов: 
// УПД, СчетФактура, ТоварнаяНакладная, АктВыполненныхРабот, АктНаПередачуПрав,
// УКД, КорректировочныйСчетФактура, СоглашениеОбИзмененииСтоимости,
// АктОРасхождениях, АктСверкиВзаиморасчетов, АктПриемкиСтроительныхРаботУслуг.
//
// Параметры:
//  ОбъектыУчета - Массив из ЛюбаяСсылка - ссылки на объекты учета.
//
// Возвращаемое значение:
//  ТаблицаЗначений - свойства документов. Колонки:
//    * ОбъектУчета - ДокументСсылка - объект учета, переданный в параметре ОбъектыУчета.
//    * Тип - ПеречислениеСсылка.ТипыДокументовЭДО - тип документа.
//    * КНД - Строка - КНД основного титула.  
//
Функция СвойстваЭлектронныхДокументовДляВыгрузкиВФНС(Знач ОбъектыУчета) Экспорт
	
	СвойстваДокументов = Новый ТаблицаЗначений;
	СвойстваДокументов.Колонки.Добавить("ОбъектУчета", ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов());
	СвойстваДокументов.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	СвойстваДокументов.Колонки.Добавить("КНД", Новый ОписаниеТипов("Строка"));
	
	ТипыДокументовОтбор = Новый Массив;
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ТипыДокументовОтбор.Добавить(Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	
	ТипыЭлементовРегламентаОтбор = Новый Массив;
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	РезультатЗапроса = РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументовОтбор, ТипыЭлементовРегламентаОтбор);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СвойстваДокументов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КНД = ФорматыЭДО.КНДПоИмениФайлаФНС(Выборка.ПолноеИмяФайла);
		Если ПустаяСтрока(КНД) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СвойстваДокументов.Добавить();
		НоваяСтрока.ОбъектУчета = Выборка.ОбъектУчета;
		НоваяСтрока.Тип = Выборка.ТипДокумента;
		НоваяСтрока.КНД = КНД;
		
	КонецЦикла;
	
	Возврат СвойстваДокументов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеКонфигурации

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_9_1

#Область Справочники_СообщениеЭДОПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("02be62d0-c9e3-4f2b-a938-7587178a649c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО,"
		+ "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Документ.СообщениеЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.БлокируемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника Присоединенные файлы (Электронные документы).
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостояниеПодписанияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействиеОбработчикиОбновления.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти


#Область Документы_ЭлектронныйДокументВходящий_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcafb44d-22d0-431a-aa23-995aa699a07b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументВходящийЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО,"
		+ "РегистрСведений.УдалитьЖурналСобытийЭД,"
		+ "РегистрСведений.ПростыеЭлектронныеПодписи,"
		+ "РегистрСведений.ЭлектронныеПодписи,"
		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО,"
		+ "РегистрСведений.ЖурналДействийПоЭДО,"
		+ "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление входящих электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область Документы_ЭлектронныйДокументИсходящийЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a98bca9f-e5d2-42b9-9f0f-29a1aa2d4108");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументИсходящийЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО,"
		+ "РегистрСведений.УдалитьЖурналСобытийЭД,"
		+ "РегистрСведений.ОператорыЭДО,"
		+ "РегистрСведений.ПростыеЭлектронныеПодписи,"
		+ "РегистрСведений.ЭлектронныеПодписи,"
		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
		+ "Справочник.УдалитьПрофилиНастроекЭДО,"
		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО,"
		+ "РегистрСведений.ЖурналДействийПоЭДО,"
		+ "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление исходящих электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Версия_1_9_4


#КонецОбласти

#Область Версия_1_9_9

#Область Справочники_ВидыДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("009a7d70-3a90-43f9-87b2-10a776b5298a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыДокументовЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника Виды документов ЭДО.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_СвязьВидовИФорматовДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21bf758a-3393-42d6-9f78-d9e498236c7c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = 
		НСтр("ru = '1С:Обмен с контрагентами: обновление связей видов и форматов электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = 
		"РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0824dea2-1398-4cfd-96f9-a504682db8ed");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = 
		НСтр("ru = '1С:Обмен с контрагентами: обновление связей видов и форматов электронных документов (начальное заполнение).'");

#КонецОбласти

#Область РегистрыСведений_ФорматыЭлектронныхДокументов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1d44da2-5bec-4bd0-afa4-232aeed30114");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление форматов электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3949552a-560d-4633-b79a-be1462f0258e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление форматов электронных документов (начальное заполнение).'");

#КонецОбласти

#Область РегистрыСведений_СостоянияДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СостоянияДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e5186a5-67a5-409f-88ff-a3578a30e7aa");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияДокументовЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО,
		|Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление состояний электронных документов.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область РегистрыСведений_ЖурналДействийПоЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ЖурналДействийПоЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2e3e9634-220c-4d09-b1a1-4b8de94146fc");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЖурналДействийПоЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО,
		|Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление состояний электронных документов в журнале действий по ЭДО.
		|обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#КонецОбласти

#КонецОбласти
	
	ФорматыЭДО.ПриДобавленииОбработчиковОбновления(Обработчики);	 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обновление

Функция Обновление_ТипДокументаПоНовойАрхитектуре(ТипДокументаДоОбновления) Экспорт
	
	ТипДокумента = ТипДокументаДоОбновления;
	Если ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьАктЗаказчик
		ИЛИ ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьАктИсполнитель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьСоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12
		ИЛИ ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12Покупатель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

Функция Обновление_ВыборкаСообщенийДляЗаменыОбъектовВСостоянииПодписания(ВыбранныеДанные) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыбранныеДанные.Объект КАК Объект
		|ПОМЕСТИТЬ ВыбранныеДанные
		|ИЗ
		|	&ВыбранныеДанные КАК ВыбранныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Объект КАК Объект,
		|	ПрисоединенныеФайлы.ВладелецФайла КАК Сообщение
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО ВыбранныеДанные.Объект = ПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("ВыбранныеДанные", ВыбранныеДанные);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Процедура Обновление_СформироватьМаршрутПодписания(СвойстваСообщения) Экспорт
	
	СформироватьМаршрутПодписания(СвойстваСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

// Возвращает сводные состояния на нашей стороне и на стороне контрагента в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - сводные состояния:
//  * НаНашейСтороне - Строка - тип состояния обмена ЭД.
//  * НаСторонеКонтрагента - Строка - тип состояния обмена ЭД.
//
Функция ТипыСводныхСостоянийЭДОУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	СводныеСостояния = Новый Структура;
	СводныеСостояния.Вставить("НаНашейСтороне", "");
	СводныеСостояния.Вставить("НаСторонеКонтрагента", "");
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		СводныеСостояния.НаНашейСтороне = "ВсеВыполнено";
		СводныеСостояния.НаСторонеКонтрагента = "ВсеВыполнено";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		СводныеСостояния.НаНашейСтороне = "Отклонен";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "Отклонен"
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ПригласитьКОбмену";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	КонецЕсли;
	
	Возврат СводныеСостояния;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - тип состояния электронного документа.
//
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	Если ВерсияФорматаЧислом(ВерсияФормата) >= ВерсияФорматаЧислом("1.15") Тогда

		Возврат ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_15(СостояниеЭДО);

	Иначе

		Возврат ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_10(СостояниеЭДО);

	КонецЕсли;
	
КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  ТипСостояния  - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата(ВерсияФормата, ТипСостояния) Экспорт
	
	Если ВерсияФорматаЧислом(ВерсияФормата) >= ВерсияФорматаЧислом("1.15") Тогда

		Возврат СостояниеЭДОПоЗначениюУниверсальногоФормата_1_15(ТипСостояния);

	Иначе

		Возврат СостояниеЭДОПоЗначениюУниверсальногоФормата_1_10(ТипСостояния);

	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КомандыЭДО

// См. ПодключаемыеКомандыЭДОСлужебный.ВыгрузкаДанныхВФайлДоступнаДляОбъектов
Функция ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов) Экспорт
	
	Возврат ПодключаемыеКомандыЭДОСлужебный.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов);
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает результат проверки на необходимость наличия доверенности на подпись 
//
// Параметры:
//  Доверитель  - ОпределяемыйТип.УчастникЭДО
//  Сертификат  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования 
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенность(Доверитель, Сертификат) Экспорт
	
	СведенияДоверителя = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
	
	ДанныеСертификата = КриптографияБЭД.ДвоичныеДанныеСертификата(Сертификат);
	
	Возврат ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(СведенияДоверителя.ИНН, ДанныеСертификата);
	
КонецФункции

// Возвращает установленные подписи с учетом доверенностей.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПодписиСУчетомДоверенности
Функция УстановленныеПодписиСУчетомДоверенностей(Сообщение) Экспорт

	УстановленныеПодписи = Новый Массив;
	
	ФайлСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ОсновнойФайл");
	
	Если Не ЗначениеЗаполнено(ФайлСообщения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ХешиПодписей = Новый Массив;
	ДанныеПодписейПоХешам = Новый Соответствие;
	
	УсиленныеКвалифицированныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлСообщения);
	Для Каждого СвойстваПодписи Из УсиленныеКвалифицированныеПодписи Цикл
		
		УстановленнаяПодпись = НовыеДанныеПодписи();
		ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, СвойстваПодписи);
		УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		УстановленнаяПодпись.Владелец = СвойстваПодписи.КомуВыданСертификат;
		УстановленнаяПодпись.ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		
		ДанныеПодписи = НовыеДанныеПодписиСУчетомДоверенности();
		ДанныеПодписи.СвойстваПодписи = УстановленнаяПодпись;
		ДанныеПодписи.ПодписанныйОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ОсновнойФайл");
		УстановленныеПодписи.Добавить(ДанныеПодписи);
		
		ХешиПодписей.Добавить(УстановленнаяПодпись.ХешПодписи);
		ДанныеПодписейПоХешам.Вставить(УстановленнаяПодпись.ХешПодписи, ДанныеПодписи);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ХешиПодписей) Тогда
		
		РезультатыПроверокПодписей = МашиночитаемыеДоверенности.РезультатыПроверокПодписей(ФайлСообщения, ХешиПодписей);
		СвойстваДоверенностей = СвойстваДоверенностейИзРезультатовПроверокПодписей(РезультатыПроверокПодписей);
		
		Для Каждого ХешПодписи Из ХешиПодписей Цикл
			
			РезультатПроверки = РезультатыПроверокПодписей[ХешПодписи];
			Если РезультатПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПодписи = ДанныеПодписейПоХешам[ХешПодписи];
			Если ДанныеПодписи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки.ТребуетсяДоверенность = Истина;
			ДанныеПодписи.ЭтоПодписьПоДоверенности = Истина;
			ДанныеПодписи.СвойстваДоверенности = СвойстваДоверенностей[РезультатПроверки.Доверенность];
			ДанныеПодписи.РезультатПроверкиПоМЧД = РезультатПроверки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПростыеПодписи = УстановленныеПростыеПодписи(ФайлСообщения);
	Для Каждого СвойстваПодписи Из ПростыеПодписи Цикл
		
		УстановленнаяПодпись = НовыеДанныеПодписи();
		ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, СвойстваПодписи);
		УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая;
		УстановленнаяПодпись.Владелец = СвойстваПодписи.ВладелецПодписи;
		УстановленнаяПодпись.Должность = СвойстваПодписи.Должность;
		УстановленнаяПодпись.ПодписьВерна = Истина;
		УстановленнаяПодпись.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПодписи;
		
		ДанныеПодписи = НовыеДанныеПодписиСУчетомДоверенности();
		ДанныеПодписи.СвойстваПодписи = УстановленнаяПодпись;
		УстановленныеПодписи.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	Если ФорматыЭДО.ЭтоУПДЕИС(ФайлСообщения.ПолноеИмяФайла)
		Или ФорматыЭДО.ЭтоУКДЕИС(ФайлСообщения.ПолноеИмяФайла) Тогда 
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			СвойстваПодписи = Подпись.СвойстваПодписи;
			СвойстваПодписи.ПодписьВерна = Истина;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат УстановленныеПодписи

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО)
	Возврат ?(ЭтоВходящийЭДО, "Документ.ЭлектронныйДокументВходящийЭДО", "Документ.ЭлектронныйДокументИсходящийЭДО");
КонецФункции

#КонецОбласти

#Область ПроверкаПрав

// Возвращает ошибку диагностики при отсутствии прав на обработку электронных документов.
// 
// Возвращаемое значение:
// 	Строка - идентификатор ошибки.
Функция ВидОшибкиНетПравНаОбработкуДокументов()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НетПравНаОбработкуДокументов";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось выполнить действие по ЭДО'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет прав для выполнения действий по ЭДО'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Обратитесь к администратору'");
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#Область ТипыДокументов

// Типы документов прямого обмена для фильтрации в алгоритмах.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// 	* Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// 	* Значение - Булево - Признак типа прямого обмена.
//
Функция ТипыДокументовПрямогоОбмена()
	
	ТипыДокументов = Новый Массив;
	
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ЗаказТовара);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПрайсЛист);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	
	Если ЗначениеЗаполнено(ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов()) Тогда
		ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Прикладной);
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

// Типы документов прямого обмена для фильтрации в алгоритмах.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// 	* Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// 	* Значение - Булево - Признак типа прямого обмена.
//
Функция ТипыДокументовИнтеркампани()
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями);
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипВидаДокументаСоответствуетТипу(ВидДокумента, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.Ссылка = &Ссылка
		|	И ВидыДокументовЭДО.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", ВидДокумента);
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция КраткоеНаименованиеТипаДокумента(ТипДокумента)
	
	Наименование = "";
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		Наименование = НСтр("ru = 'УПД'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		Наименование = НСтр("ru = 'УКД'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда
		Наименование = НСтр("ru = 'Сверка'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда
		Наименование = НСтр("ru = 'Акт ПП'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		Наименование = НСтр("ru = 'Акт'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		Наименование = НСтр("ru = 'Расхождения'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями Тогда
		Наименование = НСтр("ru = 'Накладная'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
		Наименование = НСтр("ru = 'СФ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда
		Наименование = НСтр("ru = 'Корректировка'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
		Наименование = НСтр("ru = 'Кор. СФ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
		Наименование = НСтр("ru = 'Каталог'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
		Наименование = НСтр("ru = 'Счет'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист Тогда
		Наименование = НСтр("ru = 'Прайс'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда
		Наименование = НСтр("ru = 'Заказ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда
		Наименование = НСтр("ru = 'Заказ покупателя'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда
		Наименование = НСтр("ru = 'Взаимозачет'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда
		Наименование = НСтр("ru = 'Гар. письмо'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда
		Наименование = НСтр("ru = 'Доп. согл.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда
		Наименование = НСтр("ru = 'Пл. поруч.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда
		Наименование = НСтр("ru = 'Акт (прил.)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда
		Наименование = НСтр("ru = 'Соглашение'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении Тогда
		Наименование = НСтр("ru = 'Извещение'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Наименование = НСтр("ru = 'ПОА'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		Наименование = НСтр("ru = 'УОУ'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара Тогда
		Наименование = НСтр("ru = 'Продажа (комиссия)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда
		Наименование = НСтр("ru = 'Списание (комиссия)'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями Тогда
		Наименование = НСтр("ru = 'Возврат'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
		Наименование = НСтр("ru = 'Запрос ком. пред.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО Тогда
		Наименование = НСтр("ru = 'Подтв. оператора'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером Тогда
		Наименование = НСтр("ru = 'Реализ. комиссионером'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером Тогда
		Наименование = НСтр("ru = 'Закупка комиссионером'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером Тогда
		Наименование = НСтр("ru = 'Корр. реализ. ком-ром'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером Тогда
		Наименование = НСтр("ru = 'Корр. закуп. ком-ром'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Наименование = НСтр("ru = 'МЧД'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда
		Наименование = НСтр("ru = 'Сверка взаиморасч.'");
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда
		Наименование = НСтр("ru = 'Акт прием. строит. работ.'");
	Иначе
		Наименование = Строка(ТипДокумента);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Возвращает приоритет типа при отображении в списках.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Число - приоритет отображения типа электронного документа.
Функция ПриоритетТипаДокументаПриОтображенииВСписке(ТипДокумента)
	
	Приоритет = 100;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда
		Приоритет = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		Приоритет = 2;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		Приоритет = 3;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
		Приоритет = 4;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		Приоритет = 5;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		Приоритет = 6;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда
		Приоритет = 7;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
		Приоритет = 8;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
		Приоритет = 9;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
		Приоритет = 10;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист Тогда
		Приоритет = 11;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда
		Приоритет = 12;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда
		Приоритет = 13;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда
		Приоритет = 14;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда
		Приоритет = 15;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Ведомость Тогда
		Приоритет = 16;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда
		Приоритет = 17;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Договор Тогда
		Приоритет = 18;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда
		Приоритет = 19;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС11 Тогда
		Приоритет = 20;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС2 Тогда
		Приоритет = 21;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС3 Тогда
		Приоритет = 22;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Отчет Тогда
		Приоритет = 23;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда
		Приоритет = 24;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда
		Приоритет = 25;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда
		Приоритет = 26;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда
		Приоритет = 27;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Спецификация Тогда
		Приоритет = 28;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Уведомление Тогда
		Приоритет = 29;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
		Приоритет = 30;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		Приоритет = 31;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда
		Приоритет = 32;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда
		Приоритет = 33;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		Приоритет = 40;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
		Приоритет = 101;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Возвращает группу типа при отображении в списках.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Строка - приоритет отображения типа электронного документа.
Функция ПараметрыГруппыТипаДокументаПриОтображенииВСписке(ТипДокумента)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Группа", "");
	Параметры.Вставить("ПриоритетГруппы", 0);
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером 
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда
		Параметры.Группа = НСтр("ru = 'Первичные документы'");
		Параметры.ПриоритетГруппы = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		Параметры.Группа = НСтр("ru = 'Оперативные документы'");
		Параметры.ПриоритетГруппы = 2;
	Иначе
		Параметры.Группа = НСтр("ru = 'Прочие'");
		Параметры.ПриоритетГруппы = 3;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ЭтоИсправляющийТипДокумента(ТипДокумента)
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;
КонецФункции

Функция ЭтоКорректирующийТипДокумента(ТипДокумента)
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером;
КонецФункции

Функция КорректируемыеТипыДокументов()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.УПД, Перечисления.ТипыДокументовЭДО.УКД);
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.УПД, Перечисления.ТипыДокументовЭДО.УКД);
	
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная,
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот,
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав,
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости,
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.СчетФактура,
		Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	Результат.Вставить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура,
		Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	
	Возврат Результат;
	
КонецФункции

Функция ПорядокСортировкиВПакете(ТипДокумента) Экспорт
	Порядок = 100;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда Порядок = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда Порядок = 2;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда Порядок = 3;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда Порядок = 4;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда Порядок = 5;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда Порядок = 6;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда Порядок = 7;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда Порядок = 8;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда Порядок = 9;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда Порядок = 10;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда Порядок = 11;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара Тогда Порядок = 12;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда Порядок = 13;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда Порядок = 14;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда Порядок = 15;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда Порядок = 16;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда Порядок = 17;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда Порядок = 18;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда Порядок = 19;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда Порядок = 20;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда Порядок = 21;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда Порядок = 22;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Ведомость Тогда Порядок = 23;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда Порядок = 24;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Договор Тогда Порядок = 25;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда Порядок = 26;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС11 Тогда Порядок = 27;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС2 Тогда Порядок = 28;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС3 Тогда Порядок = 29;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Отчет Тогда Порядок = 30;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда Порядок = 31;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда Порядок = 32;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда Порядок = 33;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Спецификация Тогда Порядок = 34;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Уведомление Тогда Порядок = 35;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда Порядок = 36;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

#КонецОбласти

#Область ВидыДокументов

Функция ВидыДокументовПоТипам(ТипыДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	ВидыДокументовПоТипам = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДокументовПоТипам.Вставить(Выборка.ТипДокумента, Выборка.ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументовПоТипам;
	
КонецФункции

Функция ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам)
	ВидыДокументов = Новый Массив;
	Для Каждого ВидПоТипу Из ВидыДокументовПоТипам Цикл
		ВидыДокументов.Добавить(ВидПоТипу.Значение);
	КонецЦикла;
	Возврат ВидыДокументов;
КонецФункции

Функция НайтиСоздатьВидДокумента(ПараметрыПоиска)
	
	ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Функция НайтиСоздатьВидыДокументов(ТипыДокументов)
	
	ВидыДокументовПоТипам = ВидыДокументовПоТипам(ТипыДокументов);
	
	Если ТипыДокументов.Количество() = ВидыДокументовПоТипам.Количество() Тогда
		Возврат ВидыДокументовПоТипам;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если ВидыДокументовПоТипам[ТипДокумента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		ВидыДокументовПоТипам.Вставить(ТипДокумента, ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументовПоТипам;
	
КонецФункции

Функция СоздатьВидДокумента(ПараметрыПоиска)
	
	ВидДокумента = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ВидДокумента;
	КонецЕсли;
	
	НовыйЭлемент = Справочники.ВидыДокументовЭДО.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыПоиска);
	ЗаполнитьНаименованиеВидаДокумента(НовыйЭлемент, ПараметрыПоиска.ПредставлениеКомандыПечати);
	НовыйЭлемент.ПорядокСортировкиВПакете = ПорядокСортировкиВПакете(ПараметрыПоиска.ТипДокумента);
	
	Если Не НовыйЭлемент.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения нового вида документа'");
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	ВидДокумента = НовыйЭлемент.Ссылка;
		
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ВидДокумента;
	
КонецФункции

#КонецОбласти

#Область Настройки

Функция ТребуетсяОтветнаяПодписьПоУмолчанию(ТипДокумента)
	
	Результат = Ложь;
	
	Если Не (ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТребуетсяИзвещениеПоУмолчанию(ТипДокумента)
	
	Результат = Ложь;
	
	Если Не (ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РедактироватьОтветнуюПодпись(ТипДокумента)
	
	Результат = Истина;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеСообщения

// Возвращает описание сообщения отправителя произвольного формата.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ОписаниеФайлаДанных - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияОтправителяПроизвольногоФормата(ОбъектУчета, НастройкиОтправки, ОписаниеФайлаДанных)
	
	ЭтоИнтеркампани = СинхронизацияЭДО.ЭтоИнтеркампани(НастройкиОтправки.СпособОбмена);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = ?(ЭтоИнтеркампани, Перечисления.НаправленияЭДО.Интеркампани,
		Перечисления.НаправленияЭДО.Исходящий);
	ОписаниеСообщения.Данные = ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету();
	ОписаниеСообщения.Данные.Документ = ОписаниеФайлаДанных;
	
	ОписаниеВидаДокумента = ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	Содержание = ФорматыЭДО.НовоеОписаниеФайлаДокумента();
	ОписаниеСообщения.Данные.Содержание = Содержание;
	
	Содержание.ИдентификаторДокумента =  Строка(Новый УникальныйИдентификатор);
	Содержание.ТипДокумента = ОписаниеВидаДокумента.ТипДокумента; 
	Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	Содержание.НомерДокумента = ИнтеграцияБСПБЭД.ПредставлениеНомераОбъектаУчета(ОписаниеОбъектаУчета.Номер);
	Содержание.ДатаДокумента  = ОписаниеОбъектаУчета.Дата;
	Содержание.СуммаДокумента = ОписаниеОбъектаУчета.СуммаДокумента;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Параметры:
//  ДанныеОбъектаУчета - ДеревоЗначений
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса,Структура:
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  Формат - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияПолучателя(ДанныеОбъектаУчета, ПараметрыДокумента, СвойстваОсновногоФайла, Формат)
	
	ФорматыЭДО_ФНС.ДополнитьДанныеОбъектаУчетаСведениямиФайла(ДанныеОбъектаУчета, СвойстваОсновногоФайла.Ссылка, Формат);
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияОтветногоТитула();
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ДанныеДокумента = ДанныеОбъектаУчета;
	ДанныеДляФормирования.Участники.ИдентификаторОтправителя = ПараметрыДокумента.ИдентификаторОрганизации;
	ДанныеДляФормирования.Участники.ИдентификаторПолучателя = ПараметрыДокумента.ИдентификаторКонтрагента;
	ДанныеДляФормирования.Участники.Оператор = СинхронизацияЭДО.СведенияОбОператоре(
		ПараметрыДокумента.ИдентификаторОрганизации);
	Файл = Новый Файл(СвойстваОсновногоФайла.ИмяФайла);
	ДанныеДляФормирования.Основание.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ДанныеДляФормирования.Основание.ДвоичныеДанные = СвойстваОсновногоФайла.ДвоичныеДанные;
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваОсновногоФайла.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Для Каждого СвойстваПодписи Из Подписи Цикл
			ПодписьСтрокой = КриптографияБЭД.ДанныеПодписиВСтрокуБезПереносов(СвойстваПодписи.Подпись);
			ДанныеДляФормирования.ПодписиОснования.Добавить(ПодписьСтрокой);
		КонецЦикла;
	КонецЕсли;
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеОтветногоТитула(Формат, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;
	ОписаниеСообщения.ВидСообщения = ПараметрыДокумента.ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

Функция НовыеДанныеУчастниковЭДО()
	ДанныеУчастниковЭДО = Новый Структура;
	ДанныеУчастниковЭДО.Вставить("Организация");
	ДанныеУчастниковЭДО.Вставить("Контрагент");
	ДанныеУчастниковЭДО.Вставить("ИдентификаторОрганизации", "");
	ДанныеУчастниковЭДО.Вставить("ИдентификаторКонтрагента", "");
	Возврат ДанныеУчастниковЭДО;
КонецФункции

Функция ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваФайлаОснования, ТипДокумента, ТипЭлементаРегламента, Комментарий = "")
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияСлужебногоСообщения();
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ТекстУточнения = Комментарий;
	ДанныеДляФормирования.Участники.Отправитель.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторОрганизации;
	ДанныеДляФормирования.Участники.Отправитель.Ссылка = ДанныеУчастниковЭДО.Организация;
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП Тогда
		
		ДанныеДляФормирования.Участники.Получатель.Тип = "Оператор";
		ДанныеДляФормирования.Участники.Получатель.Оператор = СинхронизацияЭДО.СведенияОбОператоре(
			ДанныеУчастниковЭДО.ИдентификаторОрганизации);
		ДанныеДляФормирования.Участники.Получатель.Абонент.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторКонтрагента;
	Иначе
		ДанныеДляФормирования.Участники.Получатель.Тип = "Абонент";
		ДанныеДляФормирования.Участники.Получатель.Абонент.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторКонтрагента;
		ДанныеДляФормирования.Участники.Получатель.Абонент.Ссылка = ДанныеУчастниковЭДО.Контрагент;
	КонецЕсли;
	
	Файл = Новый Файл(СвойстваФайлаОснования.ПолноеИмяФайла);
	ДанныеДляФормирования.Основание.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ДанныеДляФормирования.Основание.ДатаВремяПолучения = СвойстваФайлаОснования.ДатаСоздания;
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваФайлаОснования.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Для Каждого СвойстваПодписи Из Подписи Цикл
			ПодписьСтрокой = КриптографияБЭД.ДанныеПодписиВСтрокуБезПереносов(СвойстваПодписи.Подпись);
			ДанныеДляФормирования.ПодписиОснования.Добавить(ПодписьСтрокой);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеСлужебногоСообщения(ТипДокумента, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = ТипЭлементаРегламента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
	ОписаниеСообщения.ВидСообщения = НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
	Возврат ОписаниеСообщения;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеСообщения

// Возвращает представление сообщения ЭДО.
// 
// Параметры:
// 	СвойстваСообщения - Структура - Свойства сообщения для формирования представления:
//   * Дата - Дата
//   * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
// 	ЭтоНовый - Булево - Признак нового сообщения.
// Возвращаемое значение:
// 	Строка - Представление сообщения.
Функция ПредставлениеСообщенияПоСвойствам(СвойстваСообщения, ЭтоНовый = Ложь)
	Возврат СтрШаблон(НСтр("ru = '%1 от %2'"), СвойстваСообщения.ВидСообщения, Формат(СвойстваСообщения.Дата, "ДЛФ=D;"));
КонецФункции

#КонецОбласти

#Область ДанныеДокумента

Функция НовыеДанныеДокументовДляОтраженияВУчете()
	
	Возврат ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
Функция НовыйОтборСообщенийДокументов()
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", Перечисления.СостоянияСообщенийЭДО.ПустаяСсылка());
	Отбор.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Возврат Отбор;
КонецФункции

// Текст запроса сообщений документов.
// 
// Параметры:
//  Отбор - Неопределено - отбор не задан.
//        - см. НовыйОтборСообщенийДокументов
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСообщенийДокументов(Отбор = Неопределено)
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И &УсловиеОтбора";
	
	Если ТекстЗапроса = Неопределено Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	УсловиеОтбора = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Состояние) Тогда
		УсловиеОтбора.Добавить("СообщениеЭДО.Состояние " + Отбор.Состояние);
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.ТипЭлементаРегламента) Тогда
		УсловиеОтбора.Добавить("СообщениеЭДО.ТипЭлементаРегламента " + Отбор.ТипЭлементаРегламента);
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новые свойства документов для описания пакетов:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Дата - Дата
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
Функция НовыеСвойстваДокументовДляОписанияПакетов()
	
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	СвойстваДокументов = Новый ТаблицаЗначений;
	СвойстваДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(
		"ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	СвойстваДокументов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СвойстваДокументов.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	СвойстваДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	СвойстваДокументов.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТипаДоговорКонтрагента);
	
	Возврат СвойстваДокументов;
	
КонецФункции

#КонецОбласти

#Область ДанныеСообщения

// Возвращает двоичные данные представления сообщения
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО.
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - Представление сообщения
//
Функция ДвоичныеДанныеСообщения(Сообщение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.ПометкаУдаления КАК ПометкаУдаления,
		|	ПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ВЫБОР
		|		КОГДА ПрисоединенныеФайлы.Расширение = ""xml""
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Ссылка
		|	И ПрисоединенныеФайлы.Расширение В (""xml"", ""zip"", ""pdf"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ВызыватьИсключение = Не Выборка.ПометкаУдаления;
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл, ВызыватьИсключение);
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НРег(Выборка.Расширение) = "zip" Тогда
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
		ДанныеМЧД = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайла);
		Если ФорматыЭДО.ЭтоМЧД(ДанныеМЧД) Тогда
			ДвоичныеДанныеФайла = ДанныеМЧД.ДвоичныеДанные;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли  НРег(Выборка.Расширение) = "pdf" Тогда
		
		Если Сообщение.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
	
			ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
			ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
			ДвоичныеДанныеФайла = Обработки.ФорматДоговорнойДокумент101.ДанныеДокументаИзФайлаОбмена(ОписаниеФайла);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Возвращает сведения организаций по сообщениям информации отправителя исходящих документов.
// 
// Параметры:
//  Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Соответствие - Описание:
//   * Ключ - ДокументСсылка.СообщениеЭДО
//   * Значение - См. ИнтеграцияЭДО.ДанныеЮрФизЛица
Функция СведенияОрганизацийПоСообщениямИнформацииОтправителя(Сообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&Сообщения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&Сообщения)";
	
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	
	Результат = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	СведенияПоОрганизациям = Новый Соответствие; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сведения = СведенияПоОрганизациям[Выборка.Организация];
		Если Сведения = Неопределено Тогда
			Сведения = ИнтеграцияЭДО.ДанныеЮрФизЛица(Выборка.Организация);
			СведенияПоОрганизациям.Вставить(Выборка.Организация, Сведения);
		КонецЕсли;
		
		Результат.Вставить(Выборка.Сообщение, Сведения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подписи

// Проверить подписи файлов.
// 
// Параметры:
//  ПрисоединенныеФайлы - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура: См. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиФайлов(ПрисоединенныеФайлы, КонтекстДиагностики)
	
	Результат = НовыйРезультатПроверкиПодписей();
	
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ПрисоединенныеФайлы, КонтекстДиагностики);
	
	МенеджерКриптографии = Неопределено;
	Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		МенеджерКриптографии = КриптографияБЭД.МенеджерКриптографии();
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		Результат.ПодписиДляПроверки = ПодписиДокументаДляПроверкиНаКлиенте(ДвоичныеДанныеФайлов);
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДанныеФайла Из ДвоичныеДанныеФайлов Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ключ);
		
		Для Каждого СохраненныеСвойстваПодписи Из УстановленныеПодписи Цикл
			РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ДанныеФайла.Значение,
				СохраненныеСвойстваПодписи.Подпись, КонтекстДиагностики);
			ОбработатьРезультатПроверкиПодписиФайла(ДанныеФайла.Ключ, СохраненныеСвойстваПодписи,
				РезультатПроверки.СвойстваПодписи, УстановленныеПодписи.Количество());
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает результат проверки подписи присоединенного файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СохраненныеСвойстваПодписи - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  СвойстваПодписиПослеПроверки - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
Процедура ОбработатьРезультатПроверкиПодписиФайла(ПрисоединенныйФайл, СохраненныеСвойстваПодписи,
	СвойстваПодписиПослеПроверки, ВсегоПодписей)
	
	СохраненныеСвойстваПодписи.ПодписьВерна = СвойстваПодписиПослеПроверки.ПодписьВерна;
	СохраненныеСвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписиПослеПроверки.ДатаПроверкиПодписи;
	СохраненныеСвойстваПодписи.Комментарий = СвойстваПодписиПослеПроверки.Комментарий;
	
	Если ТипЗнч(СохраненныеСвойстваПодписи.Сертификат) = Тип("ХранилищеЗначения") Тогда
		СохраненныеСвойстваПодписи.Сертификат = СохраненныеСвойстваПодписи.Сертификат.Получить();
	КонецЕсли;
	Если СохраненныеСвойстваПодписи.Сертификат = Неопределено Тогда
		СохраненныеСвойстваПодписи.Сертификат = СвойстваПодписиПослеПроверки.Сертификат;
		СохраненныеСвойстваПодписи.Отпечаток = СвойстваПодписиПослеПроверки.Отпечаток;
		СохраненныеСвойстваПодписи.КомуВыданСертификат = СвойстваПодписиПослеПроверки.КомуВыданСертификат;
	КонецЕсли;
	
	РезультатПроверкиПоМЧД = ПроверитьПодписьФайлаПоМЧД(ПрисоединенныйФайл, СохраненныеСвойстваПодписи, ВсегоПодписей);
	
	ЗаписатьРезультатПроверкиПодписиФайла(ПрисоединенныйФайл, СохраненныеСвойстваПодписи, РезультатПроверкиПоМЧД);
	
КонецПроцедуры

// Записывает результат проверки подписи файла.
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  РезультатПроверкиПоМЧД - См. МашиночитаемыеДоверенности.ПроверитьПодпись
// 
// Возвращаемое значение:
//  Булево - признак успешной записи.
Функция ЗаписатьРезультатПроверкиПодписиФайла(ФайлСообщения, СвойстваПодписи, РезультатПроверкиПоМЧД)
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		КриптографияБЭД.ОбновитьПодпись(ФайлСообщения, СвойстваПодписи);
		
		ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		
		МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ФайлСообщения, ХешПодписи, РезультатПроверкиПоМЧД);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось записать результат проверки подписи по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = ФайлСообщения;
		ПараметрыЗаписи.ОбъектМетаданных = ФайлСообщения.Метаданные();
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция УстановленныеПодписиФайла(ПрисоединенныйФайл, ВидПодписи = Неопределено)
	
	Подписи = Новый Массив;  

	Если Не ЗначениеЗаполнено(ВидПодписи)
		ИЛИ ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная Тогда
			
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			УстановленнаяПодпись = НовыеДанныеПодписи();
			ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, Подпись);
			УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
			УстановленнаяПодпись.Владелец = Подпись.КомуВыданСертификат;
			УстановленнаяПодпись.ХешПодписи = КриптографияБЭД.ХешПодписи(Подпись.Подпись);
			Подписи.Добавить(УстановленнаяПодпись);
		КонецЦикла; 
				
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПодписи)
		ИЛИ ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		
		УстановленныеПростыеПодписи = УстановленныеПростыеПодписи(ПрисоединенныйФайл);
		Для Каждого Подпись Из УстановленныеПростыеПодписи Цикл
			УстановленнаяПодпись = НовыеДанныеПодписи();
			ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, Подпись);
			УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая;
			УстановленнаяПодпись.Владелец = Подпись.ВладелецПодписи;
			УстановленнаяПодпись.Должность = Подпись.Должность;
			УстановленнаяПодпись.ПодписьВерна = Истина;
			УстановленнаяПодпись.ДатаПроверкиПодписи = Подпись.ДатаПодписи;
			Подписи.Добавить(УстановленнаяПодпись);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Подписи;
	
КонецФункции

// Возвращает структуру данных подписи.
//
// Возвращаемое значение:
// 	Структура - данные подписи:
//   * Подпись             - ДвоичныеДанные - результат подписания.
//   * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                           подписал объект информационной базы.
//   * ВидПодписи          - ПеречислениеСсылка.ВидыЭлектронныхПодписей - вид подписи.
//   * Комментарий         - Строка - комментарий, если он был введен при подписании.
//   * ИмяФайлаПодписи     - Строка - если подпись добавлена из файла.
//   * ДатаПодписи         - Дата - дата, когда подпись была сделана. Имеет смысл для случаев,
//                           когда дату невозможно извлечь из данных подписи.
//   * ДатаПроверкиПодписи - Дата - дата последней проверки подписи.
//   * ПодписьВерна        - Булево - результат последней проверки подписи.
//   * ПорядковыйНомер     - Число - идентификатор подписи, по которому можно упорядочивать их в списке.
//   * Сертификат          - ХранилищеЗначения - содержит выгрузку сертификата,
//                           который использовался для подписания (содержится в подписи).
//   * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//   * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//   * Владелец - Строка   - ФИО лица, установившего подпись.
//   * Должность - Строка - Должность лица, установившего подпись.
//   * ХешПодписи - Строка
//
Функция НовыеДанныеПодписи()
	
	Данные = Новый Структура;
	Данные.Вставить("Подпись");
	Данные.Вставить("УстановившийПодпись");
	Данные.Вставить("ВидПодписи");
	Данные.Вставить("Комментарий");
	Данные.Вставить("ИмяФайлаПодписи");
	Данные.Вставить("ДатаПодписи");
	Данные.Вставить("ДатаПроверкиПодписи");
	Данные.Вставить("ПодписьВерна");
	Данные.Вставить("ПорядковыйНомер");
	Данные.Вставить("Сертификат");
	Данные.Вставить("Отпечаток");
	Данные.Вставить("КомуВыданСертификат", "");
	Данные.Вставить("Владелец");
	Данные.Вставить("Должность");
	Данные.Вставить("ХешПодписи", "");
	
	Возврат Данные;
	
КонецФункции

// Возвращает структуру параметров проверки подписи.
//
// Возвращаемое значение:
// 	Структура - параметры проверки подписи:
//  * ПрисоединенныйФайл           - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ДвоичныеДанныеФайла          - ДвоичныеДанные
//  * ДвоичныеДанныеПодписи        - ДвоичныеДанные
//
Функция НовыеПараметрыПроверкиПодписи()
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПрисоединенныйФайл");
	ПараметрыПроверки.Вставить("ДвоичныеДанныеФайла");
	ПараметрыПроверки.Вставить("ДвоичныеДанныеПодписи");
	Возврат ПараметрыПроверки;
	
КонецФункции

Функция УстановленныеПростыеПодписи(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПростыеЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ПростыеЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ПростыеЭлектронныеПодписи.ВладелецПодписи КАК ВладелецПодписи,
		|	ПростыеЭлектронныеПодписи.Должность КАК Должность,
		|	ПростыеЭлектронныеПодписи.Пользователь КАК УстановившийПодпись
		|ИЗ
		|	РегистрСведений.ПростыеЭлектронныеПодписи КАК ПростыеЭлектронныеПодписи
		|ГДЕ
		|	ПростыеЭлектронныеПодписи.ПодписанныйОбъект = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УдалитьПодписи(ФайлДокумента, ВидПодписи)
	
	Подписи = УстановленныеПодписиФайла(ФайлДокумента, ВидПодписи);
	
	Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		НаборЗаписей = РегистрыСведений.ПростыеЭлектронныеПодписи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ФайлДокумента);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	Для Каждого СвойстваПодписи Из Подписи Цикл
		ЭлектроннаяПодпись.УдалитьПодпись(ФайлДокумента, СвойстваПодписи.ПорядковыйНомер);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьНевалидныеПодписи(ФайлДокумента, КонтекстДиагностики = Неопределено)
	
	Результат = Ложь;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлДокумента);
	Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
		Если Не СвойстваПодписи.ПодписьВерна Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат И КонтекстДиагностики <> Неопределено Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
			|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтрШаблон(ШаблонТекста, ФайлДокумента);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Определение валидности электронных подписей'"),
			КриптографияБЭД.ВидОшибкиПодписьНеверна(), Текст, Текст);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаПодписи(ПолноеИмяФайла, ПорядковыйНомерПодписи)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат СтрШаблон("%1-%2.p7s", Файл.ИмяБезРасширения, ПорядковыйНомерПодписи);
КонецФункции

Функция ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи)
	
	Если НЕ ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СвойстваУстановленнойПодписи Из УстановленныеПодписи Цикл
		Если СвойстваУстановленнойПодписи.Подпись = СвойстваПодписи.Подпись Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив параметров из параметров проверок подписей.
// 
// Параметры:
//  ДвоичныеДанныеФайлов - Соответствие из КлючИЗначение:
// 	  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
// 	  * Значение - ДвоичныеДанные
//
// Возвращаемое значение:
//  Массив из Структура: См. НовыеПараметрыПроверкиПодписи
//
Функция ПодписиДокументаДляПроверкиНаКлиенте(ДвоичныеДанныеФайлов)
	
	Результат = Новый Массив;
	
	Для Каждого ДанныеФайла Из ДвоичныеДанныеФайлов Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ключ);
		
		Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
			ПараметрыПроверки = НовыеПараметрыПроверкиПодписи();
			ПараметрыПроверки.ПрисоединенныйФайл = ДанныеФайла.Ключ;
			ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеФайла.Значение;
			ПараметрыПроверки.ДвоичныеДанныеПодписи = СвойстваПодписи.Подпись;
			Результат.Добавить(ПараметрыПроверки);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРезультатПроверкиПодписи(РезультатыПроверки, Подпись)
	
	РезультатПроверкиПодписи = Неопределено;
	
	Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
		Если РезультатПроверки.Подпись = Подпись Тогда
			РезультатПроверкиПодписи = РезультатПроверки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверкиПодписи;
	
КонецФункции

// Возвращает Хранилище подписи на основе направления сообщения схемы и направления анализируемого сообщения.
//
// Параметры:
//  СообщениеСхемы - Структура - Сообщение обмена направление которого необходимо определить 
//  ЭтоИсходящийДокумент - Булево - Является ли исходящим документом анализируемое сообщение 
//		на основе которого получены сообщения схемы
//  ПодписиПолучателя - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
//  ПодписиОтправителя - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
//  ПодписиВнутренние - Массив из см. НовыеДанныеПодписиСУчетомДоверенности
//
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПодписиСУчетомДоверенности
//
Функция ПодписиПоНаправлению(СообщениеСхемы, ЭтоИсходящийДокумент, ПодписиПолучателя, 
		ПодписиОтправителя, ПодписиВнутренние)
	
	Если (СообщениеСхемы.Направление = Перечисления.НаправленияЭДО.Входящий
			И ЭтоИсходящийДокумент = Истина)
		Или (СообщениеСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий
			И ЭтоИсходящийДокумент = Ложь) Тогда
		Возврат ПодписиПолучателя;
	ИначеЕсли (СообщениеСхемы.Направление = Перечисления.НаправленияЭДО.Входящий
			И ЭтоИсходящийДокумент = Ложь)
		Или (СообщениеСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий
			И ЭтоИсходящийДокумент = Истина) Тогда
		Возврат ПодписиОтправителя;
	КонецЕсли;
	
	Возврат ПодписиВнутренние;
	
КонецФункции


// Возвращает заполненные данные  штампа электронной подписи.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО 
// 
// Возвращаемое значение:
//  Структура: см. НовыеДанныеДляФормированияШтампа
//
Функция ДанныеДляШтампаЭлектроннойПодписи(Сообщение)
	
	ДанныеДляФормированияШтампа = КриптографияБЭД.НовыеДанныеДляФормированияШтампа();
	
	СвойстваСообщения = СвойстваСообщения(Сообщение,
		"ЭлектронныйДокумент, ТипЭлементаРегламента, Статус, Направление");
	ЭлектронныйДокумент = СвойстваСообщения.ЭлектронныйДокумент;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Организация");
	Сведения = СведенияСообщенияУчастникаЭДО(ЭлектронныйДокумент);
	ИдентификаторДокумента = Сведения.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
	СтатусСообщенияЭДО = СвойстваСообщения.Статус;
	
	ДанныеДляФормированияШтампа.ИдентификаторДокумента = ИдентификаторДокумента;
	ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя = СвойстваСообщения.ТипЭлементаРегламента
		 = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ДанныеДляФормированияШтампа.Организация = Организация;
	ЭтоИсходящийДокумент = ТипЗнч(ЭлектронныйДокумент)
		 = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО");
	ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = ЭтоИсходящийДокумент;
	
	ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	Если СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Подписан
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан Тогда
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	ИначеЕсли СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Отправлен
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Подтвержден Тогда 
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Отправлен;
	ИначеЕсли СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Получен Тогда 
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Получен;
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ОсновноеСостояние = ОсновноеСостояние;
	
	СостояниеДокумента = СостояниеДокумента(ЭлектронныйДокумент);
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Остановлен = Ложь;
		ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСостоянияСообщений();
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		СостоянияСообщений = Запрос.Выполнить().Выгрузить();
		ИспользоватьУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
		Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
			СвойстваСообщения.Состояние = РегламентыЭДО.СостояниеСообщения(
				СвойстваСообщения, ДокументОбъект, ИспользоватьУтверждение);
		КонецЦикла;
		СостояниеДокумента = РегламентыЭДО.СостояниеДокумента(ДокументОбъект, СостоянияСообщений, Не ЭтоИсходящийДокумент);
	КонецЕсли;
	
	ДополнительноеСостояние = Неопределено;
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		Или СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().ВПроцессеАннулирования;
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Аннулирован;
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление
		Или СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Отклонен;
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ДополнительноеСостояние = ДополнительноеСостояние;
	
	Если ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя Тогда
		
		ЭлектронныеПодписиОтправителя = Новый Массив;
		ЭлектронныеПодписиПолучателя = Новый Массив;
		ЭлектронныеПодписиВнутренние = ЭлектронныеПодписиОтправителя;
		ДанныеЭлементовСхемыРегламента = ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		
		ДанныеОтправителя = ДанныеЭлементовСхемыРегламента.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
		
		ДанныеПолучателя = ДанныеЭлементовСхемыРегламента.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя, "ТипЭлементаРегламента");
		
		Если ЗначениеЗаполнено(ДанныеОтправителя) И ЗначениеЗаполнено(ДанныеПолучателя) Тогда
			
			ЭлектронныеПодписиОтправителя =
				УстановленныеПодписиСУчетомДоверенностей(ДанныеОтправителя.Сообщение);
			
			ЭлектронныеПодписиПолучателя =
				УстановленныеПодписиСУчетомДоверенностей(ДанныеПолучателя.Сообщение);
			
		Иначе

			ПодписиПоВладельцу = Новый Соответствие;
			
			ОтборИОП = Новый Структура;
			ОтборИОП.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИОП);
			СообщенияИОП = ДанныеЭлементовСхемыРегламента.НайтиСтроки(ОтборИОП);
			
			Для Каждого СообщениеИОП Из СообщенияИОП Цикл
				ПодписиПоНаправлению = ПодписиПоНаправлению(СообщениеИОП, ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент,
					ЭлектронныеПодписиПолучателя, ЭлектронныеПодписиОтправителя, ЭлектронныеПодписиВнутренние);
				ПодписиСообщения = УстановленныеПодписиСУчетомДоверенностей(СообщениеИОП.Сообщение);
				Для Каждого Подпись Из ПодписиСообщения Цикл
					ПодписиПоВладельцу.Вставить(Подпись.СвойстваПодписи.Владелец, ПодписиПоНаправлению);
				КонецЦикла;
			КонецЦикла;
			
			
			Если ЗначениеЗаполнено(ДанныеОтправителя) Тогда
				ПодписиСообщения = УстановленныеПодписиСУчетомДоверенностей(ДанныеОтправителя.Сообщение);
				Для Каждого Подпись Из ПодписиСообщения Цикл
					ПодписиПоНаправлению = ПодписиПоВладельцу[Подпись.СвойстваПодписи.Владелец];
					Если ПодписиПоНаправлению = Неопределено Тогда
						ПодписиПоНаправлению = ПодписиПоНаправлению(ДанныеОтправителя, ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент,
							ЭлектронныеПодписиПолучателя, ЭлектронныеПодписиОтправителя, ЭлектронныеПодписиВнутренние);
						ПодписиПоВладельцу.Вставить(Подпись.СвойстваПодписи.Владелец, ПодписиПоНаправлению);
					КонецЕсли;
					ПодписиПоНаправлению.Добавить(Подпись);
				КонецЦикла;
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(ДанныеПолучателя) Тогда
				ПодписиСообщения = УстановленныеПодписиСУчетомДоверенностей(ДанныеПолучателя.Сообщение);
				Для Каждого Подпись Из ПодписиСообщения Цикл
					ПодписиПоНаправлению = ПодписиПоВладельцу[Подпись.СвойстваПодписи.Владелец];
					Если ПодписиПоНаправлению = Неопределено Тогда 
						ПодписиПоНаправлению = ПодписиПоНаправлению(ДанныеПолучателя, ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент,
							ЭлектронныеПодписиПолучателя, ЭлектронныеПодписиОтправителя, ЭлектронныеПодписиВнутренние);
						ПодписиПоВладельцу.Вставить(Подпись.СвойстваПодписи.Владелец, ПодписиПоНаправлению);
					КонецЕсли;
					ПодписиПоНаправлению.Добавить(Подпись);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
		ДанныеДляФормированияШтампа.ПодписиОтправителя = ЭлектронныеПодписиОтправителя;
		ДанныеДляФормированияШтампа.ПодписиПолучателя = ЭлектронныеПодписиПолучателя;
		
	Иначе
		
		ЭлектронныеПодписи = УстановленныеПодписиСУчетомДоверенностей(Сообщение);
		ДанныеДляФормированияШтампа.ПодписиОтправителя = ЭлектронныеПодписи;
		
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ЕстьОтветнаяПодпись = ЗначениеЗаполнено(ДанныеДляФормированияШтампа.ПодписиОтправителя)
		Или (СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий
			И (СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
			Или СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен));
		
	Возврат ДанныеДляФормированияШтампа;
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает результат проверки на необходимость наличия доверенности на подпись 
//
// Параметры:
//  ИННДоверителя - Строка
//  ДанныеСертификата - ДвоичныеДанные
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, ДанныеСертификата)
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
	
	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(СертификатКриптографии);
	
	СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(СертификатКриптографии);
	
	Результат = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
		ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	
	Возврат Результат;
	
КонецФункции

// Дополнительный данные, необходимые для проверки подписи файла по МЧД
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - проверяемый файл
// 
// Возвращаемое значение:
//  Структура:
// * СвойстваФайла - ВыборкаИзРезультатаЗапроса:
// ** Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// ** СообщениеЭДО - ДокументСсылка.СообщениеЭДО
// ** ПолноеИмяФайла - Строка
// * СвойстваСообщения - ВыборкаИзРезультатаЗапроса:
// ** Ссылка - ДокументСсылка.СообщениеЭДО
// ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                        - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// ** ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// ** Направление - ПеречислениеСсылка.НаправленияЭДО
// ** Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
// ** Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// * СвойстваДокумента - ВыборкаИзРезультатаЗапроса:
// ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// ** Организация - ОпределяемыйТип.Организация
// ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
// ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//
Функция ДополнительныйКонтекстПроверки(ФайлСообщения)
	Запрос = Новый Запрос;
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Ссылка,
				   |	ВладелецФайла КАК СообщениеЭДО,
				   |	ПолноеИмяФайла
				   |ПОМЕСТИТЬ СвойстваФайла
				   |ИЗ
				   |	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СвойстваФайла
				   |ГДЕ
				   |	Ссылка = &ФайлСообщения
				   |;
				   |
				   |ВЫБРАТЬ
				   |	СвойстваФайла.СообщениеЭДО КАК Ссылка,
				   |	СвойстваФайла.СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
				   |	СвойстваФайла.СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
				   |	СвойстваФайла.СообщениеЭДО.Направление КАК Направление,
				   |	СвойстваФайла.СообщениеЭДО.Состояние КАК Состояние,
				   |	СвойстваФайла.СообщениеЭДО.Статус КАК Статус
				   |ПОМЕСТИТЬ СвойстваСообщения
				   |ИЗ
				   |	СвойстваФайла КАК СвойстваФайла
				   |;
				   |
				   |ВЫБРАТЬ
				   |	ЭлектронныйДокумент КАК Ссылка,
				   |	ЭлектронныйДокумент.Организация КАК Организация,
				   |	ЭлектронныйДокумент.Контрагент КАК Контрагент,
				   |	ЭлектронныйДокумент.ТипРегламента КАК ТипРегламента
				   |ПОМЕСТИТЬ СвойстваДокумента
				   |ИЗ
				   |	СвойстваСообщения КАК СвойстваСообщения
				   |";
	Запрос.УстановитьПараметр("ФайлСообщения", ФайлСообщения);
	Запрос.Выполнить();
	СвойстваФайла = МенеджерТаблиц.Таблицы.Получить("СвойстваФайла").ПолучитьДанные().Выбрать();
	СвойстваФайла.Следующий();
	СвойстваСообщения = МенеджерТаблиц.Таблицы.Получить("СвойстваСообщения").ПолучитьДанные().Выбрать();
	СвойстваСообщения.Следующий();
	СвойстваДокумента = МенеджерТаблиц.Таблицы.Получить("СвойстваДокумента").ПолучитьДанные().Выбрать();
	СвойстваДокумента.Следующий();

	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("СвойстваФайла", СвойстваФайла);
	ДополнительныеДанные.Вставить("СвойстваСообщения", СвойстваСообщения);
	ДополнительныеДанные.Вставить("СвойстваДокумента", СвойстваДокумента);
	Возврат ДополнительныеДанные;
КонецФункции

// Определяет признак возможного наличия ответной подписи в сообщении ЭДО
// 
// Параметры:
//  ДополнительныйКонтекстПроверки - См. ДополнительныйКонтекстПроверки
// 
// Возвращаемое значение:
//  Булево
Функция СообщениеМожетПодписыватьсяТолькоОднойСтороной(ДополнительныйКонтекстПроверки)
	Возврат РегламентыЭДО.ЕстьИнформацияПолучателя(ДополнительныйКонтекстПроверки.СвойстваДокумента.ТипРегламента)
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
КонецФункции

// Определяет доверителя МЧД проверяемой подписи
// 
// Параметры:
//  ДополнительныйКонтекстПроверки - См. ДополнительныйКонтекстПроверки
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УчастникЭДО
Функция ОпределитьДоверителя(ДополнительныйКонтекстПроверки, СвойстваПодписи, ВсегоПодписей)
	Доверитель = Неопределено;
	
	Если ДополнительныйКонтекстПроверки.СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		Возврат ДополнительныйКонтекстПроверки.СвойстваДокумента.Организация;
	КонецЕсли;
	
	ИсходящееНаправление = ДополнительныйКонтекстПроверки.СвойстваСообщения.Направление
		= Перечисления.НаправленияЭДО.Исходящий;
	СвойстваСообщения = ДополнительныйКонтекстПроверки.СвойстваСообщения;
	
	Если СообщениеМожетПодписыватьсяТолькоОднойСтороной(ДополнительныйКонтекстПроверки) Тогда
		Если ИсходящееНаправление Тогда
			Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Организация;
		Иначе
			Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Контрагент;
		КонецЕсли;
	Иначе // у ПОА и регламентов без ответного титула ответная подпись связана с тем же файлом
	
		// Пока исходим из следующего правила, все подписи, кроме последней относятся к отправляющей стороне
		// (в зависимости от направления), под вопросом только последняя подпись, которая в зависимости от
		// статуса и состояния сообщения может относится как к отправляющей, так и к принимающей стороне.
		ЭтоПоследняяПодпись = СвойстваПодписи.ПорядковыйНомер > 1 И СвойстваПодписи.ПорядковыйНомер = ВсегоПодписей;
		Если ИсходящееНаправление Тогда
			ОтветнаяСторонаПодписалаСообщение = СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
			Если ОтветнаяСторонаПодписалаСообщение И ЭтоПоследняяПодпись Тогда
				Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Контрагент;
			Иначе
				Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Организация;
			КонецЕсли;
		Иначе
			ОтветнаяСторонаПодписалаСообщение = 
				Не СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание
				И Не СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Утверждение;
			Если ОтветнаяСторонаПодписалаСообщение И ЭтоПоследняяПодпись Тогда
				Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Организация;
			Иначе
				Доверитель = ДополнительныйКонтекстПроверки.СвойстваДокумента.Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Доверитель;
КонецФункции

// Возвращает результат проверки подписи по МЧД.
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
// 
// Возвращаемое значение:
//  - См. ПроверитьПодписьПоМЧД
//  - Неопределено - если для подписи не требуется проверка по МЧД.
Функция ПроверитьПодписьФайлаПоМЧД(ФайлСообщения, СвойстваПодписи, ВсегоПодписей)
	
	ДополнительныйКонтекст = ДополнительныйКонтекстПроверки(ФайлСообщения);
	Доверитель = ОпределитьДоверителя(ДополнительныйКонтекст, СвойстваПодписи, ВсегоПодписей);

	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСообщения);
	ОписаниеФайла.ИмяФайла = ДополнительныйКонтекст.СвойстваФайла.ПолноеИмяФайла;
	
	ФайлыСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлСообщения);
	ПроверкиОператоромЭДО = МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО(ФайлыСообщений);
	
	РезультатПроверки = ПроверитьПодписьПоМЧД(ФайлСообщения, ДополнительныйКонтекст.СвойстваСообщения.Направление,
		ОписаниеФайла, СвойстваПодписи, Доверитель, ПроверкиОператоромЭДО);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет подписи по МЧД после загрузки данных контейнеров.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиПоМЧДПослеЗагрузкиДанных(КонтекстДиагностики)
	
	ТекущийФайлСообщения = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка();
	РазмерПорции = 1000;
	
	Пока Истина Цикл
		
		СведенияОПодписяхДляПроверки = МашиночитаемыеДоверенности.ПорцияСведенийОПодписяхДляПроверки(
			ТекущийФайлСообщения, РазмерПорции);
		
		СведенияОПодписяхДляПроверки = ДополнитьСведенияОПодписяхДаннымиДокумента(СведенияОПодписяхДляПроверки);
		
		Количество = СведенияОПодписяхДляПроверки.Количество();
		Если Количество = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьПодписиФайловПоМЧДПослеЗагрузкиДанных(СведенияОПодписяхДляПроверки, КонтекстДиагностики);
		
		Если Количество < РазмерПорции Тогда
			Возврат;
		Иначе
			ТекущийФайлСообщения = СведенияОПодписяхДляПроверки[Количество - 1].ПодписанныйОбъект;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сведения о подписях дополненные данными документа.
// 
// Параметры:
//  СведенияОПодписях - См. МашиночитаемыеДоверенности.ПорцияСведенийОПодписяхДляПроверки
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - См. КриптографияБЭД.ХешПодписи
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Доверитель - ОпределяемыйТип.УчастникЭДО
Функция ДополнитьСведенияОПодписяхДаннымиДокумента(СведенияОПодписях)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПодписях.ПодписанныйОбъект,
		|	СведенияОПодписях.ХешПодписи
		|ПОМЕСТИТЬ СведенияОПодписях
		|ИЗ
		|	&СведенияОПодписях КАК СведенияОПодписях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОПодписях.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	СведенияОПодписях.ХешПодписи КАК ХешПодписи,
		|	СообщениеЭДО.Направление КАК Направление,
		|	ВЫБОР
		|		КОГДА СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|			ТОГДА ЭлектронныйДокументВходящийЭДО.Контрагент
		|		ИНАЧЕ ЭлектронныйДокументВходящийЭДО.Организация
		|	КОНЕЦ КАК Доверитель
		|ИЗ
		|	СведенияОПодписях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СведенияОПодписях.ПодписанныйОбъект = ПрисоединенныеФайлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОПодписях.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	СведенияОПодписях.ХешПодписи КАК ХешПодписи,
		|	СообщениеЭДО.Направление КАК Направление,
		|	ВЫБОР
		|		КОГДА СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|			ТОГДА ЭлектронныйДокументИсходящийЭДО.Организация
		|		ИНАЧЕ ЭлектронныйДокументИсходящийЭДО.Контрагент
		|	КОНЕЦ КАК Доверитель
		|ИЗ
		|	СведенияОПодписях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СведенияОПодписях.ПодписанныйОбъект = ПрисоединенныеФайлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка";
	
	Запрос.УстановитьПараметр("СведенияОПодписях", СведенияОПодписях);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Проверяет подписи файлов по МЧД после загрузки данных.
// 
// Параметры:
//  СведенияОПодписяхПоМЧД - См. ДополнитьСведенияОПодписяхДаннымиДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиФайловПоМЧДПослеЗагрузкиДанных(СведенияОПодписяхПоМЧД, КонтекстДиагностики)
	
	ФайлыСообщений = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОПодписяхПоМЧД, "ПодписанныйОбъект", Истина);
	
	СвойстваПодписейФайлов = КриптографияБЭД.УстановленныеПодписиОбъектов(ФайлыСообщений);
	
	ОписанияФайлов = ОписанияФайлов(ФайлыСообщений, КонтекстДиагностики);
	
	ПроверкиОператоромЭДО = МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО(ФайлыСообщений);
	
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	Для Каждого СведенияОПодписиПоМЧД Из СведенияОПодписяхПоМЧД Цикл
		
		ФайлСообщения = СведенияОПодписиПоМЧД.ПодписанныйОбъект;
		СвойстваПодписейФайла = СвойстваПодписейФайлов[ФайлСообщения];
		СвойстваПодписи = КриптографияБЭД.НайтиСвойстваПодписиПоХешу(СвойстваПодписейФайла,
			СведенияОПодписиПоМЧД.ХешПодписи);
		Если Не ЗначениеЗаполнено(СвойстваПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = ОписанияФайлов[ФайлСообщения];
		
		РезультатПроверки = ПроверитьПодписьПоМЧД(ФайлСообщения, СведенияОПодписиПоМЧД.Направление, ОписаниеФайла,
			СвойстваПодписи, СведенияОПодписиПоМЧД.Доверитель, ПроверкиОператоромЭДО, НаборСведенийОСтатусахМЧД);
		
		ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		
		УстановитьПривилегированныйРежим(Истина);
		МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ФайлСообщения, ХешПодписи, РезультатПроверки);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результат проверки подписи по МЧД..
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  НаправлениеСообщения - ПеречислениеСсылка.НаправленияЭДО
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  Доверитель - ОпределяемыйТип.УчастникЭДО
//  ПроверкиОператоромЭДО - См. МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО
//  КэшСведенийОСтатусахМЧД - Неопределено, Соответствие
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи 
Функция ПроверитьПодписьПоМЧД(ФайлСообщения, НаправлениеСообщения, ОписаниеФайла, СвойстваПодписи,
	Доверитель, ПроверкиОператоромЭДО, КэшСведенийОСтатусахМЧД = Неопределено)
	
	ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСообщения, "ВладелецФайла.ТипЭлементаРегламента");
	Если Не РегламентыЭДО.ЭтоИнформацияУчастникаЭДО(ТипЭлементаРегламента) 
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
		РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
		РезультатПроверки.ПроверкаВыполнена = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если КэшСведенийОСтатусахМЧД = Неопределено Тогда
		КэшСведенийОСтатусахМЧД = Новый Соответствие;
	КонецЕсли;
	
	СодержаниеФайла = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	
	НомераМЧД = Новый Массив;
	СведенияОДоверителе = Новый Структура("ИНН, КПП", "", "");
	ЭтоМЧДКонтрагента = НаправлениеСообщения = Перечисления.НаправленияЭДО.Входящий;
	
	Если ЗначениеЗаполнено(ОписаниеФайла) И ЗначениеЗаполнено(СодержаниеФайла) Тогда 
		НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(ОписаниеФайла, СодержаниеФайла.Формат);
	КонецЕсли;
	
	ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
	МашиночитаемыеДоверенности.ДополнитьНомерамиДоверенностейСообщений(НомераМЧД, ФайлСообщения, ХешПодписи);
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ФайлСообщения, "ВладелецФайла.ЭлектронныйДокумент.Контрагент");
	
	Если Не ЗначениеЗаполнено(НомераМЧД) Тогда
		СтарыйРезультатПроверки = МашиночитаемыеДоверенности.РезультатПроверкиПодписи(ФайлСообщения, ХешПодписи);
		Если ЗначениеЗаполнено(СтарыйРезультатПроверки) И ЗначениеЗаполнено(СтарыйРезультатПроверки.Доверенность) Тогда
			НомераМЧД.Добавить(СтарыйРезультатПроверки.Доверенность.НомерДоверенности);
			ЭтоМЧДКонтрагента = МашиночитаемыеДоверенности.ЭтоМЧДКонтрагента(СтарыйРезультатПроверки.Доверенность);
			УчастникЭДО = Контрагент;
			Если НЕ ЭтоМЧДКонтрагента И НаправлениеСообщения <> Перечисления.НаправленияЭДО.Интеркампани Тогда
				УчастникЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ФайлСообщения, "ВладелецФайла.ЭлектронныйДокумент.Организация");
			КонецЕсли;
			СведенияОбУчастникеЭДО = ИнтеграцияЭДО.ДанныеЮрФизЛица(УчастникЭДО);
			ЗаполнитьЗначенияСвойств(СведенияОДоверителе, СведенияОбУчастникеЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если НаправлениеСообщения = Перечисления.НаправленияЭДО.Интеркампани Тогда
		
		// в этом случае обе подписи "исходящие" и нет возможности однозначно связать их с конкретными сторонами ЭДО,
		// следовательно ищем сведения о доверителе в регистре ЭлектронныеПодписиПоМЧД, покольку записи этого регистра
		// формировались в момент подписания, когда сторона ЭДО была однозначно идентифицирована
		
		ЭтоМЧДКонтрагента = Ложь;
		ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		СведенияОДоверителе =
			МашиночитаемыеДоверенности.СведенияОДоверителе(ХешПодписи, СвойстваПодписи.ПодписанныйОбъект);
			
		Если СведенияОДоверителе = Неопределено Тогда
			
			РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
			РезультатПроверки.ПроверкаВыполнена = Истина;
			Возврат РезультатПроверки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОДоверителе.ИНН) Тогда
		СведенияОбУчастникеЭДО = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
		ЗаполнитьЗначенияСвойств(СведенияОДоверителе, СведенияОбУчастникеЭДО);
		ЭтоМЧДКонтрагента = Не ИнтеграцияЭДО.ЭтоОрганизация(Доверитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОДоверителе.ИНН)
		И Не ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(СведенияОДоверителе.ИНН,
			СвойстваПодписи.Сертификат) Тогда
		РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
		РезультатПроверки.ПроверкаВыполнена = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ОшибкиПроверкиПолномочий = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НомераМЧД) Тогда
		
		ЭтоМЧДКонтрагента = Истина; //исходим из того что МЧД организации всегда заполнено при подписании
		СведенияОбУчастникеЭДО = ИнтеграцияЭДО.ДанныеЮрФизЛица(Контрагент);
		ЗаполнитьЗначенияСвойств(СведенияОДоверителе, СведенияОбУчастникеЭДО);
			
		СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
		СведенияОПредставителе = Новый Структура("ИНН, КПП", ИННПредставителя, "");
		
		ЭлектронныйДокумент =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСообщения, "ВладелецФайла.ЭлектронныйДокумент");
		Результат = МашиночитаемыеДоверенности.НомераДоверенностейПоУчастникам(
			СведенияОДоверителе, СведенияОПредставителе, ЭлектронныйДокумент);
		
		НомераМЧД = Результат.НомераДоверенностей;
		
		Если НомераМЧД.Количество() = 0 Тогда
			ОшибкиПроверкиПолномочий = Результат.ОшибкиПроверкиПолномочий;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПроверки = ПараметрыПроверкиПодписиПоМЧД(НомераМЧД, СвойстваПодписи, СведенияОДоверителе.ИНН,
		КэшСведенийОСтатусахМЧД, ЭтоМЧДКонтрагента);
	
	ПараметрыОтбора = Новый Структура("ПодписанныйОбъект, Отпечаток", ФайлСообщения, СвойстваПодписи.Отпечаток);
	НайденныеСтроки = ПроверкиОператоромЭДО.НайтиСтроки(ПараметрыОтбора);
	ПроверкаОператором = Неопределено;
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ПроверкаОператором = МашиночитаемыеДоверенности.НовыйПротоколПроверкиОператором();
		ПроверкаОператором.ДоверенностьДействительна = НайденныеСтроки[0].ДоверенностьВерна;
	КонецЕсли;
	ПараметрыПроверки.ПроверкаОператором = ПроверкаОператором;
	
	ПараметрыПроверки.ЭлектронныйДокумент =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСообщения, "ВладелецФайла.ЭлектронныйДокумент");
	
	РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
	
	Если ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		РезультатПроверки.ПротоколПроверки.ОшибкиПроверкиПолномочий = ОшибкиПроверкиПолномочий;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает параметры проверки подписей файла сообщения электронного документа по МЧД при подписании.
// 
// Параметры:
//  НомераМЧД - См. МашиночитаемыеДоверенности.НомераДоверенностейПоУчастникам
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ИННДоверителя - Строка
//  НаборСведенийОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  ЭтоМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
Функция ПараметрыПроверкиПодписиПоМЧД(НомераМЧД,
		СвойстваПодписи, ИННДоверителя, НаборСведенийОСтатусахМЧД, ЭтоМЧДКонтрагента)
	
	ПараметрыПроверки = МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи();
	ПараметрыПроверки.СвойстваПодписи = СвойстваПодписи;
	
	Если Не ЗначениеЗаполнено(НомераМЧД) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не найдена МЧД для файла электронного документа'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось извлечь сертификат из подписи файла электронного документа'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИННДоверителя) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось получить ИНН продавца'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	ПараметрыПроверки.ИННДоверителя = ИННДоверителя;
	
	СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
	ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
	
	НаборДанныхМЧД = НаборДанныхМЧДДляЗапросаСведенийОСтатусах(ИННДоверителя, НомераМЧД);
	
	ДополнитьСведенияОСтатусахМЧДОрганизаций(НаборСведенийОСтатусахМЧД, НаборДанныхМЧД, ЭтоМЧДКонтрагента);
	
	СведенияОСтатусеМЧД = СведенияОСтатусеМЧДПоПредставителю(НаборСведенийОСтатусахМЧД, НомераМЧД, ИННПредставителя);
	
	Если СведенияОСтатусеМЧД = Неопределено Тогда
		ПараметрыПроверки.ТекстОшибки =
			НСтр("ru = 'Произошла неизвестная ошибка при получении статуса МЧД из распределенного реестра'");
		Возврат ПараметрыПроверки;
	ИначеЕсли СведенияОСтатусеМЧД.Ошибка Тогда
		ПараметрыПроверки.ТекстОшибки =
			НСтр("ru = 'Не удалось получить статус МЧД из распределенного реестра по при причине:'")
				+ Символы.ПС + СведенияОСтатусеМЧД.ОписаниеОшибки;
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Возвращает описания файлов по переданным ссылкам.
// 
// Параметры:
//  ФайлыСообщений - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
Функция ОписанияФайлов(ФайлыСообщений, КонтекстДиагностики)
	
	ОписанияФайлов = Новый Соответствие;
	
	ИменаФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ФайлыСообщений, "ПолноеИмяФайла");
	
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ФайлыСообщений, КонтекстДиагностики);
	
	Для Каждого ФайлСообщения Из ФайлыСообщений Цикл
		
		ИмяФайла = ИменаФайлов[ФайлСообщения];
		ДвоичныеДанные = ДвоичныеДанныеФайлов[ФайлСообщения];
		
		Если ИмяФайла = Неопределено ИЛИ ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = ИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
		
		ОписанияФайлов.Вставить(ФайлСообщения, ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат ОписанияФайлов;
	
КонецФункции

// Свойства доверенностей из результатов проверок подписей.
// 
// Параметры:
//  РезультатыПроверок - См. РезультатыПроверокПодписейФайлаПоМЧД
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей
Функция СвойстваДоверенностейИзРезультатовПроверокПодписей(РезультатыПроверок)
	
	СвойстваДоверенностей = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок) Тогда
		Возврат СвойстваДоверенностей;
	КонецЕсли;
	
	Доверенности = Новый Массив;
	
	Для Каждого РезультатПроверки Из РезультатыПроверок Цикл
		Доверенность = РезультатПроверки.Значение.Доверенность;
		Если ЗначениеЗаполнено(Доверенность) Тогда
			Доверенности.Добавить(Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Доверенности) Тогда
		Возврат СвойстваДоверенностей;
	КонецЕсли;
	
	СвойстваДоверенностей = МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей(Доверенности);
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает набор данных МЧД для запроса сведений о статусах.
// 
// Параметры:
//  ИННДоверителя - Строка
//  НомераМЧД - Массив из Строка
// 
// Возвращаемое значение:
//  Массив из См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
Функция НаборДанныхМЧДДляЗапросаСведенийОСтатусах(ИННДоверителя, НомераМЧД)
	
	НаборДанныхМЧД = Новый Массив;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		
		ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
		ДанныеМЧД.ИННДоверителя = ИННДоверителя;
		ДанныеМЧД.НомерДоверенности = НомерМЧД;
		НаборДанныхМЧД.Добавить(ДанныеМЧД);
		
	КонецЦикла;
	
	Возврат НаборДанныхМЧД;
	
КонецФункции

// Дополняет сведения о статусах МЧД организаций.
// 
// Параметры:
//  СведенияОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  НаборДанныхМЧД - Массив из См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//  ЭтоМЧДКонтрагента - Булево
//
Процедура ДополнитьСведенияОСтатусахМЧДОрганизаций(СведенияОСтатусахМЧД, НаборДанныхМЧД, ЭтоМЧДКонтрагента)
	
	Индекс = НаборДанныхМЧД.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		ДанныеМЧД = НаборДанныхМЧД[Индекс];
		Если СведенияОСтатусахМЧД[ДанныеМЧД.НомерДоверенности] <> Неопределено Тогда
			НаборДанныхМЧД.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоМЧДКонтрагента Тогда
		НовыеСведенияОСтатусахМЧД = МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейКонтрагентов(НаборДанныхМЧД);
	Иначе
		НовыеСведенияОСтатусахМЧД = МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций(НаборДанныхМЧД);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СведенияОСтатусахМЧД, НовыеСведенияОСтатусахМЧД);
	
КонецПроцедуры

// Возвращает результат получения сведений о статусе МЧД по представителю.
// 
// Параметры:
//  СведенияОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  НомераМЧД - Массив из Строка
//  ИННПредставителя - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ЭтоМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
Функция СведенияОСтатусеМЧДПоПредставителю(СведенияОСтатусахМЧД, НомераМЧД, ИННПредставителя)
	
	Если НомераМЧД.Количество() = 1 Тогда
		Возврат СведенияОСтатусахМЧД[НомераМЧД[0]];
	КонецЕсли;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		Результат = СведенияОСтатусахМЧД[НомерМЧД];
		Если НЕ Результат.Ошибка И Результат.Сведения.ИННПредставителя = ИННПредставителя Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает новые параметры ошибки проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// * СвойстваДоверенности - См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
// * РезультатПроверки - См. НовыйРезультатПроверкиПодписиПоМЧД
// * ТекстОшибки - Строка
Функция НовыеПараметрыОшибкиПроверкиПодписиПоМЧД()
	Параметры = Новый Структура;
	Параметры.Вставить("СвойстваПодписи", Новый Структура);
	Параметры.Вставить("СвойстваДоверенности", Новый Структура);
	Параметры.Вставить("РезультатПроверки", Новый Структура);
	Параметры.Вставить("ТекстОшибки", "");
	Возврат Параметры;
КонецФункции

// Добавляет ошибку проверки подписи по МЧД.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПараметрыОшибки - См. НовыеПараметрыОшибкиПроверкиПодписиПоМЧД
Процедура ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки)

	ВидОперации = НСтр("ru = 'Проверка подписей по МЧД'");
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ПодписьПоМЧДНеВерна";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронная подпись не верна.'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Проверка электронной подписи с учетом машиночитаемой доверенности завершена неуспешно.'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Посмотреть"">Посмотреть</a> результат проверки подписи по МЧД'");
	ОбработчикНажатия = "ЭлектронныеДокументыЭДОКлиентСобытия.ПриПросмотреРезультатаПроверкиПодписиПоМЧД";
	ВидОшибки.ОбработчикиНажатия.Вставить("Посмотреть", ОбработчикНажатия);
	ВидОшибки.ПараметрыОбработчиков.Вставить("Посмотреть", ПараметрыОшибки);
	
	КраткоеПредставление = ПараметрыОшибки.ТекстОшибки;
	ПодробноеПредставление = ПараметрыОшибки.ТекстОшибки;

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Добавляет ошибку проверки СНИЛС подписанта МЧД.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуПроверкиСнилсПодписантаМЧД(КонтекстДиагностики, ТекстОшибки)

	ВидОперации = НСтр("ru = 'Проверка СНИЛС подписанта МЧД'");
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "СнилсПодписантаИДоверителяРазличны";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронная подпись не верна.'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Проверка СНИЛС подписанта машиночитаемой доверенности завершена неуспешно.'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Проверьте реквизиты машиночитаемой доверенности'");
	
	КраткоеПредставление = ТекстОшибки;
	ПодробноеПредставление = ТекстОшибки;

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Возвращает результаты проверок подписей по МЧД при регистрации сертификатов.
//
// Параметры:
//  НаборПараметровПроверок - Массив из См. ЭлектронныеДокументыЭДОКлиент.НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(НаборПараметровПроверок, КонтекстДиагностики) Экспорт
	
	ПараметрыПроверок = Новый Соответствие;
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	НаборДоверенностей = Новый Массив;
	Для Каждого ПараметрыПроверки Из НаборПараметровПроверок Цикл
		Если НаборДоверенностей.Найти(ПараметрыПроверки.Доверенность) = Неопределено Тогда
			НаборДоверенностей.Добавить(ПараметрыПроверки.Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НаборДоверенностей, "Подписана, СтатусВРеестреФНС");
	
	НереестровыеМЧД = Новый Массив;
	НаборДоверенностей = Новый Массив;
	Для Каждого ЭлементСоответствия Из ДанныеМЧД Цикл
		МЧД = ЭлементСоответствия.Значение;
		ЭтоНереестроваяМЧД = МЧД.Подписана И НЕ ЗначениеЗаполнено(МЧД.СтатусВРеестреФНС);
		Если ЭтоНереестроваяМЧД Тогда
			НереестровыеМЧД.Добавить(ЭлементСоответствия.Ключ);
		Иначе
			НаборДоверенностей.Добавить(ЭлементСоответствия.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	НомераПоМЧД = МашиночитаемыеДоверенности.ПолучитьНомераДоверенностей(НаборДоверенностей);
	
	Для Каждого ПараметрыПроверкиСертификата Из НаборПараметровПроверок Цикл
		
		ПараметрыПроверки = МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи();
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверкиСертификата.СвойстваПодписи.Сертификат) Тогда
			ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось извлечь сертификат из подписи файла заявления на регистрацию'");
		Иначе

			СертификатКриптографии = Новый СертификатКриптографии(ПараметрыПроверкиСертификата.СвойстваПодписи.Сертификат);
			ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
			ИННДоверителя = ПараметрыПроверкиСертификата.ИННДоверителя;
				
			Если НереестровыеМЧД.Найти(ПараметрыПроверкиСертификата.Доверенность) = Неопределено Тогда
			
				
				НомерМЧД = НомераПоМЧД[ПараметрыПроверкиСертификата.Доверенность];
				НомераМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерМЧД);
				
				НаборДанныхМЧД = НаборДанныхМЧДДляЗапросаСведенийОСтатусах(ИННДоверителя, НомераМЧД);
				
				ДополнитьСведенияОСтатусахМЧДОрганизаций(НаборСведенийОСтатусахМЧД, НаборДанныхМЧД, Ложь);
				СведенияОСтатусеМЧД = СведенияОСтатусеМЧДПоПредставителю(НаборСведенийОСтатусахМЧД, НомераМЧД, ИННПредставителя); 
				ПараметрыПроверки.ТребуетсяПроверкаМЧДНаКлиенте = СведенияОСтатусеМЧД.ТребуетсяПроверкаМЧДНаКлиенте; 
				
				ДанныеФайлаДоверенностиИПодписи = 
					МашиночитаемыеДоверенности.ДанныеФайлаДоверенностиИПодписи(ПараметрыПроверкиСертификата.Доверенность);
				
				ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
				ДанныеДляПроверки.ДанныеДоверенности = ДанныеФайлаДоверенностиИПодписи.ДанныеФайла;
				ДанныеДляПроверки.ДанныеПодписи = ДанныеФайлаДоверенностиИПодписи.ДанныеПодписи;
				
				ПараметрыПроверки.ДанныеДляПроверки = ДанныеДляПроверки;

				Если СведенияОСтатусеМЧД = Неопределено Тогда
					ПараметрыПроверки.ТекстОшибки =
						НСтр("ru = 'Произошла неизвестная ошибка при получении статуса МЧД из распределенного реестра'");
				ИначеЕсли СведенияОСтатусеМЧД.Ошибка Тогда
					ПараметрыПроверки.ТекстОшибки =
						НСтр("ru = 'Не удалось получить статус МЧД из распределенного реестра по причине:'")
							+ Символы.ПС + СведенияОСтатусеМЧД.ОписаниеОшибки;
					
					Если СведенияОСтатусеМЧД.Сведения <> Неопределено Тогда
						ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
					КонецЕсли;
	
				Иначе
					ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
				КонецЕсли;
				
			Иначе
				
				СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
				ПараметрыПроверки.СведенияМЧД = СправочникМЧД.СведенияМЧД(ПараметрыПроверкиСертификата.Доверенность);
				ПараметрыПроверки.ИННДоверителя = ИННДоверителя;
				
			КонецЕсли;
			
			ПараметрыПроверки.ИННДоверителя = ИННДоверителя;
			ПараметрыПроверки.СвойстваПодписи = ПараметрыПроверкиСертификата.СвойстваПодписи;
			
		КонецЕсли;
		
		ПараметрыПроверок.Вставить(ПараметрыПроверкиСертификата.Сертификат, ПараметрыПроверки);
				
	КонецЦикла;
	
	Возврат ПараметрыПроверок;
	
КонецФункции

// Продолжает проверку подписей по МЧД при регистрации сертификатов, с дальнейшей обработкой результатов
//
// Параметры:
//  РезультатыПроверокПодписейПоМЧД - см. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.ПроверитьПодпись
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(РезультатыПроверокПодписейПоМЧД, 
	КонтекстДиагностики) Экспорт

	РезультатПроверки = Новый Соответствие;
	
	Для Каждого ЭлементНабора Из РезультатыПроверокПодписейПоМЧД Цикл
		
		Сертификат = ЭлементНабора.Ключ;
		ПараметрыПроверки = ЭлементНабора.Значение;
		
		РезультатПроверкиПодписи = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
		РезультатПроверки.Вставить(Сертификат, РезультатПроверкиПодписи);
		
		СвойстваДоверенности = 
			МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности(РезультатПроверкиПодписи.Доверенность);
			
		ПараметрыОшибки = НовыеПараметрыОшибкиПроверкиПодписиПоМЧД();
		ПараметрыОшибки.СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
		ПараметрыОшибки.СвойстваДоверенности = СвойстваДоверенности;
		ПараметрыОшибки.РезультатПроверки = РезультатПроверкиПодписи;
			
		Если Не РезультатПроверкиПодписи.ПодписьВерна Тогда
			ПараметрыОшибки.ТекстОшибки = 
				НСтр("ru = 'Электронная подпись заявления на регистрацию сертификата не верна.'");
			ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
			ПараметрыОшибки.ТекстОшибки = ПараметрыПроверки.ТекстОшибки;
			ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки);
			Продолжить;	
		КонецЕсли;
		
		МЧД = ПараметрыПроверки.СведенияМЧД.Ссылка;
		МашиночитаемыеДоверенности.ОтразитьРезультатПроверкиМЧД(МЧД, ПараметрыПроверки.СведенияМЧД.Верна, 
			ПараметрыПроверки.ТекстОшибки);
		
	КонецЦикла; 

	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает имена файлов сообщений для проверки по МЧД.
// 
// Параметры:
//  ФайлыСообщений - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Строка - Имя файла
Функция ИменаФайловСообщенийДляПроверкиПоМЧД(ФайлыСообщений)
	
	ИменаФайловСообщений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка В (&ФайлыСообщений)
		|	И СообщениеЭДОПрисоединенныеФайлы.Расширение В (""xml"", ""zip"")
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Запрос.УстановитьПараметр("ФайлыСообщений", ФайлыСообщений);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ИменаФайловСообщений;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИменаФайловСообщений.Вставить(Выборка.Ссылка, Выборка.ПолноеИмяФайла);
	КонецЦикла;
	
	Возврат ИменаФайловСообщений;
	
КонецФункции

#КонецОбласти

#Область ДокументыНаПодписи

Процедура ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, Условие, Отбор, ИмяТаблицы, ИмяСвойства)
	ЗначениеОтбора = Отбор[ИмяСвойства];
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	ИмяПараметра = "Отбор" + ИмяСвойства;
	Условие.Добавить(СтрШаблон("%1.%2 = &%3", ИмяТаблицы, ИмяСвойства, ИмяПараметра));
	Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеОтбора);
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокумента

Функция ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО)
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЭтоВходящийЭДО Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
			|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
			|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
			|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
			|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
			|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
			|	ЭлектронныйДокументВходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
			|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
			|	ЭлектронныйДокументВходящийЭДО.Остановлен КАК Остановлен,
			|	ЭлектронныйДокументВходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
			|	ЭлектронныйДокументВходящийЭДО.Исправлен КАК Исправлен,
			|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
			|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	Иначе
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
			|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
			|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
			|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента КАК ТипРегламента,
			|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
			|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
			|	ЭлектронныйДокументИсходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена КАК СпособОбмена,
			|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.Остановлен КАК Остановлен,
			|	ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
			|	ЭлектронныйДокументИсходящийЭДО.Исправлен КАК Исправлен,
			|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
			|	ЭлектронныйДокументИсходящийЭДО.Ответственный КАК Ответственный
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСостоянияСообщений());
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ЭлектронныйДокументВходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
		|	ЭлектронныйДокументВходящийЭДО.Остановлен КАК Остановлен,
		|	ЭлектронныйДокументВходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ЭлектронныйДокументВходящийЭДО.Исправлен КАК Исправлен,
		|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
		|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Комментарий, """") КАК КомментарийСостояния
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО (СостоянияДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ЭлектронныйДокументИсходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена КАК СпособОбмена,
		|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.Остановлен КАК Остановлен,
		|	ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ЭлектронныйДокументИсходящийЭДО.Исправлен КАК Исправлен,
		|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
		|	ЭлектронныйДокументИсходящийЭДО.Ответственный КАК Ответственный,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Комментарий, """") КАК КомментарийСостояния
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО (СостоянияДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаСостоянийДокументов()
	Возврат
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
КонецФункции

Функция ТекстЗапросаПараметровСостоянияДокумента()
	Возврат
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

Функция КомментарийКСостояниюДокумента(РезультатЗапроса)
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Комментарий;
	КонецЕсли;
	Возврат ""
КонецФункции

Функция НовыеДополненияСостоянийЭДО()
	Возврат Новый Соответствие;
КонецФункции

Функция ДополненияСостоянийЭДОПриПодписании(СвойстваДокумента, ВидПодписи, ВесМаршрута)
	
	ДополненияСостоянийЭДО = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ВесМаршрута) Тогда
		Возврат ДополненияСостоянийЭДО;
	КонецЕсли;
	
	Если СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
		
		Подписи = УстановленныеПодписиФайла(СвойстваДокумента.ОсновнойФайл);
		ПрогрессПодписания = СтрШаблон("%1 / %2", Подписи.Количество(), ВесМаршрута);
		ДополненияСостоянийЭДО.Вставить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание, ПрогрессПодписания);
		
	КонецЕсли;
	
	Возврат ДополненияСостоянийЭДО;
	
КонецФункции

Функция ДополнениеСостоянияЭДО(ДополненияСостоянийЭДО, СостояниеДокумента)
	
	Если Не ЗначениеЗаполнено(ДополненияСостоянийЭДО) Тогда
		Возврат "";
	КонецЕсли;
	
	Дополнение = ДополненияСостоянийЭДО[СостояниеДокумента];
	Если Дополнение = Неопределено Тогда
		Дополнение = "";
	КонецЕсли;
	
	Возврат Дополнение;
	
КонецФункции

Процедура ЗаписатьСостояниеДокумента(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий = "")
	МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.СостояниеДополнение = СостояниеДополнение;
	МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Функция УстановитьСостояниеДокументаПриФормировании(ДокументОбъект, СостоянияЭлементовРегламента, ДатаИзменения, НаборОбъектовУчета, КонтекстДиагностики, ДополненияСостоянийЭДО = Неопределено)
	
	СостояниеДокумента = ОбновитьСостояниеДокумента(ДокументОбъект, СостоянияЭлементовРегламента,
		ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики);
	
	ЭлектронныеДокументыЭДОСобытия.ПриФормированииЭлектронногоДокумента(ДокументОбъект.Ссылка,
		СостояниеДокумента, НаборОбъектовУчета, КонтекстДиагностики);
	
	Возврат СостояниеДокумента;
	
КонецФункции

Функция УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияЭлементовРегламента, ДатаИзменения, КонтекстДиагностики, ДополненияСостоянийЭДО = Неопределено, Комментарий = "")
	
	СостояниеДокумента = ОбновитьСостояниеДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента,
		ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики, Комментарий);
	
	ЭлектронныеДокументыЭДОСобытия.ПриИзмененииСостоянияЭлектронногоДокумента(ПараметрыДокумента.Ссылка, СостояниеДокумента,
		КонтекстДиагностики);
	
	Возврат СостояниеДокумента;
	
КонецФункции

Функция ОбновитьСостояниеДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента, ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики, Комментарий = "")
	
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ПараметрыДокумента.Ссылка); 
	
	СостояниеДокумента = РегламентыЭДО.СостояниеДокумента(ПараметрыДокумента,
		СостоянияЭлементовРегламента, ЭтоВходящийЭДО);
	
	ДополнениеСостоянияЭДО = ДополнениеСостоянияЭДО(ДополненияСостоянийЭДО, СостояниеДокумента);
	
	ЗаписатьСостояниеДокумента(ПараметрыДокумента.Ссылка, СостояниеДокумента, ДополнениеСостоянияЭДО,
		ДатаИзменения, Комментарий);
	
	Возврат СостояниеДокумента;
	
КонецФункции

Функция СостоянияПоДокументам(НаборДокументов)
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&НаборДокументов)";
	Запрос.УстановитьПараметр("НаборДокументов", НаборДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.Состояние);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаНабораСостоянийДокументов()
	Возврат 
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НаборСостоянийДокументов(ЭлектронныеДокументы)
	Запрос = Новый Запрос(ТекстЗапросаНабораСостоянийДокументов());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Состояние")
КонецФункции

#КонецОбласти

#Область СостояниеСообщения

Функция ТекстЗапросаСостоянияСообщений()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

Процедура УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзмененияСтатуса)
	Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
		Если СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
			Продолжить;
		КонецЕсли;
		СообщениеОбъект = СвойстваСообщения.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
		СообщениеОбъект.Записать();
		СвойстваСообщения.Состояние = СообщениеОбъект.Состояние;
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьСостоянияСообщений(СостоянияСообщений, ПараметрыДокумента)
	ИспользоватьУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
		СообщениеОбъект = СвойстваСообщения.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(
			СвойстваСообщения, ПараметрыДокумента, ИспользоватьУтверждение);
		СообщениеОбъект.Записать();
		СвойстваСообщения.Состояние = СообщениеОбъект.Состояние;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СвязанныеДокументы

Процедура ОбновитьСвязанныеДокументы(ТипДокумента, ИдентификаторыОснований, Действие, КонтекстДиагностики, ЭтоВходящийЭДО = Ложь)
	
	ЭтоИсправляющийТипДокумента = ЭтоИсправляющийТипДокумента(ТипДокумента);
	
	ЭтоКорректирующийТипДокумента = ЭтоКорректирующийТипДокумента(ТипДокумента);
	
	Если Не ЭтоИсправляющийТипДокумента
		И Не ЭтоКорректирующийТипДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ИдентификаторыОснований.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ИдентификаторыОснований.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	&ИдентификаторыОснований КАК ИдентификаторыОснований");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокумента КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка";
	
	ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ТекстЗапросаДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокумента", ИмяТаблицыДокументаЭДО));
	
	Если ЭтоВходящийЭДО Тогда
		ТекстЗапросаДокументов.Добавить("
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
		ТекстЗапросаДокументов.Добавить(
			"ВЫБРАТЬ
			|	СообщениеЭДО.Ссылка КАК Ссылка,
			|	СообщениеЭДО.Дата КАК Дата,
			|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
			|	СообщениеЭДО.Состояние КАК Состояние,
			|	СообщениеЭДО.Статус КАК Статус,
			|	СообщениеЭДО.Направление КАК Направление,
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
			|ИЗ
			|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
			|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
			|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ИдентификаторыДокументооборотов
			|		ПО ДокументЭДО.ИдентификаторДокументооборота = ИдентификаторыДокументооборотов.ИдентификаторДокументооборота
			|ГДЕ
			|	ИдентификаторыДокументооборотов.ИдентификаторДокументооборота ЕСТЬ NULL");
	КонецЕсли;
	
	ТекстЗапросаДокументов.Добавить("
		|ИТОГИ
		|ПО
		|	ЭлектронныйДокумент");
	
	ТекстыЗапросов.Добавить(СтрСоединить(ТекстЗапросаДокументов));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ИдентификаторыОснований", ИдентификаторыОснований);
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого СтрокаТаблицы Из ИдентификаторыОснований Цикл
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторДокументооборота) Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
				СтрокаТаблицы.ИдентификаторДокументооборота);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСвязи) Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторСвязи", СтрокаТаблицы.ИдентификаторСвязи);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
	
		КорректируемыеТипыДокументов = КорректируемыеТипыДокументов();
		
		СвойстваСообщения = Новый Структура("Ссылка, Статус");
		
		ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ПропуститьДокумент = Ложь;
			СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
			Выборка = ВыборкаДокументов.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СостоянияЭлементовРегламента.Добавить(), Выборка);
				Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
					Если ЭтоИсправляющийТипДокумента И ТипДокумента <> Выборка.ТипДокумента
						ИЛИ ЭтоКорректирующийТипДокумента
							И ТипДокумента <> КорректируемыеТипыДокументов[Выборка.ТипДокумента] Тогда
						ПропуститьДокумент = Истина;
						Прервать;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СвойстваСообщения, Выборка);
				КонецЕсли;
			КонецЦикла;
			
			Если ПропуститьДокумент Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъектов = ВыборкаДокументов.ЭлектронныйДокумент.ПолучитьОбъект();
			ДокументОбъектов.Исправлен = Истина;
			ДокументОбъектов.Записать();
			
			ДатаИзменения = ТекущаяДатаСеанса();
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъектов, СостоянияЭлементовРегламента,
				ДатаИзменения, КонтекстДиагностики);
			
			ЗаписатьДействиеВЖурнал(Действие, ДокументОбъектов, СостояниеДокумента, ДатаИзменения, СвойстваСообщения);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

Функция ДоступныеСтатусыДокумента()
	Статусы = Новый Структура;
	Статусы.Вставить("ЭДОНеНастроен", "ЭДОНеНастроен");
	Статусы.Вставить("НеНачат", "НеНачат");
	Статусы.Вставить("ВОбработке", "ВОбработке");
	Статусы.Вставить("Получен", "Получен");
	Статусы.Вставить("ОтклонениеВОбработке", "ОтклонениеВОбработке");
	Статусы.Вставить("Отклонен", "Отклонен");
	Статусы.Вставить("УтверждениеВОбработке", "УтверждениеВОбработке");
	Статусы.Вставить("Утвержден", "Утвержден");
	Статусы.Вставить("Ошибка", "Ошибка");
	Возврат Статусы;
КонецФункции

#КонецОбласти

#Область ДействияПоЭДО

Функция ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента)
	
	Действия = Новый Соответствие;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		Если ДействиеПодписатьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
			Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
				Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
			КонецЕсли;
			Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьПодписание, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ЭтоВходящийЭДО(СвойстваДокумента.Ссылка) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
		КонецЕсли;
		Если ЭтоВнутреннийВидДокумента(СвойстваДокумента.ВидДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		КонецЕсли;
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Утвердить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПринятьАннулирование, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьАннулирование, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
	
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	КонецЕсли;
	
	Если СвойстваДокумента.НаОзнакомлении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтправитьВАрхив, Истина);
		
	КонецЕсли;
	
	Если НЕ ДействиеАннулироватьДоступно(СвойстваДокумента) Тогда
		Действия.Удалить(Перечисления.ДействияПоЭДО.Аннулировать);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Функция ДействиеАннулироватьДоступно(СвойстваДокумента)
	
	ВидДокумента = СвойстваДокумента.ВидДокумента;
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
		Возврат ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДействиеПодписатьДоступно(СвойстваДокумента)
	
	Если ЭтоВходящийЭДО(СвойстваДокумента.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписанияЗапросов = Новый Массив;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СообщенияДляОбработки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ОтборЭлектронныйДокумент
		|	И СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Подписание)
		|	И СообщениеЭДО.ТипЭлементаРегламента В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя))";
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныйДокумент", СвойстваДокумента.Ссылка);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Отбор = МаршрутыПодписанияБЭД.НовыйОтборОбъектовДляПодписания();
	Отбор.Объект = "ВЫБРАТЬ Ссылка ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(МаршрутыПодписанияБЭД.ЗапросОбъектовДляПодписания("ОбъектыДляПодписания", Отбор));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыДляПодписания.Объект
		|ИЗ
		|	ОбъектыДляПодписания";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ДействиеОтправитьДоступно(СвойстваДокумента)
	Возврат Не СинхронизацияЭДО.ЭтоВнутреннийОбмен(СвойстваДокумента.СпособОбмена)
КонецФункции

Функция ДействиеЗакрытьДоступно(СвойстваДокумента)
	Возврат Не СинхронизацияЭДО.ЭтоВнутреннийОбмен(СвойстваДокумента.СпособОбмена);
КонецФункции

Функция ДействиеДоступно(Действие, СостояниеДокумента, СвойстваДокумента, КонтекстДиагностики)
	Возврат Действие = Перечисления.ДействияПоЭДО.Загрузить
		ИЛИ ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента)[Действие] <> Неопределено;
КонецФункции

#КонецОбласти

#Область ОбработкаДействийПоЭДО

#Область ОбщегоНазначения

Процедура ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполнения, РезультатДействий)
	
	Если ВыполнениеДействийПоЭДОЗапрещено(РезультатДействий.КонтекстДиагностики) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно) Тогда
		
		ВыполнитьДействиеЗакрыть(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ВернутьВРаботу) Тогда
		
		ВыполнитьДействиеВернутьВРаботу(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтправитьВАрхив) Тогда
		
		ВыполнитьДействиеОтправитьВАрхив(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
		
		ВыполнитьДействиеОтклонитьПодписание(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать) Тогда
		
		ВыполнитьДействиеСформировать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьИсправление) Тогда
		
		ВыполнитьДействиеСформироватьИсправление(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьИзвещение) Тогда
		
		ВыполнитьДействиеСформироватьИзвещение(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Переформировать) Тогда
		
		ВыполнитьДействиеПереформировать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить) Тогда
		
		ВыполнитьДействиеОтклонить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Аннулировать) Тогда
		
		ВыполнитьДействиеАннулировать(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПринятьАннулирование) Тогда
		
		ВыполнитьДействиеПринятьАннулирование(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование) Тогда
		
		ВыполнитьДействиеОтклонитьАннулирование(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Перенаправить) Тогда
		
		ВыполнитьДействиеПеренаправить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Утвердить) Тогда
		
		ВыполнитьДействиеУтвердить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьОтвет) Тогда
		
		ВыполнитьДействиеСформироватьОтвет(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Подписать) Тогда
		
		ВыполнитьДействиеПодписать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.КонтекстПодписания) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтменитьОтправку) Тогда
		
		ВыполнитьДействиеОтменитьОтправку(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		
		ВыполнитьДействиеПодготовитьКОтправке(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.КонтекстОтправки) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НачатьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		
		ВыполнитьДействиеОтправить(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.КонтекстОтправки) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИтогВыполненияДействияПоЭДО(ИтогДействийПоЭДО, Действие, ЭлектронныйДокумент)
	
	ИтогДействийПоЭДО.ОбработанныеДокументы.Вставить(ЭлектронныйДокумент, Истина);
	
	Обработано = ИтогДействийПоЭДО.ОбработаноПоДействиям[Действие];
	ИтогДействийПоЭДО.ОбработаноПоДействиям.Вставить(Действие, ?(Обработано = Неопределено, 1, Обработано + 1));
	
КонецПроцедуры

Функция ОтсутствуютОбъектыДействий(ОбъектыДействий)
	Для Каждого Элемент Из ОбъектыДействий Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики)
	
	Если Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Подписать)
		И Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
	ПараметрыВыполнения.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации,
		Неопределено, ПараметрыВыполнения.ОтпечаткиСертификатов);
	
КонецПроцедуры

Функция ЕстьДействие(НаборДействий, Действие)
	Возврат ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(НаборДействий, Действие);
КонецФункции

Процедура ОтметитьНачалоОбработкиДействия(НаборДействий, Действие)
	НаборДействий.Вставить(Действие, Ложь);
КонецПроцедуры

Функция НачатьДействие(НаборДействий, Действие)
	ЕстьДействие = ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(НаборДействий, Действие);
	Если ЕстьДействие Тогда
		ОтметитьНачалоОбработкиДействия(НаборДействий, Действие);
	КонецЕсли;
	Возврат ЕстьДействие;
КонецФункции

Функция НовыйОтборСообщенийДляОбработкиДействия()
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", Новый Массив);
	Отбор.Вставить("ТипЭлементаРегламента", Новый Массив);
	Отбор.Вставить("ИспользоватьИдентификаторыОрганизаций", Ложь);
	Возврат Отбор;
КонецФункции

Функция ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор, ИмяВременнойТаблицы = "", СвойстваСообщения = "Ссылка")
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстыЗапросов = Новый Массив;
	ТекстыВспомогательныхЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ИмяПараметраОтбора = "ОтборОбъектыУчета";
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыВспомогательныхЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоОбъектамУчета(
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		ИмяПараметраОтбора = "ОтборЭлектронныеДокументы";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоЭлектроннымДокументам(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		ИмяПараметраОтбора = "ОтборСообщения";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.Сообщения);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоСсылкамСообщений(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Отбор.ИспользоватьИдентификаторыОрганизаций
		И ЗначениеЗаполнено(ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		ИмяПараметраОтбора = "ИдентификаторыОрганизаций";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ИдентификаторыОрганизаций);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоИдентификаторамОрганизаций(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОписаниеЗапроса.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	УстановитьПоляВыбораСвойствСообщенийДляОбработкиДействия(ОписаниеЗапроса, СвойстваСообщения);
	
	УстановитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, Отбор);
	
	Если ЗначениеЗаполнено(ТекстыВспомогательныхЗапросов) Тогда
		ТекстыВспомогательныхЗапросов.Добавить(ОписаниеЗапроса.Текст);
		ОписаниеЗапроса.Текст = СтрСоединить(ТекстыВспомогательныхЗапросов,
			ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенийПоОбъектамУчета(ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
		|		И &УсловиеОтбора";
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенийПоЭлектроннымДокументам(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ИмяПараметраОтбора)
		|	И &УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенийПоСсылкамСообщений(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&ИмяПараметраОтбора)
		|	И &УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенийПоИдентификаторамОрганизаций(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И &УсловиеОтбора
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации В (&ИмяПараметраОтбора)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СвойстваСообщения
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И &УсловиеОтбора
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации В (&ИмяПараметраОтбора)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенийПоПакетамДокументов(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
			|	СообщениеЭДО.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО СоставПакетов.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
			|		И &УсловиеОтбора
			|ГДЕ
			|	СоставПакетов.ИдентификаторПакета В (&ИмяПараметраОтбора)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПоляВыбораСвойствСообщенийДляОбработкиДействия(ОписаниеЗапроса, СвойстваСообщения)
	
	ПоляВыбора = Новый Массив;
	СтруктураСвойств = Новый Структура(СвойстваСообщения);
	Разделитель = "," + Символы.ПС;
	Для Каждого Элемент Из СтруктураСвойств Цикл
		ПоляВыбора.Добавить("СообщениеЭДО." + Элемент.Ключ);
	КонецЦикла;
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "&СвойстваСообщения", СтрСоединить(ПоляВыбора, Разделитель));
	
КонецПроцедуры

Процедура УстановитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, Отбор)
	
	УсловиеОтбора = Новый Массив;
	
	ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, "Состояние");
	
	ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, "ТипЭлементаРегламента");
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	Иначе
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("УсловиеОтбора", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, ИмяСвойства)
	ЗначениеОтбора = Отбор[ИмяСвойства];
	КоличествоЗначений = ЗначениеОтбора.Количество();
	Если КоличествоЗначений = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяПараметра = "Отбор" + ИмяСвойства;
	ОдноЗначение = КоличествоЗначений = 1;
	УсловиеОтбора.Добавить(СтрШаблон("СообщениеЭДО.%1 %2 (&%3)", ИмяСвойства, ?(ОдноЗначение,"=","В"), ИмяПараметра));
	ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметра, ?(ОдноЗначение, ЗначениеОтбора[0], ЗначениеОтбора));
КонецПроцедуры

Функция ВыборкаСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор)
	ОписаниеЗапроса = ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор);
	Возврат ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса).Выбрать();
КонецФункции

Функция ВыборкаДокументовДляОбработкиДействия(ОбъектыДействий)
	Отбор = НовыйОтборСообщенийДляОбработкиДействия();
	Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(Отбор.ТипЭлементаРегламента);	
	КонецЕсли;
	ОписаниеЗапроса = ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор,,"ЭлектронныйДокумент");
	Возврат ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса).Выбрать();
КонецФункции

Функция СвойстваФайлаОснованияСлужебногоДокумента()
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Свойства.Вставить("ПолноеИмяФайла", "");
	Свойства.Вставить("ДатаСоздания", Дата(1,1,1));
	Возврат Свойства;
КонецФункции

Функция СоздатьСлужебноеСообщение(ПараметрыДокумента, СвойстваФайлаОснования, ДанныеУчастниковЭДО, ТипДокумента, ТипЭлементаРегламента, Комментарий = "")
	
	ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваФайлаОснования,
		ТипДокумента, ТипЭлементаРегламента, Комментарий);
	
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	Возврат СообщениеОбъект;
	
КонецФункции

Функция ТекстЗапросаСвойствОсновногоФайла()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Ссылка = &ОсновнойФайл";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаСвойствСообщенияИнформацииОтправителя()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка,
		|	СообщениеЭДО.Статус
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)";
КонецФункции

Функция ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО)
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ПриглашенияЭДО.Контрагент КАК Контрагент
		|ИЗ
		|	&ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО ДокументЭДО.ИдентификаторОрганизации = ПриглашенияЭДО.ИдентификаторОрганизации
		|		И ДокументЭДО.ИдентификаторКонтрагента = ПриглашенияЭДО.ИдентификаторКонтрагента
		|		И ДокументЭДО.Ссылка = &ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументЭДО.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ДокументЭДО.Ссылка = &ЭлектронныйДокумент";
	Возврат СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокументаЭДО", ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО));
КонецФункции

Функция ТекстЗапросаУчастниковЭДОПоИдентификаторам()
	Возврат
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации
	|			И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
	|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации
	|			И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
	|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";

КонецФункции

Функция КомментарийДействия(ПараметрыВыполнения, Действие)
	Комментарий = "";
	ДополнительныеПараметры = ПараметрыВыполнения.ДополнительныеПараметрыДействий[Действие];
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.Комментарий) Тогда
		Комментарий = ДополнительныеПараметры.Комментарий;
	КонецЕсли;
	Возврат Комментарий;
КонецФункции

Функция ДополнительныйПараметрДействия(ПараметрыВыполнения, Действие, ИмяПараметра)
	Результат = Неопределено;
	ДополнительныеПараметры = ПараметрыВыполнения.ДополнительныеПараметрыДействий[Действие];
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Результат = ДополнительныеПараметры[ИмяПараметра];
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ИмяТаблицыДокумента = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокумента);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Сообщение);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО));
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета)
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокументаЭДО = "";
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ПустаяСтрока(ИмяТаблицыДокументаЭДО) Тогда
			ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета)
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокументаЭДО = "";
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ПустаяСтрока(ИмяТаблицыДокументаЭДО) Тогда
			ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено - если состояния документов пакета неоднородны.
//  - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики)
	
	ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
	
	ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
	
	ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета);
	
	НаборСостояний = НаборСостоянийДокументов(ДокументыПакета);
	
	СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
		Действие, КонтекстДиагностики);
	
	Если Не СостоянияОднородны Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументыПакета;
	
КонецФункции

Функция СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики, Состояние = Неопределено, ТипЭлементаРегламента = Неопределено)
	
	ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
	Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
	
	Отбор = НовыйОтборСообщенийДокументов();
	Если ЗначениеЗаполнено(Состояние) Тогда
		Отбор.Состояние = "= &Состояние";
		Запрос.УстановитьПараметр("Состояние", Состояние);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЭлементаРегламента) Тогда
		Отбор.ТипЭлементаРегламента = "= &ТипЭлементаРегламента";
		Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламента);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаСообщенийДокументов(Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса)
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаАннулирования = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ВыборкаДокументовДляФормированияОтвета(ОбъектыДействий)
	
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		
		Запрос.УстановитьПараметр("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст + ";
			|ВЫБРАТЬ
			|	ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ПО ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|		И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|	И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Если МодульОбменСГИСЭПД <> Неопределено Тогда
			МодульОбменСГИСЭПД.ДополнитьЗапросВыборкиДокументовДляФормированияОтвета(ТекстыЗапросов, Запрос.Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		Запрос.УстановитьПараметр("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)
			|	И ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|	И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Если МодульОбменСГИСЭПД <> Неопределено Тогда
			МодульОбменСГИСЭПД.ДополнитьЗапросВыборкиДокументовДляФормированияОтвета(ТекстыЗапросов, Запрос.Параметры, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектаУчета - Неопределено
//                     - ДеревоЗначений
Процедура СформироватьОтветПоДокументу(ЭлектронныйДокумент, РезультатДействий, ДанныеОбъектаУчета = Неопределено)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	РезультатФормирования = СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ДанныеОбъектаУчета);
	
	Если РезультатФормирования.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатДействий.ОшибкиФормирования,
			РезультатФормирования.ОшибкиФормирования);
		Возврат;
	КонецЕсли;
	
	Если РезультатФормирования.СообщениеОбъект <> Неопределено Тогда
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьОтвет,
			РезультатФормирования.СообщениеОбъект.ЭлектронныйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатФормирования.ТаблицаПодписания) Тогда
		ОповеститьОДокументеКПодписанию(РезультатФормирования.СообщениеОбъект, РезультатФормирования.ТаблицаПодписания);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектовУчетаПоДокументам - Неопределено
//                                  - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Значение - ДеревоЗначений
Процедура СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий, ДанныеОбъектовУчетаПоДокументам = Неопределено)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьОтвет;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			
			ДанныеОбъектаУчета = Неопределено;
			Если ДанныеОбъектовУчетаПоДокументам <> Неопределено Тогда
				ДанныеОбъектаУчета = ДанныеОбъектовУчетаПоДокументам[ЭлектронныйДокумент];
			КонецЕсли;
			
			Результат = СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ДанныеОбъектаУчета);
			Если Результат.Отказ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатДействий.ОшибкиФормирования, 
					Результат.ОшибкиФормирования);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			НаборРезультатов.Добавить(Результат);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		
		Если РезультатОбработки.СообщениеОбъект <> Неопределено Тогда
			ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
				РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОбработки.ТаблицаПодписания) Тогда
			ОповеститьОДокументеКПодписанию(РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМаршрутамиПодписания

Функция СписокПодписантовИнтеркампани(Отправитель, Получатель)
	
	СписокПодписантов = Новый ТаблицаЗначений;
	СписокПодписантов.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СписокПодписантов.Колонки.Добавить("Сертификат", 
		Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	СписокПодписантов.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	СписокПодписантов.Добавить().Организация = Отправитель;
	СписокПодписантов.Добавить().Организация = Получатель;
	
	Возврат СписокПодписантов;
	
КонецФункции

Функция НовыеПараметрыМаршрутаПодписания()
	ПараметрыМаршрута = Новый Структура;
	ПараметрыМаршрута.Вставить("ВесМаршрута", 0);
	ПараметрыМаршрута.Вставить("ТаблицаПодписания", Новый ТаблицаЗначений);
	Возврат ПараметрыМаршрута;
КонецФункции

Функция СформироватьМаршрутПодписания(СвойстваСообщения, МаршрутПодписания = Неопределено, СписокПодписантов = Неопределено)
	
	ПараметрыМаршрута = НовыеПараметрыМаршрутаПодписания();
	
	Если СвойстваСообщения.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		Возврат ПараметрыМаршрута;
	КонецЕсли;
	
	Если МаршрутПодписания = Неопределено Тогда
		МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокПодписантов) Тогда
		ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД(
			СвойстваСообщения.Ссылка, МаршрутПодписания, Перечисления.ТребованияКПодписаниюЭД.И,
			СписокПодписантов, ПараметрыМаршрута.ВесМаршрута);
	Иначе
		ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД(
			СвойстваСообщения.Ссылка, МаршрутПодписания,,,ПараметрыМаршрута.ВесМаршрута);
	КонецЕсли;
	
	Возврат ПараметрыМаршрута;
	
КонецФункции

// Обновляет маршрут подписания.
// 
// Параметры:
//  СвойстваДокумента - ДокументОбъект.СообщениеЭДО
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, используемый при
//  подписании сообщения. 
//  ОрганизацияДляПодписания - СправочникСсылка.Организации - организация, используемая при отсутствии организации 
//  в сертификате. Необязательный: используется для передачи далее по стеку вызовов.
Функция ОбновитьМаршрутПодписания(СвойстваДокумента, Сертификат, ОрганизацияДляПодписания = Неопределено)
	
	ПараметрыМаршрута = НовыеПараметрыМаршрутаПодписания();
	
	Если СвойстваДокумента.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		Возврат ПараметрыМаршрута;
	КонецЕсли;
	
	ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.ОбновитьМаршрутПриПодписании(СвойстваДокумента.Ссылка,
		Сертификат, ПараметрыМаршрута.ВесМаршрута, ОрганизацияДляПодписания);
	
	Возврат ПараметрыМаршрута;
	
КонецФункции

Процедура ОповеститьОДокументеКПодписанию(СообщениеОбъект, ТаблицаПодписантов)
	
	Если Не ЗначениеЗаполнено(ТаблицаПодписантов) Тогда
		Возврат;
	КонецЕсли;
	
	ПодписантыДляОповещения = МаршрутыПодписанияБЭД.ПодписантыДляОповещения(ТаблицаПодписантов, СообщениеОбъект.Ссылка);
	Если Не ЗначениеЗаполнено(ПодписантыДляОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбъект.ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента");
	СписокДокументов.Добавить(СообщениеОбъект.Ссылка, ПредставлениеДокументаПоСвойствам(СвойстваДокумента));
	
	ОповещенияОСобытияхЭДО.ОповеститьОДокументахКПодписанию(ПодписантыДляОповещения, СписокДокументов);
	
	Для Каждого Подписант Из ПодписантыДляОповещения Цикл
		МаршрутыПодписанияБЭД.ЗафиксироватьФактОповещенияУчастникаМаршрута(СообщениеОбъект.Ссылка, Подписант);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сформировать

Процедура ВыполнитьДействиеСформировать(ПараметрыВыполнения, РезультатДействий)
	
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(
		ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета);
	
	РезультатыЗапросаНастроек = РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, РезультатПроверки.Готовые);
	
	НаборПараметровФормирования = ПараметрыФормированияДокумента(ПараметрыВыполнения,
		РезультатыЗапросаНастроек, РезультатДействий);
	
	Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеОбъектыУчета = Новый ТаблицаЗначений;
	ОбработанныеОбъектыУчета.Колонки.Добавить("ОбъектУчета");
	ОбработанныеОбъектыУчета.Колонки.Добавить("ВидСообщения");
	ОбработанныеОбъектыУчета.Колонки.Добавить("Организация");
	ОбработанныеОбъектыУчета.Колонки.Добавить("Контрагент");
	ОбработанныеОбъектыУчета.Колонки.Добавить("ДоговорКонтрагента");
	
	Для Каждого ПараметрыФормирования Из НаборПараметровФормирования Цикл
		
		ОписаниеСообщения = ПараметрыФормирования.ОписаниеСообщения;
		
		СтруктураПоиска = Новый Структура("ОбъектУчета, ВидСообщения, Организация, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПараметрыФормирования.НастройкиДокумента);
		СтруктураПоиска.ОбъектУчета = ПараметрыФормирования.ОбъектУчета;
		СтруктураПоиска.ВидСообщения = ОписаниеСообщения.ВидСообщения;
		
		Если ОписаниеСообщения.Направление <> Перечисления.НаправленияЭДО.Внутренний
			И ОбработанныеОбъектыУчета.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыВыполнения.ДополнительныеФайлы) Тогда
			ДополнительныйФайл = ПараметрыВыполнения.ДополнительныеФайлы.Получить(ПараметрыФормирования.ОбъектУчета);
			Если ЗначениеЗаполнено(ДополнительныйФайл) Тогда
				ПроизвестиДействияСДополнительнымиФайлами(ПараметрыФормирования, ДополнительныйФайл);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = СоздатьИсходящийДокумент(ПараметрыФормирования.НастройкиДокумента, ОписаниеСообщения,
				РезультатДействий.КонтекстДиагностики, ПараметрыФормирования.ОбъектУчета, ПараметрыФормирования.Основания,
				ПараметрыФормирования.ИдентификаторыОснований);
			ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Сформировать,
				ДокументОбъект.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось начать новый электронный ЭлектронныйДокумент на основании %1.'"),
				ПараметрыФормирования.ОбъектУчета);
			ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Формирование электронных документов.'"),
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
				ПодробныйТекстОшибки, ТекстОшибки);
			ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(РезультатДействий.КонтекстДиагностики, Ошибка,
				ПодсистемыБЭД.ОбменСКонтрагентами);
		КонецПопытки;
		
		Для Каждого ОбъектУчета Из ПараметрыФормирования.Основания Цикл
			СтрокаОбработанныеОбъектыУчета = ОбработанныеОбъектыУчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОбработанныеОбъектыУчета, СтруктураПоиска);
			СтрокаОбработанныеОбъектыУчета.ОбъектУчета = ОбъектУчета;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроизвестиДействияСДополнительнымиФайлами(ПараметрыФормирования, ДополнительныйФайл)
	
	ОписаниеСообщения = ПараметрыФормирования.ОписаниеСообщения;
	
	Если ОписаниеСообщения.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний")
		И ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
		ДвоичныеДанныеФайлаПДФ = ДополнительныйФайл;
		Обработки.ФорматДоговорнойДокумент101.ПоместитьФайлЭДВФайлПДФ(ДвоичныеДанныеФайлаПДФ,
			ОписаниеСообщения.Данные.Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, ОбъектыУчета)
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтправки");
	Результат.Вставить("НастройкиВнутреннегоЭДО");
	Результат.Вставить("НастройкиВнутреннегоЭДОПоУмолчанию");
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьЭлектронноеАктирование = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			ЕстьЭлектронноеАктирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	
	СоставДокументов = Новый Структура;
	СоставДокументов.Вставить("ЕстьДокументыДляОтправки", ЗначениеЗаполнено(ОписанияОбъектовУчета));
	СоставДокументов.Вставить("ЕстьВнутренниеДокументыПоВидам", Ложь);
	СоставДокументов.Вставить("ЕстьВнутренниеДокументыПоУмолчанию", Ложь);
	
	ДополнитьОписанияОбъектовУчетаПоВнутреннемуЭДО(ОписанияОбъектовУчета, ПараметрыВыполнения.КлючиНастроекОбъектов,
		СоставДокументов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписанияОбъектовУчета", ОписанияОбъектовУчета);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить( 
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.Договор КАК ДоговорКонтрагента,
		|	&ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
		|	&ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета
		|ПОМЕСТИТЬ ОписанияОбъектовУчета
		|ИЗ
		|	&ОписанияОбъектовУчета КАК ОписанияОбъектовУчета");
	
	СтартовыйИндексЗапроса = 1;
	Если СоставДокументов.ЕстьДокументыДляОтправки Тогда
		
		Если ЕстьЭлектронноеАктирование Тогда
			СтартовыйИндексЗапроса = 3;
		КонецЕсли;
		
		ТекстЗапросаНастроекОтправки = ТекстЗапросаНастроекОтправкиОбъектовУчета();
		ТекстыЗапросов.Добавить(ТекстЗапросаНастроекОтправки);
		
		НаправленияНастроекОтправки = Новый Массив();
		НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Исходящий);
		Если НастройкиЭДО.ОбменЭлектроннымиДокументамиМеждуОрганизациями() Тогда
			НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Интеркампани);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ПриПолученииНаправленияНастроекОтправки(ОписанияОбъектовУчета, НаправленияНастроекОтправки);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПустойДоговор", 
			Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
		Запрос.УстановитьПараметр("НаправленияНастроекОтправки", НаправленияНастроекОтправки);
		Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", "");
		Запрос.УстановитьПараметр("ВидВнутреннегоДокумента", "");
		
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам
		ИЛИ СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
		
		ИндексОсновногоЗапроса = СтартовыйИндексЗапроса - 1;
		ТекстыЗапросов[ИндексОсновногоЗапроса] = СтрЗаменить(
			ТекстыЗапросов[ИндексОсновногоЗапроса],
			"&ВидВнутреннегоДокумента",
			"ОписанияОбъектовУчета.ВидВнутреннегоДокумента");
		ТекстыЗапросов[ИндексОсновногоЗапроса] = СтрЗаменить(
			ТекстыЗапросов[ИндексОсновногоЗапроса],
			"&ИдентификаторОбъектаУчета",
			"ОписанияОбъектовУчета.ИдентификаторОбъектаУчета");
		
		Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета());
		КонецЕсли;
		
		Если СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию());
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаправлениеВнутренний", Перечисления.НаправленияЭДО.Внутренний);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СдвигИндексаЗапроса = 0;
	
	Если СоставДокументов.ЕстьДокументыДляОтправки Тогда
		Результат.НастройкиОтправки = РезультатыЗапроса[СтартовыйИндексЗапроса];
		СдвигИндексаЗапроса = СдвигИндексаЗапроса + 1;
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам Тогда
		Результат.НастройкиВнутреннегоЭДО = РезультатыЗапроса[СтартовыйИндексЗапроса + СдвигИндексаЗапроса];
		СдвигИндексаЗапроса = СдвигИндексаЗапроса + 1;
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
		Результат.НастройкиВнутреннегоЭДОПоУмолчанию = РезультатыЗапроса[СтартовыйИндексЗапроса + 1 + СдвигИндексаЗапроса];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьОписанияОбъектовУчетаПоВнутреннемуЭДО(ОписанияОбъектовУчета, КлючиНастроекОбъектов, СоставДокументов)
	
	Если Не НастройкиЭДО.ИспользуютсяВнутренниеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияОбъектовУчета.Колонки.Добавить("ВидВнутреннегоДокумента", 
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ОписанияОбъектовУчета.Колонки.Добавить("ИдентификаторОбъектаУчета", 
		ИнтеграцияБСПБЭД.ОписаниеТипаИдентификатораОбъектаМетаданных());
	ОписанияОбъектовУчета.Колонки.Добавить("ПолноеИмяОбъектаУчета", Новый ОписаниеТипов("Строка"));
	
	Отбор = Новый Структура("Направление", Перечисления.НаправленияЭДО.Внутренний);
	ОписанияОбъектовУчетаВнутреннегоЭДО = ОписанияОбъектовУчета.НайтиСтроки(Отбор);
	
	Если Не ЗначениеЗаполнено(ОписанияОбъектовУчетаВнутреннегоЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписанияОбъектовУчета.Количество() = ОписанияОбъектовУчетаВнутреннегоЭДО.Количество() Тогда
		СоставДокументов.ЕстьДокументыДляОтправки = Ложь;
	КонецЕсли;
	
	УникальныеИменаОбъектовУчета = Новый Соответствие;
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчетаВнутреннегоЭДО Цикл
		
		КлючиНастроек = КлючиНастроекОбъектов[ОписаниеОбъектаУчета.ОбъектУчета];
		Если КлючиНастроек = Неопределено Тогда
			ОписаниеОбъектаУчета.ПолноеИмяОбъектаУчета = ОписаниеОбъектаУчета.ОбъектУчета.Метаданные().ПолноеИмя();
			УникальныеИменаОбъектовУчета.Вставить(ОписаниеОбъектаУчета.ПолноеИмяОбъектаУчета, Истина);
			СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию = Истина;
			Продолжить;
		КонецЕсли;
		
		ОписаниеОбъектаУчета.ВидВнутреннегоДокумента = КлючиНастроек[0].ВидВнутреннегоДокумента;
		СоставДокументов.ЕстьВнутренниеДокументыПоВидам = Истина;
		
		Количество = КлючиНастроек.Количество();
		Если Количество > 1 Тогда
			Для Счетчик = 1 По Количество - 1 Цикл
				НовоеОписаниеОбъектаУчета = ОписанияОбъектовУчета.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
				НовоеОписаниеОбъектаУчета.ВидВнутреннегоДокумента = КлючиНастроек[Счетчик].ВидВнутреннегоДокумента;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УникальныеИменаОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОбъектовМетаданных = Новый Массив;
	Для Каждого ЭлементКоллекции Из УникальныеИменаОбъектовУчета Цикл
		ИменаОбъектовМетаданных.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ИдентификаторыОбъектов = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ИменаОбъектовМетаданных, Ложь);
	Для Каждого Описание Из ОписанияОбъектовУчетаВнутреннегоЭДО Цикл
		ИдентификаторОбъектаУчета = ИдентификаторыОбъектов[Описание.ПолноеИмяОбъектаУчета];
		Если ИдентификаторОбъектаУчета <> Неопределено Тогда
			Описание.ИдентификаторОбъектаУчета = ИдентификаторОбъектаУчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Текст запроса настроек отправки объектов учета.
// 
// Возвращаемое значение:
//  Строка - Текст запроса настроек отправки объектов учета
Функция ТекстЗапросаНастроекОтправкиОбъектовУчета()
	
	ЕстьЭлектронноеАктирование = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			ЕстьЭлектронноеАктирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлектронноеАктирование Тогда
		
		Возврат МодульЭлектронноеАктированиеЕИС.
			ТекстЗапросаНастроекОтправкиОбъектовУчета();
		
	Иначе
		
		// При изменение текста запроса нужно делать синхронные изменения в
		// ЭлектронноеАктированиеЕИС.ТекстЗапросаНастроекОтправкиОбъектовУчета().
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Отправитель,
		|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
		|	ЕСТЬNULL(НастройкиОтправки.Договор, &ПустойДоговор) КАК Договор,
		|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК ДоговорУчетногоДокумента,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	НастройкиОтправки.ВерсияФормата КАК Формат,
		|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправки.СпособОбменаЭД КАК СпособОбмена,
		|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправки.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправки.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправки.ОбменБезПодписи КАК ОбменБезПодписи,
		|	НастройкиОтправки.Формировать КАК Формировать,
		|	НастройкиОтправки.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправки.Отправитель
		|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправки.Получатель
		|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправки.ВидДокумента
		|		И НастройкиОтправки.Договор В (ОписанияОбъектовУчета.ДоговорКонтрагента, &ПустойДоговор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление В (&НаправленияНастроекОтправки)
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Договор УБЫВ";
		
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета()
	Возврат
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК НаименованиеВидаДокумента,
		|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета.Синоним КАК СинонимОбъектаУчета,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний) КАК СпособОбмена
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		И ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиВнутреннегоЭДО.Организация
		|		И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL";
КонецФункции

Функция ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию()
	Возврат
		"ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК НаименованиеВидаДокумента,
		|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета.Синоним КАК СинонимОбъектаУчета
		|ПОМЕСТИТЬ НастройкиОсновныхВидовВнутреннегоЭДО
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|ГДЕ
		|	(НастройкиВнутреннегоЭДО.Организация, ВидыДокументовЭДО.ИдентификаторОбъектаУчета) В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОписанияОбъектовУчета.Организация,
		|			ОписанияОбъектовУчета.ИдентификаторОбъектаУчета
		|		ИЗ
		|			ОписанияОбъектовУчета
		|		ГДЕ
		|			ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|			И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.СинонимОбъектаУчета КАК СинонимОбъектаУчета,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.НаименованиеВидаДокумента КАК НаименованиеВидаДокумента,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	ЕСТЬNULL(НастройкиОсновныхВидовВнутреннегоЭДО.ЭтоОсновнойВидДокумента, ЛОЖЬ) КАК ЭтоОсновнойВидДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний) КАК СпособОбмена,
		|	ВЫБОР
		|		КОГДА ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьАктуальныйДокумент
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОсновныхВидовВнутреннегоЭДО КАК НастройкиОсновныхВидовВнутреннегоЭДО
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОсновныхВидовВнутреннегоЭДО.Организация
		|		И ОписанияОбъектовУчета.ИдентификаторОбъектаУчета = НастройкиОсновныхВидовВнутреннегоЭДО.ИдентификаторОбъектаУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И
		|			НастройкиОсновныхВидовВнутреннегоЭДО.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|	И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоОсновнойВидДокумента УБЫВ";
КонецФункции

Функция ПараметрыФормированияДокумента(ПараметрыВыполнения, РезультатыЗапросаНастроек, РезультатДействий)
	
	НаборПараметровФормирования = Новый Массив;
	
	Если РезультатыЗапросаНастроек.НастройкиОтправки <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияИсходящихДокументов(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиОтправки, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Если РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДО <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияВнутреннихДокументов(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДО, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Если РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДОПоУмолчанию <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияВнутреннихДокументовПоУмолчанию(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДОПоУмолчанию, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Возврат НаборПараметровФормирования;
	
КонецФункции

// Заполняет параметры для формирования исходящих электронных документов по настройкам ЭДО
//
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатЗапросаНастроек - Структура:
//  * НастройкиОтправки - РезультатЗапроса - см. ТекстЗапросаНастроекОтправкиОбъектовУчета
//  * НастройкиВнутреннегоЭДО - РезультатЗапроса - см. ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета
//  * НастройкиВнутреннегоЭДОПоУмолчанию - РезультатЗапроса - см. ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию
//  НаборПараметровФормирования - Массив Из Структура - см. НовыеПараметрыФормированияДокумента
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//
Процедура ЗаполнитьПараметрыФормированияИсходящихДокументов(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвязанныхОбъектовУчета = НоваяТаблицаСвязанныхОбъектовУчета();
	
	ОбработанныеНастройки = Новый ТаблицаЗначений;
	ОбработанныеНастройки.Колонки.Добавить("ОбъектУчета");
	ОбработанныеНастройки.Колонки.Добавить("ВидДокумента");
	ОбработанныеНастройки.Колонки.Добавить("Отправитель");
	ОбработанныеНастройки.Колонки.Добавить("Получатель");
	ОбработанныеНастройки.Колонки.Добавить("Договор");
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ОбъектУчета");
		СтруктураПоиска.Вставить("ВидДокумента");
		СтруктураПоиска.Вставить("Отправитель");
		СтруктураПоиска.Вставить("Получатель");

		Если ЗначениеЗаполнено(ВыборкаНастроек.Договор) Тогда
			СтруктураПоиска.Вставить("Договор");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаНастроек);
		СтрокаОбработанныеНастройки = ОбработанныеНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбработанныеНастройки, СтруктураПоиска);
		ДобавитьПараметрыФормированияИсходящегоДокумента(ПараметрыВыполнения, ВыборкаНастроек,
			НаборПараметровФормирования, ТаблицаСвязанныхОбъектовУчета, РезультатДействий);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаСвязанныхОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(ТаблицаСвязанныхОбъектовУчета);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементКоллекции = НовыйЭлементКоллекцииИдентификаторыОснованияДокумента();
		ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(ЭлементКоллекции, Выборка);
		ПараметрыФормирования = НаборПараметровФормирования[Выборка.ИндексПараметров];
		Если ПараметрыФормирования.ИдентификаторыОснований = Неопределено Тогда
			ПараметрыФормирования.ИдентификаторыОснований = Новый Массив;
		КонецЕсли;
		ПараметрыФормирования.ИдентификаторыОснований.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаСвязанныхОбъектовУчета()
	ТаблицаСвязанныхОбъектовУчета = Новый ТаблицаЗначений;
	ТаблицаСвязанныхОбъектовУчета.Колонки.Добавить("ИндексПараметров", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСвязанныхОбъектовУчета.Колонки.Добавить("ОбъектУчета", 
		ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов());
	Возврат ТаблицаСвязанныхОбъектовУчета;
КонецФункции

// Добавляет параметры формирования исходящего документа.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ВыборкаНастроек - ВыборкаИзРезультатаЗапроса:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ДоговорУчетногоДокумента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Формат - Строка
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * ВыгружатьДополнительныеСведения - Булево
//  * ОбменБезПодписи - Булево
//  * Формировать - Булево
//  * ЗаполнениеКодаТовара - Строка
//  НаборПараметровФормирования - см. НаборПараметровФормирования
//  ТаблицаСвязанныхОбъектовУчета - см. НоваяТаблицаСвязанныхОбъектовУчета
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ДобавитьПараметрыФормированияИсходящегоДокумента(ПараметрыВыполнения, ВыборкаНастроек, НаборПараметровФормирования, ТаблицаСвязанныхОбъектовУчета, РезультатДействий)
	
	Формировать = ФормироватьДокумент(ВыборкаНастроек, РезультатДействий);
	Если Не Формировать Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	МаршрутПодписанияИзПараметровВыполнения = ПараметрыВыполнения.МаршрутыПодписанияОбъектов[ВыборкаНастроек.ОбъектУчета];
	
	МаршрутПодписания = МаршрутПодписанияИзПараметровВыполнения;
	Если Не ЗначениеЗаполнено(МаршрутПодписания) Тогда
		МаршрутПодписания = ВыборкаНастроек.МаршрутПодписания;
	КонецЕсли;
	
	НастройкиОтправки = ВыборкаНастроек;
	
	НастройкиОбъекта = ПараметрыВыполнения.НастройкиОбъектов[ВыборкаНастроек.ОбъектУчета];
	Если НастройкиОбъекта <> Неопределено Тогда
		НастройкиОтправки = НастройкиОбъекта; // См. НастройкиЭДО.НастройкиОтправки
		ВидДокумента = НастройкиОбъекта.ВидДокумента; // СправочникСсылка.ВидыДокументовЭДО
		ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
		НастройкиОтправки.Вставить("ТипДокумента", ТипДокумента);
		Если Не ЗначениеЗаполнено(МаршрутПодписанияИзПараметровВыполнения) Тогда
			МаршрутПодписания = НастройкиОбъекта.МаршрутПодписания;
		КонецЕсли;
	КонецЕсли;
	
	Подписанты = Неопределено;
	Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Подписанты = ПараметрыВыполнения.ПодписантыОбъектов[ВыборкаНастроек.ОбъектУчета];
		Если Не ЗначениеЗаполнено(Подписанты) Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеДанные = ПараметрыВыполнения.ДополнительныеДанныеОбъектов[ВыборкаНастроек.ОбъектУчета];
	
	ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиОтправки);
	Если ЗначениеЗаполнено(ДополнительныеДанные)
		И ВыборкаНастроек.ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
		ПараметрыФормирования.ДанныеКаталога = ДополнительныеДанные;
	КонецЕсли; 
	
	ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ВыборкаНастроек.ОбъектУчета, ПараметрыФормирования);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаНастроек.Формат) 
		И Не (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ВыборкаНастроек.ТипДокумента)) Тогда
		ИдентификаторПечатнойФормы = ПараметрыВыполнения.ИдентификаторыПечатныхФормОбъектов[ВыборкаНастроек.ОбъектУчета];
		ОписаниеФайлаПечатнойФормы = СформироватьДанныеПечатнойФормыОбъектаУчета(РезультатДействий,
			ВыборкаНастроек.ОбъектУчета, ВыборкаНастроек, ИдентификаторПечатнойФормы);
		
		ОписаниеСообщения = ОписаниеСообщенияОтправителяПроизвольногоФормата(ВыборкаНастроек.ОбъектУчета, НастройкиОтправки,
			ОписаниеФайлаПечатнойФормы);
	ИначеЕсли ВыборкаНастроек.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ОписаниеСообщенияОтправителяПрикладногоДокумента(
			ВыборкаНастроек.ОбъектУчета, НастройкиОтправки, ВыборкаНастроек.ПрикладнойТипДокумента);
	Иначе
		ОписаниеСообщения = ОписаниеСообщенияОтправителя(ВыборкаНастроек.ОбъектУчета, ОписаниеДанных.Данные, НастройкиОтправки,
			ДополнительныеДанные);
	КонецЕсли;
	
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
		ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДокумента = НовыеНастройкиОтправкиДокумента();
	НастройкиДокумента.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	НастройкиДокумента.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	НастройкиДокумента.Организация = НастройкиОтправки.Отправитель;
	НастройкиДокумента.Контрагент = НастройкиОтправки.Получатель;
	НастройкиДокумента.ДоговорКонтрагента = 
		?(ЗначениеЗаполнено(НастройкиОтправки.Договор), НастройкиОтправки.Договор, ВыборкаНастроек.ДоговорУчетногоДокумента);
	НастройкиДокумента.СпособОбмена = НастройкиОтправки.СпособОбмена;
	НастройкиДокумента.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	НастройкиДокумента.МаршрутПодписания = МаршрутПодписания;
	НастройкиДокумента.Подписанты = Подписанты;
	НастройкиДокумента.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	НастройкиДокумента.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	НастройкиДокумента.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	
	ПараметрыФормирования = НовыеПараметрыФормированияДокумента(
		ОписаниеДанных.СвязующийОбъектУчета, НастройкиДокумента, ОписаниеСообщения, ОписаниеДанных.Основания);
	
	НаборПараметровФормирования.Добавить(ПараметрыФормирования);
	
	СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
	
	Если Не ЗначениеЗаполнено(СвязанныеОбъектыУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексПараметров = НаборПараметровФормирования.Количество() - 1;
	Для Каждого ОбъектУчета Из СвязанныеОбъектыУчета Цикл
		СтрокаТаблицы = ТаблицаСвязанныхОбъектовУчета.Добавить();
		СтрокаТаблицы.ИндексПараметров = ИндексПараметров;
		СтрокаТаблицы.ОбъектУчета = ОбъектУчета;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек)
	ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
	ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ВыборкаНастроек.Отправитель;
	ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ВыборкаНастроек.Получатель;
	ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
	РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
	Возврат ОписаниеОшибки;
КонецФункции

Функция СформироватьДанныеПечатнойФормыОбъектаУчета(РезультатДействий, ОбъектУчета, ВыборкаНастроек, ИдентификаторПечатнойФормы)
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	
	КомандаПечати = Неопределено;
	
	НаборКомандПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектУчета.Метаданные());
	Если НаборКомандПечати.Количество() = 1 Тогда
		КомандаПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НаборКомандПечати[0]);
	ИначеЕсли НаборКомандПечати.Количество() > 1 Тогда
		СтрокаНабора = НаборКомандПечати.Найти(ИдентификаторПечатнойФормы, "Идентификатор");
		Если СтрокаНабора = Неопределено Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ОписаниеОшибки.ПечатнаяФормаНеУказана = Истина;
		Иначе
			КомандаПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНабора);
		КонецЕсли;
	КонецЕсли;
	
	Если КомандаПечати = Неопределено Тогда
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	РезультатПечати = ИнтеграцияЭДО.ПечатныеФормыДокументов(КомандаПечати, МассивОбъектовУчета);
	
	Если ЗначениеЗаполнено(РезультатПечати) Тогда
		ОписаниеФайла.ДвоичныеДанные = РезультатПечати[0].ДвоичныеДанные;
		ОписаниеФайла.ИмяФайла = РезультатПечати[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

Функция РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(СвязанныеОбъектыУчета)
	
	ОписанияЗапросов = Новый Массив;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеОбъектыУчета.ИндексПараметров КАК ИндексПараметров,
		|	СвязанныеОбъектыУчета.ОбъектУчета КАК ОбъектУчета
		|ПОМЕСТИТЬ СвязанныеОбъектыУчета
		|ИЗ
		|	&ТаблицаОбъектовУчета КАК СвязанныеОбъектыУчета";
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТаблицаОбъектовУчета", СвязанныеОбъектыУчета);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Отбор = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
	Отбор.ОбъектыУчета = "ВЫБРАТЬ ОбъектУчета ИЗ СвязанныеОбъектыУчета";
	ОписаниеЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов("АктуальныеДокументыЭДООбъектовУчета", Отбор);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеОбъектыУчета.ИндексПараметров КАК ИндексПараметров,
		|	АктуальныеДокументыЭДООбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументыЭДООбъектовУчета.ЭлектронныйДокумент.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ИЗ
		|	АктуальныеДокументыЭДООбъектовУчета КАК АктуальныеДокументыЭДООбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвязанныеОбъектыУчета КАК СвязанныеОбъектыУчета
		|		ПО АктуальныеДокументыЭДООбъектовУчета.ОбъектУчета = СвязанныеОбъектыУчета.ОбъектУчета";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция НовыйЭлементКоллекцииИдентификаторыОснованияДокумента()
	ИдентификаторыОснований = Новый Структура;
	ИдентификаторыОснований.Вставить("ИдентификаторСвязи", "");
	ИдентификаторыОснований.Вставить("ИдентификаторДокументооборота", "");
	Возврат ИдентификаторыОснований;
КонецФункции

Процедура ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(ЭлементКоллекции, ВыборкаИдентификаторов)
	ЭлементКоллекции.ИдентификаторСвязи = Строка(ВыборкаИдентификаторов.ОбъектУчета.УникальныйИдентификатор());
	ЭлементКоллекции.ИдентификаторДокументооборота = ВыборкаИдентификаторов.ИдентификаторДокументооборота;
КонецПроцедуры

Процедура ЗаполнитьПараметрыФормированияВнутреннихДокументов(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения,
			ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыФормированияВнутреннихДокументовПоУмолчанию(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеОбъектыУчета = Новый Соответствие;
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		Если ОбработанныеОбъектыУчета[ВыборкаНастроек.ОбъектУчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеОбъектыУчета.Вставить(ВыборкаНастроек.ОбъектУчета, Истина);
		
		Если ВыборкаНастроек.ЭтоОсновнойВидДокумента = Истина Тогда
			Если ВыборкаНастроек.ЕстьАктуальныйДокумент Тогда
				// Основной вид документа указан, но уже есть актуальный документ - формировать нечего.
				Продолжить;
			КонецЕсли;	
		ИначеЕсли ВыборкаНастроек.ЭтоОсновнойВидДокумента = Ложь Тогда
			ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
			ОписаниеОшибки.ОсновнойВидНеУстановлен = Истина;
			РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения,
			ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФормироватьДокумент(ПараметрыОбъектаУчета, РезультатДействий)
	
	Результат = Истина;
	
	Если ПараметрыОбъектаУчета.Формировать = Null Тогда
		
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Отправитель;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыОбъектаУчета.Получатель;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	ИначеЕсли Не ПараметрыОбъектаУчета.Формировать Тогда
		
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Отправитель;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыОбъектаУчета.Получатель;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ФормированиеЗапрещено = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФормироватьВнутреннийДокумент(ПараметрыОбъектаУчета, РезультатДействий)
	
	Результат = Истина;
	
	Если ПараметрыОбъектаУчета.Формировать = Null Тогда
		
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Организация;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	ИначеЕсли Не ПараметрыОбъектаУчета.Формировать Тогда
		
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Организация;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ФормированиеЗапрещено = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения, ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Формировать = ФормироватьВнутреннийДокумент(ВыборкаНастроек, РезультатДействий);
	Если Не Формировать Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	МаршрутПодписания = ПараметрыВыполнения.МаршрутыПодписанияОбъектов[ВыборкаНастроек.ОбъектУчета];
	Если Не ЗначениеЗаполнено(МаршрутПодписания) Тогда
		МаршрутПодписания = ВыборкаНастроек.МаршрутПодписания;
	КонецЕсли;
	
	Подписанты = Неопределено;
	Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Подписанты = ПараметрыВыполнения.ПодписантыОбъектов[ВыборкаНастроек.ОбъектУчета];
		Если Не ЗначениеЗаполнено(Подписанты) Тогда
			ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
			ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
			ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
			РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеСообщения = ОписаниеСообщенияВнутреннегоЭДО(ВыборкаНастроек.ОбъектУчета, ВыборкаНастроек);
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
		ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
		ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДокумента = НовыеНастройкиОтправкиДокумента();
	ЗаполнитьЗначенияСвойств(НастройкиДокумента, ВыборкаНастроек);
	НастройкиДокумента.МаршрутПодписания = МаршрутПодписания;
	НастройкиДокумента.Подписанты = Подписанты;
	
	Основания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаНастроек.ОбъектУчета);
	
	ПараметрыФормирования = НовыеПараметрыФормированияДокумента(ВыборкаНастроек.ОбъектУчета,
		НастройкиДокумента, ОписаниеСообщения, Основания);
	НаборПараметровФормирования.Добавить(ПараметрыФормирования);
	
КонецПроцедуры

// Возвращает пустое описание ошибки формирования.
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОбъектаУчета - См. ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ОтсутствуютНастройки - Булево
// * ОтсутствуютПодписанты - Булево
// * ФормированиеЗапрещено - Булево
// * ОсновнойВидНеУстановлен - Булево
// * ПечатнаяФормаНеУказана - Булево
// * ОшибкиДанных - Неопределено
//                - Структура
Функция НовоеОписаниеОшибкиФормирования()
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ОписаниеОбъектаУчета", ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура());
	ОписаниеОшибки.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ОписаниеОшибки.Вставить("ОтсутствуютНастройки", Ложь);
	ОписаниеОшибки.Вставить("ОтсутствуютПодписанты", Ложь);
	ОписаниеОшибки.Вставить("ФормированиеЗапрещено", Ложь);
	ОписаниеОшибки.Вставить("ОсновнойВидНеУстановлен", Ложь);
	ОписаниеОшибки.Вставить("ПечатнаяФормаНеУказана", Ложь);
	ОписаниеОшибки.Вставить("ОшибкиДанных", Неопределено);
	ОписаниеОшибки.Вставить("ОшибкаФормированияВПрикладнойЧасти", Неопределено); 
	Возврат ОписаниеОшибки;
КонецФункции

Функция НовыеПараметрыФормированияДокумента(ОбъектУчета, НастройкиДокумента, ОписаниеСообщения, Основания = Неопределено, ИдентификаторыОснований = Неопределено)
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектУчета", ОбъектУчета);
	Параметры.Вставить("НастройкиДокумента", НастройкиДокумента);
	Параметры.Вставить("ОписаниеСообщения", ОписаниеСообщения);
	Параметры.Вставить("Основания", ?(Основания = Неопределено, Новый Массив, Основания));
	Параметры.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	Возврат Параметры;
КонецФункции

Функция СоздатьИсходящийДокумент(НастройкиОтправки, ОписаниеСообщения, КонтекстДиагностики, СвязующийОбъектУчета = Неопределено, ОбъектыУчета = Неопределено, ИдентификаторыОснований = Неопределено)
	
	Если ЗначениеЗаполнено(СвязующийОбъектУчета) Тогда
		ИдентификаторСвязи = Строка(СвязующийОбъектУчета.УникальныйИдентификатор());
	Иначе
		ИдентификаторСвязи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ДокументОбъект = НовыйИсходящийДокументОбъект(НастройкиОтправки, ОписаниеСообщения, ИдентификаторСвязи, ИдентификаторыОснований);
	
	ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписаниеСообщения);
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект.Записать();
		
		ПриЗаписиНовогоДокумента(ДокументОбъект, ОписаниеСообщения, КонтекстДиагностики, ОбъектыУчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики);
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция НовыйИсходящийДокументОбъект(НастройкиОтправки, ОписаниеСообщения, ИдентификаторСвязи, ИдентификаторыОснований = Неопределено)
	
	ДокументОбъект = Документы.ЭлектронныйДокументИсходящийЭДО.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	ДокументОбъект.Организация = НастройкиОтправки.Организация;
	ДокументОбъект.Контрагент = НастройкиОтправки.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = НастройкиОтправки.ДоговорКонтрагента;
	
	ДокументОбъект.ИдентификаторДокументооборота = НовыйИдентификаторДокументооборота();
	ДокументОбъект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОрганизации;
	ДокументОбъект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторКонтрагента;
	ДокументОбъект.ИдентификаторСвязи = ИдентификаторСвязи;
	ДокументОбъект.СпособОбмена = НастройкиОтправки.СпособОбмена;
	ДокументОбъект.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	ДокументОбъект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	ДокументОбъект.ВидПодписи = НастройкиОтправки.ВидПодписи;
	ДокументОбъект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещение;
	ДокументОбъект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяПодтверждение;
	ДокументОбъект.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	ДокументОбъект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
	
	ДокументОбъект.ТипРегламента = ОписаниеСообщения.Данные.Содержание.ТипРегламента;
	
	Если ЗначениеЗаполнено(НастройкиОтправки.Подписанты) Тогда
		Для Каждого Подписант Из НастройкиОтправки.Подписанты Цикл
			ДокументОбъект.СписокПодписантов.Добавить().Подписант = Подписант;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыОснований, ДокументОбъект.ИдентификаторыОснований);
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

// Создает сообщение в информационной базе.
// 
// Параметры:
//  ОписаниеСообщения - см. НовоеОписаниеСообщения
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  НастройкиДокумента - Структура:
//  * ТипДокумента           - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ТипРегламента          - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ТребуетсяПодтверждение - Булево
//  * ОбменБезПодписи        - Булево
//  * СпособОбмена           - ПеречислениеСсылка.СпособыОбменаЭД
//  
// Возвращаемое значение:
//  ДокументОбъект.СообщениеЭДО
Функция СоздатьСообщение(ОписаниеСообщения, ЭлектронныйДокумент, НастройкиДокумента)
	
	СообщениеОбъект = Документы.СообщениеЭДО.СоздатьДокумент();
	СообщениеОбъект.Дата = ТекущаяДатаСеанса();
	СообщениеОбъект.ЭлектронныйДокумент = ЭлектронныйДокумент;
	СообщениеОбъект.ТипЭлементаРегламента = ОписаниеСообщения.ТипЭлементаРегламента;
	СообщениеОбъект.Направление = ОписаниеСообщения.Направление;
	СообщениеОбъект.ДополнительнаяИнформация = ОписаниеСообщения.ДополнительнаяИнформация;
	СообщениеОбъект.ВидСообщения = ОписаниеСообщения.ВидСообщения;
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если (МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС())
			И МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ЭлектронныйДокумент.СпособОбмена) Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Получен;
	Иначе
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован;
	КонецЕсли;
	
	СообщениеОбъект.ДатаИзмененияСтатуса = СообщениеОбъект.Дата;
	
	ИспользоватьУтверждение = СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий
		И СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И НастройкиДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		И НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, НастройкиДокумента,
		ИспользоватьУтверждение);
	
	СообщениеОбъект.ОсновнойФайл = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПолучитьСсылку();
	
	Если Не СообщениеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения сообщения ЭДО'");
	КонецЕсли;
	
	СообщениеОбъект.Записать();
	
	ДоступноИнтерактивноеРедактирование = ДоступноИнтерактивноеРедактированиеПрисоединенногоФайла(СообщениеОбъект.ВидСообщения,
		СообщениеОбъект.Направление);	
	
	СоздатьПрисоединенныйФайл(СообщениеОбъект.Ссылка, ОписаниеСообщения.Данные.Документ, СообщениеОбъект.ОсновнойФайл, 
		ДоступноИнтерактивноеРедактирование);
	
	// Создаем объект для приложения к титулу для ЕИС.
	Если ЭтоЭлектронноеАктированиеЕИС
		И (ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя)
		И ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			
		СообщениеОбъектПриложениеЕИС = МодульЭлектронноеАктированиеЕИС.
			СоздатьСообщениеПриложенияДляЕИС(ОписаниеСообщения, ЭлектронныйДокумент, НастройкиДокумента);
		
		СоздатьПрисоединенныйФайл(СообщениеОбъектПриложениеЕИС.Ссылка,
			ОписаниеСообщения.Данные.ДополнительныйДокумент,
			СообщениеОбъектПриложениеЕИС.ОсновнойФайл);
		
	Иначе
		
		Если ОписаниеСообщения.Данные.ДополнительныйДокумент.ДвоичныеДанные <> Неопределено Тогда
			СоздатьПрисоединенныйФайл(СообщениеОбъект.Ссылка, ОписаниеСообщения.Данные.ДополнительныйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Создает присоединенный файл в информационной базе.
// 
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект-владелец - приемник файлов.
//  ОписаниеДанных - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла().
//  НоваяСсылкаНаФайл - ОпределяемыйТип.ПрисоединенныйФайл - созданный файл.
//  ДоступноИнтерактивноеРедактированиеПрисоединенногоФайла - Булево.
//  
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
Функция СоздатьПрисоединенныйФайл(Владелец, ОписаниеДанных, НоваяСсылкаНаФайл = Неопределено, 
	ДоступноИнтерактивноеРедактирование  = Ложь)
	
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыДобавленияФайла.ВладелецФайлов = Владелец;
	ПараметрыДобавленияФайла.Служебный = Не ДоступноИнтерактивноеРедактирование;
	ПараметрыДобавленияФайла.Автор = Пользователи.ТекущийПользователь();
	
	Файл = Новый Файл(ОписаниеДанных.ИмяФайла);
	ПараметрыДобавленияФайла.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ПараметрыДобавленияФайла.РасширениеБезТочки = СтрЗаменить(Файл.Расширение,".","");
	ПараметрыДобавленияФайла.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ОписаниеДанных.ДвоичныеДанные);
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных,,,НоваяСсылкаНаФайл);
	
	УдалитьИзВременногоХранилища(АдресДвоичныхДанных);
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

Функция НовыеНастройкиОтправкиДокумента()
	
	НастройкиОтправки = Новый Структура;
	НастройкиОтправки.Вставить("Организация", Неопределено);
	НастройкиОтправки.Вставить("Контрагент", Неопределено);
	НастройкиОтправки.Вставить("ДоговорКонтрагента", Неопределено);
	НастройкиОтправки.Вставить("ИдентификаторОрганизации", "");
	НастройкиОтправки.Вставить("ИдентификаторКонтрагента", "");
	НастройкиОтправки.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	НастройкиОтправки.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	НастройкиОтправки.Вставить("МаршрутПодписания", Справочники.МаршрутыПодписания.ПустаяСсылка());
	НастройкиОтправки.Вставить("Подписанты", Неопределено);
	НастройкиОтправки.Вставить("ОбменБезПодписи", Ложь);
	НастройкиОтправки.Вставить("ТребуетсяИзвещение", Ложь);
	НастройкиОтправки.Вставить("ТребуетсяПодтверждение", Ложь);
	НастройкиОтправки.Вставить("ВыгружатьДополнительныеСведения", Ложь);
	НастройкиОтправки.Вставить("Формат", "");
	
	Возврат НастройкиОтправки;
	
КонецФункции

// Доступно интерактивное редактирование.
// 
// Параметры:
//  ВидСообщения - СправочникСсылка.ВидыДокументовЭДО - Вид сообщения
//  Направление - ПеречислениеСсылка.НаправленияЭДО - Направление
// 
// Возвращаемое значение:
//  Булево - Доступно интерактивное редактирование
Функция ДоступноИнтерактивноеРедактированиеПрисоединенногоФайла(ВидСообщения, Направление)
	
	ДоступноИнтерактивноеРедактирование = Ложь;	
	
	ВидыДокументовДляПроизвольногоФормата = ВидыДокументовДляПроизвольногоФормата();
	
	Если ВидыДокументовДляПроизвольногоФормата.Найти(ВидСообщения) <> Неопределено 
			И Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		ДоступноИнтерактивноеРедактирование = Истина;	
	КонецЕсли;
	
	Возврат ДоступноИнтерактивноеРедактирование;

КонецФункции

#КонецОбласти

#Область СформироватьИсправление

Процедура ВыполнитьДействиеСформироватьИсправление(ПараметрыВыполнения, РезультатДействий)
	
	Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
	Пока Выборка.Следующий() Цикл
		
		СформироватьИсправление(Выборка.ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьИсправление(ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий)
	
	Результат = Ложь;
	Действие = Перечисления.ДействияПоЭДО.СформироватьИсправление;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Если ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(ОбъектыУчетаЭлектронныхДокументов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета");
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(ОбъектыУчета);
	Если Не ЗначениеЗаполнено(РезультатПроверки.Готовые) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Основания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатПроверки.Готовые[0]);
	РезультатыЗапросаНастроек = РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, Основания);
	
	НаборПараметровФормирования = ПараметрыФормированияДокумента(ПараметрыВыполнения,
		РезультатыЗапросаНастроек, РезультатДействий);
	
	Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования)
		ИЛИ Не ЗначениеЗаполнено(НаборПараметровФормирования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФормирования = НаборПараметровФормирования[0];
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ОбъектУчета) Тогда
		ИдентификаторСвязи = Строка(ПараметрыФормирования.ОбъектУчета.УникальныйИдентификатор());
	Иначе
		ИдентификаторСвязи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НовыйДокументОбъект = НовыйИсходящийДокументОбъект(ПараметрыФормирования.НастройкиДокумента,
		ПараметрыФормирования.ОписаниеСообщения, ИдентификаторСвязи, ПараметрыФормирования.ИдентификаторыОснований);
	
	ПередЗаписьюНовогоДокумента(НовыйДокументОбъект, ПараметрыФормирования.ОписаниеСообщения);
	
	Если Не НовыйДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, Ложь);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		
		Если ДокументОбъект.Исправлен Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДокументОбъект.Исправлен = Истина;
		ДокументОбъект.Записать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики);
		
		Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ДатаИзменения, СвойстваСообщения, Комментарий);
		
		НовыйДокументОбъект.Записать();
		
		ПриЗаписиНовогоДокумента(НовыйДокументОбъект, ПараметрыФормирования.ОписаниеСообщения, КонтекстДиагностики,
			ПараметрыФормирования.Основания);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Если Результат Тогда
		ПослеЗаписиНовогоДокумента(НовыйДокументОбъект, КонтекстДиагностики);
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьИсправление,
			ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СформироватьИзвещение

Процедура ВыполнитьДействиеСформироватьИзвещение(ПараметрыВыполнения, РезультатДействий)
	
	РезультатЗапроса = РезультатЗапросаДокументовДляФормированияИзвещения(ПараметрыВыполнения.ОбъектыДействий);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СформироватьИзвещение(Выборка.ЭлектронныйДокумент, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатЗапросаДокументовДляФормированияИзвещения(ОбъектыДействий)
	
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		Запрос.УстановитьПараметр("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		Запрос.УстановитьПараметр("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|ГДЕ
			|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ОтборЭлектронныеДокументы)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
			
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		Запрос.УстановитьПараметр("ОтборСообщения", ОбъектыДействий.Сообщения);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		Если ЗначениеЗаполнено(ТекстыЗапросов) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов) Тогда
		
		Запрос.УстановитьПараметр("ОтборПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ОтборПакетыДокументов)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОтборСостояния = Новый Массив;
	ОтборСостояния.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении);
	ОтборСостояния.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению);
	
	Запрос.УстановитьПараметр("ОтборСостояния", ОтборСостояния);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВыборкаСвойствОсновныхФайловСообщений(Сообщения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)";
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Процедура СформироватьИзвещение(ЭлектронныйДокумент, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьИзвещение;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапроса.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		
		Если ПараметрыДокумента.Остановлен Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ОтборСообщений = Новый Массив;
		СообщенияДляОбработки = Новый Соответствие;
		Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
			ТипИзвещения = РегламентыЭДО.ТипИзвещенияДляЭлементаРегламента(СвойстваСообщения.ТипЭлементаРегламента,
				ПараметрыДокумента, ЭтоВходящийЭДО);
			Если Не ЗначениеЗаполнено(ТипИзвещения) Тогда
				Продолжить;
			КонецЕсли;
			СвойстваИзвещения = СостоянияСообщений.Найти(ТипИзвещения, "ТипЭлементаРегламента");
			Если СвойстваИзвещения = Неопределено Тогда
				СообщенияДляОбработки.Вставить(СвойстваСообщения.Ссылка, ТипИзвещения);
				ОтборСообщений.Добавить(СвойстваСообщения.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СообщенияДляОбработки) Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
			
			ВыборкаУчастниковЭДО = РезультатыЗапроса[2].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда
				
				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
				
				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ОтменитьТранзакцию();
					ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
					Возврат;
				КонецЕсли;
				
			Иначе
				ОтменитьТранзакцию();
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ВыборкаФайлов = ВыборкаСвойствОсновныхФайловСообщений(ОтборСообщений);
		Пока ВыборкаФайлов.Следующий() Цикл

			ТипИзвещения = СообщенияДляОбработки[ВыборкаФайлов.Сообщение];

			ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, ВыборкаФайлов,
				Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении, ТипИзвещения);

			Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
				
				Для каждого ОшибкаЗаполнения Из ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных Цикл
					ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ОшибкаЗаполнения.ТекстОшибки, КонтекстДиагностики);
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;

			ИзвещениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
			
			РезультатФормирования = Новый Структура;
			РезультатФормирования.Вставить("СообщениеОбъект", ИзвещениеОбъект);
			РезультатФормирования.Вставить("ТаблицаПодписания");
			НаборРезультатов.Добавить(РезультатФормирования);
			
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ИзвещениеОбъект);
			
			ДополненияСостоянийЭДО = Неопределено;
			Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
				
				ПараметрыМаршрута = СформироватьМаршрутПодписания(ИзвещениеОбъект);
				РезультатФормирования.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
				
				ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(ИзвещениеОбъект,
					ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
				
			КонецЕсли;
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
				ИзвещениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
			
			ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента,
				ИзвещениеОбъект.ДатаИзмененияСтатуса, ИзвещениеОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатФормирования Из НаборРезультатов Цикл
		ПослеФормированияИзвещения(РезультатФормирования, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки = "")
	
	Если Не ЗначениеЗаполнено(ДанныеУчастниковЭДО.Организация) Тогда	
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена организация с идентификатором %1'"), ДанныеУчастниковЭДО.ИдентификаторОрганизации);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеУчастниковЭДО.Контрагент) Тогда
		
		КонтрагентНайден = Ложь;
		
		Приглашение = ПриглашениеПоИдентификаторамОрганизацииКонтрагента(ДанныеУчастниковЭДО.ИдентификаторОрганизации, ДанныеУчастниковЭДО.ИдентификаторКонтрагента);
		
		Если ЗначениеЗаполнено(Приглашение) Тогда
			
			КонтрагентПриглашенныйКОбмену = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", Приглашение.КонтрагентИНН, Приглашение.КонтрагентКПП);
			
			Если ЗначениеЗаполнено(КонтрагентПриглашенныйКОбмену) Тогда
				
				ПриглашенияЭДО.ИзменитьКонтрагентаВПриглашении(Приглашение, КонтрагентПриглашенныйКОбмену);
				ДанныеУчастниковЭДО.Контрагент = КонтрагентПриглашенныйКОбмену;
				
				КонтрагентНайден = Истина;	
				
			ИначеЕсли НастройкиЭДО.СоздаватьКонтрагентовАвтоматически() Тогда
				
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("Наименование", Приглашение.КонтрагентНаименование);
				РеквизитыКонтрагента.Вставить("ИНН", Приглашение.КонтрагентИНН);
				РеквизитыКонтрагента.Вставить("КПП", Приглашение.КонтрагентКПП);
				
				СозданныйКонтрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
				ПриглашенияЭДО.ИзменитьКонтрагентаВПриглашении(Приглашение, СозданныйКонтрагент);
				ДанныеУчастниковЭДО.Контрагент = СозданныйКонтрагент;
				
				КонтрагентНайден = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не КонтрагентНайден Тогда
			ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
			+ СтрШаблон(НСтр("ru = 'Не найден контрагент с идентификатором %1'"), ДанныеУчастниковЭДО.ИдентификаторКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПриглашениеПоИдентификаторамОрганизацииКонтрагента(ИдентификаторОрганизации, ИдентификаторКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК Ключ,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК КонтрагентИНН,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КонтрагентКПП,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК КонтрагентНаименование,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|ГДЕ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Приглашение = Новый Структура("Ключ,КонтрагентИНН,КонтрагентКПП,КонтрагентНаименование,ИдентификаторОрганизации,ИдентификаторКонтрагента");
		ЗаполнитьЗначенияСвойств(Приглашение, Выборка);
		
		Возврат Приглашение;
		
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПослеФормированияИзвещения(РезультатФормирования, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьИсправление,
		РезультатФормирования.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(РезультатФормирования.СообщениеОбъект, РезультатФормирования.ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область Переформировать

Процедура ВыполнитьДействиеПереформировать(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.Переформировать);
	
	Отбор = НовыйОтборСообщенийДляОбработкиДействия();
	Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Подписание);
	Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
	ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
	
	Пока ВыборкаСообщений.Следующий() Цикл
		Переформировать(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий);
	КонецЦикла;
	
КонецПроцедуры

// Переформировывает файл сообщения ЭДО.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения.
Функция Переформировать(Сообщение, РезультатДействий, Комментарий = "")
	
	Результат = Ложь;
	
	ОшибкиФормирования = РезультатДействий.ОшибкиФормирования;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Действие = Перечисления.ДействияПоЭДО.Переформировать;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание
			И СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаФайловДокумента());
		
		Отбор = ИнтеграцияЭДО.НовыйОтборОбъектовУчетаЭлектронныхДокументов();
		Отбор.ЭлектронныеДокументы = "&ЭлектронныйДокумент";
		ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ЗапросОбъектовУчетаЭлектронныхДокументов("ВТ_ОбъектыУчета", Отбор).Текст);
		ТекстыЗапросов.Добавить("ВЫБРАТЬ ОбъектУчета ИЗ ВТ_ОбъектыУчета");
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайлаИнформацииОтправителя());
		
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());;
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ФайлыДокумента = РезультатыЗапроса[2].Выбрать();
		
		НаборОбъектовУчета = РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
		ОбъектУчетаДляФормирования = Неопределено;
		Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
			ОбъектУчетаДляФормирования = НаборОбъектовУчета[0];
		КонецЕсли;
		
		Если СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя 
			Или (МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(СообщениеОбъект.ТипЭлементаРегламента)) Тогда
			ВыборкаФайлаОснования = РезультатыЗапроса[5].Выбрать();
			ВыборкаФайлаОснования.Следующий();
			
			СвойстваОсновногоФайла = НовыеСвойстваОсновногоФайлаДляФормированияОтветного();
			СвойстваОсновногоФайла.Ссылка = ВыборкаФайлаОснования.Ссылка;
			СвойстваОсновногоФайла.ИмяФайла = ВыборкаФайлаОснования.ПолноеИмяФайла;
			СвойстваОсновногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлаОснования.Ссылка);
			СвойстваОсновногоФайла.Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(СвойстваОсновногоФайла);
			
			СодержаниеДокумента = СвойстваОсновногоФайла.Содержание;
			
			ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
			ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ПараметрыДокумента);
			ПараметрыФормирования.Отправитель = ПараметрыДокумента.Организация;
			ПараметрыФормирования.Получатель = ПараметрыДокумента.Контрагент;
			ПараметрыФормирования.Договор = ПараметрыДокумента.ДоговорКонтрагента;
			ПараметрыФормирования.Формат = ФорматыЭДО.ФорматОтветногоТитула(СодержаниеДокумента.Формат);
			ПараметрыФормирования.ТипДокумента = СодержаниеДокумента.ТипДокумента;
			ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования);
			
			Если МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента) Тогда
				КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
				КлючНастроекОтправки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
				КлючНастроекОтправки.Отправитель = ПараметрыДокумента.Организация;
				КлючНастроекОтправки.Получатель = ПараметрыДокумента.Контрагент;
				
				НастройкиОтправки = НастройкиОтправкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
				
				РезультатФормирования = ОписаниеСообщенияОтправителя(НаборОбъектовУчета, ОписаниеДанных.Данные,
					НастройкиОтправки).Данные;
			Иначе
				РезультатФормирования = ОписаниеСообщенияПолучателя(ОписаниеДанных.Данные,
					ПараметрыДокумента, СвойстваОсновногоФайла, ПараметрыФормирования.Формат);
			КонецЕсли;
		Иначе
			СвойстваФайлаОснования = РезультатыЗапроса[5].Выбрать();
			СвойстваФайлаОснования.Следующий();
			
			ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
			ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
			Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда

				ВыборкаУчастниковЭДО = РезультатыЗапроса[6].Выбрать();
				Если ВыборкаУчастниковЭДО.Следующий() Тогда

					ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
					ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;

					ТекстОшибки = "";
					ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ОтменитьТранзакцию();
						ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки,
							КонтекстДиагностики);
						Возврат Результат;
					КонецЕсли;

				Иначе
					ОтменитьТранзакцию();
					ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
					ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
					Возврат Результат;
				КонецЕсли;

			КонецЕсли;
			
			РезультатФормирования = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваФайлаОснования,
			СообщениеОбъект.ТипДокумента, СообщениеОбъект.ТипЭлементаРегламента);
		КонецЕсли;
		
		Если РезультатФормирования.ЕстьОшибки Тогда
			ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыДокумента);
			ОписаниеВидаДокумента = ОписаниеВидаДокумента(ПараметрыДокумента.ВидДокумента);
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеВидаДокумента);
			ОписаниеОшибки.ОписаниеОбъектаУчета.ОбъектУчета = ОбъектУчетаДляФормирования;
			ОписаниеОшибки.ОписаниеОбъектаУчета.Направление = СообщениеОбъект.Направление;
			ОписаниеОшибки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
			ОписаниеОшибки.ОшибкиДанных = РезультатФормирования.Ошибки;
			ОшибкиФормирования.Добавить(ОписаниеОшибки);
			
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", "");
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		
		Пока ФайлыДокумента.Следующий() Цикл
			Если ФайлыДокумента.Основной Тогда
				ИнформацияОФайле.АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
					РезультатФормирования.Документ.ДвоичныеДанные);
				РаботаСФайлами.ОбновитьФайл(ФайлыДокумента.Ссылка, ИнформацияОФайле);
				УдалитьПодписи(ФайлыДокумента.Ссылка, ПараметрыДокумента.ВидПодписи);
			Иначе
				ФайлОбъект = ФайлыДокумента.Ссылка.ПолучитьОбъект();
				ФайлОбъект.УстановитьПометкуУдаления();
			КонецЕсли;
		КонецЦикла;
		
		СообщениеОбъект.Дата = ТекущаяДатаСеанса();
		СообщениеОбъект.ДатаИзмененияСтатуса = СообщениеОбъект.Дата;
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован;
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект, Комментарий);
		
		ЭлектронныеДокументыЭДОСобытия.ПриИзмененииСостоянияЭлектронногоДокумента(ЭлектронныйДокумент,
			СостояниеДокумента, КонтекстДиагностики);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Если Результат Тогда
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаФайловДокумента()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл КАК Основной
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &ЭлектронныйДокумент";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаСвойствОсновногоФайлаИнформацииОтправителя()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Закрыть

Процедура ВыполнитьДействиеЗакрыть(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ЗакрытьПринудительноДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ЗакрытьПринудительно(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно,
					Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗакрытьПринудительно(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ЗакрытПринудительно;
	Результат = ОстановитьДокумент(ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики, Комментарий);
	Возврат Результат;
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ЗакрытьПринудительноДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий)
	
	Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
		
		ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета);
		
		СостоянияПоДокументам = СостоянияПоДокументам(ДокументыПакета);
		
		НаборСостояний = Новый Массив;
		Для Каждого СостояниеПоДокументу Из СостоянияПоДокументам Цикл
			НаборСостояний.Добавить(СостояниеПоДокументу.Значение);
		КонецЦикла;
		
		СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
			Действие, КонтекстДиагностики);
		
		Если Не СостоянияОднородны Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого СостояниеПоДокументу Из СостоянияПоДокументам Цикл
			
			Если Не ЗакрытьПринудительно(СостояниеПоДокументу.Ключ, КонтекстДиагностики, Комментарий) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ОбработанныеДокументы.Добавить(СостояниеПоДокументу.Ключ);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Функция ОстановитьДокумент(ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики, Комментарий = "")
	
	Результат = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Остановлен = Истина;
		ДокументОбъект.ПричинаОстановки = ПричинаОстановки;
		
		Если Действие = Перечисления.ДействияПоЭДО.Загрузить
			И ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения
			И НастройкиЭДО.ОзнакомлениеСЭлектроннымиДокументами() Тогда
			ДокументОбъект.НаОзнакомлении = Истина;
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики,,Комментарий);
		
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ДатаИзменения, СвойстваСообщения, Комментарий);
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий = "")
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Если Не ДокументОбъект.Остановлен Тогда
			ЗафиксироватьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ДокументОбъект.Остановлен = Ложь;
		ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ПересчитатьСостоянияСообщений(СостоянияСообщений, ДокументОбъект);
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики);
		
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ДатаИзменения, СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВернутьВРаботу

Процедура ВыполнитьДействиеВернутьВРаботу(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ВернутьВРаботуДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ВернутьВРаботу(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ВернутьВРаботу,
					Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьВРаботу(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	Действие = Перечисления.ДействияПоЭДО.ВернутьВРаботу;
	Результат = ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий);
	Возврат Результат;
КонецФункции

Процедура ВернутьВРаботуДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ВернутьВРаботу;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправитьВАрхив

Процедура ВыполнитьДействиеОтправитьВАрхив(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтправитьВАрхивДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ОтправитьВАрхив(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ОтправитьВАрхив,
					Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьВАрхив(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.ОтправитьВАрхив;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Если Не ДокументОбъект.НаОзнакомлении Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
		КонецЕсли;
		
		СвойстваСообщения = РезультатыЗапроса[1].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДокументОбъект.НаОзнакомлении = Ложь;
		ДокументОбъект.Записать();
		
		СостояниеДокумента = СостояниеДокумента(ЭлектронныйДокумент);
		
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ТекущаяДатаСеанса(),
			СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьВАрхивДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтправитьВАрхив;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ОтправитьВАрхив(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьПодписание

Процедура ВыполнитьДействиеОтклонитьПодписание(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьПодписаниеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ОтклонитьПодписание(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ОтклонитьПодписание,
					Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтклонитьПодписание(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	
	Результат = Ложь;
	
	Если ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьПодписание;
	Причина = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПодписания;
	Возврат ОстановитьДокумент(ЭлектронныйДокумент, Причина, Действие, КонтекстДиагностики, Комментарий);
	
КонецФункции

// Параметры:
//  ПакетДокумента - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтклонитьПодписаниеДокументовПакета(ПакетДокумента, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьПодписание;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокумента, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ОтклонитьПодписание(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокумента, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отклонить

Процедура ВыполнитьДействиеОтклонить(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.Отклонить);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ЭлементДляОтклонения = ДополнительныйПараметрДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.Отклонить, "ЭлементДляОтклонения");
		Если ЗначениеЗаполнено(ЭлементДляОтклонения) Тогда
			Отбор.ТипЭлементаРегламента.Добавить(ЭлементДляОтклонения);	
		КонецЕсли;
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ОтклонитьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий, ЭлементДляОтклонения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтклонитьДокумент(Сообщение, РезультатДействий, Комментарий = "", ЭлементДляОтклонения = Неопределено)
	
	РезультатОтклонения = Отклонить(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий, ЭлементДляОтклонения);
	
	Если РезультатОтклонения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПослеОтклонения(РезультатОтклонения, РезультатДействий);
	
КонецПроцедуры

Процедура ОтклонитьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий)
	
	Действие = Перечисления.ДействияПоЭДО.Отклонить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Отклонить(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатОтклонения Из НаборРезультатов Цикл
		ПослеОтклонения(РезультатОтклонения, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

Функция Отклонить(Сообщение, КонтекстДиагностики, Комментарий = "", ЭлементДляОтклонения = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Отклонить;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И (?(ЗначениеЗаполнено(ЭлементДляОтклонения), СообщениеОбъект.ТипЭлементаРегламента <> ЭлементДляОтклонения, Истина)) Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияДокументовЭДО = РезультатыЗапроса[1].Выгрузить();
		
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ;	
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ПриОпределенииТипаРегламентаУОУ(СообщениеОбъект.ТипЭлементаРегламента, ТипЭлементаРегламентаУОУ);
		КонецЕсли;
		
		Если Не РегламентыЭДО.ОтклонениеДоступно(СостоянияДокументовЭДО, ЭтоВходящийЭДО, ТипЭлементаРегламентаУОУ) Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		СвойстваОсновногоФайла.Следующий();
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
			
			ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда
				
				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
				
				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ОтменитьТранзакцию();
					ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
					Результат.Отказ = Истина;
					Возврат Результат;
				КонецЕсли;
				
			Иначе
				ОтменитьТранзакцию();
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
				Результат.Отказ = Истина;
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
			Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, ТипЭлементаРегламентаУОУ, Комментарий);
		
		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать уведомление об уточнении'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
			
		КонецЕсли;

		СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

		УстановитьСостояниеХранение(СостоянияДокументовЭДО, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		ЗаполнитьЗначенияСвойств(СостоянияДокументовЭДО.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияДокументовЭДО,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, Комментарий);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПослеОтклонения(РезультатОтклонения, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Отклонить,
		РезультатОтклонения.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(РезультатОтклонения.СообщениеОбъект, РезультатОтклонения.ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область Аннулировать

Процедура ВыполнитьДействиеАннулировать(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.Аннулировать);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			АннулироватьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			АннулироватьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АннулироватьДокумент(Сообщение, РезультатДействий, Комментарий = "")
	
	Результат = Аннулировать(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Аннулировать,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(Результат.СообщениеОбъект, Результат.ТаблицаПодписания);
	
КонецПроцедуры

Процедура АннулироватьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.Аннулировать;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Аннулировать(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ОповеститьОДокументеКПодписанию(РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
	КонецЦикла;
	
КонецПроцедуры

Функция Аннулировать(Сообщение, КонтекстДиагностики, Комментарий = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Аннулировать;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		Если СообщениеОбъект.Направление <> Перечисления.НаправленияЭДО.Внутренний Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		КонецЕсли;
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ЭтоПовторноеАннулирование = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА,
			"ТипЭлементаРегламента") <> Неопределено;
		Если ЭтоПовторноеАннулирование Тогда
			ДобавитьОшибкуПовторногоАннулирования(КонтекстДиагностики, Действие, ЭлектронныйДокумент);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		УстановитьСостояниеХранение(СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Внутренний 
			Или СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			
			ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ДокументОбъект.Остановлен = Истина;
			ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.Аннулирован;
			ДокументОбъект.Записать();
			ПараметрыДокумента = ДокументОбъект;
			
		Иначе
			
			СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
			СвойстваОсновногоФайла.Следующий();
			
			ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
			ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
			Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда

				ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
				Если ВыборкаУчастниковЭДО.Следующий() Тогда

					ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
					ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;

					ТекстОшибки = "";
					ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки,
							КонтекстДиагностики);
						Результат.Отказ = Истина;
						ОтменитьТранзакцию();
						Возврат Результат;
					КонецЕсли;

				Иначе
					ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
					ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
					Результат.Отказ = Истина;
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;

			КонецЕсли;

			ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
				Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании, Перечисления.ТипыЭлементовРегламентаЭДО.ПОА,
				Комментарий);

			Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда

				ТекстОшибки = НСтр("ru = 'Не удалось сформировать предложение об аннулировании'");
				ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);

				ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
				ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);

				ОтменитьТранзакцию();
				Результат.Отказ = Истина;
				Возврат Результат;

			КонецЕсли;

			СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);

		КонецЕсли;
		
		ДополненияСостоянийЭДО = Неопределено;
		
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
			
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект, Комментарий);
		
		Если ПараметрыДокумента.НаОзнакомлении Тогда
			ВернутьСОзнакомления(ЭлектронныйДокумент);
		КонецЕсли;
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОшибкуПовторногоАннулирования(КонтекстДиагностики, Действие, ЭлектронныйДокумент)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Аннулирование документа %1 уже производилось.
		|Повторное аннулирование недоступно.'"), ЭлектронныйДокумент);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиПовторноеАннулированиеНедоступно(),
		ТекстСообщения, ТекстСообщения);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Функция ВидОшибкиПовторноеАннулированиеНедоступно()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ПовторноеАннулированиеНедоступно";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Повторное аннулирование недоступно'");
	Возврат ВидОшибки;
КонецФункции

#КонецОбласти

#Область ПринятьАннулирование

Процедура ВыполнитьДействиеПринятьАннулирование(ПараметрыВыполнения, РезультатДействий)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ПринятьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Подтверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ПринятьАннулированиеДокумента(ВыборкаСообщений.Ссылка, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПринятьАннулированиеДокумента(Сообщение, РезультатДействий)
	
	Результат = ПринятьАннулирование(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ПринятьАннулирование,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
		Результат.СообщениеОбъект.ЭлектронныйДокумент, РезультатДействий.КонтекстДиагностики);
	
КонецПроцедуры

Процедура ПринятьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Подтверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ПринятьАннулирование(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет принятие аннулирования.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
// * Отказ - Булево
// * СообщениеОбъект - ДокументОбъект.СообщениеЭДО
// * ТаблицаПодписания - ТаблицаЗначений
Функция ПринятьАннулирование(Сообщение, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ПодписиСОшибкамиМЧД = МашиночитаемыеДоверенности.ПодписиСОшибкамиМЧД(
			ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент));
		
		Если ПодписиСОшибкамиМЧД.Количество() > 0 Тогда
			
			ДобавитьОшибкуПодписиМЧД(ЭлектронныйДокумент, ПодписиСОшибкамиМЧД, Действие, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
			
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подтверждение
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = Неопределено;
		
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
			
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтклонитьАннулирование

Процедура ВыполнитьДействиеОтклонитьАннулирование(ПараметрыВыполнения, РезультатДействий)
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
		
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Подтверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ОтклонитьАннулированиеДокумента(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтклонитьАннулированиеДокумента(Сообщение, РезультатДействий, Комментарий = "")
	
	Результат = ОтклонитьАннулирование(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(Результат.СообщениеОбъект, Результат.ТаблицаПодписания);
	
КонецПроцедуры

Процедура ОтклонитьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Подтверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ОтклонитьАннулирование(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ОповеститьОДокументеКПодписанию(РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтклонитьАннулирование(Сообщение, КонтекстДиагностики, Комментарий = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подтверждение
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		СвойстваОсновногоФайла.Следующий();
		
		ПересчитатьСостоянияСообщений(СостоянияСообщений, ПараметрыДокумента);
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда

			ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда

				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;

				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
					Результат.Отказ = Истина;
					Возврат Результат;
				КонецЕсли;

			Иначе
				ОтменитьТранзакцию();
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
				Результат.Отказ = Истина;
				Возврат Результат;
			КонецЕсли;

		КонецЕсли;

		ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
			Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ,
			Комментарий);

		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда

			ТекстОшибки = НСтр("ru = 'Не удалось сформировать отказ от предложения об аннулировании'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);

			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);

			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;

		КонецЕсли;

		СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

		ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект, Комментарий);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Перенаправить

Процедура ВыполнитьДействиеПеренаправить(ПараметрыВыполнения, РезультатДействий)
	
	ДополнительныеПараметры = ПараметрыВыполнения.ДополнительныеПараметрыДействий[Перечисления.ДействияПоЭДО.Перенаправить];
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = ДополнительныеПараметры.Ответственный;
	Комментарий = ДополнительныеПараметры.Комментарий;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ПеренаправитьДокументыПакета(ПакетДокументов, Ответственный, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ПеренаправитьДокумент(Выборка.ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Перенаправить,
					Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПеренаправитьДокумент(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий = "")
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.Перенаправить;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		СвойстваСообщения = РезультатыЗапроса[1].Выбрать();
		СвойстваСообщения.Выбрать();
		
		СостояниеДокумента = СостояниеДокумента(ЭлектронныйДокумент);
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ТекущаяДатаСеанса(),
			СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		
		ПредставлениеДействия = НРег(Действие);
		ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось установить ответственного по документу: %1.'"),
			ПредставлениеДокумента(ЭлектронныйДокумент));
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренаправитьДокументыПакета(ПакетДокументов, Ответственный, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.Перенаправить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ПеренаправитьДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Утвердить

Процедура ВыполнитьДействиеУтвердить(ПараметрыВыполнения, РезультатДействий)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			УтвердитьДокументыПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Утверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			УтвердитьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УтвердитьДокумент(Сообщение, РезультатДействий)
	
	РезультатУтверждения = Утвердить(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	ПослеУтверждения(РезультатУтверждения, РезультатДействий);
	
КонецПроцедуры

Процедура УтвердитьДокументыПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Утвердить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Утверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Утвердить(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого РезультатУтверждения Из НаборРезультатов Цикл
		
		ПослеУтверждения(РезультатУтверждения, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

Функция Утвердить(Сообщение, КонтекстДиагностики, НаборОбъектовУчета = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Утвердить;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Утверждение
			ИЛИ ЕстьНевалидныеПодписи(СообщениеОбъект.ОсновнойФайл, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = НовыеДополненияСостоянийЭДО();
		
		ДополненияСостоянийЭДО = Неопределено;
		Если ПараметрыДокумента.ТребуетсяПодтверждение
			И Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
			И Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект);
		
		Результат.СостояниеДокумента = СостояниеДокумента;
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПослеУтверждения(РезультатУтверждения, РезультатДействий)
	
	Если РезультатУтверждения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбъект = РезультатУтверждения.СообщениеОбъект;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Утвердить,
		СообщениеОбъект.ЭлектронныйДокумент);
	
	Если ЗначениеЗаполнено(РезультатУтверждения.ТаблицаПодписания) Тогда
		ОповеститьОДокументеКПодписанию(СообщениеОбъект, РезультатУтверждения.ТаблицаПодписания);
	КонецЕсли;
	
	Если СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеУтвержденияЭлектронногоДокумента(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
	Если РезультатУтверждения.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ РезультатУтверждения.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СнятьСУтверждения

// Снимает с утверждения.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  ИспользоватьУтверждение - Булево
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Снять с утверждения
Функция СнятьСУтверждения(Сообщение, ИспользоватьУтверждение, КонтекстДиагностики)
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.СнятьСУтверждения;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Утверждение Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		Запрос.УстановитьПараметр("СтатусСообщения", СообщениеОбъект.Статус);
		Запрос.УстановитьПараметр("ДатаИзменения", СообщениеОбъект.ДатаИзмененияСтатуса);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента,
			ИспользоватьУтверждение);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = Неопределено;
		Если ПараметрыДокумента.ТребуетсяПодтверждение
			И Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
			И Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Если Не Результат Тогда
		ПослеСнятияСУтверждения(СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания, СостояниеДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПослеСнятияСУтверждения(СообщениеОбъект, ТаблицаПодписания, СостояниеДокумента)
	
	Если (СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован) Тогда
		
		ОтправитьНаОзнакомление(СообщениеОбъект.ЭлектронныйДокумент);
	КонецЕсли;
	
	ОповеститьОДокументеКПодписанию(СообщениеОбъект, ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область СформироватьОтвет

Процедура ВыполнитьДействиеСформироватьОтвет(ПараметрыВыполнения, РезультатДействий)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Выборка = ВыборкаДокументовДляФормированияОтвета(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			СформироватьОтветПоДокументу(Выборка.ЭлектронныйДокумент, РезультатДействий)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ДанныеОбъектаУчета - Неопределено - при отсутствии.
//                     - ДеревоЗначений
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СообщениеОбъект - Неопределено - если сообщение не создано.
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.ПустаяТаблицаТребованийКПодписанию
//  * ОшибкиФормирования - Массив из см. НовоеОписаниеОшибкиФормирования
Функция СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ДанныеОбъектаУчета = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьОтвет;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	Если Не ЭтоВходящийЭДО
		И НЕ (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ЭлектронныйДокумент.ТипРегламента)) Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствФайлаИнформацииОтправителя());
		ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ДополненияСостоянийЭДО = НовыеДополненияСостоянийЭДО();
		
		ЭтоЭлектронноеАктирование = Ложь;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ПараметрыДокумента.СпособОбмена) Тогда
				ЭтоЭлектронноеАктирование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		КонецЕсли;
		
		Если (Не ПараметрыДокумента.ТребуетсяПодтверждение 
				И НЕ (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента)))
			ИЛИ (Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
					И НЕ ЭтоЭлектронноеАктирование)
			ИЛИ СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя,
				"ТипЭлементаРегламента") <> Неопределено 
			ИЛИ РегламентыЭДО.ЕстьАктивноеАннулирование(СостоянияСообщений) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		Если Не ВыборкаОсновногоФайла.Следующий() Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			ДобавитьОшибкуОтсутствияОсновногоФайлаДокумента(КонтекстДиагностики, Действие, ЭлектронныйДокумент);
			Возврат Результат;
		КонецЕсли;
		
		НаборОбъектовУчета = Новый Массив;
		Если Не РезультатыЗапроса[3].Пустой() Тогда
			НаборОбъектовУчета = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
		Иначе
			Если ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда 
				Результат.Отказ = Истина;
				ДобавитьОшибкуФормированияОтвета(ЭлектронныйДокумент, Действие, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат Результат; 
			КонецЕсли;
		КонецЕсли;
		
		СвойстваОсновногоФайла = НовыеСвойстваОсновногоФайлаДляФормированияОтветного();
		СвойстваОсновногоФайла.Ссылка = ВыборкаОсновногоФайла.Ссылка;
		СвойстваОсновногоФайла.ИмяФайла = ВыборкаОсновногоФайла.ПолноеИмяФайла;
		СвойстваОсновногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаОсновногоФайла.Ссылка);
		СвойстваОсновногоФайла.Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(СвойстваОсновногоФайла);
		
		РезультатПроверки = ФорматыЭДО.ПроверитьДокумент(СвойстваОсновногоФайла);
		
		Если РезультатПроверки.Ошибки Тогда
			
			ТекстОшибки = РезультатПроверки.ТекстОшибки;
			ДобавитьОшибкуФорматаОсновногоФайлаДокумента(КонтекстДиагностики, ЭлектронныйДокумент, ТекстОшибки);
				
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;

		КонецЕсли;
		
		Если КонтекстДиагностики.Свойство("ДанныеРучногоФормированияОтветногоТитула") Тогда
			ДанныеРучногоФормированияОтветногоТитула = 
				КонтекстДиагностики.ДанныеРучногоФормированияОтветногоТитула;
		КонецЕсли;
		
		Если ДанныеОбъектаУчета = Неопределено Тогда
			
			СообщениеОбъект = СоздатьОтветноеСообщение(СвойстваОсновногоФайла, ПараметрыДокумента, НаборОбъектовУчета, 
				Результат.ОшибкиФормирования, ДанныеРучногоФормированияОтветногоТитула);
			
		Иначе
			
			СообщениеОбъект = СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента,
				ДанныеОбъектаУчета, Результат.ОшибкиФормирования);
			
		КонецЕсли;
		
		Если СообщениеОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект);
		
		Результат.СостояниеДокумента = СостояниеДокумента;
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСвойствФайлаИнформацииОтправителя()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл
		|		И СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)";
	Возврат ТекстЗапроса;
КонецФункции

// Параметры:
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ОшибкиФормирования - Массив из см. НовоеОписаниеОшибкиФормирования
//  ДанныеРучногоФормированияОтветногоТитула - Неопределено,Структура
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументОбъект.СообщениеЭДО
Функция СоздатьОтветноеСообщение(СвойстваОсновногоФайла, ПараметрыДокумента, НаборОбъектовУчета, ОшибкиФормирования,
	ДанныеРучногоФормированияОтветногоТитула = Неопределено)
	
	СодержаниеДокумента = СвойстваОсновногоФайла.Содержание;
	
	ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ПараметрыДокумента);
	ПараметрыФормирования.Отправитель = ПараметрыДокумента.Организация;
	ПараметрыФормирования.Получатель = ПараметрыДокумента.Контрагент;
	ПараметрыФормирования.Договор = ПараметрыДокумента.ДоговорКонтрагента;
	ПараметрыФормирования.Формат = ФорматыЭДО.ФорматОтветногоТитула(СодержаниеДокумента.Формат);
	ПараметрыФормирования.ТипДокумента = СодержаниеДокумента.ТипДокумента;
	
	Если ДанныеРучногоФормированияОтветногоТитула <> Неопределено Тогда 
    	ПараметрыФормирования.Вставить("ДанныеРучногоФормированияОтветногоТитула", 
    		ДанныеРучногоФормированияОтветногоТитула);
	КонецЕсли;
	
	ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования);
	
	Если ОписаниеДанных.ОшибкаФормированияВПрикладнойЧасти Тогда 
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыДокумента.Организация;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ТипДокумента = СодержаниеДокумента.ТипДокумента;
		ОписаниеОшибки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
		
		ОшибкаФормированияВПрикладнойЧасти = Новый Структура;
		ОшибкаФормированияВПрикладнойЧасти.Вставить("ЭлектронныйДокумент", ПараметрыДокумента.Ссылка); 
		ОписаниеОшибки.ОшибкаФормированияВПрикладнойЧасти = ОшибкаФормированияВПрикладнойЧасти;	
		
		ОшибкиФормирования.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	СообщениеОбъект = СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента,
		ОписаниеДанных.Данные, ОшибкиФормирования);
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Параметры:
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса,Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  ДанныеОбъектаУчета - ДеревоЗначений
//  ОшибкиФормирования - Массив из см. НовоеОписаниеОшибкиФормирования
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументОбъект.СообщениеЭДО
Функция СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента, ДанныеОбъектаУчета, ОшибкиФормирования)
	
	СодержаниеОсновногоФайла = СвойстваОсновногоФайла.Содержание;
	ФорматОтветногоФайла = ФорматыЭДО.ФорматОтветногоТитула(СодержаниеОсновногоФайла.Формат);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента)) Тогда	
		ОписаниеСообщения = МодульОбменСГИСЭПД.ОписаниеСообщенияОтправителя(ПараметрыДокумента.Ссылка);
	ИначеЕсли ТипЗнч(ДанныеОбъектаУчета) = Тип("ДеревоЗначений") И Не ЗначениеЗаполнено(ДанныеОбъектаУчета.Строки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеСообщения = Неопределено Тогда
		ОписаниеСообщения = ОписаниеСообщенияПолучателя(ДанныеОбъектаУчета, ПараметрыДокумента,
			СвойстваОсновногоФайла, ФорматОтветногоФайла);
	КонецЕсли;
	
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		ОписаниеОшибки = НовоеОписаниеОшибкиФормирования();
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыДокумента.Организация;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыДокумента.Контрагент;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Договор = ПараметрыДокумента.ДоговорКонтрагента;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ТипДокумента = СодержаниеОсновногоФайла.ТипДокумента;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ПрикладнойТипДокумента = СодержаниеОсновногоФайла.ПрикладнойТипДокумента;
		ОписаниеОшибки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
		ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
		ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ИмяФайла - Строка
//  * ДвоичныеДанные - Неопределено,ДвоичныеДанные
//  * Содержание - см. ФорматыЭДО.ПрочитатьСодержаниеДокумента
Функция НовыеСвойстваОсновногоФайлаДляФормированияОтветного()
	Свойства = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	Свойства.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Свойства.Вставить("Содержание", Неопределено);
	Возврат Свойства;
КонецФункции

Процедура ДобавитьОшибкуФорматаОсновногоФайлаДокумента(КонтекстДиагностики, ЭлектронныйДокумент, ТекстОшибки)

	ВидОперации = НСтр("ru = 'Проверка информации отправителя'");
	ВидОшибки = ФорматыЭДО_ФНС.ВидОшибкиНекорректныйФорматИнформацииОтправителя();

	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить);
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
	ДополнительныеПараметрыДействий = Новый Соответствие;
	ДополнительныеПараметрыДействий.Вставить(ЭлектронныйДокумент, ТекстОшибки);
	ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(ЭлектронныйДокумент, ТекстОшибки);
	
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ПараметрыВыполненияДействийПоЭДО);

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
	
	ПодсистемаОбменСКонтрагентами = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемаОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДобавитьОшибкуОтсутствияОсновногоФайлаДокумента(КонтекстДиагностики, Действие, ЭлектронныйДокумент)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	ПредставлениеДокумента = ПредставлениеДокумента(ЭлектронныйДокумент);
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось утвердить электронный документ: %1.'"), ПредставлениеДокумента);
	ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС
		+ НСтр("ru = 'Не найден основной файл электронного документа.'");
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробныйТекстОшибки, ТекстОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

#КонецОбласти

#Область Подписать

Процедура ВыполнитьДействиеПодписать(ПараметрыВыполнения, РезультатДействий)
	
	ДанныеДляПодписания = ДанныеДокументовДляПодписания(ПараметрыВыполнения, РезультатДействий.КонтекстДиагностики);

	ОбработатьОшибкиДанныхДляПодписания(ДанныеДляПодписания.Ошибки, РезультатДействий.КонтекстДиагностики,
		ПараметрыВыполнения);

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляПростойПодписи) Тогда
		ПодписатьПростойПодписью(ДанныеДляПодписания.ДанныеДляПростойПодписи, РезультатДействий);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляПодписанияНаСервере) Тогда
		ПодписатьНаСервере(ДанныеДляПодписания.ДанныеДляПодписанияНаСервере, РезультатДействий);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляИнтерактивногоПодписания) Тогда
		РезультатДействий.КонтекстПодписания = КонтекстИнтерактивногоПодписания(
			ДанныеДляПодписания.ДанныеДляИнтерактивногоПодписания, ПараметрыВыполнения, РезультатДействий.Итог);
	КонецЕсли;

КонецПроцедуры

Функция ДанныеДокументовДляПодписания(ПараметрыВыполнения, КонтекстДиагностики)

	Запрос = Неопределено;
	ЭтоМЧД = ПараметрыВыполнения.ОбъектыДействий.Свойство("МЧД") И ПараметрыВыполнения.ОбъектыДействий.МЧД.Количество()
		> 0;
	Если ЭтоМЧД Тогда
		Запрос = ЗапросДанныхМЧДДляПодписания(ПараметрыВыполнения, КонтекстДиагностики);
	Иначе
		Запрос = ЗапросДанныхСообщенийДляПодписания(ПараметрыВыполнения, КонтекстДиагностики);
	КонецЕсли;
	Если Запрос = Неопределено Тогда
		Возврат НовыйРезультатОбработкиДанныхДляПодписания();
	КонецЕсли;

	РезультатыЗапроса = РезультатыЗапросаДанныхСообщенийДляПодписания(Запрос);

	Если ЭтоМЧД Тогда
		РезультатОбработки = ОбработатьРезультатыЗапросаДанныхМЧДДляПодписания(
			ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики);
	Иначе
		РезультатОбработки = ОбработатьРезультатыЗапросаДанныхСообщенийДляПодписания(
			ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики);
	КонецЕсли;

	Возврат РезультатОбработки;

КонецФункции

Функция ЗапросДанныхМЧДДляПодписания(ПараметрыВыполнения, КонтекстДиагностики)

	ОписанияЗапросов = Новый Массив;

	ОбъектыДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.МЧД, ПараметрыВыполнения.ОбъектыДействий.МЧД);

	ОписанияЗапросов.Добавить(ЗапросМЧДДляПодписания("СообщенияДляОбработки", ОбъектыДействий));

	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Отпечатки = "&ОтпечаткиСертификатов";
	Отбор.ДоступныеТекущемуПользователю = Истина;
	Если Не ПараметрыВыполнения.ОтпечаткиСертификатов.Облако.Доступность Тогда
		Отбор.Облачные = Ложь;
	КонецЕсли;
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("ДоступныеСертификаты", Отбор));

	Отбор = СинхронизацияЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "ВЫБРАТЬ РАЗЛИЧНЫЕ ИдентификаторОрганизации ИЗ ИдентификаторыОрганизации";
	ОписанияЗапросов.Добавить(СинхронизацияЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", Отбор));

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоступныеСертификаты.Ссылка КАК Сертификат,
	|	ДоступныеСертификаты.Отпечаток КАК Отпечаток,
	|	ДоступныеСертификаты.Программа КАК Программа,
	|	ДоступныеСертификаты.Организация КАК Организация,
	|	ЕСТЬNULL(СертификатыУчетныхЗаписей.ИдентификаторЭДО, """") КАК ИдентификаторОрганизации
	|ИЗ
	|	ДоступныеСертификаты КАК ДоступныеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
	|		ПО ДоступныеСертификаты.Ссылка = СертификатыУчетныхЗаписей.Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияДляОбработки.Ссылка КАК Ссылка,
	|	СообщенияДляОбработки.Организация КАК Организация,
	|	СообщенияДляОбработки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	СообщенияДляОбработки.СНИЛСДоверителя КАК СНИЛСДоверителя,
	|	&ОрганизацияИНН КАК ИННОрганизации,
	|	&ОГРНОрганизации КАК ОГРНОрганизации
	|ИЗ
	|	СообщенияДляОбработки КАК СообщенияДляОбработки";

	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);

	ВсеОтпечатки = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(ПараметрыВыполнения.ОтпечаткиСертификатов);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ВсеОтпечатки);
	
	ТекстПоляОрганизацииИНН = СтрШаблон("СообщенияДляОбработки.Организация.%1",
		ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации"));
	ТекстПоляОрганизацииОГРН = СтрШаблон("СообщенияДляОбработки.Организация.%1",
		ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОрганизацияИНН", ТекстПоляОрганизацииИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОГРНОрганизации", ТекстПоляОрганизацииОГРН);
	
	Возврат Запрос;

КонецФункции

Функция ЗапросМЧДДляПодписания(ИмяВременнойТаблицы, ОбъектыДействий)

	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();

	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;

	ТекстыЗапросов = Новый Массив;

	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСообщения", ОбъектыДействий.МЧД);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.Ссылка,
	|	МашиночитаемыеДоверенности.Организация КАК Организация,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС КАК СНИЛСДоверителя,
	|	МАКСИМУМ(ЕСТЬNULL(УчетныеЗаписиЭДО.ИдентификаторЭДО, """")) КАК ИдентификаторОрганизации
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО МашиночитаемыеДоверенности.Организация = УчетныеЗаписиЭДО.Организация
	|ГДЕ
	|	МашиночитаемыеДоверенности.Ссылка В (&ОтборСообщения)
	|СГРУППИРОВАТЬ ПО
	|	МашиночитаемыеДоверенности.Ссылка,
	|	МашиночитаемыеДоверенности.Организация,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
	|	УчетныеЗаписиЭДО.Организация КАК Организация
	|ПОМЕСТИТЬ ИдентификаторыОрганизации
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	УчетныеЗаписиЭДО.Организация В
	|		(ВЫБРАТЬ
	|			МашиночитаемыеДоверенности.Организация
	|		ИЗ
	|			Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|		ГДЕ
	|			МашиночитаемыеДоверенности.Ссылка В (&ОтборСообщения))";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ?(ЗначениеЗаполнено(ТекстыЗапросов), "",
		ЗначениеВременнойТаблицы));

	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ОписаниеЗапроса.Текст = ТекстЗапроса;

	Возврат ОписаниеЗапроса;

КонецФункции

// Формирует запрос данных сообщений для подписания.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Неопределено, Запрос - Запрос данных сообщений для подписания
Функция ЗапросДанныхСообщенийДляПодписания(ПараметрыВыполнения, КонтекстДиагностики)

	ОписанияЗапросов = Новый Массив;

	ОбъектыДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.Сообщения, ПараметрыВыполнения.ОбъектыДействий.Сообщения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.ОбъектыУчета, ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.ЭлектронныеДокументы, ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы);

	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		ДокументыПакетов = ДокументыПакетовДляПодписания(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов,
			КонтекстДиагностики);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДействий.ЭлектронныеДокументы, ДокументыПакетов, Истина);
	КонецЕсли;

	Если ОтсутствуютОбъектыДействий(ОбъектыДействий) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОписанияЗапросов.Добавить(ЗапросСообщенийДляПодписания("СообщенияДляОбработки", ОбъектыДействий));

	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Отпечатки = "&ОтпечаткиСертификатов";
	Отбор.ДоступныеТекущемуПользователю = Истина;
	Если Не ПараметрыВыполнения.ОтпечаткиСертификатов.Облако.Доступность Тогда
		Отбор.Облачные = Ложь;
	КонецЕсли;
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("ДоступныеСертификаты", Отбор));
	
	Отбор = СинхронизацияЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "ВЫБРАТЬ РАЗЛИЧНЫЕ ИдентификаторОрганизации ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(СинхронизацияЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", Отбор));
	
	Отбор = КриптографияБЭД.НовыйОтборПодписываемыхВидовДокументов();
	Отбор.Сертификаты = "ВЫБРАТЬ Ссылка ИЗ ДоступныеСертификаты";
	Отбор.ВидыДокументов = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидСообщения ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросПодписываемыхВидовДокументов("ПодписываемыеВидыДокументов", Отбор));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступныеСертификаты.Ссылка КАК Сертификат,
		|	ДоступныеСертификаты.Отпечаток КАК Отпечаток,
		|	ДоступныеСертификаты.Программа КАК Программа,
		|	ДоступныеСертификаты.Организация КАК Организация,
		|	ПодписываемыеВидыДокументов.ВидДокумента КАК ВидДокумента,
		|	ПодписываемыеВидыДокументов.Использовать КАК Использовать,
		|	ЕСТЬNULL(СертификатыУчетныхЗаписей.ИдентификаторЭДО, """") КАК ИдентификаторОрганизации,
		|	ЕСТЬNULL(СертификатыУчетныхЗаписей.Доверенность,
		|		ЗНАЧЕНИЕ(Справочник.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка)) КАК Доверенность
		|ИЗ
		|	ДоступныеСертификаты КАК ДоступныеСертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодписываемыеВидыДокументов КАК ПодписываемыеВидыДокументов
		|		ПО ДоступныеСертификаты.Ссылка = ПодписываемыеВидыДокументов.Сертификат
		|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
		|		ПО ДоступныеСертификаты.Ссылка = СертификатыУчетныхЗаписей.Сертификат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияДляОбработки.Ссылка КАК Ссылка,
		|	СообщенияДляОбработки.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщенияДляОбработки.Направление КАК Направление,
		|	СообщенияДляОбработки.Дата КАК Дата,
		|	СообщенияДляОбработки.ВидСообщения КАК ВидСообщения,
		|	СообщенияДляОбработки.Организация КАК Организация,
		|	СообщенияДляОбработки.Контрагент КАК Контрагент,
		|	СообщенияДляОбработки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СообщенияДляОбработки.ФорматОсновногоТитула КАК ФорматОсновногоТитула,
		|	&ОрганизацияИНН КАК ОрганизацияИНН,
		|	СообщенияДляОбработки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	СообщенияДляОбработки.ВидПодписи КАК ВидПодписи,
		|	СообщенияДляОбработки.ВидДокумента КАК ВидДокумента,
		|	СообщенияДляОбработки.НомерДокумента КАК НомерДокумента,
		|	СообщенияДляОбработки.ДатаДокумента КАК ДатаДокумента,
		|	СообщенияДляОбработки.ОсновнойФайл КАК ПрисоединенныйФайл,
		|	ОбъектыДляПодписания.Организация КАК ОрганизацияДляПодписания,
		|	ОбъектыДляПодписания.Подписант КАК Подписант,
		|	ОбъектыДляПодписания.Сертификат КАК Сертификат,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	&ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	&ОрганизацияДляПодписанияИНН КАК ОрганизацияДляПодписанияИНН
		|ИЗ
		|	СообщенияДляОбработки КАК СообщенияДляОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК ОбъектыДляПодписания
		|		ПО СообщенияДляОбработки.Ссылка = ОбъектыДляПодписания.Объект
		|		И ОбъектыДляПодписания.Текущий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщенияДляОбработки.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщенияДляОбработки.ВидСообщения = ВидыДокументовЭДО.Ссылка";
	
	ИмяРеквизитаИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ТекстПоляОрганизацииИНН = СтрШаблон("СообщенияДляОбработки.Организация.%1", ИмяРеквизитаИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОрганизацияИНН", ТекстПоляОрганизацииИНН);
	ТекстПоляОрганизацииИНН = СтрШаблон("ОбъектыДляПодписания.Организация.%1", ИмяРеквизитаИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОрганизацияДляПодписанияИНН", ТекстПоляОрганизацииИНН);
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	ВсеОтпечатки = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(ПараметрыВыполнения.ОтпечаткиСертификатов);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ВсеОтпечатки);
	
	ИспользуютсяВнутренниеДокументы = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
	Если Не ИспользуютсяВнутренниеДокументы Тогда
		Запрос.УстановитьПараметр("ЭтоОсновнойВидДокумента", Ложь);
		Возврат Запрос;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЭтоОсновнойВидДокумента",
		"НЕ НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента ЕСТЬ NULL");
	
	Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ПО СообщенияДляОбработки.Организация = НастройкиВнутреннегоЭДО.Организация
		|		И СообщенияДляОбработки.ВидДокумента = НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента
		|		И НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСообщенийДляПодписания(ИмяВременнойТаблицы, ОбъектыДействий)
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСостояниеСообщения", Перечисления.СостоянияСообщенийЭДО.Подписание);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ВидПодписиУсиленнаяКвалифицированная",
		Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыВспомогательныхЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыВспомогательныхЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ЗначениеВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСообщения", ОбъектыДействий.Сообщения);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ЗначениеВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
		
	ПоляВыбораИсходящийЭДО = 
		"	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула";
	
	ПоляВыбораВходящийЭДО = 
		"	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	&ВидПодписиУсиленнаяКвалифицированная КАК ВидПодписи,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораИсходящийЭДО", ПоляВыбораИсходящийЭДО);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораВходящийЭДО", ПоляВыбораВходящийЭДО);
	
	Если ЗначениеЗаполнено(ТекстыВспомогательныхЗапросов) Тогда
		ТекстыВспомогательныхЗапросов.Добавить(ТекстЗапроса);
		ОписаниеЗапроса.Текст = СтрСоединить(ТекстыВспомогательныхЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Иначе
		ОписаниеЗапроса.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ДокументыПакетовДляПодписания(ПакетыДокументов, КонтекстДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ПакетыДокументов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)
		|ИТОГИ
		|ПО
		|	ИдентификаторПакета";
	
	ДокументыПакета = Новый Массив;
	
	ВыборкаПоИдентификаторамПакета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИдентификаторамПакета.Следующий() Цикл
		
		НаборСостояний = Новый Массив;
		ВыборкаДокументов = ВыборкаПоИдентификаторамПакета.Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборСостояний.Добавить(ВыборкаДокументов.Состояние);
		КонецЦикла;
		
		СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний,
			ВыборкаПоИдентификаторамПакета.ИдентификаторПакета, Перечисления.ДействияПоЭДО.Подписать,
			КонтекстДиагностики);
		
		Если Не СостоянияОднородны Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДокументов.Сбросить();
		Пока ВыборкаДокументов.Следующий() Цикл
			ДокументыПакета.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыПакета;
	
КонецФункции

Функция РезультатыЗапросаДанныхСообщенийДляПодписания(Запрос)
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = МассивРезультатов.Количество();
	РезультатыЗапроса = Новый Структура;
	РезультатыЗапроса.Вставить("Сертификаты", МассивРезультатов[КоличествоРезультатов - 2]);
	РезультатыЗапроса.Вставить("ДанныеСообщений", МассивРезультатов[КоличествоРезультатов - 1]);
	Возврат РезультатыЗапроса;
КонецФункции

Функция НовыйРезультатОбработкиДанныхДляПодписания()
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", НовоеОписаниеОшибокОбработкиДанныхПриПодписании());
	Результат.Вставить("ДанныеДляПростойПодписи", Новый Массив);
	Результат.Вставить("ДанныеДляИнтерактивногоПодписания", Новый Массив);
	Результат.Вставить("ДанныеДляПодписанияНаСервере", Новый Массив);
	Возврат Результат;
КонецФункции

// Обрабатывает результаты запроса данных МЧД для последующего подписания.
// 
// Параметры:
// 	ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатыЗапроса - Структура:
//  * Сертификаты - РезультатЗапроса
//  * ДанныеСообщений - РезультатЗапроса
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение: См. НовыйРезультатОбработкиДанныхДляПодписания
// 
Функция ОбработатьРезультатыЗапросаДанныхМЧДДляПодписания(ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики)

	Результат = НовыйРезультатОбработкиДанныхДляПодписания();

	Ошибки = Результат.Ошибки;

	СертификатыДляПодписания = РезультатыЗапроса.Сертификаты.Выгрузить();
	ОтсутствуютСертификаты = Не ЗначениеЗаполнено(СертификатыДляПодписания);
	ОтпечаткиНаСервере = ПараметрыВыполнения.ОтпечаткиСертификатов.Сервер.Отпечатки;
	ЕстьОшибкаПолученияОтпечатков = Ложь;
	Если ОтсутствуютСертификаты Тогда
		ЕстьОшибкаПолученияОтпечатков = КриптографияБЭД.ЕстьОшибкаПолученияОтпечатков(
			ПараметрыВыполнения.ОтпечаткиСертификатов);
	КонецЕсли;

	НаборыПараметровСообщенийПоСертификатам = Новый Соответствие;
	ЕстьСообщенияБезДоступныхСертификатов = Ложь;

	ТекущиеПодписанты = Новый Массив(3);
	ТекущиеПодписанты[0] = Пользователи.АвторизованныйПользователь();
	ТекущиеПодписанты[1] = Пользователи.СсылкаНеуказанногоПользователя();
	ТекущиеПодписанты[2] = ИнтеграцияБСПБЭД.ПустаяСсылкаНаПользователя();

	ОбработанныеСообщения = Новый Соответствие;
	ДвоичныеДанныеФайлов = Новый Соответствие;

	Выборка = РезультатыЗапроса.ДанныеСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл

		СообщениеОбработано = ОбработанныеСообщения[Выборка.Ссылка];
		Если СообщениеОбработано = Истина Тогда
			Продолжить;
		КонецЕсли;

		Если СообщениеОбработано = Неопределено Тогда
			ОбработанныеСообщения.Вставить(Выборка.Ссылка, Истина);
		КонецЕсли;

		Если ОтсутствуютСертификаты Тогда
			Если ЕстьОшибкаПолученияОтпечатков Тогда
				Ошибки.ЕстьОшибкаКриптографииПоСообщениямДляПодписания = Истина;
			Иначе
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбораСертификатаДляПодписанияМЧД = МашиночитаемыеДоверенности.ПараметрыОтбораСертификатаДляПодписанияМЧД(
			Выборка.ИННОрганизации, Выборка.ОГРНОрганизации, Выборка.СНИЛСДоверителя, Выборка.ИдентификаторОрганизации);
		
		НаборСертификатов = СоздатьНаборСертификатовДляПодписанияМЧД(
			Выборка.Организация,
			ПараметрыОтбораСертификатаДляПодписанияМЧД,
			СертификатыДляПодписания,
			ОтпечаткиНаСервере,
			Ошибки);
		
		Если Не ЗначениеЗаполнено(НаборСертификатов.ДанныеСертификатов) Тогда
			ЕстьСообщенияБезДоступныхСертификатов = Истина;
			Если Не НаборСертификатов.ЕстьОшибки Тогда
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		НаборПараметровСообщений = НаборыПараметровСообщенийПоСертификатам[НаборСертификатов];
		Если НаборПараметровСообщений = Неопределено Тогда
			НаборПараметровСообщений = Новый Массив;
			НаборыПараметровСообщенийПоСертификатам.Вставить(НаборСертификатов, НаборПараметровСообщений);
		КонецЕсли;
		ПараметрыПодписанияСообщения = ПараметрыПодписанияМЧД(Выборка);

		НаборПараметровСообщений.Добавить(ПараметрыПодписанияСообщения);

		ДвоичныеДанные = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьДвоичныеДанныеМЧД(Выборка.Ссылка);
		ДвоичныеДанныеФайлов.Вставить(Выборка.Ссылка, ДвоичныеДанные);

	КонецЦикла;

	Если Не ЗначениеЗаполнено(НаборыПараметровСообщенийПоСертификатам) И ЕстьСообщенияБезДоступныхСертификатов Тогда
		Ошибки.ОтсутствуютДоступныеСертификаты = Истина;
	КонецЕсли;

	Для Каждого ПараметрыСообщенийПоСертификатам Из НаборыПараметровСообщенийПоСертификатам Цикл

		Если НаборСертификатов.ИспользоватьНаСервере Тогда

			ОписаниеНабораДанных = ОписаниеНабораДанныхДляПодписанияНаСервере(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов, Ошибки);
			Результат.ДанныеДляПодписанияНаСервере.Добавить(ОписаниеНабораДанных);

		Иначе

			ОписаниеНабораДанных = ОписаниеНабораДанныхДляИнтерактивногоПодписанияМЧД(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов);
			Результат.ДанныеДляИнтерактивногоПодписания.Добавить(ОписаниеНабораДанных);

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Извлекает сохраненные пароли для массива сертификатов и устанавливает их для каждого сертификата.
// 
// Параметры:
//  НаборСертификатов - Структура - Набор сертификатов:
// * ИспользоватьНаСервере - Булево - Обработка подписания будет происходить на сервере без запроса пользователя
// * ЕстьОшибки - Булево 
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка - Пароль
// 
Процедура УстановитьПаролиСертификатов(НаборСертификатов)

	ДанныеСертификатов = НаборСертификатов.ДанныеСертификатов;

	Сертификаты = Новый Массив;
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл 
		Сертификаты.Добавить(ДанныеСертификата.Ссылка);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	НаборСертификатов.ПаролиСертификатов = ПаролиСертификатов;
	
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
		Сертификат = ДанныеСертификата.Ссылка;
		Пароль = ПаролиСертификатов[Сертификат];
		Если Пароль <> Неопределено Тогда
			ДанныеСертификата.Пароль = Пароль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверят возможность подписания набором сертификатов на сервере без необходимости выбора сертификата пользователем,
// серверное подписание доступно только если пользователю доступен единственный сертификат, 
// который установлен на сервере и пароль для сертификата сохранен
// 
// Параметры:
//  НаборСертификатов - Структура - Набор сертификатов:
// * ИспользоватьНаСервере - Булево - Обработка подписания будет происходить на сервере без запроса пользователя
// * ЕстьОшибки - Булево 
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка - Пароль
//  ОтпечаткиНаСервере - См. КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере
//
Функция ИспользоватьНаборСертификатовНаСервере(НаборСертификатов, ОтпечаткиНаСервере)
	
	ДанныеСертификатов = НаборСертификатов.ДанныеСертификатов;
	
	Если ДанныеСертификатов.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ДанныеСертификатов[0].Пароль)
			И ЗначениеЗаполнено(ОтпечаткиНаСервере) 
			И ОтпечаткиНаСервере.Найти(ДанныеСертификатов[0].Отпечаток) <> Неопределено Тогда
				Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает результаты запроса данных сообщений для подписания.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатыЗапроса - см. РезультатыЗапросаДанныхСообщенийДляПодписания
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиДанныхДляПодписания
//  
Функция ОбработатьРезультатыЗапросаДанныхСообщенийДляПодписания(ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики)
	
	Результат = НовыйРезультатОбработкиДанныхДляПодписания();
	
	Ошибки = Результат.Ошибки;
	ДанныеДляПростойПодписи = Результат.ДанныеДляПростойПодписи;
	
	СертификатыДляПодписания = РезультатыЗапроса.Сертификаты.Выгрузить();
	
	ОтсутствуютСертификаты = Не ЗначениеЗаполнено(СертификатыДляПодписания);
	ОтпечаткиНаСервере = ПараметрыВыполнения.ОтпечаткиСертификатов.Сервер.Отпечатки;
	ЕстьОшибкаПолученияОтпечатков = Ложь;
	Если ОтсутствуютСертификаты Тогда
		ЕстьОшибкаПолученияОтпечатков = КриптографияБЭД.ЕстьОшибкаПолученияОтпечатков(
			ПараметрыВыполнения.ОтпечаткиСертификатов);
	КонецЕсли;
	
	НаборыСертификатов = Новый Соответствие;
	НаборыПараметровСообщенийПоСертификатам = Новый Соответствие;
	КэшПоискаНаборовСертификатов = Новый Соответствие;
	ЕстьСообщенияБезДоступныхСертификатов = Ложь;
	ПрисоединенныеФайлыСообщений = Новый Массив;
	
	ТекущиеПодписанты = Новый Массив(3);
	ТекущиеПодписанты[0] = Пользователи.АвторизованныйПользователь();
	ТекущиеПодписанты[1] = Пользователи.СсылкаНеуказанногоПользователя();
	ТекущиеПодписанты[2] = ИнтеграцияБСПБЭД.ПустаяСсылкаНаПользователя();
	
	ОбработанныеСообщения = Новый Соответствие;
	ТребуетсяПроверкаОбработанныхСообщений = Ложь;
	
	Выборка = РезультатыЗапроса.ДанныеСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СообщениеОбработано = ОбработанныеСообщения[Выборка.Ссылка];
		Если СообщениеОбработано = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СообщениеДоступноПользователю = ТекущиеПодписанты.Найти(Выборка.Подписант) <> Неопределено;
		
		Если СообщениеОбработано = Неопределено
			ИЛИ СообщениеДоступноПользователю Тогда
			ОбработанныеСообщения.Вставить(Выборка.Ссылка, СообщениеДоступноПользователю);
		КонецЕсли;
		
		Если Не СообщениеДоступноПользователю Тогда
			ТребуетсяПроверкаОбработанныхСообщений = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ДанныеСообщения = ДанныеСообщенияДляПростойПодписи(Выборка);
			ДанныеДляПростойПодписи.Добавить(ДанныеСообщения);
			Продолжить;
		КонецЕсли;
		
		Если ОтсутствуютСертификаты Тогда
			Если ЕстьОшибкаПолученияОтпечатков Тогда
				Ошибки.ЕстьОшибкаКриптографииПоСообщениямДляПодписания = Истина;
			Иначе
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НаборСертификатов = НайтиСоздатьНаборСертификатовДляПодписания(Выборка, НаборыСертификатов,
			СертификатыДляПодписания, ОтпечаткиНаСервере, КэшПоискаНаборовСертификатов, Ошибки);
		
		Если Не ЗначениеЗаполнено(НаборСертификатов.ДанныеСертификатов) Тогда
			ЕстьСообщенияБезДоступныхСертификатов = Истина;
			Если Не НаборСертификатов.ЕстьОшибки Тогда
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если (Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Входящий)
			ИЛИ (Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий) Тогда
			
			ЭлектронныйДокумент = ЭлектронныйДокументСообщенияЭДО(Выборка.Ссылка);
			ПодписиСОшибкамиМЧД = МашиночитаемыеДоверенности.ПодписиСОшибкамиМЧД(
				ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент));
			
			Если ПодписиСОшибкамиМЧД.Количество() > 0 Тогда
				
				ДобавитьОшибкуПодписиМЧД(ЭлектронныйДокумент,
					ПодписиСОшибкамиМЧД, Перечисления.ДействияПоЭДО.Подписать, КонтекстДиагностики);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			
			КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
			КлючНастройкиОтправки.ВидДокумента = Выборка.ВидДокумента;
			КлючНастройкиОтправки.Отправитель = Выборка.Организация;
			КлючНастройкиОтправки.Получатель = Выборка.Контрагент;
			КлючНастройкиОтправки.Договор = Выборка.ДоговорКонтрагента;
			
			РезультатПроверки = НастройкиОтправкиЭДО.ПроверитьПоддержкуФорматаОператорами(КлючНастройкиОтправки, Выборка.ФорматОсновногоТитула);
			
			Если РезультатПроверки <> Неопределено Тогда
				Если Не РезультатПроверки.ФорматПоддержанОператоромОтправителя 
					Или Не РезультатПроверки.ФорматПоддержанОператоромПолучателя Тогда
					    НоваяСтрока = Ошибки.СообщенияВФорматеНеПоддержанномОператором.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверки);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "НомерДокумента, ДатаДокумента, ВидДокумента, ТипДокумента");
						НоваяСтрока.Сообщение = Выборка.Ссылка;
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НаборПараметровСообщений = НаборыПараметровСообщенийПоСертификатам[НаборСертификатов];
		Если НаборПараметровСообщений = Неопределено Тогда
			НаборПараметровСообщений = Новый Массив;
			НаборыПараметровСообщенийПоСертификатам.Вставить(НаборСертификатов, НаборПараметровСообщений);
		КонецЕсли;
		
		ПараметрыПодписанияСообщения = ПараметрыПодписанияСообщения(Выборка);
		
		НаборПараметровСообщений.Добавить(ПараметрыПодписанияСообщения);
		
		ПрисоединенныеФайлыСообщений.Добавить(Выборка.ПрисоединенныйФайл);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НаборыПараметровСообщенийПоСертификатам)
		И ЕстьСообщенияБезДоступныхСертификатов Тогда
		Ошибки.ОтсутствуютДоступныеСертификаты = Истина;
	КонецЕсли;
	
	Если ТребуетсяПроверкаОбработанныхСообщений Тогда
		Для Каждого ЭлементКоллекции Из ОбработанныеСообщения Цикл
			Если ЭлементКоллекции.Значение Тогда
				Продолжить;
			КонецЕсли;
			Ошибки.НедоступныеСообщения.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	
	Для Каждого ПараметрыСообщенийПоСертификатам Из НаборыПараметровСообщенийПоСертификатам Цикл
		
		Если НаборСертификатов.ИспользоватьНаСервере Тогда
			
			ОписаниеНабораДанных = ОписаниеНабораДанныхДляПодписанияНаСервере(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов, Ошибки);
			Результат.ДанныеДляПодписанияНаСервере.Добавить(ОписаниеНабораДанных);
			
		Иначе
			
			ОписаниеНабораДанных = ОписаниеНабораДанныхДляИнтерактивногоПодписания(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов);
			Результат.ДанныеДляИнтерактивногоПодписания.Добавить(ОписаниеНабораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует набор для подписания МЧД
// 
// Параметры:
//  Организация - ОпределяемыйТип.УчастникЭДО
//  ПараметрыОтбораСертификата - см. МашиночитаемыеДоверенности.ПараметрыОтбораСертификатаДляПодписанияМЧД
//  СертификатыДляПодписания - ТаблицаЗначений
//  ОтпечаткиНаСервере - См. КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере
//  Ошибки - см. НовоеОписаниеОшибокОбработкиДанныхПриПодписании 
// 
// Возвращаемое значение:
//  Структура:
// * ИспользоватьНаСервере - Булево
// * ЕстьОшибки - Булево
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка
//
Функция СоздатьНаборСертификатовДляПодписанияМЧД(Организация,
	ПараметрыОтбораСертификата, СертификатыДляПодписания, ОтпечаткиНаСервере, Ошибки)

	НовыйНаборСертификатов = Новый Структура;
	НовыйНаборСертификатов.Вставить("ИспользоватьНаСервере", Ложь);
	НовыйНаборСертификатов.Вставить("ЕстьОшибки", Ложь);
	НовыйНаборСертификатов.Вставить("ДанныеСертификатов", Новый Массив);
	НовыйНаборСертификатов.Вставить("ПаролиСертификатов", Новый Соответствие);

	ДанныеСертификатов = НовыйНаборСертификатов.ДанныеСертификатов;

	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторОрганизации", ПараметрыОтбораСертификата.ИдентификаторОрганизации);
	НайденныеСтроки = СертификатыДляПодписания.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл

		Если НЕ ПустаяСтрока(СтрокаТаблицы.ИдентификаторОрганизации) ИЛИ СтрокаТаблицы.Организация = Организация Тогда
			
			Если МашиночитаемыеДоверенности.ЭтоСертификатДоверителя(
				ПараметрыОтбораСертификата.ИННОрганизации,
				ПараметрыОтбораСертификата.ОГРНОрганизации,
				ПараметрыОтбораСертификата.СНИЛСДоверителя,
				СтрокаТаблицы.Сертификат) Тогда
				
				ДанныеСертификата = Новый Структура;
				ДанныеСертификата.Вставить("Ссылка", СтрокаТаблицы.Сертификат);
				ДанныеСертификата.Вставить("Отпечаток", СтрокаТаблицы.Отпечаток);
				ДанныеСертификата.Вставить("Программа", СтрокаТаблицы.Программа);
				ДанныеСертификата.Вставить("Пароль", "");
				ДанныеСертификата.Вставить("Организация", СтрокаТаблицы.Организация);
				ДанныеСертификатов.Добавить(ДанныеСертификата);
				
			КонецЕсли;
				
		КонецЕсли;

	КонецЦикла;

	Если Не ЗначениеЗаполнено(ДанныеСертификатов) Тогда
		НовыйНаборСертификатов.ЕстьОшибки = Истина;
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	Если ДанныеСертификатов.Количество() > 0 Тогда
		
		УстановитьПаролиСертификатов(НовыйНаборСертификатов);
		
		НовыйНаборСертификатов.ИспользоватьНаСервере = 
			ИспользоватьНаборСертификатовНаСервере(НовыйНаборСертификатов, ОтпечаткиНаСервере);
		
	КонецЕсли;
	
	Возврат НовыйНаборСертификатов;

КонецФункции

// Найти создать набор сертификатов для подписания.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
//  НаборыСертификатов - Структура:
//    * ИспользоватьНаСервере - Булево
//    * ЕстьОшибки - Булево
//    * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
//    * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка
//  СертификатыДляПодписания - ТаблицаЗначений
//  ОтпечаткиНаСервере - См. КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере
//  КэшПоиска - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Структура:
//      ** ИспользоватьНаСервере - Булево
//      ** ЕстьОшибки - Булево
//      ** ДанныеСертификатов - Массив из Структура:
//       *** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка
//       *** Программа - Строка
//       *** Пароль - Строка
//       *** Организация - ОпределяемыйТип.УчастникЭДО
//      ** ПаролиСертификатов - Соответствие из КлючИЗначение:
//       *** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Значение - Строка
//  Ошибки - См. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
//
// Возвращаемое значение:
//  Структура:
//   * ИспользоватьНаСервере - Булево
//   * ЕстьОшибки - Булево
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
//   * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//
Функция НайтиСоздатьНаборСертификатовДляПодписания(Выборка, НаборыСертификатов, СертификатыДляПодписания,
	ОтпечаткиНаСервере, КэшПоиска, Ошибки)
	
	НаборСертификатов = НаборСертификатовВКэше(КэшПоиска, Выборка);
	Если НаборСертификатов <> Неопределено Тогда
		Возврат НаборСертификатов;
	КонецЕсли;
	
	НовыйНаборСертификатов = Новый Структура;
	НовыйНаборСертификатов.Вставить("ИспользоватьНаСервере", Ложь);
	НовыйНаборСертификатов.Вставить("ЕстьОшибки", Ложь);
	НовыйНаборСертификатов.Вставить("ДанныеСертификатов", Новый Массив);
	НовыйНаборСертификатов.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	ДанныеСертификатов = НовыйНаборСертификатов.ДанныеСертификатов;
	
	ПостроительДляОтбора = Новый ПостроительЗапроса;
	ИсточникДанныхПостроителя = Новый ОписаниеИсточникаДанных(СертификатыДляПодписания);
	ПостроительДляОтбора.ИсточникДанных = ИсточникДанныхПостроителя;  
	Отбор = ПостроительДляОтбора.Отбор;
	
	ОтборВидДокумента = Отбор.Добавить("ВидДокумента");
	ОтборВидДокумента.ВидСравнения = ВидСравнения.Равно;
	ОтборВидДокумента.Использование = Истина;
	ОтборВидДокумента.Значение = Выборка.ВидСообщения; 
	
	Если Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани
		Или Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда

		ОрганизацииПустаяСсылка = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации");
		
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(ОрганизацииПустаяСсылка);
		
		Если Не ЗначениеЗаполнено(Выборка.ОрганизацияДляПодписания) 
			И Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				СписокОрганизаций.Добавить(Выборка.Организация);
		Иначе
			СписокОрганизаций.Добавить(Выборка.ОрганизацияДляПодписания);
		КонецЕсли;
		
		ОтборОрганизация = Отбор.Добавить("Организация");
		ОтборОрганизация.ВидСравнения = ВидСравнения.ВСписке;
		ОтборОрганизация.Использование = Истина;
		ОтборОрганизация.Значение = СписокОрганизаций;
	Иначе
		ОтборИдентификаторОрганизации = Отбор.Добавить("ИдентификаторОрганизации");
		ОтборИдентификаторОрганизации.ВидСравнения = ВидСравнения.Равно;
		ОтборИдентификаторОрганизации.Использование = Истина;
		ОтборИдентификаторОрганизации.Значение = Выборка.ИдентификаторОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
		ОтборСертификат = Отбор.Добавить("Сертификат");
		ОтборСертификат.ВидСравнения = ВидСравнения.Равно;
		ОтборСертификат.Использование = Истина;
		ОтборСертификат.Значение = Выборка.Сертификат;
	КонецЕсли;  
	
	ПостроительДляОтбора.Выполнить();
	ОтобранныеСертификаты = ПостроительДляОтбора.Результат.Выгрузить();
	
	НайденныеСтроки = ОтобранныеСертификаты;
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	КлючНабораСертификатов = "";
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если Не СтрокаТаблицы.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани
			Или Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда 
			
			СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(СтрокаТаблицы.Сертификат);
			СвойстваИздателя = КриптографияБЭД.СвойстваИздателяСертификатаПоСсылке(СтрокаТаблицы.Сертификат);
			
			ЭтоСертификатФизическогоЛица = 
				МашиночитаемыеДоверенности.ЭтоСертификатФизическогоЛица(СвойстваСубъекта, СвойстваИздателя);
				
			ОрганизацияДляСравнения = Выборка.ОрганизацияДляПодписания;	
			Если Не ЗначениеЗаполнено(ОрганизацияДляСравнения) 
				И Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				ОрганизацияДляСравнения = Выборка.Организация;
			КонецЕсли;
			
			Если Не ЭтоСертификатФизическогоЛица
				И СтрокаТаблицы.Организация <> ОрганизацияДляСравнения Тогда 
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
			
		КлючНабораСертификатов = КлючНабораСертификатов + Строка(СтрокаТаблицы.Сертификат.УникальныйИдентификатор());
		
		ОрганизацияСертификата = Выборка.ОрганизацияДляПодписания;
		Если Не ЗначениеЗаполнено(Выборка.ОрганизацияДляПодписания) 
			И Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				ОрганизацияСертификата = Выборка.Организация;		
		КонецЕсли;
		
		ДанныеСертификата = Новый Структура;
		ДанныеСертификата.Вставить("Ссылка", СтрокаТаблицы.Сертификат);
		ДанныеСертификата.Вставить("Отпечаток", СтрокаТаблицы.Отпечаток);
		ДанныеСертификата.Вставить("Программа", СтрокаТаблицы.Программа);
		ДанныеСертификата.Вставить("Пароль", "");
		ДанныеСертификата.Вставить("ОрганизацияСертификата", ОрганизацияСертификата);
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификатов) Тогда
		НовыйНаборСертификатов.ЕстьОшибки = Истина;
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			НоваяСтрока = Ошибки.ЗапрещенныеВидыСообщений.Добавить();
			НоваяСтрока.Сертификат = СтрокаТаблицы.Сертификат;
			НоваяСтрока.ВидСообщения = СтрокаТаблицы.ВидДокумента;
		КонецЦикла;
		
		ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	НаборСертификатов = НаборыСертификатов[КлючНабораСертификатов];
	Если НаборСертификатов <> Неопределено Тогда
		Возврат НаборСертификатов;
	КонецЕсли;
	
	Если ДанныеСертификатов.Количество() > 0 Тогда
		
		УстановитьПаролиСертификатов(НовыйНаборСертификатов);
		
		НовыйНаборСертификатов.ИспользоватьНаСервере = 
			ИспользоватьНаборСертификатовНаСервере(НовыйНаборСертификатов, ОтпечаткиНаСервере);
		
	КонецЕсли;
	
	НаборыСертификатов.Вставить(КлючНабораСертификатов, НовыйНаборСертификатов);
	ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
	
	Возврат НовыйНаборСертификатов;
	
КонецФункции

Функция НаборСертификатовВКэше(КэшПоиска, Выборка)
	Возврат КэшПоиска[КлючПоискаНабораСертификатовВКэше(Выборка)];
КонецФункции

Процедура ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НаборСертификатов)
	КэшПоиска.Вставить(КлючПоискаНабораСертификатовВКэше(Выборка), НаборСертификатов);
КонецПроцедуры

Функция КлючПоискаНабораСертификатовВКэше(Выборка)
	Возврат Выборка.ИдентификаторОрганизации + Выборка.ВидСообщения.УникальныйИдентификатор();
КонецФункции

Функция ДанныеСообщенияДляПростойПодписи(Выборка)
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Ссылка", Выборка.Ссылка);
	ДанныеСообщения.Вставить("Организация", Выборка.Организация);
	Возврат ДанныеСообщения;
КонецФункции

// Возвращает параметры подписания МЧД.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  Структура:
// * Ссылка - ДокументСсылка.СообщениеЭДО
// * ПодписанЭП - Булево
// * Представление - Строка
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ПолноеИмяФайла - Строка
Функция ПараметрыПодписанияМЧД(Выборка)
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Выборка.Ссылка);
	Параметры.Вставить("ПодписанЭП", Ложь);
	Параметры.Вставить("Представление", "" + Выборка.Ссылка);
	Параметры.Вставить("ПрисоединенныйФайл", Выборка.Ссылка);
	ИмяФайла = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Выборка.Ссылка);
	Параметры.Вставить("ПолноеИмяФайла", ИмяФайла);
	Параметры.Вставить("Организация", Выборка.Организация);
	Возврат Параметры;
КонецФункции

Функция ПараметрыПодписанияСообщения(Выборка)
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Выборка.Ссылка);
	Параметры.Вставить("Представление",
		?(РегламентыЭДО.ЭтоСлужебноеСообщение(Выборка.ТипЭлементаРегламента),
		ПредставлениеСообщенияПоСвойствам(Выборка), ПредставлениеДокументаПоСвойствам(Выборка)));
	Параметры.Вставить("ПрисоединенныйФайл", Выборка.ПрисоединенныйФайл);
	Параметры.Вставить("ПолноеИмяФайла", Выборка.ПолноеИмяФайла);
	Параметры.Вставить("ПодписанЭП", Выборка.ПодписанЭП);
	Параметры.Вставить("Организация", Выборка.Организация);
	Параметры.Вставить("ОрганизацияИНН", Выборка.ОрганизацияИНН);
	Параметры.Вставить("ОрганизацияДляПодписанияИНН", Выборка.ОрганизацияДляПодписанияИНН);
	Параметры.Вставить("ЭтоИнтеркампани", Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани);
	Возврат Параметры;
КонецФункции

// Возвращает данные сообщения для интерактивного подписания.
// 
// Параметры:
//  ПараметрыПодписания - Произвольный - Описание
//  ДвоичныеДанные - Неопределено - Описание
//
// Возвращаемое значение:
//  Структура:
//  * Данные - ДвоичныеДанные
//  * Представление - Структура:
//  ** Значение - ДокументСсылка.СообщениеЭДО
//  ** Представление - Строка
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ТребуетсяЗаполнитьПодписанта - Булево
//  * ДанныеИзменены - Булево
//  * АдресДанныхДляОбновления - Строка
//  * Организация - ОпределяемыйТип.Организация
//  * ВыбраннаяМЧД                    - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                                    - Неопределено
//  * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - Соответствие из КлючИЗначение:
//      *** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      *** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий
//  * ТребуетсяДоверенность           - Булево
//  * ИсходныеДвоичныеДанные          - Неопределено
//  								  - ДвоичныеДанные
//  * Доверенности - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//
Функция ДанныеСообщенияДляИнтерактивногоПодписания(ПараметрыПодписания, ДвоичныеДанные)
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Представление", Новый Структура);
	ДанныеСообщения.Представление.Вставить("Значение", ПараметрыПодписания.Ссылка);
	ДанныеСообщения.Представление.Вставить("Представление", ПараметрыПодписания.Представление);
	ДанныеСообщения.Вставить("ПрисоединенныйФайл", ПараметрыПодписания.ПрисоединенныйФайл);
	ДанныеСообщения.Вставить("ТребуетсяЗаполнитьПодписанта", Ложь);
	ДанныеСообщения.Вставить("ДанныеИзменены", Ложь);
	ДанныеСообщения.Вставить("АдресДанныхДляОбновления", "");
	ДанныеСообщения.Вставить("Организация", ПараметрыПодписания.Организация);  
	ДанныеСообщения.Вставить("ТребуетсяМЧД", Ложь);
	ДанныеСообщения.Вставить("ВыбраннаяМЧД", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	ДанныеСообщения.Вставить("ОшибкиПроверкиПолномочий", Новый Соответствие);
	ДанныеСообщения.Вставить("ИсходныеДвоичныеДанные", ДвоичныеДанные);
	ДанныеСообщения.Вставить("Доверенности", Новый Соответствие());
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Возвращает данные сообщения для подписания на сервере.
// 
// Параметры:
//  ПараметрыПодписания - См. ПараметрыПодписанияМЧД
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  Структура:
// * Данные - ДвоичныеДанные
// * ИмяФайла - Строка
// * Ссылка - ДокументСсылка.СообщениеЭДО
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ОбновитьДанные - Булево
// * ТребуетсяМЧД - Булево
// * ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * Доверенности - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//
Функция ДанныеСообщенияДляПодписанияНаСервере(ПараметрыПодписания, ОписаниеФайла)
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Данные", ОписаниеФайла.ДвоичныеДанные);
	ДанныеСообщения.Вставить("Ссылка", ПараметрыПодписания.Ссылка);
	ДанныеСообщения.Вставить("ПрисоединенныйФайл", ПараметрыПодписания.ПрисоединенныйФайл);
	ДанныеСообщения.Вставить("ОбновитьДанные", Ложь);
	ДанныеСообщения.Вставить("ТребуетсяМЧД", Ложь);
	ДанныеСообщения.Вставить("ВыбраннаяМЧД", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	ДанныеСообщения.Вставить("Доверенности", Новый Соответствие());
	Возврат ДанныеСообщения;
КонецФункции

// Формирует Описание набора данных для подписания на сервере.
// 
// Параметры:
//  ПараметрыСообщенийПоСертификатам - КлючИЗначение - Параметры сообщений по сертификатам
//  ДвоичныеДанныеФайлов - см. РаботаСФайламиБЭД.ДвоичныеДанныеФайлов
//  Ошибки - см. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
// 
// Возвращаемое значение:
//	См. КриптографияБЭД.НовоеОписаниеПодписываемыхДанных
// 
Функция ОписаниеНабораДанныхДляПодписанияНаСервере(ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов,
	Ошибки = Неопределено)
	
	ДанныеСертификата = ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов[0];
	НаборДанных = Новый Массив;
	
	Для Каждого ПараметрыСообщения Из ПараметрыСообщенийПоСертификатам.Значение Цикл
		
		ДанныеФайла = ДвоичныеДанныеФайлов[ПараметрыСообщения.ПрисоединенныйФайл];
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ДанныеФайла;
		ОписаниеФайла.ИмяФайла = ПараметрыСообщения.ПолноеИмяФайла;
		
		ОбновитьДанные = Ложь;
		ТребуетсяМЧД = Ложь;
		ВыбраннаяМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
		СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		
		ИННДоверителя = ?(ПараметрыСообщения.ЭтоИнтеркампани,
			ПараметрыСообщения.ОрганизацияДляПодписанияИНН, ПараметрыСообщения.ОрганизацияИНН);
		Сертификат = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(ДанныеСертификата.Отпечаток, Истина);
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
		СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
		ТребуетсяМЧД = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
			ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
			
		Если ТребуетсяМЧД Тогда
				
			ОтборМЧД = МашиночитаемыеДоверенности.НовыйОтборМЧД();
			ОтборМЧД.Доверитель = ПараметрыСообщения.Организация;
			ОтборМЧД.Сертификат = Сертификат;
			ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСообщения.ПрисоединенныйФайл, "ВладелецФайла.ЭлектронныйДокумент");
			Результат = МашиночитаемыеДоверенности.ПолучитьПоследнююВыданнуюДоверенностьОрганизации(
				ОтборМЧД, ЭлектронныйДокумент);
			ВыбраннаяМЧД = Результат.Доверенность;
			Если СодержаниеДокумента <> Неопределено И ЗначениеЗаполнено(ВыбраннаяМЧД)
				И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента) Тогда
				Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяМЧД);
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(
					ОписаниеФайла, ПараметрыСообщения.Организация, Доверенности, СодержаниеДокумента);
				ОбновитьДанные = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
		Если СодержаниеДокумента <> Неопределено
			И ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
			ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла,
				ПараметрыСообщения.Организация, ДанныеСертификата.Ссылка, СодержаниеДокумента);
			ОбновитьДанные = Истина;
		КонецЕсли;
		
		ДанныеСообщения = ДанныеСообщенияДляПодписанияНаСервере(ПараметрыСообщения, ОписаниеФайла);
		ДанныеСообщения.ОбновитьДанные = ОбновитьДанные;
		ДанныеСообщения.ТребуетсяМЧД = ТребуетсяМЧД;
		Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
			ДанныеСообщения.Доверенности.Вставить(ДанныеСертификата.Ссылка, ВыбраннаяМЧД);
		КонецЕсли;
		
		Если ДанныеСообщения.ТребуетсяМЧД И Не ЗначениеЗаполнено(ВыбраннаяМЧД)
			И Ошибки <> Неопределено Тогда
			Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере.Добавить(ДанныеСообщения.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорнойДокумент101.ЭтоФайлФормата(ПараметрыСообщения.ПолноеИмяФайла);

		Если ЭтоФайлПДФ_А_3 Тогда
			ДанныеСообщения.Данные = Обработки.ФорматДоговорнойДокумент101.ОбновитьВложениеВФайлеПДФ(
				ДанныеСообщения.ПрисоединенныйФайл, ДанныеСообщения.Данные);
		КонецЕсли;
		
		НаборДанных.Добавить(ДанныеСообщения);
		
	КонецЦикла;
	
	ОписаниеНабораДанных = КриптографияБЭД.НовоеОписаниеПодписываемыхДанных();
	ОписаниеНабораДанных.Сертификат 	= ДанныеСертификата.Ссылка;
	ОписаниеНабораДанных.Отпечаток 		= ДанныеСертификата.Отпечаток;
	ОписаниеНабораДанных.Программа 		= ДанныеСертификата.Программа;
	ОписаниеНабораДанных.Пароль 		= ДанныеСертификата.Пароль;
	ОписаниеНабораДанных.НаборДанных 	= НаборДанных;
	Возврат ОписаниеНабораДанных;
	
КонецФункции

// Возвращает данные для интерактивного подписания.
// 
// Параметры:
//  ПараметрыСообщенийПоСертификатам - КлючИЗначение:
//  * Ключ - См. НайтиСоздатьНаборСертификатовДляПодписания
//  * Значение - См. ПараметрыПодписанияСообщения
//  ДвоичныеДанныеФайлов - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
//  * Значение - ДвоичныеДанные
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. ДанныеСообщенияДляИнтерактивногоПодписания
//  * ТребуетсяЗаполнитьПодписантов - Булево
//  * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//  * СертификатыТребующиеДоверенность - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Булево
//
Функция ОписаниеНабораДанныхДляИнтерактивногоПодписанияМЧД(ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов)

	Сертификаты = Новый Массив;
	Для Каждого ДанныеСертификата Из ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов Цикл
		Сертификаты.Добавить(ДанныеСертификата.Ссылка);
	КонецЦикла;
	
	ПаролиСертификатов = ПараметрыСообщенийПоСертификатам.Ключ.ПаролиСертификатов;

	НаборДанных = Новый Массив;
	КоличествоСертификатов = Сертификаты.Количество();
	ТребуетсяЗаполнитьПодписантов = Ложь;

	Для Каждого ПараметрыСообщения Из ПараметрыСообщенийПоСертификатам.Значение Цикл

		ДанныеФайла = ДвоичныеДанныеФайлов[ПараметрыСообщения.ПрисоединенныйФайл];

		ДанныеСообщения = ДанныеСообщенияДляИнтерактивногоПодписания(ПараметрыСообщения, ДанныеФайла);
		
		Если КоличествоСертификатов = 1 Тогда

			ДанныеСообщения.ДанныеИзменены = Ложь;

		Иначе

			ДанныеСообщения.ТребуетсяЗаполнитьПодписанта = Истина;
			ТребуетсяЗаполнитьПодписантов = Истина;

		КонецЕсли;

		НаборДанных.Добавить(ДанныеСообщения);

	КонецЦикла;

	ОписаниеНабораДанных = Новый Структура;
	ОписаниеНабораДанных.Вставить("Сертификаты", Сертификаты);
	ОписаниеНабораДанных.Вставить("ПаролиСертификатов", ПаролиСертификатов);	
	ОписаниеНабораДанных.Вставить("НаборДанных", НаборДанных);
	ОписаниеНабораДанных.Вставить("ТребуетсяЗаполнитьПодписантов", ТребуетсяЗаполнитьПодписантов);
	ОписаниеНабораДанных.Вставить("СертификатыТребующиеДоверенность", Новый Соответствие);
	Возврат ОписаниеНабораДанных;

КонецФункции

// Возвращает данные для интерактивного подписания.
// 
// Параметры:
//  ПараметрыСообщенийПоСертификатам - КлючИЗначение:
//  * Ключ - См. НайтиСоздатьНаборСертификатовДляПодписания
//  * Значение - См. ПараметрыПодписанияСообщения
//  ДвоичныеДанныеФайлов - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
//  * Значение - ДвоичныеДанные
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. ДанныеСообщенияДляИнтерактивногоПодписания
//  * ТребуетсяЗаполнитьПодписантов - Булево
//  * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//  * СертификатыТребующиеДоверенность - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Булево
//
Функция ОписаниеНабораДанныхДляИнтерактивногоПодписания(ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов)
	
	Сертификаты = ОбщегоНазначения.ВыгрузитьКолонку(ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов, "Ссылка");
	ПаролиСертификатов = ПараметрыСообщенийПоСертификатам.Ключ.ПаролиСертификатов;
	СвойстваСубъектаСертификатов = КриптографияБЭД.СвойстваСубъектаСертификатовПоСсылке(Сертификаты);
	СвойстваИздателяСертификатов = КриптографияБЭД.СвойстваИздателяСертификатовПоСсылке(Сертификаты);
	
	НаборДанных = Новый Массив;
	КоличествоСертификатов = Сертификаты.Количество();
	ТребуетсяЗаполнитьПодписантов = Ложь;
	ДанныеИзменены = Ложь;
	ДвоичныеДанныеСообщения = Неопределено;
	СертификатыТребующиеДоверенность = Новый Соответствие;
	
	Для Каждого ПараметрыСообщения Из ПараметрыСообщенийПоСертификатам.Значение Цикл
		
		ДанныеФайла = ДвоичныеДанныеФайлов[ПараметрыСообщения.ПрисоединенныйФайл];
		ДвоичныеДанныеСообщения = ДанныеФайла;
		
		СодержаниеДокумента = Неопределено;
		
		РасширениеФайлаВПроизвольномРегистре = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
			ПараметрыСообщения.ПолноеИмяФайла).Расширение;
		РасширениеФайла = НРег(РасширениеФайлаВПроизвольномРегистре);
		
		ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорнойДокумент101.ЭтоФайлФормата(ПараметрыСообщения.ПолноеИмяФайла);
		
		СообщениеНеПодписаноИСоответствуетРасширениям = (ПараметрыСообщения.ПодписанЭП = Ложь
			И (РасширениеФайла = ".xml" ИЛИ ЭтоФайлПДФ_А_3 ));
		
		Если СообщениеНеПодписаноИСоответствуетРасширениям Тогда
			
			ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайла.ДвоичныеДанные = ДанныеФайла;
			ОписаниеФайла.ИмяФайла = ПараметрыСообщения.ПолноеИмяФайла;
			
			СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
			Если СодержаниеДокумента = Неопределено
				ИЛИ Не ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента)
				ИЛИ КоличествоСертификатов = 1 Тогда
				
				ДвоичныеДанныеСообщения = ДанныеФайла;
				
			Иначе
				ТребуетсяЗаполнитьПодписантов = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСообщения = ДанныеСообщенияДляИнтерактивногоПодписания(ПараметрыСообщения, ДвоичныеДанныеСообщения);
		ДанныеСообщения.ТребуетсяЗаполнитьПодписанта = ТребуетсяЗаполнитьПодписантов;
		ДанныеСообщения.ДанныеИзменены = ДанныеИзменены;
		
		СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
		
		Для Каждого ДанныеСертификата Из ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов Цикл
			
			СвойстваСубъектаСертификата = СвойстваСубъектаСертификатов[ДанныеСертификата.Ссылка];
			СвойстваИздателяСертификата = СвойстваИздателяСертификатов[ДанныеСертификата.Ссылка];
			ИННДоверителя = ?(ПараметрыСообщения.ЭтоИнтеркампани,
				ПараметрыСообщения.ОрганизацияДляПодписанияИНН, ПараметрыСообщения.ОрганизацияИНН);
			ТребуетсяДоверенность = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
				ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
			
			Если ТребуетсяДоверенность Тогда
				
				СертификатыТребующиеДоверенность.Вставить(ДанныеСертификата.Ссылка, Истина);
				
				СвойстваСертификата = СвойстваСертификатов[ДанныеСертификата.Ссылка];
				Сертификат = Новый СертификатКриптографии(СвойстваСертификата.ДанныеСертификата);
				
				Доверитель = СвойстваСертификата.Организация;
				
				Если Не ЗначениеЗаполнено(Доверитель) Тогда
					Доверитель = ДанныеСертификата.ОрганизацияСертификата;
				КонецЕсли;
				
				Если Не ПараметрыСообщения.ЭтоИнтеркампани И Не ЗначениеЗаполнено(Доверитель) Тогда
					Доверитель = ПараметрыСообщения.Организация;
				КонецЕсли;
				
				ОтборМЧД = МашиночитаемыеДоверенности.НовыйОтборМЧД();
				ОтборМЧД.Доверитель = Доверитель;
				ОтборМЧД.Сертификат = Сертификат;
				ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеСообщения.ПрисоединенныйФайл, "ВладелецФайла.ЭлектронныйДокумент");
				Результат = МашиночитаемыеДоверенности.ПолучитьПоследнююВыданнуюДоверенностьОрганизации(
					ОтборМЧД, ЭлектронныйДокумент);
				
				Если ЗначениеЗаполнено(Результат.Доверенность) Тогда
					ДанныеСообщения.Доверенности.Вставить(ДанныеСертификата.Ссылка, Результат.Доверенность);
				Иначе
					Если Результат.ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
						ДанныеСообщения.ОшибкиПроверкиПолномочий.Вставить(
							ДанныеСертификата.Ссылка, Результат.ОшибкиПроверкиПолномочий);
					КонецЕсли;
				КонецЕсли;
				
				ДанныеСообщения.ТребуетсяМЧД = ТребуетсяДоверенность;
				
			КонецЕсли;
			
			Если КоличествоСертификатов = 1 И СодержаниеДокумента <> Неопределено 
				И ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
				
				ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
				ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеСообщения;
				ОписаниеФайла.ИмяФайла = ПараметрыСообщения.ПолноеИмяФайла;
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла,
					ПараметрыСообщения.Организация, Сертификаты[0], СодержаниеДокумента, ДанныеСообщения.ВыбраннаяМЧД);
					
				Если ЭтоФайлПДФ_А_3 Тогда
					ОписаниеФайла.ДвоичныеДанные = Обработки.ФорматДоговорнойДокумент101.ОбновитьВложениеВФайлеПДФ(
						ПараметрыСообщения.ПрисоединенныйФайл, ОписаниеФайла.ДвоичныеДанные);
				КонецЕсли;
				
				ДанныеСообщения.Данные = ОписаниеФайла.ДвоичныеДанные;
				ДанныеСообщения.ИсходныеДвоичныеДанные = ОписаниеФайла.ДвоичныеДанные;
				ДанныеСообщения.ДанныеИзменены = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДанных.Добавить(ДанныеСообщения);
		
	КонецЦикла;
	
	ОписаниеНабораДанных = Новый Структура;
	ОписаниеНабораДанных.Вставить("Сертификаты", Сертификаты);
	ОписаниеНабораДанных.Вставить("ПаролиСертификатов", ПаролиСертификатов);
	ОписаниеНабораДанных.Вставить("НаборДанных", НаборДанных);
	ОписаниеНабораДанных.Вставить("ТребуетсяЗаполнитьПодписантов", ТребуетсяЗаполнитьПодписантов);
	ОписаниеНабораДанных.Вставить("СертификатыТребующиеДоверенность", СертификатыТребующиеДоверенность);
	Возврат ОписаниеНабораДанных;
	
КонецФункции

Функция НовоеОписаниеОшибокОбработкиДанныхПриПодписании()
	ОписаниеОшибок = Новый Структура;
	ОписаниеОшибок.Вставить("ЕстьОшибкаКриптографииПоСообщениямДляПодписания", Ложь);
	ОписаниеОшибок.Вставить("ОтсутствуютДоступныеСертификаты", Ложь);
	ОписаниеОшибок.Вставить("НедоступныеСообщения", Новый Массив);
	ОписаниеОшибок.Вставить("УчетныеЗаписиБезСертификатов", СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов());
	ОписаниеОшибок.Вставить("ЗапрещенныеВидыСообщений", Новый ТаблицаЗначений());
	ОписаниеОшибок.ЗапрещенныеВидыСообщений.Колонки.Добавить("Сертификат");
	ОписаниеОшибок.ЗапрещенныеВидыСообщений.Колонки.Добавить("ВидСообщения");
	ОписаниеОшибок.Вставить("ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере", Новый Массив);
	ОписаниеОшибок.Вставить("СообщенияВФорматеНеПоддержанномОператором", Новый ТаблицаЗначений());
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("Сообщение");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("Формат");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ОператорОтправителя");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ОператорПолучателя");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ФорматПоддержанОператоромОтправителя");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ФорматПоддержанОператоромПолучателя");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("НомерДокумента");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ДатаДокумента");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ВидДокумента");
	ОписаниеОшибок.СообщенияВФорматеНеПоддержанномОператором.Колонки.Добавить("ТипДокумента");
	Возврат ОписаниеОшибок;
КонецФункции

Процедура ОбработатьОшибкиДанныхДляПодписания(Ошибки, КонтекстДиагностики, ПараметрыВыполнения)
	
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	
	Если Ошибки.ЕстьОшибкаКриптографииПоСообщениямДляПодписания Тогда
		КриптографияБЭД.ДобавитьОшибкуПолученияОтпечатковСертификатов(КонтекстДиагностики,
			ВидОперацииПриДобавленииОшибки(НРег(Действие)), ПараметрыВыполнения.ОтпечаткиСертификатов);
	КонецЕсли;
	
	Если Ошибки.ОтсутствуютДоступныеСертификаты Тогда
		СинхронизацияЭДО.ДобавитьОшибкуОтсутствияСертификатовДляПодписания(КонтекстДиагностики,
			ВидОперацииПриДобавленииОшибки(НРег(Действие)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.УчетныеЗаписиБезСертификатов) Тогда
		СинхронизацияЭДО.ДобавитьОшибкуУчетныхЗаписейБезСертификатов(КонтекстДиагностики,
			Ошибки.УчетныеЗаписиБезСертификатов, СинхронизацияЭДО.ОперацииПомощникаРегистрацииСертификатов().Подписание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.НедоступныеСообщения) Тогда
		ДобавитьОшибкуДокументыНедоступныДляПодписания(КонтекстДиагностики, Ошибки.НедоступныеСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.ЗапрещенныеВидыСообщений) Тогда
		Ошибки.ЗапрещенныеВидыСообщений.Свернуть("Сертификат, ВидСообщения");
		Для Каждого СтрокаТаблицы Из Ошибки.ЗапрещенныеВидыСообщений Цикл
			КриптографияБЭД.ДобавитьОшибкуДляСертификатаНетПодписываемогоВидаДокумента(
				КонтекстДиагностики, ВидОперацииПриДобавленииОшибки(НРег(Действие)), СтрокаТаблицы.Сертификат,
				СтрокаТаблицы.ВидСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере) Тогда
		ДобавитьОшибкуДокументыНедоступныДляПодписанияНаСервереПоДоверенности(КонтекстДиагностики,
			Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.СообщенияВФорматеНеПоддержанномОператором) Тогда
		Если Ошибки.СообщенияВФорматеНеПоддержанномОператором.Количество() = 1 Тогда
			СтрокаТаблицы = Ошибки.СообщенияВФорматеНеПоддержанномОператором[0];
			ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, СтрокаТаблицы, Истина);
		Иначе	
			Для Каждого СтрокаТаблицы Из Ошибки.СообщенияВФорматеНеПоддержанномОператором Цикл
				ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуДокументыНедоступныДляПодписания(КонтекстДиагностики, НаборСообщений)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СообщениеЭДО.ЭлектронныйДокумент) КАК ПредставлениеДокумента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", НаборСообщений);
	
	УстановитьПривилегированныйРежим(Истина);
	ПредставленияДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредставлениеДокумента");
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Документы недоступные для подписания:'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ПредставленияДокументов);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиДокументыНедоступныДляПодписания(),
		ПодробноеПредставление, ПодробноеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДобавитьОшибкуДокументыНедоступныДляПодписанияНаСервереПоДоверенности(КонтекстДиагностики, НаборСообщений)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СообщениеЭДО.ЭлектронныйДокумент) КАК ПредставлениеДокумента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", НаборСообщений);
	
	УстановитьПривилегированныйРежим(Истина);
	ПредставленияДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредставлениеДокумента");
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Документы недоступные для подписания на сервере:'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ПредставленияДокументов);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоДоверенности(),
		ПодробноеПредставление, ПодробноеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, ДанныеСообщения,
	ИспользоватьОбработчикОшибки = Ложь)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	СвойстваДокумента = Новый Структура;
	СвойстваДокумента.Вставить("НомерДокумента");
	СвойстваДокумента.Вставить("ДатаДокумента");
	СвойстваДокумента.Вставить("ВидДокумента");
	СвойстваДокумента.Вставить("ТипДокумента");
	
	ЗаполнитьЗначенияСвойств(СвойстваДокумента, ДанныеСообщения);
	
	ПредставлениеДокумента = ПредставлениеДокумента(
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСообщения.Сообщение, "ЭлектронныйДокумент"),
	    СвойстваДокумента);
	ПредставлениеОшибки = "";
	
	Если Не ДанныеСообщения.ФорматПоддержанОператоромОтправителя Тогда
		ПредставлениеОшибки = 
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(

				НСтр("ru = 'Оператор ""%1"" не поддерживает отправку электронных документов в формате ""%2"".'"), 
				ДанныеСообщения.ОператорОтправителя, ДанныеСообщения.Формат) + Символы.ПС +
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписание и отправка электронного документа ""%1"" невозможны.'"), 
				ПредставлениеДокумента);
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеОшибки) И Не ДанныеСообщения.ФорматПоддержанОператоромПолучателя Тогда
		ПредставлениеОшибки = 
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оператор ""%1"" не поддерживает получение электронных документов в формате ""%2"".'"), 
				ДанныеСообщения.ОператорПолучателя, ДанныеСообщения.Формат) + Символы.ПС +
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписание и отправка электронного документа ""%1"" невозможны.'"), 
				ПредставлениеДокумента);
	КонецЕсли;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, 
		ВидОшибкиДокументыВФорматеНеПоддержанномОператором(ИспользоватьОбработчикОшибки), ПредставлениеОшибки, ПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры



Функция ВидОшибкиДокументыНедоступныДляПодписания()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыНедоступныеДляПодписания";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы недоступны для подписания'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Некоторые документы недоступны для подписания'");
	
	Возврат ВидОшибки;
	
КонецФункции

Функция ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоДоверенности()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыНедоступныеДляПодписанияНаСервереПоДоверенности";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы недоступны для подписания на сервере'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Для подписания требуется доверенность'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Выполните подписание на клиенте'");
	
	Возврат ВидОшибки;
	
КонецФункции

Функция ВидОшибкиДокументыВФорматеНеПоддержанномОператором(ИспользоватьОбработчик = Ложь)
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыВФорматеНеПоддержанномОператором";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы не поддерживаются оператором ЭДО'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Формат документов не поддержан оператором ЭДО'");
	Если ИспользоватьОбработчик Тогда
		ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
		ВидОшибки.АвтоматическиВыполняемыйОбработчик =
			"ЭлектронныеДокументыЭДОКлиент.ВывестиПредупреждениеОДокументеВФорматеНеПоддержанномОператором";
	КонецЕсли;	
		
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает результат заполнения доверенностей и подписантов по сертификату.
// 
// Параметры:
//  ДанныеДляЗаполнения - Соответствие из КлючИЗначение:
//    * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * Значение - Структура:
//  	** ТребуетсяЗаполнитьПодписанта   - Булево
//  	** ТребуетсяЗаполнитьДоверенность - Булево
//  	** НаборМЧД						  - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	** Данные						  - Неопределено, Строка, ДвоичныеДанные - данные файлов.
//  Сертификат          - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатУточненияМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Структура:
//    ** Отказ                    - Булево
//    ** АдресДанныхДляОбновления - Строка
//    ** ДанныеДляПодписания      - Неопределено
//                                - Строка
//                                - ДвоичныеДанные
//
Функция ЗаполнитьПодписантовИДоверенностиПоСертификату(ДанныеДляЗаполнения,
	Сертификат, КонтекстДиагностики, РезультатУточненияМЧД) Экспорт

	ПрисоединенныеФайлы = Новый Массив;
	Результат = Новый Соответствие;
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();

	Для Каждого Элемент Из ДанныеДляЗаполнения Цикл

		Если ТипЗнч(Элемент.Ключ) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда

			РезультатЗаполненияФайла = Новый Структура;
			РезультатЗаполненияФайла.Вставить("Отказ", Ложь);
			РезультатЗаполненияФайла.Вставить("АдресДанныхДляОбновления", "");
			РезультатЗаполненияФайла.Вставить("ДанныеДляПодписания", Неопределено);

			Результат.Вставить(Элемент.Ключ, РезультатЗаполненияФайла);

			ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайла.ДвоичныеДанные = Элемент.Значение.Данные;
			ОписаниеФайла.ИмяФайла = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Элемент.Ключ);
			АдресДанных = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные, Новый УникальныйИдентификатор);
			РезультатЗаполненияФайла.ДанныеДляПодписания = ?(СоздаватьЭлектронныеПодписиНаСервере, АдресДанных,
				ОписаниеФайла.ДвоичныеДанные);
		Иначе
			ПрисоединенныеФайлы.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
	|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
	|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)";
	Запрос.УстановитьПараметр("ПрисоединенныеФайлы", ПрисоединенныеФайлы);

	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ПрисоединенныеФайлы, КонтекстДиагностики);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		РезультатЗаполненияФайла = Новый Структура;
		РезультатЗаполненияФайла.Вставить("Отказ", Ложь);
		РезультатЗаполненияФайла.Вставить("АдресДанныхДляОбновления", "");
		РезультатЗаполненияФайла.Вставить("ДанныеДляПодписания", Неопределено);

		Результат.Вставить(Выборка.Ссылка, РезультатЗаполненияФайла);

		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;

		ПараметрыЗаполнения = ДанныеДляЗаполнения.Получить(Выборка.Ссылка);

		Если ТипЗнч(ПараметрыЗаполнения.Данные) = Тип("ДвоичныеДанные") И ЗначениеЗаполнено(ПараметрыЗаполнения.Данные) Тогда
			ОписаниеФайла.ДвоичныеДанные = ПараметрыЗаполнения.Данные;
		Иначе
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайлов[Выборка.Ссылка];
		КонецЕсли;

		СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);

		Если ПараметрыЗаполнения.ТребуетсяЗаполнитьПодписанта
			И СодержаниеДокумента <> Неопределено
			И ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
			
			ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла, Выборка.Организация,
				Сертификат, СодержаниеДокумента, РезультатУточненияМЧД);
				
			ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорнойДокумент101.ЭтоФайлФормата(Выборка.ПолноеИмяФайла);
			Если ЭтоФайлПДФ_А_3 Тогда
				ОписаниеФайла.ДвоичныеДанные = Обработки.ФорматДоговорнойДокумент101.ОбновитьВложениеВФайлеПДФ(
					Выборка.Ссылка, ОписаниеФайла.ДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;

		Если ПараметрыЗаполнения.ТребуетсяДоверенность
			И СодержаниеДокумента <> Неопределено
			И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента) Тогда
			
			ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(ОписаниеФайла, 
				Выборка.Организация, ПараметрыЗаполнения.НаборМЧД, СодержаниеДокумента);
			
		КонецЕсли;

		АдресДанных = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные, Новый УникальныйИдентификатор);

		РезультатЗаполненияФайла.АдресДанныхДляОбновления = АдресДанных;
		РезультатЗаполненияФайла.ДанныеДляПодписания = ?(СоздаватьЭлектронныеПодписиНаСервере, АдресДанных,
			ОписаниеФайла.ДвоичныеДанные);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ПодписатьПростойПодписью(ДанныеДляПодписания, РезультатДействий)
	
	Пользователь = Пользователи.ТекущийПользователь();
	ДанныеСотрудникаПоОрганизациям = Новый Соответствие;
	
	Для Каждого ДанныеСообщения Из ДанныеДляПодписания Цикл
		
		Организация = ДанныеСообщения.Организация;
		ДанныеСотрудника = ДанныеСотрудникаПоОрганизациям[Организация];
		Если ДанныеСотрудника = Неопределено Тогда
			ДанныеСотрудника = ИнтеграцияЭДО.СведенияФизЛицаПользователя(Пользователь, Организация);
			ДанныеСотрудникаПоОрганизациям.Вставить(Организация, ДанныеСотрудника);
		КонецЕсли;
		
		УстановитьПростуюПодпись(ДанныеСообщения, Пользователь, ДанныеСотрудника, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает простую подпись.
// 
// Параметры:
//  ДанныеСообщения - См. ЭлектронныеДокументыЭДО.ДанныеДокументовДляПодписания
//  Пользователь - СправочникСсылка.Пользователи
//  ДанныеСотрудника - См. ИнтеграцияЭДО.НовыеСведенияФизЛицаПользователя
//  РезультатДействий - См ЭлектронныеДокументыЭДО.НовыйРезультатДействийПоЭДО
//
Процедура УстановитьПростуюПодпись(ДанныеСообщения, Пользователь, ДанныеСотрудника, РезультатДействий)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеСообщения.Ссылка);
	
	ОрганизацияДляПодписания = Неопределено;
	ДанныеСообщения.Свойство("Организация", ОрганизацияДляПодписания);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДатаПодписи = ТекущаяУниверсальнаяДата();
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СообщениеОбъект = ДанныеСообщения.Ссылка.ПолучитьОбъект();
		
		РезультатПодписания = ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ДатаИзменения,
			КонтекстДиагностики,, ОрганизацияДляПодписания);
		
		Если Не ЗначениеЗаполнено(РезультатПодписания.СостояниеДокумента) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗаписатьДанныеПростойПодписи(СообщениеОбъект.ОсновнойФайл, Пользователь, ДанныеСотрудника, ДатаПодписи);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка установки простой подписи.'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Установка подписи'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат;
	КонецПопытки;
	
	ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий);
	
КонецПроцедуры

// Записывает данные простой подписи.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  Пользователь - ОпределяемыйТип.Пользователь
//  ДанныеСотрудника - Структура:
//  * ИмяПолное - Строка
//  * Должность - Строка
//  ДатаПодписи - Дата - универсальная дата компьютера
//
Процедура ЗаписатьДанныеПростойПодписи(ПодписанныйОбъект, Пользователь, ДанныеСотрудника, ДатаПодписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоПодписей
		|ИЗ
		|	РегистрСведений.ПростыеЭлектронныеПодписи КАК ПростыеЭлектронныеПодписи
		|ГДЕ
		|	ПростыеЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	ПорядковыйНомер = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядковыйНомер = Выборка.КоличествоПодписей + 1;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПростыеЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.ВладелецПодписи = ДанныеСотрудника.ИмяПолное;
	МенеджерЗаписи.Должность = ДанныеСотрудника.Должность;
	МенеджерЗаписи.Пользователь = Пользователь;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПодписатьНаСервере(ДанныеДляПодписания, РезультатДействий)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	ПодписанныеДокументы = Новый Массив;
	
	Для Каждого ОписаниеДанных Из ДанныеДляПодписания Цикл
		
		МенеджерКриптографии = КриптографияБЭД.МенеджерКриптографии(,,ОписаниеДанных.Программа);
		
		РезультатПодписания = КриптографияБЭД.Подписать(ОписаниеДанных, КонтекстДиагностики,, МенеджерКриптографии);
		Если РезультатПодписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеНабора Из РезультатПодписания.НаборДанных Цикл
			
			СвойстваПодписи = Неопределено;
			Если Не ДанныеНабора.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ДанныеНабора.Данные,
				СвойстваПодписи.Подпись, КонтекстДиагностики);
			
			СвойстваПодписи.ПодписьВерна = РезультатПроверки.СвойстваПодписи.ПодписьВерна;
			СвойстваПодписи.ДатаПроверкиПодписи = РезультатПроверки.СвойстваПодписи.ДатаПроверкиПодписи;
			
			ПодписанныеДокументы.Добавить(ДанныеНабора);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбработатьПодписанныеСообщения(ПодписанныеДокументы, РезультатДействий);
	
КонецПроцедуры

Функция ВыполнитьДействияПоЭДОПослеПодписания(ПодписанныеСообщения, ПараметрыВыполнения, КонтекстДиагностики, ИтогДействийПоЭДО) Экспорт
	
	РезультатДействий = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	РезультатДействий.Итог = ИтогДействийПоЭДО;
	
	ВыбранныеСертификаты = ОбщегоНазначения.ВыгрузитьКолонку(ПодписанныеСообщения, "ВыбранныйСертификат", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыВыполнения.ВыбранныеСертификаты, ВыбранныеСертификаты, Истина);
	
	ОбработатьПодписанныеСообщения(ПодписанныеСообщения, РезультатДействий);
	
	ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполнения, РезультатДействий);
	
	Возврат РезультатДействий;
	
КонецФункции

// Обрабатывает подписанные сообщения.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ОбработатьПодписанныеСообщения(ПодписанныеСообщения, РезультатДействий)
	
	РезультатыПроверокПодписей = ПроверитьПодписиПоМЧДИсходящихСообщений(ПодписанныеСообщения, РезультатДействий);
	
	ПроверитьСНИЛСПодписантаМЧД(ПодписанныеСообщения, РезультатДействий);
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		
		ОбновитьДанныеПриПодписании(ПодписанноеСообщение, РезультатыПроверокПодписей, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустое описание подписанного сообщения.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  		 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 						 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * СвойстваПодписи - Неопределено
//                    - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Данные - Неопределено
//           - ДвоичныеДанные
//  * ОбновитьДанные - Булево
//  * ВыбраннаяМЧД   - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//                   - Неопределено
//  * ТребуетсяМЧД   - Булево
//
Функция НовоеОписаниеПодписанногоСообщения() Экспорт
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Ссылка", Документы.СообщениеЭДО.ПустаяСсылка());
	ОписаниеДанных.Вставить("ПрисоединенныйФайл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ОписаниеДанных.Вставить("СвойстваПодписи", Неопределено);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	ОписаниеДанных.Вставить("Данные", Неопределено);
	ОписаниеДанных.Вставить("ОбновитьДанные", Ложь);
	ОписаниеДанных.Вставить("ВыбраннаяМЧД", Неопределено);
	ОписаниеДанных.Вставить("ТребуетсяМЧД", Ложь);
	Возврат ОписаниеДанных;
КонецФункции

// Проверить подписи по МЧДИсходящих сообщений.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - См. НовыйРезультатПроверкиПодписиПоМЧД
Функция ПроверитьПодписиПоМЧДИсходящихСообщений(ПодписанныеСообщения, РезультатДействий)
	
	РезультатыПроверокПодписей = Новый Соответствие;
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	ФайлыСообщений = Новый Массив;
	ВыбранныеМЧД = Новый Массив;
	Сообщения = Новый Массив;
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		
		Если ПодписанноеСообщение.ТребуетсяМЧД И НЕ ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД)
			И ПодписанноеСообщение.Свойство("Доверенности") Тогда
			ВыбраннаяМЧД = ПодписанноеСообщение.Доверенности.Получить(ПодписанноеСообщение.ВыбранныйСертификат);
			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				ПодписанноеСообщение.ВыбраннаяМЧД = ВыбраннаяМЧД;
			КонецЕсли;
		КонецЕсли;
		
		Сообщения.Добавить(ПодписанноеСообщение.Ссылка);
		ФайлыСообщений.Добавить(ПодписанноеСообщение.ПрисоединенныйФайл);
		Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД)
			И ВыбранныеМЧД.Найти(ПодписанноеСообщение.ВыбраннаяМЧД) = Неопределено Тогда
			ВыбранныеМЧД.Добавить(ПодписанноеСообщение.ВыбраннаяМЧД);
		КонецЕсли;
	КонецЦикла;
	
	ИменаФайловСообщенийДляПроверки = ИменаФайловСообщенийДляПроверкиПоМЧД(ФайлыСообщений);
	
	НомераПоДоверенностям = МашиночитаемыеДоверенности.ПолучитьНомераДоверенностей(ВыбранныеМЧД);
	
	СведенияОрганизаций = СведенияОрганизацийПоСообщениямИнформацииОтправителя(Сообщения);
	
	Индекс = ПодписанныеСообщения.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		ПодписанноеСообщение = ПодписанныеСообщения[Индекс];
		
		Если ПодписанноеСообщение.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИННДоверителя = "";
		СведенияОДоверителе = СведенияОрганизаций[ПодписанноеСообщение.Ссылка];
		Если СведенияОДоверителе <> Неопределено Тогда
			ИННДоверителя = СведенияОДоверителе.ИНН;
		КонецЕсли;
		
		ИмяФайла = ИменаФайловСообщенийДляПроверки[ПодписанноеСообщение.ПрисоединенныйФайл];
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПодписанноеСообщение.Данные;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ОписаниеФайла.ИмяФайла = ИмяФайла;
		КонецЕсли;
		
		СодержаниеФайла = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		Если СодержаниеФайла <> Неопределено Тогда
			
			ИННДоверителяИзСодержания = "";
			СвойстваСообщения = СвойстваСообщения(ПодписанноеСообщение.Ссылка, "Направление");

			Если СодержаниеФайла.Свойство("Получатель")
				И СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
					ИННДоверителяИзСодержания = СодержаниеФайла.Получатель.ИНН;
			ИначеЕсли СодержаниеФайла.Свойство("Отправитель") 
				И СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
					ИННДоверителяИзСодержания = СодержаниеФайла.Отправитель.ИНН;
			ИначеЕсли СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Интеркампани 
				И ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД) Тогда
					ВыбраннаяМЧД = ПодписанноеСообщение.ВыбраннаяМЧД;
					ИННДоверителяИзСодержания = 
						?(ЗначениеЗаполнено(ВыбраннаяМЧД.ДоверительЮЛ_ИНН),
							ВыбраннаяМЧД.ДоверительЮЛ_ИНН,
								ВыбраннаяМЧД.ДоверительФЛ_ИНН);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИННДоверителяИзСодержания) Тогда
				ИННДоверителя = ИННДоверителяИзСодержания;
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваПодписи = ПодписанноеСообщение.СвойстваПодписи;
		Если Не ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, СвойстваПодписи.Сертификат)
			ИЛИ НЕ ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СодержаниеФайла <> Неопределено
			И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеФайла) Тогда
			НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(ОписаниеФайла, СодержаниеФайла.Формат);
		Иначе
			НомерМЧД = НомераПоДоверенностям[ПодписанноеСообщение.ВыбраннаяМЧД];
			НомераМЧД = Новый Массив;
			Если НомерМЧД <> Неопределено Тогда
				НомераМЧД.Добавить(НомерМЧД);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверки = ПараметрыПроверкиПодписиПоМЧД(НомераМЧД, СвойстваПодписи, ИННДоверителя,
			НаборСведенийОСтатусахМЧД, Ложь);
			
		ПараметрыПроверки.ЭлектронныйДокумент = ЭлектронныйДокументСообщенияЭДО(ПодписанноеСообщение.Ссылка);
		
		РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
		
		Если РезультатПроверки.ПодписьВерна Тогда
			РезультатыПроверокПодписей.Вставить(ПодписанноеСообщение.ПрисоединенныйФайл, РезультатПроверки);
		Иначе
			ПараметрыОшибки = НовыеПараметрыОшибкиПроверкиПодписиПоМЧД();
			ПараметрыОшибки.СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
			СвойстваДоверенности = МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности(РезультатПроверки.Доверенность);
			ПараметрыОшибки.СвойстваДоверенности = СвойстваДоверенности;
			ЭтоСсылкаНаДоверенность = МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(ПодписанноеСообщение.Ссылка);
			ПараметрыОшибки.РезультатПроверки = РезультатПроверки;
			Если ЗначениеЗаполнено(ПодписанноеСообщение.Ссылка) И Не ЭтоСсылкаНаДоверенность Тогда
				ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ПодписанноеСообщение.Ссылка, "ЭлектронныйДокумент");
				Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
					ТекстОшибки = ПараметрыПроверки.ТекстОшибки;
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Электронная подпись документа %1 не верна.'"),
						ПредставлениеДокумента(ЭлектронныйДокумент));
				КонецЕсли;
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Электронная подпись файла документа %1 не верна.'"),
					ПодписанноеСообщение.ПрисоединенныйФайл);
			КонецЕсли;
			ПараметрыОшибки.ТекстОшибки = ТекстОшибки;
			ДобавитьОшибкуПроверкиПодписиПоМЧД(РезультатДействий.КонтекстДиагностики, ПараметрыОшибки);
			ПодписанныеСообщения.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверокПодписей;
	
КонецФункции

// Проверяет СНИЛС подписанта МЧД
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ПроверитьСНИЛСПодписантаМЧД(ПодписанныеСообщения, РезультатДействий)
	
	МассивМЧД = Новый Массив;
	МассивСертификатов = Новый Массив;
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		Если МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(ПодписанноеСообщение.Ссылка) Тогда
			Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбранныйСертификат)
				И ЗначениеЗаполнено(ПодписанноеСообщение.Ссылка) Тогда
				МассивМЧД.Добавить(ПодписанноеСообщение.Ссылка);
				МассивСертификатов.Добавить(ПодписанноеСообщение.ВыбранныйСертификат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивМЧД.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	ДанныеДоверенностей = МашиночитаемыеДоверенности.ДанныеСнилсПодписантов(МассивМЧД);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСубъектаСертификатовПоСсылке(МассивСертификатов);
	
	Индекс = ПодписанныеСообщения.Количество();
	
	Пока Индекс > 0 Цикл
		
		Индекс = Индекс - 1;
		ПодписанноеСообщение = ПодписанныеСообщения[Индекс];
		
		Если ПодписанноеСообщение.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СнилсИзМЧД = ДанныеДоверенностей[ПодписанноеСообщение.Ссылка];
		СвойстваСертификата = СвойстваСертификатов[ПодписанноеСообщение.ВыбранныйСертификат];
		
		Если СнилсИзМЧД = Неопределено ИЛИ СвойстваСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СнилсИзСертификата = СвойстваСертификата.СНИЛС;
		
		Если СнилсИзСертификата = СнилсИзМЧД Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Различаются СНИЛС физического лица доверителя и сертификата'");
		ДобавитьОшибкуПроверкиСнилсПодписантаМЧД(РезультатДействий.КонтекстДиагностики, ТекстОшибки);
		ПодписанныеСообщения.Удалить(Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные подписанных сообщений.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатыПроверокПодписей - См. ПроверитьПодписиПоМЧДИсходящихСообщений
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Функция ОбновитьДанныеПриПодписании(ПодписанноеСообщение, РезультатыПроверокПодписей, РезультатДействий)
	
	Если ТипЗнч(ПодписанноеСообщение.Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		СообщениеОбъект = ПодписанноеСообщение.Ссылка.ПолучитьОбъект();
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Подписать,
			ПодписанноеСообщение.Ссылка);
		РезультатДействий.Вставить("СвойстваПодписи", ПодписанноеСообщение.СвойстваПодписи);
		РезультатДействий.Вставить("ПодписанныеДанные", ПодписанноеСообщение.Данные);
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	АдресДанныхДляОбновления = "";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПодписанноеСообщение.Ссылка);
	
	ОрганизацияДляПодписания = Неопределено;
	Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД) Тогда
		ОрганизацияДляПодписания = ПодписанноеСообщение.ВыбраннаяМЧД.Организация;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		СообщениеОбъект = ПодписанноеСообщение.Ссылка.ПолучитьОбъект();
		
		РезультатПодписания = ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ТекущаяДатаСеанса,
			КонтекстДиагностики, ПодписанноеСообщение.ВыбранныйСертификат, ОрганизацияДляПодписания);
		
		Если Не ЗначениеЗаполнено(РезультатПодписания.СостояниеДокумента) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		УстановитьКлючевыеДатыПриПодписанииСообщения(СообщениеОбъект, ТекущаяДатаСеанса, РезультатПодписания);
		
		Если ПодписанноеСообщение.ОбновитьДанные Тогда
			АдресДанныхДляОбновления = ПоместитьВоВременноеХранилище(ПодписанноеСообщение.Данные);
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресДанныхДляОбновления);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			РаботаСФайлами.ОбновитьФайл(ПодписанноеСообщение.ПрисоединенныйФайл, ИнформацияОФайле);
		КонецЕсли;
		
		ЭлектроннаяПодпись.ДобавитьПодпись(ПодписанноеСообщение.ПрисоединенныйФайл, ПодписанноеСообщение.СвойстваПодписи);
		
		РезультатПроверки = РезультатыПроверокПодписей[ПодписанноеСообщение.ПрисоединенныйФайл];
		Если РезультатПроверки <> Неопределено Тогда
			ХешПодписи = КриптографияБЭД.ХешПодписи(ПодписанноеСообщение.СвойстваПодписи.Подпись);
			МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ПодписанноеСообщение.ПрисоединенныйФайл,
				ХешПодписи, РезультатПроверки);
		КонецЕсли;
		
		Если ПодписанноеСообщение.Свойство("ВыбраннаяМЧД") Тогда
			МЧД = ПодписанноеСообщение.ВыбраннаяМЧД;
			Если ЗначениеЗаполнено(МЧД) Тогда
				МашиночитаемыеДоверенности.ДобавитьДоверенностьОрганизации(ПодписанноеСообщение.ПрисоединенныйФайл, МЧД);			
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		ДобавитьОшибкуВыполненияДействияПоСообщению(ПодписанноеСообщение.Ссылка, Действие,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), КонтекстДиагностики);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(АдресДанныхДляОбновления) Тогда
		УдалитьИзВременногоХранилища(АдресДанныхДляОбновления);
	КонецЕсли;
	
	Если Результат Тогда
		ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет состояние сообщения при установке подписи.
// 
// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ДатаИзменения - Дата - универсальная дата компьютера
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, используемый при
//  подписании сообщения. Необязательный: если не указана, то будет использована пустая ссылка на справочник.
Функция ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ДатаИзменения, КонтекстДиагностики, 
	ВыбранныйСертификат = Неопределено, ОрганизацияДляПодписания = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	
	Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		ДобавитьОшибкуСостоянияСообщенияПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	Если ВыбранныйСертификат = Неопределено Тогда
		ВыбранныйСертификат = КриптографияБЭД.ПустойСертификат();
	КонецЕсли;
	
	ОписанияЗапросов = Новый Массив;
	Отбор = МаршрутыПодписанияБЭД.НовыйОтборПроверкиТекущегоОбъектаДляПодписания();
	Отбор.Объект = "&Сообщение";
	ОписанияЗапросов.Добавить(МаршрутыПодписанияБЭД.ЗапросПроверкиТекущегоОбъектаДляПодписания(Отбор));
	
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
	ТекстыЗапросов.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	Запрос.УстановитьПараметр("Сообщение", СообщениеОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		ДобавитьОшибкуМаршрутаПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыДокумента = РезультатыЗапроса[1].Выбрать();
	ПараметрыДокумента.Следующий();
	СостоянияСообщений = РезультатыЗапроса[2].Выгрузить();
	
	ПараметрыМаршрута = ОбновитьМаршрутПодписания(СообщениеОбъект, ВыбранныйСертификат, ОрганизацияДляПодписания);
	Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
	
	СообщениеОбъект.Статус = ?(МаршрутыПодписанияБЭД.ПодписаниеЗавершено(ПараметрыМаршрута.ТаблицаПодписания),
		Перечисления.СтатусыСообщенийЭДО.Подписан, Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан);
	
	СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзменения;
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
	СообщениеОбъект.Записать();
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
		ПараметрыМаршрута.ВесМаршрута);
	
	Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[3]);
	
	Результат.СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
	
	ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, Результат.СостояниеДокумента, 
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
	Возврат Результат;
	
КонецФункции

// Возвращает контекст интерактивного подписания.
// 
// Параметры:
//  ДанныеДляПодписания - Массив из См. ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ИтогДействийПоЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//
// Возвращаемое значение:
//  Структура:
//  * АдресКонтекстаНаСервере - Строка
//  * ДанныеДляПодписания - Массив из См. ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  * КонтекстНаСервере - См. КонтекстИнтерактивногоПодписанияНаСервере
//
Функция КонтекстИнтерактивногоПодписания(ДанныеДляПодписания, ПараметрыВыполнения, ИтогДействийПоЭДО)
	Контекст = Новый Структура;
	Контекст.Вставить("АдресКонтекстаНаСервере", "");
	Контекст.Вставить("ДанныеДляПодписания", ДанныеДляПодписания);
	Контекст.Вставить("КонтекстНаСервере", КонтекстИнтерактивногоПодписанияНаСервере(
		ПараметрыВыполнения, ИтогДействийПоЭДО));
	Возврат Контекст;
КонецФункции

// Возвращает структура контекста на сервере при интерактивном подписании документа.
// 
// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ИтогДействийПоЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//
// Возвращаемое значение:
//  Структура:
//  * ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * ИтогДействийПоЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * АдресаДанныхДляОчистки - Массив из Строка
Функция КонтекстИнтерактивногоПодписанияНаСервере(ПараметрыВыполнения, ИтогДействийПоЭДО)
	КонтекстНаСервере = Новый Структура;
	КонтекстНаСервере.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	КонтекстНаСервере.Вставить("ИтогДействийПоЭДО", ИтогДействийПоЭДО);
	КонтекстНаСервере.Вставить("АдресаДанныхДляОчистки", Новый Массив);
	Возврат КонтекстНаСервере;
КонецФункции

Процедура ПоместитьДанныеДляПодписанияВХранилище(КонтекстПодписания)
	
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();
	
	АдресаДанныхДляОчистки = КонтекстПодписания.КонтекстНаСервере.АдресаДанныхДляОчистки;
	
	Для Каждого ОписаниеДанных Из КонтекстПодписания.ДанныеДляПодписания Цикл
		
		Для Каждого ДанныеСообщения Из ОписаниеДанных.НаборДанных Цикл
			
			ДвоичныеДанныеСообщения = ?(ДанныеСообщения.Данные = Неопределено,
				ДанныеСообщения.ИсходныеДвоичныеДанные, ДанныеСообщения.Данные);
			
			Если ДвоичныеДанныеСообщения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанных = "";
			
			Если ДанныеСообщения.ДанныеИзменены Тогда
				АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСообщения, Новый УникальныйИдентификатор);
				ДанныеСообщения.АдресДанныхДляОбновления = АдресДанных;
			КонецЕсли;
			
			Если СоздаватьЭлектронныеПодписиНаСервере Тогда
				Если ПустаяСтрока(АдресДанных) Тогда
					АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСообщения, Новый УникальныйИдентификатор);
					АдресаДанныхДляОчистки.Добавить(АдресДанных);
				КонецЕсли;
				ДанныеСообщения.Данные = АдресДанных;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру контекста на сервере при интерактивном подписании документа.
// 
// Параметры:
//  АдресВременногоХранилища - Строка
// Возвращаемое значение:
//  См. КонтекстИнтерактивногоПодписанияНаСервере
//
Функция КонтекстИнтерактивногоПодписанияНаСервереПоАдресу(АдресВременногоХранилища) Экспорт
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
КонецФункции

Процедура ДобавитьОшибкуСостоянияСообщенияПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	КраткоеПредставлениеОшибки = НСтр("ru = 'Состояние документа изменено в процессе подписания.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставлениеОшибки);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Документ: %1'"), СообщениеОбъект.Ссылка));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Состояние: %1'"), СообщениеОбъект.Состояние));
	ПодробноеПредставлениеОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

Процедура ДобавитьОшибкуМаршрутаПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	КраткоеПредставлениеОшибки = НСтр("ru = 'Маршрут изменен в процессе подписания.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставлениеОшибки);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Документ: %1'"), СообщениеОбъект.Ссылка));
	ПодробноеПредставлениеОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

Процедура ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Подписать,
		СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(СообщениеОбъект, РезультатПодписания.ТаблицаПодписания);
	
	Если СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
		И (СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя) Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеПодписанияЭлектронногоДокумента(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
	Если РезультатПодписания.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ РезультатПодписания.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКлючевыеДатыПриПодписанииСообщения(СообщениеОбъект, ТекущаяДатаСеанса, РезультатПодписания)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоВходящийДокумент = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЭтоИнформацияОтправителя = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ЭтоОтветныйТитул = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;
	
	Если (ЭтоВходящийДокумент И (ЭтоИнформацияОтправителя Или ЭтоОтветныйТитул))
		Или (Не ЭтоВходящийДокумент И ЭтоИнформацияОтправителя) Тогда
		
		УстановитьДатуПодписания(ЭлектронныйДокумент, ТекущаяДатаСеанса);
		
	КонецЕсли;
	
	ЭтоВходящееПредложениеОбАннулировании =
		ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	Если ЭтоВходящееПредложениеОбАннулировании Тогда
		
		УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуПодписания(ЭлектронныйДокумент, ТекущаяДатаСеанса)
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаПодписания = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовитьКОтправке

Процедура ВыполнитьДействиеПодготовитьКОтправке(ПараметрыВыполнения, РезультатДействий)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ПодготовитьКОтправкеДокументыПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		СообщенияДляОбработки = Новый Соответствие;
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке);
		Отбор.ИспользоватьИдентификаторыОрганизаций = Истина;
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			СообщенияДляОбработки.Вставить(ВыборкаСообщений.Ссылка, Ложь);
		КонецЦикла;
		
		Для Каждого СообщениеОбработано Из СообщенияДляОбработки Цикл
			Если СообщениеОбработано.Значение Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеСообщения = Новый Массив;
			Результат = ПодготовитьКОтправкеДокумент(СообщениеОбработано.Ключ, КонтекстДиагностики, СообщенияДляОбработки,
				ОбработанныеСообщения);
			Если Не Результат Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СообщениеОбъект Из ОбработанныеСообщения Цикл
				СообщенияДляОбработки.Вставить(СообщениеОбъект.Ссылка, Истина);
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке,
					СообщениеОбъект.ЭлектронныйДокумент);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовить к отправке документ.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  СообщенияДляОбработки - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - Булево
//  ОбработанныеСообщения - Массив из ДокументОбъект.СообщениеЭДО
//  ИдентификаторПакета - Неопределено, УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
Функция ПодготовитьКОтправкеДокумент(Сообщение, КонтекстДиагностики, СообщенияДляОбработки, ОбработанныеСообщения, ИдентификаторПакета = Неопределено)
	
	Результат = Ложь;
	
	Действие = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО));
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой()
			ИЛИ РезультатыЗапроса[3].Пустой()
			ИЛИ РезультатыЗапроса[4].Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТребуетсяПоискПакета = Не ЭтоВходящийЭДО
			И СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И ИдентификаторПакета = Неопределено;
		
		Если ТребуетсяПоискПакета Тогда
			ПакетыДокументовЭДО.БлокировкаСоставаПакетаДокумента(ЭлектронныйДокумент).Заблокировать();
			ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
				Подготовлены = ПодготовитьСообщенияПакетаКОтправке(ИдентификаторПакета, Сообщение,
					СообщенияДляОбработки, ОбработанныеСообщения, КонтекстДиагностики);
				Если Не Подготовлены Тогда
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваДокумента = РезультатыЗапроса[1].Выбрать();
		СвойстваДокумента.Следующий();
		ТипыСообщений = РезультатыЗапроса[2].Выбрать();
		ТипыСообщений.Следующий();
		ФайлыСообщения = РезультатыЗапроса[3].Выгрузить();
		СостоянияСообщений = РезультатыЗапроса[4].Выгрузить();
		ИдентификаторыОснований = РезультатыЗапроса[5].Выгрузить();
		
		ДанныеОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
		ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
		
		ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокумента, СообщениеОбъект,
			ТипыСообщений.ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики);
		
		Если ДанныеОбъекта.Отказ Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОбъектов, КонтекстДиагностики);
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		
		Если РезультатПодготовки.Отказ Тогда
			Если ДанныеОбъекта.ТипОшибкиОтправки = СинхронизацияЭДО.ТипыОшибокОтправки().ОжидаетсяОтветНаПриглашение Тогда
				ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
			Иначе
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[6]);
		
		Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
			ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений,
				КонтекстДиагностики, Комментарий);
		Иначе
			ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокумента, СостоянияСообщений,
				КонтекстДиагностики, Комментарий);
		КонецЕсли;
		
		ОбработанныеСообщения.Добавить(СообщениеОбъект);
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Подготавливает документы пакета к отправке.
// 
// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПодготовитьКОтправкеДокументыПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ДокументыПакета = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
		
		ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета);
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(ДокументыПакета[0]);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО, Истина));
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянийДокументов());
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой()
			ИЛИ РезультатыЗапроса[3].Пустой()
			ИЛИ РезультатыЗапроса[4].Пустой()
			ИЛИ РезультатыЗапроса[6].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СостоянияДокументовЭДО = РезультатыЗапроса[6].Выгрузить();
		
		НаборСостояний = СостоянияДокументовЭДО.ВыгрузитьКолонку("Состояние");
		СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
			Действие, КонтекстДиагностики);
		Если Не СостоянияОднородны Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СвойстваДокументаСообщения = РезультатыЗапроса[1].Выбрать();
		ТипыСообщений = РезультатыЗапроса[2].Выгрузить();
		ФайлыСообщений = РезультатыЗапроса[3].Выгрузить();
		ИдентификаторыОснованийДокументов = РезультатыЗапроса[5].Выгрузить();
		
		СостоянияСообщенийДокументов = Новый Соответствие;
		ВыборкаСостоянийСообщений = РезультатыЗапроса[4].Выбрать();
		Пока ВыборкаСостоянийСообщений.Следующий() Цикл
			СостоянияСообщений = СостоянияСообщенийДокументов[ВыборкаСостоянийСообщений.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				СостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
				СостоянияСообщений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
				СостоянияСообщенийДокументов.Вставить(ВыборкаСостоянийСообщений.ЭлектронныйДокумент, СостоянияСообщений);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ВыборкаСостоянийСообщений);
		КонецЦикла;
		
		РезультатПодготовки = Неопределено;
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		
		ДанныеОсновныхОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
		
		ОбъектыСообщений = Новый Соответствие();
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СообщениеОбъект = СвойстваДокументаСообщения.Сообщение.ПолучитьОбъект();
			Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыСообщений.Вставить(СвойстваДокументаСообщения.Сообщение, СообщениеОбъект);
			
			Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоОсновнойОбъект = Не ЭтоВходящийЭДО
				И СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
			ДанныеОбъектов = ?(ЭтоОсновнойОбъект, ДанныеОсновныхОбъектов, СинхронизацияЭДО.НовыеДанныеОбъектов());
			ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
			
			Отбор = Новый Структура("Сообщение", СообщениеОбъект.Ссылка);
			ФайлыСообщения = ФайлыСообщений.НайтиСтроки(Отбор);
			
			ТипСообщения = ТипыСообщений.Найти(СообщениеОбъект.Ссылка, "Сообщение").ТипСообщения;
			
			Отбор = Новый Структура("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
			ИдентификаторыОснований = ИдентификаторыОснованийДокументов.НайтиСтроки(Отбор);
			
			ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокументаСообщения, СообщениеОбъект,
				ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики);
			
			Если ДанныеОбъекта.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Если ЭтоОсновнойОбъект Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОбъектов, КонтекстДиагностики);
			
			Если РезультатПодготовки.Отказ Тогда
				ПричинаОстановки = ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОбъектов);
				Если Не ЗначениеЗаполнено(ПричинаОстановки) Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ПричинаОстановки)
			И ЗначениеЗаполнено(ДанныеОсновныхОбъектов) Тогда
			
			НеподходящиеДокументы = Новый Массив;
			СвойстваСообщений = СвойстваОсновныхСообщенийДокументовПакета(ДокументыПакета);
			Если Не ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений, НеподходящиеДокументы) Тогда
				Если Не ЕстьДействияПоДокументамПакета(РезультатДействий.Итог.ОбработанныеДокументы, ДокументыПакета) Тогда
					ДобавитьОшибкуОжиданияДругихДокументовПакета(ПакетДокументов, НеподходящиеДокументы, КонтекстДиагностики);
				КонецЕсли;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОсновныхОбъектов, КонтекстДиагностики);
			
			Если РезультатПодготовки.Отказ Тогда
				ПричинаОстановки = ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОсновныхОбъектов);
				Если Не ЗначениеЗаполнено(ПричинаОстановки) Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваДокументаСообщения.Сбросить();
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СообщениеОбъект = ОбъектыСообщений[СвойстваДокументаСообщения.Сообщение];
			Если СообщениеОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СостоянияСообщений = СостоянияСообщенийДокументов[СообщениеОбъект.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Комментарий = "";
			ПараметрыСостояния = СостоянияДокументовЭДО.Найти(СообщениеОбъект.ЭлектронныйДокумент, "ЭлектронныйДокумент");
			Если ПараметрыСостояния <> Неопределено Тогда
				Комментарий = ПараметрыСостояния.Комментарий;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
				ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений,
					КонтекстДиагностики, Комментарий);
			Иначе
				ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокументаСообщения, СостоянияСообщений,
					КонтекстДиагностики, Комментарий);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО, ОтборПоДокументамПакета = Ложь)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ПОМЕСТИТЬ СообщенияДляОтправки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.ПодготовкаКОтправке)
		|	И &УсловиеОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ДокументЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ДокументЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ДокументЭДО.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ДокументЭДО.Организация КАК Организация,
		|	ДокументЭДО.Контрагент КАК Контрагент,
		|	ДокументЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
		|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
		|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента,
		|	ДокументЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипСообщения
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка КАК ЭтоОсновнойФайл,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В
		|		(ВЫБРАТЬ
		|			ЭлектронныйДокумент
		|		ИЗ
		|			СообщенияДляОтправки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияДляОтправки.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ИдентификаторыОснованийДокументаЭДО.ИдентификаторСвязи,
		|	ИдентификаторыОснованийДокументаЭДО.ИдентификаторДокументооборота
		|ИЗ
		|	СообщенияДляОтправки КАК СообщенияДляОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО.ИдентификаторыОснований КАК ИдентификаторыОснованийДокументаЭДО
		|		ПО СообщенияДляОтправки.ЭлектронныйДокумент = ИдентификаторыОснованийДокументаЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО ИдентификаторыОснованийДокументаЭДО.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)
		|		И СообщениеЭДО.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.Отправлен),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.Подтвержден))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ?(ОтборПоДокументамПакета,
		"СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)",
		"СообщениеЭДО.Ссылка = &Сообщение"));
	
	ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокументаЭДО", ИмяТаблицыДокументаЭДО);
	Возврат ТекстЗапроса;
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ТекущееСообщение - ДокументСсылка.СообщениеЭДО
//  СообщенияДляОбработки - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - Булево
//  ОбработанныеСообщения - Массив из ДокументОбъект.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ПодготовитьСообщенияПакетаКОтправке(ИдентификаторПакета, ТекущееСообщение, СообщенияДляОбработки, ОбработанныеСообщения, КонтекстДиагностики)
	
	ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
	
	СвойстваСообщений = СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке(ИдентификаторПакета);
	
	Если Не СообщенияПакетаПереданыДляОбработки(СвойстваСообщений, СообщенияДляОбработки)
		ИЛИ Не ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		
		Если СвойстваСообщения.Ссылка = ТекущееСообщение Тогда
			Продолжить;
		КонецЕсли;
		
		Подготовлен = ПодготовитьКОтправкеДокумент(СвойстваСообщения.Ссылка, КонтекстДиагностики,
			СообщенияДляОбработки, ОбработанныеСообщения, ИдентификаторПакета);
		
		Если Не Подготовлен Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке(ИдентификаторПакета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СоставПакетовДокументовЭДО.ЭлектронныйДокумент
		|		И СоставПакетовДокументовЭДО.ИдентификаторПакета = &ИдентификаторПакета
		|		И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений, НеподходящиеДокументы = Неопределено)
	
	Если НеподходящиеДокументы = Неопределено Тогда
		НеподходящиеДокументы = Новый Массив;
	КонецЕсли;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если СвойстваСообщения.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
			НеподходящиеДокументы.Добавить(СвойстваСообщения.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НеподходящиеДокументы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщенияПакетаПереданыДляОбработки(СвойстваСообщений, СообщенияДляОбработки)
	
	Результат = Истина;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если СообщенияДляОбработки[СвойстваСообщения.Ссылка] = Неопределено Тогда
			Результат = Ложь;
		Иначе
			СообщенияДляОбработки[СвойстваСообщения.Ссылка] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокумента, СвойстваСообщения, ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики)
	
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			ДанныеОбъекта.ДатаСоздания = СвойстваФайла.ДатаСоздания;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ДатаСоздания) Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.Объект = СвойстваСообщения.Ссылка;
	ДанныеОбъекта.ТипДокумента = ТипСообщения;
	ДанныеОбъекта.ТипЭлементаРегламента = СвойстваСообщения.ТипЭлементаРегламента;
	ДанныеОбъекта.СопроводительнаяЗаписка = СвойстваСообщения.ДополнительнаяИнформация;
	ДанныеОбъекта.ЭтоОтветнаяПодпись = СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	ДанныеОбъекта.Представление = ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	ДанныеОбъекта.ИдентификаторДокументооборота = СвойстваДокумента.ИдентификаторДокументооборота;
	ДанныеОбъекта.ИдентификаторСообщения = СвойстваДокумента.ИдентификаторСвязи;
	ДанныеОбъекта.ИдентификаторОтправителя = СвойстваДокумента.ИдентификаторОрганизации;
	ДанныеОбъекта.ИдентификаторПолучателя = СвойстваДокумента.ИдентификаторКонтрагента;
	ДанныеОбъекта.Организация = СвойстваДокумента.Организация;
	ДанныеОбъекта.Контрагент = СвойстваДокумента.Контрагент;
	ДанныеОбъекта.ДоговорКонтрагента = СвойстваДокумента.ДоговорКонтрагента;
	ДанныеОбъекта.ВидДокумента = СвойстваДокумента.ВидДокумента;
	ДанныеОбъекта.ТипРегламента = СвойстваДокумента.ТипРегламента;
	ДанныеОбъекта.ТребуетсяИзвещение = СвойстваДокумента.ТребуетсяИзвещение;
	ДанныеОбъекта.ТребуетсяПодтверждение = СвойстваДокумента.ТребуетсяПодтверждение;
	ДанныеОбъекта.СодержитМаркируемыеТовары = СвойстваДокумента.СодержитМаркируемыеТовары;
	ДанныеОбъекта.СпособОбмена = СвойстваДокумента.СпособОбмена;
	
	Если Не ЗаполнитьОписанияДанныхОбъектовДляПодготовкиКОтправке(ДанныеОбъекта, ФайлыСообщения, КонтекстДиагностики) Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = СинхронизацияЭДО.НовоеОписаниеДокумента();
	
	Если СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		
		ОписаниеДокумента.Номер = СвойстваДокумента.НомерДокумента;
		ОписаниеДокумента.Дата = СвойстваДокумента.ДатаДокумента;
		Если ЗначениеЗаполнено(СвойстваДокумента.СуммаДокумента) Тогда
			ОписаниеДокумента.Сумма = СвойстваДокумента.СуммаДокумента;
		КонецЕсли;
		ДанныеОбъекта.ОписаниеДокумента = ОписаниеДокумента;
		
		ЗаполнитьИдентификаторыОснованийДляПодготовкиКОтправке(ДанныеОбъекта, ИдентификаторыОснований);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьОписанияДанныхОбъектовДляПодготовкиКОтправке(ДанныеОбъекта, ФайлыСообщения, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(ФайлыСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = Новый Массив;
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		ПрисоединенныеФайлыСообщений.Добавить(СвойстваФайла.Ссылка);
	КонецЦикла;
	
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		
		ДвоичныеДанные = ДвоичныеДанныеФайлов[СвойстваФайла.Ссылка];
		Если ДвоичныеДанные = Неопределено Тогда
			Если СвойстваФайла.ЭтоОсновнойФайл Тогда
				Возврат Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанныхФайла = СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта();
		ОписаниеДанныхФайла.ИмяФайла = СвойстваФайла.ПолноеИмяФайла;
		ОписаниеДанныхФайла.ДвоичныеДанные = ДвоичныеДанные;
		
		ДанныеПодписей = Новый Массив;
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			УстановленныеПодписи = УстановленныеПодписиСУчетомДоверенностей(СвойстваФайла.Сообщение);
			Если ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
				КоличествоПодписей = УстановленныеПодписи.Количество();
				Если КоличествоПодписей > 1 Тогда
					Подпись = УстановленныеПодписи[КоличествоПодписей - 1];
					ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла);
				КонецЕсли;
			Иначе
				Для Каждого Подпись Из УстановленныеПодписи Цикл
					ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			ДанныеОбъекта.ОписаниеДанных = ОписаниеДанныхФайла;
			ДанныеОбъекта.ПодписиОсновныхДанных = ДанныеПодписей;
		Иначе
			ДанныеОбъекта.ОписаниеДополнительныхДанных = ОписаниеДанныхФайла;
			ДанныеОбъекта.ПодписиДополнительныхДанных = ДанныеПодписей;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Добавляет описание данных подписи в массив.
// 
// Параметры:
//  ДанныеПодписей - Массив из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  Подпись - см. НовыеДанныеПодписиСУчетомДоверенности
//  СвойстваФайла - СтрокаТаблицыЗначений
Процедура ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла)
	
	ОписаниеДанныхПодписи = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	СвойстваПодписи = Подпись.СвойстваПодписи;
	ОписаниеДанныхПодписи.ДвоичныеДанные = СвойстваПодписи.Подпись;
	ОписаниеДанныхПодписи.ИмяФайла = СвойстваПодписи.ИмяФайлаПодписи;
	Если ПустаяСтрока(ОписаниеДанныхПодписи.ИмяФайла) Тогда
		ОписаниеДанныхПодписи.ИмяФайла = ИмяФайлаПодписи(СвойстваФайла.ПолноеИмяФайла, СвойстваПодписи.ПорядковыйНомер);
	КонецЕсли;

	ДанныеПодписей.Добавить(ОписаниеДанныхПодписи);
	
	Если НЕ Подпись.ЭтоПодписьПоДоверенности Тогда
		Возврат;
	КонецЕсли;

	СвойстваДоверенности = Подпись.СвойстваДоверенности;
	ПроверкаДоверенности = Подпись.РезультатПроверкиПоМЧД;

	Если ЗначениеЗаполнено(СвойстваДоверенности) И ЗначениеЗаполнено(ПроверкаДоверенности) Тогда
		
		ДанныеДоверенности =
			МашиночитаемыеДоверенности.ДанныеДоверенностиДляКонтейнера(ПроверкаДоверенности.Доверенность);
		ХешПодписи = КриптографияБЭД.ХешПодписи(ОписаниеДанныхПодписи.ДвоичныеДанные);
		ДанныеОбъекта.Доверенности.Вставить(ХешПодписи, ДанныеДоверенности);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыОснованийДляПодготовкиКОтправке(ДанныеОбъекта, ИдентификаторыОснований)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИдентификаторыОснований Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСвязи) Тогда
			ДанныеОбъекта.ИдентификаторыСообщенийОснований.Добавить(СтрокаТаблицы.ИдентификаторСвязи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторДокументооборота) Тогда
			ДанныеОбъекта.ИдентификаторыДокументооборотовОснований.Добавить(СтрокаТаблицы.ИдентификаторДокументооборота);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокумента, СостоянияСообщений, КонтекстДиагностики, Комментарий = "")
		
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, СвойстваДокумента);
	СообщениеОбъект.Записать();
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(СвойстваДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
	
	ЗаписатьДействиеВЖурнал(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, СвойстваДокумента, СостояниеДокумента,
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
КонецПроцедуры

Процедура ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений, КонтекстДиагностики, Комментарий = "")
	
	ДатаИзменения = ТекущаяДатаСеанса();
	
	ДокументОбъект = СообщениеОбъект.ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.Остановлен = Истина;
	ДокументОбъект.ПричинаОстановки = ПричинаОстановки;
	ДокументОбъект.Записать();
	
	УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики,, Комментарий);
	
	ЗаписатьДействиеВЖурнал(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, ДокументОбъект, СостояниеДокумента,
		ДатаИзменения, СообщениеОбъект);
	
КонецПроцедуры

Процедура ДобавитьОшибкуОжиданияДругихДокументовПакета(ИдентификаторПакета, ДокументыПакета, КонтекстДиагностики)
	
	ВидОперации = НСтр("ru = 'Подготовка к отправке.'");
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	КраткоеПредставление = НСтр("ru = 'Не удалось подготовить пакет электронных документов к отправке.'");
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	МассивСтрок.Добавить(НСтр("ru = 'В пакете есть документы, которые не могут быть подготовлены к отправке:'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ДокументыПакета);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Функция СвойстваОсновныхСообщенийДокументовПакета(ДокументыПакета)
	Запрос = Новый Запрос(ТекстЗапросаСвойствОсновныхСообщенийДокументовПакета());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТекстЗапросаСвойствОсновныхСообщенийДокументовПакета()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка,
		|	СообщениеЭДО.Состояние,
		|	СообщениеЭДО.ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
КонецФункции

Функция ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОбъектов)
	
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если ДанныеОбъектов.Найти(СинхронизацияЭДО.ТипыОшибокОтправки().ОжидаетсяОтветНаПриглашение,
		"ТипОшибкиОтправки") <> Неопределено Тогда
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
	КонецЕсли;
	
	Возврат ПричинаОстановки;
	
КонецФункции

Функция ЕстьДействияПоДокументамПакета(ОбработанныеДокументы, ДокументыПакета)
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ОбработанныеДокументы[ЭлектронныйДокумент] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ОтменитьОтправку

Процедура ВыполнитьДействиеОтменитьОтправку(ПараметрыВыполнения, РезультатДействий)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтменитьОтправкуПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ОтменитьОтправкуСообщения(ВыборкаСообщений.Ссылка, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьОтправкуПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтменитьОтправку;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбъектыСообщений = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ОтменитьОтправкуКонтейнера(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСообщений, Результат.ОбъектыСообщений);;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ПакетДокументов, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Для Каждого СообщениеОбъект Из ОбъектыСообщений Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, СообщениеОбъект.ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьОтправкуСообщения(Сообщение, РезультатДействий)
	
	РезультатОтменыОтправки = ОтменитьОтправкуКонтейнера(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	Если РезультатОтменыОтправки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СообщениеОбъект Из РезультатОтменыОтправки.ОбъектыСообщений Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Отправить,
			СообщениеОбъект.ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтменитьОтправкуКонтейнера(Сообщение, КонтекстДиагностики)
	
	ТранспортныйКонтейнер = СинхронизацияЭДО.ТранспортныйКонтейнерОбъекта(Сообщение);
	
	НаборСообщений = СинхронизацияЭДО.ОбъектыТранспортногоКонтейнера(ТранспортныйКонтейнер);
	
	Возврат ОтменитьОтправку(НаборСообщений, КонтекстДиагностики);
	
КонецФункции

Функция ОтменитьОтправку(НаборСообщений, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ОбъектыСообщений", Новый Массив);
	
	Действие = Перечисления.ДействияПоЭДО.ОтменитьОтправку;
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого Сообщение Из НаборСообщений Цикл
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Сообщение);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(ТекстЗапросаДанныхДляОтменыОтправки());
		Запрос.УстановитьПараметр("НаборСообщений", НаборСообщений);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваДокументаСообщения = РезультатыЗапроса[1].Выбрать();
		
		СостоянияСообщенийДокументов = Новый Соответствие;
		ВыборкаСостоянийСообщений = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСостоянийСообщений.Следующий() Цикл
			СостоянияСообщений = СостоянияСообщенийДокументов[ВыборкаСостоянийСообщений.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				СостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
				СостоянияСообщений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
				СостоянияСообщенийДокументов.Вставить(ВыборкаСостоянийСообщений.ЭлектронныйДокумент, СостоянияСообщений);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ВыборкаСостоянийСообщений);
		КонецЦикла;
		
		ПодписанныеСообщения = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СостоянияСообщений = СостоянияСообщенийДокументов[СвойстваДокументаСообщения.Ссылка];
			
			СообщениеОбъект = СвойстваДокументаСообщения.Сообщение.ПолучитьОбъект();
			СообщениеОбъект.Статус =
				?(ПодписанныеСообщения.Найти(СвойстваДокументаСообщения.Сообщение) = Неопределено,
					Перечисления.СтатусыСообщенийЭДО.Сформирован, Перечисления.СтатусыСообщенийЭДО.Подписан);
			
			СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, СвойстваДокументаСообщения);
			СообщениеОбъект.Записать();
			
			НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
			НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(СвойстваДокументаСообщения, СостоянияСообщений,
				СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики);
			
			ЗаписатьДействиеВЖурнал(Действие, СвойстваДокументаСообщения, СостояниеДокумента, 
				СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
			
			Результат.ОбъектыСообщений.Добавить(СообщениеОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДанныхДляОтменыОтправки()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ПОМЕСТИТЬ СообщенияДляОбработки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&НаборСообщений)
		|	И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|	И СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Отправка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СообщенияДляОбработки.ЭлектронныйДокумент
		|		ИЗ
		|			СообщенияДляОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|		И ПрисоединенныеФайлы.ПодписанЭП";
КонецФункции

#КонецОбласти

#Область Отправить

Процедура ВыполнитьДействиеОтправить(ПараметрыВыполнения, РезультатДействий)
	
	РезультатОтправки = ОтправитьСообщения(ПараметрыВыполнения, РезультатДействий.КонтекстДиагностики);
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогДействийПоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОтправки.ДополнительныеПараметры,
		"ИтогДействийПоЭДО");
	Если ЗначениеЗаполнено(ИтогДействийПоЭДО) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.Итог.ОбработанныеДокументы,
			ИтогДействийПоЭДО.ОбработанныеДокументы, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.Итог.ОбработаноПоДействиям,
			ИтогДействийПоЭДО.ОбработаноПоДействиям, Истина);
	КонецЕсли;
	
	РезультатДействий.КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
	
	Если РезультатОтправки.ТребуетсяОбработкаНаКлиенте Тогда
		РезультатДействий.КонтекстОтправки = РезультатОтправки.КонтекстОтправки;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьСообщения(ПараметрыВыполнения, КонтекстДиагностики)
	
	ОписаниеЗапроса = ЗапросСообщенийДляОтправки(ПараметрыВыполнения.ОбъектыДействий, "ОбъектыДляОтправки");
	
	ДополнительныеПараметры = Новый Структура("ИтогДействийПоЭДО",
		ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	
	РезультатОтправки = СинхронизацияЭДО.ОтправитьОбъекты(ОписаниеЗапроса, КонтекстДиагностики,
		ПараметрыВыполнения.ОтпечаткиСертификатов, ПараметрыВыполнения.ВыбранныеСертификаты, ДополнительныеПараметры);
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ЗапросСообщенийДляОтправки(ОбъектыДействий, ИмяВременнойТаблицы = "")
	
	Отбор = НовыйОтборСообщенийДляОбработкиДействия();
	Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
	Отбор.ИспользоватьИдентификаторыОрганизаций = Истина;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстыЗапросов = Новый Массив;
	ТекстыВспомогательныхЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ИмяПараметраОтбора = "ОтборОбъектыУчета";
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыВспомогательныхЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоОбъектамУчета(
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		ИмяПараметраОтбора = "ОтборЭлектронныеДокументы";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоЭлектроннымДокументам(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		ИмяПараметраОтбора = "ОтборСообщения";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.Сообщения);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоСсылкамСообщений(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Отбор.ИспользоватьИдентификаторыОрганизаций
		И ЗначениеЗаполнено(ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		ИмяПараметраОтбора = "ИдентификаторыОрганизаций";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ИдентификаторыОрганизаций);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоИдентификаторамОрганизаций(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов) Тогда
		
		ИмяПараметраОтбора = "ПакетыДокументов";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ПакетыДокументов);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоПакетамДокументов(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОписаниеЗапроса.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	УстановитьПоляВыбораСвойствСообщенийДляОбработкиДействия(ОписаниеЗапроса, "Ссылка");
	
	УстановитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, Отбор);
	
	Если ЗначениеЗаполнено(ТекстыВспомогательныхЗапросов) Тогда
		ТекстыВспомогательныхЗапросов.Добавить(ОписаниеЗапроса.Текст);
		ОписаниеЗапроса.Текст = СтрСоединить(ТекстыВспомогательныхЗапросов,
			ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Процедура ОбработатьОтправленноеСообщение(Сообщение, ОшибкаПередачи, КонтекстДиагностики, Отказ, ИтогДействийПоЭДО)
	
	Действие = Перечисления.ДействияПоЭДО.Отправить;
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Блокировка.Заблокировать();
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент Тогда
			
			Отказ = Истина;
			ТекстОшибки = НСтр("ru='Не удалось заблокировать электронный документ'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Возврат;
			
		КонецЕсли;
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ПрокинутьКомментарий = СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
		
		ЭтоВходящийЭДО = ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		Если ПрокинутьКомментарий Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса;
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		Комментарий = "";
		Если ПрокинутьКомментарий Тогда
			Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[2]);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
			
		Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
			ОтправитьНаОзнакомление(СообщениеОбъект.ЭлектронныйДокумент);
		КонецЕсли;
		
		УстановитьКлючевыеДатыПриОтправкеСообщения(СообщениеОбъект, ТекущаяДатаСеанса);
		
		ЗаписатьДействиеВЖурнал(Действие, ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект);
		
		ЗаполнитьИтогВыполненияДействияПоЭДО(ИтогДействийПоЭДО, Действие, СообщениеОбъект.ЭлектронныйДокумент);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
КонецПроцедуры

// Записывает ошибку передачи.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  Блокирующая - Булево
//  ОписаниеОшибки - Строка
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
Функция ЗафиксироватьОшибкуПередачи(Сообщение, Действие, Блокирующая, ОписаниеОшибки, КонтекстДиагностики)
	
	Результат = Истина;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Остановлен = Истина;
		ДокументОбъект.ПричинаОстановки = ?(Блокирующая,
			Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая,
			Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
		ДокументОбъект.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСостоянияСообщений();
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		СостоянияСообщений = Запрос.Выполнить().Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		НайденнаяСтрока.Статус = СообщениеОбъект.Статус;
		
		УстановитьСостояниеХранение(СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,ОписаниеОшибки);
		
		ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
			СообщениеОбъект, ОписаниеОшибки);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьКлючевыеДатыПриОтправкеСообщения(СообщениеОбъект, ТекущаяДатаСеанса)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоВходящийДокумент = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЭтоИнформацияОтправителя = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	Если Не (Не ЭтоВходящийДокумент И ЭтоИнформацияОтправителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Загрузить

// Возвращает пустой результат загрузки документов.
// 
// Возвращаемое значение:
//  Структура:
//  * РезультатДействийПоЭДО - См. НовыйРезультатДействийПоЭДО
//  * КонтекстПроверкиПодписей - См. НовыйКонтекстПроверкиПодписей
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Функция НовыйРезультатЗагрузкиДокументов()
	Результат = Новый Структура;
	Результат.Вставить("РезультатДействийПоЭДО");
	Результат.Вставить("КонтекстПроверкиПодписей");
	Результат.Вставить("КонтекстДиагностики");
	Возврат Результат;
КонецФункции

// Возвращает пустой контекст проверки подписей.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ДанныеДокументов - См. СинхронизацияЭДО.НовыеДанныеОбъектов
//  * ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  * ПаролиСертификатов - См. КриптографияБЭД.НовыеПаролиСертификатов
//
Функция НовыйКонтекстПроверкиПодписей() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеДокументов");
	Контекст.Вставить("ОтпечаткиСертификатов");
	Контекст.Вставить("ПаролиСертификатов");
	Возврат Контекст;
КонецФункции

Функция НовыеПараметрыПроверкиПодписиНаКлиенте()
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ИдентификаторДанныхДокумента");
	ДанныеПодписи.Вставить("ДвоичныеДанныеФайла");
	ДанныеПодписи.Вставить("ДвоичныеДанныеПодписи");
	ДанныеПодписи.Вставить("ЭтоОсновныеДанные");
	Возврат ДанныеПодписи;
КонецФункции

Процедура ДополнитьДанныеОбъектовДляЗагрузки(ДанныеОбъектов)
	
	ДанныеОбъектов.Колонки.Добавить("Содержание");
	ДанныеОбъектов.Колонки.Добавить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ОписаниеТиповПрикладныхЭлектронныхДокументов());
	ДанныеОбъектов.Колонки.Добавить("КомментарийСообщения", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДанныеОбъектов.Колонки.Добавить("ПредыдущийДокумент", 
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	ДанныеОбъектов.Колонки.Добавить("НомераМЧД", Новый ОписаниеТипов("Массив"));
	ДанныеОбъектов.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	
	ЕстьОтветнаяПодпись = Ложь;
	ЕстьИнформацияОтправителя = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДанныеОбъектов Цикл
		
		Если СтрокаТаблицы.ЭтоОтветнаяПодпись Тогда
			ЕстьОтветнаяПодпись = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЕстьИнформацияОтправителя = Истина;
		КонецЕсли;
		
		ДополнитьДанныеОбъектаСодержаниемИнформацииОтправителя(СтрокаТаблицы);
		
		ДополнитьДанныеОбъектаКомментариемКОтклонениюАннулированию(СтрокаТаблицы);
		
		ДополнитьДанныеОбъектаНомерамиМЧДПоДоверителям(СтрокаТаблицы);
		
	КонецЦикла;
	
	ПоляВыбора = 
		"ИдентификаторСтроки,
		|ТипДокумента,
		|ПрикладнойТипДокумента";
	
	Если ЕстьОтветнаяПодпись Тогда
		ПоляВыбора = ПоляВыбора + ",
			|ЭтоОтветнаяПодпись,
			|ИдентификаторДокументооборота,
			|ИдентификаторПолучателя,
			|ТипЭлементаРегламента";
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ПоляВыбора = ПоляВыбора + ",
			|ИдентификаторСообщения,
			|ИдентификаторОтправителя,
			|НомерДокумента";
		Если Не ЕстьОтветнаяПодпись Тогда
			ПоляВыбора = ПоляВыбора + ",
				|ИдентификаторПолучателя,
				|ТипЭлементаРегламента";
		КонецЕсли;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапросаДанныхОбъектовДляОбработки(), "&ПоляВыбора", ПоляВыбора));
	ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхОбъектовВидамиДокументов());
	
	Если ЕстьОтветнаяПодпись Тогда
		ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхДляПроверкиОтветнойПодписи());
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхОбъектовПредыдущимиДокументами());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ДанныеДляОбработки", ДанныеОбъектов.Скопировать(, ПоляВыбора));
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДополнитьДанныеОбъектовВидамиДокументов(ДанныеОбъектов, РезультатыЗапроса[1]);
	
	Если ЕстьОтветнаяПодпись Тогда
		ДополнитьДанныеОбъектовДляПроверкиОтветнойПодписи(ДанныеОбъектов, РезультатыЗапроса[2]);
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ДополнитьДанныеОбъектовПредыдущимиВерсиямиДокументов(ДанныеОбъектов, РезультатыЗапроса[2 + ЕстьОтветнаяПодпись]);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаДанныхОбъектовДляОбработки()
	Возврат
		"ВЫБРАТЬ
		|	&ПоляВыбора
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	&ДанныеДляОбработки КАК ДанныеОбъектов";
КонецФункции

Функция ТекстЗапросаДополненияДанныхОбъектовВидамиДокументов()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ДанныеОбъектов.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ДанныеОбъектов.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|ГДЕ
		|	ДанныеОбъектов.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка)";
КонецФункции

Функция ТекстЗапросаДополненияДанныхДляПроверкиОтветнойПодписи()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ЭтоОтветнаяПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ДанныеОбъектов.ТипЭлементаРегламента = СообщениеЭДО.ТипЭлементаРегламента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ЭтоОтветнаяПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ДанныеОбъектов.ТипЭлементаРегламента = СообщениеЭДО.ТипЭлементаРегламента";
КонецФункции

Функция ТекстЗапросаДополненияДанныхОбъектовПредыдущимиДокументами()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторСообщения = ДокументЭДО.ИдентификаторСвязи
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ИдентификаторОтправителя = ДокументЭДО.ИдентификаторКонтрагента
		|		И ДанныеОбъектов.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|		И ДанныеОбъектов.ИдентификаторСообщения <> """"
		|		И ДанныеОбъектов.НомерДокумента = ДокументЭДО.НомерДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ДокументЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|		И ДанныеОбъектов.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ДанныеОбъектов.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйДокумент УБЫВ";
КонецФункции

// Дополняет данные объекта содержанием информации отправителя.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДополнитьДанныеОбъектаСодержаниемИнформацииОтправителя(ДанныеОбъекта)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И НЕ (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		Возврат;
	КонецЕсли;
	
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ДанныеОбъекта.ОписаниеДанных);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		Если ЗначениеЗаполнено(Содержание.ТипДокумента) Тогда
			Если ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС
				И ОбщегоНазначения.ПодсистемаСуществует(
					"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
				// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
				МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
				МодульЭлектронноеАктированиеЕИС.ПриЗаполненииТипаДокументаИзСодержания(ДанныеОбъекта, Содержание);
				// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			Иначе
				ДанныеОбъекта.ТипДокумента = Содержание.ТипДокумента;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.ПрикладнойТипДокумента) Тогда
			ДанныеОбъекта.ПрикладнойТипДокумента = Содержание.ПрикладнойТипДокумента;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.Получатель.ИНН) И Не ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации",
				Содержание.Получатель.ИНН, Содержание.Получатель.КПП, Содержание.ДатаДокумента);
			Если ЗначениеЗаполнено(Организация) Тогда
				ДанныеОбъекта.Организация = Организация;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.Отправитель.ИНН) Тогда
			
			ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
			ПараметрыПриглашения.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
			ПараметрыПриглашения.ИдентификаторКонтрагента = ДанныеОбъекта.ИдентификаторОтправителя;
			ПараметрыПриглашения.ИНН = Содержание.Отправитель.ИНН;
			ПараметрыПриглашения.КПП = Содержание.Отправитель.КПП;
			
			ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
			ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");

			КонтрагентИзСодержания = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя,
				Содержание.Отправитель.ИНН, Содержание.Отправитель.КПП, Содержание.ДатаДокумента);

			СоздаватьКонтрагентовАвтоматическиБЭД = НастройкиЭДО.СоздаватьКонтрагентовАвтоматически();

			Если Не ЗначениеЗаполнено(КонтрагентИзСодержания) 
				И СоздаватьКонтрагентовАвтоматическиБЭД
				И Не ОбменМеждуСобственнымиОрганизациями Тогда
					
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("ИНН", Содержание.Отправитель.ИНН);
				РеквизитыКонтрагента.Вставить("КПП", Содержание.Отправитель.КПП);
				РеквизитыКонтрагента.Вставить("Наименование", Содержание.Отправитель.Наименование);
				КонтрагентИзСодержания = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
			КонецЕсли;

			Если ЗначениеЗаполнено(КонтрагентИзСодержания) Тогда
				ДанныеОбъекта.Контрагент = КонтрагентИзСодержания;
			КонецЕсли;

		КонецЕсли;
		ДанныеОбъекта.НомерДокумента = Содержание.НомерДокумента;
	Иначе
		Содержание = НовоеСодержаниеСообщения();
		Если ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДокумента) Тогда
			Содержание.НомерДокумента = ДанныеОбъекта.ОписаниеДокумента.Номер;
			Содержание.ДатаДокумента = ДанныеОбъекта.ОписаниеДокумента.Дата;
			Содержание.СуммаДокумента = ДанныеОбъекта.ОписаниеДокумента.Сумма;
		КонецЕсли;
		Содержание.ТипДокумента = ДанныеОбъекта.ТипДокумента;
		Содержание.ТипРегламента = ДанныеОбъекта.ТипРегламента;
	КонецЕсли;
	ДанныеОбъекта.Содержание = Содержание;
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ТипДокумента) И ЗначениеЗаполнено(Содержание.ОтражениеВУчете) Тогда
		Если Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвРК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером;
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвИСРК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером;				
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвЗК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;				
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвИСЗК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером;				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаКомментариемКОтклонениюАннулированию(ДанныеОбъекта)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ
		И НЕ (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.КомментарийСообщения = ФорматыЭДО.ТекстУточнения(ДанныеОбъекта.ОписаниеДанных);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаНомерамиМЧДПоДоверителям(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ Не ЗначениеЗаполнено(ДанныеОбъекта.Содержание) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(
		ДанныеОбъекта.ОписаниеДанных, ДанныеОбъекта.Содержание.Формат);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектовВидамиДокументов(ДанныеОбъектов, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Выборка.ВидДокумента) Тогда
			ДанныеОбъекта.ВидДокумента = Выборка.ВидДокумента;
		Иначе
			ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ДанныеОбъекта.ТипДокумента);
			Если ЗначениеЗаполнено(ДанныеОбъекта.ПрикладнойТипДокумента) Тогда
				ПараметрыПоиска.ПрикладнойТипДокумента = ДанныеОбъекта.ПрикладнойТипДокумента;
			КонецЕсли;
			ДанныеОбъекта.ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектовДляПроверкиОтветнойПодписи(ДанныеОбъектов, РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрисоединенныеФайлыСообщений.Добавить(Выборка.ОсновнойФайл);
	КонецЦикла;
	
	ДвоичныеДанныеФайлов = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений);
	
	Выборка.Сбросить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанные = ДвоичныеДанныеФайлов[Выборка.ОсновнойФайл];
		Если ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		ДанныеОбъекта.ОписаниеДанных = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные = ДвоичныеДанные;
		ДанныеОбъекта.Объект = Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектовПредыдущимиВерсиямиДокументов(ДанныеОбъектов, РезультатЗапроса)
	
	ОбработанныеСтроки = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		ДанныеОбъекта.ПредыдущийДокумент = Выборка.ЭлектронныйДокумент;
		
		ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьПодписиПоОбъектамКонтейнеров(ДанныеОбъектов, МенеджерКриптографии, КонтекстДиагностики)
	
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		ПодписиОсновныхДанных = ПроверитьПодписиДанныхДокумента(ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные,
			ДанныеОбъекта.ПодписиОсновныхДанных, МенеджерКриптографии, КонтекстДиагностики);
		
		ПодписиДополнительныхДанных = ПроверитьПодписиДанныхДокумента(
			ДанныеОбъекта.ОписаниеДополнительныхДанных.ДвоичныеДанные,
			ДанныеОбъекта.ПодписиДополнительныхДанных, МенеджерКриптографии, КонтекстДиагностики);
		
		ПроверенныеПодписи = Новый Структура;
		ПроверенныеПодписи.Вставить("ПодписиОсновныхДанных", ПодписиОсновныхДанных);
		ПроверенныеПодписи.Вставить("ПодписиДополнительныхДанных", ПодписиДополнительныхДанных);
		
		Результат.Вставить(ДанныеОбъекта.ИдентификаторСтроки, ПроверенныеПодписи);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьПодписиДанныхДокумента(ИсходныеДанные, ДанныеПодписей, МенеджерКриптографии, КонтекстДиагностики)
	
	ПроверенныеПодписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеПодписей) Тогда
		Возврат ПроверенныеПодписи;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ИсходныеДанные,
			ДанныеПодписи.ДвоичныеДанные, КонтекстДиагностики);
		СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
		СвойстваПодписи.Подпись = ДанныеПодписи.ДвоичныеДанные;
		СвойстваПодписи.ИмяФайлаПодписи = ДанныеПодписи.ИмяФайла;
		СвойстваПодписи.Вставить("ОписаниеОшибки", РезультатПроверки.ОписаниеОшибки);
		ПроверенныеПодписи.Добавить(СвойстваПодписи);
	КонецЦикла;
	
	Возврат ПроверенныеПодписи;
	
КонецФункции

Процедура ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ТекстОшибки)
	
	ВидОперации = НСтр("ru = 'Распаковка транспортных контейнеров ЭДО'");
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		КриптографияБЭДКлиентСервер.ВидОшибкиКриптография(), ТекстОшибки,
		НСтр("ru = 'Ошибка при получении отпечатков сертификатов.'"));
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	
КонецПроцедуры

Процедура ОбработатьОшибкиПроверкиПодписей(Отпечатки, КонтекстДиагностики)
	
	Если Отпечатки.Клиент.Доступность Или Отпечатки.Сервер.Доступность Или Отпечатки.Облако.Доступность Тогда
		Возврат;
	КонецЕсли;	
	
	Если Отпечатки.Клиент.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Клиент.ТекстОшибки);
	КонецЕсли;	
		
	Если Отпечатки.Сервер.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Сервер.ТекстОшибки);
	КонецЕсли;	
		
	Если Отпечатки.Облако.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Облако.ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов, ПроверенныеПодписи, 
	КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов = Неопределено) Экспорт
	
	ОбработатьОшибкиПроверкиПодписей(ОтпечаткиСертификатов, КонтекстДиагностики);
	
	РезультатЗагрузки = ЗагрузитьДанныеОбъектовКонтейнеров(ДанныеОбъектов, ПроверенныеПодписи, КонтекстДиагностики);
	
	ПроверитьПодписиПоМЧДПослеЗагрузкиДанных(КонтекстДиагностики);
	
	РезультатДействийПоЭДО = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	РезультатДействийПоЭДО.Итог = РезультатЗагрузки.ИтогДействийПоЭДО;
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.СформированныеИзвещения) Тогда
		ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
		ДобавитьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Подписать);
		ДобавитьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке);
		ДобавитьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Отправить);
		ПараметрыВыполнения.ОбъектыДействий.Сообщения = РезультатЗагрузки.СформированныеИзвещения;
		ПараметрыВыполнения.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
		ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполнения, РезультатДействийПоЭДО);
	КонецЕсли;
	
	Результат = НовыйРезультатЗагрузкиДокументов();
	Результат.РезультатДействийПоЭДО = РезультатДействийПоЭДО;
	Результат.КонтекстДиагностики = РезультатДействийПоЭДО.КонтекстДиагностики;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеОбъектовКонтейнеров(ДанныеОбъектов, ПроверенныеПодписи, КонтекстДиагностики)
	
	РезультатЗагрузкиДанных = Новый Структура;
	РезультатЗагрузкиДанных.Вставить("СформированныеИзвещения", Новый Массив);
	РезультатЗагрузкиДанных.Вставить("ИтогДействийПоЭДО",
		ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	
	ДанныеОбъектовПоПакетам = Новый Соответствие;
	ДанныеОбъектовБезПакетов = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторПакета)
			И ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ДанныеОбъектовПакета = ДанныеОбъектовПоПакетам[ДанныеОбъекта.ИдентификаторПакета];
			Если ДанныеОбъектовПакета = Неопределено Тогда
				ДанныеОбъектовПакета = Новый Массив;
				ДанныеОбъектовПоПакетам.Вставить(ДанныеОбъекта.ИдентификаторПакета, ДанныеОбъектовПакета);
			КонецЕсли;
			ДанныеОбъектовПакета.Добавить(ДанныеОбъекта);
		Иначе
			ДанныеОбъектовБезПакетов.Добавить(ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОбъектовПоПакетам) Тогда
		
		Для Каждого ДанныеОбъектовПакета Из ДанныеОбъектовПоПакетам Цикл
			
			ЗагрузитьДанныеОбъектовПакета(ДанныеОбъектовПакета, ПроверенныеПодписи,
				КонтекстДиагностики, РезультатЗагрузкиДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъектовБезПакетов) Тогда
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовБезПакетов Цикл
			
			ЗагрузитьДанныеОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗагрузкиДанных;
	
КонецФункции

// Загружает данные объекта в информационную базу
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузкиДанных - Структура
//  * СформированныеИзвещения - Массив Из ДокументСсылка.СообщениеЭДО
//  * ИтогДействийПоЭДО - см. НовыйИтогВыполненияДействийПоЭДО
//
Процедура ЗагрузитьДанныеОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаПриЗагрузке(ДанныеОбъекта);
		
		РезультатЗагрузкиСообщения = ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи,
			КонтекстДиагностики, РезультатЗагрузкиДанных);
		
		Если ДанныеОбъекта.Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Не удалось загрузить электронный документ по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатЗагрузкиДанных.ИтогДействийПоЭДО, Перечисления.ДействияПоЭДО.Загрузить,
		РезультатЗагрузкиСообщения.ПараметрыДокумента.Ссылка);
	
	ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики);
	
КонецПроцедуры

// Загружает данные объектов пакета в информационную базу
// 
// Параметры:
// 
//  ДанныеОбъектовПакета - Соответствие из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Массив из СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузки - Структура
//  * СформированныеИзвещения - Массив Из ДокументСсылка.СообщениеЭДО
//  * ИтогДействийПоЭДО - см. НовыйИтогВыполненияДействийПоЭДО
//
Процедура ЗагрузитьДанныеОбъектовПакета(ДанныеОбъектовПакета, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузки)
	
	РезультатыЗагрузкиСообщенийПакета = Новый Массив;
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	Отказ = Ложь;
	ЭтоПовторноЗагружаемоеСообщение = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		СвойстваДокументовДляОписанияПакета = НовыеСвойстваДокументовДляОписанияПакетов();
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовПакета.Значение Цикл
			
			Если ДанныеОбъекта.Распакован Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатЗагрузкиСообщения = ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи,
				КонтекстДиагностики, РезультатЗагрузки);
				
			Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
				ЭтоПовторноЗагружаемоеСообщение = Истина;
			КонецЕсли;
				
			Если ДанныеОбъекта.Отказ Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			РезультатыЗагрузкиСообщенийПакета.Добавить(РезультатЗагрузкиСообщения);
			
			ТипЭлементаРегламента = РезультатЗагрузкиСообщения.СообщениеОбъект.ТипЭлементаРегламента;
			Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				ЗаполнитьЗначенияСвойств(СвойстваДокументовДляОписанияПакета.Добавить(),
					РезультатЗагрузкиСообщения.ПараметрыДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ПакетыДокументовЭДО.ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействияПоПакету(ДанныеОбъектовПакета.Ключ, Действие, ТекстОшибки, КонтекстДиагностики);
		Возврат;
	КонецПопытки;
	
	Если ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовПакета.Значение Цикл
			ДанныеОбъекта.Отказ = Истина;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РезультатЗагрузкиСообщения Из РезультатыЗагрузкиСообщенийПакета Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатЗагрузки.ИтогДействийПоЭДО, Действие,
		РезультатЗагрузкиСообщения.ПараметрыДокумента.Ссылка);
		ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйРезультатЗагрузкиСообщения()
	Результат = Новый Структура;
	Результат.Вставить("ЭтоНовыйДокумент", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ПараметрыДокумента", Неопределено);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ИзвещениеОПолучении", Документы.СообщениеЭДО.ПустаяСсылка());
	Результат.Вставить("СообщенияПоДокументу", Новый ТаблицаЗначений);
	Результат.Вставить("ИсправленнаяВерсияДокумента", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ИсправленнаяВерсияДокумента", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ОписаниеДанных", Неопределено);
	Результат.Вставить("ОписаниеДополнительныхДанных", Неопределено);
	Возврат Результат;
КонецФункции

// Загружает сообщение в информационную базу по данным объекта
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузкиДанных - Структура
//  * СформированныеИзвещения - Массив Из ДокументСсылка.СообщениеЭДО
//  * ИтогДействийПоЭДО - см. НовыйИтогВыполненияДействийПоЭДО
//
// Возвращаемое значение:
// Структура - см. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных)
	
	Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.Ошибка Тогда
		
		Результат = ЗагрузитьОшибкуПередачи(ДанныеОбъекта, КонтекстДиагностики);
		
	ИначеЕсли ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
		
		Результат = ЗагрузитьОтветнуюПодпись(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
		
	Иначе
		
		Результат = ЗагрузитьСообщениеДокумента(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ДанныеОбъекта.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		
		ШаблонСообщения = 
			НСтр("ru = 'Распаковка транспортного контейнера отменена, %1 уже существует в документообороте %2'");
		
		ПредставлениеЭлементаРегламента = ДанныеОбъекта.ТипЭлементаРегламента;
		Если ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
			ПредставлениеЭлементаРегламента = НСтр("ru = 'Ответная подпись'");
		КонецЕсли;
	
		Комментарий = СтрШаблон(
			ШаблонСообщения, 
			ПредставлениеЭлементаРегламента, 
			ДанныеОбъекта.ИдентификаторДокументооборота);
		
		ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(
			ДанныеОбъекта.ТранспортныйКонтейнер,
			Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен,
			КонтекстДиагностики,
			Комментарий);
			
		Возврат Результат;
			
	КонецЕсли;
	
	ТребуетсяПереопределитьДанныеСообщенияОператораПоУчастникамЭДО = Не ЗначениеЗаполнено(ДанныеОбъекта.Контрагент);	

	Если ТребуетсяПереопределитьДанныеСообщенияОператораПоУчастникамЭДО Тогда
		ДанныеОбъекта.Контрагент = Результат.ПараметрыДокумента.Контрагент; 
		ДанныеОбъекта.Организация = Результат.ПараметрыДокумента.Организация;
		ДанныеОбъекта.ДоговорКонтрагента = Результат.ПараметрыДокумента.ДоговорКонтрагента;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторОтправителя) Тогда
		ДанныеОбъекта.ИдентификаторОтправителя = Результат.ПараметрыДокумента.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Если (Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован) Тогда
		
		ОтправитьНаОзнакомление(Результат.ПараметрыДокумента.Ссылка);
		
	ИначеЕсли Результат.ПараметрыДокумента.НаОзнакомлении Тогда
		
		ВернутьСОзнакомления(Результат.ПараметрыДокумента.Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИзвещениеОПолучении) Тогда
		РезультатЗагрузкиДанных.СформированныеИзвещения.Добавить(Результат.ИзвещениеОПолучении);
	КонецЕсли;
	
	Сообщение = Документы.СообщениеЭДО.ПустаяСсылка();
	Если Результат.СообщениеОбъект <> Неопределено Тогда
		Сообщение = Результат.СообщениеОбъект.Ссылка;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеСообщения(Сообщение, ДанныеОбъекта, КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьОшибкуПередачи(ДанныеОбъекта, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ОшибкаПередачи) Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Отсутствует информация об ошибке по документообороту с идентификатором %1'"),
			ДанныеОбъекта.ИдентификаторДокументооборота);
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору();
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
	Если Не ПараметрыДокумента.Следующий() Тогда
		
		ДанныеОбъекта.Отказ = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден электронный документ владелец по документообороту с идентификатором %1'"),
			ДанныеОбъекта.ИдентификаторДокументооборота);
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
			Если ЗначениеЗаполнено(ДанныеОбъекта.ОшибкаПередачи.Описание) Тогда
				ТекстОшибки =  ДанныеОбъекта.ОшибкаПередачи.Описание;
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось определить контрагента по идентификатору: %1'"),
					ДанныеОбъекта.ИдентификаторПолучателя);
			КонецЕсли;
			СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		КонецЕсли;
				
		Возврат Результат;
		
	КонецЕсли;
	
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	ДокументОбъект = ПараметрыДокумента.Ссылка.ПолучитьОбъект();
	ДокументОбъект.Остановлен = Истина;
	ДокументОбъект.ПричинаОстановки = ?(ДанныеОбъекта.ОшибкаПередачи.Блокирующая,
		Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая, 
		Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
	
	ДатаИзменения = ТекущаяДатаСеанса();
	
	НайденноеСообщение = СостоянияСообщений.Найти(ДанныеОбъекта.ТипЭлементаРегламента, "ТипЭлементаРегламента");
	Если НайденноеСообщение <> Неопределено Тогда
		СообщениеОбъект = НайденноеСообщение.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
		СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзменения;
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		НайденноеСообщение.Статус = СообщениеОбъект.Статус;
		НайденноеСообщение.Состояние = СообщениеОбъект.Состояние;
	Иначе
		НайденноеСообщение = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			"ТипЭлементаРегламента");
	КонецЕсли;
	
	УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
	
	Комментарий = ДанныеОбъекта.ОшибкаПередачи.Описание;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики,,Комментарий);
	
	ЗаписатьДействиеВЖурнал(Перечисления.ДействияПоЭДО.Загрузить, ДокументОбъект, СостояниеДокумента,
		ДатаИзменения, НайденноеСообщение, Комментарий);
	
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщенияПоДокументу = СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Возврат Результат;
	
КонецФункции

// Загружает ответную подпись в информационную базу.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьОтветнуюПодпись(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	Сообщение = ДанныеОбъекта.Объект;
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует электронный документ для загрузки ответной подписи.'");
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ОтветныеПодписи = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	Если ОтветныеПодписи = Неопределено Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует ответные подписи для загрузки.'");
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
		Или ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
		ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
		Действие = Перечисления.ДействияПоЭДО.Загрузить;
		ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики);
		Результат.Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат Результат;
	КонецЕсли;
	
	Если СообщениеОбъект.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ЕстьНовыеПодписи = Ложь;
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СообщениеОбъект.ОсновнойФайл);
	Для Каждого СвойстваПодписи Из ОтветныеПодписи.ПодписиОсновныхДанных Цикл
		Если ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи) Тогда
			ЕстьНовыеПодписи = Истина;
			ЭлектроннаяПодпись.ДобавитьПодпись(СообщениеОбъект.ОсновнойФайл, СвойстваПодписи);
			
			Доверитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
			СведенияОДоверителе = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
			
			Если ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(
				СведенияОДоверителе.ИНН, СвойстваПодписи.Сертификат) Тогда
				ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
				МашиночитаемыеДоверенности.ВключитьПроверкуПодписи(СообщениеОбъект.ОсновнойФайл, ХешПодписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНовыеПодписи Тогда
		ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору());
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
	ПараметрыДокумента.Следующий();
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса;
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
	СообщениеОбъект.Записать();
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[2]);
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
	
	УстановитьКлючевыеДатыПриЗагрузкеОтветнойПодписи(СообщениеОбъект, ТекущаяДатаСеанса);
	
	ЗаписатьДействиеВЖурнал(Перечисления.ДействияПоЭДО.Загрузить, ПараметрыДокумента, СостояниеДокумента,
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщениеОбъект = СообщениеОбъект;
	Результат.СообщенияПоДокументу = СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Возврат Результат;
	
КонецФункции

// Загружает сообщение в информационную базу.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьСообщениеДокумента(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	ПараметрыЗагрузки = ПараметрыЗагрузкиСообщения(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
	
	Если ДанныеОбъекта.Отказ
		Или ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСообщения = ПараметрыЗагрузки.ОписаниеСообщения;
	ПараметрыДокумента = ПараметрыЗагрузки.ПараметрыДокумента;
	
	Если ПараметрыЗагрузки.ЭтоНовыйДокумент Тогда
		ПроверитьДанныеДокументаПередЗагрузкой(ПараметрыДокумента, ОписаниеСообщения);
		
		ДокументОбъект = СоздатьВходящийДокумент(ПараметрыДокумента, ОписаниеСообщения,
			ПараметрыЗагрузки.ИдентификаторыОснований);
		ПараметрыДокумента.Ссылка = ДокументОбъект.Ссылка;
		ПараметрыДокумента.Дата = ДокументОбъект.Дата;
		ДатаИзмененияСостояния = ДокументОбъект.Дата;
	Иначе
		ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	ДобавитьПодписиПриЗагрузкеСообщения(СообщениеОбъект, ПараметрыЗагрузки, ДанныеОбъекта);
	
	ДобавитьМашиночитаемыеДоверенности(СообщениеОбъект.ОсновнойФайл,
		ДанныеОбъекта.Содержание, ДанныеОбъекта.НомераМЧД, ДанныеОбъекта.Доверенности);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		ИЛИ ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		ИЛИ (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоПрерывающееУОУ(ОписаниеСообщения.ТипЭлементаРегламента))
		Тогда
		УстановитьСостояниеХранение(ПараметрыЗагрузки.СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
	ИначеЕсли (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоНеПрерывающееУОУ(ОписаниеСообщения.ТипЭлементаРегламента)) Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ОтметитьИсправлениеДокумента(ПараметрыДокумента.Ссылка, Ложь);
			ПараметрыДокумента.Исправлен = Ложь;			
	ИначеЕсли ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
		ПересчитатьСостоянияСообщений(ПараметрыЗагрузки.СостоянияСообщений, ПараметрыДокумента);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), СообщениеОбъект);
	
	Если ПараметрыЗагрузки.ЭтоНовыйДокумент Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторыОснований)
			И ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
			ОбновитьСвязанныеДокументы(ОписаниеСообщения.Данные.Содержание.ТипДокумента,
				ДокументОбъект.ИдентификаторыОснований.Выгрузить(), ПараметрыЗагрузки.Действие,
				КонтекстДиагностики, ПараметрыЗагрузки.ЭтоВходящийЭДО);
		КонецЕсли;
		
		ДополненияСостоянийЭДО = Неопределено;
		Если СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
				СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
			ПараметрыЗагрузки.ОповещенияПодписантов.Добавить(ПараметрыОповещенияПодписантов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ПредыдущийДокумент) Тогда
			РезультатИсправления = ИсправитьПредыдущуюВерсиюДокумента(ДанныеОбъекта.ПредыдущийДокумент,
				ПараметрыДокумента, КонтекстДиагностики);
			Если РезультатИсправления Тогда 
				Результат.ИсправленнаяВерсияДокумента = ДанныеОбъекта.ПредыдущийДокумент;
			КонецЕсли;
		КонецЕсли;
		
		СостояниеДокумента = ОбновитьСостояниеДокумента(ПараметрыДокумента, ПараметрыЗагрузки.СостоянияСообщений,
			ДополненияСостоянийЭДО, ДатаИзмененияСостояния, КонтекстДиагностики);
		
		ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеНовогоЭлектронногоДокумента(ПараметрыДокумента.Ссылка, 
			ПараметрыДокумента.ВидДокумента, СостояниеДокумента, Результат.ИсправленнаяВерсияДокумента,
			КонтекстДиагностики);
		
	Иначе
		Комментарий = "";
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			Комментарий = ДанныеОбъекта.КомментарийСообщения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Комментарий) И ЗначениеЗаполнено(ПараметрыЗагрузки.КомментарийСостояния) Тогда
			Комментарий = ПараметрыЗагрузки.КомментарийСостояния;
		КонецЕсли;
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента,
			ПараметрыЗагрузки.СостоянияСообщений, ДатаИзмененияСостояния, КонтекстДиагностики,, Комментарий);
	КонецЕсли;
	
	ЗаписатьДействиеВЖурнал(ПараметрыЗагрузки.Действие, ПараметрыДокумента, СостояниеДокумента,
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, ДанныеОбъекта.КомментарийСообщения);
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ТипИзвещения) Тогда
		ИзвещениеОбъект = СоздатьИзвещениеОПолучении(СообщениеОбъект, ПараметрыЗагрузки, КонтекстДиагностики,
			ДанныеОбъекта.КомментарийСообщения);
		Если ИзвещениеОбъект <> Неопределено Тогда
			Результат.ИзвещениеОПолучении = ИзвещениеОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбъекта.Объект = СообщениеОбъект.Ссылка;
	
	Результат.ЭтоНовыйДокумент = ПараметрыЗагрузки.ЭтоНовыйДокумент;
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщениеОбъект = СообщениеОбъект;
	Результат.СообщенияПоДокументу = ПараметрыЗагрузки.СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новые параметры документа для загрузки:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Дата - Дата
//  * ИдентификаторДокументооборота - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторСвязи - Строка
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ОбменБезПодписи - Булево
//  * ТребуетсяИзвещение - Булево
//  * ТребуетсяПодтверждение - Булево
//  * Исправлен - Булево
//  * НаОзнакомлении - Булево
//  * Остановлен - Булево
//  * ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * Ответственный - Неопределено,ОпределяемыйТип.Пользователь
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
Функция НовыеПараметрыДокументаДляЗагрузки()
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Параметры.Вставить("Дата", '00010101');
	Параметры.Вставить("ИдентификаторДокументооборота", "");
	Параметры.Вставить("ИдентификаторОрганизации", "");
	Параметры.Вставить("ИдентификаторКонтрагента", "");
	Параметры.Вставить("ИдентификаторСвязи", "");
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("ДоговорКонтрагента", Неопределено);
	Параметры.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Параметры.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	Параметры.Вставить("ОбменБезПодписи", Ложь);
	Параметры.Вставить("ТребуетсяИзвещение", Ложь);
	Параметры.Вставить("ТребуетсяПодтверждение", Ложь);
	Параметры.Вставить("Исправлен", Ложь);
	Параметры.Вставить("НаОзнакомлении", Ложь);
	Параметры.Вставить("Остановлен", Ложь);
	Параметры.Вставить("ПричинаОстановки", Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка());
	Параметры.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	Параметры.Вставить("Ответственный", Неопределено);
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Возврат Параметры;
КонецФункции

// Возвращает параметры загрузки сообщения.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
// 	Структура:
// 	* Действие - ПеречислениеСсылка.ДействияПоЭДО
// 	* ОписаниеСообщения - см. НовоеОписаниеСообщения
// 	* ПодписиОсновныхДанных - Массив Из Структура см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// 	* ПодписиДополнительныхДанных - Массив Из Структура см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// 	* ЭтоНовыйДокумент - Булево
// 	* ЭтоВходящийЭДО - Булево
// 	* ПараметрыДокумента - см. НовыеПараметрыДокументаДляЗагрузки
// 	* СостоянияСообщений - ТаблицаЗначений - Таблица состояний сообщений из колонок:
// 	  ** Ссылка - ДокументСсылка.СообщениеЭДО
// 	  ** Дата - Дата
// 	  ** ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 	  ** Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
// 	  ** Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// 	  ** Направление - ПеречислениеСсылка.НаправленияЭДО
// 	* ТипИзвещения - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 	* СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// 	* КомментарийСостояния - Строка
// 	* ОповещенияПодписантов - Массив Из Структура:
// 	  ** СообщениеОбъект - см. СоздатьСообщение
// 	  ** ТаблицаПодписания - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
// 	* ИдентификаторыОснований - см. ИдентификаторыОснованийПоДаннымСообщения
// 	* ДанныеУчастниковЭДО - см. НовыеДанныеУчастниковЭДО 
//
Функция ПараметрыЗагрузкиСообщения(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ПараметрыДокумента = НовыеПараметрыДокументаДляЗагрузки();
	
	Результат = Новый Структура;
	Результат.Вставить("Действие", Перечисления.ДействияПоЭДО.Загрузить);
	Результат.Вставить("ОписаниеСообщения", ОписаниеСообщения);
	Результат.Вставить("ПодписиОсновныхДанных");
	Результат.Вставить("ПодписиДополнительныхДанных");
	Результат.Вставить("ЭтоНовыйДокумент", Ложь);
	Результат.Вставить("ЭтоВходящийЭДО", Ложь);
	Результат.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	Результат.Вставить("СостоянияСообщений");
	Результат.Вставить("ТипИзвещения", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("КомментарийСостояния", "");
	Результат.Вставить("ОповещенияПодписантов", Новый Массив);
	Результат.Вставить("ИдентификаторыОснований");
	Результат.Вставить("ДанныеУчастниковЭДО", НовыеДанныеУчастниковЭДО());
	
	Запрос = Новый Запрос;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору());
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	
	ТекстыЗапроса.Добавить(ТекстЗапросаУчастниковЭДОПоИдентификаторам());
	
	ИдентификаторыОснований = ИдентификаторыОснованийПоДаннымСообщения(ДанныеОбъекта);
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаСверткиИдентификаторовОснований());
		Запрос.УстановитьПараметр("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.ЭтоНовыйДокумент = РезультатыЗапроса[0].Пустой();
	
	Результат.СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	ЭтоДубль = Результат.СостоянияСообщений.Найти(ДанныеОбъекта.ТипЭлементаРегламента,
		"ТипЭлементаРегламента") <> Неопределено;
	
	Если ЭтоДубль
		И (ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		ИЛИ ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ)
		И ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДанных.ИмяФайла) Тогда
		
		СообщенияДокумента = Результат.СостоянияСообщений.ВыгрузитьКолонку("Ссылка");
		ЕстьСообщенияПоИмениФайла = ЕстьСообщенияПоИмениФайла(СообщенияДокумента, ДанныеОбъекта.ОписаниеДанных.ИмяФайла);
		Если Не ЕстьСообщенияПоИмениФайла Тогда
			ЭтоДубль = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
		
	// Для ЭПД исправления титулов - не дубли
	Если ЭтоДубль И (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ДанныеОбъекта.ТипРегламента)) Тогда
		ЭтоДубль = Ложь;
	КонецЕсли;
	
	Если ЭтоДубль Тогда
		ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСообщения.ТипЭлементаРегламента = ДанныеОбъекта.ТипЭлементаРегламента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Входящий;
	ОписаниеСообщения.ВидСообщения = ДанныеОбъекта.ВидДокумента;
	ОписаниеСообщения.ДополнительнаяИнформация = ДанныеОбъекта.СопроводительнаяЗаписка;
	ОписаниеСообщения.Данные.Документ = ДанныеОбъекта.ОписаниеДанных;
	Если ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДополнительныхДанных) Тогда
		ОписаниеСообщения.Данные.ДополнительныйДокумент = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		Результат.ИдентификаторыОснований = РезультатыЗапроса[4].Выгрузить();
	КонецЕсли;
	
	ПодписиОбъекта = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	Если ПодписиОбъекта <> Неопределено Тогда
		Результат.ПодписиОсновныхДанных = ПодписиОбъекта.ПодписиОсновныхДанных;
		Результат.ПодписиДополнительныхДанных = ПодписиОбъекта.ПодписиДополнительныхДанных;
	Иначе
		Результат.ПодписиОсновныхДанных = СвойстваПодписейДанныхДокумента(ДанныеОбъекта.ПодписиОсновныхДанных);
		Результат.ПодписиДополнительныхДанных = СвойстваПодписейДанныхДокумента(
			ДанныеОбъекта.ПодписиДополнительныхДанных);
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		Или (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		
		ОписаниеСообщения.Данные.Содержание = ДанныеОбъекта.Содержание;
		
		Если Не Результат.ЭтоНовыйДокумент Тогда
			Выборка = РезультатыЗапроса[0].Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
		КонецЕсли;
		
		ПараметрыДокумента.ИдентификаторДокументооборота = ДанныеОбъекта.ИдентификаторДокументооборота;
		ПараметрыДокумента.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
		ПараметрыДокумента.ИдентификаторКонтрагента = ДанныеОбъекта.ИдентификаторОтправителя;
		ПараметрыДокумента.ИдентификаторСвязи = ДанныеОбъекта.ИдентификаторСообщения;
		ПараметрыДокумента.Организация = ДанныеОбъекта.Организация;
		ПараметрыДокумента.Контрагент = ДанныеОбъекта.Контрагент;
		ПараметрыДокумента.ДоговорКонтрагента = ДанныеОбъекта.ДоговорКонтрагента;
		ПараметрыДокумента.СпособОбмена = ДанныеОбъекта.СпособОбмена;
		ПараметрыДокумента.ВидДокумента = ДанныеОбъекта.ВидДокумента;
		ПараметрыДокумента.ТипДокумента = ДанныеОбъекта.ТипДокумента;
		ПараметрыДокумента.ТипРегламента = ДанныеОбъекта.ТипРегламента;
		ПараметрыДокумента.ОбменБезПодписи = Не ЗначениеЗаполнено(ДанныеОбъекта.ПодписиОсновныхДанных);
		ПараметрыДокумента.ТребуетсяИзвещение = ДанныеОбъекта.ТребуетсяИзвещение;
		Если ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура 
			ИЛИ ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
			ПараметрыДокумента.ТребуетсяПодтверждение = Ложь;
		Иначе
			ПараметрыДокумента.ТребуетсяПодтверждение = ДанныеОбъекта.ТребуетсяПодтверждение;
		КонецЕсли;
		
		Если МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента) Тогда
			Выборка = РезультатыЗапроса[0].Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ДанныеОбъекта.СпособОбмена) Тогда
				МодульЭлектронноеАктированиеЕИС.ПриЗаполненииПараметровДокументаИнформацииОтправителя(
					ПараметрыДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Результат.ЭтоВходящийЭДО = Истина;
		
	Иначе
		
		Если Результат.ЭтоНовыйДокумент Тогда
			ДанныеОбъекта.Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден ЭлектронныйДокумент по идентификатору %1'"),
				ДанныеОбъекта.ИдентификаторДокументооборота);
			СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
		Результат.ЭтоВходящийЭДО = ЭтоВходящийЭДО(Выборка.Ссылка);
		Результат.КомментарийСостояния = Выборка.КомментарийСостояния;

		Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			ОписаниеСообщения.ВидСообщения = Выборка.ВидДокумента;
		ИначеЕсли Не ЗначениеЗаполнено(ОписаниеСообщения.ВидСообщения) Тогда
			ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ДанныеОбъекта.ТипДокумента);
			ОписаниеСообщения.ВидСообщения = НайтиСоздатьВидДокумента(ПараметрыПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ТипИзвещения = РегламентыЭДО.ТипИзвещенияДляЭлементаРегламента(
		ОписаниеСообщения.ТипЭлементаРегламента, ПараметрыДокумента, Результат.ЭтоВходящийЭДО);
	
	ЗаполнитьЗначенияСвойств(Результат.ДанныеУчастниковЭДО, ПараметрыДокумента);
	Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
		ВыборкаУчастниковЭДО = РезультатыЗапроса[2].Выбрать();
		Если ВыборкаУчастниковЭДО.Следующий() Тогда
			Результат.ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
			Результат.ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ДанныеОбъекта.ТипРегламента) Тогда
		МодульОбменСГИСЭПД.УточнитьПараметрыЗагрузкиСообщения(Результат, ДанныеОбъекта);	
	КонецЕсли;

	
	Возврат Результат;
	
КонецФункции

// Добавляет подписи при загрузке сообщения.
// 
// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО - Сообщение объект
//  ПараметрыЗагрузки - См. ПараметрыЗагрузкиСообщения
//  ДанныеОбъекта - См. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДобавитьПодписиПриЗагрузкеСообщения(СообщениеОбъект, ПараметрыЗагрузки, ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.ПодписиОсновныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Содержание)
		И ЗначениеЗаполнено(ДанныеОбъекта.Содержание.Отправитель) Тогда
		ИННДоверителя = ДанныеОбъекта.Содержание.Отправитель.ИНН;
	Иначе
		СведенияОДоверителе = ИнтеграцияЭДО.ДанныеЮрФизЛица(ПараметрыЗагрузки.ПараметрыДокумента.Контрагент);
		ИННДоверителя = СведенияОДоверителе.ИНН;
	КонецЕсли;
	
	Для Каждого СвойстваПодписи Из ПараметрыЗагрузки.ПодписиОсновныхДанных Цикл
		
		СвойстваПодписи.ПодписанныйОбъект = СообщениеОбъект.ОсновнойФайл;
		
		ЭлектроннаяПодпись.ДобавитьПодпись(СообщениеОбъект.ОсновнойФайл, СвойстваПодписи);
		
		Если ДанныеОбъекта.ДоверенностьВерна <> Неопределено Тогда
			МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиМЧД(
				СообщениеОбъект.ОсновнойФайл, СвойстваПодписи.Отпечаток,
				ДанныеОбъекта.Карточка.ДоверенностьВерна);
		КонецЕсли;
		
		Если ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, СвойстваПодписи.Сертификат) Тогда
			ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
			МашиночитаемыеДоверенности.ВключитьПроверкуПодписи(СообщениеОбъект.ОсновнойФайл, ХешПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики)
	
	СостояниеДокумента = РезультатЗагрузкиСообщения.СостояниеДокумента;
	ПараметрыДокумента = РезультатЗагрузкиСообщения.ПараметрыДокумента;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(
			ПараметрыДокумента.Ссылка, КонтекстДиагностики);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			ПараметрыДокумента.Ссылка, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если РезультатЗагрузкиСообщения.СообщениеОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузкиСообщения.ЭтоНовыйДокумент Тогда
		ЗагруженныйДокумент = НовыеСведенияЗагруженногоДокумента();
		ЗаполнитьСведенияЗагруженногоДокумента(ЗагруженныйДокумент, РезультатЗагрузкиСообщения);
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ПараметрыДокумента.ТипДокумента) Тогда
			ЗагруженныйДокумент = НовыеСведенияЗагруженногоДокумента();
			ЗаполнитьСведенияЗагруженногоДокумента(ЗагруженныйДокумент, РезультатЗагрузкиСообщения);
			ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики);
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	ТипДокумента = ПараметрыДокумента.ТипДокумента;
	ТипЭлементаРегламента = РезультатЗагрузкиСообщения.СообщениеОбъект.ТипЭлементаРегламента;
	
	Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура)
		И (ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП) Тогда
		
		ДокументыПодтверждения = Новый ТаблицаЗначений;
		ДокументыПодтверждения.Колонки.Добавить("ТипЭлементаРегламента",
			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
		ДокументыПодтверждения.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , ,
			Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ДокументыПодтверждения.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаТаблицы Из РезультатЗагрузкиСообщения.СообщенияПоДокументу Цикл
			
			Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП Тогда
				
				НоваяСтрока = ДокументыПодтверждения.Добавить();
				НоваяСтрока.ТипЭлементаРегламента = СтрокаТаблицы.ТипЭлементаРегламента;
				НоваяСтрока.Дата = СтрокаТаблицы.Дата;
				НоваяСтрока.Текущий = ТипЭлементаРегламента = СтрокаТаблицы.ТипЭлементаРегламента;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ПараметрыДокумента.Ссылка,
			ДокументыПодтверждения, КонтекстДиагностики);
			
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
			И ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(
			ПараметрыДокумента.Ссылка, РезультатЗагрузкиСообщения.ОписаниеДанных, КонтекстДиагностики);		
			
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваПодписейДанныхДокумента(ДанныеПодписей)
	
	Результат = Новый Массив;
	Если Не ЗначениеЗаполнено(ДанныеПодписей) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		СвойстваПодписи = КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи();
		СвойстваПодписи.Подпись = ДанныеПодписи.ДвоичныеДанные;
		СвойстваПодписи.ИмяФайлаПодписи = ДанныеПодписи.ИмяФайла;
		Результат.Добавить(СвойстваПодписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыОснованийПоДаннымСообщения(ДанныеСообщения)
	
	Если ДанныеСообщения.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ Не ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыСообщенийОснований)
			И Не ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыДокументооборотовОснований) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТиповСТрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ИдентификаторыОснований = Новый ТаблицаЗначений;
	ИдентификаторыОснований.Колонки.Добавить("ИдентификаторСвязи", ОписаниеТиповСТрока100);
	ИдентификаторыОснований.Колонки.Добавить("ИдентификаторДокументооборота", ОписаниеТиповСТрока100);
	
	Если ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыСообщенийОснований) Тогда
		Для Каждого ИдентификаторСообщения Из ДанныеСообщения.ИдентификаторыСообщенийОснований Цикл
			ИдентификаторыОснований.Добавить().ИдентификаторСвязи = ИдентификаторСообщения;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыДокументооборотовОснований) Тогда
		Для Каждого ИдентификаторДокументооборота Из ДанныеСообщения.ИдентификаторыДокументооборотовОснований Цикл
			ИдентификаторыОснований.Добавить().ИдентификаторДокументооборота = ИдентификаторДокументооборота;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыОснований;
	
КонецФункции

Функция ТекстЗапросаСверткиИдентификаторовОснований()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИдентификаторыОснований.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ИдентификаторыОснований.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	&ИдентификаторыОснований КАК ИдентификаторыОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторСвязи, ВТ_ИдентификаторыОснований.ИдентификаторСвязи) КАК ИдентификаторСвязи,
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторДокументооборота, ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота) КАК
		|		ИдентификаторДокументооборота
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|ГДЕ
		|	ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторСвязи, ВТ_ИдентификаторыОснований.ИдентификаторСвязи) КАК ИдентификаторСвязи,
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторДокументооборота, ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота) КАК
		|		ИдентификаторДокументооборота
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
		|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|ГДЕ
		|	ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|	И ВЫБОР
		|		КОГДА ДокументЭДО.ИдентификаторДокументооборота ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			НЕ ДокументЭДО.ИдентификаторДокументооборота В
		|				(ВЫБРАТЬ
		|					ИдентификаторДокументооборота
		|				ИЗ
		|					ВТ_ИдентификаторыОснований
		|				ГДЕ
		|					ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """")
		|	КОНЕЦ";
		
	Возврат ТекстЗапроса;
		
КонецФункции

Функция СоздатьВходящийДокумент(ПараметрыФормирования, ОписаниеСообщения, ИдентификаторыОснований = Неопределено)
	
	ДокументОбъект = Документы.ЭлектронныйДокументВходящийЭДО.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ДатаПолучения = ДокументОбъект.Дата;
	ДокументОбъект.ИдентификаторДокументооборота = ПараметрыФормирования.ИдентификаторДокументооборота;
	ДокументОбъект.ИдентификаторОрганизации = ПараметрыФормирования.ИдентификаторОрганизации;
	ДокументОбъект.ИдентификаторКонтрагента = ПараметрыФормирования.ИдентификаторКонтрагента;
	ДокументОбъект.ИдентификаторСвязи = ПараметрыФормирования.ИдентификаторСвязи;
	ДокументОбъект.Организация = ПараметрыФормирования.Организация;
	ДокументОбъект.Контрагент = ПараметрыФормирования.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = ПараметрыФормирования.ДоговорКонтрагента;
	ДокументОбъект.СпособОбмена = ПараметрыФормирования.СпособОбмена;
	ДокументОбъект.ТипРегламента = ПараметрыФормирования.ТипРегламента;
	ДокументОбъект.ОбменБезПодписи = ПараметрыФормирования.ОбменБезПодписи;
	ДокументОбъект.ТребуетсяИзвещение = ПараметрыФормирования.ТребуетсяИзвещение;
	ДокументОбъект.ТребуетсяПодтверждение = ПараметрыФормирования.ТребуетсяПодтверждение;
	ДокументОбъект.Ответственный = ИнтеграцияЭДО.ОтветственныйПоДокументуЭДО(
		ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
	
	ДокументОбъект.ВидДокумента = ОписаниеСообщения.ВидСообщения;
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
		СодержаниеСообщения = ОписаниеСообщения.Данные.Содержание;
		ДокументОбъект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
		ДокументОбъект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
		ДокументОбъект.СуммаДокумента = СодержаниеСообщения.СуммаДокумента;
		ДокументОбъект.СодержитМаркируемыеТовары = СодержаниеСообщения.ЕстьМаркировка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыОснований, ДокументОбъект.ИдентификаторыОснований);
	КонецЕсли;
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения входящего электронного документа'");
	КонецЕсли;
	
	ДокументОбъект.Записать();
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаполнитьСведенияЗагруженногоДокумента(Сведения, РезультатЗагрузкиСообщения)
	ПараметрыДокумента = РезультатЗагрузкиСообщения.ПараметрыДокумента;
	Сведения.ЭлектронныйДокумент = ПараметрыДокумента.Ссылка;
	Сведения.ИсправленнаяВерсияДокумента = РезультатЗагрузкиСообщения.ИсправленнаяВерсияДокумента;
	Сведения.ВидДокумента = ПараметрыДокумента.ВидДокумента;
	Сведения.ТипДокумента = ПараметрыДокумента.ТипДокумента;
	Сведения.Организация = ПараметрыДокумента.Организация;
	Сведения.Контрагент = ПараметрыДокумента.Контрагент;
	Сведения.ИдентификаторОтправителя = ПараметрыДокумента.ИдентификаторКонтрагента;
	Сведения.ИдентификаторПолучателя = ПараметрыДокумента.ИдентификаторОрганизации;
	Сведения.ОписаниеДанных = РезультатЗагрузкиСообщения.ОписаниеДанных;
	Сведения.ОписаниеДополнительныхДанных = РезультатЗагрузкиСообщения.ОписаниеДополнительныхДанных;
КонецПроцедуры

Функция СоздатьИзвещениеОПолучении(Основание, ПараметрыЗагрузки, КонтекстДиагностики, КомментарийСостояния = "")
	
	СвойстваОсновногоФайла = СвойстваФайлаОснованияСлужебногоДокумента();
	СвойстваОсновногоФайла.Ссылка = Основание.ОсновнойФайл;
	СвойстваОсновногоФайла.ПолноеИмяФайла = ПараметрыЗагрузки.ОписаниеСообщения.Данные.Документ.ИмяФайла;
	СвойстваОсновногоФайла.ДатаСоздания = Основание.Дата;
	
	ИзвещениеОбъект = СоздатьСлужебноеСообщение(ПараметрыЗагрузки.ПараметрыДокумента, СвойстваОсновногоФайла,
		ПараметрыЗагрузки.ДанныеУчастниковЭДО, Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении,
		ПараметрыЗагрузки.ТипИзвещения);
	
	Если ИзвещениеОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), ИзвещениеОбъект);
	
	ДополненияСостоянийЭДО = Неопределено;
	Если Не ПараметрыЗагрузки.ПараметрыДокумента.ОбменБезПодписи Тогда
		
		ПараметрыМаршрута = СформироватьМаршрутПодписания(ИзвещениеОбъект);
		
		Если ЗначениеЗаполнено(ПараметрыМаршрута.ТаблицаПодписания) Тогда
			ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
				ИзвещениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
			ПараметрыЗагрузки.ОповещенияПодписантов.Добавить(ПараметрыОповещенияПодписантов);
		КонецЕсли;
		
		ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(ИзвещениеОбъект,
			ПараметрыЗагрузки.ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
		
	КонецЕсли;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыЗагрузки.ПараметрыДокумента,
		ПараметрыЗагрузки.СостоянияСообщений, ИзвещениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,
		ДополненияСостоянийЭДО, КомментарийСостояния);
	
	ЗаписатьДействиеВЖурнал(ПараметрыЗагрузки.Действие, ПараметрыЗагрузки.ПараметрыДокумента, СостояниеДокумента,
		ИзвещениеОбъект.ДатаИзмененияСтатуса, ИзвещениеОбъект);
	
	Возврат ИзвещениеОбъект;
	
КонецФункции

Процедура ЗаблокироватьДанныеДокументаПриЗагрузке(ДанныеСообщения)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументВходящийЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
		ДанныеСообщения.ИдентификаторДокументооборота);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументИсходящийЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
		ДанныеСообщения.ИдентификаторДокументооборота);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ИсправитьПредыдущуюВерсиюДокумента(ЭлектронныйДокумент, ПараметрыНовогоДокумента, КонтекстДиагностики)
	
	ЭтоВходящийЭДО = Истина;
	
	ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	
	Если ДокументОбъект.ИдентификаторСвязи <> ПараметрыНовогоДокумента.ИдентификаторСвязи
		ИЛИ ДокументОбъект.ВидДокумента <> ПараметрыНовогоДокумента.ВидДокумента
		ИЛИ ДокументОбъект.Исправлен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОбъект.Исправлен = Истина;
	ДокументОбъект.Записать();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
	ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой()
		ИЛИ РезультатыЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСостояния = РезультатыЗапроса[0].Выбрать();
	ПараметрыСостояния.Следующий();
	
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
	СвойстваСообщения.Следующий();
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	ДатаИзменения = ТекущаяДатаСеанса();
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики);
	
	ЗаписатьДействиеВЖурнал(Действие, ДокументОбъект, СостояниеДокумента, ДатаИзменения, СвойстваСообщения,
		ПараметрыСостояния.Комментарий);
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьКлючевыеДатыПриЗагрузкеОтветнойПодписи(СообщениеОбъект, ТекущаяДатаСеанса)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоИсходящееПредложениеОбАннулировании =
		ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
	Если ЭтоИсходящееПредложениеОбАннулировании Тогда
		УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДокументаПередЗагрузкой(ПараметрыЗагрузки, ОписаниеСообщения)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.Контрагент) Тогда
		
		СтрокиОшибки = Новый Массив;
		
		СтрокиОшибки.Добавить(НСтр("ru = 'Не удалось определить контрагента документа.'"));
		
		СодержаниеДокумента = ОписаниеСообщения.Данные.Содержание;
		
		Если ТипЗнч(СодержаниеДокумента) = Тип("Структура") Тогда
			
			ИНН = Неопределено;
			КПП = Неопределено;
			
			Если СодержаниеДокумента.Свойство("Отправитель")
				И ТипЗнч(СодержаниеДокумента.Отправитель) = Тип("Структура")
				И ЗначениеЗаполнено(СодержаниеДокумента.Отправитель.ИНН) Тогда
				
				ИНН = СодержаниеДокумента.Отправитель.ИНН;
			КонецЕсли;
			
			Если СодержаниеДокумента.Свойство("Отправитель")
				И ТипЗнч(СодержаниеДокумента.Отправитель) = Тип("Структура")
				И ЗначениеЗаполнено(СодержаниеДокумента.Отправитель.КПП) Тогда
				
				КПП = СодержаниеДокумента.Отправитель.КПП;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
				СтрокиОшибки.Добавить(СтрШаблон(
					НСтр("ru = 'Проверьте существование контрагента с ИНН %1 и КПП %2'"),
					ИНН, КПП));
			ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
				СтрокиОшибки.Добавить(СтрШаблон(
					НСтр("ru = 'Проверьте существование контрагента с ИНН %1'"),
					ИНН));
			КонецЕсли;
			
		КонецЕсли;
		
		ВызватьИсключение СтрСоединить(СтрокиОшибки, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет номера машиночитаемых доверенностей.
// 
// Параметры:
//  ОсновнойФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СодержаниеФайла - См. ФорматыЭДО.ПрочитатьСодержаниеДокумента
//  НомераМЧД - См. ФорматыЭДО.НомераМашиночитаемыхДоверенностей
//  Доверенности - см. ТранспортныеКонтейнерыЭДО.ПрочитатьКарточкуМЧД
//  
Процедура ДобавитьМашиночитаемыеДоверенности(ОсновнойФайлСообщения, СодержаниеФайла, НомераМЧД, Доверенности)
	
	МашиночитаемыеДоверенности.ДобавитьДоверенностиСообщений(ОсновнойФайлСообщения, Доверенности);
	
	Если Не ЗначениеЗаполнено(СодержаниеФайла)
		И (НЕ ЗначениеЗаполнено(Доверенности)
		ИЛИ Не ЗначениеЗаполнено(НомераМЧД)) Тогда
		Возврат;
	КонецЕсли;
	
	ИННДоверителя = СодержаниеФайла.Отправитель.ИНН;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		
		МашиночитаемыеДоверенности.ДобавитьДоверенностьКонтрагента(ОсновнойФайлСообщения, НомерМЧД, ИННДоверителя);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СообщенияДокумента - Массив из ДокументСсылка.СообщениеЭДО
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьСообщенияПоИмениФайла(СообщенияДокумента, ИмяФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла В (&ВладельцыФайлов)
		|	И СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла ПОДОБНО &ПолноеИмяФайла";
	
	Запрос.УстановитьПараметр("ВладельцыФайлов", СообщенияДокумента);
	Запрос.УстановитьПараметр("ПолноеИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область Ознакомление

Процедура ОтправитьНаОзнакомление(ЭлектронныйДокумент)
	
	Если НастройкиЭДО.ОзнакомлениеСЭлектроннымиДокументами() Тогда
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.НаОзнакомлении = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВернутьСОзнакомления(ЭлектронныйДокумент)
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.НаОзнакомлении = Ложь;
	ДокументОбъект.Записать();
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

Функция ВидОперацииПриДобавленииОшибки(ПредставлениеДействия)
	Возврат СтрШаблон(НСтр("ru = 'Действие %1'"), ПредставлениеДействия);
КонецФункции

Процедура ДобавитьОшибкуВыполненияДействияПоСообщению(Сообщение, Действие, ТекстОшибки, КонтекстДиагностики)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	СообщениеЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	ПредставлениеДокумента = ПредставлениеДокументаПоСвойствам(Выборка);
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось %1 %2.'"), ПредставлениеДействия, ПредставлениеДокумента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		Выборка.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Тип сообщения: %1'"), Выборка.ТипЭлементаРегламента));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДобавитьОшибкуВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие, ТекстОшибки, КонтекстДиагностики)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота");
	ПредставлениеДокумента = ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось %1 %2.'"), ПредставлениеДействия, ПредставлениеДокумента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		СвойстваДокумента.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Добавляет в контекст ошибку проверки МЧД.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПодписиСОшибкамиМЧД - Массив из Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  Действие - ПеречислениеСсылка.ДействияПоЭДО - Действие
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
Процедура ДобавитьОшибкуПодписиМЧД(ЭлектронныйДокумент, ПодписиСОшибкамиМЧД, Действие, КонтекстДиагностики)
	
	ПодписиСОшибкамиПолномочийМЧД = Новый Массив;
	ПодписиСПрочимиОшибкамиМЧД = Новый Массив;
	Для Каждого Подпись Из ПодписиСОшибкамиМЧД Цикл
		Если Подпись.ОшибкаПроверкиПолномочий Тогда 
			ПодписиСОшибкамиПолномочийМЧД.Добавить(Подпись);
		Иначе
			ПодписиСПрочимиОшибкамиМЧД.Добавить(Подпись);
		КонецЕсли;
	КонецЦикла;
	
	Если ПодписиСОшибкамиПолномочийМЧД.Количество() Тогда 
		КраткийТекстОшибки = НСтр("ru = 'Имеются документы с доверенностями, нуждающимися в ручной проверке полномочий'");
		ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
			+ НСтр("ru = 'Для утверждения документов проверьте полномочия подписантов'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", ПодписиСОшибкамиПолномочийМЧД);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Подписание электронных документов'"),
		МашиночитаемыеДоверенности.ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧД(),
			КраткийТекстОшибки,
			ПодробныйТекстОшибки,
			ДополнительныеПараметры);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
	
	Если ПодписиСПрочимиОшибкамиМЧД.Количество() Тогда 
		КраткийТекстОшибки = НСтр("ru = 'Не удалось подписать документ, который подписан подписью физического лица'");
		ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
			+ НСтр("ru = 'Подпись контрагента должна сопровождаться доверенностью, но подходящей доверенности в программе нет'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", ПодписиСПрочимиОшибкамиМЧД);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Подписание электронных документов'"),
		МашиночитаемыеДоверенности.ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧДДоверенностьНеНайдена(),
			КраткийТекстОшибки,
			ПодробныйТекстОшибки,
			ДополнительныеПараметры);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьОшибкуФормированияОтвета(ЭлектронныйДокумент, Действие, КонтекстДиагностики)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки(); 
	ВидОшибки.Идентификатор = "ОшибкаФормированияОтвета";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка формирования ответа'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Создайте или подберите документы учета'");
	ВидОшибки.ВыводитьСсылкуНаСписокОшибок = Истина;
	
	ТекстОшибки = НСтр("ru = 'Отсутствуют документы учета'");
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота");
	ПредставлениеДокумента = ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось %1 %2.'"), ПредставлениеДействия, ПредставлениеДокумента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		СвойстваДокумента.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ДобавитьОшибкуВыполненияДействияПоПакету(ИдентификаторПакета, Действие, ТекстОшибки,КонтекстДиагностики)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось %1 документы пакета.'"), ПредставлениеДействия);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЖурналДействий

Процедура ЗаписатьДействиеВЖурнал(Действие, СвойстваДокумента, СостояниеДокумента, ДатаИзменения, СвойстваСообщения, Комментарий = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналДействийПоЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", СвойстваДокумента.Ссылка);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЖурналДействийПоЭДО.НомерЗаписи КАК НомерЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналДействийПоЭДО КАК ЖурналДействийПоЭДО
			|ГДЕ
			|	ЖурналДействийПоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|УПОРЯДОЧИТЬ ПО
			|	НомерЗаписи УБЫВ";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", СвойстваДокумента.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			НомерЗаписи = 1;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НомерЗаписи = Выборка.НомерЗаписи + 1;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЖурналДействийПоЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		МенеджерЗаписи.НомерЗаписи = НомерЗаписи;
		МенеджерЗаписи.Действие = Действие;
		МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
		МенеджерЗаписи.СостояниеДокумента = СостояниеДокумента;
		МенеджерЗаписи.Ответственный = СвойстваДокумента.Ответственный;
		МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
		МенеджерЗаписи.Комментарий = Комментарий;
		
		Если СвойстваСообщения <> Неопределено Тогда
			МенеджерЗаписи.Сообщение = СвойстваСообщения.Ссылка;
			МенеджерЗаписи.СтатусСообщения = СвойстваСообщения.Статус;
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПриглашениями

Процедура ВозобновитьДокументыПослеПолученияСогласияПоПриглашению(ИдентификаторОрганизации, ИдентификаторКонтрагента, КонтекстДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	
	ПричиныОстановки = Новый Массив;
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения);
	Запрос.УстановитьПараметр("ПричиныОстановки", ПричиныОстановки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВозобновитьДокумент(Выборка.ЭлектронныйДокумент, Действие, КонтекстДиагностики) Тогда
			ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Выборка.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке);
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, КонтекстДиагностики);
	
КонецПроцедуры

Процедура ОстановитьДокументыПослеИзмененияПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента, ПричинаОстановки, КонтекстДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|		И НЕ ЭлектронныйДокументВходящийЭДО.Остановлен
		|		И СообщениеЭДО.Состояние = &СостояниеДокумента
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.Остановлен
		|		И СообщениеЭДО.Состояние = &СостояниеДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("СостояниеДокумента", Перечисления.СостоянияСообщенийЭДО.Отправка);
	
	ПричиныОстановки = Новый Массив;
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПричиныОстановки, ПричинаОстановки);
	Запрос.УстановитьПараметр("ПричиныОстановки", ПричиныОстановки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОстановитьДокумент(Выборка.ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление

Процедура Обновление_ЗаполнитьДокументПоНовойАрхитектуре(Объект, ДанныеДляЗаполнения, ЭтоВходящийЭДО, Записать) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ТипРегламента)
		ИЛИ Не ЗначениеЗаполнено(Объект.УдалитьВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = Обновление_ОпределитьВидДокумента(Объект);
	КонецЕсли;
	
	ТипРегламента = ДанныеДляЗаполнения.ТипыРегламентов[Объект.Ссылка];
	Если Не ЗначениеЗаполнено(ТипРегламента) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить тип регламента ЭДО'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Объект.Метаданные(), Объект.Ссылка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументОтклонен = ДанныеДляЗаполнения.ОтклоненныеДокументы[Объект.Ссылка] <> Неопределено;
	
	Объект.ТипРегламента = ТипРегламента;
	Объект.ПричинаОстановки = Обновление_ПричинаОстановкиПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО, ДокументОтклонен);
	Объект.Остановлен = ЗначениеЗаполнено(Объект.ПричинаОстановки);
	Объект.Исправлен = Объект.УдалитьСостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	Объект.ИдентификаторСвязи = ДанныеДляЗаполнения.ИдентификаторыСвязи[Объект.Ссылка];
	
	Обновление_ЗаполнитьОбъектыУчетаЭлектронногоДокументаПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО);
	
	Отбор = Новый Структура("ЭлектронныйДокумент", Объект.Ссылка);
	ИсторияСобытийПоДокументу = ДанныеДляЗаполнения.ИсторияСобытий.НайтиСтроки(Отбор);
	
	Комментарий = "";
	СостояниеДополнение = "";
	ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	Если Обновление_ДокументооборотЗавершенДоОбновления(Объект.УдалитьСостояниеЭДО) Тогда
		ТекущееСостояние = Объект.УдалитьСостояниеЭДО;
		ДатаИзменения = ?(ЗначениеЗаполнено(ИсторияСобытийПоДокументу),
			ИсторияСобытийПоДокументу[ИсторияСобытийПоДокументу.Количество() - 1].ДатаИзменения, Объект.Дата);
		Если ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.Аннулирован
			ИЛИ ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
			Комментарий = Объект.УдалитьПричинаОтклонения;
		КонецЕсли;
	ИначеЕсли СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(Объект.СпособОбмена) Тогда
		СтатусПриглашения = ДанныеДляЗаполнения.СтатусыПриглашений.Найти(Объект.Ссылка, "ЭлектронныйДокумент");
		Если СтатусПриглашения = Неопределено Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
			СостоянияСообщений = Обновление_СостоянияСообщений(Объект.Ссылка);
			ДатаИзменения = ?(ЗначениеЗаполнено(СостоянияСообщений), СостоянияСообщений[0].ДатаИзмененияСтатуса, Объект.Дата);
		ИначеЕсли СтатусПриглашения.Статус = Перечисления.СтатусыПриглашений.ОжидаемСогласия
			ИЛИ СтатусПриглашения.Статус = Перечисления.СтатусыПриглашений.НастройкаРоуминга Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
			ДатаИзменения = СтатусПриглашения.ДатаИзмененияСтатуса;
		ИначеЕсли СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.Принято
			И СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.НеТребуется Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
			ДатаИзменения = СтатусПриглашения.ДатаИзмененияСтатуса;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееСостояние) Тогда
		СостоянияСообщений = Обновление_СостоянияСообщений(Объект.Ссылка);
		ТекущееСостояние = РегламентыЭДО.СостояниеДокумента(Объект, СостоянияСообщений, ЭтоВходящийЭДО);
		ДатаИзменения = ?(ЗначениеЗаполнено(СостоянияСообщений), СостоянияСообщений[0].ДатаИзмененияСтатуса, Объект.Дата);
		СостояниеДополнение = Обновление_СостояниеДополнение(Объект, ТекущееСостояние, ЭтоВходящийЭДО, СостоянияСообщений);
	КонецЕсли;
	
	Обновление_ЗаписатьСостояниеДокумент(Объект.Ссылка, ТекущееСостояние, СостояниеДополнение, ДатаИзменения, Комментарий);
	
	Обновление_ЗаполнитьЖурналДействийПоНовойАрхитектуре(Объект, ИсторияСобытийПоДокументу, ТекущееСостояние,
		ЭтоВходящийЭДО, ДокументОтклонен);
	
	Записать = Истина;
	
КонецПроцедуры

Функция Обновление_СтатусСообщенияПоНовойАрхитектуре(СтатусДоОбновления, ТипРегламента, ТипЭлементаРегламента, Направление, ОбменБезПодписи, ДокументОтклонен) Экспорт
	
	Результат = СтатусДоОбновления;
	
	Если СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолностьюПодписан Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Подписан
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправкаЗаблокированаОператором
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОшибкаПередачи Тогда
		// Обмен через оператора возможен только с подписью.
		Результат = Перечисления.СтатусыСообщенийЭДО.Подписан;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтклонен Тогда
		

		Если Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Получен;
		ИначеЕсли ДокументОтклонен Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		Иначе
			Результат = Перечисления.СтатусыСообщенийЭДО.Сформирован;
		КонецЕсли;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоУведомление Тогда
		
		Если Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Получен;
		Иначе
			Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		КонецЕсли;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПереданОператору
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждениеОператора
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьАннулирован
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьСформированоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьДоставлен
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьДоставленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтклоненПолучателем
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоУведомление
		ИЛИ ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный
			И (СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоПодтверждение
				ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПодтверждение
				ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждение) Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждение Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
		
	КонецЕсли;
	
	Если Результат = Перечисления.СтатусыСообщенийЭДО.Утвержден
		И Не (ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
				И Направление = Перечисления.НаправленияЭДО.Входящий) Тогда
		
		Результат = ?(Направление = Перечисления.НаправленияЭДО.Входящий,
			Перечисления.СтатусыСообщенийЭДО.Получен, Перечисления.СтатусыСообщенийЭДО.Сформирован);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Обновление_ДокументооборотЗавершенДоОбновления(СостояниеДоОбновления) Экспорт
	
	Возврат СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	
КонецФункции

Функция Обновление_ДанныеДляЗаполненияДокументовПоНовойАрхитектуре(ВыбранныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВыбранныеДанные
		|ИЗ
		|	&ВыбранныеДанные КАК ВыбранныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	ЖурналСобытийЭД.СтатусЭД КАК СтатусДоОбновления,
		|	ЖурналСобытийЭД.Дата КАК ДатаИзменения,
		|	ЖурналСобытийЭД.Пользователь КАК Пользователь,
		|	ЖурналСобытийЭД.Ответственный КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий КАК Комментарий
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЖурналСобытийЭД КАК ЖурналСобытийЭД
		|		ПО ВыбранныеДанные.Ссылка = ЖурналСобытийЭД.ВладелецЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ЖурналСобытийЭД.ПрисоединенныйФайл = ПрисоединенныеФайлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО (ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйДокумент,
		|	ДатаИзменения,
		|	ЖурналСобытийЭД.ПрисоединенныйФайл,
		|	ЖурналСобытийЭД.НомерЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПрисоединенныеФайлы.УдалитьНомерЭД КАК ИдентификаторСвязи,
		|	ПрисоединенныеФайлы.УдалитьТипЭлементаВерсииЭД КАК УдалитьТипЭлементаВерсииЭД
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ВыбранныеДанные.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПриглашенияЭДО.Статус КАК Статус,
		|	ПриглашенияЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО (ДокументЭДО.Ссылка = ВыбранныеДанные.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО (ПриглашенияЭДО.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторОрганизации)
		|			И (ПриглашенияЭДО.ИдентификаторКонтрагента = ДокументЭДО.ИдентификаторКонтрагента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПриглашенияЭДО.Статус КАК Статус,
		|	ПриглашенияЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО (ДокументЭДО.Ссылка = ВыбранныеДанные.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО (ПриглашенияЭДО.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторОрганизации)
		|			И (ПриглашенияЭДО.ИдентификаторКонтрагента = ДокументЭДО.ИдентификаторКонтрагента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ВыбранныеДанные.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.УОУ))
		|ГДЕ
		|	СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.УОУ)";
	
	Запрос.УстановитьПараметр("ВыбранныеДанные", ВыбранныеДанные);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ИсторияСобытий = РезультатыЗапроса[1].Выгрузить();
	ИсторияСобытий.Индексы.Добавить("ЭлектронныйДокумент");
	
	ИдентификаторыСвязи = Новый Соответствие;
	ТипыРегламентов = Новый Соответствие;
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыСвязи.Вставить(Выборка.ЭлектронныйДокумент, Выборка.ИдентификаторСвязи);
		ТипыРегламентов.Вставить(Выборка.ЭлектронныйДокумент,
			Обновление_ТипРегламентаПоНовойАрхитектуре(Выборка.УдалитьТипЭлементаВерсииЭД));
	КонецЦикла;
	
	СтатусыПриглашений = РезультатыЗапроса[3].Выгрузить();
	ИсторияСобытий.Индексы.Добавить("ЭлектронныйДокумент");
	
	ОтклоненныеДокументы = Новый Соответствие;
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтклоненныеДокументы.Вставить(Выборка.ЭлектронныйДокумент, Истина);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ИсторияСобытий", ИсторияСобытий);
	Результат.Вставить("ИдентификаторыСвязи", ИдентификаторыСвязи);
	Результат.Вставить("СтатусыПриглашений", СтатусыПриглашений);
	Результат.Вставить("ТипыРегламентов", ТипыРегламентов);
	Результат.Вставить("ОтклоненныеДокументы", ОтклоненныеДокументы);
	
	Возврат Результат;
	
КонецФункции

Функция Обновление_ТипРегламентаПоНовойАрхитектуре(ТипЭлементаВерсииЭД) Экспорт
	
	Результат = Перечисления.ТипыРегламентовЭДО.ПустаяСсылка();
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьСЧФУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьСЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДИСУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьКСЧФУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьКСЧФДИСУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьЭСФ Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.УПД;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДОП Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.Формализованный;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьПервичныйЭД Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Обновление_ОпределитьВидДокумента(СвойстваДокумента) Экспорт
	
	Результат = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	
	Если СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Результат = СвойстваДокумента.ВидДокумента;
	ИначеЕсли СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		Результат = ВидДокументаПоПрикладномуТипу(
			СвойстваДокумента.УдалитьВидПрикладногоДокумента);
	ИначеЕсли СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.УдалитьПроизвольный Тогда
		ТипДокумента = Обновление_ОпределитьТипДокументаПроизвольногоФормата(СвойстваДокумента.УдалитьТипДокумента);
		Результат = ВидДокументаПоТипу(ТипДокумента);
	Иначе
		ТипДокумента = Обновление_ТипДокументаПоНовойАрхитектуре(
			СвойстваДокумента.УдалитьВидДокумента);
		Если ЗначениеЗаполнено(ТипДокумента) Тогда
			Результат = ВидДокументаПоТипу(ТипДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить вид электронного документа'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Обновление_ОпределитьТипДокументаПроизвольногоФормата(ТипДокументаДоОбновления)
	
	Результат = Перечисления.ТипыДокументовЭДО.Прочее;
	
	Если ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВзаимозачета Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктВзаимозачета;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВыполненныхРабот Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктСверки Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктСверки;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Ведомость Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Ведомость;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ГарантийноеПисьмо Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Договор Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Договор;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ДополнительноеСоглашение Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС11 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС11;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС2 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС2;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС3 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС3;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Отчет Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Отчет;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПлатежноеПоручение Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПриложениеКАкту Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СоглашениеОбЭДО Тогда
		Результат = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Спецификация Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Спецификация;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СчетНаОплату Тогда
		Результат = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ТоварнаяНакладная Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Уведомление Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Уведомление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Обновление_ПричинаОстановкиПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО, ДокументОтклонен)
	
	СостояниеДокумента = Объект.УдалитьСостояниеЭДО;
	
	Результат = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ЗакрытПринудительно;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором
		И Не ЭтоВходящийЭДО И Объект.УдалитьВидОшибкиПередачи = Перечисления.УдалитьВидыОшибокПередачиЭД.ОграничениеТарификации Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая;
		
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		И НЕ ДокументОтклонен Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПодписания;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура Обновление_ЗаполнитьОбъектыУчетаЭлектронногоДокументаПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО)
	
	Если Не ЗначениеЗаполнено(Объект.УдалитьДокументыОснования) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.УдалитьДокументыОснования Цикл
		НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.ОбъектУчета.Установить(СтрокаТаблицы.ДокументОснование);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ЭлектронныйДокумент = Объект.Ссылка;
		НоваяЗапись.ОбъектУчета = СтрокаТаблицы.ДокументОснование;
		Если ЭтоВходящийЭДО Тогда
			НоваяЗапись.СпособОбработки = СтрокаТаблицы.СпособОбработки;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

Функция Обновление_СостоянияСообщений(ЭлектронныйДокумент);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзмененияСтатуса УБЫВ";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция Обновление_СостояниеДополнение(Объект, Состояние, ЭтоВходящийЭДО, СостоянияСообщений)
	
	Результат = "";
	
	Если ЭтоВходящийЭДО
		ИЛИ Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИнформацияОтправителя = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
		"ТипЭлементаРегламента");
	
	Если ИнформацияОтправителя = Неопределено Тогда
		Возврат ИнформацияОтправителя;
	КонецЕсли;
	
	Подписи = УстановленныеПодписи(ИнформацияОтправителя.Ссылка, Объект.ВидПодписи);
	
	Возврат МаршрутыПодписанияБЭД.ПредставлениеПрогрессаПодписания(Объект.МаршрутПодписания, Подписи.Количество());
	
КонецФункции

Процедура Обновление_ЗаписатьСостояниеДокумент(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий)
	НаборЗаписей = РегистрыСведений.СостоянияДокументовЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяЗапись.Состояние = Состояние;
	НоваяЗапись.СостояниеДополнение = СостояниеДополнение;
	НоваяЗапись.ДатаИзменения = ДатаИзменения;
	НоваяЗапись.Комментарий = Комментарий;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
КонецПроцедуры

Процедура Обновление_ЗаполнитьЖурналДействийПоНовойАрхитектуре(Объект, ИсторияСобытийПоДокументу, ТекущееСостояние, ЭтоВходящийЭДО, ДокументОтклонен)
	
	Если Не ЗначениеЗаполнено(ИсторияСобытийПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЖурналДействийПоЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Объект.Ссылка);
	
	СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
	
	СвойстваСообщения = Новый Структура;
	СвойстваСообщения.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	СвойстваСообщения.Вставить("Статус", Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка());
	СвойстваСообщения.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	
	Отбор = Новый Структура("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	
	РасчетСостоянияВозможен = Истина;
	
	Счетчик = 1;
	Для Каждого СведенияОСобытии Из ИсторияСобытийПоДокументу Цикл
		
		СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
		Статус = Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка();
		Действие = Перечисления.ДействияПоЭДО.ПустаяСсылка();
		
		Если Не ЗначениеЗаполнено(СведенияОСобытии.СтатусДоОбновления) Тогда
			РасчетСостоянияВозможен = Ложь;
		ИначеЕсли РасчетСостоянияВозможен Тогда 
			
			СвойстваСообщения.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
			СвойстваСообщения.Направление = СведенияОСобытии.Направление;
			СвойстваСообщения.Статус = Обновление_СтатусСообщенияПоНовойАрхитектуре(СведенияОСобытии.СтатусДоОбновления,
				Объект.ТипРегламента, СведенияОСобытии.ТипЭлементаРегламента, СведенияОСобытии.Направление,
				Объект.ОбменБезПодписи, ДокументОтклонен);
			
			СостояниеСообщения = РегламентыЭДО.СостояниеСообщения(СвойстваСообщения, Объект);
			
			Отбор.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
			НайденныеСтроки = СостоянияЭлементовРегламента.НайтиСтроки(Отбор);
			КоличествоСтрок = НайденныеСтроки.Количество();
			Если КоличествоСтрок = 0 Тогда
				Элемент = СостоянияЭлементовРегламента.Добавить();
				Элемент.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
				Элемент.Состояние = СостояниеСообщения;
			Иначе
				ЭлементРегламента = НайденныеСтроки[КоличествоСтрок - 1];
				Если ЭлементРегламента.Состояние = СостояниеСообщения Тогда
					Продолжить;
				Иначе
					ЭлементРегламента.Состояние = СостояниеСообщения;
				КонецЕсли;
			КонецЕсли;
			
			Статус = СвойстваСообщения.Статус;
			
			СостояниеДокумента = Обновление_СостояниеДокумента(Объект, СостоянияЭлементовРегламента, ЭтоВходящийЭДО);
			
			Действие = Обновление_ДействиеПоСтатусу(СведенияОСобытии.ТипЭлементаРегламента,
				СведенияОСобытии.Направление, СвойстваСообщения.Статус);
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НомерЗаписи = Счетчик;
		НоваяЗапись.Сообщение = СведенияОСобытии.Сообщение;
		НоваяЗапись.ЭлектронныйДокумент = СведенияОСобытии.ЭлектронныйДокумент;
		НоваяЗапись.ДатаИзменения = СведенияОСобытии.ДатаИзменения;
		НоваяЗапись.Ответственный = СведенияОСобытии.Ответственный;
		НоваяЗапись.Пользователь = СведенияОСобытии.Пользователь;
		НоваяЗапись.Комментарий = СведенияОСобытии.Комментарий;
		
		НоваяЗапись.СостояниеДокумента = СостояниеДокумента;
		НоваяЗапись.СтатусСообщения = Статус;
		НоваяЗапись.Действие = Действие;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если Счетчик > 1 Тогда
		
		ПоследняяЗапись = НаборЗаписей[Счетчик - 2];
		Если ПоследняяЗапись.СостояниеДокумента <> ТекущееСостояние Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ПоследняяЗапись);
			НоваяЗапись.НомерЗаписи = Счетчик;
			НоваяЗапись.СостояниеДокумента = ТекущееСостояние;
			НоваяЗапись.Комментарий = НСтр("ru = 'Скорректировано автоматически'");
			Если ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
				НоваяЗапись.Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
				НоваяЗапись.Сообщение = Документы.СообщениеЭДО.ПустаяСсылка();
				НоваяЗапись.СтатусСообщения = Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Функция Обновление_СостояниеДокумента(Объект, СостоянияЭлементовРегламента, ЭтоВходящийЭДО)
	
	Если Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД Тогда
		МенеджерРегламента =  РегламентыЭДО_УПД;
	ИначеЕсли Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		МенеджерРегламента = РегламентыЭДО_Неформализованный;
	ИначеЕсли Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
		МенеджерРегламента = РегламентыЭДО_Формализованный;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректный тип регламента ЭДО: %1'"), Объект.ТипРегламента);
	КонецЕсли;
	
	Если ЭтоВходящийЭДО Тогда
		СостояниеДокумента = МенеджерРегламента.СостояниеВходящегоДокумента(Объект, СостоянияЭлементовРегламента);
	Иначе
		СостояниеДокумента = МенеджерРегламента.СостояниеИсходящегоДокумента(Объект, СостоянияЭлементовРегламента);
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

Функция Обновление_ДействиеПоСтатусу(ТипЭлементаРегламента, Направление, СтатусПослеОбновления)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Сформирован Тогда
		
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			Результат = Перечисления.ДействияПоЭДО.Аннулировать;
			
		ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ТипЭлементаРегламента)) Тогда
			
			Результат = Перечисления.ДействияПоЭДО.Отклонить;
			
		ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			
			Результат = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
			
		Иначе
			
			Результат = Перечисления.ДействияПоЭДО.Сформировать;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Получен Тогда
		
		Результат = Перечисления.ДействияПоЭДО.Загрузить;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Утвержден Тогда
		
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			Результат = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
			
		Иначе
			
			Результат = Перечисления.ДействияПоЭДО.Утвердить;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан
		ИЛИ СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Подписан
		ИЛИ СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолностьюПодписан Тогда
		
		Результат = Перечисления.ДействияПоЭДО.Подписать;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке Тогда 
		
		Результат = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Отправлен Тогда 
		
		Результат = Перечисления.ДействияПоЭДО.Отправить;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияБРОЭДО

Функция РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументов, ТипыЭлементовРегламента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВидыДокументов
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныеДокументыОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ВидыДокументов.Ссылка.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ОсновнойФайл КАК Файл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		И СостоянияДокументовЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументов КАК ВидыДокументов
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка";
	
	Отбор = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
	Отбор.ОбъектыУчета = "&ОбъектыУчета";
	ОписаниеЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов("ЭлектронныеДокументыОбъектовУчета", Отбор);
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция НовыеДанныеФайлаДляВыгрузкиВФНС()
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Тип", "");
	ДанныеФайла.Вставить("КНД", "");
	ДанныеФайла.Вставить("Данные", "");
	ДанныеФайла.Вставить("Имя", "");
	Возврат ДанныеФайла;
КонецФункции

Функция ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент, ТипЭлементаРегламента)
	
	Результат = Новый Структура("ИмяФайла, ДвоичныеДанные, Размер, КНД, УстановленныеПодписи");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл,
		|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ТипРегламента  КАК ТипРегламента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.ОсновнойФайл, ПараметрыДанныхФайла);
		Результат.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Результат.ИмяФайла = ДанныеФайла.ИмяФайла;
		Результат.Размер = ДанныеФайла.Размер;
		Результат.УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ОсновнойФайл);
		
		СвойстваДокумента = ФорматыЭДО.НовыйПараметрыПолученияКНД();
		СвойстваДокумента.ТипДокумента = Выборка.ТипДокумента;
		СвойстваДокумента.ТипРегламента = Выборка.ТипРегламента;
		СвойстваДокумента.ИмяФайла = ДанныеФайла.ИмяФайла;	
		СвойстваДокумента.Подтверждение = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;		
		
		Результат.КНД = ФорматыЭДО.КНДПоСвойствамДокумента(СвойстваДокумента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Параметры:
//  СтрокаВерсии - Строка
// 
// Возвращаемое значение:
//  Число
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный]) * МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	
	Возврат ВерсияФорматаЧислом;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_10(СостояниеЭДО)
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
	
		ТипСостояния = "ОбменЗавершен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
	
		ТипСостояния = "ОбменЗавершенСИсправлениями";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
	
		ТипСостояния = "Аннулирован";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
	
		ТипСостояния = "ЗакрытПринудительно";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
	
		ТипСостояния = "ИзвещениеНаПодписи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
	
		ТипСостояния = "НаПодписи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
	
		ТипСостояния = "НаУтверждении";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
	
		ТипСостояния = "ОжидаетсяАннулирование";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
	
		ТипСостояния = "ОжидаетсяИзвещениеОПолучении";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
	
		ТипСостояния = "ОжидаетсяИсправление";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
	
		ТипСостояния = "ОжидаетсяОтправка";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
	
		ТипСостояния = "ОжидаетсяОтправкаИзвещения";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
	
		ТипСостояния = "ОжидаетсяПодтверждение";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
	
		ТипСостояния = "ОжидаетсяПодтверждениеОператора";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
	
		ТипСостояния = "Отклонен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
	
		ТипСостояния = "ТребуетсяУточнитьДокумент";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
	
		ТипСостояния = "ТребуетсяАннулировать";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
	
		ТипСостояния = "ОшибкаПередачи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен Тогда
	
		ТипСостояния = "НеПолучен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
	
		ТипСостояния = "НеСформирован";
		
	Иначе
		
		ТипСостояния = "";
	
	КонецЕсли;
	
	Возврат ТипСостояния;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_15(СостояниеЭДО)
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		ТипСостояния = "Аннулирован";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		ТипСостояния = "ЗакрытПринудительно";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		ТипСостояния = "ЗакрытСОтклонением";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		ТипСостояния = "ЗакрытСОтклонениемПриглашения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		ТипСостояния = "ЗакрытСОшибкойПередачи";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен Тогда
		ТипСостояния = "НеПолучен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		ТипСостояния = "НеСформирован";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		ТипСостояния = "ОбменЗавершен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ТипСостояния = "ОбменЗавершенСИсправлением";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		ТипСостояния = "ОжидаетсяИзвещениеОПолучении";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		ТипСостояния = "ОжидаетсяИзвещениеПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		ТипСостояния = "ОжидаетсяИсправление";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		ТипСостояния = "ОжидаетсяОтветНаПриглашение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору Тогда
		ТипСостояния = "ОжидаетсяПередачаОператору";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		ТипСостояния = "ОжидаетсяПодтверждение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		ТипСостояния = "ОжидаетсяПодтверждениеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		ТипСостояния = "ОжидаетсяПодтверждениеОператора";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		ТипСостояния = "ТребуетсяИзвещениеОПолучении";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		ТипСостояния = "ТребуетсяИзвещениеПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		ТипСостояния = "ТребуетсяИсправлениеОшибкиПередачи";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		ТипСостояния = "ТребуетсяОтправка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		ТипСостояния = "ТребуетсяОтправкаАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		ТипСостояния = "ТребуетсяОтправкаИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяОтправкаИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		ТипСостояния = "ТребуетсяОтправкаОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		ТипСостояния = "ТребуетсяОтправкаПриглашения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		ТипСостояния = "ТребуетсяПовторнаяОтправка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправке";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		ТипСостояния = "ТребуетсяПодписание";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодписаниеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		ТипСостояния = "ТребуетсяПодписаниеИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяПодписаниеИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		ТипСостояния = "ТребуетсяПодписаниеОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодтверждениеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		ТипСостояния = "ТребуетсяУтверждение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ТипСостояния = "ТребуетсяУточнение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяВыписка Тогда
		ТипСостояния = "УдалитьОжидаетсяВыписка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИзвещение Тогда
		ТипСостояния = "УдалитьОжидаетсяИзвещение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИсполнение Тогда
		ТипСостояния = "УдалитьОжидаетсяИсполнение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтзыв Тогда
		ТипСостояния = "УдалитьОжидаетсяОтзыв";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтправкаПолучателю Тогда
		ТипСостояния = "УдалитьОжидаетсяОтправкаПолучателю";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором Тогда
		ТипСостояния = "УдалитьОтклоненОператором";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьПлатежИсполнен Тогда
		ТипСостояния = "УдалитьПлатежИсполнен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьТребуетсяПодтверждение Тогда
		ТипСостояния = "УдалитьТребуетсяПодтверждение";
	Иначе
		ТипСостояния = "";
	КонецЕсли;

	Возврат ТипСостояния;

КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ТипСостояния  - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата_1_10(ТипСостояния)
	
	Если ТипСостояния = "ОбменЗавершен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	
	ИначеЕсли ТипСостояния = "ИзвещениеНаПодписи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения;
	
	ИначеЕсли ТипСостояния = "НаПодписи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	
	ИначеЕсли ТипСостояния = "НаУтверждении" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеОПолучении" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяОтправка" Или ТипСостояния = "ОжидаетсяОтправкаПолучателю" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяОтправкаИзвещения" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждение" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеОператора" Или ТипСостояния = "ОжидаетсяОтправкаОператору"
		Или ТипСостояния = "ОжидаетсяПередачаОператору" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
	
	ИначеЕсли ТипСостояния = "ОбменЗавершенСИсправлениями" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяИсправление" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление;
	
	ИначеЕсли ТипСостояния = "ЗакрытПринудительно" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
	
	ИначеЕсли ТипСостояния = "Аннулирован" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован;
	
	ИначеЕсли ТипСостояния = "ТребуетсяАннулировать" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяАннулирование" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования;
	
	ИначеЕсли ТипСостояния = "Отклонен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	
	ИначеЕсли ТипСостояния = "ТребуетсяУточнитьДокумент" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
	
	ИначеЕсли ТипСостояния = "ОшибкаПередачи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи;
	
	ИначеЕсли ТипСостояния = "НеПолучен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.НеПолучен;
	
	ИначеЕсли ТипСостояния = "НеСформирован" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		
	Иначе
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	КонецЕсли;
	
	Возврат Состояние;

КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ТипСостояния - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата_1_15(ТипСостояния)
	
	Если ТипСостояния = "Аннулирован" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован;
	ИначеЕсли ТипСостояния = "ЗакрытПринудительно" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
	ИначеЕсли ТипСостояния = "ЗакрытСОтклонением" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	ИначеЕсли ТипСостояния = "ЗакрытСОтклонениемПриглашения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения;
	ИначеЕсли ТипСостояния = "ЗакрытСОшибкойПередачи" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
	ИначеЕсли ТипСостояния = "НеПолучен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.НеПолучен;
	ИначеЕсли ТипСостояния = "НеСформирован" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
	ИначеЕсли ТипСостояния = "ОбменЗавершен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	ИначеЕсли ТипСостояния = "ОбменЗавершенСИсправлением" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеОПолучении" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению;
	ИначеЕсли ТипСостояния = "ОжидаетсяИсправление" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление;
	ИначеЕсли ТипСостояния = "ОжидаетсяОтветНаПриглашение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
	ИначеЕсли ТипСостояния = "ОжидаетсяПередачаОператору" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеОператора" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
	ИначеЕсли ТипСостояния = "ТребуетсяИзвещениеОПолучении" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении;
	ИначеЕсли ТипСостояния = "ТребуетсяИзвещениеПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяИсправлениеОшибкиПередачи" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаПриглашения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
	ИначеЕсли ТипСостояния = "ТребуетсяПовторнаяОтправка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправке" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписание" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодтверждениеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяУтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
	ИначеЕсли ТипСостояния = "ТребуетсяУточнение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяВыписка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяВыписка;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяИзвещение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИзвещение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяИсполнение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИсполнение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяОтзыв" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтзыв;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяОтправкаПолучателю" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтправкаПолучателю;
	ИначеЕсли ТипСостояния = "УдалитьОтклоненОператором" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором;
	ИначеЕсли ТипСостояния = "УдалитьПлатежИсполнен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьПлатежИсполнен;
	ИначеЕсли ТипСостояния = "УдалитьТребуетсяПодтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьТребуетсяПодтверждение;
	Иначе
		Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	КонецЕсли;

	Возврат Состояние;

КонецФункции

#КонецОбласти

#КонецОбласти
