////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтерфейсныеМетоды

// Получение данных по номенклатуре.
//
// Параметры:
//  Идентификаторы						 - Массив - идентификаторы карточек номенклатуры в сервисе.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - признак заполнения соответствия номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуре(Знач Идентификаторы, ЗаполнитьСоответствиеНоменклатуры = Ложь, Отказ = Ложь, КодСостояния = Неопределено) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	ПараметрыЗапроса = ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.Идентификаторы = Идентификаторы;
	ПараметрыЗапроса.НаборПолей = НаборПолейМаксимальный();
	
	ПараметрыКоманды = ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	КодСостояния = ПараметрыКоманды.КодСостояния;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <>  Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено; 
	КонецЕсли;
		
	// Заполнение массива номенклатуры программы по соответствию идентификаторов.
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений")
		И ЗаполнитьСоответствиеНоменклатуры Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатуры)
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &СтатусСопоставлено
		|ИТОГИ ПО
		|	ИдентификаторНоменклатурыСервиса";
		
		Запрос.УстановитьПараметр("СтатусСопоставлено",         Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
		Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", Результат.ВыгрузитьКолонку("Идентификатор"));
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.Колонки.Добавить("НоменклатураПрограммы", Типы().Массив, "НоменклатураПрограммы");
		Пока Выборка.Следующий() Цикл
			СтрокаРезультата = Результат.Найти(Выборка.ИдентификаторНоменклатурыСервиса, "Идентификатор");
			ВыборкаНоменклатуры = Выборка.Выбрать();
			СтрокаРезультата.НоменклатураПрограммы = Новый Массив;
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				СтрокаРезультата.НоменклатураПрограммы.Добавить(ВыборкаНоменклатуры.Номенклатура);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение списка номенклатуры.
//
// Параметры:
//  Идентификаторы						 - Массив - идентификаторы карточек номенклатуры в сервисе.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - признак заполнения соответствия номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список номенклатуры.
//
Функция ПолучитьСтандартныйНаборДанныхПоНоменклатуре(Знач Идентификаторы, Отказ) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	ПараметрыЗапроса = ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.Идентификаторы = Идентификаторы;
	ПараметрыЗапроса.НаборПолей = НаборПолейСтандартный();
	
	ПараметрыКоманды = ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	Возврат Результат;
	
КонецФункции

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL) Экспорт 
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = 
			ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	Попытка
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

Функция ПредставлениеГиперссылки(Гиперссылка, Представление) Экспорт
	Возврат СтрШаблон("<a href = %1>%2</a>", Гиперссылка, Представление);
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровЗапросов

// Описание поиска NomenclatureRequest.
//
Функция ОписаниеПараметровЗапросаНоменклатура() Экспорт
	
	// Дополнительные реквизиты.
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений; // NomenclatureRequest.search.attributes.
	ДополнительныеРеквизиты.Колонки.Добавить("Идентификатор",              Типы().Строка);  // attributeId.
	ДополнительныеРеквизиты.Колонки.Добавить("Значение",                   Типы().Простой); // value.
	ДополнительныеРеквизиты.Колонки.Добавить("ИдентификаторыЗначений",     Типы().Массив);  // valueIds.
	ДополнительныеРеквизиты.Колонки.Добавить("МинимальноеЗначение",        Типы().Простой); // range.min.
	ДополнительныеРеквизиты.Колонки.Добавить("МаксимальноеЗначение",       Типы().Простой); // range.max.
	ДополнительныеРеквизиты.Колонки.Добавить("КодКлассификатора",          Типы().Строка);  // classifier.code.
	ДополнительныеРеквизиты.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка);  // classifier.name.
	
	// Дополнительные реквизиты характеристик.
	
	РеквизитыХарактеристик = ДополнительныеРеквизиты.СкопироватьКолонки(); // NomenclatureRequest.search.features.attributes.
	
	// Мерные характеристики.
	
	МерныеХарактеристики = Новый Структура;
	
	Для Каждого ЭлементКоллекции Из СоответствиеИменМерныхХарактеристик() Цикл
		МерныеХарактеристики.Вставить(ЭлементКоллекции.Ключ, Новый Структура);
	КонецЦикла;
		
	// Данные для поиска обновлений.
	
	ТаблицаОбновления = Новый ТаблицаЗначений; // NomenclatureRequest.update.
	ТаблицаОбновления.Колонки.Добавить("Идентификатор",  Типы().Строка); // id.
	ТаблицаОбновления.Колонки.Добавить("ДатаОбновления", Типы().Дата);   // modified.
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегории",       "");                                             // category.Id.
	Результат.Вставить("ИскатьВПодчиненных",           Ложь);                                           // category.subcategoriesSearch.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив);                                   // manufacturerIds.
	Результат.Вставить("Идентификаторы",               Новый Массив);                                   // ids.
	Результат.Вставить("Штрихкоды",                    Новый Массив);                                   // barcodes.
	Результат.Вставить("СтрокаПоиска",                 "");                                             // search.text.
	Результат.Вставить("ДополнительныеРеквизиты",      ДополнительныеРеквизиты);                        // search.attributes.
	Результат.Вставить("РеквизитыХарактеристик",       РеквизитыХарактеристик);                         // search.features.attributes.
	Результат.Вставить("МерныеХарактеристики",         МерныеХарактеристики);                           // search.metrics.
	Результат.Вставить("ОбновлениеНоменклатуры",       ТаблицаОбновления);                              // update.
	Результат.Вставить("НаборПолей",                   "");                                             // fieldSet
	Результат.Вставить("КоличествоЗаписей",            Неопределено);                                   // Количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",                Неопределено);                                   // Номер страницы для страничной загрузки.
	Результат.Вставить("ВариантПостраничнойНавигации", ВариантыПостраничнойНавигации().ПоНоменклатуре); // pagingBy
	
	Возврат Результат;
	
КонецФункции

// Описание параметров списка брендов.
//
Функция ОписаниеПараметровЗапросаБренды() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыБрендов",        Новый Массив); // идентификаторы брендов.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // идентификаторы производителей.
	Результат.Вставить("ИдентификаторыКатегорий",      Новый Массив); // идентификаторы категорий.
	Результат.Вставить("НаборПолей",        ""); // набор полей возвращаемых данных.
	Результат.Вставить("КоличествоЗаписей", 0); // количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",     0); // номер страницы для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

// Описание параметров получения списка производителей.
//
Функция ОписаниеПараметровЗапросаПроизводители() Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоиска",                 ""); // наименование категории.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // идентификаторы производителей.
	Результат.Вставить("ИдентификаторыКатегорий",      Новый Массив); // идентификаторы категорий.
	Результат.Вставить("НаборПолей",        ""); // набор полей возвращаемых данных.
	Результат.Вставить("КоличествоЗаписей", 0); // количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",     0); // номер страницы для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска категорий CategoryRequest.
//
Функция ОписаниеПараметровЗапросаКатегории() Экспорт
	
	ОбновляемыеКатегории = Новый ТаблицаЗначений; // CategoryRequest.update.
	ОбновляемыеКатегории.Колонки.Добавить("Идентификатор",  Новый ОписаниеТипов("Строка")); // id
	ОбновляемыеКатегории.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));   // modified
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений; // CategoryRequest.search.attributes.
	ДополнительныеРеквизиты.Колонки.Добавить("Идентификатор",         Типы().Строка);      // attributeId.
	ДополнительныеРеквизиты.Колонки.Добавить("Значение",              Типы().Простой);     // value, searchValue.
	ДополнительныеРеквизиты.Колонки.Добавить("ИдентификаторЗначения", Типы().Строка);      // valueId.
	ДополнительныеРеквизиты.Колонки.Добавить("МинимальноеЗначение",   Типы().Простой);     // range.min.
	ДополнительныеРеквизиты.Колонки.Добавить("МаксимальноеЗначение",  Типы().Простой);     // range.max.
	ДополнительныеРеквизиты.Колонки.Добавить("КодКлассификатора",     Типы().Строка);      // classifier.code.
	ДополнительныеРеквизиты.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка); // classifier.name.
	ДополнительныеРеквизиты.Колонки.Добавить("Наименование",          Типы().Строка);      // attributeName.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);               // ids.
	Результат.Вставить("Все",            Ложь);                       // all.
	Результат.Вставить("ТолькоКорневые", Ложь);                       // all.root.
	Результат.Вставить("ТолькоКонечныеПотомки",        Ложь);         // parents.onlyLeaves.
	Результат.Вставить("ТолькоПрямыеПотомки",          Истина);       // parents.onlyDirect.
	Результат.Вставить("ИдентификаторыРодителей",      Новый Массив); // parents.ids.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // manufacturerIds.
	Результат.Вставить("ИдентификаторыХарактеристик",  Новый Массив); // featureIds.
	Результат.Вставить("ИдентификаторыНоменклатуры",   Новый Массив); // nomenclatureIds.
	Результат.Вставить("ПоисковаяСтрока",              "");           // search.text.
	Результат.Вставить("ТолькоКонечныеКатегории", Ложь);              // search.onlyLeaves.
	Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты); // search.attributes.
	Результат.Вставить("ОбновляемыеКатегории",    ОбновляемыеКатегории); // update.
	Результат.Вставить("НаборПолей",              "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",       Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",           Неопределено); // Номер страницы.
	
	Возврат Результат;
		
КонецФункции

// Описание поиска реквизитов AttributeRequest.
//
Функция ОписаниеПараметровЗапросаДополнительныеРеквизиты() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",              Новый Массив); // ids.
	Результат.Вставить("ИдентификаторыКатегорий",     Новый Массив); // categoryIds.
	Результат.Вставить("ИдентификаторыНоменклатуры",  Новый Массив); // nomenclatureId.
	Результат.Вставить("ИдентификаторХарактеристики", "");           // featureId.
	Результат.Вставить("НаборПолей",                  "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",           Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",               Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений реквизитов AttributeValueRequest.
//
Функция ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов() Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Новый ОписаниеТипов("Строка")); // search.categoryId.
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Новый ОписаниеТипов("Строка")); // search.attributeId.
	ТаблицаПоиска.Колонки.Добавить("Значение",                              Новый ОписаниеТипов("Строка")); // search.value.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);  // ids.
	Результат.Вставить("ТаблицаПоиска",  ТаблицаПоиска); // search.
	Результат.Вставить("НаборПолей",     "");            // fieldSet.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений дополнительных реквизитов категорий AttributeValuesByCategoriesRequest.
//
Функция ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий() Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Типы().Строка); // search.categoryId.
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Типы().Строка); // search.attributeId.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);  // categoryIds.
	Результат.Вставить("ТаблицаПоиска",  ТаблицаПоиска); // search.
	Результат.Вставить("НаборПолей", "");                // fieldSet.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска характеристик FeatureRequest.
//
Функция ОписаниеПараметровЗапросаХарактеристики() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",            Новый Массив); // ids.
	Результат.Вставить("ИдентификаторыКатегорий",   Новый Массив); // categoryIds.
	Результат.Вставить("ИдентификаторНоменклатуры", "");           // nomenclatureId.
	Результат.Вставить("НаборПолей",                "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",         Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",             Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска рекламных записей AdvertRequest.
//
Функция ОписаниеПараметровЗапросаРекламныеЗаписи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",            Новый Массив); // ids.
	Результат.Вставить("КоличествоЗаписей",         Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",             Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска NomenclatureByBarcodesRequest.
//
Функция ОписаниеПараметровЗапросаНоменклатураПоШтрихкодам() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Штрихкоды", Новый Массив); // barcodes.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапросов

// Запрос цепочки родительских рубрик до корня.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории рубрикатора.
//  НаборПолей				 - Строка - набор полей данных.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаВсеРодительскиеКатегории(ИдентификаторыКатегорий, НаборПолей = "min") Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос всех родительских категорий'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/categoryPathToRoot";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "pathToRoot";
	ПараметрыКоманды.Обработка = "CategoryPathToRootResponse.pathToRoot";
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", НаборПолей);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryPathToRootRequest"));
	ДополнитьМассив(Объект.ids, ИдентификаторыКатегорий);
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект, 1);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос брендов BrandRequest.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. ОписаниеПараметровЗапросаБренды().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаБренды(ПараметрыЗапроса) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос брендов'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/brand";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "brands";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыБренды();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
		
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("BrandRequest"));
	Если ПараметрыЗапроса.Свойство("ИдентификаторыБрендов")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыБрендов) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.ИдентификаторыБрендов);
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ИдентификаторыПроизводителей")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ИдентификаторыКатегорий")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос производителей.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. ОписаниеПараметровЗапросаПроизводители().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПроизводители(ПараметрыЗапроса) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос производителей'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/manufacturer";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "manufacturers";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыПроизводители();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("ManufacturerRequest"));
	
	Если ПараметрыЗапроса.Свойство("ИдентификаторыПроизводителей")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.Ids, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	Иначе
		ОбъектПоиск = ФабрикаXDTO.Создать(ТипОбъектаXDTO("ManufacturerRequest.search"));
		Если ПараметрыЗапроса.Свойство("ИдентификаторыКатегорий")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
			ДополнитьМассив(ОбъектПоиск.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("СтрокаПоиска")
			И ЗначениеЗаполнено(ПараметрыЗапроса.СтрокаПоиска) Тогда
			ОбъектПоиск.name = ПараметрыЗапроса.СтрокаПоиска;
		КонецЕсли;
		Объект.search = ОбъектПоиск;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос рубрик.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаКатегории().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаКатегории(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос пути до категории'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/category";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "categories";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка выполнения запроса.'"));
	ПараметрыКоманды.Обработка = ОписаниеТаблицыКатегории(); // CategoryResponse
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	
	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыРодителей) Тогда
		
		ОбъектРодители = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.parents"));
		ОбъектРодители.onlyLeaves = ПараметрыЗапроса.ТолькоКонечныеПотомки;
		ОбъектРодители.onlyDirect = ПараметрыЗапроса.ТолькоПрямыеПотомки;
		ДополнитьМассив(ОбъектРодители.ids, ПараметрыЗапроса.ИдентификаторыРодителей);
		Объект.parents = ОбъектРодители;
		
	ИначеЕсли ПараметрыЗапроса.Все ИЛИ ПараметрыЗапроса.ТолькоКорневые Тогда
		
		ЗначениеВсеКатегории = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.all"));
		ЗначениеВсеКатегории.root = ПараметрыЗапроса.ТолькоКорневые;
		Объект.all = ЗначениеВсеКатегории;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыХарактеристик) Тогда
		
		ДополнитьМассив(Объект.featureIds,ПараметрыЗапроса.ИдентификаторыХарактеристик);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыНоменклатуры) Тогда
		
		ДополнитьМассив(Объект.nomenclatureIds, ПараметрыЗапроса.ИдентификаторыНоменклатуры);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбновляемыеКатегории) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ОбновляемыеКатегории Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.update"));
			ОбъектПоиска.id       = ЭлементКоллекции.Идентификатор;
			ОбъектПоиска.modified = ЭлементКоллекции.ДатаОбновления;
			Объект.update.Добавить(ОбъектПоиска);
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ПоисковаяСтрока)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.ТолькоКонечныеКатегории)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.ДополнительныеРеквизиты) Тогда
		
		ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search"));
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ПоисковаяСтрока) Тогда
			ОбъектПоиска.text = ПараметрыЗапроса.ПоисковаяСтрока;
		КонецЕсли;
		Если ПараметрыЗапроса.ТолькоКонечныеКатегории Тогда
			ОбъектПоиска.onlyLeaves = Истина;
		КонецЕсли;
		
		// Заполнение реквизитов поиска.
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ДополнительныеРеквизиты) Тогда
			Для каждого РеквизитПоиска Из ПараметрыЗапроса.ДополнительныеРеквизиты Цикл
				ОбъектРеквизитов = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes"));
				Если ЗначениеЗаполнено(РеквизитПоиска.Идентификатор) Тогда
					
					ОбъектРеквизитов.attributeId = РеквизитПоиска.Идентификатор;
					Если ЗначениеЗаполнено(РеквизитПоиска.Значение) Тогда
						ОбъектРеквизитов.value = РеквизитПоиска.Значение;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(РеквизитПоиска.ИдентификаторЗначения) Тогда
						ОбъектРеквизитов.valueId = РеквизитПоиска.ИдентификаторЗначения;
					КонецЕсли;
					
					// Заполнение диапазона значений (число или дата) - range.
					Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение)
						ИЛИ ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
						ЗначениеДиапазона = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes.range"));
						Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение) Тогда
							ЗначениеДиапазона.min = РеквизитПоиска.МинимальноеЗначение;
						КонецЕсли;
						Если ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
							ЗначениеДиапазона.max = РеквизитПоиска.МаксимальноеЗначение;
						КонецЕсли;
						ОбъектРеквизитов.range = ЗначениеДиапазона;
					КонецЕсли;
					
					// Заполнение классификатора валют или стран - classifier.
					Если ЗначениеЗаполнено(РеквизитПоиска.КодКлассификатора)
						ИЛИ ЗначениеЗаполнено(РеквизитПоиска.НаименованиеКлассификатора) Тогда
						ЗначениеКлассификатора = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes.classifier"));
						ЗначениеКлассификатора.code = РеквизитПоиска.КодКлассификатора;
						ЗначениеКлассификатора.name = РеквизитПоиска.НаименованиеКлассификатора;
						ОбъектРеквизитов.classifier = ЗначениеКлассификатора;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.Наименование) Тогда
					// Поиск по названию и значению дополнительного реквизита.
					ОбъектРеквизитов.attributeName = РеквизитПоиска.Наименование;
					ОбъектРеквизитов.searchValue   = РеквизитПоиска.Значение;
					
				КонецЕсли;
				ОбъектПоиска.attributes = ОбъектРеквизитов;
			КонецЦикла;
		КонецЕсли;
		
		Объект.search = ОбъектПоиска;
		
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос дополнительных реквизитов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаДополнительныеРеквизиты().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос дополнительных реквизитов'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attribute";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributes";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыДополнительныхРеквизитов(); // AttributeResponse.attributes.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыНоменклатуры) Тогда
		ДополнитьМассив(Объект.nomenclatureId, ПараметрыЗапроса.ИдентификаторыНоменклатуры);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторХарактеристики) Тогда
		Объект.featureId = ПараметрыЗапроса.ИдентификаторХарактеристики;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос формализованных значений дополнительных реквизитов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаЗначенияДополнительныхРеквизитов(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос значений дополнительных реквизитов'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attributeValue";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributeValues";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыЗначенияДополнительныхРеквизитов(); // AttributeValueResponse.attributeValues.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValueRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ТаблицаПоиска) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ТаблицаПоиска Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValueRequest.search"));
			ОбъектПоиска.categoryId  = ЭлементКоллекции.ИдентификаторКатегории;
			ОбъектПоиска.attributeId = ЭлементКоллекции.ИдентификаторДополнительногоРеквизита;
			ОбъектПоиска.value       = ЭлементКоллекции.Значение;
			Объект.search.Добавить(ОбъектПоиска);
		КонецЦикла; 
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос формализованных значения конкретных рубрик с разбивкой по дополнительным реквизитам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос значений дополнительных реквизитов категорий'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attributeValue/byCategories";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributeValuesByCategories";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыЗначенияДополнительныхРеквизитовКатегорий();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValuesByCategoriesRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ТаблицаПоиска) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ТаблицаПоиска Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValuesByCategoriesRequest.search"));
			ОбъектПоиска.categoryId = ЭлементКоллекции.ИдентификаторКатегории;
			ОбъектПоиска.attributeId = ЭлементКоллекции.ИдентификаторДополнительногоРеквизита;
			Объект.search.Добавить(ОбъектПоиска);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос характеристик.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаХарактеристики().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаХарактеристики(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос характеристик'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/feature";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "features";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыХарактеристики(); // FeatureResponse.features.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("FeatureRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторНоменклатуры) Тогда
		Объект.nomenclatureId = ПараметрыЗапроса.ИдентификаторНоменклатуры;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос рекламных записей.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаРекламныеЗаписи().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаРекламныеЗаписи(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос рекламных записей'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/advert";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "adverts";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыРекламныеЗаписи(); // AdvertResponse.adverts.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AdvertRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект, 1);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос карточек номенклатуры.
//
// Параметры:
//  ПараметрыЗапроса			 - Структура - см. ОписаниеПараметровЗапросаНоменклатура().
//  ДополнительныеПараметры	 - Произвольный - дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаНоменклатура(ПараметрыЗапроса) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос карточек номенклатуры'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "nomenclatures";
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Ошибки.Вставить(401, 
		НСтр("ru = 'При поиске номенклатуры по штрихкоду в сервисе 1С:Номенклатура возникла ошибка аутентификации.
			|Проверьте параметры подключения к Интернет-поддержке пользователей.'"));
	ПараметрыКоманды.Вставить("ДопустимоПустоеТелоОтвета", Ложь);
	
	ПараметрыКоманды.Обработка = ОписаниеТаблицыНоменклатуры();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pagingBy", ПараметрыЗапроса.ВариантПостраничнойНавигации);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest"));
	
	ПоискЗаполнен = Ложь;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		// Идентификаторы номенклатуры.
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
		ПоискЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Штрихкоды) Тогда
		// Штрихкоды.
		ДополнитьМассив(Объект.barcodes, ПараметрыЗапроса.Штрихкоды);
		ПоискЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбновлениеНоменклатуры) Тогда
		// Запрос обновления
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ОбновлениеНоменклатуры Цикл
			ОбъектОбновление = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.update"));
			ОбъектОбновление.id = ЭлементКоллекции.Идентификатор;
			ОбъектОбновление.modified = ЭлементКоллекции.ДатаОбновления;
			Объект.update.Добавить(ОбъектОбновление);
		КонецЦикла;
		ПоискЗаполнен = Истина;
	КонецЕсли;
	
	// Заполнение атрибутов характеристик.
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РеквизитыХарактеристик) Тогда
		ЗаполнитьАтрибутыЗапроса(ПараметрыЗапроса.РеквизитыХарактеристик, Объект, "featuresAttributes");
	КонецЕсли;
	
	Если Не ПоискЗаполнен Тогда
		// Поиск по строке и реквизитам.
		ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search"));
		ОбъектПоиска.text = ПараметрыЗапроса.СтрокаПоиска;
		
		// Заполнение атрибутов характеристик.
		
		ЗаполнитьАтрибутыЗапроса(ПараметрыЗапроса.ДополнительныеРеквизиты, ОбъектПоиска, "search.attributes");
				
		// Заполнение мерных характеристик.
		
		МерныеХарактеристики = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search.metrics"));
		
		ЕстьМерныеХарактеристики = Ложь;
		
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.МерныеХарактеристики Цикл
			
			ЗначениеМернойХарактеристики = ЭлементКоллекции.Значение;
			
			Если ЗначениеЗаполнено(ЗначениеМернойХарактеристики) Тогда
				
				ЕстьМерныеХарактеристики = Истина;
				
				ИмяПоля = СоответствиеИменМерныхХарактеристик()[ЭлементКоллекции.Ключ];
				
				МернаяХарактеристика = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search.metrics." + ИмяПоля));
				
				Если ЗначениеЗаполнено(ЗначениеМернойХарактеристики.МинимальноеЗначение) Тогда
					МернаяХарактеристика.min = ЗначениеМернойХарактеристики.МинимальноеЗначение;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЗначениеМернойХарактеристики.МаксимальноеЗначение) Тогда
					МернаяХарактеристика.max = ЗначениеМернойХарактеристики.МаксимальноеЗначение;
				КонецЕсли;
				
				МерныеХарактеристики[ИмяПоля] = МернаяХарактеристика;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьМерныеХарактеристики Тогда
			ОбъектПоиска.metrics = МерныеХарактеристики;
		КонецЕсли;
		
		Объект.search = ОбъектПоиска;
	КонецЕсли;
	
	// Производители.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	КонецЕсли;
	
	// Категория.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторКатегории) Тогда
		ОбъектКатегория = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.category"));
		ОбъектКатегория.Id = ПараметрыЗапроса.ИдентификаторКатегории;
		Если ПараметрыЗапроса.ИскатьВПодчиненных Тогда
			ОбъектКатегория.subcategoriesSearch = Истина;
		КонецЕсли;
		Объект.category = ОбъектКатегория;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Не указаны параметры поиска.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос ОКЕИ классификатора.
//
// Параметры:
//  КодыЕдиницИзмерения	- Массив - коды измерений, если пустой массив, то весь классификатор.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаКлассификаторОКЕИ(КодыЕдиницИзмерения) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос ОКЕИ классификатора'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/okei";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "units";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыЕдиницыИзмеренияОКЕИ();
	
	Объект = Новый Структура;
	Данные = Новый Массив;
	Если ЗначениеЗаполнено(КодыЕдиницИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Данные, КодыЕдиницИзмерения);
	КонецЕсли;
	Объект.Вставить("okei", Данные);
	
	ПараметрыКоманды.Данные = ЗначениеВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос штрихкодов NomenclatureByBarcodesRequest.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. ОписаниеПараметровЗапросаБренды().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаНоменклатураПоШтрихкодам(ПараметрыЗапроса) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос номенклатуры по штрихкодам'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/byBarcode";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "nomenclatures";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыНоменклатурыПоШтрихкодам();
			
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureByBarcodesRequest"));
	Если ПараметрыЗапроса.Свойство("Штрихкоды")
		И ЗначениеЗаполнено(ПараметрыЗапроса.Штрихкоды) Тогда
		ДополнитьМассив(Объект.barcodes, ПараметрыЗапроса.Штрихкоды);
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект, 1);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПараметрыБиллинга

// Метод проверки наличия опции.
//
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПроверкаОпции() Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка доступа к сервису 1С:Номенклатура'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/hasAccess";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Обработка = "ИстинаПоКоду200";
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Метод покупки карточек номенклатуры.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы номенклатуры (Число).
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПокупкаНоменклатуры(Идентификаторы) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Покупка карточек номенклатуры'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/buy";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена карточка номенклатуры.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Обработка = "ИстинаПоКоду200";
	
	Данные = Новый Структура;
	Данные.Вставить("ids", Идентификаторы);
	ПараметрыКоманды.Данные = ЗначениеВФорматJSON(Данные);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Метод баланса опций.
//
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаБалансОпций() Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка баланса сервиса 1С:Номенклатура'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/optionBalance";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "balance";
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции
#КонецОбласти

#Область ВыполнениеМетодов

// Общие настройки для подключения к сервису 1С:Бизнес-сеть.
//
Функция ПараметрыСоединенияССервисом() Экспорт

	ПараметрыСоединения = Новый Структура;
	
	ПараметрыСоединения.Вставить("ИмяСервера", "catalog-api.1c.ru");
	ПараметрыСоединения.Вставить("Порт",       443);
	ПараметрыСоединения.Вставить("Таймаут",    30);
	ПараметрыСоединения.Вставить("Прокси",     ПолучениеФайловИзИнтернета.ПолучитьПрокси("https"));
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение",
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС));
				
	Возврат ПараметрыСоединения;

КонецФункции

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ) Экспорт
	
	// Получение параметров соединения м сервисом.
	СохранятьПараметрыСеанса = Ложь;
	
	ПараметрыСоединения = Неопределено;
	
	ПараметрыКоманды.Свойство("ПараметрыСоединенияССервисом", ПараметрыСоединения);
	
	Если ПараметрыСоединения = Неопределено Тогда
		ПараметрыСоединения = ПараметрыСоединенияССервисом();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Таймаут) Тогда
		ПараметрыСоединения.Таймаут = ПараметрыКоманды.Таймаут;
	КонецЕсли;
	
	// Общая ошибка.
	
	ОшибкиСервиса = Новый Соответствие;
	ОшибкиСервиса.Вставить(401, НСтр("ru = 'Ошибка аутентификации.'"));
	ОшибкиСервиса.Вставить(403, НСтр("ru = 'Доступ запрещен.'"));
	ОшибкиСервиса.Вставить(410, НСтр("ru = 'Объект удален.'"));
	ОшибкиСервиса.Вставить(429, НСтр("ru = 'Превышено количество запросов к сервису.'"));
	ОшибкиСервиса.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	ОшибкиСервиса.Вставить(502, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	
	Для каждого ЭлементКоллекции Из ОшибкиСервиса Цикл
		Если ПараметрыКоманды.Ошибки[ЭлементКоллекции.Ключ] = Неопределено Тогда
			ПараметрыКоманды.Ошибки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Установка соединения  в сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, ПараметрыСоединения.Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Номенклатура'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ВыполнитьЗаписьСобытияВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ИспользоватьВыполнениеДействийВПовторе() Тогда
		ПараметрыКоманды.Вставить("СоединениеССервисом", Соединение);
		ПараметрыПовтора = НовыеПараметрыПовтора();
		РезультатЗапроса = ВыполнитьДействиеВПовторе("ЗапросКСервису", ПараметрыКоманды, ПараметрыПовтора);
		Возврат ОбработатьОтветСервиса(ПараметрыКоманды, ПараметрыКоманды.КодСостояния, РезультатЗапроса, Отказ);
	КонецЕсли;
	
	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	Заголовки = СформироватьЗаголовкиЗапроса(Соединение, ПараметрыСоединения, ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка заголовков запроса.
	Для каждого ЭлементКоллекции Из Заголовки Цикл
		HTTPЗапрос.Заголовки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьЗапросКСервису(ПараметрыКоманды, HTTPЗапрос, Соединение, Отказ);
	
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(ПараметрыКоманды, ПараметрыКоманды.КодСостояния, РезультатЗапроса, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Идентификатор минимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМинимальный() Экспорт
	
	// Минимальный набор полей возвращаемых полей fieldSet.
	// Дает описание ссылки на объект, содержит только идентификатор и текстовое представление объекта.
	
	Возврат "min";
	
КонецФункции

// Идентификатор стандартного набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейСтандартный() Экспорт
	
	// Стандартный набор возвращаемых полей fieldSet.
	// Содержит поля набора min и дополнительные поля, необходимые для отображения списка или дерева объектов.
	
	Возврат "standard";
	
КонецФункции

// Идентификатор максимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМаксимальный() Экспорт
	
	// Максимальный набор возвращаемых полей fieldSet.
	// Содержит поля standard и все остальные, используется в основном для работы с конкретным объектом,
	// как правило для создания этого объекта на клиентской стороне.
	
	Возврат "max";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеОбъектов

// Получение таблицы дат последнего изменения видов номенклатур.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - заполняемая таблица.
//  ВсеРежимыОбновления	 - Булево - признак учета всех режимов обновления: автоматический, ручной.
//
Процедура ПолучитьДатыОбновленияВидовНоменклатуры(ДанныеДляОтправки, ВсеРежимыОбновления = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЭтоГруппаКатегорий
	|	И (&ВсеРежимыОбновления
	|			ИЛИ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически)";
	
	Запрос.УстановитьПараметр("ВсеРежимыОбновления", ВсеРежимыОбновления);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляОтправки = Запрос.Выполнить().Выгрузить();	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение таблицы дат последнего изменения номенклатуры.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - заполняемая таблица.
//  ВсеРежимыОбновления	 - Булево - признак учета всех режимов обновления: автоматический, ручной.
//
Процедура ПолучитьДатыОбновленияНоменклатуры(ДанныеДляОтправки, ВсеРежимыОбновления = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК Идентификатор,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (&ВсеРежимыОбновления
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически)
	|	И НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик В (&РежимыИсключения)
	|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = &Сопоставлено";
	
	Запрос.УстановитьПараметр("ВсеРежимыОбновления", ВсеРежимыОбновления);
	Запрос.УстановитьПараметр("РежимыИсключения",    РаботаСНоменклатурой.РежимыЗагрузкиХарактеристикИсключения());
	Запрос.УстановитьПараметр("Сопоставлено",        Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляОтправки = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновление объектов на автоматическом обновлении.
//
// Параметры:
//  КоличествоОбновленныхЗаписей - Число - количество обновленных записей.
//
Процедура ОбновитьАвтоматическиОбновляемыеОбъекты(КоличествоОбновленныхЗаписей) Экспорт
	
	ДатыОбновленияВидовНоменклатуры = Неопределено;
	ДатыОбновленияНоменклатуры      = Неопределено;
	ИдентификаторыКатегорий         = Новый Массив;
	КоличествоОбновленныхВидовНоменклатуры = 0;
	КоличествоОбновленнойНоменклатуры      = 0;
	
	ПолучитьДатыОбновленияВидовНоменклатуры(ДатыОбновленияВидовНоменклатуры);
	ПолучитьДатыОбновленияНоменклатуры(ДатыОбновленияНоменклатуры);
	
	ДанныеОбновленияПоВидамНоменклатуры = РаботаСНоменклатурой.ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДатыОбновленияВидовНоменклатуры);
	ДанныеОбновленияПоНоменклатуре      = РаботаСНоменклатурой.ПолучитьИзмененияИзСервисаПоНоменклатуре(ДатыОбновленияНоменклатуры);
	
	Если ДанныеОбновленияПоНоменклатуре.Количество() = 0 
		И ДанныеОбновленияПоВидамНоменклатуры.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	// Обновление Видов номенклатуры
	
	Если ДанныеОбновленияПоВидамНоменклатуры.Количество() > 0  Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, ДанныеОбновленияПоВидамНоменклатуры.ВыгрузитьКолонку("Идентификатор"), Истина);	
	КонецЕсли;
	Если ДанныеОбновленияПоНоменклатуре.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), Истина);	
	КонецЕсли;
	
	РезультатАнализа = Новый ТаблицаЗначений;
	
	// Обновление видов номенклатуры
	
	Если ИдентификаторыКатегорий.Количество() > 0 Тогда
		РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, РезультатАнализа, Неопределено, Истина);
		КоличествоОбновленныхВидовНоменклатуры = РезультатАнализа.Количество();
	КонецЕсли;
		
	// Обновление номенклатуры
	
	Если ДанныеОбновленияПоНоменклатуре.Количество() > 0 Тогда
		РазобратьИзмененияНоменклатуры(ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("Идентификатор"), РезультатАнализа, Неопределено, Неопределено, Истина);
		КоличествоОбновленнойНоменклатуры = РезультатАнализа.Количество();
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	КоличествоОбновленныхЗаписей = КоличествоОбновленныхВидовНоменклатуры + КоличествоОбновленнойНоменклатуры;
	
КонецПроцедуры

// Обновление вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			 - Ссылка - ссылка на вид номенклатуры.
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//
Процедура ОбновитьВидНоменклатуры(ВидНоменклатуры, ИдентификаторыКатегории, ОбновлятьЗаблокированныеРеквизиты) Экспорт
	
	РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегории, Неопределено, ВидНоменклатуры, Истина, ОбновлятьЗаблокированныеРеквизиты);	
	
КонецПроцедуры

// Обновление номенклатуры.
//
// Параметры:
//  Номенклатура				 - Ссылка - ссылка на номенклатуру.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры.
//
Процедура ОбновитьНоменклатуру(Номенклатура, ИдентификаторНоменклатуры, ОбновлятьЗаблокированныеРеквизиты, ЗагружатьКатегории = Ложь) Экспорт
	
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторНоменклатуры);
	
	РазобратьИзмененияНоменклатуры(
		МассивИдентификаторов,
		Неопределено,
		Неопределено,
		Номенклатура,
		Истина,
		ОбновлятьЗаблокированныеРеквизиты,
		ЗагружатьКатегории);
	
КонецПроцедуры


#Область ВидыНоменклатуры

// Анализ отличий реквизитов и обновление видов номенклатуры базы и категорий сервиса.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - массив идентификаторов категорий.
//  РезультатАнализа		 - ТаблицаЗначений, Неопределено - результат анализа.
//  ВидНоменклатуры			 - СправочникСсылка - ссылка на вид номенклатуры, для обновления конкретного объекта.
//  РежимОбновления			 - Булево - если Истина, происходит обновление объектов.
//
Процедура РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, 
			РезультатАнализа, 
			ВидНоменклатуры = Неопределено, 
			РежимОбновления = Ложь,
			ОбновлятьЗаблокированныеРеквизиты = Ложь) Экспорт
	
	Если РезультатАнализа = Неопределено Тогда
		РезультатАнализа = Новый ТаблицаЗначений;
	КонецЕсли; 
	
	РезультатАнализа.Колонки.Добавить("НеСопоставленоЗначений",   Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("НеСопоставленоРеквизитов", Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("ИзмененоРеквизитов",       Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("ИдентификаторыКатегорий",  Новый ОписаниеТипов("СписокЗначений"));
	РезультатАнализа.Колонки.Добавить("ОбновляетсяАвтоматически", Новый ОписаниеТипов("Булево"));
	РезультатАнализа.Колонки.Добавить("ВидНоменклатуры");
	
	ДанныеПоКатегориям = РаботаСНоменклатурой.ДанныеКатегорийСервиса(ИдентификаторыКатегорий);
	
	Если ДанныеПоКатегориям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидНоменклатуры = Неопределено Тогда
		СсылкиНаОбъекты = Новый Массив;
	Иначе 
		СсылкиНаОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидНоменклатуры);
	КонецЕсли;
	
	РаботаСНоменклатурой.АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымКатегорий(ДанныеПоКатегориям, СсылкиНаОбъекты);
	
	ЗначенияРеквизитовВидовНоменклатуры = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры(
			ВидНоменклатуры, ЗначенияРеквизитовВидовНоменклатуры);
	Иначе		
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры(
			ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий), ЗначенияРеквизитовВидовНоменклатуры);
	КонецЕсли;
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если Не ОбновлятьЗаблокированныеРеквизиты Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0]);
		
		Если ОбъектМетаданных <> Неопределено Тогда
			БлокируемыеРеквизиты = РаботаСНоменклатурой.БлокируемыеРеквизитыОбъекта(ОбъектМетаданных.ПолноеИмя());			
		КонецЕсли;
		
	КонецЕсли;
		
	ЗаполнитьТехническиеРеквизитыВидовНоменклатуры(ЗначенияРеквизитовВидовНоменклатуры);
	
	Для каждого ТекущийВидНоменклатуры Из ЗначенияРеквизитовВидовНоменклатуры Цикл
		
		СоответствиеРеквизитовИЗначений = РаботаСНоменклатурой.
			СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ТекущийВидНоменклатуры.ВидНоменклатуры);
		
		Если ТекущийВидНоменклатуры.ИдентификаторыКатегорий.Количество() = 1 Тогда
			СтрокаДанных = ДанныеПоКатегориям.Найти(ТекущийВидНоменклатуры.ИдентификаторыКатегорий[0].Значение, "Идентификатор");
			Если СтрокаДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТекущийВидНоменклатуры.ИдентификаторыКатегорий.Количество() = 0 Тогда	
			Возврат;
		Иначе
			СтрокаДанных = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(
				ДанныеКатегорийПоИдентификаторам(ТекущийВидНоменклатуры.ИдентификаторыКатегорий, ДанныеПоКатегориям));
		КонецЕсли;	
			
		РаботаСНоменклатурой.ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
			СтрокаДанных.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
			
		РаботаСНоменклатурой.ЗаполнитьСоответствиеДополнительныхРеквизитовВидаНоменклатуры(
			СтрокаДанных.Характеристики.ДополнительныеРеквизиты, СоответствиеРеквизитовИЗначений);
					
		РазобратьРеквизитыВидовНоменклатуры(СтрокаДанных, ТекущийВидНоменклатуры, РезультатАнализа, БлокируемыеРеквизиты, РежимОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Анализ отличий реквизитов и обновление номенклатуры базы и номенклатуры сервиса.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - массив идентификаторов номенклатуры.
//  РезультатАнализа			 - ТаблицаЗначений - результат анализа.
//  РеквизитыДляОбновления		 - ТаблицаЗначений - таблица измененных реквизитов.
//  Номенклатура				 - СправочникСсылка - ссылка на номенклатуру, для обновления конкретного объекта.
//  РежимОбновления				 - Булево - если Истина, происходит обновление объектов.
//
Процедура РазобратьИзмененияНоменклатуры(
			ИдентификаторыНоменклатуры, 
			РезультатАнализа, 
			РеквизитыДляОбновления, 
			Номенклатура = Неопределено, 
			РежимОбновления = Ложь,
			ОбновлятьЗаблокированныеРеквизиты = Ложь,
			ЗагружатьКатегории = Ложь) Экспорт
			
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	
	РезультатАнализа = Новый ТаблицаЗначений;
	
	РезультатАнализа.Колонки.Добавить("ИдентификаторНоменклатуры",     Новый ОписаниеТипов("Строка"));
	РезультатАнализа.Колонки.Добавить("ОбновляетсяАвтоматически",      Новый ОписаниеТипов("Булево"));
	РезультатАнализа.Колонки.Добавить("КоличествоНовыхЗначений",       Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("КоличествоИзмененныхЗначений",  Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("КоличествоВыбранныхРеквизитов", Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("Номенклатура");
	РезультатАнализа.Колонки.Добавить("ВидНоменклатуры");
	
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры, Ложь, Ложь);
	
	Если ДанныеПоНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатурой.АктуализироватьКатегорииРеквизитыИЗначенияПоДаннымНоменклатуры(ДанныеПоНоменклатуре);
	РаботаСНоменклатурой.АктуализироватьИдентификаторыОбъектов(ИдентификаторыНоменклатуры, "Номенклатура", Номенклатура);
	
	// Не купленная номенклатура исключается отдельным методом, поскольку дополнительно необходимо отключение режима автообновления.
	
	ИсключитьНеКупленнуюНоменклатуруИОтключитьОбновление(ДанныеПоНоменклатуре);
	
	Если Не ЗначениеЗаполнено(ДанныеПоНоменклатуре) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовНоменклатуры = Новый ТаблицаЗначений;
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура), ЗначенияРеквизитовНоменклатуры);		
	Иначе
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(
			НоменклатураПоИдентификаторам(ИдентификаторыНоменклатуры), ЗначенияРеквизитовНоменклатуры);
	КонецЕсли;
			
	Если ЗначенияРеквизитовНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТехническиеРеквизитыНоменклатуры(ЗначенияРеквизитовНоменклатуры);	
	
	ЗаполнитьДанныеПоХарактеристикам(ЗначенияРеквизитовНоменклатуры, ДанныеПоНоменклатуре);
	
	СоответствиеРеквизитовИЗначений = Неопределено;
	
	Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() 
		И РаботаСНоменклатурой.ИспользуютсяДополнительныеРеквизиты() Тогда
		
		РаботаСНоменклатуройПереопределяемый.
			ПолучитьЗначенияДополнительныхРеквизитов(
				ЗначенияРеквизитовНоменклатуры.ВыгрузитьКолонку("Номенклатура"), ЗначенияДополнительныхРеквизитов);	
		РаботаСНоменклатурой.
			ПолучитьСоответствиеРеквизитовИЗначений(
				ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений);
	КонецЕсли;
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если Не ОбновлятьЗаблокированныеРеквизиты Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.Типы()[0]);
		
		Если ОбъектМетаданных <> Неопределено Тогда
			БлокируемыеРеквизиты = РаботаСНоменклатурой.БлокируемыеРеквизитыОбъекта(ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
		
	КонецЕсли;
			
	Для каждого СтрокаДанныхПоНоменклатуре Из ДанныеПоНоменклатуре Цикл
		
		СтрокиНоменклатурыБазы = ЗначенияРеквизитовНоменклатуры.НайтиСтроки(
			Новый Структура("ИдентификаторНоменклатуры", СтрокаДанныхПоНоменклатуре.Идентификатор));
			
		Для каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБазы Цикл
			
			ДополнительныеРеквизитыНоменклатуры = Неопределено;
			
			Если ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов) 
				И РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
				
				ДополнительныеРеквизитыНоменклатуры = ЗначенияДополнительныхРеквизитов.Скопировать(
					Новый Структура("ВладелецСвойств", СтрокаНоменклатуры.Номенклатура));
			КонецЕсли;
			
			ПараметрыМетода = Новый Структура;
			
			ПараметрыМетода.Вставить("СтрокаДанныхПоНоменклатуре",          СтрокаДанныхПоНоменклатуре);
			ПараметрыМетода.Вставить("СтрокаНоменклатурыИБ",                СтрокаНоменклатуры);
			ПараметрыМетода.Вставить("ДополнительныеРеквизитыНоменклатуры", ДополнительныеРеквизитыНоменклатуры);
			ПараметрыМетода.Вставить("СоответствиеРеквизитовИЗначений",     СоответствиеРеквизитовИЗначений);
			ПараметрыМетода.Вставить("РезультатАнализа",                    РезультатАнализа);
			ПараметрыМетода.Вставить("РеквизитыДляОбновления",              РеквизитыДляОбновления);
			ПараметрыМетода.Вставить("БлокируемыеРеквизиты",                БлокируемыеРеквизиты);
			ПараметрыМетода.Вставить("РежимОбновления",                     РежимОбновления);
			ПараметрыМетода.Вставить("ЗагружатьКатегории",                  ЗагружатьКатегории);
						
			РазобратьРеквизитыНоменклатуры(ПараметрыМетода);	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДанными

// Получение вида номенклатуры информационной базы по идентификаторам.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив из Строка - массив идентификаторов.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - массив ссылок видов номенклатуры.
//
Функция ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторыКатегорий)";
	
	Запрос.УстановитьПараметр("ИдентификаторыКатегорий", ИдентификаторыКатегорий);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидНоменклатуры");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Конвертирует дату из формата UnixTime в тип Дата.
// Параметры:
//   Источник - Число - число в формате UnixTime, например 1405955187848899.
//
Функция ДатаИзUnixTime(Источник) Экспорт
	
	Возврат МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + Источник / 1000);
	
КонецФункции

#КонецОбласти

#Область ПрофилиБезопасности

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ПараметрыСоединения = ПараметрыСоединенияССервисом();
	
	Протокол = ?(ПараметрыСоединения.ЗащищенноеСоединение = Неопределено, "HTTP", "HTTPS");
	Адрес    = ПараметрыСоединения.ИмяСервера;
	Порт     = ПараметрыСоединения.Порт;
	Описание = НСтр("ru = 'Сервис 1С:Номенклатура, облачный классификатор ТН ВЭД.'");
	
	Разрешения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Обработки.РаботаСНоменклатурой.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#Область ОписаниеВозвращаемыхЗначений

// Описание эталонной карточки номенклатуры Nomenclature.
//
Функция ОписаниеТаблицыНоменклатуры() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура,   "unit|Nomenclature.unit");
	Результат.Колонки.Добавить("ШтрихКоды",               Типы().Массив,      "barcodes");
	Результат.Колонки.Добавить("Изображения",             Типы().Таблица,     "images|Nomenclature.images");
	Результат.Колонки.Добавить("Классификаторы",          Типы().Таблица,     "classifiers|Nomenclature.classifiers");
	Результат.Колонки.Добавить("Характеристики",          Типы().Таблица,     "features|Nomenclature.features");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,     "attributes|Nomenclature.attributes");
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,      "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,      "name");
	Результат.Колонки.Добавить("ИдентификаторКатегории",  Типы().Строка,      "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",   Типы().Строка,      "categoryName");
	Результат.Колонки.Добавить("СтавкаНДС",               Типы().Строка,       "vat");
	Результат.Колонки.Добавить("Тип",                     Типы().Строка,      "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчетГТД",                 Типы().Булево,      "requiredGTD");
	Результат.Колонки.Добавить("УчастникЕГАИС",           Типы().Булево,      "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",            Типы().Булево,      "requiredGISM");
	Результат.Колонки.Добавить("ОблагаетсяАкцизом",       Типы().Булево,      "excisable");
	Результат.Колонки.Добавить("НаименованиеДляПечати",   Типы().Строка,      "nameShort");
	Результат.Колонки.Добавить("ИдентификаторБренда",     Типы().Строка,      "brandId");
	Результат.Колонки.Добавить("НаименованиеБренда",      Типы().Строка,      "brandName");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,   "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,   "manufacturerName");
	Результат.Колонки.Добавить("Артикул",                 Типы().Строка,      "manufacturerCode");
	Результат.Колонки.Добавить("Описание",                Типы().Строка,      "description");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка, "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,        "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ЗаполненныеРеквизиты",    Типы().Массив,      "propertiesHavingValue|Nomenclature.propertiesHavingValue");
	Результат.Колонки.Добавить("РеквизитыХарактеристик",  Типы().Массив,      "featuresAttributes");
	Результат.Колонки.Добавить("Вес",                     Типы().Структура,   "weight|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Объем",                   Типы().Структура,   "volume|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Площадь",                 Типы().Структура,   "area|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("Длина",                   Типы().Структура,   "length|Nomenclature.dimensionalProperties");
	Результат.Колонки.Добавить("КоличествоВУпаковке",     Типы().Структура,   "itemCount|Nomenclature.itemCount");
	Результат.Колонки.Добавить("КоличествоХарактеристик", Типы().Число,      "featureCount");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы", Типы().Таблица,   "assignedIds|assignedIds");
	Результат.Колонки.Добавить("КодСтраныПроизводителя",          Типы().Строка,  "manufacturerOksm");
	Результат.Колонки.Добавить("НаименованиеСтраныПроизводителя", Типы().Строка,  "manufacturerOksmDescription");
	Результат.Колонки.Добавить("ПредельныеОтпускныеЦены",         Типы().Таблица, "infoPrices|Nomenclature.infoPrices");
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСКэшемКатегорий

// Обрабатывает результат сервиса по категориям.
//
// Параметры:
//  ДанныеСервиса                  - Структура       - содержит результат сервиса категорий.
//  Дополнительные параметры       - Структура:
//    * ИдентификаторКатегории - Строка - содержит идентификатор категории, например: "1", "505".
//  КэшКатегорий                   - Структура       - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. ЗаполнитьСтруктуруКэшаКатегорий.
//  СтруктураПоискаКатегорий         - Структура - содержит записи результата с категориями поиска из сервиса.
//  ЭтоПоискКатегорий              - Булево          - признак поиска категорий.
//  МассивИдентификаторовРодителей - Массив          - массив строк идентификаторов категорий.
//
Процедура ОбработатьРезультатДанныхСервисаКатегорий(ДанныеСервиса, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий = Неопределено,
				Знач ЭтоПоискКатегорий = Ложь, МассивИдентификаторовРодителей = Неопределено) Экспорт
				
	Если ЭтоПоискКатегорий Тогда
		ОбработатьДанныеСервисаПоискаРубрикатора(ДанныеСервиса, КэшКатегорий, СтруктураПоискаКатегорий);
	Иначе
		ЗаполнитьКэшДаннымиСервиса(ДанныеСервиса, КэшКатегорий, ДополнительныеПараметры,
			МассивИдентификаторовРодителей);
	КонецЕсли
	
КонецПроцедуры

// Заполняет кэш категорий полученными с сервиса дополнительными реквизитами.
//
// Параметры:
//  ДополнительныеРеквизиты     - ТаблицаЗначений - содержит дополнительные реквизиты полученные с сервиса.
//  КэшКатегорий                - Структура       - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. ЗаполнитьСтруктуруКэшаКатегорий.
//  ИдентификаторКатегории      - Строка          - содержит идентификатор категории, например: "1", "505".
//
Процедура ЗаполнитьКэшДополнительнымиРеквизитами(ДополнительныеРеквизиты, КэшКатегорий, ИдентификаторКатегории) Экспорт
	
	Если ДополнительныеРеквизиты.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИдентификатораКэша = Неопределено;
	Если КэшКатегорий.Свойство("_" + ИдентификаторКатегории, СтрокаИдентификатораКэша) Тогда
		Если СтрокаИдентификатораКэша.КоличествоПодчиненных = 0 Тогда
			Если СтрокаИдентификатораКэша.Свойство("ДополнительныеРеквизиты") Тогда
				Возврат;
			КонецЕсли;
			СоответствиеДопРеквизитов = Новый Структура;
			ДополнительныеРеквизиты.Сортировать("Ранг Возр, Наименование Возр");
			Для Каждого ЭлементРеквизита Из ДополнительныеРеквизиты Цикл
				Если ЭлементРеквизита.Тип = "Строка" Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементРеквизита.Идентификатор) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураДопРеквизитов = ЗаполнитьСтруктуруДопРеквизитов(ЭлементРеквизита);
				СоответствиеДопРеквизитов.Вставить("_" + ЭлементРеквизита.Идентификатор, СтруктураДопРеквизитов);
			КонецЦикла;
			СтрокаИдентификатораКэша.Вставить("ДополнительныеРеквизиты", СоответствиеДопРеквизитов);
			СтрокаИдентификатораКэша.СвойстваКэшированы = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет кэш категорий полученными с сервиса значениями дополнительного реквизита.
//
// Параметры:
//  ЗначенияДополнительныхРеквизитов - ТаблицаЗначений - содержит дополнительные реквизиты полученные с сервиса:
//    * Идентификатор - Строка - идентификатор строки значения дополнительного реквизита.
//    * Наименование  - Строка - наименование значения дополнительного реквизита.
//  КэшКатегорий                     - Структура       - кэш категорий, хранимый в сеансе пользователя:
//    * Ключ     - Строка    - идентификатор строки категории, начинается с "_", например: "_1", "_505".
//    * Значение - Структура - см. ЗаполнитьСтруктуруКэшаКатегорий.
//  СтрокаДополнительногоРеквизита   - Строка          - строка дерева значений.
//  СтрокаКэшаКатегорий              - Структура       - см. ЗаполнитьСтруктуруКэшаКатегорий.
//
Процедура ДополнитьКэшЗначениямиДополнительногоРеквизита(ЗначенияДополнительныхРеквизитов, КэшКатегорий, СтрокаДополнительногоРеквизита, СтрокаКэшаКатегорий) Экспорт
	
	Если ЗначенияДополнительныхРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДополнительногоРеквизита <> Неопределено Тогда
		СоответствиеСпискаВыбора = Новый Массив;
		ЗначенияДополнительныхРеквизитов.Сортировать("Наименование Возр");
		Для Каждого ЗначениеРеквизита Из ЗначенияДополнительныхРеквизитов Цикл
			СоответствиеСпискаВыбора.Добавить(Новый Структура("Идентификатор, Наименование",
				ЗначениеРеквизита.Идентификатор, ЗначениеРеквизита.Наименование));
		КонецЦикла;
		СтрокаДополнительногоРеквизита.Вставить("СписокВыбораЗначенийДопРеквизита", СоответствиеСпискаВыбора);
		СтрокаКэшаКатегорий.СписокКэшированныхСвойств.Добавить(СтрокаДополнительногоРеквизита.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомКатегорий

Процедура ПолучитьКэшКатегорийСервиса(Знач ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	Если ПараметрыМетода.Идентификаторы.Количество() = 0 Тогда
		
		Отказ = Ложь;
		
		ПоисковыйЗапрос = ОписаниеПараметровЗапросаКатегории();
		ПоисковыйЗапрос.ТолькоКорневые = Истина;
		ПоисковыйЗапрос.НаборПолей     = НаборПолейСтандартный();
		
		ПараметрыКоманды = ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		ДанныеСервиса = Новый Структура;
		
		Если НЕ Отказ Тогда
			ДанныеСервиса.Вставить("Категории", ТаблицаКатегорий);
		КонецЕсли;
	
	Иначе
		
		ДанныеСервиса = РаботаСНоменклатурой.ВеткаКатегорийНоменклатуры(ПараметрыМетода.Идентификаторы);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеСервиса, АдресРезультата);

КонецПроцедуры

// Возвращает путей категорий сервиса
Функция КэшПутейКатегорийСервиса(Знач КэшПутейКатегорий, Знач ИдентификаторыКатегорий, Знач ТолькоВыбранные = Истина) Экспорт
	
	ПутиККорню      = КэшПутейКатегорий.ПутиККорню;
	ЕстьНовыеДанные = Ложь;
	
	ИдентификаторыКопия = Новый Массив;
	Если ТолькоВыбранные <> Истина Тогда
		ИдентификаторыКопия = ОбщегоНазначения.СкопироватьРекурсивно(ИдентификаторыКатегорий);
	КонецЕсли;
	
	ВсегоИдентификаторов = ИдентификаторыКатегорий.Количество();
	Для ОбратныйИндекс = 1 По ВсегоИдентификаторов Цикл
		ТекущийИдентификатор = ИдентификаторыКатегорий[ВсегоИдентификаторов - ОбратныйИндекс];
		Если ПутиККорню.Получить(ТекущийИдентификатор) <> Неопределено Тогда
			ИдентификаторыКатегорий.Удалить(ВсегоИдентификаторов - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыКатегорий.Количество() > 0 Тогда
		Отказ                        = Ложь;
		ПараметрыКоманды             = ПараметрыЗапросаВсеРодительскиеКатегории(ИдентификаторыКатегорий, НаборПолейСтандартный());
		ПараметрыКоманды.Обработка   = Неопределено;
		ИдентификаторыКатегорийУзлов = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если НЕ Отказ Тогда
			ДополнитьКэшПутейДаннымиСервиса(ПутиККорню, ИдентификаторыКатегорийУзлов);
			ЕстьНовыеДанные = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоВыбранные <> Истина Тогда
		Если НЕ КэшПутейКатегорий.КорневыеПолучены Тогда
			Отказ = Ложь;
			
			ПоисковыйЗапрос = ОписаниеПараметровЗапросаКатегории();
			ПоисковыйЗапрос.ТолькоКорневые = Истина;
			ПоисковыйЗапрос.НаборПолей     = НаборПолейСтандартный();
			
			ПараметрыКоманды             = ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
			ПараметрыКоманды.Обработка   = Неопределено;
			
			ИдентификаторыКатегорийУзлов = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если НЕ Отказ Тогда
				НайтиДобавитьКатегорииВКэшПутей(ПутиККорню, ИдентификаторыКатегорийУзлов);
				КэшПутейКатегорий.КорневыеПолучены = Истина;
				ЕстьНовыеДанные = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВсегоИдентификаторов = ИдентификаторыКопия.Количество();
		Для ОбратныйИндекс = 1 По ВсегоИдентификаторов Цикл
			ТекущийИдентификатор = ИдентификаторыКопия[ВсегоИдентификаторов - ОбратныйИндекс];
			ТекущийУзел          = ПутиККорню.Получить(ТекущийИдентификатор);
			Если ТипЗнч(ТекущийУзел) = Тип("Структура") И ТекущийУзел.Свойство("ДочерниеПолучены") Тогда
				ИдентификаторыКопия.Удалить(ВсегоИдентификаторов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторыКопия.Количество() > 0 Тогда
			Отказ = Ложь;
			
			ПоисковыйЗапрос = ОписаниеПараметровЗапросаКатегории();
			ПоисковыйЗапрос.ИдентификаторыРодителей = ИдентификаторыКопия;
			ПоисковыйЗапрос.НаборПолей              = НаборПолейСтандартный();
			
			ПараметрыКоманды             = ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
			ПараметрыКоманды.Обработка   = Неопределено;
			ИдентификаторыКатегорийУзлов = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			НенайденныеУзлы = Новый Массив;
			
			Если НЕ Отказ Тогда
				НайтиДобавитьКатегорииВКэшПутей(ПутиККорню, ИдентификаторыКатегорийУзлов, НенайденныеУзлы);
				ЕстьНовыеДанные = Истина;
			КонецЕсли;
			
			Если НенайденныеУзлы.Количество() > 0 Тогда
				Отказ                        = Ложь;
				ПараметрыКоманды             = ПараметрыЗапросаВсеРодительскиеКатегории(НенайденныеУзлы, НаборПолейСтандартный());
				ПараметрыКоманды.Обработка   = Неопределено;
				ИдентификаторыКатегорийУзлов = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
				
				Если НЕ Отказ Тогда
					ДополнитьКэшПутейДаннымиСервиса(ПутиККорню, ИдентификаторыКатегорийУзлов);
					ЕстьНовыеДанные = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьНовыеДанные Тогда
		Возврат КэшПутейКатегорий;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДанныеСопоставленияНоменклатуры

Функция СведенияОСопоставленииНоменклатурыБизнесСеть(Номенклатура) Экспорт
	
	ДанныеНоменклатуры = ДанныеНоменклатуры(Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"         , ДанныеНоменклатуры.Номенклатура);
	Запрос.УстановитьПараметр("Родитель"             , ДанныеНоменклатуры.Родитель);
	Запрос.УстановитьПараметр("ВидНоменклатуры"      , ДанныеНоменклатуры.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристика" , РаботаСНоменклатурой.ПустаяСсылкаНаХарактеристику());
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Номенклатура"" КАК СпособОпределения,
	|	СоответствиеПоНоменклатуре.Номенклатура КАК Объект
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|ГДЕ
	|	СоответствиеПоНоменклатуре.Номенклатура = &Номенклатура
	|	И СоответствиеПоНоменклатуре.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеПоНоменклатуре.ИдентификаторКатегории <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Родитель"",
	|	СоответствиеПоИерархии.Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|ГДЕ
	|	СоответствиеПоИерархии.Номенклатура = &Родитель
	|	И СоответствиеПоИерархии.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеПоИерархии.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""ВидНоменклатуры"",
	|	СоответствиеПоВидам.ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|ГДЕ
	|	СоответствиеПоВидам.ВидНоменклатуры = &ВидНоменклатуры
	|	И СоответствиеПоВидам.ЭтоЕдинственнаяЗапись";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Сведения = Новый Структура;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Сведения.Вставить(ВыборкаЗапроса.СпособОпределения, ВыборкаЗапроса.Объект);
	КонецЦикла;
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ТорговыеПредложения

#Область СтатистикаКатегорийСервиса

// Запускает фоновое задание получения количества объектов сопоставленных по категориям
//
// Параметры:
//  ПараметрыМетода              - Структура - параметры отбора для расчета статистики
//      см. описание параметра ПараметрыПроцедуры процедуры РаботаСНоменклатуройСлужебный.ПолучитьДанныеКатегорий
//  ДлительнаяОперация           - Структура - возвращает данные длительной операции
//      см. ДлительныеОперации.ВыполнитьВФоне
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, которая
//      вызвала процедуру
//
Процедура ПолучитьДанныеКатегорийВФоне(ПараметрыМетода, ДлительнаяОперация, УникальныйИдентификаторФормы) Экспорт 
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ИнтеграцияБСПБЭД.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли; 
	
	НаименованиеЗадания = НСтр(
		"ru = 'Получение списка идентификаторов категорий, сопоставленных с сервисом 1С:Бизнес-сеть.'");
	ИмяПроцедуры        = "РаботаСНоменклатуройСлужебный.ПолучитьДанныеКатегорий";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0.1;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ВыполнитьПолныйПересчетСтатистикиКатегорий(Отбор) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаДанныеКатегорий();
	Запрос.УстановитьПараметр("КатегорияПрочее", РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	Запрос.УстановитьПараметр("КатегорияРаботаСНоменклатурой", РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой());
	УстановитьОтборЗапроса(Запрос, Отбор);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = "ТекущиеДанныеСтатистики";
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатистикаПозицийТорговыхПредложений.ПрайсЛист КАК ПрайсЛист,
	|	СтатистикаПозицийТорговыхПредложений.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СтатистикаПозицийТорговыхПредложений.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеСтатистикиИБ
	|ИЗ
	|	РегистрСведений.СтатистикаПозицийТорговыхПредложений КАК СтатистикаПозицийТорговыхПредложений";
	
	УстановитьОтборЗапроса(Запрос, Отбор);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеДанныеСтатистики.ПрайсЛист, СтатистикаПозицийТорговыхПредложений.ПрайсЛист) КАК ПрайсЛист,
	|	ЕСТЬNULL(ТекущиеДанныеСтатистики.ИдентификаторКатегории, СтатистикаПозицийТорговыхПредложений.ИдентификаторКатегории) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(ТекущиеДанныеСтатистики.Количество, 0) КАК Количество
	|ИЗ
	|	ТекущиеДанныеСтатистики КАК ТекущиеДанныеСтатистики
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеСтатистикиИБ КАК СтатистикаПозицийТорговыхПредложений
	|		ПО ТекущиеДанныеСтатистики.ПрайсЛист = СтатистикаПозицийТорговыхПредложений.ПрайсЛист
	|			И ТекущиеДанныеСтатистики.ИдентификаторКатегории = СтатистикаПозицийТорговыхПредложений.ИдентификаторКатегории
	|ГДЕ
	|	НЕ ЕСТЬNULL(ТекущиеДанныеСтатистики.Количество, 0) = ЕСТЬNULL(СтатистикаПозицийТорговыхПредложений.Количество, 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатистикаПозицийТорговыхПредложений");
		
		Для каждого КлючОтбора Из Отбор Цикл
			ЭлементБлокировкиДанных.УстановитьЗначение(КлючОтбора.Ключ, КлючОтбора.Значение);
		КонецЦикла;
		
		БлокировкаДанных.Заблокировать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.СтатистикаПозицийТорговыхПредложений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса);
			МенеджерЗаписи.Прочитать();
			
			Если ВыборкаЗапроса.Количество = 0 И МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса);
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла; 
		
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки; 

КонецПроцедуры

Процедура СкорректироватьСтатистику(ТаблицаОтличий) Экспорт 

	Если ТаблицаОтличий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтличий.Свернуть("ПрайсЛист, Номенклатура, Характеристика", "Количество");
	УдалитьСтроки(ТаблицаОтличий, Новый Структура("Количество", 0));
	
	Если ТаблицаОтличий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСопоставлениеКатегорий();
	Запрос.УстановитьПараметр("ТаблицаОтличий", ТаблицаОтличий);
	Запрос.УстановитьПараметр("КатегорияПрочее", ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	Запрос.УстановитьПараметр("КатегорияРаботаСНоменклатурой", ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтатистикаПозицийТорговыхПредложений");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрайсЛист", "ПрайсЛист");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторКатегории", "ИдентификаторКатегории");
		
		БлокировкаДанных.Заблокировать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Если ВыборкаЗапроса.Количество = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МенеджерЗаписи = РегистрыСведений.СтатистикаПозицийТорговыхПредложений.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса);
			МенеджерЗаписи.Прочитать();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса, , "Количество");
			МенеджерЗаписи.Количество = МенеджерЗаписи.Количество + ВыборкаЗапроса.Количество;
			МенеджерЗаписи.Записать(Истина);
			
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти

#Область СвойстваНоменклатуры

Функция ПолучитьПубликуемыеСвойства(ТаблицаСвойств, Номенклатура, Характеристика,
	ВидНоменклатуры, Родитель, ВариантСопоставления, ТолькоСопоставленныеСвойства) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСвойств"               , ТаблицаСвойств);
	Запрос.УстановитьПараметр("ВидНоменклатуры"              , ВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустойВидНоменклатуры"        , Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.ПривестиЗначение());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСвойств.Свойство КАК Свойство,
	|	ТаблицаСвойств.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаСвойств
	|ИЗ
	|	&ТаблицаСвойств КАК ТаблицаСвойств";
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС;

	Если ТолькоСопоставленныеСвойства Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	ТаблицаСвойств.Свойство КАК РеквизитОбъекта,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ПредставлениеРеквизитаКатегории, СоответствиеОбщихРеквизитов.ПредставлениеРеквизитаКатегории) КАК СТРОКА(100)) КАК Свойства_Свойство,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(СоответствиеЗначенийРеквизитовПоВиду.ПредставлениеЗначенияРеквизитаКатегории, СоответствиеЗначенийОбщихРеквизитов.ПредставлениеЗначенияРеквизитаКатегории) КАК СТРОКА(100))) = """"
		|			ТОГДА ТаблицаСвойств.Значение
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(СоответствиеЗначенийРеквизитовПоВиду.ПредставлениеЗначенияРеквизитаКатегории, СоответствиеЗначенийОбщихРеквизитов.ПредставлениеЗначенияРеквизитаКатегории) КАК СТРОКА(100))
		|	КОНЕЦ КАК Свойства_Значение
		|ИЗ
		|	ТаблицаСвойств КАК ТаблицаСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВиду
		|		ПО (СоответствиеРеквизитовПоВиду.ОбъектСопоставления = &ВидНоменклатуры)
		|			И ТаблицаСвойств.Свойство = СоответствиеРеквизитовПоВиду.РеквизитОбъекта
		|			И (СоответствиеРеквизитовПоВиду.ИдентификаторРеквизитаКатегории <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
		|		ПО (СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
		|			И ТаблицаСвойств.Свойство = СоответствиеОбщихРеквизитов.РеквизитОбъекта
		|			И (СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовПоВиду
		|		ПО (СоответствиеЗначенийРеквизитовПоВиду.ОбъектСопоставления = &ВидНоменклатуры)
		|			И ТаблицаСвойств.Свойство = СоответствиеЗначенийРеквизитовПоВиду.РеквизитОбъекта
		|			И ТаблицаСвойств.Значение = СоответствиеЗначенийРеквизитовПоВиду.Значение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийОбщихРеквизитов
		|		ПО (СоответствиеЗначенийОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
		|			И ТаблицаСвойств.Свойство = СоответствиеЗначенийОбщихРеквизитов.РеквизитОбъекта
		|			И ТаблицаСвойств.Значение = СоответствиеЗначенийОбщихРеквизитов.Значение
		|ГДЕ
		|	ЕСТЬNULL(СоответствиеРеквизитовПоВиду.ОбъектСопоставления, СоответствиеОбщихРеквизитов.ОбъектСопоставления) ЕСТЬ НЕ NULL ";
	Иначе 
		// за основу взять содержание регистров, свойства объекта присоединить слева
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	СоответствиеРеквизитовПоВиду.РеквизитОбъекта КАК РеквизитОбъекта
		|ПОМЕСТИТЬ ВсеРеквизиты
		|ИЗ
		|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВиду
		|ГДЕ
		|	СоответствиеРеквизитовПоВиду.ОбъектСопоставления = &ВидНоменклатуры
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоответствиеОбщихРеквизитов.РеквизитОбъекта
		|ИЗ
		|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
		|ГДЕ
		|	СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РеквизитОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта
		|ИЗ
		|	ВсеРеквизиты КАК ВсеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств КАК ТаблицаСвойств
		|		ПО ВсеРеквизиты.РеквизитОбъекта = ТаблицаСвойств.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовПоВиду
		|		ПО (СоответствиеЗначенийРеквизитовПоВиду.ОбъектСопоставления = &ВидНоменклатуры)
		|			И ВсеРеквизиты.РеквизитОбъекта = СоответствиеЗначенийРеквизитовПоВиду.РеквизитОбъекта
		|			И (ТаблицаСвойств.Значение = ТаблицаСвойств.Значение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийОбщихРеквизитов
		|		ПО (СоответствиеЗначенийОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
		|			И ВсеРеквизиты.РеквизитОбъекта = СоответствиеЗначенийОбщихРеквизитов.РеквизитОбъекта
		|			И (ТаблицаСвойств.Значение = ТаблицаСвойств.Значение)";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ПереопределениеЗапросовДинамическихСписок

Процедура ДополнитьСписокПозицийТорговыхПредложенийРаботаСНоменклатурой(ТекстЗапроса) Экспорт 
	
	ТекстСопоставления = ТекстЗапросаДинамическогоСпискаРаботаСНоменклатурой();
	ДополнитьЗапросИдентификаторКатегории(ТекстЗапроса, ТекстСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаТорговыхПредложений
	
// Обновляет сведения об типе, максимальных и минимальных значениях реквизитов
//
Процедура ОбновитьИнформациюРеквизитовСервиса() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатуры
	|ГДЕ
	|	СоответствиеВидовНоменклатуры.ЭтоЕдинственнаяЗапись
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеРеквизитов.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитов
	|ГДЕ
	|	СоответствиеРеквизитов.ИдентификаторРеквизитаКатегории <> """"";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ИдентификаторыКатегорий = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("ИдентификаторКатегории");
	ИдентификаторыРеквизитовКатегорий = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("ИдентификаторРеквизитаКатегории");
	
	Если ИдентификаторыКатегорий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоисковыйЗапрос = ОписаниеПараметровЗапросаКатегории();
	
	ПоисковыйЗапрос.Идентификаторы = ИдентификаторыКатегорий;
	ПоисковыйЗапрос.НаборПолей     = НаборПолейМаксимальный();
	
	ПараметрыКоманды = ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = ВыполнитьКомандуСервиса(ПараметрыКоманды, Ложь);
	
	Если ТаблицаКатегорий = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработанныеРеквизиты = Новый Массив;
	
	Для каждого СтрокаКатегории Из ТаблицаКатегорий Цикл
		Для каждого СтрокаДополнительногоРеквизита Из СтрокаКатегории.ДополнительныеРеквизиты Цикл
			
			Если ИдентификаторыРеквизитовКатегорий.Найти(СтрокаДополнительногоРеквизита.Идентификатор) = Неопределено Тогда
				Продолжить;
			ИначеЕсли ОбработанныеРеквизиты.Найти(СтрокаДополнительногоРеквизита.Идентификатор) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеРеквизиты.Добавить(СтрокаДополнительногоРеквизита.Идентификатор);
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторРеквизитаКатегории", СтрокаДополнительногоРеквизита.Идентификатор);
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторРеквизитаКатегории.Установить(СтрокаДополнительногоРеквизита.Идентификатор);
				НаборЗаписей.Прочитать();
				
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.ТипРеквизитаКатегории = СтрокаДополнительногоРеквизита.Тип;
					Запись.МинимальноеЗначение   = СтрокаДополнительногоРеквизита.МинимальноеЗначение;
					Запись.МаксимальноеЗначение  = СтрокаДополнительногоРеквизита.МаксимальноеЗначение;
				КонецЦикла;
				
				НаборЗаписей.Записать(Истина);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Отказ = Истина;
				
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
					ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения);
				
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры
Функция ТекстЗапросаОтборНоменклатуры() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	"""" КАК Номенклатура,
	|	NULL КАК ВидНоменклатуры,
	|	NULL КАК Родитель";
	
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ЗапросНоменклатура  = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	КолонкаНоменклатура = ЗапросНоменклатура.Колонки.Найти("Номенклатура");
	ПолеНоменклатура    = ЗапросНоменклатура.Операторы[0].ВыбираемыеПоля[ЗапросНоменклатура.Колонки.Индекс(КолонкаНоменклатура)];
	ПсевдонимТаблицы    = СтрЗаменить(Строка(ПолеНоменклатура), ".Ссылка", "");
	ЗапросНоменклатура.Операторы[0].Отбор.Добавить(СтрШаблон("%1.ЭтоГруппа = ЛОЖЬ", ПсевдонимТаблицы));
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует запрос отбора номенклатуры по переданной настройке компоновки данных.
// За основу берется ТекстЗапросаОтборНоменклатуры().
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки отбора номенклатуры.
//  ПоместитьВоВременнуюТаблицу - Булево - если ИСТИНА, запрос создает временную таблицу.
//  ЗначимыеКолонки - Структура - если ИСТИНА, запрос создает временную таблицу.
//  ТекстЗапроса - Строка - текст запроса.
//
// Возвращаемое значение:
//  Запрос - Запрос - запрос для отбора номенклатуры.
//
Функция ЗапросОтборНоменклатуры(Настройки, ПоместитьВоВременнуюТаблицу = Истина, ЗначимыеКолонки = Неопределено, ТекстЗапроса = "") Экспорт
	
	Если ТекстЗапроса = "" Тогда
		ТекстЗапроса = ТекстЗапросаОтборНоменклатуры();
	КонецЕсли;
	
	СКД = СхемаКомпоновкиДанных(ТекстЗапроса);
	
	Если ЗначимыеКолонки = Неопределено Тогда
		ЗначимыеКолонки = Новый Структура("Номенклатура, ВидНоменклатуры, Родитель");
	КонецЕсли;
	
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = СКД.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Настройки.Структура.Очистить();
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Для каждого КолонкаЗапроса Из ЗначимыеКолонки Цикл
		ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных(КолонкаЗапроса.Ключ);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, Настройки);
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(МакетКомпоновкиДанных.НаборыДанных[0].Запрос);
	
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	Если ПоместитьВоВременнуюТаблицу = Истина Тогда
		ОсновнойЗапрос.ТаблицаДляПомещения = "ОтборНоменклатуры";
	КонецЕсли;
	
	КоличествоКолонок = ОсновнойЗапрос.Колонки.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКолонок Цикл
		ПроверяемоеПоле = ОсновнойЗапрос.Колонки[КоличествоКолонок - ОбратныйИндекс];
		Если НЕ ЗначимыеКолонки.Свойство(ПроверяемоеПоле.Псевдоним) Тогда 
			ОсновнойЗапрос.Колонки.Удалить(КоличествоКолонок - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	
	Для каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Формирует текст запроса отбора номенклатуры по регистру СостоянияВыгрузкиНоменклатуры.
// За основу берется ТекстЗапросаОтборНоменклатуры().
// Поля запроса те же, что в ТекстЗапросаОтборНоменклатуры() и дополнительно добавляется поле Характеристика со значением NULL
//
// Параметры:
//  ПоместитьВоВременнуюТаблицу - Булево - если ИСТИНА, текст запроса содержит инструкцию создания временной таблицы
//  ЛимитЗаписей - Число - количество получаемых записей. Если не задано (0), получаются все записи
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВыгружаемаяНоменклатура(ПоместитьВоВременнуюТаблицу = Ложь, ЛимитЗаписей = 0) Экспорт
	
	СхемаЗапроса        = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаОтборНоменклатуры());
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Номенклатура");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	УсловиеВыгружаемая  = "
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|			ГДЕ
	|				СостоянияВыгрузкиНоменклатуры.Номенклатура = %1
	|				И СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|				И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний))";
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("NULL");
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "Характеристика";
	ОсновнойЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон(УсловиеВыгружаемая, ПолеНоменклатура));
	ОсновнойЗапрос.Операторы[0].ВыраженияОтбораКомпоновкиДанных.Очистить();
	ОсновнойЗапрос.Характеристики.Очистить();
	Если ПоместитьВоВременнуюТаблицу <> Ложь Тогда
		ОсновнойЗапрос.ТаблицаДляПомещения = "ОтборНоменклатуры";
	КонецЕсли;
	Если ЛимитЗаписей > 0 Тогда
		ОсновнойЗапрос.Операторы[0].КоличествоПолучаемыхЗаписей = ЛимитЗаписей;
	КонецЕсли;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса()
	
КонецФункции

// Возвращает список состояний номенклатуры, которая интерактивно добавлена пользователем, но еще не участвовала в выгрузке
//
// Возвращаемое значение:
//  СписокЗначений - ПеречислениеСсылка.СостоянияВыгрузкиНоменклатуры - состояния выгрузки номенклатуры.
//
Функция СостоянияНоменклатурыДоВыгрузки() Экспорт

	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.Новая);
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы);
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки);
	
	Возврат СписокСостояний;
	
КонецФункции

// Возвращает полный список формализованных реквизитов выгрузки номенклатуры с синонимами для вывода в интерфейс.
// Реквизиты, не входящие в список формализованных, могут быть выгружены как дополнительные реквизиты, 
// см. ДополнительныеРеквизитыНоменклатурыДляВыгрузки.
//
// Возвращаемое значение:
//  Структура - реквизиты входящие в формат выгрузки
//    Ключи - псевдонимы формализованных реквизитов, как они описаны в тексте запроса,
//            см. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаВыборкиДанныхДляВыгрузки
//    Значения - Произвольный - пользовательское представление реквизита.
//
Функция ФормализованныеРеквизитыНоменклатурыДляВыгрузки() Экспорт
	
	СопоставленныеРеквизиты  = СопоставленныеРеквизиты();
	ФормализованныеРеквизиты = Новый Структура;
	Для каждого РеквизитДляВыгрузки Из Метаданные.Перечисления.РеквизитыНоменклатурыДляВыгрузки.ЗначенияПеречисления Цикл
		Ключ     = РеквизитДляВыгрузки.Имя;
		Значение = РеквизитДляВыгрузки.Комментарий;
		Если ЗначениеЗаполнено(Значение) И СопоставленныеРеквизиты.Найти(Ключ) <> Неопределено Тогда
			ФормализованныеРеквизиты.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	КлючевыеРеквизиты = РаботаСНоменклатурой.КлючевыеРеквизитыНоменклатурыДляВыгрузки();
	Для каждого КлючевойРеквизит Из КлючевыеРеквизиты Цикл
		РеквизитИмя = КлючевойРеквизит.Ключ;
		Если НЕ ФормализованныеРеквизиты.Свойство(РеквизитИмя) Тогда
			ФормализованныеРеквизиты.Вставить(РеквизитИмя, КлючевойРеквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РаботаСНоменклатуройПереопределяемый.ФормализованныеРеквизитыНоменклатурыДляВыгрузки(ФормализованныеРеквизиты);
	
	Возврат ФормализованныеРеквизиты;
	
КонецФункции

// Возвращает перечень доступных для выгрузки дополнительных реквизитов Номенклатуры.
// 
// Параметры:
//  ВидыНоменклатуры - СписокЗначений из ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой, Неопределено - виды номенклатуры,
//                     для которых нужно получить доп.реквизиты.
//
// Возвращаемое значение:
//  ДополнительныеРеквизиты - ТаблицаЗначений:
//    * Свойство - Произвольный - доп. реквизит
//    * Синоним - Строка - пользовательское представление доп.реквизита
//    * ТипЗначения - ОписаниеТипов - тип значения
//    * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры (соответствует набору доп.реквизитов). 
//                                                                              Для общих реквизитов не заполняется
//    * ВидНоменклатурыНаименование - Строка - пользовательское представление набора доп.реквизитов. Пример: "Столы (вид номенклатуры)"
//    * ИспользоватьХарактеристики - Булево - признак использования характеристик по виду номенклатуры.
//
Функция ДополнительныеРеквизитыНоменклатурыДляВыгрузки(Знач ВидыНоменклатуры) Экспорт
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("Свойство");
	ДополнительныеРеквизиты.Колонки.Добавить("Синоним", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ДополнительныеРеквизиты.Колонки.Добавить("ВидНоменклатуры", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип);
	ДополнительныеРеквизиты.Колонки.Добавить("ВидНоменклатурыНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДополнительныеРеквизиты.Колонки.Добавить("ИспользоватьХарактеристики", Новый ОписаниеТипов("Булево"));
	
	РаботаСНоменклатуройПереопределяемый.ДополнительныеРеквизитыНоменклатурыДляВыгрузки(ДополнительныеРеквизиты,
		ВидыНоменклатуры);
	
	Возврат ДополнительныеРеквизиты;
	
КонецФункции

// Возвращает настройки выгрузки номенклатуры по всем организациям.
// Если сохраненных настроек нет, возвращается пустое соответствие.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Организация - Организация
//   * Значение - см. НоваяНастройкаВыгрузкиНоменклатуры
// 
Функция НастройкиВыгрузкиНоменклатуры() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиВыгрузки = Константы.НастройкиВыгрузкиНоменклатуры.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(НастройкиВыгрузки) <> Тип("Соответствие") Тогда
		НастройкиВыгрузки = Новый Соответствие;
	КонецЕсли;
	
	Возврат НастройкиВыгрузки;
	
КонецФункции

// Возвращает настройку выгрузки номенклатуры по организации
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, для которой требуется получить настройку
//  Настройки - см. НастройкиВыгрузкиНоменклатуры
//
// Возвращаемое значение:
//  Структура - см. НоваяНастройкаВыгрузкиНоменклатуры
//
Функция НастройкаВыгрузкиНоменклатуры(Организация, Настройки = Неопределено) Экспорт 
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиВыгрузкиНоменклатуры();
	КонецЕсли;
	
	Настройка            = НоваяНастройкаВыгрузкиНоменклатуры(Организация);
	СохраненнаяНастройка = Настройки.Получить(Организация);
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Настройка, СохраненнаяНастройка);
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

// Сохраняет настройку выгрузки номенклатуры по организации
// 
// Параметры:
//  Настройка - см. НоваяНастройкаВыгрузкиНоменклатуры
//
Процедура СохранитьНастройкуВыгрузкиНоменклатуры(Настройка) Экспорт
	
	Настройки = НастройкиВыгрузкиНоменклатуры();
	Настройки.Вставить(Настройка.Организация, Настройка);
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.НастройкиВыгрузкиНоменклатуры.Установить(Новый ХранилищеЗначения(Настройки, Новый СжатиеДанных(9)));
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновляет настройку выгрузки номенклатуры по организации
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, настройку по которой нужно обновить
//  ОбновляемыеПараметры - Структура - Ключ - параметр, Значение - значение
//
// Возвращаемое значение:
//  Булево - Истина, если настройка обновлена, Ложь в противном случае
//
Функция ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры) Экспорт 

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Настройка = НастройкаВыгрузкиНоменклатуры(Организация);
	ЗаполнитьЗначенияСвойств(Настройка, ОбновляемыеПараметры);
	СохранитьНастройкуВыгрузкиНоменклатуры(Настройка);
	
	Возврат Истина;
	
КонецФункции

// Выполняет проверку заполнения  ключевых реквизитов номенклатуры согласно настройке
//
// Параметры:
//  НастройкаВыгрузки - Структура - настройка выгрузки номенклатуры по организации, см. НастройкаВыгрузкиНоменклатуры
//   может содержать дополнительные ключи:
//    * ЛимитЗаписей - Число - ограничение выборки данных в запросе, вычисляющем количество проблем
//    * МассивСсылок - Массив из ОпределяемыйТип.НоменклатураРаботаСНоменклатурой
//                   - Массив из ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой
//    * РежимСопоставления - Строка - значение из списка "ПоВидам", "ПоИерархии", "ПоНоменклатуре"
//
// Возвращаемое значение:
//  Число - количество номенклатуры с проблемами заполнения в пределах ЛимитЗаписей
// 
Функция ПроверитьГотовностьНоменклатурыКВыгрузке(НастройкаВыгрузки) Экспорт 
	
	Организация  = НастройкаВыгрузки.Организация;
	ТекстЗапроса = ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками(Истина);
	Запрос       = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокСостояний = СостоянияНоменклатурыДоВыгрузки();
	
	Если НастройкаВыгрузки.Свойство("МассивСсылок") Тогда
		Запрос.УстановитьПараметр("МассивСсылок", НастройкаВыгрузки.МассивСсылок);
		Если НастройкаВыгрузки.Свойство("РежимСопоставления") Тогда
			РежимСопоставления = НастройкаВыгрузки.РежимСопоставления;
		Иначе
			РежимСопоставления = "ПоНоменклатуре";
		КонецЕсли;
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		
		СоответствиеТипов = Новый Структура;
		СоответствиеТипов.Вставить("ПоВидам", "ВидНоменклатуры");
		СоответствиеТипов.Вставить("ПоИерархии", "Родитель");
		СоответствиеТипов.Вставить("ПоНоменклатуре", "Номенклатура");
		КолонкаОтбора = ОсновнойЗапрос.Колонки.Найти(СоответствиеТипов[РежимСопоставления]);
		УсловиеОтбора = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаОтбора)]);
		УсловиеОтбора = УсловиеОтбора + " В (&МассивСсылок)";
		ОсновнойЗапрос.Операторы[0].Отбор.Добавить(УсловиеОтбора);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетИсправления);
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПодтверждения);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	ПроверитьЗаполнениеНоменклатуры(Запрос, НастройкаВыгрузки);
	
	Если НастройкаВыгрузки.Свойство("ЛимитЗаписей") Тогда
		ЛимитЗаписей = НастройкаВыгрузки.ЛимитЗаписей;
	Иначе 
		ЛимитЗаписей = Неопределено;
	КонецЕсли;
	
	Возврат КоличествоПроблемЗаполненияНоменклатуры(Организация, ЛимитЗаписей);
	
КонецФункции

// Выполняет проверку заполнения ключевых реквизитов номенклатуры согласно настройке выгрузки в режиме "Быстрая проверка".
// более подробное описание алгоритма проверки см. ниже
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, настройку по которой нужно обновить
//
// Возвращаемое значение:
//  Булево - Истина, если проблема найдена, Ложь в противном случае.
// 
Функция ЕстьПроблемыБыстро(Организация) Экспорт 
	
	// "Быстрая проверка" означает, что нужно попытаться быстро понять, есть проблемы или их нет, при чем, данные должны быть актуальны,
	// нельзя просто выбрать текущее состояние регистра, нужно именно выполнить проверку заполнения реквизитов.
	// Метод добавлен по причине того, что на больших объемах данных проверка ПроверитьГотовностьНоменклатурыКВыгрузке 
	// работает медленно (это могут быть десятки минут на базе порядка 1 млн. товарных позиций).
	// Основная причина медленной работы - это запись данных в регистр.
	// "Быстрая проверка" в целом аналогична ПроверитьГотовностьНоменклатурыКВыгрузке, 
	// но будет работать без записи: по факту обнаружения первой проблемы метод будет сразу же завершаться 
	// и сообщать пользователю о том, что нужно запустить полную проверку.
	// Далее пользователь уже будучи морально готовым к долгому ожиданию интерактивно запускает полную проверку.
	// 
	// В надежде еще немного ускорить работу метода, проверка будет запускаться в 2 волны.
	// Сначала проверим "плохие" позиции, предполагая, что если проблема была, то она наверно и осталась,
	// а кроме того, скорее всего количество "плохих" должно быть сильно меньше, чем количество "хороших",
	// то есть потенциально в первую волну будет попадать не очень много данных.
	// Затем, если проблема все еще не выявлена, запускается вторая волна проверки "хороших" позиций.
	//
	// При плохом стечении обстоятельств есть шанс выполнить полную проверку в рамках "быстрой" -
	// если после проверки всех записей ни одной проблемы выявлено не будет. И в этом случае проверка может оказаться не такой уж быстрой.
	
	СписокСостояний = Новый СписокЗначений;
	ТекстЗапроса    = ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками(Истина);
	Запрос          = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	НастройкаВыгрузки = НастройкаВыгрузкиНоменклатуры(Организация);
	НастройкаВыгрузки.Вставить("БыстраяПроверка", Истина);
	
	// первая волна, проблемы
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы);
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	
	ЕстьПроблемы = ЕстьОшибкиЗаполненияНоменклатуры(Запрос, НастройкаВыгрузки);
	
	Если Не ЕстьПроблемы Тогда
		// вторая волна, основная выгружаемая номенклатура
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.Новая);
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки);
		Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
		
		ЕстьПроблемы = ЕстьОшибкиЗаполненияНоменклатуры(Запрос, НастройкаВыгрузки, Ложь);
	КонецЕсли;
	
	Возврат ЕстьПроблемы;
	
КонецФункции

// Выгружает номенклатуру в сервис
//
// Параметры:
//  НастройкаВыгрузки - Структура - настройка выгрузки номенклатуры по организации, см. НастройкаВыгрузкиНоменклатуры
//    может содержать дополнительные ключи:
//    * УсловиеСоединения - Строка - условие соединения таблиц
//    * ПараметрыЗапроса - Структура - параметры запроса
//    * ПроверитьПередВыгрузкой - Булево - признак необходимости запуска проверки готовности номенклатуры перед выгрузкой
// 
Функция ВыгрузитьДанныеНоменклатуры(НастройкаВыгрузки) Экспорт 
	
	Если НастройкаВыгрузки.Свойство("ПроверитьПередВыгрузкой") И НастройкаВыгрузки.ПроверитьПередВыгрузкой = Истина Тогда
		ПроверитьГотовностьНоменклатурыКВыгрузке(НастройкаВыгрузки);
	КонецЕсли;
	
	ПараметрыЗапроса  = Новый Структура;
	УсловиеСоединения = Неопределено;
	ПараметрыЗапроса  = Неопределено;
	
	НастройкаВыгрузки.Свойство("УсловиеСоединения", УсловиеСоединения);
	НастройкаВыгрузки.Свойство("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;
		СписокСостояний = Новый СписокЗначений;
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки);
		СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.Принята);
		ПараметрыЗапроса.Вставить("СписокСостояний", СписокСостояний);
	КонецЕсли;
	
	СхемаЗапроса   = СхемаЗапросаВыгружаемаяНоменклатураСХарактеристиками(УсловиеСоединения);
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("СостоянияВыгрузкиНоменклатуры.Хеш");
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "Хеш";
	
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры");
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ХарактеристикаБезПреобразования";
	
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("СостоянияВыгрузкиНоменклатуры.Состояние");
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "Состояние";
		
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса() + Символы.ПС + ";";
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатуры.ХарактеристикаБезПреобразования КАК Характеристика,
	|	ОтборНоменклатуры.Хеш КАК Хеш,
	|	ОтборНоменклатуры.Состояние КАК Состояние,
	|	ОтборНоменклатуры.Характеристика ЕСТЬ NULL КАК ЗаписьНабором
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	ОбновляемыеПараметры = НастройкаВыгрузкиНоменклатуры(НастройкаВыгрузки.Организация);
	ОбновляемыеПараметры.ДатаПредставление      = НСтр("ru = 'выгружается'");
	ОбновляемыеПараметры.ВыгруженоПредставление = НСтр("ru = 'Выгружается...'");
	ОбновляемыеПараметры.ДатаВыгрузки           = Дата(1, 1, 1);
	СохранитьНастройкуВыгрузкиНоменклатуры(ОбновляемыеПараметры);
	
	Выгружено = ВыгрузитьНоменклатуру(Запрос, НастройкаВыгрузки);
	
	Если Выгружено >= 0 Тогда
		ВыгруженоПредставление = СтрШаблон(НСтр("ru = 'Выгружено %1'"), Выгружено);
		
		ОбновляемыеПараметры.ДатаПредставление       = "";
		ОбновляемыеПараметры.ВыгруженоПредставление  = ВыгруженоПредставление;
		ОбновляемыеПараметры.ДатаВыгрузки            = ТекущаяДатаСеанса();
	Иначе
		ОбновляемыеПараметры.ДатаПредставление       = НСтр("ru = 'выгрузка завершена ошибкой'");
		ОбновляемыеПараметры.ВыгруженоПредставление  = НСтр("ru = 'Ошибка, см. журнал регистрации'");
	КонецЕсли;
	ОбновляемыеПараметры.Вставить("ИдентификаторЗадания", "");
	СохранитьНастройкуВыгрузкиНоменклатуры(ОбновляемыеПараметры);
	
	Возврат Выгружено;
	
КонецФункции

// Выполняет поиск номенклатуры, соответствующей  настройкам отбора СКД, но не участвующей в выгрузке
// Найденная новая номенклатура сразу проверяется на готовность к выгрузке
//
// Параметры:
//  НастройкаВыгрузки - Структура - настройка выгрузки номенклатуры по организации, см. НастройкаВыгрузкиНоменклатуры
// 
Процедура НайтиПроверитьНовуюНоменклатуру(НастройкаВыгрузки) Экспорт 
	
	Обработки.РаботаСНоменклатурой.ДобавитьКВыгрузкеНоменклатуруПоОтбору(НастройкаВыгрузки.Организация, 
		НастройкаВыгрузки.НастройкиОтбора, Истина);
	
	Организация  = НастройкаВыгрузки.Организация;
	ТекстЗапроса = ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками(Истина);
	Запрос       = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПроверки);
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	
	ПроверитьЗаполнениеНоменклатуры(Запрос, НастройкаВыгрузки);
	
КонецПроцедуры

// Формирует запросы к сервису для актуализации текущего состояния номенклатуры, отправленной на модерацию в "Национальный каталог"
//
// Параметры:
//  НастройкаВыгрузки - Структура - настройка выгрузки номенклатуры по организации, см. НастройкаВыгрузкиНоменклатуры
// 
Процедура ОбновитьСостоянияВыгрузкиНоменклатуры(НастройкаВыгрузки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", НастройкаВыгрузки.Организация);
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияВыгрузкиНоменклатуры.ИдентификаторПакетаДанных КАК ИдентификаторПакетаДанных,
	|	СостоянияВыгрузкиНоменклатуры.Организация КАК Организация,
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СостоянияВыгрузкиНоменклатуры.Состояние КАК Состояние,
	|	СостоянияВыгрузкиНоменклатуры.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияВыгрузкиНоменклатуры.ОписаниеОшибки КАК ОписаниеОшибки,
	|	СостоянияВыгрузкиНоменклатуры.Хеш КАК Хеш,
	|	СостоянияВыгрузкиНоменклатуры.РасшифровкаПроблемы КАК РасшифровкаПроблемы,
	|	СостоянияВыгрузкиНоменклатуры.ВыгружатьНоменклатуру КАК ВыгружатьНоменклатуру,
	|	СостоянияВыгрузкиНоменклатуры.ВыгружатьВНациональныйКаталог КАК ВыгружатьВНациональныйКаталог
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.ПроверяетсяМодератором)
	|	И СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|ИТОГИ ПО
	|	ИдентификаторПакетаДанных";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды     = ПараметрыКомандыОбновлениеСостоянияНоменклатуры();
	
	ШтрихкодыНоменклатуры = ШтрихкодыНоменклатуры();
	
	ВыборкаПакеты = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПакеты.Следующий() Цикл
		ИдентификаторПакетаДанных = ВыборкаПакеты.ИдентификаторПакетаДанных;
		
		// Установка параметров запроса.
		Запрос = Новый HTTPЗапрос(СтрШаблон("%1/%2", ПараметрыКоманды.Адрес, ИдентификаторПакетаДанных));
		
		// Выполнение запроса HTTP к сервису.
		Ответ = ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды);
		Если ТипЗнч(Ответ) <> Тип("HTTPОтвет") Тогда
			Продолжить;
		КонецЕсли;
		
		КодСостояния = Ответ.КодСостояния;
		Если КодСостояния = 404 Тогда
			ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, НСтр("ru = 'Пакет данных по идентификатору не найден'"));
			Продолжить;
		ИначеЕсли КодСостояния <> 200 Тогда  
			ПодробныйТекстОшибки = СтрШаблон(НСтр("ru = 'КодСостояния: %1'"), КодСостояния);
			ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, ПодробныйТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Если НЕ ЗначениеЗаполнено(ДанныеФайла) Тогда
			// пакет данных найден, но файл ответа еще не сформирован
			Продолжить;
		КонецЕсли;
		
		ОтветаСервиса = Новый ТаблицаЗначений;
		ОтветаСервиса.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ОтветаСервиса.Колонки.Добавить("characteristicId", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ОтветаСервиса.Колонки.Добавить("status", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ОтветаСервиса.Колонки.Добавить("description", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ОтветаСервиса.Колонки.Добавить("details");
		ОтветаСервиса.Колонки.Добавить("gtin", ОбщегоНазначения.ОписаниеТипаСтрока(200));
		ОтветаСервиса.Индексы.Добавить("id, characteristicId");
		
		ДанныеАрхива = ДанныеАрхиваJSON(ДанныеФайла);
		Для каждого ДанныеОтвета Из ДанныеАрхива Цикл
			Если ТипЗнч(ДанныеОтвета) <> Тип("Массив") Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ОписаниеЭлемента Из ДанныеОтвета Цикл
				Если ТипЗнч(ОписаниеЭлемента) <> Тип("Структура") 
					ИЛИ НЕ ОписаниеЭлемента.Свойство("id") 
					ИЛИ НЕ ОписаниеЭлемента.Свойство("status")Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОтветаСервиса.Добавить(), ОписаниеЭлемента);
			КонецЦикла;
		КонецЦикла;
		
		ВыборкаСостав = ВыборкаПакеты.Выбрать();
		Пока ВыборкаСостав.Следующий() Цикл
			ПараметрыПоиска = Новый Структура("id, characteristicId", XMLСтрока(ВыборкаСостав.Номенклатура), "");
			Если ЗначениеЗаполнено(ВыборкаСостав.ХарактеристикаНоменклатуры) Тогда
				ПараметрыПоиска.characteristicId = XMLСтрока(ВыборкаСостав.ХарактеристикаНоменклатуры);
			КонецЕсли;
			СтрокиОтвета = ОтветаСервиса.НайтиСтроки(ПараметрыПоиска);
			Если СтрокиОтвета.Количество() = 0 Тогда
				// Вообще говоря, такого быть не должно, ибо это означает нарушение целостности пакета:
				// в отправленных данных номенклатура есть, а в полученных нет - неизвестно, что делать в этом случае
				Продолжить;
			КонецЕсли;
			
			// В штатном режиме работы должна быть всегда ровно 1 строка, СтрокиОтвета.Количество() = 1
			// Но на всякий случай заложена обработка наличия нескольких ответов по одному ключу
			// Логика следующая: состояние берется по максимуму, что можно считать справедливым, поскольку "блокирующим" является состояние "отклонена"
			// Описание ошибки складывается по всем строкам
			// Штрихкоды добавляются так же по всем строкам
			
			ОписаниеОшибки = Новый Массив;
			Состояние      = -1;
			Расшифровка    = Новый Массив;
			Для каждого СтрокаОтвета Из СтрокиОтвета Цикл
				Состояние = Макс(Состояние, СтрокаОтвета.status);
				Если НЕ ПустаяСтрока(СтрокаОтвета.description) Тогда
					ОписаниеОшибки.Добавить(СокрЛП(СтрокаОтвета.description));
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаОтвета.details) И ТипЗнч(СтрокаОтвета.details) = Тип("Массив") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Расшифровка, СтрокаОтвета.details);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаОтвета.gtin) Тогда
					Штрихкод = ШтрихкодыНоменклатуры.Добавить();
					Штрихкод.Номенклатура   = ВыборкаСостав.Номенклатура;
					Штрихкод.Характеристика = ВыборкаСостав.ХарактеристикаНоменклатуры;
					Штрихкод.Штрихкод       = СокрЛП(СтрокаОтвета.gtin);
				КонецЕсли;
			КонецЦикла;
			
			Если Состояние = 0 Тогда
				Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ПроверяетсяМодератором;
			ИначеЕсли Состояние = 1 Тогда
				Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.Принята;
			ИначеЕсли Состояние = 2 Тогда
				Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.Отклонена;
			Иначе 
				Продолжить;
			КонецЕсли;
			
			Запись = РегистрыСведений.СостоянияВыгрузкиНоменклатуры.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСостав);
			Запись.Состояние      = Состояние;
			Запись.ОписаниеОшибки = СтрСоединить(ОписаниеОшибки, "; ");
			Если ЗначениеЗаполнено(Расшифровка) Тогда
				Запись.РасшифровкаПроблемы = ЗначениеВФорматJSON(Новый Структура("Проблемы", Расшифровка));
			КонецЕсли;
			Запись.Записать();
		КонецЦикла;
	КонецЦикла;
	
	Если ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды(ШтрихкодыНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

// Отправляет сервису http-запрос проверки активности партнера
//
// Параметры:
//  КодПартнера - Строка - код партнера
//
// Возвращаемое значение:
//  Булево - Истина, если партнер активен
//
Функция ПартнерАктивен(КодПартнера) Экспорт 
	
	ПараметрыКоманды = ПараметрыКомандыАктивныйПартнер(КодПартнера);
	Запрос           = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	КодСостояния     = 0;
	Ответ            = ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды);
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда
		КодСостояния = Ответ.КодСостояния;
	КонецЕсли;
	
	Возврат (КодСостояния = 200);

КонецФункции

// Отправляет сервису http-запрос на получение файла обязательных реквизитов Национального каталога
//
// Возвращаемое значение:
//  Структура - обязательные реквизиты по категориям
//    Ключи:
//    * СтрШаблон("Категория%1", КатегорияРеквизитов) - категория сервиса 1С:Номенклатура 
//
Функция ОбязательныеРеквизитыНациональногоКаталога() Экспорт 
	
	ПараметрыКоманды = ПараметрыКомандыРеквизитыНациональногоКаталога();
	Запрос           = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	Запрос.Заголовки.Вставить("Content-Type", "application/zip");
	// Выполнение запроса HTTP к сервису.
	Ответ            = ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды);
	Если ТипЗнч(Ответ) <> Тип("HTTPОтвет") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыНоменклатуры   = Перечисления.РеквизитыНоменклатурыДляВыгрузки;
	СопоставленныеРеквизиты = СопоставленныеРеквизиты();
	ОбязательныеРеквизиты   = Новый Структура;
	ДанныеФайла             = Ответ.ПолучитьТелоКакДвоичныеДанные();
	ДанныеАрхива            = ДанныеАрхиваJSON(ДанныеФайла);
	Для каждого ДанныеОтвета Из ДанныеАрхива Цикл
		Если ТипЗнч(ДанныеОтвета) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ОписаниеЭлемента Из ДанныеОтвета Цикл
			Если ТипЗнч(ОписаниеЭлемента) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ОписаниеЭлемента.Свойство("categoryId") Тогда
				Продолжить;
			КонецЕсли;
			
			Атрибуты = Неопределено;
			Если ОписаниеЭлемента.Свойство("attributes") И ТипЗнч(ОписаниеЭлемента.attributes) = Тип("Массив") Тогда
				Атрибуты = Новый Массив;
				Для каждого Атрибут Из ОписаниеЭлемента.attributes Цикл
					Если ТипЗнч(Атрибут) <> Тип("Структура") Тогда
						Продолжить;
					КонецЕсли;
					Если Атрибут.Свойство("id") Тогда
						ИдентификаторРеквизитаКатегории = Атрибут["id"];
						Если СопоставленныеРеквизиты.Найти(ИдентификаторРеквизитаКатегории) <> Неопределено Тогда
							// сопоставлено в запросе
							Продолжить;
						КонецЕсли;
					Иначе 
						ИдентификаторРеквизитаКатегории = "";
					КонецЕсли;
					ФормализованныйРеквизит = Неопределено;
					Если Атрибут.Свойство("name") Тогда
						ИмяФормализованногоРеквизита = Атрибут["name"];
						Если СопоставленныеРеквизиты.Найти(ИмяФормализованногоРеквизита) <> Неопределено Тогда
							// сопоставлено в запросе
							Продолжить;
						КонецЕсли;
						Попытка
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыНоменклатуры, ИмяФормализованногоРеквизита) Тогда
								ФормализованныйРеквизит = РеквизитыНоменклатуры[ИмяФормализованногоРеквизита];
							КонецЕсли;
						Исключение
							// некорректное имя реквизита в файле
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					Если ФормализованныйРеквизит = Неопределено И ИдентификаторРеквизитаКатегории = "" Тогда
						// Некорректное описание реквизита в файле: не удалось определить ни идентификатор сервиса, ни формализованный реквизит
						Продолжить;
					КонецЕсли;
					ОписаниеАтрибута = Новый Структура;
					ОписаниеАтрибута.Вставить("ИдентификаторРеквизитаКатегории", ИдентификаторРеквизитаКатегории);
					ОписаниеАтрибута.Вставить("ФормализованныйРеквизит", ФормализованныйРеквизит);
					Если Атрибут.Свойство("presentation") Тогда
						ОписаниеАтрибута.Вставить("ПредставлениеРеквизитаКатегории", Атрибут["presentation"]);
					КонецЕсли;
					Если Атрибут.Свойство("tipe") Тогда
						ТипРеквизитаРубрикатора = Атрибут.tipe;
						Если ТипРеквизитаРубрикатора = "Булево" Тогда
							ТипРеквизитаРубрикатора = "Да/Нет";
						КонецЕсли;
						ОписаниеАтрибута.Вставить("ТипРеквизитаРубрикатора", ТипРеквизитаРубрикатора);
					КонецЕсли;
					Если ОписаниеАтрибута.Количество() > 0 Тогда
						Атрибуты.Добавить(ОписаниеАтрибута);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбязательныеРеквизиты.Вставить(СтрШаблон("Категория%1", ОписаниеЭлемента.categoryId), Атрибуты);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбязательныеРеквизиты;

КонецФункции

// Выполняет проверку заполнения ключевых реквизитов номенклатурной позиции, переданной в параметрах
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, согласно настройкам выгрузки которой требуется выполнить проверку
//  Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - проверяемая номенклатура
//               - Массив из ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - массив проверяемой номенклатуры
//  Состояние - Перечисления.СостоянияВыгрузкиНоменклатуры - исходное состояние проверяемой номенклатуры 
//
// Возвращаемое значение:
//  Структура - см. РасшифровкаПроверки()
// 
Функция ПроверитьГотовностьНоменклатурнойПозиции(Организация, Номенклатура, Состояние) Экспорт 
	
	ТекстЗапроса = ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками(Истина);
	Запрос       = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПроверки);
	Запрос.УстановитьПараметр("СписокСостояний", Состояние);
	
	СхемаЗапроса        = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Номенклатура");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	
	Если ТипЗнч(Номенклатура) = Тип("Массив") Тогда
		ОсновнойЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон("%1 В (&Номенклатура)", ПолеНоменклатура));
	Иначе 
		ОсновнойЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон("%1 = &Номенклатура", ПолеНоменклатура));
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	НастройкаВыгрузки = НастройкаВыгрузкиНоменклатуры(Организация);
	
	РезультатПроверки = Неопределено;
	ПроверитьЗаполнениеНоменклатуры(Запрос, НастройкаВыгрузки,, РезультатПроверки);
	
	Возврат РезультатПроверки; 
	
КонецФункции

// Описание контактной информации пользователя.
//
Функция ОписаниеКонтактнойИнформацииПользователя() Экспорт
	
	СтруктураКонтактов = Новый Структура;
	СтруктураКонтактов.Вставить("ФИО", "");
	СтруктураКонтактов.Вставить("ЭлектроннаяПочта", "");
	СтруктураКонтактов.Вставить("Телефон", "");
	
	Возврат СтруктураКонтактов;
	
КонецФункции

Функция ПолучитьСтатистикуРезультатов(УникальныйИдентификатор, Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.СтатистикаРезультатовВыгрузки";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Получение статистики результатов выгрузки.'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, Организация);
	
КонецФункции

Функция СтатистикаРезультатовВыгрузки(Организация) Экспорт 
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Отклонена", 0);
	СтруктураРезультата.Вставить("Принята", 0);
	СтруктураРезультата.Вставить("ПроверяетсяМодератором", 0);
	СтруктураРезультата.Вставить("ОжидаетВыгрузки", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	""ОжидаетВыгрузки"" КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура,
	|	""ПроверяетсяМодератором""
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.ПроверяетсяМодератором)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура,
	|	""Принята""
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.Принята)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СостоянияВыгрузкиНоменклатуры.Номенклатура,
	|	""Отклонена""
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.Отклонена)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст      = СтрЗаменить(Запрос.Текст, "1000", Формат(РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции(), "ЧГ=0"));
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для каждого СостояниеВыгрузки Из СтруктураРезультата Цикл
		Ключ = СостояниеВыгрузки.Ключ;
		СтруктураРезультата.Вставить(Ключ, ТаблицаРезультата.НайтиСтроки(Новый Структура("Состояние", Ключ)).Количество());
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Метод для вызова из формы РезультатыВыгрузкиНоменклатуры.
// Выполняет 2 действия: обновление результатов (обращение к сервису), затем вычисляет статистику
Функция ОбновленнаяСтатистикаРезультатов(Организация) Экспорт 
	
	ОбновитьСостоянияВыгрузкиНоменклатуры(НастройкаВыгрузкиНоменклатуры(Организация));
	Возврат СтатистикаРезультатовВыгрузки(Организация);
	
КонецФункции

Функция УдалитьПроблемы(Организация, МассивДанных) Экспорт
	УдалитьЗаписиРегистраПоСписку(Организация, МассивДанных);
	Возврат КоличествоПроблемЗаполненияНоменклатуры(Организация);
КонецФункции

// Вычисляет доступные категории сервиса на основании товарной группы объекта информационной базы
//
// Параметры:
//  ДанныеИнформационнойБазы - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой, 
//                           - Массив из ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой
//
// Возвращаемое значение:
//  Массив из Строка - идентификаторы категорий сервиса 1С:Номенклатура
// 
Функция ДоступныеКатегорииСервиса(ДанныеИнформационнойБазы) Экспорт 
	
	КатегорииСервиса = Новый Массив;
	ТоварныеГруппы   = Новый Соответствие;
	
	Если ТипЗнч(ДанныеИнформационнойБазы) = Тип("Массив") Тогда
		Для каждого СсылкаНаОбъект Из ДанныеИнформационнойБазы Цикл
			ТоварныеГруппы.Вставить(СсылкаНаОбъект);
		КонецЦикла;
	Иначе 
		ТоварныеГруппы.Вставить(ДанныеИнформационнойБазы);
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьТоварныеГруппыНоменклатуры(ТоварныеГруппы);
	Если ТипЗнч(ТоварныеГруппы) <> Тип("Соответствие") Тогда
		Возврат КатегорииСервиса;
	КонецЕсли;
	
	ТоварныеГруппыСервиса = Новый Массив;
	Для каждого ТоварнаяГруппа Из ТоварныеГруппы Цикл
		Если ТипЗнч(ТоварнаяГруппа.Значение) = Тип("Строка") 
			И НЕ ПустаяСтрока(ТоварнаяГруппа.Значение) 
			И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ТоварнаяГруппа.Значение) Тогда
			ТоварныеГруппыСервиса.Добавить(ТоварнаяГруппа.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТоварныеГруппыСервиса = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТоварныеГруппыСервиса);
	Для каждого ТоварнаяГруппа Из ТоварныеГруппыСервиса Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КатегорииСервиса, КатегорииТоварнойГруппы(ТоварнаяГруппа));
	КонецЦикла;
	
	ДоступныеКатегории = ПредставлениеТоварныхГрупп(ТоварныеГруппыСервиса);
	ДоступныеКатегории.Вставить("Категории", ОбщегоНазначенияКлиентСервер.СвернутьМассив(КатегорииСервиса));
	ДоступныеКатегории.Вставить("ТоварныеГруппы", ТоварныеГруппыСервиса);
	ДоступныеКатегории.ЗаголовокТоварныхГрупп = ПолучитьСклоненияСтроки(ДоступныеКатегории.ЗаголовокТоварныхГрупп,, "ПД=Родительный")[0];
	
	Возврат ДоступныеКатегории;
	
КонецФункции

// Возвращает массив идентификаторов доп.реквизитов 1С:Номенклатуры, значения которых заполняются на уровне запроса 
// для конкретного объекта информационной базы.
// Подробнее: по ссылке на объект ИБ вычисляется товарная группа, затем для товарной группы запрашивается перечень
// доступных псевдонимов доп.реквизитов, эти псевдонимы ищутся в запросе, идентификаторы найденных попадают в результат метода.
//
// Параметры:
//  Ссылка - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой
//  ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Номенклатура.
//
// Возвращаемое значение:
//  Массив из Строка - идентификаторы доп.реквизитов сервиса 1С:Номенклатура
//
Функция СопоставленныеРеквизитыОбъекта(Ссылка, ИдентификаторКатегории = "") Экспорт 
	
	ОписаниеКатегорий = ДоступныеКатегорииСервиса(Ссылка);
	Если ОписаниеКатегорий.Категории.Количество() Тогда
		Возврат СопоставленныеРеквизитыТоварнойГруппы(ОписаниеКатегорий.ТоварныеГруппы[0]);
	Иначе 
		Возврат СопоставленныеРеквизитыТоварнойГруппы(ТоварнаяГруппаКатегории(ИдентификаторКатегории));
	КонецЕсли;
	
КонецФункции

// Выполняет http запрос к серверу выгрузки номенклатуры и возвращает текстовое содержание файла.
//
// Параметры:
//  АдресРесурса - Строка - адрес файла на сервере.
//  ИмяСобытия   - Строка - имя события для формирования записи в журнале регистрации в случае ошибки.
//
// Возвращаемое значение:
//  Строка
//
Функция СодержаниеФайлаСервисаПоАдресу(АдресРесурса, ИмяСобытия) Экспорт 
	
	Результат  = "";
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование" , ИмяСобытия);
	ПараметрыКоманды.Вставить("Адрес"        , АдресРесурса);
	ПараметрыКоманды.Вставить("Метод"        , "GET");
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Ответ  = ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды);
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") 
		И Ответ.КодСостояния = 200 Тогда
		Результат = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение, ПрочитатьВСоответствие = Ложь) Экспорт
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Преобразование данных'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеОбработчиковОбновления

Процедура ЗаполнитьЧитаемыеИзменяемыеДанныеОбработчиковОбновления(Обработчики) Экспорт
	
	Для каждого Обработчик Из Обработчики Цикл
		ЧитаемыеИзменяемыеДанные = ЧитаемыеИзменяемыеДанныеМетода(Обработчик.Процедура);
		ДополнитьЧитаемыеИзменяемыеДанные(Обработчик, ЧитаемыеИзменяемыеДанные);
	КонецЦикла;
	
КонецПроцедуры

Функция ЧитаемыеИзменяемыеДанныеМетода(Знач Метод) Экспорт 
	
	ЧитаемыеИзменяемыеДанные = Новый Структура;
	ЧитаемыеИзменяемыеДанные.Вставить("Читаемые", Новый Массив);
	ЧитаемыеИзменяемыеДанные.Вставить("Изменяемые", Новый Массив);
	
	Если Метод = "РегистрыСведений.УдалитьСоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию" Тогда
		
		РаботаСНоменклатуройПереопределяемый.ЗаполнитьЧитаемыеИзменяемыеДанныеМетода(
		"РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре",
		ЧитаемыеИзменяемыеДанные);
		
	ИначеЕсли Метод = "РегистрыСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию" Тогда
		
		РаботаСНоменклатуройПереопределяемый.ЗаполнитьЧитаемыеИзменяемыеДанныеМетода(
		"РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре",
		ЧитаемыеИзменяемыеДанные);
		 
	КонецЕсли;
	
	Возврат ЧитаемыеИзменяемыеДанные;
	
КонецФункции

#КонецОбласти

#Область РаботаСРубрикатором

Функция СопоставитьЗначенияРеквизитовАвтоматически(СоответствиеРеквизитов, ОбъектСопоставления, ИдентификаторКатегории) Экспорт
	
	Результат          = Новый Соответствие;
	Реквизиты          = Новый Массив;
	Отказ              = Ложь;
	ПараметрыМетода    = Новый Массив;
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("ОбъектСопоставления", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип);
	ИсточникБлокировки.Колонки.Добавить("РеквизитОбъекта", Метаданные.ОпределяемыеТипы.РеквизитыСопоставленияРаботаСНоменклатурой.Тип);
	Для каждого ОписаниеРеквизита Из СоответствиеРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(ОписаниеРеквизита.ИдентификаторРеквизитаКатегории) Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.Добавить(ОписаниеРеквизита.РеквизитОбъекта);
		ЗаполнитьЗначенияСвойств(ИсточникБлокировки.Добавить(), Новый Структура("ОбъектСопоставления,РеквизитОбъекта", 
			ОбъектСопоставления, ОписаниеРеквизита.РеквизитОбъекта));
		ПараметрыМетода.Добавить(Новый Структура("ИдентификаторКатегории,ИдентификаторДополнительногоРеквизита", 
			ИдентификаторКатегории, ОписаниеРеквизита.ИдентификаторРеквизитаКатегории));
	КонецЦикла;
	
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеЗначенийДополнительногоРеквизитаКатегории(ПараметрыМетода, Отказ);
	Если НЕ ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	ДанныеСервиса.Индексы.Добавить("ИдентификаторДополнительногоРеквизита");
	
	Запрос = Новый Запрос;
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаЗначенийДополнительныхРеквизитов(Запрос, Реквизиты);
	
	ИмяТаблицы   = "втДополнительныеРеквизиты";
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяТаблицы;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта,
	|	ДополнительныеРеквизиты.Значение КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Значение) КАК ПредставлениеЗначения,
	|	ВЫБОР
	|		КОГДА СоответствиеЗначений.ОбъектСопоставления ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Сопоставлено
	|ИЗ
	|	втДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначений
	|		ПО (СоответствиеЗначений.ОбъектСопоставления = &ОбъектСопоставления)
	|			И ДополнительныеРеквизиты.РеквизитОбъекта = СоответствиеЗначений.РеквизитОбъекта
	|			И ДополнительныеРеквизиты.Значение = СоответствиеЗначений.Значение";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДополнительныеРеквизиты", ИмяТаблицы);
	
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов.Добавить();
	ОсновнойЗапрос.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ОбъектСопоставления", ОбъектСопоставления);
	
	НаборЗаписей = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка        = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектСопоставления", "ОбъектСопоставления");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РеквизитОбъекта", "РеквизитОбъекта");
		Блокировка.Заблокировать();
		
		ДанныеБазы = Запрос.Выполнить().Выгрузить();
		ДанныеБазы.Индексы.Добавить("РеквизитОбъекта");
		
		ПоискВБазе    = Новый Структура("РеквизитОбъекта");
		ПоискВСервисе = Новый Структура("ИдентификаторДополнительногоРеквизита");
		Для каждого ОписаниеРеквизита Из СоответствиеРеквизитов Цикл
			ЗаполнитьЗначенияСвойств(ПоискВБазе, ОписаниеРеквизита);
			ПоискВСервисе.ИдентификаторДополнительногоРеквизита = ОписаниеРеквизита.ИдентификаторРеквизитаКатегории;
			
			ЗначенияБазы    = ДанныеБазы.НайтиСтроки(ПоискВБазе);
			ЗначенияСервиса = ДанныеСервиса.НайтиСтроки(ПоискВСервисе);
			
			Если ЗначенияСервиса.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоЗначений        = ЗначенияБазы.Количество();
			СопоставленоЗначений = 0;
			Для каждого ТекущееЗначение Из ЗначенияБазы Цикл
				Если ТекущееЗначение.Сопоставлено Тогда
					СопоставленоЗначений = СопоставленоЗначений + 1;
					Продолжить;
				КонецЕсли;
				
				ПредставлениеЗначения = ВРег(СокрЛП(ТекущееЗначение.ПредставлениеЗначения));
				Для каждого ЗначениеСервиса Из ЗначенияСервиса[0].Значения Цикл
					Если ВРег(ЗначениеСервиса.Наименование) = ПредставлениеЗначения Тогда
						СопоставленоЗначений = СопоставленоЗначений + 1;
						ЗаписатьНабор = Истина;
						Запись = НаборЗаписей.Добавить();
						Запись.ОбъектСопоставления = ОбъектСопоставления;
						Запись.РеквизитОбъекта = ОписаниеРеквизита.РеквизитОбъекта;
						Запись.Значение = ТекущееЗначение.Значение;
						Запись.ИдентификаторЗначенияРеквизитаКатегории = ЗначениеСервиса.Идентификатор;
						Запись.ПредставлениеЗначенияРеквизитаКатегории = ЗначениеСервиса.Наименование;
						Запись.ДатаОбновления = ЗначениеСервиса.ДатаИзменения;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Результат.Вставить(ОписаниеРеквизита.РеквизитОбъекта, ТекстКоличествоСопоставленныхЗначений(СопоставленоЗначений, ВсегоЗначений));
		КонецЦикла;
		
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей.Записать(Ложь); // запись без замещения
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВыполнитьЗаписьСобытияВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
		Результат = Новый Соответствие;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

Процедура ПодготовитьТаблицуТоваров(Товары) Экспорт
	
	ВсегоКолонок = Товары.Колонки.Количество();
	Для ОбратныйИндекс = 1 По ВсегоКолонок Цикл
		Если Товары.Колонки[ВсегоКолонок - ОбратныйИндекс].Имя = "Номенклатура"
			Или Товары.Колонки[ВсегоКолонок - ОбратныйИндекс].Имя = "Характеристика" Тогда
			Продолжить;
		КонецЕсли;
		Товары.Колонки.Удалить(ВсегоКолонок - ОбратныйИндекс);
	КонецЦикла;
	
	Если Товары.Колонки.Найти("Характеристика") = Неопределено Тогда
		Товары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	КонецЕсли;
	
КонецПроцедуры

Функция ШтрихкодыНоменклатуры() Экспорт

	ШтрихкодыНоменклатуры = Новый ТаблицаЗначений;
	ШтрихкодыНоменклатуры.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ШтрихкодыНоменклатуры.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	ШтрихкодыНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	Возврат ШтрихкодыНоменклатуры;

КонецФункции

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаботаСНоменклатуройСлужебный.Пауза", Параметры);
	КонецЕсли;
	
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетодыAPI

Процедура ЗаполнитьАтрибутыЗапроса(КоллекцияРеквизитов, ОбъектПоиска, ТипАтрибутов)
	
	СтрокаОбъектаРеквизиты     = СтрШаблон("NomenclatureRequest.%1",            ТипАтрибутов);
	СтрокаОбъектаДиапазон      = СтрШаблон("NomenclatureRequest.%1.range",      ТипАтрибутов);
	СтрокаОбъектаКлассификатор = СтрШаблон("NomenclatureRequest.%1.classifier", ТипАтрибутов);
			
	Если ЗначениеЗаполнено(КоллекцияРеквизитов) Тогда
		Для каждого РеквизитПоиска Из КоллекцияРеквизитов Цикл
			ОбъектРеквизитов = ФабрикаXDTO.Создать(ТипОбъектаXDTO(СтрокаОбъектаРеквизиты));
			ОбъектРеквизитов.attributeId = РеквизитПоиска.Идентификатор;
			Если ЗначениеЗаполнено(РеквизитПоиска.Значение) Тогда
				// Значение.
				ОбъектРеквизитов.value = РеквизитПоиска.Значение;
			ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.ИдентификаторыЗначений) Тогда
				// Идентификаторы значений.
				ДополнитьМассив(ОбъектРеквизитов.valueIds, РеквизитПоиска.ИдентификаторыЗначений);
			ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение)
				ИЛИ ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
				// Заполнение диапазона значений (число или дата) - range.
				ЗначениеДиапазона = ФабрикаXDTO.Создать(ТипОбъектаXDTO(СтрокаОбъектаДиапазон));
				Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение) Тогда
					ЗначениеДиапазона.min = РеквизитПоиска.МинимальноеЗначение;
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
					ЗначениеДиапазона.max = РеквизитПоиска.МаксимальноеЗначение;
				КонецЕсли;
				ОбъектРеквизитов.range = ЗначениеДиапазона;
			ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.КодКлассификатора)
				ИЛИ ЗначениеЗаполнено(РеквизитПоиска.НаименованиеКлассификатора) Тогда
				// Заполнение классификатора валют или стран - classifier.
				ЗначениеКлассификатора = ФабрикаXDTO.Создать(ТипОбъектаXDTO(СтрокаОбъектаКлассификатор));
				ЗначениеКлассификатора.code = РеквизитПоиска.КодКлассификатора;
				ЗначениеКлассификатора.name = РеквизитПоиска.НаименованиеКлассификатора;
				ОбъектРеквизитов.classifier = ЗначениеКлассификатора;
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка установки параметров запроса номенклатуры.'");
			КонецЕсли;
			
			Если ТипАтрибутов = "search.attributes" Тогда
				ОбъектПоиска.attributes.Добавить(ОбъектРеквизитов);
			Иначе
				ОбъектПоиска[ТипАтрибутов].Добавить(ОбъектРеквизитов);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Общие параметры вызова команд сервиса.
//
Функция ОписаниеПараметровКомандыСервиса() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование");   // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес");          // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод");          // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут");        // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные");         // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация"); // Требуется аутентификация.
	ПараметрыКоманды.Вставить("ТипАутентификации", "basic");    // basic - по тикету ИТС, bearer - по тикету JWT.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках"); // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат");      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка");      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры"); // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",          Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ПараметрыКоманды.Вставить("КодСостояния",    200); // Код состояния, возвращенный сервисом.
	ПараметрыКоманды.Вставить("ПараметрыСоединенияССервисом", Неопределено); // Параметры соединения для переопределения.
	ПараметрыКоманды.Вставить("ДопустимоПустоеТелоОтвета", Истина); // Истина означает, что пустое тело ответа не является ошибкой.
	
	Возврат ПараметрыКоманды;
		
КонецФункции

Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды, см.БизнесСеть.ОписаниеПараметровКомандыСервиса().
//  КодСостояния	 - Строка - код состояния ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	ИначеЕсли Не ПараметрыКоманды.ДопустимоПустоеТелоОтвета И ПустаяСтрока(Данные) Тогда 
		ЗарегистрироватьОшибкуСервисаПустоеТелоОтвета(ПараметрыКоманды, КодСостояния, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Результат) Тогда
		Данные = ЗначениеИзСтрокиJSON(Данные);
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Данные, ПараметрыКоманды.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыКоманды.Обработка <> Неопределено Тогда
		Результат = ОбработатьРезультатОтветаСервиса(ПараметрыКоманды.Обработка, КодСостояния,
			Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Результат, Отказ)
	
	Если Не ПараметрыКоманды.Свойство("Ошибки") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Работа с номенклатурой.Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстОшибкиСервиса = "";
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("message") Тогда
			ТекстОшибкиСервиса = Результат.message;
		ИначеЕсли Результат.Свойство("error_description") Тогда
			ТекстОшибкиСервиса = Результат.error_description;
		ИначеЕсли Результат.Свойство("ПодробныйТекстОшибки") Тогда
			ТекстОшибкиСервиса = Результат.ПодробныйТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если НРег(ПараметрыКоманды.ТипАутентификации) = "bearer"
		И (КодСостояния = 401 Или КодСостояния = 403) Тогда
		УдалитьТикетАутентификацииВСервисе();
	КонецЕсли;
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:'") + " " + КодСостояния, "")
		+ Символы.ПС + ПараметрыКоманды.Адрес
		+ ?(ТекстОшибкиСервиса = "", "", Символы.ПС + ТекстОшибкиСервиса);
	
	Если Не (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
		И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		
	Возврат Неопределено;
КонецФункции

Процедура ЗарегистрироватьОшибкуСервисаПустоеТелоОтвета(ПараметрыКоманды, КодСостояния, Отказ)
	
	Отказ = Истина;
	
	ТекстОшибки = НСтр("ru = 'Ошибка получения данных из сервиса'");
	ПодробныйТекстОшибки = Новый Массив;
	ПодробныйТекстОшибки.Добавить(ТекстОшибки);
	
	Если Не (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
		И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ПодробныйТекстОшибки.Добавить(СтрШаблон(НСтр("ru = 'Адрес: %1'"), ПараметрыКоманды.Адрес));
	ПодробныйТекстОшибки.Добавить(СтрШаблон(НСтр("ru = 'Код состояния: %1'"), КодСостояния));
	ПодробныйТекстОшибки.Добавить(НСтр("ru = 'Тело ответа: <пусто>'"));
	ПодробныйТекстОшибки.Добавить(НСтр("ru = 'Причина ошибки: Ожидалось непустое тело ответа'"));
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, СтрСоединить(ПодробныйТекстОшибки, Символы.ПС));
		
КонецПроцедуры

Функция ОбработатьРезультатОтветаСервиса(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений")
		И ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(ЗначениеДанных, Обработка);
		
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		
		Результат = ПреобразоватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипОбъектаXDTO(Путь, URIПространстваИмен = "http://catalog-api.1c.ru/XMLSchema")
	
	МассивПути = Новый СписокЗначений;
	МассивПути.ЗагрузитьЗначения(СтрРазделить(Путь, "."));
	МассивПути = МассивПути.ВыгрузитьЗначения();
		
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - простой тип.
//   * Строка          - тип Строка.
//   * Число           - тип Число.
//   * Булево          - тип Булево.
//   * Структура       - тип Структура.
//   * Дата            - тип Дата.
//   * ТаблицаЗначений - тип ТаблицаЗначений.
//
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",   Новый ОписаниеТипов("Строка, Булево, Число, Дата"));
	Результат.Вставить("Булево",    Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число",     Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата",      Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка",    Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура", Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив",    Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица",   Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьЗаголовкиЗапроса(Соединение, ПараметрыСоединения, ПараметрыКоманды, Отказ)
	
	Результат = Новый Соответствие;
	
	// Установка заголовков запроса.
	Результат.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	Если ПараметрыКоманды.Аутентификация = Истина Тогда
		
		// Получение тикета интернет-поддержки.
		УстановитьПривилегированныйРежим(Истина);
		ТикетАутентификацииИТС = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-nomenklatura");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(ТикетАутентификацииИТС.КодОшибки) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
					|%1'"),
				ТикетАутентификацииИТС.СообщениеОбОшибке);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
			
			Возврат Неопределено;
		КонецЕсли;
		
		Если НРег(ПараметрыКоманды.ТипАутентификации) = "bearer" Тогда
			ТикетАутентификацииВСервисе = ПолучитьТикетАутентификацииВСервисе(Соединение, ПараметрыСоединения, ТикетАутентификацииИТС, Отказ);
			
			Если Отказ Или Не ЗначениеЗаполнено(ТикетАутентификацииВСервисе) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
					|%1'"),
					ТикетАутентификацииИТС.СообщениеОбОшибке);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
				
				Возврат Неопределено;
			КонецЕсли;
			Результат.Вставить("Authorization", "Bearer " + ТикетАутентификацииВСервисе);
		Иначе
			Результат.Вставить("Authorization", "Basic " + СтрокаBase64БезBOM("AUTH_TOKEN:" + ТикетАутентификацииИТС.Тикет));
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеВозвращаемыхЗначений

// Описание типа классификатора рубрики Nomenclature.classifiers.
//
Функция ОписаниеТаблицыКлассификатораНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
	Результат.Колонки.Добавить("Описание",      Типы().Строка, "description");
	
	Возврат Результат;

КонецФункции

// Описание типа характеристик номенклатуры Nomenclature.features.
//
Функция ОписаниеТаблицыХарактеристикНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Штрихкоды",     Новый ОписаниеТипов("Массив"), "barcodes" );
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"), "featureId");
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"), "name");
	
	Возврат Результат;
	
КонецФункции

// Описание типа характеристик категории Category.features.
//
Функция ОписаниеТаблицыХарактеристикКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,  "name");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "attributes|Category.features.attributes");
	Результат.Колонки.Добавить("Идентификаторы",          Типы().Массив,  "featureIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска дополнительных реквизитов NomenclatureResponse.nomenclatures.attributes.
//
Функция ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры()
	
	ПростойТип = Новый ОписаниеТипов("Строка, Булево, Число, Дата");
	Типы().Строка  = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка,  "name");
	Результат.Колонки.Добавить("Значение",                   ПростойТип, "value");
	Результат.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка,  "valueId.id");
	Результат.Колонки.Добавить("СтроковоеЗначение",          Типы().Строка,  "valueId.value");
	Результат.Колонки.Добавить("КодКлассификатора",          Типы().Строка,  "classifier.code");
	Результат.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка,  "classifier.name");
	Результат.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка,  "classifier.description");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов категории CategoryResponse.categories.attributes
//
Функция ОписаниеТаблицыРеквизитовКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",          Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("ИдентификаторыЗначений", Типы().Массив,  "valueIds");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("Обязательный",           Типы().Строка,  "required");
	Результат.Колонки.Добавить("МинимальноеЗначение",    Типы().Строка,  "min");
	Результат.Колонки.Добавить("МаксимальноеЗначение",   Типы().Строка,  "max");
	Результат.Колонки.Добавить("Ранг",                   Типы().Число,   "rank");
	Результат.Колонки.Добавить("ДатаИзменения",          Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка,  "type|ДесериализоватьТипЗначения");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов AttributeResponse.attributes
//
Функция ОписаниеТаблицыДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",             Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",              Типы().Строка, "name");
	Результат.Колонки.Добавить("Тип",                       Типы().Строка, "type|ДесериализоватьТипЗначения");
	Результат.Колонки.Добавить("ДатаИзменения",             Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий",   Типы().Массив,    "categoryIds");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",          Типы().Структура, "unit|Attribute.unit");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы", Типы().Таблица, "assignedIds|assignedIds");

	Возврат Результат;
	
КонецФункции

// Описание поиска значений реквизитов AttributeValueResponse.attributeValues.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитов()

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,  "id");
	Результат.Колонки.Добавить("Значение",                Типы().Строка,  "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "reference|AttributeValueResponse.attributeValues.reference");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы", Типы().Таблица, "assignedIds|assignedIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений категорий с дополнительными реквизитами
// AttributeValuesByCategoriesResponse.attributeValuesByCategories.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитовКатегорий()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторКатегории",                Типы().Строка, "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",                 Типы().Строка, "categoryName");
	Результат.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Типы().Строка, "attributeId");
	Результат.Колонки.Добавить("НаименованиеДополнительногоРеквизита",  Типы().Строка, "attributeName");
	Результат.Колонки.Добавить("Значения",                              Типы().Таблица,
		"values|AttributeValuesByCategoriesResponse.attributeValuesByCategories.values");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска характеристик FeatureResponse.FeatureResponse.
//
Функция ОписаниеТаблицыХарактеристики()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка, "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,
		"attributes|Feature.attributes");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий", Типы().Массив, "categoryIds");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы",  Типы().Таблица, "assignedIds|assignedIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска рекламных записей AdvertResponse.adverts.
//
Функция ОписаниеТаблицыРекламныеЗаписи()

	Типы().Строка = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Сайт",          Типы().Строка, "site");
	Результат.Колонки.Добавить("БаннерURL",     Типы().Строка, "bannerImageLink");
	Результат.Колонки.Добавить("ЛоготипURL",    Типы().Строка, "logoIconLink");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Nomenclature.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМернойХарактеристики()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЧислительКратности",   Типы().Число,     "unitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности", Типы().Число,     "baseUnitCount");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",     Типы().Структура, "unit|Nomenclature.unit");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМерныхХарактеристикКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Вес",                 Типы().Структура, "weight|Category.metrics");
	Результат.Колонки.Добавить("Объем",               Типы().Структура, "volume|Category.metrics");
	Результат.Колонки.Добавить("Длина",               Типы().Структура, "length|Category.metrics");
	Результат.Колонки.Добавить("Площадь",             Типы().Структура, "area|Category.metrics");
	Результат.Колонки.Добавить("КоличествоВУпаковке", Типы().Структура, "itemCount|Category.metrics");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыМернойХарактеристикиКатегории()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("МинимальноеЗначение",  Типы().Число, "min");
	Результат.Колонки.Добавить("МаксимальноеЗначение", Типы().Число, "max");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",     Типы().Структура, "unit|Nomenclature.unit");
	
	Возврат Результат;
		
КонецФункции

Функция ОписаниеТаблицыКоличестваВУпаковке()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Количество",       Типы().Число, "unitCount");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", Типы().Структура,  "unit|Nomenclature.unit");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Attribute.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияОКЕИ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                     Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",             Типы().Строка, "name");
	Результат.Колонки.Добавить("НациональноеОбозначение",  Типы().Строка, "nationalSymbol");
	Результат.Колонки.Добавить("МеждународноеОбозначение", Типы().Строка, "internationalSymbol");
	Результат.Колонки.Добавить("НациональныйКод",          Типы().Строка, "nationalCodeMark");
	Результат.Колонки.Добавить("МеждународныйКод",         Типы().Строка, "internationalCodeMark");
	Результат.Колонки.Добавить("Тип",                      Типы().Строка, "type");
	Результат.Колонки.Добавить("ЧислительКратности",         Типы().Число,  "baseUnitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска брендов BrandResponse.brands.
//
Функция ОписаниеТаблицыБренды()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка, "name");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка, "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка, "manufacturerName");
	Результат.Колонки.Добавить("ДатаИзменения",              Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",                   Типы().Массив, "images");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы",  Типы().Таблица, "assignedIds|assignedIds");	
	
	Возврат Результат;
	
КонецФункции

// Описание поиска производителей ManufacturerResponse.manufacturers.
//
Функция ОписаниеТаблицыПроизводители()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",    Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",     Типы().Строка, "name");
	Результат.Колонки.Добавить("GLN",              Типы().Строка, "gln");
	Результат.Колонки.Добавить("ИНН",              Типы().Строка, "inn");
	Результат.Колонки.Добавить("КПП",              Типы().Строка, "kpp");
	Результат.Колонки.Добавить("Сайт",             Типы().Строка, "site");
	Результат.Колонки.Добавить("Адрес",            Типы().Строка, "address");
	Результат.Колонки.Добавить("Факс",             Типы().Строка, "fax");
	Результат.Колонки.Добавить("Телефоны",         Типы().Массив, "phones");
	Результат.Колонки.Добавить("ЭлектроннаяПочта", Типы().Массив, "emails");
	Результат.Колонки.Добавить("ДатаИзменения",    Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",         Типы().Массив, "images");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы", Типы().Таблица, "assignedIds|assignedIds");
	
	Возврат Результат;
	
КонецФункции

// Описание категорий Category.
//
Функция ОписаниеТаблицыКатегории()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДополнительныеРеквизиты",      Типы().Таблица,   "attributes|CategoryResponse.categories.attributes");
	Результат.Колонки.Добавить("Характеристики",               Типы().Структура, "features|CategoryResponse.categories.features");
	Результат.Колонки.Добавить("Классификаторы",               Типы().Таблица,   "classifiers|CategoryResponse.categories.classifiers");
	Результат.Колонки.Добавить("Изображения",                  Типы().Массив,    "images");
	Результат.Колонки.Добавить("Идентификатор",                Типы().Строка,    "id");
	Результат.Колонки.Добавить("Наименование",                 Типы().Строка,    "name");
	Результат.Колонки.Добавить("ИдентификаторРодителя",        Типы().Строка,    "parentId");
	Результат.Колонки.Добавить("НаименованиеРодителя",         Типы().Строка,    "parentName");
	Результат.Колонки.Добавить("КоличествоПодчиненных",        Типы().Число,     "childrenCount");
	Результат.Колонки.Добавить("Ранг",                         Типы().Число,     "rank");	
	Результат.Колонки.Добавить("СтавкаНДС",                    Типы().Строка,     "vat");
	Результат.Колонки.Добавить("Тип",                          Типы().Строка,     "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчастникЕГАИС",                Типы().Булево,    "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",                 Типы().Булево,    "requiredGISM");
	Результат.Колонки.Добавить("Описание",                     Типы().Строка,    "description");
	Результат.Колонки.Добавить("ОтсылочныйИдентификатор",      Типы().Строка,    "referenceId");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка,    "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",                Типы().Дата,      "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("МерныеХарактеристики",         Типы().Структура, "metrics|CategoryResponse.categories.metrics");
	Результат.Колонки.Добавить("НазначенныеИдентификаторы",    Типы().Таблица,   "assignedIds|assignedIds");
		
	Возврат Результат;
	
КонецФункции

// Описание категорий NomenclatureByBarcodes.
//
Функция ОписаниеТаблицыНоменклатурыПоШтрихкодам()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",    Типы().Строка,  "id");
	Результат.Колонки.Добавить("Наименование",     Типы().Строка,  "name");
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Типы().Строка,  "unitName");
	Результат.Колонки.Добавить("ШтрихКоды",        Типы().Массив,  "barcodes");
	Результат.Колонки.Добавить("Характеристики",   Типы().Таблица, "features|Nomenclature.features");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения в формате JSON.
//
Функция ЗначениеВФорматJSON(Данные, ПараметрыЗаписи = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - значение данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ЗначениеXDTOВФорматJSON(Знач ЗначениеXDTO, Знач Уровень = 0)
	
	Если ЗначениеXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ЗначениеXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ЗначениеXDTO) = Тип("СписокXDTO") Тогда
		Если ЗначениеXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ЗначениеXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ЗначениеXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ЗначениеXDTO.Свойства() Цикл
			Если ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ЗначениеXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ЗначениеXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			Значение = ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		Иначе
			Значение = "null";	
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Заполнение массива приемника по массиву источника.
//
// Параметры:
//  МассивПриемник - Коллекция - коллекция приемник для заполнения, например ЗначениеXDTO, массив.
//  МассивИсточник - Коллекция - коллекция источник.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник)
	
	Если Не ЗначениеЗаполнено(МассивИсточник)
		ИЛИ ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЗначениеМассива Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЗначениеМассива);
	КонецЦикла;
	
КонецПроцедуры

// Формирование строки параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//  Адрес	 - Строка - адрес ресурса.
//  Имя		 - Строка - имя параметра.
//  Значение - Строка - значение параметра.
//
Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли; 
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование коллекции массива структур в коллекцию таблицу значений.
//
// Параметры:
//  Данные				 	- Массив - массив структур данных для преобразования.
//  ОписаниеТаблицыЗначений	- ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  Массив - результат преобразования.
//
Функция КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Данные, ОписаниеПолучателя, Свойство = "")

	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Возврат Данные;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для каждого ЭлементКоллекции Из Данные Цикл
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			Значение = ЭлементКоллекции[Свойство];
		Иначе
			Значение = ЭлементКоллекции;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Значение)
			ИЛИ (ТипЗнч(Значение) <> Тип("Массив") И Значение.Количество() = 0) Тогда
				Результат.Добавить(ОписаниеПолучателя.Скопировать());
		Иначе
			Результат.Добавить(МассивСтруктурВТаблицуЗначений(Значение,	ОписаниеПолучателя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразование массива структур в таблицу значений.
//
// Параметры:
//  Коллекция				 - Массив - массив структура.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция МассивСтруктурВТаблицуЗначений(Источник, ОписаниеТаблицыЗначений)
	
	Если ТипЗнч(Источник) <> Тип("Массив")
		ИЛИ Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	КонецЕсли;
	
	ПравилаПреобразования = Новый Структура;
	РеквизитыВСтруктуре = Новый Массив;
	
	// Создание колонок без типов.
	ТаблицаОбработки = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "|");
		ИмяПравила = "";
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			ИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыВСтруктуре.Добавить(ИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила преобразования
		Если РазделительПравила <> 0 Тогда
			ПравилаПреобразования.Вставить(ИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		ТаблицаОбработки.Колонки.Добавить(ИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Для каждого СтрокаИсточника Из Источник Цикл
		НоваяСтрока = ТаблицаОбработки.Добавить();
		Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЕсли;
		
		// Заполнение реквизитов в структуре.
		Для каждого ИмяРеквизита Из РеквизитыВСтруктуре Цикл
			СоставСтруктурыРеквизита = СтрРазделить(ИмяРеквизита, "_");
			НоваяСтрока[ИмяРеквизита] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника,	СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЦикла;
	
	// Обработка по правилам преобразования.
	Для каждого ЭлементПреобразования Из ПравилаПреобразования Цикл
		ДанныеОбработки = ТаблицаОбработки.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = ПреобразоватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ТаблицаОбработки.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла; 
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ТаблицаОбработки.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Заполнение таблицы результата.
	Результат = ОписаниеТаблицыЗначений.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция ПреобразоватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Если Правило = "CategoryPathToRootResponse.pathToRoot" Тогда
		
		// Разобрать список родительских категорий.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, 
			ОписаниеТаблицыКатегории(), "categories");
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.classifiers" Тогда
		
		// Разобрать классификатор номенклатуры
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыКлассификатораНоменклатуры());
		Возврат Результат;
				
	ИначеЕсли Правило = "Nomenclature.propertiesHavingValue" Тогда
		
		Результат = Новый Массив;
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			ПреобразованныеЗначения = Новый Массив;
			ПреобразоватьИменаРеквизитов(ЭлементКоллекции, ПреобразованныеЗначения, ОписаниеТаблицыНоменклатуры());			
			Результат.Добавить(ПреобразованныеЗначения);
		КонецЦикла;
		
		Возврат Результат;
				
	ИначеЕсли Правило = "Nomenclature.images" Тогда
		
		ОписаниеТаблицыИзображенийНоменклатуры = Новый ТаблицаЗначений;
		ОписаниеТаблицыИзображенийНоменклатуры.Колонки.Добавить("ИзображениеURL", Типы().Строка, "link");
		
		// Разобрать изображения номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыИзображенийНоменклатуры);
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.features" Тогда
		
		// Разобрать характеристики номенклатуры
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыХарактеристикНоменклатуры());
		Возврат Результат;
			
	ИначеЕсли Правило = "Nomenclature.attributes" Тогда
		
		// Разобрать дополнительные реквизиты номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры());
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.unit" Тогда
		
		// Разобрать единицы измерения номенклатуры
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Nomenclature.dimensionalProperties" Тогда
		
		// Разобрать мерные характеристики
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМернойХарактеристики());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Nomenclature.itemCount"  Тогда
		
		// Разобрать количество в упаковке
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКоличестваВУпаковке());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "CategoryResponse.categories.attributes" Тогда
		
		// Разобрать реквизиты категории
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыРеквизитовКатегорий());
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.features" Тогда
		
		// Разобрать характеристики категории
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыХарактеристикКатегорий());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "CategoryResponse.categories.metrics" Тогда
		
		// Разобрать мерные характеристики
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМерныхХарактеристикКатегорий());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Category.metrics" Тогда
		
		// Разобрать мерную характеристику категории
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыМернойХарактеристикиКатегории());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Category.features.attributes" Тогда
		
		// Разобрать реквизиты характеристик категории
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Тип",           Типы().Строка, "type|ДесериализоватьТипЗначения");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");

		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.classifiers" Тогда
		
		// Разобрать классификаторы категорий
		ОписаниеТаблицыКлассификатора = Новый ТаблицаЗначений;
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Описание",      Типы().Строка, "description");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКлассификатора);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Feature.attributes" Тогда 
		
		// Разобрать дополнительные реквизиты характеристик.
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка,    "attributeId");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка,    "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Значение",      Неопределено, "value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка, "valueId.id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("СтроковоеЗначение",    Типы().Строка, "valueId.value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("КодКлассификатора",          Типы().Строка, "classifier.code");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка, "classifier.name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка, "classifier.description");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "Attribute.unit" Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "AttributeValuesByCategoriesResponse.attributeValuesByCategories.values" Тогда
		
		// Значения дополнительных атрибутов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",  Типы().Строка, "value");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат Результат;
		
	ИначеЕсли Правило = "AttributeValueResponse.attributeValues.reference" Тогда
		
		// Значения дополнительных реквизитов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка, "categoryId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка, "categoryName");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор",          Типы().Строка, "attributeId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",           Типы().Строка, "attributeName");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "assignedIds" Тогда
		
		// Приписанные идентификаторы.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор",  Типы().Строка, "id");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ДатаПрисвоения", Типы().Дата, "assignedDate");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат Результат;

	ИначеЕсли Правило = "ДесериализоватьСтавкуНДС" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьДату" Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Результат = Новый Массив;
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
					Результат.Добавить(ДатаИзUnixTime(ЭлементКоллекции));
				Иначе
					Результат.Добавить(Неопределено);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = ДатаИзUnixTime(Значение);
		КонецЕсли;
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипЗначения" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипЗначенияСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипНоменклатуры" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипНоменклатурыСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.infoPrices" Тогда
		
		// Предельные отпускные цены.
		
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Цена",                    Типы().Число,  "value");
		ОписаниеТаблицыЗначений.Колонки.Добавить("КодВалюты",               Типы().Строка, "currencyCode");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ТипЦены",                 Типы().Строка, "typeName");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "attributes|infoPrices.attributes");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		
		Возврат Результат;
		
	ИначеЕсли Правило = "infoPrices.attributes" Тогда
		
		// Дополнительные реквизиты предельных отпускных цен.
		
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование", Типы().Строка, "name");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Значение",     Типы().Строка, "value");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		
		Возврат Результат;
		
	ИначеЕсли Правило = "ИстинаПоКоду200" Тогда 
		
		Результат = (КодСостояния = 200);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипЗначенияСервиса(Значение)
	
	Если Значение = "string"           Тогда Результат = "Строка";
	ИначеЕсли Значение = "number"      Тогда Результат = "Число";
	ИначеЕсли Значение = "boolean"     Тогда Результат = "Булево";
	ИначеЕсли Значение = "date"        Тогда Результат = "Дата";
	ИначеЕсли Значение = "enumeration" Тогда Результат = "Список";
	ИначеЕсли Значение = "classifier"  Тогда Результат = "Классификатор";
	Иначе Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипНоменклатурыСервиса(Значение)
	
	Если Значение = "Service" Тогда
		Результат = "Услуга";
	ИначеЕсли Значение = "Product" Тогда
		Результат = "Товар";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПреобразоватьИменаРеквизитов(ИсходныеИмена, ИтоговыеИмена, ТаблицаСоответствияПолей)
	
	Если ИсходныеИмена = Неопределено Тогда
		ИтоговыеИмена = Новый Массив;
		Возврат;
	КонецЕсли;
	
	Для Счетчик = 0 По ИсходныеИмена.ВГраница() Цикл
		
		ИмяПреобразовано = Ложь;
		
		Для каждого Колонка Из ТаблицаСоответствияПолей.Колонки Цикл
			
			ИмяИзСервиса = "";
			
			Если СтрНайти(Колонка.Заголовок, "|") <> 0 Тогда
				ИмяИзСервиса = Лев(Колонка.Заголовок, СтрНайти(Колонка.Заголовок, "|") - 1);	
			Иначе
				ИмяИзСервиса = Колонка.Заголовок;
			КонецЕсли;
			
			Если СтрСравнить(ИсходныеИмена[Счетчик], ИмяИзСервиса) = 0 Тогда
				ИтоговыеИмена.Добавить(Колонка.Имя);
				ИмяПреобразовано = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Не ИмяПреобразовано Тогда
			ИтоговыеИмена.Добавить(ИсходныеИмена[Счетчик]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстКоличествоСопоставленныхЗначений(СопоставленоЗначений, ВсегоЗначений) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"), СопоставленоЗначений, ВсегоЗначений);
	
КонецФункции

Процедура ИсключитьНеКупленнуюНоменклатуруИОтключитьОбновление(ДанныеПоНоменклатуре)
	
	Идентификаторы = Новый Массив;
	
	РаботаСНоменклатурой.ИсключитьДанныеНеКупленнойНоменклатуры(ДанныеПоНоменклатуре, Идентификаторы);
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = РаботаСНоменклатурой.НоменклатураПоИдентификаторам(Идентификаторы);
	РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(Номенклатура.ВыгрузитьКолонку("Номенклатура"), Ложь);
	
КонецПроцедуры

Функция ВыполнитьЗапросКСервису(ПараметрыКоманды, HTTPЗапрос, Соединение, Отказ)
	
	Попытка
		
		Если ВРег(ПараметрыКоманды.Метод) = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "PUT" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "DELETE" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
		
		ПараметрыКоманды.КодСостояния = HTTPОтвет.КодСостояния;

		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Исключение
		ПараметрыОшибки = Новый Структура("ПодробныйТекстОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, 0, ПараметрыОшибки, Отказ);
	КонецПопытки;
		
КонецФункции

Функция РасшифровкаКодаСостояния(КодСостояния) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОбъектНеНайден",              КодСостояния = 404);
	Результат.Вставить("ОбъектУдален",                КодСостояния = 410);
	Результат.Вставить("ОбъектПеремещен",             КодСостояния = 301);
	Результат.Вставить("ПревышеноКоличествоЗапросов", КодСостояния = 429);
	Результат.Вставить("ОтказВДоступе",               КодСостояния = 403);
	Результат.Вставить("ВыполненоУспешно",            КодСостояния = 200);
	
	Возврат Результат;
	
КонецФункции

Функция ВариантыПостраничнойНавигации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПоНоменклатуре",    "nomenclature");
	Результат.Вставить("ПоХарактеристикам", "feature");
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеИменМерныхХарактеристик() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Вес",                 "weight");
	Результат.Вставить("Объем",               "volume");
	Результат.Вставить("Длина",               "length");
	Результат.Вставить("Площадь",             "area");
	Результат.Вставить("КоличествоВУпаковке", "itemCount");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКатегорийПоИдентификаторам(Идентификаторы, ДанныеПоКатегориям)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Идентификаторы Цикл
		
		СтрокаДанных = ДанныеПоКатегориям.Найти(ЭлементКоллекции.Значение, "Идентификатор");
		
		Если СтрокаДанных <> Неопределено Тогда
			Результат.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТехническиеРеквизитыНоменклатуры(ЗначенияРеквизитовНоменклатуры)
	
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("ИдентификаторНоменклатуры",   Новый ОписаниеТипов("Строка"));
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("ИдентификаторХарактеристики", Новый ОписаниеТипов("Строка"));
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("ОбновляетсяАвтоматически",    Новый ОписаниеТипов("Булево"));
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("РежимЗагрузкиХарактеристик",
		Новый ОписаниеТипов("ПеречислениеСсылка.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик КАК РежимЗагрузкиХарактеристик,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристики
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&Номенклатура)
	|	И НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик В (&РежимыИсключения)";
	
	Запрос.УстановитьПараметр("Номенклатура",     ЗначенияРеквизитовНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("РежимыИсключения", РаботаСНоменклатурой.РежимыЗагрузкиХарактеристикИсключения());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаНоменклатуры = ЗначенияРеквизитовНоменклатуры.Найти(Выборка.Номенклатура, "Номенклатура");
		Если СтрокаНоменклатуры <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, Выборка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТехническиеРеквизитыВидовНоменклатуры(ЗначенияРеквизитовВидовНоменклатуры)
	
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ИдентификаторыКатегорий",                Новый ОписаниеТипов("СписокЗначений"));
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ОбновляетсяАвтоматически",               Новый ОписаниеТипов("Булево"));
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ЗагружатьХарактеристикиВХарактеристики", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЗагружатьХарактеристикиВХарактеристики КАК ЗагружатьХарактеристикиВХарактеристики,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры В(&ВидНоменклатуры)
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ЗначенияРеквизитовВидовНоменклатуры.ВыгрузитьКолонку("ВидНоменклатуры"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаВидаНоменклатуры = ЗначенияРеквизитовВидовНоменклатуры.Найти(Выборка.ВидНоменклатуры, "ВидНоменклатуры");
		
		Если СтрокаВидаНоменклатуры <> Неопределено Тогда
			
			ДетальныеЗаписи = Выборка.Выбрать();
			
			Пока ДетальныеЗаписи.Следующий() Цикл
				СтрокаВидаНоменклатуры.ИдентификаторыКатегорий.Добавить(
					ДетальныеЗаписи.ИдентификаторКатегории, ДетальныеЗаписи.ПредставлениеКатегории);
				ЗаполнитьЗначенияСвойств(СтрокаВидаНоменклатуры, ДетальныеЗаписи);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыполнитьЗаписьСобытияВЖурналРегистрации(ОписаниеСобытия, УровеньВажности,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.Работа с номенклатурой'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
			
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, ОбъектМетаданных, 
		ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

Процедура РазобратьРеквизитыНоменклатуры(ПараметрыМетода)
			
	СтрокаДанныхПоНоменклатуре          = ПараметрыМетода.СтрокаДанныхПоНоменклатуре;
	СтрокаНоменклатурыИБ                = ПараметрыМетода.СтрокаНоменклатурыИБ;
	ДополнительныеРеквизитыНоменклатуры = ПараметрыМетода.ДополнительныеРеквизитыНоменклатуры;
	СоответствиеРеквизитовИЗначений     = ПараметрыМетода.СоответствиеРеквизитовИЗначений;
	РезультатАнализа                    = ПараметрыМетода.РезультатАнализа;
	РеквизитыДляОбновления              = ПараметрыМетода.РеквизитыДляОбновления;
	БлокируемыеРеквизиты                = ПараметрыМетода.БлокируемыеРеквизиты;
	РежимОбновления                     = ПараметрыМетода.РежимОбновления;
	ЗагружатьКатегории                  = ПараметрыМетода.ЗагружатьКатегории;
			
	НаименованиеДоИзменения            = Неопределено;
	ДополнительныеРеквизитыДоИзменения = Неопределено;
	
	Если СтрокаНоменклатурыИБ.РежимЗагрузкиХарактеристик 
		= Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру Тогда
			
		РаботаСНоменклатурой.ДанныеХарактеристикиКакДанныеНоменклатуры(
			СтрокаДанныхПоНоменклатуре, СтрокаНоменклатурыИБ.ИдентификаторХарактеристики, НаименованиеДоИзменения, ДополнительныеРеквизитыДоИзменения);
	КонецЕсли;
	
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	ТаблицаОтличий.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = РезультатАнализа.Добавить();
		
	НоваяСтрока.Номенклатура              = СтрокаНоменклатурыИБ.Номенклатура;
	НоваяСтрока.ОбновляетсяАвтоматически  = СтрокаНоменклатурыИБ.ОбновляетсяАвтоматически;
	НоваяСтрока.ИдентификаторНоменклатуры = СтрокаНоменклатурыИБ.ИдентификаторНоменклатуры;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры(СтрокаДанныхПоНоменклатуре, СтрокаНоменклатурыИБ, ТаблицаОтличий);
	
	Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
		
		ВидыНоменклатурыИнформационнойБазы = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(СтрокаДанныхПоНоменклатуре.ИдентификаторКатегории);
		
		Если ВидыНоменклатурыИнформационнойБазы.Найти(СтрокаНоменклатурыИБ.ВидНоменклатуры) <> Неопределено Тогда
			
			// Вид номенклатуры был загружен и не меняется.
			
			НоваяСтрока.ВидНоменклатуры = СтрокаНоменклатурыИБ.ВидНоменклатуры;	
			
			РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре, 
				СтрокаНоменклатурыИБ.ВидНоменклатуры);	

		ИначеЕсли ВидыНоменклатурыИнформационнойБазы.Найти(СтрокаНоменклатурыИБ.ВидНоменклатуры) = Неопределено 
			И ВидыНоменклатурыИнформационнойБазы.Количество() > 0 Тогда
			
			// Вид номенклатуры был изменен, при этом в ИБ есть вид номенклатуры с требуемым идентификатором.
			
			СтрокиПоВидамНоменклатуры = ТаблицаОтличий.НайтиСтроки(
				Новый Структура("ТекущееЗначение, НовоеЗначение, Пометка", 
					СтрокаНоменклатурыИБ.ВидНоменклатуры, ВидыНоменклатурыИнформационнойБазы[0], Истина));
			
			РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре, 
				ВидыНоменклатурыИнформационнойБазы[0]);

			Если РежимОбновления Тогда
				
				Если СтрокиПоВидамНоменклатуры.Количество() > 0 Тогда
					
					// Строка по виду номенклатуры добавлена в таблицу отличий со стороны прикладного решения.
					
					НоваяСтрока.ВидНоменклатуры = ВидыНоменклатурыИнформационнойБазы[0];
				Иначе
					Если ЗагружатьКатегории Тогда
						
						НоваяСтрока.ВидНоменклатуры = ВидыНоменклатурыИнформационнойБазы[0];
						
						РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличий, "ВидНоменклатуры",
							ВидыНоменклатурыИнформационнойБазы[0], СтрокаНоменклатурыИБ.ВидНоменклатуры);
							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидыНоменклатурыИнформационнойБазы.Количество() = 0 Тогда
			
			// Вид номенклатуры ранее не был загружен.
			
			Если РежимОбновления И ЗагружатьКатегории Тогда
				
				НовыйВидНоменклатуры = ЗагрузитьКатегорию(СтрокаДанныхПоНоменклатуре.ИдентификаторКатегории);
				
				Если Не ЗначениеЗаполнено(НовыйВидНоменклатуры) Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось загрузить категорию'");
				КонецЕсли;
				
				СоответствиеРеквизитовИЗначенийТекущейКатегории = Неопределено;
				
				РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДанныхПоНоменклатуре.ИдентификаторКатегории), 
					СоответствиеРеквизитовИЗначенийТекущейКатегории, 
					НовыйВидНоменклатуры);
				
				РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначенийТекущейКатегории, 
					СтрокаДанныхПоНоменклатуре, НовыйВидНоменклатуры);
					
				РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличий, "ВидНоменклатуры",
					НовыйВидНоменклатуры, СтрокаНоменклатурыИБ.ВидНоменклатуры);
					
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	НоваяСтрока.КоличествоИзмененныхЗначений = ТаблицаОтличий.Количество();
	
	УдалитьЗаблокированныеРеквизиты(ТаблицаОтличий, БлокируемыеРеквизиты);	
	
	НоваяСтрока.КоличествоВыбранныхРеквизитов = ТаблицаОтличий.Количество(); // заблокированные реквизиты не отмечаются как выбранные
	
	Если РежимОбновления Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Если РежимОбновления И ТаблицаОтличий.Количество() > 0 Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру(СтрокаНоменклатурыИБ.Номенклатура, ТаблицаОтличий);					
		КонецЕсли;
		
		Если РеквизитыДляОбновления <> Неопределено Тогда
			Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
				СтрокаТаблицыОбновления = РеквизитыДляОбновления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбновления, ЭлементКоллекции);
				СтрокаТаблицыОбновления.Номенклатура = СтрокаНоменклатурыИБ.Номенклатура;
			КонецЦикла;
		КонецЕсли;	
		
		Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
			
			ТаблицаОтличий.Очистить();
			
			Для каждого ТекущийРеквизит Из СтрокаДанныхПоНоменклатуре.ДополнительныеРеквизиты Цикл
				
				Если НЕ ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
					НоваяСтрока.КоличествоНовыхЗначений = НоваяСтрока.КоличествоНовыхЗначений + 1;
					Продолжить;
				КонецЕсли;

				Если ТекущийРеквизит.ЗначениеИнформационнойБазы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
								
				Если ЗначениеЗаполнено(ДополнительныеРеквизитыНоменклатуры) Тогда
					
					СтрокаДополнительногоРеквизита = ДополнительныеРеквизитыНоменклатуры.Найти(ТекущийРеквизит.РеквизитИнформационнойБазы, "Свойство");
					
					Если СтрокаДополнительногоРеквизита <> Неопределено
						И ЗначенияСовпадают(СтрокаДополнительногоРеквизита, ТекущийРеквизит) Тогда
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				ЭтоСсылочноеЗначение = ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения);
				
				СтрокаИзменений = ТаблицаОтличий.Добавить();
				
				СтрокаИзменений.РеквизитОбъекта        = ТекущийРеквизит.РеквизитИнформационнойБазы;
				СтрокаИзменений.ПредставлениеРеквизита = ТекущийРеквизит.РеквизитИнформационнойБазы;
				СтрокаИзменений.НовоеЗначение          = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
				СтрокаИзменений.ПредставлениеЗначенияСервиса = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
				СтрокаИзменений.ЭтоДополнительныйРеквизит = Истина;
				
				Если СтрокаДополнительногоРеквизита = Неопределено Тогда
					НоваяСтрока.КоличествоНовыхЗначений = НоваяСтрока.КоличествоНовыхЗначений + 1;
				Иначе
					НоваяСтрока.КоличествоИзмененныхЗначений = НоваяСтрока.КоличествоИзмененныхЗначений + 1;	
					НоваяСтрока.КоличествоВыбранныхРеквизитов = НоваяСтрока.КоличествоВыбранныхРеквизитов + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если РежимОбновления И ТаблицаОтличий.Количество() > 0 Тогда
				РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры(СтрокаНоменклатурыИБ.Номенклатура, ТаблицаОтличий);
			КонецЕсли;
			
			Если РеквизитыДляОбновления <> Неопределено Тогда
				Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
					СтрокаТаблицыОбновления = РеквизитыДляОбновления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбновления, ЭлементКоллекции);
					СтрокаТаблицыОбновления.Номенклатура = СтрокаНоменклатурыИБ.Номенклатура;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьШтрихкоды(СтрокаНоменклатурыИБ.Номенклатура, СтрокаДанныхПоНоменклатуре);
		
		Если РежимОбновления Тогда
			РаботаСНоменклатурой.ИзменитьДатуОбновленияНоменклатуры(СтрокаНоменклатурыИБ.Номенклатура, СтрокаНоменклатурыИБ.ИдентификаторНоменклатуры);
			ЗафиксироватьТранзакцию();	
		КонецЕсли;
		
	Исключение
		Если РежимОбновления Тогда
			ОтменитьТранзакцию();	
		КонецЕсли;
	КонецПопытки;
	
	Если НаименованиеДоИзменения <> Неопределено Тогда
		СтрокаДанныхПоНоменклатуре.Наименование = НаименованиеДоИзменения;
	КонецЕсли;
	
	Если ДополнительныеРеквизитыДоИзменения <> Неопределено Тогда
		
		СтрокаДанныхПоНоменклатуре.ДополнительныеРеквизиты.Очистить();
		
		Для каждого ЭлементКоллекции Из ДополнительныеРеквизитыДоИзменения Цикл
			ЗаполнитьЗначенияСвойств(
				СтрокаДанныхПоНоменклатуре.ДополнительныеРеквизиты.Добавить(), ЭлементКоллекции);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьКатегорию(Идентификатор)
	
	ДанныеКатегории = РаботаСНоменклатурой.ДанныеКатегорийСервиса(Идентификатор);
	
	НовыеОбъекты = Новый Массив;
	
	РаботаСНоменклатурой.ЗагрузитьКатегорииПоОтдельности(ДанныеКатегории, 100, НовыеОбъекты);
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(НовыеОбъекты) Тогда
		Результат = НовыеОбъекты[0].ВидНоменклатуры;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияСовпадают(СтрокаДополнительногоРеквизита, ТекущийРеквизит) Экспорт
	
	ЭтоСсылочноеЗначение = ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения);
	
	Результат = Ложь;
	
	Если СтрокаДополнительногоРеквизита <> Неопределено Тогда
		
		Результат = (ЭтоСсылочноеЗначение И СтрокаДополнительногоРеквизита.Значение = ТекущийРеквизит.ЗначениеИнформационнойБазы)
			ИЛИ (Не ЭтоСсылочноеЗначение И СтрокаДополнительногоРеквизита.Значение = ТекущийРеквизит.Значение);
		
	Иначе
		
		Если (Не ЗначениеЗаполнено(ТекущийРеквизит.Значение) 
				И Не ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения)) 
					ИЛИ ТекущийРеквизит.Значение = Ложь Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ОбновитьШтрихкоды(Номенклатура, СтрокаДанныхПоНоменклатуре)
	
	Если Не ЗначениеЗаполнено(СтрокаДанныхПоНоменклатуре.Штрихкоды) Тогда
		Возврат;
	КонецЕсли;
		
	ШтрихкодыДляЗаписи = Новый ТаблицаЗначений;
	
	ШтрихкодыДляЗаписи.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	ШтрихкодыДляЗаписи.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	ШтрихкодыДляЗаписи.Колонки.Добавить("Штрихкод",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	Для каждого ТекущийШтрихкод Из СтрокаДанныхПоНоменклатуре.Штрихкоды Цикл
		НоваяСтрока = ШтрихкодыДляЗаписи.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Штрихкод = ТекущийШтрихкод;
	КонецЦикла;
	
	РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды(ШтрихкодыДляЗаписи);
	
КонецПроцедуры

Процедура РазобратьРеквизитыВидовНоменклатуры(ДанныеПоКатегории, СтрокаВидаНоменклатуры, РезультатАнализа, БлокируемыеРеквизиты, РежимОбновления = Ложь)
	
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	НоваяСтрока = РезультатАнализа.Добавить();
	
	НоваяСтрока.ВидНоменклатуры          = СтрокаВидаНоменклатуры.ВидНоменклатуры;
	НоваяСтрока.ОбновляетсяАвтоматически = СтрокаВидаНоменклатуры.ОбновляетсяАвтоматически;
	НоваяСтрока.ИдентификаторыКатегорий  = СтрокаВидаНоменклатуры.ИдентификаторыКатегорий;
	
	ПривязаноНесколькоКатегорий = СтрокаВидаНоменклатуры.ИдентификаторыКатегорий.Количество() > 1;
	
	Если ПривязаноНесколькоКатегорий Тогда
		НоваяСтрока.ИзмененоРеквизитов = 0;
	Иначе
		РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеПоКатегории, СтрокаВидаНоменклатуры, ТаблицаОтличий);
		НоваяСтрока.ИзмененоРеквизитов = ТаблицаОтличий.Количество();
		УдалитьЗаблокированныеРеквизиты(ТаблицаОтличий, БлокируемыеРеквизиты);	
	КонецЕсли;
	
	Если РежимОбновления Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Если РежимОбновления И ТаблицаОтличий.Количество() > 0 И Не ПривязаноНесколькоКатегорий Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры(СтрокаВидаНоменклатуры.ВидНоменклатуры, ТаблицаОтличий);		
		КонецЕсли;
		
		Если РаботаСНоменклатурой.ИспользуютсяДополнительныеРеквизиты() Тогда
			
			ДополнитьРеквизитыИЗначения(СтрокаВидаНоменклатуры.ВидНоменклатуры,
				ДанныеПоКатегории.ДополнительныеРеквизиты, Ложь, НоваяСтрока, РежимОбновления);
			
			ДополнитьРеквизитыИЗначения(СтрокаВидаНоменклатуры.ВидНоменклатуры,
				ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты, Истина, НоваяСтрока, РежимОбновления);

		КонецЕсли;
					
		Если РежимОбновления Тогда
			РаботаСНоменклатурой.ИзменитьДатуОбновленияВидаНоменклатуры(СтрокаВидаНоменклатуры.ВидНоменклатуры, СтрокаВидаНоменклатуры.ИдентификаторыКатегорий);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если РежимОбновления Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры


Процедура ДополнитьРеквизитыИЗначения(
		ВидНоменклатуры, 
		ДополнительныеРеквизиты, 
		ЯвляетсяХарактеристикой, 
		СтрокаДанных = Неопределено, 
		РежимОбновления = Ложь) Экспорт
	
	ДополнительныеРеквизитыКДобавлению = РаботаСНоменклатурой.ПустаяТаблицаСоответствияРеквизитов();
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			
			// Создание дополнительного реквизита и всех его значений.
			
			Если РежимОбновления Тогда
				РаботаСНоменклатурой.СоздатьДополнительныйРеквизит(ВидНоменклатуры, ДополнительныйРеквизит, ДополнительныеРеквизитыКДобавлению, ЯвляетсяХарактеристикой);				
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаДанных.НеСопоставленоРеквизитов = СтрокаДанных.НеСопоставленоРеквизитов + 1;
				Если ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
					СтрокаДанных.НеСопоставленоЗначений = СтрокаДанных.НеСопоставленоЗначений + ДополнительныйРеквизит.Значения.Количество();
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ДополнительныйРеквизит.ДатаИзменения > ДополнительныйРеквизит.ДатаОбновления И РежимОбновления Тогда
				РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьДополнительныйРеквизит(
					ВидНоменклатуры, 
					ДополнительныйРеквизит, 
					ДополнительныйРеквизит.РеквизитИнформационнойБазы);
			КонецЕсли;

			// Создание недостающих значений дополнительного реквизита.
			
			Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
				Продолжить;
			КонецЕсли;	
			
			МассивЗначений = Новый Массив;
			
			Для каждого ТекущееЗначения Из ДополнительныйРеквизит.Значения Цикл
				Если ЗначениеЗаполнено(ТекущееЗначения.ЗначениеИнформационнойБазы) Тогда
					Продолжить;
				КонецЕсли;	
				
				Если РежимОбновления Тогда
					
					// Создание значений.
					
					ЗначениеСсылка = Неопределено;
					РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьЗначениеРеквизита(
						ДополнительныйРеквизит.РеквизитИнформационнойБазы, ТекущееЗначения, ЗначениеСсылка);
					
					МассивЗначений.Добавить(Новый Структура("ЗначениеРеквизитаВидаНоменклатуры, ИдентификаторЗначенияРеквизитаКатегории, ЗначениеРеквизитаКатегории",
						ЗначениеСсылка, ТекущееЗначения.Идентификатор, ТекущееЗначения.Наименование));	
				КонецЕсли;
				
				Если СтрокаДанных <> Неопределено Тогда
					СтрокаДанных.НеСопоставленоЗначений = СтрокаДанных.НеСопоставленоЗначений + 1;
				КонецЕсли;
			КонецЦикла;			
			
			Если РежимОбновления И МассивЗначений.Количество() > 0 Тогда
				РаботаСНоменклатурой.ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатуры, 
					ДополнительныйРеквизит.РеквизитИнформационнойБазы, МассивЗначений, Истина);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимОбновления И ДополнительныеРеквизитыКДобавлению.Количество() > 0 Тогда
		РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, 
			ДополнительныеРеквизитыКДобавлению.ВыгрузитьКолонку("РеквизитОбъекта"), ЯвляетсяХарактеристикой);
		
		РаботаСНоменклатурой.ЗаписатьСоответствиеРеквизитов(ВидНоменклатуры, ДополнительныеРеквизитыКДобавлению, Истина);
	КонецЕсли;	

КонецПроцедуры

// Получение номенклатуры информационной базы по идентификаторам.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - массив идентификаторов.
// 
// Возвращаемое значение:
//  Массив - массив ссылок.
//
Функция НоменклатураПоИдентификаторам(ИдентификаторыНоменклатуры)
	
	Возврат РаботаСНоменклатурой.НоменклатураПоИдентификаторам(ИдентификаторыНоменклатуры).ВыгрузитьКолонку("Номенклатура");
				
КонецФункции

Процедура УдалитьЗаблокированныеРеквизиты(ТаблицаОтличий, БлокируемыеРеквизиты)
		
	Если БлокируемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = 0;
	
	Пока Счетчик < ТаблицаОтличий.Количество() Цикл
		
		Если БлокируемыеРеквизиты.Найти(ТаблицаОтличий[Счетчик].РеквизитОбъекта) <> Неопределено Тогда
			ТаблицаОтличий.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоХарактеристикам(ДанныеПоНоменклатурыИБ, ДанныеПоНоменклатуреСервиса)
	
	ДанныеПоНоменклатуреСервиса.Колонки.Добавить("ДанныеХарактеристик", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ХарактеристикиПоНоменклатуре = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатурыИБ Цикл
		Если ЭлементКоллекции.РежимЗагрузкиХарактеристик 
			= Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру Тогда
			
			ИдентификаторНоменклатуры = ЭлементКоллекции.ИдентификаторНоменклатуры;
			
			Если ХарактеристикиПоНоменклатуре[ИдентификаторНоменклатуры] = Неопределено Тогда
				ХарактеристикиПоНоменклатуре.Вставить(ИдентификаторНоменклатуры, Новый Массив);
			КонецЕсли;
			
			ХарактеристикиПоНоменклатуре[ИдентификаторНоменклатуры].
				Добавить(ЭлементКоллекции.ИдентификаторХарактеристики);
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуреСервиса Цикл
		
		ИдентификаторНоменклатуры = ЭлементКоллекции.Идентификатор;
		
		Если ХарактеристикиПоНоменклатуре[ИдентификаторНоменклатуры] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыХарактеристик = Новый Массив;
		
		Для каждого Характеристика Из ХарактеристикиПоНоменклатуре[ИдентификаторНоменклатуры] Цикл
			ИдентификаторыХарактеристик.Добавить(Характеристика);
		КонецЦикла;
		
		ПараметрыЗапросаХарактеристик = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
		
		ТаблицаТипов = ЭлементКоллекции.Категория.Характеристики.ДополнительныеРеквизиты;
		
		ПараметрыЗапросаХарактеристик.ИдентификаторыХарактеристик = ИдентификаторыХарактеристик;
		ПараметрыЗапросаХарактеристик.НаборПолей                  = "Максимальный";
		ПараметрыЗапросаХарактеристик.ТаблицаТипов                = ТаблицаТипов;
		
		ДанныеХарактеристик = РаботаСНоменклатурой.ДанныеХарактеристикСервиса(ПараметрыЗапросаХарактеристик, Ложь);
		
		ЭлементКоллекции.ДанныеХарактеристик = ДанныеХарактеристик;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет удаление временного файла, ошибки при удалении игнорируются.
//
// Параметры:
//  Путь - Строка - путь к удаляемому файлу.
//
Процедура УдалитьВременныйФайл(Знач Путь)
	
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Удаление временного файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область АутентификацияПоТикетуСервиса1СНоменклатура

Функция ПолучитьТикетАутентификацииВСервисе(Соединение, ПараметрыСоединения, ТикетАутентификацииИТС, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ТикетАутентификацииВСервисе = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Пользователи.ТекущийПользователь(), "НоменклатураТикетАутентификации");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверка ключа в кэше и его срока действия.
	Если ТикетАутентификацииВСервисе = Неопределено 
		ИЛИ ТекущаяУниверсальнаяДатаВМиллисекундах() > ТикетАутентификацииВСервисе.СрокЖизни Тогда
		
		ПараметрыЗапросаТикета = ОписаниеПараметровКомандыСервиса();
		ПараметрыЗапросаТикета.Наименование = НСтр("ru = 'Получение тикета'");
		ПараметрыЗапросаТикета.Адрес = "its-auth/token";
		ПараметрыЗапросаТикета.Вставить("Логин", "AUTH_TOKEN");
		ПараметрыЗапросаТикета.Вставить("Пароль", ТикетАутентификацииИТС.Тикет);
		
		ТикетАутентификацииВСервисе = ЗапроситьНовыйТикетАутентификацииВСервисе(Соединение, 
			ПараметрыСоединения, ПараметрыЗапросаТикета, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТикетАутентификацииВСервисе) Тогда
		Возврат ТикетАутентификацииВСервисе.Ключ;
	КонецЕсли;
	
КонецФункции

Функция ЗапроситьНовыйТикетАутентификацииВСервисе(Соединение, ПараметрыСоединения, ТикетАутентификацииИТС, Отказ)
	
	ТикетБИП = Новый Структура("authToken", ТикетАутентификацииИТС.Пароль);
	Попытка
		
		Запрос = Новый HTTPЗапрос(ТикетАутентификацииИТС.Адрес);
		Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		Запрос.УстановитьТелоИзСтроки(ЗначениеВФорматJSON(ТикетБИП));
		
		HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", Запрос);
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервисом 1С:Номенклатура.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыОшибки = Новый Структура("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
		
		Возврат ОбработатьОшибкуСервиса(ТикетАутентификацииИТС, 0, ПараметрыОшибки, Отказ);

	КонецПопытки;
	
	Результат = ЗначениеИзСтрокиJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Отказ = Истина;

		ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервисом 1С:Номенклатура.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыОшибки = Новый Структура("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
		
		Возврат ОбработатьОшибкуСервиса(ТикетАутентификацииИТС, 0, ПараметрыОшибки, Отказ);
		
	КонецЕсли;
	
	ТикетАутентификацииВСервисе = Новый Структура;
	ТикетАутентификацииВСервисе.Вставить("Ключ", Результат.access_token);
	ТикетАутентификацииВСервисе.Вставить("СрокЖизни", ТекущаяУниверсальнаяДатаВМиллисекундах() + Результат.expires * 1000);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(),
		ТикетАутентификацииВСервисе, "НоменклатураТикетАутентификации");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТикетАутентификацииВСервисе;
	
КонецФункции

Процедура УдалитьТикетАутентификацииВСервисе()
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "НоменклатураТикетАутентификации");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемКатегорий

Процедура ЗаполнитьКэшДаннымиСервиса(Знач ДанныеСервиса, КэшКатегорий, ДополнительныеПараметры, МассивИдентификаторовРодителей) Экспорт
	
	КорневыеКатегории = Неопределено;
	ДанныеСервиса.Свойство("КорневыеКатегории", КорневыеКатегории);
	
	Если КорневыеКатегории <> Неопределено Тогда
		ЗаполнитьКэшКатегорийДаннымиСервиса(КорневыеКатегории, КэшКатегорий);
	КонецЕсли;
	
	ТаблицаКатегорий = Неопределено;
	ДанныеСервиса.Свойство("Категории", ТаблицаКатегорий);
	
	Если ТаблицаКатегорий <> Неопределено Тогда
		ЗаполнитьКэшКатегорийДаннымиСервиса(ТаблицаКатегорий, КэшКатегорий);
	КонецЕсли;
	
	ДанныеСервиса.Свойство("ТаблицаКатегорий", ТаблицаКатегорий);
	ИдентификаторыКатегорийУзлов = Неопределено;
	ДанныеСервиса.Свойство("ИдентификаторыКатегорийУзлов", ИдентификаторыКатегорийУзлов);

	Если ТаблицаКатегорий <> Неопределено Тогда
		Если ИдентификаторыКатегорийУзлов <> Неопределено Тогда
			ЗаполнитьКэшКатегорийНаПутиКЭлементу(КэшКатегорий, ТаблицаКатегорий,
				ИдентификаторыКатегорийУзлов, МассивИдентификаторовРодителей);
		Иначе
			ЗаполнитьКэшКатегорийДаннымиСервиса(ТаблицаКатегорий, КэшКатегорий);
		КонецЕсли;
	КонецЕсли;

	ДополнительныеРеквизиты = Неопределено;
	ДанныеСервиса.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	ИдентификаторКатегории  = Неопределено;
	ДополнительныеПараметры.Свойство("ИдентификаторКатегории", ИдентификаторКатегории);
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторКатегории") Тогда
		Если Не ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
			ДанныеСервиса.Свойство("ИдентификаторНачальнойКатегории", ИдентификаторКатегории);
			ДополнительныеПараметры.ИдентификаторКатегории = ИдентификаторКатегории;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеРеквизиты <> Неопределено И ИдентификаторКатегории <> Неопределено Тогда
		ЗаполнитьКэшДополнительнымиРеквизитами(ДополнительныеРеквизиты, КэшКатегорий, ИдентификаторКатегории);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеСервисаПоискаРубрикатора(Знач ДанныеСервиса, КэшКатегорий, ТаблицаПоискаКатегорий)
	
	ТаблицаКатегорий = Неопределено;
	ДанныеСервиса.Свойство("Категории", ТаблицаКатегорий);
	
	Если ТаблицаКатегорий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтсортироватьТаблицуКатегорийССервиса(ТаблицаКатегорий);
	
	Для Каждого СтрокаДанных Из ТаблицаКатегорий Цикл
				
		СтруктураДанныхСервиса = ЗаполнитьСтруктуруКэшаКатегорий(ТаблицаКатегорий, СтрокаДанных, КэшКатегорий, 0, Истина);
		Идентификатор = "_" + СтрокаДанных.Идентификатор;
		
		Если СтрокаДанных.ЛистоваяКатегория Тогда
			СтрокаКэшаКатегорий = Неопределено;
			Если КэшКатегорий.Свойство(Идентификатор, СтрокаКэшаКатегорий) Тогда
				СтруктураДанныхСервиса.Вставить("СвойстваКэшированы", СтрокаКэшаКатегорий.СвойстваКэшированы);
				СтруктураДанныхСервиса.Вставить("СписокКэшированныхСвойств", СтрокаКэшаКатегорий.СписокКэшированныхСвойств);
			Иначе
				КэшКатегорий.Вставить(Идентификатор, СтруктураДанныхСервиса);
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаПоискаКатегорий.Вставить(Идентификатор, СтруктураДанныхСервиса);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКэшКатегорийНаПутиКЭлементу(КэшКатегорий, ТаблицаКатегорий,
				ИдентификаторыКатегорийУзлов, МассивИдентификаторовРодителей)
				
	ОтсортироватьТаблицуКатегорийССервиса(ТаблицаКатегорий);
	ТаблицаКатегорий.Индексы.Добавить("ИдентификаторРодителя");
	
	Для Каждого ТекущийУзел Из ИдентификаторыКатегорийУзлов Цикл
		МаксимальныйИндекс = ТекущийУзел.Значение.ВГраница();
		
		Для Счетчик = 0 По МаксимальныйИндекс Цикл
			ТекущийИдентификатор = ТекущийУзел.Значение[МаксимальныйИндекс - Счетчик];
			
			ОтборПоРодителю = Новый Структура("ИдентификаторРодителя", ТекущийИдентификатор);
			ДочерниеКатегории = ТаблицаКатегорий.НайтиСтроки(ОтборПоРодителю);
			ИндексСтрокиКатегории = 0;
			Для Каждого ЭлементКатегории Из ДочерниеКатегории Цикл
				ДобавитьОбновитьСтрокуКэша = Ложь;
				СтрокаИдентификатораКэша = Неопределено;
				Если КэшКатегорий.Свойство("_" + ЭлементКатегории.Идентификатор, СтрокаИдентификатораКэша) Тогда
					Если ЭлементКатегории.ДатаИзменения > СтрокаИдентификатораКэша.ДатаИзменения
						ИЛИ СтрокаИдентификатораКэша.ИндексСтрокиКатегории <> ИндексСтрокиКатегории Тогда
						ДобавитьОбновитьСтрокуКэша = Истина;
					КонецЕсли;
				Иначе
					ДобавитьОбновитьСтрокуКэша = Истина;
				КонецЕсли;
				
				Если ДобавитьОбновитьСтрокуКэша Тогда
					СтруктураДанныхСервиса = ЗаполнитьСтруктуруКэшаКатегорий(ТаблицаКатегорий, ЭлементКатегории, КэшКатегорий, ИндексСтрокиКатегории);
					Если СтрокаИдентификатораКэша <> Неопределено Тогда
						СтруктураДанныхСервиса.ДочерниеКэшированы      = СтрокаИдентификатораКэша.ДочерниеКэшированы;
						Если СтрокаИдентификатораКэша.Свойство("ДополнительныеРеквизиты") Тогда
							СтруктураДанныхСервиса.Вставить("ДополнительныеРеквизиты", СтрокаИдентификатораКэша.ДополнительныеРеквизиты);
						КонецЕсли;
						Если СтруктураДанныхСервиса.ЛистоваяКатегория Тогда
							СтруктураДанныхСервиса.СвойстваКэшированы        = СтрокаИдентификатораКэша.СвойстваКэшированы;
							СтруктураДанныхСервиса.СписокКэшированныхСвойств = СтрокаИдентификатораКэша.СписокКэшированныхСвойств;
						КонецЕсли;
					КонецЕсли;
					КэшКатегорий.Вставить("_" + ЭлементКатегории.Идентификатор, СтруктураДанныхСервиса);
				КонецЕсли;
				ИндексСтрокиКатегории = ИндексСтрокиКатегории + 1;
			КонецЦикла;
			
			СтрокаИдентификатораРодителя = Неопределено;
			Если КэшКатегорий.Свойство("_" + ТекущийИдентификатор, СтрокаИдентификатораРодителя) Тогда
				СтрокаИдентификатораРодителя.ДочерниеКэшированы = Истина;
				МассивИдентификаторовРодителей.Добавить(ТекущийИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКэшКатегорийДаннымиСервиса(ТаблицаКатегорий, КэшКатегорий, ОбновитьДанные = Ложь)
	
	Если Не РаботаСНоменклатуройСлужебныйКлиентСервер.ЕстьКорневыеКатегорииВКэше(КэшКатегорий) 
		И ЗначениеЗаполнено(ТаблицаКатегорий) Тогда
		
		СтруктураКорневогоРаздела = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеСлужебнойКорневойКатегории();
		СтруктураКорневогоРаздела.Вставить("КоличествоПодчиненных",         ТаблицаКатегорий.Количество());
		СтруктураКорневогоРаздела.Вставить("ДатаИзменения",                 ТекущаяДатаСеанса());
		
		КэшКатегорий.Вставить("_", СтруктураКорневогоРаздела);
		
	КонецЕсли;
	
	ОтсортироватьТаблицуКатегорийССервиса(ТаблицаКатегорий);
	
	ИндексСтрокиКатегории = 0;
	МассивИдентификаторовРодителяКэша = Новый Массив();
	Для Каждого СтрокаДанных Из ТаблицаКатегорий Цикл
		
		Идентификатор = "_" + СтрокаДанных.Идентификатор;
		
		ДобавитьОбновитьСтрокуКэша = Ложь;
		СтрокаИдентификатораКэша   = Неопределено;
		
		Если КэшКатегорий.Свойство(Идентификатор, СтрокаИдентификатораКэша) Тогда
			Если СтрокаДанных.ДатаИзменения > СтрокаИдентификатораКэша.ДатаИзменения
				ИЛИ СтрокаИдентификатораКэша.ИндексСтрокиКатегории <> ИндексСтрокиКатегории Тогда
				ДобавитьОбновитьСтрокуКэша = Истина;
			КонецЕсли;
		Иначе
			ДобавитьОбновитьСтрокуКэша = Истина;
		КонецЕсли;
		
		Если ДобавитьОбновитьСтрокуКэша ИЛИ ОбновитьДанные Тогда
			СтруктураДанныхСервиса = ЗаполнитьСтруктуруКэшаКатегорий(ТаблицаКатегорий, СтрокаДанных, КэшКатегорий, ИндексСтрокиКатегории);
			Если СтрокаИдентификатораКэша <> Неопределено Тогда
				СтруктураДанныхСервиса.ДочерниеКэшированы = СтрокаИдентификатораКэша.ДочерниеКэшированы;
				Если СтрокаИдентификатораКэша.Свойство("ДополнительныеРеквизиты") Тогда
					СтруктураДанныхСервиса.Вставить("ДополнительныеРеквизиты", СтрокаИдентификатораКэша.ДополнительныеРеквизиты);
				КонецЕсли;
				Если СтруктураДанныхСервиса.ЛистоваяКатегория Тогда
					СтруктураДанныхСервиса.СвойстваКэшированы        = СтрокаИдентификатораКэша.СвойстваКэшированы;
					СтруктураДанныхСервиса.СписокКэшированныхСвойств = СтрокаИдентификатораКэша.СписокКэшированныхСвойств;
				КонецЕсли;
			КонецЕсли;
			КэшКатегорий.Вставить(Идентификатор, СтруктураДанныхСервиса);
		КонецЕсли;
		ИндексСтрокиКатегории = ИндексСтрокиКатегории + 1;
		
		ИдентификаторРодителя = "_" + СтрокаДанных.ИдентификаторРодителя;
		
		ИндексМассива = МассивИдентификаторовРодителяКэша.Найти(ИдентификаторРодителя);
		Если ИндексМассива = Неопределено Тогда
			МассивИдентификаторовРодителяКэша.Добавить(ИдентификаторРодителя);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьУРодителяКэшаПризнакКэшированияДочерних(МассивИдентификаторовРодителяКэша, КэшКатегорий);
				
КонецПроцедуры

Процедура ЗаполнитьУРодителяКэшаПризнакКэшированияДочерних(МассивИдентификаторовРодителяКэша, КэшКатегорий)
	
	Для Каждого ЭлементМассива Из МассивИдентификаторовРодителяКэша Цикл
		СтрокаИдентификатораРодителя = Неопределено;
		Если КэшКатегорий.Свойство(ЭлементМассива, СтрокаИдентификатораРодителя) Тогда
			СтрокаИдентификатораРодителя.ДочерниеКэшированы = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруКэшаКатегорий(ДанныеСервиса, СтрокаДанных, КэшКатегорий, ИндексСтрокиКатегории, ЭтоПоискКатегорий = Ложь)
	
	СтруктураДанныхСервиса = Новый Структура;
	СтруктураДанныхСервиса.Вставить("Идентификатор",                 СтрокаДанных.Идентификатор);
	СтруктураДанныхСервиса.Вставить("ИдентификаторРодителя",         СтрокаДанных.ИдентификаторРодителя);
	СтруктураДанныхСервиса.Вставить("Наименование",                  СтрокаДанных.Наименование);
	СтруктураДанныхСервиса.Вставить("КоличествоПодчиненных",         СтрокаДанных.КоличествоПодчиненных);
	СтруктураДанныхСервиса.Вставить("ДатаИзменения",                 СтрокаДанных.ДатаИзменения);
	СтруктураДанныхСервиса.Вставить("ДочерниеКэшированы",            Ложь);
	СтруктураДанныхСервиса.Вставить("Ранг",                          СтрокаДанных.Ранг);
	СтруктураДанныхСервиса.Вставить("ЛистоваяКатегория",             СтрокаДанных.ЛистоваяКатегория);
	СтруктураДанныхСервиса.Вставить("ИндексСтрокиКатегории",         ИндексСтрокиКатегории);
	
	Если СтрокаДанных.ЛистоваяКатегория Тогда
		СтруктураДанныхСервиса.Вставить("СвойстваКэшированы",        Ложь);
		СтруктураДанныхСервиса.Вставить("СписокКэшированныхСвойств", Новый СписокЗначений);
	КонецЕсли;
	
	Если Не ЭтоПоискКатегорий Тогда
		ЗаполнитьКэшДополнительнымиРеквизитами(СтрокаДанных.ДополнительныеРеквизиты, КэшКатегорий, СтрокаДанных.Идентификатор);
	КонецЕсли;
	
	АдресКэшаДанных = ПоместитьВоВременноеХранилище(ДанныеСервиса, Новый УникальныйИдентификатор);
	СтруктураДанныхСервиса.Вставить("АдресКэшаДанныхСервиса",       АдресКэшаДанных);
	
	Возврат СтруктураДанныхСервиса;
	
КонецФункции

Функция ЗаполнитьСтруктуруДопРеквизитов(СтрокаДанных)
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("Идентификатор",                СтрокаДанных.Идентификатор);
	СтруктураДопРеквизитов.Вставить("Наименование",                 СтрокаДанных.Наименование);
	СтруктураДопРеквизитов.Вставить("Тип",                          СтрокаДанных.Тип);
	СтруктураДопРеквизитов.Вставить("ДатаИзменения",                СтрокаДанных.ДатаИзменения);
	СтруктураДопРеквизитов.Вставить("ИдентификаторыЗначений",       СтрокаДанных.ИдентификаторыЗначений);
	СтруктураДопРеквизитов.Вставить("Обязательный",                 СтрокаДанных.Обязательный);
	СтруктураДопРеквизитов.Вставить("МинимальноеЗначение",          СтрокаДанных.МинимальноеЗначение);
	СтруктураДопРеквизитов.Вставить("МаксимальноеЗначение",         СтрокаДанных.МаксимальноеЗначение);
	СтруктураДопРеквизитов.Вставить("ЕдиницаИзмерения",             СтрокаДанных.ЕдиницаИзмерения);
	СтруктураДопРеквизитов.Вставить("ЭтоРеквизитХарактеристики",    СтрокаДанных.ЭтоРеквизитХарактеристики);
	СтруктураДопРеквизитов.Вставить("Ранг",                         СтрокаДанных.Ранг);

	Возврат СтруктураДопРеквизитов;

КонецФункции

Процедура ОтсортироватьТаблицуКатегорийССервиса(ТаблицаКатегорий)
	
	ЛистовыеКатегории = Новый Массив;
	
	Если ТаблицаКатегорий.Колонки.Найти("ЛистоваяКатегория") = Неопределено Тогда
		ТаблицаКатегорий.Колонки.Добавить("ЛистоваяКатегория", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ЛистовыеСтроки = ТаблицаКатегорий.НайтиСтроки(Новый Структура("КоличествоПодчиненных", 0));
	
	Для Каждого ЭлементКоллекции Из ЛистовыеСтроки Цикл
		НайденнаяСтрока = ТаблицаКатегорий.Найти(ЭлементКоллекции.Идентификатор, "Идентификатор");
		НайденнаяСтрока.ЛистоваяКатегория = Истина;
	КонецЦикла;
	
	ТаблицаКатегорий.Сортировать("ЛистоваяКатегория, Ранг, Наименование");

КонецПроцедуры

Процедура ДополнитьКэшПутейДаннымиСервиса(КэшПутей, ОтветСервиса)
	
	Если ТипЗнч(ОтветСервиса) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийПутьСервиса Из ОтветСервиса Цикл
		Если ТипЗнч(ТекущийПутьСервиса) <> Тип("Структура") 
			ИЛИ НЕ ТекущийПутьСервиса.Свойство("categories") Тогда
			Продолжить;
		КонецЕсли;
		КатегорииСервиса = ТекущийПутьСервиса.categories;
		Если ТипЗнч(КатегорииСервиса) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		ПолныйПуть         = Новый Массив; 
		КоличествоУровней  = КатегорииСервиса.Количество();
		Для ОбратныйИндекс = 1 По КоличествоУровней Цикл
			ТекущийУровень = КатегорииСервиса[КоличествоУровней - ОбратныйИндекс];
			Если ТипЗнч(ТекущийУровень) <> Тип("Структура")
				ИЛИ НЕ ТекущийУровень.Свойство("id") 
				ИЛИ НЕ ТекущийУровень.Свойство("name") Тогда
				Продолжить;
			КонецЕсли;
			Если КэшПутей.Получить(ТекущийУровень.id) = Неопределено Тогда
				ТекущийПуть = ОбщегоНазначения.СкопироватьРекурсивно(ПолныйПуть);
				ДобавитьКатегориюВКэшПутей(КэшПутей, ТекущийУровень, ТекущийПуть);
			КонецЕсли;
			ПолныйПуть.Добавить(ТекущийУровень.id);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиДобавитьКатегорииВКэшПутей(КэшПутей, КатегорииСервиса, НенайденныеУзлы = Неопределено)
	
	Если ТипЗнч(КатегорииСервиса) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийУровень Из КатегорииСервиса Цикл
		Если ТипЗнч(ТекущийУровень) <> Тип("Структура")
			ИЛИ НЕ ТекущийУровень.Свойство("id") 
			ИЛИ НЕ ТекущийУровень.Свойство("name") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийПуть = Новый Массив;
		Если ТекущийУровень.Свойство("parentId") Тогда
			ДанныеРодителя = КэшПутей.Получить(ТекущийУровень.parentId);
			Если ДанныеРодителя = Неопределено И ТипЗнч(НенайденныеУзлы) = Тип("Массив") Тогда
				НенайденныеУзлы.Добавить(ТекущийУровень.id);
				Продолжить;
			КонецЕсли;
			
			ДанныеРодителя.Вставить("ДочерниеПолучены", Истина);
			ТекущийПуть = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРодителя.ТекущийПуть);
			ТекущийПуть.Добавить(ТекущийУровень.parentId);
		КонецЕсли;
		
		Если КэшПутей.Получить(ТекущийУровень.id) = Неопределено Тогда
			ДобавитьКатегориюВКэшПутей(КэшПутей, ТекущийУровень, ТекущийПуть);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКатегориюВКэшПутей(КэшПутей, ТекущийУровень, ТекущийПуть)
	
	ДанныеУзла = Новый Структура("Наименование,КоличествоПодчиненных", ТекущийУровень.name, ТекущийУровень.childrenCount);
	Если НЕ ЗначениеЗаполнено(ДанныеУзла.КоличествоПодчиненных) Тогда
		ДанныеУзла.Вставить("ЛистоваяКатегория", Истина);
	КонецЕсли;
	Если ТекущийУровень.Свойство("rank") Тогда
		ДанныеУзла.Вставить("Ранг", ТекущийУровень.rank);
	КонецЕсли;
	
	КэшПутей.Вставить(ТекущийУровень.id, Новый Структура("ДанныеУзла,ТекущийПуть", ДанныеУзла, ТекущийПуть));
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыСКатегориямиСервиса

// Возвращает сопоставленные идентификаторы категорий сервиса 1С:Бизнес-сеть по переданным номенклатурам.
//
// Параметры:
//  Номенклатура - Массив из ОпределяемыйТип.НоменклатураБЭД - номенклатура, для которой требуется
//                 получить идентификаторы сервиса 1С:Бизнес-сеть
// 
// Возвращаемое значение:
//  Массив - содержит строки идентификаторов категорий сервиса.
//
Функция ПолучитьИдентификаторыКатегорийНоменклатуры(Номенклатура) Экспорт
	
	НоменклатураСервиса = Новый Массив;
	ИдентификаторыКатегорий = Новый Массив;
	ИдентификаторыНоменклатурыСервиса = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если РаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы() Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&Номенклатура)
		|	И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено)";
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Если ПустаяСтрока(ВыборкаЗапроса.ИдентификаторНоменклатурыСервиса) Тогда
				Продолжить;
			КонецЕсли;
			
			НоменклатураСервиса.Добавить(ВыборкаЗапроса.Номенклатура);
			ИдентификаторыНоменклатурыСервиса.Добавить(ВыборкаЗапроса.ИдентификаторНоменклатурыСервиса);
		КонецЦикла;
	
	КонецЕсли;
	
	Если НЕ ИдентификаторыНоменклатурыСервиса.Количество() = 0 Тогда
	
		Отказ = Ложь;
		ДанныеНоменклатурыСервиса = 
			РаботаСНоменклатурой.ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатурыСервиса, Истина, Отказ, "");
		
		Если НЕ Отказ Тогда
			Для каждого СтрокаНоменклатураСервиса Из ДанныеНоменклатурыСервиса Цикл
				ИдентификаторыКатегорий.Добавить(СтрокаНоменклатураСервиса.ИдентификаторКатегории);
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
		
	Запрос.УстановитьПараметр("НоменклатураСервиса", НоменклатураСервиса);
	Запрос.УстановитьПараметр("КатегорияПрочее", РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	Запрос.УстановитьПараметр("ПустоеЗначениеХарактеристики", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.ПривестиЗначение(Неопределено));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	&ПустоеЗначениеХарактеристики КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|	И НЕ Номенклатура.Ссылка В (&НоменклатураСервиса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	РегистрСведенийТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	NULL КАК ИдентификаторКатегории
	|ИЗ
	|	ТаблицаНоменклатуры КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки";
	
	ДополнитьЗапросИдентификаторКатегории(Запрос.Текст, ТекстЗапросаСопоставлениеБизнесСеть());
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ИдентификаторыКатегорий.Добавить(ВыборкаЗапроса.ИдентификаторКатегории);
	КонецЦикла;
	
	Если НЕ Номенклатура.Количество() = 0 И ИдентификаторыКатегорий.Количество() = 0 Тогда
		ИдентификаторыКатегорий.Добавить(РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	КонецЕсли;
	
	Возврат ИдентификаторыКатегорий;
	
КонецФункции

Процедура ЗаписатьЗначениеСопоставления(Знач ОбъектыСопоставления, ВыбраннаяКатегория, Отказ) Экспорт
	
	ЗначенияЗаполнения = Новый Структура("ИдентификаторКатегории, ПредставлениеКатегории");
	ЗначенияЗаполнения.ИдентификаторКатегории = ВыбраннаяКатегория.Идентификатор;
	ЗначенияЗаполнения.ПредставлениеКатегории = ВыбраннаяКатегория.Наименование;
	
	ИдентификаторыКатегорий = Новый СписокЗначений;
	ИдентификаторыКатегорий.Добавить(ВыбраннаяКатегория.Идентификатор, ВыбраннаяКатегория.Наименование);
	
	ОбъектыПоТипам = ОбъектыСопоставленияПоТипам(ОбъектыСопоставления);
	
	Для каждого Номенклатура Из ОбъектыПоТипам.Номенклатура Цикл
		РаботаСНоменклатурой.ИзменитьОсновнуюЗаписьСоответствияНоменклатуры(Номенклатура, ЗначенияЗаполнения, Истина);
	КонецЦикла;
	
	Для каждого ВидНоменклатуры Из ОбъектыПоТипам.ВидыНоменклатуры Цикл
		ПараметрыЗаписи = РаботаСНоменклатурой.ПараметрыЗаписиСоответствияВидаНоменклатуры();
		ПараметрыЗаписи.ВидНоменклатуры          = ВидНоменклатуры;
		ПараметрыЗаписи.ОбновляетсяАвтоматически = Ложь;
		ПараметрыЗаписи.Замещать                 = Истина;
		ПараметрыЗаписи.ИдентификаторыКатегорий  = ИдентификаторыКатегорий;
		
		РаботаСНоменклатурой.ЗаписатьСоответствиеВидаНоменклатуры(ПараметрыЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Очистка сопоставлений категорий.
//
// Параметры:
//  ОбъектыСопоставления - Массив из ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, 
//           ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - ссылки на сопоставленные 
//           объекты, для которых требуется очистить сопоставления.
//  Отказ                - Булево - Истина, если удалось записать сопоставление, иначе Ложь.
//
Процедура ОчиститьСопоставлениеКатегорий(Знач ОбъектыСопоставления, Отказ) Экспорт
	
	ОбъектыПоТипам = ОбъектыСопоставленияПоТипам(ОбъектыСопоставления);
	
	Для каждого Номенклатура Из ОбъектыПоТипам.Номенклатура Цикл
		ЗначенияЗаполнения = Новый Структура("ИдентификаторКатегории, ПредставлениеКатегории", "", "");
		РаботаСНоменклатурой.ИзменитьОсновнуюЗаписьСоответствияНоменклатуры(Номенклатура, ЗначенияЗаполнения);
	КонецЦикла;
	
	Для каждого ВидНоменклатуры Из ОбъектыПоТипам.ВидыНоменклатуры Цикл
		РаботаСНоменклатурой.ОчиститьСоответствияПоВидуНоменклатуры(ВидНоменклатуры, Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает разложенные по типам данных объекты сопоставления
//
// Параметры:
//  ОбъектыСопоставления - Массив из Произвольный.
//  (ожидаемые типы: ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой).
// 
// Возвращаемое значение:
//  Структура - содержит 
//   * ВидыНоменклатуры - Массив из ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой
//   * Номенклатура - Массив из ОпределяемыйТип.НоменклатураРаботаСНоменклатурой
//
Функция ОбъектыСопоставленияПоТипам(ОбъектыСопоставления) 

	Номенклатура     = Новый Массив;
	ВидыНоменклатуры = Новый Массив;
	Для каждого СсылкаНаОбъект Из ОбъектыСопоставления Цикл
		ТипСсылки = ТипЗнч(СсылкаНаОбъект);
		Если ЭтоВидНоменклатуры(ТипСсылки) Тогда
			ВидыНоменклатуры.Добавить(СсылкаНаОбъект);
		ИначеЕсли ЭтоНоменклатура(ТипСсылки) Тогда
			Номенклатура.Добавить(СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Номенклатура, ВидыНоменклатуры", Номенклатура, ВидыНоменклатуры);

КонецФункции

Функция РасчетСоответствийЗначенийРеквизитов(Знач ОбъектСопоставления, Знач РеквизитыСсылочногоТипа) Экспорт 
	
	Если ТипЗнч(РеквизитыСсылочногоТипа) <> Тип("Массив") 
		И ТипЗнч(РеквизитыСсылочногоТипа) <> Тип("СписокЗначений") Тогда
		РеквизитыСсылочногоТипа = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыСсылочногоТипа);
	КонецЕсли;
	
	ТипВидНоменклатуры = Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип;
	Если НЕ ТипВидНоменклатуры.СодержитТип(ТипЗнч(ОбъектСопоставления)) Тогда
		ОбъектСопоставления = ТипВидНоменклатуры.ПривестиЗначение();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаЗначенийДополнительныхРеквизитов(Запрос, РеквизитыСсылочногоТипа);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта,
	|	0 КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ОбъектСопоставления
	|	И СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта В(&РеквизитыСсылочногоТипа)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДополнительныеРеквизиты.Значение),
	|	0
	|ИЗ
	|	ПодЗапросДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеРеквизиты.РеквизитОбъекта";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодЗапросДополнительныеРеквизиты", СтрШаблон("(%1)", Запрос.Текст));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСопоставления", ОбъектСопоставления);
	Запрос.УстановитьПараметр("РеквизитыСсылочногоТипа", РеквизитыСсылочногоТипа);
	
	РасчетСоответствий = Запрос.Выполнить().Выгрузить();
	РасчетСоответствий.Индексы.Добавить("РеквизитОбъекта");// Индекс.
	РасчетСоответствий.Свернуть("РеквизитОбъекта", "КоличествоЗначенийРеквизита, КоличествоСопоставленныхРеквизитов");
	
	Возврат РасчетСоответствий;
	
КонецФункции

#КонецОбласти 

#Область ОбщегоНазначения

Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт 
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = ИСТИНА;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

#КонецОбласти

#Область ДанныеСопоставленияНоменклатуры

Функция ДанныеНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = РаботаСНоменклатуройСлужебныйПовтИсп.ТекстЗапросаДанныеНоменклатуры();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура"    , Неопределено);
	ДанныеНоменклатуры.Вставить("Родитель"        , Неопределено);
	ДанныеНоменклатуры.Вставить("ВидНоменклатуры" , Неопределено);
	
	Если ВыборкаДанных.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ВыборкаДанных);
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

#КонецОбласти

// ЭлектронноеВзаимодействие.ТорговыеПредложения

#Область СтатистикаКатегорийСервиса

// Определяет количество объектов сопоставленных по категориям
//
// Параметры:
//  ПараметрыПроцедуры          - Структура - параметры отбора для расчета статистики
//    Ключи:
//      *ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - прайс-лист для отбора статистики
//      *Номенклатура - ОпределяемыйТип.НоменклатураБЭД - номенклатура для отбора статистики
//  АдресРезультата              - Строка - адрес помещения результата выполнения
//
Процедура ПолучитьДанныеКатегорий(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	Перем ТорговоеПредложение, Номенклатура;

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.РаботаСНоменклатуройСлужебный.ПолучитьДанныеКатегорий");
	
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("ТорговоеПредложение", ТорговоеПредложение)
		И ЗначениеЗаполнено(ТорговоеПредложение) Тогда
		Отбор.Вставить("ПрайсЛист", ТорговоеПредложение);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("Номенклатура", Номенклатура)
		И ЗначениеЗаполнено(Номенклатура) Тогда
		Отбор.Вставить("Номенклатура", Номенклатура);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорияРаботаСНоменклатурой", 
		РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой());
	Запрос.УстановитьПараметр("КатегорияПрочее", 
		РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	
	Если Отбор.Свойство("Номенклатура") Тогда
		Запрос.Текст = ТекстЗапросаСтатистикаКатегорийНоменклатура();
	ИначеЕсли НЕ ТаблицаСодержитДанные("РегистрСведений.СтатистикаПозицийТорговыхПредложений", Новый Структура) Тогда
		ВыполнитьПолныйПересчетСтатистикиКатегорий(Новый Структура);
		Запрос.Текст = ТекстЗапросаСтатистикаКатегорий();
	Иначе
		Запрос.Текст = ТекстЗапросаСтатистикаКатегорий();
	КонецЕсли; 
	
	УстановитьОтборЗапроса(Запрос, Отбор);
	
	ДанныеКатегорий = Новый Соответствие;
	ИтоговоеКоличество = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДанныеКатегорий.Вставить(ВыборкаЗапроса.ИдентификаторКатегории, ВыборкаЗапроса.Количество);
		ИтоговоеКоличество = ИтоговоеКоличество + ВыборкаЗапроса.Количество;
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(ДанныеКатегорий, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаЗапроса.Количество() / 10000);

КонецПроцедуры

Функция ТекстЗапросаДанныеКатегорий()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрСведенийТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	               |	НЕОПРЕДЕЛЕНО КАК ИдентификаторКатегории,
	               |	1 КАК Количество
	               |ИЗ
	               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки
	               |ГДЕ
	               |	НЕ РегистрСведенийТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию";
	
	ДополнитьСписокПозицийТорговыхПредложенийРаботаСНоменклатурой(ТекстЗапроса);
	СгруппироватьЗапрос(ТекстЗапроса, "ПрайсЛист, ИдентификаторКатегории", "Количество");
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТаблицаСодержитДанные(ИмяТаблицы, Отбор)

	СхемаЗапроса = Новый СхемаЗапроса;
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорЗапроса.Источники.Добавить(ИмяТаблицы, "ТаблицаДанных");
	ОператорЗапроса.ВыбираемыеПоля.Добавить("ИСТИНА");
	ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьОтборЗапроса(Запрос, Отбор);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции
 
Функция ТекстЗапросаСтатистикаКатегорий()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтатистикаПозицийТорговыхПредложений.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СУММА(СтатистикаПозицийТорговыхПредложений.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.СтатистикаПозицийТорговыхПредложений КАК СтатистикаПозицийТорговыхПредложений
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатистикаПозицийТорговыхПредложений.ИдентификаторКатегории
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(СтатистикаПозицийТорговыхПредложений.Количество) = 0";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьОтборЗапроса(Запрос, Отбор)
	
	Если Отбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].Операторы[0];
	
	ИмяИсточника = ОператорЗапроса.Источники[0].Источник.Псевдоним;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		ТекстОтбора = СтрШаблон("%1.%2 = &%2", ИмяИсточника, ЭлементОтбора.Ключ);
		ОператорЗапроса.Отбор.Добавить(ТекстОтбора);
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла; 
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры

Процедура СгруппироватьЗапрос(ТекстЗапроса, ПоляГруппировки, ПоляСуммирования)

	КолонкиГруппировки = Новый Структура(ПоляГруппировки);
	КолонкиСуммирования = Новый Структура(ПоляСуммирования);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	
	Для каждого Колонка Из ПакетЗапроса.Колонки Цикл
		
		ИндексКолонки = ПакетЗапроса.Колонки.Индекс(Колонка);
		
		Если КолонкиГруппировки.Свойство(Колонка.Псевдоним) Тогда
			Для каждого ОператорЗапроса Из ПакетЗапроса.Операторы Цикл
				ОператорЗапроса.Группировка.Добавить(ОператорЗапроса.ВыбираемыеПоля[ИндексКолонки]);
			КонецЦикла; 
		ИначеЕсли КолонкиСуммирования.Свойство(Колонка.Псевдоним) Тогда
			Для каждого ОператорЗапроса Из ПакетЗапроса.Операторы Цикл
				ОператорЗапроса.ВыбираемыеПоля.Добавить(СтрШаблон("СУММА(%1)", ОператорЗапроса.ВыбираемыеПоля[ИндексКолонки]), ИндексКолонки);
			КонецЦикла;
		Иначе
			ПакетЗапроса.Колонки.Удалить(ИндексКолонки);
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура УдалитьСтроки(ТаблицаЗначений, СтруктураОтбора)

	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТаблицаЗначений.Удалить(НайденнаяСтрока);
	КонецЦикла; 

КонецПроцедуры

Функция ТекстЗапросаСопоставлениеКатегорий()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОтличий.ПрайсЛист КАК ПрайсЛист,
	|	ТаблицаОтличий.Номенклатура КАК Номенклатура,
	|	ТаблицаОтличий.Характеристика КАК Характеристика,
	|	ТаблицаОтличий.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаОтличий
	|ИЗ
	|	&ТаблицаОтличий КАК ТаблицаОтличий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторКатегории,
	|	РегистрСведенийТорговыеПредложенияТорговойПлощадки.Количество КАК Количество
	|ИЗ
	|	ТаблицаОтличий КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки";
	
	ДополнитьСписокПозицийТорговыхПредложенийРаботаСНоменклатурой(ТекстЗапроса);
	СгруппироватьЗапрос(ТекстЗапроса, "ПрайсЛист, ИдентификаторКатегории", "Количество");
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСтатистикаКатегорийНоменклатура()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	НЕОПРЕДЕЛЕНО КАК ИдентификаторКатегории,
	               |	1 КАК Количество
	               |ИЗ
	               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки
	               |ГДЕ
	               |	НЕ РегистрСведенийТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию";
	
	ТекстСопоставления = ТекстЗапросаДинамическогоСпискаРаботаСНоменклатурой();
	ДополнитьЗапросИдентификаторКатегории(ТекстЗапроса, ТекстСопоставления);
	СгруппироватьЗапрос(ТекстЗапроса, "ИдентификаторКатегории", "Количество");
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ТорговыеПредложения

Функция ТекстЗапросаДинамическогоСпискаРаботаСНоменклатурой() 

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено)
	|			ТОГДА &КатегорияРаботаСНоменклатурой
	|		КОГДА НЕ СоответствиеВидаНоменклатуры.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеВидаНоменклатуры.ИдентификаторКатегории
	|		КОГДА НЕ СоответствиеРодителя.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеРодителя.ИдентификаторКатегории
	|		КОГДА НЕ СоответствиеНоменклатуры.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеНоменклатуры.ИдентификаторКатегории
	|		ИНАЧЕ &КатегорияПрочее
	|	КОНЕЦ КАК ИдентификаторКатегории
	|ИЗ
	|	РегистрСведенийТорговыеПредложенияТорговойПлощадки КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = ДанныеНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И РегистрСведенийТорговыеПредложенияТорговойПлощадки.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатуры
	|		ПО РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = СоответствиеНоменклатуры.Номенклатура
	|			И (СоответствиеНоменклатуры.Характеристика = &ПустаяХарактеристика)
	|			И (СоответствиеНоменклатуры.ИдентификаторКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеРодителя
	|		ПО (ДанныеНоменклатуры.Родитель = СоответствиеРодителя.Номенклатура)
	|			И (СоответствиеРодителя.Характеристика = &ПустаяХарактеристика)
	|			И (СоответствиеРодителя.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидаНоменклатуры
	|		ПО (ДанныеНоменклатуры.ВидНоменклатуры = СоответствиеВидаНоменклатуры.ВидНоменклатуры)
	|			И (СоответствиеВидаНоменклатуры.ЭтоЕдинственнаяЗапись)";
	
	ЗначениеПараметра = РаботаСНоменклатурой.ПустаяХарактеристикаСтрокойДляЗапроса();
	ТекстЗапроса      = СтрЗаменить(ТекстЗапроса, "&ПустаяХарактеристика", ЗначениеПараметра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСопоставлениеБизнесСеть()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ СоответствиеВидаНоменклатуры.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеВидаНоменклатуры.ИдентификаторКатегории
	|		КОГДА НЕ СоответствиеРодителя.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеРодителя.ИдентификаторКатегории
	|		КОГДА НЕ СоответствиеНоменклатуры.ИдентификаторКатегории ЕСТЬ NULL
	|			ТОГДА СоответствиеНоменклатуры.ИдентификаторКатегории
	|		ИНАЧЕ &КатегорияПрочее
	|	КОНЕЦ КАК ИдентификаторКатегории
	|ИЗ
	|	&ТаблицаНоменклатуры КАК РегистрСведенийТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = ДанныеНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатуры
	|		ПО РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = СоответствиеНоменклатуры.Номенклатура
	|			И (СоответствиеНоменклатуры.Характеристика = &ПустоеЗначениеХарактеристики)
	|			И (СоответствиеНоменклатуры.ИдентификаторКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеРодителя
	|		ПО (ДанныеНоменклатуры.Родитель = СоответствиеРодителя.Номенклатура)
	|			И (СоответствиеРодителя.Характеристика = &ПустоеЗначениеХарактеристики)
	|			И (СоответствиеРодителя.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидаНоменклатуры
	|		ПО (ДанныеНоменклатуры.ВидНоменклатуры = СоответствиеВидаНоменклатуры.ВидНоменклатуры)
	|			И (СоответствиеВидаНоменклатуры.ЭтоЕдинственнаяЗапись)";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УдалитьПоляКомпоновкиДанныхЗапроса(ЗапросПакета)

	Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Очистить();
	ЗапросПакета.Характеристики.Очистить();
	
	Для каждого ОператорЗапроса Из ЗапросПакета.Операторы Цикл
		ОператорЗапроса.ВыраженияОтбораКомпоновкиДанных.Очистить();
	КонецЦикла;
	
	Для каждого Источник Из ОператорЗапроса.Источники Цикл
		
		Если ТипЗнч(Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			УдалитьПоляКомпоновкиДанныхЗапроса(Источник.Источник.Запрос);
			Возврат;
		КонецЕсли;
		
		Для каждого ПараметрКомпоновкиДанных Из Источник.Источник.ПараметрыКомпоновкиДанных Цикл
			Если ТипЗнч(ПараметрКомпоновкиДанных) = Тип("ПараметрТаблицыСхемыЗапроса") Тогда
				ПараметрКомпоновкиДанных.Выражение = Новый ВыражениеСхемыЗапроса("");
			ИначеЕсли ТипЗнч(ПараметрКомпоновкиДанных) = Тип("ВыраженияОтбораКомпоновкиДанныхСхемыЗапроса") Тогда
				ПараметрКомпоновкиДанных.Очистить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 

КонецПроцедуры

Процедура УдалитьПоляКомпоновкиДанных(ТекстЗапроса)

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.РежимКомпоновкиДанных = Ложь;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		
		УдалитьПоляКомпоновкиДанныхЗапроса(ЗапросПакета);
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры

Функция ВыражениеЗапросаПоИмениКолонки(ЗапросПакета, ИмяКолонки)

	НайденнаяКолонка = ЗапросПакета.Колонки.Найти(ИмяКолонки);
	
	Если НайденнаяКолонка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексКолонки = ЗапросПакета.Колонки.Индекс(НайденнаяКолонка);
	
	Возврат ЗапросПакета.Операторы[0].ВыбираемыеПоля[ИндексКолонки];

КонецФункции

Процедура ДополнитьЗапросИдентификаторКатегории(ТекстЗапроса, ТекстЗапросаСопоставления)

	СхемаЗапросаДинамическогоСписка = Новый СхемаЗапроса;
	СхемаЗапросаДинамическогоСписка.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ТекстЗапросаДанныеНоменклатуры = "";
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапросаДанныеНоменклатуры);
	УдалитьПоляКомпоновкиДанных(ТекстЗапросаДанныеНоменклатуры);
	
	СхемаЗапросаДанныеНоменклатуры = Новый СхемаЗапроса;
	СхемаЗапросаДанныеНоменклатуры.УстановитьТекстЗапроса(ТекстЗапросаДанныеНоменклатуры);
	
	ЗапросВыборкиДанныхДинамическогоСписка = 
		СхемаЗапросаДинамическогоСписка.ПакетЗапросов[СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Количество() - 1];
	ОператорЗапросаВыборкиДанныхДинамическогоСписка = ЗапросВыборкиДанныхДинамическогоСписка.Операторы[0];
	
	КоличествоЗапросов = СхемаЗапросаДанныеНоменклатуры.ПакетЗапросов.Количество();
	НомерЗапроса = 0;
	
	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("ИмяТаблицы"     , "");
	ИменаПолей.Вставить("Номенклатура"   , "");
	ИменаПолей.Вставить("Родитель"       , "");
	ИменаПолей.Вставить("ВидНоменклатуры", "");
	
	Отборы = Новый Массив;
	
	Для каждого ЗапросПакета Из СхемаЗапросаДанныеНоменклатуры.ПакетЗапросов Цикл
		
		НомерЗапроса = НомерЗапроса + 1;
		ТипЗапроса = ТипЗнч(ЗапросПакета);
		
		Если НомерЗапроса = КоличествоЗапросов И Не ТипЗапроса = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ВызватьИсключение(НСтр("ru = 'Недопустимый тип запроса данных номенклатуры'"));
		ИначеЕсли НомерЗапроса = КоличествоЗапросов И НЕ ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
			ВызватьИсключение(НСтр("ru = 'Недопустимый тип запроса данных номенклатуры'"));
		ИначеЕсли Не НомерЗапроса = КоличествоЗапросов И ТипЗапроса = Тип("ЗапросВыбораСхемыЗапроса")
			И ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
			ВызватьИсключение(НСтр("ru = 'Недопустимый тип запроса данных номенклатуры'"));
		ИначеЕсли ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			НовыйЗапрос = СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
			НовыйЗапрос.ИмяТаблицы = ЗапросПакета.ИмяТаблицы;
			СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Переместить(НовыйЗапрос, СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Количество() - 2);
		ИначеЕсли Не ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
			НовыйЗапрос = СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
			НовыйЗапрос.УстановитьТекстЗапроса(ЗапросПакета.ПолучитьТекстЗапроса());
			СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Переместить(НовыйЗапрос, СхемаЗапросаДинамическогоСписка.ПакетЗапросов.Количество() - 2);
		ИначеЕсли ЗапросПакета.Операторы.Количество() > 1 Тогда
			
			ВложенныйЗапрос = ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ДанныеНоменклатуры");
			ВложенныйЗапрос.Источник.Запрос = ЗапросПакета.ПолучитьТекстЗапроса();
			
			ИменаПолей.ИмяТаблицы      = "ДанныеНоменклатуры";
			ИменаПолей.Номенклатура    = "ДанныеНоменклатуры.Номенклатура";
			ИменаПолей.Родитель        = "ДанныеНоменклатуры.Родитель";
			ИменаПолей.ВидНоменклатуры = "ДанныеНоменклатуры.ВидНоменклатуры";
			
		Иначе
			
			Для каждого Источник Из ЗапросПакета.Операторы[0].Источники Цикл
				
				Если ТипЗнч(Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
					НовыйИсточник = ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), Источник.Источник.Псевдоним);
					НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса(Источник.Источник.Запрос.ПолучитьТекстЗапроса());
				ИначеЕсли ТипЗнч(Источник.Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
					НовыйИсточник = ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники.Добавить(Источник.Источник.ИмяТаблицы, Источник.Источник.Псевдоним);
					НовыйИсточник.Соединения.Очистить();
				КонецЕсли;
				
				Для каждого ПроверяемыйИсточник Из ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники Цикл
					
					Если ПроверяемыйИсточник.Источник.Псевдоним = Источник.Источник.Псевдоним Тогда
						Продолжить;
					КонецЕсли; 
					
					УдаляемыеСоединения = Новый Массив;
					
					Для каждого Соединение Из ПроверяемыйИсточник.Соединения Цикл
						Если Соединение.Источник.Источник.Псевдоним = НовыйИсточник.Источник.Псевдоним Тогда
							УдаляемыеСоединения.Добавить(Соединение);
						КонецЕсли; 
					КонецЦикла; 
					
					Для каждого УдаляемоеСоединение Из УдаляемыеСоединения Цикл
						ПроверяемыйИсточник.Соединения.Удалить(ПроверяемыйИсточник.Соединения.Индекс(УдаляемоеСоединение));
					КонецЦикла; 
					
				КонецЦикла; 
			
			КонецЦикла;
			
			Для каждого Источник Из ЗапросПакета.Операторы[0].Источники Цикл
				
				Если Источник.Соединения.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники.НайтиПоПсевдониму(Источник.Источник.Псевдоним);
				
				Для каждого Соединение Из Источник.Соединения Цикл
				
					НовыйИсточник.Соединения.Добавить(Соединение.Источник.Источник.Псевдоним);
					НовоеСоединение = НовыйИсточник.Соединения[НовыйИсточник.Соединения.Количество() - 1];
					НовоеСоединение.Условие = Соединение.Условие;
					НовоеСоединение.ТипСоединения = Соединение.ТипСоединения;
				
				КонецЦикла; 
				
			КонецЦикла;
			
			Для каждого ЭлементОтбора Из ЗапросПакета.Операторы[0].Отбор Цикл
				Отборы.Добавить(ЭлементОтбора);
			КонецЦикла; 
			
			ИменаПолей.ИмяТаблицы      = ЗапросПакета.Операторы[0].Источники[0].Источник.Псевдоним;
			ИменаПолей.Номенклатура    = ВыражениеЗапросаПоИмениКолонки(ЗапросПакета, "Номенклатура");
			ИменаПолей.Родитель        = ВыражениеЗапросаПоИмениКолонки(ЗапросПакета, "Родитель");
			ИменаПолей.ВидНоменклатуры = ВыражениеЗапросаПоИмениКолонки(ЗапросПакета, "ВидНоменклатуры");
			
		КонецЕсли;
	
	КонецЦикла;
	
	Источник = ОператорЗапросаВыборкиДанныхДинамическогоСписка.Источники.НайтиПоПсевдониму("РегистрСведенийТорговыеПредложенияТорговойПлощадки");
	Источник.Соединения.Добавить(ИменаПолей.ИмяТаблицы);
	Соединение = Источник.Соединения[Источник.Соединения.Количество() - 1];
	Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	Соединение.Условие = Новый ВыражениеСхемыЗапроса(СтрШаблон("РегистрСведенийТорговыеПредложенияТорговойПлощадки.Номенклатура = %1", ИменаПолей.Номенклатура));
	
	Для каждого ЭлементОтбора Из Отборы Цикл
		Источник.Соединения.Добавить(ИменаПолей.ИмяТаблицы);
		Соединение = Источник.Соединения[Источник.Соединения.Количество() - 1];
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		Соединение.Условие = ЭлементОтбора;
	КонецЦикла;
	
	ТекстЗапросаСопоставления = СтрЗаменить(ТекстЗапросаСопоставления, "ДанныеНоменклатуры.Номенклатура", ИменаПолей.Номенклатура);
	ТекстЗапросаСопоставления = СтрЗаменить(ТекстЗапросаСопоставления, "ДанныеНоменклатуры.Родитель", ИменаПолей.Родитель);
	ТекстЗапросаСопоставления = СтрЗаменить(ТекстЗапросаСопоставления, "ДанныеНоменклатуры.ВидНоменклатуры", ИменаПолей.ВидНоменклатуры);
	ТекстЗапросаСопоставления = СтрЗаменить(ТекстЗапросаСопоставления, "ДанныеНоменклатуры", ИменаПолей.ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапросаДинамическогоСписка.ПолучитьТекстЗапроса();
	
	ОбъединитьЗапросы(Запрос, ТекстЗапросаСопоставления);
	
	ТекстЗапроса = Запрос.Текст;

КонецПроцедуры

#КонецОбласти

// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

// ЭлектронноеВзаимодействие

#Область ОбработкаСхемыЗапросов

// Объединить запросы.
//
// Параметры:
//  Запрос1	 - Запрос - запрос приемник.
//  Запрос2	 - Запрос, Строка - запрос источник.
//
Процедура ОбъединитьЗапросы(ЗапросПриемник, ЗапросТекстИсточник)
	
	Схема1 = Новый СхемаЗапроса;
	Схема1.УстановитьТекстЗапроса(ЗапросПриемник.Текст);
	
	Схема2 = Новый СхемаЗапроса;
	Если ТипЗнч(ЗапросТекстИсточник) = Тип("Строка") Тогда
		Схема2.УстановитьТекстЗапроса(ЗапросТекстИсточник);
	Иначе
		// Вариант запроса.
		Схема2.УстановитьТекстЗапроса(ЗапросТекстИсточник.Текст);
		Для каждого ЭлементКоллекции Из ЗапросТекстИсточник.Параметры Цикл
			ЗапросПриемник.Параметры.Добавить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции2 Из Схема2.ПакетЗапросов Цикл
		
		ИндексЗапроса2 = Схема2.ПакетЗапросов.Индекс(ЭлементКоллекции2);
		ПакетДобавлен = Ложь;
		Для каждого ЭлементКоллекции1 Из Схема1.ПакетЗапросов Цикл
			Если ТипЗнч(ЭлементКоллекции1) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Представление1 = ЭлементКоллекции1.Представление();
			Представление2 = ЭлементКоллекции1.Представление();
			ТаблицаПомещения1 = "";
			ТаблицаПомещения2 = "";
			
			Если ТипЗнч(ЭлементКоллекции1) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ПсевдонимИсточника1 = ЭлементКоллекции1.ИмяТаблицы;
			Иначе
				ПсевдонимИсточника1 = ЭлементКоллекции1.Операторы[0].Источники[0].Источник.Псевдоним;
				ТаблицаПомещения1   = ЭлементКоллекции1.ТаблицаДляПомещения;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементКоллекции2) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ПсевдонимИсточника2 = ЭлементКоллекции2.ИмяТаблицы;
			Иначе
				ПсевдонимИсточника2 = ЭлементКоллекции2.Операторы[0].Источники[0].Источник.Псевдоним;
				ТаблицаПомещения2   = ЭлементКоллекции2.ТаблицаДляПомещения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Представление1)
				И ПсевдонимИсточника1 = ПсевдонимИсточника2
				И ТаблицаПомещения1 = ТаблицаПомещения2 Тогда
				ОбъединитьПакетЗапросов(ЭлементКоллекции1, Схема2.ПакетЗапросов.Получить(ИндексЗапроса2));
				ПакетДобавлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПакетДобавлен Тогда
			// Добавление подзапроса в запрос приемник.
			ДобавитьЗапросВПакет(Схема1, ЭлементКоллекции2);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросПриемник.Текст = Схема1.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Объединить пакет запросов.
//
// Параметры:
//  Запрос1 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся приемником.
//  Запрос2 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся источником.
//
Процедура ОбъединитьПакетЗапросов(Запрос1, Запрос2)
	
	Если Запрос2.Операторы.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Объединение запросов производится только для одного оператора'");
	КонецЕсли;
	
	// Обработка операторов.
	Для каждого Источники2 Из Запрос2.Операторы[0].Источники Цикл
		
		Если Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Источники2.Источник.Псевдоним) = Неопределено Тогда
			НовыйИсточник = Запрос1.Операторы[0].Источники.Добавить(Источники2.Источник.ИмяТаблицы, Источники2.Источник.Псевдоним);
			НовыйИсточник.Соединения.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление выбираемых полей.
	Для каждого ВыбираемоеПоле2 Из Запрос2.Операторы[0].ВыбираемыеПоля Цикл
		ИндексКолонки2 = Запрос2.Операторы[0].ВыбираемыеПоля.Индекс(ВыбираемоеПоле2);
		Колонка2 = Запрос2.Колонки.Получить(ИндексКолонки2);
		Колонка1 = Запрос1.Колонки.Найти(Колонка2.Псевдоним);
		Если Колонка1 = Неопределено Тогда
			Запрос1.Операторы[0].ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2));
			// Установка имени колонки.
			Колонка1 = Запрос1.Колонки.Получить(Запрос1.Колонки.Количество()-1);
			Колонка1.Псевдоним = Колонка2.Псевдоним;
		Иначе
			Запрос1.Операторы[0].ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2),
				Запрос1.Колонки.Индекс(Колонка1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Источники2 Из Запрос2.Операторы[0].Источники Цикл
		
		Если Источники2.Соединения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Источник1 = Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Источники2.Источник.Псевдоним);
		ПсевдонимыИсточника1 = Новый Массив;
		Для каждого Соединение1 Из Источник1.Соединения Цикл
			ПсевдонимыИсточника1.Добавить(Соединение1.Источник.Источник.Псевдоним);
		КонецЦикла;
		
		СписокКорректировкиСоединений = Новый Соответствие;
		Для каждого Соединение2 Из Источники2.Соединения Цикл
			
			Псевдоним2 = Соединение2.Источник.Источник.Псевдоним;
			Если ПсевдонимыИсточника1.Найти(Псевдоним2) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИсточникСхемы = Запрос1.Операторы[0].Источники.НайтиПоПсевдониму(Псевдоним2);
			Если ИсточникСхемы = Неопределено Тогда
				Источник1.Соединения.Добавить(Соединение2.Источник, Строка(Соединение2.Условие));
			Иначе
				Источник1.Соединения.Добавить(ИсточникСхемы, Строка(Соединение2.Условие));
				ПоследнееСоединение = Источник1.Соединения.Получить(Источник1.Соединения.Количество()-1);
				Если ПоследнееСоединение.ТипСоединения <> Соединение2.ТипСоединения Тогда
					СписокКорректировкиСоединений.Вставить(ПоследнееСоединение, Соединение2.ТипСоединения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокКорректировкиСоединений.Количество() Тогда
			Для каждого Соединение1 Из СписокКорректировкиСоединений Цикл
				Соединение1.Ключ.ТипСоединения = Соединение1.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Перебор и подстановка полей запроса.
	Для каждого Колонка2 Из Запрос2.Колонки Цикл
		Колонка1 = Запрос1.Колонки.Найти(Колонка2.Псевдоним);
		Если Колонка1 <> Неопределено Тогда
			Если ПоляСхемыЗапросовИдентичны(Колонка1.Поля, Колонка2.Поля) Тогда
				Продолжить;
			КонецЕсли;
			ИндексКолонки1 = Запрос1.Колонки.Индекс(Колонка1);
			ИндексКолонки2 = Запрос2.Колонки.Индекс(Колонка2);
			Запрос1.Операторы[0].ВыбираемыеПоля.Установить(ИндексКолонки1, Запрос2.Операторы[0].ВыбираемыеПоля.Получить(ИндексКолонки2));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить запрос в пакет запросов.
//
// Параметры:
//  Схема1 - СхемаЗапроса - пакет запроса являющимся приемником.
//  Запрос2 - ПакетЗапросовСхемыЗапроса - пакет запроса являющимся источником.
//
Процедура ДобавитьЗапросВПакет(Схема1, ЗапросСхемы2)
	
	ЗапросСхемы1 = Схема1.ПакетЗапросов.Добавить(ТипЗнч(ЗапросСхемы2));
	ЗаполнитьЗначенияСвойств(ЗапросСхемы1, ЗапросСхемы2);
	
	Если ТипЗнч(ЗапросСхемы2) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		// Для уничтожения таблицы ничего не заполняется.
		Возврат;
	КонецЕсли;
	
	// Кэширование полей в колонках источника.
	ПоляПоКолонкам2 = Новый Соответствие;
	Для каждого ЭлементКоллекцииКолонки2 Из ЗапросСхемы2.Колонки Цикл
		Для каждого ЭлементКоллекцииПоляКолонок2 Из ЭлементКоллекцииКолонки2.Поля Цикл
			ПоляПоКолонкам2.Вставить(ЭлементКоллекцииПоляКолонок2, ЗапросСхемы2.Колонки.Индекс(ЭлементКоллекцииКолонки2));
		КонецЦикла;
	КонецЦикла;
	
	// Добавление операторов запроса.
	Для каждого ОператорЗапросаСхемы2 Из ЗапросСхемы2.Операторы Цикл
		
		// Обход автоматического создания первого оператора запроса.
		Если ЗапросСхемы2.Операторы.Индекс(ОператорЗапросаСхемы2) = 0 Тогда
			ОператорЗапросаСхемы1 = ЗапросСхемы1.Операторы.Получить(0);
		Иначе
			ОператорЗапросаСхемы1 = ЗапросСхемы1.Операторы.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОператорЗапросаСхемы1, ОператорЗапросаСхемы2);
		
		// Добавление источников запроса.
		Для каждого Источники2 Из ОператорЗапросаСхемы2.Источники Цикл
			Источник1 = ОператорЗапросаСхемы1.Источники.Добавить(Источники2.Источник.ИмяТаблицы, Источники2.Источник.Псевдоним);
			Источник1.Соединения.Очистить();
		КонецЦикла;
		
		// Добавление выбираемых полей.
		Для каждого ВыбираемоеПоле2 Из ОператорЗапросаСхемы2.ВыбираемыеПоля Цикл
			
			ИндексКолонки2 = ОператорЗапросаСхемы2.ВыбираемыеПоля.Индекс(ВыбираемоеПоле2);
			Колонка2 = ЗапросСхемы2.Колонки.Получить(ИндексКолонки2);
			Колонка1 = ЗапросСхемы1.Колонки.Найти(Колонка2.Псевдоним);
			
			ИндексКолонки = ПоляПоКолонкам2.Получить(ВыбираемоеПоле2);
			Если Колонка1 = Неопределено Тогда
				ОператорЗапросаСхемы1.ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2));
				// Установка имени колонки.
				Колонка1 = ЗапросСхемы1.Колонки.Получить(ЗапросСхемы1.Колонки.Количество()-1);
				Колонка1.Псевдоним = Колонка2.Псевдоним;
			Иначе
				ОператорЗапросаСхемы1.ВыбираемыеПоля.Добавить(Строка(ВыбираемоеПоле2), ИндексКолонки);
			КонецЕсли;
		КонецЦикла;
		
		// Добавление соединений.
		СписокКорректировкиСоединений = Новый Соответствие;
		Для каждого Источники2 Из ОператорЗапросаСхемы2.Источники Цикл
			Источник1 = ОператорЗапросаСхемы1.Источники.Получить(ОператорЗапросаСхемы2.Источники.Индекс(Источники2));
			Для каждого Соединение2 Из Источники2.Соединения Цикл
				Источник1.Соединения.Добавить(Соединение2.Источник.Источник.Псевдоним, Строка(Соединение2.Условие));
				ПоследнееСоединение = Источник1.Соединения.Получить(Источник1.Соединения.Количество()-1);
				Если ПоследнееСоединение.ТипСоединения <> Соединение2.ТипСоединения Тогда
					СписокКорректировкиСоединений.Вставить(ПоследнееСоединение, Соединение2.ТипСоединения);
				КонецЕсли;
			КонецЦикла;
			Если СписокКорректировкиСоединений.Количество() Тогда
				Для каждого Соединение1 Из СписокКорректировкиСоединений Цикл
					Соединение1.Ключ.ТипСоединения = Соединение1.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление отборов.
		Для каждого ОтборыЗапроса2 Из ОператорЗапросаСхемы2.Отбор Цикл
			ОператорЗапросаСхемы1.Отбор.Добавить(Строка(ОтборыЗапроса2));
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Служебная функция - определение идентичности полей схемы запросов.
//
// Параметры:
//  Коллекция1	 - ПоляСхемыЗапроса - поля схемы приемника.
//  Коллекция2	 - ПоляСхемыЗапроса - поля схемы источника.
// 
// Возвращаемое значение:
//  Булево - результат сравнения.
//
Функция ПоляСхемыЗапросовИдентичны(Коллекция1, Коллекция2)
	
	Если Коллекция1.Количество() <> Коллекция2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерИндекса = 0 По Коллекция1.Количество() - 1 Цикл
		Если Коллекция1[НомерИндекса] <> Коллекция2[НомерИндекса] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Конец ЭлектронноеВзаимодействие

#Область ВыгрузкаНоменклатуры

// Формирует основной запрос выборки данных для выгрузки.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных номенклатуры.
//  ВыгружаемыеРеквизиты - Структура - содержит настройку выгрузки реквизитов, доп.реквизитов и характеристик номенклатуры
//
// Возвращаемое значение:
//  Булево - признак успешной инициализации запроса,
//           значение Истина означает корректное заполнение переопределяемой части и наличие в запросе необходимых таблиц
// 
Функция ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос, ВыгружаемыеРеквизиты = Неопределено)
	
	// Параметры запроса - строковые константы (перечисления)
	Для каждого ЗначениеПеречисления Из ПеречислениеСтавкиНДС() Цикл
		Запрос.УстановитьПараметр(ЗначениеПеречисления.Представление, ЗначениеПеречисления.Значение);
	КонецЦикла;
	Для каждого ЗначениеПеречисления Из ПеречислениеТипыИзмеряемыхВеличин() Цикл
		Запрос.УстановитьПараметр(ЗначениеПеречисления.Представление, ЗначениеПеречисления.Значение);
	КонецЦикла;
	Для каждого ЗначениеПеречисления Из ПеречислениеТипыНоменклатуры() Цикл
		Запрос.УстановитьПараметр(ЗначениеПеречисления.Представление, ЗначениеПеречисления.Значение);
	КонецЦикла;
	Для каждого ЗначениеПеречисления Из ПеречислениеКлассификаторы() Цикл
		Запрос.УстановитьПараметр(ЗначениеПеречисления.Представление, ЗначениеПеречисления.Значение);
	КонецЦикла;
	
	Если ТипЗнч(ВыгружаемыеРеквизиты) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ИсключенныеДополнительныеРеквизиты", ВыгружаемыеРеквизиты.ДополнительныеРеквизиты);
		Запрос.УстановитьПараметр("ВыгружатьИндивидуальныеХарактеристики", ВыгружаемыеРеквизиты.ВыгружатьИндивидуальныеХарактеристики);
		Запрос.УстановитьПараметр("ИсключенныеВидыНоменклатуры", ВыгружаемыеРеквизиты.ВидыНоменклатуры);
	Иначе 
		Запрос.УстановитьПараметр("ИсключенныеДополнительныеРеквизиты", Новый Массив);
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос);
	
	Если ТипЗнч(ВыгружаемыеРеквизиты) = Тип("Структура") Тогда
		// удаление исключенных реквизитов
		Запрос.Текст = ИсключитьРеквизитыИзЗапроса(Запрос.Текст, ВыгружаемыеРеквизиты.Реквизиты);
	КонецЕсли;
	
	ЗапросИнициализирован = Истина;
	// проверка инициализации запроса
	СхемаЗапроса = Новый СхемаЗапроса;
	Попытка
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Исключение
		ЗапросИнициализирован = Ложь;
		Возврат ЗапросИнициализирован;
	КонецПопытки;
	
	ПроверенныеТаблицы  = Новый Массив;
	ОбязательныеТаблицы = ОбязательныеПоляЗапросаВыборкиДанныхДляВыгрузки();
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) <> Тип("ЗапросВыбораСхемыЗапроса")
			Или НЕ ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) 
			Или НЕ ОбязательныеТаблицы.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		ПоляПроверены = Истина;
		Для каждого ПолеВыборки Из ОбязательныеТаблицы[ЗапросПакета.ТаблицаДляПомещения] Цикл
			Если ЗапросПакета.Колонки.Найти(ПолеВыборки) = Неопределено Тогда
				ПоляПроверены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПоляПроверены = Истина Тогда
			ПроверенныеТаблицы.Добавить(ЗапросПакета.ТаблицаДляПомещения);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОбязательнаяТаблица Из ОбязательныеТаблицы Цикл
		Если ПроверенныеТаблицы.Найти(ОбязательнаяТаблица.Ключ) = Неопределено Тогда
			ЗапросИнициализирован = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗапросИнициализирован;
	
КонецФункции

Функция ОбязательныеПоляЗапросаВыборкиДанныхДляВыгрузки()

	ОбязательныеТаблицы = Новый Структура;
	ОбязательныеТаблицы.Вставить("Товары", СтрРазделить("Номенклатура,Характеристика", ","));
	ОбязательныеТаблицы.Вставить("Свойства", СтрРазделить("Номенклатура,Характеристика,Свойство,Значение,РеквизитХарактеристики", ","));
	ОбязательныеТаблицы.Вставить("Категории", СтрРазделить("Номенклатура,Категория,Наименование,Родитель", ","));
	ОбязательныеТаблицы.Вставить("Штрихкоды", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Номенклатура"));
	Возврат ОбязательныеТаблицы;

КонецФункции

// Инициализирует структуру настройки выгрузки номенклатуры значениями "по умолчанию"
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, для которой требуется получить настройку
//
// Возвращаемое значение:
//  Структура - Ключ - параметр, Значение - значение "по умолчанию".
//
Функция НоваяНастройкаВыгрузкиНоменклатуры(Организация)
	
	ВыгружаемыеРеквизиты = Новый Структура;
	ВыгружаемыеРеквизиты.Вставить("ВыгружатьИндивидуальныеХарактеристики", Истина);
	ВыгружаемыеРеквизиты.Вставить("Реквизиты",                             Новый Массив);
	ВыгружаемыеРеквизиты.Вставить("ДополнительныеРеквизиты",               Новый Массив);
	ВыгружаемыеРеквизиты.Вставить("ВидыНоменклатуры",                      Новый Массив);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Организация",                   Организация);
	СтруктураНастройки.Вставить("ВыгружаемыеРеквизиты",          ВыгружаемыеРеквизиты);
	СтруктураНастройки.Вставить("ТипОрганизации",                "");
	СтруктураНастройки.Вставить("ТипОрганизацииДругое",          "");
	СтруктураНастройки.Вставить("КонтактноеЛицо"                 "");
	СтруктураНастройки.Вставить("Должность"                      "");
	СтруктураНастройки.Вставить("Email"                          "");
	СтруктураНастройки.Вставить("ВыгружатьНоменклатуру",         Истина);
	СтруктураНастройки.Вставить("ВыгружатьВНациональныйКаталог", Ложь);
	СтруктураНастройки.Вставить("ПолучитьШтрихкоды",             Ложь);
	СтруктураНастройки.Вставить("apikey"                         "");
	СтруктураНастройки.Вставить("НастройкиОтбора",               Неопределено);
	СтруктураНастройки.Вставить("ОповещатьОНовых",               Ложь);
	СтруктураНастройки.Вставить("ДатаВыгрузки",                  Дата(1, 1, 1));
	СтруктураНастройки.Вставить("ДатаПредставление",             "");
	СтруктураНастройки.Вставить("ВыгруженоПредставление",        "");
	СтруктураНастройки.Вставить("ИдентификаторЗадания",          "");
	СтруктураНастройки.Вставить("ТестовыйРежим",                 Ложь);
	
	// Настройки получения штрихкодов используются только если ПолучитьШтрихкоды = Истина
	СтруктураНастройки.Вставить("ИспользоватьШтрихкодыБазы",     Истина); // Ложь - не выгружать ШК из БД
	СтруктураНастройки.Вставить("ПолучитьТехническиеШтрихкоды",  Ложь);
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Дополняет сформированный методом ЗапросВыборкаДанныхДляВыгрузки запрос идентификаторами сервиса 1С:Номенклатура
Процедура ДополнитьЗапросСлужебнымиТаблицами(Запрос)
	
	РазделительЗапросов = Символы.ПС + ";" + Символы.ПС;
	
	ТекстЗапросаДополнение = "ВЫБРАТЬ" + Символы.ПС;
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ЗапросПакета.ТаблицаДляПомещения = "Товары" Тогда
			Для каждого КолонкаЗапроса Из ЗапросПакета.Колонки Цикл
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + Символы.Таб + СтрШаблон("Товары.%1 КАК %1,", КолонкаЗапроса.Псевдоним) + Символы.ПС; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса
	|ПОМЕСТИТЬ ТоварыСлужебный
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО Товары.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено))
	|			И (Товары.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|				ИЛИ (СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики)
	|					ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру)))";
	
	ТекстЗапросаДополнение = ТекстЗапросаДополнение + РазделительЗапросов;
	ТекстЗапросаДополнение = ТекстЗапросаДополнение + "ВЫБРАТЬ
	|	СоответствиеПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	NULL КАК Категория,
	|	NULL КАК Родитель,
	|	"""" КАК Наименование,
	|	СоответствиеПоНоменклатуре.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ПОМЕСТИТЬ КатегорииСлужебный
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОтборНоменклатуры КАК ОтборНоменклатуры
	|			ГДЕ
	|				ОтборНоменклатуры.Номенклатура = СоответствиеПоНоменклатуре.Номенклатура)
	|	И СоответствиеПоНоменклатуре.Характеристика = &ПустаяХарактеристика
	|	И СоответствиеПоНоменклатуре.ИдентификаторКатегории <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Категории.Номенклатура,
	|	Категории.Категория,
	|	Категории.Родитель,
	|	Категории.Наименование,
	|	ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)
	|ИЗ
	|	Категории КАК Категории
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО Категории.Категория = СоответствиеПоВидам.ВидНоменклатуры
	|			И (СоответствиеПоВидам.ЭтоЕдинственнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО Категории.Категория = СоответствиеПоИерархии.Номенклатура
	|			И (СоответствиеПоИерархии.Характеристика = &ПустаяХарактеристика)
	|			И (СоответствиеПоИерархии.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОтборНоменклатуры.Родитель КАК Родитель
	|ПОМЕСТИТЬ ОтборНоменклатурыСлужебный
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит, СоответствиеОбщихРеквизитов.ФормализованныйРеквизит) КАК ФормализованныйРеквизит
	|ПОМЕСТИТЬ ФормализованныеРеквизиты
	|ИЗ
	|	Свойства КАК Свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНоменклатурыСлужебный КАК Товары
	|		ПО Свойства.Номенклатура = Товары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВидам
	|		ПО (Товары.ВидНоменклатуры = СоответствиеРеквизитовПоВидам.ОбъектСопоставления)
	|			И Свойства.Свойство = СоответствиеРеквизитовПоВидам.РеквизитОбъекта
	|			И (СоответствиеРеквизитовПоВидам.ИдентификаторРеквизитаКатегории = """")
	|			И (СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит <> ЗНАЧЕНИЕ(Перечисление.РеквизитыНоменклатурыДляВыгрузки.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
	|		ПО (СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
	|			И Свойства.Свойство = СоответствиеОбщихРеквизитов.РеквизитОбъекта
	|			И (СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории = """")
	|			И (СоответствиеОбщихРеквизитов.ФормализованныйРеквизит <> ЗНАЧЕНИЕ(Перечисление.РеквизитыНоменклатурыДляВыгрузки.ПустаяСсылка))
	|ГДЕ
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит, СоответствиеОбщихРеквизитов.ФормализованныйРеквизит) ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(Свойства.Значение) КАК ЗначениеПредставление,
	|	Свойства.РеквизитХарактеристики КАК РеквизитХарактеристики,
	|	ЕСТЬNULL(СоответствиеРеквизитовПоВидам.ИдентификаторРеквизитаКатегории, СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории) КАК ИдентификаторРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеЗначенийПоВидам.ИдентификаторЗначенияРеквизитаКатегории, СоответствиеЗначенийОбщихРеквизитов.ИдентификаторЗначенияРеквизитаКатегории) КАК ИдентификаторЗначения,
	|	ЕСТЬNULL(СоответствиеЗначенийПоВидам.ПредставлениеЗначенияРеквизитаКатегории, СоответствиеЗначенийОбщихРеквизитов.ПредставлениеЗначенияРеквизитаКатегории) КАК ПредставлениеЗначения
	|ПОМЕСТИТЬ СвойстваСлужебный
	|ИЗ
	|	Свойства КАК Свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНоменклатурыСлужебный КАК Товары
	|		ПО Свойства.Номенклатура = Товары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовПоВидам
	|		ПО (Товары.ВидНоменклатуры = СоответствиеРеквизитовПоВидам.ОбъектСопоставления)
	|			И Свойства.Свойство = СоответствиеРеквизитовПоВидам.РеквизитОбъекта
	|			И (СоответствиеРеквизитовПоВидам.ИдентификаторРеквизитаКатегории <> """")
	|			И (СоответствиеРеквизитовПоВидам.ФормализованныйРеквизит = ЗНАЧЕНИЕ(Перечисление.РеквизитыНоменклатурыДляВыгрузки.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеОбщихРеквизитов
	|		ПО (СоответствиеОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
	|			И Свойства.Свойство = СоответствиеОбщихРеквизитов.РеквизитОбъекта
	|			И (СоответствиеОбщихРеквизитов.ИдентификаторРеквизитаКатегории <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийПоВидам
	|		ПО (Товары.ВидНоменклатуры = СоответствиеЗначенийПоВидам.ОбъектСопоставления)
	|			И Свойства.Свойство = СоответствиеЗначенийПоВидам.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийПоВидам.Значение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийОбщихРеквизитов
	|		ПО (СоответствиеЗначенийОбщихРеквизитов.ОбъектСопоставления = &ПустойВидНоменклатуры)
	|			И Свойства.Свойство = СоответствиеЗначенийОбщихРеквизитов.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийОбщихРеквизитов.Значение";
	
	ТаблицыДляУничтожения = Новый Структура("Товары, Категории, Свойства, ОтборНоменклатуры, ОтборНоменклатурыСлужебный");
	Для каждого ТаблицаДляУничтожения Из ТаблицыДляУничтожения Цикл
		ТекстЗапросаДополнение = ТекстЗапросаДополнение + РазделительЗапросов;
		ТекстЗапросаДополнение = ТекстЗапросаДополнение + СтрШаблон("УНИЧТОЖИТЬ %1", ТаблицаДляУничтожения.Ключ);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + РазделительЗапросов + ТекстЗапросаДополнение;
	Запрос.УстановитьПараметр("ПустойВидНоменклатуры", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустаяХарактеристика",  РаботаСНоменклатурой.ПустаяСсылкаНаХарактеристику());
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатуры(Запрос, Настройка, ПодготовитьЗапрос = Истина, РезультатПроверки = Неопределено)
	
	// Правила вычисления готовых к выгрузке товарных позиций:
	// 1. Для 1С:Номенклатуры: заполнение обязательных реквизитов.
	//    Вычисляется с учетом пользовательской настройки: если флаг с реквизита Артикул снят, то проверяется наличие штрихкодов по позиции,
	//    если снят флаг Штрихкод, то проверяется заполнение артикула, если установлены оба флага, то достаточно выполнения одного из условий (проверка через ИЛИ).
	// 2. Для Национального каталога: заполнение обязательных реквизитов, обязательно наличие штрихкода, а так же сопоставление категории с рубрикатором 1С:Номенклатуры.
	
	КлючевыеРеквизиты     = РаботаСНоменклатурой.КлючевыеРеквизитыНоменклатурыДляВыгрузки();
	ОбязательныеРеквизиты = ОбщегоНазначения.СкопироватьРекурсивно(КлючевыеРеквизиты);
	Если Настройка.ВыгружатьВНациональныйКаталог = Истина Тогда
		ОбязательныеРеквизиты.Удалить("Артикул");
		Если Настройка.ПолучитьШтрихкоды Тогда
			ОбязательныеРеквизиты.Удалить("Штрихкоды");
		КонецЕсли;
	ИначеЕсли Настройка.ВыгружатьНоменклатуру = Истина Тогда
		Если Настройка.ВыгружаемыеРеквизиты.Реквизиты.Найти("Артикул") <> Неопределено Тогда
			ОбязательныеРеквизиты.Удалить("Артикул");
		ИначеЕсли Настройка.ВыгружаемыеРеквизиты.Реквизиты.Найти("Штрихкоды") <> Неопределено Тогда
			ОбязательныеРеквизиты.Удалить("Штрихкоды");
		КонецЕсли;
	КонецЕсли;
	
	Если ПодготовитьЗапрос Тогда
		ПодготовитьЗапросПроверкиЗаполненияНоменклатуры(Запрос, Настройка, ОбязательныеРеквизиты);
		Если Запрос = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно выполнить проверку номенклатуры перед выгрузкой: не заполнен текст запроса'");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбязательныеРеквизиты.Свойство("Штрихкоды") И ОбязательныеРеквизиты.Свойство("Артикул") Тогда
		ОбязательныеРеквизиты.Удалить("Штрихкоды");
		ОбязательныеРеквизиты.Удалить("Артикул");
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиНоменклатуры(Запрос, Настройка, ОбязательныеРеквизиты, КлючевыеРеквизиты);
	
КонецПроцедуры

Процедура ПодготовитьЗапросПроверкиЗаполненияНоменклатуры(Запрос, Настройка, ОбязательныеРеквизиты)
	
	ЛимитЗаписей       = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	ПроверятьКатегории = Настройка.ВыгружатьВНациональныйКаталог;
	СхемаЗапроса       = Новый СхемаЗапроса;
	КлючевыеРеквизиты  = РаботаСНоменклатурой.КлючевыеРеквизитыНоменклатурыДляВыгрузки();
	ВременныеТаблицы   = Новый Массив;
	
	Если Настройка.Свойство("ЛимитЗаписей") Тогда
		ЛимитЗаписей = Настройка.ЛимитЗаписей;
	КонецЕсли;
	
	Если ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос, Настройка.ВыгружаемыеРеквизиты) <> Истина Тогда
		Запрос = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ПроверятьКатегории Тогда
		ДополнитьЗапросСлужебнымиТаблицами(Запрос);
		ВременныеТаблицы.Добавить("Категории");
		ВременныеТаблицы.Добавить("КатегорииСлужебный");
	КонецЕсли;
	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЗапросов Цикл
		ПроверяемыйЗапрос = СхемаЗапроса.ПакетЗапросов[КоличествоЗапросов - ОбратныйИндекс];
		Если ТипЗнч(ПроверяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(КоличествоЗапросов - ОбратныйИндекс);
		ИначеЕсли ТипЗнч(ПроверяемыйЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если ОбязательныеРеквизиты.Свойство("Штрихкоды") И ПроверяемыйЗапрос.ТаблицаДляПомещения = "Штрихкоды" Тогда
				КоличествоПолей = ПроверяемыйЗапрос.Колонки.Количество();
				Для ОбратныйИндексПоля = 1 По КоличествоПолей Цикл
					ПроверяемоеПоле = ПроверяемыйЗапрос.Колонки[КоличествоПолей - ОбратныйИндексПоля];
					Если ПроверяемоеПоле.Псевдоним <> "Номенклатура" Тогда
						ПроверяемыйЗапрос.Колонки.Удалить(КоличествоПолей - ОбратныйИндексПоля);
					КонецЕсли;
				КонецЦикла;
				ВременныеТаблицы.Добавить("Штрихкоды");
			ИначеЕсли ПроверяемыйЗапрос.ТаблицаДляПомещения = "Товары" Тогда
				КоличествоПолей = ПроверяемыйЗапрос.Колонки.Количество();
				Для ОбратныйИндексПоля = 1 По КоличествоПолей Цикл
					ПроверяемоеПоле = ПроверяемыйЗапрос.Колонки[КоличествоПолей - ОбратныйИндексПоля];
					Если ПроверяемоеПоле.Псевдоним <> "Номенклатура" 
						И НЕ КлючевыеРеквизиты.Свойство(ПроверяемоеПоле.Псевдоним) Тогда
						ПроверяемыйЗапрос.Колонки.Удалить(КоличествоПолей - ОбратныйИндексПоля);
					КонецЕсли;
				КонецЦикла;
				
				Пока ПроверяемыйЗапрос.Операторы.Количество() > 1 Цикл
					 ПроверяемыйЗапрос.Операторы.Удалить(1);
				КонецЦикла;
				
				КоличествоИсточников = ПроверяемыйЗапрос.Операторы[0].Источники.Количество();
				Для ОбратныйИндексИсточника = 1 По КоличествоИсточников Цикл
					ПроверяемыйИсточник = ПроверяемыйЗапрос.Операторы[0].Источники[КоличествоИсточников - ОбратныйИндексИсточника];
					ПсевдонимИсточника  = ПроверяемыйИсточник.Источник.Псевдоним;
					Если ПсевдонимИсточника = "ОтборНоменклатуры" Тогда
						Продолжить;
					КонецЕсли;
					УдалитьИсточник = Истина;
					Для каждого ВыбираемоеПоле Из ПроверяемыйЗапрос.Операторы[0].ВыбираемыеПоля Цикл
						ВыражениеПоля = Строка(ВыбираемоеПоле);
						Если СтрНайти(ВыражениеПоля, ПсевдонимИсточника) > 0 Тогда
							УдалитьИсточник = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если УдалитьИсточник = Истина Тогда
						ПроверяемыйЗапрос.Операторы[0].Источники.Удалить(КоличествоИсточников - ОбратныйИндексИсточника);
					КонецЕсли;
				КонецЦикла;
				
				СхемаЗапроса.ПакетЗапросов.Переместить(ПроверяемыйЗапрос, СхемаЗапроса.ПакетЗапросов.Количество() - 1);
				
				Если ОбязательныеРеквизиты.Свойство("Штрихкоды") Тогда
					ВыражениеШтрихкоды = "ИСТИНА В
					|	(ВЫБРАТЬ ПЕРВЫЕ 1
					|		ИСТИНА
					|	ИЗ
					|		Штрихкоды КАК Штрихкоды
					|	ГДЕ
					|		Штрихкоды.Номенклатура = ОтборНоменклатуры.Номенклатура)";
				Иначе 
					ВыражениеШтрихкоды = "ИСТИНА";
				КонецЕсли;
				
				Если ПроверятьКатегории Тогда
					ВыражениеКатегории = "ИСТИНА В
					|	(ВЫБРАТЬ ПЕРВЫЕ 1
					|		ИСТИНА
					|	ИЗ
					|		КатегорииСлужебный КАК КатегорииСлужебный
					|	ГДЕ
					|		КатегорииСлужебный.Номенклатура = ОтборНоменклатуры.Номенклатура)";
				Иначе 
					ВыражениеКатегории = "ИСТИНА";
				КонецЕсли;
				
				ПроверяемыйЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеШтрихкоды);
				ПроверяемыйЗапрос.Колонки[ПроверяемыйЗапрос.Колонки.Количество() - 1].Псевдоним = "Штрихкоды";
				
				ПроверяемыйЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеКатегории);
				ПроверяемыйЗапрос.Колонки[ПроверяемыйЗапрос.Колонки.Количество() - 1].Псевдоним = "Категории";
			ИначеЕсли ПроверятьКатегории И ПроверяемыйЗапрос.ТаблицаДляПомещения = "КатегорииСлужебный" Тогда
				КоличествоПолей = ПроверяемыйЗапрос.Колонки.Количество();
				Для ОбратныйИндексПоля = 1 По КоличествоПолей Цикл
					ПроверяемоеПоле = ПроверяемыйЗапрос.Колонки[КоличествоПолей - ОбратныйИндексПоля];
					Если ПроверяемоеПоле.Псевдоним <> "Номенклатура" 
						И ПроверяемоеПоле.Псевдоним <> "ИдентификаторКатегории" Тогда
						ПроверяемыйЗапрос.Колонки.Удалить(КоличествоПолей - ОбратныйИндексПоля);
					КонецЕсли;
				КонецЦикла;
				ПроверяемыйЗапрос.ТаблицаДляПомещения = "";
				ТекстЗапросаКатегории = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Категории.Номенклатура КАК Номенклатура
				|ПОМЕСТИТЬ КатегорииСлужебный
				|ИЗ
				|	&Категории КАК Категории
				|ГДЕ
				|	(ВЫРАЗИТЬ(Категории.ИдентификаторКатегории КАК СТРОКА(50))) <> """"";
				ИсточникКатегории     = СтрШаблон("(%1)", ПроверяемыйЗапрос.ПолучитьТекстЗапроса());
				ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "&Категории", ИсточникКатегории);
				ПроверяемыйЗапрос.УстановитьТекстЗапроса(ТекстЗапросаКатегории);
			ИначеЕсли ПроверяемыйЗапрос.ТаблицаДляПомещения = "ОтборНоменклатуры" Тогда
				ПроверяемыйЗапрос.Операторы[0].КоличествоПолучаемыхЗаписей = ЛимитЗаписей;
				КолонкаНоменклатура = ПроверяемыйЗапрос.Колонки.Найти("Номенклатура");
				ПолеНоменклатура    = ПроверяемыйЗапрос.Операторы[0].ВыбираемыеПоля[ПроверяемыйЗапрос.Колонки.Индекс(КолонкаНоменклатура)];
				ПроверяемыйЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон("%1 > &Параметр_Порядок_Номенклатура", Строка(ПолеНоменклатура)));
				ПроверяемыйЗапрос.Порядок.Добавить(ПолеНоменклатура);
				ПроверяемыйЗапрос.Индекс.Добавить("Номенклатура");
				
				ВременныеТаблицы.Добавить("ОтборНоменклатуры");
			ИначеЕсли ВременныеТаблицы.Найти(ПроверяемыйЗапрос.ТаблицаДляПомещения) = Неопределено Тогда
				СхемаЗапроса.ПакетЗапросов.Удалить(КоличествоЗапросов - ОбратныйИндекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонУсловия = "ВЫБОР КОГДА Товары.%1 <> """" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК %1," + Символы.ПС;
	ТекстЗапроса  = "ВЫБРАТЬ Товары.Номенклатура КАК Номенклатура,";
	Для каждого ОбязательныйРеквизиты Из ОбязательныеРеквизиты Цикл
		Если ОбязательныйРеквизиты.Ключ = "Штрихкоды" Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонУсловия, ОбязательныйРеквизиты.Ключ);
	КонецЦикла;
	Если НЕ ОбязательныеРеквизиты.Свойство("Артикул") Тогда
		ТекстЗапроса = ТекстЗапроса + "ИСТИНА КАК Артикул,";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	Товары.Штрихкоды КАК Штрихкоды,
	|	Товары.Категории КАК Категории";
	
	ТекстЗапроса = ТекстЗапроса + ",
	|	СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СостоянияВыгрузкиНоменклатуры.Состояние КАК Состояние,
	|	ЕСТЬNULL(СостоянияВыгрузкиНоменклатуры.РасшифровкаПроблемы, """") КАК РасшифровкаПроблемы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|		ПО (СостоянияВыгрузкиНоменклатуры.Организация = &Организация)
	|			И Товары.Номенклатура = СостоянияВыгрузкиНоменклатуры.Номенклатура
	|			И (СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний))";
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса() + ";" + ТекстЗапроса;
	
	ВременныеТаблицы.Добавить("Товары");
	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		ТекстЗапроса= ТекстЗапроса + "; УНИЧТОЖИТЬ " + ВременнаяТаблица;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Функция РезультатПроверкиНоменклатуры(Запрос, Настройка, ОбязательныеРеквизиты, КлючевыеРеквизиты)
	
	КлючеваяОперация = "ОбщийМодуль.РаботаСНоменклатуройСлужебный.ПроверитьЗаполнениеНоменклатуры";
	ОписаниеЗамера   = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	КоличествоЗаписей   = 0;
	КоэффициентЗамера   = 10;
	РезультатПроверки   = РасшифровкаПроверки();
	Организация         = Настройка.Организация;
	БыстраяПроверка     = (Настройка.Свойство("БыстраяПроверка") И Настройка.БыстраяПроверка = Истина);
	ПорядокНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.ПривестиЗначение();
	
	КоэффициентПорцииПрогресса = 1;
	Счетчик                    = 0;
	Пока Истина Цикл
		Запрос.УстановитьПараметр("Параметр_Порядок_Номенклатура", ПорядокНоменклатура);
		
		ДанныеДляПроверки = Запрос.Выполнить().Выгрузить();
		ЗаписейНаПроверку = ДанныеДляПроверки.Количество();
		Если ЗаписейНаПроверку = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Счетчик > 0 И Счетчик % КоэффициентПорцииПрогресса = 0 Тогда
			Если Счетчик % (КоэффициентПорцииПрогресса * 10) = 0 Тогда
				КоэффициентПорцииПрогресса = КоэффициентПорцииПрогресса * 10;
			КонецЕсли;
			ДлительныеОперации.СообщитьПрогресс(КоличествоЗаписей);
		КонецЕсли;
		
		Для каждого ПараметрыНоменклатуры Из ДанныеДляПроверки Цикл
			Проблемы = Новый Массив;
			Для каждого ПроверяемыйРеквизит Из ОбязательныеРеквизиты Цикл
				Если ПараметрыНоменклатуры[ПроверяемыйРеквизит.Ключ] = Ложь Тогда
					Проблемы.Добавить(ПроверяемыйРеквизит.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеДляЗаписи = Новый Структура("Состояние, ОписаниеОшибки, РасшифровкаПроблемы",, "", ""); 
			
			НайденоПроблем = Проблемы.Количество();
			Если НЕ ОбязательныеРеквизиты.Свойство("Штрихкоды") И НЕ ОбязательныеРеквизиты.Свойство("Артикул")
				И ПараметрыНоменклатуры.Штрихкоды = Ложь И ПараметрыНоменклатуры.Артикул = Ложь Тогда
				Проблемы.Добавить("Штрихкоды");
				Проблемы.Добавить("Артикул");
				НайденоПроблем = НайденоПроблем + 1;
				ДанныеДляЗаписи.ОписаниеОшибки = НСтр("ru = 'Укажите Артикул или Штрихкод'");
			КонецЕсли;
			
			Если НайденоПроблем > 0 Или Не ПараметрыНоменклатуры.Категории Тогда
				// есть проблемы
				РезультатПроверки.Проблемы  = Проблемы;
				РезультатПроверки.Категории = ПараметрыНоменклатуры.Категории;
				Если БыстраяПроверка Тогда
					КоличествоЗаписей = ?(КоличествоЗаписей = 0, ЗаписейНаПроверку, КоличествоЗаписей);
					ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоЗаписей/КоэффициентЗамера);
					Возврат РезультатПроверки;
				КонецЕсли;
				Если НайденоПроблем = 1 Тогда
					ПредставлениеПоля = КлючевыеРеквизиты[Проблемы[0]];
					Если ДанныеДляЗаписи.ОписаниеОшибки = "" Тогда
						ДанныеДляЗаписи.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не заполнено значение поля %1'"), ПредставлениеПоля);
					КонецЕсли;
				ИначеЕсли НайденоПроблем > 1 Тогда
					ДанныеДляЗаписи.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Проблемы (%1)'"), НайденоПроблем);
				ИначеЕсли Не ПараметрыНоменклатуры.Категории Тогда
					ДанныеДляЗаписи.ОписаниеОшибки = НСтр("ru = 'Номенклатура не сопоставлена с рубрикатором 1С:Номенклатура'");
				КонецЕсли;
				ДанныеДляЗаписи.РасшифровкаПроблемы = ЗначениеВФорматJSON(РезультатПроверки);
			ИначеЕсли БыстраяПроверка Тогда
				 Продолжить
			КонецЕсли;
			
			Если ПустаяСтрока(ДанныеДляЗаписи.РасшифровкаПроблемы) Тогда
				Если ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы 
					ИЛИ ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.Новая Тогда 
					ДанныеДляЗаписи.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки;
				ИначеЕсли ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПроверки 
					ИЛИ ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетИсправления Тогда 
					ДанныеДляЗаписи.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПодтверждения;
				Иначе 
					Продолжить
				КонецЕсли;
			Иначе 
				Если ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы 
					ИЛИ ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетИсправления Тогда 
					ОбновитьЗапись = (СтрСравнить(ПараметрыНоменклатуры.РасшифровкаПроблемы, ДанныеДляЗаписи.РасшифровкаПроблемы) <> 0);
					ДанныеДляЗаписи.Состояние = ПараметрыНоменклатуры.Состояние;
				ИначеЕсли ПараметрыНоменклатуры.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетПроверки Тогда 
					ДанныеДляЗаписи.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетИсправления;
				Иначе 
					ДанныеДляЗаписи.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеДляЗаписи.Вставить("Организация", Организация);
			ДанныеДляЗаписи.Вставить("Номенклатура", ПараметрыНоменклатуры.Номенклатура);
			ДанныеДляЗаписи.Вставить("ХарактеристикаНоменклатуры", ПараметрыНоменклатуры.ХарактеристикаНоменклатуры);
			
			ЗаписьСостояния = РегистрыСведений.СостоянияВыгрузкиНоменклатуры.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьСостояния, ДанныеДляЗаписи);
			ЗаписьСостояния.Записать();
				
		КонецЦикла;
		ПорядокНоменклатура = ДанныеДляПроверки[ЗаписейНаПроверку - 1].Номенклатура;
		КоличествоЗаписей   = КоличествоЗаписей + ЗаписейНаПроверку;
		Счетчик             = Счетчик + 1;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоЗаписей/КоэффициентЗамера);
	
	Возврат РезультатПроверки;

КонецФункции

Функция РасшифровкаПроверки()
	Возврат Новый Структура("Категории, Проблемы", Истина, Новый Массив);
КонецФункции

Функция ИсключитьРеквизитыИзЗапроса(Знач ТекстЗапроса, Знач ИсключенныеРеквизиты)
	
	Если ИсключенныеРеквизиты.Количество() = 0 Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	СвязанныеРеквизиты = Новый Массив;
	СоставныеРеквизиты = СоставныеФормализованныеРеквизитыНоменклатуры();
	
	Если ТипЗнч(СоставныеРеквизиты) = Тип("Структура") И СоставныеРеквизиты.Количество() Тогда
		Для каждого ИсключенныйРеквизит Из ИсключенныеРеквизиты Цикл
			Если СоставныеРеквизиты.Свойство(ИсключенныйРеквизит) Тогда
				ТекущиеСвязанныеРеквизиты = СоставныеРеквизиты[ИсключенныйРеквизит];
				Если ТипЗнч(ТекущиеСвязанныеРеквизиты) = Тип("Массив") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеРеквизиты, ТекущиеСвязанныеРеквизиты);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключенныеРеквизиты, СвязанныеРеквизиты, Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ЗапросПакета.ТаблицаДляПомещения = "Товары" Тогда
			Для каждого ИсключенныйРеквизит Из ИсключенныеРеквизиты Цикл
				Для каждого КолонкиЗапроса Из ЗапросПакета.Колонки Цикл
					Если КолонкиЗапроса.Псевдоним = ИсключенныйРеквизит Тогда
						ЗапросПакета.Операторы[0].ВыбираемыеПоля.Удалить(ЗапросПакета.Колонки.Индекс(КолонкиЗапроса));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция СоставныеФормализованныеРеквизитыНоменклатуры()
	
	СоставныеРеквизиты  = Новый Структура;
	
	ЕдиницаИзмерения = Новый Массив;
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияКодОКЕИ");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияТипИзмеряемойВеличины");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияНаименованиеПолное");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияМеждународноеСокращение");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияБазоваяЕдиница");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияЧислитель");
	ЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Производитель = Новый Массив;
	Производитель.Добавить("ПроизводительНаименование");
	Производитель.Добавить("ПроизводительИНН");
	Производитель.Добавить("ПроизводительКПП");
	СоставныеРеквизиты.Вставить("Производитель", Производитель);
	
	Марка = Новый Массив;
	Марка.Добавить("МаркаНаименование");
	СоставныеРеквизиты.Вставить("Марка", Марка);
	
	КоличествоВУпаковке = Новый Массив;
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмерения");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияКодОКЕИ");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияТипИзмеряемойВеличины");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияНаименованиеПолное");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияМеждународноеСокращение");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияБазоваяЕдиница");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияЧислитель");
	КоличествоВУпаковке.Добавить("КоличествоВУпаковкеЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("КоличествоВУпаковке", КоличествоВУпаковке);
	
	Вес = Новый Массив;
	Вес.Добавить("ВесЗнаменатель");
	Вес.Добавить("ВесЕдиницаИзмерения");
	Вес.Добавить("ВесЕдиницаИзмеренияКодОКЕИ");
	Вес.Добавить("ВесЕдиницаИзмеренияТипИзмеряемойВеличины");
	Вес.Добавить("ВесЕдиницаИзмеренияНаименованиеПолное");
	Вес.Добавить("ВесЕдиницаИзмеренияМеждународноеСокращение");
	Вес.Добавить("ВесЕдиницаИзмеренияБазоваяЕдиница");
	Вес.Добавить("ВесЕдиницаИзмеренияЧислитель");
	Вес.Добавить("ВесЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("ВесЧислитель", Вес);
	
	Длина = Новый Массив;
	Длина.Добавить("ДлинаЗнаменатель");
	Длина.Добавить("ДлинаЕдиницаИзмерения");
	Длина.Добавить("ДлинаЕдиницаИзмеренияКодОКЕИ");
	Длина.Добавить("ДлинаЕдиницаИзмеренияТипИзмеряемойВеличины");
	Длина.Добавить("ДлинаЕдиницаИзмеренияНаименованиеПолное");
	Длина.Добавить("ДлинаЕдиницаИзмеренияМеждународноеСокращение");
	Длина.Добавить("ДлинаЕдиницаИзмеренияБазоваяЕдиница");
	Длина.Добавить("ДлинаЕдиницаИзмеренияЧислитель");
	Длина.Добавить("ДлинаЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("ДлинаЧислитель", Длина);
	
	Объем = Новый Массив;
	Объем.Добавить("ОбъемЗнаменатель");
	Объем.Добавить("ОбъемЕдиницаИзмерения");
	Объем.Добавить("ОбъемЕдиницаИзмеренияКодОКЕИ");
	Объем.Добавить("ОбъемЕдиницаИзмеренияТипИзмеряемойВеличины");
	Объем.Добавить("ОбъемЕдиницаИзмеренияНаименованиеПолное");
	Объем.Добавить("ОбъемЕдиницаИзмеренияМеждународноеСокращение");
	Объем.Добавить("ОбъемЕдиницаИзмеренияБазоваяЕдиница");
	Объем.Добавить("ОбъемЕдиницаИзмеренияЧислитель");
	Объем.Добавить("ОбъемЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("ОбъемЧислитель", Объем);
	
	Площадь = Новый Массив;
	Площадь.Добавить("ПлощадьЗнаменатель");
	Площадь.Добавить("ПлощадьЕдиницаИзмерения");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияКодОКЕИ");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияТипИзмеряемойВеличины");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияНаименованиеПолное");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияМеждународноеСокращение");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияБазоваяЕдиница");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияЧислитель");
	Площадь.Добавить("ПлощадьЕдиницаИзмеренияЗнаменатель");
	СоставныеРеквизиты.Вставить("ПлощадьЧислитель", Площадь);
	
	Возврат СоставныеРеквизиты;
	
КонецФункции

Функция ПеречислениеСтавкиНДС()
	
	ПеречислениеСтавкиНДС = Новый СписокЗначений;
	ПеречислениеСтавкиНДС.Добавить("-", "НДС0");
	ПеречислениеСтавкиНДС.Добавить("10", "НДС10");
	ПеречислениеСтавкиНДС.Добавить("18", "НДС18");
	ПеречислениеСтавкиНДС.Добавить("20", "НДС20");
	Возврат ПеречислениеСтавкиНДС;
	
КонецФункции

Функция ПеречислениеТипыИзмеряемыхВеличин()
	
	ПеречислениеТипыИзмеряемыхВеличин = Новый СписокЗначений;
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Weight", "Вес");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Volume", "Объем");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Area", "Площадь");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Length", "Длина");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Amount", "КоличествоШтук");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Package", "Упаковка");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Power", "Мощность");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Energy", "Энергия");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Electric charge", "ЭлектрическийЗаряд");
	ПеречислениеТипыИзмеряемыхВеличин.Добавить("Time", "Время");
	Возврат ПеречислениеТипыИзмеряемыхВеличин;
	
КонецФункции

Функция ПеречислениеТипыНоменклатуры()
	
	ПеречислениеТипыНоменклатуры = Новый СписокЗначений;
	ПеречислениеТипыНоменклатуры.Добавить("Product", "Товар");
	ПеречислениеТипыНоменклатуры.Добавить("Service", "Услуга");
	Возврат ПеречислениеТипыНоменклатуры;
	
КонецФункции

Функция ПеречислениеКлассификаторы()
	
	ПеречислениеКлассификаторы = Новый СписокЗначений;
	ПеречислениеКлассификаторы.Добавить("OKPD2", "ОКПД2");
	ПеречислениеКлассификаторы.Добавить("TNVED", "ТНВЭД");
	ПеречислениеКлассификаторы.Добавить("EGAIS", "ЕГАИС");
	ПеречислениеКлассификаторы.Добавить("OKVED2", "ОКВЭД2");
	Возврат ПеречислениеКлассификаторы;
	
КонецФункции

Функция СоединениеССервисомВыгрузкиНоменклатуры()
	
	ИмяСобытия = НСтр("ru = 'Работа с номенклатурой.Соединение с сервисом выгрузки'", ОбщегоНазначения.КодОсновногоЯзыка());
	ПараметрыСоединения = Новый Структура;
	
	ПараметрыСоединения.Вставить("ИмяСервера", "catalog-upload.1c.ru");
	ПараметрыСоединения.Вставить("Порт",       443);
	ПараметрыСоединения.Вставить("Таймаут",    30);
	ПараметрыСоединения.Вставить("Прокси",     ПолучениеФайловИзИнтернета.ПолучитьПрокси("https"));
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение",
	ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС));
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,, 
			ПараметрыСоединения.Прокси, ПараметрыСоединения.Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Соединение = Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды)
	
	СоединениеССервисом = СоединениеССервисомВыгрузкиНоменклатуры();
	Попытка
		Ответ = СоединениеССервисом.ВызватьHTTPМетод(ПараметрыКоманды.Метод, Запрос);
	Исключение
		ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПараметрыКомандыВыгрузкаНоменклатуры() 
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование" , НСтр("ru = 'Выгрузка номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыКоманды.Вставить("Адрес"        , "/api/feed");
	ПараметрыКоманды.Вставить("КодСостояния" , 0);
	ПараметрыКоманды.Вставить("Метод"        , "POST");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыОбновлениеСостоянияНоменклатуры() 
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование" , НСтр("ru = 'Обновление состояния номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыКоманды.Вставить("Адрес"        , "/api/feed");
	ПараметрыКоманды.Вставить("КодСостояния" , 0);
	ПараметрыКоманды.Вставить("Метод"        , "GET");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыАктивныйПартнер(КодПартнера) 
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование" , НСтр("ru = 'Проверка активности партнера'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыКоманды.Вставить("Адрес"        , СтрШаблон("/api/partners/%1", КодПартнера));
	ПараметрыКоманды.Вставить("Метод"        , "GET");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыРеквизитыНациональногоКаталога() 
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование" , НСтр("ru = 'Получение обязательных реквизитов Национального каталога'",
									ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыКоманды.Вставить("Адрес"        , "/sources/attributes/crpt");
	ПараметрыКоманды.Вставить("Метод"        , "GET");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция СоответствиеПолейЕдиницыИзмерения()
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("name", "ЕдиницаИзмерения");
	СоответствиеПолей.Вставить("okei", "ЕдиницаИзмеренияКодОКЕИ");
	СоответствиеПолей.Вставить("type", "ЕдиницаИзмеренияТипИзмеряемойВеличины");
	СоответствиеПолей.Вставить("fullName", "ЕдиницаИзмеренияНаименованиеПолное");
	СоответствиеПолей.Вставить("interName", "ЕдиницаИзмеренияМеждународноеСокращение");
	СоответствиеПолей.Вставить("baseOKEI", "ЕдиницаИзмеренияБазоваяЕдиница");
	СоответствиеПолей.Вставить("baseUnitCount", "ЕдиницаИзмеренияЧислитель");
	СоответствиеПолей.Вставить("unitCount", "ЕдиницаИзмеренияЗнаменатель");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция КоллекцияДанныхВыгрузки(ИсточникДанных, СоответствиеПолей)
	
	КоллекцияДанных = Новый Массив;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат КоллекцияДанных;
	КонецЕсли;
	
	КолонкиИсточника = Новый Соответствие;
	Для каждого Колонка Из ИсточникДанных[0].Владелец().Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя, 1);
	КонецЦикла;
	
	// Проверить состав полей источника:
	// 1. Убедиться в наличии обязательных полей
	// 2. Не запрашивать значения необязательных, в случае их отсутствия в источнике.
	ВсегоПолей = СоответствиеПолей.Количество();
	Для ОбратныйИндекс = 1 По ВсегоПолей Цикл
		АтрибутПакета = СоответствиеПолей[ВсегоПолей - ОбратныйИндекс];
		Если КолонкиИсточника.Получить(АтрибутПакета.Представление) = 1 Тогда
			// есть нужные данные
			Продолжить;
		КонецЕсли;
		// нужных данных нет
		Если АтрибутПакета.Пометка Тогда
			// не заполнен обязательный атрибут
			Возврат КоллекцияДанных;
		КонецЕсли;
		СоответствиеПолей.Удалить(ВсегоПолей - ОбратныйИндекс);
	КонецЦикла;
	
	ТаблицаДанных = СортированнаяТаблицаДанныхВыгрузки(ИсточникДанных);
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		ЭлементКоллекции = Новый Структура;
		Для каждого АтрибутПакета Из СоответствиеПолей Цикл
			ЗначениеАтрибута = СтрокаДанных[АтрибутПакета.Представление];
			Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
				ЭлементКоллекции.Вставить(АтрибутПакета.Значение, СокрЛП(XMLСтрока(ЗначениеАтрибута)));
			ИначеЕсли АтрибутПакета.Пометка Тогда 
				ЭлементКоллекции = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементКоллекции <> Неопределено Тогда
			КоллекцияДанных.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоллекцияДанных;
	
КонецФункции

Функция СортированнаяТаблицаДанныхВыгрузки(СтрокиПолнойТаблицы)
	
	// Важно!
	// Сортировка необходима для подсчета хеша, поскольку даже если изменения в данных фактически нет,
	//  изменение порядка их следования приведет к изменению хеша, что в свою очередь спровоцирует выгрузку - 
	//  это приведет к зацикливанию выгрузки, при каждом запуске регламента будут выгружаться одни и те же данные.
	// Поэтому сортировку необходимо выполнять каждый раз.
	
	Если СтрокиПолнойТаблицы.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаДанных = СтрокиПолнойТаблицы[0].Владелец().Скопировать(СтрокиПолнойТаблицы);
	КолонкиДанных = Новый Массив;
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		КолонкиДанных.Добавить(Колонка.Имя);
	КонецЦикла;
	Колонки = СтрСоединить(КолонкиДанных, ",");
	ТаблицаДанных.Индексы.Добавить(Колонки);
	ТаблицаДанных.Сортировать(Колонки);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ДополнительнаяТаблица, ПоискСХарактеристикой, ПустаяХарактеристика)
	
	СтруктураПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ПоискСХарактеристикой);
	ДополнитьМассив = Истина;
	Если ДополнительнаяТаблица.Колонки.Найти("Характеристика") = Неопределено Тогда
		СтруктураПоиска.Удалить("Характеристика");
		ДополнитьМассив = Ложь;
	Иначе
		ДополнитьМассив = ЗначениеЗаполнено(СтруктураПоиска.Характеристика);
	КонецЕсли;
	
	СтрокиТаблицы = ДополнительнаяТаблица.НайтиСтроки(СтруктураПоиска);
	Если ДополнитьМассив Тогда
		СтруктураПоиска.Вставить("Характеристика", ПустаяХарактеристика);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиТаблицы, ДополнительнаяТаблица.НайтиСтроки(СтруктураПоиска));
	КонецЕсли;
	
	Возврат СтрокиТаблицы;
	
КонецФункции

Функция КоличествоЭлементовВПакетеВыгрузки()
	
	ЗначениеПоУмолчанию = 100;
	КоличествоЭлементов = ЗначениеПоУмолчанию;
	НастройкиСтрокой    = СодержаниеФайлаСервисаПоАдресу("/sources/settings.json", "НастройкиВыгрузкиНоменклатуры");
	НастройкиВыгрузки   = ЗначениеИзСтрокиJSON(НастройкиСтрокой, Истина);
	Если ТипЗнч(НастройкиВыгрузки) = Тип("Соответствие") Тогда
		КоличествоЭлементов = НастройкиВыгрузки.Получить("amountOfElements");
		Если ТипЗнч(КоличествоЭлементов) <> Тип("Число") Тогда
			КоличествоЭлементов = ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат КоличествоЭлементов;
	
КонецФункции

// Формирует пакеты данных и отправляет в сервис
// 
// Параметры:
//  Запрос - Запрос - запрос, содержащий создание виртуальной таблицы ОтборНоменклатуры для ограничения выборки данных.
//  Параметры - Структура - настройка выгрузки номенклатуры по организации, см. НастройкаВыгрузкиНоменклатуры
//
Функция ВыгрузитьНоменклатуру(Запрос, Параметры)
	
	КлючеваяОперация             = "ОбщийМодуль.РаботаСНоменклатуройСлужебный.СформироватьФайлыВыгрузкиНоменклатуры";
	ОписаниеЗамера               = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ПараметрыТелаЗапроса         = Новый Структура;
	ЗаголовкиЗапроса             = Новый Соответствие;
	КоличествоЗаписейВФиде       = КоличествоЭлементовВПакетеВыгрузки();
	ОграничениеВыборки           = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	ТипНоменклатура              = Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип;
	ПараметрПорядокНоменклатура  = ТипНоменклатура.ПривестиЗначение();
	ПоискБезХарактеристики       = Новый Структура("Номенклатура");
	ПоискСХарактеристикой        = Новый Структура("Номенклатура, Характеристика");
	Организация                  = Параметры.Организация;
	ТипХарактеристика            = Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип;
	ПустоеЗначениеХарактеристики = ТипХарактеристика.ПривестиЗначение();
	ШаблонПроверкиХарактеристики = "ЕСТЬNULL(%1, &ПустоеЗначениеХарактеристики)";
	СостояниеПослеОтправки       = Перечисления.СостоянияВыгрузкиНоменклатуры.Принята;
	
	ПараметрПорядокХарактеристика = ПустоеЗначениеХарактеристики;
	
	Если Параметры.ВыгружатьВНациональныйКаталог Тогда
		СостояниеПослеОтправки = Перечисления.СостоянияВыгрузкиНоменклатуры.ПроверяетсяМодератором;
		ПараметрыТелаЗапроса.Вставить("recipients", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("crpt"));
	КонецЕсли;
	
	ПараметрыТелаЗапроса.Вставить("uploadNomenclature", Параметры.ВыгружатьНоменклатуру);
	
	ПараметрыТелаЗапроса.Вставить("inn");
	ПараметрыТелаЗапроса.Вставить("kpp");
	ПараметрыТелаЗапроса.Вставить("contact");
	ПараметрыТелаЗапроса.Вставить("position");
	ПараметрыТелаЗапроса.Вставить("email");
	
	Если Параметры.Свойство("ТестовыйРежим") И Параметры.ТестовыйРежим = Истина Тогда
		ЗаголовкиЗапроса.Вставить("vnd-1cn-upload-mode", "2");
	КонецЕсли;
	
	Отправитель = Новый Структура;
	ТипОрганизации = Параметры.ТипОрганизации;
	ТипыОрганизаций = Новый Структура("manufacturer, tradeMarkOwner, distributor, wholesale, retail, other");
	Если ПустаяСтрока(ТипОрганизации) ИЛИ НЕ ТипыОрганизаций.Свойство(ТипОрганизации) Тогда
		ТипОрганизации = "other";
	КонецЕсли;
	Отправитель.Вставить("type", ТипОрганизации);
	Отправитель.Вставить("otherTypeDescription", Параметры.ТипОрганизацииДругое);
	РеквизитыОрганизации = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Организация);
	Отправитель.Вставить("name", РеквизитыОрганизации.ОфициальноеНаименование);
	Отправитель.Вставить("inn", РеквизитыОрганизации.ИНН);
	Отправитель.Вставить("kpp", РеквизитыОрганизации.КПП);
	
	ЗаполнитьЗначенияСвойств(ПараметрыТелаЗапроса, Отправитель);
	ПараметрыТелаЗапроса.Вставить("companyName", Отправитель.name);
	
	ПараметрыКонтакта = Новый Структура;
	ПараметрыКонтакта.Вставить("name", Строка(Параметры.КонтактноеЛицо));
	ПараметрыКонтакта.Вставить("email", Параметры.email);
	ПараметрыКонтакта.Вставить("position", Параметры.Должность);
	ЗаполнитьЗначенияСвойств(ПараметрыТелаЗапроса, ПараметрыКонтакта);
	ПараметрыТелаЗапроса.Вставить("contact", ПараметрыКонтакта.name);
	
	КорневойЭлемент = Новый Структура;
	КорневойЭлемент.Вставить("version", "1.0");
	КорневойЭлемент.Вставить("sourceId", Константы.ИдентификаторИнформационнойБазы.Получить());
	КорневойЭлемент.Вставить("sourceApplicationName", Метаданные.Синоним);
	КорневойЭлемент.Вставить("sourceApplicationVersion", Метаданные.Версия);
	
	Если ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос, Параметры.ВыгружаемыеРеквизиты) <> Истина Тогда
		Возврат 0;
	КонецЕсли;
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	// Добавление упорядочения и отбора по номенклатуре, а также ограничения количества получаемых записей, чтобы выбирать данные порциями
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[0];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Номенклатура");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	ПорядокНоменклатура = ОсновнойЗапрос.Порядок.Добавить(КолонкаНоменклатура);
	ИндексПорядка       = ОсновнойЗапрос.Порядок.Индекс(ПорядокНоменклатура);
	Если ИндексПорядка <> 0 Тогда
		ОсновнойЗапрос.Порядок.Сдвинуть(ИндексПорядка, - ИндексПорядка);
	КонецЕсли;
	// упорядочивание по характеристике
	КолонкаХарактеристика = ОсновнойЗапрос.Колонки.Найти("ХарактеристикаБезПреобразования");
	ПолеХарактеристика    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаХарактеристика)]);
	ПорядокХарактеристика = ОсновнойЗапрос.Порядок.Добавить(КолонкаХарактеристика);
	ИндексПорядка         = ОсновнойЗапрос.Порядок.Индекс(ПорядокХарактеристика);
	Если ИндексПорядка <> 1 Тогда
		ОсновнойЗапрос.Порядок.Сдвинуть(ИндексПорядка, 1 - ИндексПорядка);
	КонецЕсли;
	ТекстУсловия = СтрШаблон("%1 > %2 ИЛИ %1 = %2 И %3 > %4", ПолеНоменклатура, "&ПараметрПорядокНоменклатура", ПолеХарактеристика, "&ПараметрПорядокХарактеристика");
	ОсновнойЗапрос.Операторы[0].Отбор.Добавить(ТекстУсловия);
	ОсновнойЗапрос.Операторы[0].КоличествоПолучаемыхЗаписей = ОграничениеВыборки;
	ОсновнойЗапрос.Индекс.Добавить("Номенклатура");
	ОсновнойЗапрос.Индекс.Добавить("Характеристика");
	
	// Пакет запросов может содержать таблицы с дополнительными сведениями.
	// Данные из этих таблиц помещаются в корень пакета.
	// Получить их нужно 1 раз до разбиения запроса на порции.
	// Описание создания этих таблиц из запроса должно быть удалено после обработки.
	ДополнительныеПоля    = Новый Массив;
	ДополнительныйЗапрос = "";
	КоличествоЗапросов   = СхемаЗапроса.ПакетЗапросов.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЗапросов Цикл
		ПроверяемыйЗапрос = СхемаЗапроса.ПакетЗапросов[КоличествоЗапросов - ОбратныйИндекс];
		Если ТипЗнч(ПроверяемыйЗапрос) <> Тип("ЗапросВыбораСхемыЗапроса") ИЛИ ПроверяемыйЗапрос.ТаблицаДляПомещения <> "" Тогда 
			Продолжить;
		КонецЕсли;
		
		ДополнительноеПоле = "";
		Для каждого ТаблицаЗапроса Из ПроверяемыйЗапрос.Операторы[0].Источники Цикл
			Если СтрНачинаетсяС(ТаблицаЗапроса.Источник.Псевдоним, "ДополнительныеДанные_") Тогда
				ДополнительноеПоле = ТаблицаЗапроса.Источник.Псевдоним;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДополнительноеПоле = "" Тогда
			Продолжить;
		КонецЕсли;
		ДополнительныеПоля.Добавить(СтрЗаменить(ДополнительноеПоле, "ДополнительныеДанные_", ""));
		
		Если ДополнительныйЗапрос <> "" Тогда
			ДополнительныйЗапрос = ДополнительныйЗапрос + ";";
		КонецЕсли;
		ДополнительныйЗапрос = ДополнительныйЗапрос + ПроверяемыйЗапрос.ПолучитьТекстЗапроса();
		СхемаЗапроса.ПакетЗапросов.Удалить(КоличествоЗапросов - ОбратныйИндекс);
	КонецЦикла;
	Если ДополнительныйЗапрос <> "" Тогда
		ДополнительныйЗапрос = Новый Запрос(ДополнительныйЗапрос);
		ПараметрыЗапроса = ДополнительныйЗапрос.НайтиПараметры();
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			ДополнительныйЗапрос.УстановитьПараметр(ПараметрЗапроса.Имя, Запрос.Параметры[ПараметрЗапроса.Имя]);
		КонецЦикла;
		ИсточникДополнительныхДанных = ДополнительныйЗапрос.ВыполнитьПакет();
		ДополнительныеДанные         = Новый Массив;
		Для Индекс = 0 По ИсточникДополнительныхДанных.Количество() - 1 Цикл
			ТекущаяТаблица   = ИсточникДополнительныхДанных[Индекс].Выгрузить();
			ИмяСвойства      = ДополнительныеПоля[Индекс];
			ЗначениеСвойства = МассивИзТаблицы(ТекущаяТаблица);
			Если ИмяСвойства = "" Тогда
				// добавить в корень
				Для каждого ЗначениеТекущегоСвойства Из ЗначениеСвойства Цикл
					ДополнительныеДанные.Добавить(ЗначениеТекущегоСвойства);
				КонецЦикла;
			Иначе 
				ДополнительныеДанные.Добавить(Новый Структура("property, object", ИмяСвойства, ЗначениеСвойства));
			КонецЕсли;
		КонецЦикла;
		
		КорневойЭлемент.Вставить("additionalData", ДополнительныеДанные);
	КонецЕсли;
	
	ДанныеБазы = РеквизитыНоменклатуры();
	ДанныеБазы.Вставить("Номенклатура");
	ДанныеБазы.Вставить("Характеристика");
	ДанныеБазы.Вставить("ИдентификаторНоменклатурыСервиса");
	ДанныеБазы.Вставить("ИдентификаторХарактеристикиСервиса");
	ДанныеБазы.Вставить("ХарактеристикаНаименование");
	
	ДополнительныеПоляНоменклатуры = Новый Массив;
	ВсеДополнительныеРеквизиты     = ДополнительныеРеквизитыТоварнойГруппы();
	ДополнительныеРеквизиты        = Новый Массив;
	Если ТипЗнч(ВсеДополнительныеРеквизиты) <> Тип("Массив") Тогда
		ВсеДополнительныеРеквизиты = Новый Массив;
	КонецЕсли;
	
	ИндексыОбходаРезультатов = Новый Структура;
	ИндексыОбходаРезультатов.Вставить("ТоварыСлужебный");
	ИндексыОбходаРезультатов.Вставить("КатегорииСлужебный");
	ИндексыОбходаРезультатов.Вставить("СвойстваСлужебный");
	ИндексыОбходаРезультатов.Вставить("ФормализованныеРеквизиты");
	ИндексыОбходаРезультатов.Вставить("Штрихкоды");
	ИндексыОбходаРезультатов.Вставить("Упаковки");
	ИндексыОбходаРезультатов.Вставить("Классификаторы");
	ИндексыОбходаРезультатов.Вставить("Изображения");
	ИндексыОбходаРезультатов.Вставить("Вложения");
	ИндексыОбходаРезультатов.Вставить("Сертификаты");
	ИндексыОбходаРезультатов.Вставить("ВложенияСертификатов");
	
	ИндексВставки = 0;
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
			И ЗапросПакета.ТаблицаДляПомещения <> ""
			И ИндексыОбходаРезультатов.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			ТекущаяТаблица = ЗапросПакета.ТаблицаДляПомещения;
			ИндексыОбходаРезультатов[ТекущаяТаблица] = СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросПакета);
			ЗапросПакета.ТаблицаДляПомещения = "";
			ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
			ТекстЗапроса = "ВЫБРАТЬ * ИЗ (" + ТекстЗапроса + ") КАК " + ТекущаяТаблица;
			ЗапросПакета.УстановитьТекстЗапроса(ТекстЗапроса);
			КолонкаХарактеристика = ЗапросПакета.Колонки.Найти("Характеристика");
			Если КолонкаХарактеристика <> Неопределено Тогда
				ТекИндекс = ЗапросПакета.Колонки.Индекс(КолонкаХарактеристика);
				ВыражениеХарактеристика = СтрШаблон(ШаблонПроверкиХарактеристики, Строка(ЗапросПакета.Операторы[0].ВыбираемыеПоля[ТекИндекс]));
				ЗапросПакета.Операторы[0].ВыбираемыеПоля[ТекИндекс] = Новый ВыражениеСхемыЗапроса(ВыражениеХарактеристика);
				КолонкаХарактеристика.Псевдоним = "Характеристика";
			КонецЕсли;
			
			Если ТекущаяТаблица = "ТоварыСлужебный" Тогда
				// подготовить массив дополнительных колонок
				Для каждого КолонкаЗапроса Из ЗапросПакета.Колонки Цикл
					Если ВсеДополнительныеРеквизиты.Найти(КолонкаЗапроса.Псевдоним) <> Неопределено Тогда 
						ДополнительныеРеквизиты.Добавить(КолонкаЗапроса.Псевдоним);
					ИначеЕсли Не ДанныеБазы.Свойство(КолонкаЗапроса.Псевдоним) Тогда
						ДополнительныеПоляНоменклатуры.Добавить(КолонкаЗапроса.Псевдоним);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") И ИндексВставки = 0 Тогда 
			ИндексВставки = СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросПакета);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеПоляНоменклатуры.Количество() > 0 Тогда
		ДополнительныеПоляНоменклатуры = СтрСоединить(ДополнительныеПоляНоменклатуры, ", ");
	Иначе 
		ДополнительныеПоляНоменклатуры = "";
	КонецЕсли;
	
	Если ИндексВставки = 0 Тогда
		СхемаЗапроса.ПакетЗапросов.Количество();
	КонецЕсли;
	
	ИндексВставки = ИндексВставки - 1;
	
	ПараметрыПартнера = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.apikey) Тогда
		ПараметрПартнера = Новый Структура("partnerCode, property, value");
		ПараметрПартнера.partnerCode = "crpt";
		ПараметрПартнера.property    = "apikey";
		ПараметрПартнера.value       = Параметры.apikey;
		ПараметрыПартнера.Добавить(ПараметрПартнера);
	КонецЕсли;
	Отправитель.Вставить("contact", ПараметрыКонтакта);
	Если ПараметрыПартнера.Количество() Тогда
		Отправитель.Вставить("partnerIdentifiers", ПараметрыПартнера);
		ПараметрыТелаЗапроса.Вставить("partnerIdentifiers", ПараметрыПартнера);
	КонецЕсли;
	
	Если Параметры.ПолучитьШтрихкоды Тогда
		ОпцииЦРПТ = Новый Структура("partnerCode, property, value", 
			"crpt", 
			"generateGTINs",
			?(Параметры.ПолучитьТехническиеШтрихкоды, "2", "1"));
		Отправитель.Вставить("partnerOptions", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОпцииЦРПТ));
		ВыгружатьШтрихкоды = Параметры.ИспользоватьШтрихкодыБазы;
	Иначе
		ВыгружатьШтрихкоды = Истина;
	КонецЕсли;
	
	КорневойЭлемент.Вставить("date");
	КорневойЭлемент.Вставить("id");
	КорневойЭлемент.Вставить("sender", Отправитель);
	КорневойЭлемент.Вставить("nomenclatureItems", Новый Массив);
	
	ПакетыДанных   = Новый Соответствие;
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Организация", Организация);
	ОбщиеПараметры.Вставить("Состояние", СостояниеПослеОтправки);
	
	СоответствиеТипов    = Новый Структура;
	МерныеХарактеристики = Новый Структура;
	ДанныеКорняПакета    = Новый Структура;
	Запрос.Текст         = СхемаЗапроса.ПолучитьТекстЗапроса();
	Счетчик              = 0;
	НоменклатураПакета   = Новый ТаблицаЗначений;
	НоменклатураПакета.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	НоменклатураПакета.Колонки.Добавить("ХарактеристикаНоменклатуры", ТипХарактеристика);
	НоменклатураПакета.Колонки.Добавить("Хеш", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	НоменклатураПакета.Колонки.Добавить("ЗаписьНабором", Новый ОписаниеТипов("Булево"));
	
	СоответствиеТипов.Вставить("Строка", "string");
	СоответствиеТипов.Вставить("Число",  "number");
	СоответствиеТипов.Вставить("Булево", "boolean");
	СоответствиеТипов.Вставить("Дата",   "date");
	
	МерныеХарактеристики.Вставить("Вес",                 "weight");
	МерныеХарактеристики.Вставить("Длина",               "length");
	МерныеХарактеристики.Вставить("Объем",               "volume");
	МерныеХарактеристики.Вставить("Площадь",             "area");
	МерныеХарактеристики.Вставить("КоличествоВУпаковке", "itemCount");
	
	ДанныеКорняПакета.Вставить("Наименование",                "name");
	ДанныеКорняПакета.Вставить("ХарактеристикаНаименование",  "characteristicName");
	ДанныеКорняПакета.Вставить("Артикул",                     "code");
	ДанныеКорняПакета.Вставить("СтавкаНДС",                   "vat");
	ДанныеКорняПакета.Вставить("ТипНоменклатуры",             "type");
	ДанныеКорняПакета.Вставить("ВестиУчетПоГТД",              "requiredGTD");
	ДанныеКорняПакета.Вставить("ПродукцияМаркируемаяДляГИСМ", "requiredGISM");
	ДанныеКорняПакета.Вставить("ПодакцизныйТовар",            "excisable");
	ДанныеКорняПакета.Вставить("НаименованияДляПечатиЧека",   "nameShort");
	ДанныеКорняПакета.Вставить("Описание",                    "description");
	ДанныеКорняПакета.Вставить("СтранаПроисхождения",         "countryOfOriginCode");
	
	Запрос.УстановитьПараметр("ПустоеЗначениеХарактеристики", ПустоеЗначениеХарактеристики);
	Запрос.УстановитьПараметр("Организация", Организация);
	КоэффициентПорцииПрогресса = 1;
	ОбработаноПорцийДанных     = 0;
	Пока Истина Цикл
		Запрос.УстановитьПараметр("ПараметрПорядокНоменклатура", ПараметрПорядокНоменклатура);
		Запрос.УстановитьПараметр("ПараметрПорядокХарактеристика", ПараметрПорядокХарактеристика);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаСостояния    = Результат[1].Выгрузить();
		КоличествоКВыгрузке = ТаблицаСостояния.Количество();
		Если КоличествоКВыгрузке = 0 Тогда
			Прервать;
		КонецЕсли;
		ПоследняяСтрока               = ТаблицаСостояния[КоличествоКВыгрузке-1];
		ПараметрПорядокНоменклатура   = ПоследняяСтрока.Номенклатура;
		ПараметрПорядокХарактеристика = ПоследняяСтрока.Характеристика;
		
		ТоварныеГруппы = Новый Соответствие;
		Для каждого СтрокаТаблицы Из ТаблицаСостояния Цикл
			ТоварныеГруппы.Вставить(СтрокаТаблицы.Номенклатура);
		КонецЦикла;
		РаботаСНоменклатуройПереопределяемый.ПолучитьТоварныеГруппыНоменклатуры(ТоварныеГруппы);
		Если ТипЗнч(ТоварныеГруппы) <> Тип("Соответствие") Тогда
			ТоварныеГруппы = Новый Соответствие;
		КонецЕсли;
		
		Если ОбработаноПорцийДанных > 0 И ОбработаноПорцийДанных % КоэффициентПорцииПрогресса = 0 Тогда
			СообщитьПрогрессВыгрузкиПоОрганизации(Организация, СтрШаблон(НСтр("ru = 'Выгружается...(выгружено %1)'"), Счетчик));
			Если Цел(ОбработаноПорцийДанных / КоэффициентПорцииПрогресса) % 10 = 0 Тогда
				КоэффициентПорцииПрогресса = КоэффициентПорцииПрогресса * 10;
			КонецЕсли;
		КонецЕсли;
		
		ОбходРезультатов = ОбщегоНазначения.СкопироватьРекурсивно(ИндексыОбходаРезультатов);
		Для каждого ПараметрыВыборки Из ОбходРезультатов Цикл
			Если ЗначениеЗаполнено(ПараметрыВыборки.Значение) Тогда
				ТаблицаРезультата = Результат[ПараметрыВыборки.Значение].Выгрузить();
				Если ПараметрыВыборки.Ключ = "ВложенияСертификатов" Тогда 
					ТаблицаРезультата.Индексы.Добавить("Сертификат");
				ИначеЕсли ПараметрыВыборки.Ключ <> "ТоварыСлужебный" Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаРезультата.Колонки, "Характеристика") Тогда
						ТаблицаРезультата.Индексы.Добавить("Номенклатура, Характеристика");
					Иначе 
						ТаблицаРезультата.Индексы.Добавить("Номенклатура");
					КонецЕсли;
				КонецЕсли;
				ОбходРезультатов.Вставить(ПараметрыВыборки.Ключ, ТаблицаРезультата);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТаблицыТовары Из ОбходРезультатов.ТоварыСлужебный Цикл
			Если Счетчик = 0 ИЛИ Счетчик % КоличествоЗаписейВФиде = 0 Тогда
				Если ЗначениеЗаполнено(КорневойЭлемент.id) Тогда
					ОписаниеПакетаДанных = Новый Структура("НоменклатураПакета, ПакетДанных", НоменклатураПакета.Скопировать(), КорневойЭлемент);
					ЗаписатьФайлДанных(ОписаниеПакетаДанных, ПакетыДанных);
					КорневойЭлемент.Вставить("nomenclatureItems", Новый Массив);
					НоменклатураПакета.Очистить();
				КонецЕсли;
				
				ИдентификаторПакетаДанных = XMLСтрока(Новый УникальныйИдентификатор);
				КорневойЭлемент.date      = XMLСтрока(ТекущаяДатаСеанса());
				КорневойЭлемент.id        = ИдентификаторПакетаДанных;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеБазы, СтрокаТаблицыТовары);
			ЗаполнитьЗначенияСвойств(ПоискБезХарактеристики, ДанныеБазы);
			ЗаполнитьЗначенияСвойств(ПоискСХарактеристикой, ДанныеБазы);
			
			ЭлементНоменклатура = Новый Структура;
			
			ТоварнаяГруппа = ТоварныеГруппы.Получить(ДанныеБазы.Номенклатура);
			Если ТипЗнч(ТоварнаяГруппа) = Тип("Строка") И Не ПустаяСтрока(ТоварнаяГруппа) Тогда
				ЭлементНоменклатура.Вставить("productGroup", ТоварнаяГруппа);
			КонецЕсли;
			
			// Формализованные реквизиты из доп. реквизитов
			Если ЗначениеЗаполнено(ОбходРезультатов.ФормализованныеРеквизиты) Тогда
				СтрокиВложеннойТаблицы = ОбходРезультатов.ФормализованныеРеквизиты.НайтиСтроки(ПоискБезХарактеристики);
				ДанныеСертификата      = Новый Структура;
				Для каждого СтрокаДанных Из СтрокиВложеннойТаблицы Цикл
					ФормализованныйРеквизит = Строка(СтрокаДанных.ФормализованныйРеквизит);
					ПоложениеТочки          = СтрНайти(ФормализованныйРеквизит, ".");
					Если ПоложениеТочки > 0 Тогда
						ТаблицаПакета = Лев(ФормализованныйРеквизит, ПоложениеТочки - 1);
						КлючДанных    = Сред(ФормализованныйРеквизит, ПоложениеТочки + 1);
						Если ТаблицаПакета = "Классификаторы" Тогда
							ДанныеКлассификатора = Новый Структура;
							ДанныеКлассификатора.Вставить("name", КлючДанных);
							ДанныеКлассификатора.Вставить("code", Строка(СтрокаДанных.Значение));
							Если ЭлементНоменклатура.Свойство("classifiers") Тогда
								ЭлементНоменклатура.classifiers.Добавить(ДанныеКлассификатора);
							Иначе 
								ЭлементНоменклатура.Вставить("classifiers", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеКлассификатора));
							КонецЕсли;
						ИначеЕсли ТаблицаПакета = "Сертификаты" Тогда
							ДанныеСертификата.Вставить(КлючДанных, СтрокаДанных.Значение);
						КонецЕсли;
					ИначеЕсли ДанныеБазы.Свойство(ФормализованныйРеквизит) Тогда
						ДанныеБазы.Вставить(ФормализованныйРеквизит, СтрокаДанных.Значение);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСертификата.Количество() Тогда
					Если ЭлементНоменклатура.Свойство("certificates") Тогда
						ЭлементНоменклатура.certificates.Добавить(ДанныеСертификата);
					Иначе 
						ЭлементНоменклатура.Вставить("certificates", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСертификата));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементНоменклатура.Вставить("vat", "20");
			Для каждого АтрибутПакета Из ДанныеКорняПакета Цикл
				ЗначениеАтрибута = ДанныеБазы[АтрибутПакета.Ключ];
				Если ЗначениеЗаполнено(ЗначениеАтрибута) 
					И (АтрибутПакета.Значение <> "type" ИЛИ ПеречислениеТипыНоменклатуры().НайтиПоЗначению(ЗначениеАтрибута) <> Неопределено) Тогда
					ЭлементНоменклатура.Вставить(АтрибутПакета.Значение, ЗначениеАтрибута);
				КонецЕсли;
			КонецЦикла;
			
			ЭлементИдентификаторы = Новый Структура;
			ЭлементИдентификаторы.Вставить("id", XMLСтрока(ДанныеБазы.Номенклатура));
			Если ЗначениеЗаполнено(ДанныеБазы.Характеристика) Тогда
				ЭлементИдентификаторы.Вставить("characteristicId", XMLСтрока(ДанныеБазы.Характеристика));
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеБазы.ИдентификаторНоменклатурыСервиса) ИЛИ ЗначениеЗаполнено(ДанныеБазы.ИдентификаторХарактеристикиСервиса) Тогда
				ЭлементИдентификаторыСервиса = Новый Структура;
				Если ЗначениеЗаполнено(ДанныеБазы.ИдентификаторНоменклатурыСервиса) Тогда
					ЭлементИдентификаторыСервиса.Вставить("id", ДанныеБазы.ИдентификаторНоменклатурыСервиса);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеБазы.ИдентификаторХарактеристикиСервиса) Тогда
					ЭлементИдентификаторыСервиса.Вставить("characteristicId", ДанныеБазы.ИдентификаторХарактеристикиСервиса);
				КонецЕсли;
				ЭлементИдентификаторы.Вставить("ref1cNomenclature", ЭлементИдентификаторыСервиса) ;
			КонецЕсли;
			ЭлементНоменклатура.Вставить("identifiers", ЭлементИдентификаторы);
			
			ДанныеПакета   = СоответствиеПолейЕдиницыИзмерения();
			ЭлементЕдиница = Новый Структура;
			Для каждого АтрибутПакета Из ДанныеПакета Цикл
				ЗначениеАтрибута = ДанныеБазы[АтрибутПакета.Значение];
				Если ЗначениеЗаполнено(ЗначениеАтрибута)
					И (АтрибутПакета.Ключ <> "type" ИЛИ ПеречислениеТипыИзмеряемыхВеличин().НайтиПоЗначению(ЗначениеАтрибута) <> Неопределено) Тогда
					ЭлементЕдиница.Вставить(АтрибутПакета.Ключ, ЗначениеАтрибута);
				КонецЕсли;
			КонецЦикла;
			ЭлементНоменклатура.Вставить("unit", ЭлементЕдиница);
			
			Если ЗначениеЗаполнено(ДанныеБазы.ПроизводительНаименование) Тогда
				ЭлементПроизводитель = Новый Структура;
				ЭлементПроизводитель.Вставить("name", ДанныеБазы.ПроизводительНаименование);
				Если ЗначениеЗаполнено(ДанныеБазы.Производитель) Тогда
					ЭлементПроизводитель.Вставить("id", XMLСтрока(ДанныеБазы.Производитель));
				КонецЕсли;
				ДанныеПакета = Новый Структура;
				ДанныеПакета.Вставить("inn", "ПроизводительИНН");
				ДанныеПакета.Вставить("kpp", "ПроизводительКПП");
				Для каждого АтрибутПакета Из ДанныеПакета Цикл
					Если ЗначениеЗаполнено(ДанныеБазы[АтрибутПакета.Значение]) Тогда
						ЭлементПроизводитель.Вставить(АтрибутПакета.Ключ, ДанныеБазы[АтрибутПакета.Значение]);
					КонецЕсли;
				КонецЦикла;
				ЭлементНоменклатура.Вставить("manufacturer", ЭлементПроизводитель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеБазы.МаркаНаименование) ИЛИ ЗначениеЗаполнено(ДанныеБазы.Марка) Тогда
				ЭлементМарка = Новый Структура;
				МаркаСсылка  = Неопределено;
				Если ЭтоСправочник(ДанныеБазы.МаркаНаименование) Тогда
					МаркаСсылка = ДанныеБазы.МаркаНаименование;
				ИначеЕсли ЭтоСправочник(ДанныеБазы.МаркаНаименование) Тогда
					МаркаСсылка = ДанныеБазы.Марка;
				КонецЕсли;
				Если МаркаСсылка = Неопределено Тогда
					ЭлементМарка.Вставить("name", Строка(ДанныеБазы.МаркаНаименование));
					Если ЗначениеЗаполнено(ДанныеБазы.Марка) Тогда
						ЭлементМарка.Вставить("id", XMLСтрока(ДанныеБазы.Марка));
					КонецЕсли;
				Иначе
					ЭлементМарка.Вставить("name", Строка(МаркаСсылка));
					ЭлементМарка.Вставить("id", XMLСтрока(МаркаСсылка));
				КонецЕсли;
				ЭлементНоменклатура.Вставить("brand", ЭлементМарка);
			КонецЕсли;
			
			ЭлементМерныеХарактеристики = Новый Структура;
			ЕстьМерныеХарактеристики    = Ложь;
			Для каждого Мера Из МерныеХарактеристики Цикл
				ТекущаяМера = Мера.Ключ;
				ЭлементМера = Новый Структура;
				Если ТекущаяМера = "КоличествоВУпаковке" Тогда
					Числитель   = ДанныеБазы[ТекущаяМера];
					Знаменатель = 0;
					Если НЕ ЗначениеЗаполнено(Числитель) Тогда
						Продолжить;
					КонецЕсли;
				Иначе 
					Числитель   = ДанныеБазы[СтрШаблон("%1Числитель", ТекущаяМера)];
					Знаменатель = ДанныеБазы[СтрШаблон("%1Знаменатель", ТекущаяМера)];
					Если НЕ (ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементМера.Вставить("unitCount", Числитель);
				Если Знаменатель <> 0 Тогда
					ЭлементМера.Вставить("baseUnitCount", Знаменатель);
				КонецЕсли;
				
				ЕстьМерныеХарактеристики = Истина;
				
				ДанныеПакета = СоответствиеПолейЕдиницыИзмерения();
				ЭлементЕдиницаМеры = Новый Структура;
				Для каждого АтрибутПакета Из ДанныеПакета Цикл
					ЗначениеАтрибута = ДанныеБазы[ТекущаяМера + АтрибутПакета.Значение];
					Если ЗначениеЗаполнено(ЗначениеАтрибута)
						И (АтрибутПакета.Ключ <> "type" ИЛИ ПеречислениеТипыИзмеряемыхВеличин().НайтиПоЗначению(ЗначениеАтрибута) <> Неопределено) Тогда
						ЭлементЕдиницаМеры.Вставить(АтрибутПакета.Ключ, ЗначениеАтрибута);
					КонецЕсли;
				КонецЦикла;
				ЭлементМера.Вставить("unit", ЭлементЕдиницаМеры);
				
				ЭлементМерныеХарактеристики.Вставить(Мера.Значение, ЭлементМера);
			КонецЦикла;
			Если ЕстьМерныеХарактеристики = Истина Тогда
				ЭлементНоменклатура.Вставить("netMeasures", ЭлементМерныеХарактеристики);
			КонецЕсли;
			
			// Доп. реквизиты
			Если ЗначениеЗаполнено(ОбходРезультатов.СвойстваСлужебный) Тогда
				// Доп. реквизиты нужно найти с характеристикой - это будут атрибуты характеристики,
				// а так же с пустой характеристикой - это будут атрибуты товара
				ПоискСвойствБезХарактеристики = ОбщегоНазначения.СкопироватьРекурсивно(ПоискБезХарактеристики);
				ПоискСвойствБезХарактеристики.Вставить("РеквизитХарактеристики", Ложь);
				СтрокиВложеннойТаблицы = ОбходРезультатов.СвойстваСлужебный.НайтиСтроки(ПоискСвойствБезХарактеристики);
				
				ПоискСвойствСХарактеристикой = ОбщегоНазначения.СкопироватьРекурсивно(ПоискСХарактеристикой);
				ПоискСвойствСХарактеристикой.Вставить("РеквизитХарактеристики", Истина);
				СвойстваСХарактеристикой = ОбходРезультатов.СвойстваСлужебный.НайтиСтроки(ПоискСвойствСХарактеристикой);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиВложеннойТаблицы, СвойстваСХарактеристикой);
				
				ТаблицаДанных = СортированнаяТаблицаДанныхВыгрузки(СтрокиВложеннойТаблицы);
				
				Атрибуты = Новый Массив;
				Для каждого СтрокаДанных Из ТаблицаДанных Цикл
					ЭлементАтрибут = Новый Структура;
					ЭлементАтрибут.Вставить("characteristicsAttribute", СтрокаДанных.РеквизитХарактеристики = Истина);
					
					ЭлементОписаниеАтрибута = Новый Структура;
					ЭлементОписаниеАтрибута.Вставить("name", Строка(СтрокаДанных.Свойство));
					ЗначениеСвойства      = СтрокаДанных.Значение;
					ЗначениеПредставление = СтрокаДанных.ЗначениеПредставление;
					ЗначениеПростогоТипа   = Ложь;
					Для каждого ТекущийТип Из СоответствиеТипов Цикл
						Если ТипЗнч(ЗначениеСвойства) = Тип(ТекущийТип.Ключ) Тогда
							ЭлементОписаниеАтрибута.Вставить("type", ТекущийТип.Значение);
							ЭлементОписаниеАтрибута.Вставить("value", XMLСтрока(ЗначениеСвойства));
							ЗначениеПростогоТипа = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеПростогоТипа = Ложь Тогда
						ЭлементОписаниеАтрибута.Вставить("type", "enumeration");
						ЭлементОписаниеАтрибута.Вставить("value", ?(ЗначениеЗаполнено(ЗначениеПредставление), ЗначениеПредставление, Строка(ЗначениеСвойства)));
						ЭлементОписаниеАтрибута.Вставить("valueId", XMLСтрока(ЗначениеСвойства));
					КонецЕсли;
					ЭлементАтрибут.Вставить("userDescription", ЭлементОписаниеАтрибута);
					
					Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторРеквизитаКатегории) Тогда
						ЭлементСсылкаНоменклатура = Новый Структура;
						ЭлементСсылкаНоменклатура.Вставить("id", СтрокаДанных.ИдентификаторРеквизитаКатегории);
						Если ЗначениеЗаполнено(СтрокаДанных.ПредставлениеЗначения) Тогда
							ЭлементСсылкаНоменклатура.Вставить("value", СтрокаДанных.ПредставлениеЗначения);
						Иначе 
							ЭлементСсылкаНоменклатура.Вставить("value", ЭлементОписаниеАтрибута["value"]);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторЗначения) Тогда
							ЭлементСсылкаНоменклатура.Вставить("valueId", СтрокаДанных.ИдентификаторЗначения);
						КонецЕсли;
						ЭлементАтрибут.Вставить("ref1cNomenclature", ЭлементСсылкаНоменклатура);
					КонецЕсли;
					
					Атрибуты.Добавить(ЭлементАтрибут);
				КонецЦикла;
				
				Если Атрибуты.Количество() Тогда
					ЭлементНоменклатура.Вставить("attributes", Атрибуты);
				КонецЕсли;
			КонецЕсли;
			
			// свойства на основе псевдонимов
			Если ДополнительныеРеквизиты.Количество() Тогда
				Атрибуты = Новый Массив;
				Для каждого ПсевдонимРеквизита Из ДополнительныеРеквизиты Цикл
					ЗначениеРеквизита = СтрокаТаблицыТовары[ПсевдонимРеквизита];
					Если ЗначениеРеквизита <> Null Тогда
						Атрибуты.Добавить(Новый Структура("ref1cNomenclatureAlias", Новый Структура("alias, value", ПсевдонимРеквизита, ЗначениеРеквизита)));
					КонецЕсли;
				КонецЦикла;
				Если ЭлементНоменклатура.Свойство("attributes") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Атрибуты, ЭлементНоменклатура["attributes"]);
				КонецЕсли;
				ЭлементНоменклатура.Вставить("attributes", Атрибуты);
			КонецЕсли;
			
			// Категории
			Если ЗначениеЗаполнено(ОбходРезультатов.КатегорииСлужебный) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("id", "Категория");
				ДанныеПакета.Добавить("parentId", "Родитель");
				ДанныеПакета.Добавить("name", "Наименование");
				ДанныеПакета.Добавить("ref1CnCategoryId", "ИдентификаторКатегории");
				
				СтрокиВложеннойТаблицы = ОбходРезультатов.КатегорииСлужебный.НайтиСтроки(ПоискБезХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					ЭлементНоменклатура.Вставить("categories", КоллекцияДанных);
				КонецЕсли;
			КонецЕсли;
			
			// Штрихкоды
			Если ВыгружатьШтрихкоды И ЗначениеЗаполнено(ОбходРезультатов.Штрихкоды) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("barcode", "Штрихкод", Истина);
				ДанныеПакета.Добавить("packageId", "Упаковка");
				
				СтрокиВложеннойТаблицы = ОбходРезультатов.Штрихкоды.НайтиСтроки(ПоискСХарактеристикой);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					ЭлементНоменклатура.Вставить("barcodes", КоллекцияДанных);
				КонецЕсли;
			КонецЕсли;
			
			// Упаковки
			Если ЗначениеЗаполнено(ОбходРезультатов.Упаковки) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("id", "Ссылка", Истина);
				ДанныеПакета.Добавить("name", "Наименование", Истина);
				ДанныеПакета.Добавить("parentPackName", "РодительНаименование");
				ДанныеПакета.Добавить("parentPackId", "Родитель");
				ДанныеПакета.Добавить("unitOKEI", "ЕдиницаКодОКЕИ");
				ДанныеПакета.Добавить("unitName", "ЕдиницаНаименование");
				ДанныеПакета.Добавить("baseUnitCount", "Числитель");
				ДанныеПакета.Добавить("unitCount", "Знаменатель");
				
				СтрокиВложеннойТаблицы = СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ОбходРезультатов.Упаковки, 
					ПоискСХарактеристикой, ПустоеЗначениеХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					ЭлементНоменклатура.Вставить("packages", КоллекцияДанных);
				КонецЕсли;
			КонецЕсли;
			
			//Классификаторы
			Если ЗначениеЗаполнено(ОбходРезультатов.Классификаторы) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("name", "Наименование", Истина);
				ДанныеПакета.Добавить("code", "Код", Истина);
				ДанныеПакета.Добавить("description", "Описание");
				
				СтрокиВложеннойТаблицы = СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ОбходРезультатов.Классификаторы, 
					ПоискСХарактеристикой, ПустоеЗначениеХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					Если ЭлементНоменклатура.Свойство("classifiers") Тогда
						Для каждого ДанныеКлассификатора Из КоллекцияДанных Цикл
							ЭлементНоменклатура.classifiers.Добавить(ДанныеКлассификатора);
						КонецЦикла;
					Иначе 
						ЭлементНоменклатура.Вставить("classifiers", КоллекцияДанных);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Изображения
			Если ЗначениеЗаполнено(ОбходРезультатов.Изображения) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("id", "Файл", Истина);
				ДанныеПакета.Добавить("name", "Наименование", Истина);
				ДанныеПакета.Добавить("link", "Гиперссылка", Истина);
				
				СтрокиВложеннойТаблицы = СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ОбходРезультатов.Изображения, 
					ПоискСХарактеристикой, ПустоеЗначениеХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					ЭлементНоменклатура.Вставить("images", КоллекцияДанных);
				КонецЕсли;
			КонецЕсли;
			
			//Вложения
			Если ЗначениеЗаполнено(ОбходРезультатов.Вложения) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("id", "Файл", Истина);
				ДанныеПакета.Добавить("name", "Наименование", Истина);
				ДанныеПакета.Добавить("link", "Гиперссылка", Истина);
				
				СтрокиВложеннойТаблицы = СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ОбходРезультатов.Вложения, 
					ПоискСХарактеристикой, ПустоеЗначениеХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					ЭлементНоменклатура.Вставить("attachments", КоллекцияДанных);
				КонецЕсли;
			КонецЕсли;
			
			//Сертификаты
			Если ЗначениеЗаполнено(ОбходРезультатов.Сертификаты) Тогда
				ДанныеПакета = Новый СписокЗначений;
				ДанныеПакета.Добавить("number", "Номер", Истина);
				ДанныеПакета.Добавить("issuedDate", "ДатаНачалаСрокаДействия", Истина);
				ДанныеПакета.Добавить("validUntilDate", "ДатаОкончанияСрокаДействия");
				ДанныеПакета.Добавить("type", "ТипСертификата");
				ДанныеПакета.Добавить("issuedBy", "ОрганВыдавшийДокумент");
				ДанныеПакета.Добавить("Сертификат", "Сертификат");
				
				СтрокиВложеннойТаблицы = СтрокиДополнительнойТаблицыПоНоменклатуреИХарактеристике(ОбходРезультатов.Сертификаты, 
					ПоискСХарактеристикой, ПустоеЗначениеХарактеристики);
				КоллекцияДанных        = КоллекцияДанныхВыгрузки(СтрокиВложеннойТаблицы, ДанныеПакета);
				Если КоллекцияДанных.Количество() Тогда
					Для каждого ЭлементКоллекции Из КоллекцияДанных Цикл
						ДанныеПакета = Новый СписокЗначений;
						ДанныеПакета.Добавить("id", "Файл", Истина);
						ДанныеПакета.Добавить("name", "Наименование", Истина);
						ДанныеПакета.Добавить("link", "Гиперссылка", Истина);
						Если ЗначениеЗаполнено(ОбходРезультатов.ВложенияСертификатов) Тогда
							ПоискВложений        = Новый Структура("Сертификат", ЭлементКоллекции.Сертификат);
							ВложенияСертификатов = ОбходРезультатов.ВложенияСертификатов.НайтиСтроки(ПоискВложений);
							ОписаниеВложений     = КоллекцияДанныхВыгрузки(ВложенияСертификатов, ДанныеПакета);
							Если ОписаниеВложений.Количество() Тогда
								ЭлементКоллекции.Вставить("attachments", ОписаниеВложений);
							КонецЕсли;
						КонецЕсли;
						ЭлементКоллекции.Удалить("Сертификат");
					КонецЦикла;
					Если ЭлементНоменклатура.Свойство("certificates") Тогда
						Для каждого ДанныеСертификата Из КоллекцияДанных Цикл
							ЭлементНоменклатура.certificates.Добавить(ДанныеСертификата);
						КонецЦикла;
					Иначе 
						ЭлементНоменклатура.Вставить("certificates", КоллекцияДанных);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПоляНоменклатуры <> "" Тогда
				ДополнительныеДанные = ОбходРезультатов.ТоварыСлужебный.Скопировать(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицыТовары), ДополнительныеПоляНоменклатуры);
				ЭлементНоменклатура.Вставить("additionalData", МассивИзТаблицы(ДополнительныеДанные));
			КонецЕсли;
			
			Если ЭлементНоменклатура.Свойство("barcodes") Тогда
				ЭлементШтрихкоды = ЭлементНоменклатура.barcodes;
				ЭлементНоменклатура.Удалить("barcodes");
				Хеш = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗначениеВФорматJSON(ЭлементНоменклатура));
				ЭлементНоменклатура.Вставить("barcodes", ЭлементШтрихкоды);
			Иначе
				Хеш = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗначениеВФорматJSON(ЭлементНоменклатура));
			КонецЕсли;
			ЗаписьНабором = Истина;
			СтрокиТаблицыСостояния = ТаблицаСостояния.НайтиСтроки(ПоискСХарактеристикой);
			Если СтрокиТаблицыСостояния.Количество() Тогда
				СтрокаСостояния = СтрокиТаблицыСостояния[0];
				Если СтрокаСостояния.Хеш = Хеш
					И СтрокаСостояния.Состояние = Перечисления.СостоянияВыгрузкиНоменклатуры.Принята Тогда
					Если Счетчик = 0 ИЛИ Счетчик % КоличествоЗаписейВФиде = 0 Тогда
						// Если создан новый пакет данных, но позиция в него не добавляется, то следует обнулить идентификатор, иначе он будет записан пустым
						КорневойЭлемент.id = "";
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ЗаписьНабором = СтрокаСостояния.ЗаписьНабором;
			КонецЕсли;
			
			КорневойЭлемент.nomenclatureItems.Добавить(ЭлементНоменклатура);
			ЭлементПакета = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", ДанныеБазы.Номенклатура, ДанныеБазы.Характеристика);
			ЭлементПакета.Вставить("Хеш", Хеш);
			ЭлементПакета.Вставить("ЗаписьНабором", ЗаписьНабором);
			ЗаполнитьЗначенияСвойств(НоменклатураПакета.Добавить(), ЭлементПакета);
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ОбработаноПорцийДанных      = ОбработаноПорцийДанных + 1;
	
		Если ЗначениеЗаполнено(КорневойЭлемент.id) Тогда
			// последний файл записывается по завершении цикла
			ОписаниеПакетаДанных = Новый Структура("НоменклатураПакета, ПакетДанных", НоменклатураПакета.Скопировать(), КорневойЭлемент);
			ЗаписатьФайлДанных(ОписаниеПакетаДанных, ПакетыДанных);
			СообщитьПрогрессВыгрузкиПоОрганизации(Организация, СтрШаблон(НСтр("ru = 'Выгружается...(выгружено %1)'"), Счетчик));
		КонецЕсли;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Счетчик/1000);
	
	Если Счетчик = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	УспешноОтправлены = ОтправитьДанныеНоменклатурыНаСервер(ПараметрыТелаЗапроса, ЗаголовкиЗапроса, ПакетыДанных);
	Если УспешноОтправлены > 0 Тогда
		Если УспешноОтправлены = Счетчик Тогда
			СообщитьПрогрессВыгрузкиПоОрганизации(Организация, НСтр("ru = 'Данные отправлены успешно'"));
		Иначе 
			СообщитьПрогрессВыгрузкиПоОрганизации(Организация, НСтр("ru = 'Данные отправлены частично'"));
		КонецЕсли;
		ОбновитьСостояниеВыгрузки(ОбщиеПараметры, ПакетыДанных);
	КонецЕсли;
	
	Возврат УспешноОтправлены;
	
КонецФункции

Процедура ЗаписатьФайлДанных(ОписаниеПакета, Пакеты)
	
	ДанныеФайла = ОписаниеПакета.ПакетДанных;
	ПутьКФайлу  = ПолучитьИмяВременногоФайла("json");
	ФайлДанных = Новый ТекстовыйДокумент;
	ФайлДанных.УстановитьТекст(ЗначениеВФорматJSON(ДанныеФайла));
	ФайлДанных.Записать(ПутьКФайлу);
	
	ПутьКАрхиву = ПолучитьИмяВременногоФайла("zip");
	Архив       = Новый ЗаписьZipФайла(ПутьКАрхиву);
	Архив.Добавить(ПутьКФайлу);
	Архив.Записать();
	УдалитьВременныйФайл(ПутьКФайлу);
	
	ОписаниеПакета.Вставить("ПутьКАрхиву", ПутьКАрхиву);
	ОписаниеПакета.Вставить("Отправлено", ОписаниеПакета.НоменклатураПакета.Количество());
	
	Пакеты.Вставить(ДанныеФайла.id, ОписаниеПакета);
	
КонецПроцедуры

Функция ОтправитьДанныеНоменклатурыНаСервер(ПараметрыТелаЗапроса, ЗаголовкиЗапроса, Пакеты)
	
	Если Пакеты.Количество() = 0 Тогда
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при выгрузке номенклатуры. Пакеты данных не сформированы'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.ОтправитьДанныеНоменклатурыНаСервер'",
		ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		Возврат -1;
	КонецЕсли;
	
	КлючеваяОперация = "ОбщийМодуль.РаботаСНоменклатуройСлужебный.ОтправитьФайлыВыгрузкиНоменклатуры";
	ОписаниеЗамера   = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	Успешно          = 0;
	ПараметрыКоманды = ПараметрыКомандыВыгрузкаНоменклатуры();
	Для каждого Пакет Из Пакеты Цикл
		// запись файла данных
		ИдентификаторПакетаДанных = Пакет.Ключ;
		ОписаниеПакета            = Пакет.Значение;
		
		ПараметрыТелаЗапроса.Вставить("feedId", ИдентификаторПакетаДанных);
		ПараметрыТелаЗапроса.Вставить("dataFile", XMLСтрока(Новый ДвоичныеДанные(ОписаниеПакета.ПутьКАрхиву)));
		
		// Установка параметров запроса.
		Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
		Запрос.Заголовки.Вставить("Content-Type", "application/json");
		Для каждого ЗаголовокЗапроса Из ЗаголовкиЗапроса Цикл
			Запрос.Заголовки.Вставить(ЗаголовокЗапроса.Ключ, ЗаголовокЗапроса.Значение);
		КонецЦикла;
		// Установка данных.
		Запрос.УстановитьТелоИзСтроки(ЗначениеВФорматJSON(ПараметрыТелаЗапроса));
		
		// Выполнение запроса HTTP к сервису.
		Ответ = ОтветСервисаВыгрузкиНоменклатуры(Запрос, ПараметрыКоманды);
		Если ТипЗнч(Ответ) <> Тип("HTTPОтвет") Тогда
			Возврат -1;
		КонецЕсли;
		
		КодСостояния = Ответ.КодСостояния;
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если КодСостояния = 201 Тогда
			ОписаниеПакета.Вставить("ИдентификаторПакетаСервиса", СтрокаОтвета);
		Иначе
			ОписаниеПакета.Отправлено = 0;
			Если КодСостояния = 400 Тогда
				ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, СтрокаОтвета);
			Иначе
				СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'КодСостояния: %1; строка ответа %2'"), КодСостояния, СтрокаОтвета);
				ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
		Успешно = Успешно + ОписаниеПакета.Отправлено;
		
		УдалитьВременныйФайл(ОписаниеПакета.ПутьКАрхиву);
	КонецЦикла;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Пакеты.Количество()/10);
	
	Возврат Успешно;
	
КонецФункции

Процедура ОбновитьСостояниеВыгрузки(ОбщиеПараметры, Пакеты)

	КлючеваяОперация = "ОбщийМодуль.РаботаСНоменклатуройСлужебный.ОбновитьСостоянияВыгрузкиНоменклатуры";
	ОписаниеЗамера   = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	Организация      = ОбщиеПараметры.Организация;
	
	Сч = 0;
	КоэффициентПорцииПрогресса = 1000;
	Для каждого Пакет Из Пакеты Цикл
		ОписаниеПакета = Пакет.Значение;
		Если НЕ ОписаниеПакета.Свойство("ИдентификаторПакетаСервиса") Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПакетаСервиса = ОписаниеПакета.ИдентификаторПакетаСервиса;
		Если ПустаяСтрока(ИдентификаторПакетаСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сч > 0 И Сч % КоэффициентПорцииПрогресса = 0 Тогда
			СообщитьПрогрессВыгрузкиПоОрганизации(Организация, СтрШаблон(НСтр("ru = 'Обновление состояний: %1'"), Сч));
			Если Цел(Сч / КоэффициентПорцииПрогресса) % 10 = 0 Тогда
				КоэффициентПорцииПрогресса = КоэффициентПорцииПрогресса * 10;
			КонецЕсли;
		КонецЕсли;
		
		НоменклатураПакета = ОписаниеПакета.НоменклатураПакета;
		ЗаписиМенеджером   = НоменклатураПакета.НайтиСтроки(Новый Структура("ЗаписьНабором", Ложь));
		Для каждого СтрокаДляЗаписиВРегистр Из ЗаписиМенеджером Цикл
			Запись = РегистрыСведений.СостоянияВыгрузкиНоменклатуры.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ОбщиеПараметры);
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДляЗаписиВРегистр);
			Запись.ИдентификаторПакетаДанных = ИдентификаторПакетаСервиса;
			Запись.Записать();
			Сч = Сч + 1;
			НоменклатураПакета.Удалить(СтрокаДляЗаписиВРегистр);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СостоянияВыгрузкиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		КлючиНаборов = НоменклатураПакета.Скопировать(, "Номенклатура");
		КлючиНаборов.Свернуть("Номенклатура");
		КлючиНаборов = КлючиНаборов.ВыгрузитьКолонку("Номенклатура");
		Для каждого Номенклатура Из КлючиНаборов Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			ЗаписиНабора = НоменклатураПакета.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
			Для каждого ЗаписьНабора Из ЗаписиНабора Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ОбщиеПараметры);
				ЗаполнитьЗначенияСвойств(Запись, ЗаписьНабора);
				Запись.ИдентификаторПакетаДанных = ИдентификаторПакетаСервиса;
				Сч = Сч + 1;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Сч/1000);

КонецПроцедуры

Функция КоличествоПроблемЗаполненияНоменклатуры(Организация, ЛимитЗаписей = Неопределено)
	
	Если ЛимитЗаписей = Неопределено Тогда
		ЛимитЗаписей = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	1
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(ЛимитЗаписей, "ЧГ="));
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

Процедура ВыгрузкаНоменклатурыЗаписьЖурналаРегистрации(ПараметрыКоманды, ПодробныйТекстОшибки, ТекстОшибки = "")
	
	Если ТекстОшибки = "" Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
	КонецЕсли;
	
	ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС + ПодробныйТекстОшибки;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначения.КодОсновногоЯзыка())
	+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
	
КонецПроцедуры

Функция ДанныеАрхиваJSON(ДвоичныеДанныеФайла)
	
	КаталогФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
	ДанныеАрхива  = Новый Массив;
	
	// Разбор данных архива.
	Попытка
		Поток = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ЧтениеАрхива = Новый ЧтениеZipФайла(Поток);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Извлечение данных из архива'", ОбщегоНазначения.КодОсновногоЯзыка())
		, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ДанныеАрхива;
	КонецПопытки;

	ЧтениеАрхива.ИзвлечьВсе(КаталогФайлов);
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	
	Файлы = НайтиФайлы(КаталогФайлов, "*.json");
	Для каждого Файл Из Файлы Цикл
		ДанныеОтвета = Новый ТекстовыйДокумент;
		Попытка
			ДанныеОтвета.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		Исключение
			Продолжить;
		КонецПопытки;
		ДанныеОтвета = ДанныеОтвета.ПолучитьТекст();
		Если НЕ ЗначениеЗаполнено(ДанныеОтвета) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеОтвета = ЗначениеИзСтрокиJSON(ДанныеОтвета);
		Если ЗначениеЗаполнено(ДанныеОтвета) Тогда
			ДанныеАрхива.Добавить(ДанныеОтвета);
		КонецЕсли;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйФайл(КаталогФайлов);
	
	Возврат ДанныеАрхива;
	
КонецФункции

Функция РеквизитыНоменклатуры()
	РеквизитыНоменклатуры = Новый Структура;
	Для каждого РеквизитДляВыгрузки Из Метаданные.Перечисления.РеквизитыНоменклатурыДляВыгрузки.ЗначенияПеречисления Цикл
		Если СтрНайти(РеквизитДляВыгрузки.Синоним, ".") = 0 Тогда
			РеквизитыНоменклатуры.Вставить(РеквизитДляВыгрузки.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат РеквизитыНоменклатуры;
КонецФункции

Функция СопоставленныеРеквизиты(ПроверяемыеРеквизиты = Неопределено, ДобавитьКлассификаторы = Истина, ДобавитьСертификаты = Истина)
	
	СопоставленныеРеквизиты = Новый Массив;
	ТекстЗапроса            = ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками();
	Запрос                  = Новый Запрос(ТекстЗапроса);
	
	Если ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос) <> Истина Тогда
		Возврат СопоставленныеРеквизиты;
	КонецЕсли;
	
	// Специальные ("фиктивные") формализованные реквизиты - Сертификаты и Классификаторы обрабатываются особым образом
	// Сертификаты считаются заполненными в случае, если таблица Сертификаты присутствует в запросе
	// С Классификаторами ситуация аналогична, но дополнительно так же проверяется наличие конкретных классификаторов - ТНВЭД, ОКПД2 и ОКВЭД2
	
	Классификаторы = Новый Структура;
	Классификаторы.Вставить("КлассификаторыТНВЭД", "&ТНВЭД");
	Классификаторы.Вставить("КлассификаторыОКПД2", "&ОКПД2");
	Классификаторы.Вставить("КлассификаторыОКВЭД2", "&ОКВЭД2");
	
	Если ПроверяемыеРеквизиты = Неопределено Тогда
		ПроверяемыеРеквизиты = РеквизитыНоменклатуры();
	ИначеЕсли ТипЗнч(ПроверяемыеРеквизиты ) <> Тип("Структура") Тогда 
		Возврат СопоставленныеРеквизиты;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ЗапросПакета.ТаблицаДляПомещения = "Товары" Тогда
			Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
				КолонкаЗапроса = ЗапросПакета.Колонки.Найти(Реквизит.Ключ);
				Если КолонкаЗапроса = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ВсеПустые = Истина;
				Для каждого ПолеКолонки Из КолонкаЗапроса.Поля Цикл
					Если ТипЗнч(ПолеКолонки) = Тип("ВыражениеСхемыЗапроса") 
						И ПолеКолонки <> Новый ВыражениеСхемыЗапроса("NULL") Тогда
						ВсеПустые = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВсеПустые = Истина Тогда
					Продолжить;
				КонецЕсли;
				СопоставленныеРеквизиты.Добавить(Реквизит.Ключ);
			КонецЦикла;
		ИначеЕсли ДобавитьКлассификаторы = Истина И ЗапросПакета.ТаблицаДляПомещения = "Сертификаты" Тогда
			СопоставленныеРеквизиты.Добавить("СертификатыНомер");
			СопоставленныеРеквизиты.Добавить("СертификатыДатаНачалаСрокаДействия");
		ИначеЕсли ДобавитьСертификаты = Истина И ЗапросПакета.ТаблицаДляПомещения = "Классификаторы" Тогда
			ТекстЗапросаКлассификаторы = ЗапросПакета.ПолучитьТекстЗапроса();
			Для каждого Классификатор Из Классификаторы Цикл
				Если СтрНайти(ТекстЗапросаКлассификаторы, Классификатор.Значение) > 0 Тогда
					СопоставленныеРеквизиты.Добавить(Классификатор.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СопоставленныеРеквизиты;
	
КонецФункции

Процедура СообщитьПрогрессВыгрузкиПоОрганизации(Организация, ТекстСообщения)
	
	ПрогрессВыгрузки = Новый Структура("Организация, ТекстСообщения", XMLСтрока(Организация), ТекстСообщения);
	СообщитьПрогресс(ЗначениеВФорматJSON(ПрогрессВыгрузки));
	
	ОбновляемыеПараметры = НастройкаВыгрузкиНоменклатуры(Организация);
	ОбновляемыеПараметры.ВыгруженоПредставление = ТекстСообщения;
	СохранитьНастройкуВыгрузкиНоменклатуры(ОбновляемыеПараметры);
	
КонецПроцедуры

Процедура СообщитьПрогресс(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

КонецПроцедуры

Функция ЭтоСправочник(Параметр)
	
	Возврат ОбщегоНазначения.ЗначениеСсылочногоТипа(Параметр) И ОбщегоНазначения.ВидОбъектаПоСсылке(Параметр) = "Справочник";
	
КонецФункции

Функция МассивИзТаблицы(Таблица)
	
	Результат = Новый Массив;
	Для каждого СтрокаДанных Из Таблица Цикл
		СтрокаРезультата = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			ТекущееСвойство = Колонка.Имя;
			ТекущееЗначение = СтрокаДанных[ТекущееСвойство];
			ТекущийТип      = ТипЗнч(ТекущееЗначение);
			ИмяКлюча        = "value";
			Если ТекущийТип = Тип("Булево")
				Или ТекущийТип = Тип("Строка")
				Или ТекущийТип = Тип("Число")
				Или ТекущийТип = Тип("Дата") Тогда
				// преобразование не требуется
			ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
				ТекущееЗначение = XMLСтрока(ТекущееЗначение);
			ИначеЕсли ТекущийТип = Тип("ТаблицаЗначений") Тогда
				ТекущееЗначение = МассивИзТаблицы(ТекущееЗначение);
				ИмяКлюча        = "object";
			Иначе 
				ТекущееЗначение = Строка(ТекущееЗначение);
			КонецЕсли;
			СтрокаРезультата.Добавить(Новый Структура(СтрШаблон("property, %1", ИмяКлюча), ТекущееСвойство, ТекущееЗначение));
		КонецЦикла;
		Результат.Добавить(СтрокаРезультата);
	КонецЦикла;
	
	Если Результат.Количество() = 1 Тогда
		Результат = Результат[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив идентификаторов категорий 1С:Номенклатуры по товарной группе.
//
// Параметры:
//  ТоварнаяГруппа - Строка.
// 
// Возвращаемое значение:
//  Массив из Строка - идентификаторы категорий 1С:Номенклатуры.
//
Функция КатегорииТоварнойГруппы(ТоварнаяГруппа)
	
	Результат      = Новый Массив;
	ОтветСтрока    = РаботаСНоменклатуройСлужебныйПовтИсп.КатегорииТоварныхГрупп();
	ОтветСтруктура = ЗначениеИзСтрокиJSON(ОтветСтрока, Истина);
	Если ТипЗнч(ОтветСтруктура) <> Тип("Соответствие") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ОтветСтруктура.Получить(ТоварнаяГруппа);
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает товарную группу 1С:Номенклатуры по идентификатору категории.
//
// Параметры:
//  ИдентификаторКатегории - идентификаторы категорий 1С:Номенклатуры.
// 
// Возвращаемое значение:
//  Строка - товарная группа 1С:Номенклатуры.
//
Функция ТоварнаяГруппаКатегории(ИдентификаторКатегории)
	
	Результат      = "";
	ОтветСтрока    = РаботаСНоменклатуройСлужебныйПовтИсп.КатегорииТоварныхГрупп();
	ОтветСтруктура = ЗначениеИзСтрокиJSON(ОтветСтрока, Истина);
	Если ТипЗнч(ОтветСтруктура) <> Тип("Соответствие") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого КатегорииГруппы Из ОтветСтруктура Цикл
		Если ТипЗнч(КатегорииГруппы.Значение) = Тип("Массив")
			И КатегорииГруппы.Значение.Найти(ИдентификаторКатегории) <> Неопределено Тогда
			Результат = КатегорииГруппы.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СопоставленныеРеквизитыТоварнойГруппы(ТоварнаяГруппа) 
	
	ИдентификаторыРеквизитов = Новый Массив;
	ДополнительныеРеквизиты  = ДополнительныеРеквизитыТоварнойГруппы(ТоварнаяГруппа);
	СопоставленныеРеквизиты  = СопоставленныеРеквизиты(ДополнительныеРеквизиты, Ложь, Ложь);
	
	Для каждого Реквизит Из СопоставленныеРеквизиты Цикл
		ДополнитьМассив(ИдентификаторыРеквизитов, ДополнительныеРеквизиты[Реквизит]);
	КонецЦикла;
	
	Возврат ИдентификаторыРеквизитов;
	
КонецФункции

// Возвращает структуру доп.реквизитов 1С:Номенклатуры по товарной группе,
//  либо массив псевдонимов доп.реквизитов, если в качестве параметра передана пустая строка.
// ВАЖНО: если ТоварнаяГруппа = "", то возвращается полный список всех псевдонимов всех доп.реквизитов по всем товарным группам,
//  иначе возвращается структура доп.реквизитов по переданной товарной группе
//
// Параметры:
//  ТоварнаяГруппа - Строка.
// 
// Возвращаемое значение:
//  - Структура - ключи - псевдонимы доп.реквизитов, значения - массивы идентификаторов.
//  - Массив из Строка - псевдонимы доп.реквизитов.
//
Функция ДополнительныеРеквизитыТоварнойГруппы(ТоварнаяГруппа = "")
	
	Результат      = Новый Массив;
	ОтветСтрока    = РаботаСНоменклатуройСлужебныйПовтИсп.ДополнительныеРеквизитыТоварныхГрупп();
	ОтветСтруктура = ЗначениеИзСтрокиJSON(ОтветСтрока);
	
	Если ТипЗнч(ОтветСтруктура) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТоварнаяГруппа = "" Тогда
		Для каждого ЭлементОтвета Из ОтветСтруктура Цикл
			ДополнительныеРеквизиты = ЭлементОтвета.Значение;
			Если ТипЗнч(ДополнительныеРеквизиты) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
				Результат.Добавить(ДополнительныйРеквизит.Ключ);
			КонецЦикла;
		КонецЦикла;
		Результат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	Иначе
		ОтветСтруктура.Свойство(ТоварнаяГруппа, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТоварныхГрупп(ТоварныеГруппыСервиса, ФорматнаяСтрока = "ПД=Дательный")
	
	ЗаголовокТоварныхГрупп = "";
	ТоварныеГруппы         = Новый Структура;
	Для каждого ТоварнаяГруппа Из ТоварныеГруппыСервиса Цикл
		ТоварныеГруппы.Вставить(ТоварнаяГруппа);
	КонецЦикла;
	РаботаСНоменклатуройПереопределяемый.ПредставлениеТоварныхГрупп(ЗаголовокТоварныхГрупп, ТоварныеГруппы);
	
	Если ЗаголовокТоварныхГрупп = "" Тогда
		ЗаголовокТоварныхГрупп = НСтр("ru = 'товарная группа'");
		БазовоеОписание = РаботаСНоменклатурой.ТоварныеГруппыСервиса();
		Для каждого ТоварнаяГруппа Из ТоварныеГруппы Цикл
			ОписаниеТоварнойГруппы = Неопределено;
			Если БазовоеОписание.Свойство(ТоварнаяГруппа.Ключ, ОписаниеТоварнойГруппы) Тогда
				ТоварнаяГруппа.Значение = ОписаниеТоварнойГруппы.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеТоварныхГрупп = Новый Массив;
	Для каждого ТоварнаяГруппа Из ТоварныеГруппы Цикл
		ПредставлениеТоварныхГрупп.Добавить(ТоварнаяГруппа.Значение);
	КонецЦикла;
	Если ПредставлениеТоварныхГрупп.Количество() > 1 Тогда
		ЗаголовокСклонение = ПолучитьСклоненияСтрокиПоЧислу(ЗаголовокТоварныхГрупп, ТоварныеГруппыСервиса.Количество(),,, ФорматнаяСтрока)[0];
		ЗаголовокСклонение = ЗаголовокСклонение + ":";
	Иначе 
		ЗаголовокСклонение = ПолучитьСклоненияСтроки(ЗаголовокТоварныхГрупп,, ФорматнаяСтрока)[0];
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокТоварныхГрупп", ЗаголовокТоварныхГрупп);
	Результат.Вставить("Представление", СтрШаблон("%1 ""%2""", ЗаголовокСклонение, СтрСоединить(ПредставлениеТоварныхГрупп, """, """)));
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьОшибкиЗаполненияНоменклатуры(Запрос, НастройкаВыгрузки, ПодготовитьЗапрос = Истина)
	
	ЕстьПроблемы      = Истина;
	РезультатПроверки = Неопределено;
	ПроверитьЗаполнениеНоменклатуры(Запрос, НастройкаВыгрузки, ПодготовитьЗапрос, РезультатПроверки);
	Если ТипЗнч(РезультатПроверки) = Тип("Структура") Тогда
		ЕстьПроблемы = Не РезультатПроверки.Категории Или РезультатПроверки.Проблемы.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьПроблемы;
	
КонецФункции

Функция ТекстЗапросаВыгружаемаяНоменклатураСХарактеристиками(ПоместитьВоВременнуюТаблицу = Ложь, ЛимитЗаписей = 0)
	
	ИспользоватьПодбор = РаботаСНоменклатурой.ИспользоватьПодборНоменклатурыСХарактеристиками();
	Если Не ИспользоватьПодбор Тогда
		Возврат ТекстЗапросаВыгружаемаяНоменклатура(ПоместитьВоВременнуюТаблицу, ЛимитЗаписей);
	КонецЕсли;
	
	СхемаЗапроса = СхемаЗапросаВыгружаемаяНоменклатураСХарактеристиками();
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция СхемаЗапросаВыгружаемаяНоменклатураСХарактеристиками(УсловиеСоединения = "")
	
	СхемаЗапроса        = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаОтборНоменклатуры());
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Номенклатура");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	ОсновнойИсточник    = ОсновнойЗапрос.Операторы[0].Источники[0];
	СостоянияВыгрузки   = ОсновнойЗапрос.Операторы[0].Источники.Добавить("РегистрСведений.СостоянияВыгрузкиНоменклатуры");
	ИспользоватьПодбор  = РаботаСНоменклатурой.ИспользоватьПодборНоменклатурыСХарактеристиками();
	Если ТипЗнч(УсловиеСоединения) <> Тип("Строка") Или ПустаяСтрока(УсловиеСоединения) Тогда 
		УсловиеСоединения = "СостоянияВыгрузкиНоменклатуры.Организация = &Организация
		|	И %1 = СостоянияВыгрузкиНоменклатуры.Номенклатура
		|	И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний)";
	КонецЕсли;
	СостоянияВыгрузки.Соединения.Очистить();
	СостоянияВыгрузки.Источник.Псевдоним = "СостоянияВыгрузкиНоменклатуры";
	ОсновнойИсточник.Соединения.Добавить(СостоянияВыгрузки, СтрШаблон(УсловиеСоединения, ПолеНоменклатура));
	ОсновнойИсточник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
	ВыражениеХарактеристика = "ВЫБОР
	|	КОГДА СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры = &ПустоеЗначениеХарактеристики
	|		ТОГДА NULL
	|	ИНАЧЕ СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры
	|КОНЕЦ";
	Если ИспользоватьПодбор Тогда
		ВыражениеХарактеристика = "СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры";
	КонецЕсли;
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеХарактеристика);
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "Характеристика";
	
	ОсновнойЗапрос.Операторы[0].ВыраженияОтбораКомпоновкиДанных.Очистить();
	ОсновнойЗапрос.Характеристики.Очистить();
	ОсновнойЗапрос.ТаблицаДляПомещения = "ОтборНоменклатуры";
	
	Возврат СхемаЗапроса;
	
КонецФункции

Процедура УдалитьЗаписиРегистраПоСписку(Организация, МассивДанных)
	
	Перем Характеристика;
	
	Для каждого КлючЗаписи Из МассивДанных Цикл
		Если ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.СостоянияВыгрузкиНоменклатуры") Тогда
			Номенклатура   = КлючЗаписи.Номенклатура;
			Характеристика = КлючЗаписи.КлючЗаписи.Номенклатура; 
		Иначе 
			Номенклатура = КлючЗаписи;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.СостоянияВыгрузкиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		Если Характеристика <> Неопределено Тогда
			НаборЗаписей.Отбор.Номенклатура.Установить(Характеристика);					
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТипыДанных

Функция ЭтоВидНоменклатуры(Знач ПроверяемыйПараметр)
	Если ТипЗнч(ПроверяемыйПараметр) <> Тип("Тип") Тогда
		ПроверяемыйПараметр = ТипЗнч(ПроверяемыйПараметр);
	КонецЕсли;
	Возврат Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.СодержитТип(ПроверяемыйПараметр);
КонецФункции

Функция ЭтоНоменклатура(Знач ПроверяемыйПараметр) Экспорт 
	Если ТипЗнч(ПроверяемыйПараметр) <> Тип("Тип") Тогда
		ПроверяемыйПараметр = ТипЗнч(ПроверяемыйПараметр);
	КонецЕсли;
	Возврат Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.СодержитТип(ПроверяемыйПараметр);
КонецФункции

#КонецОбласти

#Область ДанныеОбработчиковОбновления

Процедура ДополнитьЧитаемыеИзменяемыеДанные(Обработчик, ЧитаемыеИзменяемыеДанные)
	
	Читаемые   = СтрРазделить(Обработчик.ЧитаемыеОбъекты, ",");
	Изменяемые = СтрРазделить(Обработчик.ИзменяемыеОбъекты, ",");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Читаемые, ЧитаемыеИзменяемыеДанные.Читаемые, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Изменяемые, ЧитаемыеИзменяемыеДанные.Изменяемые, Истина);
	
	Обработчик.ЧитаемыеОбъекты   = СтрСоединить(Читаемые, ",");
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеДействийВПовторе

#Область УправляющиеМетодыВыполненияДействийВПовторе

Функция ИспользоватьВыполнениеДействийВПовторе()
	
	Возврат Истина;
	
КонецФункции

Функция НовыйРезультатДействия()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат");
	Результат.Вставить("ТекстСообщения", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыПовтора()
	
	Параметры = Новый Структура;
	Параметры.Вставить("НомерПовтора", 0);
	Параметры.Вставить("КоличествоПовторов", 3);
	Параметры.Вставить("ВремяОжидания", 3);
	Параметры.Вставить("ПриращениеТаймаута", 3);
	Параметры.Вставить("ПриращениеСуммированием", Истина);
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыполнитьПаузуПовтора(ПараметрыПовтора)
	
	Пауза(ПараметрыПовтора.ВремяОжидания);
	
	ПараметрыПовтора.НомерПовтора = ПараметрыПовтора.НомерПовтора + 1;
	Если ПараметрыПовтора.ПриращениеСуммированием Тогда
		ПараметрыПовтора.ВремяОжидания = ПараметрыПовтора.ВремяОжидания + ПараметрыПовтора.ПриращениеТаймаута;
	Иначе 
		ПараметрыПовтора.ВремяОжидания = ПараметрыПовтора.ВремяОжидания * ПараметрыПовтора.ПриращениеТаймаута;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьДействиеВПовторе(Действие, ПараметрыДействия, ПараметрыПовтора)
	
	ВыполнятьПовтор = (ПараметрыПовтора.НомерПовтора <= ПараметрыПовтора.КоличествоПовторов);
	
	Если Действие = "ЗапросКСервису" Тогда
		Результат = ЗапросКСервису(ПараметрыДействия);
	Иначе 
		Результат = НовыйРезультатДействия();
	КонецЕсли;
	
	Если Результат.Результат = Неопределено Тогда
		Если ВыполнятьПовтор Тогда
			ВыполнитьПаузуПовтора(ПараметрыПовтора);
			Возврат ВыполнитьДействиеВПовторе(Действие, ПараметрыДействия, ПараметрыПовтора);
		ИначеЕсли Не ПустаяСтрока(Результат.ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(Результат.ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат.Результат;
	
КонецФункции

#КонецОбласти

#Область ДействияВПовторе

Функция ЗапросКСервису(ПараметрыКоманды)
	
	Результат = НовыйРезультатДействия();
	
	Соединение = ПараметрыКоманды.СоединениеССервисом;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	Если ПараметрыКоманды.Аутентификация = Истина Тогда
		ЗаголовокАутентификации = ЗаголовокАутентификации(Соединение, ПараметрыКоманды);
		Если ЗаголовокАутентификации.Результат = Неопределено Тогда
			Возврат ЗаголовокАутентификации;
		Иначе
			HTTPЗапрос.Заголовки.Вставить("Authorization", ЗаголовокАутентификации.Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	РезультатДействия = РезультатДействияЗапросКСервису(Соединение, HTTPЗапрос, ПараметрыКоманды);
	
	Если РезультатДействия.Результат = Неопределено Тогда
		Возврат РезультатДействия;
	КонецЕсли;
	
	ОтветHTTP = РезультатДействия.Результат;
	Результат.Результат = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Возврат Результат;
	
КонецФункции

#Область Аутентификация

Функция ТикетАутентификацииНаПорталеПоддержки()
	
	Результат = НовыйРезультатДействия();
	
	УстановитьПривилегированныйРежим(Истина);
	ТикетАутентификацииИТС = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-nomenklatura");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ТикетАутентификацииИТС.КодОшибки) Тогда
		Результат.ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
			|%1'"), ТикетАутентификацииИТС.СообщениеОбОшибке);
	Иначе 
		Результат.Результат = ТикетАутентификацииИТС.Тикет;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокАутентификации(Соединение, ПараметрыКоманды)
	
	Если НРег(ПараметрыКоманды.ТипАутентификации) = "bearer" Тогда
		Результат = ТокенАутентификацииВСервисе(Соединение);
		Если Результат.Результат <> Неопределено Тогда
			Результат.Результат = СтрШаблон("Bearer %1", Результат.Результат);
		КонецЕсли;
	Иначе
		Результат = ТикетАутентификацииНаПорталеПоддержки();
		Префикс = "AUTH_TOKEN:";
		Если Результат.Результат = Неопределено Тогда
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Результат.Результат = СтрокаАнонимнойАутентификации();
			Иначе
				Результат.Результат = СтрокаАутентификацииПользователяИнтернетПоддержки();
				Префикс = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Результат.Результат) Тогда
			Результат.Результат = Неопределено;
		Иначе
			Результат.Результат = СтрШаблон("Basic %1", СтрокаBase64БезBOM(Префикс + Результат.Результат));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СтрокаАутентификацииПользователяИнтернетПоддержки()
	
	Результат = "";
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат = СтрШаблон("%1:%2", ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаАнонимнойАутентификации()
	
	Возврат "anonymous";
	
КонецФункции

#Область АутентификацияПоТокену

Функция ТокенАутентификацииВСервисе(Соединение)
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Пользователи.ТекущийПользователь(), ИдентификаторХраненияКлючаДоступа());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЭтоКлючДоступа(КлючДоступа) Тогда
		КлючДоступа = Неопределено;
		УдалитьТикетАутентификацииВСервисе();
	КонецЕсли;
	
	Если КлючДоступа = Неопределено Или Не СрокТокенаОбновленияАктуален(КлючДоступа) Тогда
		Результат = НовыйТокенАутентификацииВСервисе(Соединение);
	ИначеЕсли Не СрокТокенаДоступаАктуален(КлючДоступа) Тогда  
		Результат = ОбновленныйТокенАутентификацииВСервисе(КлючДоступа, Соединение); 
	Иначе 
		Результат = НовыйРезультатДействия();
		Результат.Результат = КлючДоступа.ТокенДоступа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТокенАутентификацииВСервисе(Соединение)
	
	ТикетАутентификацииИТС = ТикетАутентификацииНаПорталеПоддержки();
	Если ТикетАутентификацииИТС.Результат = Неопределено Тогда
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Возврат ТикетАутентификацииИТС;
		Иначе
			Возврат НовыйТокенАутентификацииПоЛогинуИПаролю(Соединение);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКоманды = НовыеПараметрыКоманды();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение токена'");
	ПараметрыКоманды.Адрес = "auth/token/by-its-onetime-ticket";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.ДопустимАнонимныйЗапрос = Ложь;
	ПараметрыКоманды. ТелоЗапроса = Новый Структура("itsOnetimeTicket", ТикетАутентификацииИТС.Результат);
	
	Возврат ТокенАутентификацииСервиса(Соединение, ПараметрыКоманды);
	
КонецФункции

Функция НовыйТокенАутентификацииПоЛогинуИПаролю(Соединение)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат НовыйРезультатДействия();
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("itsLogin", ДанныеАутентификации.Логин);
	ТелоЗапроса.Вставить("itsPassword", ДанныеАутентификации.Пароль);
	
	ПараметрыКоманды = НовыеПараметрыКоманды();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение токена'");
	ПараметрыКоманды.Адрес = "auth/token/by-its-credentials";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.ДопустимАнонимныйЗапрос = Ложь;
	ПараметрыКоманды.ТелоЗапроса = ЗначениеВФорматJSON(ТелоЗапроса);
	
	Возврат ТокенАутентификацииСервиса(Соединение, ПараметрыКоманды);
	
КонецФункции

Функция ОбновленныйТокенАутентификацииВСервисе(КлючДоступа, Соединение)
	
	ПараметрыКоманды = НовыеПараметрыКоманды();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Обновление токена'");
	ПараметрыКоманды.Адрес = "auth/token/refresh";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.ДопустимАнонимныйЗапрос = Ложь;
	ПараметрыКоманды.ТелоЗапроса = Новый Структура("refresh_token", КлючДоступа.ТокенОбновления);
	
	Возврат ТокенАутентификацииСервиса(Соединение, ПараметрыКоманды);
	
КонецФункции

Функция ТокенАутентификацииСервиса(Соединение, ПараметрыКоманды)
	
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	Запрос.Заголовки.Вставить("Content-Type", ТипКонтентаПриРаботеСТокенами());
	Запрос.УстановитьТелоИзСтроки(ЗначениеВФорматJSON(ПараметрыКоманды.ТелоЗапроса));
	
	ОтветСервиса = РезультатДействияЗапросКСервису(Соединение, Запрос, ПараметрыКоманды);
	Если ОтветСервиса.Результат = Неопределено Тогда
		Возврат ОтветСервиса;
	КонецЕсли;
	
	ТелоОтвета = ЗначениеИзСтрокиJSON(ОтветСервиса.Результат.ПолучитьТелоКакСтроку());
	
	ТикетАутентификацииВСервисе = ДанныеКлючаДоступаИзJSON(ТелоОтвета);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(),
		ТикетАутентификацииВСервисе, ИдентификаторХраненияКлючаДоступа());
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = НовыйРезультатДействия();
	Результат.Результат = ТикетАутентификацииВСервисе.ТокенДоступа;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторХраненияКлючаДоступа()
	
	Возврат "НоменклатураТикетАутентификации";
	
КонецФункции

Функция ЭтоКлючДоступа(КлючДоступа)
	
	Результат = Ложь;
	
	Если ТипЗнч(КлючДоступа) = Тип("Структура") Тогда
		Результат = КлючДоступа.Свойство("ТокенДоступа");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СрокТокенаДоступаАктуален(КлючДоступа)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		Результат = КлючДоступа.СрокДействияТокенаДоступа > ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СрокТокенаОбновленияАктуален(КлючДоступа)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		Результат = КлючДоступа.СрокДействияТокенаОбновления > ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКлючаДоступаИзJSON(ДанныеСервиса)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТокенДоступа",                    ДанныеСервиса.access_token);
	Результат.Вставить("ТокенОбновления",                 ДанныеСервиса.refresh_token);
	Результат.Вставить("СрокДействияТокенаДоступа",       ТекущаяДатаСеанса() + ДанныеСервиса.access_token_expires);
	Результат.Вставить("СрокДействияТокенаОбновления",    ТекущаяДатаСеанса() + ДанныеСервиса.refresh_token_expires);
	Результат.Вставить("ТипТокена",                       ДанныеСервиса.token_type);
	
	Возврат Результат;
	
КонецФункции

Функция ТипКонтентаПриРаботеСТокенами()
	
	Результат = "application/vnd.1cbn.v1+json";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция НовыеПараметрыКоманды()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование");
	ПараметрыКоманды.Вставить("Адрес");
	ПараметрыКоманды.Вставить("Метод");
	ПараметрыКоманды.Вставить("ДопустимАнонимныйЗапрос", Истина);
	ПараметрыКоманды.Вставить("ТелоЗапроса");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Процедура ВызватьHTTPМетодЗаписьЖурналаРегистрации(ПараметрыКоманды, ПодробныйТекстОшибки, ТекстОшибки = "")
	
	Если ТекстОшибки = "" Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
	КонецЕсли;
	
	ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС + ПодробныйТекстОшибки;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
	
КонецПроцедуры

Функция ОтветСервиса(Соединение, Запрос, ПараметрыКоманды)
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ПараметрыКоманды.Метод, Запрос);
	Исключение
		ВызватьHTTPМетодЗаписьЖурналаРегистрации(ПараметрыКоманды, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РезультатДействияЗапросКСервису(Соединение, Запрос, ПараметрыКоманды)
	
	Результат = НовыйРезультатДействия();
	Ответ = ОтветСервиса(Соединение, Запрос, ПараметрыКоманды);
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда
		Результат.Результат = Ответ;
		ВыполнятьПовтор = Не ЭтоHTTPУспех(Ответ) И ДопустимПовторныйЗапрос(Ответ, ПараметрыКоманды);
		ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", ВыполнятьПовтор);
		ПараметрыКоманды.Вставить("КодСостояния", Ответ.КодСостояния);
	Иначе
		Результат.ТекстСообщения = НСтр("ru = 'Работа с номенклатурой. Ошибка. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоHTTPУспех(ОтветHTTP)
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		Успех = Истина;
	ИначеЕсли ОтветHTTP.КодСостояния = 201 Тогда
		Успех = Истина;
	Иначе 
		Успех = Ложь;
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

Функция ДопустимПовторныйЗапрос(ОтветСервиса, ПараметрыКоманды);
	
	Результат = Ложь;
	Если ОтветСервиса.КодСостояния = 503 Тогда
		Результат = Истина;
	ИначеЕсли ОтветСервиса.КодСостояния = 401 
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "ДопустимАнонимныйЗапрос", Истина) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти