#Если Не ТолстыйКлиентОбычноеПриложение Тогда 

#Область ПрограммныйИнтерфейс

Функция ОбработатьЗапросHTTPСервиса(Запрос) Экспорт
	
	__ТИП__(Запрос, "HTTPСервисЗапрос, Структура", "Ошибка программиста: c82b4c50-3e1a-11e8-ad29-080027536468.");
	
	// Запишем запрос в журнал регистрации.
	ФедеральныеВебСервисыСервер.ЗаписатьВЖурналРегистрации(Запрос);
	
	// Отметим признак начала обработки запроса.
	ФедеральныеВебСервисыСервер.НачалоОбработкиЗапросаSOAP();
	
	// Если используется метод POST, заполним значение переменной ТелоКакСтрока_.
	Если Запрос.HTTPМетод = "POST" Тогда
		
		Если ТипЗнч(Запрос) = Тип("Структура") Тогда
			// Тип запроса Структура используется для юнит-тестов.
			ТелоКакСтрока_ = Запрос.ТелоКакСтрока;
		Иначе
			ТелоКакСтрока_ = Запрос.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим, что нет лишних параметров URL.
	Если Не 0 = Запрос.ПараметрыURL.Количество() Тогда
		Ответ_ = Новый HTTPСервисОтвет(404);
		Ответ_.Заголовки.Вставить("Content-Type", "text/html;charset=UTF-8");
		Ответ_.УстановитьТелоИзСтроки(
			"<!DOCTYPE html>
			|<html>
			|	<body>
			|		<h2>404 - Страница не найдена.</h2>
			|	</body>
			|</html>"
		);
		Возврат Ответ_;
	КонецЕсли;
	
	// Также проверим, что нет лишних параметров в URI.
	ПараметрыСтрокой_ = "";
	ПараметрыЗапросаОК_ = ( 0 = Запрос.ПараметрыЗапроса.Количество() );
	Если 1 = Запрос.ПараметрыЗапроса.Количество() Тогда
		Для Каждого КлючИЗначение_ Из Запрос.ПараметрыЗапроса Цикл
			Если КлючИЗначение_.Ключ = "wsdl" И Не ЗначениеЗаполнено(КлючИЗначение_.Значение) Тогда
				ПараметрыЗапросаОК_ = Истина;
				ПараметрыСтрокой_ = "?wsdl";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если есть лишние параметры, сформируем ошибочный ответ.
	Если Не Истина = ПараметрыЗапросаОК_ Тогда
		ПараметрыСтрокой_ = "";
		Для Каждого КлючИЗначение_ Из Запрос.ПараметрыЗапроса Цикл
			Если ЗначениеЗаполнено(ПараметрыСтрокой_) Тогда
				ПараметрыСтрокой_ = ПараметрыСтрокой_ + "&";
			Иначе
				ПараметрыСтрокой_ = "?";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КлючИЗначение_.Значение) Тогда
				ПараметрыСтрокой_ = ПараметрыСтрокой_ + КлючИЗначение_.Ключ;
			Иначе
				ПараметрыСтрокой_ = ""
					+ ПараметрыСтрокой_
					+ СтрШаблон("%1=%2", КлючИЗначение_.Ключ, КлючИЗначение_.Значение)
				;
			КонецЕсли;
		КонецЦикла;
		Ответ_ = Новый HTTPСервисОтвет(404);
		Ответ_.Заголовки.Вставить("Content-Type", "text/html; charset=UTF-8");
		Ответ_.УстановитьТелоИзСтроки(СтрШаблон(
			"<!DOCTYPE html>
			|<html>
			|	<body>
			|		<h2>404 - Неверные параметры запроса: ""%1"".</h2>
			|		<p>
			|		 Допустимый параметр - wsdl без значения (""?wsdl"").
			|		</p>
			|	</body>
			|</html>",
			ПараметрыСтрокой_
		));
		Возврат Ответ_;
	КонецЕсли;
	
	// По умолчанию будем использовать такой MIME-тип ответа.
	MimeType_ = "text/xml";
	
	// Поищем тип ответа, который ожидает от нас клиент.
	Для Каждого КлючИЗначение_ Из Запрос.Заголовки Цикл
		
		Если Не ТРег(КлючИЗначение_.Ключ) = "Accept" Тогда
			Продолжить;
		КонецЕсли;
		
		// Заголовок Accept имеет следующий вид.
		// Accept: text/plain; q=0.5, text/html,
		//         text/x-dvi; q=0.8, text/x-c,
		//         text/*; q=0.3, */*; q=0.1
		ОжидаемыеТипы_ = СтрРазделить(КлючИЗначение_.Значение, ",");
		
		Для Каждого ЗаписьОжидаемогоТипа_ Из ОжидаемыеТипы_ Цикл
			
			// Тип должен обязательно содержать символ /.
			ЧастиОжидаемогоТипа_ = СтрРазделить(СокрЛП(СтрРазделить(ЗаписьОжидаемогоТипа_, ";")[0]), "/");
			ОжидаемыйТип_ = ЧастиОжидаемогоТипа_[0];
			ОжидаемыйПодтип_ = ЧастиОжидаемогоТипа_[1];
			
			// Будем проверять только ожидаемый тип и на основе этого выбирать один из двух возможных.
			Если ОжидаемыйТип_ = "application" Тогда
				MimeType_ = "application/soap+xml";
			ИначеЕсли ОжидаемыйТип_ = "text" Или ОжидаемыйТип_ = "*" Тогда
				MimeType_ = "text/xml";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЛокальныйURL_ = Запрос.БазовыйURL + Запрос.ОтносительныйURL;
	
	// Разложим полный uri в структуру.
	СтруктураURI_ = ФедеральныеВебСервисыСервер.СтруктураURI(
		Запрос.БазовыйURL + Запрос.ОтносительныйURL + ПараметрыСтрокой_
	);
	
	// Код состояния ответа по умолчанию 200.
	КодСостоянияОтвета_ = 200;
	
	// Логика простая. Если запрос POST, то обрабатывам SOAP пакет, если GET,
	// то отправляем WSDL описание.
	Если Запрос.HTTPМетод = "POST" Тогда
		
		РезультатЗапросаSOAP_ = ОбработатьSOAPЗапрос(ЛокальныйURL_, ТелоКакСтрока_);
		ТелоОтвета_ = РезультатЗапросаSOAP_.Тело;
		
		Если Не 200 = РезультатЗапросаSOAP_.КодСостояния Тогда
			КодСостоянияОтвета_ = РезультатЗапросаSOAP_.КодСостояния;
		ИначеЕсли СтрНайти(НРег(ЛокальныйURL_), "emdr") > 0 Тогда
			// Все ответы для РЭМД подписываем.
			УстановитьПривилегированныйРежим(Истина);
			ТелоОтвета_ = ФедеральныеВебСервисыЭлектроннаяПодпись.ПодписатьSoapСообщение(ТелоОтвета_);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	ИначеЕсли Запрос.HTTPМетод = "GET" Тогда
		ТелоОтвета_ = ПолучитьОписаниеWSDL(ЛокальныйURL_);
	Иначе
		__ПРОВЕРКА__(Ложь, "6cf4ec1e-42df-11e8-a5c5-080027536468. Неожиданный метод HTTP: " + Запрос.HTTPМетод + ".");
	КонецЕсли;
	
	// Теперь можно сформировать ответ http-сервиса
	Ответ_ = Новый HTTPСервисОтвет(КодСостоянияОтвета_);
	
	Ответ_.УстановитьТелоИзСтроки(
		ТелоОтвета_, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать
	);
	
	РазмерТелаСтрокой_ = Формат(Ответ_.ПолучитьТелоКакДвоичныеДанные().Размер(), "ЧН=; ЧГ=");
	
	// Установим обязательные заголовки. Остальные подставить http-сервер, например Apache.
	Ответ_.Заголовки.Вставить("Content-Type", СтрШаблон("%1; charset=utf-8", MimeType_));
	Ответ_.Заголовки.Вставить("Content-Length", РазмерТелаСтрокой_);
	
	// Запишем ответ в журнал регистрации для удобства отладки.
	ФедеральныеВебСервисыСервер.ЗаписатьВЖурналРегистрации(Ответ_);
	
	// Возвращаем результат в вызывающий метод.
	Возврат Ответ_;
	
КонецФункции

/// Сброс всех видов закешированных значений (на время сеанса,
// на время вызова и т. д.) для подсистемы <<ФедеральныеВебСервисы>>.
///
Процедура ОчиститьСтруктуруКешируемыхЗначений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КешируемыеЗначения_ = ФедеральныеВебСервисыПовтИсп.ПолучитьСтруктуруКешируемыхЗначений();
	КешируемыеЗначения_.Очистить();
	
	КешСеанса.УдалитьЗначение("ФедеральныеВебСервисыСервер.ПолучитьКонстанту");
	КешСеанса.УдалитьЗначение("МедицинаРегион.Соединение");
	КешСеанса.УдалитьЗначение("МедицинаРегионСервер.НастройкиПодключения");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ПолучитьВнутреннееИмяВебСервиса(ЛокальныйURL)
	
	Если СтрЗаканчиваетсяНа(ЛокальныйURL, "/Appointment") Тогда
		ФедеральныеВебСервисыЗаписьНаПрием_ = ОбщегоНазначения.ОбщийМодуль("ФедеральныеВебСервисыЗаписьНаПрием");
		Если ФедеральныеВебСервисыЗаписьНаПрием_.ВерсияПротоколаЗаписиНаПрием() = Перечисления.ФедеральныеВебСервисыЗаписьНаПриемВерсии.Версия2_0 Тогда 
			Возврат "ЗаписьНаПрием";
		Иначе
			Возврат "ЗаписьНаПрием2";
		КонецЕсли;
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/AppointmentUpdate") Тогда
		ФедеральныеВебСервисыЗаписьНаПрием_ = ОбщегоНазначения.ОбщийМодуль("ФедеральныеВебСервисыЗаписьНаПрием");
		Если ФедеральныеВебСервисыЗаписьНаПрием_.ВерсияПротоколаЗаписиНаПрием() = Перечисления.ФедеральныеВебСервисыЗаписьНаПриемВерсии.Версия2_0 Тогда 
			Возврат "ЗаписьНаПриемUpdate";
		Иначе
			Возврат "ЗаписьНаПриемUpdate2";
		КонецЕсли;
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/Dispensary") Тогда
		Возврат "Диспансеризация";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/DispensaryCallback") Тогда
		Возврат "ДиспансеризацияCallback";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/DispensaryUpdate") Тогда
		Возврат "ДиспансеризацияUpdate";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EmdrCallback") Тогда
		Возврат "РЭМД";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EMDRCallback") Тогда
		Возврат "РЭМД";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EMDR") Тогда
		Возврат "РЭМДService";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/HouseCall") Тогда
		Возврат "ВызовВрачаНаДом";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/HouseCallUpdate") Тогда
		Возврат "ВызовВрачаНаДом";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/PIX") Тогда
		Возврат "ГИП";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/VIMISCallback") Тогда
		Возврат "ВИМИС";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/IEMKCallback") Тогда
		Возврат "ИЭМКCallback";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/IdentificationService") Тогда
		Возврат "СервисИдентификации";
	КонецЕсли;
	
	__ПРОВЕРКА__(Ложь, "a6440eb2-42e6-11e8-9b73-080027536468: Неизвестное имя веб-сервиса.");
	
КонецФункции


Функция ПолучитьИмяМодуля(ЛокальныйURL)
	
	ШаблонИмениМодуля_ = "ФедеральныеВебСервисы%1";
	
	Если СтрЗаканчиваетсяНа(ЛокальныйURL, "/Appointment") Тогда
		ВнутреннееИмя_ = "ЗаписьНаПрием";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/AppointmentUpdate") Тогда
		ВнутреннееИмя_ = "ЗаписьНаПрием";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/Dispensary") Тогда
		ВнутреннееИмя_ = "Диспансеризация";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/DispensaryCallback") Тогда
		ВнутреннееИмя_ = "Диспансеризация";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/DispensaryUpdate") Тогда
		ВнутреннееИмя_ = "Диспансеризация";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EmdrCallback") Тогда
		ВнутреннееИмя_ = "РЭМД";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EMDRCallback") Тогда
		ВнутреннееИмя_ = "РЭМД";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/EMDR") Тогда
		ВнутреннееИмя_ = "РЭМД";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/HouseCall") Тогда
		ВнутреннееИмя_ = "ВызовВрачаНаДом";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/HouseCallUpdate") Тогда
		ВнутреннееИмя_ = "ВызовВрачаНаДом";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/PIX") Тогда
		ВнутреннееИмя_ = "ГИП";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/VIMISCallback") Тогда
		ВнутреннееИмя_ = "ВИМИС";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/IEMKCallback") Тогда
		ВнутреннееИмя_ = "ИЭМК";
	ИначеЕсли СтрЗаканчиваетсяНа(ЛокальныйURL, "/IdentificationService") Тогда
		ВнутреннееИмя_ = "СервисИдентификации";
	Иначе
		__ПРОВЕРКА__(Ложь, "8887f16e-84c6-11e8-84be-576316812b9b: Неизвестное имя веб-сервиса.");
	КонецЕсли;
	
	ИмяМодуля_ = СтрШаблон(ШаблонИмениМодуля_, ВнутреннееИмя_);
	
	Возврат ИмяМодуля_;
	
КонецФункции


Функция ПолучитьОписаниеWSDL(ЛокальныйURL)
	
	// Получим внутреннее имя веб-сервиса - это русскоязычный его идентификатор.
	Имя_ = ПолучитьВнутреннееИмяВебСервиса(ЛокальныйURL);
	// По внутреннему имени получим описание WSDL.
	ОписаниеWSDL_ = ФедеральныеВебСервисыПовтИсп.ПолучитьМакетОписанияWSDL(Имя_);
	
	Если Не 0 = СтрНайти(ОписаниеWSDL_, "%1") Тогда
		
		// В описании WSDL есть один параметр, который нужно заменить на URL веб-сервиса.
		АдресВебСервиса_ = ПолучитьАдресВебСервиса(Имя_, ЛокальныйURL);
		ОписаниеWSDL_ = СтрШаблон(ОписаниеWSDL_, АдресВебСервиса_);
		
	КонецЕсли;
	
	Возврат ОписаниеWSDL_;
	
КонецФункции

/// Получение адреса веб-сервиса, каким его должны видеть внешние системы
//
// В зависимости от организации сети, использования прокси-серверов и фильтров,
// адрес веб-сервиса, полученный в объекте HTTPСервисЗапрос может отличаться от
// того адреса, по которому выполнялось обращение внешней системы.
// Чтобы упростить обслуживание таких случаев, внешний адрес можно записать
// в одну из следующих констант:
// - ФедеральныеВебСервисыВызовВрачаНаДомАдрес,
// - ФедеральныеВебСервисыДиспансеризацияАдрес,
// - ФедеральныеВебСервисыЗаписьНаПриемАдрес,
// - ФедеральныеВебСервисыРЭМДАдрес.
// Если константа не заполнена, используется в качестве адреса веб-сервиса будет
// возвращен локальный URL.
//
// Параметры:
//   ВнутреннееИмя - Строка -
//     Одно из значений "ВызовВрачаНаДом", "Диспансеризация", "ЗаписьНаПрием", "РЭМД".
//   ЛокальныйURL - Строка -
//     Адрес веб-сервиса на локальном веб-сервере.
//
// Возвращаемое значение:
//   Строка - Внешний адрес веб-сервиса.
///
Функция ПолучитьАдресВебСервиса(Знач ВнутреннееИмя, Знач ЛокальныйURL)
	
	Если ВнутреннееИмя = "ЗаписьНаПрием2" Тогда 
		// В связи с добавлением протокола 3.1.
		ВнутреннееИмя = "ЗаписьНаПрием";
	КонецЕсли;
	ИмяКонстанты_ = СтрШаблон("ФедеральныеВебСервисы%1Адрес", ВнутреннееИмя);
	
	Если ВнутреннееИмя = "ЗаписьНаПриемUpdate" ИЛИ ВнутреннееИмя = "ЗаписьНаПриемUpdate2" Тогда 
		// К сожалению приходится вот так делать (причем адрес-то не совсем тот).
		// Возможно, стоит взять адрес ФедеральныеВебСервисыЗаписьНаПриемАдрес и вместо /Appointment
		// подставить /AppointmentUpdate.
		ИмяКонстанты_ = "ФедеральныеВебСервисыЗаписьНаПриемАдресСервисаОбновления";
	КонецЕсли;
	
	ЗначениеКонстанты_ = Неопределено;
	Попытка
		ЗначениеКонстанты_ = КешСеанса.ПолучитьЗначение(
			"ФедеральныеВебСервисыСервер.ПолучитьКонстанту",
			ИмяКонстанты_
		);
	Исключение
		ЗаписьЖурналаРегистрации(
			"ФедеральныеВебСервисы.Ошибка",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("Ошибка получение константы %1: %2", ИмяКонстанты_, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ЗначениеКонстанты_) Тогда
		Возврат ЗначениеКонстанты_;
	КонецЕсли;
	
	Возврат ЛокальныйURL;
	
КонецФункции

Функция ОбработатьSOAPЗапрос(ЛокальныйURL, ТелоКакСтрока)
	
	
	ДокументDOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ТелоКакСтрока);
	
	// Для начала с помощью XPath определим версию SOAP. Для этого нам потребуется какой-нибудь
	soap_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM_, , "namespace-uri(/*)");
	
	__ПРОВЕРКА__(soap_ = xmlns.soap() Или soap_ = xmlns.soap("1.2"), СтрШаблон("c6065752-49fb-11e8-913f-080027536468 Неожиданное пространство имен SOAP: %1.", soap_));
	
	// Далее будем выполнять запросы SOAP. Для этого нам потребуется разыменователь.
	Разыменователь_ = Новый РазыменовательПространствИменDOM("soap", soap_);
	// и тип результата запроса XPath.
	// С помощью XPath определим заголовок SOAP.
	ТипРезультата_ = ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел;
	
	// Создадим запрос XPath для получения заголовка SOAP.
	XPath_ = "/soap:Envelope/soap:Header";
	// Выполним запрос XPath.
	РезультатXPath_ = ДокументDOM_.ВычислитьВыражениеXPath(
		XPath_, ДокументDOM_, Разыменователь_, ТипРезультата_
	);
	// Из результата берем первый найденный узел.
	ЗаголовокSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
	
	// С помощью XPath определим тело SOAP.
	XPath_ = "/soap:Envelope/soap:Body";
	// Выполним запрос XPath.
	РезультатXPath_ = ДокументDOM_.ВычислитьВыражениеXPath(
		XPath_, ДокументDOM_, Разыменователь_, ТипРезультата_
	);
	// Из результата берем первый найденный узел.
	ТелоSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
	
	// С помощью XPath определим параметры запроса SOAP.
	XPath_ = "/soap:Envelope/soap:Body/*";
	// Выполим запрос XPath.
	РезультатXPath_ = ДокументDOM_.ВычислитьВыражениеXPath(
		XPath_, ДокументDOM_, Разыменователь_, ТипРезультата_
	);
	// Из результата берем первый найденный узел.
	ПараметрыSOAP_ = РезультатXPath_.ОдиночныйУзелЗначение;
	
	
	// но пока этого делать не будем, считая, что имя операции формируется путем отсечения
	// подстроки Request от конца имени тега параметров SOAP.
	ИмяОперацииSOAP_ = СтрЗаменить(ПараметрыSOAP_.ЛокальноеИмя, "Request", "");
	
	// Получим имя модуля для обработки запроса.
	ИмяМодуля_ = ПолучитьИмяМодуля(ЛокальныйURL);
	
	// Сохраним в строку ПараметрыSOAP_.
	ПараметрыSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ПараметрыSOAP_);
	
	// Проверка запроса на соответствие схеме.
	ФедеральныеВебСервисыСервер.ВалидацияXML(ПараметрыSOAPСтрокой_);
	
	// Сохраним в строку ЗаголовокSOAP_.
	Если Не Неопределено = ЗаголовокSOAP_ Тогда
		ЗаголовокSOAPСтрокой_ = ФедеральныеВебСервисыСервер.ЗаписатьDOM(ЗаголовокSOAP_);
	КонецЕсли;
	
	Попытка
		// Вызываем функцию обработки операции SOAP.
		// Делать это будем в привилегированном режиме, чтобы не мучиться с ролями.
		УстановитьПривилегированныйРежим(Истина);
		Результат_ = Вычислить(СтрШаблон(
			"%1.%2(ПараметрыSOAPСтрокой_, ЗаголовокSOAPСтрокой_)",
			ИмяМодуля_,
			ИмяОперацииSOAP_
		));
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
		ЗаписьЖурналаРегистрации(
			"ФедеральныеВебСервисы.Ошибка",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки_
		);
		ВызватьИсключение;
	КонецПопытки;
	//Если ТипЗнч(Результат_) = Тип("Структура") И Не 200 = Результат_.КодСостояния Тогда
	//	Возврат Результат_;
	//КонецЕсли;
	
	Тело_ = "";
	Заголовок_ = "";
	Если ТипЗнч(Результат_) = Тип("Структура") Тогда
		Тело_ = Результат_.Тело;
		Если ЗначениеЗаполнено(Результат_.Заголовок) Тогда
			ШаблонЗаголовка_ =
				"<soap:Header>
				|	%1
				|</soap:Header>"
			;
			Заголовок_ = стрШаблон(
				ШаблонЗаголовка_,
				СтрЗаменить(Результат_.Заголовок, Символы.ПС, Символы.ПС + Символы.Таб)
			);
		КонецЕсли;
	Иначе
		Тело_ = Результат_;
	КонецЕсли;
	
	// Возвращаем результат операции SOAP.
	ШаблонКонверта_ =
		"<soap:Envelope xmlns:soap=""%1"">
		|	%2
		|	<soap:Body>
		|		%3
		|	</soap:Body>
		|</soap:Envelope>"
	;
	Конверт_ = СтрШаблон(
		ШаблонКонверта_,
		soap_,
		СтрЗаменить(Заголовок_, Символы.ПС, Символы.ПС + Символы.Таб),
		СтрЗаменить(Тело_, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб)
	);
	
	// Проверка ответа на соответствие схеме.
	ФедеральныеВебСервисыСервер.ВалидацияXML(Тело_);
	
	Возврат Новый Структура("Тело, КодСостояния", Конверт_, 200);
	
КонецФункции

#КонецОбласти

#Область Юнит_тестирование

/// Юнит-тестирование модуля
//
// Выполняет вызовы функций модуля для тестирования их функциональности.
//
// Параметры:
//   ПроверкаНаличия - Булево -
//     При установке в значение Истина тесты не должны выполняться,
//     а процедура просто завершаться без ошибок. Это позволит вызывающему методу
//     убедиться, что в данном модуле такая процедура присутствует.
///
Процедура __ТЕСТ__(ПроверкаНаличия = Ложь) Экспорт
	
	#Область ОбработатьЗапросHTTPСервиса
		
		ПараметрыЗапроса_ = Новый Соответствие;
		ПараметрыЗапроса_.Вставить("wsdl", "");
		
		Заголовки_ = Новый Соответствие;
		// Заголовки_.Вставить("Content-Type", "text/xml;charset=UTF-8");
		Заголовки_.Вставить("Content-Type", "text/xml");
		// Заголовки_.Вставить("SOAPAction", "sendDocument");
		Заголовки_ = Новый ФиксированноеСоответствие(Заголовки_);
		
		СтрокаСоединения_ = СтрокаСоединенияИнформационнойБазы();
		СтрокаСоединения_ = СтрЗаменить(СтрокаСоединения_, """", "");
		СтрокаСоединения_ = СтрЗаменить(СтрокаСоединения_, ";", "");
		Поз_ = СтрНайти(СтрокаСоединения_, "/", НаправлениеПоиска.СКонца);
		Если Не Поз_ = 0 Тогда
			СтрокаСоединения_ = Сред(СтрокаСоединения_, Поз_ + 1);
		КонецЕсли;
		Поз_ = СтрНайти(СтрокаСоединения_, "\", НаправлениеПоиска.СКонца);
		Если Не Поз_ = 0 Тогда
			СтрокаСоединения_ = Сред(СтрокаСоединения_, Поз_ + 1);
		КонецЕсли;
		
		БазовыйURL_ = "http://localhost/" + СтрокаСоединения_ + "/hs/fws";
		ОтносительныйURL_ = "/Appointment";
		
		Запрос_ = Новый Структура(
			"ПараметрыЗапроса, БазовыйURL, ОтносительныйURL, Заголовки, , HTTPМетод, ПараметрыURL, ТелоКакСтрока",
			ПараметрыЗапроса_, БазовыйURL_, ОтносительныйURL_, Заголовки_, "POST", Новый Соответствие, ""
		);
		
		Запрос_.HTTPМетод = "GET";
		Запрос_.ТелоКакСтрока = "";
		
		ОбработатьЗапросHTTPСервиса(Запрос_);
		
		Запрос_.HTTPМетод = "POST";
		Запрос_.ТелоКакСтрока =
			"<?xml version=""1.0"" encoding=""utf-8""?>
			|<soap:Envelope
			|		xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
			|		xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
			|		xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
			|	<soap:Body>
			|		<test xmlns=""http://www.rt-eu.ru/med/er/""></test>
			|	</soap:Body>
			|</soap:Envelope>
			|"
		;
		
		ОбработатьЗапросHTTPСервиса(Запрос_);
		
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли