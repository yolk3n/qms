
#Область СлужебныйПрограммныйИнтерфейс

Функция ТекстСообщенияОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	Возврат ТекстСообщения;
	
КонецФункции

// Получает значения свойств ошибок.
//
// Параметры:
//  Ошибки - см. НоваяОшибка
//  Свойство - Строка - свойство ошибки
//  Отбор    - Структура - содержит условия фильтрации ошибок для получения свойств:
//    * Ключ - Строка - имя свойства ошибки.
//    * Значение - Произвольный - значение свойства ошибки.
//               - Массив из Произвольный - массив значений свойств ошибки.
// 
// Возвращаемое значение:
//  Массив из Структура - значения свойств ошибок.
//
Функция ЗначенияСвойствОшибок(Ошибки, Свойство, Отбор = Неопределено) Экспорт
	
	Значения = Новый Массив;
	Для каждого Ошибка Из Ошибки Цикл
		Если ОшибкаСоответствуетОтбору(Ошибка, Отбор) Тогда
			Значение = Ошибка[Свойство];
			Если Свойство = "ВидОшибки" И ТипЗнч(Значение) = Тип("Структура") Тогда
				Значение = Значение.Идентификатор;
			КонецЕсли;
			Если Значения.Найти(Значение) = Неопределено И ЗначениеЗаполнено(Значение) Тогда
				Значения.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

// Возвращает ошибки.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 	                    - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики .
// Возвращаемое значение:
// - Массив из см. ОбработкаНеисправностейБЭДКлиент.НоваяОшибка -
// - Массив из см. ОбработкаНеисправностейБЭД.НоваяОшибка -
Функция ПолучитьОшибки(КонтекстДиагностики) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат КонтекстДиагностики.Диагностика.Ошибки;
	КонецЕсли;
	
КонецФункции

// Возвращает описание вида ошибки.
// Виды ошибок можно наследовать, переопределяя свойства. Необходимо обязательно изменить идентификатор 
// переопределяемого вида ошибки.
// 
// Возвращаемое значение:
//  Структура:
//    * Идентификатор     - Строка - идентификатор вида ошибки формата "ИмяПодсистемы_НаименованиеОшибки",
//                      пример: "ОбменСКонтрагентами_СертификатПросрочен". Ошибки с одинаковыми
//                      идентификаторами группируются при отображении, поэтому каждый вид ошибки должен иметь
//                      свой уникальный идентификатор.
//    * ЗаголовокПроблемы - Строка - краткая суть проблемы, выводится крупным шрифтом.
//    * ОписаниеПроблемы  - Строка - детальное описание проблемы.
//    * ОписаниеРешения   - ФорматированнаяСтрока, Строка - описание решения проблемы, может содержать гиперссылки,
//                           при нажатии на которые выполняются обработчики, заданные в ключе ОбработчикиНажатия.
//                           Строка может содержать теги см. СтроковыеФункции.ФорматированнаяСтрока.ШаблонСтроки.
//    * ВыводитьСсылкуНаСписокОшибок - Булево - если истина - в форму вывода ошибок под описанием проблемы будет
//                           добавлена гиперссылка, при нажатии на которую откроется форма со списком ошибок
//                           по текущему виду ошибки.
//    * ОбработчикиНажатия - Соответствие из КлючИЗначение:
//        ** Ключ - Строка - фраза-гиперссылка из параметра ОписаниеРешения, при нажатии на которую будет 
//                           вызван обработчик.
//        ** Значение - Строка - содержит описание клиентской процедуры в формате ИмяОбщегоМодуля.ИмяПроцедуры,
//                           которая будет вызвана при нажатии на гиперссылку. Процедура будет вызвана со 
//                           следующими параметрами:
//                             ** КонтекстДиагностики - см. НовыйКонтекстДиагностики
//                             ** ДополнительныеПараметры - Произвольный - значение, которое указано в
//                                                          параметре ПараметрыОбработчиков для соответствующего ключа.
//    * ПараметрыОбработчиков - Соответствие из КлючИЗначение - содержит параметры, с которыми будут вызваны процедуры,
//                              описанные в параметре ОбработчикиНажатия:
//       ** Ключ - Строка - должен совпадать с одним из ключей параметра ОбработчикиНажатия.
//       ** Значение - Произвольный - значение, с которым будет вызван обработчик из параметра ОбработчикиНажатия для
//                                    соответствующего ключа.
//    * ВыполнятьОбработчикАвтоматически - Булево - если значение параметра - Истина и в коллекции накопленных
//                           ошибок находятся ошибки только одного вида, будет выполнен обработчик, указанный в
//                           параметре АвтоматическиВыполняемыйОбработчик без открытия формы вывода ошибок.
//    * АвтоматическиВыполняемыйОбработчик - Строка - обработчик, который будет выполнен при значении параметра
//                            ВыполнятьОбработчикПриЕдинственномВидеОшибок - Истина.
//    * Статус - см. СтатусыОшибок
//    * ЭтоВидОшибки - Булево - (служебной поле) для определение типа структуры (структура является видом ошибки).
Функция НовоеОписаниеВидаОшибки() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ЗаголовокПроблемы", "");
	Параметры.Вставить("ОписаниеПроблемы", "");
	Параметры.Вставить("ОписаниеРешения", "");
	Параметры.Вставить("ВыводитьСсылкуНаСписокОшибок", Истина);
	Параметры.Вставить("ОбработчикиНажатия", Новый Соответствие);
	Параметры.Вставить("ПараметрыОбработчиков", Новый Соответствие);
	Параметры.Вставить("ВыполнятьОбработчикАвтоматически", Ложь);
	Параметры.Вставить("АвтоматическиВыполняемыйОбработчик", "");
	Параметры.Вставить("Статус", СтатусыОшибок().Важная);
	Параметры.Вставить("ЭтоВидОшибки", Истина);
	
	Параметры.ОбработчикиНажатия.Вставить("ОбработкаНеисправностейБЭДОткрытьСписокОшибок",
		"ОбработкаНеисправностейБЭДКлиент.ОткрытьФормуДетализацииОшибок");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает описание процедуры, выполняющей открытие формы обращения в техподдержку.
// Для использования в ключе ОбработчикиНажатия см. НовоеОписаниеВидаОшибки.
// 
// Возвращаемое значение:
// Строка - описание обработчика в формате ИмяОбщегоМодуля.ИмяПроцедуры.
Функция ОбработчикОткрытияФормыОбращенияВТехподдержку() Экспорт
	
	Возврат "ОбработкаНеисправностейБЭДКлиент.ОткрытьФормуОбращенияВТехПоддержку";
	
КонецФункции

// Проверяет, что ошибка является ошибкой переданного вида.
// 
// Параметры:
// 	Ошибка - см. ОбработкаНеисправностейБЭДКлиент.НоваяОшибка
// 	ВидОшибки - см. НовоеОписаниеВидаОшибки
// Возвращаемое значение:
// 	Булево - Описание
Функция ЭтоОшибкаДанногоВида(Ошибка, ВидОшибки) Экспорт
	
	Возврат Ошибка.ВидОшибки.Идентификатор = ВидОшибки.Идентификатор;
	
КонецФункции

// Определяет наличие ошибок.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 	                    - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево
Функция ЕстьОшибки(КонтекстДиагностики) Экспорт
	
	Возврат ПолучитьОшибки(КонтекстДиагностики).Количество() > 0;
	
КонецФункции

#Область ВидыОшибок

// Состав ошибок можно расширить собственными видами.
// Пример: "ОшибкаИнтернетСоединения" или ИмяМодуля.ВидОшибкиОшибкаИнтернетСоединения() - возвращает описание
// вида ошибки.
// Пример инициализации и обработки новой ошибки:
// КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
// Попытка
//      Результат = 5 / 0;
// Исключение
//      Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Получение маркера'"),
//          ОбменСКонтрагентамиСлужебныйКлиентСервер.ВидОшибкиДелениеНаНоль(), // инициализация
//          ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
//          НСтр("ru = 'Произошла ошибка при вычислении выражения'"));
//      ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка);
// КонецПопытки;
// ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики).


// Возвращает вид неизвестной ошибки.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиНеизвестнаяОшибка() Экспорт

	ВидОшибки = НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеизвестнаяОшибка";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Неизвестная ошибка'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Обратитесь"">Обратитесь</a> в тех. поддержку'");
	ВидОшибки.ОбработчикиНажатия.Вставить("список ошибок", "ОбработкаНеисправностейБЭДКлиент.ОткрытьФормуДетализацииОшибок");
	ВидОшибки.ОбработчикиНажатия.Вставить("Обратитесь", ОбработчикОткрытияФормыОбращенияВТехподдержку());

	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

// Возвращает статусы ошибок.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Обычная - Строка -ошибки с таким статусом выделены желтой картинкой в форме вывода ошибок
// * Важная - Строка - ошибки с таким статусом выделены красной картинкой в форме вывода ошибок
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Структура;
	Статусы.Вставить("Обычная", "Обычная");
	Статусы.Вставить("Важная", "Важная");
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует структуру, содержащую информацию об ошибке. Используется в 
// ОбработкаНеисправностейБЭД.ДобавитьОшибку,
// ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку.
//
// Параметры:
//  ВидОперации                  - Строка - наименование операции, во время выполнения которой возникла ошибка
//  ВидОшибки                    - см. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
//  ПодробноеПредставлениеОшибки - Строка - подробное представление ошибки
//  КраткоеПредставлениеОшибки   - Строка - краткое представление ошибки
//  ДополнительныеПараметры      - Структура:
//     * Сертификат              - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                                 по которому произошла ошибка.
//     * Подсистема              - Строка - см._ОбщегоНазначенияБЭД.ПодсистемыБЭД
//     * СсылкаНаОбъект          - ЛюбаяСсылка - объект, по которому возникла ошибка.
//     * ДополнительныеДанные    - Произвольный - произвольные данные.
// 
// Возвращаемое значение:
//  Структура: 
//    * ВидОперации                  - Строка - наименование операции, во время выполнения которой возникла ошибка
//    * ВидОшибки                    - см. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
//    * ПодробноеПредставлениеОшибки - Строка - подробное представление ошибки
//    * КраткоеПредставлениеОшибки   - Строка - краткое представление ошибки
//    * Сертификат              - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                                по которому произошла ошибка.
//    * Подсистема              - Строка - см._ОбщегоНазначенияБЭД.ПодсистемыБЭД
//    * СсылкаНаОбъект          - ЛюбаяСсылка - объект, по которому возникла ошибка.
//    * ДополнительныеДанные    - Произвольный - произвольные данные.
Функция НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ВидОперации", ВидОперации);
	Ошибка.Вставить("ВидОшибки", ВидОшибки);
	Ошибка.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	Ошибка.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки);	
	Ошибка.Вставить("Сертификат", Неопределено);
	Ошибка.Вставить("Подсистема", "");
	Ошибка.Вставить("СсылкаНаОбъект", Неопределено);
	Ошибка.Вставить("ДополнительныеДанные", Неопределено);
	Ошибка.Вставить("Идентификатор", "" + Новый УникальныйИдентификатор);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
			Ошибка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

Функция НовыйКонтекстДиагностики() Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЗаголовокОперации", "");
	Диагностика = Новый Структура;
	Диагностика.Вставить("Ошибки", Новый Массив);
	Контекст.Вставить("Диагностика", Диагностика);
	Контекст.Вставить("ТекущийПользовательИБ", "");
	Контекст.Вставить("ДатаНачалаОперации", Дата(1, 1, 1));
	Контекст.Вставить("ДатаОкончанияОперации", Дата(1, 1, 1));
	Контекст.Вставить("ОшибкиОбработаны", Ложь);
	Контекст.Вставить("СообщатьОбОшибке", Истина);
	Контекст.Вставить("ДополнительныеСвойства", Новый Структура);
	
	Возврат Контекст;
	
КонецФункции

Функция ДобавитьОшибку(КонтекстДиагностики, Ошибка, ЗаписыватьВЖурналРегистрации, Подсистема, СообщатьОбОшибке) Экспорт
	
	Если Не ЗначениеЗаполнено(Ошибка.ВидОшибки) Или СообщатьОбОшибке Тогда
		СообщениеДляПользователя = Ошибка.КраткоеПредставлениеОшибки;
	Иначе
		СообщениеДляПользователя = "";
		КонтекстДиагностики.Диагностика.Ошибки.Добавить(Ошибка);
	КонецЕсли;
		
	Если ЗаписыватьВЖурналРегистрации Тогда
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(Ошибка.ВидОперации,
			Подсистема, Ошибка.ПодробноеПредставлениеОшибки,
			СообщениеДляПользователя, Ошибка.СсылкаНаОбъект); 
		СообщениеДляПользователя = "";
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка, СообщениеДляПользователя", Ошибка, СообщениеДляПользователя);
	
КонецФункции

Функция ОтборЖурналаРегистрации(КонтекстДиагностики) Экспорт
	
	ДатаНачала = КонтекстДиагностики.ДатаНачалаОперации;
	ДатаОкончания = КонтекстДиагностики.ДатаОкончанияОперации;
	Если Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", ДатаНачала);
	Отбор.Вставить("ДатаОкончания", ДатаОкончания);
	Отбор.Вставить("Пользователь", КонтекстДиагностики.ТекущийПользовательИБ);
	
	Возврат Отбор;
	
КонецФункции 

Функция ОшибкаСоответствуетОтбору(Ошибка, Отбор) Экспорт
	
	УсловияОтбораВыполнены = Истина;
	Если Отбор <> Неопределено Тогда
		Для каждого КлючИЗначение Из Отбор Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				Если КлючИЗначение.Значение.Найти(ЗначениеСвойства(Ошибка, КлючИЗначение.Ключ)) = Неопределено Тогда
					УсловияОтбораВыполнены = Ложь;
					Продолжить;
				КонецЕсли;
			Иначе 
				Если КлючИЗначение.Значение <> ЗначениеСвойства(Ошибка, КлючИЗначение.Ключ) Тогда
					УсловияОтбораВыполнены = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат УсловияОтбораВыполнены;

КонецФункции

Функция ЗначениеСвойства(Структура, Путь) 
	
	МассивЧастейПути = СтрРазделить(Путь, ".", Ложь);
	Возврат ЗначениеСвойстваРекурсивно(Структура, МассивЧастейПути);
	
КонецФункции

Функция ЗначениеСвойстваРекурсивно(Объект, МассивЧастейПути) 
	
	Если МассивЧастейПути.Количество() = 0 Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	ЧастьПути = МассивЧастейПути[0];
	Если Объект = Неопределено Или ТипЗнч(Объект) <> Тип("Структура")
		Или Не Объект.Свойство(ЧастьПути) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Значение = Объект[ЧастьПути];
	МассивЧастейПути.Удалить(0);
	Если МассивЧастейПути.Количество() Тогда
		Возврат ЗначениеСвойстваРекурсивно(Значение, МассивЧастейПути); 
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Устарела. Следует использовать см. ОбработкаНеисправностейБЭДКлиент.СообщитьПользователюОНарушенииПравДоступа
// или см. ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = ТекстСообщенияОНарушенииПравДоступа();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
