
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает стандартный текст ошибки для неверно заполненного значения дерева.
// 
// Возвращаемое значение:
//  Строка - текст ошибки.
//
Функция ТекстОшибкиНеверноЗаполненногоЗначенияДерева() Экспорт
	
	Возврат НСтр("ru = 'значение указано неверно'");

КонецФункции

// Очищает значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ОчиститьЗначениеВСтрокеДерева(Дерево, Реквизит, ПараметрыОбработкиОшибок = Неопределено) Экспорт

	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка очистки реквизита дерева данных. Не найден реквизит ""%1""'"), Реквизит);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Заполним параметры обработки ошибок.
	ДеревоЭлектронногоДокументаБЭДСлужебный.ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	
	ТипЗначенияСтроки = СтрокаДерева.ТипЗначения;
	Если Не ТипЗнч(ТипЗначенияСтроки) = Тип("ОписаниеТипов") Тогда
		ТипЗначенияСтроки = Новый ОписаниеТипов();
	КонецЕсли;
	СтрокаДерева.Значение = ТипЗначенияСтроки.ПривестиЗначение();

КонецПроцедуры

// Сохраняет значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено) Экспорт
	
	// Заполним значение в нужной строке дерева.
	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка заполнения дерева данных. Не найден реквизит ""%1""'"), Реквизит);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Заполним параметры обработки ошибок.
	ДеревоЭлектронногоДокументаБЭДСлужебный.ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	
	СтрокаДерева.Значение = Значение;
	Если СтрокаДерева.Признак = "Группа" ИЛИ СтрокаДерева.Признак = "Выбор" Тогда
		Возврат;
	КонецЕсли;
	
	// Проставим значения в строках-родителях. При этом, если передана строка дерева, а не его корень, нужно пропустить
	// элементы пути вплоть до переданной строки.
	ПриведенныйПуть = Реквизит;
	Путь = "";
	Если ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") Тогда
		ПриведенныйПуть = Сред(Реквизит, СтрДлина(Дерево.ПолныйПуть) + 2);
		Путь = Путь + Дерево.ПолныйПуть;
	КонецЕсли;
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПриведенныйПуть);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева.Признак =  "Группа" Тогда
			СтрокаДерева.Значение = Истина;
		ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
			ТекИндекс = МассивРеквизитов.Найти(Элемент);
			СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает данные из таблицы значений в дерево значений.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные.
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные. Таблица может предварительно дополняться данными
//                                    для обработки ошибок:
//                                    см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы.
//  
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//
Процедура ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	ДеревоЭлектронногоДокументаБЭДСлужебный.ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы);
	
КонецПроцедуры

// Записывает данные из структуры в группу дерева значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  СтруктураДанных - Структура - данные, которые должны быть загружены в группу
//  Путь - Строка - название группы в дереве.
//
Процедура ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь) Экспорт
	
	ДеревоЭлектронногоДокументаБЭДСлужебный.ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь);
	
КонецПроцедуры

// Добавляет строку в таблицу из коллекции свойств
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  Коллекция - Структура, Выборка, СтрокаТаблицыЗначений - коллекция для сохранения в дереве
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//
Процедура ДобавитьЗаписьВТаблицуДерева(Дерево, Коллекция, НазваниеТаблицы) Экспорт
	
	ШапкаТаблицы = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	ШапкаТаблицы.Значение = ?(ЗначениеЗаполнено(ШапкаТаблицы.Значение), ШапкаТаблицы.Значение + 1, 1);
	
	СтруктураКолонок = ДеревоЭлектронногоДокументаБЭДСлужебный.СтруктураКолонокТаблицыДерева(Дерево, НазваниеТаблицы);
	ЗаполнитьЗначенияСвойств(СтруктураКолонок, Коллекция);
	ПерваяСтрокаДерева = Дерево.Строки.Найти(НазваниеТаблицы + ".НомерСтроки", "ПолныйПуть", Истина);
	
	Если ПустаяСтрока(ПерваяСтрокаДерева.Значение) Тогда
		НоваяСтрока = ПерваяСтрокаДерева;
		НомерСтроки = 1;
	Иначе
		Таблица = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
		НомерСтроки = Таблица.Строки.Количество() + 1;
		НоваяСтрока = Таблица.Строки.Добавить();
		НоваяСтрока.ПолныйПуть = НазваниеТаблицы + ".НомерСтроки";
		ДеревоЭлектронногоДокументаБЭДСлужебный.СкопироватьСтрокиДереваДляТаблицыРекурсивно(НоваяСтрока, ПерваяСтрокаДерева);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрокаДерева);
	НоваяСтрока.Значение = НомерСтроки;
	
	Для Каждого Элемент Из НоваяСтрока.Строки Цикл
		
		Если НазваниеКолонки(Элемент.ПолныйПуть) = "ДопДанные" Тогда
			Если СтруктураКолонок.Свойство("ДопДанныеПодписанные") Тогда
				ДобавитьДопДанныеВДерево(Элемент, СтруктураКолонок.ДопДанныеПодписанные, Истина);
			КонецЕсли;
			Если СтруктураКолонок.Свойство("ДопДанныеНеПодписанные") Тогда
				ДобавитьДопДанныеВДерево(Элемент, СтруктураКолонок.ДопДанныеНеПодписанные);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Элемент.Значение = СтруктураКолонок[НазваниеКолонки(Элемент.ПолныйПуть)];
		
	КонецЦикла;
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицы);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитов.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с данными дерева значений
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеТаблицы - Строка - название таблицы в дереве, если необходимо получить данные табличной части.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные дерева.
//
Функция ДанныеДерева(ДеревоДанных, НазваниеТаблицы = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
		Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.ДанныеТаблицыДерева(ДеревоДанных, НазваниеТаблицы);
	Иначе
		Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.ДанныеШапкиДерева(ДеревоДанных);
	КонецЕсли;
	
КонецФункции

// Возвращает строку дерева значений для заполнения в прикладном решении
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеПоля - Строка - название поля в дереве, содержащее полный путь к реквизиту
//  НайтиРекурсивно - Булево, Истина - если требуется рекурсивный поиск.
//
// Возвращаемое значение:
//  Строка таблицы значений - содержит строку дерева.
//
Функция СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно = Ложь) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно);

КонецФункции

// Создает пустой объект ДереваРазбора.
//
// Возвращаемое значение:
//   ДеревоЗначений:
//  * ТипОбъекта - Произвольный
//  * СсылкаНаОбъект - Произвольный
//  * ОписаниеТипа - Произвольный
//  * ИндексСтроки - Произвольный
//  * Реквизит - Произвольный
//  * ЗначениеРеквизита - Произвольный
//  * ОписаниеОбъекта - Произвольный
//  * ВидЭД - Произвольный
//  * ВерсияФормата - Произвольный
//  * ИД - Произвольный
//  * НаправлениеЭД - Произвольный
//  * ДопДанные - Произвольный
//
Функция ИнициализироватьДеревоРазбора() Экспорт
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ВерсияФормата");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	Возврат ДеревоРазбора;
	
КонецФункции

// Находит или создает новый тип в дереве разбора.
//
// Параметры:
//    ДеревоРазбора - ДеревоЗначений - исходное дерево значений;
//    ЗначениеТипаОбъекта - Произвольный - искомый тип объекта.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - найденная или созданная строка.
//
Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта) Экспорт
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Добавляет реквизит в шапку объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - текущая строка дерева значений;
//  ИмяРеквизита - Строка - название добавляемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение добавляемого реквизита;
//  СсылкаНаОбъект - Произвольный - ссылка на связанный объект информационной базы.
//
Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено) Экспорт
	
	НовСтрока = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в табличную часть объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - строка дерева значений, в которую помещаются дополнительные реквизиты;
//  ИмяТЧ - Строка - название табличной части в дереве значений;
//  СписокРеквизитов - СписокЗначений - список помещаемых реквизитов.
//
Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов) Экспорт
	
	// Добавить в реквизиты ТЧ ОбменСКонтрагентами
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в дерево данных.
//
// Параметры:
//  СтрокаДереваРазбора - СтрокаДереваЗначений - строка дерева, в которую помещаются дополнительные реквизиты;
//  ДопРеквизиты        - Структура            - коллекция помещаемых дополнительных реквизитов;
//  ДеревоРазбора       - ДеревоЗначений       - исходное дерево данных;
//  Отказ               - Булево               - признак возникновения ошибки выполнения метода.
//
Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь, Знач СсылкиНаОбъектыПоИндексам = Неопределено) Экспорт
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если НЕ ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
					
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") И НЕ ТекЭл.Ключ = "ЗначенияСвойств" И НЕ ТекЭл.Ключ = "Картинки" Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ, СсылкиНаОбъектыПоИндексам);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						
						Если СсылкиНаОбъектыПоИндексам <> Неопределено Тогда
							СсылкаНаОбъект = СсылкиНаОбъектыПоИндексам.Получить(НовСтрока.ЗначениеРеквизита);
							Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
							КонецЕсли;
						Иначе
							НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
							Если НайденнаяСтрока <> Неопределено Тогда
								Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
									НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет значение в дерево данных.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево, в которое помещается новое значение;
//  ИмяРеквизита - Строка - название помещаемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение помещаемого реквизита.
//
Процедура ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	СтрокаДерева = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть");
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоДанных.Строки.Добавить();
	КонецЕсли;
	НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
	СтрокаДерева.ПолныйПуть = ИмяРеквизита;
	СтрокаДерева["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	СтрокаДерева.Значение = ЗначениеРеквизита;

КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента
Функция ДанныеЭлементаДереваЭлектронногоДокумента(Знач Дерево, Знач Путь) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(Дерево, Путь);
	
КонецФункции

// Копирует строки дерева значений
//
// Параметры:
//  СтрокаПолучатель - СтрокаДереваЗначений - строка дерева значений, в которую будут скопированы строки
//  СтрокаИсточник - СтрокаДереваЗначений - строка дерева значений, из которой будут скопированы строки.
Процедура СкопироватьСтрокиДереваРекурсивно(СтрокаПолучатель, СтрокаИсточник) Экспорт
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит);
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// В процедуре происходит добавление данных из СтруктурыДанных в ДеревоЗначений.
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - содержит данные.
//  СтруктураДопДанных - Структура - данные, которые необходимо поместить в дерево.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  ДобавлятьНовыеСтроки - Булево - если Истина - разрешает добавление строк с одинаковым путем в дерево.
//
Процедура ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый = Ложь, ДобавлятьНовыеСтроки = Ложь) Экспорт
	
	ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных,
		ЮридическиЗначимый, ДобавлятьНовыеСтроки);
	
КонецПроцедуры

// Возвращает название реквизита из полного пути
//
// Параметры:
//  ПолныйПуть - Строка - Полный путь до реквизита в дереве.
//
// Возвращаемое значение:
//  Строка - Название реквизита
//
Функция НазваниеКолонки(ПолныйПуть) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.НазваниеКолонки(ПолныйПуть);
	
КонецФункции

// Проверяет существование реквизита в дереве, по указанному пути.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - значение поиска.
// 
// Возвращаемое значение:
//  Булево - Истина, если реквизит существует.
//
Функция СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Экспорт
	
	Существует = Ложь;
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Существует = Истина;
	КонецЕсли;
	
	Возврат Существует;
	
КонецФункции

// Значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Произвольный - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина,
	НайденнаяСтрока = Неопределено, Типизировать = Ложь) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.Значение;
		
		Если Типизировать Тогда
			Результат = НайденнаяСтрока.ТипЗначения.ПривестиЗначение(НайденнаяСтрока.Значение);
		КонецЕсли;
		
		Возврат Результат;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Значение реквизита строки дерева разбора.
//
// Параметры:
//  ДеревоРазбора	 - ДеревоЗначений - объект поиска.
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значений.
//  ПутьКРеквизиту	 - Строка - путь к реквизиту.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = СтрНайти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ДеревоЭлектронногоДокументаБЭДСлужебный.ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Задает параметры обработки ошибок для реквизита дерева электронного документа.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ДобавитьВРеквизитОбработкуОшибки(Дерево, Реквизит, ПараметрыОбработкиОшибок) Экспорт
	
	СтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйПуть", Реквизит), Истина);
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ДеревоЭлектронногоДокументаБЭДСлужебный.ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм сообщений пользователю.
//
// Параметры:
//  СтрокиТаблицы	 - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                   - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                       параметры обработки ошибок.
//  ПолеТаблицы		 - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  КлючДанных		 - Строка - имя колонки таблицы, значение которой будет использовано в качестве ключа данных
//                              при выводе сообщения пользователю.
//                   - ЛюбаяСсылка - ссылка, значение которой будет использовано в качестве ключа при выводе
//                                   сообщения пользователю.
//  ПутьКДанным		 - Строка - путь к данным, который будет указан в сообщении пользователю. Если указывается путь
//                              к реквизиту таблицы, скобки ("[", "]") указывать не следует. Передача индекса строки
//                              производится через параметр "ПолеНомераСтроки".
//  ТекстОшибки		 - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки.
//  ПолеНомераСтроки - Строка - имя колонки таблицы, из которой будет подставляться в параметр "ПутьКДанным"
//                              индекс строки.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных = "",
	ПутьКДанным = "", ТекстОшибки = "", ПолеНомераСтроки = Неопределено) Экспорт
	
	НаборСтрок = Неопределено;
	ДеревоЭлектронногоДокументаБЭДСлужебный.ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Подготовим значения параметров.
		Если ЗначениеЗаполнено(КлючДанных) Тогда
			// В качестве ключа можно передавать либо путь к полю таблицы, содержащему ключ, либо сам ключ.
			Если ТипЗнч(КлючДанных) = Тип("Строка") Тогда
			 	ЗначениеКлюча = СтрокаТаблицыДанных[КлючДанных];
			Иначе
				ЗначениеКлюча = КлючДанных;
			КонецЕсли;
		Иначе
			ЗначениеКлюча = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			// Если в таблице содержится номер строки, его нужно подставить в путь к полю.
			Если ПолеНомераСтроки <> Неопределено Тогда
				ИндексСтроки = СтрокаТаблицыДанных[ПолеНомераСтроки] - 1;
				
				ПозицияКонцаОсновногоПути = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
				Если ПозицияКонцаОсновногоПути <> 0 Тогда
					ОсновнойПуть = Лев(ПутьКДанным, ПозицияКонцаОсновногоПути - 1);
					ДополнительныйПуть = Сред(ПутьКДанным, ПозицияКонцаОсновногоПути + 1);
					ЗначениеПутиКДанным = СтрШаблон("%1[%2].%3", ОсновнойПуть, ИндексСтроки, ДополнительныйПуть);
				Иначе
					ЗначениеПутиКДанным = ПутьКДанным;
				КонецЕсли;
			Иначе
				ЗначениеПутиКДанным = ПутьКДанным;
			КонецЕсли;
		Иначе
			ЗначениеПутиКДанным = "";
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ЗначениеКлюча,
			ЗначениеПутиКДанным,,,, ТекстОшибки);
		ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм навигационных ссылок.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	        - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                          - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		        - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ПолеНавигационнойСсылки - Строка - имя колонки таблицы, из которой будет извлекаться навигационная ссылка для
//                                     открытия формы при клике на ошибку.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СтрокиТаблицы, ПолеТаблицы, ПолеНавигационнойСсылки) Экспорт

	НаборСтрок = Неопределено;
	ДеревоЭлектронногоДокументаБЭДСлужебный.ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(,, СтрокаТаблицыДанных[ПолеНавигационнойСсылки]);
		ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через открытие формы.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	           - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                             - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		           - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ИмяФормы                   - Строка - полное имя формы, которую нужно открыть при клике по ошибке.
//  СтатичныеПараметрыФормы    - Структура - структура, которая будет передана в форму в качестве параметров.
//  ДинамическиеПараметрыФормы - Структура - описывает параметры, передаваемые в открываемую форму, значения по которым
//                                           формируются для каждой строки таблицы индивидуально:
//                                 * Ключ     - Строка - содержит имя параметра.
//                                 * Значение - Строка - имя поля таблицы, содержащего значение параметра.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СтрокиТаблицы, ПолеТаблицы, ИмяФормы,
	Знач СтатичныеПараметрыФормы = Неопределено, ДинамическиеПараметрыФормы = Неопределено) Экспорт

	НаборСтрок = Неопределено;
	ДеревоЭлектронногоДокументаБЭДСлужебный.ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Подготовим значения параметров.
		Если СтатичныеПараметрыФормы = Неопределено Тогда
			ЗначениеПараметровФормы = Новый Структура;
		Иначе
			ЗначениеПараметровФормы = ОбщегоНазначения.СкопироватьРекурсивно(СтатичныеПараметрыФормы);
		КонецЕсли;
		
		// Могли быть переданы динамические параметры, значения которых будут разными для каждой строки.
		Если ДинамическиеПараметрыФормы <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ДинамическиеПараметрыФормы Цикл
				ЗначениеПараметровФормы.Вставить(КлючИЗначение.Ключ, СтрокаТаблицыДанных[КлючИЗначение.Значение]);
			КонецЦикла;
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(,,, ИмяФормы, ЗначениеПараметровФормы);
		ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Добавляет в ошибку в хранилище накопленных ошибок.
//
// Параметры:
//  Ошибки			 				 - Массив - ошибки, накопленные за время обработки. Элементами массива являются структуры.
//                                     Состав структур см. в ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки().
//  СтрокаДерева			 		 - СтрокаДереваЗначений - строка дерева электронного документа, по реквизиту которой
//                                     фиксируется ошибка.
//  ТекстОшибки				 		 - Строка - текст фиксируемой ошибки.
//  ПодставлятьИмяРеквизита	 		 - Булево - если Истина, в начало сообщения об ошибке будет подставлено
//                                     прикладное имя реквизита.
//  НомерСтрокиДанных		 		 - Число - если указана, будет подставлена в имя реквизита.
//  ПрикладноеПредставлениеРеквизита - Строка - если указано, представление реквизита не будет получаться по строке дерева - 
//                                     будет использовано указанное представление.
//
Процедура ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки, ПодставлятьИмяРеквизита = Истина,
	НомерСтрокиДанных = Неопределено, ПрикладноеПредставлениеРеквизита = "") Экспорт
	
	ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки,
		ПодставлятьИмяРеквизита, НомерСтрокиДанных, ПрикладноеПредставлениеРеквизита);
	
КонецПроцедуры

// Возвращает стандартный текст ошибки для незаполненного значения дерева.
// 
// Возвращаемое значение:
//  Строка - текст ошибки.
//
Функция ТекстОшибкиНеЗаполненногоЗначенияДерева() Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.ТекстОшибкиНеЗаполненногоЗначенияДерева();

КонецФункции

// Формирует дерево данных для заполнения или чтения прикладным решением.
//
// Параметры:
//  ПутьКМакету - Строка - путь к макету в формате "ИмяОбработки.ИмяМакета", например,
//                         "ОбменСКонтрагентами.Акт501_Исполнитель" (см. Обработка.ОбменСКонтрагентами.Макеты).
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево документа.
//
//
Функция ДеревоЭлектронногоДокумента(ПутьКМакету) Экспорт
	
	Дерево = ДеревоЭлектронногоДокументаБЭДСлужебныйПовтИсп.ДеревоЭлектронногоДокумента(ПутьКМакету);
	
	Возврат Дерево.Скопировать();
	
КонецФункции

Процедура ЗаполнитьЗначенияРеквизитовВДереве(Дерево, ЗначенияРеквизитов) Экспорт
	
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДанных, Ошибки, ДатаПоФорматуФНС = Ложь) Экспорт
	
	ДеревоЭлектронногоДокументаБЭДСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанных(ДеревоДанных, Ошибки, ДатаПоФорматуФНС);
	
КонецПроцедуры

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - Строка - текстовое представление типа объекта.
//
// Возвращаемое значение:
//  Строка - тип справочника.
//
Функция ТипОбъекта(ОписаниеТипаОбъекта) Экспорт
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДанныеРазбора, Ошибка) Экспорт
	
	ДеревоРазбора             = ДанныеРазбора.ДеревоРазбора;
	СсылкиНаОбъектыПоИндексам = ДанныеРазбора.СсылкиНаОбъектыПоИндексам;
		
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
				
			ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьСсылкуНаОбъект(СсылкиНаОбъектыПоИндексам, СсылкаНаОбъект, НайденнаяСтрока.ИндексСтроки);
				
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора, Ложь, СсылкиНаОбъектыПоИндексам);
		Иначе
			Если НЕ ДеревоЭлектронногоДокументаБЭДСлужебный.ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора, Ложь, СсылкиНаОбъектыПоИндексам);
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта
					И СтрокаТипаВДереве.ТипОбъекта <> "ЕдиницыИзмерения" Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ДеревоЭлектронногоДокументаБЭДСлужебный.ТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
						
					ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьСсылкуНаОбъект(СсылкиНаОбъектыПоИндексам, СсылкаНаОбъект, НайденнаяСтрока.ИндексСтроки);
					
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора, Ложь, СсылкиНаОбъектыПоИндексам);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД               = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта  = ОписаниеОбъекта;
			НайденнаяСтрока.ИндексСтроки     = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			Если ДеревоЭлектронногоДокументаБЭДСлужебный.ЭтоСсылочныйОбъект(СтрокаТипаВДереве.ТипОбъекта) Тогда
				НайденнаяСтрока.ОписаниеТипа = ТипОбъекта(
					СтрокаТипаВДереве.ТипОбъекта);
			КонецЕсли;
				
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора, Ложь, СсылкиНаОбъектыПоИндексам);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
				
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора, Ложь, СсылкиНаОбъектыПоИндексам);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Процедура "восстанавливает" набор данных в таблицу значений. Если при формировании ЭД в доп.данные
// была помещена таблица значений, то при разборе ЭД набор данных (из доп.данных) преобразуется в таблицу значений.
//
// Параметры:
//   Дерево - ДеревоЗначений - набор доп.данных прочитанных из ЭД.
//   ТЗ - ТаблицаЗначений - таблица значений сформированная по данным из дерева значений.
//
Процедура СформироватьТаблицуЗначенийПоДопДанным(Дерево, ТЗ) Экспорт
	
	Для Каждого СтрокаТЗвДереве Из Дерево.Строки Цикл
		СтрокаТЗ = Неопределено;
		Для Каждого ЗначениеЯчейкиТЗ Из СтрокаТЗвДереве.Строки Цикл
			Если СтрокаТЗвДереве.ЗначениеРеквизита = "0" Тогда // 0-я строка ТЗ в дереве
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			Если СтрокаТЗ = Неопределено Тогда
				СтрокаТЗ = ТЗ.Добавить();
			КонецЕсли;
			Если ТЗ.Колонки.Найти(ЗначениеЯчейкиТЗ.ИмяРеквизита) = Неопределено Тогда
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			СтрокаТЗ[ЗначениеЯчейкиТЗ.ИмяРеквизита] = ЗначениеЯчейкиТЗ.ЗначениеРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруИБВДеревеДокумента(СтрокиТребующиеСопоставления, СоответствиеНоменклатуры) Экспорт
	
	ТоварыПодчиненыОднойКорневойСтрокеДерева = Ложь;
	
	Для Каждого Элемент Из СтрокиТребующиеСопоставления Цикл
		СтрокаТовара = Элемент.Ключ;
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовара, "ЗначениеРеквизита") Тогда
			ТоварыПодчиненыОднойКорневойСтрокеДерева = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	Если ТоварыПодчиненыОднойКорневойСтрокеДерева Тогда
		Для Каждого Элемент Из СтрокиТребующиеСопоставления Цикл
			СтрокаТовара = Элемент.Ключ;
			Идентификатор = Элемент.Значение.Идентификатор;
			ПутьКСопоставлению = СтрокаТовара.ПолныйПуть + ".Сопоставление";
			Для Каждого ЭлементСоответствия Из СоответствиеНоменклатуры Цикл
				Если Идентификатор = ЭлементСоответствия.НоменклатураКонтрагента.Идентификатор Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						СтрокаТовара, ПутьКСопоставлению + ".НоменклатураИБ", ЭлементСоответствия.НоменклатураИБ.Номенклатура);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						СтрокаТовара, ПутьКСопоставлению + ".ХарактеристикаИБ", ЭлементСоответствия.НоменклатураИБ.Характеристика);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						СтрокаТовара, ПутьКСопоставлению + ".УпаковкаИБ", ЭлементСоответствия.НоменклатураИБ.Упаковка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из СтрокиТребующиеСопоставления Цикл
			СтрокаТовара = Элемент.Ключ;
			Идентификатор = СтрокаТовара.ЗначениеРеквизита.Идентификатор;
			Для Каждого ЭлементСоответствия Из СоответствиеНоменклатуры Цикл
				Если Идентификатор = ЭлементСоответствия.НоменклатураКонтрагента.Идентификатор Тогда
					
					СтрокаТовара.ЗначениеРеквизита.Вставить("НоменклатураИБ", ЭлементСоответствия.НоменклатураИБ.Номенклатура);
					СтрокаТовара.ЗначениеРеквизита.Вставить("ХарактеристикаИБ", ЭлементСоответствия.НоменклатураИБ.Характеристика);
					СтрокаТовара.ЗначениеРеквизита.Вставить("УпаковкаИБ", ЭлементСоответствия.НоменклатураИБ.Упаковка);
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиТребующиеСопоставления(ДеревоДокумента) Экспорт
	
	Результат = Новый Соответствие;
	
	// Для случаев, когда товары в дереве ЭД представлены отдельными корневыми строками с именем "СтрокаТЧ".
	Если ДеревоДокумента.ЗначениеРеквизита = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоДокумента.Строки Цикл
			
			Если СтрокаДерева.Реквизит <> "СтрокаТЧ" Тогда
				Продолжить;
			КонецЕсли;
			Сопоставление = Неопределено;
			СтрокаКолонкиСопоставления = Неопределено;
			Для Каждого СтрокаКолонки Из СтрокаДерева.Строки Цикл
				Если СтрокаКолонки.Реквизит = "Сопоставление" Тогда
					СтрокаКолонкиСопоставления = СтрокаКолонки;
					Сопоставление = СтрокаКолонки.ЗначениеРеквизита;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Сопоставление = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не Сопоставление.Свойство("Идентификатор") Тогда
				Продолжить;
			КонецЕсли;
			// Проверим, что номенклатура уже заполнена.
			Если Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если  ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// Если пришел не наш идентификатор, то добавим данные к сопоставлению.
			Результат.Вставить(СтрокаКолонкиСопоставления, Сопоставление);
			
		КонецЦикла;
	Иначе
		// Для случаев, когда товары в дереве ЭД подчинены одной корневой строке дерева.
		ИменаТаблицТоваров = Новый Массив;
		ИменаТаблицТоваров.Добавить("СведенияОТоварах");
		ИменаТаблицТоваров.Добавить("ТаблицаТоваров");
		ИменаТаблицТоваров.Добавить("ТаблицаУслуг");
		ИменаТаблицТоваров.Добавить("РезультатыПриемки");
		
		Товары = Неопределено;
		Для Каждого ИмяТаблицы Из ИменаТаблицТоваров Цикл
			
			Товары = ДеревоДокумента.ЗначениеРеквизита.Строки.Найти(ИмяТаблицы, "ПолныйПуть");
			Если Товары <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Товары = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Для Каждого СтрокаТовара Из Товары.Строки Цикл
			
			Сопоставление = ДеревоЭлектронногоДокументаБЭДСлужебный.ИзвлечьСопоставлениеНоменклатурыИзДереваДокумента(СтрокаТовара);
			Если Сопоставление = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не Сопоставление.Свойство("Идентификатор") Тогда
				Продолжить;
			КонецЕсли;
			// Проверим, что номенклатура уже заполнена.
			Если Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если  ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// Если не заполнено, то добавим данные к сопоставлению.
			Результат.Вставить(СтрокаТовара, Сопоставление);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаРеквизитаДерева(Дерево, СтрокаДерева, ИмяРеквизита) Экспорт
	
	ИндексРеквизита = ЗначениеРеквизитаСтрокиДереваРазбора(Дерево, СтрокаДерева, ИмяРеквизита);
	Если ИндексРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Разделитель = СтрНайти(ИндексРеквизита,"_");
	ПоказательИндекса = Лев(ИндексРеквизита, Разделитель - 1);
	
	СтрокиСсылкаРеквизита = Дерево.Строки.Найти(ПоказательИндекса, "ИндексСтроки");
	Если СтрокиСсылкаРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаРеквизита = СтрокиСсылкаРеквизита.Строки[0];
	
	Возврат СтрокаРеквизита.СсылкаНаОбъект;
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено) Экспорт
	
	Возврат ДеревоЭлектронногоДокументаБЭДСлужебный.ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке);
	
КонецФункции

#КонецОбласти