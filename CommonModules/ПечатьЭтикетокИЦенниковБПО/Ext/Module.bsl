#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет предопределенные элементы в справочнике Шаблоны этикеток и ценников.
//
Процедура ЗаполнитьПредопределенныеЭлементы() Экспорт
	
	Справочники.ШаблоныЭтикетокИЦенниковБПО.ПриНачальномЗаполненииЭлементов();
	
КонецПроцедуры

// Обновить макеты этикеток на новый формат.
//
// Параметры:
//  Параметры - Структура
//
Процедура ОбновитьМакетыЭтикеток(Параметры = Неопределено) Экспорт 
	
	Макеты = Новый Массив;
	ПечатьЭтикетокИЦенниковБПОПереопределяемый.ОбновитьМакетыЭтикеток(Макеты);
	
	Для Каждого Макет Из Макеты Цикл // Структура
		
		Попытка
			
			ОбъектШаблона = Макет.Шаблон.Получить();
			
			Если Не ЗначениеЗаполнено(ОбъектШаблона) Тогда
				Продолжить;
			КонецЕсли;
			
			XMLТекстНовогоШаблона = КонвертироватьШаблонВXML(ОбъектШаблона.РедакторТабличныйДокумент);
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных();
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШаблоныЭтикетокИЦенниковБПО");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НовыйЭлемент = Справочники.ШаблоныЭтикетокИЦенниковБПО.СоздатьЭлемент();
				
				НовыйЭлемент.Наименование = Макет.Наименование;
				НовыйЭлемент.XMLОписаниеМакета = XMLТекстНовогоШаблона;
				НовыйЭлемент.СхемаКомпоновкиДанных = Макет.СхемаКомпоновкиДанных;
				НовыйЭлемент.Макет = Макет.Шаблон;
				НовыйЭлемент.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонТекстаОшибки = НСтр("ru = 'Не удалось создать новый макет этикетки:
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				МенеджерОборудования.ЗаписатьОшибкуВЖурналРегистрации(
					НСтр("ru = 'Обновление информационной базы'",ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстОшибки);
			КонецПопытки;
			
		Исключение
			Продолжить;
		КонецПопытки
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений товаров для печати этикеток
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Выбран - Булево
//   * НоменклатураБПО - ОпределяемыйТип.НоменклатураБПО
//   * ХарактеристикаБПО - ОпределяемыйТип.ХарактеристикаБПО
//   * УпаковкаБПО - ОпределяемыйТип.УпаковкаБПО
//   * ОрганизацияБПО - ОпределяемыйТип.ОрганизацияБПО
//   * Цена - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//   * Штрихкод - Строка
//   * ШаблонЦенникаЭтикетки - СправочникСсылка.ШаблоныЭтикетокИЦенниковБПО
//   * Количество - Число
//   * НомерСтроки - Число
//   * ИсходныйНомерСтроки - Число
//
Функция ТаблицаЗначенийТоваров() Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НоменклатураБПО", Новый ОписаниеТипов(ТипСтрока, Метаданные.ОпределяемыеТипы.НоменклатураБПО.Тип.Типы()));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ХарактеристикаБПО", Новый ОписаниеТипов(ТипСтрока, Метаданные.ОпределяемыеТипы.ХарактеристикаБПО.Тип.Типы()));
	ТаблицаЗначенийТоваров.Колонки.Добавить("УпаковкаБПО", Новый ОписаниеТипов(ТипСтрока, Метаданные.ОпределяемыеТипы.УпаковкаБПО.Тип.Типы()));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ОрганизацияБПО", Новый ОписаниеТипов(ТипСтрока, Метаданные.ОпределяемыеТипы.ОрганизацияБПО.Тип.Типы()));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов(ТипСтрока, Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип.Типы()));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЦенникаЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенниковБПО",));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
	ПечатьЭтикетокИЦенниковБПОПереопределяемый.ТаблицаЗначенийТоваров(СтандартнаяОбработка, ТаблицаЗначенийТоваров);
	
	Возврат ТаблицаЗначенийТоваров;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция КонвертироватьШаблонВXML(Макет, ЭтоКонвертацияШаблона = Ложь) Экспорт
	
	Попытка
		Область = Макет.Область("R1C1"); // ОбластьЯчеекТабличногоДокумента
		ШиринаСтолбца = Область.Примечание.Ширина;
		ВысотаСтроки = Область.Примечание.Высота;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Макет);
		ТекстXMLШаблона = ЗаписьXML.Закрыть();
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстXMLШаблона);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML); 
		
		ОсновнойУзел = ДокументDOM.ДочерниеУзлы.Элемент(0);
		
		СоответствиеКолонок = Новый Соответствие;
		СоответствиеФорматов = Новый Соответствие;
		СоответствиеРядов = Новый Соответствие;
		СоответствиеШтрихкодов = Новый Соответствие;
		СоответствиеИзображений = Новый Соответствие;
		ПараметрыШаблона = Новый Массив;
		Изображения = Новый Массив; 
		НомерФормата = 1;
		ТаблицаСоединений = Новый ТаблицаЗначений();
		ТаблицаСоединений.Колонки.Добавить("Колонка");
		ТаблицаСоединений.Колонки.Добавить("Ряд");
		ТаблицаСоединений.Колонки.Добавить("Ширина");
		ТаблицаСоединений.Колонки.Добавить("Высота"); 
		ТаблицаПараметров = Новый ТаблицаЗначений();
		ТаблицаПараметров.Колонки.Добавить("Ряд");
		ТаблицаПараметров.Колонки.Добавить("Колонка");
		ТаблицаПараметров.Колонки.Добавить("Параметр"); 
		ТаблицаИзображений = Новый ТаблицаЗначений();
		ТаблицаИзображений.Колонки.Добавить("НачальнаяКолонка");
		ТаблицаИзображений.Колонки.Добавить("КонечнаяКолонка");
		ТаблицаИзображений.Колонки.Добавить("СмещениеСлева");
		ТаблицаИзображений.Колонки.Добавить("СмещениеСправа");
		ТаблицаИзображений.Колонки.Добавить("НачальныйРяд");
		ТаблицаИзображений.Колонки.Добавить("КонечныйРяд");
		ТаблицаИзображений.Колонки.Добавить("СмещениеСверху");
		ТаблицаИзображений.Колонки.Добавить("СмещениеСнизу");
		ТаблицаИзображений.Колонки.Добавить("ИДИзображения");
		ТаблицаИзображений.Колонки.Добавить("ИДКартинки");
		
		Поля = Новый ТаблицаЗначений;
		Поля.Колонки.Добавить("Наименование");
		Поля.Колонки.Добавить("Представление");
		Поля.Колонки.Добавить("Тип");
		Поля.Колонки.Добавить("ТипЗаполнения");
		Поля.Колонки.Добавить("ЗначениеПоУмолчанию");
		Поля.Колонки.Добавить("Значение");
		Поля.Колонки.Добавить("Верх");
		Поля.Колонки.Добавить("Лево");
		Поля.Колонки.Добавить("Низ");
		Поля.Колонки.Добавить("Право");
		Поля.Колонки.Добавить("Ориентация");
		Поля.Колонки.Добавить("ИмяШрифта");
		Поля.Колонки.Добавить("РазмерШрифта");
		Поля.Колонки.Добавить("Жирный");
		Поля.Колонки.Добавить("Наклонный");
		Поля.Колонки.Добавить("Подчеркивание");
		Поля.Колонки.Добавить("Зачеркивание");
		Поля.Колонки.Добавить("РамкаСлева");
		Поля.Колонки.Добавить("РамкаСверху");
		Поля.Колонки.Добавить("РамкаСправа");
		Поля.Колонки.Добавить("РамкаСнизу");
		Поля.Колонки.Добавить("ТипРамки");
		Поля.Колонки.Добавить("ТолщинаРамки");
		Поля.Колонки.Добавить("ТипШтрихкода");
		Поля.Колонки.Добавить("РазмерШрифтаПодписи");
		Поля.Колонки.Добавить("ПодписьШтрихкода");
		Поля.Колонки.Добавить("КонтрольныйСимвол");
		Поля.Колонки.Добавить("ПоложениеПоГоризонтали",);
		Поля.Колонки.Добавить("ПоложениеПоВертикали",);
		Поля.Колонки.Добавить("Многострочность",);
		Поля.Колонки.Добавить("Формат");
		Поля.Колонки.Добавить("Фон");
		
		Для Каждого Узел Из ОсновнойУзел.ДочерниеУзлы Цикл
			
			Если Узел.ИмяУзла = "columns" Тогда
				
				Для Каждого ДочернийУзелКолонки Из Узел.ДочерниеУзлы Цикл
					
					Если ДочернийУзелКолонки.ИмяУзла = "size" Тогда
						КоличествоКолонокШаблона = Число(ДочернийУзелКолонки.ДочерниеУзлы[0].ТекстовоеСодержимое);
					КонецЕсли;
					
					Если ДочернийУзелКолонки.ИмяУзла = "columnsItem" Тогда
						СоответствиеКолонок.Вставить(Число(ДочернийУзелКолонки.ДочерниеУзлы[0].ТекстовоеСодержимое), ДочернийУзелКолонки.ДочерниеУзлы[1].ТекстовоеСодержимое);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Узел.ИмяУзла = "format" Тогда
				Если Узел.ДочерниеУзлы.Количество() > 0 Тогда
					СоответствиеФорматов.Вставить(НомерФормата, Узел.ДочерниеУзлы[0].ТекстовоеСодержимое);
				Иначе
					СоответствиеФорматов.Вставить(НомерФормата, "0");
				КонецЕсли;
				НомерФормата = НомерФормата + 1;
			КонецЕсли;
			
			Если Узел.ИмяУзла = "rowsItem" Тогда
				Если Узел.ДочерниеУзлы[1].ДочерниеУзлы[0].ИмяУзла = "formatIndex" Тогда
					СоответствиеРядов.Вставить(Число(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое), Узел.ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое);
					НомерФорматаДобавления = Узел.ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое;
				Иначе
					СоответствиеРядов.Вставить(Число(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое), "0");
					НомерФорматаДобавления = "0";
				КонецЕсли;
				Если Узел.ДочерниеУзлы[1].ИмяУзла = "indexTo" Тогда
					КоличествоСоответствий = Число(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое) - Число(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое);
					ДобавленоСоответствий = 0;
					Пока ДобавленоСоответствий <> КоличествоСоответствий Цикл
						ДобавленоСоответствий = ДобавленоСоответствий + 1;
						СоответствиеРядов.Вставить(Число(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое) + ДобавленоСоответствий, НомерФорматаДобавления);
					КонецЦикла;
				КонецЕсли;
				ИндексРяда = Число(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое);
				Для Каждого ДочернийУзелРяда Из Узел.ДочерниеУзлы Цикл
					Если ДочернийУзелРяда.ИмяУзла = "row" Тогда
						НомерКолонки = 0;
						Для Каждого ДочернийУзелВторогоПорядкаРяда Из ДочернийУзелРяда.ДочерниеУзлы Цикл
							Если ДочернийУзелВторогоПорядкаРяда.ИмяУзла = "c" Тогда
								Если ДочернийУзелВторогоПорядкаРяда.ДочерниеУзлы[0].ИмяУзла = "i" Тогда
									ИндексКолонки = ДочернийУзелВторогоПорядкаРяда.ДочерниеУзлы[0].ТекстовоеСодержимое;
								Иначе
									ИндексКолонки = НомерКолонки;
									НомерКолонки = НомерКолонки + 1;
								КонецЕсли;
								Для Каждого ДочернийУзелТретьегоПорядкаРяда Из ДочернийУзелВторогоПорядкаРяда.ДочерниеУзлы Цикл
									Если ДочернийУзелТретьегоПорядкаРяда.ИмяУзла = "c" И ДочернийУзелТретьегоПорядкаРяда.ДочерниеУзлы.Количество() > 1 Тогда
										УзелПараметра = ДочернийУзелТретьегоПорядкаРяда.ДочерниеУзлы[1];
										Если УзелПараметра.ИмяУзла = "tl" И УзелПараметра.ДочерниеУзлы.Количество() >= 1 Тогда
											НаименованиеПараметра = УзелПараметра.ДочерниеУзлы[0].ДочерниеУзлы[1].ТекстовоеСодержимое;
										ИначеЕсли УзелПараметра.ИмяУзла = "parameter" Тогда
											НаименованиеПараметра = УзелПараметра.ТекстовоеСодержимое;
										Иначе
											Продолжить;
										КонецЕсли;
										НовыйПараметр = ТаблицаПараметров.Добавить();
										НовыйПараметр.Ряд = ИндексРяда;
										НовыйПараметр.Колонка = ИндексКолонки;
										НовыйПараметр.Параметр = НаименованиеПараметра;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Узел.ИмяУзла = "merge" Тогда
				НовоеСоединение = ТаблицаСоединений.Добавить();
				Для Каждого ДочернийУзелСоединения Из Узел.ДочерниеУзлы Цикл
					Если ДочернийУзелСоединения.ИмяУзла = "r" Тогда
						НовоеСоединение.Ряд = Число(ДочернийУзелСоединения.ТекстовоеСодержимое);
					ИначеЕсли ДочернийУзелСоединения.ИмяУзла = "c" Тогда
						НовоеСоединение.Колонка = Число(ДочернийУзелСоединения.ТекстовоеСодержимое);
					ИначеЕсли ДочернийУзелСоединения.ИмяУзла = "w" Тогда
						НовоеСоединение.Ширина = Число(ДочернийУзелСоединения.ТекстовоеСодержимое);
					ИначеЕсли ДочернийУзелСоединения.ИмяУзла = "h" Тогда
						НовоеСоединение.Высота = Число(ДочернийУзелСоединения.ТекстовоеСодержимое);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Узел.ИмяУзла = "namedItem" Тогда
				СоответствиеШтрихкодов.Вставить(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое, Узел.ДочерниеУзлы[0].ТекстовоеСодержимое);
			КонецЕсли;
			
			Если Узел.ИмяУзла = "picture" Тогда
				СоответствиеИзображений.Вставить(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое, Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
			КонецЕсли;
			
			Если Узел.ИмяУзла = "drawing" Тогда
				ИзображениеШаблона = ТаблицаИзображений.Добавить();
				Для Каждого ДочернийУзелИзображения Из Узел.ДочерниеУзлы Цикл
					Если ДочернийУзелИзображения.ИмяУзла = "id" Тогда
						ИзображениеШаблона.ИДИзображения = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "beginRow" Тогда
						ИзображениеШаблона.НачальныйРяд = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "beginRowOffset" Тогда
						ИзображениеШаблона.СмещениеСверху = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "endRow" Тогда
						ИзображениеШаблона.КонечныйРяд = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "endRowOffset" Тогда
						ИзображениеШаблона.СмещениеСнизу = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли; 
					Если ДочернийУзелИзображения.ИмяУзла = "beginColumn" Тогда
						ИзображениеШаблона.НачальнаяКолонка = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "beginColumnOffset" Тогда
						ИзображениеШаблона.СмещениеСлева = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "endColumn" Тогда
						ИзображениеШаблона.КонечнаяКолонка = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "endColumnOffset" Тогда
						ИзображениеШаблона.СмещениеСправа = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					Если ДочернийУзелИзображения.ИмяУзла = "pictureIndex" Тогда
						ИзображениеШаблона.ИДКартинки = ДочернийУзелИзображения.ТекстовоеСодержимое;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если Узел.ИмяУзла = "defaultFormatIndex" Тогда
				ФорматПоУмолчанию = Узел.ДочерниеУзлы[0].ТекстовоеСодержимое;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущаяКолонка = 0;
		ШиринаМакета = 0;
		КоличествоПикселейНаЕдиницуШирины = Неопределено;
		КоличествоПикселейНаЕдиницуВысоты = Неопределено;
		Пока ТекущаяКолонка < КоличествоКолонокШаблона Цикл
			ЗначениеФорматаКолонки = СоответствиеКолонок.Получить(ТекущаяКолонка);
			Попытка
				ШиринаКолонки = ?(ЗначениеФорматаКолонки <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаКолонки))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
			Исключение
				ШиринаКолонки = 48;
			КонецПопытки;
			ШиринаМакета = ШиринаКолонки + ШиринаМакета;
			ТекущаяКолонка = ТекущаяКолонка + 1;
		КонецЦикла;
		КоличествоПикселейНаЕдиницуШирины = ШиринаМакета/ШиринаСтолбца;
		
		ВысотаМакета = 0;
		Для Каждого Ряд Из СоответствиеРядов Цикл
			ЗначениеФорматаРяда = Ряд.Значение;
			Попытка 
				ВысотаРяда = ?(ЗначениеФорматаРяда <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаРяда))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
			Исключение
				ВысотаРяда = 72;
			КонецПопытки;
			ВысотаМакета = ВысотаМакета + ВысотаРяда;
		КонецЦикла;
		КоличествоПикселейНаЕдиницуВысоты = ВысотаМакета/ВысотаСтроки;
		
		Для Каждого ПараметрМакета Из ТаблицаПараметров Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Колонка", ПараметрМакета.Колонка);
			Отбор.Вставить("Ряд", ПараметрМакета.Ряд);
			Строки = ТаблицаСоединений.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Ширина", 1);
				СтруктураСтроки.Вставить("Высота", 1);
				СтруктураСтроки.Вставить("Колонка", ПараметрМакета.Колонка);
				СтруктураСтроки.Вставить("Ряд", ПараметрМакета.Ряд);
				Строки.Добавить(СтруктураСтроки);
			Иначе
				ТекущаяКолонка = Число(Строки[0].Колонка);
			КонецЕсли;
			КоличествоКолонок = ?(ЗначениеЗаполнено(Строки[0].Ширина), Число(Строки[0].Ширина) + ТекущаяКолонка, ТекущаяКолонка);
			ШиринаПараметра = 0;
			Пока КоличествоКолонок >= ТекущаяКолонка Цикл
				ЗначениеФорматаКолонки = СоответствиеКолонок.Получить(ТекущаяКолонка);
				ШиринаКолонки = ?(ЗначениеЗаполнено(ЗначениеФорматаКолонки), Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаКолонки))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
				ШиринаПараметра = ШиринаПараметра + ШиринаКолонки;
				ТекущаяКолонка = ТекущаяКолонка + 1;
			КонецЦикла; 
			
			ОтступСлева = 0;
			ТекущаяКолонка = Число(Строки[0].Колонка);
			НачальнаяКолонка = 0;
			Пока НачальнаяКолонка < ТекущаяКолонка Цикл
				ЗначениеФорматаКолонки = СоответствиеКолонок.Получить(НачальнаяКолонка);
				ШиринаКолонки = ?(ЗначениеЗаполнено(ЗначениеФорматаКолонки), Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаКолонки))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
				ОтступСлева = ОтступСлева + ШиринаКолонки;
				НачальнаяКолонка = НачальнаяКолонка + 1;
			КонецЦикла;
			
			ТекущийРяд = Число(Строки[0].Ряд);
			КоличествоРядов = ?(ЗначениеЗаполнено(Строки[0].Высота), Число(Строки[0].Высота) + ТекущийРяд, ТекущийРяд);
			ВысотаПараметра = 0;
			Пока КоличествоРядов >= ТекущийРяд Цикл
				ЗначениеФорматаРяда = СоответствиеРядов.Получить(ТекущийРяд); 
				ВысотаРяда = ?(ЗначениеФорматаРяда <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаРяда))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
				ВысотаПараметра = ВысотаПараметра + ВысотаРяда;
				ТекущийРяд = ТекущийРяд + 1;
			КонецЦикла;
			
			ОтступСверху = 0;
			ТекущийРяд = Число(Строки[0].Ряд);
			НачальныйРяд = 0;
			Пока НачальныйРяд <= ТекущийРяд Цикл
				ЗначениеФорматаРяда = СоответствиеРядов.Получить(НачальныйРяд);
				ВысотаРяда = ?(ЗначениеФорматаРяда <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаРяда))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
				ОтступСверху = ОтступСверху + ВысотаРяда;
				НачальныйРяд = НачальныйРяд + 1;
			КонецЦикла;
			
			НовоеПоле = Поля.Добавить();
			НовоеПоле.Право = ?(Цел((ШиринаПараметра + ОтступСлева)/КоличествоПикселейНаЕдиницуШирины) <> 0 , Цел((ШиринаПараметра + ОтступСлева)/КоличествоПикселейНаЕдиницуШирины), 1);
			НовоеПоле.Лево = ?(Цел(ОтступСлева/КоличествоПикселейНаЕдиницуШирины) <> 0, Цел(ОтступСлева/КоличествоПикселейНаЕдиницуШирины), 1);
			НовоеПоле.Верх = ?(Цел(ОтступСверху/КоличествоПикселейНаЕдиницуВысоты) <> 0, Цел(ОтступСверху/КоличествоПикселейНаЕдиницуВысоты), 1);
			НовоеПоле.Низ = ?(Цел((ОтступСверху + ВысотаПараметра)/КоличествоПикселейНаЕдиницуВысоты) <> 0, Цел((ОтступСверху + ВысотаПараметра)/КоличествоПикселейНаЕдиницуВысоты), 1);
			НовоеПоле.Значение = ПараметрМакета.Параметр; 
			НовоеПоле.Тип = "Text";
			НовоеПоле.ТипЗаполнения = "Parameter";
			НовоеПоле.РазмерШрифта = 6;
			НовоеПоле.ИмяШрифта = "Arial";
			НовоеПоле.Жирный = Ложь;
			НовоеПоле.Наклонный = Ложь; 
			НовоеПоле.Подчеркивание = Ложь;
			НовоеПоле.Зачеркивание = Ложь; 
			НовоеПоле.РамкаСверху = Ложь;
			НовоеПоле.РамкаСлева = Ложь;
			НовоеПоле.РамкаСправа = Ложь;
			НовоеПоле.РамкаСнизу = Ложь;
			
			НовоеПоле.Наименование = Новый УникальныйИдентификатор();
			
		КонецЦикла;
		
		Если Не ЭтоКонвертацияШаблона Тогда
			Для Каждого ИзображениеМакета Из ТаблицаИзображений Цикл
				
				ТекущаяКолонка = Число(ИзображениеМакета.НачальнаяКолонка);
				ШиринаПараметра = 0;
				Пока ТекущаяКолонка <= Число(ИзображениеМакета.КонечнаяКолонка) Цикл
					ЗначениеФорматаКолонки = СоответствиеКолонок.Получить(ТекущаяКолонка);
					ШиринаКолонки = ?(ЗначениеЗаполнено(ЗначениеФорматаКолонки), Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаКолонки))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
					ШиринаПараметра = ШиринаПараметра + ШиринаКолонки;
					ТекущаяКолонка = ТекущаяКолонка + 1;
				КонецЦикла;
				ШиринаПараметра = ШиринаМакета - ИзображениеМакета.СмещениеСлева - ИзображениеМакета.СмещениеСправа;
				
				ОтступСлева = 0;
				ТекущаяКолонка = ИзображениеМакета.НачальнаяКолонка;
				НачальнаяКолонка = 0;
				Пока НачальнаяКолонка < Число(ТекущаяКолонка) Цикл
					ЗначениеФорматаКолонки = СоответствиеКолонок.Получить(НачальнаяКолонка);
					ШиринаКолонки = ?(ЗначениеЗаполнено(ЗначениеФорматаКолонки), Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаКолонки))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
					ОтступСлева = ОтступСлева + ШиринаКолонки;
					НачальнаяКолонка = НачальнаяКолонка + 1;
				КонецЦикла;
				ОтступСлева = ОтступСлева + ИзображениеМакета.СмещениеСлева;
				
				ТекущийРяд = Число(ИзображениеМакета.НачальныйРяд);
				ВысотаПараметра = 0;
				Пока ТекущийРяд < Число(ИзображениеМакета.КонечныйРяд) Цикл
					ЗначениеФорматаРяда = СоответствиеРядов.Получить(ТекущийРяд);
					ВысотаРяда = ?(ЗначениеФорматаРяда <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаРяда))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
					ВысотаПараметра = ВысотаПараметра + ВысотаРяда;
					ТекущийРяд = ТекущийРяд + 1;
				КонецЦикла;
				ВысотаПараметра = ВысотаПараметра - ИзображениеМакета.СмещениеСверху - ИзображениеМакета.СмещениеСнизу;
				
				ОтступСверху = 0;
				ТекущийРяд = Число(ИзображениеМакета.НачальныйРяд);
				НачальныйРяд = 0;
				Пока НачальныйРяд < ТекущийРяд Цикл
					ЗначениеФорматаРяда = СоответствиеРядов.Получить(НачальныйРяд);
					ШиринаКолонки = ?(ЗначениеФорматаРяда <> "0", Число(СоответствиеФорматов.Получить(Число(ЗначениеФорматаРяда))), Число(СоответствиеФорматов.Получить(Число(ФорматПоУмолчанию))));
					ОтступСверху = ОтступСверху + ВысотаРяда;
					НачальныйРяд = НачальныйРяд + 1;
				КонецЦикла;
				ОтступСверху = ОтступСверху + ИзображениеМакета.СмещениеСверху;
				
				НовоеПоле = Поля.Добавить();
				НовоеПоле.Право = Окр((ШиринаПараметра + ОтступСлева)/КоличествоПикселейНаЕдиницуШирины);
				НовоеПоле.Лево = Окр(ОтступСлева/КоличествоПикселейНаЕдиницуШирины);
				НовоеПоле.Верх = Окр(ОтступСверху/КоличествоПикселейНаЕдиницуВысоты);
				НовоеПоле.Низ = Окр((ОтступСверху + ВысотаПараметра)/КоличествоПикселейНаЕдиницуВысоты);
				НовоеПоле.ТипШтрихкода = "EAN13";
				Если ЗначениеЗаполнено(СоответствиеШтрихкодов.Получить(ИзображениеМакета.ИДИзображения)) Тогда
					НовоеПоле.Тип = "Barcode";
					НовоеПоле.ТипЗаполнения = "Parameter";
					НовоеПоле.ПодписьШтрихкода = "false"; 
					НовоеПоле.Значение = "Штрихкод";
				Иначе
					НовоеПоле.Тип = "Image";
					НовоеПоле.ТипЗаполнения = "Constant";
					НовоеПоле.Значение = СоответствиеИзображений.Получить(ИзображениеМакета.ИДКартинки);
					НовоеПоле.РамкаСверху = Ложь;
					НовоеПоле.РамкаСлева = Ложь;
					НовоеПоле.РамкаСнизу = Ложь;
					НовоеПоле.РамкаСправа = Ложь;
				КонецЕсли;
				НовоеПоле.Наименование = Новый УникальныйИдентификатор();
				
			КонецЦикла;
		КонецЕсли;
		
		ЭтоКонвертацияШаблона = Истина;
		XMLТекстНовогоШаблона = ОборудованиеПринтерыЭтикетокВызовСервера.СохранитьXMLФайл(Окр(ШиринаМакета/КоличествоПикселейНаЕдиницуШирины), 
		Окр(ВысотаМакета/КоличествоПикселейНаЕдиницуВысоты), 0, Поля, ЭтоКонвертацияШаблона);
		
	Исключение 
		XMLТекстНовогоШаблона = "";
	КонецПопытки; 
	
	Возврат XMLТекстНовогоШаблона
	
КонецФункции

#КонецОбласти

#КонецЕсли

