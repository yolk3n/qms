
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Регистрирует тарифицируемые услуги конфигурации из Структуры.
// (см. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг)
//
// Параметры:
//  ПоставщикиУслуг - Массив - массив структур, описывающей поставщика услуги.
//
// Пример структуры
//  Обязательные ключи:
//    * "Идентификатор" - идентификатор поставщика услуги (тип Строка(50)),
//    * "Наименование" - наименование поставщика услуги (тип Строка(150)),
//    * "Услуги" - массив услуг, массив структур с обязательными ключами:
//         ** "Идентификатор" - идентификатор услуги  (тип Строка(50))
//         ** "Наименование" - наименование услуги  (тип Строка(150))
//         ** "ТипУслуги" - тип услуги  (тип ПеречислениеСсылка.ТипыУслуг)
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	НовыйПоставщик = ОписаниеПоставщикаУслугТарификации();
	НовыйПоставщик.Услуги.Добавить(ОписаниеУслуги_ИнтеграцияСМобильнымПриложением());
	
	ПоставщикиУслуг.Добавить(НовыйПоставщик);
	
КонецПроцедуры

Функция УслугаДоступна_ПоддержкаСмартфонаДляСканированияШтрихкодов() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("УслугаДоступна", Истина);
	РезультатПроверки.Вставить("ТекстОшибки"   , "");
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ОписаниеПоставщикаУслуг = ОписаниеПоставщикаУслугТарификации();
		ОписаниеУслуги          = ОписаниеУслуги_ИнтеграцияСМобильнымПриложением();
		Если Не Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ОписаниеПоставщикаУслуг.Идентификатор, ОписаниеУслуги.Идентификатор) Тогда
			ТекстОшибки = НСтр("ru = 'Нет доступа к сервису обмена с мобильным приложением.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Возможно, не подключена или не доступна услуга.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Проверьте наличие активной подписки на тариф, включающий услугу ""%1"".'");
			РезультатПроверки.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОписаниеУслуги.Наименование);
			РезультатПроверки.УслугаДоступна = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ОписаниеПоставщикаУслугТарификации()
	
	НовыйПоставщик = Новый Структура;
	НовыйПоставщик.Вставить("Идентификатор", "БольничнаяАптека");
	НовыйПоставщик.Вставить("Наименование" , НСтр("ru = 'Конфигурация ""Медицина. Больничная аптека"", редакция 2'"));
	НовыйПоставщик.Вставить("Услуги"       , Новый Массив);
	
	Возврат НовыйПоставщик;
	
КонецФункции

Функция ОписаниеУслуги_ИнтеграцияСМобильнымПриложением()
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", "ИнтеграцияСМобильнымПриложением");
	Услуга.Вставить("Наименование" , НСтр("ru = 'Поддержка смартфона для сканирования и передачи штрихкодов в конфигурацию.'"));
	Услуга.Вставить("ТипУслуги"    , Перечисления.ТипыУслуг.Безлимитная);
	
	Возврат Услуга;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
