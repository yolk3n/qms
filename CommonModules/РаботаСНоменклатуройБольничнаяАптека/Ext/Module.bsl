
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Для вызова из других подсистем
#Область ДляВызоваИзДругихПодсистем

#Область АвтоподборНоменклатуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ИзменениеТекстаРедактирования.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ПриИзменении.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("ПредставлениеШтрихкодов");
	МассивПолей.Добавить("ЕдиницаИзмерения");
	МассивПолей.Добавить("Упаковка");
	МассивПолей.Добавить("Артикул");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// Создание вида номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта. 
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ВидНоменклатурыСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	Попытка
		
		ДанныеОбъекта = ДанныеВидаНоменклатурыПоДаннымСервиса(ДанныеЗаполнения);
		
		Объект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		
		ЗаполнитьЗначенияРеквизитовВидаНоменклатуры(Объект, ДанныеОбъекта);
		
		Если Не ЗначениеЗаполнено(Объект.ГруппаБухгалтерскогоУчета) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена группа бухгалтерского учета для вида номенклатуры.
				|Необходимо в настройках сервиса 1С:Номенклатура выбрать группу бухгалтерского учета по умолчанию.'");
		КонецЕсли;
		
		Если Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа() И Не ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена группа доступа для вида номенклатуры.
				|Необходимо в настройках сервиса 1С:Номенклатура выбрать группу доступа по умолчанию.'");
		КонецЕсли;
		
		Объект.Записать();
		
		ВидНоменклатурыСсылка = Объект.Ссылка;
		
	Исключение
		Текст = НСтр("ru = 'Не удалось создать вид номенклатуры по данным сервиса по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ВызватьИсключение Текст;
	КонецПопытки;
	
КонецПроцедуры

// Создание группы видов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения				 - СтрокаТаблицыЗначений - Колонки: Идентификатор, Наименование, 
//                                                             ИдентификаторРодителя, Уровень, РодительИнформационнойБазы.
//  ГруппаВидовНоменклатурыСсылка	 - Ссылка - ссылка на новую группу.
//
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	
	Попытка
		
		Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
			НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
		Иначе
			НоваяГруппа = Справочники.ВидыНоменклатуры.СоздатьГруппу();
		КонецЕсли;
		
		НоваяГруппа.Наименование = ДанныеЗаполнения.Наименование;
		НоваяГруппа.Родитель     = ДанныеЗаполнения.РодительИнформационнойБазы;
		
		НоваяГруппа.Записать();
		
		ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
		
	Исключение
		Текст = НСтр("ru = 'Не удалось записать группу вида номенклатуры по данным сервиса по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ВызватьИсключение Текст;
	КонецПопытки;

КонецПроцедуры

// Создание номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса
//  НоменклатураСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры) Тогда
			Текст = НСтр("ru = 'Для номенклатуры <%1> не удалось подобрать вид номенклатуры.
				|В базе ни один вид номенклатуры не сопоставлен с категорией <%2> из сервиса 1С:Номенклатура.'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеЗаполнения.Наименование, ДанныеЗаполнения.Категория.Наименование);
		КонецЕсли;
		
		ДанныеОбъекта = ДанныеНоменклатурыПоДаннымСервиса(ДанныеЗаполнения);
		
		Объект = Справочники.Номенклатура.СоздатьЭлемент();
		
		ЗаписатьДанныеРеквизитовНоменклатуры(ДанныеОбъекта);
		ЗаполнитьЗначенияРеквизитовНоменклатуры(Объект, ДанныеОбъекта);
		
		Объект.Записать();
		
		НоменклатураСсылка = Объект.Ссылка;
		
		СохранитьИзображенияНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения.Изображения);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось создать номенклатуру по данным сервиса по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ВызватьИсключение Текст;
	КонецПопытки;
	
	// Запись штрихкодов номенклатуры см. в процедуре ЗаписатьШтрихкоды
	// Заполнение дополнительных реквизитов см. в процедуре ЗаполнитьЗначенияДополнительныхРеквизитов.
	
КонецПроцедуры

// Сохранение изображений при загрузке номенклатуры.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - владелец изображений.
//  Изображения	 - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.Изображения
//
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	
	Если Не ЗначениеЗаполнено(Изображения) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ФайлКартинки");
	
	Для Каждого СтрокаСИзображением Из Изображения Цикл
		
		Попытка
			
			ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
			ПараметрыПолучения.ЗащищенноеСоединение = Истина;
			
			РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(СтрокаСИзображением.ИзображениеURL, ПараметрыПолучения);
			Если Не РезультатСкачивания.Статус Тогда
				ВызватьИсключение РезультатСкачивания.СообщениеОбОшибке;
			КонецЕсли;
			
			ИмяСРасширением = Сред(СтрокаСИзображением.ИзображениеURL, СтрНайти(СтрокаСИзображением.ИзображениеURL, "/", НаправлениеПоиска.СКонца) + 1);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
			ПараметрыФайла.ВладелецФайлов     = НоменклатураСсылка;
			ПараметрыФайла.ИмяБезРасширения   = Лев(ИмяСРасширением, СтрНайти(ИмяСРасширением, ".", НаправлениеПоиска.СКонца) - 1);
			ПараметрыФайла.РасширениеБезТочки = Сред(ИмяСРасширением, СтрНайти(ИмяСРасширением, ".", НаправлениеПоиска.СКонца) + 1);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, РезультатСкачивания.Путь);
			
			УдалитьИзВременногоХранилища(РезультатСкачивания.Путь);
			
			Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
				НоменклатураОбъект.ФайлКартинки = ПрисоединенныйФайл;
				НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
				НоменклатураОбъект.Записать();
				ФайлКартинки = НоменклатураОбъект.ФайлКартинки;
			КонецЕсли;
			
		Исключение
			Текст = НСтр("ru = 'Не удалось добавить изображение по причине:'");
			Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, НоменклатураСсылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Запись штрихкодов в информационную базу. Вызов метода идет в разрезе одной номенклатуры. 
// Процедура используется как для записи штрихкодов при загрузке номенклатуры, так и при обновлении. 
// Перед записью штрихкодов рекомендуется проверить их наличие в информационной базе.
//
// Параметры:
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - данные по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка, Неопределено - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДанныеПоШтрихкодам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодов = Новый Соответствие;
	Для Каждого ДанныеПоШтрихкоду Из ДанныеПоШтрихкодам Цикл
		ДанныеШтрихкодов.Вставить(ДанныеПоШтрихкоду.Штрихкод, Новый Структура("Номенклатура", ДанныеПоШтрихкоду.Номенклатура));
	КонецЦикла;
	
	Попытка
		
		НоменклатураСервер.ЗарегистрироватьШтрихкоды(ДанныеШтрихкодов);
		
		Для Каждого КлючИЗначение Из ДанныеШтрихкодов Цикл
			
			Штрихкод          = КлючИЗначение.Ключ;
			ДанныеПоШтрихкоду = КлючИЗначение.Значение;
			
			Если ДанныеПоШтрихкоду.Статус = "Существует" Тогда
				Если ДанныеПоШтрихкоду.СуществующиеДанные.Номенклатура <> ДанныеПоШтрихкоду.Номенклатура Тогда
					Текст = НСтр("ru = 'Регистрируемый штрихкод %1, уже зарегистрированы для номенклатуры %2.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Штрихкод, ДанныеПоШтрихкоду.СуществующиеДанные.Номенклатура);
					ВызватьИсключение Текст;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Регистрация штрихкодов номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось зарегистрировать штрихкоды номенклатуры по причине:'");
		
		ТекстЖурналаРегистрации = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстЖурналаРегистрации);
		
		ТекстПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстПользователю);
		
	КонецПопытки;
	
КонецПроцедуры


// Создание или обновление дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры  - СправочникСсылка - ссылка на вид номенклатуры.
//  СтрокаДанных     - Структура, СтрокаТаблицыЗначений - данные для заполнения реквизита.
//                                                        Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                        поле ДополнительныеРеквизиты.
//  РеквизитСсылка   - ЛюбаяСсылка - ссылка на новый реквизит.
//
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
		РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();
	Иначе
		РеквизитВБазе = РаботаСНоменклатурой.РеквизитПоИдентификатору(СтрокаДанных.Идентификатор);
		
		Если РеквизитВБазе <> Неопределено Тогда
			РеквизитСсылка = РеквизитВБазе;
			Возврат;
		КонецЕсли;
		
		РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		РеквизитОбъект.ТипЗначения = РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
		
	КонецЕсли;
	
	НаборСвойств       = ВидНоменклатуры.НаборСвойств;
	УИД                = Новый УникальныйИдентификатор();
	СтрокаУИД          = СтрЗаменить(Строка(УИД), "-", "");
	ИмяРеквизита       = СтрокаДанных.Наименование + "_" + СтрокаУИД;
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
	Наименование       = СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
	
	РеквизитОбъект.Имя          = ИмяРеквизита;
	РеквизитОбъект.НаборСвойств = НаборСвойств;
	РеквизитОбъект.Доступен     = Истина;
	РеквизитОбъект.Наименование = Наименование;
	РеквизитОбъект.Заголовок    = СтрокаДанных.Наименование;
	
	РеквизитОбъект.Записать();
	
	РеквизитСсылка = РеквизитОбъект.Ссылка;
	
КонецПроцедуры

// Создание или обновление значения реквизита.
//
// Параметры:
//  ДополнительныйРеквизит           - ЛюбаяСсылка - ссылка на реквизит.
//  СтрокаДанных                     - СтрокаТаблицыЗначений - строка таблицы значений.
//                                                             Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                             поле ДополнительныеРеквизиты, колонка Значения.
//  ЗначениеРеквизитаСсылка          - Ссылка - ссылка на новое значение.
//
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
		ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
	Иначе
		ЗначениеВБазе = РаботаСНоменклатурой.ЗначениеПоИдентификатору(ДополнительныйРеквизит, СтрокаДанных.Идентификатор);
		
		Если ЗначениеВБазе <> Неопределено Тогда
			ЗначениеРеквизитаСсылка = ЗначениеВБазе;
			Возврат;
		КонецЕсли;
		
		ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	КонецЕсли;
	
	ЗначениеОбъект.Владелец           = ДополнительныйРеквизит;
	ЗначениеОбъект.Наименование       = СтрокаДанных.Наименование;
	ЗначениеОбъект.ПолноеНаименование = СтрокаДанных.Наименование;
	ЗначениеОбъект.Записать();
	
	ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;
	
КонецПроцедуры

// Создание дополнительных реквизитов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                             поле ДополнительныеРеквизиты.
//  НоменклатураСсылка - ЛюбаяСсылка - ссылка на элемент.
//
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если Не ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// Присвоение новых дополнительных реквизитов виду номенклатуры, которому они должны принадлежать.
//
// Параметры:
//  ВидНоменклатуры         - СправочникСсылка - ссылка на вид номенклатуры.
//  ДополнительныеРеквизиты - Массив - (СправочникСсылка) массив ссылок на новые дополнительные реквизиты.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак принадлежности реквизитам характеристик. В зависимости от этого
//												параметра, может быть реализован разный алгоритм присвоения.
//
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	НаборСвойствОбъект = ВидНоменклатуры.НаборСвойств.ПолучитьОбъект();
	Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
	КонецЦикла;
	НаборСвойствОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// Получение штрихкодов в разрезе номенклатуры и характеристик номенклатуры. 
// Порядок строк должен порядку строк в исходной таблице (Номенклатура Возр, Характеристика Возр).
//
// Параметры:
//  НоменклатураИХарактеристики	 - ТаблицаЗначений - исходная таблица с номенклатурой и характеристиками.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//  ДанныеПоШтрихкодам - ТаблицаЗначений - таблица с данными по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура  КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Штрихкод      КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В (&Номенклатура)
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ШтрихкодыНоменклатуры.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеНоменклатуры.Ссылка       КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Штрихкод  КАК Штрихкод
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.РегистрЛекарственныхСредств.Штрихкоды КАК ШтрихкодыНоменклатуры
	|		ПО
	|			ШтрихкодыНоменклатуры.Ссылка = ДанныеНоменклатуры.ЭлементКАТ
	|ГДЕ
	|	ДанныеНоменклатуры.Ссылка В (&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура                                  КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)  КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод                                      КАК Штрихкод
	|ИЗ
	|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураИХарактеристики.ВыгрузитьКолонку("Номенклатура"));
	
	Если ДанныеПоШтрихкодам.Колонки.Количество() > 0 Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеПоШтрихкодам.Добавить(), Выборка)
		КонецЦикла;
	Иначе
		ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецПроцедуры


// Получение вида номенклатуры по номенклатуре.
//
// Параметры:
//  НоменклатураСсылка   - Ссылка - номенклатура.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");
	
КонецПроцедуры

// Получение вида номенклатуры из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;
	
КонецПроцедуры

// Получение видов номенклатуры в разрезе номенклатуры.
//
// Параметры:
//  Номенклатура	 - Массив - (Ссылка) ссылки на номенклатуру.
//  ВидыНоменклатуры - ТаблицаЗначений - данные по видам номенклатуры.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//
Процедура ПолучитьВидыНоменклатурыПоНоменклатуре(Номенклатура, ВидыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеНоменклатуры.Ссылка           КАК Номенклатура,
	|	ДанныеНоменклатуры.ВидНоменклатуры  КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|ГДЕ
	|	ДанныеНоменклатуры.Ссылка В (&Номенклатура)
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если ВидыНоменклатуры.Колонки.Количество() > 0 Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ВидыНоменклатуры.Добавить(), Выборка)
		КонецЦикла;
	Иначе
		ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецПроцедуры


// Получение значений реквизитов вида номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ВидыНоменклатуры - Ссылка, Массив - виды номенклатуры по которым идет запрос значений реквизитов.
//  Результат        - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на вид номенклатуры и именем ВидНоменклатуры и иметь вид: 
//                                      ВидНоменклатуры, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка                                                 КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование                                           КАК Наименование,
	
	|	ВидыНоменклатуры.ТипНоменклатуры                                        КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.ТипНоменклатурыРасширенный                             КАК ТипНоменклатурыРасширенный,
	
	|	ВидыНоменклатуры.ГруппаБухгалтерскогоУчета                              КАК ГруппаБухгалтерскогоУчета,
	|	ВидыНоменклатуры.ГруппаПКУ                                              КАК ГруппаПКУ,
	|	ВидыНоменклатуры.ГруппаНоменклатуры                                     КАК ГруппаНоменклатуры,
	
	|	ВидыНоменклатуры.СтавкаНДС                                              КАК СтавкаНДС,
	
	|	ВидыНоменклатуры.ЕдиницаИзмерения                                       КАК ЕдиницаИзмерения,
	|	ВидыНоменклатуры.ВариантЗаполненияМинимальнойЕдиницыОтпуска             КАК ВариантЗаполненияМинимальнойЕдиницыОтпуска,
	|	ВидыНоменклатуры.ВариантЗаполненияОсновнойЕдиницыУчета                  КАК ВариантЗаполненияОсновнойЕдиницыУчета,
	
	|	ВидыНоменклатуры.ИспользоватьСерии                                      КАК ИспользоватьСерии,
	|	ВидыНоменклатуры.ПолитикаУчетаСерий                                     КАК ПолитикаУчетаСерий,
	|	ВидыНоменклатуры.ПолитикаУчетаСерийВОтделениях                          КАК ПолитикаУчетаСерийВОтделениях,
	
	|	ВидыНоменклатуры.ИспользоватьПартии                                     КАК ИспользоватьПартии,
	|	ВидыНоменклатуры.ПолитикаУчетаПартий                                    КАК ПолитикаУчетаПартий,
	|	ВидыНоменклатуры.ПолитикаУчетаПартийВОтделениях                         КАК ПолитикаУчетаПартийВОтделениях,
	
	|	ВидыНоменклатуры.НастройкаИспользованияСерий                            КАК НастройкаИспользованияСерий,
	|	ВидыНоменклатуры.ИспользоватьНомерСерии                                 КАК ИспользоватьНомерСерии,
	|	ВидыНоменклатуры.ИспользоватьСрокГодностиСерии                          КАК ИспользоватьСрокГодностиСерии,
	|	ВидыНоменклатуры.ИспользоватьКоличествоСерии                            КАК ИспользоватьКоличествоСерии,
	|	ВидыНоменклатуры.ТочностьУказанияСрокаГодностиСерии                     КАК ТочностьУказанияСрокаГодностиСерии,
	
	|	ВидыНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры                КАК ШаблонНаименованияДляПечатиНоменклатуры,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры                 КАК ШаблонРабочегоНаименованияНоменклатуры,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияСерии                        КАК ШаблонРабочегоНаименованияСерии,
	
	|	ВидыНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры  КАК ЗапретРедактированияНаименованияДляПечатиНоменклатуры,
	|	ВидыНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры   КАК ЗапретРедактированияРабочегоНаименованияНоменклатуры,
	
	|	ВидыНоменклатуры.ШаблонСтеллажнойКарточки                               КАК ШаблонСтеллажнойКарточки,
	|	ВидыНоменклатуры.ШаблонЦенника                                          КАК ШаблонЦенника,
	|	ВидыНоменклатуры.ШаблонЭтикетки                                         КАК ШаблонЭтикетки,
	
	|	ВидыНоменклатуры.КодТНВЭД                                               КАК КодТНВЭД,
	|	ВидыНоменклатуры.ОКПД2                                                  КАК ОКПД2,
	|	ВидыНоменклатуры.ЦеноваяГруппа                                          КАК ЦеноваяГруппа,
	|	ВидыНоменклатуры.Описание                                               КАК Описание
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)
	|");
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение значений реквизитов из формы вида номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма вида номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("ТипНоменклатурыРасширенный");
	
	ЗначенияРеквизитов.Вставить("ГруппаБухгалтерскогоУчета");
	ЗначенияРеквизитов.Вставить("ГруппаПКУ");
	ЗначенияРеквизитов.Вставить("ГруппаНоменклатуры");
	
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ВариантЗаполненияМинимальнойЕдиницыОтпуска");
	ЗначенияРеквизитов.Вставить("ВариантЗаполненияОсновнойЕдиницыУчета");
	
	ЗначенияРеквизитов.Вставить("ИспользоватьСерии");
	ЗначенияРеквизитов.Вставить("ПолитикаУчетаСерий");
	ЗначенияРеквизитов.Вставить("ПолитикаУчетаСерийВОтделениях");
	
	ЗначенияРеквизитов.Вставить("ИспользоватьПартии");
	ЗначенияРеквизитов.Вставить("ПолитикаУчетаПартий");
	ЗначенияРеквизитов.Вставить("ПолитикаУчетаПартийВОтделениях");
	
	ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий");
	ЗначенияРеквизитов.Вставить("ИспользоватьНомерСерии");
	ЗначенияРеквизитов.Вставить("ИспользоватьСрокГодностиСерии");
	ЗначенияРеквизитов.Вставить("ИспользоватьКоличествоСерии");
	ЗначенияРеквизитов.Вставить("ТочностьУказанияСрокаГодностиСерии");
	
	ЗначенияРеквизитов.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
	ЗначенияРеквизитов.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
	ЗначенияРеквизитов.Вставить("ШаблонРабочегоНаименованияСерии");
	
	ЗначенияРеквизитов.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры");
	ЗначенияРеквизитов.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры");
	
	ЗначенияРеквизитов.Вставить("ШаблонСтеллажнойКарточки");
	ЗначенияРеквизитов.Вставить("ШаблонЦенника");
	ЗначенияРеквизитов.Вставить("ШаблонЭтикетки");
	
	ЗначенияРеквизитов.Вставить("КодТНВЭД");
	ЗначенияРеквизитов.Вставить("ОКПД2");
	ЗначенияРеквизитов.Вставить("ЦеноваяГруппа");
	ЗначенияРеквизитов.Вставить("Описание");
	
	Для Каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры


// Формирование текста запроса номенклатуры и характеристик для последующего чтение из информационной базы.
// На основании текста запроса, на стороне библиотеки будет подготовлен итоговый запрос, 
// для порционного чтения объектов из информационной базы.
//
// Требование к запросу:
// - в результате запроса строки должны быть уникальны
// - не должны использоваться временные таблицы
// - в результате выполнения запроса должны попадать два поля: 
//		- Номенклатура (ОпределяемыйТип.НоменклатураРаботаСНоменклатурой)
//		- Характеристика (ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой)
// - если характеристики для номенклатуры не используются, в поле характеристики должно 
//   содержаться пустое значение объекта ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//    Поля результата запроса:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику (в запросе следует заложить проверку на NULL).
//
Процедура ТекстЗапросаНоменклатурыИХарактеристик(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеНоменклатуры.Ссылка                                           КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)  КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|";
	
КонецПроцедуры


// Получение значений реквизитов номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  Номенклатура - Ссылка, Массив - номенклатура по которым идет запрос значений реквизитов.
//  Результат       - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на номенклатуру и именем Номенклатура и иметь вид: 
//                                      Номенклатура, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеНоменклатуры.Ссылка                             КАК Номенклатура,
	|	ДанныеНоменклатуры.ВидНоменклатуры                    КАК ВидНоменклатуры,
	|	ДанныеНоменклатуры.ТипНоменклатурыРасширенный         КАК ТипНоменклатурыРасширенный,
	|	ДанныеНоменклатуры.Артикул                            КАК Артикул,
	|	ДанныеНоменклатуры.СтавкаНДС                          КАК СтавкаНДС,
	|	ДанныеНоменклатуры.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
	|	ДанныеНоменклатуры.Упаковка                           КАК Упаковка,
	|	ДанныеНоменклатуры.ОсновнаяЕдиницаУчета               КАК ОсновнаяЕдиницаУчета,
	|	ДанныеНоменклатуры.МинимальнаяЕдиницаОтпускаИзАптеки  КАК МинимальнаяЕдиницаОтпускаИзАптеки,
	|	ДанныеНоменклатуры.КодТНВЭД                           КАК КодТНВЭД,
	|	ДанныеНоменклатуры.ОКПД2                              КАК ОКПД2,
	|	ДанныеНоменклатуры.Описание                           КАК Описание,
	|	ДанныеНоменклатуры.ГруппаПКУ                          КАК ГруппаПКУ,
	|	ДанныеНоменклатуры.ЭлементКАТ                         КАК ЭлементКАТ,
	
	|	ДанныеНоменклатуры.ВесИспользовать                    КАК ВесИспользовать,
	|	ДанныеНоменклатуры.ВесЕдиницаИзмерения                КАК ВесЕдиницаИзмерения,
	|	ДанныеНоменклатуры.ВесЗнаменатель                     КАК ВесЗнаменатель,
	|	ДанныеНоменклатуры.ВесЧислитель                       КАК ВесЧислитель,
	
	|	ДанныеНоменклатуры.ОбъемИспользовать                  КАК ОбъемИспользовать,
	|	ДанныеНоменклатуры.ОбъемЕдиницаИзмерения              КАК ОбъемЕдиницаИзмерения,
	|	ДанныеНоменклатуры.ОбъемЗнаменатель                   КАК ОбъемЗнаменатель,
	|	ДанныеНоменклатуры.ОбъемЧислитель                     КАК ОбъемЧислитель,
	
	|	ДанныеНоменклатуры.ДлинаИспользовать                  КАК ДлинаИспользовать,
	|	ДанныеНоменклатуры.ДлинаЕдиницаИзмерения              КАК ДлинаЕдиницаИзмерения,
	|	ДанныеНоменклатуры.ДлинаЗнаменатель                   КАК ДлинаЗнаменатель,
	|	ДанныеНоменклатуры.ДлинаЧислитель                     КАК ДлинаЧислитель,
	
	|	ДанныеНоменклатуры.ПлощадьИспользовать                КАК ПлощадьИспользовать,
	|	ДанныеНоменклатуры.ПлощадьЕдиницаИзмерения            КАК ПлощадьЕдиницаИзмерения,
	|	ДанныеНоменклатуры.ПлощадьЗнаменатель                 КАК ПлощадьЗнаменатель,
	|	ДанныеНоменклатуры.ПлощадьЧислитель                   КАК ПлощадьЧислитель,
	
	|	НЕОПРЕДЕЛЕНО                                          КАК Штрихкоды
	
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|ГДЕ
	|	ДанныеНоменклатуры.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод      КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура  КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В(&Номенклатура)
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ШтрихкодыНоменклатуры.Партия            = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка         КАК Изображения,
	|	ПрисоединенныеФайлы.ВладелецФайла  КАК Номенклатура
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла В(&Номенклатура)
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результаты = Запрос.ВыполнитьПакет();
	ДанныеНоменклатуры = Результаты[0].Выгрузить();
	ДанныеШтрихкодов   = Результаты[1].Выгрузить();
	
	Для Каждого ЭлементДанных Из ДанныеНоменклатуры Цикл
		Отбор = Новый Структура("Номенклатура", ЭлементДанных.Номенклатура);
		ЭлементДанных.Штрихкоды = ДанныеШтрихкодов.Скопировать(Отбор, "Штрихкод").ВыгрузитьКолонку("Штрихкод");
	КонецЦикла;
	
	Результат = ДанныеНоменклатуры;
	
КонецПроцедуры

// Получение значений реквизитов из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("ТипНоменклатурыРасширенный");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("Упаковка");
	ЗначенияРеквизитов.Вставить("ОсновнаяЕдиницаУчета");
	ЗначенияРеквизитов.Вставить("МинимальнаяЕдиницаОтпускаИзАптеки");
	ЗначенияРеквизитов.Вставить("КодТНВЭД");
	ЗначенияРеквизитов.Вставить("ОКПД2");
	ЗначенияРеквизитов.Вставить("Описание");
	ЗначенияРеквизитов.Вставить("ГруппаПКУ");
	ЗначенияРеквизитов.Вставить("ЭлементКАТ");
	
	Для Каждого ТипИзмеряемойВеличины Из Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений() Цикл
		Мера = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипИзмеряемойВеличины);
		ЗначенияРеквизитов.Вставить(Мера + "Использовать");
		ЗначенияРеквизитов.Вставить(Мера + "ЕдиницаИзмерения");
		ЗначенияРеквизитов.Вставить(Мера + "Знаменатель");
		ЗначенияРеквизитов.Вставить(Мера + "Числитель");
	КонецЦикла;
	
	ДанныеОбъекта = Форма.Объект;
	Для Каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = ДанныеОбъекта[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	ЗначенияРеквизитов.Вставить("Номенклатура", ДанныеОбъекта.Ссылка);
	
	ЗначенияРеквизитов.Вставить("Штрихкоды", Новый Массив);
	Если Не ДанныеОбъекта.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура        = &Номенклатура
		|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	И ШтрихкодыНоменклатуры.Партия            = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|");
		
		Запрос.УстановитьПараметр("Номенклатура", ДанныеОбъекта.Ссылка);
		
		ЗначенияРеквизитов.Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
		
	КонецЕсли;
	
КонецПроцедуры


// Получение используемых для вида номенклатуры дополнительных реквизитов.
//
// Параметры:
//  ВидНоменклатуры   - СправочникСсылка - вид номенклатуры в разрезе которого производится поиск данных.
//  ТаблицаРеквизитов - ТаблицаЗначений - таблица реквизитов. Колонки:
//    * РеквизитВидаНоменклатуры              - Ссылка - ссылка дополнительный реквизит.
//    * РеквизитВидаНоменклатурыПредставление - Строка - представление реквизита.
//    * ЯвляетсяХарактеристикой               - Булево - Истина, если реквизит является реквизитом характеристики.
//
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство            КАК РеквизитВидаНоменклатуры,
	|	ДополнительныеРеквизиты.Свойство.Заголовок  КАК РеквизитВидаНоменклатурыПредставление,
	|	ЛОЖЬ                                        КАК ЯвляетсяХарактеристикой
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|		(ВЫБРАТЬ
	|			ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|		ИЗ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ГДЕ
	|			ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Если ТаблицаРеквизитов.Колонки.Количество() > 0 Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаРеквизитов.Добавить(), Выборка)
		КонецЦикла;
	Иначе
		ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

// Получение значений дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Номенклатура         - Массив - (Ссылка) массив ссылок номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - заполняемые данные значений свойство.
//    * ВладелецСвойств - Ссылка - ссылка на номенклатуру.
//    * Свойство - Ссылка - свойство номенклатуры.
//    * Значение - Произвольный - значение свойства.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение значений дополнительных реквизитов из формы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - таблица значений дополнительных реквизитов. Колонки:
//    * Свойство           - Ссылка - дополнительный реквизит.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры


// Получение номенклатуры по штрихкодам.
//
// Параметры:
//  Штрихкоды			 - Массив - массив штрихкодов (Строка).
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - итоговая таблица данных с колонками 
//                                           Штрихкод, Номенклатура, ЕдиницаИзмерения, Характеристика.
//
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	// Не используется, т.к. не используется форма Обработки.РаботаСНоменклатурой.Форма.ПоискНоменклатурыПоШтрихкоду.
	
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхИзСервиса

// Процедура вызывается после получения данных номенклатуры из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов. Например на этом этапе можно 
// создать бренды, производителей, единицы измерения и так далее.
//
// Параметры:
//  ДанныеПоНоменклатуре - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре) Экспорт
	
	ДанныеПоНоменклатуре.Колонки.Добавить("ЭлементКАТ", Новый ОписаниеТипов("Структура"));
	ДанныеПоНоменклатуре.Колонки.Добавить("ОКПД2"     , Новый ОписаниеТипов("Структура"));
	ДанныеПоНоменклатуре.Колонки.Добавить("ТНВЭД"     , Новый ОписаниеТипов("Структура"));
	ДанныеПоНоменклатуре.Колонки.Добавить("КодТНВЭД"  , Новый ОписаниеТипов("Структура"));
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого ДанныеНоменклатуры Из ДанныеПоНоменклатуре Цикл
		
		// Изменение типа для номенклатуры предопределенных категорий.
		Если ТипЗнч(ДанныеНоменклатуры.Категория) = Тип("Структура") Тогда
			ИдентификаторКатегории = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНоменклатуры.Категория, "Идентификатор");
			КорректироватьТипНоменклатурыПоИдентификаторуКатегории(ДанныеНоменклатуры, ИдентификаторКатегории);
		КонецЕсли;
		
		// Подготовка вложенных классификаторов номенклатуры
		Если ДанныеНоменклатуры.Тип = ТипНоменклатурыСервисаЛекарственноеСредство() Тогда
			ПодготовитьДанныеЛекарственныхСредствКЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры);
		Иначе
			// Данные ОКПД2 получаются из ЭлементаКАТ
			ПодготовитьДанныеОКПД2КЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры);
		КонецЕсли;
		
		ПодготовитьДанныеТНВЭДКЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ОблачныеКлассификаторыБольничнаяАптека.ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого ДанныеНоменклатуры Из ДанныеПоНоменклатуре Цикл
		
		Если ДанныеНоменклатуры.Тип = ТипНоменклатурыСервисаЛекарственноеСредство() Тогда
			
			ДополнитьДанныеНоменклатурыДаннымиЛекарственныхСредств(ЗагружаемыеДанные, ДанныеНоменклатуры);
			
			// Дополнительные реквизиты лекарственных средств уже используются для загрузки лекарственных средств.
			// В качестве дополнительных реквизитов они не нужны.
			ДанныеНоменклатуры.ДополнительныеРеквизиты.Очистить();
			
		Иначе
			// Данные ОКПД2 получаются из ЭлементаКАТ
			ДополнитьДанныеНоменклатурыДаннымиОКПД2(ЗагружаемыеДанные, ДанныеНоменклатуры);
		КонецЕсли;
		
		ДополнитьДанныеНоменклатурыДаннымиТНВЭД(ЗагружаемыеДанные, ДанныеНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается после получения данных категорий из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов.
//
// Параметры:
//  ДанныеПоКатегориям - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям) Экспорт
	
	КатегорииУслуг = Новый Массив;
	
	ГраницаДанных = ДанныеПоКатегориям.Количество() - 1;
	Для Индекс = 0 По ГраницаДанных Цикл
		
		СтрокаДанных = ДанныеПоКатегориям[ГраницаДанных - Индекс];
		Если СтрокаДанных.Тип = "Услуга" Тогда
			КатегорииУслуг.Добавить(СтрокаДанных.Наименование);
			ДанныеПоКатегориям.Удалить(СтрокаДанных);
		Иначе
			КорректироватьТипНоменклатурыПоИдентификаторуКатегории(СтрокаДанных, СтрокаДанных.Идентификатор);
		КонецЕсли;
		
		Если СтрокаДанных.Тип = ТипНоменклатурыСервисаЛекарственноеСредство() Тогда
			// Дополнительные реквизиты лекарственного средства будут конвертированы напрямую в реквизиты соответствующих объектов.
			СтрокаДанных.ДополнительныеРеквизиты.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если КатегорииУслуг.Количество() > 0 Тогда
		
		Если КатегорииУслуг.Количество() = 1 Тогда
			Текст = НСтр("ru = 'Категория ""%1"" с типом ""Услуга"" не поддерживается и не может быть загружена.'");
		Иначе
			Текст = НСтр("ru = 'Категории ""%1"" с типом ""Услуга"" не поддерживаются и не могут быть загружены.'");
		КонецЕсли;
		
		НезагруженныеКатегорииСтрокой = СтрСоединить(КатегорииУслуг, """, """);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НезагруженныеКатегорииСтрокой);
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// Сравнение значений реквизитов вида номенклатуры и категории.
//
// Параметры:
//  ДанныеКатегории       - СтрокаТаблицыЗначений - данные по категории. Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ДанныеВидаНоменклатуры - СтрокаТаблицыЗначений, Структура, Ссылка - данные по виду номенклатуре. См. ПолучитьЗначенияРеквизитовВидовНоменклатуры
//  ТаблицаОтличийРеквизитов - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	
	ДанныеОбъекта = ДанныеВидаНоменклатурыПоДаннымСервиса(ДанныеКатегории);
	
	СтандартныеРеквизиты = Метаданные.Справочники.ВидыНоменклатуры.СтандартныеРеквизиты;
	Реквизиты            = Метаданные.Справочники.ВидыНоменклатуры.Реквизиты;
	
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ДобавитьОтличияРеквизитовОбъекта(ТаблицаОтличийРеквизитов, ДанныеВидаНоменклатуры, ДанныеОбъекта, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ДобавитьОтличияРеквизитовОбъекта(ТаблицаОтличийРеквизитов, ДанныеВидаНоменклатуры, ДанныеОбъекта, Реквизит);
	КонецЦикла;
	
КонецПроцедуры

// Сравнение значений реквизитов номенклатуры информационной базы и номенклатуры сервиса.
//
// Параметры:
//  ДанныеНоменклатурыСервиса - СтрокаТаблицыЗначений - Данные по номенклатуре.
//                              Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//  ДанныеНоменклатурыБазы    - СтрокаТаблицыЗначений, Структура, Ссылка - данные по номенклатуре.
//                              См. процедуры ПолучитьЗначенияРеквизитовНоменклатуры,
//                              ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
//  ТаблицаОтличийРеквизитов  - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	Если ТаблицаОтличийРеквизитов.Колонки.Найти("ТолькоПросмотр") = Неопределено Тогда
		ТаблицаОтличийРеквизитов.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ДанныеОбъекта = ДанныеНоменклатурыПоДаннымСервиса(ДанныеНоменклатурыСервиса);
	
	СтандартныеРеквизиты = Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты;
	Реквизиты            = Метаданные.Справочники.Номенклатура.Реквизиты;
	
	ЭлементКАТСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "ЭлементКАТ");
	
	ОбязательныеРеквизиты = Новый Массив;
	Если Не ЗначениеЗаполнено(ДанныеНоменклатурыБазы.Номенклатура) Тогда
		ОбязательныеРеквизиты.Добавить(Реквизиты.ТипНоменклатурыРасширенный);
		Если ЗначениеЗаполнено(ЭлементКАТСервиса) Тогда
			ОбязательныеРеквизиты.Добавить(Реквизиты.ЭлементКАТ);
		КонецЕсли;
		Если ДанныеОбъекта.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ДанныеОбъекта.ЕдиницаИзмерения) Тогда
			ОбязательныеРеквизиты.Добавить(Реквизиты.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПереходИзРЛС = ЗначениеЗаполнено(ЭлементКАТСервиса) И ТипЗнч(ДанныеНоменклатурыБазы.ЭлементКАТ) = Тип("СправочникСсылка.РегистрЛекарственныхСредств");
	Если ЭтоПереходИзРЛС Тогда
		
		ИменаНаследуемыхРеквизитов = Новый Массив;
		ИменаНаследуемыхРеквизитов.Добавить("СрокГодности");
		ИменаНаследуемыхРеквизитов.Добавить("ЕдиницаИзмеренияСрокаГодности");
		ИменаНаследуемыхРеквизитов.Добавить("КодРосздравнадзора");
		ИменаНаследуемыхРеквизитов.Добавить("УникальныйКодРосздравнадзора");
		
		НаследуемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеНоменклатурыБазы.ЭлементКАТ, СтрСоединить(ИменаНаследуемыхРеквизитов, ","));
		
		Для Каждого ИмяРеквизита Из ИменаНаследуемыхРеквизитов Цикл
			Значение = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(ЭлементКАТСервиса, ИмяРеквизита);
			Если Не ЗначениеЗаполнено(Значение) Тогда
				ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановитьЗначениеСвойстваДанныхКлассификатора(ЭлементКАТСервиса, ИмяРеквизита, НаследуемыеРеквизиты[ИмяРеквизита]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ДобавитьОтличияРеквизитовОбъекта(ТаблицаОтличийРеквизитов, ДанныеНоменклатурыБазы, ДанныеОбъекта, Реквизит);
	КонецЦикла;
	
	АтообновляемыеЗаблокированныеРеквизиты = АтообновляемыеЗаблокированныеРеквизиты();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ДобавитьОтличияРеквизитовОбъекта(ТаблицаОтличийРеквизитов, ДанныеНоменклатурыБазы, ДанныеОбъекта, Реквизит, ОбязательныеРеквизиты);
		
		Если ТаблицаОтличийРеквизитов.Количество() > 0 Тогда
			СтрокаОтличия = ТаблицаОтличийРеквизитов[ТаблицаОтличийРеквизитов.Количество() - 1];
			Если Реквизит.Имя = СтрокаОтличия.РеквизитОбъекта Тогда
				// Можно обновить заблокированные реквизиты, добавленные в коллекцию АтообновляемыеЗаблокированныеРеквизиты,
				// кроме реквизита ЭлементКАТ, если тип реквизита - СправочникСсылка.РегистрЛекарственныхСредств,
				// т.к. нужно вручную контролировать переход от РЛС на КЛП.
				Если АтообновляемыеЗаблокированныеРеквизиты.Найти(СтрокаОтличия.РеквизитОбъекта) <> Неопределено
					И (СтрокаОтличия.РеквизитОбъекта <> Реквизиты.ЭлементКАТ.Имя Или Не ЭтоПереходИзРЛС) Тогда
					СтрокаОтличия.РеквизитОбъекта = ИзмененноеИмяАвтообновляемогоЗаблокированногоРеквизита(СтрокаОтличия.РеквизитОбъекта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОтличияШтрихкодовНоменклатуры(ТаблицаОтличийРеквизитов, ДанныеНоменклатурыБазы, ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// Заполнение реквизитов вида номенклатуры.
//
// Параметры:
//  ВидНоменклатурыСсылка - СправочникСсылка - ссылка на вид номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Объект = ВидНоменклатурыСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(Объект);
		
		ДанныеОбъекта = Новый Структура;
		Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, "Пометка") Или ЭлементКоллекции.Пометка Тогда
				ДанныеОбъекта.Вставить(ЭлементКоллекции.РеквизитОбъекта, ЭлементКоллекции.НовоеЗначение);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияРеквизитовВидаНоменклатуры(Объект, ДанныеОбъекта);
		
		Объект.Записать();
		Объект.Разблокировать();
		
	Исключение
		Текст = НСтр("ru = 'Не удалось заполнить вид номенклатуры по данным сервиса по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ВызватьИсключение Текст;
	КонецПопытки;
	
КонецПроцедуры

// Процедура для интерактивного заполнения вида номенклатуры. Если параметр ТаблицаОтличий заполнен - 
// заполнение вида номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеВидаНоменклатуры. 
// Если параметр ТаблицаОтличий не заполнен - происходит загрузка вида номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма вида номенклатуры. 
//  ТаблицаОтличий					 - ТаблицаЗначений - таблица изменений реквизитов вида номенклатуры, 
//                                                       формируемая в методе РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные категории сервиса.
//
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, ТаблицаОтличий = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Если ЗначениеЗаполнено(ТаблицаОтличий) Тогда
		
		Для Каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, "Пометка") Или ЭлементКоллекции.Пометка Тогда
				ДанныеОбъекта.Вставить(ЭлементКоллекции.РеквизитОбъекта, ЭлементКоллекции.НовоеЗначение);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		
		// ДанныеИнтерактивногоЗаполнения заполнена, если один Вид номенклатуры создается на основании нескольких Категорий сервиса.
		
		Для Каждого ЭлементКоллекции Из ДанныеИнтерактивногоЗаполнения Цикл
			
			ТекущиеДанныеОбъекта = ДанныеВидаНоменклатурыПоДаннымСервиса(ЭлементКоллекции);
			Для Каждого КлючИЗначение Из ТекущиеДанныеОбъекта Цикл
				
				Если Не ДанныеОбъекта.Свойство(КлючИЗначение.Ключ) Тогда
					
					// Если свойства в основной структуре нет, тогда значение добавляется безусловно.
					ДанныеОбъекта.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
					
				ИначеЕсли КлючИЗначение.Ключ = "Наименование" Тогда
					
					// Наименования всех категорий конкатенируются.
					ДанныеОбъекта[КлючИЗначение.Ключ] = ДанныеОбъекта[КлючИЗначение.Ключ] + "; " + КлючИЗначение.Значение;
					
				ИначеЕсли (КлючИЗначение.Ключ = "ТипНоменклатурыРасширенный" Или КлючИЗначение.Ключ = "СтавкаНДС")
						И ДанныеОбъекта[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					
					// Если данные категорий отличаются, тогда реквизит вида номенклатуры не заполняется.
					ДанныеОбъекта[КлючИЗначение.Ключ] = Неопределено;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияРеквизитовВидаНоменклатуры(Форма.Объект, ДанныеОбъекта);
	
КонецПроцедуры


// Заполнение реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка - СправочникСсылка - ссылка на номенклатуру.
//  ТаблицаИзменений   - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                         сформирована в методе ПолучитьОтличияНоменклатуры.
//                                         см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		АтообновляемыеЗаблокированныеРеквизиты = АтообновляемыеЗаблокированныеРеквизиты(Истина);
		
		Объект = НоменклатураСсылка.ПолучитьОбъект();
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(Объект);
		
		ДанныеОбъекта = Новый Структура;
		Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, "Пометка") Или ЭлементКоллекции.Пометка Тогда
				
				Если АтообновляемыеЗаблокированныеРеквизиты.Найти(ЭлементКоллекции.РеквизитОбъекта) <> Неопределено Тогда
					ЭлементКоллекции.РеквизитОбъекта = ИсходноеИмяАвтообновляемогоЗаблокированногоРеквизита(ЭлементКоллекции.РеквизитОбъекта);
				КонецЕсли;
				
				ДанныеОбъекта.Вставить(ЭлементКоллекции.РеквизитОбъекта, ЭлементКоллекции.НовоеЗначение);
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДанныеРеквизитовНоменклатуры(ДанныеОбъекта);
		ЗаполнитьЗначенияРеквизитовНоменклатуры(Объект, ДанныеОбъекта);
		
		Объект.Записать();
		Объект.Разблокировать();
		
	Исключение
		Текст = НСтр("ru = 'Не удалось заполнить номенклатуру по данным сервиса по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ВызватьИсключение Текст;
	КонецПопытки;
	
	// Запись штрихкодов номенклатуры см. в процедуре ЗаписатьШтрихкоды
	// Заполнение дополнительных реквизитов см. в процедуре ЗаполнитьДополнительныеРеквизитыНоменклатуры.
	
КонецПроцедуры

// Интерактивное заполнение реквизитов номенклатуры. Если параметр ТаблицаИзменений заполнен - 
// заполнение номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеНоменклатуры. 
// Если параметр ТаблицаИзменений не заполнен - происходит загрузка номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений -  таблица изменений реквизитов номенклатуры. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияНоменклатуры.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные номенклатуры сервиса.
//
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	АтообновляемыеЗаблокированныеРеквизиты = АтообновляемыеЗаблокированныеРеквизиты(Истина);
	
	ДанныеОбъекта = Новый Структура;
	Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, "Пометка") Или ЭлементКоллекции.Пометка Тогда
			
			Если АтообновляемыеЗаблокированныеРеквизиты.Найти(ЭлементКоллекции.РеквизитОбъекта) <> Неопределено Тогда
				ЭлементКоллекции.РеквизитОбъекта = ИсходноеИмяАвтообновляемогоЗаблокированногоРеквизита(ЭлементКоллекции.РеквизитОбъекта);
			КонецЕсли;
			
			ДанныеОбъекта.Вставить(ЭлементКоллекции.РеквизитОбъекта, ЭлементКоллекции.НовоеЗначение);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьДанныеРеквизитовНоменклатуры(ДанныеОбъекта);
	ЗаполнитьЗначенияРеквизитовНоменклатуры(Форма.Объект, ДанныеОбъекта);
	
	// Заполнение изображения на форме.
	// Запись всех загружаемых изображений см. в процедуре СохранитьИзображенияНоменклатуры.
	Если Не ЗначениеЗаполнено(Форма.АдресКартинки)
	   И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения)
	   И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения[0].Изображения) Тогда
		
		ИзображениеURL = ДанныеИнтерактивногоЗаполнения[0].Изображения[0].ИзображениеURL;
		
		ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
		ПараметрыПолучения.ЗащищенноеСоединение = Истина;
		
		РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ИзображениеURL, ПараметрыПолучения);
		
		Если РезультатСкачивания.Статус Тогда
			Форма.АдресКартинки = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(РезультатСкачивания.Путь), Форма.УникальныйИдентификатор);
			УдалитьИзВременногоХранилища(РезультатСкачивания.Путь);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись данных, обработка которых выполняется отложенно.
	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "Штрихкоды");
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		Форма.Штрихкоды               = Штрихкоды;
		Форма.ПредставлениеШтрихкодов = СтрСоединить(Штрихкоды, ", ");
	Иначе
		Форма.Штрихкоды               = Неопределено;
		Форма.ПредставлениеШтрихкодов = Неопределено;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов см. в процедуре ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме.
	
КонецПроцедуры


// Заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка      - Ссылка - ссылка на номенклатуру.
//  ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты для записи в структуре:
//    * РеквизитОбъекта - Ссылка - свойство реквизита.
//    * НовоеЗначение   - Произвольный - значение реквизита.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// Интерактивное заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

// Процедура позволяет переопределить перечень блокируемых реквизитов. Если используется подсистема запрета редактирования,
// и для объекта настроен список блокируемых реквизитов, перечень реквизитов будет передаваться в параметре БлокируемыеРеквизиты.
//
// Параметры:
//  ПолноеИмя			 - Строка - полное имя объекта метаданных.
//  БлокируемыеРеквизиты - Массив - (Строка) массив имен блокируемых реквизитов.
//
Процедура ПриФормированииСпискаБлокируемыхРеквизитов(ПолноеИмя, БлокируемыеРеквизиты) Экспорт
	
	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	НеблокируемыеРеквизиты = Новый Массив;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(БлокируемыеРеквизиты, НеблокируемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПанельАдминистрирования.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПанельАдминистрирования.
//
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	МетаданныеДобавляемыхРеквизитов = Новый Массив;
	МетаданныеДобавляемыхРеквизитов.Добавить(Метаданные.Константы.НастройкиКатегорийЛекарственныхСредствПоУмолчанию);
	МетаданныеДобавляемыхРеквизитов.Добавить(Метаданные.Константы.НастройкиКатегорийТоваровПоУмолчанию);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеЭлементы  = Новый Массив;
	Для Каждого МетаданныеРеквизита Из МетаданныеДобавляемыхРеквизитов Цикл
		
		ИмяРеквизита = "Константа_" + МетаданныеРеквизита.Имя;
		ИмяГруппы    = "Группа_" + МетаданныеРеквизита.Имя;
		ТипРеквизита = МетаданныеРеквизита.Тип;
		Заголовок    = МетаданныеРеквизита.Представление();
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита,, Заголовок));
		
		Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаРаботаСНоменклатуройОбщиеНастройки);
		Группа.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок  = Ложь;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид                  = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Подсказка            = МетаданныеРеквизита.Подсказка;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.ПараметрыВыбора      = МетаданныеРеквизита.ПараметрыВыбора;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизита");
		
		ДобавляемыеЭлементы.Добавить(Новый Структура("Элемент, ЗначениеРеквизита", Элемент, Константы[МетаданныеРеквизита.Имя].Получить()));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого ДобавляемыйЭлемент Из ДобавляемыеЭлементы Цикл
		
		Элемент = ДобавляемыйЭлемент.Элемент;
		Элемент.ПутьКДанным = Элемент.Имя;
		
		Форма[Элемент.ПутьКДанным] = ДобавляемыйЭлемент.ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет настройки подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. см. РаботаСНоменклатурой.НастройкиПодсистемы
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьВидыНоменклатуры             = Истина;
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры = Истина;
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе     = Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке    = Истина;
	Настройки.ИспользоватьВыгрузкуВКаталог1С           = Ложь;
	Настройки.ИспользоватьВыгрузкуВНациональныйКаталог = Ложь;
	
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе:
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(КонтактноеЛицо, Результат) Экспорт
	
	Если КонтактноеЛицо = Пользователи.СсылкаНеуказанногоПользователя() Тогда 
		Возврат;
	КонецЕсли;
	
	Результат.ФИО = Строка(КонтактноеЛицо);
	Результат.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailПользователя, ТекущаяДатаСеанса());
	Результат.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет читаемые/изменяемые методом данные. Информация используется для описания обработчиков обновления.
// Все указанные в методе объекты метаданных должны быть включены в состав плана обмена ОбновлениеИнформационнойБазы.
//
// Для обновления на версию 1.7.2 необходимо указать читаемые/изменяемые данные метода
//  РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре.
// 
// Параметры:
//  Метод - Строка - полное имя переопределяемого метода.
//  ЧитаемыеИзменяемыеДанные - Структура:
//   * Читаемые - Массив из Строка - полные имена читаемых объектов метаданных.
//   * Изменяемые - Массив из Строка - полные имена изменяемых объектов метаданных.
//
// Пример: 
// Если Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("Справочник.Номенклатура");
// ИначеЕсли Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("РегистрСведений.Штрихкоды");
// КонецЕсли;
//
Процедура ЗаполнитьЧитаемыеИзменяемыеДанныеМетода(Метод, ЧитаемыеИзменяемыеДанные) Экспорт
	
	Если Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре" Тогда
		ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("Справочник.Номенклатура");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПоискНоменклатурыПоШтрихкоду

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события ОбработкаПроверкиЗаполнения формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//  Отказ				 - Булево - признак отказа.
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты.
//
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Запись штрихкодов в информационную базу.
//
// Параметры:
//  ШтрихкодыНоменклатуры	 - ТаблицаЗначений - см. Обработка.РаботаСНоменклатурой.Форма.ПоискНоменклатурыПоШтрихкоду, 
//                                               таблица ШтрихкодыНоменклатуры.
//
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
КонецПроцедуры

// Метод вызывается после загрузки номенклатуры сервиса, найденной по штрихкоду, при заполнении
// таблицы штрихкодов.
//
// Параметры:
//  СтрокаТаблицыШтрихкодов	 - ДанныеФормыЭлементКоллекции - строка таблицы ШтрихкодыНоменклатуры.
//  НоменклатураСсылка		 - Ссылка - ссылка на созданную номенклатуру.
//
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ДляВызоваИзДругихПодсистем

Функция КатегорияПоИдентификатору(Идентификатор) Экспорт
	
	Возврат Перечисления.ПредопределенныеКатегорииРаботаСНоменклатурой.КатегорияПоИдентификатору(Идентификатор);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// Первичная обработка классификаторов номенклатуры

Процедура ПодготовитьДанныеОКПД2КЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2();
	
	СтрокаТаблицы = ДанныеНоменклатуры.Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьДанныеТНВЭДКЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД();
	
	СтрокаТаблицы = ДанныеНоменклатуры.Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЛекарственныхСредствКЗагрузке(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_КЛП();
	
	СтрокаДополнительныхРеквизитов = ДанныеНоменклатуры.ДополнительныеРеквизиты.Найти(ИдентификаторКодаЕСКЛП(), "Идентификатор");
	Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаДополнительныхРеквизитов.Значение;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеНоменклатуры);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры


Процедура ДополнитьДанныеНоменклатурыДаннымиОКПД2(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2();
	
	СтрокаТаблицы = ДанныеНоменклатуры.Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	
	ДанныеНоменклатуры.ОКПД2 = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановленОтказОбработкиДанныхКлассификатора(ДанныеНоменклатуры.ОКПД2) Тогда
		
		Текст = НСтр("ru = 'Для номенклатуры %1 не удалось получить данные %2 ""%3"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеНоменклатуры.Наименование, ИмяКлассификатора, Идентификатор);
		Текст = Текст + Символы.ПС + ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СформироватьТекстИсключенияИзПричинОтказа(ДанныеНоменклатуры.ОКПД2);
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеНоменклатурыДаннымиТНВЭД(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД();
	
	СтрокаТаблицы = ДанныеНоменклатуры.Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	
	ДанныеНоменклатуры.ТНВЭД = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	ДанныеНоменклатуры.КодТНВЭД = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановленОтказОбработкиДанныхКлассификатора(ДанныеНоменклатуры.ТНВЭД) Тогда
		
		Текст = НСтр("ru = 'Для номенклатуры %1 не удалось получить данные %2 ""%3"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеНоменклатуры.Наименование, ИмяКлассификатора, Идентификатор);
		Текст = Текст + Символы.ПС + ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СформироватьТекстИсключенияИзПричинОтказа(ДанныеНоменклатуры.ТНВЭД);
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеНоменклатурыДаннымиЛекарственныхСредств(ЗагружаемыеДанные, ДанныеНоменклатуры)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_КЛП();
	
	СтрокаДополнительныхРеквизитов = ДанныеНоменклатуры.ДополнительныеРеквизиты.Найти(ИдентификаторКодаЕСКЛП(), "Идентификатор");
	Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СтрокаДополнительныхРеквизитов.Значение;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры.ЭлементКАТ = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановленОтказОбработкиДанныхКлассификатора(ДанныеНоменклатуры.ЭлементКАТ) Тогда
		
		Текст = НСтр("ru = 'Для номенклатуры %1 не удалось получить данные %2 ""%3"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеНоменклатуры.Наименование, ИмяКлассификатора, Идентификатор);
		Текст = Текст + Символы.ПС + ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СформироватьТекстИсключенияИзПричинОтказа(ДанныеНоменклатуры.ЭлементКАТ);
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Конвертация данных сервиса в данные информационной базы

Функция ДанныеВидаНоменклатурыПоДаннымСервиса(ДанныеЗаполнения)
	
	ТипНоменклатурыРасширенный = ТипНоменклатурыРасширенныйПоДаннымСервиса(ДанныеЗаполнения.Тип);
	
	Если ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство Тогда
		Настройка = Константы.НастройкиКатегорийЛекарственныхСредствПоУмолчанию.Получить();
	ИначеЕсли ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.Товар Тогда
		Настройка = Константы.НастройкиКатегорийТоваровПоУмолчанию.Получить();
	Иначе
		Настройка = Справочники.НастройкиКатегорийНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		
		РеквизитыЗаполняемыеПоУмолчанию = Новый Структура;
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ВариантЗаполненияМинимальнойЕдиницыОтпуска");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ВариантЗаполненияОсновнойЕдиницыУчета");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ГруппаБухгалтерскогоУчета");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ГруппаНоменклатуры");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ГруппаПКУ");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ЕдиницаИзмерения");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ИспользоватьКоличествоСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ИспользоватьНомерСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ИспользоватьПартии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ИспользоватьСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ИспользоватьСрокГодностиСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("КодТНВЭД");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("НастройкаИспользованияСерий");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ОКПД2");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ПолитикаУчетаПартий");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ПолитикаУчетаПартийВОтделениях");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ПолитикаУчетаСерий");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ПолитикаУчетаСерийВОтделениях");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("СтавкаНДС");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ТочностьУказанияСрокаГодностиСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ЦеноваяГруппа");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонРабочегоНаименованияСерии");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонСтеллажнойКарточки");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонЦенника");
		РеквизитыЗаполняемыеПоУмолчанию.Вставить("ШаблонЭтикетки");
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка, РеквизитыЗаполняемыеПоУмолчанию);
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ДанныеНоменклатуры = Новый Структура;
		
	КонецЕсли;
	
	ДанныеНоменклатуры.Вставить("Наименование"              , ДанныеЗаполнения.Наименование);
	ДанныеНоменклатуры.Вставить("ТипНоменклатурыРасширенный", ТипНоменклатурыРасширенный);
	ДанныеНоменклатуры.Вставить("СтавкаНДС"                 , СтавкаНДСПоДаннымСервиса(ДанныеЗаполнения.СтавкаНДС));
	ДанныеНоменклатуры.Вставить("Описание"                  , ДанныеЗаполнения.Описание);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "РодительИнформационнойБазы") Тогда
		ДанныеНоменклатуры.Вставить("Родитель", ДанныеЗаполнения.РодительИнформационнойБазы);
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция ДанныеНоменклатурыПоДаннымСервиса(ДанныеЗаполнения)
	
	ДанныеНоменклатуры = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры) Тогда
		ДанныеНоменклатуры.Вставить("ВидНоменклатуры", ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры);
	КонецЕсли;
	ДанныеНоменклатуры.Вставить("Наименование"              , ДанныеЗаполнения.Наименование);
	ДанныеНоменклатуры.Вставить("ТипНоменклатурыРасширенный", ТипНоменклатурыРасширенныйПоДаннымСервиса(ДанныеЗаполнения.Тип));
	ДанныеНоменклатуры.Вставить("Артикул"                   , ДанныеЗаполнения.Артикул);
	ДанныеНоменклатуры.Вставить("НаименованиеПолное"        , ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), ДанныеЗаполнения.НаименованиеДляПечати, ДанныеЗаполнения.Наименование));
	ДанныеНоменклатуры.Вставить("СтавкаНДС"                 , СтавкаНДСПоДаннымСервиса(ДанныеЗаполнения.СтавкаНДС));
	ДанныеНоменклатуры.Вставить("Описание"                  , ДанныеЗаполнения.Описание);
	ДанныеНоменклатуры.Вставить("Штрихкоды"                 , ДанныеЗаполнения.Штрихкоды);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "ТНВЭД") Тогда
		ДанныеНоменклатуры.Вставить("ТНВЭД", ДанныеЗаполнения.ТНВЭД);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "КодТНВЭД") Тогда
		ДанныеНоменклатуры.Вставить("КодТНВЭД", ДанныеЗаполнения.КодТНВЭД);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Тип = ТипНоменклатурыСервисаЛекарственноеСредство() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "ЭлементКАТ") Тогда
			
			ДанныеНоменклатуры.Вставить("ЭлементКАТ", ДанныеЗаполнения.ЭлементКАТ);
			// Единицы измерения заполняются из ЭлементаКАТ.
			// ОКПД2 заполняются из ЭлементаКАТ.
			
		Иначе
			Текст = НСтр("ru = 'Не удалось получить данные номенклатуры ""%1"" из сервиса по причине:'");
			Текст = Текст + Символы.ПС + НСтр("ru = 'Не удалось записать ссылку лекарственного препарата.'");
			Текст = Текст + Символы.ПС + НСтр("ru = 'Подробнее см. Журнал регистрации.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеЗаполнения.Наименование);
			ВызватьИсключение Текст;
		КонецЕсли;
		
	Иначе // Товар
		
		ДанныеНоменклатуры.Вставить("ЭлементКАТ", Справочники.КЛП.ПустаяСсылка());
		
		ЕдиницыИзмерения = Новый Массив;
		ЕдиницыИзмерения.Добавить(ДанныеЗаполнения.Вес.ЕдиницаИзмерения);
		ЕдиницыИзмерения.Добавить(ДанныеЗаполнения.Объем.ЕдиницаИзмерения);
		ЕдиницыИзмерения.Добавить(ДанныеЗаполнения.КоличествоВУпаковке.ЕдиницаИзмерения);
		ЕдиницыИзмерения.Добавить(ДанныеЗаполнения.ЕдиницаИзмерения);
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницыИзмерения));
		
		ДанныеНоменклатуры.Вставить("ОсновнаяЕдиницаУчета", ДанныеНоменклатуры.ЕдиницаИзмерения);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "ОКПД2") Тогда
			ДанныеНоменклатуры.Вставить("ОКПД2", ДанныеЗаполнения.ОКПД2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницыИзмеренияСервиса)
	
	ЕдиницаПоДаннымСервиса = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	Для Каждого ЕдиницаИзмеренияСервиса Из ЕдиницыИзмеренияСервиса Цикл
		КодЕдиницыВСервисе = ЕдиницаИзмеренияСервиса.ОКЕИ;
		Если ЗначениеЗаполнено(КодЕдиницыВСервисе) Тогда
			ПолученныеЕдиницы = Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодЕдиницыВСервисе),, Истина);
			Если ПолученныеЕдиницы.Количество() > 0 Тогда
				ЕдиницаПоДаннымСервиса = ПолученныеЕдиницы[0];
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕдиницаПоДаннымСервиса;
	
КонецФункции

Функция СтавкаНДСПоДаннымСервиса(Знач Значение)
	
	Если Значение = "10" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Значение = "18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Значение = "20" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецФункции

Процедура КорректироватьТипНоменклатурыПоИдентификаторуКатегории(ДанныеСервиса, Знач ИдентификаторКатегории)
	
	Категория = КатегорияПоИдентификатору(ИдентификаторКатегории);
	Если Категория = Перечисления.ПредопределенныеКатегорииРаботаСНоменклатурой.ЕСКЛП Тогда
		
		СтрокаДополнительныхРеквизитов = ДанныеСервиса.ДополнительныеРеквизиты.Найти(ИдентификаторКодаЕСКЛП(), "Идентификатор");
		Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
			Если Метаданные.Имя = "БольничнаяАптека" Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось идентифицировать загружаемую номенклатуру как Лекарственный препарат. Проверьте актуальность подписки 1С:ИТС Медицина.'"));
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если Метаданные.Имя <> "МДЛП" Тогда
			ДанныеСервиса.Тип = ТипНоменклатурыСервисаЛекарственноеСредство();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТипНоменклатурыРасширенныйПоДаннымСервиса(Знач Значение)
	
	Если Значение = "Услуга" Тогда
		Возврат Справочники.ТипыНоменклатурыРасширенные.Услуга;
	ИначеЕсли Значение = ТипНоменклатурыСервисаЛекарственноеСредство() Тогда
		Возврат Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство;
	ИначеЕсли Значение = "Товар" Тогда
		Возврат Справочники.ТипыНоменклатурыРасширенные.Товар;
	Иначе
		Возврат Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ТипНоменклатурыСервисаЛекарственноеСредство()
	
	Возврат "ЛекарственноеСредство";
	
КонецФункции

Функция ИдентификаторКодаЕСКЛП()
	
	Возврат "22229";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Получение отличий данных сервиса и данных информационной базы

Процедура ДобавитьОтличияРеквизитовОбъекта(ТаблицаОтличийРеквизитов, СтарыеДанные, НовыеДанные, МетаданныеРеквизита, ОбязательныеРеквизиты = Неопределено)
	
	Если Не (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтарыеДанные, МетаданныеРеквизита.Имя)
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыеДанные, МетаданныеРеквизита.Имя)) Тогда
		Возврат;
	КонецЕсли;
	
	СтароеЗначение = СтарыеДанные[МетаданныеРеквизита.Имя];
	НовоеЗначение  = НовыеДанные[МетаданныеРеквизита.Имя];
	
	Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначение) Тогда
		
		ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(НовоеЗначение);
		КонтрольноеЗначениеДанныхСервиса = "";
		НовоеКонтрольноеЗначениеДанныхСервиса = "";
		
		Если ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_КЛП() Тогда
			
			ПредставлениеЗначенияСервиса = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "НаименованиеПолное");
			
			Если ЗначениеЗаполнено(СтароеЗначение) И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтароеЗначение, "КонтрольноеЗначениеДанныхСервиса") Тогда
				КонтрольноеЗначениеДанныхСервиса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтароеЗначение, "КонтрольноеЗначениеДанныхСервиса");
			КонецЕсли;
			
			НовоеКонтрольноеЗначениеДанныхСервиса = ОблачныеКлассификаторыБольничнаяАптека.КонтрольноеЗначениеДанныхКлассификатора(НовоеЗначение);
			
		ИначеЕсли ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2() Тогда
			
			ПредставлениеЗначенияСервиса = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "Код");
			
			Если ЗначениеЗаполнено(СтароеЗначение) Тогда
				КонтрольноеЗначениеДанныхСервиса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[Код]###[НаименованиеПолное]###[Описание]",
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтароеЗначение, "Код, НаименованиеПолное, Описание"));
			КонецЕсли;
			
			НовоеКонтрольноеЗначениеДанныхСервиса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[Код]###[НаименованиеПолное]###[Описание]",
				Новый Структура("Код, НаименованиеПолное, Описание",
					ПредставлениеЗначенияСервиса,
					ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "НаименованиеПолное"),
					ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "Описание")));
			
		ИначеЕсли ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД()Тогда
			
			ПредставлениеЗначенияСервиса = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "Код");
			
			Если ЗначениеЗаполнено(СтароеЗначение) Тогда
				КонтрольноеЗначениеДанныхСервиса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[Код]###[Наименование]###[НаименованиеПолное]",
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтароеЗначение, "Код, Наименование, НаименованиеПолное"));
			КонецЕсли;
			
			НовоеКонтрольноеЗначениеДанныхСервиса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[Код]###[Наименование]###[НаименованиеПолное]",
				Новый Структура("Код, Наименование, НаименованиеПолное",
					ПредставлениеЗначенияСервиса,
					ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "Наименование"),
					ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(НовоеЗначение, "НаименованиеПолное")));
			
		Иначе
			
			ПредставлениеЗначенияСервиса = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(НовоеЗначение);
			
			Если ЗначениеЗаполнено(СтароеЗначение) И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтароеЗначение, "КонтрольноеЗначениеДанныхСервиса") Тогда
				КонтрольноеЗначениеДанныхСервиса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтароеЗначение, "КонтрольноеЗначениеДанныхСервиса");
			КонецЕсли;
			
			НовоеКонтрольноеЗначениеДанныхСервиса = ОблачныеКлассификаторыБольничнаяАптека.КонтрольноеЗначениеДанныхКлассификатора(НовоеЗначение);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовоеКонтрольноеЗначениеДанныхСервиса) И КонтрольноеЗначениеДанныхСервиса <> НовоеКонтрольноеЗначениеДанныхСервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, МетаданныеРеквизита.Имя, НовоеЗначение, СтароеЗначение, МетаданныеРеквизита.Представление(), ПредставлениеЗначенияСервиса);
		КонецЕсли;
		
	Иначе
		
		Если СтароеЗначение <> НовоеЗначение И (ЗначениеЗаполнено(СтароеЗначение) Или ЗначениеЗаполнено(НовоеЗначение)) Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, МетаданныеРеквизита.Имя, НовоеЗначение, СтароеЗначение, МетаданныеРеквизита.Представление());
			Если ЗначениеЗаполнено(ОбязательныеРеквизиты) И ОбязательныеРеквизиты.Найти(МетаданныеРеквизита) <> Неопределено Тогда
				ТаблицаОтличийРеквизитов[ТаблицаОтличийРеквизитов.Количество() - 1].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтличияШтрихкодовНоменклатуры(ТаблицаОтличийРеквизитов, СтарыеДанные, НовыеДанные)
	
	СтарыеШтрихкоды = СтарыеДанные.Штрихкоды;
	НовыеШтрихкоды = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НовыеДанные.Штрихкоды, СтарыеШтрихкоды);
	Если НовыеШтрихкоды.Количество() > 0 Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(
			ТаблицаОтличийРеквизитов,
			"Штрихкоды",
			Новый ФиксированныйМассив(НовыеШтрихкоды),
			"",
			НСтр("ru = 'Штрихкоды'"),
			СтрСоединить(НовыеШтрихкоды, ", "));
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Заполнение реквизитов объектов

Процедура ЗаписатьДанныеРеквизитовНоменклатуры(ДанныеОбъекта)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из ДанныеОбъекта Цикл
		
		ЭлементДанных = КлючИЗначение.Значение;
		
		Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(ЭлементДанных) Тогда
			ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ЭлементДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ОблачныеКлассификаторыБольничнаяАптека.ЗагрузитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДанныеОбъекта Цикл
		
		ЭлементДанных = КлючИЗначение.Значение;
		
		Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(ЭлементДанных) Тогда
			
			Если Не ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановленОтказОбработкиДанныхКлассификатора(ЭлементДанных) Тогда
				// Заменим структуру данных на ссылку.
				ДанныеОбъекта.Вставить(КлючИЗначение.Ключ ,ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(ЭлементДанных, "Ссылка"));
			Иначе
				
				ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ЭлементДанных);
				Идентификатор     = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЭлементДанных);
				
				Текст = НСтр("ru = 'Не удалось получить данные %1 ""%2"" для заполнения номенклатуры по причине:'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКлассификатора, Идентификатор);
				Текст = Текст + Символы.ПС + ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СформироватьТекстИсключенияИзПричинОтказа(ЭлементДанных);
				ВызватьИсключение Текст;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовВидаНоменклатуры(Объект, ДанныеОбъекта)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыНоменклатуры") И Объект.ЭтоНовый() Тогда
		
		Объект.Заполнить(Неопределено);
		
	Иначе
		
		Объект.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(Объект);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипНоменклатурыРасширенный) Тогда
		Объект.ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипНоменклатурыРасширенный, "ТипНоменклатуры");
		Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Объект.ИспользоватьСерии = Ложь;
			Объект.ИспользоватьПартии = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаБухгалтерскогоУчета) Тогда
		Объект.ГруппаБухгалтерскогоУчета = Справочники.ГруппыБухгалтерскогоУчета.ПолучитьГруппуБухгалтерскогоУчетаПоУмолчанию(Объект.ТипНоменклатурыРасширенный);
	КонецЕсли;
	
	Если Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа() И Не ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовНоменклатуры(Объект, ДанныеОбъекта)
	
	ВидНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "ВидНоменклатуры", Объект.ВидНоменклатуры);
	ЭлементКАТ      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "ЭлементКАТ", Объект.ЭлементКАТ);
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ТипНоменклатурыРасширенный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ТипНоменклатурыРасширенный");
		Если ТипНоменклатурыРасширенный <> Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство И ЗначениеЗаполнено(ЭлементКАТ) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные препарата не могут указываться для вида номенклатуры ""%1""'"), ВидНоменклатуры);
		ИначеЕсли ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство И Не ЗначениеЗаполнено(ЭлементКАТ) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Товар не может указываться для вида номенклатуры ""%1""'"), ВидНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПКУ_ПоУмолчанию = Объект.ГруппаПКУ; // значение по умолчанию из свойства реквизита ЗначениеЗаполнения.
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") И Объект.ЭтоНовый() Тогда
		
		Объект.Заполнить(Новый Структура("ВидНоменклатуры, ЭлементКАТ", ВидНоменклатуры, ЭлементКАТ));
		
	Иначе // Объект не СправочникОбъект.Номенклатура (например, ДанныеФормыСтруктура) или Объект не новый.
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) И ВидНоменклатуры <> Объект.ВидНоменклатуры Тогда
			Объект.ВидНоменклатуры = ВидНоменклатуры;
			Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементКАТ) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			Если Не Объект.Ссылка.Пустая() Тогда
				
				УпаковкаИзменилась = Объект.Упаковка <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКАТ, "Упаковка");
				
				ДополнительныеПараметры.Вставить("НеИзменятьМернуюБазовуюЕдиницуИзмерения"    , Истина);
				ДополнительныеПараметры.Вставить("НеИзменятьМинимальнуюЕдиницуОтпускаИзАптеки", Не УпаковкаИзменилась);
				ДополнительныеПараметры.Вставить("НеИзменятьОсновнуюЕдиницуУчета"             , Не УпаковкаИзменилась);
				
			КонецЕсли;
			
			Объект.ЭлементКАТ = ЭлементКАТ;
			АптечныеТовары.ЗаполнитьПоляНоменклатурыПоАптечномуТовару(Объект, Объект.ЭлементКАТ, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	ДанныеОбъекта.Удалить("ВидНоменклатуры");
	ДанныеОбъекта.Удалить("ЭлементКАТ");
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда
			СправочникОбъект = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
			СправочникОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Номенклатура"));
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный тип Объекта номенклатуры.'");
		КонецЕсли;
		
		ЗапрашиваемыеПоля = Новый Структура;
		ЗапрашиваемыеПоля.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
		ЗапрашиваемыеПоля.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ЗапрашиваемыеПоля);
		
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			Объект.Наименование = КонструкторФормулБольничнаяАптека.НаименованиеПоШаблону(РеквизитыОбъекта.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
			Объект.НаименованиеПолное = КонструкторФормулБольничнаяАптека.НаименованиеПоШаблону(РеквизитыОбъекта.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаПКУ) Тогда
		Объект.ГруппаПКУ = ГруппаПКУ_ПоУмолчанию;
	КонецЕсли;
	
	Если Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа() И Не ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(Объект);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Изменение форм объектов

// Добавляет в текст запроса динамического списка поля и таблицы
// подсистемы ЭлектронноеВзаимодействие.РаботаСНоменклатурой.
// (см. документацию настройки библиотеки электронных документов,
// подсистема 1С:Номенклатура,
// настройка формы списка, формы выбора справочника Номенклатура).
//
// Параметры:
//  Список         - ДинамическийСписок - динамический список, запрос которого изменяется. Например, справочника Номенклатура.
//  ОписанияПолей  - Структура - результат выполнения функции ОписаниеПолейВыбораСоответствийНоменклатурыДляЗапроса.
//  ОписанияТаблиц - Массив - результат выполнения функции ОписаниеТаблицыСоответствийНоменклатурыДляЗапроса.
//
Процедура ДобавитьДополнительнуюИнформациюВЗапрос(Список, ОписанияПолей, ОписанияТаблиц = Неопределено) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	
	ТекстыСоединений = Новый Массив;
	ТекстыПолей = Новый Массив;
	
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ИндексПоля = ПоследнийЗапрос.Колонки.Количество();
	Для Каждого Оператор Из ПоследнийЗапрос.Операторы Цикл
		Если ЗначениеЗаполнено(ОписанияТаблиц) Тогда
			Для Каждого Таблица Из ОписанияТаблиц Цикл
				Источник = Оператор.Источники.Добавить(Таблица.Источник.Таблица, Таблица.Источник.Псевдоним);
				Источник.Соединения.Очистить();
				ТекстСоединения = Источник.Источник.ИмяТаблицы + " КАК " + Источник.Источник.Псевдоним;
				Если Таблица.Свойство("Соединение") Тогда
					ГлавнаяТаблица = Оператор.Источники.НайтиПоПсевдониму(Таблица.Соединение.ГлавнаяТаблица);
					ГлавнаяТаблица.Соединения.Добавить(Источник, Таблица.Соединение.Условие);
					Соединение = ГлавнаяТаблица.Соединения[ГлавнаяТаблица.Соединения.Количество() - 1];
					ТекстСоединения = ТекстСоединения + " ПО (" + Соединение.Условие + ")";
					Если Таблица.Соединение.Свойство("ТипСоединения") Тогда
						Соединение.ТипСоединения = Таблица.Соединение.ТипСоединения;
						Если Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее Тогда
							ТипСоединения = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ";
						ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее Тогда
							ТипСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ";
						ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПолноеВнешнее Тогда
							ТипСоединения = "ПОЛНОЕ СОЕДИНЕНИЕ";
						ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее Тогда
							ТипСоединения = "ПРАВОЕ СОЕДИНЕНИЕ";
						КонецЕсли;
					Иначе
						ТипСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ";
					КонецЕсли;
					ТекстСоединения = ТипСоединения + " " + ТекстСоединения;
					ТекстыСоединений.Вставить(0, "{" + ТекстСоединения + "}");
				Иначе
					ТекстыСоединений.Добавить("," + Символы.ПС + ТекстСоединения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Каждого Поле Из ОписанияПолей Цикл
			Оператор.ВыбираемыеПоля.Добавить(Поле.Значение);
			ТекстыПолей.Добавить(Поле.Значение + " КАК " + Поле.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Поле Из ОписанияПолей Цикл
		ПоследнийЗапрос.Колонки[ИндексПоля].Псевдоним = Поле.Ключ;
		ИндексПоля = ИндексПоля + 1;
	КонецЦикла;
	
	Если СтрНайти(Список.ТекстЗапроса, "//ПОЛЯ_ДЛЯ_ОТБОРА") > 0 Тогда
		ТекстПолей = СтрСоединить(ТекстыПолей, "," + Символы.ПС);
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "//ПОЛЯ_ДЛЯ_ОТБОРА", "," + Символы.ПС + ТекстПолей + "//ПОЛЯ_ДЛЯ_ОТБОРА");
		Если ТекстыСоединений.Количество() > 0 Тогда
			ТекстСоединений = СтрСоединить(ТекстыСоединений, Символы.ПС);
			Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "//СОЕДИНЕНИЯ", Символы.ПС + ТекстСоединений + "//СОЕДИНЕНИЯ");
		КонецЕсли;
	Иначе
		Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПолейВыбораСоответствийНоменклатурыДляЗапроса() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой;
	
	Поля = Новый Структура;
	Поля.Вставить("НоменклатураРаботаСНоменклатурой", "
		|ВЫБОР
		|	КОГДА %1.СтатусСопоставления = &Сопоставлено
		|		ТОГДА %1.ПредставлениеНоменклатурыСервиса
		|	КОГДА %1.СтатусСопоставления = &НеСопоставлено
		|		И %1.КоличествоВариантов > 0
		|		ТОГДА &СтрокаНайденыВарианты
		|	КОГДА %1.СтатусСопоставления В (&СтатусыНайдено)
		|		ТОГДА &СтрокаНайдено + %1.ПредставлениеНоменклатурыСервиса
		|	ИНАЧЕ &СтрокаСопоставить
		|КОНЕЦ
		|");
	
	Поля.Вставить("КодСтатусаСопоставленияРаботаСНоменклатурой", "
		|ВЫБОР
		|	КОГДА %1.КоличествоВариантов > 0
		|		ИЛИ %1.СтатусСопоставления В (&СтатусыНайдено)
		|		ТОГДА 1
		|	КОГДА %1.СтатусСопоставления = &Сопоставлено
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА %1.РежимЗагрузкиХарактеристик = &Сопоставление 
		|					ТОГДА 3
		|				ИНАЧЕ 2
		|			КОНЕЦ
		|	ИНАЧЕ 0
		|КОНЕЦ
		|");
	
	Поля.Вставить("ИдентификаторНоменклатурыРаботаСНоменклатурой", "
		|%1.ИдентификаторНоменклатурыСервиса
		|");
	
	Поля.Вставить("КартинкаРежимаОбновленияРаботаСНоменклатурой", "
		|ВЫБОР
		|	КОГДА %1.ОбновляетсяАвтоматически
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ
		|");
	
	Для Каждого Поле Из Поля Цикл
		Поля[Поле.Ключ] = СтрШаблон(Поле.Значение, МетаданныеРегистра.Имя);
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

Функция ОписаниеТаблицыСоответствийНоменклатурыДляЗапроса(ИмяГлавнойТаблицы = "Товары") Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой;
	
	Таблицы = Новый Массив;
	
	Таблица = Новый Структура;
	
	Таблица.Вставить("Источник", Новый Структура);
	Таблица.Источник.Вставить("Таблица"  , МетаданныеРегистра.ПолноеИмя());
	Таблица.Источник.Вставить("Псевдоним", МетаданныеРегистра.Имя);
	
	Таблица.Вставить("Соединение", Новый Структура);
	Таблица.Соединение.Вставить("ГлавнаяТаблица", ИмяГлавнойТаблицы);
	Таблица.Соединение.Вставить("Условие"       , СтрШаблон("%1.Ссылка = %2.Номенклатура И %2.Характеристика = &ПустаяХарактеристика", ИмяГлавнойТаблицы, МетаданныеРегистра.Имя));
	
	Таблицы.Добавить(Таблица);
	
	Возврат Таблицы;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Автообновление заблокированных реквизитов

Функция АтообновляемыеЗаблокированныеРеквизиты(ССуффиксом = Ложь)
	
	Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	
	ВозвращаемыйРезультат = Новый Массив;
	ВозвращаемыйРезультат.Добавить(Реквизиты.ЭлементКАТ.Имя);
	
	Если ССуффиксом Тогда
		Для Индекс = 0 По ВозвращаемыйРезультат.ВГраница() Цикл
			ВозвращаемыйРезультат[Индекс] = ВозвращаемыйРезультат[Индекс] + СуффиксАвтообновляемогоЗаблокированногоРеквизита();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемыйРезультат;
	
КонецФункции

Функция ИзмененноеИмяАвтообновляемогоЗаблокированногоРеквизита(ИсходноеИмяРеквизита)
	
	Возврат ИсходноеИмяРеквизита + СуффиксАвтообновляемогоЗаблокированногоРеквизита();
	
КонецФункции

Функция ИсходноеИмяАвтообновляемогоЗаблокированногоРеквизита(ИзмененноеИмяРеквизита)
	
	Возврат СтрЗаменить(ИзмененноеИмяРеквизита, СуффиксАвтообновляемогоЗаблокированногоРеквизита(), "");
	
КонецФункции

Функция СуффиксАвтообновляемогоЗаблокированногоРеквизита()
	
	Возврат "_АвтообновлениеЗаблокированногоРеквизита";
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
