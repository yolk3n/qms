#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет, разрешено ли использовать внутренний ЭДО в конфигурации.
// 
// Возвращаемое значение:
// 	Булево - Истина, если разрешено использование внутреннего ЭДО.
//
Функция РазрешеноИспользоватьВнутреннийЭДО() Экспорт
	
	Результат = ИнтеграцияЭДО.РазрешеноИспользоватьВнутреннийЭДО();
	
	Возврат Результат;
	
КонецФункции

// Возвращает способ обмена абонента ЭДО из сервиса настроек по его идентификатору.
//
// Параметры:
//  ИдентификаторЭДО - Строка - идентификатор абонента.
//  Отказ - Булево - признак ошибки в процессе запроса сервиса. По умолчанию Ложь.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыОбменаЭД - способ обмена абонента.
//
Функция СпособОбменаАбонентаЭДО(Знач ИдентификаторЭДО, Отказ = Ложь) Экспорт
	
	ОтборСервисНастроек = СинхронизацияЭДО.НовыйОтборДанныхАбонентаВСервисеНастроек();
	ОтборСервисНастроек.ИдентификаторыЭДО.Добавить(ИдентификаторЭДО);
	Абоненты = СинхронизацияЭДО.ДанныеАбонентовИзСервисаНастроек(ОтборСервисНастроек, Отказ, Неопределено);
	
	Если Не ЗначениеЗаполнено(Абоненты) Тогда
		Возврат Перечисления.СпособыОбменаЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Абоненты[0].СпособОбменаЭД;
	
КонецФункции

// Создает новые электронные документы.
//
// Параметры:
//  ДокументыОснования - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на учетные документы,
//  на основании которых надо сформировать электронные документы.
//
// Возвращаемое значение:
//  Массив Из Структура - массив структур с ошибками заполнения, возникшими при создании электронных документов, с ключами:
//    * Документ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - документ учета. 
//    * Организация - ОпределяемыйТип.Организация - организация.
//    * Ошибки - см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования.
//
Функция НовыеЭлектронныеДокументы(ДокументыОснования) Экспорт 
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ДокументыОснования;
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;	
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
	
	Результат = Новый Массив;
	Для Каждого Ошибка Из РезультатФормирования.ОшибкиФормирования Цикл
		ОписаниеОшибки = Новый Структура;
		ОписаниеОшибки.Вставить("Документ", Ошибка.ОписаниеОбъектаУчета.ОбъектУчета);
		ОписаниеОшибки.Вставить("Организация", Ошибка.ОписаниеОбъектаУчета.Организация);
		ОписаниеОшибки.Вставить("Ошибки", Ошибка);
		Результат.Добавить(ОписаниеОшибки);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// См. ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, ДатаСведений = Неопределено) Экспорт
	Возврат ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, ДатаСведений);
КонецФункции

// См. ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения
//
Функция ПредставлениеДанныхДокумента(ВидДокумента, ДанныеОсновногоФайла, ДанныеФайлаДопДанных, ПараметрыВизуализации) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(ВидДокумента, ДанныеОсновногоФайла, ДанныеФайлаДопДанных, ПараметрыВизуализации);
КонецФункции

Функция ПредставлениеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
КонецФункции

// См. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента()
//
Функция НовыеПараметрыВизуализации() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
		
КонецФункции

// Возвращает данные пакета электронного документа.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  
// Возвращаемое значение:
// 	Структура: 
// 	 * ДанныеОсновногоФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание основного файла.
// 	 * ДанныеФайлаДопДанных - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание файла дополнительных данных.
// 	 * ДанныеФайлаКартинок - См. РаботаСФайламиБЭД.НовоеОписаниеФайла() - описание файла картинок.
//   * Содержание - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид документа.
//   * СписокТипов - См. ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента.   
//
Функция ОписаниеПакета(ОписаниеФайла) Экспорт
		
	ДанныеПакета = Новый Структура;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	РезультатРаспаковки = СинхронизацияЭДО.РаспаковатьФайлТранспортногоКонтейнера(ОписаниеФайла,
		КонтекстДиагностики);
		
	ДанныеФайлаКартинок = РезультатРаспаковки.Картинки;
	ДанныеПакета.Вставить("ДанныеФайлаКартинок", ДанныеФайлаКартинок);
	
	Для Каждого Документ Из РезультатРаспаковки.Метаданные.Документы Цикл
		ДанныеОсновногоФайла = Документ.ОписаниеДанных;
		ДанныеФайлаДопДанных = Документ.ОписаниеДополнительныхДанных;
	КонецЦикла;
	
	ДанныеПакета.Вставить("ДанныеОсновногоФайла", ДанныеОсновногоФайла);
	ДанныеПакета.Вставить("ДанныеФайлаДопДанных", ДанныеФайлаДопДанных);

	СодержаниеДокумента = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ДанныеОсновногоФайла);
	
	ДанныеПакета.Вставить("Содержание", СодержаниеДокумента);
	
	Если ЗначениеЗаполнено(ДанныеПакета.Содержание) Тогда
		
		Если ЗначениеЗаполнено(ДанныеПакета.Содержание.ПрикладнойТипДокумента) Тогда
			ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(ДанныеПакета.Содержание.ПрикладнойТипДокумента);
		КонецЕсли;
		
		ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ДанныеПакета.Содержание.ТипДокумента);
		ДанныеПакета.Содержание.Вставить("ВидДокумента", ВидДокумента);
	Иначе
		ВидДокумента = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеПакета.Вставить("СписокТипов", ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(ВидДокумента));
	
	Возврат ДанныеПакета;
	
КонецФункции

// Возвращает файл пакета для основного электронного документа.
// 
// Параметры:
//  ОписанияОбъектовУчета - см. ОписанияОбъектовУчета.
//  ПараметрыВизуализацииОбъектовУчета - Соответствие - параметры формирования визуализации.
//  ТекстОшибки - Строка - описание ошибки.
// Возвращаемое значение:
//  ТаблицаЗначений - данные для выгрузки документов:
// * ОбъектУчета 
// * УникальныйИдентификатор 
// * ДвоичныеДанныеПакета 
// * ДвоичныеДанныеПредставления 
// * ПолноеИмяФайла 
// * ПолноеИмяДопФайла 
// * Организация 
// * Контрагент 
// * Направление 
// * ТипДокумента 
// * Наименование 
// * Номер 
// * Дата 
// * Сумма 
Функция СформироватьДанныеДляВыгрузки(ОписанияОбъектовУчета, ПараметрыВизуализацииОбъектовУчета = Неопределено, ТекстОшибки = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОбъектУчета");
	Результат.Колонки.Добавить("УникальныйИдентификатор");
	Результат.Колонки.Добавить("ДвоичныеДанныеПакета");
	Результат.Колонки.Добавить("ДвоичныеДанныеПредставления");
	Результат.Колонки.Добавить("ПолноеИмяФайла");
	Результат.Колонки.Добавить("ПолноеИмяДопФайла");
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("Направление");
	Результат.Колонки.Добавить("ТипДокумента");
	Результат.Колонки.Добавить("Наименование");
	Результат.Колонки.Добавить("Номер");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Сумма");
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета);
	НаборДанныхДокументов = РезультатФормирования.ДанныеДокументов;
	ТекстОшибки           = РезультатФормирования.ТекстОшибки;
	
	Если ЗначениеЗаполнено(РезультатФормирования.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатФормирования.ТекстОшибки);
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из НаборДанныхДокументов Цикл
		
		ПараметрыВизуализации = ?(ПараметрыВизуализацииОбъектовУчета = Неопределено, Неопределено,
			ПараметрыВизуализацииОбъектовУчета[ДанныеДокумента.Объект]);
		
		РезультатФормированияПредставления = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(
			ДанныеДокумента.ВидДокумента, ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные,,ПараметрыВизуализации);
			
		Если Не РезультатФормированияПредставления.Успех Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатФормированияПакета = СинхронизацияЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеДокумента);
		Если РезультатФормированияПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПотокВПамяти = Новый ПотокВПамяти();
		РезультатФормированияПредставления.ПредставлениеДокумента.Записать(ПотокВПамяти);
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ОбъектУчета = ДанныеДокумента.Объект;
		НоваяСтрока.УникальныйИдентификатор = ДанныеДокумента.ИдентификаторДокументооборота;
		НоваяСтрока.ДвоичныеДанныеПакета = РезультатФормированияПакета;
		НоваяСтрока.ДвоичныеДанныеПредставления = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		
		НоваяСтрока.ПолноеИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;
		НоваяСтрока.ПолноеИмяДопФайла = ДанныеДокумента.ОписаниеДополнительныхДанных.ИмяФайла;
		
		НоваяСтрока.Организация = ДанныеДокумента.Организация;
		НоваяСтрока.Контрагент = ДанныеДокумента.Контрагент;
		НоваяСтрока.Направление = Перечисления.НаправленияЭДО.Исходящий;
		НоваяСтрока.ТипДокумента = ДанныеДокумента.ТипДокумента;
		НоваяСтрока.Наименование = ДанныеДокумента.Представление;
		
		ОписаниеДокумента = ДанныеДокумента.ОписаниеДокумента;
		НоваяСтрока.Номер = ОписаниеДокумента.Номер;
		НоваяСтрока.Дата = ОписаниеДокумента.Дата;
		НоваяСтрока.Сумма = ОписаниеДокумента.Сумма;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокТиповОбъектовУчетаПоТипуДокумента(ТипДокумента) Экспорт
	Возврат ИнтеграцияЭДО.СписокТиповОбъектовУчетаПоТипуДокумента(ТипДокумента);
КонецФункции

Функция ТипДокументаПоЗначениюСервиса(ТипДокументаСервиса) Экспорт
	Возврат СинхронизацияЭДО.ТипДокументаПоЗначениюСервиса(ТипДокументаСервиса);
КонецФункции

Функция ДанныеНеСопоставленнойНоменклатурыДокумента(ОписаниеФайла, Контрагент) Экспорт
	
	ДанныеДокументооборота = ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();		
	ДанныеДокументооборота.ДанныеОсновногоФайла = ОписаниеФайла;
	ДанныеДокументооборота.Отправитель = Контрагент;
	
	Возврат ИнтеграцияЭДОВызовСервера.ВыполнитьКонтрольСопоставленияНоменклатурыЭлектронногоДокумента(ДанныеДокументооборота);
		
КонецФункции

Функция НовоеОписаниеОбъектаУчета() Экспорт
	Возврат ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура();
КонецФункции

// См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
Функция ОписаниеОбъектаУчета(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
КонецФункции

// См. ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента
Функция ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
КонецФункции

// См. ИнтеграцияЭДО.ОписаниеТипаОбъектаПоСпособуОбработки
Функция ОписаниеТипаОбъектаПоСпособуОбработки(СпособОбработки) Экспорт
	Возврат ИнтеграцияЭДО.ОписаниеТипаОбъектаПоСпособуОбработки(СпособОбработки);
КонецФункции

Функция ОписанияОбъектовУчета(НаборОбъектовУчета) Экспорт
	Возврат ИнтеграцияЭДО.ОписанияОбъектовУчета(НаборОбъектовУчета);
КонецФункции

// См. ИнтеграцияЭДО.НайтиНоменклатуруИБПоИдентификатору
Функция НайтиНоменклатуруИБПоИдентификатору(ИдентификаторДляСопоставления) Экспорт
	Возврат ИнтеграцияЭДО.НайтиНоменклатуруИБПоИдентификатору(ИдентификаторДляСопоставления);
КонецФункции

// См. ИнтеграцияЭДО.СтавкаНДСИзСоответствия
Функция СтавкаНДСИзСоответствия(ПредставлениеБЭД = "", ПрикладноеЗначение = Неопределено) Экспорт
	
	Возврат ИнтеграцияЭДО.СтавкаНДСИзСоответствия(ПредставлениеБЭД, ПрикладноеЗначение);
	
КонецФункции

Функция ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС) Экспорт
	Возврат ИнтеграцияЭДО.ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС);
КонецФункции

Функция НастройкиОтправки(ОписаниеОбъектаУчета) Экспорт
	КлючНастроекОтправки = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
	Возврат НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
КонецФункции

Функция ОбъектыУчетаАктуальногоДокументооборота(Документооборот) Экспорт
	Возврат ИнтеграцияЭДО.ОбъектыУчетаАктуальногоЭлектронногоДокумента(Документооборот);
КонецФункции

Функция ЗакрытьЭлектронныйДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "") Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЗакрытьДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий);
КонецФункции

Процедура ПерезаполнитьДокумент(ПараметрыЗаполнения, КонтекстДиагностики = Неопределено) Экспорт
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	ИнтеграцияЭДО.ПерезаполнитьДокумент(ПараметрыЗаполнения, КонтекстДиагностики);
КонецПроцедуры

Функция НачатьЭДОПоОбъектамУчета(ОбъектыУчета, НастройкиОтправкиОбъектовУчета = Неопределено) Экспорт
	ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	ЭлектронныеДокументыЭДО.ДобавитьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	Если НастройкиОтправкиОбъектовУчета <> Неопределено Тогда
		ПараметрыВыполнения.НастройкиОбъектов = НастройкиОтправкиОбъектовУчета;
	КонецЕсли;
	Возврат ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполнения);
КонецФункции

Функция СостоянияАктуальныхДокументооборотов(ОбъектыУчета) Экспорт
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ТекстЗапросаАктуальныхЭлектронныхДокументовОбъектовУчета());
	ТекстыЗапросов.Добавить(ЭлектронныеДокументыЭДО.ЗапросСостоянийДокументов(
		"СостоянияДокументооборотов", "ВЫБРАТЬ ЭлектронныйДокумент ИЗ АктуальныеЭлектронныеДокументы"));
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	АктуальныеЭлектронныеДокументы.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент, 
		|	СостоянияДокументооборотов.Состояние КАК Состояние
		|ИЗ
		|	АктуальныеЭлектронныеДокументы КАК АктуальныеЭлектронныеДокументы
		|	ВНУТРЕНЕЕ СОЕДИНЕНИЕ СостоянияДокументооборотов КАК СостоянияДокументооборотов
		|	ПО АктуальныеЭлектронныеДокументы.ЭлектронныйДокумент = СостоянияДокументооборотов.ЭлектронныйДокумент");
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращает соответствие типов документов и прикладных типов документов видам документов из справочника
// ВидыДокументовЭДО, исключая устаревшие значения перечисления ТипыДокументовЭДО.
// 
// Возвращаемое значение:
// 	Соответствие
//   * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО
//          - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
//   * Значение - СправочникСсылка.ВидыДокументовЭДО .
Функция СоответствиеВидовЭДВидамДокументовЭДО() Экспорт
	
	УстаревшиеТипыДокументов = Новый Массив;
	ВсеТипыДокументов = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыДокументовЭДО.Ссылка
	|ИЗ
	|	Перечисление.ТипыДокументовЭДО КАК ТипыДокументовЭДО";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТипыДокументовПроизвольногоФормата = ЭлектронныеДокументыЭДО.ТипыДокументовПроизвольногоФормата();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТипДокументаПоНовойАрхитектуре = ЭлектронныеДокументыЭДО.Обновление_ТипДокументаПоНовойАрхитектуре(
		ВыборкаДетальныеЗаписи.Ссылка);
		ТипДокументаУстарел = ТипДокументаПоНовойАрхитектуре <> ВыборкаДетальныеЗаписи.Ссылка;
		Если ТипДокументаУстарел Тогда
			УстаревшиеТипыДокументов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
		Если ЭлектронныеДокументыЭДО.ЭтоСтандартныйТипДокумента(ТипДокументаПоНовойАрхитектуре)
			Или ЭлектронныеДокументыЭДО.ЭтоТипДокументаСлужебный(ТипДокументаПоНовойАрхитектуре)
			Или ТипыДокументовПроизвольногоФормата.Найти(ТипДокументаПоНовойАрхитектуре) <> Неопределено
			Или ТипДокументаПоНовойАрхитектуре = Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации Тогда
			ВсеТипыДокументов.Добавить(ТипДокументаПоНовойАрхитектуре);
		КонецЕсли;
	КонецЦикла;
		
	ВидыДокументовПоТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоСтандартнымТипам(ВсеТипыДокументов);
	ПрикладныеВидыДокументовПоТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоПрикладнымТипам(
		ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов());
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВидыДокументовПоТипам, ПрикладныеВидыДокументовПоТипам);
	
	Для Каждого ТипДокумента Из УстаревшиеТипыДокументов Цикл
		Если ВидыДокументовПоТипам[ТипДокумента] = Неопределено Тогда
			НовыйТипДокумента = ЭлектронныеДокументыЭДО.Обновление_ТипДокументаПоНовойАрхитектуре(ТипДокумента);
			ВидыДокументовПоТипам.Вставить(ТипДокумента, ВидыДокументовПоТипам[НовыйТипДокумента]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДокументовПоТипам;
	
КонецФункции

Функция НовыеДанныеДокументаДляОтраженияВУчете() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента");
	Параметры.Вставить("ДанныеОсновногоФайла");
	Параметры.Вставить("ДанныеДополнительногоФайла");
	Параметры.Вставить("Направление");
	Параметры.Вставить("Отправитель");
	Параметры.Вставить("СпособОбработки");
	Параметры.Вставить("ДополнительныеДанные", Новый Структура);
	
	Возврат Параметры;
	
КонецФункции

// Отражает документ, полученный в виде файла, в учете.
// 
// Параметры:
//  Параметры - См. НовыеДанныеДокументаДляОтраженияВУчете.
//  ОбъектУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО, Неопределено - набор документов, в которые
//     нужно производить загрузку.
//  Отказ - Булево - будет установлена в Истина, если операция не удалась.
//
Процедура ОтразитьВУчетеЭлектронныйДокумент(Параметры, ОбъектыУчета, Отказ) Экспорт
	
	ДанныеДокументооборота = ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	ЗаполнитьЗначенияСвойств(ДанныеДокументооборота, Параметры,, "ДанныеОсновногоФайла, ДанныеДополнительногоФайла");
	Если Параметры.ДанныеОсновногоФайла <> Неопределено Тогда
		ДанныеДокументооборота.ДанныеОсновногоФайла.ДвоичныеДанные = Параметры.ДанныеОсновногоФайла;
	КонецЕсли;
	Если Параметры.ДанныеДополнительногоФайла <> Неопределено Тогда
		ДанныеДокументооборота.ДанныеДополнительногоФайла.ДвоичныеДанные = Параметры.ДанныеДополнительногоФайла;
	КонецЕсли;
	ДанныеДокументооборота.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Параметры.ТипДокумента);
	
	ИнтеграцияЭДО.СохранитьДанныеОбъекта(ДанныеДокументооборота, ОбъектыУчета, Параметры.СпособОбработки);
	
	Отказ = Не ЗначениеЗаполнено(ОбъектыУчета);
	
КонецПроцедуры

#Область Обновление

Функция ВыборкаСообщенийДляЗаменыОбъектовВСостоянииПодписания(ВыбранныеДанные) Экспорт
	Возврат ЭлектронныеДокументыЭДО.Обновление_ВыборкаСообщенийДляЗаменыОбъектовВСостоянииПодписания(ВыбранныеДанные);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
