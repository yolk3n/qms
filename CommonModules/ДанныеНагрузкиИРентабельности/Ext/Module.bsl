///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ДанныеНагрузкиИРентабельности".
// ОбщийМодуль.ДанныеНагрузкиИРентабельности.
//
// Серверные процедуры выполнения оплаты в платежных системах:
//  - возврат показателей налоговой нагрузки и предельных значений рентабельности по переданным коду ОКВЭД и году;
//  - возврат идентификатора классификатора;
//  - процедуры загрузки, добавления и обновления классификатора из сервиса и макета;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру с показателями налоговой нагрузки и рентабельности по переданным коду ОКВЭД и году.
//
// Параметры:
//  КодОКВЭД - Строка - код вида деятельности, для которого нужно получить показатели.
//  ДатаПолученияПоказателей - Дата - Год по которому необходимо получить показатели.
//  УчитыватьИерархию - Булево - Признак поиска показателей кода ОКВЭД вверх по иерархии.
// Возвращаемое значение:
//  Неопределено - если показатели не найдены.
//  Структура - данные показателей.
//    * НаименованиеВидаДеятельности - Строка - наименование вида деятельности.
//    * НалоговаяНагрузка - Число, Неопределено - показатель налоговой нагрузки, Неопределено - данные не заданы,
//        указывается явно, т.к. 0 может являться значением.
//    * РентабельностьПродаж - Число, Неопределено - показатель рентабельности продаж, Неопределено - данные не заданы,
//        указывается явно, т.к. 0 может являться значением.
//    * РентабельностьАктивов - Число, Неопределено - показатель рентабельности активов, 
//        Неопределено - данные не заданы, указывается явно, т.к. 0 может являться значением.
//
Функция ЗначениеПоказателейПоКоду(КодОКВЭД, ДатаПолученияПоказателей, УчитыватьИерархию = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеВидаДеятельности", Неопределено);
	Результат.Вставить("НалоговаяНагрузка",            Неопределено);
	Результат.Вставить("РентабельностьПродаж",         Неопределено);
	Результат.Вставить("РентабельностьАктивов",        Неопределено);
	
	ГодДанных = Год(ДатаПолученияПоказателей);
	
	Если УчитыватьИерархию Тогда
		ИерархияКодовОКВЭД = ПолучитьИерархиюКодовОКВЭД(СокрЛП(КодОКВЭД));
	Иначе
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(КодОКВЭД, ".", "")) Тогда 
			Возврат Результат; // Корректный код может содержать только цифры и точки
		КонецЕсли;
		ИерархияКодовОКВЭД = Новый Массив();
		ИерархияКодовОКВЭД.Добавить(СокрЛП(КодОКВЭД));
	КонецЕсли;
	
	ТаблицаОКВЭДСВесом = ЗаполнитьТаблицуОКВЭД(ИерархияКодовОКВЭД);
	
	ЗапросПоказателей = Новый Запрос;
	ЗапросПоказателей.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОКВЭД.ВесКодаОКВЭД КАК ВесКодаОКВЭД,
	|	ТаблицаОКВЭД.КодОКВЭД КАК КодОКВЭД
	|ПОМЕСТИТЬ ТаблицаОКВЭДСВесом
	|ИЗ
	|	&ТаблицаОКВЭД КАК ТаблицаОКВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПредельныеЗначенияОКВЭД2.Год) КАК Год
	|ПОМЕСТИТЬ ГодПолученияДанных
	|ИЗ
	|	РегистрСведений.ПредельныеЗначенияОКВЭД2 КАК ПредельныеЗначенияОКВЭД2
	|ГДЕ
	|	ПредельныеЗначенияОКВЭД2.Год <= &ГодДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.НаименованиеОКВЭД2, """") КАК НаименованиеВидаДеятельности,
	|	ВЫБОР
	|		КОГДА ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеНалоговаяНагрузка
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.НалоговаяНагрузка
	|	КОНЕЦ КАК НалоговаяНагрузка,
	|	ВЫБОР
	|		КОГДА ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеРентабельностьПродаж
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.РентабельностьПродаж
	|	КОНЕЦ КАК РентабельностьПродаж,
	|	ВЫБОР
	|		КОГДА ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеРентабельностьАктивов
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.РентабельностьАктивов
	|	КОНЕЦ КАК РентабельностьАктивов
	|ИЗ
	|	ТаблицаОКВЭДСВесом КАК ТаблицаОКВЭДСВесом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельныеЗначенияОКВЭД2 КАК ПредельныеЗначенияОКВЭД2НалоговаяНагрузка
	|		ПО (ТаблицаОКВЭДСВесом.КодОКВЭД ПОДОБНО ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.КодОКВЭД2)
	|			И (ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.Год В
	|				(ВЫБРАТЬ
	|					ГодПолученияДанных.Год КАК Год
	|				ИЗ
	|					ГодПолученияДанных КАК ГодПолученияДанных))
	|			И (НЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеНалоговаяНагрузка
	|				ИЛИ НЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеРентабельностьПродаж
	|				ИЛИ НЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.ПустоеЗначениеРентабельностьАктивов)
	|ГДЕ
	|	НЕ ПредельныеЗначенияОКВЭД2НалоговаяНагрузка.КодОКВЭД2 ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОКВЭДСВесом.ВесКодаОКВЭД УБЫВ";
	
	ЗапросПоказателей.УстановитьПараметр("ГодДанных", ГодДанных);
	ЗапросПоказателей.УстановитьПараметр("ТаблицаОКВЭД", ТаблицаОКВЭДСВесом);
	
	Выборка = ЗапросПоказателей.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.6.4.8";
		Обработчик.Процедура = "ДанныеНагрузкиИРентабельности.НачальноеЗаполнение";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
//
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Данные налоговой нагрузки и рентабельности по отраслям'");
	Описатель.Идентификатор          = ИдентификаторВСервисеКлассификаторов();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
//
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторВСервисеКлассификаторов() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
		ДанныеКлассификатора = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		УдалитьФайлы(ПутьКФайлу);
		
	Исключение
		
		УдалитьФайлы(ПутьКФайлу);
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Некорректный формат файла классификатора, обработка прервана'"),
			Истина,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
			
		Возврат;
		
	КонецПопытки;
	
	ФорматДанныхВерен = ПроверитьСтруктуруКлассификатора(ДанныеКлассификатора);
	
	Если ФорматДанныхВерен Тогда
		ОбработатьДанныеКлассификатора(ДанныеКлассификатора, Обработан);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет начальное заполнение и обновление классификатора.
//
Процедура НачальноеЗаполнение() Экспорт
	
	ДанныеКлассификатора = 
		РегистрыСведений.ПредельныеЗначенияОКВЭД2.ПолучитьМакет("ПредопределенныеЗначения").ПолучитьТекст();
		
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеКлассификатора);
		ДанныеКлассификатора = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Некорректный формат макета классификатора, обработка прервана'"),
			Истина,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
			
		Возврат;
		
	КонецПопытки;
	
	ФорматДанныхВерен = ПроверитьСтруктуруКлассификатора(ДанныеКлассификатора);
	
	Если Не ФорматДанныхВерен Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор     = ИдентификаторВСервисеКлассификаторов();
	ЗагружаемаяВерсия = ДанныеКлассификатора.version;
	
	ТекущаяВерсия = РаботаСКлассификаторами.ВерсияКлассификатора(Идентификатор, Истина);
	Обработан = Ложь;
	Если ЗагружаемаяВерсия > ТекущаяВерсия Тогда
		ОбработатьДанныеКлассификатора(ДанныеКлассификатора, Обработан);
	Иначе
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Версия %1 классификатора ""Данные налоговой нагрузки и рентабельности по отраслям"" не загружена,
			| т.к. уже загружена более новая версия %2. Рекомендуется проверить наличие обновлений конфигурации.'"),
			ДанныеКлассификатора.version,
			ТекущаяВерсия);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Комментарий,
			Ложь,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
		
	КонецЕсли;
	
	Если Обработан Тогда
		РаботаСКлассификаторами.УстановитьВерсиюКлассификатора(Идентификатор, ЗагружаемаяВерсия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит валидацию структуры данных классификатора.
//
// Параметры:
//  ДанныеКлассификатора - Структура - структура данных классификатора.
//
// Возвращаемое значение:
//  Булево - Истина если структура верна.
//
Функция ПроверитьСтруктуруКлассификатора(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора)
		ИЛИ ТипЗнч(ДанныеКлассификатора) <> Тип("Структура") Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Отсутствуют данные или данные не являются структурой'"),
			Истина,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
			
		Возврат Ложь;
		
	ИначеЕсли Не ДанныеКлассификатора.Свойство("version") 
		ИЛИ ТипЗнч(ДанныеКлассификатора.version) <> Тип("Число") Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Отсутствует или неправильно заполнено свойство ""version""'"),
			Истина,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
			
		Возврат Ложь;
		
	ИначеЕсли Не ДанныеКлассификатора.Свойство("classifierData") 
		ИЛИ ТипЗнч(ДанныеКлассификатора.classifierData) <> Тип("Массив") Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Отсутствует или неправильно заполнено свойство ""classifierData""'"),
			Истина,
			Метаданные.РегистрыСведений.ПредельныеЗначенияОКВЭД2);
			
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	
КонецФункции

// Производит разбор переданной структуры и записывает данные классификатора.
// В случае успешного завершения параметру "Обработан" присваивается значение равное Истина
//
// Параметры:
//  ДанныеКлассификатора - Структура - структура данных классификатора.
//  Обработан - Булево - признак успешной обработки данных классификатора.
//
Процедура ОбработатьДанныеКлассификатора(ДанныеКлассификатора, Обработан)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КодОКВЭД2", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8)));
	ТаблицаДанных.Колонки.Добавить("НаименованиеОКВЭД2", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("НалоговаяНагрузка", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("РентабельностьПродаж", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("РентабельностьАктивов", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПустоеЗначениеНалоговаяНагрузка", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПустоеЗначениеРентабельностьПродаж", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПустоеЗначениеРентабельностьАктивов", Новый ОписаниеТипов("Булево"));
	
	Для каждого Элемент Из ДанныеКлассификатора.classifierData Цикл
		
		НовСтр = ТаблицаДанных.Добавить();
		НовСтр.Год                                     = Элемент["year"];
		НовСтр.КодОКВЭД2                               = Элемент["code"];
		НовСтр.НаименованиеОКВЭД2                      = Элемент["name"];
		
		Если Элемент["profitabilityOfSales"] = Неопределено Тогда
			НовСтр.ПустоеЗначениеРентабельностьПродаж  = Истина;
		Иначе
			НовСтр.РентабельностьПродаж                = Элемент["profitabilityOfSales"];
		КонецЕсли;
		
		Если Элемент["profitabilityOfAssets"] = Неопределено Тогда
			НовСтр.ПустоеЗначениеРентабельностьАктивов = Истина;
		Иначе
			НовСтр.РентабельностьАктивов               = Элемент["profitabilityOfAssets"];
		КонецЕсли;
		
		Если Элемент["taxBurden"] = Неопределено Тогда
			НовСтр.ПустоеЗначениеНалоговаяНагрузка     = Истина;
		Иначе
			НовСтр.НалоговаяНагрузка                   = Элемент["taxBurden"];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ПредельныеЗначенияОКВЭД2.СоздатьНаборЗаписей();
	Набор.Загрузить(ТаблицаДанных);
	Набор.Записать();
	
	Обработан = Истина;
	
КонецПроцедуры

// Формирует массив кодов ОКВЭД исходя из возможной иерархии.
//
// Параметры:
//  ДанныеКлассификатора - Структура - структура данных классификатора;
//
// Возвращаемое значение:
//  Массив - Массив строк - возможных кодов ОКВЭД с учетом иерархии
//
Функция ПолучитьИерархиюКодовОКВЭД(КодОКВЭД)
	
	Результат = Новый Массив;
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(КодОКВЭД, ".", "")) Тогда 
		Возврат Результат; // Корректный код может содержать только цифры и точки
	КонецЕсли;
	ДлинаКода = СтрДлина(КодОКВЭД); 
	Для Позиция = 0 По ДлинаКода Цикл
		
		ЧастьКода = Лев(КодОКВЭД, ДлинаКода - Позиция);
		Если СтрЗаканчиваетсяНа(ЧастьКода, ".") Тогда 
			Продолжить; // На точку код оканчиваться не может
		КонецЕсли;
		
		Результат.Добавить(ЧастьКода);
		Если ДлинаКода - Позиция <= 2 Тогда 
			Прервать; // Кодов из 1 символа не бывает
		КонецЕсли;
	КонецЦикла;
	
	// Для расчета средней по всем отраслям.
	Результат.Добавить("");
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу кодов ОКВЭД с весом для поиска показателей.
//
// Параметры:
//  МассивИерархииОКВЭД - Структура - структура данных классификатора;
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание состояния. Содержит колонки:
//   * КодОКВЭД - Строка - код ОКВЭД.
//   * ВесКодаОКВЭД - Число - вес соответствия кода исходному, приоритет по максимальному значению.
//
Функция ЗаполнитьТаблицуОКВЭД(ИерархияКодовОКВЭД)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КодОКВЭД", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ВесКодаОКВЭД", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементИерархии Из ИерархияКодовОКВЭД Цикл
		НоваяСтрокаОКВЭД = ТаблицаДанных.Добавить();
		НоваяСтрокаОКВЭД.КодОКВЭД = ЭлементИерархии;
		НоваяСтрокаОКВЭД.ВесКодаОКВЭД = СтрДлина(ЭлементИерархии);
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Данные нагрузки и рентабельности'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Формирует идентификатор классификатора данных налоговой нагрузки и рентабельности в сервисе классификаторов.
//
// Возвращаемое значение:
//  Строка - идентификатор классификатора.
//
Функция ИдентификаторВСервисеКлассификаторов()

	Возврат "TaxBurdenAndProfitabilityByIndustry";

КонецФункции

#КонецОбласти

