
#Область СлужебныйПрограммныйИнтерфейс

#Область Операторы

// Возвращает описание запроса, в результате которого будут содержаться операторы электронного документооборота.
// Запрос содержит следующие поля:
//  * Представление - Строка
//  * ИдентификаторОператора - Строка
//  * ИНН - Строка
//  * ЕстьШаблонСоглашенияНаРоуминг - Булево
//  * СрокДействияСоглашенияНаРоуминг - Число - срок действия в днях.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборОператоровЭлектронногоДокументооборота
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросОператоровЭДО(ИмяВременнойТаблицы = "", Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборОператоровЭлектронногоДокументооборота();
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОператорыЭДО.Представление,
		|	ОператорыЭДО.ИдентификаторОператора,
		|	ОператорыЭДО.ИНН,
		|	ОператорыЭДО.ЕстьШаблонСоглашенияНаРоуминг,
		|	ОператорыЭДО.СрокДействияСоглашенияНаРоуминг,
		|	ОператорыЭДО.РасширениеФайлаСоглашенияНаРоуминг,
		|	ОператорыЭДО.ОтправлятьДополнительныеСведения,
		|	ОператорыЭДО.СпособОбменаЭД,
		|	ОператорыЭДО.ОднородныйОтветНаВсеДокументыПакета,
		|	ОператорыЭДО.ДоступноПодключениеЧерез1С
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	&ПоляУсловия";
	
	Если ИмяВременнойТаблицы = "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Идентификатор) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ИдентификаторОператора В (%1)", Отбор.Идентификатор));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.СпособОбмена) Тогда
		ПоляУсловия.Добавить(СтрШаблон("СпособОбменаЭД В (%1)", Отбор.СпособОбмена));
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса,
		ИмяВременнойТаблицы, "", ПоляУсловия);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает структуру для получения запроса операторов электронного документооборота. См. ЗапросОператоровЭДО.
// 
// Возвращаемое значение:
// 	Структура:
// * Идентификатор - Строка - имя параметра, содержащего идентификаторы операторов
// * СпособОбмена - Строка - имя параметра, содержащего способы обмена электронными документами
Функция НовыйОтборОператоровЭлектронногоДокументооборота() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", "");
	Отбор.Вставить("СпособОбмена", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться информация о совместимости операторов
// электронного документооборота.
// Запрос содержит следующие поля:
//  * Оператор1 - Строка
//  * Оператор2 - Строка
//  * СвязьДоступна - Булево
//  * ПотребностьСоглашения - Булево
//  * РекомендацияПоНастройке - Строка
//  * ДоступныШироковещательныеПриглашения - Булево.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСовместимостиОператоровЭДО(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СовместимостьОператоровЭДО.Оператор1 КАК Оператор1,
		|	СовместимостьОператоровЭДО.Оператор2 КАК Оператор2,
		|	СовместимостьОператоровЭДО.СвязьДоступна КАК СвязьДоступна,
		|	СовместимостьОператоровЭДО.ПотребностьСоглашения КАК ПотребностьСоглашения,
		|	СовместимостьОператоровЭДО.РекомендацияПоНастройке КАК РекомендацияПоНастройке,
		|	СовместимостьОператоровЭДО.ДоступныШироковещательныеПриглашения КАК ДоступныШироковещательныеПриглашения,
		|	СовместимостьОператоровЭДО.ТребуетсяСоглашениеПриПервомПодключении
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса,
		ИмяВременнойТаблицы, "", "");
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Получает данные об операторах электронного документооборота из сервиса настроек.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПолучатьНеобработанныеДанные - Булево - при установленном флаге будут получены
// Возвращаемое значение:
// 	- Неопределено - данные получить не удалось
// 	- См. ОбработкаРезультатаКаталогОператоров .
Функция ПолучитьОператоровЭлектронногоДокументооборота(КонтекстДиагностики, ПолучатьНеобработанныеДанные = Ложь) Экспорт
	
	ПараметрыОперации = Новый Структура("Наименование",
		НСтр("ru = 'Получение данных об операторах электронного документооборота'"));
	
	ДанныеФайла = ДанныеФайлаОблачногоХранилищаНастроек("/operators/catalog.json", ПараметрыОперации.Наименование,
		КонтекстДиагностики);
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолучатьНеобработанныеДанные Тогда
		Возврат ДанныеФайла;	
	Иначе
		Отказ = Ложь;
		ПолученныеДанные = ОбъектИзJSON(ПараметрыОперации, ДанныеФайла, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогОператоров = ОбработкаРезультатаКаталогОператоров(ПолученныеДанные, КонтекстДиагностики);
	
	Возврат КаталогОператоров;
	
КонецФункции

// Получает данные о совместимости операторов электронного документооборота из сервиса настроек.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПолучатьНеобработанныеДанные - Булево - при установленном флаге будут получены
// Возвращаемое значение:
// 	- Неопределено - данные получить не удалось
// 	- См. ОбработкаРезультатаСовместимостьОператоров .
Функция ПолучитьСовместимостьОператоровЭлектронногоДокументооборота(КонтекстДиагностики, ПолучатьНеобработанныеДанные = Ложь) Экспорт
	
	ПараметрыОперации = Новый Структура("Наименование",
		НСтр("ru = 'Получение данных о совместимости операторов электронного документооборота'"));
	
	ДанныеФайла = ДанныеФайлаОблачногоХранилищаНастроек(
		"/operators/services-compatibilities.json", ПараметрыОперации.Наименование, КонтекстДиагностики);
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолучатьНеобработанныеДанные Тогда
		Возврат ДанныеФайла;	
	Иначе
		Отказ = Ложь;
		ПолученныеДанные = ОбъектИзJSON(ПараметрыОперации, ДанныеФайла, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СовместимостьОператоров = ОбработкаРезультатаСовместимостьОператоров(ПолученныеДанные, КонтекстДиагностики);
	
	Возврат СовместимостьОператоров;
	
КонецФункции

// Получает данные данные контрагентов создаваемых безусловно из сервиса настроек.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПолучатьНеобработанныеДанные - Булево - при установленном флаге будут получены
// Возвращаемое значение:
// 	- Неопределено - данные получить не удалось
// 	- См. ОбработкаРезультатаДанныеКонтрагентовСоздаваемыхБезусловно .
Функция ПолучитьКонтрагентовСоздаваемыхБезусловно(КонтекстДиагностики, ПолучатьНеобработанныеДанные = Ложь) Экспорт
	
	ПараметрыОперации = Новый Структура("Наименование",
		НСтр("ru = 'Получение данных контрагентов создаваемых безусловно'"));
	
	ДанныеФайла = ДанныеФайлаОблачногоХранилищаНастроек(
		"/counterparties/unconditionally_created.json", ПараметрыОперации.Наименование, КонтекстДиагностики);
	Если ДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолучатьНеобработанныеДанные Тогда
		Возврат ДанныеФайла;	
	Иначе
		Отказ = Ложь;
		ПолученныеДанные = ОбъектИзJSON(ПараметрыОперации, ДанныеФайла, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтрагентыСоздаваемыеБезусловно = ОбработкаРезультатаДанныеКонтрагентовСоздаваемыхБезусловно(ПолученныеДанные, КонтекстДиагностики);
	
	Возврат КонтрагентыСоздаваемыеБезусловно;
	
КонецФункции

// Обновляет данные операторов электронного документооборота в информационной базе.
// 
// Параметры:
// 	КаталогОператоров - см. ОбработкаРезультатаКаталогОператоров
// 	ДатаПоследнегоИзменения - Дата
Процедура ОбновитьДанныеОператоровЭлектронногоДокументооборота(КаталогОператоров, ДатаПоследнегоИзменения) Экспорт
	
	ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияОператоровЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	Если ЗначениеЗаполнено(ДатаПоследнегоИзменения)
		И КаталогОператоров.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения 
		И ЕстьЗаписи Тогда
		ИзменитьСостояниеСинхронизации(ТипСинхронизации,
			КаталогОператоров.ДатаПоследнегоИзменения);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(
			"РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО",
			Новый Структура("ТипСинхронизации", ТипСинхронизации));
		
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСинхронизации = ТипСинхронизации;
		
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() 
			И ЗначениеЗаполнено(ДатаПоследнегоИзменения)
			И КаталогОператоров.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения
			И ЕстьЗаписи Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи.ТипСинхронизации        = ТипСинхронизации;
		МенеджерЗаписи.ДатаПоследнегоИзменения = КаталогОператоров.ДатаПоследнегоИзменения;
		МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ОператорыЭДО");
		
		ЗаписатьВРегистрИзменениеДанныхСервиса(РегистрыСведений.ОператорыЭДО, КаталогОператоров.ТаблицаОператоров);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Обновление данных операторов электронного документооборота'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Не удалось обновить данные операторов ЭДО'"));
	КонецПопытки;
	
КонецПроцедуры

// Обновляет данные о совместимости операторов электронного документооборота в информационной базе.
// 
// Параметры:
// 	СовместимостьОператоров - см. СервисНастроекЭДО.ПолучитьСовместимостьОператоровЭлектронногоДокументооборота
// 	ДатаПоследнегоИзменения - Дата
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбновитьСовместимостьОператоровЭлектронногоДокументооборота(СовместимостьОператоров,
	Знач ДатаПоследнегоИзменения, КонтекстДиагностики = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
	Если ЗначениеЗаполнено(ДатаПоследнегоИзменения)
		И СовместимостьОператоров.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения
		И ЕстьЗаписи Тогда
		ИзменитьСостояниеСинхронизации(ТипСинхронизации, СовместимостьОператоров.ДатаПоследнегоИзменения);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(
			"РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО",
			Новый Структура("ТипСинхронизации", Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО));
		
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
		
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() 
			И ЗначениеЗаполнено(ДатаПоследнегоИзменения)
			И СовместимостьОператоров.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения
			И ЕстьЗаписи Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
		МенеджерЗаписи.ДатаПоследнегоИзменения = СовместимостьОператоров.ДатаПоследнегоИзменения;
		МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.СовместимостьОператоровЭДО");
		
		ЗаписатьВРегистрИзменениеДанныхСервиса(РегистрыСведений.СовместимостьОператоровЭДО,
			СовместимостьОператоров.ТаблицаСовместимостиОператоровЭДО);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Обновление данных о совместимости операторов электронного документооборота.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Не удалось обновить данные о совместимости операторов ЭДО.'"));
	КонецПопытки;
	
КонецПроцедуры

// Обновляет данные контрагентов создаваемых безусловно.
// 
// Параметры:
// 	КонтрагентыСоздаваемыеБезусловно - см. СервисНастроекЭДО.ПолучитьКонтрагентовСоздаваемыхБезусловно
// 	ДатаПоследнегоИзменения - Дата
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбновитьКонтрагентовСоздаваемыхБезусловно(КонтрагентыСоздаваемыеБезусловно,
	Знач ДатаПоследнегоИзменения, КонтекстДиагностики) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно КАК ДанныеКонтрагентовСоздаваемыхБезусловно";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияКонтрагентовСоздаваемыхБезусловно;
	Если ЗначениеЗаполнено(ДатаПоследнегоИзменения)
		И КонтрагентыСоздаваемыеБезусловно.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения
		И ЕстьЗаписи Тогда
		ИзменитьСостояниеСинхронизации(ТипСинхронизации, КонтрагентыСоздаваемыеБезусловно.ДатаПоследнегоИзменения);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(
			"РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО",
			Новый Структура("ТипСинхронизации", Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияКонтрагентовСоздаваемыхБезусловно));
		
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияКонтрагентовСоздаваемыхБезусловно;
		
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() 
			И ЗначениеЗаполнено(ДатаПоследнегоИзменения)
			И КонтрагентыСоздаваемыеБезусловно.ДатаПоследнегоИзменения <= ДатаПоследнегоИзменения
			И ЕстьЗаписи Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияКонтрагентовСоздаваемыхБезусловно;
		МенеджерЗаписи.ДатаПоследнегоИзменения = КонтрагентыСоздаваемыеБезусловно.ДатаПоследнегоИзменения;
		МенеджерЗаписи.ДатаПоследнейПроверки = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно");
		
		ЗаписатьВРегистрИзменениеДанныхСервиса(РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно,
			КонтрагентыСоздаваемыеБезусловно.ТаблицаДанныхКонтрагентовСоздаваемыхБезусловно);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Обновление данных о совместимости операторов электронного документооборота.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Не удалось обновить данные о совместимости операторов ЭДО.'"));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Находит оператора по Идентификатору ЭДО.
//
// Параметры:
//   ИдентификаторЭДО  - Строка - Идентификатор ЭДО.
//   ТаблицаОператоров - Строка - Таблица со всеми операторами для последующих поисков.
//
//  Возвращаемое значение:
//     Строка - идентификатор оператора
//
Функция НайтиОператораЭДОПоИдентификатору(Знач ИдентификаторЭДО, ТаблицаОператоров = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТаблицаОператоров) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОператорыЭДО.ИдентификаторОператора КАК Код
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО";
		
		ТаблицаОператоров = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого Оператор Из ТаблицаОператоров Цикл
		
		КодОператора = Оператор.Код;
		ДлинаКодаОператора = СтрДлина(КодОператора);
		
		Если Лев(ИдентификаторЭДО, ДлинаКодаОператора) = КодОператора Тогда
			
			Результат = Оператор.Код;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит операторов по идентификаторам ЭДО.
//
// Параметры:
//   ИдентификаторыЭДО - Массив из Строка - Идентификаторы операторов ЭДО.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица значений с колонками:
// 		* ИдентификаторЭДО - Строка
// 		* ИдентификаторОператора - Строка
// 		* ПредставлениеОператора - Строка
//
Функция НайтиОператоровЭДОПоИдентификаторам(ИдентификаторыЭДО) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторЭДО", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторОператора", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПредставлениеОператора", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОператорыЭДО.ИдентификаторОператора КАК Код,
	|	ОператорыЭДО.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО";
	
	ТаблицаОператоров = Запрос.Выполнить().Выгрузить();
		
	Для Каждого Оператор Из ТаблицаОператоров Цикл
		
		КодОператора = Оператор.Код;
		ДлинаКодаОператора = СтрДлина(КодОператора);
		
		Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
			
			Если Лев(ИдентификаторЭДО, ДлинаКодаОператора) = КодОператора Тогда
			
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ИдентификаторЭДО = ИдентификаторЭДО;
				НоваяСтрока.ИдентификаторОператора = КодОператора;
				НоваяСтрока.ПредставлениеОператора = Оператор.Представление;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает операторов электронного документооборота, которые доступны для подключения через 1С.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений:
//    * ИНН - Строка
//    * КПП - Строка
//    * ОГРН - Строка
//    * Сертификат - Строка - отпечаток сертификата
//    * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//    * Наименование - Строка
//    * Идентификатор - Строка
Функция ОператорыЭлектронногоДокументооборота() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОператорыЭДО.ИНН КАК ИНН,
		|	ОператорыЭДО.КПП КАК КПП,
		|	ОператорыЭДО.ОГРН КАК ОГРН,
		|	ОператорыЭДО.ОтпечатокСертификата КАК Сертификат,
		|	ОператорыЭДО.СпособОбменаЭД КАК СпособОбмена,
		|	ОператорыЭДО.Представление КАК Наименование,
		|	ОператорыЭДО.ИдентификаторОператора КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ДоступноПодключениеЧерез1С
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает представление оператора электронного документооборота.
// 
// Параметры:
// 	ИдентификаторОператора - Строка
// Возвращаемое значение:
// 	Строка
Функция ПредставлениеОператораЭлектронногоДокументооборота(ИдентификаторОператора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОператорыЭДО.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ИдентификаторОператора = &ИдентификаторОператора";
	
	Запрос.УстановитьПараметр("ИдентификаторОператора", ИдентификаторОператора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	
	Возврат "";

КонецФункции

Функция ДоступноПодключениеБезОГРН(ИдентификаторОператораЭДО) Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОператорыЭДО.ДоступноПодключениеБезОГРН
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ИдентификаторОператора = &ИдентификаторОператора";
	
	Запрос.УстановитьПараметр("ИдентификаторОператора", ИдентификаторОператораЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
			
		Результат = ВыборкаДетальныеЗаписи.ДоступноПодключениеБезОГРН;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Возвращает признак необходимости однородного ответа.
// 
// Параметры:
//  Идентификатор - Строка - идентификатор оператора или абонента
//  
// Возвращаемое значение:
//  Булево - 
Функция ТребуетсяОднородностьОтвета(Идентификатор) Экспорт
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОператорыЭДО.ОднородныйОтветНаВсеДокументыПакета
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ИдентификаторОператора = &ИдентификаторОператора";
	
	ИдентификаторОператора = Лев(Идентификатор, 3);
	Запрос.УстановитьПараметр("ИдентификаторОператора", ИдентификаторОператора);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
	
		Результат = ВыборкаДетальныеЗаписи.ОднородныйОтветНаВсеДокументыПакета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Абоненты

// Возвращает описание отбора для получения данных из сервиса настроек.
// 
// Возвращаемое значение:
// 	Структура:
// * СписокИНН - Массив из Строка - ИНН для поиска
// * ИдентификаторыЭДО - Массив из Строка - идентификаторы для фильтрации выборки
// * ДатаОбновления - Дата - выдавать в выборке только измененные после этой даты
// * Страница - Число - номер страницы результата
Функция НовыйОтборДанныхАбонентаВСервисеНастроек() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокИНН"         , Новый Массив);
	Результат.Вставить("ИдентификаторыЭДО" , Новый Массив);
	Результат.Вставить("ДатаОбновления"    , Дата(1, 1, 1));
	Результат.Вставить("Страница"          , 0);
	
	Возврат Результат;
	
КонецФункции

// Получает данные об абонентах из сервиса настроек и обновляет данные в кеше.
//
// Параметры:
//   Отбор - см. НовыйОтборДанныхАбонентаВСервисеНастроек
//   Отказ - Булево  - во время работы возникли ошибки
//   КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	- Неопределено - данные получить не удалось.
// 	- См. НоваяТаблицаАбонентов .
Функция ДанныеАбонентовИзСервисаНастроек(Отбор, Отказ, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ПараметрыКоманды = ПараметрыКомандыПолученияДанныхАбонентовВСервисНастроек(Отбор);
	
	ДанныеАбонентов = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
	Если Не Отказ Тогда
		Результат = ОбработатьДанныеОтветаСервиса(ПараметрыКоманды, ДанныеАбонентов, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(НаборОтборовПоКонтрагентам, Отказ, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ПараметрыКоманды = ПараметрыКомандыПолученияДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(НаборОтборовПоКонтрагентам, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтекстДиагностики) Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	ДанныеОрганизаций = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
	Если Не Отказ Тогда
		Результат = ОбработатьДанныеОтветаСервиса(ПараметрыКоманды, ДанныеОрганизаций, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу организаций с обязательной отправкой заявки на роуминг.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ИНН - Строка
// * ИдентификаторОператораЭДО - Строка
// * ТребуетсяЗаявкаНаРоуминг - Булево
Функция ТаблицаОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг() Экспорт

	Результат = Новый ТаблицаЗначений;

	ТипСтрока12 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12));
	Результат.Колонки.Добавить("ИНН", ТипСтрока12);
	
	ТипСтрока3 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3));
	Результат.Колонки.Добавить("ИдентификаторОператораЭДО", ТипСтрока3);
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("ТребуетсяЗаявкаНаРоуминг", ТипБулево);

	Возврат Результат;
	
КонецФункции

// Отправляет данные абонента в сервис настроек.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Структура:
//    * Результат - Булево - данные абонента отправлены в сервис
//    * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОтправитьДанныеАбонентаВСервисНастроек(ИдентификаторУчетнойЗаписи) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(КонтекстДиагностики, ИдентификаторУчетнойЗаписи);
	Отказ = Ложь;
	
	Запросы = Новый Массив;
	ЗапросФорматов = ЭлектронныеДокументыЭДО.ЗапросФорматовЭлектронныхДокументов("ФорматыЭлектронныхДокументов");
	Запросы.Добавить(ЗапросФорматов);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторЭДО";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	ОтборСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатовУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторЭДО";
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписейЭДО",
		ОтборСертификатовУчетныхЗаписей);
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.НазначениеУчетнойЗаписи КАК НазначениеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.ПодробноеОписаниеУчетнойЗаписи КАК ПодробноеОписаниеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК imprint,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК expireDate
		|ИЗ
		|	СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаФорматов.Формат КАК Формат,
		|	РасшифровкаФорматов.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ РасшифровкаФорматов
		|ИЗ
		|	&Расшифровка КАК РасшифровкаФорматов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК formatUeid,
		|	РасшифровкаФорматов.ВариантЗаполнения КАК fillOption
		|ИЗ
		|	РасшифровкаФорматов КАК РасшифровкаФорматов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО РасшифровкаФорматов.Формат = ФорматыЭлектронныхДокументов.Формат";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	Расшифровка = ЭлектронныеДокументыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО();
	ИтоговыйЗапрос.УстановитьПараметр("Расшифровка" , Расшифровка);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторУчетнойЗаписи);
	
	РезультатЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	ДанныеПоУчетнойЗаписи = РезультатЗапроса[3].Выгрузить()[0];
	
	ИмяРеквизитаИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПоУчетнойЗаписи.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	ОписаниеДанных = НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек();
	ОписаниеДанных.ИНН              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	ОписаниеДанных.КПП              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	ОписаниеДанных.ИдентификаторЭДО = ИдентификаторУчетнойЗаписи;
	ОписаниеДанных.Версия           = Метаданные.Версия;
	
	СертификатыАбонента = Новый Массив;
	Для Каждого СтокаТЧ Из РезультатЗапроса[4].Выгрузить() Цикл
		
		ДатаJSON = ЗаписатьДатуJSON(СтокаТЧ.expireDate, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		
		Сертификат = Новый Структура;
		Сертификат.Вставить("imprint"   , СтокаТЧ.imprint);
		Сертификат.Вставить("expireDate", СтрЗаменить(ДатаJSON,"+",".0+"));
		СертификатыАбонента.Добавить(Сертификат);
	КонецЦикла;
	
	ТаблицаФорматов = РезультатЗапроса[6].Выгрузить();
	ТаблицаФорматов.Сортировать("formatUeid");
	
	ОписаниеДанных.ВариантыЗаполненияФорматов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаФорматов);
	ОписаниеДанных.СертификатыАбонента        = СертификатыАбонента;
	
	ЗаполнитьЗначенияСвойств(ОписаниеДанных, ДанныеПоУчетнойЗаписи, "НазначениеУчетнойЗаписи, ПодробноеОписаниеУчетнойЗаписи");
	
	ПараметрыКоманды = ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ОписаниеДанных, Отказ, КонтекстДиагностики);
	
	Если Не Отказ Тогда
		ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
	КонецЕсли;
		
	Если Не Отказ Тогда
		УчетныеЗаписиЭДО.ИзменитьВерсиюКонфигурации(ИдентификаторУчетнойЗаписи, ОписаниеДанных.Версия);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Результат", Не Отказ);
	СтруктураВозврата.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Отправка данных об активности учетной записи в сервис настроек.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//  Булево - Истина, если отправка выполнена успешно
Функция ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ИдентификаторУчетнойЗаписи, КонтекстДиагностики) Экспорт
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	СтруктураJSON = Новый Структура;
	ДанныеАутентификации = Новый Структура;

	УстановитьПривилегированныйРежим(Истина);
	// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
	Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(
		ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь, ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАутентификации.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", ДанныеАутентификации);

	СтруктураJSON.Вставить("id", ИдентификаторУчетнойЗаписи);
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers/activity";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных об активности абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыКоманды.Заголовки.Вставить("ticket", Тикет);
	
	ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
	
	Возврат ?(Отказ, Ложь, Истина);
	
КонецФункции

#КонецОбласти

#Область Форматы

// Получает форматы электронных документов из сервиса настроек.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПолучатьНеобработанныеДанные - Булево - при установленном флаге будут получены
// Возвращаемое значение:
// 	- Неопределено - форматы получить не удалось
// 	- См. ОбработкаРезультатаКаталогФорматовЭД .
Функция ПолучитьФорматыЭлектронныхДокументов(КонтекстДиагностики, ПолучатьНеобработанныеДанные = Ложь) Экспорт
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	ПараметрыЗапроса = Новый Структура;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ФорматыЭД = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
		Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(
			ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь, ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		ПараметрыКоманды = ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ФорматыЭД = Неопределено Тогда
			ФорматыЭД = СписокФорматовЭД;
		Иначе
			Для Каждого ЭлементНабора Из СписокФорматовЭД.documentFormats Цикл
				ФорматыЭД.documentFormats.Добавить(ЭлементНабора);
			КонецЦикла;
		КонецЕсли;
		
		РазмерСтраницы = СписокФорматовЭД.pageSize;
		КоличествоПолучено = СписокФорматовЭД.documentFormats.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Если ПолучатьНеобработанныеДанные Тогда
		Поток = Новый ПотокВПамяти();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
		ЗаписьJSON.ОткрытьПоток(Поток,,, ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, ФорматыЭД);
		ЗаписьJSON.Закрыть();
		
		Результат = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	Иначе
		Результат = ОбработатьДанныеОтветаСервиса(ПараметрыКоманды, ФорматыЭД, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает данные о связи видов и форматов электронных документов из сервиса настроек.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПолучатьНеобработанныеДанные - Булево - при установленном флаге будут получены
// Возвращаемое значение:
// 	- Неопределено - данные получить не удалось
// 	- См. ОбработкаРезультатаСвязьТиповИФорматовЭД
Функция ПолучитьСвязьВидовИФорматовЭлектронныхДокументов(КонтекстДиагностики, ПолучатьНеобработанныеДанные = Ложь) Экспорт
	
	ВидыДокументов = ВидыЭДИзСервисаНастроек(КонтекстДиагностики);
	
	Если ВидыДокументов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим данные связи видов и форматов.
	Отказ = Ложь;
	ПараметрыЗапроса = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	СвязьВидовИФорматов = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
		Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(
			ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь, ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		
		ПараметрыКоманды = ПараметрыПолученияСвязиТиповИФорматовЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СвязьВидовИФорматов = Неопределено Тогда
			СвязьВидовИФорматов = СписокФорматовЭД;
		Иначе
			Для Каждого ЭлементНабора Из СписокФорматовЭД.documentTypeFormats Цикл
				СвязьВидовИФорматов.documentTypeFormats.Добавить(ЭлементНабора);
			КонецЦикла;
		КонецЕсли;
		
		РазмерСтраницы = СписокФорматовЭД.pageSize;
		КоличествоПолучено = СписокФорматовЭД.documentTypeFormats.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	СвязьВидовИФорматов.Вставить("documentTypes", ВидыДокументов.documentTypes);
	
	Если ПолучатьНеобработанныеДанные Тогда
		Поток = Новый ПотокВПамяти();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
		ЗаписьJSON.ОткрытьПоток(Поток,,, ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, СвязьВидовИФорматов);
		ЗаписьJSON.Закрыть();
		
		Результат = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	Иначе
		Результат = ОбработатьДанныеОтветаСервиса(ПараметрыКоманды, СвязьВидовИФорматов, Отказ, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТипДокументаПоЗначениюСервиса(Значение) Экспорт

	Результат = Неопределено;

	ТипыДокументов = Новый Соответствие();
	ТипыДокументов.Вставить("АктИсполнитель", Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Вставить("АктЗаказчик", Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Вставить("АктНаПередачуПрав", Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Вставить("АктОРасхождениях", Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументов.Вставить("АктСверкиВзаиморасчетов", Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ТипыДокументов.Вставить("ВозвратТоваровМеждуОрганизациями",
		Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями);
	ТипыДокументов.Вставить("ПередачаТоваровМеждуОрганизациями",
		Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями);
	ТипыДокументов.Вставить("ЗаказТовара", Перечисления.ТипыДокументовЭДО.ЗаказТовара);
	ТипыДокументов.Вставить("ЗапросКоммерческихПредложений",
		Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
	ТипыДокументов.Вставить("КаталогТоваров", Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	ТипыДокументов.Вставить("КоммерческоеПредложение", Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение);
	ТипыДокументов.Вставить("КорректировочныйСчетФактура", Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ТипыДокументов.Вставить("ОтветНаЗаказ", Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ);
	ТипыДокументов.Вставить("ОтчетОПродажахКомиссионногоТовара",
		Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара);
	ТипыДокументов.Вставить("ОтчетОСписанииКомиссионногоТовара",
		Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара);
	ТипыДокументов.Вставить("ПрайсЛист", Перечисления.ТипыДокументовЭДО.ПрайсЛист);
	ТипыДокументов.Вставить("СоглашениеОбИзмененииСтоимостиОтправитель",
		Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Вставить("СчетНаОплату", Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	ТипыДокументов.Вставить("СчетФактура", Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДокументов.Вставить("ТОРГ12Продавец", Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Вставить("ТОРГ12Покупатель", Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Вставить("УКД", Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументов.Вставить("УПД", Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументов.Вставить("ИзвещениеОПолучении", Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении);
	ТипыДокументов.Вставить("ПодтверждениеОператораЭДО", Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО);
	ТипыДокументов.Вставить("ПредложениеОбАннулировании", Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании);
	ТипыДокументов.Вставить("УведомлениеОбУточнении", Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении);
	ТипыДокументов.Вставить("СведенияОРеализацииКомиссионером",
		Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером);
	ТипыДокументов.Вставить("СведенияОЗакупкеКомиссионером",
		Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером);
	ТипыДокументов.Вставить("КорректировкаСведенийОРеализацииКомиссионером",
		Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером);
	ТипыДокументов.Вставить("КорректировкаСведенийОЗакупкеКомиссионером",
		Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером);
	ТипыДокументов.Вставить("АктПриемкиСтроительныхРаботУслуг",
		Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	// Нестандартные типы документов
	ТипыДокументов.Вставить("АктВзаимозачета", Перечисления.ТипыДокументовЭДО.АктВзаимозачета);
	ТипыДокументов.Вставить("АктСверки", Перечисления.ТипыДокументовЭДО.АктСверки);
	ТипыДокументов.Вставить("Ведомость", Перечисления.ТипыДокументовЭДО.Ведомость);
	ТипыДокументов.Вставить("ГарантийноеПисьмо", Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо);
	ТипыДокументов.Вставить("Договор", Перечисления.ТипыДокументовЭДО.Договор);
	ТипыДокументов.Вставить("ДополнительноеСоглашение", Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение);
	ТипыДокументов.Вставить("КС11", Перечисления.ТипыДокументовЭДО.КС11);
	ТипыДокументов.Вставить("КС2", Перечисления.ТипыДокументовЭДО.КС2);
	ТипыДокументов.Вставить("КС3", Перечисления.ТипыДокументовЭДО.КС3);
	ТипыДокументов.Вставить("Отчет", Перечисления.ТипыДокументовЭДО.Отчет);
	ТипыДокументов.Вставить("ПлатежноеПоручение", Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение);
	ТипыДокументов.Вставить("ПриложениеКАкту", Перечисления.ТипыДокументовЭДО.ПриложениеКАкту);
	ТипыДокументов.Вставить("Прочее", Перечисления.ТипыДокументовЭДО.Прочее);
	ТипыДокументов.Вставить("СоглашениеОбЭДО", Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО);
	ТипыДокументов.Вставить("Спецификация", Перечисления.ТипыДокументовЭДО.Спецификация);
	ТипыДокументов.Вставить("СчетНаОплату", Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	ТипыДокументов.Вставить("ТоварнаяНакладная", Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Вставить("Уведомление", Перечисления.ТипыДокументовЭДО.Уведомление);
	ТипыДокументов.Вставить("РеквизитыОрганизации", Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации);
	ТипыДокументов.Вставить("МашиночитаемаяДоверенность", Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);
	ТипыДокументов.Вставить("ДоговорнойДокумент", Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);

	ИскомыйТипДокумента = ТипыДокументов.Получить(Значение);
	Если Не ИскомыйТипДокумента = Неопределено Тогда
		Результат = ИскомыйТипДокумента;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Записывает состояние синхронизации сервиса настроек.
// 
// Параметры:
// 	ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииСервисаНастроекЭДО
// 	ДатаПоследнегоИзменения - Дата - если не задан, принимает значение текущей даты.
Процедура ИзменитьСостояниеСинхронизации(ТипСинхронизации, ДатаПоследнегоИзменения = Неопределено) Экспорт
	
	ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
	Если ДатаПоследнегоИзменения = Неопределено Тогда
		ДатаПоследнегоИзменения = ДатаПоследнейПроверки;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСинхронизации        = ТипСинхронизации;
	МенеджерЗаписи.ДатаПоследнегоИзменения = ДатаПоследнегоИзменения;
	МенеджерЗаписи.ДатаПоследнейПроверки   = ДатаПоследнейПроверки;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

// Возвращает шаблон соглашения на роуминг.
// 
// Параметры:
// 	ИдентификаторОператора - Строка
// Возвращаемое значение:
// 	ДвоичныеДанные, Неопределено -
Функция ШаблонСоглашенияНаРоуминг(ИдентификаторОператора) Экспорт
	
	Если ИдентификаторОператора = "2AE" Тогда
		ПутьКШаблону = "/operators/2AE/agreementTemplate_v2.docx";
	Иначе
		ПутьКШаблону = СтрШаблон("/operators/%1/agreementTemplate.docx", ИдентификаторОператора);
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Получение шаблона соглашения на роуминг для электронного документооборота'");
	ДанныеФайла = ДанныеФайлаОблачногоХранилищаНастроек(ПутьКШаблону, ВидОперации);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Возвращает адрес облачного хранилища настроек ЭДО.
// 
// Возвращаемое значение:
// 	Строка
Функция АдресОблачногоХранилищаНастроек() Экспорт
	
	Возврат "https://downloads.v8.1c.ru/content/LED/settings";
	
КонецФункции

// Возвращает адрес сервиса настроек ЭДО.
// 
// Возвращаемое значение:
// 	Строка
Функция АдресСервисаНастроек() Экспорт
	
	Возврат "https://edo-integration.1c.ru";
	
КонецФункции

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_1

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c814ea34-8b98-4296-85c4-58e1900c3567");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ОператорыЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОператорыЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление операторов ЭДО.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("de99658c-9492-4647-85ce-9e3a9ce7401c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление операторов ЭДО (начальное заполнение).'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СовместимостьОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("981f2245-d1c2-497c-b33d-56769551eced");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СовместимостьОператоровЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СовместимостьОператоровЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление совместимостей операторов ЭДО.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СовместимостьОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9742119-7b4f-44d1-bc6e-fb6b4e2b7563");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление совместимостей операторов ЭДО (начальное заполнение).'");

#КонецОбласти
	
КонецПроцедуры

Функция ОбработкаРезультатаДанныеКонтрагентовСоздаваемыхБезусловно(ПолученныеДанные, КонтекстДиагностики = Неопределено) Экспорт
	
	Отказ = Ложь;
	Если ТипЗнч(ПолученныеДанные) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные = ОбъектИзJSON(Неопределено, ПолученныеДанные, Отказ, КонтекстДиагностики);
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
		
	Таблица = РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для Каждого ДанныеКонтрагентов Из ПолученныеДанные.unconditionallyCreated Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Наименование = ДанныеКонтрагентов.name;
		НоваяСтрока.ИНН = ДанныеКонтрагентов.inn;
		НоваяСтрока.КПП = ДанныеКонтрагентов.kpp;
	КонецЦикла;
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, ТаблицаДанныхКонтрагентовСоздаваемыхБезусловно",
		lastChangeDate, Таблица);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает двоичные данные из облачного хранилища настроек.
//
// Параметры:
//  ПутьКФайлу   - Строка - путь к файлу настроек относительно адреса облачного хранилища.
//                          Например, "/operators/catalog.json".
//  ВидОперации  - Строка - наименование текущей операции для отображения в журнале регистрации при ошибке
//  КонтекстДиагностики  - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики 
//
// Возвращаемое значение:
//   ДвоичныеДанные - данные файла полученные по указанному пути.
//   Неопределено   - в случае, если не удалось получить файл.
//
Функция ДанныеФайлаОблачногоХранилищаНастроек(ПутьКФайлу, ВидОперации = "", КонтекстДиагностики = Неопределено)
	
	ПолныйАдрес = АдресОблачногоХранилищаНастроек() + ПутьКФайлу;
	РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(
		ПолныйАдрес, Неопределено, Не ЗначениеЗаполнено(ВидОперации));
	Если НЕ РезультатПолученияФайла.Статус Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при получении данных из облачного хранилища.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПолныйАдрес + Символы.ПС
			+ РезультатПолученияФайла.СообщениеОбОшибке;
		ВидОперации = ?(ВидОперации = "", НСтр("ru = 'Получение данных из облачного хранилища'"), ВидОперации);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ИнтернетСоединениеБЭДКлиентСервер.ВидОшибкиИнтернетСоединение(), ПодробныйТекстОшибки, ТекстОшибки);
		// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(
			ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики(),
			Ошибка, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатПолученияФайла.Путь);
	УдалитьИзВременногоХранилища(РезультатПолученияФайла.Путь);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Получение параметров для получения данные о абоненте из сервиса 1С:Сервис настроек
//
// Параметры:
//  ПараметрыЗапроса - см. НовыйОтборДанныхАбонентаВСервисеНастроек
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыПолученияДанныхАбонентовВСервисНастроек(ПараметрыЗапроса)
	
	СтруктураJSON       = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("СписокИНН")
		И ЗначениеЗаполнено(ПараметрыЗапроса.СписокИНН) И ПараметрыЗапроса.СписокИНН.Количество() > 0 Тогда
		
		СтруктураJSON.Вставить("innList", ПараметрыЗапроса.СписокИНН);
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("ИдентификаторыЭДО")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЭДО) Тогда
		
		СтруктураJSON.Вставить("originalIds", ПараметрыЗапроса.ИдентификаторыЭДО);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("ДатаОбновления")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ДатаОбновления) Тогда
		
		СтруктураJSON.Вставить("changedAfterDate", ПараметрыЗапроса.ДатаОбновления);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	Иначе
		СтруктураJSON.Вставить("page", 0);
	КонецЕсли;
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers/search";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных абонента в сервисе 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = "ПолученияДанныхАбонентовВСервисНастроек";
	ПараметрыКоманды.ФорматОтвета        = ФорматыОтветаСервиса().JSON;
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыПолученияДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(НаборОтборовПоКонтрагентам, Отказ)
	
	ОписаниеДанных = Новый Массив;
	Для Каждого НаборОтборовПоКонтрагенту Из НаборОтборовПоКонтрагентам Цикл
		ТекущийИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НаборОтборовПоКонтрагенту, "ИНН", "");
		ТекущийИдентификаторОператораЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НаборОтборовПоКонтрагенту, "ИдентификаторОператораЭДО", "");
		Если ПустаяСтрока(ТекущийИНН)
			И ПустаяСтрока(ТекущийИдентификаторОператораЭДО) Тогда
			
			Продолжить;
		Иначе
			ОписаниеСтрокиДанных = Новый Структура;
			Если Не ПустаяСтрока(ТекущийИНН) Тогда
				ОписаниеСтрокиДанных.Вставить("inn", ТекущийИНН);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекущийИдентификаторОператораЭДО) Тогда
				ОписаниеСтрокиДанных.Вставить("operatorId", ТекущийИдентификаторОператораЭДО);
			КонецЕсли;
			ОписаниеДанных.Добавить(ОписаниеСтрокиДанных);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ОбъектЗаписьJSON, ОписаниеДанных);
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес = "api/edo-settings/special-exchange-setting-clients/check-status";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение данных абонента с принудительной отправкой приглашения'");
	ПараметрыКоманды.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = "ПолучениеДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг";
	ПараметрыКоманды.ФорматОтвета        = ФорматыОтветаСервиса().JSON;
	ПараметрыКоманды.Данные = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения Форматов ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура:
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	ДанныеАутентификации = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		ДанныеАутентификации.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		ДанныеАутентификации.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		ДанныеАутентификации.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", ДанныеАутентификации);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-formats/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о форматах ЭДО из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД";
	ПараметрыКоманды.ФорматОтвета        = ФорматыОтветаСервиса().JSON;
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения связи типов и форматов ЭД
//
// Параметры:
//  ПараметрыЗапроса - Структура:
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияСвязиТиповИФорматовЭДО(ПараметрыЗапроса)
	
	СтруктураJSON      = Новый Структура;
	ДанныеАутентификации = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
	
		ДанныеАутентификации.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		ДанныеАутентификации.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		ДанныеАутентификации.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;	
	
	СтруктураJSON.Вставить("authenticationInfo", ДанныеАутентификации);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-type-formats/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о связи типов и форматов ЭД из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = "СвязьТиповИФорматовЭД";
	ПараметрыКоманды.ФорматОтвета        = ФорматыОтветаСервиса().JSON;
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения видов ЭД
//
// Параметры:
//  ПараметрыЗапроса - Структура:
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияВидовЭДСервиса(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	ДанныеАутентификации = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		ДанныеАутентификации.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		ДанныеАутентификации.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		ДанныеАутентификации.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", ДанныеАутентификации);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-types/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных видов ЭД из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = "КаталогВидовЭД";
	ПараметрыКоманды.ФорматОтвета        = ФорматыОтветаСервиса().JSON;
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Описание параметров отправки данных в сервис 1С:Сервис настроек.
//
Функция НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН"                            , "");
	Результат.Вставить("КПП"                            , "");
	Результат.Вставить("ИдентификаторЭДО"               , "");
	Результат.Вставить("НазначениеУчетнойЗаписи"        , "");
	Результат.Вставить("Версия            "             , "");
	Результат.Вставить("ПодробноеОписаниеУчетнойЗаписи" , "");
	Результат.Вставить("СертификатыАбонента"            , Новый Массив);
	Результат.Вставить("ВариантыЗаполненияФорматов"           , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Получение параметров для отправки данные в сервис 1С:Сервис настроек
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ПараметрыЗапроса, Отказ,
	КонтекстДиагностики = Неопределено)
	
	СтруктураJSON      = Новый Структура;
	ДанныеАутентификации = Новый Структура;
	ОписаниеИдентификатора     = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	
	// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
	Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена,
		Ложь, Ложь, ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАутентификации.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", ДанныеАутентификации);
	
	Идентификатор = ПараметрыЗапроса.ИдентификаторЭДО;
	
	ОписаниеИдентификатора.Вставить("inn"                     , ПараметрыЗапроса.ИНН);
	ОписаниеИдентификатора.Вставить("kpp"                     , ПараметрыЗапроса.КПП);
	ОписаниеИдентификатора.Вставить("id"                      , Идентификатор);
	ОписаниеИдентификатора.Вставить("name"                    , ПараметрыЗапроса.НазначениеУчетнойЗаписи);
	ОписаниеИдентификатора.Вставить("description"             , ПараметрыЗапроса.ПодробноеОписаниеУчетнойЗаписи);
	ОписаниеИдентификатора.Вставить("configurationName"       , Метаданные.Имя);
	ОписаниеИдентификатора.Вставить("programVersionName"      , ПараметрыЗапроса.Версия);
	ОписаниеИдентификатора.Вставить("certificates"            , ПараметрыЗапроса.СертификатыАбонента);
	ОписаниеИдентификатора.Вставить("documentTypes"           , ПараметрыЗапроса.ВариантыЗаполненияФорматов);
	
	СтруктураJSON.Вставить("identifierInfo", ОписаниеИдентификатора);
	
	ТекстJSON = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураJSON);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Если ЗначениеЗаполнено(Тикет) Тогда
		ПараметрыКоманды.Заголовки.Вставить("ticket", Тикет);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Общие параметры вызова команд сервиса.
//
Функция НовоеОписаниеПараметровКомандыСервиса()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование",                  "");                // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес",                         "");                // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод",                         "");                // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут",                       30);                // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные",                        Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("СпособОбмена",                  Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("НастройкиСервисаЭДО",           Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация",                Неопределено);      // Требуется аутентификация.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", Неопределено);      // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат",                     Неопределено);      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка",                     Неопределено);      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("Заголовки",                     Новый Соответствие);// Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры",       Неопределено);      // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",                        Новый Соответствие);// Соответствие ошибок, например: (404, "Не найдено"). ОбработкаРезультата
	ПараметрыКоманды.Вставить("РазрешенныеСостояния",          Новый Массив);      // Массив кодов состояний, считающихся успешными
	ПараметрыКоманды.Вставить("ОбработкаРезультата",           Неопределено);      // Идентификатор алгоритма обработки ответа от сервиса.
	ПараметрыКоманды.Вставить("ФорматОтвета",           	   "");                // Идентификатор формата ответа сервиса. 
	ПараметрыКоманды.Вставить("Страница",                      0 );                // Номер получаемой страницы
	ПараметрыКоманды.Вставить("ПолучитьВсеСтраницы",           Ложь );             // Перебрать и получить все страницы
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Выполняет команду сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды
//   Отказ - Булево - признак ошибки выполнения
//   КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//   Строка, Массив, Структура - возвращаемые данные сервиса.
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики)
	
	// Определяем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
	КонтекстДиагностикиСлужебный = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка данных.
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	ДвоичныеДанныеТела = Запрос.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанныеТела = Неопределено Тогда
		Таймаут = 10;
	Иначе 
		Таймаут = ИнтернетСоединениеБЭД.ТаймаутПоРазмеруФайла(ДвоичныеДанныеТела.Размер());
	КонецЕсли;
	
	// Получение соединения для способа обмена
	ОписаниеСоединения = СоединениеССервисом(Таймаут);
	
	// Выполнение запроса HTTP к сервису.
	ВидОперации = НСтр("ru = 'Выполнение запроса к сервису настроек обмена электронными документами'");
	РезультатВызова = 
		ИнтернетСоединениеБЭД.ВызватьHTTPМетод(
			ОписаниеСоединения, Запрос, ПараметрыКоманды.Метод, ВидОперации, КонтекстДиагностикиСлужебный);
	
	Если Не РезультатВызова.Успех Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = 
		ОбработатьРезультатОтветаСервиса(ПараметрыКоманды, РезультатВызова.Ответ, Отказ, КонтекстДиагностикиСлужебный);
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды.
//  Ответ			 - HTTPОтвет - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Неопределено   - при неудачном выполнении команды (для команд с обработкой результата).
//  ДвоичныеДанные - при успешном выполнении команды (для команд с обработкой результата без указанного формата ответа).
//  ЧтениеJSON     - при успешном выполнении команды (для команд с обработкой результата и форматом ответа "JSON")
//
Функция ОбработатьРезультатОтветаСервиса(Знач ПараметрыКоманды, Ответ, Отказ, КонтекстДиагностики)
	
	ТелоОтвета = "";
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = Ответ.КодСостояния;
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		ПараметрыКоманды.Ошибки.Вставить(КодСостояния, СтрШаблон(НСтр("ru = 'Внутренняя ошибка сервиса: %1'"), ТелоОтвета));
	КонецЕсли;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		
		ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
		
		Если ТекстОшибки <> Ложь Тогда
			ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				Попытка
					СтруктураОтвета = ОбщегоНазначенияБЭД.JSONЗначение(ТелоОтвета);
					Если СтруктураОтвета.Свойство("type") И ВРег(СтруктураОтвета.type) = "USER_DOESNT_OWN_EDO_ID_EXCEPTION" Тогда
						ВидОшибки = ВидОшибкиНетПравНаИзменениеИнформацииПоУчетнойЗаписи();
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Преобразование ошибки сервиса в структуру'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'Не удалось преобразовать ошибку сервиса:'") + ТелоОтвета);
				КонецПопытки;
			КонецЕсли;
			
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ПараметрыКоманды.Наименование,
				ВидОшибки, ТекстОшибки, ТекстОшибки);
					
			// Временно скрываем ошибку "НетПравНаИзменениеИнформацииПоУчетнойЗаписи".
			Если ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(Ошибка,
				ВидОшибкиНетПравНаИзменениеИнформацииПоУчетнойЗаписи()) Тогда
				ЭлектронноеВзаимодействие.ОбработатьОшибку(ПараметрыКоманды.Наименование, ТекстОшибки);
			Иначе 
				ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			КонецЕсли;
		КонецЕсли;
	
		Отказ = Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
			Если ПараметрыКоманды.ФорматОтвета = ФорматыОтветаСервиса().JSON Тогда
				Результат = ОбъектИзJSON(ПараметрыКоманды, Ответ.ПолучитьТелоКакДвоичныеДанные(), Отказ, КонтекстДиагностики);
			
				Если Отказ Тогда
					Результат = Неопределено;
				КонецЕсли;
			Иначе
				Результат = Ответ.ПолучитьТелоКакДвоичныеДанные();
			КонецЕсли;
			
		Иначе
			
			Если Не КодСостояния = 200 И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда 
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Обработка данных ответа сервиса после анализа кода возврата.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды.
//  Ответ			 - HTTPОтвет - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьДанныеОтветаСервиса(Знач ПараметрыКоманды, ДанныеСервиса, Отказ, КонтекстДиагностики)
	
	// Определяем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
	КонтекстДиагностикиСлужебный = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
		Если ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД" Тогда
			
			Результат = ОбработкаРезультатаКаталогФорматовЭД(ДанныеСервиса, Отказ, КонтекстДиагностикиСлужебный);
			
		ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "КаталогВидовЭД" Тогда
			
			Результат = ОбработкаРезультатаКаталогВидовЭД(ДанныеСервиса, Отказ);
			
		ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "СвязьТиповИФорматовЭД" Тогда
			
			Результат = ОбработкаРезультатаСвязьТиповИФорматовЭД(ДанныеСервиса, Отказ, КонтекстДиагностикиСлужебный);
			
		ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "ПолученияДанныхАбонентовВСервисНастроек" Тогда
			
			Результат = ОбработкаРезультатаПолученияДанныхАбонентов(ДанныеСервиса, Отказ);
			
		ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "ПолучениеДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг" Тогда
			
			Результат = ОбработкаРезультатаПолученияДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(ДанныеСервиса, Отказ);	
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ФорматыОтветаСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("JSON", "JSON");
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектИзJSON(ПараметрыКоманды, Знач ДвоичныеДанные, Отказ, КонтекстДиагностики = Неопределено,
	ПрочитатьВСоответствие = Ложь)
	
	Попытка
		ПолученныеДанные = ОбщегоНазначенияБЭД.JSONЗначение(ДвоичныеДанные, ПрочитатьВСоответствие);
	Исключение
		
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
		Если ПараметрыКоманды = Неопределено Тогда
			НаименованиеКоманды = НСтр("ru = 'Чтение данных сервиса настроек'") ;
		Иначе
			НаименованиеКоманды = ПараметрыКоманды.Наименование;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НаименованиеКоманды,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецПопытки;
	
	Возврат ПолученныеДанные;
КонецФункции

Функция ОбработкаРезультатаПолученияДанныхАбонентов(Знач ПолученныеДанные, Отказ)
	
	Таблица = НоваяТаблицаАбонентов();
	
	ТаблицаОператоровЭДО = Неопределено;
	
	Для Каждого Абонент Из ПолученныеДанные.identifierInfos Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИдентификаторЭДО         = Абонент.id;
		НоваяСтрока.ИНН                      = Абонент.inn;
		НоваяСтрока.КПП                      = Абонент.kpp;
		НоваяСтрока.КраткоеОписание          = Абонент.name;
		НоваяСтрока.ПодробноеОписание        = Абонент.description;
		
		Если ЗначениеЗаполнено(Абонент.certificateExpireDate) Тогда
			НоваяСтрока.СрокДействияСертификатов = ПрочитатьДатуJSON(Абонент.certificateExpireDate, ФорматДатыJSON.ISO);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Абонент.lastActivityDate) Тогда
			НоваяСтрока.ДатаПоследнейАктивности  = ПрочитатьДатуJSON(Абонент.lastActivityDate, ФорматДатыJSON.ISO);
		КонецЕсли;
		
		НоваяСтрока.ПоддерживаемыеФорматыЭД  = Абонент.documentTypes;
		НоваяСтрока.ЭтоПользователь1С        = Абонент.isUser1c;
		НоваяСтрока.ОператорЭДО              = НайтиОператораЭДОПоИдентификатору(Абонент.id, ТаблицаОператоровЭДО);

		Если Абонент.Свойство("provider") Тогда
			НоваяСтрока.СпособОбменаЭД = СпособОбменаПоИдентификаторуСервиса(Абонент.provider);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ОбработкаРезультатаПолученияДанныхОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(Знач ПолученныеДанные, Отказ)
	
	Результат = ТаблицаОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг();
	
	Для Каждого СтрокаДанных Из ПолученныеДанные Цикл
		ИскомаяСтрока = Результат.Найти(СтрокаДанных.inn, "ИНН");
		Если ИскомаяСтрока = Неопределено Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДанных, "inn", "");
			НоваяСтрока.ИдентификаторОператораЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДанных, "operatorId", "");
			НоваяСтрока.ТребуетсяЗаявкаНаРоуминг = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДанных, "status", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные о связи форматов и видов электронных документов.
// 
// Параметры:
// 	ПолученныеДанные - Структура - данные из сервиса
// 	Отказ - Булево
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Неопределено, Структура - Неопределено, если связь видов и форматов получить не удалось, иначе структура:
// * ДатаПоследнегоИзменения - Дата
// * РазмерСтраницы - Число
// * СвязьВидовИФорматовЭД - ТаблицаЗначений:
//    ** ВидЭлектронногоДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** ФорматЭлектронногоДокумента - Строка
//    ** Приоритет - Число
Функция ОбработкаРезультатаСвязьТиповИФорматовЭД(Знач ПолученныеДанные, Отказ = Ложь, КонтекстДиагностики = Неопределено) Экспорт
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные = ОбъектИзJSON(Неопределено, ПолученныеДанные, Отказ, КонтекстДиагностики);
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	СоответствиеВидовЭД = ОбработкаРезультатаКаталогВидовЭД(ПолученныеДанные.documentTypes, Отказ);
	
	Если Не ЗначениеЗаполнено(СоответствиеВидовЭД) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЭлектронногоДокумента"    , Типы().ВидЭД);
	Таблица.Колонки.Добавить("ФорматЭлектронногоДокумента" , Типы().Строка);
	Таблица.Колонки.Добавить("Приоритет"                   , Типы().Число);
	
	Для Каждого documentTypeFormats Из ПолученныеДанные.documentTypeFormats Цикл
		
		ВидЭД = СоответствиеВидовЭД.Получить(documentTypeFormats.typeUeid);
		
		Если Не ЗначениеЗаполнено(ВидЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ВидЭлектронногоДокумента    = ВидЭД;
		НоваяСтрока.ФорматЭлектронногоДокумента = documentTypeFormats.formatUeid;
		НоваяСтрока.Приоритет                   = documentTypeFormats.rank;
		
	КонецЦикла;
	
	ДатаПоследнегоИзменения = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);

	Результат = Новый Структура;
	Результат.Вставить("ДатаПоследнегоИзменения", ДатаПоследнегоИзменения);
	Результат.Вставить("РазмерСтраницы", ПолученныеДанные.pageSize);
	Результат.Вставить("СвязьВидовИФорматовЭД", Таблица);
	Результат.Вставить("РазмерПолученныхДанных", ПолученныеДанные.documentTypeFormats.Количество());
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные о форматах электронных документов.
// 
// Параметры:
// 	ПолученныеДанные - Структура - данные из сервиса
// 	Отказ - Булево
// Возвращаемое значение:
// 	Структура:
// * ДатаПоследнегоИзменения - Дата
// * РазмерСтраницы - Число
// * ФорматыЭлектронныхДокументов - ТаблицаЗначений:
//    ** Формат - Строка
//    ** ИдентификаторСервиса - Строка
//    ** Представление - Строка
//    ** ДатаНачалаДействия - Дата
//    ** ДатаОкончанияДействия - Дата
//    ** Регламентированный - Булево
//    ** ЭтоУПД - Булево
//    ** ПространстваИмен - Строка
//    ** ПриказОВведенииФормата - Строка
//    ** СсылкаНаПриказОВведенииФормата - Строка
//    ** ТекстПредупрежденияДляВходящегоДокумента - Строка
//    ** ПараметрыПредупрежденияДляВходящегоДокумента - Строка
//    ** УсловиеВыводаПредупреждения - Строка
Функция ОбработкаРезультатаКаталогФорматовЭД(Знач ПолученныеДанные, Отказ = Ложь, КонтекстДиагностики = Неопределено) Экспорт
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные = ОбъектИзJSON(Неопределено, ПолученныеДанные, Отказ, КонтекстДиагностики);
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Формат"                , Типы().Строка);
	Таблица.Колонки.Добавить("ИдентификаторСервиса"  , Типы().Строка);
	Таблица.Колонки.Добавить("Представление"         , Типы().Строка);
	Таблица.Колонки.Добавить("ДатаНачалаДействия"    , Типы().Дата);
	Таблица.Колонки.Добавить("ДатаОкончанияДействия" , Типы().Дата);
	Таблица.Колонки.Добавить("Регламентированный"    , Типы().Булево);
	Таблица.Колонки.Добавить("ЭтоУПД"                , Типы().Булево);
	Таблица.Колонки.Добавить("ПространстваИмен"      , Типы().Строка);
	Таблица.Колонки.Добавить("ПриказОВведенииФормата", Типы().Строка);
	
	Таблица.Колонки.Добавить("СсылкаНаПриказОВведенииФормата",               Типы().Строка);
	Таблица.Колонки.Добавить("ТекстПредупрежденияДляВходящегоДокумента",     Типы().Строка);
	Таблица.Колонки.Добавить("ПараметрыПредупрежденияДляВходящегоДокумента", Типы().Строка);
	Таблица.Колонки.Добавить("УсловиеВыводаПредупреждения",                  Типы().Строка);
	
	Для Каждого СведенияОФормате Из ПолученныеДанные.documentFormats Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Формат                = СведенияОФормате.nick;
		НоваяСтрока.Представление         = СведенияОФормате.name;
		НоваяСтрока.ИдентификаторСервиса  = СведенияОФормате.ueid;
		НоваяСтрока.Регламентированный    = СведенияОФормате.isRegulated;
		НоваяСтрока.ЭтоУПД                = СведенияОФормате.isUpd;
		НоваяСтрока.ПространстваИмен      = СведенияОФормате.namespace;
		НоваяСтрока.ДатаНачалаДействия    = ДатаИзJsonСПроверкой(СведенияОФормате.startDate , ФорматДатыJSON.ISO);
		НоваяСтрока.ДатаОкончанияДействия = ДатаИзJsonСПроверкой(СведенияОФормате.expireDate, ФорматДатыJSON.ISO);
		
		НоваяСтрока.СсылкаНаПриказОВведенииФормата               = СведенияОФормате.descriptionLink;
		НоваяСтрока.ТекстПредупрежденияДляВходящегоДокумента     = СведенияОФормате.errorText;
		НоваяСтрока.ПараметрыПредупрежденияДляВходящегоДокумента = СведенияОФормате.errorParameter;
		НоваяСтрока.УсловиеВыводаПредупреждения                  = ?(ЗначениеЗаполнено(НоваяСтрока.ТекстПредупрежденияДляВходящегоДокумента), "ДатаФормированияЭлектронногоДокумента", "");
	КонецЦикла;
	
	ДатаПоследнегоИзменения = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, ФорматыЭлектронныхДокументов",
		ДатаПоследнегоИзменения, ПолученныеДанные.pageSize, Таблица);
	
КонецФункции

Функция ОбработкаРезультатаКаталогВидовЭД(Знач ПолученныеДанные, Отказ)
	
	Данные = Новый Соответствие;
	
	Для Каждого documentType Из ПолученныеДанные Цикл
		
		ТипДокумента = ТипДокументаПоЗначениюСервиса(documentType.type);
		ВидДокумента = Неопределено;
		Если ТипДокумента <> Неопределено Тогда
			ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента);
		КонецЕсли;
	
		Данные.Вставить(documentType.ueid, ВидДокумента);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция СпособОбменаПоИдентификаторуСервиса(Знач ИдентификаторСервиса)
	
	Если ЭтоИдентификаторСервиса1СЭДО(ИдентификаторСервиса) Тогда
		
		Возврат Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		
	ИначеЕсли ЭтоИдентификаторСервисаТакском(ИдентификаторСервиса) Тогда
		
		Возврат Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		
	КонецЕсли;
	
	Возврат Перечисления.СпособыОбменаЭД.ПустаяСсылка();
	
КонецФункции

Функция ЭтоИдентификаторСервиса1СЭДО(Знач Идентификатор)
	
	Возврат (ВРег(Идентификатор) = ВРег("HUB"));
	
КонецФункции

Функция ЭтоИдентификаторСервисаТакском(Знач Идентификатор)
	
	Возврат (ВРег(Идентификатор) = ВРег("TAXCOM"));
	
КонецФункции

// Возвращает данные операторов электронного документооборота.
// 
// Параметры:
// 	ПолученныеДанные - Структура
// 	                 - ДвоичныеДанные
// Возвращаемое значение:
// 	Структура:
// * ДатаПоследнегоИзменения - Дата
// * ТаблицаОператоров - ТаблицаЗначений:
//    ** ИдентификаторОператора - Строка
//    ** Представление - Строка
//    ** СсылкаНаСтраницуТехническойПоддержки - Строка
//    ** ИНН - Строка
//    ** КПП - Строка
//    ** ОГРН - Строка
//    ** ОтпечатокСертификата - Строка
//    ** СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
//    ** ОтправлятьДополнительныеСведения - Булево
//    ** ДоступноПодключениеЧерез1С - Булево
//    ** ЕстьШаблонСоглашенияНаРоуминг - Булево
//    ** РасширениеФайлаСоглашенияНаРоуминг - Строка
//    ** СрокДействияСоглашенияНаРоуминг - Число
Функция ОбработкаРезультатаКаталогОператоров(ПолученныеДанные, КонтекстДиагностики = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные = ОбъектИзJSON(Неопределено, ПолученныеДанные, Отказ, КонтекстДиагностики);
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Таблица = РегистрыСведений.ОператорыЭДО.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ЗначенияСпособовОбмена = Метаданные.Перечисления.СпособыОбменаЭД.ЗначенияПеречисления;
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.operators Цикл
		
		Если ЗначенияСпособовОбмена.Найти(ОператорЭДО.ExchangeMethod) = Неопределено Тогда
			СпособыОбменаЭД = Перечисления.СпособыОбменаЭД.ПустаяСсылка();
		Иначе
			СпособыОбменаЭД = Перечисления.СпособыОбменаЭД[ОператорЭДО.ExchangeMethod];
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СсылкаНаСтраницуТехническойПоддержки = ОператорЭДО.additionalInfoUrl;
		НоваяСтрока.ИдентификаторОператора               = ОператорЭДО.id;
		НоваяСтрока.Представление                        = ОператорЭДО.name;
		НоваяСтрока.ИНН                                  = ОператорЭДО.inn;
		НоваяСтрока.КПП                                  = ОператорЭДО.kpp;
		НоваяСтрока.ОГРН                                 = ОператорЭДО.ogrn;
		НоваяСтрока.ОтпечатокСертификата                 = ОператорЭДО.certificateImprint;
		НоваяСтрока.СпособОбменаЭД                       = СпособыОбменаЭД;
		НоваяСтрока.ОтправлятьДополнительныеСведения     = ОператорЭДО.isSendAdditionalData;
		НоваяСтрока.ДоступноПодключениеЧерез1С           = ОператорЭДО.isConnectionAvailable;
		НоваяСтрока.ЕстьШаблонСоглашенияНаРоуминг        = ОператорЭДО.isLetterTemplateAvailable;
		НоваяСтрока.ДоступноПодключениеБезОГРН           = ОператорЭДО.isConnectionWithoutOGRNAvailable;
		НоваяСтрока.РасширениеФайлаСоглашенияНаРоуминг   = ОператорЭДО.operatorChoiceLetterExtensionSupport;
		НоваяСтрока.СрокДействияСоглашенияНаРоуминг      = ОператорЭДО.operatorChoiceLetterValidityPeriod;
		НоваяСтрока.ОднородныйОтветНаВсеДокументыПакета  = ОператорЭДО.SimilarAnswerForParcelsNeed;
		
	КонецЦикла;
	
	ДатаПоследнегоИзменения = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	
	Ответ = Новый Структура("ДатаПоследнегоИзменения, ТаблицаОператоров");
	Ответ.ДатаПоследнегоИзменения = ДатаПоследнегоИзменения;
	Ответ.ТаблицаОператоров       = Таблица;
	
	Возврат Ответ;
	
КонецФункции

Функция ОбработкаРезультатаСовместимостьОператоров(ПолученныеДанные, КонтекстДиагностики = Неопределено) Экспорт
	
	Отказ = Ложь;
	Если ТипЗнч(ПолученныеДанные) = Тип("ДвоичныеДанные") Тогда
		ПолученныеДанные = ОбъектИзJSON(Неопределено, ПолученныеДанные, Отказ, КонтекстДиагностики);
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Таблица = РегистрыСведений.СовместимостьОператоровЭДО.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ЗначенияВариантовПотребности = Новый Соответствие;
	ЗначенияВариантовПотребности.Вставить("need", Перечисления.ВариантыПотребностиСоглашенияНаРоуминг.Обязательно);
	ЗначенияВариантовПотребности.Вставить("notNeed", Перечисления.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется);
	ЗначенияВариантовПотребности.Вставить("optional", Перечисления.ВариантыПотребностиСоглашенияНаРоуминг.НеОбязательно);
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.servicesCompatibilities Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Оператор1 = ОператорЭДО.operatorId1;
		НоваяСтрока.Оператор2 = ОператорЭДО.operatorId2;
		НоваяСтрока.СвязьДоступна = ОператорЭДО.isAutomaticConnection;
		НоваяСтрока.ПотребностьСоглашения = ЗначенияВариантовПотребности[ОператорЭДО.operatorChoiceLetterNeed];
		НоваяСтрока.РекомендацияПоНастройке = ОператорЭДО.textRecommendation;
		НоваяСтрока.ДоступныШироковещательныеПриглашения = ОператорЭДО.broadcastInvitesSupport;
		НоваяСтрока.ТребуетсяСоглашениеПриПервомПодключении = ОператорЭДО.operatorChoiceLetterNeedForFirstConnection;
		
	КонецЦикла;
	
	ДатаПоследнегоИзменения = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, ТаблицаСовместимостиОператоровЭДО",
		ДатаПоследнегоИзменения, Таблица);
	
КонецФункции

Процедура ЗаписатьВРегистрИзменениеДанныхСервиса(РегистрСведенийМенеджер, ТаблицаДанныхСервиса)
	
	ТаблицаДанных = ТаблицаДанныхСервиса.Скопировать();
	
	КолонкиГруппировок = Новый Массив;
	Для Каждого Колонка Из ТаблицаДанныхСервиса.Колонки Цикл
		КолонкиГруппировок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("КоличествоСтрок",  Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ЭтоДанныеСервиса", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.ЗаполнитьЗначения(1, "КоличествоСтрок, ЭтоДанныеСервиса");
	
	Выборка = РегистрСведенийМенеджер.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КоличествоСтрок = 1;
	КонецЦикла;
	
	КоличествоДоСвертки = ТаблицаДанных.Количество();
	ТаблицаДанных.Свернуть(СтрСоединить(КолонкиГруппировок, ","), "КоличествоСтрок, ЭтоДанныеСервиса");
	
	Если КоличествоДоСвертки = ТаблицаДанных.Количество() Тогда
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТаблицаДанныхСервиса);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	МассивИзмерений = Новый Массив;
	МетаданныеИзмерений = РегистрСведенийМенеджер.ПустойКлюч().Метаданные().Измерения;
	Для Каждого МетаданныеИзмерения Из МетаданныеИзмерений Цикл
		МассивИзмерений.Добавить(МетаданныеИзмерения.Имя);
	КонецЦикла;
	
	Отбор = Новый Структура("КоличествоСтрок, ЭтоДанныеСервиса", 1, 1);
	Для Каждого СтрокаТаблицы Из ТаблицаДанных.НайтиСтроки(Отбор) Цикл
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		Для Каждого Измерение Из МассивИзмерений Цикл
			НаборЗаписей.Отбор[Измерение].Установить(СтрокаТаблицы[Измерение]);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ТаблицаДанных.Свернуть(СтрСоединить(МассивИзмерений, ","), "ЭтоДанныеСервиса");
	Отбор = Новый Структура("ЭтоДанныеСервиса", 0);
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		Для Каждого Измерение Из МассивИзмерений Цикл
			НаборЗаписей.Отбор[Измерение].Установить(СтрокаТаблицы[Измерение]);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Получение и обновление данных видов ЭДО 
//
// Параметры:
//  КонтекстДиагностики	- см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Неопределено
//  см. ВыполнитьКомандуСервиса
//
Функция ВидыЭДИзСервисаНастроек(КонтекстДиагностики)
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	ПараметрыЗапроса = Новый Структура;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ВидыЭД = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		// Передаем пустой контекст диагностики для фиксирования ошибок только в журнале регистрации
		Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(
			ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь, ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		ПараметрыКоманды = ПараметрыПолученияВидовЭДСервиса(ПараметрыЗапроса);
		ПорцияВидовЭД    = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, КонтекстДиагностики);
		
		Если Отказ Тогда
			Возврат Неопределено;
		Иначе
			Если ВидыЭД = Неопределено Тогда
				ВидыЭД = ПорцияВидовЭД;
			Иначе
				Для Каждого documentType Из ПорцияВидовЭД.documentTypes Цикл
					ВидыЭД.documentTypes.Добавить(documentType);				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		РазмерСтраницы     = ПорцияВидовЭД.pageSize;
		КоличествоПолучено = ПорцияВидовЭД.documentTypes.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Возврат ВидыЭД;
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Булево - ОписаниеТипов
//   * Число - ОписаниеТипов
//   * Дата - ОписаниеТипов
//   * Строка - ОписаниеТипов
//   * Структура - ОписаниеТипов
//   * Массив - - ОписаниеТипов
//   * Таблица - ОписаниеТипов
//   * СпособыОбменаЭД - - ОписаниеТипов
//   * ВидЭД - ОписаниеТипов
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Булево"         , Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число"          , Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата"           , Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка"         , Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура"      , Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив"         , Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица"        , Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Вставить("СпособыОбменаЭД", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	Результат.Вставить("ВидЭД"          , Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу абонентов.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИдентификаторЭДО - Строка
// * ИНН - Строка
// * КПП - Строка
// * КраткоеОписание - Строка
// * ПодробноеОписание - Строка
// * СрокДействияСертификатов - Дата
// * ДатаПоследнейАктивности - Дата
// * ОператорЭДО - Строка
// * ПоддерживаемыеФорматыЭД - Массив из Строка
// * ЭтоПользователь1С - Булево
Функция НоваяТаблицаАбонентов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторЭДО"         , Типы().Строка);
	Таблица.Колонки.Добавить("ИНН"                      , Типы().Строка);
	Таблица.Колонки.Добавить("КПП"                      , Типы().Строка);
	Таблица.Колонки.Добавить("КраткоеОписание"          , Типы().Строка);
	Таблица.Колонки.Добавить("ПодробноеОписание"        , Типы().Строка);
	Таблица.Колонки.Добавить("СрокДействияСертификатов" , Типы().Дата);
	Таблица.Колонки.Добавить("ДатаПоследнейАктивности"  , Типы().Дата);
	Таблица.Колонки.Добавить("ОператорЭДО"              , Типы().Строка);
	Таблица.Колонки.Добавить("ПоддерживаемыеФорматыЭД"  , Типы().Массив);
	Таблица.Колонки.Добавить("ЭтоПользователь1С"        , Типы().Булево);
	Таблица.Колонки.Добавить("СпособОбменаЭД"           , Типы().СпособыОбменаЭД);
	
	Возврат Таблица;
	
КонецФункции

// Получение объекта соединение.
//
// Параметры:
//  Таймаут - Число - таймаут для инициализации соединения.
//
// Возвращаемое значение:
//  см. ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения
//
Функция СоединениеССервисом(Таймаут = 30)
	
	Возврат СервисНастроекЭДОПовтИсп.СоединениеССервисом(Таймаут);
	
КонецФункции

// Преобразует дату из тестового формата json с проверкой на отсутствие даты.
//
// Параметры:
//  Строка          - Строка         - Строка Json
//  ФорматДаты  - ФорматДатыJson - Формат даты в строке JSON
//
// Возвращаемое значение:
//   Дата   - прочитанная Дата
//
Функция ДатаИзJsonСПроверкой(Строка, ФорматДаты)
	
	Результат = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Результат = ПрочитатьДатуJSON(Строка , ФорматДаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вид ошибки, описывающий ситуацию, когда идентификатор учетной записи привязан к логину интернет-поддержки,
// отличному от текущего.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиНетПравНаИзменениеИнформацииПоУчетнойЗаписи()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НетПравНаИзменениеИнформацииПоУчетнойЗаписи";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Нет прав на изменение информации по учетной записи'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Идентификатор ЭДО привязан к логину интернет-поддержки, отличному от текущего'");
	ОписаниеРешения = НСтр("ru = 'Способ устранения описан <a href = ""http://1c-edo.ru/handbook/24/4358/"">здесь</a>'");
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.Статус = ОбработкаНеисправностейБЭДКлиентСервер.СтатусыОшибок().Обычная;
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти