
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаДоверенности

// Формирует пустую структуру данных проверки полномочий.
// 
// Возвращаемое значение:
//  Структура:
// * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ХешПодписи - Строка
// * РезультатПроверки - см. НовыйРезультатПроверки
// * РучнаяПроверка - Булево
// * ИмяПроверки - Строка
// * НомерРодительскойДоверенности - Строка
// 
Функция НовыеДанныеПроверкиПолномочий() Экспорт
	
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки.Вставить("ПодписанныйОбъект",
		ПредопределенноеЗначение("Справочник.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка"));
	ДанныеПроверки.Вставить("ХешПодписи", "");
	ДанныеПроверки.Вставить("РезультатПроверки", НовыйРезультатПроверки());
	ДанныеПроверки.Вставить("РучнаяПроверка", Ложь);
	ДанныеПроверки.Вставить("ИмяПроверки", "");
	ДанныеПроверки.Вставить("НомерРодительскойДоверенности", "");
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Возвращает новый результат проверки.
// 
// Возвращаемое значение:
//  Структура - Новый результат проверки:
// * Выполнено - Булево
// * ДатаПроверки - Дата
// * Успех - Булево
// * Ошибка - Строка
// * НомерДоверенности - Строка
// * РучнаяПроверка - Булево
Функция НовыйРезультатПроверки() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("ДатаПроверки", '00010101');
	РезультатПроверки.Вставить("Успех", Ложь);
	РезультатПроверки.Вставить("Ошибка", "");
	РезультатПроверки.Вставить("НомерДоверенности", "");
	РезультатПроверки.Вставить("РучнаяПроверка", Ложь);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Инициализирует структуру для проверки МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДоверенности - ДвоичныеДанные
// * ДанныеПодписи - ДвоичныеДанные
//
Функция НовыеДанныеДляПроверкиМЧД() Экспорт
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("ДанныеДоверенности", Неопределено);
	ДанныеДляПроверки.Вставить("ДанныеПодписи", Неопределено);
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

#КонецОбласти

Функция ЗаголовокБудетОтозвана() Экспорт
	Возврат НСтр("ru = 'Будет отозвана'");
КонецФункции

// Возвращает структуру способов отражения в учете ЭД Машиночитаемая доверенность
// 
// Возвращаемое значение:
//  Структура:
//  * МашиночитаемыеДоверенностиКонтрагентов - Строка
//  * МашиночитаемыеДоверенностиОрганизаций - Строка
Функция СпособыОтраженияВУчете() Экспорт
	
	Способы = Новый Структура;
	Способы.Вставить("МашиночитаемыеДоверенностиКонтрагентов", НСтр("ru = 'Машиночитаемая доверенность контрагента'"));
	Способы.Вставить("МашиночитаемыеДоверенностиОрганизаций", НСтр("ru = 'Машиночитаемая доверенность организации'"));
	Возврат Способы;
	
КонецФункции

// Коллекция видов документов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение- где:
//   * Ключ - Строка - код вида документа, 
//   * Значение - Строка - наименование вида документа.
//
Функция ВидыДокументовФизическихЛиц() Экспорт
	
	ВидыДокументов = Новый Соответствие();
	
	ВидыДокументов.Вставить("07", НСтр("ru = 'Военный билет'"));
	ВидыДокументов.Вставить("10", НСтр("ru = 'Паспорт иностранного гражданина'"));
	ВидыДокументов.Вставить("11", НСтр("ru = 'Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу'"));
	ВидыДокументов.Вставить("12", НСтр("ru = 'Вид на жительство в Российской Федерации'"));
	ВидыДокументов.Вставить("13", НСтр("ru = 'Удостоверение беженца'"));
	ВидыДокументов.Вставить("15", НСтр("ru = 'Разрешение на временное проживание в Российской Федерации'"));
	ВидыДокументов.Вставить("19", НСтр("ru = 'Свидетельство о предоставлении временного убежища на территории Российской Федерации'"));
	ВидыДокументов.Вставить("21", НСтр("ru = 'Паспорт гражданина Российской Федерации'"));
	ВидыДокументов.Вставить("24", НСтр("ru = 'Удостоверение личности военнослужащего Российской Федерации'"));
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает СтатусВРеестреФНС МЧД, полученной из реестра
//
// Параметры:
//  СтатусДоверенности - Строка - "CREATED" - дата начала действия не наступила, "ACTIVE" - действует,
//                                "EXPIRED" - истекла, "REVOKED/DECLINED" - отменена (отозвана), "" - не запрашивался
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//
Функция СтатусВРеестреФНС(СтатусДоверенности) Экспорт
	Если СтатусДоверенности = "ACTIVE" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано");
	ИначеЕсли СтатусДоверенности = "CREATED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила");
	ИначеЕсли СтатусДоверенности = "EXPIRED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия");
	ИначеЕсли СтатусДоверенности = "REVOKED" ИЛИ СтатусДоверенности = "DECLINED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка");
	КонецЕсли;
КонецФункции

// Возвращает признак, что передана ссылка на доверенность.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево - Истина, если передана ссылка на машиночитаемую доверенность.
Функция ЭтоСсылкаНаДоверенность(Ссылка) Экспорт
	
	Результат = Ложь;
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если ТипСсылки = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций")
		ИЛИ ТипСсылки = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует набор дерева правил проверки полномочий МЧД.
// 
// Возвращаемое значение:
//  Структура - Набор картинок:
// * Документ - Число
// * Реквизит - Число
// * Ресурс - Число
// * Справочник - Число
Функция НаборКартинок() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Документ", 0);
	Результат.Вставить("Реквизит", 1);
	Результат.Вставить("Ресурс", 2);
	Результат.Вставить("Справочник", 3);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_Число_15() Экспорт
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
КонецФункции

Функция Тип_Булево() Экспорт
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

// Проверяет наличие заполненных настроек в дереве
// 
// Параметры:
//  ДеревоОтбора - ДанныеФормыДерево
// 
// Возвращаемое значение:
//  Булево
Функция ДеревоСодержитНастройки(ДеревоОтбора) Экспорт
	
	СтрокиДерева = ДеревоОтбора.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ДоступенСписок Тогда
			
			ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
			
			Для Каждого Элемент Из ЭлементыДерева Цикл
				Если ЗначениеЗаполнено(Элемент.Данные) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если СтрокаДерева.Тип = Тип_Булево()
				И СтрокаДерева.НачальноеЗначение = СтрокаДерева.КонечноеЗначение Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если СтрокаДерева.Тип = Тип_Число_15()
				И СтрокаДерева.НачальноеЗначение + СтрокаДерева.КонечноеЗначение > 0 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет настройку правила проверки полномочий МЧД
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Булево
Функция ПравилоНастроено(Форма) Экспорт
	
	Варианты = ВариантыПроверки();
	ВариантПроверки = Строка(Форма.ВариантПроверки);
	
	Если ВариантПроверки = Варианты.Скрипт Тогда
		Возврат ЗначениеЗаполнено(Форма.Скрипт);
	ИначеЕсли ВариантПроверки = Варианты.Настройка Тогда
		Возврат ДеревоСодержитНастройки(Форма.ДеревоОтбора);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Задает варианты проверки.
// 
// Возвращаемое значение:
//  Структура - Варианты проверки:
// * Настройка - Строка
// * Отбор - Строка
// * Скрипт - Строка
Функция ВариантыПроверки() Экспорт
	
	Варианты = Новый Структура();
	Варианты.Вставить("Настройка", НСтр("ru = 'Упрощенная настройка'"));
	Варианты.Вставить("Скрипт", НСтр("ru = 'Скрипт на языке 1С:Предприятия'"));
	
	Возврат Варианты;
	
КонецФункции

// Возвращает строковое представление неограниченных полномочий.
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеНеограниченныхПолномочий() Экспорт
	Возврат НСтр("ru = 'Все полномочия'");
КонецФункции

// Проверяет текст на наличие полных полномочий.
// 
// Параметры:
//  ТекстПолномочий - Строка - Текст полномочий
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоТекстПолныхПолномочий(ТекстПолномочий) Экспорт
	
	ТекстыПолныхПолномочий = Новый Массив;
	ТекстыПолныхПолномочий.Добавить(ПредставлениеНеограниченныхПолномочий());
	ТекстыПолныхПолномочий.Добавить(НСтр("ru = 'Полные полномочия'"));
	
	Возврат ТекстыПолныхПолномочий.Найти(СокрЛП(ТекстПолномочий)) <> Неопределено;
	
КонецФункции

// Проверяет таблицу полномочий на наличие полных полномочий.
// 
// Параметры:
//  Полномочия - ДанныеФормыКоллекция:
//  * Описание - Строка
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоПолныеПолномочия(Полномочия) Экспорт
		
	Если Полномочия.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого СтрокаПолномочий Из Полномочия Цикл
		Если Не ЭтоТекстПолныхПолномочий(СтрокаПолномочий.Описание) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстНеобходимостиРучнойПроверкиПолномочий() Экспорт
	Возврат НСтр("ru = 'Правила проверки полномочий не настроены. Настройте или проверьте полномочия вручную.'");
КонецФункции

// Возвращает новые параметры проверки полномочий доверенности.
// 
// Возвращаемое значение:
//  Структура:
// 	  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * ХешПодписи - Строка
//    * ЭтоОперацияЭДО - Булево
//    * НоваяДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//    * ТекстОшибки - Строка
//    * ПроверкаРодительскихПолномочий - булево
//    * ИмяПроверки - Строка
//
Функция НовыеПараметрыПроверкиПолномочий() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ПодписанныйОбъект",
		ПредопределенноеЗначение("Справочник.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка"));
	Результат.Вставить("ХешПодписи", "");
	Результат.Вставить("ЭтоОперацияЭДО", Ложь);
	Результат.Вставить("НоваяДоверенность",
		ПредопределенноеЗначение("Справочник.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка"));
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПроверкаРодительскихПолномочий", Ложь);
	Результат.Вставить("ИмяПроверки", "");
	
	Возврат Результат;
	
КонецФункции

// Инициализирует структуру для загрузки МЧД в информационную базу.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДоверенности - ДвоичныеДанные
// * ДанныеПодписи - ДвоичныеДанные
// * ДанныеПодписиЗаявленияНаОтмену - ДвоичныеДанные
Функция НовыеДанныеДляЗагрузкиМЧД() Экспорт
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("ДанныеДоверенности", Неопределено);
	ДанныеДляПроверки.Вставить("ДанныеПодписи", Неопределено);
	ДанныеДляПроверки.Вставить("ДанныеПодписиЗаявленияНаОтмену", Неопределено);
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

#КонецОбласти
