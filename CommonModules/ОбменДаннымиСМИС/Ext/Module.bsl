
////////////////////////////////////////////////////////////////////////////////
// НОРМАТИВНО-СПРАВОЧНАЯ ИНФОРМАЦИЯ
#Область НСИ

// Формирует список организаций информационной базы
//
Функция СформироватьСписокОрганизацийXDTO() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(НЕ Организации.ПометкаУдаления)";
	
	ТипСписокОрганизаций = ТипMISExchange("OrganizationList");
	ТипОрганизация = ТипСписокОрганизаций.Свойства.Получить("Organization").Тип;
	
	СписокОрганизаций = СоздатьОбъектXDTO(ТипСписокОрганизаций);
	Организации = СписокОрганизаций.ПолучитьСписок("Organization");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОрганизацияXDTO = СоздатьОбъектXDTO(ТипОрганизация);
		
		ОрганизацияXDTO.Ref = Строка(Выборка.Организация.УникальныйИдентификатор());
		ОрганизацияXDTO.Description = Выборка.Наименование;
		Если ЗначениеЗаполнено(Выборка.НаименованиеПолное) Тогда
			ОрганизацияXDTO.NameFull = Выборка.НаименованиеПолное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.НаименованиеСокращенное) Тогда
			ОрганизацияXDTO.NameShort = Выборка.НаименованиеСокращенное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ИНН) Тогда
			ОрганизацияXDTO.INN = Выборка.ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.КПП) Тогда
			ОрганизацияXDTO.KPP = Выборка.КПП;
		КонецЕсли;
		
		Организации.Добавить(ОрганизацияXDTO);
		
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции

// Формирует список складов информационной базы
//
Функция СформироватьСписокСкладовXDTO() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование КАК Наименование,
	|	Склады.ТипСклада КАК ТипСклада
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(НЕ Склады.ПометкаУдаления)
	|	И (НЕ Склады.ЭтоГруппа)";
	
	
	ТипСписокСкладов = ТипMISExchange("StorageList");
	ТипСклад = ТипСписокСкладов.Свойства.Получить("Storage").Тип;
	
	СписокСкладов = СоздатьОбъектXDTO(ТипСписокСкладов);
	Склады = СписокСкладов.ПолучитьСписок("Storage");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СкладXDTO = СоздатьОбъектXDTO(ТипСклад);
		
		СкладXDTO.Ref = Строка(Выборка.Склад.УникальныйИдентификатор());
		СкладXDTO.Description = Выборка.Наименование;
		СкладXDTO.Type = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипСклада);
		
		Склады.Добавить(СкладXDTO);
		
	КонецЦикла;
	
	Возврат СписокСкладов;
	
КонецФункции

// Формирует список отделений базы данных
//
Функция СформироватьСписокОтделенийXDTO(Знач Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Отделения.Ссылка КАК Отделение,
	|	Отделения.Наименование КАК Наименование,
	|	Отделения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ОтделенияОрганизаций КАК Отделения
	|ГДЕ
	|	(НЕ Отделения.ПометкаУдаления)
	|";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И Отделения.Владелец = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	ТипСписокОтделений = ТипMISExchange("DepartmentList");
	ТипОтделение = ТипСписокОтделений.Свойства.Получить("Department").Тип;
	
	СписокОтделений = СоздатьОбъектXDTO(ТипСписокОтделений);
	Отделения = СписокОтделений.ПолучитьСписок("Department");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтделениеXDTO = СоздатьОбъектXDTO(ТипОтделение);
		
		ОтделениеXDTO.Ref = Строка(Выборка.Отделение.УникальныйИдентификатор());
		ОтделениеXDTO.Description = Выборка.Наименование;
		ОтделениеXDTO.Owner = Строка(Выборка.Владелец.УникальныйИдентификатор());
		
		Отделения.Добавить(ОтделениеXDTO);
		
	КонецЦикла;
	
	Возврат СписокОтделений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Номенклатура
#Область Номенклатура

// Получает список описаний возможных позиций назначения врача
//
Функция СформироватьСписокОписанийНоменклатурыXDTO() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	// Общие поля
	|	РегистрЛекарственныхСредств.Ссылка КАК ЭлементКАТ,
	|	ЕстьNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕстьNULL(СправочникНоменклатура.Наименование, РегистрЛекарственныхСредств.Наименование) КАК Наименование,
	|	ЕстьNULL(СправочникНоменклатура.НаименованиеПолное, РегистрЛекарственныхСредств.НаименованиеПолное) КАК НаименованиеПолное,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмерения_НаименованиеПолное,
	|	СправочникНоменклатура.ЕдиницаИзмерения.ТипЕдиницы КАК ТипБазовойЕдиницы,
	// Поля препаратов
	|	РегистрЛекарственныхСредств.НомерРЛС КАК НомерКЛПРЛС,
	|	РегистрЛекарственныхСредств.ТорговоеНаименование.Наименование КАК ТорговоеНаименование,
	|	РегистрЛекарственныхСредств.ТорговоеНаименование.АнглийскоеНаименование КАК ТорговоеНаименование_ЛатинскаяТранскрипция,
	|	РегистрЛекарственныхСредств.ДействующиеВеществаМНН.НаименованиеПолное КАК ДействующиеВеществаМНН,
	// Форма выпуска
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЛекарственнаяФорма.Наименование КАК ЛекарственнаяФорма,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЛекарственнаяФорма.НаименованиеПолное КАК ЛекарственнаяФорма_НаименованиеПолное,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЛекарственнаяФорма.Группа.Наименование КАК ГруппаЛекарственнойФормы,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЛекарственнаяФорма.Группа.НаименованиеПолное КАК ГруппаЛекарственнойФормы_НаименованиеПолное,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЕдиницаИзмерения.Наименование КАК ЕдиницаЛекарственнойФормы,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаЛекарственнойФормы_НаименованиеПолное,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы КАК ЕдиницаЛекарственнойФормы_ТипЕдиницы,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.Количество КАК КоличествоЕдиницЛекарственнойФормы,
	|	РегистрЛекарственныхСредств.ФормаВыпуска.НеНормализованныеДанные КАК РазмерЛекарственнойФормы,
	// Упаковки
	|	ДанныеУпаковки1.Упаковка.Наименование КАК Упаковка1,
	|	ДанныеУпаковки1.Упаковка.НаименованиеПолное КАК Упаковка1_НаименованиеПолное,
	|	ДанныеУпаковки1.Упаковка.Коэффициент КАК Коэффициент01,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмеренияУпаковки,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.ТипЕдиницы КАК БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияУпаковки_Наименование,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияУпаковки_НаименованиеПолное,
	|	ДанныеУпаковки2.Упаковка.Наименование КАК Упаковка2,
	|	ДанныеУпаковки2.Упаковка.НаименованиеПолное КАК Упаковка2_НаименованиеПолное,
	|	ДанныеУпаковки2.Упаковка.КоличествоВУпаковке КАК Коэффициент12,
	|	ДанныеУпаковки3.Упаковка.Наименование КАК Упаковка3,
	|	ДанныеУпаковки3.Упаковка.НаименованиеПолное КАК Упаковка3_НаименованиеПолное,
	|	ДанныеУпаковки3.Упаковка.КоличествоВУпаковке КАК Коэффициент23,
	// Классификация
	|	РегистрЛекарственныхСредств.ТоварыФармРынка.Код КАК ТоварыФармРынка_Код,
	|	РегистрЛекарственныхСредств.ТоварыФармРынка.Наименование КАК ТоварыФармРынка_Наименование,
	|	РегистрЛекарственныхСредств.АТХ.Код КАК АТХ_Код,
	|	РегистрЛекарственныхСредств.АТХ.Наименование КАК АТХ_Наименование,
	|	РегистрЛекарственныхСредств.ГруппаПКУ КАК ГруппаПКУ,
	|	РегистрЛекарственныхСредств.ГруппаПКУ.Наименование КАК ГруппаПКУ_Наименование,
	|	РегистрЛекарственныхСредств.ФармакологическиеГруппы.(
	|		ФармакологическаяГруппа.Код КАК Код,
	|		ФармакологическаяГруппа.Наименование КАК Наименование
	|	)
	|ИЗ
	|	Справочник.РегистрЛекарственныхСредств КАК РегистрЛекарственныхСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО
	|			СправочникНоменклатура.ЭлементКАТ = РегистрЛекарственныхСредств.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки1
	|		ПО
	|			ДанныеУпаковки1.КАТ = РегистрЛекарственныхСредств.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки2
	|		ПО
	|			ДанныеУпаковки2.КАТ = РегистрЛекарственныхСредств.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 2
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки3
	|		ПО
	|			ДанныеУпаковки3.КАТ = РегистрЛекарственныхСредств.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 3
	|ГДЕ
	|	(НЕ РегистрЛекарственныхСредств.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	// Общие поля
	|	КЛП.Ссылка КАК ЭлементКАТ,
	|	ЕстьNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕстьNULL(СправочникНоменклатура.Наименование, КЛП.Наименование) КАК Наименование,
	|	ЕстьNULL(СправочникНоменклатура.НаименованиеПолное, КЛП.НаименованиеПолное) КАК НаименованиеПолное,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмерения_НаименованиеПолное,
	|	СправочникНоменклатура.ЕдиницаИзмерения.ТипЕдиницы КАК ТипБазовойЕдиницы,
	// Поля препаратов
	|	КЛП.КодЕСКЛП КАК НомерКЛПРЛС,
	|	КЛП.ТорговоеНаименование.Наименование КАК ТорговоеНаименование,
	|	КЛП.ТорговоеНаименование.АнглийскоеНаименование КАК ТорговоеНаименование_ЛатинскаяТранскрипция,
	|	КЛП.ДействующиеВеществаМНН.НаименованиеПолное КАК ДействующиеВеществаМНН,
	// Форма выпуска
	|	КЛП.ФормаВыпуска.ЛекарственнаяФорма.Наименование КАК ЛекарственнаяФорма,
	|	КЛП.ФормаВыпуска.ЛекарственнаяФорма.НаименованиеПолное КАК ЛекарственнаяФорма_НаименованиеПолное,
	|	КЛП.ФормаВыпуска.ЛекарственнаяФорма.Группа.Наименование КАК ГруппаЛекарственнойФормы,
	|	КЛП.ФормаВыпуска.ЛекарственнаяФорма.Группа.НаименованиеПолное КАК ГруппаЛекарственнойФормы_НаименованиеПолное,
	|	КЛП.ФормаВыпуска.ЕдиницаИзмерения.Наименование КАК ЕдиницаЛекарственнойФормы,
	|	КЛП.ФормаВыпуска.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаЛекарственнойФормы_НаименованиеПолное,
	|	КЛП.ФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы КАК ЕдиницаЛекарственнойФормы_ТипЕдиницы,
	|	КЛП.ФормаВыпуска.Количество КАК КоличествоЕдиницЛекарственнойФормы,
	|	КЛП.ФормаВыпуска.НеНормализованныеДанные КАК РазмерЛекарственнойФормы,
	// Упаковки
	|	ДанныеУпаковки1.Упаковка.Наименование КАК Упаковка1,
	|	ДанныеУпаковки1.Упаковка.НаименованиеПолное КАК Упаковка1_НаименованиеПолное,
	|	ДанныеУпаковки1.Упаковка.Коэффициент КАК Коэффициент01,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмеренияУпаковки,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.ТипЕдиницы КАК БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияУпаковки_Наименование,
	|	ДанныеУпаковки1.Упаковка.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияУпаковки_НаименованиеПолное,
	|	ДанныеУпаковки2.Упаковка.Наименование КАК Упаковка2,
	|	ДанныеУпаковки2.Упаковка.НаименованиеПолное КАК Упаковка2_НаименованиеПолное,
	|	ДанныеУпаковки2.Упаковка.КоличествоВУпаковке КАК Коэффициент12,
	|	ДанныеУпаковки3.Упаковка.Наименование КАК Упаковка3,
	|	ДанныеУпаковки3.Упаковка.НаименованиеПолное КАК Упаковка3_НаименованиеПолное,
	|	ДанныеУпаковки3.Упаковка.КоличествоВУпаковке КАК Коэффициент23,
	// Классификация
	|	КЛП.ГруппаПКУ КАК ГруппаПКУ,
	|	КЛП.ГруппаПКУ.Наименование КАК ГруппаПКУ_Наименование,
	|	КЛП.СМНН.АТХКлассификация.(
	|		АТХ.Код КАК Код,
	|		АТХ.Наименование КАК Наименование
	|	) КАК АТХКлассификация
	|ИЗ
	|	Справочник.КЛП КАК КЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО
	|			СправочникНоменклатура.ЭлементКАТ = КЛП.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки1
	|		ПО
	|			ДанныеУпаковки1.КАТ = КЛП.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 1
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки2
	|		ПО
	|			ДанныеУпаковки2.КАТ = КЛП.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 2
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК ДанныеУпаковки3
	|		ПО
	|			ДанныеУпаковки3.КАТ = КЛП.Ссылка
	|			И ДанныеУпаковки1.НомерУпаковки = 3
	|ГДЕ
	|	(НЕ КЛП.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмерения_НаименованиеПолное,
	|	Номенклатура.ЕдиницаИзмерения.ТипЕдиницы КАК ТипБазовойЕдиницы,
	|	Номенклатура.ГруппаПКУ КАК ГруппаПКУ,
	|	Номенклатура.ГруппаПКУ.Наименование КАК ГруппаПКУ_Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(НЕ Номенклатура.ПометкаУдаления)
	|	И (НЕ Номенклатура.ЭтоЛекарственноеСредство)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТипСписка = ТипMISExchange("DrugList");
	СписокФОЛС = ФабрикаXDTO.Создать(ТипСписка);
	
	ТипОписания = ТипСписка.Свойства.Получить("Drug").Тип;
	
	ВыборкаКАТ = Результат[0].Выбрать();
	Пока ВыборкаКАТ.Следующий() Цикл
		СписокФОЛС.drug.Добавить(ПолучитьОписаниеНоменклатурыXDTO(ВыборкаКАТ, ТипОписания));
	КонецЦикла;
	
	ВыборкаКАТ = Результат[1].Выбрать();
	Пока ВыборкаКАТ.Следующий() Цикл
		СписокФОЛС.drug.Добавить(ПолучитьОписаниеНоменклатурыXDTO(ВыборкаКАТ, ТипОписания));
	КонецЦикла;
	
	ВыборкаНоменклатура = Результат[Результат.ВГраница()].Выбрать();
	Пока ВыборкаНоменклатура.Следующий() Цикл
		СписокФОЛС.drug.Добавить(ПолучитьОписаниеНоменклатурыXDTO(ВыборкаНоменклатура, ТипОписания));
	КонецЦикла;
	
	Возврат СписокФОЛС;
	
КонецФункции

Функция ПолучитьОписаниеНоменклатурыXDTO(ДанныеНоменклатуры, ТипОписания, КраткоеОписание = Ложь)
	
	ПоляФОЛС =
		"НомерКЛПРЛС, Наименование, НаименованиеПолное, Номенклатура,"
		"ЕдиницаИзмерения, ЕдиницаИзмерения_НаименованиеПолное, ТипБазовойЕдиницы,"
		"ТорговоеНаименование, ТорговоеНаименование_ЛатинскаяТранскрипция, ДействующиеВеществаМНН,"
		"ЛекарственнаяФорма, ЛекарственнаяФорма_НаименованиеПолное, ГруппаЛекарственнойФормы, ГруппаЛекарственнойФормы_НаименованиеПолное,"
		"ЕдиницаЛекарственнойФормы, ЕдиницаЛекарственнойФормы_НаименованиеПолное, ЕдиницаЛекарственнойФормы_ТипЕдиницы, КоличествоЕдиницЛекарственнойФормы,"
		"РазмерЛекарственнойФормы,"
		"Упаковка1, Упаковка1_НаименованиеПолное, Коэффициент01,"
		"БазоваяЕдиницаИзмеренияУпаковки, БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы, БазоваяЕдиницаИзмеренияУпаковки_Наименование, БазоваяЕдиницаИзмеренияУпаковки_НаименованиеПолное,"
		"Упаковка2, Упаковка2_НаименованиеПолное, Коэффициент12,"
		"Упаковка3, Упаковка3_НаименованиеПолное, Коэффициент23,"
		"ТоварыФармРынка_Код, ТоварыФармРынка_Наименование,"
		"АТХ_Код, АТХ_Наименование,"
		"ГруппаПКУ, ГруппаПКУ_Наименование";
	СтруктураФОЛС = Новый Структура(ПоляФОЛС);
	
	ЗаполнитьЗначенияСвойств(СтруктураФОЛС, ДанныеНоменклатуры);
	
	ФОЛС = ФабрикаXDTO.Создать(ТипОписания);
	
	ТипCode = ТипОписания.Свойства.Получить("code").Тип;
	ТипTranslation = ТипCode.Свойства.Получить("translation").Тип;
	ТипQualifier = ТипTranslation.Свойства.Получить("qualifier").Тип;
	
	code = ФабрикаXDTO.Создать(ТипCode);
	ФОЛС.code = code;
	Наименование = ?(ПустаяСтрока(СтруктураФОЛС.НаименованиеПолное),
		СтруктураФОЛС.Наименование,
		СтруктураФОЛС.НаименованиеПолное);
	code.displayName = ?(ПустаяСтрока(Наименование), "<NO NAME>", Наименование);
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.НомерКЛПРЛС) Тогда
	
		code.codeSystem = "1.2.643.2.0";
		code.codeSystemName = "RLS_NOMEN";
		code.code = СтруктураФОЛС.НомерКЛПРЛС;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураФОЛС.Номенклатура) Тогда
		
		code.code = Строка(СтруктураФОЛС.Номенклатура.УникальныйИдентификатор());
		
		// Если нет упаковок в описании аптечного товара,
		// то возьмем базовую единицу измерения номенклатуры.
		Если Не ЗначениеЗаполнено(СтруктураФОЛС.Упаковка1) И ЗначениеЗаполнено(СтруктураФОЛС.ЕдиницаИзмерения) Тогда
			
			translation = ФабрикаXDTO.Создать(ТипTranslation);
			translation.code = "PPACK";
			translation.codeSystemName = "RLS";
			
			qualifier = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				Строка(СтруктураФОЛС.ЕдиницаИзмерения),
				Строка(СтруктураФОЛС.ЕдиницаИзмерения_НаименованиеПолное),
				1,
				"PPACK",
				"RLS",
				СтруктураФОЛС.ТипБазовойЕдиницы);
			translation.qualifier.Добавить(qualifier);
			
			code.translation.Добавить(translation);
			
		КонецЕсли;
		
	Иначе
		// к КАТ не привязана номенклатуры
		
		code.code = 0;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.ТорговоеНаименование) Тогда
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = СтрЗаменить(СтруктураФОЛС.ТорговоеНаименование, " ", "_");
		Если ПустаяСтрока(СтруктураФОЛС.ТорговоеНаименование_ЛатинскаяТранскрипция) Тогда
			translation.displayName = Строка(СтруктураФОЛС.ТорговоеНаименование);
		Иначе
			translation.displayName = Строка(СтруктураФОЛС.ТорговоеНаименование_ЛатинскаяТранскрипция);
		КонецЕсли;
		translation.codeSystemName = "RLS_TRADENAMES";
		code.translation.Добавить(translation);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.ДействующиеВеществаМНН) Тогда
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = СтрЗаменить(СтруктураФОЛС.ДействующиеВеществаМНН, " ", "_");
		translation.displayName = Строка(СтруктураФОЛС.ДействующиеВеществаМНН);
		translation.codeSystemName = "RLS_ACTMATTERS";
		code.translation.Добавить(translation);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.ЛекарственнаяФорма) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = СтрЗаменить(СтруктураФОЛС.ЛекарственнаяФорма, " ", "_");
		translation.displayName = Строка(?(
			ЗначениеЗаполнено(СтруктураФОЛС.ЛекарственнаяФорма_НаименованиеПолное),
			СтруктураФОЛС.ЛекарственнаяФорма_НаименованиеПолное,
			СтруктураФОЛС.ЛекарственнаяФорма));
		translation.codeSystemName = "RLS_CLSDRUGFORMS";
		
		Если ЗначениеЗаполнено(СтруктураФОЛС.ЕдиницаЛекарственнойФормы) Тогда
			
			qualifier = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				Строка(СтруктураФОЛС.ЕдиницаЛекарственнойФормы),
				Строка(СтруктураФОЛС.ЕдиницаЛекарственнойФормы_НаименованиеПолное),
				СтруктураФОЛС.КоличествоЕдиницЛекарственнойФормы,
				"DF",
				"RLS",
				СтруктураФОЛС.ЕдиницаЛекарственнойФормы_ТипЕдиницы);
			
			translation.qualifier.Добавить(qualifier);
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураФОЛС.РазмерЛекарственнойФормы) Тогда
			
			ЧастиРазмера = СтрРазделить(СтруктураФОЛС.РазмерЛекарственнойФормы, "+", Ложь);
			ПоследняяЧасть = СокрЛ(ЧастиРазмера[ЧастиРазмера.ВГраница()]);
			Пока СтрНайти("1234567890",Сред(ПоследняяЧасть, 1, 1)) Цикл
				ПоследняяЧасть = Сред(ПоследняяЧасть, 2);
			КонецЦикла;
			
			qualifier = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				ПоследняяЧасть,
				ПоследняяЧасть,
				Лев(СтруктураФОЛС.РазмерЛекарственнойФормы, СтрДлина(СтруктураФОЛС.РазмерЛекарственнойФормы) - СтрДлина(ПоследняяЧасть)),
				"DF",
				"RLS",
				"SIZE");
			
			translation.qualifier.Добавить(qualifier);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураФОЛС.ГруппаЛекарственнойФормы) Тогда
			
			qualifier = ПолучитьОписаниеГруппыЛекарственнойФормыXDTO(
				ТипQualifier,
				Строка(СтруктураФОЛС.ГруппаЛекарственнойФормы),
				Строка(СтруктураФОЛС.ГруппаЛекарственнойФормы_НаименованиеПолное));
				
			translation.qualifier.Добавить(qualifier);
			
		КонецЕсли;
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	Если КраткоеОписание Тогда
		Возврат ФОЛС;
	КонецЕсли;
	
	// Классификация
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.ТоварыФармРынка_Код) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = СтруктураФОЛС.ТоварыФармРынка_Код;
		Если ЗначениеЗаполнено(СтруктураФОЛС.ТоварыФармРынка_Наименование) Тогда
			translation.displayName = СтруктураФОЛС.ТоварыФармРынка_Наименование;
		КонецЕсли;
		translation.codeSystemName = "RLS_CLSNTFR";
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.АТХ_Код) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = СтруктураФОЛС.АТХ_Код;
		Если ЗначениеЗаполнено(СтруктураФОЛС.АТХ_Наименование) Тогда
			translation.displayName = СтруктураФОЛС.АТХ_Наименование;
		КонецЕсли;
		translation.codeSystemName = "RLS_CLSATC";
		
		code.translation.Добавить(translation);
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураФОЛС.НомерКЛПРЛС) И ТипЗнч(ДанныеНоменклатуры.ЭлементКАТ) = Тип("СправочникСсылка.КЛП") Тогда
		
		АТХ_Код = Новый Массив;
		АТХ_Наименование = Новый Массив;
		
		АТХКлассификация = ДанныеНоменклатуры.АТХКлассификация.Выбрать();
		Пока АТХКлассификация.Следующий() Цикл
			АТХ_Код.Добавить(СокрЛП(АТХКлассификация.Код));
			АТХ_Наименование.Добавить(АТХКлассификация.Наименование);
		КонецЦикла;
		АТХ_Код = СтрСоединить(АТХ_Код, ",");
		АТХ_Наименование = СтрСоединить(АТХ_Наименование, ",");
		
		Если ЗначениеЗаполнено(АТХ_Код) Тогда
			translation = ФабрикаXDTO.Создать(ТипTranslation);
			translation.code = АТХ_Код;
			Если ЗначениеЗаполнено(АТХ_Наименование) Тогда
				translation.displayName = АТХ_Наименование;
			КонецЕсли;
			translation.codeSystemName = "RLS_CLSATC";
			
			code.translation.Добавить(translation);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.НомерКЛПРЛС) И ТипЗнч(ДанныеНоменклатуры.ЭлементКАТ) = Тип("СправочникСсылка.РегистрЛекарственныхСредств") Тогда
		
		ФармакологическиеГруппы_Код = "";
		ФармакологическиеГруппы_Наименование = "";
		
		ФармакологическиеГруппы = ДанныеНоменклатуры.ФармакологическиеГруппы.Выбрать();
		Пока ФармакологическиеГруппы.Следующий() Цикл
			ФармакологическиеГруппы_Код = ФармакологическиеГруппы_Код + "," + СокрЛП(ФармакологическиеГруппы.Код);
			ФармакологическиеГруппы_Наименование = ФармакологическиеГруппы_Наименование + "," + ФармакологическиеГруппы.Наименование;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ФармакологическиеГруппы_Код) Тогда
			translation = ФабрикаXDTO.Создать(ТипTranslation);
			translation.code = Сред(ФармакологическиеГруппы_Код, 2);
			Если ЗначениеЗаполнено(ФармакологическиеГруппы_Наименование) Тогда
				translation.displayName = Сред(ФармакологическиеГруппы_Наименование, 2);
			КонецЕсли;
			translation.codeSystemName = "RLS_CLSPHARMAGROUP";
			
			code.translation.Добавить(translation);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.ГруппаПКУ) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = Строка(СтруктураФОЛС.ГруппаПКУ.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(СтруктураФОЛС.ГруппаПКУ_Наименование) Тогда
			translation.displayName = СтруктураФОЛС.ГруппаПКУ_Наименование;
		КонецЕсли;
		translation.codeSystemName = "CLSCONTROLLEDGROUP";
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	// Упаковки
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.Упаковка1) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = "PPACK";
		translation.codeSystemName = "RLS";
		
		Коэффициент01 = 0;
		БазоваяЕдиницаУпаковки = Неопределено;
		Если СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес
		 Или СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
			БазоваяЕдиницаУпаковки = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				Строка(СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки_Наименование),
				Строка(СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки_НаименованиеПолное),
				СтруктураФОЛС.Коэффициент01,
				"PPACK",
				"RLS",
				СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки_ТипЕдиницы);
		ИначеЕсли СтруктураФОЛС.БазоваяЕдиницаИзмеренияУпаковки = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияДоз() Тогда
			БазоваяЕдиницаУпаковки = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				"доз",
				"Доза",
				СтруктураФОЛС.Коэффициент01,
				"PPACK",
				"RLS",
				"DRUGDOSE");
		Иначе
			Коэффициент01 = СтруктураФОЛС.Коэффициент01;
		КонецЕсли;
		
		Упаковка1 = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
			ТипQualifier,
			Строка(СтруктураФОЛС.Упаковка1),
			Строка(СтруктураФОЛС.Упаковка1_НаименованиеПолное),
			Коэффициент01,
			"PPACK",
			"RLS",
			Перечисления.ТипыЕдиницИзмерения.Упаковка);
		translation.qualifier.Добавить(Упаковка1);
		
		Если БазоваяЕдиницаУпаковки <> Неопределено Тогда
			translation.qualifier.Добавить(БазоваяЕдиницаУпаковки);
		КонецЕсли;
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.Упаковка2) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = "UPACK";
		translation.codeSystemName = "RLS";
		
		qualifier = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
			ТипQualifier,
			Строка(СтруктураФОЛС.Упаковка2),
			Строка(СтруктураФОЛС.Упаковка2_НаименованиеПолное),
			СтруктураФОЛС.Коэффициент12,
			"UPACK",
			"RLS",
			Перечисления.ТипыЕдиницИзмерения.Упаковка);
		translation.qualifier.Добавить(qualifier);
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураФОЛС.Упаковка3) Тогда
		
		translation = ФабрикаXDTO.Создать(ТипTranslation);
		translation.code = "SPACK";
		translation.codeSystemName = "RLS";
		
		qualifier = ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
			ТипQualifier,
			Строка(СтруктураФОЛС.Упаковка3),
			Строка(СтруктураФОЛС.Упаковка3_НаименованиеПолное),
			СтруктураФОЛС.Коэффициент23,
			"SPACK",
			"RLS",
			Перечисления.ТипыЕдиницИзмерения.Упаковка);
		translation.qualifier.Добавить(qualifier);
		
		code.translation.Добавить(translation);
		
	КонецЕсли;
	
	Возврат ФОЛС;
	
КонецФункции

Функция ПолучитьОписаниеГруппыЛекарственнойФормыXDTO(ТипQualifier, Наименование, НаименованиеПолное)
	
	ТипName = ТипQualifier.Свойства.Получить("name").Тип;
	ТипValue = ТипQualifier.Свойства.Получить("value").Тип;
	
	qualifier = ФабрикаXDTO.Создать(ТипQualifier);
	
	name = ФабрикаXDTO.Создать(ТипName);
	name.code = "CLSDRUGFORMS";
	name.codeSystemName = "RLS";
	qualifier.name = name;
	
	value = ФабрикаXDTO.Создать(ТипValue);
	value.code = СтрЗаменить(Наименование, " ", "_");
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		value.displayName = Наименование;
	Иначе
		value.displayName = НаименованиеПолное;
	КонецЕсли;
	value.codeSystemName = "RLS_CLSDRUGFORMS";
	qualifier.value = value;
	
	Возврат qualifier;
	
КонецФункции

Функция ПолучитьОписаниеЕдиницыИзмеренияИКоличестваXDTO(
				ТипQualifier,
				Наименование,
				НаименованиеПолное,
				Количество,
				name_code,
				name_codeSystemName,
				ТипЕдиницы)
	
	ТипName = ТипQualifier.Свойства.Получить("name").Тип;
	ТипOriginalText = ТипName.Свойства.Получить("originalText").Тип;
	ТипValue = ТипQualifier.Свойства.Получить("value").Тип;
	
	КлассификаторЕдиниц = ПолучитьОписаниеКлассификацииЕдиницыИзмерения(name_code,ТипЕдиницы);
	
	qualifier = ФабрикаXDTO.Создать(ТипQualifier);
	
	name = ФабрикаXDTO.Создать(ТипName);
	Если ЗначениеЗаполнено(КлассификаторЕдиниц.code) Тогда
		name.code = КлассификаторЕдиниц.code;
	КонецЕсли;
	Если ЗначениеЗаполнено(name_codeSystemName) Тогда
		name.codeSystemName = name_codeSystemName;
	КонецЕсли;
	qualifier.name = name;
	
	value = ФабрикаXDTO.Создать(ТипValue);
	value.code = СтрЗаменить(Наименование, " ", "_");
	value.displayName = ?(ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, Наименование);
	Если ЗначениеЗаполнено(КлассификаторЕдиниц.codeSystemName) Тогда
		value.codeSystemName = КлассификаторЕдиниц.codeSystemName;
	КонецЕсли;
	
	originalText = ФабрикаXDTO.Создать(ТипOriginalText);
	originalText.Последовательность().Добавить(Строка(Количество), Неопределено);
	
	value.originalText = originalText;
	
	qualifier.value = value;
	
	Возврат qualifier;
	
КонецФункции

Функция ПолучитьОписаниеКлассификацииЕдиницыИзмерения(name_code, ТипЕдиницы)
	
	value_name_code = name_code;
	value_codeSystemName = Неопределено;
	
	Если ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
		value_name_code = value_name_code + "MASS";
		value_codeSystemName = "RLS_MASSUNITS";
	ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
		value_name_code = value_name_code + "VOLUME";
		value_codeSystemName = "RLS_CUBICUNITS";
	ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Концентрация Тогда
		value_name_code = value_name_code + "CONC";
		value_codeSystemName = "RLS_ConcenUnits";
	ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.ЕдиницаДействия Тогда
		value_name_code = value_name_code + "ACT";
		value_codeSystemName = "RLS_ActUnits";
	ИначеЕсли ТипЕдиницы = "SIZE" Тогда
		value_name_code = value_name_code + "SIZE";
		value_codeSystemName = "RLS_SizeUnits";
	ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
		value_codeSystemName = "RLS_DRUGPACK";
	ИначеЕсли ТипЕдиницы = "DRUGDOSE" Тогда
		value_name_code = value_name_code + "DRUGDOSE";
		value_codeSystemName = "RLS_PREP";
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("code,codeSystemName", value_name_code, value_codeSystemName);
	
	Возврат СтруктураОтвета;
КонецФункции

#КонецОбласти // Номенклатура

#КонецОбласти // НСИ

////////////////////////////////////////////////////////////////////////////////
// ОСТАТКИ ТОВАРОВ
#Область ОстаткиТоваров

// Получает информацию о наличии товаров на складе
//
Функция ПолучитьИнформациюОНаличииТоваровНаСкладе(Знач ЗапрашиваемыеФОЛС, Знач Организация = Неопределено, Знач Склад = Неопределено) Экспорт
	
	ТаблицаТребований = Новый ТаблицаЗначений;
	ТаблицаТребований.Колонки.Добавить("НоменклатураЗаказа", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
	ТаблицаТребований.Колонки.Добавить("ЕдиницаИзмеренияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТребований.Колонки.Добавить("ФОЛС", Новый ОписаниеТипов("ОбъектXDTO"));
	
	СписокФОЛС = ЗапрашиваемыеФОЛС.ПолучитьСписок("Drug");
	Для Каждого ФОЛС Из СписокФОЛС Цикл
		
		СтруктураФОЛС = ПолучитьСтруктуруФОЛС();
		ПолучитьОписаниеПрепарата(СтруктураФОЛС, ФОЛС);
		
		Описание = ПолучитьОписаниеПоФОЛСОтМИС(СтруктураФОЛС);
		
		стрНовая = ТаблицаТребований.Добавить();
		стрНовая.НоменклатураЗаказа = Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ЗначениеКлючаАналитики(Описание);
		стрНовая.ФОЛС = ФОЛС;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПолучитьНоменклатуруПоТребованию(ТаблицаТребований, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Склад              КАК Склад,
	|	Остатки.МестоХранения      КАК МестоХранения,
	|	Остатки.Номенклатура       КАК Номенклатура,
	|	Остатки.ГоденДо            КАК ГоденДо,
	|	СУММА(Остатки.Количество)  КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиНаСкладах.Склад              КАК Склад,
	|		ОстаткиНаСкладах.МестоХранения      КАК МестоХранения,
	|		ОстаткиНаСкладах.Номенклатура       КАК Номенклатура,
	|		ЕСТЬNULL(ОстаткиНаСкладах.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК ГоденДо,
	|		ОстаткиНаСкладах.КоличествоОстаток  КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Т.Номенклатура
	|						ИЗ
	|							НоменклатураПоТребованию КАК Т)
	|					И (&Организация = НЕОПРЕДЕЛЕНО
	|						ИЛИ Организация = &Организация)
	|					И (&Склад = НЕОПРЕДЕЛЕНО
	|						ИЛИ Склад = &Склад)) КАК ОстаткиНаСкладах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиНаСкладах.Склад              КАК Склад,
	|		ОстаткиНаСкладах.МестоХранения      КАК МестоХранения,
	|		ОстаткиНаСкладах.Номенклатура       КАК Номенклатура,
	|		ЕСТЬNULL(ОстаткиНаСкладах.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК ГоденДо,
	|		ОстаткиНаСкладах.КоличествоОстаток  КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладахВОтделениях.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Т.Номенклатура
	|						ИЗ
	|							НоменклатураПоТребованию КАК Т)
	|					И (&Организация = НЕОПРЕДЕЛЕНО
	|						ИЛИ Организация = &Организация)
	|					И (&Склад = НЕОПРЕДЕЛЕНО
	|						ИЛИ Склад = &Склад)) КАК ОстаткиНаСкладах) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Склад,
	|	Остатки.МестоХранения,
	|	Остатки.Номенклатура,
	|	Остатки.ГоденДо
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.Количество) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Требование.НоменклатураЗаказа                   КАК АналитикаОписанияОтбораНоменклатуры,
	|	Остатки.Склад                                   КАК Склад,
	|	Остатки.МестоХранения                           КАК МестоХранения,
	|	Остатки.Номенклатура                            КАК Номенклатура,
	|	Остатки.Номенклатура.Наименование               КАК Наименование,
	|	Остатки.Номенклатура.НаименованиеПолное         КАК НаименованиеПолное,
	|	Остатки.Номенклатура.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НЕ Остатки.Номенклатура.ЭлементКАТ.КодЕСКЛП ЕСТЬ NULL
	|			ТОГДА Остатки.Номенклатура.ЭлементКАТ.КодЕСКЛП
	|		КОГДА НЕ Остатки.Номенклатура.ЭлементКАТ.НомерРЛС ЕСТЬ NULL
	|			ТОГДА Остатки.Номенклатура.ЭлементКАТ.НомерРЛС
	|		ИНАЧЕ 0
	|	КОНЕЦ                                           КАК НомерКЛПРЛС,
	|	Остатки.ГоденДо                                 КАК ГоденДо,
	|	Остатки.Количество                              КАК Количество
	|ИЗ
	|	НоменклатураПоТребованию КАК Требование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Остатки КАК Остатки
	|	ПО
	|		Требование.Номенклатура = Остатки.Номенклатура
	|
	|ИТОГИ ПО
	|	Склад,
	|	АналитикаОписанияОтбораНоменклатуры
	|";
	
	ТипСписокОстатков = ТипMISExchange("BalanceOfGoods");
	ТипОстаток = ТипСписокОстатков.Свойства.Получить("Storage").Тип;
	ТипОстатокПоФОЛС = ТипОстаток.Свойства.Получить("Balance").Тип;
	ТипОстатокТоваров = ТипОстатокПоФОЛС.Свойства.Получить("Goods").Тип;
	
	СписокОстатков = СоздатьОбъектXDTO(ТипСписокОстатков);
	Остатки = СписокОстатков.ПолучитьСписок("Storage");
	
	ВыборкаСклад = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() Цикл
		
		ОстатокСклада = ФабрикаXDTO.Создать(ТипОстаток);
		ОстатокСклада.Ref = Строка(ВыборкаСклад.Склад.УникальныйИдентификатор());
		ОстатокСклада.Description = Строка(ВыборкаСклад.Склад);
		ОстаткиСклада = ОстатокСклада.ПолучитьСписок("Balance");
		
		ВыборкаОтбор = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОтбор.Следующий() Цикл
			
			Остаток = ФабрикаXDTO.Создать(ТипОстатокПоФОЛС);
			Если ЗначениеЗаполнено(ВыборкаОтбор.АналитикаОписанияОтбораНоменклатуры) Тогда
				СтрокаТребования = ТаблицаТребований.Найти(ВыборкаОтбор.АналитикаОписанияОтбораНоменклатуры);
				Если СтрокаТребования <> Неопределено Тогда
					Остаток.Drug = СкопироватьXDTO(ФабрикаXDTO, СтрокаТребования.ФОЛС);
				КонецЕсли;
			КонецЕсли;
			ВыборкаОстатки = ВыборкаОтбор.Выбрать();
			ЗаписатьОстаткиТоваров(Остаток, ТипОстатокТоваров, ВыборкаОстатки);
			
			ОстаткиСклада.Добавить(Остаток);
			
		КонецЦикла;
		
		Остатки.Добавить(ОстатокСклада);
		
	КонецЦикла;
	
	Возврат СписокОстатков;
	
КонецФункции

Процедура ПолучитьНоменклатуруПоТребованию(ТаблицаТребований, МенеджерВременныхТаблиц)
	
	Если ТаблицаТребований.Количество() Тогда
		ОтборНоменклатуры.ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаТребований, МенеджерВременныхТаблиц, "НоменклатураПоТребованию");
	Иначе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиОписанийОтборовНоменклатуры.ПустаяСсылка) КАК НоменклатураЗаказа,
		|	Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ НоменклатураПоТребованию
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|";
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОстаткиТоваров(ОстатокПоФОЛС, ТипОстатокТоваров, НайденныеОстатки)
	
	ТипТовара = ТипОстатокТоваров.Свойства.Получить("Drug").Тип;
	ТипКоличества = ТипОстатокТоваров.Свойства.Получить("Qty").Тип;
	
	Остатки = ОстатокПоФОЛС.ПолучитьСписок("Goods");
	Пока НайденныеОстатки.Следующий() Цикл
		
		ОстатокXDTO = ФабрикаXDTO.Создать(ТипОстатокТоваров);
		ОстатокXDTO.Drug = ПолучитьОписаниеНоменклатурыXDTO(НайденныеОстатки, ТипТовара, Истина);
		
		Количество = ФабрикаXDTO.Создать(ТипКоличества);
		Количество.value = НайденныеОстатки.Количество;
		Количество.unit = СтрЗаменить(СокрЛП(НайденныеОстатки.ЕдиницаИзмерения), " ", "_");
		ОстатокXDTO.Qty = Количество;
		ОстатокXDTO.BestBefore = Формат(НайденныеОстатки.ГоденДо, "ДФ=yyyyMMdd; ДП=0");
		ОстатокXDTO.Place = Строка(НайденныеОстатки.МестоХранения);
		
		Остатки.Добавить(ОстатокXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОстаткиТоваров

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СООБЩЕНИЙ HL7
#Область ОбработкаСообщенийHL7

// Определяет тип сообщения МИС и передает управление обработке сообщений.
//
// Параметры:
//  Сообщение - ОбъектXDTO - сообщение, содержащее в своем теле данные о регистрации
//                           пациентов и их движении в стандарте в формате HL7 v3 PRPA Messages,
//                           или сообщение, содержащее в своем теле медицинский документ в формате HL7 CDA R2.
//
// Возвращаемое значение:
//   ОбъектXDTO - ответ на сообщение от МИС.
//
Функция ОбработатьСообщениеHL7(Знач Сообщение) Экспорт
	
	ТипСообщения = Сообщение.Тип();
	Если ТипСообщения = ТипHL7("PRPA_IN402001UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.Госпитализация);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN402002UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ИзменениеСведений);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN402003UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.Выписка);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN402004UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.СамовольноеПокиданиеСтационара);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN402006UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаГоспитализации);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN402007UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаВыписки);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN302011UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ПереводПациента);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN302012UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаПеревода);
	ИначеЕсли ТипСообщения = ТипHL7("PRPA_IN201304UV02") Тогда
		Возврат ОбработатьСообщениеОДвиженииПациентовВСтационаре(
			Сообщение,
			Перечисления.ТипыСообщенийОДвиженииПациентов.ОбъединениеПациентов);
	ИначеЕсли ТипСообщения = ТипHL7("RCMR_IN000002UV02") Тогда
		Возврат ОбработатьВходящееСообщение(Сообщение);
	Иначе
		ВызватьИсключение НСтр("ru='Данный тип сообщения не обрабатывается:'") + " " + ТипСообщения;
	КонецЕсли;
	
	
КонецФункции

Функция ОбработатьВходящееСообщение(Документ)
	
	ЗаголовокСообщения = ПолучитьЗаголовокСообщения(Документ);
	
	НачатьТранзакцию();
	
	Попытка
		
		Сообщение = ПолучитьВложенноеСообщение(Документ);
		ТипСообщения = Сообщение.Тип();
		Если ТипСообщения = ТипHL7("POCD_MT000040.ClinicalDocument") Тогда
			ЗагрузитьНазначенияВрача(Сообщение);
		Иначе
			ВызватьИсключение НСтр("ru='Данный тип сообщения не обрабатывается:'") + " " + ТипСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ОписаниеОшибки();
		
		ЗаголовокСообщения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменСМИС.ОбработкаСообщенийHL7'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СообщениеОбОшибке);
		
	КонецПопытки;
	
	Возврат СформироватьОтветНаСообщение(ЗаголовокСообщения);
	
КонецФункции

Функция ПолучитьВложенноеСообщение(Документ)
	
	Сообщение = Документ.controlActProcess.text;
	Если Сообщение = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Отсутствует ожидаемый элемент ""controlActProcess/text""'");
	КонецЕсли;
	
	ТекстСообщения = Сообщение.Последовательность().ПолучитьТекст(0);
	Пакет = ПолучитьСодержимоеMIMEПакета(ТекстСообщения);
	
	Если Пакет.Секции.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не удалось обнаружить вложенное сообщение.'");
	КонецЕсли;
	
	ДвоичныеДанные = Base64Значение(Пакет.Секции[0].Тело);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Значение = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипHL7("POCD_MT000040.ClinicalDocument"));
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Значение;
	
КонецФункции

// MCCI_IN000002UV01
Функция СформироватьОтветНаСообщение(ЗаголовокСообщения)
	
	Если ЗаголовокСообщения.РежимОтвета = "NE" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьОшибки = ЗаголовокСообщения.Свойство("СообщениеОбОшибке");
	Если ЗаголовокСообщения.РежимОтвета = "ER" И Не ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСообщения = ТипHL7("MCCI_IN000002UV01");
	ТипИД = ТипHL7("II");
	ТипДата = ТипHL7("TS");
	ТипКод = ТипHL7("CS");
	
	Сообщение = СоздатьОбъектXDTO(ТипСообщения);
	
	Сообщение.id = СоздатьОбъектXDTO(ТипИД);
	Сообщение.id.root = Строка(Новый УникальныйИдентификатор);
	
	Сообщение.interactionId = СоздатьОбъектXDTO(ТипИД);
	Сообщение.interactionId.root = "2.16.840.1.113883.1.6";
	Сообщение.interactionId.extension = "MCCI_IN000002UV01";
	
	Сообщение.creationTime = СоздатьОбъектXDTO(ТипДата);
	Сообщение.creationTime.value = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss");
	
	Сообщение.processingCode = СоздатьОбъектXDTO(ТипКод);
	Сообщение.processingCode.code = "P";
	
	Сообщение.processingModeCode = СоздатьОбъектXDTO(ТипКод);
	Сообщение.processingModeCode.code = "T";
	
	Сообщение.acceptAckCode = СоздатьОбъектXDTO(ТипКод);
	Сообщение.acceptAckCode.code = "NE";
	
	ТипПолучателя = ТипСообщения.Свойства.Получить("receiver").Тип;
	ТипУстройства = ТипПолучателя.Свойства.Получить("device").Тип;
	Получатель = СоздатьОбъектXDTO(ТипПолучателя);
	Получатель.typeCode = "RCV";
	Получатель.device = СоздатьОбъектXDTO(ТипУстройства);
	Получатель.device.classCode = "DEV";
	Получатель.device.determinerCode = "INSTANCE";
	Получатель.device.id.Добавить(СоздатьОбъектXDTO(ТипИД));
	Получатель.device.id[0].nullflavor = "NI";
	
	Сообщение.receiver.Добавить(Получатель);
	
	ТипОтправителя = ТипСообщения.Свойства.Получить("sender").Тип;
	ТипУстройства = ТипОтправителя.Свойства.Получить("device").Тип;
	Отправитель = СоздатьОбъектXDTO(ТипОтправителя);
	Отправитель.typeCode = "SND";
	Отправитель.device = СоздатьОбъектXDTO(ТипУстройства);
	Отправитель.device.classCode = "DEV";
	Отправитель.device.determinerCode = "INSTANCE";
	Отправитель.device.id.Добавить(СоздатьОбъектXDTO(ТипИД));
	Отправитель.device.id[0].nullflavor = "NI";
	
	Сообщение.sender = Отправитель;
	
	ТипТелоСообщения = ТипСообщения.Свойства.Получить("acknowledgement").Тип;
	ТипИсходноеСообщение = ТипТелоСообщения.Свойства.Получить("targetMessage").Тип;
	
	ТелоСообщения = СоздатьОбъектXDTO(ТипТелоСообщения);
	Сообщение.acknowledgement.Добавить(ТелоСообщения);
	
	ТелоСообщения.typeCode = ?(ЕстьОшибки, "AE", "AA");
	ТелоСообщения.targetMessage = СоздатьОбъектXDTO(ТипИсходноеСообщение);
	ТелоСообщения.targetMessage.id = СоздатьОбъектXDTO(ТипИД);
	ТелоСообщения.targetMessage.id.root = Строка(ЗаголовокСообщения.УИД);
	
	Если ЕстьОшибки Тогда
		
		ТипДетали = ТипТелоСообщения.Свойства.Получить("acknowledgementDetail").Тип;
		Детали = СоздатьОбъектXDTO(ТипДетали);
		ТелоСообщения.acknowledgementDetail.Добавить(Детали);
		Детали.typeCode = "E";
		Детали.text = СоздатьОбъектXDTO(ТипHL7("ED"));
		Детали.text.Последовательность().Добавить(ЗаголовокСообщения.СообщениеОбОшибке, Неопределено);
		
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ПолучитьЗаголовокСообщения(Документ)
	
	ЗаголовокСообщения = Новый Структура;
	
	ЗаголовокСообщения.Вставить("УИД", Документ.id.root);
	ЗаголовокСообщения.Вставить("Дата", ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(Документ.creationTime.value));
	
	ЗаголовокСообщения.Вставить("НазначениеСообщения", Документ.processingCode.code);
	ЗаголовокСообщения.Вставить("РежимОбработки", Документ.processingModeCode.code);
	
	ЗаголовокСообщения.Вставить("РежимОтвета", Документ.acceptAckCode.code);
	
	Возврат ЗаголовокСообщения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка назначений врача
#Область НазначенияВрача

// Загружает документ Назначение врача из МИС.
//
// Параметры:
//  ДанныеДокумента - ОбъектXDTO - сообщение, содержащее в своем теле медицинский документ в формате HL7 CDA R2.
//
Процедура ЗагрузитьНазначенияВрача(Знач ДанныеДокумента) Экспорт
	
	// Проверка версии стандарта (элемент typeid)
	root = "2.16.840.1.113883.1.3";
	extension ="POCD_HD000040";
	Если Не ДанныеДокумента.typeid.root = root Или Не ДанныеДокумента.typeid.extension = extension Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестная версия стандарта. (root=""%1"", extension=""%2"")'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке,
			ДанныеДокумента.typeid.root,
			ДанныеДокумента.typeid.extension);
	КонецЕсли;
	
	// Проверка типа документа (элемент code)
	code = "DRUG";
	codeSystem = "1.2.643.5.1.13.2.7.1.18";
	codeSystemName = "Система кодирования секций компонентов CDA";
	Если Не ДанныеДокумента.code.code = code
		Или Не ДанныеДокумента.code.codeSystem = codeSystem
		Или Не ДанныеДокумента.code.codeSystemName = codeSystemName Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный тип документа. (code=""%1"", codeSystem=""%2"", codeSystemName = ""%3"")'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке,
			ДанныеДокумента.code.code,
			ДанныеДокумента.code.codeSystem,
			ДанныеДокумента.code.codeSystemName);
	КонецЕсли;
	
	Документ = ПолучитьСтруктуруДокумента();
	
	// Уникальный идентификатор загружаемого документа (элемент id)
	Если Не ПолучитьДанныеИдентификатораОбъекта(ДанныеДокумента.id, Документ.УИД) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не указан UUID документа.'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Документ.ВерсияДокумента = ПолучитьВерсиюДокумента(ДанныеДокумента);
	Документ.Дата = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеДокумента.effectiveTime.value);
	
	ПолучитьДанныеВрача(Документ, ДанныеДокумента.author[0]);
	
	ПолучитьДанныеОтделения(Документ, ДанныеДокумента.recordTarget[0].patientRole.providerOrganization);
	ПолучитьДанныеМедицинскойКарты(Документ, ДанныеДокумента.componentOf);
	ПолучитьДанныеОрганизации(Документ, ДанныеДокумента.custodian);
	
	ПолучитьТЧДокумента(Документ, ДанныеДокумента.component);
	
	Если ИспользуетсяОбменИзменениями(Документ) Тогда
		ЗаписатьИзменениеНазначенияВрача(Документ);
	Иначе
		ЗаписатьНазначениеВрача(Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяОбменИзменениями(Документ)
	
	Возврат Документ.ВерсияДокумента > 0;
	
КонецФункции

Процедура ЗаписатьИзменениеНазначенияВрача(Документ)
	
	Если Не ПроверитьВерсиюДокумента(Документ) Тогда
		ВызватьИсключение НСтр("ru='Сообщение обмена было принято ранее'");
	КонецЕсли;
	
	ЛистНазначения = ПолучитьЛистНазначенияДляРедактирования(Документ);
	Если ЛистНазначения.ЭтоНовый() Тогда
		ЗаполнитьНазначениеВрача(ЛистНазначения, Документ);
	Иначе
		// TODO: Записать изменение листа назначения 
		ВызватьИсключение НСтр("ru='Обмен изменениями не поддерживается. Принимаются только текущее состояние листа назначения (версия документа 0).'");
	КонецЕсли;
	
	ЗаписатьЛистНазначения(ЛистНазначения);
	
КонецПроцедуры

Процедура ЗаписатьНазначениеВрача(Документ)
	
	ЛистНазначения = ПолучитьЛистНазначенияДляРедактирования(Документ);
	ЗаполнитьНазначениеВрача(ЛистНазначения, Документ);
	ЗаписатьЛистНазначения(ЛистНазначения);
	
КонецПроцедуры

Функция ПроверитьВерсиюДокумента(Документ)

	Назначение = Документы.НазначениеВрача.ПолучитьСсылку(Документ.УИД);
	
	Возврат (Не ОбщегоНазначения.СсылкаСуществует(Назначение)
				Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "ВерсияДокумента") < Документ.ВерсияДокумента);
	
КонецФункции

Функция ПолучитьЛистНазначенияДляРедактирования(Документ)
	
	ЛистНазначенияСсылка = Документы.НазначениеВрача.ПолучитьСсылку(Документ.УИД);
	Если ОбщегоНазначения.СсылкаСуществует(ЛистНазначенияСсылка) Тогда
		Если ТранзакцияАктивна() Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.НазначениеВрача");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЛистНазначенияСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		КонецЕсли;
		ЛистНазначения = ЛистНазначенияСсылка.ПолучитьОбъект();
	Иначе
		ЛистНазначения = Документы.НазначениеВрача.СоздатьДокумент();
		ЛистНазначения.УстановитьСсылкуНового(ЛистНазначенияСсылка);
	КонецЕсли;
	
	Возврат ЛистНазначения;
	
КонецФункции

Процедура ЗаполнитьНазначениеВрача(ЛистНазначения, Документ)
	
	Если ЛистНазначения.ЭтоНовый() Тогда
		ЛистНазначения.Заполнить(Неопределено);
	Иначе
		ЛистНазначения.ЛС_Назначения.Очистить();
		ЛистНазначения.РасписаниеНазначения.Очистить();
	КонецЕсли;
	
	МедицинскаяКарта = ОпределитьМедицинскуюКарту(Документ.МедицинскаяКарта);
	Организация = ОпределитьОрганизацию(Документ.Организация);
	Отделение = ОпределитьОтделение(Документ.Отделение);
	Если Не ЗначениеЗаполнено(Отделение) Тогда
		Место = РегистрыСведений.ДвиженияПациентов.СрезПоследних(Документ.Дата, Новый Структура("КартаПациента", МедицинскаяКарта));
		Если Место.Количество() > 0 Тогда
			Отделение = Место[0].Отделение;
		КонецЕсли;
	КонецЕсли;
	
	ЛистНазначения.Дата = Документ.Дата;
	ЛистНазначения.Врач = Документ.Врач.ФИО;
	ЛистНазначения.Организация = Организация;
	ЛистНазначения.Пациент = МедицинскаяКарта;
	ЛистНазначения.Отделение = Отделение;
	ЛистНазначения.ВерсияДокумента = Документ.ВерсияДокумента;
	
	ЗагрузитьНазначения(ЛистНазначения, Документ.Назначения);
	
КонецПроцедуры

Функция ОпределитьМедицинскуюКарту(ОписаниеМедицинскойКарты)
	
	МедицинскаяКарта = Справочники.МедицинскиеКарты.ПолучитьСсылку(ОписаниеМедицинскойКарты.УИД);
	МедКартаОтсутствует = Не ОбщегоНазначения.СсылкаСуществует(МедицинскаяКарта);
	Если МедКартаОтсутствует Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружена медицинская карта пациента. Номер карты: %1. Ключ поиска: %2'"),
			?(ПустаяСтрока(ОписаниеМедицинскойКарты.НомерКарты), НСтр("ru = '<информация отсутствует>'"), ОписаниеМедицинскойКарты.НомерКарты),
			ОписаниеМедицинскойКарты.УИД);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат МедицинскаяКарта;
	
КонецФункции

Функция ОпределитьОрганизацию(ОписаниеОрганизации)
	
	Если ТипЗнч(ОписаниеОрганизации.УИД) = Тип("УникальныйИдентификатор") Тогда
		Организация = Справочники.Организации.ПолучитьСсылку(ОписаниеОрганизации.УИД);
		ОрганизацияОтсутствует = Не ОбщегоНазначения.СсылкаСуществует(Организация);
	Иначе
		Организация = Справочники.Организации.НайтиПоРеквизиту("КодOID", ОписаниеОрганизации.УИД);
		ОрганизацияОтсутствует = Организация.Пустая();
	КонецЕсли;
	Если ОрганизацияОтсутствует Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружена организация. Наименование: %1. Ключ поиска: %2'"),
			?(ПустаяСтрока(ОписаниеОрганизации.Наименование), НСтр("ru = '<информация отсутствует>'"), ОписаниеОрганизации.Наименование),
			ОписаниеОрганизации.УИД);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция ОпределитьОтделение(ОписаниеОтделения)
	
	Если Не ЗначениеЗаполнено(ОписаниеОтделения.УИД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОтделения.УИД) = Тип("УникальныйИдентификатор") Тогда
		Отделение = Справочники.ОтделенияОрганизаций.ПолучитьСсылку(ОписаниеОтделения.УИД);
		ОтделениеОтсутствует = Не ОбщегоНазначения.СсылкаСуществует(Отделение);
	Иначе
		Отделение = Справочники.ОтделенияОрганизаций.НайтиПоРеквизиту("КодOID", ОписаниеОтделения.УИД);
		ОтделениеОтсутствует = Отделение.Пустая();
	КонецЕсли;
	Если ОтделениеОтсутствует Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отсутствует отделение. Наименование: %1. Код: %2. Ключ поиска: %3'"),
			?(ПустаяСтрока(ОписаниеОтделения.Наименование), НСтр("ru = '<информация отсутствует>'"), ОписаниеОтделения.Наименование),
			?(ПустаяСтрока(ОписаниеОтделения.Код), НСтр("ru = '<информация отсутствует>'"), ОписаниеОтделения.Код),
			ОписаниеОтделения.УИД);
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Отделение;
	
КонецФункции

Процедура ЗаписатьЛистНазначения(ЛистНазначения)
	
	ШаблонСообщенияОбОшибке = НСтр("ru='Не удалось записать документ: %1'");
	Если ЛистНазначения.ПроверитьЗаполнение() Тогда
		Попытка
			ЛистНазначения.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщенияОбОшибках = "";
			Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
				СообщенияОбОшибках = СообщенияОбОшибках + Символы.ПС + Сообщение.Текст;
			КонецЦикла;
			ВызватьИсключение СтрЗаменить(ШаблонСообщенияОбОшибке, "%1", ОписаниеОшибки() + Символы.ПС + СообщенияОбОшибках);
		КонецПопытки;
	Иначе
		СообщенияОбОшибках = "";
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			СообщенияОбОшибках = СообщенияОбОшибках + Символы.ПС + Сообщение.Текст;
		КонецЦикла;
		ВызватьИсключение СтрЗаменить(ШаблонСообщенияОбОшибке, "%1", СообщенияОбОшибках);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНазначения(ЛистНазначения, Назначения)
	
	ТаблицаНазначений = Новый ТаблицаЗначений;
	ТаблицаНазначений.Колонки.Добавить("УИДНазначения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаНазначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНазначений.Колонки.Добавить("ТорговоеНаименование", Новый ОписаниеТипов("СправочникСсылка.ТорговыеНаименования"));
	ТаблицаНазначений.Колонки.Добавить("ДействующиеВеществаМНН", Новый ОписаниеТипов("СправочникСсылка.ДействующиеВеществаМНН"));
	ТаблицаНазначений.Колонки.Добавить("ФормаВыпуска", Новый ОписаниеТипов("СправочникСсылка.ФормыВыпуска"));
	ТаблицаНазначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаНазначений.Колонки.Добавить("ИсточникФинансирования", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансирования"));
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("УИДНазначения", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПериодов.Колонки.Добавить("ДатаИсполнения", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПериодов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("КоличествоИсполнено", Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("КоличествоДозИсполнено", Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("КоличествоОтменено", Новый ОписаниеТипов("Число"));
	
	НаименованиеЕдиницыШтук = Строка(ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук());
	
	Для Каждого Назначение Из Назначения Цикл
		
		Попытка
			ОписаниеПрепарата = ПолучитьОписаниеПоФОЛСОтМИС(Назначение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Строка: %1. %2'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, Назначение.УИД, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНазначения(ОписаниеПрепарата, Назначение.ЕдиницаИзмерения.НаименованиеРЛС);
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(
				Новый Структура(
					"Наименование, ТипЕдиницы",
					Назначение.ЕдиницаИзмерения.НаименованиеРЛС,
					Перечисления.ТипыЕдиницИзмерения.Вес),
				Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНазначения(ОписаниеПрепарата, НаименованиеЕдиницыШтук);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СообщениеОбОшибке = НСтр("ru='Строка: %1. Некорректный параметр единица дозировки: %2'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, Назначение.УИД, Назначение.ЕдиницаИзмерения.НаименованиеРЛС);
		КонецЕсли;
		
		Если ТипЗнч(ЕдиницаИзмерения) = Тип("Массив") И ЕдиницаИзмерения.Количество() > 1 Тогда
			СообщениеОбОшибке = НСтр("ru='Строка: %1. Не удалось однозначно определить единицу дозировки'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке, Назначение.УИД);
		КонецЕсли;
		
		ИсточникФинансирования = Справочники.ИсточникиФинансирования.ПустаяСсылка();
		Если ЗначениеЗаполнено(Назначение.ИсточникФинансирования) Тогда
			ИсточникФинансирования = Справочники.ИсточникиФинансирования.НайтиПоНаименованию(
				Назначение.ИсточникФинансирования,
				Истина);
		КонецЕсли;
		
		СтрокаНазначения = ТаблицаНазначений.Добавить();
		СтрокаНазначения.УИДНазначения = Назначение.УИД;
		СтрокаНазначения.Номенклатура = ОписаниеПрепарата.Номенклатура;
		СтрокаНазначения.ТорговоеНаименование = ОписаниеПрепарата.ТорговоеНаименование;
		СтрокаНазначения.ДействующиеВеществаМНН = ОписаниеПрепарата.ДействующиеВеществаМНН;
		СтрокаНазначения.ФормаВыпуска = ОписаниеПрепарата.ФормаВыпуска;
		СтрокаНазначения.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаНазначения.ИсточникФинансирования = ИсточникФинансирования;
		
		Для Каждого Период Из Назначение.Период Цикл
			
			СтрокаПериода = ТаблицаПериодов.Добавить();
			СтрокаПериода.УИДНазначения = Назначение.УИД;
			СтрокаПериода.ДатаИсполнения = Период;
			Если Назначение.Событие = "Назначение" Тогда
				СтрокаПериода.Количество = Назначение.КоличествоЗаСутки;
			ИначеЕсли Назначение.Событие = "ОтменаНазначения" Тогда
				СтрокаПериода.КоличествоОтменено = Назначение.КоличествоЗаСутки;
			ИначеЕсли Назначение.Событие = "Исполнение" Тогда
				СтрокаПериода.КоличествоИсполнено = Назначение.КоличествоЗаСутки;
				СтрокаПериода.КоличествоДозИсполнено = Назначение.КоличествоРазовыхДозЗаСутки;
			ИначеЕсли Назначение.Событие = "ОтменаИсполнения" Тогда
				СтрокаПериода.КоличествоИсполнено = - Назначение.КоличествоЗаСутки;
				СтрокаПериода.КоличествоДозИсполнено = -Назначение.КоличествоРазовыхДозЗаСутки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНазначений.Свернуть("УИДНазначения, Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения, ИсточникФинансирования");
	ТаблицаПериодов.Свернуть("УИДНазначения, ДатаИсполнения", "Количество, КоличествоИсполнено, КоличествоДозИсполнено, КоличествоОтменено");
	
	ТаблицаНазначенийКопия = ТаблицаНазначений.Скопировать();
	ТаблицаНазначенийКопия.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	ТаблицаНазначенийКопия.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ТаблицаНазначенийКопия.Свернуть("УИДНазначения", "КоличествоСтрок");
	
	КлючСтроки = 0;
	Для Каждого Назначение Из ТаблицаНазначенийКопия Цикл
		
		КлючСтроки = КлючСтроки + 1;
		СтрокиНазначений = ТаблицаНазначений.НайтиСтроки(Новый Структура("УИДНазначения", Назначение.УИДНазначения));
		СтрокаДокумента = ЛистНазначения.ЛС_Назначения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокиНазначений[СтрокиНазначений.ВГраница()]);
		СтрокаДокумента.КлючСтроки = КлючСтроки;
		
		СтрокиПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("УИДНазначения", Назначение.УИДНазначения));
		Для Каждого Период Из СтрокиПериодов Цикл
			
			СтрокаПериода = ЛистНазначения.РасписаниеНазначения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПериода, Период);
			СтрокаПериода.КлючСтроки = КлючСтроки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЕдиницуИзмеренияНазначения(ДанныеНазначения, НаименованиеЕдиницы)
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(НаименованиеЕдиницы) Тогда
		
		Если ЗначениеЗаполнено(ДанныеНазначения.Номенклатура) Тогда
			Запрос.Текст = НоменклатураСервер.ТекстЗапросаВыбораЕдиницНоменклатуры("ЕдиницыИзмеренияОтбора");
			Запрос.УстановитьПараметр("Номенклатура", ДанныеНазначения.Номенклатура);
		Иначе
			Запрос.Текст = АптечныеТовары.ТекстЗапросаВыбораЕдиницАптечногоТовара("ЕдиницыИзмеренияОтбора");
			Запрос.УстановитьПараметр("ТорговоеНаименование"   , ДанныеНазначения.ТорговоеНаименование);
			Запрос.УстановитьПараметр("ДействующиеВеществаМНН" , ДанныеНазначения.ДействующиеВеществаМНН);
			Запрос.УстановитьПараметр("ФормаВыпуска"           , ДанныеНазначения.ФормаВыпуска);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Единицы.Ссылка КАК Ссылка
		|ИЗ
		|	ЕдиницыИзмеренияОтбора КАК Единицы
		|ГДЕ
		|	Единицы.Наименование = &НаименованиеЕдиницы
		|УПОРЯДОЧИТЬ ПО
		|	Единицы.Порядок,
		|	Единицы.Коэффициент УБЫВ
		|";
		
		Запрос.УстановитьПараметр("НаименованиеЕдиницы", НаименованиеЕдиницы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЕдиницаИзмерения = Выборка.Ссылка;
		КонецЕсли;
		
	Иначе
		
		// Если НаименованиеЕдиницы не заполнено, то получаем базовую единицу измерения в качестве единицы измерения назначения.
		Если ЗначениеЗаполнено(ДанныеНазначения.Номенклатура) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеНазначения.Номенклатура, Новый Структура("ЕдиницаИзмерения", "ЭлементКАТ.БазоваяЕдиницаИзмеренияКАТ"));
			ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
		Иначе
			
			Запрос.Текст = АптечныеТовары.ТекстЗапросаВыбораЕдиницАптечногоТовара("ЕдиницыИзмеренияОтбора");
			Запрос.УстановитьПараметр("ТорговоеНаименование"   , ДанныеНазначения.ТорговоеНаименование);
			Запрос.УстановитьПараметр("ДействующиеВеществаМНН" , ДанныеНазначения.ДействующиеВеществаМНН);
			Запрос.УстановитьПараметр("ФормаВыпуска"           , ДанныеНазначения.ФормаВыпуска);
			
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УпаковкиПрепарата.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	ВТУпаковкиПрепарата КАК УпаковкиПрепарата
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			ИначеЕсли Выборка.Количество() > 1 Тогда
				// Если не удалось однозначно определить единицу измерения назначения - возвращаем масссив единиц измерения.
				ЕдиницаИзмерения = Новый Массив;
				Пока Выборка.Следующий() Цикл
					ЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(ОписаниеЕдиницыИзмерения, ВызыватьИсключение = Истина)
	
	ЕдиницаИзмерения = АптечныеТовары.НайтиСоздатьЭлементСправочника(
		Метаданные.Справочники.ЕдиницыИзмерения,
		Новый Структура(
			"Наименование, ТипЕдиницы",
			ОписаниеЕдиницыИзмерения.Наименование,
			ОписаниеЕдиницыИзмерения.ТипЕдиницы));
	
	Если ВызыватьИсключение И Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		СообщениеОбОшибке = НСтр("ru='Не найдена единица измерения: %1 %2'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке, ОписаниеЕдиницыИзмерения.Наименование, ОписаниеЕдиницыИзмерения.ТипЕдиницы);
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ПолучитьСтруктуруДокумента()
	
	Документ = Новый Структура;
	
	Документ.Вставить("УИД");
	Документ.Вставить("Дата");
	Документ.Вставить("ВерсияДокумента");
	
	Документ.Вставить("Организация", Новый Структура("УИД, Наименование"));
	Документ.Вставить("Отделение", ПустоеОписаниеОтделения());
	
	Документ.Вставить("Пациент", ПустоеОписаниеПациента());
	
	Документ.Вставить("Врач", Новый Структура("УИД, ФИО, ТабельныйНомер"));
	
	Документ.Вставить("МедицинскаяКарта", ПустоеОписаниеМедицинскойКарты());
	
	Документ.Вставить("Назначения", Новый Массив());
	
	Возврат Документ;
	
КонецФункции

Функция ПолучитьСтруктуруТЧ()
	
	СтрокаТЧ = Новый Структура;
	
	СтрокаТЧ.Вставить("УИД");
	СтрокаТЧ.Вставить("Период", Новый Массив());
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(СтрокаТЧ, ПолучитьСтруктуруФОЛС());
	
	СтрокаТЧ.Вставить("ЕдиницаИзмерения", Новый Структура("Наименование, НаименованиеРЛС"));
	СтрокаТЧ.Вставить("Количество"); // разовая доза
	СтрокаТЧ.Вставить("КоличествоЗаСутки"); // суточная доза
	СтрокаТЧ.Вставить("КоличествоРазовыхДозЗаСутки");
	
	СтрокаТЧ.Вставить("ИсточникФинансирования", Неопределено);
	
	СтрокаТЧ.Вставить("Событие", "Назначение");
	
	Возврат СтрокаТЧ;
	
КонецФункции

Функция ПолучитьСтруктуруФОЛС()
	
	СтруктураФОЛС = Новый Структура;
	СтруктураФОЛС.Вставить("Номенклатура", Новый Структура("УИД, НомерКЛПРЛС, КодСМНН"));
	СтруктураФОЛС.Вставить("ТорговоеНаименование", Новый Структура("Наименование"));
	СтруктураФОЛС.Вставить("ДействующиеВеществаМНН", Новый Структура("Наименование"));
	
	ФормаВыпуска = Новый Структура;
	ФормаВыпуска.Вставить("ЛекарственнаяФорма", Новый Структура("Наименование"));
	ФормаВыпуска.Вставить("МассаЛекарственнойФормы", Новый Структура("Количество, ЕдиницаИзмерения"));
	ФормаВыпуска.Вставить("КонцентрацияЛекарственнойФормы", Новый Структура("Количество, ЕдиницаИзмерения"));
	ФормаВыпуска.Вставить("ЕдиницДействияЛекарственнойФормы", Новый Структура("Количество, ЕдиницаИзмерения"));
	ФормаВыпуска.Вставить("РазмерЛекарственнойФормы", Новый Структура("Количество, ЕдиницаИзмерения"));
	
	СтруктураФОЛС.Вставить("ФормаВыпуска", ФормаВыпуска);
	
	Возврат СтруктураФОЛС;
	
КонецФункции

Функция ПолучитьОписаниеПоФОЛСОтМИС(ОписаниеОтМИС)

	Номенклатура = Неопределено;
	ЭлементКАТ = Справочники.РегистрЛекарственныхСредств.ПустаяСсылка();
	ТорговоеНаименование = Неопределено;
	ДействующиеВеществаМНН = Неопределено;
	ФормаВыпуска = Справочники.ФормыВыпуска.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОписаниеОтМИС.Номенклатура.УИД) Тогда
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(ОписаниеОтМИС.Номенклатура.УИД);
		Если Не ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
			СообщениеОбОшибке = НСтр("ru='Некорректный параметр Номенклатура: %1'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", ОписаниеОтМИС.Номенклатура.УИД);
		КонецЕсли;
			
		Описание = НоменклатураСервер.ОписаниеНоменклатуры(Номенклатура);
		Если Описание.ЭтоЛекарственноеСредство Тогда
			ТорговоеНаименование = Описание.ТорговоеНаименование;
			ДействующиеВеществаМНН = Описание.ДействующиеВеществаМНН;
			ФормаВыпуска = Описание.ФормаВыпуска;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОтМИС.Номенклатура.КодСМНН) Тогда
		
		СМНН = Справочники.СМНН.НайтиПоРеквизиту("КодЕСКЛП", ОписаниеОтМИС.Номенклатура.КодСМНН);
		Если Не ОбщегоНазначения.СсылкаСуществует(СМНН) Тогда
			СообщениеОбОшибке = НСтр("ru='Некорректный параметр Номенклатура КодСМНН: %1'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", ОписаниеОтМИС.Номенклатура.КодСМНН);
		КонецЕсли;
		
		Описание = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СМНН, "ДействующиеВеществаМНН, ФормаВыпуска");
		ДействующиеВеществаМНН = Описание.ДействующиеВеществаМНН;
		ФормаВыпуска = Описание.ФормаВыпуска;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОтМИС.Номенклатура.НомерКЛПРЛС) Тогда
		
		Если СтрДлина(ОписаниеОтМИС.Номенклатура.НомерКЛПРЛС) = 41 Тогда
			// В свойстве НомерКЛПРЛС передается Код ЕСКЛП.
			ЭлементКАТ = Справочники.КЛП.НайтиПоРеквизиту(
				"КодЕСКЛП", ОписаниеОтМИС.Номенклатура.НомерКЛПРЛС);
		Иначе
			ЭлементКАТ = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту(
				"НомерРЛС", ОписаниеОтМИС.Номенклатура.НомерКЛПРЛС);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭлементКАТ) Тогда
			СообщениеОбОшибке = НСтр("ru='Некорректный параметр Номенклатура КЛП/РЛС: %1'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", ОписаниеОтМИС.Номенклатура.НомерКЛПРЛС);
		КонецЕсли;
		
		Номенклатура = АптечныеТовары.ПолучитьНоменклатуруПоЭлементуКАТ(ЭлементКАТ);
		Описание = АптечныеТовары.ОписаниеПрепарата(ЭлементКАТ);
		ТорговоеНаименование = Описание.ТорговоеНаименование;
		ДействующиеВеществаМНН = Описание.ДействующиеВеществаМНН;
		ФормаВыпуска = Описание.ФормаВыпуска;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОтМИС.ТорговоеНаименование.Наименование) Тогда
		
		Если Не ЗначениеЗаполнено(ТорговоеНаименование) Тогда
			ТорговоеНаименование = Справочники.ТорговыеНаименования.НайтиПоНаименованию(
				ОписаниеОтМИС.ТорговоеНаименование.Наименование, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТорговоеНаименование) Тогда
			СообщениеОбОшибке = НСтр("ru='Некорректный параметр Торговое наименование: %1'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", ОписаниеОтМИС.ТорговоеНаименование.Наименование);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОписаниеОтМИС.ДействующиеВеществаМНН.Наименование) Тогда
		
		Если ЗначениеЗаполнено(ДействующиеВеществаМНН) Тогда
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействующиеВеществаМНН.Ссылка
			|ИЗ
			|	Справочник.ДействующиеВеществаМНН КАК ДействующиеВеществаМНН
			|ГДЕ
			|	ДействующиеВеществаМНН.НаименованиеПолное ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""";
			Запрос.УстановитьПараметр("НаименованиеПолное",
				ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ОписаниеОтМИС.ДействующиеВеществаМНН.Наименование));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДействующиеВеществаМНН = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДействующиеВеществаМНН) Тогда
			СообщениеОбОшибке = НСтр("ru='Некорректный параметр Действующие вещества(МНН): %1'");
			ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "1", ОписаниеОтМИС.ДействующиеВеществаМНН.Наименование);
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ФормаВыпуска) Тогда
		
		ЕстьЗаполненныеПоля = Ложь;
		
		ПараметрыФормыВыпуска = Новый Структура;
		ПараметрыФормыВыпуска.Вставить("ЛекарственнаяФорма", Справочники.ЛекарственныеФормы.ПустаяСсылка());
		ПараметрыФормыВыпуска.Вставить("Количество", 0);
		ПараметрыФормыВыпуска.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		ПараметрыФормыВыпуска.Вставить("НеНормализованныеДанные", "");
		
		ЛекарственнаяФорма = Справочники.ЛекарственныеФормы.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.ЛекарственнаяФорма.Наименование) Тогда
			
			ПараметрыФормыВыпуска.ЛекарственнаяФорма = Справочники.ЛекарственныеФормы.НайтиПоНаименованию(
				ОписаниеОтМИС.ФормаВыпуска.ЛекарственнаяФорма.Наименование, Истина);
			Если Не ЗначениеЗаполнено(ПараметрыФормыВыпуска.ЛекарственнаяФорма) Тогда
				СообщениеОбОшибке = НСтр("ru='Некорректный параметр Лекарственная форма: %1'");
				ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", ОписаниеОтМИС.ФормаВыпуска.ЛекарственнаяФорма.Наименование);
			КонецЕсли;
			ЕстьЗаполненныеПоля = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.МассаЛекарственнойФормы.Количество)
			И ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.МассаЛекарственнойФормы.ЕдиницаИзмерения.Наименование) Тогда
			
			ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ОписаниеОтМИС.ФормаВыпуска.МассаЛекарственнойФормы.ЕдиницаИзмерения);
			
			ПараметрыФормыВыпуска.Количество = ОписаниеОтМИС.ФормаВыпуска.МассаЛекарственнойФормы.Количество;
			ПараметрыФормыВыпуска.ЕдиницаИзмерения = ЕдиницаИзмерения;
			ЕстьЗаполненныеПоля = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.КонцентрацияЛекарственнойФормы.Количество)
			И ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.КонцентрацияЛекарственнойФормы.ЕдиницаИзмерения.Наименование) Тогда
			
			ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ОписаниеОтМИС.ФормаВыпуска.КонцентрацияЛекарственнойФормы.ЕдиницаИзмерения);
			
			ПараметрыФормыВыпуска.Количество = ОписаниеОтМИС.ФормаВыпуска.КонцентрацияЛекарственнойФормы.Количество;
			ПараметрыФормыВыпуска.ЕдиницаИзмерения = ЕдиницаИзмерения;
			ЕстьЗаполненныеПоля = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.ЕдиницДействияЛекарственнойФормы.Количество)
			И ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.ЕдиницДействияЛекарственнойФормы.ЕдиницаИзмерения.Наименование) Тогда
			
			ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ОписаниеОтМИС.ФормаВыпуска.ЕдиницДействияЛекарственнойФормы.ЕдиницаИзмерения);
			
			ПараметрыФормыВыпуска.Количество = ОписаниеОтМИС.ФормаВыпуска.ЕдиницДействияЛекарственнойФормы.Количество;
			ПараметрыФормыВыпуска.ЕдиницаИзмерения = ЕдиницаИзмерения;
			ЕстьЗаполненныеПоля = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.РазмерЛекарственнойФормы.Количество)
			И ЗначениеЗаполнено(ОписаниеОтМИС.ФормаВыпуска.РазмерЛекарственнойФормы.ЕдиницаИзмерения.Наименование) Тогда
			
			ЕдиницаИзмерения = ОписаниеОтМИС.ФормаВыпуска.РазмерЛекарственнойФормы.ЕдиницаИзмерения;
			
			ПараметрыФормыВыпуска.НеНормализованныеДанные = ОписаниеОтМИС.ФормаВыпуска.РазмерЛекарственнойФормы.Количество + " " + ЕдиницаИзмерения;
			ЕстьЗаполненныеПоля = Истина;
			
		КонецЕсли;
		
		Если ЕстьЗаполненныеПоля Тогда
			
			ФормаВыпуска = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ФормыВыпуска, ПараметрыФормыВыпуска);
			Если ФормаВыпуска.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Некорректный параметр неизвестная форма выпуска: %1'");
				ПараметрыФормыВыпуска.Вставить("Характеристика", Справочники.ХарактеристикиЛекарственныхФорм.ПустаяСсылка());
				ВызватьИсключение СтрЗаменить(СообщениеОбОшибке, "%1", Справочники.ФормыВыпуска.СформироватьНаименование(ПараметрыФормыВыпуска));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеФОЛС = Новый Структура;
	ОписаниеФОЛС.Вставить("Номенклатура", Номенклатура);
	ОписаниеФОЛС.Вставить("ТорговоеНаименование", ТорговоеНаименование);
	ОписаниеФОЛС.Вставить("ДействующиеВеществаМНН", ДействующиеВеществаМНН);
	ОписаниеФОЛС.Вставить("ФормаВыпуска", ФормаВыпуска);
	
	Возврат ОписаниеФОЛС;
	
КонецФункции

Функция ПолучитьВерсиюДокумента(ДанныеДокумента)
	
	Версия = 0;
	Если Не ДанныеДокумента.versionNumber = Неопределено
		И Не ДанныеДокумента.versionNumber.value = Неопределено Тогда
		
		Версия = ДанныеДокумента.versionNumber.value;
		
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

Процедура ПолучитьДанныеВрача(Документ, ДанныеАвтора)
	
	ОписаниеАвтора = ДанныеАвтора.assignedAuthor;
	
	УИДВрача = Неопределено;
	ТабельныйНомер = Неопределено;
	ПолучитьДанныеИдентификатораОбъекта(
		ОписаниеАвтора.id[0],
		Документ.Врач.УИД,
		Документ.Врач.ТабельныйНомер);
	
	Если ОписаниеАвтора.assignedPerson <> Неопределено И ОписаниеАвтора.assignedPerson.name.Количество() Тогда
		Документ.Врач.ФИО = ПолучитьИмяПоОписанию(ОписаниеАвтора.assignedPerson.name[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеОтделения(Документ, ДанныеОтделения)
	
	Если ДанныеОтделения <> Неопределено Тогда
		ПолучитьДанныеИдентификатораОбъекта(
			ДанныеОтделения.id[0],
			Документ.Отделение.УИД);
		Если ДанныеОтделения.name.Количество() > 0 Тогда
			Документ.Отделение.Наименование = ПолучитьТекстИзОбъекта(ДанныеОтделения.name[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеМедицинскойКарты(Документ, ДанныеКарты)
	
	Если ДанныеКарты = Неопределено Или ДанныеКарты.encompassingEncounter.id.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеИдентификатораОбъекта(
		ДанныеКарты.encompassingEncounter.id[0],
		Документ.МедицинскаяКарта.УИД,
		Документ.МедицинскаяКарта.НомерКарты);
	
КонецПроцедуры

Процедура ПолучитьДанныеОрганизации(Документ, ДанныеОрганизации)
	
	ОписаниеОрганизации = ДанныеОрганизации.assignedCustodian.representedCustodianOrganization;
	
	ПолучитьДанныеИдентификатораОбъекта(
		ОписаниеОрганизации.id[0],
		Документ.Организация.УИД);
		
	Если ОписаниеОрганизации.Name <> Неопределено Тогда
		Документ.Организация.Наименование = ПолучитьТекстИзОбъекта(ОписаниеОрганизации.Name);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТЧДокумента(Документ, ДанныеДокумента)
	
	Если ДанныеДокумента.structuredBody = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЧДокумента = ДанныеДокумента.structuredBody.component[0].section;
	
	Для Сч = 0 По ТЧДокумента.entry.Количество() - 1  Цикл
	
		ОписаниеПозицииНазначения = ТЧДокумента.entry.Получить(Сч).substanceAdministration;
		Если ОписаниеПозицииНазначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНазначения = ПолучитьСтруктуруТЧ();
		
		УИДНазначения = Неопределено;
		ПолучитьДанныеИдентификатораОбъекта(ОписаниеПозицииНазначения.id[0], УИДНазначения);
		СтрокаНазначения.УИД = УИДНазначения;
		
		Если ОписаниеПозицииНазначения.id.Количество() > 1 Тогда
			СтрокаНазначения.ИсточникФинансирования = ОписаниеПозицииНазначения.id[1].extension;
		КонецЕсли;
		
		ПолучитьПериодНазначения(СтрокаНазначения, ОписаниеПозицииНазначения.effectiveTime);
		
		ПолучитьДозировкуНазначения(СтрокаНазначения, ОписаниеПозицииНазначения.doseQuantity);
		ПолучитьСуточнуюДозу(СтрокаНазначения, ОписаниеПозицииНазначения.maxDoseQuantity);
		ПолучитьКоличествоРазовыхДоз(СтрокаНазначения, ОписаниеПозицииНазначения.repeatNumber);
		
		Если Не ЗначениеЗаполнено(СтрокаНазначения.КоличествоЗаСутки) Тогда
			СтрокаНазначения.КоличествоЗаСутки = СтрокаНазначения.Количество * СтрокаНазначения.КоличествоРазовыхДозЗаСутки;
		КонецЕсли;
		
		ПолучитьОписаниеПрепарата(СтрокаНазначения, ОписаниеПозицииНазначения.consumable.manufacturedProduct.manufacturedLabeledDrug);
		ПолучитьОписаниеПрепарата(СтрокаНазначения, ОписаниеПозицииНазначения.consumable.manufacturedProduct.manufacturedMaterial);
		
		Статус = ОписаниеПозицииНазначения.moodCode;
		Отмена = ?(ОписаниеПозицииНазначения.negationInd = Неопределено, Ложь, ОписаниеПозицииНазначения.negationInd);
		
		Если Отмена Тогда
			Если Статус = "RQO" Тогда
				СтрокаНазначения.Событие = "ОтменаНазначения";
			Иначе // EVN
				СтрокаНазначения.Событие = "ОтменаИсполнения";
			КонецЕсли;
		Иначе
			Если Статус = "RQO" Тогда
				СтрокаНазначения.Событие = "Назначение";
			Иначе // EVN
				СтрокаНазначения.Событие = "Исполнение";
			КонецЕсли;
		КонецЕсли;
		
		Документ.Назначения.Добавить(СтрокаНазначения);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПолучитьПериодНазначения(СтрокаНазначения, СписокПериодов)
	
	ПериодыНазначения = СтрокаНазначения.Период;
	
	Тип_SXCM_TS = ТипHL7("SXCM_TS");
	Тип_IVL_TS = ТипHL7("IVL_TS");
	Тип_SXPR_TS = ТипHL7("SXPR_TS");
	
	Для Индекс = 0 По СписокПериодов.Количество() - 1 Цикл
		
		ТекПериод = СписокПериодов.Получить(Индекс);
		ТипПериода = ТекПериод.Тип();
		Если ТипПериода = Тип_SXCM_TS Тогда
			
			ТекДата = НачалоДня(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ТекПериод.value));
			ПериодыНазначения.Добавить(ТекДата);
			
		ИначеЕсли ТипПериода = Тип_IVL_TS Тогда
			
			Если ТекПериод.low = Неопределено Тогда
				ВызватьИсключение НСтр("ru='Ошибка разбора периода назначения: не указана дата начала периода(low)'");
			КонецЕсли;
			Если ТекПериод.high = Неопределено Тогда
				ВызватьИсключение НСтр("ru='Ошибка разбора периода назначения: не указана дата окончания периода(high)'");
			КонецЕсли;
			
			ДатаНачала = НачалоДня(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ТекПериод.low.value));
			Если Не ТекПериод.low.inclusive Тогда
				ДатаНачала = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ДатаНачала, "ДЕНЬ", 1);
			КонецЕсли;
			
			ДатаОкончания = НачалоДня(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ТекПериод.high.value));
			Если ТекПериод.high.inclusive Тогда
				ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ДатаОкончания, "ДЕНЬ", 1);
			КонецЕсли;
			
			КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ДатаНачала, ДатаОкончания, "ДЕНЬ");
			
			ТекДата = ДатаНачала;
			Для Сч = 1 По КоличествоДней Цикл
				ПериодыНазначения.Добавить(ТекДата);
				ТекДата = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДата, "ДЕНЬ", 1);
			КонецЦикла;
			
		ИначеЕсли ТипПериода = Тип_SXPR_TS Тогда
			ПолучитьПериодНазначения(СтрокаНазначения, ТекПериод.comp);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДозировкуНазначения(СтрокаНазначения, Данные)

	Если Данные.center <> Неопределено Тогда
		ДанныеДозировки = Данные.center;
	ИначеЕсли Данные.low <> Неопределено Тогда
		ДанныеДозировки = Данные.low;
	ИначеЕсли Данные.high <> Неопределено Тогда
		ДанныеДозировки = Данные.high;
	Иначе
		ТекстОшибки = НСтр("ru = 'Строка назначения [УИД]: неподдерживаемый формат представления разовой дозы (doseQuantity).'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СтрокаНазначения.Количество = ДанныеДозировки.value;
	
	СтрокаНазначения.ЕдиницаИзмерения.Наименование = ДанныеДозировки.unit;
	СтрокаНазначения.ЕдиницаИзмерения.НаименованиеРЛС =
		?(ДанныеДозировки.translation.Количество(), СтрЗаменить(ПолучитьТекстИзОбъекта(ДанныеДозировки.translation[0].originalText), "_", " "), "");
	
КонецПроцедуры

Процедура ПолучитьСуточнуюДозу(СтрокаНазначения, Данные)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Данные.denominator.value = 24 И Данные.denominator.unit = "h")
	   И Не (Данные.denominator.value = 1 И Данные.denominator.unit = "d") Тогда
		ТекстОшибки = НСтр("ru = 'Строка назначения [УИД]: ожидается суточная доза, а указана на период ""[Период]""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[УИД]", СтрокаНазначения.УИД);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[Период]", "" + Данные.denominator.value + " " + Данные.denominator.unit);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если СтрокаНазначения.ЕдиницаИзмерения.Наименование <> Данные.numerator.unit Тогда
		ТекстОшибки = НСтр("ru = 'Строка назначения [УИД]: не совпадают единицы измерения суточной ([ЕдиницаСуточная]) и разовой ([ЕдиницаРазовая]) доз.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[УИД]", СтрокаНазначения.УИД);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[ЕдиницаСуточная]", Данные.numerator.unit);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[ЕдиницаРазовая]", СтрокаНазначения.ЕдиницаИзмерения.Наименование);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СтрокаНазначения.КоличествоЗаСутки = Данные.numerator.value;
	
КонецПроцедуры

Процедура ПолучитьКоличествоРазовыхДоз(СтрокаНазначения, Данные)
	
	Если Данные = Неопределено Тогда
		СтрокаНазначения.КоличествоРазовыхДозЗаСутки = 1;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.value) Тогда
		ТекстОшибки = НСтр("ru = 'Строка назначения [УИД]: неподдерживаемый формат представления количества разовых доз (repeatNumber).'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[УИД]", СтрокаНазначения.УИД);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СтрокаНазначения.КоличествоРазовыхДозЗаСутки = Данные.value;
	
КонецПроцедуры

Процедура ПолучитьОписаниеПрепарата(СтрокаНазначения, ДанныеПрепарата)
	
	Если ДанныеПрепарата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПрепарата = ДанныеПрепарата.code;
	Если ОписаниеПрепарата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФОЛС = Новый Структура("Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска");
	
	Если ОписаниеПрепарата.codeSystemName = Неопределено Тогда
		// в поле code должен быть уникальный идентификатор номенклатуры
		СтрокаНазначения.Номенклатура.УИД = Новый УникальныйИдентификатор(ОписаниеПрепарата.code);
		
	ИначеЕсли (ОписаниеПрепарата.codeSystemName = "Узлы СМНН. ЕСКЛП" Или ОписаниеПрепарата.codeSystem = "1.2.643.5.1.13.13.99.2.611")
			И СтрДлина(ОписаниеПрепарата.code) = 41 Тогда
		
		СтрокаНазначения.Номенклатура.КодСМНН = Строка(ОписаниеПрепарата.code);
		
	ИначеЕсли ОписаниеПрепарата.codeSystemName = "КЛП. ЕСКЛП" Тогда
		
		Если СтрДлина(ОписаниеПрепарата.code) = 41 Тогда
			// В свойстве ОписаниеПрепарата.code передается Код ЕСКЛП.
			СтрокаНазначения.Номенклатура.НомерКЛПРЛС = Строка(ОписаниеПрепарата.code);
		КонецЕсли;
		
	ИначеЕсли ОписаниеПрепарата.codeSystemName = "RLS_NOMEN" Тогда
		
		Если СтрДлина(ОписаниеПрепарата.code) = 41 Тогда
			// В свойстве ОписаниеПрепарата.code передается Код ЕСКЛП.
			СтрокаНазначения.Номенклатура.НомерКЛПРЛС = Строка(ОписаниеПрепарата.code);
		Иначе
			// в поле code должен находится код РЛС справочника аптечных товаров
			СтрокаНазначения.Номенклатура.НомерКЛПРЛС = Число(ОписаниеПрепарата.code);
		КонецЕсли;
		
	ИначеЕсли ОписаниеПрепарата.codeSystemName = "RLS" Тогда
		
	КонецЕсли;	
		
	ПолучитьФормальноеОписание(СтрокаНазначения, ОписаниеПрепарата.translation);
	
КонецПроцедуры

Процедура ПолучитьФормальноеОписание(СтрокаНазначения, ДанныеФормальногоОписания)
	
	Для Сч = 0 По ДанныеФормальногоОписания.Количество() - 1 Цикл
		
		ЭлементОписания = ДанныеФормальногоОписания.Получить(Сч);
		Если ЭлементОписания.codeSystemName = "RLS_ACTMATTERS" Тогда
			
			СтрокаНазначения.ДействующиеВеществаМНН.Наименование = ПолучитьДействующиеВеществаМНН(ЭлементОписания);
			
		ИначеЕсли ЭлементОписания.codeSystemName = "RLS_TRADENAMES" Тогда
			
			СтрокаНазначения.ТорговоеНаименование.Наименование = ПолучитьТорговоеНаименование(ЭлементОписания);
			
		ИначеЕсли ЭлементОписания.codeSystemName = "RLS_CLSDRUGFORMS" Тогда
			
			ПолучитьФормуВыпуска(СтрокаНазначения.ФормаВыпуска, ЭлементОписания);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДействующиеВеществаМНН(Данные)
	
	Возврат СтрЗаменить(Данные.code, "_", " ");
	
КонецФункции

Функция ПолучитьТорговоеНаименование(Данные)
	
	Возврат СтрЗаменить(Данные.code, "_", " ");
	
КонецФункции

Процедура ПолучитьФормуВыпуска(ФормаВыпуска, Данные)
	
	ФормаВыпуска.ЛекарственнаяФорма.Наименование = СтрЗаменить(Данные.code, "_", " ");
	
	Для Сч = 0 По Данные.qualifier.Количество() - 1 Цикл
		
		ЭлементДанных = Данные.qualifier.Получить(Сч);
		
		Если ЭлементДанных.name = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЭлемента = ПолучитьКоличествоИЕдиницуИзмерения(ЭлементДанных.value);
		
		Если ЭлементДанных.name.code = "DFMASS" Тогда
			ЗаполнитьЗначенияСвойств(ФормаВыпуска.МассаЛекарственнойФормы, ПараметрыЭлемента);
		ИначеЕсли ЭлементДанных.name.code = "DFCONC" Тогда
			ЗаполнитьЗначенияСвойств(ФормаВыпуска.КонцентрацияЛекарственнойФормы, ПараметрыЭлемента);
		ИначеЕсли ЭлементДанных.name.code = "DFACT" Тогда
			ЗаполнитьЗначенияСвойств(ФормаВыпуска.ЕдиницДействияЛекарственнойФормы, ПараметрыЭлемента);
		ИначеЕсли ЭлементДанных.name.code = "DFSIZE" Тогда
			ЗаполнитьЗначенияСвойств(ФормаВыпуска.РазмерЛекарственнойФормы, ПараметрыЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоИЕдиницуИзмерения(Данные)
	
	Количество = Новый Структура("Количество, ЕдиницаИзмерения");
	Если Данные = Неопределено Тогда
		Возврат Количество;
	КонецЕсли;
	
	ТекстКоличество = ПолучитьТекстИзОбъекта(Данные.originalText);
	Если Данные.codeSystemName = "RLS_SizeUnits" Тогда
		Количество.Количество = ТекстКоличество;
	Иначе
		Количество.Количество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекстКоличество);
	КонецЕсли;
	
	ЕдиницаИзмерения = Новый Структура("Наименование, ТипЕдиницы");
	ЕдиницаИзмерения.Наименование = СтрЗаменить(Данные.code, "_", " ");
	Если Данные.codeSystemName = "RLS_MASSUNITS" Тогда
		ЕдиницаИзмерения.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес;
	ИначеЕсли Данные.codeSystemName = "RLS_ConcenUnits" Тогда
		ЕдиницаИзмерения.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Концентрация;
	ИначеЕсли Данные.codeSystemName = "RLS_ActUnits" Тогда
		ЕдиницаИзмерения.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.ЕдиницаДействия;
	ИначеЕсли Данные.codeSystemName = "RLS_SizeUnits" Тогда
		ЕдиницаИзмерения.ТипЕдиницы = "SIZE";
	КонецЕсли;
	
	Количество.ЕдиницаИзмерения = ЕдиницаИзмерения;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти // НазначенияВрача

////////////////////////////////////////////////////////////////////////////////
// Движения пациентов в стационаре
#Область ДвиженияПациентовВСтационаре

// Перенаправляет сообщение обработке сообщений МИС в зависимости от типа сообщения.
//
// Параметры:
//  Документ     - ОбъектXDTO - сообщение от МИС.
//  ТипСообщения - ПеречислениеСсылка.ТипыСообщенийОДвиженииПациентов - тип сообщения от МИС.
//
// Возвращаемое значение:
//  ОбъектXDTO - ответ на сообщение от МИС.
//
Функция ОбработатьСообщениеОДвиженииПациентовВСтационаре(Знач Документ, Знач ТипСообщения) Экспорт
	
	ЗаголовокСообщения = ПолучитьЗаголовокСообщения(Документ);
	ЗаголовокСообщения.Вставить("Тип", ТипСообщения);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.Госпитализация Тогда
			ПолучитьСообщениеОГоспитализации(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ИзменениеСведений Тогда
			ПолучитьСообщениеОбИзмененииГоспитализации(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаГоспитализации Тогда
			ПолучитьСообщениеОбОтменеГоспитализации(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.Выписка Тогда
			ПолучитьСообщениеОВыпискеПациента(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.СамовольноеПокиданиеСтационара Тогда
			ПолучитьСообщениеОСамовольномПокиданииСтационара(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаВыписки Тогда
			ПолучитьСообщениеОбОтменеВыпискиПациента(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ПереводПациента Тогда
			ПолучитьСообщениеОПереводеПациента(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ОтменаПеревода Тогда
			ПолучитьСообщениеОбОтменеПереводаПациента(Документ);
		ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийОДвиженииПациентов.ОбъединениеПациентов Тогда
			ПолучитьСообщениеОбОбъединенииЗаписейПациентов(Документ);
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестный тип сообщения'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		СообщениеОбОшибке = ОписаниеОшибки();
		
		ЗаголовокСообщения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменСМИС.ОбработкаСообщенийОДвиженииПациентовВСтационаре'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СообщениеОбОшибке);
		
	КонецПопытки;
	
	Возврат СформироватьОтветНаСообщение(ЗаголовокСообщения);
	
КонецФункции

// PRPA_IN402001UV02
Процедура ПолучитьСообщениеОГоспитализации(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.inpatientEncounterEvent;
	
	ОписаниеМедицинскойКарты = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты, Ложь);
	Если Не ОписаниеМедицинскойКарты.ЭтоНовый Тогда
		ТекстОшибки = НСтр("ru = 'Попытка создания существующей мед. карты. Номер карты: %1. Ключ поиска: %2'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ?(ПустаяСтрока(ОписаниеМедицинскойКарты.НомерКарты), НСтр("ru = '<информация отсутствует>'"), ОписаниеМедицинскойКарты.НомерКарты));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", ОписаниеМедицинскойКарты.УИД);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДатаОткрытия = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеМедицинскойКарты.effectiveTime.value);
	ОписаниеМедицинскойКарты.ДатаОткрытия = ДатаОткрытия;
	
	ОписаниеМедицинскойКарты.Пациент = ПолучитьПациента(ДанныеМедицинскойКарты.subject.patient);
	
	ДанныеРазмещения = ДанныеМедицинскойКарты.location[0];
	Отделение = ПолучитьОписаниеОтделения(ДанныеРазмещения.serviceDeliveryLocation).Ссылка;
	ДатаРазмещения = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеРазмещения.time.value);
	Если Не ЗначениеЗаполнено(ДатаРазмещения) Тогда
		ДатаРазмещения = ДатаОткрытия;
	КонецЕсли;
	
	Размещение = ЗаполнитьРазмещениеМедицинскойКарты(ОписаниеМедицинскойКарты.Ссылка, Отделение, ДатаРазмещения);
	Размещение.Записать();
	
	МедицинскаяКартаОбъект = ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты);
	ЗаполнитьЗначенияСвойств(МедицинскаяКартаОбъект, ОписаниеМедицинскойКарты);
	МедицинскаяКартаОбъект.Записать();
	
КонецПроцедуры

// PRPA_IN402002UV02
Процедура ПолучитьСообщениеОбИзмененииГоспитализации(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.inpatientEncounterEvent;
	
	ОписаниеМедицинскойКарты = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты);
	
	ОписаниеМедицинскойКарты.ДатаОткрытия = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеМедицинскойКарты.effectiveTime.low.value);
	ОписаниеМедицинскойКарты.ДатаЗакрытия = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеМедицинскойКарты.effectiveTime.high.value);
	ОписаниеМедицинскойКарты.ВАрхиве      = ?(ДанныеМедицинскойКарты.statuscode.code = "active", Ложь, Истина);
	
	ОписаниеПациента = ПолучитьОписаниеПациента(ДанныеМедицинскойКарты.subject.patient, Ложь);
	
	Если ОписаниеПациента.ЭтоНовый Тогда
		Пациент = СоздатьПациентаПоОписанию(ОписаниеПациента);
	Иначе
		Пациент = ОписаниеПациента.Ссылка;
		Если Пациент.Наименование <> ОписаниеПациента.ФИО
		 Или ЗначениеЗаполнено(ОписаниеПациента.ДатаРождения) И ОписаниеПациента.ДатаРождения <> Пациент.ДатаРождения
		 Или ЗначениеЗаполнено(ОписаниеПациента.Пол) И ОписаниеПациента.Пол <> Пациент.Пол Тогда
			
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьСсылку(Пациент);
			
			ПациентОбъект = Пациент.ПолучитьОбъект();
			ПациентОбъект.Наименование = ОписаниеПациента.ФИО;
			Если ЗначениеЗаполнено(ОписаниеПациента.ДатаРождения) Тогда
				ПациентОбъект.ДатаРождения = ОписаниеПациента.ДатаРождения;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеПациента.Пол) Тогда
				ПациентОбъект.Пол = ОписаниеПациента.Пол;
			КонецЕсли;
			ПациентОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеМедицинскойКарты.Пациент = Пациент;
	
	МедицинскаяКартаОбъект = ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты);
	ЗаполнитьЗначенияСвойств(МедицинскаяКартаОбъект, ОписаниеМедицинскойКарты);
	МедицинскаяКартаОбъект.Записать();
	
	ДанныеРазмещения = ДанныеМедицинскойКарты.location[0];
	ПериодДвижения  = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеРазмещения.time.value);
	Если ЗначениеЗаполнено(ПериодДвижения) Тогда
		Отделение = ПолучитьОписаниеОтделения(ДанныеРазмещения.serviceDeliveryLocation).Ссылка;
		Размещение  = ЗаполнитьРазмещениеМедицинскойКарты(ОписаниеМедицинскойКарты.Ссылка, Отделение, ПериодДвижения);
		Размещение.Записать();
	КонецЕсли;
	
КонецПроцедуры

// PRPA_IN402006UV02
Процедура ПолучитьСообщениеОбОтменеГоспитализации(Документ)
	
	ОписаниеМедкарты = ПустоеОписаниеМедицинскойКарты();
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.actGenericStatus;
	
	МедицинскаяКарта = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты).Ссылка;
	
	ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьСсылку(МедицинскаяКарта);
	МедицинскаяКартаОбъект = МедицинскаяКарта.ПолучитьОбъект();
	МедицинскаяКартаОбъект.ПометкаУдаления = Истина;
	МедицинскаяКартаОбъект.Записать();
	
КонецПроцедуры

// PRPA_IN402003UV02
Процедура ПолучитьСообщениеОВыпискеПациента(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.inpatientEncounterEvent;
	
	ОписаниеМедицинскойКарты = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты);
	
	МедицинскаяКартаОбъект = ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты);
	МедицинскаяКартаОбъект.ДатаЗакрытия = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеМедицинскойКарты.effectiveTime.value);
	МедицинскаяКартаОбъект.ВАрхиве      = Истина;
	
	МедицинскаяКартаОбъект.Записать();
	
КонецПроцедуры

// PRPA_IN402004UV02
Процедура ПолучитьСообщениеОСамовольномПокиданииСтационара(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.inpatientEncounterEvent;
	
	ОписаниеМедицинскойКарты = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты);
	
	МедицинскаяКартаОбъект = ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты);
	МедицинскаяКартаОбъект.ДатаЗакрытия = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеМедицинскойКарты.effectiveTime.value);
	МедицинскаяКартаОбъект.ВАрхиве      = Истина;
	
	МедицинскаяКартаОбъект.Записать();
	
КонецПроцедуры

// PRPA_IN402007UV02
Процедура ПолучитьСообщениеОбОтменеВыпискиПациента(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.inpatientEncounterEvent;
	
	ОписаниеМедицинскойКарты = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты);
	
	МедицинскаяКартаОбъект = ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты);
	МедицинскаяКартаОбъект.ДатаЗакрытия = '00010101';
	МедицинскаяКартаОбъект.ВАрхиве      = Ложь;
	
	МедицинскаяКартаОбъект.Записать();
	
КонецПроцедуры

// PRPA_IN302011UV02
Процедура ПолучитьСообщениеОПереводеПациента(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.EncounterEvent;
	
	МедицинскаяКарта = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты).Ссылка;
	
	ДанныеРазмещения = ДанныеМедицинскойКарты.location2;
	Отделение = ПолучитьОписаниеОтделения(ДанныеРазмещения.serviceDeliveryLocation).Ссылка;
	ПериодДвижения = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеРазмещения.time.value);
	
	Размещение = ЗаполнитьРазмещениеМедицинскойКарты(МедицинскаяКарта, Отделение, ПериодДвижения);
	Размещение.Записать();
	
КонецПроцедуры

// PRPA_IN302012UV02
Процедура ПолучитьСообщениеОбОтменеПереводаПациента(Документ)
	
	ТелоСообщения = ПолучитьТелоСообщенияОДвиженииПациента(Документ);
	ДанныеМедицинскойКарты = ТелоСообщения.EncounterEvent;
	
	МедицинскаяКарта = ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты).Ссылка;
	
	ДанныеРазмещения = ДанныеМедицинскойКарты.location2;
	Отделение = ПолучитьОписаниеОтделения(ДанныеРазмещения.serviceDeliveryLocation).Ссылка;
	ПериодДвижения  = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДанныеРазмещения.time.value);
	
	Размещение  = ЗаполнитьРазмещениеМедицинскойКарты(МедицинскаяКарта, Отделение, ПериодДвижения);
	Размещение.Прочитать();
	Если Размещение.Выбран() Тогда
		Размещение.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// PRPA_IN201304UV02
Процедура ПолучитьСообщениеОбОбъединенииЗаписейПациентов(Документ)
	
	ДанныеЗамены = Документ.controlActProcess.subject[0].registrationEvent;
	
	СтатусСообщение = ДанныеЗамены.statusCode.code;
	
	// Отмена объединения не поддерживается
	Если СтатусСообщение = "obsolete" Тогда
		ВызватьИсключение НСтр("ru='Операция не поддерживается.'");;
	КонецЕсли;
	
	ОписаниеОставитьПациента = ПолучитьОписаниеПациента(ДанныеЗамены.subject1.patient, Ложь);
	ОписаниеУдалитьПациента  = ПолучитьОписаниеПациента(ДанныеЗамены.replacementOf[0].priorRegistration.subject1.priorRegisteredRole, Ложь);
	
	Если ОписаниеУдалитьПациента.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОставитьПациента.ЭтоНовый Тогда
		СоздатьПациентаПоОписанию(ОписаниеОставитьПациента);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МедицинскиеКарты.Ссылка КАК МедицинскаяКарта
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.Пациент = &Пациент
	|";
	
	Запрос.УстановитьПараметр("Пациент", ОписаниеУдалитьПациента.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МедицинскиеКарты");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "МедицинскаяКарта");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Пока Выборка.Следующий() Цикл
		
		МедицинскаяКарта = Выборка.МедицинскаяКарта.ПолучитьОбъект();
		МедицинскаяКарта.Пациент = ОписаниеОставитьПациента.Ссылка;
		МедицинскаяКарта.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


Функция ИнициализироватьОписаниеМедицинскойКарты(ДанныеМедицинскойКарты, ВызыватьОшибкуПриОтсутствии = Истина)
	
	ОписаниеМедицинскойКарты = ПустоеОписаниеМедицинскойКарты();
	
	ПолучитьДанныеИдентификатораОбъекта(ДанныеМедицинскойКарты.id[0], ОписаниеМедицинскойКарты.УИД, ОписаниеМедицинскойКарты.НомерКарты);
	
	ОписаниеМедицинскойКарты.Ссылка   = Справочники.МедицинскиеКарты.ПолучитьСсылку(ОписаниеМедицинскойКарты.УИД);
	ОписаниеМедицинскойКарты.ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(ОписаниеМедицинскойКарты.Ссылка);
	
	Если ОписаниеМедицинскойКарты.ЭтоНовый И ВызыватьОшибкуПриОтсутствии Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось определить мед. карту пациента. Номер карты: %1. Ключ поиска: %2'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ?(ПустаяСтрока(ОписаниеМедицинскойКарты.НомерКарты), НСтр("ru = '<информация отсутствует>'"), ОписаниеМедицинскойКарты.НомерКарты));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", ОписаниеМедицинскойКарты.УИД);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ОписаниеМедицинскойКарты;
	
КонецФункции

Функция ПолучитьОбъектМедицинскойКарты(ОписаниеМедицинскойКарты)
	
	Если ОписаниеМедицинскойКарты.ЭтоНовый Тогда
		МедицинскаяКартаОбъект = Справочники.МедицинскиеКарты.СоздатьЭлемент();
		МедицинскаяКартаОбъект.УстановитьСсылкуНового(ОписаниеМедицинскойКарты.Ссылка);
	Иначе
		ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьСсылку(ОписаниеМедицинскойКарты.Ссылка);
		МедицинскаяКартаОбъект = ОписаниеМедицинскойКарты.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат МедицинскаяКартаОбъект;
	
КонецФункции

Функция ЗаполнитьРазмещениеМедицинскойКарты(МедицинскаяКарта, Отделение, Период = '00010101')
	
	ДвижениеМедкарты = Новый Структура;
	ДвижениеМедкарты.Вставить("Период",        Период);
	ДвижениеМедкарты.Вставить("КартаПациента", МедицинскаяКарта);
	ДвижениеМедкарты.Вставить("Отделение",     Отделение);
	ДвижениеМедкарты.Вставить("Организация",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отделение, "Владелец"));
	
	МенеджерЗаписи = РегистрыСведений.ДвиженияПациентов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДвижениеМедкарты);
	
	Возврат МенеджерЗаписи;
	
КонецФункции

Функция ПолучитьПациента(ДанныеПациента)
	
	ОписаниеПациента = ПолучитьОписаниеПациента(ДанныеПациента, Ложь);
	Если ОписаниеПациента.ЭтоНовый Тогда
		Возврат СоздатьПациентаПоОписанию(ОписаниеПациента);
	КонецЕсли;
	
	Возврат ОписаниеПациента.Ссылка;
	
КонецФункции

Функция ПолучитьОписаниеПациента(ДанныеПациента, ВызыватьОшибкуПриОтсутствии = Истина)
	
	Пациент = ПустоеОписаниеПациента();
	
	Идентификатор = ДанныеПациента.id[0];
	СвойстваИдентификатора = Идентификатор.Свойства();
	Если СвойстваИдентификатора.Получить("code") <> Неопределено Тогда
		Пациент.УИД = Новый УникальныйИдентификатор(Идентификатор.code);
	ИначеЕсли СвойстваИдентификатора.Получить("root") <> Неопределено Тогда
		Пациент.УИД = Новый УникальныйИдентификатор(Идентификатор.root);
	Иначе
		ВызватьИсключение НСтр("ru = 'Отсутствует ключ поиска пациента.'");
	КонецЕсли;
	
	Если ДанныеПациента.Свойства().Получить("patientPerson") <> Неопределено И ДанныеПациента.patientPerson <> Неопределено Тогда
		Пациент.ФИО = ПолучитьИмяПоОписанию(ДанныеПациента.patientPerson.name[0]);
		Если ДанныеПациента.patientPerson.birthTime <> Неопределено Тогда
			Пациент.ДатаРождения = Дата(ДанныеПациента.patientPerson.birthTime.value);
		КонецЕсли;
		Если ДанныеПациента.patientPerson.administrativeGenderCode <> Неопределено Тогда
			Пол = ДанныеПациента.patientPerson.administrativeGenderCode.code;
			Если Пол = "M" Тогда
				Пациент.Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ИначеЕсли Пол = "F" Тогда
				Пациент.Пол = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пациент.Ссылка   = Справочники.ФизическиеЛица.ПолучитьСсылку(Пациент.УИД);
	Пациент.ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Пациент.Ссылка);
	
	Если Пациент.ЭтоНовый И ВызыватьОшибкуПриОтсутствии Тогда
		
		ТекстОшибки = НСтр("ru = 'Отсутствует пациент. ФИО: %1. Ключ поиска: %2'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ?(ПустаяСтрока(Пациент.ФИО), НСтр("ru = '<информация отсутствует>'"), Пациент.ФИО));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", Пациент.УИД);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Пациент;
	
КонецФункции

Функция СоздатьПациентаПоОписанию(ОписаниеПациента)
	
	Пациент = Справочники.ФизическиеЛица.ПолучитьСсылку(ОписаниеПациента.УИД);
	
	НовыйПациент = Справочники.ФизическиеЛица.СоздатьЭлемент();
	НовыйПациент.УстановитьСсылкуНового(Пациент);
	НовыйПациент.Родитель = Справочники.ФизическиеЛица.Пациенты;
	НовыйПациент.Наименование = ОписаниеПациента.ФИО;
	НовыйПациент.ДатаРождения = ОписаниеПациента.ДатаРождения;
	НовыйПациент.Пол = ОписаниеПациента.Пол;
	НовыйПациент.Записать();
	
	Возврат Пациент;
	
КонецФункции


Функция ПолучитьОписаниеОтделения(ДанныеОтделения, ВызыватьОшибкуПриОтсутствии = Истина)
	
	ОписаниеОтделения = ПустоеОписаниеОтделения();
	
	ПолучитьДанныеИдентификатораОбъекта(ДанныеОтделения.id[0], ОписаниеОтделения.УИД);
	
	Если ДанныеОтделения.Свойства().Получить("code") <> Неопределено И ДанныеОтделения.code <> Неопределено Тогда
		ОписаниеОтделения.Код          = ДанныеОтделения.code.code;
		ОписаниеОтделения.Наименование = ДанныеОтделения.code.displayName;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОтделения.УИД) = Тип("УникальныйИдентификатор") Тогда
		ОписаниеОтделения.Ссылка = Справочники.ОтделенияОрганизаций.ПолучитьСсылку(ОписаниеОтделения.УИД);
	Иначе
		ОписаниеОтделения.Ссылка = Справочники.ОтделенияОрганизаций.НайтиПоРеквизиту("КодOID", ОписаниеОтделения.УИД);
	КонецЕсли;
	ОписаниеОтделения.ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(ОписаниеОтделения.Ссылка);
	
	Если ОписаниеОтделения.ЭтоНовый И ВызыватьОшибкуПриОтсутствии Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует отделение. Наименование: %1. Код: %2. Ключ поиска: %3'"),
			?(ПустаяСтрока(ОписаниеОтделения.Наименование), НСтр("ru = '<информация отсутствует>'"), ОписаниеОтделения.Наименование),
			?(ПустаяСтрока(ОписаниеОтделения.Код), НСтр("ru = '<информация отсутствует>'"), ОписаниеОтделения.Код),
			ОписаниеОтделения.УИД);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ОписаниеОтделения;
	
КонецФункции


Функция ПустоеОписаниеМедицинскойКарты()
	
	ОписаниеМедицинскойКарты = Новый Структура;
	ОписаниеМедицинскойКарты.Вставить("Ссылка"      , Неопределено);
	ОписаниеМедицинскойКарты.Вставить("ЭтоНовый"    , Истина);
	ОписаниеМедицинскойКарты.Вставить("УИД"         , "");
	ОписаниеМедицинскойКарты.Вставить("НомерКарты"  , "");
	ОписаниеМедицинскойКарты.Вставить("ВАрхиве"     , Ложь);
	ОписаниеМедицинскойКарты.Вставить("Пациент"     , Неопределено);
	ОписаниеМедицинскойКарты.Вставить("ДатаОткрытия", '00010101');
	ОписаниеМедицинскойКарты.Вставить("ДатаЗакрытия", '00010101');
	
	Возврат ОписаниеМедицинскойКарты;
	
КонецФункции

Функция ПустоеОписаниеПациента()
	
	ОписаниеПациента = Новый Структура;
	ОписаниеПациента.Вставить("Ссылка"      , Неопределено);
	ОписаниеПациента.Вставить("ЭтоНовый"    , Истина);
	ОписаниеПациента.Вставить("УИД"         , "");
	ОписаниеПациента.Вставить("ФИО"         , "");
	ОписаниеПациента.Вставить("ДатаРождения", Дата(1, 1, 1));
	ОписаниеПациента.Вставить("Пол"         , Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	
	Возврат ОписаниеПациента;
	
КонецФункции

Функция ПустоеОписаниеОтделения()
	
	ОписаниеОтделения = Новый Структура;
	ОписаниеОтделения.Вставить("Ссылка"      , Неопределено);
	ОписаниеОтделения.Вставить("ЭтоНовый"    , Истина);
	ОписаниеОтделения.Вставить("УИД"         , "");
	ОписаниеОтделения.Вставить("Код"         , "");
	ОписаниеОтделения.Вставить("Наименование", "");
	
	Возврат ОписаниеОтделения;
	
КонецФункции

Функция ПолучитьТелоСообщенияОДвиженииПациента(Документ)
	
	Если Документ.controlActProcess.subject.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Отсутствует ожидаемый элемент ""controlActProcess/subject""'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Документ.controlActProcess.subject[0];
	
КонецФункции

Функция ПолучитьДанныеИдентификатораОбъекта(id, root, extension = Неопределено, NullFlavor = Неопределено)
	
	Если id.Тип() <> ТипHL7("II") Тогда
		СообщениеОбОшибке = НСтр("ru='Неправильный тип идентификатора: ожидается тип ""II"".'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Если id.NullFlavor = Неопределено Тогда
		
		root = id.root;
		Если ЗначениеЗаполнено(root) Тогда
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(root) Тогда
				root = Новый УникальныйИдентификатор(root);
			КонецЕсли;
		КонецЕсли;
		extension = id.extension;
		
		Возврат Истина;
		
	КонецЕсли;
	
	NullFlavor = id.NullFlavor;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИмяПоОписанию(ОписаниеИмени)
	
	Должность = "";
	Имя = "";
	Отчество = "";
	Фамилия = "";
	
	ЧастиИмени = Новый Массив;
	
	Если ОписаниеИмени.prefix.Количество() И ОписаниеИмени.prefix[0].Последовательность().Количество() Тогда
		Должность = СокрЛП(ОписаниеИмени.prefix[0].Последовательность().ПолучитьТекст(0));
		ЧастиИмени.Добавить(Должность);
	КонецЕсли;
	
	Если ОписаниеИмени.family.Количество() И ОписаниеИмени.family[0].Последовательность().Количество() Тогда
		Фамилия = СокрЛП(ОписаниеИмени.family[0].Последовательность().ПолучитьТекст(0));
		ЧастиИмени.Добавить(Фамилия);
	КонецЕсли;
	
	Если ОписаниеИмени.given.Количество() Тогда
		Если ОписаниеИмени.given[0].Последовательность().Количество() Тогда
			Имя = СокрЛП(ОписаниеИмени.given[0].Последовательность().ПолучитьТекст(0));
			ЧастиИмени.Добавить(Имя);
		КонецЕсли;
		Если ОписаниеИмени.given.Количество() > 1 И ОписаниеИмени.given[1].Последовательность().Количество() Тогда
			Отчество = СокрЛП(ОписаниеИмени.given[1].Последовательность().ПолучитьТекст(0));
			ЧастиИмени.Добавить(Отчество);
		КонецЕсли;
	КонецЕсли;
	
	ПолноеИмя = "";
	Для Каждого ЧастьИмени Из ЧастиИмени Цикл
		Если Не ПустаяСтрока(ЧастьИмени) Тогда
			ПолноеИмя = ПолноеИмя + ЧастьИмени + " ";
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СокрЛП(ПолноеИмя);
	
КонецФункции

Функция ПолучитьТекстИзОбъекта(Объект)
	
	Если Объект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Элементы = Объект.Последовательность();
	Для Сч = 0 По Элементы.Количество() - 1 Цикл
		
		Попытка
			Возврат Элементы.ПолучитьТекст(Сч);
		Исключение
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Классификаторы

Функция СоответствиеИменКлассификаторовОбъектамКонфигурации()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ATC", "АТХКлассификация");
	Соответствие.Вставить("TFR", "ТоварыФармацевтическогоРынка");
	Соответствие.Вставить("PHARMAGROUP", "ФармакологическиеГруппы");
	Соответствие.Вставить("CONTROLLEDGROUP", "ГруппыПКУ");
	
	Возврат Соответствие;
	
КонецФункции

// Сериализует классификатор в XDTO объект.
//
// Параметры
//	ИмяКлассификатора - Строка - имя сериализуемого классификатора
//
// Возвращаемое значение
//	XDTO-объект - MISExchange.DICT
//
Функция СформироватьКлассификаторXDTO(Классификатор) Экспорт
	
	ИмяКлассификатора = СоответствиеИменКлассификаторовОбъектамКонфигурации().Получить(Классификатор);
	Если ИмяКлассификатора = Неопределено Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Неизвестный классификатор ""%1"".'"), "%1", Классификатор);
	КонецЕсли;
	
	МетаданныеКлассификатора = Метаданные.Справочники.Найти(ИмяКлассификатора);
	
	ЕстьПолеКод = (МетаданныеКлассификатора.ДлинаКода > 0);
	Иерархический = МетаданныеКлассификатора.Иерархический;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Классификатор.Ссылка КАК Ссылка,
	|	" + ?(ЕстьПолеКод, "Классификатор.Код,", "") + "
	|	Классификатор.Наименование
	|ИЗ
	|	" + МетаданныеКлассификатора.ПолноеИмя() + " КАК Классификатор
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка " + ?(Иерархический, "ИЕРАРХИЯ ", "") + "ВОЗР";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТипКлассификатор = ТипMISExchange("DICT");
	Классификатор = СоздатьОбъектXDTO(ТипКлассификатор);
	Классификатор.VER = "1.0";
	СоответствиеКлассификаторуРЛС = ИТСМедицина.ПолучитьСоответствиеСправочниковКонфигурацииКлассификаторамРЛС().Получить(ИмяКлассификатора);
	Если СоответствиеКлассификаторуРЛС = Неопределено Тогда
		Классификатор.id = "";
		Классификатор.name = МетаданныеКлассификатора.Синоним;
	Иначе
		Классификатор.id = СоответствиеКлассификаторуРЛС.Номер;
		Классификатор.name = СоответствиеКлассификаторуРЛС.Наименование;
	КонецЕсли;
	
	ЗаполнитьОбъектXDTOКлассификатораРекурсивно(Дерево.Строки, Классификатор, ЕстьПолеКод);
	
	Возврат Классификатор;
	
КонецФункции

Процедура ЗаполнитьОбъектXDTOКлассификатораРекурсивно(Строки, Классификатор, ЕстьПолеКод)
	
	ТипЭлемента = ТипMISExchange("DICT_ITEM");
	Для Каждого Элемент Из Строки Цикл
		
		ЭлементКлассификатора = СоздатьОбъектXDTO(ТипЭлемента);
		ЭлементКлассификатора.id = ?(ЕстьПолеКод, Элемент.Код, Строка(Элемент.Ссылка.УникальныйИдентификатор()));
		ЭлементКлассификатора.ITEMNAME = Элемент.Наименование;
		ЗаполнитьОбъектXDTOКлассификатораРекурсивно(Элемент.Строки, ЭлементКлассификатора, ЕстьПолеКод);
		
		Классификатор.ITEM.Добавить(ЭлементКлассификатора);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДвиженияПациентовВСтационаре

#КонецОбласти // ОбработкаСообщенийHL7

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	ПоддерживаемыеВерсии = Новый Массив;
	ПоддерживаемыеВерсии.Добавить("1.0.1.1");
	
	СтруктураПоддерживаемыхВерсий.Вставить("MISExchange", ПоддерживаемыеВерсии);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки MIME пакета
#Область ПроцедурыОбработкиMimeПакета

Функция ПолучитьСодержимоеMIMEПакета(ТекстСообщения)
	
	Сообщение = Новый ТекстовыйДокумент;
	Сообщение.УстановитьТекст(СокрЛП(ТекстСообщения));
	
	НомерСтроки = 0;
	
	ПропуститьПустыеСтроки(Сообщение, НомерСтроки);
	
	Заголовок = "MIME-Version:"; // 1.0
	ПерваяСтрока = СокрЛП(Сообщение.ПолучитьСтроку(НомерСтроки));
	Если Не ВРег(Лев(ПерваяСтрока, СтрДлина(Заголовок))) = ВРег(Заголовок) Тогда
		ВызватьИсключение НСтр("ru='Сообщение не соответствует стандарту MIME: неправильный заголовок:'") + " " + ПерваяСтрока;
	КонецЕсли;
	
	Пакет = Новый Структура;
	
	// Параметры пакета
	НомерСтроки = НомерСтроки + 1;
	ПараметрыЗаголовка = ПолучитьПараметрыMIMEПакета(Сообщение, НомерСтроки);
	Пакет.Вставить("Параметры", ПараметрыЗаголовка);
	Пакет.Вставить("Секции", Новый Массив);
	
	ТипСодержимого = ПараметрыЗаголовка.Получить("Content-Type");
	Если Не ТипСодержимого = Неопределено Тогда
		Если Не ТипСодержимого.Получить("multipart") = Неопределено Тогда
			РазделительСекций = ТипСодержимого.Получить("boundary");
			Если Не РазделительСекций = Неопределено Тогда
				Секция = ПолучитьСледующуюСекциюMIMEПакета(Сообщение, НомерСтроки, РазделительСекций);
				Пока Не Секция = Неопределено Цикл
					Пакет.Секции.Добавить(Секция);
					Секция = ПолучитьСледующуюСекциюMIMEПакета(Сообщение, НомерСтроки, РазделительСекций);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Пакет;
	
КонецФункции

Функция ПолучитьСледующуюСекциюMIMEПакета(Сообщение, НомерСтроки, РазделительСекций)
	
	ПропуститьПустыеСтроки(Сообщение, НомерСтроки);
	
	Если НомерСтроки > Сообщение.КоличествоСтрок() Тогда
		ВызватьИсключение НСтр("ru='Сообщение не соответствует стандарту MIME: неожиданный конец вложения.'");
	КонецЕсли;
	
	НачалоСекции = "--" + РазделительСекций;
	КонецСекций =  "--" + РазделительСекций + "--";
	
	ПерваяСтрока = СокрЛП(Сообщение.ПолучитьСтроку(НомерСтроки));
	Если Не ВРег(Лев(ПерваяСтрока, СтрДлина(НачалоСекции))) = ВРег(НачалоСекции) Тогда
		ВызватьИсключение НСтр("ru='Сообщение не соответствует стандарту MIME: неправильный разделитель вложений:'") + " " + ПерваяСтрока;
	КонецЕсли;
	
	Если ВРег(Лев(ПерваяСтрока, СтрДлина(КонецСекций))) = ВРег(КонецСекций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСтроки = НомерСтроки + 1;
	ПараметрыСекции = ПолучитьПараметрыMIMEПакета(Сообщение, НомерСтроки);
	
	ТелоСообщения = "";
	НомерСтроки = НомерСтроки + 1;
	КоличествоСтрок = Сообщение.КоличествоСтрок();
	Пока НомерСтроки < КоличествоСтрок И Не ПустаяСтрока(Сообщение.ПолучитьСтроку(НомерСтроки)) Цикл
		СтрокаСообщения = Сообщение.ПолучитьСтроку(НомерСтроки);
		ТелоСообщения = ?(ПустаяСтрока(ТелоСообщения), "", ТелоСообщения + Символы.ПС) + СокрЛП(СтрокаСообщения);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Секция = Новый Структура;
	Секция.Вставить("Параметры", ПараметрыСекции);
	Секция.Вставить("Тело", ТелоСообщения);
	
	Возврат Секция;
	
КонецФункции

Функция ПолучитьПараметрыMIMEПакета(Сообщение, НомерСтроки)
	
	ИмяПараметра = "";
	ПараметрыЗаголовка = Новый Соответствие;
	КоличествоСтрок = Сообщение.КоличествоСтрок();
	Пока НомерСтроки <= КоличествоСтрок И Не ПустаяСтрока(Сообщение.ПолучитьСтроку(НомерСтроки)) Цикл
		
		СтрокаПараметра = СокрЛП(Сообщение.ПолучитьСтроку(НомерСтроки));
		Если СледующийПараметр(СтрокаПараметра) Тогда
			ИмяПараметра = ИмяMIMEПараметра(СтрокаПараметра);
			ПараметрыЗаголовка.Вставить(ИмяПараметра, Новый Соответствие);
			СтрокаПараметра = СокрЛП(Сред(СтрокаПараметра, СтрДлина(ИмяПараметра) + 2));
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяПараметра) Тогда
			ВызватьИсключение НСтр("ru='Сообщение не соответствует стандарту MIME: неправильный формат параметров:'") + " " + СтрокаПараметра;
		КонецЕсли;
		
		ЗначенияПараметра = ПараметрыЗаголовка.Получить(ИмяПараметра);
		ЗначенияПараметраСтрокой = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметра, ";");
		Для Каждого ЗначениеПараметра Из ЗначенияПараметраСтрокой Цикл
			Если ПустаяСтрока(ЗначениеПараметра) Тогда
				Продолжить;
			КонецЕсли;
			Значение = СокрЛП(ЗначениеПараметра);
			ПозицияРазделителя = Найти(Значение, "=");
			Если ПозицияРазделителя = 0 Тогда
				ПозицияРазделителя = Найти(Значение, "/");
			КонецЕсли;
			Если ПозицияРазделителя Тогда
				ЗначенияПараметра.Вставить(
					СокрЛП(Лев(Значение, ПозицияРазделителя - 1)),
					УдалитьКавычки(СокрЛП(Сред(Значение, ПозицияРазделителя + 1))));
			Иначе
				ЗначенияПараметра.Вставить(Значение, "");
			КонецЕсли;
		КонецЦикла;		
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ПараметрыЗаголовка;
	
КонецФункции

Функция СледующийПараметр(СтрокаПараметра)
	Возврат Найти(СтрокаПараметра, ":") > 0;
КонецФункции

Функция ИмяMIMEПараметра(СтрокаПараметра)
	Возврат СокрЛП(Лев(СтрокаПараметра, Найти(СтрокаПараметра, ":") - 1));
КонецФункции

Процедура ПропуститьПустыеСтроки(Сообщение, НомерСтроки)
	
	КоличествоСтрок = Сообщение.КоличествоСтрок();
	Пока НомерСтроки <= КоличествоСтрок И ПустаяСтрока(Сообщение.ПолучитьСтроку(НомерСтроки)) Цикл
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция УдалитьКавычки(Знач ЗначениеРеквизита)
	
	Если Лев(ЗначениеРеквизита, 1) = """" И Прав(ЗначениеРеквизита, 1) = """" Тогда
		ЗначениеРеквизита = Сред(ЗначениеРеквизита, 2, СтрДлина(ЗначениеРеквизита) - 2);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

#КонецОбласти // ПроцедурыОбработкиMimeПакета

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с XDTO
#Область ПроцедурыИФункцииДляРаботыСXDTO

// Получает тип XDTO по имени типа из пространства имен MISExchange
//
Функция ТипMISExchange(Знач ИмяТипа) Экспорт
	Возврат ПолучитьТипXDTO(ИмяТипа, "MISExchange");
КонецФункции

// Получает тип XDTO по имени типа из пространства имен urn:hl7-org:v3
//
Функция ТипHL7(Знач ИмяТипа) Экспорт
	Возврат ПолучитьТипXDTO(ИмяТипа, "urn:hl7-org:v3");
КонецФункции

// Получает тип XDTO по имени типа и пространству имен
//
Функция ПолучитьТипXDTO(ИмяТипа, ПространствоИмен)
	Возврат ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа);
КонецФункции

// Создает объект XDTO по типу
//
Функция СоздатьОбъектXDTO(ТипОбъекта)
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
КонецФункции

// Создает копию объекта XDTO.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - фабрика, которой создан исходный объект.
//  Объект  - ОбъектXDTO  - объект, копию которого требуется создать.
//
// Возвращаемое значение:
//  ОбъектXDTO - копия исходного объекта XDTO.
//
Функция СкопироватьXDTO(Знач Фабрика, Знач Объект)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Фабрика.ЗаписатьXML(Запись, Объект, , , , НазначениеТипаXML.Явное);
	
	XMLПредставление = Запись.Закрыть();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLПредставление);
	
	Возврат Фабрика.ПрочитатьXML(Чтение, Объект.Тип());
	
КонецФункции

#КонецОбласти // ПроцедурыИФункцииДляРаботыСXDTO

#КонецОбласти // СлужебныеПроцедурыИФункции
