#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	ИспользоватьИнтеграциюДО2 = Настройки.ИспользоватьИнтеграциюДО2;
	ИспользоватьИнтеграциюДО3 = Настройки.ИспользоватьИнтеграциюДО3;
	
	ИспользоватьПроцессыИЗадачи1СДокументооборота = Ложь;
	Если ИспользоватьИнтеграциюДО2 Тогда
		ИмяФО = "ИспользоватьПроцессыИЗадачи1СДокументооборота";
		ИспользоватьПроцессыИЗадачи1СДокументооборота = ПолучитьФункциональнуюОпцию(ИмяФО);
	КонецЕсли;
	
	ДоступенЗахватИРедактирование =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1");
	Элементы.ОткрытьДляРедактирования.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ПанельОткрытьДляРедактирования.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ЗакончитьРедактирование.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ПанельЗакончитьРедактирование.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ПанельСохранитьИзменения.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ПанельОтменитьРедактирование.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ПанельОткрытьКаталогФайла.Видимость = ДоступенЗахватИРедактирование;
	
	Элементы.ПредставлениеРедактирует.Видимость = ДоступенЗахватИРедактирование;
	Элементы.ДекорацияРедактируется.Видимость = Не ДоступенЗахватИРедактирование;
	
	Параметры.Свойство("ID", ID);
	Параметры.Свойство("ОригиналID", ОригиналID);
	
	Если Не Параметры.Свойство("РазрешеноРедактирование", РазрешеноРедактирование) Тогда
		РазрешеноРедактирование = Истина;
	КонецЕсли;
	
	ПолучитьОписаниеФайлаИЗаполнитьФорму();
	
	НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
	НастройкиДокументооборотаИспользоватьЭП = НастройкиДокументооборота.ИспользоватьЭлектронныеЦифровыеПодписи;
	ИспользоватьЭП =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи();
	СписокРасширенийСканКопийОригиналов = НастройкиДокументооборота.СписокРасширенийСканКопийОригиналов;
	
	Если НастройкиДокументооборотаИспользоватьЭП = Ложь Тогда
		Элементы.КартинкаЭП.Видимость = Ложь;
		Элементы.ГруппаЭП.Видимость = Ложь;
		Элементы.ФормаСохранитьВместеСЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиДокументооборотаИспользоватьЭП = Ложь Или ИспользоватьЭП = Ложь Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаДобавитьЭПИзФайла.Видимость = Ложь;
		Элементы.ТаблицаПодписейПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейПроверитьВсе.Видимость = Ложь;
	КонецЕсли;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ТаблицаПодписей").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСпискаЭП();
	ОбновитьЭлементыПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗакрытиеСПараметром Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстПредупреждения = "";
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,,ТекстПредупреждения);
		
	Иначе
		
		Отказ = Истина;
		ПодключитьОбработчикОжидания("ЗакрытьСПараметром", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученHTMLПредпросмотрОбъекта" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ПредставлениеHTML")
				Или Не Параметр.Свойство("ПредпросмотрУрезан")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		Если Параметр.ID = ID И Параметр.Тип = Тип Тогда
			ПредставлениеHTML = Параметр.ПредставлениеHTML;
			ПредпросмотрУрезан = Параметр.ПредпросмотрУрезан;
			ОбновитьЭлементыПредпросмотра();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ИдентификаторФайла")
				Или Не Параметр.Свойство("Событие")
				Или Параметр.ИдентификаторФайла <> ID
				Или Параметр.Событие = "УдалениеФайла" Тогда
			Возврат;
		КонецЕсли;
		НужноОбновление = Истина;
		Если Параметр.Событие = "РедактированиеФайла" Тогда
			НужноОбновление = Не Редактируется;
		КонецЕсли;
		Если НужноОбновление Тогда
			ПолучитьОписаниеФайлаИЗаполнитьФорму();
			УстановитьДоступностьКомандСпискаЭП();
			Если Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП
					И ТаблицаПодписей.Количество() > 0 Тогда
				ПроверитьВсеПодписи(Неопределено);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаДополнительныеДанныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаЭП И ТаблицаПодписей.Количество() > 0 Тогда
		ПроверитьВсеПодписи(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаБольшаяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Зашифрован Или Не Существует Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	ПроверитьВсеПодписи(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьПроцессыИЗадачи1СДокументооборота Тогда
		
		ВнешнийОбъект = Новый Структура;
		ВнешнийОбъект.Вставить("ID", ID);
		ВнешнийОбъект.Вставить("type", Тип);
		ВнешнийОбъект.Вставить("presentation", "");
		
		ПараметрыФормы = Новый Структура("ВнешнийОбъект", ВнешнийОбъект);
		ИмяФормыВсеЗадачи = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВсеЗадачи";
		
		ОткрытьФорму(
			ИмяФормыВсеЗадачи,
			ПараметрыФормы,
			ЭтотОбъект,
			ЭтотОбъект.КлючУникальности,
			ЭтотОбъект.Окно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ID,
			Наименование,
			Расширение,
			УникальныйИдентификатор,
			Ложь,,
			ВладелецID);
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ID,
			Наименование,
			Расширение,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяОригиналомПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ЯвляетсяОригиналом = Не ЯвляетсяОригиналом;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;
	
	Если ЯвляетсяОригиналом
			И Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ЭтоРасширениеСканКопии(
				Расширение, СписокРасширенийСканКопийОригиналов) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЯвляетсяОригиналомПриИзмененииПродолжение",
			ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией.
			|Вы действительно хотите отметить его как оригинал?'");
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Отметка оригинала'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяОригиналомПриИзмененииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ЯвляетсяОригиналом = Не ЯвляетсяОригиналом;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойства

&НаКлиенте
Процедура СвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыбратьЗначениеДополнительногоРеквизита(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
		ТипXDTO =ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
		Если ТипXDTO = "integer" Тогда
			ТекущиеДанные.Значение = 0;
		ИначеЕсли ТипXDTO = "boolean" Тогда
			ТекущиеДанные.Значение = Ложь;
		ИначеЕсли ТипXDTO = "date" Тогда
			ТекущиеДанные.Значение = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer"
		Или ТипXDTO = "boolean"
		Или ТипXDTO = "date"
		Или ТипXDTO = "string" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("ID", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer" 
		Или ТипXDTO = "boolean" 
		Или ТипXDTO = "string" 
		Или ТипXDTO = "date" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("ID", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
			"Значение", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Значение", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Свойства.ТекущиеДанные.Значение = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеID = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеТип = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭП

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПолучитьОписаниеФайлаИЗаполнитьФорму();
	Если Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП
			И ТаблицаПодписей.Количество() > 0 Тогда
		ПроверитьВсеПодписи(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	Если ИспользоватьИнтеграциюДО3 Тогда
		Элементы.ГруппаСтраницыПревью.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью;
		
		МодульИнтеграцияС1СДокументооборот3ВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборот3ВызовСервера");
		ДлительнаяОперация = МодульИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьHTMLПредпросмотрОбъектаАсинхронно(
			УникальныйИдентификатор,
			ID,
			Тип);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ОбновитьПредпросмотрЗавершение",
			ЭтотОбъект);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
			ЭтотОбъект,
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			Ложь,,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ЗаписатьВыполнитьКлиент(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПрисоединенныеФайлы(
		ВладелецФайла,
		ID,,,,,,
		ВладелецID,
		ВладелецТип);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаЧтение(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляРедактирования(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор,
		Ложь,,
		ВладелецID);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор,,
		ВладелецID);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьФайлКак(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайловыеОперацииЕще(Команда)
	
	Подменю = Новый СписокЗначений;
	Если ДоступенЗахватИРедактирование Тогда
		Подменю.Добавить("ОткрытьКаталогФайла", НСтр("ru = 'Открыть каталог файла'"),,
			БиблиотекаКартинок.Папка);
	КонецЕсли;
	Если (Не Редактируется Или РедактируетсяТекущимПользователем) И РазрешеноРедактирование И Не ЕстьПодписи Тогда
		Подменю.Добавить("ОбновитьИзФайлаНаДиске", НСтр("ru = 'Обновить из файла на диске'"),,
			БиблиотекаКартинок.ОбновитьФайлИзФайлаНаДиске);
	КонецЕсли;
	Если ДоступенЗахватИРедактирование И РедактируетсяТекущимПользователем И Не ЕстьПодписи Тогда
		Подменю.Добавить("ОтменитьРедактирование", НСтр("ru = 'Отменить редактирование'"),,
			БиблиотекаКартинок.ОсвободитьФайл);
		Если РазрешеноРедактирование Тогда
			Подменю.Добавить("СохранитьИзменения", НСтр("ru = 'Сохранить изменения'"),,
				БиблиотекаКартинок.ОпубликоватьФайл);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайловыеОперацииЕщеПослеВыбора", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Подменю, Элементы.ФайловыеОперацииЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайловыеОперацииЕщеПослеВыбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ОткрытьКаталогФайла" Тогда
		ОткрытьКаталогФайла();
	ИначеЕсли Результат.Значение = "ОбновитьИзФайлаНаДиске" Тогда
		ОбновитьИзФайлаНаДиске();
	ИначеЕсли Результат.Значение = "ОтменитьРедактирование" Тогда
		ОтменитьРедактирование();
	ИначеЕсли Результат.Значение = "СохранитьИзменения" Тогда
		СохранитьИзменения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПодписатьФайл(
		ID,
		Наименование,
		ВладелецID,
		Редактируется,
		Зашифрован,
		Описание,
		ДанныеПодписейФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодпись(Команда)
	
	ВыделенныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи(
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодписи(
		ТаблицаПодписей,
		УникальныйИдентификатор,,
		ВыделенныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсеПодписи(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодписи(
		ТаблицаПодписей,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	ВыделенныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи(
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.УдалитьПодписи(
		ВыделенныеПодписи,
		ТаблицаПодписей,
		ВладелецID,,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ПараметрыФормы = Новый Структура("ГлавнаяЗадача, Предмет", Новый Структура, Новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", Наименование);
	ПараметрыФормы.Предмет.Вставить("ID", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	ПараметрыФормы.Предмет.Вставить("ВнешнийОбъект", ВладелецФайла);
	
	ИмяФормыСозданиеБизнесПроцесса = "Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса";
	ОткрытьФорму(ИмяФормыСозданиеБизнесПроцесса, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	СвойстваФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла();
	СвойстваФайла.ИдентификаторФайла = ID;
	СвойстваФайла.ИмяФайла = Наименование;
	СвойстваФайла.ОписаниеФайла = Описание;
	СвойстваФайла.Редактируется = Редактируется;
	СвойстваФайла.Зашифрован = Зашифрован;
	СвойстваФайла.ДанныеПодписейФайла = ДанныеПодписейФайла;
	СвойстваФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	СвойстваФайла.ВладелецФайла = ВладелецID;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьДобавлениеЭПИзФайла(СвойстваФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВместеСЭП(
		ID,
		Расширение,
		Наименование,
		Размер,
		ДатаМодификацииУниверсальная,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъект(Команда)
	
	Отказ = Ложь;
	ЗаписатьВыполнитьКлиент(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывается после запроса "Сохранить изменения" и завершает закрытие.
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Отказ = Ложь;
	
	ЗаписатьВыполнитьКлиент(Отказ);
	ПараметрыОповещения = Новый Структура;
	Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, ВладелецФормы);
	
	Если Не Отказ Тогда
		ЗакрытьСПараметром();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		HTMLПредпросмотрОбъекта = Результат.РезультатДлительнойОперации;
		HTMLПредпросмотрОбъекта.Вставить("ID", ID);
		HTMLПредпросмотрОбъекта.Вставить("Тип", Тип);
		Оповестить("ПолученHTMLПредпросмотрОбъекта", HTMLПредпросмотрОбъекта, ЭтотОбъект);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		Элементы.ГруппаСтраницыПревью.ТекущаяСтраница = Элементы.СтраницаПревью;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Закрывает форму без вопросов и проверки модифицированности.
//
&НаКлиенте
Процедура ЗакрытьСПараметром()
	
	ЗакрытиеСПараметром = Истина;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

// Заполняет форму данными файла.
//
&НаСервере
Процедура ЗаполнитьФорму(ОписаниеФайла)
	
	Существует = ЗначениеЗаполнено(ID);
	
	Зашифрован = ОписаниеФайла.Зашифрован;
	ШаблонТекстСПояснением = "%1 (%2)";
	Размер = ОписаниеФайла.Размер;
	ПредставлениеРазмера = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.КраткоеПредставлениеРазмера(Размер);
	Наименование = ОписаниеФайла.Наименование;
	Описание = ОписаниеФайла.Описание;
	Расширение = ОписаниеФайла.Расширение;
	ПолноеИмяФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИмяСРасширением(
		Наименование,
		Расширение);
	ДатаСоздания = ОписаниеФайла.ДатаСоздания;
	ДатаМодификацииУниверсальная = ОписаниеФайла.ДатаМодификацииУниверсальная;
	Автор = ОписаниеФайла.Автор;
	Тип = "DMFile";
	Редактируется = ОписаниеФайла.Редактируется;
	Шаблон = ОписаниеФайла.Шаблон;
	ЯвляетсяОригиналом = ОписаниеФайла.ЯвляетсяОригиналом;
	Элементы.ЯвляетсяОригиналом.Видимость = ОписаниеФайла.ЯвляетсяОригиналомВидимость;
	Элементы.ЯвляетсяОригиналом.ТолькоПросмотр = ОписаниеФайла.ЯвляетсяОригиналомТолькоПросмотр;
	
	ИндексКартинки = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИндексПиктограммыФайла(Расширение);
	
	Если ОписаниеФайла.Свойство("Владелец") И ЗначениеЗаполнено(ОписаниеФайла.Владелец) Тогда
		ПредставлениеВладельца = ОписаниеФайла.Владелец;
		Элементы.ПредставлениеВладельца.Видимость = Истина;
		ОписаниеФайла.Свойство("Владелец", Владелец);
		ОписаниеФайла.Свойство("ВладелецID", ВладелецID);
		ОписаниеФайла.Свойство("ВладелецТип", ВладелецТип);
		ОписаниеФайла.Свойство("ВладелецФайла", ВладелецФайла);
		Элементы.ФормаПоказатьВСписке.Видимость = Истина;
		
		ТипВладельца = "";
		Если ВладелецТип = "DMDocument" Тогда
			ТипВладельца = НСтр("ru='Документ'");
			
		ИначеЕсли ВладелецТип = "DMDocumentFolder" Или ВладелецТип = "DMInternalDocumentFolder" Тогда
			ТипВладельца = НСтр("ru='Папка'");
			
		ИначеЕсли ВладелецТип = "DMIncomingEMail" Тогда
			ТипВладельца = НСтр("ru='Вход. письмо'");
			
		ИначеЕсли ВладелецТип = "DMOutgoingEMail" Тогда
			ТипВладельца = НСтр("ru='Исх. письмо'");
			
		ИначеЕсли ВладелецТип = "DMInternalDocument" Тогда
			ТипВладельца = НСтр("ru='Внутр. документ'");
			
		ИначеЕсли ВладелецТип = "DMIncomingDocument" Тогда
			ТипВладельца = НСтр("ru='Вход. документ'");
			
		ИначеЕсли ВладелецТип = "DMOutgoingDocument" Тогда
			ТипВладельца = НСтр("ru='Исх. документ'");
			
		КонецЕсли;
		Элементы.ПредставлениеВладельца.Заголовок = ТипВладельца;
		Элементы.Владелец.Заголовок = ТипВладельца;
	Иначе
		Элементы.ПредставлениеВладельца.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
	КонецЕсли;
	
	ФорматнаяСтрока = НСтр("ru = 'ДФ=""дд.ММ.гггг ЧЧ:мм""'");
	
	ПредставлениеСоздан = СтрШаблон(ШаблонТекстСПояснением,
		Формат(ОписаниеФайла.ДатаСоздания, ФорматнаяСтрока),
		ОписаниеФайла.Автор);
	
	ПредставлениеИзменен = Формат(ОписаниеФайла.ДатаМодификации, ФорматнаяСтрока);
	Если ОписаниеФайла.АвторМодификации <> "" Тогда
		ПредставлениеИзменен = СтрШаблон(ШаблонТекстСПояснением,
			ПредставлениеИзменен,
			ОписаниеФайла.АвторМодификации);
	КонецЕсли;
	
	Если ОписаниеФайла.Свойство("Редактирует") И ЗначениеЗаполнено(ОписаниеФайла.Редактирует) Тогда
		Редактирует = ОписаниеФайла.Редактирует;
		ДатаЗаема = ОписаниеФайла.ДатаЗаема;
		ПредставлениеРедактирует = СтрШаблон(ШаблонТекстСПояснением,
			Формат(ОписаниеФайла.ДатаЗаема, ФорматнаяСтрока),
			ОписаниеФайла.Редактирует);
		ТекущийПользовательИСотрудники =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
		РедактируетсяТекущимПользователем =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
				ОписаниеФайла.РедактируетID,
				ОписаниеФайла.РедактируетТип,
				ТекущийПользовательИСотрудники);
	Иначе
		Редактирует = "";
		ДатаЗаема = Неопределено;
		ПредставлениеРедактирует = "";
		РедактируетсяТекущимПользователем = Ложь;
		Элементы.ДекорацияРедактируется.Заголовок = ?(Редактируется, НСтр("ru = 'Редактируется'"), "");
	КонецЕсли;
	
	ПредставлениеHTML = ОписаниеФайла.ПредставлениеHTML;
	ПредпросмотрУрезан = ОписаниеФайла.ПредпросмотрУрезан;
	
	Элементы.ЗадачиПоПриложению.Заголовок = ОписаниеФайла.ЗадачиПоПриложению;
	Элементы.ЗадачиПоПриложению.Видимость = ЗначениеЗаполнено(Элементы.ЗадачиПоПриложению.Заголовок);
	
	ТекущаяВерсияID = ОписаниеФайла.ТекущаяВерсияID;
	ТекущаяВерсияНомер = ОписаниеФайла.ТекущаяВерсияНомер;
	Элементы.ТекущаяВерсияНомер.Видимость = (ОписаниеФайла.ТекущаяВерсияНомер <> Неопределено);
	ТекущаяВерсияАвтор = ОписаниеФайла.ТекущаяВерсияАвтор;
	Элементы.ТекущаяВерсияАвтор.Видимость = (ОписаниеФайла.ТекущаяВерсияАвтор <> Неопределено);
	ТекущаяВерсияДатаСоздания = ОписаниеФайла.ТекущаяВерсияДатаСоздания;
	Элементы.ТекущаяВерсияДатаСоздания.Видимость = (ОписаниеФайла.ТекущаяВерсияДатаСоздания <> Неопределено);
	ТекущаяВерсияДатаИзменения = ОписаниеФайла.ТекущаяВерсияДатаИзменения;
	Элементы.ТекущаяВерсияДатаИзменения.Видимость = (ОписаниеФайла.ТекущаяВерсияДатаИзменения <> Неопределено);
	ТекущаяВерсияРазмер = ОписаниеФайла.ТекущаяВерсияРазмер;
	Элементы.ГруппаРазмер.Видимость = (ОписаниеФайла.ТекущаяВерсияРазмер <> Неопределено);
	ХранитьВерсии = ОписаниеФайла.ХранитьВерсии;
	Элементы.ХранитьВерсии.Видимость = (ОписаниеФайла.ХранитьВерсии <> Неопределено);
	
	РольФайлаID = ОписаниеФайла.РольФайлаID;
	ПредставлениеРольФайла = ОписаниеФайла.РольФайла;
	Элементы.ПредставлениеРольФайла.Видимость = (ПредставлениеРольФайла <> "");
	
	Код = ОписаниеФайла.Код;
	Элементы.Код.Видимость = (Код <> "");
	
	Проект = ОписаниеФайла.Проект;
	Элементы.Проект.Видимость = (Проект <> "");
	
	ТаблицаПодписей.Очистить();
	
	ДанныеВладельцаПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи(
		Наименование,
		ID,
		Тип,
		Зашифрован);
	
	НомерСтроки = 0;
	Для Каждого Подпись Из ОписаниеФайла.Подписи Цикл
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьСтрокуДереваПодписей(
			ТаблицаПодписей.Добавить(),
			НомерСтроки,
			Подпись,
			ДанныеВладельцаПодписи,
			УникальныйИдентификатор);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	КолВоПодписей = ТаблицаПодписей.Количество();
	ЕстьПодписи = (КолВоПодписей <> 0);
	
	ТекстЗаголовка = НСтр("ru = 'ЭП'");
	Если ЕстьПодписи Тогда
		ТекстЗаголовка = СтрШаблон(ШаблонТекстСПояснением,
			ТекстЗаголовка,
			Строка(КолВоПодписей));
	КонецЕсли;
	Элементы.ГруппаЭП.Заголовок = ТекстЗаголовка;
	
	Если ОписаниеФайла.СтатусЭП <> Неопределено Тогда
		
		СтатусЭП = ОписаниеФайла.СтатусЭП;
		Элементы.КартинкаЭП.Подсказка = ОписаниеФайла.СтатусЭППодсказка;
		
	Иначе
		
		Если Зашифрован Тогда
			Если КолВоПодписей = 0 Тогда
				СтатусЭП = 1;
				Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Зашифрован. Не подписан электронной подписью'");
			Иначе
				СтатусЭП = 3;
				Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Зашифрован. Подписан электронной подписью. Подпись не проверена.'");
			КонецЕсли;
		Иначе
			Если КолВоПодписей = 0 Тогда
				СтатусЭП = 0;
				Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Не подписан электронной подписью'");
			Иначе
				СтатусЭП = 2;
				Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Подписан электронной подписью. Подпись не проверена.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеФайла.СтатусВзаимодействия <> Неопределено Тогда
		
		СтатусВзаимодействия = ОписаниеФайла.СтатусВзаимодействия;
		Элементы.КартинкаВзаимодействие.Подсказка = ОписаниеФайла.СтатусВзаимодействияПодсказка;
		
	Иначе
		
		ЕстьЗадачи = Ложь;
		
		Если ИспользоватьИнтеграциюДО2 Тогда
			
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
			
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
			Отбор = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
			ОтборПредметов = Отбор.target; // СписокXDTO
			
			Предмет = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMObject");
			Предмет.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ID,
				Тип);
			Предмет.name = "";
			ОтборПредметов.Добавить(Предмет);
			
			Запрос.query = Отбор;
			
			Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			
			Для Каждого БизнесПроцессXDTO Из Ответ.businessProcesses Цикл
				Для Каждого ЗадачаXDTO Из БизнесПроцессXDTO.tasks Цикл
					Если ЗадачаXDTO.executed = Ложь Тогда
						ЕстьЗадачи = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЗадачи Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьЗадачи Тогда
			СтатусВзаимодействия = 1;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу выполняются задачи'");
		Иначе
			СтатусВзаимодействия = 0;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу нет выполняющихся задач'");
		КонецЕсли;
		
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПоместитьДополнительныеРеквизитыНаФорму(
		ЭтотОбъект,,
		ОписаниеФайла.ДопРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыПредпросмотра()
	
	ИспользоватьПредпросмотрФайлов = (ПредставлениеHTML <> "");
	Элементы.ГруппаСтраницыПревью.Видимость = ИспользоватьПредпросмотрФайлов;
	Если ИспользоватьПредпросмотрФайлов Тогда
		Если РедактируетсяТекущимПользователем Тогда
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Иначе
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПредпросмотрУрезан;
		КонецЕсли;
		Элементы.ГруппаСтраницыПревью.ТекущаяСтраница = Элементы.СтраницаПревью;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКоманд()
	
	РедактируетсяДругимПользователем = Редактируется И Не РедактируетсяТекущимПользователем;
	
	МожноЗахватить = ДоступенЗахватИРедактирование
		И Не РедактируетсяДругимПользователем
		И РазрешеноРедактирование
		И Не Зашифрован
		И Не ЕстьПодписи;
	МожноЗакончитьРедактирование = Существует И РедактируетсяТекущимПользователем И Не Зашифрован И Не ЕстьПодписи;
	
	Элементы.ФормаПоказатьВСписке.Доступность = Существует И Не Зашифрован;
	Элементы.ОткрытьНаЧтение.Доступность = Существует И Не Зашифрован;
	Элементы.ПанельОткрытьНаЧтение.Доступность = Существует И Не Зашифрован;
	Элементы.СохранитьНаДиск.Доступность = Существует И Не Зашифрован;
	Элементы.ПанельСохранитьНаДиск.Доступность = Существует И Не Зашифрован;
	Элементы.ФайловыеОперацииЕще.Доступность = Существует И Не Зашифрован;
	Элементы.ПанельОткрытьКаталогФайла.Доступность = Существует И Не Зашифрован;
	
	Элементы.ГруппаЭП.Доступность = Существует И Не Зашифрован;
	Элементы.ГруппаКомандыЭП.Доступность = Существует И Не Зашифрован;
	
	Элементы.ОткрытьДляРедактирования.Доступность = Существует И МожноЗахватить;
	Элементы.ПанельОткрытьДляРедактирования.Доступность = Существует И МожноЗахватить;
	
	Элементы.ЗакончитьРедактирование.Доступность = МожноЗакончитьРедактирование;
	Элементы.ПанельЗакончитьРедактирование.Доступность = МожноЗакончитьРедактирование;
	Элементы.ПанельСохранитьИзменения.Доступность = МожноЗакончитьРедактирование;
	Элементы.ПанельОтменитьРедактирование.Доступность = МожноЗакончитьРедактирование;
	
	Элементы.ПанельОбновитьИзФайлаНаДиске.Доступность = Существует И МожноЗахватить;
	
КонецПроцедуры

// Получает описание файла по идентификатору и заполняет поля формы.
//
&НаСервере
Процедура ПолучитьОписаниеФайлаИЗаполнитьФорму()
	
	Если ЗначениеЗаполнено(ID) Тогда
		ОписаниеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОписаниеФайла(ID, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(ОригиналID) Тогда
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(
			Неопределено,
			УникальныйИдентификатор);
		ОписаниеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОписаниеФайла(
			ОригиналID,
			ЭтотОбъект,
			АдресВременногоХранилищаФайла);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан идентификатор файла.'");
	КонецЕсли;
	
	ЗаполнитьФорму(ОписаниеФайла);
	УстановитьДоступностьКоманд();
	
	Элементы.Наименование.ТолькоПросмотр = Не РазрешеноРедактирование;
	Элементы.Описание.ТолькоПросмотр = Не РазрешеноРедактирование;
	
	Если ЗначениеЗаполнено(ID) Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (Файл)'"), Наименование);
	Иначе
		Заголовок = НСтр("ru = 'Файл (создание)'");
	КонецЕсли;
	
КонецПроцедуры

// В зависимости от наличия подписей устанавливает доступность команд ЭП.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И Не Зашифрован;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи И Не Зашифрован;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И Не Зашифрован;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И Не Зашифрован;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И Не Зашифрован;
	
	Элементы.ФормаСохранитьВместеСЭП.Доступность = ЕстьПодписи И Не Зашифрован;
	
КонецПроцедуры

// Записывает файл и его подписи.
//
&НаКлиенте
Процедура ЗаписатьВыполнитьКлиент(Отказ)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Наименование'")),,
			"Наименование");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID) Тогда
		ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
		ЗаписатьВыполнить(ДанныеПодписейФайла);
	Иначе
		СоздатьИзОригинала();
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОбИзмененииФайла(
		"ЗаписьФайла",
		Наименование,
		ID,
		ВладелецID,,,
		УникальныйИдентификатор);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Создает файл копированием оригинала.
//
&НаСервере
Процедура СоздатьИзОригинала()
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		Неопределено,
		"DMFile",
		Расширение,
		РольФайлаID);
	ТекущийФайл.Описание = Описание;
	ТекущийФайл.Размер = Размер;
	ТекущийФайл.ДатаМодификации = ДатаМодификацииУниверсальная;
	ТекущийФайл.ДатаМодификацииУниверсальная = ДатаМодификацииУниверсальная;
	
	ПараметрыСоздания = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(
		ТекущийФайл);
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Владелец = ВладелецФайла;
	ПараметрыСоздания.ЯвляетсяСканКопией = ЯвляетсяОригиналом;
	
	ID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьФайлВДокументообороте(
		ПараметрыСоздания,
		ВладелецID,
		ВладелецТип,
		Владелец);
	
	ОригиналID = "";
	
	ПолучитьОписаниеФайлаИЗаполнитьФорму();
	
КонецПроцедуры

// Записывает файл и указанные подписи.
//
&НаСервере
Процедура ЗаписатьВыполнить(МассивСуществующихПодписейФайла)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ФайлXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Тип);
	
	ФайлXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	
	// При записи передаем Имя, Описание, признак Является оригиналом, Доп. свойства, а также подписи.
	ФайлXDTO.name = Наименование;
	ФайлXDTO.description = Описание;
	ФайлXDTO.scannedOriginal = ЯвляетсяОригиналом;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьПодписиОбъектаXDTO(
		Прокси,
		ФайлXDTO,
		МассивСуществующихПодписейФайла);
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.СформироватьДополнительныеСвойства(
		Прокси,
		ФайлXDTO,
		ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, ФайлXDTO);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла()
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьКаталогФайла(ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске()
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
		ID,
		Наименование,
		Расширение,
		МестноеВремя(ДатаМодификацииУниверсальная),
		УникальныйИдентификатор,,
		ВладелецID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование()
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
		ID,,
		ВладелецID,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения()
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьИзмененияРедактируемогоФайла(
		ID,
		Наименование,
		Расширение,
		УникальныйИдентификатор,,
		ВладелецID);
	
КонецПроцедуры

#КонецОбласти