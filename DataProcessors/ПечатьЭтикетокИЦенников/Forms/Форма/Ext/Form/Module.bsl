
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущиеДанныеИсходноеСостояние;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ЗаполнениеПараметровФормы = Новый Структура;
	ЗаполнениеПараметровФормы.Вставить("ФормаПодбора");
	ЗаполнениеПараметровФормы.Вставить("ПодборТоваров");
	ЗаполнениеПараметровФормы.Вставить("ПодборВДокументСписания");
	ПараметрыФормы = Новый ФиксированнаяСтруктура(ЗаполнениеПараметровФормы);
	МестоХраненияОстатка = "Склад";
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Товары);
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				ВызватьИсключение НСтр("ru = 'Режим печати не установлен'");
			КонецЕсли;
			
			ЗагрузитьНастройкиОтбора();
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьОрганизацию", ПараметрДействия) Тогда
				Объект.Организация = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				Объект.Склад = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦены", ПараметрДействия) Тогда
				Объект.ВидЦены = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента") Тогда
				ПечатьИзДокумента = Истина;
				Элементы.Настройки.Видимость = Ложь;
				Элементы.Режим.Видимость = Ложь;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("МестоХраненияОстатка", ПараметрДействия) Тогда
				МестоХраненияОстатка = ПараметрДействия;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу");
			ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе");
			ЗаполнитьКоличествоЦенниковПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоДокументу");
			ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе");
			ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу");
			ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе");
			
			ПараметрыУчетаНоменклатуры = ПодборТоваровСервер.ПараметрыУчетаНоменклатуры(ЭтотОбъект);
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров") Тогда
				ЗаполнитьТаблицуТоваровНаСервере(Ложь);
			КонецЕсли;
			
		Иначе
			ЗагрузитьНастройкиОтбора();
		КонецЕсли;
		
	Иначе
		
		// Вызов обработки из интерфейса
		ЗаполнитьКоличествоЭтикетокПоДокументу        = Ложь;
		ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = Истина;
		ЗаполнитьКоличествоЦенниковПоДокументу        = Ложь;
		ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = Истина;
		ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу = Ложь;
		ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе = Истина;
		
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
		
		ПараметрыУчетаНоменклатуры = ПодборТоваровСервер.ПараметрыУчетаНоменклатуры(ЭтотОбъект);
		
		ЗагрузитьНастройкиОтбора();
		
	КонецЕсли;
	
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	Элементы.ТоварыУстановитьНовыйШтрихкод.Доступность = ПравоРегистрацииШтрихкодовНоменклатурыДоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверятьЭтикетки = Ложь;
	ПроверятьЦенники = Ложь;
	ПроверятьСтеллажныеКарточки = Ложь;
	
	Если Режим = ПечатьЦенниковИЭтикеток() Тогда
		ПроверятьЭтикетки = Истина;
		ПроверятьЦенники = Истина;
	ИначеЕсли Режим = ПечатьЭтикеток() Тогда
		ПроверятьЭтикетки = Истина;
	ИначеЕсли Режим = ПечатьЦенников() Тогда
		ПроверятьЦенники = Истина;
	ИначеЕсли Режим = ПечатьСтеллажныхКарточек() Тогда
		ПроверятьСтеллажныеКарточки = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если Не СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьЗаполнениеСтрокиТоваров(СтрокаТЧ, ПроверятьЭтикетки, ПроверятьЦенники, ПроверятьСтеллажныеКарточки) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АдресВХранилище") И ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СохраненныеНастройки = Новый Структура;
		Для Каждого КлючИЗначение Из Настройки Цикл
			// Преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,".","_QTQ_");
			ИмяКлюча = СтрЗаменить(ИмяКлюча," ","_QPQ_");
			Если ИмяКлюча = "" Тогда
				ИмяКлюча = "_QQQ_";
			КонецЕсли;
			СохраненныеНастройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
		Настройки.Очистить();
		
	Иначе
		
		ВидимостьОтбора = Настройки.Получить("ВидимостьОтбора");
		Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
		Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
		
		ВидимостьРежимаЗаполнения = Настройки.Получить("ВидимостьРежимаЗаполнения");
		Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
		Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
		
		Режим = Настройки.Получить("Режим");
		Если ЗначениеЗаполнено(Режим) Тогда
			УстановитьРежим(Режим);
		КонецЕсли;
		
		НастройкиОтбора = Настройки.Получить("НастройкиОтбора");
		Если НастройкиОтбора <> Неопределено Тогда
			ЗагрузитьНастройкиОтбора(НастройкиОтбора.Получить());
		Иначе
			ЗагрузитьНастройкиОтбора();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из СохраненныеНастройки Цикл
			// Обратное преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,"_QTQ_",".");
			ИмяКлюча = СтрЗаменить(ИмяКлюча,"_QPQ_"," ");
			Если ИмяКлюча = "_QQQ_" Тогда
				ИмяКлюча = "";
			КонецЕсли;
			Настройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
	Иначе
		
		// Сохранение отбора выполняется только если это не печать из документа
		Настройки.Вставить("НастройкиОтбора",Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД
#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Ложь);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуТоваровЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Заголовок);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", МестоХраненияОстатка);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыПодбора.Вставить("ВидЦены", Объект.ВидЦены);
	
	Оповестить = Новый ОписаниеОповещения("ПодборТоваровЗавершение", ЭтотОбъект);
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор, Оповестить);
	Иначе
		ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор, Оповестить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		ИменаМакетов = "";
		
		Если Режим = ПечатьЦенниковИЭтикеток() Тогда
			ИменаМакетов = "ЭтикеткаТовары,ЦенникТовары";
		ИначеЕсли Режим = ПечатьЦенников() Тогда
			ИменаМакетов = "ЦенникТовары";
		ИначеЕсли Режим = ПечатьЭтикеток() Тогда
			ИменаМакетов = "ЭтикеткаТовары";
		ИначеЕсли Режим = ПечатьСтеллажныхКарточек() Тогда
			ИменаМакетов = "СтеллажнаяКарточкаТовары";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			ИменаМакетов,
			ПараметрКоманды,
			ЭтотОбъект,
			ПолучитьПараметры());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРежимЗаполнения(Команда)
	
	ВидимостьРежимаЗаполнения = НЕ ВидимостьРежимаЗаполнения;
	Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
	Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечати(ПечатьЦенников());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенниковИЭтикеток(Команда)
	
	УстановитьРежимПечати(ПечатьЦенниковИЭтикеток());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечати(ПечатьЭтикеток());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьСтеллажныхКарточек(Команда)
	
	УстановитьРежимПечати(ПечатьСтеллажныхКарточек());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОрганизацию(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"Организация",
		НСтр("ru='Организация'"),
		"Справочник.Организации.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСклад(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"Склад",
		НСтр("ru='Склад'"),
		"Справочник.Склады.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсточникФинансирования(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ИсточникФинансирования",
		НСтр("ru='Источник финансирования'"),
		"Справочник.ИсточникиФинансирования.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоставщика(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"Поставщик",
		НСтр("ru='Поставщик'"),
		"Справочник.Контрагенты.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуДокумента(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ДатаДокумента",
		НСтр("ru='Дата документа'"),
		Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Сгенерировано %Количество% штрихкодов.'");
	Текст = СтрЗаменить(Текст, "%Количество%", УстановитьНовыеШтрихкодыEAN13НаСервере());
	
	Количество = 0;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Количество = 0;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	УстановитьКоличествоПоУмолчаниюНаСервере();
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Установлено количество по умолчанию для  %Количество% строк.'");
	Текст = СтрЗаменить(Текст, "%Количество%", КоличествоВсего);
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"КоличествоЦенников",
		НСтр("ru='Количество ценников'"),
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"КоличествоЭтикеток",
		НСтр("ru='Количество этикеток'"),
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоСтеллажныхКарточек(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"КоличествоСтеллажныхКарточек",
		НСтр("ru='Количество стеллажных карточек'"),
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ШаблонЦенника",
		НСтр("ru='Шаблон ценника'"),
		"Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",
		Новый Структура(
			"Отбор",
			Новый Структура(
				"Назначение",
				ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров"))));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ШаблонЭтикетки",
		НСтр("ru='Шаблон этикетки'"),
		"Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",
		Новый Структура(
			"Отбор",
			Новый Структура(
				"Назначение",
				ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров"))));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонСтеллажныхКарточек(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ШаблонСтеллажнойКарточки",
		НСтр("ru='Шаблон этикетки'"),
		"Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",
		Новый Структура(
			"Отбор",
			Новый Структура(
				"Назначение",
				ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.СтеллажнаяКарточкаДляТовара"))));
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКоманд

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЦенПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент <> Элементы.ТоварыШтрихкод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТоварыШтрихкод.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"     , ТекущиеДанные.Номенклатура);
	ДанныеСтроки.Вставить("СерияНоменклатуры", ТекущиеДанные.СерияНоменклатуры);
	ДанныеСтроки.Вставить("Партия"           , ТекущиеДанные.Партия);
	ДанныеСтроки.Вставить("Упаковка"         , ТекущиеДанные.Упаковка);
	
	Элементы.ТоварыШтрихкод.СписокВыбора.ЗагрузитьЗначения(ПолучитьШтрихкодыНоменклатуры(ДанныеСтроки));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанныеИсходноеСостояние = ТекущиеДанныеИсходноеСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанныеИсходноеСостояние = ТекущиеДанныеИсходноеСостояние();
	ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.Номенклатура <> ТекущиеДанные.Номенклатура Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "Штрихкод, ОстатокНаСкладе, Цена, ШаблонСтеллажнойКарточки, ШаблонЦенника, ШаблонЭтикетки");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.СерияНоменклатуры <> ТекущиеДанные.СерияНоменклатуры Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "Штрихкод, ОстатокНаСкладе, Цена");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.Партия <> ТекущиеДанные.Партия Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "Штрихкод, ОстатокНаСкладе, Цена");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.Упаковка <> ТекущиеДанные.Упаковка Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "Штрихкод, ОстатокНаСкладе, Цена, КоличествоВДокументе");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникФинансированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.ИсточникФинансирования <> ТекущиеДанные.ИсточникФинансирования Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "ОстатокНаСкладе");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоХраненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.МестоХранения <> ТекущиеДанные.МестоХранения Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "ОстатокНаСкладе");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.Склад <> ТекущиеДанные.Склад Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "ОстатокНаСкладе");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОрганизацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеИсходноеСостояние.Организация <> ТекущиеДанные.Организация Тогда
		ОбновитьДанныеТоваров(Элементы.Товары.ТекущаяСтрока, "ОстатокНаСкладе");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеИсходноеСостояние, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоСтеллажныхКарточекПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонСтеллажнойКарточкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если ТекущиеДанные.Выбран Тогда
		
		ПроверятьЭтикетки = Ложь;
		ПроверятьЦенники = Ложь;
		ПроверятьСтеллажныеКарточки = Ложь;
		
		Если Режим = ПечатьЦенниковИЭтикеток() Тогда
			ПроверятьЭтикетки = Истина;
			ПроверятьЦенники = Истина;
		ИначеЕсли Режим = ПечатьЭтикеток() Тогда
			ПроверятьЭтикетки = Истина;
		ИначеЕсли Режим = ПечатьЦенников() Тогда
			ПроверятьЦенники = Истина;
		ИначеЕсли Режим = ПечатьСтеллажныхКарточек() Тогда
			ПроверятьСтеллажныеКарточки = Истина;
		КонецЕсли;
		
		ОчиститьСообщения();
		Если Не ПроверитьЗаполнениеСтрокиТоваров(ТекущиеДанные, ПроверятьЭтикетки, ПроверятьЦенники, ПроверятьСтеллажныеКарточки) Тогда
			ТекущиеДанные.Выбран = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	
	УстановитьОформлениеПараметровШаблонов("КоличествоЭтикеток", "ШаблонЭтикетки");
	УстановитьОформлениеПараметровШаблонов("КоличествоЦенников", "ШаблонЦенника");
	УстановитьОформлениеПараметровШаблонов("КоличествоСтеллажныхКарточек", "ШаблонСтеллажнойКарточки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПараметровШаблонов(ИмяРеквизитаКоличество, ИмяРеквизитаШаблона)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Товары" + ИмяРеквизитаКоличество].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары." + ИмяРеквизитаШаблона);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.LightGray);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Товары" + ИмяРеквизитаКоличество].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары." + ИмяРеквизитаКоличество);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Товары" + ИмяРеквизитаШаблона].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары." + ИмяРеквизитаШаблона);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
		
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте: не заполнены либо количество, либо не задан шаблон ценника (этикетки). В этом случае отметка выбора для строк не может быть установлена.'");
		
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Операция выполнена'"),, Текст);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		
		// Расчет количества Стеллажных карточек.
		Если ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу И НЕ ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоСтеллажныхКарточек = 1;
		ИначеЕсли ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу И ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоСтеллажныхКарточек = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
		ИначеЕсли НЕ ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу И ЗаполнитьКоличествоСтеллажныхКарточекПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоСтеллажныхКарточек = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
		КонецЕсли;
		
	Иначе
		
		// Расчет количества Этикеток.
		Если ЗаполнитьКоличествоЭтикетокПоДокументу И НЕ ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
		ИначеЕсли ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.КоличествоВДокументе > СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.КоличествоВДокументе);
		ИначеЕсли НЕ ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
		КонецЕсли;
		
		// Расчет количества Ценников.
		Если ЗаполнитьКоличествоЦенниковПоДокументу И НЕ ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЦенников = 1;
		ИначеЕсли ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
		ИначеЕсли НЕ ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
			СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваровЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(СохранятьШаблоныИКоличество)
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если СохранятьШаблоныИКоличество Тогда
		ТаблицаВыбранныеПозиции = ПолучитьТекущиеДанные();
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек);
	
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если Объект.ИсходныеДанные.Количество() > 0 Или ПечатьИзДокумента Тогда
		Если Режим = ПечатьСтеллажныхКарточек() Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСтеллажныеКарточки";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		КонецЕсли;
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД";
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	КэшируемыеЗначения = Неопределено;
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	СтруктураРезультата.ТаблицаТоваров.Колонки.Количество.Имя = "КоличествоВДокументе";
	Для Каждого Данные Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		СтрокаТовара = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Данные);
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТовара);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ.
		Если СохранятьШаблоныИКоличество Тогда
			ПараметрыОтбора = Новый Структура("Номенклатура, СерияНоменклатуры, Партия, Упаковка, Организация, Склад, МестоХранения, ИсточникФинансирования, Поставщик, ДатаДокумента");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТовара);
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВосстанавливаемыеСвойства = "ШаблонЦенника, КоличествоЦенников, ШаблонЭтикетки, КоличествоЭтикеток, ШаблонСтеллажнойКарточки, КоличествоСтеллажныхКарточек";
				ЗаполнитьЗначенияСвойств(СтрокаТовара, НайденныеСтроки[0], ВосстанавливаемыеСвойства);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТовара.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТовара, Режим);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущиеДанные(ИдентификаторыСтрок = Неопределено)
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		Строки = Неопределено;
	ИначеЕсли ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		Строки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			Строки.Добавить(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
	Иначе
		Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок));
	КонецЕсли;
	
	Возврат Объект.Товары.Выгрузить(Строки);
	
КонецФункции

&НаСервере
Процедура УстановитьОбязательныеПоляДанных(СтруктураНастроек)
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ДатаПоследнегоИзмененияЦены");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("СерияНоменклатуры");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Партия");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НомерСтроки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Склад");
		СтруктураНастроек.ОбязательныеПоля.Добавить("МестоХранения");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ИсточникФинансирования");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Поставщик");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ДатаДокумента");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонСтеллажнойКарточки");
	Иначе
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикетки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенника");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДанных(СтруктураНастроек)
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены", Объект.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация", Объект.Организация);
	
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("Склад", Объект.Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаЦен) Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ДатаЦен", Объект.ДатаЦен);
	Иначе
		СтруктураНастроек.ПараметрыДанных.Вставить("ДатаЦен", ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьВыбораТовараВСписке()
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.Выбран = ПроверитьВозможностьВыбораТовара(Строка, Режим);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим)
	
	ДанныеЗаполнены = Ложь;
	Если Режим = ПечатьЦенниковИЭтикеток() Тогда
	
		ДанныеЗаполнены =
			ТекущиеДанные.КоличествоЦенников <> 0
			И ТекущиеДанные.КоличествоЭтикеток <> 0
			И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки);
	
	ИначеЕсли Режим = ПечатьЭтикеток() Тогда
		
		ДанныеЗаполнены = ТекущиеДанные.КоличествоЭтикеток <> 0 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки);
		
	ИначеЕсли Режим = ПечатьЦенников() Тогда
		
		ДанныеЗаполнены =  ТекущиеДанные.КоличествоЦенников <> 0 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника);
		
	ИначеЕсли Режим = ПечатьСтеллажныхКарточек() Тогда
		
		ДанныеЗаполнены = ТекущиеДанные.КоличествоСтеллажныхКарточек <> 0 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонСтеллажнойКарточки);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЗаполнениеСтрокиТоваров(СтрокаТЧ, ПроверятьЭтикетки, ПроверятьЦенники, ПроверятьСтеллажныеКарточки)
	
	Отказ = Ложь;
	НомерСтроки = СтрокаТЧ.НомерСтроки;
	
	Если ПроверятьЦенники Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КоличествоЦенников) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено количество ценников в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "КоличествоЦенников");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выбран шаблон ценника в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "ШаблонЦенника");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверятьЭтикетки Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КоличествоЭтикеток) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено количество этикеток в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "КоличествоЭтикеток");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выбран шаблон этикетки в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "ШаблонЭтикетки");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверятьСтеллажныеКарточки Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КоличествоСтеллажныхКарточек) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено количество стеллажных карточек в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "КоличествоСтеллажныхКарточек");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ШаблонСтеллажнойКарточки) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выбран шаблон стеллажной карточки в строке: %1'"),
				НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТЧ.НомерСтроки, "ШаблонСтеллажнойКарточки");
			СообщитьПользователю(ТекстСообщения, Поле, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
	ВидимостьСтеллажныеКарточки = Ложь;
	
	Если Режим = ПечатьЦенниковИЭтикеток() Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
		ВидимостьСтеллажныеКарточки = Ложь;
	ИначеЕсли Режим = ПечатьЦенников() Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
		ВидимостьСтеллажныеКарточки = Ложь;
	ИначеЕсли Режим = ПечатьЭтикеток() Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
		ВидимостьСтеллажныеКарточки = Ложь;
	ИначеЕсли Режим = ПечатьСтеллажныхКарточек() Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Ложь;
		ВидимостьСтеллажныеКарточки = Истина;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.РежимЗаполненияЭтикеток.Видимость                = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И ПечатьИзДокумента;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	Элементы.РежимЗаполненияЦенников.Видимость                = ВидимостьЦенники;
	Элементы.ЗаполнитьКоличествоЦенниковПоДокументу.Видимость = ВидимостьЦенники И ПечатьИзДокумента;
	
	Элементы.ТоварыКоличествоСтеллажныхКарточек.Видимость               = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыШаблонСтеллажнойКарточки.Видимость                   = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыУстановитьШаблонСтеллажныхКарточек.Видимость         = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыУстановитьКоличествоСтеллажныхКарточек.Видимость     = ВидимостьСтеллажныеКарточки;
	Элементы.РежимЗаполненияСтеллажныхКарточек.Видимость                = ВидимостьСтеллажныеКарточки;
	Элементы.ЗаполнитьКоличествоСтеллажныхКарточекПоДокументу.Видимость = ВидимостьСтеллажныеКарточки И ПечатьИзДокумента;
	
	Элементы.Склад.Видимость                                  = ВидимостьСтеллажныеКарточки;
	
	Элементы.ТоварыСклад.Видимость                            = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыМестоХранения.Видимость                    = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыИсточникФинансирования.Видимость           = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыДатаДокумента.Видимость                    = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыПоставщик.Видимость                        = ВидимостьСтеллажныеКарточки;
	
	Элементы.ТоварыУстановитьСклад.Видимость                  = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыУстановитьИсточникФинансирования.Видимость = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыУстановитьДатуДокумента.Видимость          = ВидимостьСтеллажныеКарточки;
	Элементы.ТоварыУстановитьПоставщика.Видимость             = ВидимостьСтеллажныеКарточки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = ПечатьЦенников();
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников'");
	КонецЕсли;
	
	ПроверитьВозможностьВыбораТовараВСписке();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = ПечатьЦенниковИЭтикеток();
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников и этикеток из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников и этикеток'");
	КонецЕсли;
	
	ПроверитьВозможностьВыбораТовараВСписке();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = ПечатьЭтикеток();
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать этикеток из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать этикеток'");
	КонецЕсли;
	
	ПроверитьВозможностьВыбораТовараВСписке();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьСтеллажныхКарточекНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = ПечатьСтеллажныхКарточек();
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать стеллажных карточек из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать стеллажных карточек'");
	КонецЕсли;
	
	ПроверитьВозможностьВыбораТовараВСписке();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечати(НовыйРежим)
	
	Если НовыйРежим = Режим Тогда
		Возврат;
	КонецЕсли;
	
	Если (НовыйРежим = ПечатьСтеллажныхКарточек() Или Режим = ПечатьСтеллажныхКарточек()) И Объект.Товары.Количество() > 0 Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьРежимПечатиПослеПодтверждения", ЭтотОбъект, НовыйРежим);
		ПоказатьВопрос(Обработчик, НСтр("ru = 'При смене режима печати список товаров будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли НовыйРежим = ПечатьСтеллажныхКарточек() Или Режим = ПечатьСтеллажныхКарточек() Тогда
		УстановитьРежим(НовыйРежим);
		ЗагрузитьНастройкиОтбора(КомпоновщикНастроек.Настройки);
	Иначе
		УстановитьРежим(НовыйРежим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатиПослеПодтверждения(Ответ, НовыйРежим) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		УстановитьРежим(НовыйРежим);
		ЗагрузитьНастройкиОтбора(КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = ПечатьЦенниковИЭтикеток() Тогда
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = ПечатьЦенников() Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = ПечатьЭтикеток() Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = ПечатьСтеллажныхКарточек() Тогда
		УстановитьРежимПечатьСтеллажныхКарточекНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьНовыеШтрихкодыEAN13НаСервере()
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Штрихкоды = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
		МаксимальныйКод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом();
		
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Отбор.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
			Отбор.Вставить("Упаковка", СтрокаТЧ.Упаковка);
			Отбор.Вставить("Партия", СтрокаТЧ.Партия);
			
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
			
			ЕстьШтрихкод = Ложь;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрока.Штрихкод) Тогда
					ЕстьШтрихкод = Истина;
					Штрихкод = НайденнаяСтрока.Штрихкод;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьШтрихкод Тогда
				
				Количество = Количество + 1;
				
				НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				НовыйШтрихкод.Номенклатура = СтрокаТЧ.Номенклатура; 
				НовыйШтрихкод.СерияНоменклатуры = СтрокаТЧ.СерияНоменклатуры;
				НовыйШтрихкод.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
				НовыйШтрихкод.Партия = СтрокаТЧ.Партия;
				
				НовыйШтрихкод.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоКоду(Мин(МаксимальныйКод + 1, 99999999), "0", "00");
				НовыйШтрихкод.Записать();
				
				МаксимальныйКод = МаксимальныйКод + 1;
				
				Штрихкод = НовыйШтрихкод.Штрихкод;
				
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Штрихкоды.Вставить(НайденнаяСтрока, Штрихкод);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат 0;
	КонецПопытки;
	
	Для Каждого КлючИЗначение Из Штрихкоды Цикл
		КлючИЗначение.Ключ.Штрихкод = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Количество; 
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбора(Знач НастройкиКомпоновки = Неопределено)
	
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСтеллажныеКарточки");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	КонецЕсли;
	
	Если НастройкиКомпоновки = Неопределено Тогда
		НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	КомпоновщикНастроек.Восстановить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметры()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонСтеллажнойКарточки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоСтеллажныхКарточек", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("МестоХранения", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
	Товары.Колонки.Добавить("ИсточникФинансирования", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансирования"));
	Товары.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Товары.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			НоваяСтрока.КоличествоЭтикеток = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ШаблонЦенника) Тогда
			НоваяСтрока.КоличествоЦенников = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ШаблонСтеллажнойКарточки) Тогда
			НоваяСтрока.КоличествоСтеллажныхКарточек = 0;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация", Объект.Организация);
	ПараметрыПечати.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыПечати.Вставить("Склад", Объект.Склад);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборкаИлиТипЗначения = "", ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		Если ТипЗнч(ИмяФормыВыборкаИлиТипЗначения) = Тип("ОписаниеТипов") Тогда
			ПоказатьВводЗначения(Оповещение, Неопределено, ПредставлениеРеквизита, ИмяФормыВыборкаИлиТипЗначения);
		Иначе
			ОткрытьФорму(ИмяФормыВыборкаИлиТипЗначения, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
		Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
	ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
		Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	
	Если ПараметрыЗаполнения.ИмяРеквизита = "Организация"
	 Или ПараметрыЗаполнения.ИмяРеквизита = "Склад"
	 Или ПараметрыЗаполнения.ИмяРеквизита = "ИсточникФинансирования" Тогда
		ОбновитьДанныеТоваров(ВыделенныеСтроки, "ОстатокНаСкладе");
	КонецЕсли;
	
	Количество = 0;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, ВыделенныеСтроки.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦены()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да , НСтр("ru = 'Перезаполнить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПерезаполнитьЦеныВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Перезаполнить цены?'"),
			Кнопки,,
			КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦеныВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеТоваров(, "Цена");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТоваров(ТекущиеСтроки = Неопределено, ОбновляемыеДанные = "")
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек);
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	Если ТипЗнч(ТекущиеСтроки) = Тип("ТаблицаЗначений") Тогда
		// Таблица подбора или данные сканера штрихкода.
		ТаблицаВыбранныеПозиции = ТекущиеСтроки;
	Иначе
		// ТипЗнч(ТекущиеСтроки) = Тип("Массив") - выбранные строки таблицы Товары.
		// ТипЗнч(ТекущиеСтроки) = Тип("Число")  - текущая строка таблицы Товары.
		// ТекущиеСтроки         = Неопределено  - вся таблица Товары.
		ТаблицаВыбранныеПозиции = ПолучитьТекущиеДанные(ТекущиеСтроки);
		ТаблицаВыбранныеПозиции.Колонки.КоличествоВДокументе.Имя = "Количество";
		ТаблицаВыбранныеПозиции.ЗаполнитьЗначения(0, "Цена");
	КонецЕсли;
	
	ИсходныеДанные = Обработки.ПечатьЭтикетокИЦенников.Создать().ИсходныеДанные.Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеПозиции Цикл
		СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИсходныхДанных, СтрокаТаблицы);
	КонецЦикла;
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСтеллажныеКарточки";
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	КэшируемыеЗначения = Неопределено;
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	СтруктураРезультата.ТаблицаТоваров.Колонки.Количество.Имя = "КоличествоВДокументе";
	Для Каждого Данные Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		Если ПустаяСтрока(ОбновляемыеДанные) Тогда
			ВозвращаемоеЗначение = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Данные);
		Иначе
			ВозвращаемоеЗначение = Новый Структура(ОбновляемыеДанные);
			ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Данные);
		КонецЕсли;
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Данные.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТовара = НайденныеСтроки[0];
		Иначе
			СтрокаТовара = Объект.Товары.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ВозвращаемоеЗначение);
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшируемыеЗначения);
		
		СтрокаТовара.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТовара, Режим);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьПодборТоваров(Результат.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборТоваров(Знач АдресТоваровВХранилище)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Таблица.Колонки.ЕдиницаИзмерения.Имя = "Упаковка";
	
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.ЗаполнитьЗначения(Объект.Организация, "Организация");
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Таблица.ЗаполнитьЗначения(Объект.Склад, "Склад");
	КонецЕсли;
	Таблица.ЗаполнитьЗначения(0, "НомерСтроки");
	
	ОбновитьДанныеТоваров(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = ДобавитьНоменклатуруПоШтрихкодам(МассивШтрихкодов);
	
	Если ПравоРегистрацииШтрихкодовНоменклатурыДоступно И НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Оповестить = Новый ОписаниеОповещения("ОбработатьРегистрациюНеизвестныхШтрихкодов", ЭтотОбъект, НеизвестныеШтрихкоды);
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,, Оповестить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРегистрациюНеизвестныхШтрихкодов(Результат, ШтрихкодыКРегистрации) Экспорт
	
	НеизвестныеШтрихкоды = ДобавитьНоменклатуруПоШтрихкодам(ШтрихкодыКРегистрации);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруПоШтрихкодам(Знач ДанныеШтрихкодов)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТаблицаШтрихкоды = Новый ТаблицаЗначений;
	ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	Для Каждого ЭлементМассива Из ДанныеШтрихкодов Цикл
		НоваяСтрока = ТаблицаШтрихкоды.Добавить();
		НоваяСтрока.Штрихкод = ЭлементМассива.Штрихкод;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаШтрихкоды.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ТаблицаШтрихкоды
	|ИЗ
	|	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкоды.Штрихкод                КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ШтрихкодыНоменклатуры.Партия             КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения   КАК Упаковка
	|ИЗ
	|	ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Штрихкод = ТаблицаШтрихкоды.Штрихкод)
	|";
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура"     , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Таблица.Колонки.Добавить("Партия"           , Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка"         , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Номенклатура      = Выборка.Номенклатура;
			НоваяСтрока.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			НоваяСтрока.Партия            = Выборка.Партия;
			НоваяСтрока.Упаковка          = Выборка.Упаковка;
			
		Иначе
			НеизвестныеШтрихкоды.Добавить(Новый Структура("Штрихкод, Количество", Выборка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.ЗаполнитьЗначения(Объект.Организация, "Организация");
	Если Режим = ПечатьСтеллажныхКарточек() Тогда
		Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Таблица.ЗаполнитьЗначения(Объект.Склад, "Склад");
	КонецЕсли;
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ОбновитьДанныеТоваров(Таблица);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШтрихкодыНоменклатуры(Знач ДанныеСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = &СерияНоменклатуры
	|	И ШтрихкодыНоменклатуры.Партия = &Партия
	|	И ШтрихкодыНоменклатуры.ЕдиницаИзмерения = &Упаковка
	|";
	
	Запрос.УстановитьПараметр("Номенклатура"     , ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", ДанныеСтроки.СерияНоменклатуры);
	Запрос.УстановитьПараметр("Партия"           , ДанныеСтроки.Партия);
	Запрос.УстановитьПараметр("Упаковка"         , ДанныеСтроки.Упаковка);
	
	Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	Возврат Штрихкоды;
	
КонецФункции

&НаКлиенте
Функция ТекущиеДанныеИсходноеСостояние()
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"          , Неопределено);
	ДанныеСтроки.Вставить("СерияНоменклатуры"     , Неопределено);
	ДанныеСтроки.Вставить("Партия"                , Неопределено);
	ДанныеСтроки.Вставить("Упаковка"              , Неопределено);
	ДанныеСтроки.Вставить("Штрихкод"              , "");
	ДанныеСтроки.Вставить("Организация"           , Неопределено);
	ДанныеСтроки.Вставить("Склад"                 , Неопределено);
	ДанныеСтроки.Вставить("МестоХранения"         , Неопределено);
	ДанныеСтроки.Вставить("ИсточникФинансирования", Неопределено);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПечатьЦенников()
	Возврат "ПечатьЦенников";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПечатьЭтикеток()
	Возврат "ПечатьЭтикеток";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПечатьЦенниковИЭтикеток()
	Возврат "ПечатьЦенниковИЭтикеток";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПечатьСтеллажныхКарточек()
	Возврат "ПечатьСтеллажныхКарточек";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения, Поле, Отказ)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
