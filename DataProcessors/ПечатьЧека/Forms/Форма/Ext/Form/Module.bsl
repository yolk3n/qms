
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Параметры.ДокументСсылка;
	Организация = Параметры.Организация;
	
	ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	
	ПраваДоступа     = РозничныеПродажи.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователи.ТекущийПользователь());
	ДанныеФискальнойОперации = РозничныеПродажи.ДанныеФискальнойОперации();
	ЗаполнитьДанныеФискальнойОперации(ЭтотОбъект);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОпределениеВерсииФФД;
	
	ЗаполнитьДоступныеКассыРабочегоМеста();
	КоличествоДоступныхКасс = Элементы.КассаККМ.СписокВыбора.Количество();
	Если КоличествоДоступныхКасс > 0 Тогда
		КассаККМ = Элементы.КассаККМ.СписокВыбора[0].Значение;
		ОбработатьИзменениеКассыККМ();
	КонецЕсли;
	
	Элементы.НетПодключенногоОборудования.Видимость = (КоличествоДоступныхКасс = 0);
	Элементы.КассаККМ.Видимость                     = (КоличествоДоступныхКасс > 0);
	Элементы.ВерсияФФД.Видимость                    = (КоличествоДоступныхКасс > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Строка Из ТаблицаОборудования Цикл
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
			Новый ОписаниеОповещения("ПодключениеОборудованияПоИдентификаторуЗавершение", ЭтотОбъект, Строка.Оборудование),
			УникальныйИдентификатор,
			Строка.Оборудование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Для Каждого Строка Из ТаблицаОборудования Цикл
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(
			Новый ОписаниеОповещения("ОтключениеОборудованияПоИдентификаторуЗавершение", ЭтотОбъект, Строка.Оборудование),
			УникальныйИдентификатор,
			Строка.Оборудование);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ОчиститьСообщения();
	
	ПробитьЧекПослеПроверки = Новый ОписаниеОповещения("ПробитьЧекПослеПроверки", ЭтотОбъект);
	ПроверитьСуммуОплатыПередПробитием(ПробитьЧекПослеПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроверки(Результат, ДополнительныеРеквизиты) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаПриИзменении(Элемент)
	
	ЗаполнитьДанныеФискальнойОперации(ЭтотОбъект);
	ЗаполнитьПараметрыОтправкиЭлектронногоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ОбработатьИзменениеКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныеПриИзменении(Элемент)
	
	ПересчитатьПараметрыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЭлектронноПриИзменении(Элемент)
	
	ПересчитатьПараметрыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	
	ПересчитатьПараметрыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПостоплатыПриИзменении(Элемент)
	
	ПересчитатьПараметрыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");
	ИначеЕсли ЗначениеЗаполнено(АдресЭП) Тогда
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	Иначе
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять");
	КонецЕсли;
	
	ЗаполнитьДанныеФискальнойОперации(ЭтотОбъект);
	ЗаполнитьПараметрыОтправкиЭлектронногоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	ИначеЕсли ЗначениеЗаполнено(Телефон) Тогда
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");
	Иначе
		ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять");
	КонецЕсли;
	
	ЗаполнитьДанныеФискальнойОперации(ЭтотОбъект);
	ЗаполнитьПараметрыОтправкиЭлектронногоЧека();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеКассыККМ()
	
	ПараметрыКассыККМ = Справочники.КассыККМ.ПараметрыКассыККМ(КассаККМ);
	ВерсияФФД = ВерсияФФД(ЭтотОбъект, ПараметрыКассыККМ.ИдентификаторУстройства);
	
	СтруктураОплаты = СтруктураОплаты(СуммаНаличные, СуммаЭлектронно, СуммаПредоплаты, СуммаПостоплаты);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ПараметрыОперацииФискализацииЧека = МенеджерОбъекта.ПараметрыОперацииФискализацииЧека(
		ДокументСсылка, ВерсияФФД, СтруктураОплаты);
	
	Если ПараметрыОперацииФискализацииЧека <> Неопределено Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаТекстовыйДокумент;
		Элементы.ПробитьЧек.Доступность   = Истина;
		
		ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
		
		РассчитатьСуммы();
		
		ВывестиМакетЧека();
		
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОперацияНеПоддерживается;
		Элементы.ПробитьЧек.Доступность   = Ложь;
		
	КонецЕсли;
	
	Элементы.Суммы.ТолькоПросмотр = (ВерсияФФД = ВерсияФФДПоУмолчанию());
	Элементы.ГруппаОтправкаЭлектронногоЧека.Видимость = ПараметрыКассыККМ.ДоступнаПередачаДанных;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПараметрыОплаты()
	
	СтруктураОплаты = СтруктураОплаты(СуммаНаличные, СуммаЭлектронно, СуммаПредоплаты, СуммаПостоплаты);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ПараметрыОперацииФискализацииЧека = МенеджерОбъекта.ПараметрыОперацииФискализацииЧека(
		ДокументСсылка, ВерсияФФД, СтруктураОплаты);
	
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
	
	РассчитатьСуммы();
	
	ВывестиМакетЧека();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче()
	
	ПараметрыОперацииФискализацииЧека.ТорговыйОбъект = КассаККМ;
	ПараметрыОперацииФискализацииЧека.Кассир = РеквизитыКассира.Наименование;
	ПараметрыОперацииФискализацииЧека.Вставить("ИмяКассира", РеквизитыКассира.Наименование);
	ПараметрыОперацииФискализацииЧека.КассирИНН = РеквизитыКассира.ИНН;
	
	// Для совместимости с фискальными регистраторами
	ПараметрыОперацииФискализацииЧека.СерийныйНомер = ПараметрыКассыККМ.СерийныйНомер;
	
	// Для принтера чеков
	ПараметрыОперацииФискализацииЧека.НомерКассы = "00001";
	ПараметрыОперацииФискализацииЧека.НомерЧека  = 1;
	ПараметрыОперацииФискализацииЧека.НомерСмены = 1;
	ПараметрыОперацииФискализацииЧека.ДатаВремя  = ТекущаяДатаСеанса();
	ПараметрыОперацииФискализацииЧека.КопийЧека  = 1;
	
	ЗаполнитьПараметрыОтправкиЭлектронногоЧека();
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыКассыККМ.ИдентификаторУстройства);
	
КонецПроцедуры

&НаСервере
Функция ВывестиМакетЧека()
	
	ТекстЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперацииФискализацииЧека, 34, ВерсияФФД);
	МакетЧека.УстановитьТекст(ТекстЧека);
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммы()
	
	Суммы = Оплаты(ПараметрыОперацииФискализацииЧека);
	
	СуммаНаличные   = Суммы.СуммаНаличные;
	СуммаЭлектронно = Суммы.СуммаЭлектронно;
	СуммаПостоплаты = Суммы.СуммаПостоплата;
	СуммаПредоплаты = Суммы.СуммаПредоплата;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеОбработкиСостоянияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("ПечатьЧека_Завершение", ЭтотОбъект);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповестить,
		УникальныйИдентификатор,
		ПараметрыКассыККМ.ИдентификаторУстройства,
		ПараметрыОперацииФискализацииЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыходныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "ВыходныеПараметры");
		Если ВыходныеПараметры <> Неопределено И ВыходныеПараметры.Количество() > 8 Тогда
			ПараметрыФискализации = ВыходныеПараметры[8];
		Иначе
			ПараметрыФискализации = Неопределено;
		КонецЕсли;
		
		Закрыть(ПараметрыФискализации);
		Оповестить("ОбновитьСтатусФискальныхОпераций");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Оплаты(ПараметрыОперацииФискализацииЧека)
	
	ВозвращаемоеЗначение = СтруктураОплаты();
	
	Для Каждого СтрокаОплаты Из ПараметрыОперацииФискализацииЧека.ТаблицаОплат Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ВозвращаемоеЗначение.СуммаНаличные = ВозвращаемоеЗначение.СуммаНаличные + СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			ВозвращаемоеЗначение.СуммаЭлектронно = ВозвращаемоеЗначение.СуммаЭлектронно + СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
			ВозвращаемоеЗначение.СуммаПостоплата = СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
			ВозвращаемоеЗначение.СуммаПредоплата = СтрокаОплаты.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция СтруктураОплаты(СуммаНаличные = 0, СуммаЭлектронно = 0, СуммаПредоплата = 0, СуммаПостоплата = 0)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("СуммаНаличные",   СуммаНаличные);
	ВозвращаемоеЗначение.Вставить("СуммаЭлектронно", СуммаЭлектронно);
	ВозвращаемоеЗначение.Вставить("СуммаПредоплата", СуммаПредоплата);
	ВозвращаемоеЗначение.Вставить("СуммаПостоплата", СуммаПостоплата);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


&НаКлиенте
Процедура ПроверитьСуммуОплатыПередПробитием(ОповещениеОЗавершении)
	
	Результат = ПроверитьСуммуОплатыПередПробитиемНаСервере();
	
	Если Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Результат.ТекстОшибки + Символы.ПС + НСтр("ru = 'Продолжить?'");
	ЗавершитьПроверкуСуммыОплатыПередПробитием = Новый ОписаниеОповещения("ЗавершитьПроверкуСуммыОплатыПередПробитием", ЭтотОбъект, ОповещениеОЗавершении);
	ПоказатьВопрос(ЗавершитьПроверкуСуммыОплатыПередПробитием, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСуммуОплатыПередПробитиемНаСервере()
	
	Результат = Новый Структура("Успех, ТекстОшибки", Истина, "");
	
	СуммаОплаты = 0;
	Для Каждого КлючИЗначение Из Оплаты(ПараметрыОперацииФискализацииЧека) Цикл
		СуммаОплаты = СуммаОплаты + КлючИЗначение.Значение;
	КонецЦикла;
	
	СуммаПозицийЧека = 0;
	Для Каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		СуммаПозицийЧека = СуммаПозицийЧека + ПозицияЧека.Сумма;
	КонецЦикла;
	
	Если СуммаОплаты <> СуммаПозицийЧека Тогда
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма оплаты %1 не равна сумме позиций чека %2.'"),
			СуммаОплаты,
			СуммаПозицийЧека);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверкуСуммыОплатыПередПробитием(Ответ, ОповещениеОЗавершении) Экспорт
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ответ = КодВозвратаДиалога.Да);
	
КонецПроцедуры


&НаКлиенте
Процедура ПодключениеОборудованияПоИдентификаторуЗавершение(Данные, Оборудование) Экспорт
	
	Если Данные.Результат Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Оборудование", Оборудование);
		НайденныеСтроки = ТаблицаОборудования.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ.Подключено = Истина;
			
			Если Не СтрокаТЧ.СчитанаВерсияФФД Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокаТЧ);
				
				ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеПараметровФискальногоУстройства(
					Новый ОписаниеОповещения("ПослеПолученияПараметровУстройства", ЭтотОбъект, ДополнительныеПараметры),
					УникальныйИдентификатор,
					Оборудование);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При подключении устройства %1 произошла ошибка:
				           |""%2"".'"),
				Оборудование, 
				Данные.ОписаниеОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПараметровУстройства(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры.ВерсияФФДККТ) Тогда
			ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = РезультатВыполнения.ВыходныеПараметры.ВерсияФФДККТ;
		Иначе
			ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = ВерсияФФДПоУмолчанию();
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = ВерсияФФДПоУмолчанию();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.СтрокаТЧ.Оборудование = ПараметрыКассыККМ.Оборудование Тогда
		ВерсияФФД = ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД;
		ОбработатьИзменениеКассыККМ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключениеОборудованияПоИдентификаторуЗавершение(Данные, Оборудование) Экспорт
	
	Если Не Данные.Результат Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При отключении устройства %1 произошла ошибка:
				           |""%2"".'"),
				Оборудование, 
				Данные.ОписаниеОшибки));
		
	КонецЕсли;
	
КонецПроцедуры



&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеФискальнойОперации(Форма)
	
	ВариантОтправки = ?(
		ЗначениеЗаполнено(Форма.ВариантОтправкиЭлектронногоЧека),
		Форма.ВариантОтправкиЭлектронногоЧека,
		ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять"));
	
	Форма.ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = ВариантОтправки;
	Если ВариантОтправки = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail") Тогда
		Форма.ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = Форма.АдресЭП;
	ИначеЕсли ВариантОтправки = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS") Тогда
		Форма.ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(Форма.Телефон);
	Иначе
		Форма.ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтправкиЭлектронногоЧека()
	
	ЕстьЭлектроннаяОтправка = Ложь;
	Если ПараметрыКассыККМ.ДоступнаПередачаДанных Тогда
		Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail
		   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
			ПараметрыОперацииФискализацииЧека.Отправляет1СEmail = Не ДанныеФискальнойОперации.ОтправлятьEmailЧерезОФД;
			ПараметрыОперацииФискализацииЧека.ПокупательEmail = ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека;
			ЕстьЭлектроннаяОтправка = Истина;
		Иначе
			ПараметрыОперацииФискализацииЧека.Отправляет1СEmail = Ложь;
			ПараметрыОперацииФискализацииЧека.ПокупательEmail = "";
		КонецЕсли;
		Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS
		   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
			ПараметрыОперацииФискализацииЧека.Отправляет1СSMS = Не ДанныеФискальнойОперации.ОтправлятьSMSЧерезОФД;
			ПараметрыОперацииФискализацииЧека.ПокупательНомер = "+7" + РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
			ЕстьЭлектроннаяОтправка = Истина;
		Иначе
			ПараметрыОперацииФискализацииЧека.Отправляет1СSMS = Ложь;
			ПараметрыОперацииФискализацииЧека.ПокупательНомер = "";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека.Электронно = ЕстьЭлектроннаяОтправка И ДанныеФискальнойОперации.НеПечататьФискальныйЧек;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ВерсияФФД(Форма, Оборудование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Оборудование", Оборудование);
	НайденныеСтроки = Форма.ТаблицаОборудования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ВерсияФФД;
	Иначе
		Возврат ВерсияФФДПоУмолчанию();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияФФДПоУмолчанию()
	
	Возврат "1.0";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальнаяВерсияФФД()
	
	Возврат "1.2";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеКассыРабочегоМеста()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка                                    КАК КассаККМ,
	|	КассыККМ.ПодключаемоеОборудование                  КАК Оборудование,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования  КАК ТипОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|");
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчитанаВерсияФФД = Ложь;
		ЗначениеВерсияФФД = "";
		Если Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			СчитанаВерсияФФД  = Истина;
			ЗначениеВерсияФФД = МаксимальнаяВерсияФФД();
		ИначеЕсли Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			СчитанаВерсияФФД  = Истина;
			ЗначениеВерсияФФД = ВерсияФФДПоУмолчанию();
		Иначе
			
			ПараметрыРегистрацииУстройства = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПараметрыРегистрацииУстройства(Выборка.Оборудование);
			Если ПараметрыРегистрацииУстройства.ЕстьДанные Тогда
				СчитанаВерсияФФД  = Истина;
				ЗначениеВерсияФФД = ПараметрыРегистрацииУстройства.ВерсияФФДККТ;
			Иначе
				ЗначениеВерсияФФД = ВерсияФФДПоУмолчанию();
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.КассаККМ.СписокВыбора.Добавить(Выборка.КассаККМ);
		НовоеОборудование = ТаблицаОборудования.Добавить();
		НовоеОборудование.Оборудование     = Выборка.Оборудование;
		НовоеОборудование.ВерсияФФД        = ЗначениеВерсияФФД;
		НовоеОборудование.СчитанаВерсияФФД = СчитанаВерсияФФД;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции