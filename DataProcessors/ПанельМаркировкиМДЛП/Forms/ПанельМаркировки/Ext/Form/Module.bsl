
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ОткрытьОрганизацииМДЛП.Видимость = ПравоДоступа("Чтение", Метаданные.Справочники.ОрганизацииМДЛП);
	Элементы.СубъектыОбращенияМДЛП.Видимость = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СубъектыОбращенияМДЛП);
	
	Если Не (ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт") И ПравоДоступа("Чтение", Метаданные.Справочники.ЗоныТаможенногоКонтроляМДЛП)) Тогда
		Элементы.ОткрытьЗоныТаможенногоКонтроляМДЛП.Видимость = Ложь;
	КонецЕсли;
	
	ВосстановитьНастройкиФормы();
	
	ОбновитьСпискиДокументов();
	
	Элементы.АдресСервисаМДЛП.ТолькоПросмотр = Не ПравоДоступа("Изменение", Метаданные.Константы.АдресСервисаМДЛП);
	
	Элементы.ВерсияСхемОбменаМДЛП.ТолькоПросмотр = Не ПравоДоступа("Изменение", Метаданные.Константы.ВерсияСхемОбменаМДЛП);
	Элементы.ВерсияСхемОбменаМДЛП.СписокВыбора.ЗагрузитьЗначения(ИнтеграцияМДЛП.ДоступныеВерсииСхемОбмена());
	
	УстановитьДоступность();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбменДаннымиМДЛП" Тогда
		ОбновитьСпискиДокументов();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП" Тогда
		ОбновитьСпискиДокументов();
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НадписьСообщенияОжидающиеОтправкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		Отбор.Вставить("МестоДеятельности", МестоДеятельности);
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Отбор);
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОчередьПередачиДанных" Тогда
		ОткрываемаяФорма = "РегистрСведений.ОчередьПередачиДанныхМДЛП.ФормаСписка";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОчередьПолученияКвитанций" Тогда
		ОткрываемаяФорма = "РегистрСведений.ОчередьПолученияКвитанцийМДЛП.ФормаСписка";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОчередьОбработкиВходящихДанных" Тогда
		ОткрываемаяФорма = "РегистрСведений.ОчередьОбработкиВходящихДокументовМДЛП.ФормаСписка";
	КонецЕсли;
	
	ОткрытьФорму(ОткрываемаяФорма, ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСообщенияОжидающиеОтправкиНажатие(Элемент)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		Отбор.Вставить("МестоДеятельности", МестоДеятельности);
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Отбор);
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ОчередьПередачиДанныхМДЛП.ФормаСписка",
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоДеятельностиПриИзменении(Элемент)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияСхемОбменаМДЛППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаМДЛПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("api.sb.mdlp.crpt.ru",    НСтр("ru = 'Тестовая система МДЛП (""Песочница"")'"));
	ДанныеВыбора.Добавить("api.mdlp.crpt.ru",       НСтр("ru = 'Промышленная система'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаМДЛППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьУведомлениеНажатие(Элемент)
	
	ИмяДокумента = Сред(Элемент.Имя, СтрДлина("Открыть") + 1);
	ОткрытьФормуСпискаДокументов(ИмяДокумента, "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформитьУведомлениеНажатие(Элемент)
	
	ИмяДокумента = Сред(Элемент.Имя, СтрДлина("Оформить") + 1);
	ОткрытьФормуСпискаДокументов(ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтработатьУведомлениеНажатие(Элемент)
	
	ИмяДокумента = Сред(Элемент.Имя, СтрДлина("Отработать") + 1);
	ОткрытьФормуСпискаДокументов(ИмяДокумента, "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидатьУведомлениеНажатие(Элемент)
	
	ИмяДокумента = Сред(Элемент.Имя, СтрДлина("Ожидать") + 1);
	ОткрытьФормуСпискаДокументов(ИмяДокумента, "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияМДЛПКлиент.ВыполнитьОбмен(Организация, МестоДеятельности);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОрганизацииМДЛП(Команда)
	
	ОткрытьФорму("Справочник.ОрганизацииМДЛП.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗоныТаможенногоКонтроляМДЛП(Команда)
	
	ОткрытьФорму("Справочник.ЗоныТаможенногоКонтроляМДЛП.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубъектыОбращенияМДЛП(Команда)
	
	ОткрытьФорму("РегистрСведений.СубъектыОбращенияМДЛП.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасширенныеНастройкиИСервис(Команда)
	
	ОткрытьФорму("Обработка.ПанельМаркировкиМДЛП.Форма.РасширенныеНастройкиИСервис",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСпискиДокументов()
	
	ТаблицаДокументы = ИнтеграцияМДЛП.ДокументыПанелиМаркировки();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЧастиЗапроса = Новый Массив;
	Для Каждого ТекущийДокумент Из ТаблицаДокументы Цикл
		
		Если Не ТекущийДокумент.ЕстьПравоНаЧтение Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийДокумент.Метаданные.ПолноеИмя());
		
		ДобавитьЭлементыНаФормуПриНеобходимости(ТекущийДокумент);
		
		Если ТекущийДокумент.Оформите Тогда
			ТекстЗапроса = МенеджерОбъекта.ПанельМаркировкиМДЛПТекстЗапросаОформите();
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ЧастиЗапроса.Добавить(ТекстЗапроса);
			Иначе
				ЧастиЗапроса.Добавить("ВЫБРАТЬ 0 КАК КоличествоДокументов");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийДокумент.Отработайте Тогда
			ВсеТребующиеДействия = МенеджерОбъекта.ВсеТребующиеДействия(Истина);
			ИмяПараметра = "ВсеТребующиеДействия" + Формат(ЧастиЗапроса.Количество(), "ЧН=0; ЧГ=0");
			ТекстЗапроса = МенеджерОбъекта.ПанельМаркировкиМДЛПТекстЗапросаОтработайте();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВсеТребующиеДействия", "&" + ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ВсеТребующиеДействия);
			ЧастиЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ТекущийДокумент.Ожидайте Тогда
			ВсеТребующиеОжидания = МенеджерОбъекта.ВсеТребующиеОжидания(Истина);
			ИмяПараметра = "ВсеТребующиеОжидания" + Формат(ЧастиЗапроса.Количество(), "ЧН=0; ЧГ=0");
			ТекстЗапроса = МенеджерОбъекта.ПанельМаркировкиМДЛПТекстЗапросаОжидайте();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВсеТребующиеОжидания", "&" + ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ВсеТребующиеОжидания);
			ЧастиЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧастиЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация"       , ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("МестоДеятельности" , ?(ЗначениеЗаполнено(МестоДеятельности), МестоДеятельности, Неопределено));
	Запрос.УстановитьПараметр("Ответственный"     , ?(ЗначениеЗаполнено(Ответственный), Ответственный, Неопределено));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИндексЗапроса = 0;
	Для Каждого ТекущийДокумент Из ТаблицаДокументы Цикл
		
		ИмяДокумента = ТекущийДокумент.Метаданные.Имя;
		
		Если ТекущийДокумент.ЕстьПравоНаЧтение Тогда
			
			ОбщееКоличество = 0;
			Если ТекущийДокумент.Оформите Тогда
				ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
					РезультатЗапроса[ИндексЗапроса].Выбрать(),
					Элементы["Оформить" + ИмяДокумента],
					НСтр("ru = 'оформите'"));
				ИндексЗапроса = ИндексЗапроса + 1;
			КонецЕсли;
			
			Если ТекущийДокумент.Отработайте Тогда
				ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
					РезультатЗапроса[ИндексЗапроса].Выбрать(),
					Элементы["Отработать" + ИмяДокумента],
					НСтр("ru = 'отработайте'"));
				ИндексЗапроса = ИндексЗапроса + 1;
			КонецЕсли;
			
			Если ТекущийДокумент.Ожидайте Тогда
				ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
					РезультатЗапроса[ИндексЗапроса].Выбрать(),
					Элементы["Ожидать" + ИмяДокумента],
					НСтр("ru = 'ожидайте'"));
				ИндексЗапроса = ИндексЗапроса + 1;
			КонецЕсли;
			
			ВывестиПоказатель(
				ОбщееКоличество,
				Элементы["Открыть" + ИмяДокумента],
				ТекущийДокумент.Заголовок);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "Группа" + ИмяДокумента, "Видимость", Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ОчередьПередачиДанных.Сообщение) КАК КоличествоСообщенийКОтправке
	|ИЗ
	|	РегистрСведений.ОчередьПередачиДанныхМДЛП КАК ОчередьПередачиДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОрганизацииМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.РегистрационныйНомерУчастника = ОчередьПередачиДанных.ИдентификаторСубъектаОбращения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельностиМДЛП
	|	ПО
	|		МестаДеятельностиМДЛП.Идентификатор = ОчередьПередачиДанных.ИдентификаторСубъектаОбращения
	|ГДЕ
	|	(&Организация = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацииМДЛП.Ссылка = &Организация ИЛИ МестаДеятельностиМДЛП.Организация = &Организация)
	|	И (&МестоДеятельности = НЕОПРЕДЕЛЕНО ИЛИ МестаДеятельностиМДЛП.Ссылка = &МестоДеятельности)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ОчередьПолученияКвитанций.Сообщение) КАК КоличествоСообщенийОжидающихКвитанции
	|ИЗ
	|	РегистрСведений.ОчередьПолученияКвитанцийМДЛП КАК ОчередьПолученияКвитанций
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОрганизацииМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.РегистрационныйНомерУчастника = ОчередьПолученияКвитанций.ИдентификаторОрганизации
	|ГДЕ
	|	(&Организация = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацииМДЛП.Ссылка = &Организация)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ОчередьВходящихСообщения.ИдентификаторСообщения) КАК КоличествоВходящихСообщенийКОбработке
	|ИЗ
	|	РегистрСведений.ОчередьОбработкиВходящихДокументовМДЛП КАК ОчередьВходящихСообщения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОрганизацииМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.РегистрационныйНомерУчастника = ОчередьВходящихСообщения.ИдентификаторСубъектаОбращения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельностиМДЛП
	|	ПО
	|		МестаДеятельностиМДЛП.Идентификатор = ОчередьВходящихСообщения.ИдентификаторСубъектаОбращения
	|ГДЕ
	|	(&Организация = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацииМДЛП.Ссылка = &Организация ИЛИ МестаДеятельностиМДЛП.Организация = &Организация)
	|	И (&МестоДеятельности = НЕОПРЕДЕЛЕНО ИЛИ МестаДеятельностиМДЛП.Ссылка = &МестоДеятельности)
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СписокНеобходимостиОбмена = Новый Массив;
	СписокНеобходимостиОбмена.Добавить(НСтр("ru = 'Есть сообщения'"));
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоСообщенийКОтправке > 0 Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ожидающие отправки (%1)'"), Выборка.КоличествоСообщенийКОтправке);
		
		СписокНеобходимостиОбмена.Добавить(", ");
		СписокНеобходимостиОбмена.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,,,, "ОткрытьОчередьПередачиДанных"));
	КонецЕсли;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоСообщенийОжидающихКвитанции > 0 Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ожидающие ответа (%1)'"), Выборка.КоличествоСообщенийОжидающихКвитанции);
		
		СписокНеобходимостиОбмена.Добавить(", ");
		СписокНеобходимостиОбмена.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,,,, "ОткрытьОчередьПолученияКвитанций"));
	КонецЕсли;
	
	Выборка = РезультатЗапроса[2].Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоВходящихСообщенийКОбработке > 0 Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ожидающие обработки (%1)'"), Выборка.КоличествоВходящихСообщенийКОбработке);
		
		СписокНеобходимостиОбмена.Добавить(", ");
		СписокНеобходимостиОбмена.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,,,, "ОткрытьОчередьОбработкиВходящихДанных"));
	КонецЕсли;
	
	Если СписокНеобходимостиОбмена.Количество() > 1 Тогда
		
		СписокНеобходимостиОбмена.Добавить(", ");
		СписокНеобходимостиОбмена.Добавить(НСтр("ru = 'выполните обмен.'"));
		
		Элементы.НадписьСообщенияОжидающиеОтправки.Заголовок   = Новый ФорматированнаяСтрока(СписокНеобходимостиОбмена);
		Элементы.ДекорацияСообщенияОжидающиеОтправки.Видимость = Истина;
		Элементы.НадписьСообщенияОжидающиеОтправки.Видимость   = Истина;
		
	Иначе
		Элементы.ДекорацияСообщенияОжидающиеОтправки.Видимость = Ложь;
		Элементы.НадписьСообщенияОжидающиеОтправки.Видимость   = Ложь;
	КонецЕсли;
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыНаФормуПриНеобходимости(ТекущийДокумент)
	
	ИмяДокумента = ТекущийДокумент.Метаданные.Имя;
	
	ИмяГруппы = "Группа" + ИмяДокумента;
	Если Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаДокумент = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы[ТекущийДокумент.Группа]);
	ГруппаДокумент.Вид =ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокумент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаДокумент.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокумент.ОтображатьЗаголовок = Ложь;
	
	ГруппаОткрыть = Элементы.Добавить("ГруппаОткрыть" + ИмяДокумента, Тип("ГруппаФормы"), ГруппаДокумент);
	ГруппаОткрыть.Вид =ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОткрыть.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОткрыть.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОткрыть.ОтображатьЗаголовок = Ложь;
	ГруппаОткрыть.Ширина = 40;
	ГруппаОткрыть.РастягиватьПоГоризонтали = Ложь;
	ГруппаОткрыть.РастягиватьПоВертикали = Ложь;
	
	ДекорацияОткрыть = Элементы.Добавить("Открыть" + ИмяДокумента, Тип("ДекорацияФормы"), ГруппаОткрыть);
	ДекорацияОткрыть.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияОткрыть.Шрифт = Новый Шрифт(ДекорацияОткрыть.Шрифт,,, Истина);
	ДекорацияОткрыть.Гиперссылка = Истина;
	ДекорацияОткрыть.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьУведомлениеНажатие");
	
	ГруппаОформить = Элементы.Добавить("ГруппаОформить" + ИмяДокумента, Тип("ГруппаФормы"), ГруппаДокумент);
	ГруппаОформить.Вид =ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОформить.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОформить.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОформить.ОтображатьЗаголовок = Ложь;
	ГруппаОформить.Ширина = 12;
	ГруппаОформить.РастягиватьПоГоризонтали = Ложь;
	ГруппаОформить.РастягиватьПоВертикали = Ложь;
	
	ДекорацияОформить = Элементы.Добавить("Оформить" + ИмяДокумента, Тип("ДекорацияФормы"), ГруппаОформить);
	ДекорацияОформить.Вид = ВидДекорацииФормы.Надпись;
	Если ТекущийДокумент.Оформите Тогда
		ДекорацияОформить.Гиперссылка = Истина;
		ДекорацияОформить.УстановитьДействие("Нажатие", "Подключаемый_ОформитьУведомлениеНажатие");
	КонецЕсли;
	
	ГруппаОтработать = Элементы.Добавить("ГруппаОтработать" + ИмяДокумента, Тип("ГруппаФормы"), ГруппаДокумент);
	ГруппаОтработать.Вид =ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтработать.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОтработать.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтработать.ОтображатьЗаголовок = Ложь;
	ГруппаОтработать.Ширина = 12;
	ГруппаОтработать.РастягиватьПоГоризонтали = Ложь;
	ГруппаОтработать.РастягиватьПоВертикали = Ложь;
	
	ДекорацияОтработать = Элементы.Добавить("Отработать" + ИмяДокумента, Тип("ДекорацияФормы"), ГруппаОтработать);
	ДекорацияОтработать.Вид = ВидДекорацииФормы.Надпись;
	Если ТекущийДокумент.Отработайте Тогда
		ДекорацияОтработать.Гиперссылка = Истина;
		ДекорацияОтработать.УстановитьДействие("Нажатие", "Подключаемый_ОтработатьУведомлениеНажатие");
	КонецЕсли;
	
	ГруппаОжидать = Элементы.Добавить("ГруппаОжидать" + ИмяДокумента, Тип("ГруппаФормы"), ГруппаДокумент);
	ГруппаОжидать.Вид =ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОжидать.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОжидать.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОжидать.ОтображатьЗаголовок = Ложь;
	ГруппаОжидать.Ширина = 12;
	ГруппаОжидать.РастягиватьПоГоризонтали = Ложь;
	ГруппаОжидать.РастягиватьПоВертикали = Ложь;
	
	ДекорацияОжидать = Элементы.Добавить("Ожидать" + ИмяДокумента, Тип("ДекорацияФормы"), ГруппаОжидать);
	ДекорацияОжидать.Вид = ВидДекорацииФормы.Надпись;
	Если ТекущийДокумент.Ожидайте Тогда
		ДекорацияОжидать.Гиперссылка = Истина;
		ДекорацияОжидать.УстановитьДействие("Нажатие", "Подключаемый_ОжидатьУведомлениеНажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказатель(Выборка, Кнопка, ТекстПоказателя)
	
	Если ТипЗнч(Выборка) = Тип("Число") Тогда
		КоличествоДокументов = Выборка;
	Иначе
		КоличествоДокументов = ?(Выборка.Следующий(), Выборка.КоличествоДокументов, 0);
	КонецЕсли;
	
	Если КоличествоДокументов > 0 Тогда
		ТекстЗаголовка = ТекстПоказателя + " (" + КоличествоДокументов + ")";
		ЦветТекста = ЦветаСтиля.ЦветГиперссылкиМДЛП;
	Иначе
		ТекстЗаголовка = ТекстПоказателя;
		ЦветТекста = ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП;
	КонецЕсли;
	Кнопка.Заголовок  = ТекстЗаголовка;
	Кнопка.ЦветТекста = ЦветТекста;
	Кнопка.Видимость  = Истина;
	
	Возврат КоличествоДокументов;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСпискаДокументов(ИмяДокумента, ДальнейшееДействие = Неопределено)
	
	СтруктураБыстрогоОтбора = Новый Структура();
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ДальнейшееДействие) Тогда
		СтруктураБыстрогоОтбора.Вставить("ДальнейшееДействие", ДальнейшееДействие);
	Иначе
		ПараметрыФормы.Вставить("ОткрытьРаспоряжения", Истина);
	КонецЕсли;
	
	СтруктураБыстрогоОтбора.Вставить("Организация"      , Организация);
	СтруктураБыстрогоОтбора.Вставить("МестоДеятельности", МестоДеятельности);
	СтруктураБыстрогоОтбора.Вставить("Ответственный"    , Ответственный);
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ИмяФормыДокумента = "Документ." + ИмяДокумента + ".ФормаСписка";
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельМаркировкаМДЛП", "Организация", Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельМаркировкаМДЛП", "МестоДеятельности", МестоДеятельности);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельМаркировкаМДЛП", "Ответственный", Ответственный);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПанельМаркировкаМДЛП", "Организация", Организация);
	МестоДеятельности = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПанельМаркировкаМДЛП", "МестоДеятельности", МестоДеятельности);
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПанельМаркировкаМДЛП", "Ответственный", Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если СтрНачинаетсяС(НРег(РеквизитПутьКДанным), НРег("НаборКонстант.")) Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
КонецПроцедуры

#КонецОбласти
