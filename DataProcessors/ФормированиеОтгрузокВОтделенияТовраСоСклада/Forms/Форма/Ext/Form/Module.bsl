
&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.Заказы.ТекущиеДанные=Неопределено Тогда
		Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура(Новый структура("Требование",Элементы.Заказы.ТекущиеДанные.Требование));
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СостоянияТребованийОтделений.Требование КАК Требование,
	             |	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	             |	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	             |	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	             |	СостоянияТребованийОтделений.Количество КАК Количество,
	             |	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	             |	СостоянияТребованийОтделений.Состояние КАК Состояние,
	             |	ВЫБОР
	             |		КОГДА СостоянияТребованийОтделений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияТребований.Поступило)
	             |			ТОГДА 1
	             |		КОГДА СостоянияТребованийОтделений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияТребований.ОжиданиеПриходаБезЗаказа)
	             |			ТОГДА 0
	             |		ИНАЧЕ 99
	             |	КОНЕЦ КАК Порядок
	             |ИЗ
	             |	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	             |ГДЕ
	             |	СостоянияТребованийОтделений.Состояние В(&Состояние)
	             |	И (&Отделение = ЗНАЧЕНИЕ(Справочник.ОтделенияОрганизаций.ПустаяСсылка)
	             |			ИЛИ СостоянияТребованийОтделений.Требование.Отделение = &Отделение)
	             |	И СостоянияТребованийОтделений.Требование.СкладОтправитель = &СкладОтправитель
	             |	И СостоянияТребованийОтделений.Количество > 0
	             |	И СостоянияТребованийОтделений.Требование.ИсточникФинансирования = &ИсточникФинансирования
	             |	И (СостоянияТребованийОтделений.Требование.ВидОперации = &ВидОперации
	             |			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ТипыТребованийОтделений.ПустаяСсылка))
	             |	И НЕ ТИПЗНАЧЕНИЯ(СостоянияТребованийОтделений.Требование) = ТИП(Документ.ЗаявкаНаЗакупку)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СостоянияТребованийОтделений.НоменклатураЗаказа,
	             |	Порядок";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("Отделение",Отделение);
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	Запрос.УстановитьПараметр("ВидОперации",ВидОперации);
	
	Масс=Новый Массив;
	Масс.Добавить(Перечисления.СостоянияТребований.Требование);
	Масс.Добавить(Перечисления.СостоянияТребований.Поступило);
	Масс.Добавить(Перечисления.СостоянияТребований.ОжиданиеПриходаБезЗаказа);
	Запрос.УстановитьПараметр("Состояние",Масс);
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("Пометка");
	ТЗ.Колонки.Добавить("КоличествоКПередаче");
	ТЗ.Колонки.Добавить("КоличествоОстаток");
	ТЗ.ЗаполнитьЗначения(0,"КоличествоКПередаче");
	ТЗ.ЗаполнитьЗначения(0,"КоличествоОстаток");
	ТЗ.ЗаполнитьЗначения(Ложь,"Пометка");
	
	Запрос.УстановитьПараметр("Номенклатура",ТЗ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток / ЕСТЬNULL(ЕдиницыИзмеренияНоменклатуры.Коэффициент, 1)) КАК Количество,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток / ЕСТЬNULL(ЕдиницыИзмеренияНоменклатуры.Коэффициент, 1)) КАК ИсходныйОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В (&номенклатура)
	|				И Организация = &Организация
	|				И Склад = &СкладОтправитель
	|				И ИсточникФинансирования = &ИсточникФинансирования) КАК ТоварыНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмеренияНоменклатуры
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЕдиницыИзмеренияНоменклатуры.Номенклатура
	|			И ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета = ЕдиницыИзмеренияНоменклатуры.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура";
	Остатки=Запрос.Выполнить().Выгрузить();

	Для Каждого Стр Из ТЗ Цикл
		Если Стр.Количество>0 Тогда
			СтрН=Остатки.Найти(Стр.Номенклатура,"Номенклатура");
			Если НЕ СтрН=Неопределено Тогда
				Если СтрН.Количество>0  Тогда
					КолВо=Мин(СтрН.Количество,Стр.Количество);
					СтрН.Количество=СтрН.Количество-КолВо;
					Стр.КоличествоКПередаче=КолВо;
					Стр.Пометка=Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Товары.Загрузить(ТЗ);
	ТЗ.Свернуть("Требование","Количество,КоличествоКПередаче");
	Заказы.Загрузить(ТЗ);  
	Для Каждого Стр из Товары Цикл
		СтрН=Остатки.Найти(Стр.Номенклатура,"Номенклатура");
		Если НЕ СтрН=Неопределено Тогда
			Стр.КоличествоОстаток=СтрН.ИсходныйОстаток;
		КонецЕсли;	
	КонецЦикла;	
	ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Организация.Пустая() Тогда
		ПоказатьПредупреждение(,"Не заполнена организация");
		Возврат;
	КонецЕсли;	
	Если СкладОтправитель.Пустая() Тогда
		ПоказатьПредупреждение(,"Не заполнен склад отправитель");
		Возврат;
	КонецЕсли;	
	
	Если ИсточникФинансирования.Пустая() Тогда
		ПоказатьПредупреждение(,"Не заполнен Источник финансирования");
		Возврат;
	КонецЕсли;	
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаОсновное;
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("Документ.ТребованиеОтделения.ФормаОбъекта",Новый структура("Ключ",Элементы.Заказы.ТекущиеДанные.Требование));
КонецПроцедуры


&НаСервере
Процедура ПересчитатьКоличествоПоЗаказу(Требование)
	Масс=Заказы.НайтиСтроки(Новый Структура("Требование",Требование));
	
	Если Масс.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрН=Масс[0];
	СтрН.Количество=0;
	СтрН.КоличествоКПередаче=0;
	СтрН.Пометка=Ложь;
	
	Масс=Товары.НайтиСтроки(Новый структура("Требование",Требование));
	Для Каждого СтрМ из Масс Цикл
		Если СтрМ.Пометка Тогда
			СтрН.Количество=СтрН.Количество+СтрМ.Количество;
			СтрН.КоличествоКПередаче=СтрН.КоличествоКПередаче+СтрМ.КоличествоКПередаче;
			СтрН.Пометка=Истина;
		КонецЕсли;
	КонецЦикла;
	
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ДопПараметр=Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ОписаниеОповещения=Новый ОписаниеОповещения("ТоварыНоменклатураНачалоВыбораЗавершение",ЭтотОбъект,ДопПараметр);
	
	Парам=Новый Структура();
	Парам.Вставить("Организация",Организация);
	Парам.Вставить("Склад",СкладОтправитель);
	Парам.Вставить("ИсточникФинансирования",ИсточникФинансирования);
	Парам.Вставить("ТекущаяСтрока",Элементы.Товары.ТекущиеДанные.Номенклатура);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСОстатками",Парам,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбораЗавершение(Результат,ДопПараметры) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыНоменклатураПриИзмененииНаСервере(Результат,ДопПараметры);
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТоварыНоменклатураПриИзмененииНаСервере(Неопределено,Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	Элементы.Товары.Обновить();

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(Номенклатура,Идстроки)
	
	СтрокаФормы=Товары.НайтиПоИдентификатору(ИдСтроки);                  
	Если Номенклатура=Неопределено Тогда
		Номенклатура=СтрокаФормы.Номенклатура;
	КонецЕсли;	
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.ИдентификаторСтроки.Значение=СтрокаФормы.ИдентификаторСтроки;
	Рег.Отбор.ИдентификаторСтроки.Использование=Истина;
	Рег.Отбор.КодСтроки.Значение=СтрокаФормы.КодСтроки;
	Рег.Отбор.КодСтроки.Использование=Истина;
	Рег.Прочитать();
	Если Рег.Количество()=1 Тогда
		НачатьТранзакцию();
		СтрР=Рег[0];
		Если НЕ СтрР.Номенклатура=Номенклатура Тогда
			Если СтрР.Состояние=Перечисления.СостоянияТребований.Требование 
				 ИЛИ СтрР.Состояние=Перечисления.СостоянияТребований.Поступило 
				 ИЛИ СтрР.Состояние=Перечисления.СостоянияТребований.ОжиданиеПриходаБезЗаказа Тогда
				
				СтараяНоменклатура=СтрР.Номенклатура;
				СтрР.Номенклатура=Номенклатура;
				Попытка
					Рег.Записать(Истина);
					ЗафиксироватьТранзакцию();
					СтрокаФормы.Номенклатура=?(ЗначениеЗаполнено(Номенклатура),Номенклатура,СтрокаФормы.НоменклатураЗаказа);
					СтрокаФормы.КоличествоОстаток=ПолучитьОстатокНоменклатуры(СтрокаФормы.Номенклатура);
					СтрокаФормы.КоличествоКПередаче=0;
					Передано=Товары.Выгрузить(Товары.НайтиСтроки(Новый структура("Номенклатура,Пометка",Номенклатура,Истина))).Итог("КоличествоКПередаче");
					Если СтрокаФормы.КоличествоОстаток-Передано>0 Тогда
						СтрокаФормы.КоличествоКПередаче=Мин(СтрокаФормы.Количество,СтрокаФормы.КоличествоОстаток-Передано);
						СтрокаФормы.Пометка=Истина;
					КонецЕсли;	
					
				Исключение
					ОтменитьТранзакцию();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать изменения в регистр ""Состояния требований"".");
					СтрокаФормы.Номенклатура=СтараяНоменклатура;
				КонецПопытки;	
			Иначе
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Состояние регистра  ""Состояния требований"" изменилось. Не возможно записать данные. Перезаполните их.");
				СтрокаФормы.Номенклатура=СтараяНоменклатура;
			КонецЕсли;	
		КонецЕсли;	
	Иначе     
		ТекстСообщения="При изменении номенклатуры возникла ошибка.В регистре сведений ""Состояния требований"" неит ли больше 1 записи. Номенклатура восстановлена к исходному состоянию и отменена пометка к отгрузке.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
КонецПроцедуры





&НаКлиенте
Процедура ТоварыКоличествоКПередачеПриИзменении(Элемент)
	
	ПересчитатьКоличествоПоЗаказу(Элементы.Товары.ТекущиеДанные.Требование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	
	ПересчитатьКоличествоПоЗаказу(Элементы.Товары.ТекущиеДанные.Требование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПометкаПриИзменении(Элемент)
	Требование = Элементы.Заказы.ТекущиеДанные.Требование;
	Пометка=Элементы.Заказы.ТекущиеДанные.Пометка;
	Для Каждого Стр из Товары Цикл
		Если Стр.Требование=Требование Тогда
			Стр.Пометка= Пометка И Стр.КоличествоКПередаче>0;
		КонецЕсли;
	КонецЦикла;
	ПересчитатьКоличествоПоЗаказу(Элементы.Товары.ТекущиеДанные.Требование);
	Элементы.Товары.Обновить();
КонецПроцедуры



&НаСервере
Процедура ПересчитатьИтоги()
	Для Каждого Стр из Заказы Цикл
		Стр.Количество=0;
		Стр.КоличествоКПередаче=0;
		Масс=Товары.НайтиСтроки(Новый Структура("Требование",Стр.Требование));
		Для Каждого СтрМ из Масс Цикл
			Стр.Количество=Стр.Количество+СтрМ.Количество;                 
			Стр.КоличествоКПередаче=Стр.КоличествоКПередаче+СтрМ.КоличествоКПередаче;
			СтрМ.Пометка=СтрМ.КоличествоКПередаче>0;
		КонецЦикла;	
		Стр.Пометка=Стр.КоличествоКПередаче>0;
	КонецЦикла;	
КонецПроцедуры	
&НаСервере
Процедура ИзменитьФлажки(Значение)
	Для Каждого Стр Из Заказы Цикл
		Стр.Пометка=Значение;
	КонецЦикла;
	Для Каждого Стр из Товары Цикл
		Стр.Пометка=Значение;     
	КонецЦикла;	
	ПересчитатьИтоги()
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСнятьФлажки(Команда)
	
	Для Каждого Стр Из Заказы Цикл
		Стр.Пометка=Ложь;
	КонецЦикла;
	Для Каждого Стр из Товары Цикл
		Стр.Пометка=Ложь;     
	КонецЦикла;	
	Элементы.Заказы.Обновить();
	Элементы.Товары.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыУстановитьФлажки(Команда)
	
	ИзменитьФлажки(Истина)
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстатки()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ВЫБОР
	             |		КОГДА НЕ ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) = ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета
	             |				И ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета.КоличествоВУпаковке > 1
	             |			ТОГДА ВЫРАЗИТЬ(ТоварыНаСкладахОстатки.КоличествоОстаток / ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета.КоличествоВУпаковке КАК ЧИСЛО(15, 0))
	             |		ИНАЧЕ ТоварыНаСкладахОстатки.КоличествоОстаток
	             |	КОНЕЦ КАК КоличествоОстаток,
	             |	ТоварыНаСкладахОстатки.ИсточникФинансирования КАК ИсточникФинансирования
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			Организация = &Организация
	             |				И Склад = &СкладОтправитель) КАК ТоварыНаСкладахОстатки
	             |ГДЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура В(&МасНоменклатур)";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("МасНоменклатур",Товары.Выгрузить(,"Номенклатура"));
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из Товары Цикл
		
		СтрТЗ=ТЗ.НайтиСтроки(Новый Структура("Номенклатура,ИсточникФинансирования",Стр.Номенклатура,Стр.Требование.ИсточникФинансирования));
		Если СтрТЗ.Количество()=0 Тогда
			Стр.КоличествоОстаток=0;
		Иначе
			Стр.КоличествоОстаток=СтрТЗ[0].КоличествоОстаток;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстатокНоменклатуры(Номенклатура)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ВЫБОР
	             |		КОГДА НЕ ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) = ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета
	             |				И ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета.КоличествоВУпаковке > 1
	             |			ТОГДА ВЫРАЗИТЬ(ТоварыНаСкладахОстатки.КоличествоОстаток / ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета.КоличествоВУпаковке КАК ЧИСЛО(15, 0))
	             |		ИНАЧЕ ТоварыНаСкладахОстатки.КоличествоОстаток
	             |	КОНЕЦ КАК КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			Организация = &Организация
	             |				И Склад = &СкладОтправитель
	             |				И ИсточникФинансирования = &ИсточникФинансирования) КАК ТоварыНаСкладахОстатки
	             |ГДЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.КоличествоОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтпускВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ОткрытьФорму("Документ.ОтпускТоваровВОтделение.Форма.ФормаДокумента",Новый Структура("Ключ",Элементы.ДокументыОтпуск.ТекущиеДанные.ОтпускВОтделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоНаСервере(Количество,Парам)
	ТекущиеДанные=Товары.НайтиПоИдентификатору(Парам.ИдСтроки);
	Если ТекущиеДанные.Количество<Количество Тогда
		ТекстСообщения="Введено "+Количество+" больше, чем требуется "+ТекущиеДанные.Количество+". Изменение не возможно.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли ТекущиеДанные.Количество>=Количество Тогда	
		Передано=Товары.Выгрузить(Товары.НайтиСтроки(Новый структура("Номенклатура,Пометка",ТекущиеДанные.Номенклатура,Истина))).Итог("КоличествоКПередаче")-ТекущиеДанные.КоличествоКПередаче;
		МаксимальноеКоличество=ТекущиеДанные.КоличествоОстаток-Передано;
		Если Количество>МаксимальноеКоличество Тогда
			ТекстСообщения="Введено "+Количество+" больше, чем возможно передать "+МаксимальноеКоличество+". Установлено максимально возможное количество для пердачи.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекущиеДанные.КоличествоКПередаче=МаксимальноеКоличество;
			 ПересчитатьКоличествоПоЗаказу(ТекущиеДанные.Требование);
		Иначе
			 ТекущиеДанные.КоличествоКПередаче=Количество;
			 ПересчитатьКоличествоПоЗаказу(ТекущиеДанные.Требование);
		Конецесли;	
			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличество(Команда)
	 ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	 Если НЕ ТекущиеДанные=Неопределено и ТекущиеДанные.Пометка Тогда
		 Парам=Новый Структура("ИдСтроки,ИсходноеКоличество",ТекущиеДанные.ПолучитьИдентификатор(),ТекущиеДанные.КоличествоКПередаче);
		 ОписаниеОповещения=Новый ОписаниеОповещения("ИзменитьКоличество_Заврешение",Этаформа,Парам);
		 ПоказатьВводЧисла(ОписаниеОповещения,ТекущиеДанные.КоличествоКПередаче,"Укажите количество к передаче ",14,3);
	 Конецесли;	 
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличество_Заврешение(Результат,Парам) Экспорт
	Если НЕ Результат=Неопределено Тогда
		ИзменитьКоличествоНаСервере(Результат,Парам);
		Элементы.Товары.Обновить();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция ПолучитьСледующийКодСтрокиРегистра(ИдентификаторСтроки)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСтроки",ИдентификаторСтроки);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияТребованийОтделений.КодСтроки) КАК КодСтроки
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|ГДЕ
	|	СостоянияТребованийОтделений.ИдентификаторСтроки = &ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодСтроки+1;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции


&НаСервере
Процедура ПередатьВОтделенияНаСервере()
	
	//Если НЕ ПроверкаТаблицыТоваров() Тогда
	//	Возврат;
	//КонецЕсли;	
	ДокументыОтпуск.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.Организация КАК Организация,
	             |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	             |	ТоварыНаСкладахОстатки.ИсточникФинансирования КАК ИсточникФинансирования,
	             |	ТоварыНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	             |	ТоварыНаСкладахОстатки.Партия КАК Партия,
	             |	ТоварыНаСкладахОстатки.МестоХранения КАК МестоХранения,
	             |	ТоварыНаСкладахОстатки.КоличествоОстаток / ЕдиницыИзмеренияНоменклатуры.Коэффициент КАК Количество,
	             |	ЕдиницыИзмеренияНоменклатуры.Коэффициент КАК Коэффициент
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			Организация = &Организация
	             |				И Склад = &СкладОтправитель
	             |				И ИсточникФинансирования = &ИсточникФинансирования) КАК ТоварыНаСкладахОстатки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмеренияНоменклатуры
	             |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЕдиницыИзмеренияНоменклатуры.Номенклатура
	             |			И ТоварыНаСкладахОстатки.Номенклатура.ОсновнаяЕдиницаУчета = ЕдиницыИзмеренияНоменклатуры.ЕдиницаИзмерения
	             |ГДЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура В(&Номенклатура)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ТоварыНаСкладахОстатки.Номенклатура,
	             |	ТоварыНаСкладахОстатки.СерияНоменклатуры.ГоденДо";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СкладОтправитель",СкладОтправитель);
	Запрос.УстановитьПараметр("Номенклатура",Товары.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
	Остатки=Запрос.Выполнить().Выгрузить();
	ОстаткиСвернуто =	Остатки.Скопировать();
	ОстаткиСвернуто.Свернуть("Номенклатура","Количество");
	
	
	
	ТЗТовары=Товары.Выгрузить(новый структура("Пометка",Истина));
	ТЗТовары.Колонки.Добавить("Отделение");
	ТЗТовары.Колонки.Добавить("СкладПолучатель");
	ТЗТовары.Колонки.Добавить("ПодразделениеОрганизации");
	Для Каждого Стр из ТЗТовары Цикл              
		Если НЕ Стр.Требование.Метаданные().Реквизиты.Найти("Отделение") = Неопределено Тогда
			Стр.Отделение=Стр.Требование.Отделение;
		КонецЕсли;	
		Если НЕ Стр.Требование.Метаданные().Реквизиты.Найти("СкладПолучатель") = Неопределено Тогда
			Стр.СкладПолучатель=Стр.Требование.СкладПолучатель;
		КонецЕсли;	
		Если НЕ Стр.Требование.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") = Неопределено Тогда
			Стр.ПодразделениеОрганизации=Стр.Требование.ПодразделениеОрганизации;
		КонецЕсли;	
	КонецЦикла;	
	
	БуферДокОтпуск=Новый Массив;
	
	НачатьТранзакцию();
	
	ТЗТоварыСвернут=ТЗТовары.Скопировать(Новый Структура("Пометка",Истина));
	ТЗТоварыСвернут.Свернуть("Отделение,СкладПолучатель,ПодразделениеОрганизации");

	Для Каждого СтрПодр Из ТЗТоварыСвернут Цикл
		
		СтрокиТЗТов=ТЗТовары.НайтиСтроки(Новый Структура("Отделение,Складполучатель,ПодразделениеОрганизации,Пометка",СтрПодр.Отделение,СтрПодр.СкладПолучатель,СтрПодр.ПодразделениеОрганизации,Истина));
		
		Если НЕ ЗначениеЗаполнено(СтрПодр.Отделение) ИЛИ НЕ ЗначениеЗаполнено(СтрПодр.СкладПолучатель) ИЛИ НЕ ЗначениеЗаполнено(СтрПодр.ПодразделениеОрганизации) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если СтрокиТЗТов.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Док=Документы.ОтпускТоваровВОтделение.СоздатьДокумент();
		Док.УстановитьСсылкуНового(Документы.ОтпускТоваровВОтделение.ПолучитьСсылку(Новый УникальныйИдентификатор));
		
		Док.Автор=ПараметрыСеанса.ТекущийПользователь;
		Док.Дата=ТекущаяДата();
		Док.ИсточникФинансирования=ИсточникФинансирования;
		
		Док.Комментарий="Создан обработкой Формирование отгрузок в отделения товра со склада "+ТекущаяДата();
		Док.НовыйСпособУчета=Истина;
		Док.Организация=Организация;
		Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Док.Отделение=СтрПодр.Отделение;
		Док.ПеремещениеПоЗаказу=Ложь;
		Док.СкладОтправитель=СкладОтправитель;
		Док.СкладПолучатель=СтрПодр.СкладПолучатель;
		Док.Статус=Перечисления.СтатусыПеремещенийТоваров.Принято;
		Док.ПодразделениеОрганизации=СтрПодр.ПодразделениеОрганизации;
		
		Для Каждого СтрТЗ Из СтрокиТЗТов Цикл
			
			Если СтрТЗ.КоличествоКПередаче=0 Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаОстатка=ОстаткиСвернуто.Найти(СтрТЗ.Номенклатура,"Номенклатура");
			Если СтрокаОстатка=Неопределено ИЛИ СтрокаОстатка.Количество<СтрТЗ.КоличествоКПередаче Тогда
				ТекстСообщения="За время работы обработки изменились остатки на складе. Создание документов не возможно. Перезаполните остатки.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			РегР=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
			РегР.Отбор.ИдентификаторСтроки.Установить(СтрТЗ.ИдентификаторСтроки);
			РегР.Отбор.КодСтроки.Установить(СтрТЗ.КодСтроки);
			РегР.Прочитать();
			Если РегР.Количество()=0 Тогда
				ТекстСообщения="За время работы обработки изменились записи регистра сведений ""Состояния требований"" (не найдено в регистре) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+". Создание документов не возможно. Сделайте ""Заполнить"" по новой.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;
			ИначеЕсли РегР.Количество()>1 Тогда	
				ТекстСообщения="За время работы обработки изменились записи регистра сведений ""Состояния требований"" (в регистре несколько) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+". Создание документов не возможно. Сделайте ""Заполнить"" по новой.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			Рег=РегР[0];
			
			//Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Рег,СтрТЗ);
			//Рег.Прочитать();
			Если НЕ (Рег.Состояние=Перечисления.СостоянияТребований.Требование ИЛИ Рег.Состояние=Перечисления.СостоянияТребований.Поступило ИЛИ Рег.Состояние=Перечисления.СостоянияТребований.ОжиданиеПриходаБезЗаказа) Тогда
				ТекстСообщения="За время работы обработки изменились записи регистра сведений ""Состояния требований""  (не корректное состояние) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+" Состояние "+Рег.Состояние+". Создание документов не возможно. Сделайте ""Заполнить"" по новой.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;	
			
			Если НЕ Рег.Количество=СтрТЗ.Количество Тогда
				ТекстСообщения="За время работы обработки изменились записи регистра сведений ""Состояния требований"" (изменилоь количество по строке) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+" было "+СтрТЗ.Количество+" "+Рег.Количество+". Создание документов не возможно. Сделайте ""Заполнить"" по новой.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;	
			
			Если НЕ Рег.Количество=СтрТЗ.КоличествоКПередаче Тогда 
				Рег2=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Рег2,Рег);
				Рег2.Количество=Рег.Количество-СтрТЗ.КоличествоКПередаче;
				Рег2.КодСтроки=ПолучитьСледующийКодСтрокиРегистра(Рег.ИдентификаторСтроки);
				Попытка
					Рег2.Записать(Истина);
				Исключение
					ТекстСообщения="Ошибка записи регистра сведений ""Состояния требований"" (вторая часть количества) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+". Создание документов не возможно. ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Возврат;	
				КонецПопытки;	
				Рег.Количество=СтрТЗ.КоличествоКПередаче;
			КонецЕсли;		
			Рег.Состояние=Перечисления.СостоянияТребований.Передано;
			Попытка
				РегР.Записать(Истина);
			Исключение
				ТекстСообщения="Ошибка записи регистра сведений ""Состояния требований"" (изменение состояния) Номенклатура:"+СтрТЗ.Номенклатура+" ИдентификаторСтроки "+СтрТЗ.ИдентификаторСтроки+" КодСтроки "+СтрТЗ.КодСтроки+". Создание документов не возможно. ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат;	
			КонецПопытки;	
			
			МассивОстатков=Остатки.НайтиСтроки(Новый структура("Номенклатура",СтрТЗ.Номенклатура));
			Списать=СтрТЗ.КоличествоКПередаче;
			Для Каждого СтрМ из МассивОстатков Цикл
				Если  СтрМ.Количество>0 Тогда
					КолВо=Мин(Списать,СтрМ.Количество);
					СтрМ.Количество=СтрМ.Количество-КолВо;
					Списать=Списать-КолВо;
					
					СтрДок=Док.Товары.Добавить();
					СтрДок.Номенклатура=СтрТЗ.Номенклатура;
					СтрДок.НоменклатураЗаказа=СтрТЗ.НоменклатураЗаказа;
					СтрДок.ЕдиницаИзмерения=СтрТЗ.Номенклатура.ОсновнаяЕдиницаУчета;
					СтрДок.ИдентификаторСтроки=СтрТЗ.ИдентификаторСтроки;
					СтрДок.КодСтроки=СтрТЗ.Кодстроки;
					СтрДок.ИсточникФинансирования=Док.ИсточникФинансирования;
					СтрДок.КоличествоВЕдиницахЗаказа=КолВо;
					СтрДок.Коэффициент=СтрМ.Коэффициент;
					СтрДок.КоличествоВЕдиницахИзмерения=КолВо;
					СтрДок.Партия=СтрМ.Партия;
					СтрДок.СерияНоменклатуры=СтрМ.СерияНоменклатуры;
					СтрДок.СтатусУказанияПартий=?(СтрДок.Номенклатура.ВидНоменклатуры.ИспользоватьПартии,4,0);
					СтрДок.СтатусУказанияПартийОтправитель=СтрДок.СтатусУказанияПартий;
					СтрДок.СтатусУказанияПартийПолучатель=СтрДок.СтатусУказанияПартий;
					СтрДок.СтатусУказанияСерий=?(СтрДок.Номенклатура.ВидНоменклатуры.ИспользоватьСерии,6,0);
					СтрДок.СтатусУказанияСерийОтправитель=СтрДок.СтатусУказанияСерий;
					СтрДок.СтатусУказанияСерийПолучатель=СтрДок.СтатусУказанияСерий;
					СтрДок.Требование=СтрТЗ.Требование;
					Если Списать=0 Тогда
						Прервать;
					КонецЕсли;	
				КонецЕсли;   
			КонецЦикла;	
		КонецЦикла;		
		Попытка	
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения="Не удалось записать Отпуск в отделение "+СтрПодр.Отделение;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОтменитьТранзакцию();
			Возврат;	
		КонецПопытки;	
		БуферДокОтпуск.Добавить(Док.Ссылка);
	КонецЦикла;
	
	
	Попытка
        ЗафиксироватьТранзакцию();
		//ОтменитьТранзакцию();
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Изменения зафиксированныю Документы созданы");
		Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаДокументы;
	Исключение
		ОтменитьТранзакцию();
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При выполнении операции возникла ошибка.");
		Возврат;
	КонецПопытки;
	
	ДокументыОтпуск.Очистить();
	Для Каждого Стр Из БуферДокОтпуск Цикл
		СтрДок=ДокументыОтпуск.Добавить();
		СтрДок.Пометка=Истина;
		СтрДок.ОтпускВОтделение=Стр;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВОтделения(Команда)
	ПередатьВОтделенияНаСервере();
	ПоказатьПредупреждение(,"Обработка завершена.");
КонецПроцедуры



&НаСервере
Процедура ОтменитьЗаказПозицииНаСервере(Причина, ВыделенныеСтроки)
	Перем Рег;
	
	НачатьТранзакцию();      
	_Товары=Товары.Выгрузить();
	Для Каждого СтрВ из ВыделенныеСтроки Цикл
		Стр=Товары.НайтиПоИдентификатору(СтрВ);                   
		Если сок_Проверки.МожноРаботатьСУникальнойЗаписьюРегистраСостоянияТребований(Стр.ИдентификаторСтроки,Стр.КодСтроки,Рег) Тогда
			Рег[0].Описание=Причина;
			Рег[0].Состояние=Перечисления.СостоянияТребований.Отменено;
			Рег.Записать(Истина);          
			
			Рег.Отбор.КодСтроки.Использование=Ложь;
			Рег.Прочитать();
			
			Если Рег.Количество()=1 Тогда
				Элемент = Рег[0].Требование.ПолучитьОбъект();
				СтрН=Элемент.Товары.Найти(Стр.ИдентификаторСтроки,"ИдентификаторСтроки");
				СтрН.Отменено=Истина;
				СтрН.ПричинаОтмены=Причина;
				Элемент.ОбменДанными.Загрузка=Истина;
				Элемент.Записать();
			КонецЕсли;	
			Товары.Удалить(Товары.Индекс(Стр));
			
		КонецЕсли;
	КонецЦикла;		
	ЗафиксироватьТранзакцию();
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьЗаказПозиции(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("ОтменитьЗаказПозиции_Завершение",Этаформа,Элементы.Товары.ВыделенныеСтроки);    
	ПоказатьВводСтроки(ОписаниеОповещения,"","Укажите причину отмены.");
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказПозиции_Завершение(Рез,Парам) Экспорт
	Если ЗначениеЗаполнено(Рез) Тогда
		ОтменитьЗаказПозицииНаСервере(Рез,Парам);
	Конецесли;	
КонецПроцедуры

