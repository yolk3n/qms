
&НаКлиенте
Перем ПараметрыПодключения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Организация        = Параметры.Организация;
	МестоДеятельности  = Параметры.МестоДеятельности;
	УстановитьИдентификаторСубъектаОбращения();
	
	ПравоИзмененияУпаковокМДЛП = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УпаковкиМДЛП);
	Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = ПравоИзмененияУпаковокМДЛП;
	Элементы.ЗаписатьИзмененияУпаковок.Видимость     = ПравоИзмененияУпаковокМДЛП;
	
	ИспользоватьСерии = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Элементы.ДанныеПотребительскихУпаковокСерия.Видимость = ИспользоватьСерии;
	Элементы.СгенерироватьСерии.Видимость                 = ИспользоватьСерии;
	
	Элементы.ДанныеПотребительскихУпаковокХарактеристика.Видимость = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ДанныеПотребительскихУпаковокУпаковка.Видимость       = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ЭтотОбъект, Обработки.СверкаОстатковМДЛП);
	
	РазмерПорции = 20;
	ТекущийНомерПорции = 1;
	
	СтатусыУпаковокВРезерве = ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве();
	Для Каждого СтатусУпаковкиМДЛП Из Перечисления.СтатусыУпаковокМДЛП Цикл
		Если СтатусыУпаковокВРезерве.Найти(СтатусУпаковкиМДЛП) <> Неопределено
		 Или СтатусУпаковкиМДЛП = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ДанныеПотребительскихУпаковокСтатус.СписокВыбора.Добавить(СтатусУпаковкиМДЛП);
		Элементы.ИерархияУпаковокСтатус.СписокВыбора.Добавить(СтатусУпаковкиМДЛП);
	КонецЦикла;
	
	СоздатьЭлементыДинамическихОтборов();
	
	УстановитьОтображениеКнопок();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
		Элементы.ДанныеПотребительскихУпаковокИдентификаторЗТК.Видимость = Ложь;
		Элементы.ДанныеПотребительскихУпаковокЗонаТаможенногоКонтроля.Видимость = Ложь;
		Элементы.ИерархияУпаковокИдентификаторЗТК.Видимость = Ложь;
		Элементы.ИерархияУпаковокЗонаТаможенногоКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки.Удалить("Организация");
		Настройки.Удалить("МестоДеятельности");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ДанныеШтрихкода = ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			ОбработатьШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкода));
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Данные были изменены. Записать изменения?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповестить, Отказ, ЗавершениеРаботы, ТекстСообщения, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьУпаковкиМДЛП(Команда)
	
	ОчиститьСообщения();
	
	ТекущийНомерПорции = 1;
	
	НачатьПолучениеУпаковокМДЛП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПолучениеУпаковокМДЛП(Команда)
	
	ОтменитьПолучениеИнформациюОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУпаковкиПоДаннымМДЛП(Команда)
	
	Результат = ЗаполнитьУпаковкиПоДаннымМДЛПНаСервере();
	ОповеститьОбОкончанииЗаполненияУпаковок(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Результат = СгенерироватьСерииНаСервере();
	СобытияФормМДЛПКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияУпаковок(Команда)
	
	ЗаписатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоДеятельностиПриИзменении(Элемент)
	
	МестоДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПотребительскихУпаковокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ЗапрещенВводДанныхНоменклатуры
	   И (Поле = Элементы.ДанныеПотребительскихУпаковокНоменклатура
		Или Поле = Элементы.ДанныеПотребительскихУпаковокХарактеристика
		Или Поле = Элементы.ДанныеПотребительскихУпаковокСерия
		Или Поле = Элементы.ДанныеПотребительскихУпаковокУпаковка
		Или Поле = Элементы.ДанныеПотребительскихУпаковокЕдиницаИзмерения) Тогда
		
		ТекущиеДанные = Объект.ДанныеПотребительскихУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
		
		Оповестить = Новый ОписаниеОповещения("ОбработатьВводДанныхНоменклатуры", ЭтотОбъект, ВыбраннаяСтрока);
		ОткрытьФорму("Обработка.СверкаОстатковМДЛП.Форма.ФормаВводаДанныхНоменклатуры", ПараметрыФормы, ЭтотОбъект,,,, Оповестить);
		
	ИначеЕсли Поле = Элементы.ДанныеПотребительскихУпаковокСтатус Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИмяТаблицы", "ДанныеПотребительскихУпаковок");
		Контекст.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		
		Оповестить = Новый ОписаниеОповещения("ОбработкаВыборкаСтатусаУпаковки", ЭтотОбъект, Контекст);
		ПоказатьВыборИзМеню(Оповестить, Поле.СписокВыбора, Поле);
		
	ИначеЕсли Поле = Элементы.ДанныеПотребительскихУпаковокЗонаТаможенногоКонтроля Тогда
		
		ПодключитьОбработчикОжидания("ОбработатьВводДанныхЗТКОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияУпаковокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ИерархияУпаковокСтатус Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИмяТаблицы", "ИерархияУпаковок");
		Контекст.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		
		Оповестить = Новый ОписаниеОповещения("ОбработкаВыборкаСтатусаУпаковки", ЭтотОбъект, Контекст);
		ПоказатьВыборИзМеню(Оповестить, Поле.СписокВыбора, Поле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПорцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РазмерПорции = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РазмерПорции = ВыбранноеЗначение;
	ТекущийНомерПорции = 1;
	
	НачатьПолучениеУпаковокМДЛП();
	
КонецПроцедуры

&НаКлиенте
Процедура НомераПорцийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовыйНомерПорции = Число(НавигационнаяСсылкаФорматированнойСтроки);
	Если ТекущийНомерПорции = НовыйНомерПорции Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекущийНомерПорции = НовыйНомерПорции;
	
	НачатьПолучениеУпаковокМДЛП();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура СоздатьЭлементыДинамическихОтборов()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеЭлементы = Новый Массив;
	
	ПараметрыОтборов = ПараметрыОтборовУпаковокМДЛП();
	Для Каждого КлючИЗначение Из ПараметрыОтборов Цикл
		
		ПараметрыОтбора = КлючИЗначение.Значение;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(КлючИЗначение.Ключ, ПараметрыОтбора.Тип,, ПараметрыОтбора.Заголовок));
		
		ЭлементФормы = Элементы.Добавить(КлючИЗначение.Ключ, Тип("ПолеФормы"), Элементы.ГруппаДинамическиеОтборы);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.КнопкаОчистки = Истина;
		
		Если КлючИЗначение.Ключ = "status_Отбор" Тогда
			ЭлементФормы.КнопкаВыпадающегоСписка = Истина;
			ЭлементФормы.СписокВыбора.Очистить();
			СписокВыбора = ИнтеграцияМДЛПКлиентСервер.СписокСтатусовКИЗвМДЛП();
			СписокВыбора.СортироватьПоПредставлению();
			Для Каждого ЭлементСписка Из СписокВыбора Цикл
				ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, СтрШаблон("%1 (%2)", ЭлементСписка.Представление, ЭлементСписка.Значение));
			КонецЦикла;
		КонецЕсли;
		
		ДобавляемыеЭлементы.Добавить(ЭлементФормы);
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если ДобавляемыеЭлементы.Количество() > 0 Тогда
		Для Каждого ЭлементФормы Из ДобавляемыеЭлементы Цикл
			ЭлементФормы.ПутьКДанным = ЭлементФормы.Имя;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОтборовУпаковокМДЛП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерУпаковки_Отбор", Новый Структура("Тип, Заголовок, ИмяМДЛП", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип, НСтр("ru = 'Номер упаковки'"), "sgtin"));
	ПараметрыОтбора.Вставить("gtin_Отбор"         , Новый Структура("Тип, Заголовок, ИмяМДЛП", Метаданные.ОпределяемыеТипы.GTIN.Тип, НСтр("ru = 'GTIN'"), "gtin"));
	ПараметрыОтбора.Вставить("status_Отбор"       , Новый Структура("Тип, Заголовок, ИмяМДЛП", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Статус МДЛП'"), "status"));
	ПараметрыОтбора.Вставить("batch_Отбор"        , Новый Структура("Тип, Заголовок, ИмяМДЛП", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Номер серии'"), "batch"));
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОтборыУпаковокМДЛП()
	
	Отбор = Новый Структура;
	ПараметрыОтборов = ПараметрыОтборовУпаковокМДЛП();
	Для Каждого КлючИЗначение Из ПараметрыОтборов Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, КлючИЗначение.Ключ) И ЗначениеЗаполнено(ЭтотОбъект[КлючИЗначение.Ключ]) Тогда
			Если КлючИЗначение.Ключ = "status_Отбор" Тогда
				Отбор.Вставить(КлючИЗначение.Значение.ИмяМДЛП, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект[КлючИЗначение.Ключ]));
			Иначе
				Отбор.Вставить(КлючИЗначение.Значение.ИмяМДЛП, ЭтотОбъект[КлючИЗначение.Ключ]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьОтборыУпаковокМДЛП()
	
	ПараметрыОтборов = ПараметрыОтборовУпаковокМДЛП();
	Для Каждого КлючИЗначение Из ПараметрыОтборов Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, КлючИЗначение.Ключ) Тогда
			ЭтотОбъект[КлючИЗначение.Ключ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Отборы

#Область ЗагрузкаДанныхУпаковок

&НаКлиенте
Процедура НачатьПолучениеУпаковокМДЛП()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация, МестоДеятельности);
	Иначе
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация);
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОбУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияСпискаПотребительскихУпаковокПоОтбору();
	ПараметрыМетода.НачальныйИндекс = ИндексПервогоЭлементаПорции(РазмерПорции, ТекущийНомерПорции);
	ПараметрыМетода.РазмерПорции    = РазмерПорции;
	ПараметрыМетода.Отбор           = ПолучитьОтборыУпаковокМДЛП();
	ПараметрыМетода.Отбор.Вставить("sys_id", ИдентификаторСубъектаОбращения);
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОбУпаковках", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеПотребительскихУпаковок", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.НачатьПолучениеСпискаПотребительскихУпаковокПоОтбору(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеУпаковокМДЛППоНомерамУпаковок(НомераУпаковок)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НомераУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация, МестоДеятельности);
	Иначе
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация);
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОбУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОПотребительскихУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = НомераУпаковок;
	ПараметрыМетода.ТипЗапросаМетодовАПИ = ПредопределенноеЗначение("Перечисление.ТипыЗапросовМетодовАПИМДЛП.Синхронный");
	ПараметрыМетода.ТипИсточникаИнформацииОбУпаковках = ПредопределенноеЗначение("Перечисление.ТипыИсточниковИнформацииОбУпаковкахМДЛП.Приватный");
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОбУпаковках", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеПотребительскихУпаковок", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОКИЗ(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеПотребительскихУпаковок(Результат, Контекст) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОбУпаковках = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Отменено" Тогда
		ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
		Возврат;
	КонецЕсли;
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ = Неопределено Тогда
		ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
		Возврат;
	КонецЕсли;
	
	РезультатПотребительскиеУпаковки = ПолучитьИзВременногоХранилища(АдресРезультатаМетодаАПИ);
	ДанныеПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПотребительскиеУпаковки, "Данные", Новый Соответствие);
	
	НомераТранспортныхУпаковок = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеПотребительскихУпаковок Цикл
		НомерГрупповойУпаковкиМДЛП = КлючИЗначение.Значение["pack3_id"];
		Если ЗначениеЗаполнено(НомерГрупповойУпаковкиМДЛП) И НомераТранспортныхУпаковок.Найти(НомерГрупповойУпаковкиМДЛП) = Неопределено Тогда
			НомераТранспортныхУпаковок.Добавить(НомерГрупповойУпаковкиМДЛП);
		КонецЕсли;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеТранспортныхУпаковок", ЭтотОбъект, РезультатПотребительскиеУпаковки);
	Если НомераТранспортныхУпаковок.Количество() > 0 Тогда
		
		ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОТранспортныхУпаковках(Строка(УникальныйИдентификатор));
		ПараметрыМетода.НомераУпаковок = НомераТранспортныхУпаковок;
		ПараметрыМетода.ПолучатьВерхнеуровневыеУпаковки = Истина;
		
		ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
		ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОбУпаковках", ЭтотОбъект);
		
		ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОТранспортныхУпаковках(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеТранспортныхУпаковок(Результат, РезультатПотребительскиеУпаковки) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОбУпаковках = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Отменено" Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		РезультатТранспортныеУпаковки = ПолучитьИзВременногоХранилища(АдресРезультатаМетодаАПИ);
	Иначе
		РезультатТранспортныеУпаковки = Неопределено;
	КонецЕсли;
	
	ДанныеПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПотребительскиеУпаковки, "Данные", Новый Соответствие);
	ДанныеТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатТранспортныеУпаковки, "Данные", Новый Соответствие);
	
	ВсегоДанных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПотребительскиеУпаковки, "Всего", ДанныеПотребительскихУпаковок.Количество());
	
	НомераПорций = ПредставлениеНомеровПорций(ВсегоДанных, РазмерПорции, ТекущийНомерПорции, 4);
	
	Объект.ДанныеПотребительскихУпаковок.Очистить();
	ИерархияУпаковок.ПолучитьЭлементы().Очистить();
	
	ЗакончитьПолучениеУпаковокМДЛП(ДанныеТранспортныхУпаковок, ДанныеПотребительскихУпаковок);
	
	РазвернутьДеревоРекурсивно(ИерархияУпаковок, Элементы.ИерархияУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьПолучениеУпаковокМДЛП(Знач ДанныеТранспортныхУпаковок, Знач ДанныеПотребительскихУпаковок)
	
	Иерархия = РеквизитФормыВЗначение("ИерархияУпаковок");
	
	ЗаполнитьИерархиюТранспортныхУпаковок(ДанныеТранспортныхУпаковок, Иерархия);
	ЗаполнитьДанныеПотребительскихУпаковок(ДанныеПотребительскихУпаковок, Иерархия);
	ДозаполнитьУчетнымиДанными(Иерархия);
	
	УстановитьОтображениеКнопок(Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Имя);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИерархиюТранспортныхУпаковок(ДанныеТранспортныхУпаковок, Иерархия)
	
	Для Каждого КлючИЗначение Из ДанныеТранспортныхУпаковок Цикл
		
		СтрокиИерархии = Иерархия.Строки;
		
		НомерУпаковки  = КлючИЗначение.Ключ;
		ДанныеУпаковки = КлючИЗначение.Значение;
		
		ЕстьИнформацияВМДЛП = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформацияВМДЛП Тогда
			
			ДополнитьИерархиюТранспортныхУпаковок(ДанныеУпаковки["up"], СтрокиИерархии);
			ДополнитьИерархиюТранспортныхУпаковок(ДанныеУпаковки["down"], СтрокиИерархии);
			
		Иначе
			
			Строка = СтрокиИерархии.Добавить();
			Строка.ЕстьИнформацияВМДЛП    = Ложь;
			Строка.НомерУпаковки          = НомерУпаковки;
			Строка.КлючУпаковки           = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
			Строка.СтатусМДЛП             = РассчитатьСтатусМДЛП(ДанныеУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИерархиюТранспортныхУпаковок(Данные, СтрокиИерархии)
	
	ОчередьУпаковок = Новый Массив;
	ОчередьУпаковок.Добавить(Новый Структура("ДанныеУпаковки, СтрокиИерархии", Данные, СтрокиИерархии));
	
	Пока ОчередьУпаковок.Количество() > 0 Цикл
		
		ТекущаяУпаковка = ОчередьУпаковок[0].ДанныеУпаковки;
		СтрокиИерархии = ОчередьУпаковок[0].СтрокиИерархии;
		ОчередьУпаковок.Удалить(0);
		
		ДочерниеУпаковки = ТекущаяУпаковка["childs"];
		Если ДочерниеУпаковки <> Неопределено Тогда
			
			НомерУпаковки = ТекущаяУпаковка["sscc"];
			
			Строка = СтрокиИерархии.Найти(НомерУпаковки, "НомерУпаковки", Истина);
			Если Строка = Неопределено Тогда
				
				Строка = СтрокиИерархии.Добавить();
				Строка.ЕстьИнформацияВМДЛП = Истина;
				Строка.НомерУпаковки       = НомерУпаковки;
				Строка.КлючУпаковки        = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
				
				РодительскаяСтрока = Строка.Родитель;
				Если РодительскаяСтрока <> Неопределено Тогда
					Строка.ДокументРезерваМДЛП        = ?(ЗначениеЗаполнено(РодительскаяСтрока.ДокументРезерваМДЛП), РодительскаяСтрока.ДокументРезерваМДЛП, РодительскаяСтрока.НомерУпаковки);
					Строка.НомерГрупповойУпаковкиМДЛП = РодительскаяСтрока.НомерУпаковки;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ДочерняяУпаковка Из ДочерниеУпаковки Цикл
				ОчередьУпаковок.Добавить(Новый Структура("ДанныеУпаковки, СтрокиИерархии", ДочерняяУпаковка, Строка.Строки));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПотребительскихУпаковок(ДанныеПотребительскихУпаковок, Иерархия)
	
	Для Каждого КлючИЗначение Из ДанныеПотребительскихУпаковок Цикл
		
		ЭлементДанных = КлючИЗначение.Значение;
		
		СтрокаДанныхУпаковок = Объект.ДанныеПотребительскихУпаковок.Добавить();
		СтрокаДанныхУпаковок.ЕстьИнформацияВМДЛП        = Истина;
		СтрокаДанныхУпаковок.НомерУпаковки              = ЭлементДанных["sgtin"];
		СтрокаДанныхУпаковок.КлючУпаковки               = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(СтрокаДанныхУпаковок.НомерУпаковки);
		СтрокаДанныхУпаковок.GTIN                       = ЭлементДанных["gtin"];
		СтрокаДанныхУпаковок.КодЕСКЛП                   = ЭлементДанных["drug_code"];
		СтрокаДанныхУпаковок.СтатусМДЛП                 = РассчитатьСтатусМДЛП(ЭлементДанных);
		СтрокаДанныхУпаковок.ДатаСтатусаМДЛП            = ИнтеграцияМДЛП.СтрокаВДатуЧасовогоПоясаСеанса(ИнтеграцияМДЛП.ДобавитьНулевойЧасовойПоясКДате(ЭлементДанных["status_date"]));
		СтрокаДанныхУпаковок.НомерСерии                 = ЭлементДанных["batch"];
		СтрокаДанныхУпаковок.ГоденДо                    = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЭлементДанных["expiration_date"]);
		СтрокаДанныхУпаковок.НаименованиеТовара         = ЭлементДанных["full_prod_name"];
		СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП = ЭлементДанных["pack3_id"];
		СтрокаДанныхУпаковок.ВладелецМДЛП               = ЭлементДанных["owner"];
		СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения    = ЭлементДанных["sys_id"];
		СтрокаДанныхУпаковок.ИдентификаторЗТК                  = ЭлементДанных["customs_point_id"];
		СтрокаДанныхУпаковок.ИдентификаторРешенияОПриостановке = ЭлементДанных["halt_id"];
		СтрокаДанныхУпаковок.НомерРешенияОПриостановке         = ЭлементДанных["halt_doc_num"];
		СтрокаДанныхУпаковок.ДатаРешенияОПриостановке          = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЭлементДанных["halt_doc_date"]);
		СтрокаДанныхУпаковок.СуммарноВыбытаяДоля               = ЭлементДанных["total_sold_part"];
		СтрокаДанныхУпаковок.СуммарноСписаннаяДоля             = ЭлементДанных["total_withdrawal_part"];
		
		ИсточникФинансированияМДЛП = ЭлементДанных["source_type"];
		Если ЗначениеЗаполнено(ИсточникФинансированияМДЛП) Тогда
			СтрокаДанныхУпаковок.ИсточникФинансированияМДЛП = Перечисления.ИсточникиФинансированияМДЛП.Получить(ИсточникФинансированияМДЛП - 1);
		КонецЕсли;
		
		ТипВыводаИзОборотаМДЛП = ЭлементДанных["withdrawal_type"];
		Если ЗначениеЗаполнено(ТипВыводаИзОборотаМДЛП) Тогда
			СтрокаДанныхУпаковок.ТипВыводаИзОборота = Перечисления.ТипыВыводаИзОборотаМДЛП.Получить(ТипВыводаИзОборотаМДЛП - 1);
		КонецЕсли;
		
		ТипЭмиссииМДЛП = ЭлементДанных["emission_type"];
		Если ЗначениеЗаполнено(ТипЭмиссииМДЛП) Тогда
			СтрокаДанныхУпаковок.ТипЭмиссииМДЛП = Перечисления.ТипыЭмиссииУпаковокМДЛП.Получить(ТипЭмиссииМДЛП - 1);
		КонецЕсли;
		
		Родитель = Иерархия.Строки.Найти(СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП, "НомерУпаковки", Истина);
		Если ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений") И Родитель.ЕстьИнформацияВМДЛП Тогда
			
			СтрокаДанныхУпаковок.ДокументРезерваМДЛП = Родитель.ДокументРезерваМДЛП;
			Если Не ЗначениеЗаполнено(СтрокаДанныхУпаковок.ДокументРезерваМДЛП) Тогда
				// Родитель сам является упаковкой самого верхнего уровня.
				СтрокаДанныхУпаковок.ДокументРезерваМДЛП = Родитель.НомерУпаковки;
			КонецЕсли;
			
			// Дозаполнение родительских записей.
			Родитель.ВложеныПотребительскиеУпаковкиМДЛП = Истина;
			Пока ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений") Цикл
				Родитель.СтатусМДЛП      = СтрокаДанныхУпаковок.СтатусМДЛП;
				Родитель.ДатаСтатусаМДЛП = СтрокаДанныхУпаковок.ДатаСтатусаМДЛП;
				Родитель.ИдентификаторСубъектаОбращения = СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения;
				Родитель.ИдентификаторЗТК               = СтрокаДанныхУпаковок.ИдентификаторЗТК;
				Родитель = Родитель.Родитель;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьУчетнымиДанными(Иерархия)
	
	ДанныеПотребительскихУпаковок = Объект.ДанныеПотребительскихУпаковок.Выгрузить();
	ТаблицаИерархии = ИнтеграцияМДЛП.ДеревоВТаблицуЗначений(Иерархия,, "НомерУпаковки, КлючУпаковки, ИдентификаторСубъектаОбращения");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеПотребительскихУпаковок.НомерУпаковки                   КАК НомерУпаковки,
	|	ДанныеПотребительскихУпаковок.КлючУпаковки                    КАК КлючУпаковки,
	|	ДанныеПотребительскихУпаковок.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ПОМЕСТИТЬ ДанныеПотребительскихУпаковок
	|ИЗ
	|	&ДанныеПотребительскихУпаковок КАК ДанныеПотребительскихУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИерархии.НомерУпаковки                   КАК НомерУпаковки,
	|	ТаблицаИерархии.КлючУпаковки                    КАК КлючУпаковки,
	|	ТаблицаИерархии.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ПОМЕСТИТЬ ТаблицаИерархии
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПотребительскихУпаковок.НомерУпаковки                   КАК НомерУпаковки,
	|	ДанныеПотребительскихУпаковок.КлючУпаковки                    КАК КлючУпаковки,
	|	ДанныеПотребительскихУпаковок.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ДанныеПотребительскихУпаковок КАК ДанныеПотребительскихУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаИерархии.НомерУпаковки                   КАК НомерУпаковки,
	|	ТаблицаИерархии.КлючУпаковки                    КАК КлючУпаковки,
	|	ТаблицаИерархии.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	ТаблицаИерархии КАК ТаблицаИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА                                       КАК ЕстьИнформацияВБазе,
	|	УпаковкиМДЛП.НомерУпаковки                   КАК НомерУпаковки,
	|	УпаковкиМДЛП.КлючУпаковки                    КАК КлючУпаковки,
	|	УпаковкиМДЛП.МестоДеятельности               КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА УпаковкиМДЛП.МестоДеятельности ССЫЛКА Справочник.МестаДеятельностиМДЛП
	|			ТОГДА УпаковкиМДЛП.МестоДеятельности.Идентификатор
	|		КОГДА УпаковкиМДЛП.МестоДеятельности ССЫЛКА Справочник.ОрганизацииМДЛП
	|			ТОГДА УпаковкиМДЛП.МестоДеятельности.РегистрационныйНомерУчастника
	|		ИНАЧЕ """"
	|	КОНЕЦ                                        КАК ИдентификаторСубъектаОбращения,
	|	УпаковкиМДЛП.ЗонаТаможенногоКонтроля         КАК ЗонаТаможенногоКонтроля,
	|	УпаковкиМДЛП.Статус                          КАК Статус,
	|	УпаковкиМДЛП.ИсходныйСтатус                  КАК ИсходныйСтатус,
	|	УпаковкиМДЛП.ДокументРезерва                 КАК ДокументРезерва,
	|	УпаковкиМДЛП.ДатаСтатуса                     КАК ДатаСтатуса,
	|	УпаковкиМДЛП.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	УпаковкиМДЛП.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
	|	УпаковкиМДЛП.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	УпаковкиМДЛП.Владелец                        КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеУпаковок КАК ДанныеУпаковок
	|		ПО
	|			УпаковкиМДЛП.НомерУпаковки = ДанныеУпаковок.НомерУпаковки
	|			И УпаковкиМДЛП.КлючУпаковки = ДанныеУпаковок.КлючУпаковки
	|");
	
	Запрос.УстановитьПараметр("ДанныеПотребительскихУпаковок", ДанныеПотребительскихУпаковок);
	Запрос.УстановитьПараметр("ТаблицаИерархии"              , ТаблицаИерархии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("НомерУпаковки, КлючУпаковки, ИдентификаторСубъектаОбращения", Выборка.НомерУпаковки, Выборка.КлючУпаковки, Выборка.ИдентификаторСубъектаОбращения);
		Строки = ДанныеПотребительскихУпаковок.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Строки = Иерархия.Строки.НайтиСтроки(Отбор, Истина);
			Если Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строки[0], Выборка);
		
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеПотребительскихУпаковок Цикл
		
		ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
		ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
		ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		
		ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(ЭтотОбъект, Строка, ПараметрыЗаполнения);
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Или ЗначениеЗаполнено(Строка.Серия) Тогда
			Строка.ИзмененыДанныеНоменклатуры = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ДанныеПотребительскихУпаковок.Загрузить(ДанныеПотребительскихУпаковок);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.ДанныеПотребительскихУпаковок);
	
	ЗначениеВРеквизитФормы(Иерархия, "ИерархияУпаковок");
	
	ЗаполнитьДанныеТранспортныхУпаковокИзИерархииУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТранспортныхУпаковокИзИерархииУпаковок()
	
	Объект.ДанныеТранспортныхУпаковок.Очистить();
	
	Стек = Новый Массив;
	Стек.Добавить(ИерархияУпаковок.ПолучитьЭлементы());
	
	Пока Стек.Количество() > 0 Цикл
		
		СтрокиИерархии = Стек[0];
		Стек.Удалить(0);
		
		Для Каждого Строка Из СтрокиИерархии Цикл
			
			ПодчененныеСтроки = Строка.ПолучитьЭлементы();
			Если ПодчененныеСтроки.Количество() > 0 Тогда
				Стек.Добавить(ПодчененныеСтроки);
			КонецЕсли;
			
			СтрокаДанныхУпаковок = Объект.ДанныеТранспортныхУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхУпаковок, Строка);
			СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии = Строка.ПолучитьИдентификатор();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОбУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОбУпаковках = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОбУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОбУпаковках) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОбУпаковках);
		ИдентификаторЗаданияПолученияИнформацииОбУпаковках = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеПолученияИнформацииОбУпаковках(Состояние)
	
	Если Состояние = "Начало" Тогда
		
		Элементы.ОтменитьПолучениеУпаковокМДЛП.Видимость = Истина;
		
		Элементы.ДанныеПотребительскихУпаковок.Доступность = Ложь;
		Элементы.ИерархияУпаковок.Доступность = Ложь;
		Элементы.ГруппаНавигации.Доступность = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках запущено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Элементы.ОтменитьПолучениеУпаковокМДЛП.Видимость = Ложь;
		
		Элементы.ДанныеПотребительскихУпаковок.Доступность = Истина;
		Элементы.ИерархияУпаковок.Доступность = Истина;
		Элементы.ГруппаНавигации.Доступность = Истина;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках завершено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхУпаковок

#Область ЗаполнениеСтрок

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий();
	
	ДанныеПотребительскихУпаковок = Объект.ДанныеПотребительскихУпаковок.Выгрузить();
	
	Если Объект.ДанныеПотребительскихУпаковок.Количество() > 0 Тогда
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "ДанныеПотребительскихУпаковок",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		
		Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеПотребительскихУпаковок Цикл
			Строка = ДанныеПотребительскихУпаковок.Найти(СтрокаДанныхУпаковок.НомерУпаковки, "НомерУпаковки");
			Если Строка.Серия <> СтрокаДанныхУпаковок.Серия Тогда
				СтрокаДанныхУпаковок.ИзмененыДанныеНоменклатуры = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьУпаковкиПоДаннымМДЛПНаСервере()
	
	Результат = ПустойРезультатИзмененияИнформацииОбУпаковках();
	
	СоответствиеСтатусов = ИнтеграцияМДЛПКлиентСервер.СоответствиеВнутреннихСтатусовКИЗСтатусамМДЛП();
	
	СтатусыУпаковокВРезерве = ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Ссылка         КАК СубъектОбращения,
	|	Данные.Идентификатор  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.МестаДеятельностиМДЛП КАК Данные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Данные.Ссылка                         КАК СубъектОбращения,
	|	Данные.РегистрационныйНомерУчастника  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Ссылка                         КАК ЗонаТаможенногоКонтроля,
	|	Данные.РегистрационныйНомерУчастника  КАК ИдентификаторЗТК
	|ИЗ
	|	Справочник.ЗоныТаможенногоКонтроляМДЛП КАК Данные
	|");
	Результаты = Запрос.ВыполнитьПакет();
	СубъектыОбращения       = Результаты[0].Выгрузить();
	ЗоныТаможенногоКонтроля = Результаты[1].Выгрузить();
	
	// Заполнение потребительских упаковок.
	Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеПотребительскихУпаковок Цикл
		
		Если Не СтрокаДанныхУпаковок.ЕстьИнформацияВМДЛП Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанныхУпаковок.ЕстьИнформацияВБазе И СтатусыУпаковокВРезерве.Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхСубъектовОбращения = СубъектыОбращения.Найти(СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, "ИдентификаторСубъектаОбращения");
		Если СтрокаДанныхСубъектовОбращения = Неопределено Тогда
			Текст = НСтр("ru = 'Не удалось идентифицировать место деятельности с идентификатором %1.'");
			Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, СтрокаДанныхУпаковок.НомерУпаковки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			Продолжить;
		КонецЕсли;
		
		ЗонаТаможенногоКонтроля = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДанныхУпаковок.ИдентификаторЗТК) Тогда
			СтрокаДанныхЗТК = ЗоныТаможенногоКонтроля.Найти(СтрокаДанныхУпаковок.ИдентификаторЗТК, "ИдентификаторЗТК");
			Если СтрокаДанныхЗТК <> Неопределено Тогда
				ЗонаТаможенногоКонтроля = СтрокаДанныхЗТК.ЗонаТаможенногоКонтроля;
			ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
				Текст = НСтр("ru = 'Не удалось идентифицировать зону таможенного контроля с идентификатором %1.'");
				Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторЗТК, СтрокаДанныхУпаковок.НомерУпаковки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			КонецЕсли;
		КонецЕсли;
		
		СтатусУпаковки = СоответствиеСтатусов[СтрокаДанныхУпаковок.СтатусМДЛП];
		Если СтатусыУпаковокВРезерве.Найти(СтатусУпаковки) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП) Тогда
			СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке;
		Иначе
			Если СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ
			   И СтрокаДанныхУпаковок.ТипЭмиссииМДЛП = Перечисления.ТипыЭмиссииУпаковокМДЛП.МаркированВЗТК Тогда
				СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеАктуализации = Новый Структура("Статус, ДатаСтатуса, ДокументРезерва, ГрупповаяУпаковка, НомерГрупповойУпаковки, МестоДеятельности, ЗонаТаможенногоКонтроля");
		ДанныеАктуализации.Статус                 = СтатусУпаковки;
		ДанныеАктуализации.ДатаСтатуса            = СтрокаДанныхУпаковок.ДатаСтатусаМДЛП;
		ДанныеАктуализации.ДокументРезерва        = СтрокаДанныхУпаковок.ДокументРезерваМДЛП;
		ДанныеАктуализации.ГрупповаяУпаковка      = Ложь;
		ДанныеАктуализации.НомерГрупповойУпаковки = СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП;
		ДанныеАктуализации.МестоДеятельности      = СтрокаДанныхСубъектовОбращения.СубъектОбращения;
		ДанныеАктуализации.ЗонаТаможенногоКонтроля = ЗонаТаможенногоКонтроля;
		
		Для Каждого КлючИЗначение Из ДанныеАктуализации Цикл
			Если СтрокаДанныхУпаковок[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				СтрокаДанныхУпаковок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках Тогда
			Результат.ЕстьЗаполненныеСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение транспортных упаковок.
	Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеТранспортныхУпаковок Цикл
		
		Если Не СтрокаДанныхУпаковок.ЕстьИнформацияВМДЛП Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанныхУпаковок.ЕстьИнформацияВБазе И СтатусыУпаковокВРезерве.Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхСубъектовОбращения = СубъектыОбращения.Найти(СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, "ИдентификаторСубъектаОбращения");
		Если СтрокаДанныхСубъектовОбращения = Неопределено Тогда
			Текст = НСтр("ru = 'Не удалось идентифицировать место деятельности с идентификатором %1.'");
			Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, СтрокаДанныхУпаковок.НомерУпаковки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			Продолжить;
		КонецЕсли;
		
		ЗонаТаможенногоКонтроля = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДанныхУпаковок.ИдентификаторЗТК) Тогда
			СтрокаДанныхЗТК = ЗоныТаможенногоКонтроля.Найти(СтрокаДанныхУпаковок.ИдентификаторЗТК, "ИдентификаторЗТК");
			Если СтрокаДанныхЗТК <> Неопределено Тогда
				ЗонаТаможенногоКонтроля = СтрокаДанныхЗТК.ЗонаТаможенногоКонтроля;
			ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
				Текст = НСтр("ru = 'Не удалось идентифицировать зону таможенного контроля с идентификатором %1.'");
				Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, СтрокаДанныхУпаковок.НомерУпаковки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			КонецЕсли;
		КонецЕсли;
		
		СтатусУпаковки = СоответствиеСтатусов[СтрокаДанныхУпаковок.СтатусМДЛП];
		Если СтатусыУпаковокВРезерве.Найти(СтатусУпаковки) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП) Тогда
			СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке;
		Иначе
			Если СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ
			   И СтрокаДанныхУпаковок.ТипЭмиссииМДЛП = Перечисления.ТипыЭмиссииУпаковокМДЛП.МаркированВЗТК Тогда
				СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеАктуализации = Новый Структура("Статус, ДатаСтатуса, ДокументРезерва, ГрупповаяУпаковка, НомерГрупповойУпаковки, ВложеныПотребительскиеУпаковки, МестоДеятельности, ЗонаТаможенногоКонтроля");
		ДанныеАктуализации.Статус                         = СтатусУпаковки;
		ДанныеАктуализации.ДатаСтатуса                    = СтрокаДанныхУпаковок.ДатаСтатусаМДЛП;
		ДанныеАктуализации.ДокументРезерва                = СтрокаДанныхУпаковок.ДокументРезерваМДЛП;
		ДанныеАктуализации.ГрупповаяУпаковка              = Истина;
		ДанныеАктуализации.НомерГрупповойУпаковки         = СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП;
		ДанныеАктуализации.ВложеныПотребительскиеУпаковки = СтрокаДанныхУпаковок.ВложеныПотребительскиеУпаковкиМДЛП;
		ДанныеАктуализации.МестоДеятельности              = СтрокаДанныхСубъектовОбращения.СубъектОбращения;
		ДанныеАктуализации.ЗонаТаможенногоКонтроля        = ЗонаТаможенногоКонтроля;
		
		Для Каждого КлючИЗначение Из ДанныеАктуализации Цикл
			Если СтрокаДанныхУпаковок[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				СтрокаДанныхУпаковок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках Тогда
			Строка = ИерархияУпаковок.НайтиПоИдентификатору(СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии);
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхУпаковок);
			Результат.ЕстьЗаполненныеСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		Модифицированность = Истина;
		УстановитьОтображениеКнопок(Элементы.ЗаписатьИзмененияУпаковок.Имя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустойРезультатИзмененияИнформацииОбУпаковках()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЗаполненныеСтроки", Ложь);
	Результат.Вставить("Ошибки");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбОкончанииЗаполненияУпаковок(Результат)
	
	ОчиститьСообщения();
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Информация об упаковках актуализирована'"),
			,
			НСтр("ru = 'Информация об упаковках актуализирована'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Информация об упаковках не актуализирована'"),
			,
			НСтр("ru = 'Ни в одной строке информация об упаковках не актуализирована'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Результат.Ошибки);
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеСтрок

#Область ЗаписьУпаковокМДЛП

// Продолжение процедуры ПередЗакрытием
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаписатьНаКлиенте();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	
	ОчиститьСообщения();
	
	ЗаписатьНаСервере();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Если Модифицированность Тогда
		
		ИмяТабличнойЧасти = Метаданные.Обработки.СверкаОстатковМДЛП.ТабличныеЧасти.ДанныеПотребительскихУпаковок.Имя;
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ЗаписатьРезультатСверкиОстатков(ЭтотОбъект, Объект, ИмяТабличнойЧасти, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ЗаписатьУпаковкиМДЛП(Объект[ИмяТабличнойЧасти]);
		КонецЕсли;
		
		ИмяТабличнойЧасти = Метаданные.Обработки.СверкаОстатковМДЛП.ТабличныеЧасти.ДанныеТранспортныхУпаковок.Имя;
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ЗаписатьРезультатСверкиОстатков(ЭтотОбъект, Объект, ИмяТабличнойЧасти, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ЗаписатьУпаковкиМДЛП(Объект[ИмяТабличнойЧасти]);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУпаковкиМДЛП(ДанныеУпаковок)
	
	ИзмененияИнформации = ДанныеУпаковок.Выгрузить(Новый Структура("ИзмененаИнформацияОбУпаковках", Истина));
	Если ИзмененияИнформации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИзмененияИнформации.НомерУпаковки      КАК НомерУпаковки,
	|	ИзмененияИнформации.КлючУпаковки       КАК КлючУпаковки,
	|	ИзмененияИнформации.МестоДеятельности  КАК МестоДеятельности
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	&ИзмененияИнформации КАК ИзмененияИнформации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиМДЛП.НомерУпаковки                   КАК НомерУпаковки,
	|	УпаковкиМДЛП.КлючУпаковки                    КАК КлючУпаковки,
	|	УпаковкиМДЛП.МестоДеятельности               КАК МестоДеятельности,
	|	УпаковкиМДЛП.ЗонаТаможенногоКонтроля         КАК ЗонаТаможенногоКонтроля,
	|	УпаковкиМДЛП.ДокументРезерва                 КАК ДокументРезерва,
	|	УпаковкиМДЛП.Статус                          КАК Статус,
	|	УпаковкиМДЛП.ДатаСтатуса                     КАК ДатаСтатуса,
	|	УпаковкиМДЛП.Владелец                        КАК Владелец,
	|	УпаковкиМДЛП.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	УпаковкиМДЛП.ИсходныйСтатус                  КАК ИсходныйСтатус,
	|	УпаковкиМДЛП.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
	|	УпаковкиМДЛП.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	УпаковкиМДЛП.ПредыдущийСтатус                КАК ПредыдущийСтатус
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераУпаковок КАК НомераУпаковок
	|		ПО
	|			УпаковкиМДЛП.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И УпаковкиМДЛП.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И УпаковкиМДЛП.МестоДеятельности = НомераУпаковок.МестоДеятельности
	|");
	
	Запрос.УстановитьПараметр("ИзмененияИнформации", ИзмененияИнформации);
	УпаковкиМДЛП = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаИзменений Из ИзмененияИнформации Цикл
		
		Отбор = Новый Структура("МестоДеятельности, НомерУпаковки, КлючУпаковки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИзменений);
		
		Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
		Для Каждого КлючИЗначение Из Отбор Цикл
			Набор.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		
		Запись = Набор.Добавить();
		
		НайденныеУпаковкиМДЛП = УпаковкиМДЛП.НайтиСтроки(Отбор);
		Если НайденныеУпаковкиМДЛП.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Запись, НайденныеУпаковкиМДЛП[0]);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаИзменений);
		
		Набор.Записать();
		
	КонецЦикла;
	
	Для Каждого ЭлементДанных Из ДанныеУпаковок Цикл
		ЭлементДанных.ИзмененаИнформацияОбУпаковках = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗаписьУпаковокМДЛП

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект,
		Элементы.ДанныеПотребительскихУпаковокЕдиницаИзмерения.Имя, "Объект.ДанныеПотребительскихУпаковок.Упаковка");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		Элементы.ДанныеПотребительскихУпаковокХарактеристика.Имя, "Объект.ДанныеПотребительскихУпаковок.ХарактеристикиИспользуются");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект,
		Элементы.ДанныеПотребительскихУпаковокСерия.Имя, "Объект.ДанныеПотребительскихУпаковок.СтатусУказанияСерий", "Объект.ДанныеПотребительскихУпаковок.ТипНоменклатуры");
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияУпаковокНомерУпаковки.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияУпаковокСтатусМДЛП.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияУпаковокСтатус.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияУпаковокДокументРезерваМДЛП.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияУпаковокДокументРезерва.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ДанныеПотребительскихУпаковок.НомерГрупповойУпаковкиМДЛП", Новый ПолеКомпоновкиДанных("ИерархияУпаковок.НомерУпаковки"), ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьИдентификаторСубъектаОбращения();
	Если ЗначениеЗаполнено(Организация) Тогда
		УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	Иначе
		УстановитьОтображениеКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МестоДеятельностиПриИзмененииНаСервере()
	
	УстановитьИдентификаторСубъектаОбращения();
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторСубъектаОбращения()
	
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		ИдентификаторСубъектаОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоДеятельности, "Идентификатор");
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		ИдентификаторСубъектаОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрационныйНомерУчастника");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ОчиститьСообщения();
	
	ШтрихкодыПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	НомераУпаковок = Новый Массив;
	Для Каждого ДанныеУпаковки Из ШтрихкодыПоТипам.НомераКиЗ Цикл
		НомераУпаковок.Добавить(ДанныеУпаковки.SGTIN);
	КонецЦикла;
	
	НомераГрупповыхУпаковок = Новый Массив;
	Для Каждого ДанныеУпаковки Из ШтрихкодыПоТипам.НомераТранспортныхУпаковок Цикл
		НомераГрупповыхУпаковок.Добавить(ДанныеУпаковки.SSCC);
	КонецЦикла;
	
	ОчиститьОтборыУпаковокМДЛП();
	
	ТекущийНомерПорции = 1;
	
	Если НомераУпаковок.Количество() > 0 Тогда
		
		Если НомераУпаковок.Количество() <= РазмерПорции Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "НомерУпаковки_Отбор") Тогда
				НомерУпаковки_Отбор = НомераУпаковок[0];
			КонецЕсли;
			НачатьПолучениеУпаковокМДЛППоНомерамУпаковок(НомераУпаковок);
		Иначе
			Текст = НСтр("ru = 'Количество обрабатываемых упаковок не может превышать размера порции.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		КонецЕсли;
		
	ИначеЕсли НомераГрупповыхУпаковок.Количество() > 0 Тогда
		Текст = НСтр("ru = 'Нет данных для обработки. Могут быть обработаны только потребительские упаковки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
	Иначе
		Текст = НСтр("ru = 'Нет данных для обработки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, КоличествоВидимыхПорцийСнизуСверху)
	
	ВсегоПорций = Макс(Окр(КоличествоЭлементов / РазмерПорции + 0.5, 0, РежимОкругления.Окр15как10), 1);
	
	НижнийПредел  = Макс(Мин(НомерПорции + КоличествоВидимыхПорцийСнизуСверху, ВсегоПорций) - КоличествоВидимыхПорцийСнизуСверху * 2, 1);
	ВерхнийПредел = Мин(Макс(НомерПорции - КоличествоВидимыхПорцийСнизуСверху, 1) + КоличествоВидимыхПорцийСнизуСверху * 2, ВсегоПорций);
	
	СписокНомеровПорций = Новый Массив;
	Для Счетчик = 1 По ВсегоПорций Цикл
		
		Если Счетчик >= НижнийПредел И Счетчик <= ВерхнийПредел Тогда
			Шрифт = ?(Счетчик = НомерПорции, Новый Шрифт(, 12, Истина), Неопределено);
			Содержимое = Новый ФорматированнаяСтрока(Строка(Счетчик) + " ", Шрифт,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = 1 Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В начало'"),,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = ВсегоПорций Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В конец'"),,,, Строка(Счетчик));
		Иначе
			Продолжить;
		КонецЕсли;
		
		СписокНомеровПорций.Добавить(Содержимое);
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(СписокНомеровПорций);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПервогоЭлементаПорции(РазмерПорции, НомерПорции)
	
	Возврат РазмерПорции * (НомерПорции - 1);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВводДанныхНоменклатуры(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанныхУпаковок = Объект.ДанныеПотребительскихУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Для Каждого КлючИЗначение Из РезультатЗакрытия Цикл
		Если СтрокаДанныхУпаковок[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			СтрокаДанныхУпаковок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			СтрокаДанныхУпаковок.ИзмененыДанныеНоменклатуры = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаДанныхУпаковок.ИзмененыДанныеНоменклатуры Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборкаСтатусаУпаковки(РезультатВыбора, Контекст) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Статус", РезультатВыбора.Значение);
	
	Оповестить = Новый ОписаниеОповещения("ОбработкаВыборкаСтатусаУпаковкиЗавершение", ЭтотОбъект, Контекст);
	
	СтрокаДанныхУпаковок = Элементы[Контекст.ИмяТаблицы].ДанныеСтроки(Контекст.ВыбраннаяСтрока);
	Если ТипЗнч(СтрокаДанныхУпаковок) = Тип("ДанныеФормыЭлементДерева") И СтрокаДанныхУпаковок.ПолучитьРодителя() <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Изменение статуса доступно только для верхнеуровневой упаковки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения,, НСтр("ru = 'Изменение статуса упаковки'"));
		Возврат;
	ИначеЕсли СтрокаДанныхУпаковок.Статус = ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВУпаковке") Тогда
		ТекстПредупреждения = НСтр("ru = 'Упаковка находится в статусе %1. Изменение текущего статуса обработкой - невозможно.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаДанныхУпаковок.Статус);
		ПоказатьПредупреждение(, ТекстПредупреждения,, НСтр("ru = 'Изменение статуса упаковки'"));
		Возврат;
	ИначеЕсли ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве().Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
		ТекстВопроса = НСтр("ru = 'Упаковка находится в статусе %1. Это значит, что операция документооборота с этой упаковкой не завершена.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'После изменения, есть вероятность, что вы не сможете завершить документооборот по документу, указанному в поле Документ резерва.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Вы уверены, что хотите изменить статус?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтрокаДанныхУпаковок.Статус);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение статуса упаковки'"));
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборкаСтатусаУпаковкиЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанныхУпаковок = Элементы[Контекст.ИмяТаблицы].ДанныеСтроки(Контекст.ВыбраннаяСтрока);
	Если ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве().Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
		СтрокаДанныхУпаковок.ДокументРезерва = Неопределено;
	КонецЕсли;
	СтрокаДанныхУпаковок.Статус = Контекст.Статус;
	СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках = Истина;
	
	Если ТипЗнч(СтрокаДанныхУпаковок) = Тип("ДанныеФормыЭлементДерева") Тогда
		ЗаполнитьДанныеТранспортныхУпаковокИзИерархииУпаковок();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВводДанныхЗТКОтложенно()
	
	ТекущаяСтрока = Элементы.ДанныеПотребительскихУпаковок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ДанныеПотребительскихУпаковок.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторЗТК) Тогда
		
		ОбработатьВводДанныхЗТКНаСервере(Неопределено, ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) Тогда
			ПараметрыФормы = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторЗТК);
			Оповестить = Новый ОписаниеОповещения("ОбработатьВводДанныхЗТК", ЭтотОбъект, ТекущаяСтрока);
			ОткрытьФорму("Справочник.ЗоныТаможенногоКонтроляМДЛП.Форма.ЗапросДанныхЗТК", ПараметрыФормы, ЭтотОбъект,,,, Оповестить);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВводДанныхЗТК(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	ОбработатьВводДанныхЗТКНаСервере(РезультатЗакрытия, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВводДанныхЗТКНаСервере(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	ТекущиеДанные = Объект.ДанныеПотребительскихУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущиеДанные.ЗонаТаможенногоКонтроля = Неопределено;
	ИнтеграцияМДЛП.ПолучитьЗонуТаможенногоКонтроляПоИдентификатору(ТекущиеДанные.ИдентификаторЗТК, ТекущиеДанные.ЗонаТаможенногоКонтроля);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор);
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСтатусМДЛП(Данные)
	
	ЕстьОшибки = Данные["error_code"] <> Неопределено;
	Если ЕстьОшибки Тогда
		Возврат СтрШаблон("(%1) %2", Данные["error_code"], Данные["error_desc"]);
	Иначе
		ЭтоПотребительскаяУпаковка = Данные["sgtin"] <> Неопределено;
		Если ЭтоПотребительскаяУпаковка Тогда
			Возврат Данные["status"];
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеКнопок(ИмяОсновнойКнопки = Неопределено)
	
	Если ИмяОсновнойКнопки = Неопределено Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Ложь;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ПолучитьУпаковкиМДЛП.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ЗаписатьИзмененияУпаковок.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Истина;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
