
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектМетаданныхСертификаты = Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования;
	Если Не ПравоДоступа("Чтение", ОбъектМетаданныхСертификаты)
		Или Не ПравоДоступа("Изменение", ОбъектМетаданныхСертификаты) Тогда
		Отказ = Истина;
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	Сертификаты = Новый Структура;
	
	ЭтоКомплекснаяДиагностика = Параметры.ВидыДиагностики.Количество() <> 1;
	
	УстановитьУсловноеОформление();
	
	Параметры.ПараметрыФормы.Свойство("Пояснение", Пояснение);
	Параметры.ПараметрыФормы.Свойство("ВозможенПовторДействия", ВозможенПовторДействия);
	
	Если Не ЗначениеЗаполнено(Пояснение) Тогда
		Пояснение = НСтр("ru = 'При выполнении операции'");
	КонецЕсли;
	
	Ошибки = Неопределено;
	Если Параметры.ПараметрыФормы.Свойство("Ошибки", Ошибки) Тогда
		Если Ошибки.Количество() = 1
			И ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(Ошибки[0],
				РаботаСФайламиБЭДКлиентСервер.ВидОшибкиРаботаСФайлами()) Тогда
			Элементы.ПояснениеПравая.Заголовок = НСтр("ru = 'работы с файлами'");
		Иначе 
			Элементы.ПояснениеПравая.Заголовок = СтрШаблон(НСтр("ru = 'с %1'"),
				ДиагностикаЭДОКлиентСервер.ПредставлениеОшибок(Ошибки));
		КонецЕсли;
		Если Не ЭтоКомплекснаяДиагностика И Ошибки.Количество()  > 0 Тогда
			УчетныеЗаписиМассив = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "УчетнаяЗапись");
			Если УчетныеЗаписиМассив.Количество() > 0 Тогда
				ЗаполнитьУчетныеЗаписи(УчетныеЗаписиМассив);
			КонецЕсли;
		КонецЕсли;
		Для каждого Ошибка Из Ошибки Цикл
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Ошибка);
			Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
				ОбщегоНазначения.СообщитьПользователю(Ошибка.КраткоеПредставлениеОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если УчетныеЗаписи.Количество() Тогда
		Элементы.ГруппаУчетныеЗаписи.Видимость = Истина;
		Пояснение = Пояснение + " " + НСтр("ru = 'по'");
	Иначе 
		Элементы.ГруппаУчетныеЗаписи.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПояснениеЛевая.Заголовок = Пояснение;
	
	Если СтрДлина(Элементы.ПояснениеЛевая.Заголовок) > 50 Тогда
		Элементы.ГруппаПояснение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.СброситьРазмерыИПоложениеОкна(ЭтаФорма);
	
	ПараметрыВыполненияДиагностики = ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияДиагностики, Параметры);
	ДлительнаяОперация = ДиагностикаЭДОВызовСервера.ВыполнитьДиагностику(ПараметрыВыполненияДиагностики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПрограммноеЗакрытиеФормы Тогда
		Отказ = Истина;
		ЭтоПрограммноеЗакрытиеФормы = Истина;
		ОтменитьВыполнениеДлительнойОперации();
		Закрыть(?(РезультатДиагностики = Неопределено, РезультатДиагностики, РезультатДиагностики.Результат));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ДиагностикаЭДОКлиент.ЭтоСобытиеПроверкаСертификата(ИмяСобытия) Тогда
		
		Если ДиагностикаЭДОКлиент.ВсеПроверкиСертификатаВыполненыУспешно(Параметр.РезультатПроверки) Тогда
			СтрокиССертификатом = ОшибкиСертификатов.НайтиСтроки(Новый Структура("Сертификат", Параметр.Сертификат));
			Если СтрокиССертификатом.Количество() > 0 Тогда
				ОшибкиСертификатов.Удалить(СтрокиССертификатом[0]);
			КонецЕсли;
			Если ОшибкиСертификатов.Количество() = 0 Тогда
				Элементы.ГруппаРезультатПроверкиСертификатов.Видимость = Ложь;
				ЕстьПроблемы = Ложь;
				Для каждого ГруппаВидаПроверки Из Элементы.ГруппаРезультатыКриптография.ПодчиненныеЭлементы Цикл
					Если ГруппаВидаПроверки.Видимость Тогда
						ЕстьПроблемы = Истина;
						Прервать; 
					КонецЕсли;
				КонецЦикла;
				Если Не ЕстьПроблемы Тогда
					Элементы.ГруппаУспехКриптография.Видимость = Истина;
					Элементы.КриптографияКомплекснаяДиагностикаКартинка.Картинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
					Элементы.ГруппаРезультатыКриптографияГоризонтальная.ЗаголовокСвернутогоОтображения = Элементы.ГруппаРезультатыКриптографияГоризонтальная.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОткрытьОтчетДляАдминистратора() 
	
	#Если Не МобильныйКлиент Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		ТекстыОтчетов = Новый Массив;
		Для каждого КлючИЗначение Из РезультатДиагностики.Результаты Цикл
			Отчет = КлючИЗначение.Значение.ОтчетДляАдминистратора;
			ТекстыОтчетов.Добавить(Отчет.Текст);
		КонецЦикла;
		
		ТекстовыйДокумент.УстановитьТекст(СтрСоединить(ТекстыОтчетов, Символы.ПС));
		ТекстовыйДокумент.Показать(?(ТекстыОтчетов.Количество() = 1, Отчет.Заголовок, НСтр("ru = 'Диагностика ЭДО'")));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкиСертификатаКриптографияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = "посмотреть"
		И ОшибкиСертификатов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДиагностикаЭДОКлиент.ОткрытьОшибкиСертификата(ЭтаФорма, ОшибкиСертификатов[0].Сертификат,
			ОшибкиСертификатов[0].РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеНепривязанныеСертификатыОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = "зарегистрируйте" Тогда
		ОткрытьПомощникРегистрацииСертификатов(Истина);
	ИначеЕсли НРег(НавигационнаяСсылкаФорматированнойСтроки) = "закажите" Тогда
		ПараметрыДобавления = ЭлектроннаяПодписьКлиент.ПараметрыДобавленияСертификата();
		ПараметрыДобавления.СоздатьЗаявление = Истина;
		ПараметрыДобавления.ИзЛичногоХранилища = Ложь;
		ЭлектроннаяПодписьКлиент.ДобавитьСертификат(, ПараметрыДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРезультатНаличиеСертификатовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = НРег("Закажите") Тогда
		ПараметрыДобавления = ЭлектроннаяПодписьКлиент.ПараметрыДобавленияСертификата();
		ПараметрыДобавления.СоздатьЗаявление = Истина;
		ПараметрыДобавления.ИзЛичногоХранилища = Ложь;
		ЭлектроннаяПодписьКлиент.ДобавитьСертификат(, ПараметрыДобавления);
	ИначеЕсли НРег(НавигационнаяСсылкаФорматированнойСтроки) = НРег("Добавьте") Тогда
		ОткрытьПомощникРегистрацииСертификатов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьКорневойСертификатГУЦНажатие(Элемент)
	
	ДиагностикаЭДОСлужебныйКлиент.ПосмотретьСертификат(ЕдинственныйСертификатГУЦ());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКорневойСертификатГУЦНажатие(Элемент)
	
	ДиагностикаЭДОСлужебныйКлиент.УстановитьКорневойСертификатГУЦ(ЕдинственныйСертификатГУЦ(), ЕдинственныйОтпечатокСертификатаГУЦ());
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКорневойСертификатГУЦНажатие(Элемент)
	
	ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, ЕдинственныйСертификатГУЦ(), ЕдинственноеИмяФайлаДляСохраненияСертификатаГУЦ());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДляАдминистратораНажатие(Элемент)
	
	ОткрытьОтчетДляАдминистратора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорректностьДанныхИнтернетПоддержкиНижняяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорректностьДанныхИнтернетПоддержкиНетУчетныхЗаписейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДлинаПутиКФайлуНижняяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПеременныеСреды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФайловаяСистемаКлиент.ВыбратьКаталог(Новый ОписаниеОповещения("ПослеВыбораКаталога", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьКомплекснаяДиагностикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтмеченныеУчетныеЗаписи = ОтмеченныеУчетныеЗаписи(УчетныеЗаписи);
	Если ОтмеченныеУчетныеЗаписи.Количество() Тогда
		СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(ОтмеченныеУчетныеЗаписи[0].Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчетныеЗаписи

&НаКлиенте
Процедура УчетныеЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(Элемент.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиСертификатов

&НаКлиенте
Процедура ОшибкиСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДиагностикаЭДОКлиент.ОшибкиСертификатовВыбор(ЭтаФорма, Элемент, Поле, Элементы.ГруппаОшибкиСертификатовКриптография);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорневыеСертификатыГУЦ

&НаКлиенте
Процедура КорневыеСертификатыГУЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.КорневыеСертификатыГУЦУстановить Тогда
		ДиагностикаЭДОСлужебныйКлиент.УстановитьСертификат(Элемент.ТекущиеДанные.АдресВоВременномХранилище);
	ИначеЕсли Поле = Элементы.КорневыеСертификатыГУЦПосмотреть Тогда
		ДиагностикаЭДОСлужебныйКлиент.ПосмотретьСертификат(Элемент.ТекущиеДанные.АдресВоВременномХранилище);
	ИначеЕсли Поле = Элементы.КорневыеСертификатыГУЦСохранить Тогда
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, Элемент.ТекущиеДанные.АдресВоВременномХранилище,
			Элемент.ТекущиеДанные.ИмяФайлаДляСохранения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиТестаАутентификации

&НаКлиенте
Процедура ОшибкиТестаАутентификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОшибкиТестаАутентификацииУчетнаяЗапись Тогда
		СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(Элемент.ТекущиеДанные.Идентификатор);
	ИначеЕсли Поле = Элементы.ОшибкиТестаАутентификацииСертификат Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	ИначеЕсли Поле = Элементы.ОшибкиТестаАутентификацииОшибка Тогда
		ПоказатьПредупреждение(, Элемент.ТекущиеДанные.Ошибка);
	КонецЕсли;
	Элементы.ГруппаОшибкиТестаАутентификации.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УчетныеЗаписиУстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиСнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьДиагностику(Команда)
	
	ПовторитьДиагностикуВыполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьДействие(Команда)
	
	ЭтоПрограммноеЗакрытиеФормы = Истина;
	Закрыть(ДиагностикаЭДОКлиент.ДействиеПовторитьДействие());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСУспешнымРезультатом(Команда)
	
	ЭтоПрограммноеЗакрытиеФормы = Истина;
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьCryptoPRO(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеУстановкиПрограммыКриптографии", ЭтотОбъект);
	КриптографияБЭДКлиент.УстановитьCryptoPRO(ОповещениеОЗавершении, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьVipNet(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеУстановкиПрограммыКриптографии", ЭтотОбъект);
	КриптографияБЭДКлиент.УстановитьVipNet(ОповещениеОЗавершении, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПутьККаталогуВременныхФайлов(Команда)
	
	Если РаботаСФайламиБЭДКлиент.УстановитьПутьККаталогуВременныхФайлов(ПутьККаталогуВременныхФайлов) Тогда
		Элементы.ГруппаИзменениеПутиКоВременнымФайлам.Скрыть();
		ТекущийЭлемент = Элементы.ГруппаИзменениеПутиКоВременнымФайлам;
		ПоказатьПредупреждение(, НСтр("ru = 'Выполнено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборПоУчетнымЗаписям(Команда)
	
	Если КоличествоОтмеченныхУчетныхЗаписей(УчетныеЗаписи) = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не отмечено ни одной учетной записи для проведения диагностики'"));
		Возврат;
	КонецЕсли;
	
	ПовторитьДиагностикуВыполнение();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление() 
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Есть ошибки'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиСертификатов.ПроверкиВыполнялись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОшибкиСертификатовОшибки");
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ошибки на сервере'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиСертификатов.ПроверкиВыполнялись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОшибкиСертификатовОшибкиНаСервере");
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Проверки не выполнялись'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиСертификатов.ПроверкиВыполнялись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОшибкиСертификатовОшибки");
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Установить'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КорневыеСертификатыГУЦУстановить");
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Посмотреть сертификат'"));
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КорневыеСертификатыГУЦПосмотреть");
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сохранить сертификат'"));
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КорневыеСертификатыГУЦСохранить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиПрограммыКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		Элементы.УстановитьVipNet.Доступность = Ложь;
		Элементы.УстановитьCryptoPRO.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕдинственныйСертификатГУЦ()
	
	Если КорневыеСертификатыГУЦ.Количество() Тогда
		Возврат КорневыеСертификатыГУЦ[0].АдресВоВременномХранилище;
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить корневой сертификат ГУЦ'"));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЕдинственныйОтпечатокСертификатаГУЦ()
	
	Если КорневыеСертификатыГУЦ.Количество() Тогда
		Возврат КорневыеСертификатыГУЦ[0].Отпечаток;
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить корневой сертификат ГУЦ'"));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЕдинственноеИмяФайлаДляСохраненияСертификатаГУЦ()
	
	Если КорневыеСертификатыГУЦ.Количество() Тогда
		Возврат КорневыеСертификатыГУЦ[0].ИмяФайлаДляСохранения;
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить корневой сертификат ГУЦ'"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПомощникРегистрацииСертификатов(РегистрацияНепривязанных = Истина) 
	
	ПараметрыРегистрации = СинхронизацияЭДОКлиент.НовыеПараметрыРегистрацииСертификатов();
	Если РегистрацияНепривязанных Тогда
		ПараметрыРегистрации.Операция =
			СинхронизацияЭДОКлиент.ОперацииПомощникаРегистрацииСертификатов().РегистрацияНепривязанныхСертификатов;
		ПараметрыРегистрации.Сертификаты =
			РезультатДиагностики.Результаты.Криптография.Результаты.НепривязанныеСертификаты.Сертификаты;
	Иначе 
		ПараметрыРегистрации.УчетныеЗаписи = РезультатДиагностики.Результаты.Криптография.УчетныеЗаписиБезСертификатов;
		Если ПараметрыРегистрации.УчетныеЗаписи.Количество() = 0 Тогда
			ПараметрыРегистрации.УчетныеЗаписи = РезультатДиагностики.ДоступныеУчетныеЗаписи;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПараметрыРегистрации.УчетныеЗаписи) Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеВопросаОСозданииУчетнойЗаписи", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Отсутствуют доступные учетные записи, создать учетную запись?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СинхронизацияЭДОКлиент.ОткрытьПомощникРегистрацииСертификатов(ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	
	ПараметрыВыполненияДиагностикиКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыполненияДиагностики);
	ПараметрыВыполненияДиагностикиКопия.ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияДиагностики",
		ЭтотОбъект);
	ПараметрыВыполненияДиагностикиКопия.ДлительнаяОперация = ДлительнаяОперация;
	ДиагностикаЭДОКлиент.ПродолжитьВыполнениеДиагностики(ПараметрыВыполненияДиагностикиКопия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДиагностики(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатДиагностики = Результат;
	УправлениеФормой(Результат);
	
	Если РезультатДиагностики.Результат И РезультатДиагностики.Результаты.Количество() = 1 Тогда
		ВидДиагностики = "";
		Для каждого КлючИЗначение Из РезультатДиагностики.Результаты Цикл
			ВидДиагностики = КлючИЗначение.Ключ;
		КонецЦикла;
		СоответствиеВидовДиагностикиВидамОшибок = ДиагностикаЭДОКлиент.СоответствиеВидовДиагностикиВидамОшибок();
		Если СоответствиеВидовДиагностикиВидамОшибок[ВидДиагностики] <> Неопределено Тогда
			ВидыОшибок = Новый Массив;
			ВидыОшибок.Добавить(СоответствиеВидовДиагностикиВидамОшибок[ВидДиагностики]);
			ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ВидыОшибок);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетныеЗаписи(ИдентификаторыЭДО) 
	
	Запросы = Новый Массив;
	
	Отбор = СинхронизацияЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&ИдентификаторыЭДО";
	ЗапросУчетныхЗаписей = СинхронизацияЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК НаименованиеУчетнойЗаписи
	|ИЗ
	|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = УчетныеЗаписи.Добавить();
		НоваяСтрока.Идентификатор = ВыборкаДетальныеЗаписи.ИдентификаторЭДО;
		НоваяСтрока.Наименование = ВыборкаДетальныеЗаписи.НаименованиеУчетнойЗаписи;
		НоваяСтрока.Пометка = Истина;
		УчетнаяЗаписьКомплекснаяДиагностика = ВыборкаДетальныеЗаписи.НаименованиеУчетнойЗаписи;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(РезультатДиагностики)
	
	Ширина = 80;
	Если УчетныеЗаписи.Количество() = 0 Тогда
		ЗаполнитьУчетныеЗаписи(РезультатДиагностики.ДоступныеУчетныеЗаписи);
	КонецЕсли;
	
	ОтмеченныеУчетныеЗаписи = ОтмеченныеУчетныеЗаписи(УчетныеЗаписи);
	КоличествоОтмеченныхУчетныхЗаписей = ОтмеченныеУчетныеЗаписи.Количество();
	
	Если КоличествоОтмеченныхУчетныхЗаписей = 1 Тогда
		Элементы.ГруппаПояснениеКомплекснаяДиагностикаОднаУчетнаяЗапись.Видимость = Истина;
		Элементы.ГруппаПояснениеКомплекснаяДиагностикаНесколькоУчетныхЗаписей.Видимость = Ложь;
		Элементы.ГруппаУчетныеЗаписиКомплекснаяДиагностика.Заголовок = НСтр("ru = '1 учетной записи'");
		УчетнаяЗаписьКомплекснаяДиагностика = ОтмеченныеУчетныеЗаписи[0].Наименование;
	Иначе 
		Элементы.ГруппаПояснениеКомплекснаяДиагностикаОднаУчетнаяЗапись.Видимость = Ложь;
		Элементы.ГруппаПояснениеКомплекснаяДиагностикаНесколькоУчетныхЗаписей.Видимость = Истина;
		Элементы.ГруппаУчетныеЗаписиКомплекснаяДиагностика.Заголовок = СтрШаблон(НСтр("ru = '%1 учетным записям'"), КоличествоОтмеченныхУчетныхЗаписей);
	КонецЕсли;
	
	Элементы.ВыполнениеДиагностики.Видимость = Ложь;
	Элементы.МастерДиагностики.Видимость = Истина;
	Элементы.ВыполнитьДиагностику.Видимость = Не РезультатДиагностики.Результат;
	
	Если РезультатДиагностики.Результат Тогда
		Если ВозможенПовторДействия Тогда
			Элементы.ПовторитьДействие.Видимость = Истина;
			Элементы.ПовторитьДействие.КнопкаПоУмолчанию = Истина;
		Иначе 
			Элементы.ПовторитьДействие.Видимость = Ложь;
			Элементы.Закрыть.Видимость = Истина;
			Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
			Элементы.Отмена.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ВыполнитьДиагностику.КнопкаПоУмолчанию = Истина;
		Элементы.Закрыть.Видимость = Ложь;
		Элементы.Отмена.Видимость = Истина;
	КонецЕсли;
	
	Если Не ЭтоКомплекснаяДиагностика Тогда
		Элементы.ГруппаШапка.Видимость = Ложь;
		Элементы.ДекорацияПустаяШапка.Видимость = Истина;
	КонецЕсли;
	Элементы.ГруппаПояснение.Видимость = Не ЭтоКомплекснаяДиагностика;
	Элементы.ГруппаПояснениеКомплекснаяДиагностика.Видимость = ЭтоКомплекснаяДиагностика
		И КоличествоОтмеченныхУчетныхЗаписей > 0;
		
	Для каждого КлючИЗначение Из РезультатДиагностики.Результаты Цикл
		
		ВидДиагностики = КлючИЗначение.Ключ;
		
		ГруппаВидаДиагностики = Элементы.Найти("Диагностика" + ВидДиагностики);
		Если ГруппаВидаДиагностики = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Заголовок = ГруппаВидаДиагностики.Заголовок;
		ГруппаВидаДиагностики.Видимость = Истина;
		
		Отступ = Элементы.Найти("ДекорацияОтступ" + ВидДиагностики);
		Если Отступ <> Неопределено Тогда
			Отступ.Видимость = Истина;
		КонецЕсли;
		
		РезультатВидаДиагностики = КлючИЗначение.Значение.Результат;
		РезультатыВидаДиагностики = КлючИЗначение.Значение.Результаты;
		
		Если ЭтоКомплекснаяДиагностика Тогда
			СвертываемаяГруппа = Элементы.Найти(СтрШаблон("ГруппаРезультаты%1Горизонтальная", ВидДиагностики));
			Если СвертываемаяГруппа <> Неопределено Тогда
				СвертываемаяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
				СвертываемаяГруппа.Поведение =  ПоведениеОбычнойГруппы.Свертываемая;
				СвертываемаяГруппа.ОтображатьЗаголовок = Истина;
				СвертываемаяГруппа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
				Если РезультатВидаДиагностики Тогда
					СвертываемаяГруппа.ЗаголовокСвернутогоОтображения = СвертываемаяГруппа.Заголовок;
					СвертываемаяГруппа.Скрыть();
				Иначе 
					КоличествоОшибок = 0;
					Для каждого КлючИЗначениеВидДиагностики Из РезультатыВидаДиагностики Цикл
						Если КлючИЗначениеВидДиагностики.Значение.Результат = Ложь Тогда
							КоличествоОшибок = КоличествоОшибок + 1;
						КонецЕсли;
					КонецЦикла;
					СвертываемаяГруппа.ЗаголовокСвернутогоОтображения = СтрШаблон("%1 (%2)",
						СвертываемаяГруппа.Заголовок, КоличествоОшибок);
				КонецЕсли;
			КонецЕсли;
			
			КартинкаОтступ = Элементы.Найти(СтрШаблон("ДекорацияОтступ%1", ВидДиагностики));
			Если КартинкаОтступ <> Неопределено Тогда
				КартинкаОтступ.Видимость = Ложь;
			КонецЕсли;
			
			КартинкаВидаДиагностики = Элементы.Найти(СтрШаблон("%1КомплекснаяДиагностикаКартинка", ВидДиагностики));
			Если КартинкаВидаДиагностики <> Неопределено Тогда
				КартинкаВидаДиагностики.Видимость = Истина;
				КартинкаВидаДиагностики.Картинка = ?(РезультатВидаДиагностики,
					БиблиотекаКартинок.ЗеленыйШарБЭД,
					БиблиотекаКартинок.КрасныйШарБЭД);
			КонецЕсли;
			
			КартинкаУспех = Элементы.Найти(СтрШаблон("ЗаголовокУспехКартинка%1", ВидДиагностики));
			Если КартинкаУспех <> Неопределено Тогда
				КартинкаУспех.Картинка = БиблиотекаКартинок.ПримечаниеЖурналаРегистрации;
			КонецЕсли;
		КонецЕсли;
		
		ГруппаРезультатыВидаДиагностики = Элементы.Найти(СтрШаблон("ГруппаРезультаты%1", ВидДиагностики));
		Если ГруппаРезультатыВидаДиагностики <> Неопределено Тогда
			Для каждого Элемент Из ГруппаРезультатыВидаДиагностики.ПодчиненныеЭлементы Цикл
				Элемент.Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		Если РезультатВидаДиагностики Тогда
			Элементы["ГруппаУспех" + ВидДиагностики].Видимость = Истина;
		Иначе 
			Элементы["ГруппаУспех" + ВидДиагностики].Видимость = Ложь;
			Если Не ЭтоКомплекснаяДиагностика Тогда
				Элементы.ГруппаШапка.Видимость = Истина;
				Элементы.ДекорацияПустаяШапка.Видимость = Ложь;
			КонецЕсли;
			Для каждого РезультатВидаДиагностики Из РезультатыВидаДиагностики Цикл
				ВидПроверки = РезультатВидаДиагностики.Ключ;
				Если ЭтоКомплекснаяДиагностика Тогда
					КартинкаВидаПроверки = Элементы.Найти(СтрШаблон("Заголовок%1Картинка", ВидПроверки));
					Если КартинкаВидаПроверки <> Неопределено Тогда
						КартинкаВидаПроверки.Картинка = БиблиотекаКартинок.ПримечаниеЖурналаРегистрации;
					КонецЕсли;
				КонецЕсли;
				ИмяГруппыВидПроверки = "ГруппаРезультат" + ВидПроверки;
				
				ВариантСостояния = "";
				Если РезультатВидаДиагностики.Значение.Свойство("ВариантСостояния", ВариантСостояния)
					И ЗначениеЗаполнено(ВариантСостояния) Тогда
					ИмяГруппыВидПроверки = ИмяГруппыВидПроверки + ВариантСостояния;
				КонецЕсли;
				
				ГруппаВидПроверки = Элементы.Найти(ИмяГруппыВидПроверки);
				
				Если ТипЗнч(РезультатВидаДиагностики.Значение) = Тип("Структура") Тогда
					Если РезультатВидаДиагностики.Значение.Свойство("Результат") Тогда
						РезультатПроверки = РезультатВидаДиагностики.Значение.Результат;
					Иначе 
						РезультатПроверки = РезультатВидаДиагностики.Значение;
					КонецЕсли;
				Иначе 
					РезультатПроверки = РезультатВидаДиагностики.Значение;
				КонецЕсли;
				
				Если РезультатПроверки <> Ложь Или ГруппаВидПроверки = Неопределено Тогда
					Если ГруппаВидПроверки <> Неопределено Тогда
						ГруппаВидПроверки.Видимость = Ложь;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ГруппаВидПроверки.Видимость = Истина;
				
				// Криптография начало
				Если ВидДиагностики = ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография() Тогда
					УправлениеФормойКриптографияПриВыводеРезультатаПроверки(КлючИЗначение.Значение, ВидПроверки);
				КонецЕсли;
				// Криптография конец
			
				// Интернет-соединение начало
				Если ВидДиагностики = ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетСоединение() Тогда
					УправлениеФормойИнтернетСоединение(ВидПроверки, РезультатВидаДиагностики);
				КонецЕсли;
				// Интернет-соединение конец
			КонецЦикла;
			
			// Криптография начало
			Если ВидДиагностики = ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография() Тогда
				УправлениеФормойКриптография(РезультатыВидаДиагностики);
			КонецЕсли;
			// Криптография конец
			
			// Интернет-поддержка начало
			Если ВидДиагностики = ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетПоддержка() Тогда
				УправлениеФормойИнтернетПоддержка(ВидПроверки, РезультатыВидаДиагностики);
			КонецЕсли;
			// Интернет-поддержка конец
			
			// Тест аутентификации начало
			Если ВидДиагностики = ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации() Тогда
				УправлениеФормойТестАутентификации(РезультатыВидаДиагностики);
			КонецЕсли;
			// Тест аутентификации конец
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Работа с файлами начало
	УправлениеФормойРаботаСФайлами(РезультатДиагностики);
	// Работа с файлами конец
	
	Если ЭтоКомплекснаяДиагностика Тогда
		Заголовок = НСтр("ru = 'Диагностика электронного документооборота'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойКриптография(Знач РезультатыВидаДиагностики)
	
	КорневыеСертификатыГУЦ.Очистить();
	Для каждого ОписаниеСертификата Из РезультатыВидаДиагностики.НаличиеКорневогоСертификатаГУЦКлиент.Сертификаты Цикл
		Если ОписаниеСертификата.Результат = Ложь Тогда
			СтрокаТЗ = КорневыеСертификатыГУЦ.Добавить();
			СтрокаТЗ.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ОписаниеСертификата.Сертификат,
				УникальныйИдентификатор);
			СтрокаТЗ.Отпечаток = ОписаниеСертификата.Отпечаток;
			СертификатКриптографии = Новый СертификатКриптографии(ОписаниеСертификата.Сертификат);
			ПредставлениеСертификата = ЭлектроннаяПодпись.ПредставлениеСертификата(СертификатКриптографии);
			СтрокаТЗ.Представление = ПредставлениеСертификата;
			ИмяФайлаДляСохранения = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(СертификатКриптографии).ОбщееИмя;
			Если Не ЗначениеЗаполнено(ИмяФайлаДляСохранения) Тогда
				ИмяФайлаДляСохранения = НСтр("ru = 'Сертификат ГУЦ'");
			КонецЕсли;
			ИмяФайлаДляСохранения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляСохранения, "_");
			ИмяФайлаДляСохранения = ИмяФайлаДляСохранения + ".cer";
			СтрокаТЗ.ИмяФайлаДляСохранения = ИмяФайлаДляСохранения;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭтоWindowsКлиент = ОбщегоНазначения.ЭтоWindowsКлиент();
	Если КорневыеСертификатыГУЦ.Количество() > 1 Тогда
		Элементы.ГруппаНаличиеКорневыхСертификатовГУЦ.Видимость = Истина;
		Элементы.ГруппаНаличиеКорневогоСертификатаГУЦ.Видимость = Ложь;
		
		Элементы.КорневыеСертификатыГУЦСохранить.Видимость = Не ЭтоWindowsКлиент;
		Элементы.КорневыеСертификатыГУЦУстановить.Видимость = ЭтоWindowsКлиент;
		Элементы.КорневыеСертификатыГУЦПосмотреть.Видимость = ЭтоWindowsКлиент;
	Иначе
		Элементы.ГруппаНаличиеКорневыхСертификатовГУЦ.Видимость = Ложь;
		Элементы.ГруппаНаличиеКорневогоСертификатаГУЦ.Видимость = Истина;
		
		Элементы.СохранитьКорневойСертификатГУЦ.Видимость = Не ЭтоWindowsКлиент;
		Элементы.УстановитьКорневойСертификатГУЦ.Видимость = ЭтоWindowsКлиент;
		Элементы.ПосмотретьКорневойСертификатГУЦ.Видимость = ЭтоWindowsКлиент;
	КонецЕсли;
	
	ЕстьПроверкиКоторыеНеВыполнялись = Ложь;
	ЕстьОшибкиПроверок = Ложь;
	ЕстьОшибкиКриптографииКромеПроверокСертификатов = Ложь;
	Для каждого РезультатВидаДиагностики Из РезультатыВидаДиагностики Цикл
		Если РезультатВидаДиагностики.Ключ <> "ПроверкиСертификатов"
			И РезультатВидаДиагностики.Значение.Результат = Ложь Тогда
			ЕстьОшибкиКриптографииКромеПроверокСертификатов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТолькоОшибкаНеполученныхСертификатов = Истина;
	Для каждого РезультатВидаДиагностики Из РезультатыВидаДиагностики Цикл
		Если РезультатВидаДиагностики.Ключ <> "НеполученныеСертификаты"
			И РезультатВидаДиагностики.Значение.Результат = Ложь Тогда
			ТолькоОшибкаНеполученныхСертификатов = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из РезультатыВидаДиагностики.ПроверкиСертификатов.Сертификаты Цикл
		Если КлючИЗначение.Значение.ОбщийРезультатПроверок = Неопределено Тогда
			ПроверкиВыполнялись = Ложь;
			ЕстьПроверкиКоторыеНеВыполнялись = Истина;
		Иначе
			ПроверкиВыполнялись = Истина;
			Для каждого ПроверкиСертификата Из КлючИЗначение.Значение.ОбщийРезультатПроверок Цикл
				Если ПроверкиСертификата.Значение = Ложь Тогда
					ЕстьОшибкиПроверок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		НоваяСтрока = ОшибкиСертификатов.Добавить();
		НоваяСтрока.Сертификат = КлючИЗначение.Ключ;
		НоваяСтрока.Ошибки = КлючИЗначение.Значение;
		НоваяСтрока.ПроверкиВыполнялись = ПроверкиВыполнялись;
		НоваяСтрока.РезультатПроверки = КлючИЗначение.Значение.Результат;
	КонецЦикла;
	
	Если ОшибкиСертификатов.Количество() = 1 Тогда
		Элементы.ГруппаЗаголовокОшибкиСертификата.Видимость = Истина;
		Элементы.ГруппаЗаголовокОшибкиСертификатов.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаЗаголовокОшибкиСертификата.Видимость = Ложь;
		Элементы.ГруппаЗаголовокОшибкиСертификатов.Видимость = Истина;
	КонецЕсли;
	
	Если Не ДиагностикаЭДОСлужебный.ПараметрыКриптографии().ЕстьКриптографияНаКлиенте Тогда
		Элементы.ГруппаНаличиеКорневогоСертификатаГУЦ.Видимость = Ложь;
	КонецЕсли;
	
	Если ЕстьПроверкиКоторыеНеВыполнялись И Не ЕстьОшибкиПроверок
		И Не ЕстьОшибкиКриптографииКромеПроверокСертификатов Тогда
		Элементы.КриптографияКомплекснаяДиагностикаКартинка.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		Элементы.ЗаголовокПроверкиСертификатовТекст.Заголовок = НСтр("ru = 'Выполнены не все проверки'");
	Иначе 
		Элементы.ЗаголовокПроверкиСертификатовТекст.Заголовок = НСтр("ru = 'Имеются проблемы с сертификатами'");
	КонецЕсли;
	
	Если ТолькоОшибкаНеполученныхСертификатов Тогда
		Элементы.КриптографияКомплекснаяДиагностикаКартинка.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойИнтернетПоддержка(ВидПроверки, РезультатыВидаДиагностики) 
	
	Если ВидПроверки = "КорректностьДанныхИнтернетПоддержки" Тогда
		Если РезультатДиагностики.ДоступныеУчетныеЗаписи.Количество() Тогда
			Элементы.ПодсказкаКорректностьДанныхИнтернетПоддержкиГоризонтальнаяНетУчетныхЗаписей.Видимость = Ложь;
			Элементы.ПодсказкаКорректностьДанныхИнтернетПоддержкиГоризонтальная.Видимость = Истина;
		Иначе 
			Элементы.ПодсказкаКорректностьДанныхИнтернетПоддержкиГоризонтальнаяНетУчетныхЗаписей.Видимость = Истина;
			Элементы.ПодсказкаКорректностьДанныхИнтернетПоддержкиГоризонтальная.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойКриптографияПриВыводеРезультатаПроверки(РезультатДиагностикиКриптографии, ВидПроверки) 
	
	Если ВидПроверки = "НаличиеПрограммыКриптографииКлиент"
		И РезультатДиагностикиКриптографии.ИспользоватьЭлектроннуюПодписьВМоделиСервиса
		И РезультатДиагностикиКриптографии.ЕстьНеоблачныеСертификаты Тогда
		Элементы.ПояснениеУстановкаКриптопровайдераЗаголовок.Заголовок =
			НСтр("ru = 'Доступен облачный сервис криптографии, но для некоторых сертификатов требуется установка программы для защиты информации.'");
		Если ЭтоКомплекснаяДиагностика Тогда
			Элементы.КриптографияКомплекснаяДиагностикаКартинка.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		Иначе 
			Элементы.ЗаголовокНаличиеПрограммыКриптографииКлиентКартинка.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойИнтернетСоединение(ВидПроверки, РезультатВидаДиагностики)
	
	ЗаголовкиПроверок = Новый Структура;
	
	ЗаголовокПроверки = Новый Структура;
	ЗаголовокПроверки.Вставить("ЕдинственноеЧисло", НСтр("ru = 'Сервис %1 временно недоступен'"));
	ЗаголовокПроверки.Вставить("МножественноеЧисло", НСтр("ru = 'Сервисы временно недоступны'"));
	ЗаголовкиПроверок.Вставить("АктивностьСервисов", ЗаголовокПроверки);
	
	ЗаголовокПроверки = Новый Структура;
	ЗаголовокПроверки.Вставить("ЕдинственноеЧисло", НСтр("ru = 'Нет доступа к сервису %1'"));
	ЗаголовокПроверки.Вставить("МножественноеЧисло", НСтр("ru = 'Нет доступа к сервисам'"));
	ЗаголовкиПроверок.Вставить("ДоступностьСервисов", ЗаголовокПроверки);
	
	Сервисы = Неопределено;
	ДоступнаУстановкаСертификатов = ДиагностикаЭДОСлужебный.ДоступнаУстановкаСертификатов();
	Если Не ДоступнаУстановкаСертификатов Тогда
		Элементы.РезультатНаличиеКорневыхСертификатовПодсказка.Заголовок = НСтр("ru = 'Обратитесь к администратору'");
	КонецЕсли;
	Если РезультатВидаДиагностики.Значение.Свойство("Сервисы", Сервисы) Тогда
		ВыводитьСервисВЗаголовкеГруппы = ВидПроверки <> "НаличиеКорневыхСертификатов";
		КоличествоОшибок = 0;
		ИндексНедоступногоСервиса = 0;
		Для каждого Сервис Из Сервисы Цикл
			Если Не Сервис.Результат Тогда
				КоличествоОшибок  = КоличествоОшибок + 1;
				ИндексНедоступногоСервиса = Сервисы.Найти(Сервис); 
			КонецЕсли;
		КонецЦикла;
		ЭлементЗаголовокВидПроверки = Элементы.Найти("Заголовок" + ВидПроверки + "Текст");
		ГруппаДляДобавленияСервисов = Элементы["Группа" + ВидПроверки + "Сервисы"];
		Пока ГруппаДляДобавленияСервисов.ПодчиненныеЭлементы.Количество() > 0 Цикл
			Элементы.Удалить(ГруппаДляДобавленияСервисов.ПодчиненныеЭлементы[0]);
		КонецЦикла;
		Если ВыводитьСервисВЗаголовкеГруппы И КоличествоОшибок = 1 Тогда
			ПолныйАдресСервиса = Сервисы[ИндексНедоступногоСервиса].Адрес;
			ЭлементЗаголовокВидПроверки.Заголовок = СтрШаблон(ЗаголовкиПроверок[ВидПроверки].ЕдинственноеЧисло,
				ДиагностикаЭДОСлужебный.ПредставлениеСервисаЭДО(ПолныйАдресСервиса));
		Иначе 
			Если ВыводитьСервисВЗаголовкеГруппы Тогда
				ЭлементЗаголовокВидПроверки.Заголовок = ЗаголовкиПроверок[ВидПроверки].МножественноеЧисло;
			КонецЕсли;
			Для каждого Сервис Из Сервисы Цикл
				Если Не Сервис.Результат Тогда
					ПостфиксЭлементаФормы = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
					ГруппаСервис = Элементы.Добавить("ГруппаСервисы" + ПостфиксЭлементаФормы, Тип("ГруппаФормы"),
						ГруппаДляДобавленияСервисов);
					ГруппаСервис.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаСервис.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					ГруппаСервис.ОтображатьЗаголовок = Ложь;
					
					ДекорацияКартинка = Элементы.Добавить("ДекорацияКартинкаСервис" + ПостфиксЭлементаФормы,
						Тип("ДекорацияФормы"), ГруппаСервис);
					ДекорацияКартинка.Вид = ВидДекорацииФормы.Картинка;
					ДекорацияКартинка.Картинка = БиблиотекаКартинок.ПримечаниеЖурналаРегистрации;
					ДекорацияКартинка.Ширина = 3;
					
					ДекорацияТекст = Элементы.Добавить("ДекорацияТекстСервис" + ПостфиксЭлементаФормы,
						Тип("ДекорацияФормы"), ГруппаСервис);
					ДекорацияТекст.Вид = ВидДекорацииФормы.Надпись;
					ДекорацияТекст.Заголовок = Сервис.Адрес;
					Если ВидПроверки = "НаличиеКорневыхСертификатов" И ДоступнаУстановкаСертификатов
						И Сервис.Сертификаты.Количество() Тогда
						ДекорацияТекст = Элементы.Добавить("УстановитьСертификат" + ПостфиксЭлементаФормы,
							Тип("ДекорацияФормы"), ГруппаСервис);
						ДекорацияТекст.Вид = ВидДекорацииФормы.Надпись;
						ДекорацияТекст.Заголовок = НСтр("ru = 'Установить'");
						ДекорацияТекст.Гиперссылка = Истина;
						ДекорацияТекст.Шрифт = ШрифтыСтиля.ЖирныйШрифтБЭД;
						ДекорацияТекст.УстановитьДействие("Нажатие", "Подключаемый_УстановитьСертификатНажатие");
						
						ДекорацияТекст = Элементы.Добавить("ПосмотретьСертификат" + ПостфиксЭлементаФормы,
							Тип("ДекорацияФормы"), ГруппаСервис);
						ДекорацияТекст.Вид = ВидДекорацииФормы.Надпись;
						ДекорацияТекст.Заголовок = НСтр("ru = 'Посмотреть сертификат'");
						ДекорацияТекст.Гиперссылка = Истина;
						ДекорацияТекст.УстановитьДействие("Нажатие", "Подключаемый_ПосмотретьСертификатНажатие");
						
						Для каждого ДанныеСертификата Из Сервис.Сертификаты Цикл
							АдресСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата.Сертификат,
								УникальныйИдентификатор);
							Прервать;
						КонецЦикла;
						Сертификаты.Вставить(ПостфиксЭлементаФормы, АдресСертификата);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойРаботаСФайлами(РезультатДиагностики)
	
	Если РезультатДиагностики.Результаты.Количество() = 1
		И РезультатДиагностики.Результаты.Свойство(ДиагностикаЭДОКлиентСервер.ВидДиагностикиРаботаСФайлами()) Тогда
		
		Если Не ЭтоКомплекснаяДиагностика Тогда
			Элементы.ВыполнитьДиагностику.Видимость = Ложь;
		КонецЕсли;
		Если Не ОбщегоНазначения.ЭтоWindowsКлиент() Тогда
			Элементы.ДекорацияДлинаПутиКФайлуНижняя.Видимость = Ложь;
			Элементы.ГруппаВерхняяСтрокаДлинаПутиКФайлу.Видимость = Ложь;
			Элементы.ДекорацияДлинаПутиКФайлуНижняяНеWindows.Видимость = Истина;
		ИначеЕсли ОбщегоНазначения.ЭтоВебКлиент() Тогда 
			Элементы.ДекорацияДлинаПутиКФайлуНижняя.Видимость = Ложь;
			Элементы.ГруппаВерхняяСтрокаДлинаПутиКФайлу.Видимость = Ложь;
			Элементы.ДекорацияДлинаПутиКФайлуНижняяВебКлиент.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойТестАутентификации(РезультатыВидаДиагностики) 
	
	Для каждого РезультатТестаАутентификации Из РезультатыВидаДиагностики.ТестАутентификации.УчетныеЗаписи Цикл
		НоваяСтрока = ОшибкиТестаАутентификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатТестаАутентификации);
	КонецЦикла;
	
	Элементы.ГруппаЗаголовокОшибкиТестаАутентификации.Видимость = Истина;
	
	КоличествоУчетныхЗаписейСНевыполненнымТестом = ОшибкиТестаАутентификации.НайтиСтроки(
		Новый Структура("ТестВыполнялся", Ложь)).Количество();
	Если КоличествоУчетныхЗаписейСНевыполненнымТестом > 0 Тогда
		Элементы.ТестАутентификацииКомплекснаяДиагностикаКартинка.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		Элементы.ЗаголовокТестАутентификацииТекст.Заголовок = НСтр("ru = 'Выполнены не все проверки'");
		Если КоличествоУчетныхЗаписейСНевыполненнымТестом = ОшибкиТестаАутентификации.Количество() Тогда
			Элементы.ГруппаЗаголовокОшибкиТестаАутентификации.Видимость = Ложь;
		КонецЕсли;
	Иначе 
		Элементы.ЗаголовокТестАутентификацииТекст.Заголовок = НСтр("ru = 'Ошибка при выполнении теста аутентификации'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СертификатыСервиса(ЭлементФормы) 
	
	ПостфиксИмени = Сред(ЭлементФормы.Имя, СтрНайти(ЭлементФормы.Имя, "_"));
	Возврат Сертификаты[ПостфиксИмени];
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьСертификатНажатие(Элемент) 
	
	ДиагностикаЭДОСлужебныйКлиент.УстановитьСертификат(СертификатыСервиса(Элемент));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПосмотретьСертификатНажатие(Элемент) 
	
	ДиагностикаЭДОСлужебныйКлиент.ПосмотретьСертификат(СертификатыСервиса(Элемент));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПеременныеСреды()
	
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	#Если Не ВебКлиент Тогда
		ПараметрыЗапуска.ВыполнитьСНаивысшимиПравами = Истина;
	#КонецЕсли
	ФайловаяСистемаКлиент.ЗапуститьПрограмму("rundll32.exe sysdm.cpl EditEnvironmentVariables", ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталога(ПутьККаталогу, ДополнительныеПараметры) Экспорт
	
	ПутьККаталогуВременныхФайлов = ПутьККаталогу;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьДиагностикуВыполнение() 
	
	КлючСохраненияПоложенияОкна = "" + Новый УникальныйИдентификатор;
	РезультатДиагностикиКриптографии = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография());
		
	ПараметрыВыполненияДиагностикиКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыполненияДиагностики);
	Если РезультатДиагностикиКриптографии <> Неопределено Тогда
		ПараметрыВыполненияДиагностикиКопия.СертификатыСУстановленнымиПаролями =
			РезультатДиагностикиКриптографии.СертификатыСУстановленнымиПаролями;
	КонецЕсли;
	
	Если ЭтоКомплекснаяДиагностика Тогда
		Если КоличествоОтмеченныхУчетныхЗаписей(УчетныеЗаписи) <> УчетныеЗаписи.Количество() Тогда
			МассивУчетныхЗаписей = Новый Массив;
			Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
				Если УчетнаяЗапись.Пометка Тогда
					МассивУчетныхЗаписей.Добавить(УчетнаяЗапись.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			ПараметрыВыполненияДиагностикиКопия.Отбор.Вставить("УчетнаяЗапись", МассивУчетныхЗаписей);
		КонецЕсли;
	КонецЕсли;
	
	ОшибкиСертификатов.Очистить();
	ОшибкиТестаАутентификации.Очистить();
	Элементы.МастерДиагностики.Видимость = Ложь;
	Элементы.ВыполнениеДиагностики.Видимость = Истина;
	
	ПараметрыВыполненияДиагностикиКопия.ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияДиагностики",
		ЭтотОбъект);
	ПараметрыВыполненияДиагностикиКопия.ВыполнятьПроверкиСертификатовВВебКлиенте = Истина;
	ДиагностикаЭДОКлиент.ВыполнитьДиагностику(ПараметрыВыполненияДиагностикиКопия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоОтмеченныхУчетныхЗаписей(УчетныеЗаписи)
	
	Возврат ОтмеченныеУчетныеЗаписи(УчетныеЗаписи).Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтмеченныеУчетныеЗаписи(УчетныеЗаписи)
	
	Возврат УчетныеЗаписи.НайтиСтроки(Новый Структура("Пометка", Истина));
	
КонецФункции 

&НаСервере
Процедура ОтменитьВыполнениеДлительнойОперации() 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(Значение) 
	
	Для каждого СтрокаТЗ Из УчетныеЗаписи Цикл
		СтрокаТЗ.Пометка = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСозданииУчетнойЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись1СЭДО();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
