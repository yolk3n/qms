#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция возвращает элемент таблицы доступных печатных форм объекта печати
//
Функция ДобавитьПечатнуюФорму(ПечатныеФормы) Экспорт
	
	МетаданныеМакета = МетаданныеМакета();
	МенеджерПечати = МетаданныеМакета.Родитель().ПолноеИмя();
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ТОРГ12", МенеджерПечати);
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета);
	ПечатнаяФорма.Представление = МетаданныеМакета.Представление();
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатнаяФорма;
	
КонецФункции

// Функция формирует печатную форму требование накладная ТОРГ-12
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета());
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	СтруктураТипов = ОбщегоНазначенияБольничнаяАптека.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	
	НомерТипаДокумента = 0;
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ПолучатьЦены");
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечати(СтруктураОбъектов.Значение, ПараметрыПечати);
		
		СформироватьТабличныйДокумент(ТабличныйДокумент, Макет, ДанныеДляПечати, ОбъектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьТабличныйДокумент(ТабличныйДокумент, Макет, ДанныеДляПечати, ОбъектыПечати)
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТаблицаКурсовВалют = Неопределено;
	ДанныеДляПечати.Свойство("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КолонкаЦенаВключаетНДС = Шапка.Владелец().Колонки.Найти("ЦенаВключаетНДС");
	
	ТекстИтогоПоСтранице  = НСтр("ru = 'Итого по странице'") + ":";
	ТекстИтогоПоДокументу = НСтр("ru = 'Итого по документу'") + ":";
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получение параметров для заполнения
		ДанныеШапки = ПолучитьДанныеШапкиДокумента(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, "Заголовок", ДанныеШапки);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Инициализация нумерации
		Нумерация = ИнициализироватьНумерацию();
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", Нумерация);
		
		// Инициализация итогов
		ПараметрыИтогоПоСтранице  = ИнициализироватьСтруктуруИтогов();
		ПараметрыИтогоПоДокументу = ИнициализироватьСтруктуруИтогов();
		
		// Формирование многострочной части
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
			
			Если ТаблицаКурсовВалют <> Неопределено Тогда
				КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
			Иначе
				КоэффициентПересчета = 1;
			КонецЕсли;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ФормированиеПечатныхФормБольничнаяАптека.УвеличитьНомер(Нумерация, "НомерСтроки");
				
				ДанныеСтроки = Новый Структура(КлючиПараметров);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
				
				ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					ВыборкаСтрокТовары.Партия);
				
				Если КолонкаЦенаВключаетНДС <> Неопределено Тогда
					
					СуммаСНДС = Окр(ВыборкаСтрокТовары.СуммаСНДС * КоэффициентПересчета, 2);
					СуммаНДС  = Окр(ВыборкаСтрокТовары.СуммаНДС * КоэффициентПересчета, 2);
					СуммаБезНДС = СуммаСНДС - СуммаНДС;
					
					Если Шапка.ЦенаВключаетНДС Тогда
						Цена = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаБезНДС / ВыборкаСтрокТовары.Количество);
					Иначе
						Цена = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
					КонецЕсли;
					
				Иначе
					
					СуммаСНДС   = Окр(ВыборкаСтрокТовары.Сумма * КоэффициентПересчета, 2);
					СуммаНДС    = 0;
					СуммаБезНДС = СуммаСНДС - СуммаНДС;
					
					Цена = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
					
				КонецЕсли;
				
				ДанныеСтроки.Вставить("НомерСтроки"      , Нумерация.НомерСтроки);
				ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
				ДанныеСтроки.Вставить("Цена"             , Окр(Цена, 2));
				ДанныеСтроки.Вставить("СуммаСНДС"        , СуммаСНДС);
				ДанныеСтроки.Вставить("СуммаНДС"         , СуммаНДС);
				ДанныеСтроки.Вставить("СуммаБезНДС"      , СуммаБезНДС);
				
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
				
				ЭтоПоследняяСтрока = Нумерация.НомерСтроки = КоличествоСтрок;
				СтрокаНеПомещаетсяНаСтраницу = ПроверитьВыводСтроки(ТабличныйДокумент, Макет, МассивВыводимыхОбластей, ОбластьСтрока, ЭтоПоследняяСтрока);
				
				Если СтрокаНеПомещаетсяНаСтраницу Тогда
					
					// Вывод области Итого по странице
					ПараметрыИтогоПоСтранице.Вставить("ТекстИтого", ТекстИтогоПоСтранице);
					ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтогоПоСтранице);
					
					// Обнулить итоги по странице
					ФормированиеПечатныхФормБольничнаяАптека.ОбнулитьИтоги(ПараметрыИтогоПоСтранице);
					
					// Перейти на следующую страницу
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Вывод области ШапкаТаблицы
					ФормированиеПечатныхФормБольничнаяАптека.УвеличитьНомер(Нумерация, "НомерСтраницы");
					ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", Нумерация);
					
				КонецЕсли;
				
				// Вывод области Строка
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоСтранице);
				ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоДокументу);
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывод области Итого по странице
		ПараметрыИтогоПоСтранице.Вставить("ТекстИтого", ТекстИтогоПоСтранице);
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтогоПоСтранице);
		
		// Вывод области Итого по описи
		ПараметрыИтогоПоДокументу.Вставить("ТекстИтого", ТекстИтогоПоДокументу);
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтогоПоДокументу);
		
		// Вывод области Подвал
		ДополнитьДанныеШапки(ДанныеШапки, Нумерация, ПараметрыИтогоПоДокументу, ВалютаПечати);
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ДанныеШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеШапкиДокумента(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	СведенияОбОтправителе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПолучателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.ДатаДокумента);
	
	// Данные области Заголовок
	Параметры.Вставить("НомерДокумента"               , ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ОтправительПредставление"     , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе));
	Параметры.Вставить("ОтправительОКПО"              , СведенияОбОтправителе.КодПоОКПО);
	Параметры.Вставить("ГрузоотправительПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе));
	Параметры.Вставить("ГрузоотправительОКПО"         , СведенияОГрузоотправителе.КодПоОКПО);
	Параметры.Вставить("ПолучательПредставление"      , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе));
	Параметры.Вставить("ПолучательОКПО"               , СведенияОПолучателе.КодПоОКПО);
	Параметры.Вставить("ГрузополучательПредставление" , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе));
	Параметры.Вставить("ГрузополучательОКПО"          , СведенияОГрузополучателе.КодПоОКПО);
	Параметры.Вставить("АдресДоставки"                , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес"));
	
	// Данные области Подвал
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Отправитель, Шапка.ДатаДокумента);
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.СкладОтправитель, Шапка.ДатаДокумента);
	
	Параметры.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжность);
	Параметры.Вставить("РуководительФИО"      , ОтветственныеЛица.РуководительНаименование);
	Параметры.Вставить("ГлавБухФИО"           , ОтветственныеЛица.ГлавныйБухгалтерНаименование);
	Параметры.Вставить("МОЛФИО"               , МОЛ.ФИО);
	Параметры.Вставить("МОЛДолжность"         , МОЛ.Должность);
	
	ЧастиДатыДокумента = СтрРазделить(Формат(Шапка.ДатаДокумента, "ДЛФ=DD"), " ", Ложь);
	
	Параметры.Вставить("ДатаДокументаДень" , """" + ЧастиДатыДокумента[0] + """");
	Параметры.Вставить("ДатаДокументаМесяц", ЧастиДатыДокумента[1]);
	Параметры.Вставить("ДатаДокументаГод"  , СтрЗаменить(ЧастиДатыДокумента[2], НСтр("ru='г.'"), НСтр("ru = 'года'")));
	
	Возврат Параметры;
	
КонецФункции

Функция КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета)
	
	КоэффициентПересчета = 1;
	Если ДанныеПечати.Валюта <> ВалютаРегламентированногоУчета Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Дата", ДанныеПечати.Валюта, НачалоДня(ДанныеПечати.ДатаДокумента));
		Массив = ТаблицаКурсовВалют.НайтиСтроки(СтруктураПоиска);
		Если Массив.Количество() > 0 Тогда
			КоэффициентПересчета = ?(Массив[0].Кратность <> 0, Массив[0].Курс / Массив[0].Кратность, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

Функция ИнициализироватьСтруктуруИтогов()
	
	ПараметрыИтого = Новый Структура;
	ПараметрыИтого.Вставить("Количество" , 0);
	ПараметрыИтого.Вставить("СуммаБезНДС", 0);
	ПараметрыИтого.Вставить("СуммаНДС"   , 0);
	ПараметрыИтого.Вставить("СуммаСНДС"  , 0);
	
	Возврат ПараметрыИтого;
	
КонецФункции

Функция ИнициализироватьНумерацию()
	
	Нумерация = Новый Структура;
	Нумерация.Вставить("НомерСтроки"  , 0);
	Нумерация.Вставить("НомерСтраницы", 1);
	
	Возврат Нумерация;
	
КонецФункции

Процедура ДополнитьДанныеШапки(ДанныеШапки, Нумерация, ПараметрыИтогов, ВалютаПечати)
	
	ПоследняяЦифра = Прав(Строка(Нумерация.НомерСтраницы), 1);
	
	КоличествоЛистовВПриложении    = Строка(Нумерация.НомерСтраницы) + " " + ?(ПоследняяЦифра = "1", НСтр("ru='листе'"), НСтр("ru='листах'"));
	КоличествоНаименованийПрописью = НРег(ЧислоПрописью(Нумерация.НомерСтроки,, НСтр("ru='порядковый номер записей, порядковых номера записей, порядковых номеров записей, м,,,,,0'")));
	СуммаПрописью                  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ПараметрыИтогов.СуммаСНДС, ВалютаПечати);
	
	ДанныеШапки.Вставить("КоличествоЛистовВПриложении"   , КоличествоЛистовВПриложении);
	ДанныеШапки.Вставить("КоличествоНаименованийПрописью", КоличествоНаименованийПрописью);
	ДанныеШапки.Вставить("СуммаПрописью"                 , СуммаПрописью);
	
КонецПроцедуры

Функция ПроверитьВыводСтроки(ТабличныйДокумент, Макет, МассивВыводимыхОбластей, ТекущаяОбласть, ЭтоПоследняяСтрока)
	
	МассивВыводимыхОбластей.Очистить();
	МассивВыводимыхОбластей.Добавить(ТекущаяОбласть);
	МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
	Если ЭтоПоследняяСтрока Тогда
		МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
		МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подвал"));
	КонецЕсли;
	
	Возврат Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей);
	
КонецФункции

Функция МетаданныеМакета()
	
	Возврат Метаданные.Обработки.ПечатьТОРГ12.Макеты.ПФ_MXL_ТОРГ12;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
