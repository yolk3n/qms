#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Менеджер; // ОбработкаМенеджер.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
Перем ПространствоИмен; // Строка
Перем ДатаФормирования; // Дата
Перем СчетчикРабот; // Число
Перем КешРаботыПоИдентификаторамСопоставления; // Соответствие
Перем ОшибкиЗаполнения; // Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область СтруктураДанных

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИнформацияПодрядчика:
//  * ДоверенностьНаСоставление - см. НовоеОписаниеДокумента
//  * ДоверенностьНаСоставление - Неопределено
//  * ДоговорПодряда - Неопределено - значение по умолчанию
//  * ДоговорПодряда - см. НовоеОписаниеДокумента
//  * Заказчик - Неопределено - значение по умолчанию
//  * Заказчик - см. НоваяСторонаДоговораПодряда
//  * Подрядчик - Неопределено - значение по умолчанию
//  * Подрядчик - см. НоваяСторонаДоговораПодряда
//  * ИнформацияОСтроительстве - Неопределено - значение по умолчанию
//  * ИнформацияОСтроительстве - см. НоваяИнформацияОСтроительстве
//  * ИсправлениеАкта - Неопределено - значение по умолчанию
//  * ИсправлениеАкта - см. НовоеИсправлениеАкта
//  * МестоВыполненияРабот - Неопределено - значение по умолчанию
//  * МестоВыполненияРабот - см. НовыйАдресРФ
//  * МестоВыполненияРабот - см. НовыйАдресВСвободнойФорме
//  * МестоВыполненияРабот - см. НовыйАдресПоНомеруГАР
//  * СведенияОСмете - Неопределено - значение по умолчанию
//  * СведенияОСмете - см. НовыеСведенияОСмете
//  * ПредъявлениеОГотовностиРабот - Неопределено - значение по умолчанию
//  * ПредъявлениеОГотовностиРабот - см. НовоеОписаниеДокумента
//  * СообщениеОГотовностиРабот - Неопределено - значение по умолчанию
//  * СообщениеОГотовностиРабот - см. НовоеОписаниеДокумента
//  * СрокПриемки - Неопределено - значение по умолчанию
//  * СрокПриемки - см. НовыйСрокПоДате
//  * СрокПриемки - см. НовыйСрокПоКоличествуДней
//  * ИсправлениеАкта - Неопределено - значение по умолчанию
//  * ИсправлениеАкта - см. НовоеИсправлениеАкта
//  * ИнформацияОСмете - Неопределено - значение по умолчанию
//  * ИнформацияОСмете - см. НовыеСведенияОСмете
//  * Валюта - см. НоваяВалюта
//  * Расчеты - Неопределено - значение по умолчанию
//  * Расчеты - см. НовыеРасчеты
//  * Итоги - см. НовыеИтоги
//  * НастройкиДокумента - Неопределено - значение по умолчанию
//  * НастройкиДокумента - см. НовыеНастройкиДокумента
//  * ВыполненныеРаботы - Массив Из см. НовыйРаздел
//  * ВыполненныеРаботы - Массив Из см. НоваяРабота
//  * Основания - Массив Из см. НовоеОписаниеДокумента
//  * ДополнительнаяИнформацияОбУчастниках - Неопределено - значение по умолчанию
//  * ДополнительнаяИнформацияОбУчастниках - см. НоваяДополнительнаяИнформация
//  * ДополнительнаяИнформацияОСдачеПриемкеРабот - Неопределено - значение по умолчанию
//  * ДополнительнаяИнформацияОСдачеПриемкеРабот - см. НоваяДополнительнаяИнформация
//
Функция ИнформацияПодрядчика() Экспорт
	Если Не ЗначениеЗаполнено(ИнформацияПодрядчика) Тогда
		Запись = ИнформацияПодрядчика.Добавить();
		Запись.Валюта = НоваяВалюта();
		Запись.Итоги = НовыеИтоги();
		Запись.ВыполненныеРаботы = Новый Массив;
		Запись.Основания = Новый Массив;
	КонецЕсли;
	Возврат ИнформацияПодрядчика[0];
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НастройкиДокумента
//
Функция НовыеНастройкиДокумента() Экспорт
	Возврат НастройкиДокумента.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОСторонахДоговораПодряда:
//  * Адрес - Неопределено - значение по умолчанию
//  * Адрес - см. НовыйАдресРФ
//  * Адрес - см. НовыйАдресВСвободнойФорме
//  * Адрес - см. НовыйАдресПоНомеруГАР
//  * БанковскиеРеквизиты - Неопределено - значение по умолчанию
//  * БанковскиеРеквизиты - см. НовыеБанковскиеРеквизиты
//  * СведенияОЛице - Неопределено - значение по умолчанию
//  * СведенияОЛице - см. НовыеСведенияОбОрганизации
//  * СведенияОЛице - см. НовыеСведенияОбИностраннойОрганизации
//  * СведенияОЛице - см. НовыеСведенияОПредпринимателе
//  * СведенияОЛице - см. НовыеСведенияОФизическомЛице
//  * АдресаЭлектроннойПочты - Массив Из см. НовыйАдресЭлектроннойПочты
//  * НомераТелефонов - Массив Из см. НовыйНомерТелефона
//
Функция НоваяСторонаДоговораПодряда() Экспорт
	Запись = СведенияОСторонахДоговораПодряда.Добавить();
	Запись.АдресаЭлектроннойПочты = Новый Массив;
	Запись.НомераТелефонов = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиДокументов:
//  * Стороны - Массив Из см. НовыеПризнакиФизЛица
//  * Стороны - Массив Из см. НовыеПризнакиЮрЛица
//  * Стороны - Массив Из см. НовыеПризнакиИностраннойОрганизации
//  * Стороны - Массив Из см. НовыеПризнакиИностранногоГражданина
//  * Стороны - Массив Из см. НовыеПризнакиОрганаИсполнительнойВласти
//
Функция НовоеОписаниеДокумента() Экспорт
	Запись = ИдентифицирующиеПризнакиДокументов.Добавить();
	Запись.Стороны = Новый Массив;
	Возврат Запись;
КонецФункции

// Параметры:
//  ИНН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиЮрЛиц.ИНН
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиЮрЛиц
//
Функция НовыеПризнакиЮрЛица(ИНН = Неопределено) Экспорт
	Запись = ИдентифицирующиеПризнакиЮрЛиц.Добавить();
	Запись.ИНН = ИНН;
	Возврат Запись;
КонецФункции

// Параметры:
//  ИНН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиФизЛиц.ИНН
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиФизЛиц
//
Функция НовыеПризнакиФизЛица(ИНН = Неопределено) Экспорт
	Запись = ИдентифицирующиеПризнакиФизЛиц.Добавить();
	Запись.ИНН = ИНН;
	Возврат Запись;
КонецФункции

// Параметры:
//  Страна - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхОрганизаций.Страна
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхОрганизаций.Наименование
//  Идентификатор - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхОрганизаций.Идентификатор
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхОрганизаций
//
Функция НовыеПризнакиИностраннойОрганизации(Страна = Неопределено, Наименование = Неопределено,
	Идентификатор = Неопределено) Экспорт
	Запись = ИдентифицирующиеПризнакиИностранныхОрганизаций.Добавить();
	Запись.Страна = Страна;
	Запись.Наименование = Наименование;
	Запись.Идентификатор = Идентификатор;
	Возврат Запись;
КонецФункции

// Параметры:
//  Страна - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхГраждан.Страна
//  ФИО - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхГраждан.ФИО
//  Идентификатор - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхГраждан.Идентификатор
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиИностранныхГраждан
//
Функция НовыеПризнакиИностранногоГражданина(Страна = Неопределено, ФИО = Неопределено, Идентификатор = Неопределено) Экспорт
	Запись = ИдентифицирующиеПризнакиИностранныхГраждан.Добавить();
	Запись.Страна = Страна;
	Запись.ФИО = ФИО;
	Запись.Идентификатор = Идентификатор;
	Возврат Запись;
КонецФункции

// Параметры:
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиОргановИсполнительнойВласти.Наименование
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИдентифицирующиеПризнакиОргановИсполнительнойВласти
//
Функция НовыеПризнакиОрганаИсполнительнойВласти(Наименование = Неопределено) Экспорт
	Запись = ИдентифицирующиеПризнакиОргановИсполнительнойВласти.Добавить();
	Запись.Наименование = Наименование;
	Возврат Запись;
КонецФункции

// Параметры:
//  ДатаИсправления - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИсправлениеАкта.ДатаИсправления
//  НомерИсправления - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИсправлениеАкта.НомерИсправления
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИсправлениеАкта
//
Функция НовоеИсправлениеАкта(ДатаИсправления = Неопределено, НомерИсправления = Неопределено) Экспорт
	Запись = ИсправлениеАкта.Добавить();
	Запись.ДатаИсправления = ДатаИсправления;
	Запись.НомерИсправления = НомерИсправления;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИнформацияОСтроительстве:
//  * Заказчик - Неопределено - значение по умолчанию
//  * Заказчик - см. НовыеПризнакиЮрЛица
//  * Заказчик - см. НовыеПризнакиФизЛица
//  * Заказчик - см. НовыеПризнакиИностраннойОрганизации
//  * Заказчик - см. НовыеПризнакиИностранногоГражданина
//  * Заказчик - см. НовыеПризнакиОрганаИсполнительнойВласти
//  * Инвестор - Неопределено - значение по умолчанию
//  * Инвестор - см. НовыеПризнакиЮрЛица
//  * Инвестор - см. НовыеПризнакиФизЛица
//  * Инвестор - см. НовыеПризнакиИностраннойОрганизации
//  * Инвестор - см. НовыеПризнакиИностранногоГражданина
//  * Инвестор - см. НовыеПризнакиОрганаИсполнительнойВласти
//  * Контракт - Неопределено - значение по умолчанию
//  * Контракт - см. НовоеОписаниеДокумента
//  * Субподрядчики - Массив Из см. НовыеПризнакиФизЛица
//  * Субподрядчики - Массив Из см. НовыеПризнакиЮрЛица
//  * Субподрядчики - Массив Из см. НовыеПризнакиИностраннойОрганизации
//  * Субподрядчики - Массив Из см. НовыеПризнакиИностранногоГражданина
//  * Субподрядчики - Массив Из см. НовыеПризнакиОрганаИсполнительнойВласти
//
Функция НоваяИнформацияОСтроительстве() Экспорт
	Запись = ИнформацияОСтроительстве.Добавить();
	Запись.Субподрядчики = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаРФ
//
Функция НовыйАдресРФ() Экспорт
	Возврат АдресаРФ.Добавить();
КонецФункции

// Параметры:
//  КодСтраны - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаВСвободнойФорме.КодСтраны
//  Адрес - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаВСвободнойФорме.Адрес
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаВСвободнойФорме
//
Функция НовыйАдресВСвободнойФорме(КодСтраны = Неопределено, Адрес = Неопределено) Экспорт
	Запись = АдресаВСвободнойФорме.Добавить();
	Запись.КодСтраны = КодСтраны;
	Запись.Адрес = Адрес;
	Возврат Запись;
КонецФункции

// Параметры:
//  Номер - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаПоНомеруГАР.Номер
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.АдресаПоНомеруГАР
//
Функция НовыйАдресПоНомеруГАР(Номер = Неопределено) Экспорт
	Запись = АдресаПоНомеруГАР.Добавить();
	Запись.Номер = Номер;
	Возврат Запись;
КонецФункции

// Параметры:
//  Смета - см. НовоеОписаниеДокумента
//  ИзменениеСметы - см. НовоеИзменениеСметы
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОСмете:
//  * Смета - см. НовоеОписаниеДокумента
//  * ИзменениеСметы - см. НовоеИзменениеСметы
//
Функция НовыеСведенияОСмете(Смета = Неопределено, ИзменениеСметы = Неопределено) Экспорт
	Запись = СведенияОСмете.Добавить();
	Запись.Смета = Смета;
	Запись.ИзменениеСметы = ИзменениеСметы;
	Возврат Запись;
КонецФункции

// Параметры:
//  Версия - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИзменениеСметы.Версия
//  ДополнительноеСоглашение - см. НовоеОписаниеДокумента
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИзменениеСметы:
//  * ДополнительноеСоглашение - см. НовоеОписаниеДокумента
//
Функция НовоеИзменениеСметы(Версия = Неопределено, ДополнительноеСоглашение = Неопределено) Экспорт
	Запись = ИзменениеСметы.Добавить();
	Запись.Версия = Версия;
	Если ТипЗнч(ДополнительноеСоглашение) = Тип("Неопределено") Тогда
		Запись.ДополнительноеСоглашение = НовоеОписаниеДокумента();
	Иначе
		Запись.ДополнительноеСоглашение = ДополнительноеСоглашение;
	КонецЕсли;
	Возврат Запись;
КонецФункции

// Параметры:
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбОрганизациях.Наименование
//  ИНН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбОрганизациях.ИНН
//  КПП - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбОрганизациях.КПП
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбОрганизациях
//
Функция НовыеСведенияОбОрганизации(Наименование = Неопределено, ИНН = Неопределено, КПП = Неопределено) Экспорт
	Запись = СведенияОбОрганизациях.Добавить();
	Запись.ИНН = ИНН;
	Запись.КПП = КПП;
	Запись.Наименование = Наименование;
	Возврат Запись;
КонецФункции

// Параметры:
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбИностранныхОрганизациях.Наименование
//  Идентификатор - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбИностранныхОрганизациях.Идентификатор
//  ИныеСведения - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбИностранныхОрганизациях.ИныеСведения
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОбИностранныхОрганизациях
//
Функция НовыеСведенияОбИностраннойОрганизации(Наименование = Неопределено, Идентификатор = Неопределено,
	ИныеСведения = Неопределено) Экспорт
	Запись = СведенияОбИностранныхОрганизациях.Добавить();
	Запись.Наименование = Наименование;
	Запись.Идентификатор = Идентификатор;
	Запись.ИныеСведения = ИныеСведения;
	Возврат Запись;
КонецФункции

// Параметры:
//  ФИО - см. НовыеФИО
//  ИНН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОПредпринимателях.ИНН
//  ОГРН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОПредпринимателях.ОГРН
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОПредпринимателях:
//  * ФИО - см. НовыеФИО
//
Функция НовыеСведенияОПредпринимателе(ФИО = Неопределено, ИНН = Неопределено, ОГРН = Неопределено) Экспорт
	Запись = СведенияОПредпринимателях.Добавить();
	Запись.ФИО = ФИО;
	Запись.ИНН = ИНН;
	Запись.ОГРН = ОГРН;
	Возврат Запись;
КонецФункции

// Параметры:
//  ФИО - см. НовыеФИО
//  ИНН - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОФизическихЛицах.ИНН
//  ИныеСведения - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОФизическихЛицах.ИныеСведения
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОФизическихЛицах:
//  * ФИО - см. НовыеФИО
//
Функция НовыеСведенияОФизическомЛице(ФИО = Неопределено, ИНН = Неопределено, ИныеСведения = Неопределено) Экспорт
	Запись = СведенияОФизическихЛицах.Добавить();
	Запись.ФИО = ФИО;
	Запись.ИНН = ИНН;
	Запись.ИныеСведения = ИныеСведения;
	Возврат Запись;
КонецФункции

// Параметры:
//  Фамилия - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ФИО.Фамилия
//  Имя - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ФИО.Имя
//  Отчество - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ФИО.Отчество
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ФИО
//
Функция НовыеФИО(Фамилия = Неопределено, Имя = Неопределено, Отчество = Неопределено) Экспорт
	Запись = ФИО.Добавить();
	Запись.Фамилия = Фамилия;
	Запись.Имя = Имя;
	Запись.Отчество = Отчество;
	Возврат Запись;
КонецФункции

// Параметры:
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БанковскиеРеквизиты.Наименование
//  БИК - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БанковскиеРеквизиты.БИК
//  Счет - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БанковскиеРеквизиты.НомерСчета
//  КоррСчет - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БанковскиеРеквизиты.КорреспондентскийСчет
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БанковскиеРеквизиты
//
Функция НовыеБанковскиеРеквизиты(Наименование = Неопределено, БИК = Неопределено, Счет = Неопределено,
	КоррСчет = Неопределено) Экспорт
	Запись = БанковскиеРеквизиты.Добавить();
	Запись.Наименование = Наименование;
	Запись.БИК = БИК;
	Запись.НомерСчета = Счет;
	Запись.КорреспондентскийСчет = КоррСчет;
	Возврат Запись;
КонецФункции

// Параметры:
//  Дата - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДатаПриемки.Дата
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДатаПриемки
//
Функция НовыйСрокПоДате(Дата = Неопределено) Экспорт
	Запись = ДатаПриемки.Добавить();
	Запись.Дата = Дата;
	Возврат Запись;
КонецФункции

// Параметры:
//  ЧислоДней - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.КоличествоДнейПриемки.ЧислоДней
//  ТолькоРабочиеДни - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.КоличествоДнейПриемки.ТолькоРабочиеДни
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.КоличествоДнейПриемки
//
Функция НовыйСрокПоКоличествуДней(ЧислоДней = Неопределено, ТолькоРабочиеДни = Неопределено) Экспорт
	Запись = КоличествоДнейПриемки.Добавить();
	Запись.ЧислоДней = ЧислоДней;
	Запись.ТолькоРабочиеДни = ТолькоРабочиеДни;
	Возврат Запись;
КонецФункции

// Параметры:
//  Код - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеВалюты.Код
//  Наименование - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеВалюты.Наименование
//  Курс - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеВалюты.Курс
//  Номинал - Число - см. НоминалыВалют
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеВалюты
//
Функция НоваяВалюта(Код = Неопределено, Наименование = Неопределено, Курс = Неопределено,
	Номинал = Неопределено) Экспорт
	Запись = ДанныеВалюты.Добавить();
	Запись.Код = Код;
	Запись.Наименование = Наименование;
	Запись.Курс = Курс;
	Запись.Номинал = Номинал;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеРазделов:
//  * ВыполненныеРаботы - Массив Из см. НоваяРабота
//  * РасшифровкиСтоимости - Массив Из см. НоваяРасшифровкаСтоимости
//  * ИтогиПоСмете - Неопределено - значение по умолчанию
//  * ИтогиПоСмете - см. НовыеИтогиРаздела
//  * ИтогиСНачалаСтроительства - Неопределено - значение по умолчанию
//  * ИтогиСНачалаСтроительства - см. НовыеИтогиРаздела
//  * ДополнительнаяИнформация - Массив Из см. НоваяДополнительнаяИнформация
//  * Сопоставление - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//
Функция НовыйРаздел() Экспорт
	Запись = ДанныеРазделов.Добавить();
	Запись.ВыполненныеРаботы = Новый Массив;
	Запись.РасшифровкиСтоимости = Новый Массив;
	Запись.ДополнительнаяИнформация = Новый Массив;
	Запись.Сопоставление = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИтогиРазделов
//
Функция НовыеИтогиРаздела() Экспорт
	Возврат ИтогиРазделов.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Расчеты:
//  * ОтчетныйПериод - см. НоваяСтруктураРасчетов
//  * СНачалаСтроительства - Неопределено - значение по умолчанию
//  * СНачалаСтроительства - см. НоваяСтруктураРасчетов
//  * ДополнительнаяИнформация - Массив Из см. НоваяДополнительнаяИнформация
//
Функция НовыеРасчеты() Экспорт
	Запись = Расчеты.Добавить();
	Запись.ОтчетныйПериод = НоваяСтруктураРасчетов();
	Запись.ДополнительнаяИнформация = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтруктураРасчетов:
//  * РасшифровкаТребованийУдержаний - Массив Из см. НовоеТребование
//  * РасшифровкаТребованийУдержаний - Массив Из см. НовоеУдержание
//
Функция НоваяСтруктураРасчетов() Экспорт
	Запись = СтруктураРасчетов.Добавить();
	Запись.РасшифровкаТребованийУдержаний = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Требования:
//  * ДокументПодтверждение - Неопределено - значение по умолчанию
//  * ДокументПодтверждение - см. НовоеОписаниеДокумента
//  * Вид - Строка - см. ТипыТребований
//
Функция НовоеТребование() Экспорт
	Запись = Требования.Добавить();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Удержания:
//  * ДокументПодтверждение - Неопределено - значение по умолчанию
//  * ДокументПодтверждение - см. НовоеОписаниеДокумента
//  * Вид - Строка - см. ТипыУдержаний
//
Функция НовоеУдержание() Экспорт
	Запись = Удержания.Добавить();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Итоги:
//  * ОтчетныйПериод - см. НоваяСтруктураИтогов
//  * СНачалаСтроительства - Неопределено - значение по умолчанию
//  * СНачалаСтроительства - см. НоваяСтруктураИтогов
//
Функция НовыеИтоги() Экспорт
	Запись = Итоги.Добавить();
	Запись.ОтчетныйПериод = НоваяСтруктураИтогов();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтруктураИтогов:
//  * НалогиПоСтавкам - Соответствие Из КлючИЗначение:
//  ** Ключ - Строка - см. НалоговыеСтавки
//  ** Значение - см. НовыйНалогПоСтавке
//
Функция НоваяСтруктураИтогов() Экспорт
	Запись = СтруктураИтогов.Добавить();
	Запись.НалогиПоСтавкам = Новый Соответствие;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НалогиПоСтавкам:
//  * ПозицииАкта - Массив Из см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеРабот.ПозицияПоАкту
//
Функция НовыйНалогПоСтавке() Экспорт
	Запись = НалогиПоСтавкам.Добавить();
	Запись.ПозицииАкта = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеРабот:
//  * РасшифровкиСтоимости - Массив Из см. НоваяРасшифровкаСтоимости
//  * СведениеОПрослеживаемости - Массив Из см. НовыеСведенияОПрослеживаемости
//  * ПоказателиПоСмете - Неопределено - значение по умолчанию
//  * ПоказателиПоСмете - см. НовыеЧисловыеПоказатели
//  * ПоказателиСНачалаСтроительства - Неопределено - значение по умолчанию
//  * ПоказателиСНачалаСтроительства - см. НовыеЧисловыеПоказатели
//  * ЕдиницаИзмерения - Неопределено - значение по умолчанию
//  * ЕдиницаИзмерения - см. НоваяЕдиницаИзмерения
//  * СтранаПроисхождения - Неопределено - значение по умолчанию
//  * СтранаПроисхождения - см. НоваяСтранаПроисхождения
//  * ОшибкиИОбстоятельстваВКоличестве - Неопределено - значение по умолчанию
//  * ОшибкиИОбстоятельстваВКоличестве - см. НовыеОшибкиИОбстоятельства
//  * ОшибкиИОбстоятельстваВСумме - Неопределено - значение по умолчанию
//  * ОшибкиИОбстоятельстваВСумме - см. НовыеОшибкиИОбстоятельства
//  * ДополнительнаяИнформация - Массив Из см. НоваяДополнительнаяИнформация
//  * ТипЗатрат - Строка - см. ТипыЗатрат
//  * Сопоставление - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//
Функция НоваяРабота() Экспорт
	Запись = ДанныеРабот.Добавить();
	Запись.РасшифровкиСтоимости = Новый Массив;
	Запись.СведениеОПрослеживаемости = Новый Массив;
	Запись.ДополнительнаяИнформация = Новый Массив;
	Запись.Сопоставление = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СведенияОПрослеживаемости:
//  * ЕдиницаИзмерения - см. НоваяЕдиницаИзмерения
//
Функция НовыеСведенияОПрослеживаемости() Экспорт
	Запись = СведенияОПрослеживаемости.Добавить();
	Запись.ЕдиницаИзмерения = НоваяЕдиницаИзмерения();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ЧисловыеПоказатели
//
Функция НовыеЧисловыеПоказатели() Экспорт
	Возврат ЧисловыеПоказатели.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ЕдиницыИзмерения
//
Функция НоваяЕдиницаИзмерения() Экспорт
	Возврат ЕдиницыИзмерения.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтраныПроисхождения
//
Функция НоваяСтранаПроисхождения() Экспорт
	Возврат СтраныПроисхождения.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ОшибкиИОбстоятельства:
//  * Ошибки - Массив Из см. НоваяСтруктураИзменений
//  * Обстоятельства - Массив Из см. НоваяСтруктураИзменений
//
Функция НовыеОшибкиИОбстоятельства() Экспорт
	Запись = ОшибкиИОбстоятельства.Добавить();
	Запись.Ошибки = Новый Массив;
	Запись.Обстоятельства = Новый Массив;
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтруктураИзменений:
//  * Основание - Неопределено - значение по умолчанию
//  * Основание - см. НовоеОписаниеДокумента
//
Функция НоваяСтруктураИзменений() Экспорт
	Запись = СтруктураИзменений.Добавить();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДанныеРасшифровокСтоимости:
//  * ДополнительнаяИнформация - Массив Из см. НоваяДополнительнаяИнформация
//  * Сопоставление - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//
Функция НоваяРасшифровкаСтоимости() Экспорт
	Запись = ДанныеРасшифровокСтоимости.Добавить();
	Запись.ДополнительнаяИнформация = Новый Массив;
	Запись.Сопоставление = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	Возврат Запись;
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Подписанты:
//  * ФИО - см. НовыеФИО
//  * ЭлектроннаяДоверенность - см. НоваяЭлектроннаяДоверенность
//  * БумажнаяДоверенность - см. НоваяБумажнаяДоверенность
//
Функция НовыйПодписант() Экспорт
	Возврат Подписанты.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ЭлектронныеДоверенности
//
Функция НоваяЭлектроннаяДоверенность() Экспорт
	Возврат ЭлектронныеДоверенности.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.БумажныеДоверенности:
//  * ПодписалФИО - см. НовыеФИО
//
Функция НоваяБумажнаяДоверенность() Экспорт
	Возврат БумажныеДоверенности.Добавить();
КонецФункции

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДополнительнаяИнформация:
//  * Поля - Массив Из см. НовоеДополнительноеПоле
//
Функция НоваяДополнительнаяИнформация() Экспорт
	Запись = ДополнительнаяИнформация.Добавить();
	Запись.Поля = Новый Массив;
	Возврат Запись;
КонецФункции

// Параметры:
//  Идентификатор - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДополнительныеПоля.Идентификатор
//  Значение - см. Обработка.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДополнительныеПоля.Значение
// 
// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДополнительныеПоля
//
Функция НовоеДополнительноеПоле(Идентификатор = Неопределено, Значение = Неопределено) Экспорт
	Запись = ДополнительныеПоля.Добавить();
	Запись.Идентификатор = Идентификатор;
	Запись.Значение = Значение;
	Возврат Запись;
КонецФункции

#КонецОбласти

#Область Перечисления

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СпособыНакопленияИтогов
//
Функция СпособыНакопленияИтогов() Экспорт
	Возврат Менеджер.СпособыНакопленияИтогов();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СпособыРасчетаНДС
//
Функция СпособыРасчетаНДС() Экспорт
	Возврат Менеджер.СпособыРасчетаНДС();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтепениАгрегации
//
Функция СтепениАгрегации() Экспорт
	Возврат Менеджер.СтепениАгрегации();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоминалыВалют
//
Функция НоминалыВалют() Экспорт
	Возврат Менеджер.НоминалыВалют();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НалоговыеСтавки
//
Функция НалоговыеСтавки() Экспорт
	Возврат Менеджер.НалоговыеСтавки();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.СтатусыПодписанта
//
Функция СтатусыПодписанта() Экспорт
	Возврат Менеджер.СтатусыПодписанта();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ТипыПодписи
//
Функция ТипыПодписи() Экспорт
	Возврат Менеджер.ТипыПодписи();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ТипыЗатрат
//
Функция ТипыЗатрат() Экспорт
	Возврат Менеджер.ТипыЗатрат();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ТипыУдержаний
//
Функция ТипыУдержаний() Экспорт
	Возврат Менеджер.ТипыУдержаний();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ТипыТребований
//
Функция ТипыТребований() Экспорт
	Возврат Менеджер.ТипыТребований();
КонецФункции

// см. Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ТипыРабот
//
Функция ТипыРабот() Экспорт
	Возврат Менеджер.ТипыРабот();
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ТекущаяИнформацияПодрядчика = ИнформацияПодрядчика();
	ОшибкиЗаполнения = ОбработчикОшибок.ПроверитьЗаполнениеДанных(ТекущаяИнформацияПодрядчика, ПроверяемыеРеквизиты);
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращаемое значение:
//  Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Функция ПолучитьОшибкиЗаполнения() Экспорт
	Возврат ОшибкиЗаполнения;
КонецФункции

// Параметры:
//  СоответствиеНоменклатуры - см. СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры
//
Процедура ЗаполнитьДанныеСопоставления(СоответствиеНоменклатуры) Экспорт
	ТипыРабот = ТипыРабот();
	Для Каждого ДанныеИБ Из СоответствиеНоменклатуры Цикл
		Разделы = КешРаботыПоИдентификаторамСопоставления.Получить(ДанныеИБ.НоменклатураКонтрагента.Идентификатор);
		Если ТипЗнч(Разделы) = Тип("Массив") Тогда
			Для Каждого Раздел Из Разделы Цикл
				Если ТипЗнч(Раздел) = ТипыРабот.Раздел Тогда
					Раздел.Сопоставление = ДанныеИБ.НоменклатураИБ;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//  * Ключ - см. СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам
//  * Значение - см. ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров
//
Функция СтрокиТребующиеСопоставления() Экспорт
	КСопоставлению = Новый Соответствие;
	Параметры = Менеджер.ПараметрыСопоставленияНоменклатуры();
	Если Параметры.СопоставлятьРазделы Тогда
		РазделыТребующиеСопоставление(КСопоставлению);
	КонецЕсли;
	Если Параметры.СопоставлятьРаботы Тогда
		РаботыТребующиеСопоставление(КСопоставлению);
	КонецЕсли;
	Если Параметры.СопоставлятьРасшифровкиСтоимости Тогда
		РасшифровкиСтоимостиТребующиеСопоставление(КСопоставлению);
	КонецЕсли;
	Возврат КСопоставлению;
КонецФункции

// Параметры:
//  ДополнительныеДанные - см. ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула
//
Процедура УстановитьДополнительныеДанныеДляФормирования(ДополнительныеДанные) Экспорт
	ДополнительныеДанныеДляФормирования = ДополнительныеДанные;
КонецПроцедуры

// Возвращаемое значение:
//  см. ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула
//
Функция ПолучитьДополнительныеДанныеДляФормирования() Экспорт
	Возврат ДополнительныеДанныеДляФормирования;
КонецФункции

#Область ФормированиеЭлектронногоДокумента

// Возвращаемое значение:
//  Дата
//
Функция ДатаФормирования() Экспорт
	Возврат ДатаФормирования;
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторФайла() Экспорт
	ДанныеШаблона = Новый Структура;
	Префикс = Менеджер.ПрефиксФормата();
	ДанныеШаблона.Вставить("ТипФайла", Префикс);
	ДополнительныеДанные = ПолучитьДополнительныеДанныеДляФормирования();
	ДанныеШаблона.Вставить("Получатель", ДополнительныеДанные.Участники.ИдентификаторПолучателя);
	ДанныеШаблона.Вставить("Отправитель", ДополнительныеДанные.Участники.ИдентификаторОтправителя);
	ДанныеШаблона.Вставить("УИД", ДополнительныеДанные.УникальныйИдентификатор);
	ПредставлениеДаты = Формат(ДатаФормирования, "ДФ=yyyyMMdd");
	ДанныеШаблона.Вставить("Дата", ПредставлениеДаты);
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[ТипФайла]_[Получатель]_[Отправитель]_[Дата]_[УИД]",
		ДанныеШаблона);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Файл - Строка
// * Документ - Строка
// * СвАктСдПр - Строка
// * ИспрАктСдПр - Строка
// * ОсновСтроит - Строка
// * ИзмСмет - Строка
// * ДенИзм - Строка
// * НаимИСт - Строка
// * Раздел - Строка
// * СвПродПер - Строка
// * СвПер - Строка
// * СвОРасч - Строка
// * НастрФормДок - Строка
// * ПодписантПодр - Строка
// * СвВидРабТип - Строка
// * СвПрослежСтройка - Строка
// * ИзмДаннПрПерТип - Строка
// * ИзмененияТип - Строка
// * СумТребУдержТип - Строка
// * НаимИСт - Строка
// * ИдРеквДокТип - Строка
// * РеквДокТип - Строка
// * ИдРекСостТип - Строка
// * ДаннИноТип - Строка
// * СвСторДогТип - Строка
// * УчастникТип - Строка
// * ИдСв - Строка
// * СвИП - Строка
// * СвЮЛУч - Строка
// * СвИнНеУч - Строка
// * СвФЛУчастФХЖ - Строка
// * БанкРекв - Строка
// * СвБанк - Строка
// * АдресТип - Строка
// * АдрРФТип - Строка
// * АдрИнфТип - Строка
// * ВсегоАктТип - Строка
// * СумПоСтавке - Строка
// * КонтактТип - Строка
// * СумНДСТип - Строка
// * ПодписантТип - Строка
// * СвДовер - Строка
// * СвДоверБум - Строка
// * ИнфПолТип - Строка
// * ТекстИнфТип - Строка
// * ДопПолеСтрИнфТип - Строка
// * ФИОТип - Строка
// * БИКТип - Строка
// * ВремяТип - Строка
// * ДатаТип - Строка
// * ИННФЛТип - Строка
// * ИННЮЛТип - Строка
// * КНДТип - Строка
// * КППТип - Строка
// * ОГРНИПТип - Строка
// * ОКВТип - Строка
// * ОКЕИТип - Строка
// * ОКСМТип - Строка
// * ССРФТип - Строка
//
Функция ТипыОбъектов() Экспорт
	// BSLLS:Typo-off
	Типы = Новый Структура;
	ТипФайл = АнонимныйТип("Файл");
	Типы.Вставить("Файл", ТипФайл);
	ТипДокумент = АнонимныйТип("Файл.Документ");
	Типы.Вставить("Документ", ТипДокумент);
	ТипСведенияОбАкте = АнонимныйТип("Файл.Документ.СвАктСдПр");
	Типы.Вставить("СвАктСдПр", ТипСведенияОбАкте);
	ТипИсправлениеАкта = АнонимныйТип("Файл.Документ.СвАктСдПр.ИспрАктСдПр");
	Типы.Вставить("ИспрАктСдПр", ТипИсправлениеАкта);
	ТипОснованиеСтроительства = АнонимныйТип("Файл.Документ.СвАктСдПр.ОсновСтроит");
	Типы.Вставить("ОсновСтроит", ТипОснованиеСтроительства);
	ТипИзменениеСметы = АнонимныйТип("Файл.Документ.СвАктСдПр.ИзмСмет");
	Типы.Вставить("ИзмСмет", ТипИзменениеСметы);
	ТипДенежноеИзмерение = АнонимныйТип("Файл.Документ.СвАктСдПр.ДенИзм");
	Типы.Вставить("ДенИзм", ТипДенежноеИзмерение);
	ТипВыполненныеРаботы = АнонимныйТип("Файл.Документ.НаимИСт");
	Типы.Вставить("НаимИСт", ТипВыполненныеРаботы);
	ТипРаздел = АнонимныйТип("Файл.Документ.НаимИСт.Раздел");
	Типы.Вставить("Раздел", ТипРаздел);
	ТипСведенияПередачи = АнонимныйТип("Файл.Документ.СвПродПер");
	Типы.Вставить("СвПродПер", ТипСведенияПередачи);
	ТипПередачаРабот = АнонимныйТип("Файл.Документ.СвПродПер.СвПер");
	Типы.Вставить("СвПер", ТипПередачаРабот);
	ТипСведенияОРасчетах = АнонимныйТип("Файл.Документ.СвОРасч");
	Типы.Вставить("СвОРасч", ТипСведенияОРасчетах);
	ТипНастройки = АнонимныйТип("Файл.Документ.НастрФормДок");
	Типы.Вставить("НастрФормДок", ТипНастройки);
	ТипПодписант = АнонимныйТип("Файл.Документ.ПодписантПодр");
	Типы.Вставить("ПодписантПодр", ТипПодписант);
	Типы.Вставить("СвВидРабТип", "СвВидРабТип");
	Типы.Вставить("СвПрослежСтройка", "СвВидРабТип.СвПрослежСтройка");
	Типы.Вставить("ИзмДаннПрПерТип", "ИзмДаннПрПерТип");
	Типы.Вставить("ИзмененияТип", "ИзмененияТип");
	Типы.Вставить("СумТребУдержТип", "СумТребУдержТип");
	Типы.Вставить("ИдРеквДокТип", "ИдРеквДокТип");
	Типы.Вставить("РеквДокТип", "РеквДокТип");
	Типы.Вставить("ИдРекСостТип", "ИдРекСостТип");
	Типы.Вставить("ДаннИноТип", "ДаннИноТип");
	Типы.Вставить("СвСторДогТип", "СвСторДогТип");
	Типы.Вставить("УчастникТип", "УчастникТип");
	Типы.Вставить("ИдСв", "УчастникТип.ИдСв");
	Типы.Вставить("СвИП", "УчастникТип.ИдСв.СвИП");
	Типы.Вставить("СвЮЛУч", "УчастникТип.ИдСв.СвЮЛУч");
	Типы.Вставить("СвИнНеУч", "УчастникТип.ИдСв.СвИнНеУч");
	Типы.Вставить("СвФЛУчастФХЖ", "УчастникТип.ИдСв.СвФЛУчастФХЖ");
	Типы.Вставить("БанкРекв", "УчастникТип.БанкРекв");
	Типы.Вставить("СвБанк", "УчастникТип.БанкРекв.СвБанк");
	Типы.Вставить("АдресТип", "АдресТип");
	Типы.Вставить("АдрРФТип", "АдрРФТип");
	Типы.Вставить("АдрИнфТип", "АдрИнфТип");
	Типы.Вставить("ВсегоАктТип", "ВсегоАктТип");
	Типы.Вставить("СумПоСтавке", "ВсегоАктТип.СумПоСтавке");
	Типы.Вставить("КонтактТип", "КонтактТип");
	Типы.Вставить("СумНДСТип", "СумНДСТип");
	Типы.Вставить("ПодписантТип", "ПодписантТип");
	Типы.Вставить("СвДовер", "ПодписантТип.СвДовер");
	Типы.Вставить("СвДоверБум", "ПодписантТип.СвДоверБум");
	Типы.Вставить("ИнфПолТип", "ИнфПолТип");
	Типы.Вставить("ТекстИнфТип", "ТекстИнфТип");
	Типы.Вставить("ДопПолеСтрИнфТип", "ДопПолеСтрИнфТип");
	Типы.Вставить("ФИОТип", "ФИОТип");
	Типы.Вставить("БИКТип", "БИКТип");
	Типы.Вставить("ВремяТип", "ВремяТип");
	Типы.Вставить("ДатаТип", "ДатаТип");
	Типы.Вставить("ИННФЛТип", "ИННФЛТип");
	Типы.Вставить("ИННЮЛТип", "ИННЮЛТип");
	Типы.Вставить("КНДТип", "КНДТип");
	Типы.Вставить("КППТип", "КППТип");
	Типы.Вставить("ОГРНИПТип", "ОГРНИПТип");
	Типы.Вставить("ОКВТип", "ОКВТип");
	Типы.Вставить("ОКЕИТип", "ОКЕИТип");
	Типы.Вставить("ОКСМТип", "ОКСМТип");
	Типы.Вставить("ССРФТип", "ССРФТип");
	Возврат Новый ФиксированнаяСтруктура(Типы);
	// BSLLS:Typo-on
КонецФункции

// Параметры:
//  ТипОбъекта - Строка - см. ТипыОбъектов
// 
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция ПолучитьXDTOОбъект(ТипОбъекта) Экспорт
	Возврат РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИмен);
КонецФункции

// Параметры:
//  Раздел - СтрокаТаблицыЗначений: см. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
//  ДанныеЗаполнения - Соответствие Из КлючИЗначение:
//  * Ключ - Строка - Имя поля
//  * Значение - Строка
//
Процедура ЗаполнитьДанныеДополнительныхПолей(Раздел, ДанныеЗаполнения) Экспорт
	Разделы = Менеджер.РазделыДополнительныхПолей();
	ТекущаяИнформацияПодрядчика = ИнформацияПодрядчика();
	ДопИнформация = Неопределено;
	Если Раздел.Имя = Разделы.ИнфПолФХЖ1 Тогда
		ДопИнформация = НоваяДополнительнаяИнформация();
		ТекущаяИнформацияПодрядчика.ДополнительнаяИнформацияОбУчастниках = ДопИнформация;
	КонецЕсли;
	Если Раздел.Имя = Разделы.ИнфПолФХЖ3 Тогда
		ДопИнформация = НоваяДополнительнаяИнформация();
		ТекущаяИнформацияПодрядчика.ДополнительнаяИнформацияОСдачеПриемкеРабот = ДопИнформация;
	КонецЕсли;
	Если Раздел.Имя = Разделы.ИнфПолСвОРасч И ЗначениеЗаполнено(ТекущаяИнформацияПодрядчика.Расчеты) Тогда
		ДопИнформация = НоваяДополнительнаяИнформация();
		ТекущаяИнформацияПодрядчика.Расчеты.ДополнительнаяИнформация.Добавить(ДопИнформация);
	КонецЕсли;
	Если ТипЗнч(ДопИнформация) <> Тип("Неопределено") Тогда
		Для Каждого КлючИЗначение Из ДанныеЗаполнения Цикл
			НовоеПоле = НовоеДополнительноеПоле(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ДопИнформация.Поля.Добавить(НовоеПоле);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Общее

// см. ОбработкаМенеджер.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ПространствоИмен
//
Функция ПространствоИмен() Экспорт
	Возврат Менеджер.ПространствоИмен();
КонецФункции

// Возвращаемое значение:
//  Число
//
Функция СледующийСквознойНомерРабот() Экспорт
	СчетчикРабот = СчетчикРабот + 1;
	Возврат СчетчикРабот;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АнонимныйТип(Тип)
	Возврат СтрШаблон("{%1}.%2", ПространствоИмен, Тип);
КонецФункции

Процедура Инициализировать()
	Менеджер = Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО;
	КешРаботыПоИдентификаторамСопоставления = Новый Соответствие;
	ПространствоИмен = ПространствоИмен();
	ДатаФормирования = ТекущаяДатаСеанса();
	ОбработчикОшибок.Инициализировать(ЭтотОбъект);
	ОшибкиЗаполнения = Новый Массив;
	СчетчикРабот = 1;
КонецПроцедуры

Процедура ДобавитьВРаботуВКешКСопоставлению(Идентификатор, СтрокаРабот)
	Строки = КешРаботыПоИдентификаторамСопоставления.Получить(Идентификатор);
	Если ТипЗнч(Строки) = Тип("Массив") Тогда
		Строки.Добавить(СтрокаРабот);
	Иначе
		Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаРабот);
		КешРаботыПоИдентификаторамСопоставления.Вставить(Идентификатор, Строки);
	КонецЕсли;
КонецПроцедуры

#Область СопоставлениеНоменклатуры

Процедура РазделыТребующиеСопоставление(КСопоставлению)
	ТекущаяИнформацияПодрядчика = ИнформацияПодрядчика();
	ТипыРабот = ТипыРабот();
	Для Каждого Работа Из ТекущаяИнформацияПодрядчика.ВыполненныеРаботы Цикл
		Если ТипЗнч(Работа) = ТипыРабот.Раздел И Не ЗначениеЗаполнено(Работа.Сопоставление.Номенклатура) Тогда
			ДанныеСопоставления = Менеджер.ДанныеСопоставленияПоРазделу(Работа);
			КСопоставлению.Вставить(ДанныеСопоставления.Идентификатор, ДанныеСопоставления);
			ДобавитьВРаботуВКешКСопоставлению(ДанныеСопоставления.Идентификатор, Работа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РаботыТребующиеСопоставление(КСопоставлению)
	ТекущаяИнформацияПодрядчика = ИнформацияПодрядчика();
	ТипыРабот = ТипыРабот();
	Для Каждого Работа Из ТекущаяИнформацияПодрядчика.ВыполненныеРаботы Цикл
		Если ТипЗнч(Работа) = ТипыРабот.Раздел Тогда
			Для Каждого ВложеннаяРабота Из Работа.ВыполненныеРаботы Цикл
				Если Не ЗначениеЗаполнено(ВложеннаяРабота.Сопоставление.Номенклатура) Тогда
					ДанныеСопоставления = Менеджер.ДанныеСопоставленияПоРаботе(ВложеннаяРабота);
					КСопоставлению.Вставить(ДанныеСопоставления.Идентификатор, ДанныеСопоставления);
					ДобавитьВРаботуВКешКСопоставлению(ДанныеСопоставления.Идентификатор, ВложеннаяРабота);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(Работа) = ТипыРабот.Работа И Не ЗначениеЗаполнено(Работа.Сопоставление.Номенклатура) Тогда
			ДанныеСопоставления = Менеджер.ДанныеСопоставленияПоРаботе(Работа);
			КСопоставлению.Вставить(ДанныеСопоставления.Идентификатор, ДанныеСопоставления);
			ДобавитьВРаботуВКешКСопоставлению(ДанныеСопоставления.Идентификатор, Работа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РасшифровкиСтоимостиТребующиеСопоставление(КСопоставлению)
	ТекущаяИнформацияПодрядчика = ИнформацияПодрядчика();
	Для Каждого Работа Из ТекущаяИнформацияПодрядчика.ВыполненныеРаботы Цикл
		Для Каждого Расшифровка Из Работа.РасшифровкиСтоимости Цикл
			Если Не ЗначениеЗаполнено(Расшифровка.Сопоставление.Номенклатура) Тогда
				ДанныеСопоставления = Менеджер.ДанныеСопоставленияПоРасшифровкеСтоимости(Расшифровка);
				КСопоставлению.Вставить(ДанныеСопоставления.Идентификатор, ДанныеСопоставления);
				ДобавитьВРаботуВКешКСопоставлению(ДанныеСопоставления.Идентификатор, Расшифровка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли
