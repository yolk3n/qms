#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Перечисления

// Способы накопления итогов.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Выключены - Строка - Данные по строительству накопительным итогом в акт не включаются   
// * Везде - Строка - акт содержит Данные по строительству накопительным итогом
// * ТолькоВСтрокеВсего - Строка - акт содержит Данные по строительству накопительным итогом только в строке «Всего»
//
Функция СпособыНакопленияИтогов() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("Выключены", "0");
	Данные.Вставить("Везде", "1");
	Данные.Вставить("ТолькоВСтрокеВсего", "2");
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Способы расчета НДС.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ПоКаждойСтроке - Строка - расчет НДС производится по каждой позиции / разделу
// * ТолькоВИтогах - Строка - определение налоговой базы по НДС производится по актированным
//                            работам (товарам, услугам) в целом
//
Функция СпособыРасчетаНДС() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("ПоКаждойСтроке", "0");
	Данные.Вставить("ТолькоВИтогах", "1");
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Степени агрегации.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * КонструктивныеРешения - Строка - по наименованиям конструктивных решений (элементов),
//                                    комплексов (видов) работ, затрат, оборудования
// * Работы - Строка - по наименованиям отдельных видов работ, затрат, оборудования
//
Функция СтепениАгрегации() Экспорт
	Данные = Новый Структура;
	// BSLLS:Typo-off
	Данные.Вставить("КонструктивныеРешения", "НаимКонстрРеш");
	Данные.Вставить("Работы", "НаимРаб");
	// BSLLS:Typo-on
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Работа - Строка
// * Услуга - Строка
// * ТоварКУчетуКакОС - Строка
// * Иное - Строка
// * КосвенныеРасходы - Строка
// * ДавальческиеМатериалы - Строка
//
Функция ТипыЗатрат() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("Работа", "1");
	Данные.Вставить("Услуга", "2");
	Данные.Вставить("ТоварКУчетуКакОС", "3");
	Данные.Вставить("Иное", "4");
	Данные.Вставить("КосвенныеРасходы", "5");
	Данные.Вставить("ДавальческиеМатериалы", "6");
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Номинал иностранной валюты, применяемый при установлении Банком России курса конкретной иностранной валюты
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * н10 - Число
// * н100 - Число
// * н1000 - Число
// * н10000 - Число
// * н100000 - Число
//
Функция НоминалыВалют() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("н10", 10);
	Данные.Вставить("н100", 100);
	Данные.Вставить("н1000", 1000);
	Данные.Вставить("н10000", 10000);
	Данные.Вставить("н100000", 100000);
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Налоговые ставки.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НДС0 - Строка
// * НДС10 - Строка
// * НДС20 - Строка
// * БезНДС - Строка
// * НДСАгента - Строка
//
Функция НалоговыеСтавки() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("НДС0", "0%");
	Данные.Вставить("НДС10", "10%");
	Данные.Вставить("НДС20", "20%");
	Данные.Вставить("БезНДС", "без НДС");
	Данные.Вставить("НДСАгента", "НДС исчисляется налоговым агентом");
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Статусы подписанта.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ПолномочияБезДоверенности - Строка
// * ПолномочияНаОснованииЭлектроннойДоверенности - Строка
// * ПолномочияНаОснованииБумажнойДоверенности - Строка
//
Функция СтатусыПодписанта() Экспорт
	Типы = Новый Структура;
	Типы.Вставить("ПолномочияБезДоверенности", "1");
	Типы.Вставить("ПолномочияНаОснованииЭлектроннойДоверенности", "2");
	Типы.Вставить("ПолномочияНаОснованииБумажнойДоверенности", "3");
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Типы подписи.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * УсиленнаяКвалифицированная - Строка
// * Простая - Строка
// * УсиленнаяНеквалифицированная - Строка
//
Функция ТипыПодписи() Экспорт
	Типы = Новый Структура;
	Типы.Вставить("УсиленнаяКвалифицированная", "1");
	Типы.Вставить("Простая", "2");
	Типы.Вставить("УсиленнаяНеквалифицированная", "3");
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ЗачетАванса - Строка
// * ГарантийноеУдержание - Строка
// * НеисполненныеШтрафы - Строка
// * ЗанижениеСтоимсотиРабот - Строка
// * ИныеОбъектыСтроительства - Строка
// * ИныеУдержания - Строка
//
Функция ТипыУдержаний() Экспорт
	Данные = Новый Структура;
	// BSLLS:Typo-off
	Данные.Вставить("ЗачетАванса", "31");
	Данные.Вставить("ГарантийноеУдержание", "32");
	Данные.Вставить("НеисполненныеШтрафы", "33");
	Данные.Вставить("ЗанижениеСтоимсотиРабот", "34");
	Данные.Вставить("ИныеОбъектыСтроительства", "35");
	Данные.Вставить("ИныеУдержания", "36");
	// BSLLS:Typo-on
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НеисполненныеШтрафы - Строка
// * ГарантийноеУдержание - Строка
// * ЗанижениеСтоимостиРабот - Строка
// * ИныеОбъектыСтроительства - Строка
// * ИныеТребования - Строка
//
Функция ТипыТребований() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("НеисполненныеШтрафы", "01");
	Данные.Вставить("ГарантийноеУдержание", "02");
	Данные.Вставить("ЗанижениеСтоимостиРабот", "03");
	Данные.Вставить("ИныеОбъектыСтроительства", "04");
	Данные.Вставить("ИныеТребования", "05");
	Возврат Новый ФиксированнаяСтруктура(Данные);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Раздел - Тип
// * Работа - Тип
// * РасшифровкаСтоимости - Тип
//
Функция ТипыРабот() Экспорт
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.%1";
	Раздел = СтрШаблон(Шаблон, "ДанныеРазделов");
	Типы.Вставить("Раздел", Тип(Раздел));
	Работа = СтрШаблон(Шаблон, "ДанныеРабот");
	Типы.Вставить("Работа", Тип(Работа));
	Расшифровка = СтрШаблон(Шаблон, "ДанныеРасшифровокСтоимости");
	Типы.Вставить("РасшифровкаСтоимости", Тип(Расшифровка));
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * РФ - Тип
// * ВСвободнойФорме - Тип
// * НомерГАР - Тип
//
Функция ТипыАдресов() Экспорт
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.%1";
	АдресРФ = СтрШаблон(Шаблон, "АдресаРФ");
	Типы.Вставить("РФ", Тип(АдресРФ));
	АдресВСвободнойФорме = СтрШаблон(Шаблон, "АдресаВСвободнойФорме");
	Типы.Вставить("ВСвободнойФорме", Тип(АдресВСвободнойФорме));
	АдресПоНомеруГАР = СтрШаблон(Шаблон, "АдресаПоНомеруГАР");
	Типы.Вставить("НомерГАР", Тип(АдресПоНомеруГАР));
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ИностраннаяОрганизация - Тип
// * ИностранныйГражданин - Тип
// * ОрганИсполнительнойВласти - Тип
// * ЮридическоеЛицо - Тип
// * ФизическоеЛицо - Тип
//
Функция ТипыСубъектовДокумента() Экспорт
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.%1";
	ИностраннаяОрганизация = СтрШаблон(Шаблон, "ИдентифицирующиеПризнакиИностранныхОрганизаций");
	Типы.Вставить("ИностраннаяОрганизация", Тип(ИностраннаяОрганизация));
	ИностранныйГражданин = СтрШаблон(Шаблон, "ИдентифицирующиеПризнакиИностранныхГраждан");
	Типы.Вставить("ИностранныйГражданин", Тип(ИностранныйГражданин));
	ОрганИсполнительнойВласти = СтрШаблон(Шаблон, "ИдентифицирующиеПризнакиОргановИсполнительнойВласти");
	Типы.Вставить("ОрганИсполнительнойВласти", Тип(ОрганИсполнительнойВласти));
	ЮридическоеЛицо = СтрШаблон(Шаблон, "ИдентифицирующиеПризнакиЮрЛиц");
	Типы.Вставить("ЮридическоеЛицо", Тип(ЮридическоеЛицо));
	ФизическоеЛицо = СтрШаблон(Шаблон, "ИдентифицирующиеПризнакиФизЛиц");
	Типы.Вставить("ФизическоеЛицо", Тип(ФизическоеЛицо));
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ИностраннаяОрганизация - Тип
// * Организация - Тип
// * Предприниматель - Тип
// * ФизическоеЛицо - Тип
//
Функция ТипыСторонПодряда() Экспорт
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.%1";
	ИностраннаяОрганизация = СтрШаблон(Шаблон, "СведенияОбИностранныхОрганизациях");
	Типы.Вставить("ИностраннаяОрганизация", Тип(ИностраннаяОрганизация));
	Организация = СтрШаблон(Шаблон, "СведенияОбОрганизациях");
	Типы.Вставить("Организация", Тип(Организация));
	Предприниматель = СтрШаблон(Шаблон, "СведенияОПредпринимателях");
	Типы.Вставить("Предприниматель", Тип(Предприниматель));
	ФизическоеЛицо = СтрШаблон(Шаблон, "СведенияОФизическихЛицах");
	Типы.Вставить("ФизическоеЛицо", Тип(ФизическоеЛицо));
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Формат - Строка - см. ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ПоддерживаетФормат(Формат, ТипДокумента) Экспорт
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	Возврат Формат = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика;
КонецФункции

// Служебное имя формата.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяФормата() Экспорт
	Возврат ПространствоИмен();
КонецФункции

// Параметры:
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФайлФормата(ИмяФайла) Экспорт
	Префикс = ПрефиксФормата();
	Возврат СтрНачинаетсяС(ИмяФайла, Префикс);
КонецФункции

// Код по классификатору налоговых документов
// 
// Возвращаемое значение:
//  Строка
//
Функция КНД() Экспорт
	Возврат "1110335";
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ПрефиксФормата() Экспорт
	Возврат "ON_AKTREZRABP";
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Параметры - см. ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  см. ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета
//
Функция ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры) Экспорт
	КонструкторЭД = Создать();
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОПриемкеВыполненныхРаботВСтроительстве_ИнформацияПодрядчика(
		ОбъектУчета, КонструкторЭД, Отказ);
	Если Отказ Тогда
		Возврат ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;
	Результат = ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = КонструкторЭД;
	Результат.Основания.Добавить(ОбъектУчета);
	Возврат Результат;
КонецФункции

// Сформировать документ.
// 
// Параметры:
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  см. ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента
//
Функция СформироватьДокумент(КонструкторЭД) Экспорт
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Документ = ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента();
	Файл = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Файл);
	ЗаполнитьФайлИнформацииПодрядчика(Файл, КонструкторЭД, Документ.Ошибки);
	Если Не ЗначениеЗаполнено(Документ.Ошибки) Тогда
		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Файл, Ложь, , "Файл");
		ПространствоИмен = КонструкторЭД.ПространствоИмен();
		Документ.ДанныеОсновногоФайла.ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные,
			ПространствоИмен);
		Расширение = "xml";
		ИмяФайла = КонструкторЭД.ИдентификаторФайла();
		Документ.ДанныеОсновногоФайла.ИмяФайла = СтрШаблон("%1.%2", ИмяФайла, Расширение);
	КонецЕсли;
	Возврат Документ;
КонецФункции

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO:
//  * Документ - ОбъектXDTO:
//  ** ПодписантПодр - СписокXDTO
//  ДанныеПодписанта - см. ФорматыЭДО.НовыеДанныеПодписанта
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДанныеПодписанта(ДанныеФайлаЭД, ДанныеПодписанта, Ошибки) Экспорт
	Если Не ЗначениеЗаполнено(ДанныеПодписанта.Организация) Или Не ЗначениеЗаполнено(
		ДанныеПодписанта.СертификатПодписи) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить подписанта. Не заполнены организация или сертификат подписи'");
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстОшибки);
		Возврат;
	КонецЕсли;
	КонструкторЭД = Создать();
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Подписант = КонструкторЭД.НовыйПодписант();
	Статусы = СтатусыПодписанта();
	Если ЭлектронныеДокументыЭДО.ТребуетсяМашиночитаемаяДоверенность(ДанныеПодписанта.Организация,
		ДанныеПодписанта.СертификатПодписи) Тогда
		Подписант.Статус = Статусы.ПолномочияНаОснованииЭлектроннойДоверенности;
	Иначе
		Подписант.Статус = Статусы.ПолномочияБезДоверенности;
	КонецЕсли;
	Подписант.ТипПодписи = ТипыПодписи().УсиленнаяКвалифицированная;
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПодписанта.СертификатПодписи,
		"Должность, Фамилия, Имя, Отчество");
	Подписант.Должность = РеквизитыСертификата.Должность;
	Подписант.ФИО = КонструкторЭД.НовыеФИО();
	ЗаполнитьЗначенияСвойств(Подписант.ФИО, РеквизитыСертификата);
	Если ЗначениеЗаполнено(ДанныеПодписанта.Доверенность) Тогда
		РеквизитыДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПодписанта.Доверенность,
			"НомерДоверенности, СведенияОбИнформационнойСистеме, ДатаВыдачи, ДатаСоздания, Код");
		Подписант.ЭлектроннаяДоверенность = КонструкторЭД.НоваяЭлектроннаяДоверенность();
		Подписант.ЭлектроннаяДоверенность.Номер = РеквизитыДоверенности.НомерДоверенности;
		Подписант.ЭлектроннаяДоверенность.СистемаОтменыДоверенности = РеквизитыДоверенности.СведенияОбИнформационнойСистеме;
		Подписант.ЭлектроннаяДоверенность.ДатаВыдачи = РеквизитыДоверенности.ДатаВыдачи;
		Подписант.ЭлектроннаяДоверенность.ДатаВнутреннейРегистрации = РеквизитыДоверенности.ДатаСоздания;
		Подписант.ЭлектроннаяДоверенность.ВнутреннийНомер = РеквизитыДоверенности.Код;
	КонецЕсли;
	ПодписантПодрядчика = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантПодр);
	ЗаполнитьСведенияОПодписанте(ПодписантПодрядчика, Подписант, КонструкторЭД, Ошибки);
	ДанныеФайлаЭД.Документ.ПодписантПодр.Очистить();
	ДанныеФайлаЭД.Документ.ПодписантПодр.Добавить(ПодписантПодрядчика);
КонецПроцедуры

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  НовыйЭД - СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  ОшибкаРазбора - Булево
//
Процедура ПрочитатьФайлОбмена(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора) Экспорт
	КонструкторЭД = Создать();
	ПрочитатьФайлИнформацииПодрядчика(ДанныеФайлаЭД, КонструкторЭД);
	НовыйЭД.ВерсияФормата = КонструкторЭД.ПространствоИмен();
	НовыйЭД.ЗначениеРеквизита = КонструкторЭД;
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг;
КонецПроцедуры

// Параметры:
//  РазделыДополнительныхПолей - см. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
//
Процедура ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей) Экспорт
	ТипыРазделовДопПолей = ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();
	Разделы = РазделыДополнительныхПолей();
	
	Раздел = РазделыДополнительныхПолей.Добавить();
	Раздел.Имя = Разделы.ИнфПолФХЖ1;
	Раздел.Тип = ТипыРазделовДопПолей.Шапка;
	Раздел.Представление = НСтр("ru = 'Участники'");
	
	Раздел = РазделыДополнительныхПолей.Добавить();
	Раздел.Имя = Разделы.ИнфПолФХЖ3;
	Раздел.Тип = ТипыРазделовДопПолей.Шапка;
	Раздел.Представление = НСтр("ru = 'Сдача-приемка выполненных работ'");
	
	Раздел = РазделыДополнительныхПолей.Добавить();
	Раздел.Имя = Разделы.ИнфПолСвОРасч;
	Раздел.Тип = ТипыРазделовДопПолей.Шапка;
	Раздел.Представление = НСтр("ru = 'Расчеты'");
КонецПроцедуры

// Доступные к сопоставлению таблицы.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Разделы - Строка
// * Работы - Строка
// * РасшифровкиСтоимости - Строка
//
Функция ДоступныеКСопоставлениюТаблицы() Экспорт
	Таблицы = Новый Структура;
	Таблицы.Вставить("Разделы", "Разделы");
	Таблицы.Вставить("Работы", "Работы");
	Таблицы.Вставить("РасшифровкиСтоимости", "РасшифровкиСтоимости");
	Возврат Новый ФиксированнаяСтруктура(Таблицы);
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * СопоставлятьРазделы - Булево
// * СопоставлятьРаботы - Булево
// * СопоставлятьРасшифровкиСтоимости - Булево
//
Функция ПараметрыСопоставленияНоменклатуры() Экспорт
	ДоступныеТаблицы = ДоступныеКСопоставлениюТаблицы();
	ТаблицыКСопоставлению = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииТаблицАктаОПриемкиСтроительныхРаботУслугКСопоставленияНоменклатуры(
		ТаблицыКСопоставлению, ДоступныеТаблицы);
	Структура = Новый Структура;
	СопоставлятьРазделы = ТаблицыКСопоставлению.Найти(ДоступныеТаблицы.Разделы) <> Неопределено;
	Структура.Вставить("СопоставлятьРазделы", СопоставлятьРазделы);
	СопоставлятьРаботы = ТаблицыКСопоставлению.Найти(ДоступныеТаблицы.Работы) <> Неопределено;
	Структура.Вставить("СопоставлятьРаботы", СопоставлятьРаботы);
	СопоставлятьРасшифровкиСтоимости = ТаблицыКСопоставлению.Найти(ДоступныеТаблицы.РасшифровкиСтоимости)
		<> Неопределено;
	Структура.Вставить("СопоставлятьРасшифровкиСтоимости", СопоставлятьРасшифровкиСтоимости);
	Возврат Новый ФиксированнаяСтруктура(Структура);
КонецФункции

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO:
// 
// Возвращаемое значение:
//  см. ФорматыЭДО.НоваяТаблицаТоваров
// 
Функция ИнформацияОТоваре(ДанныеФайлаЭД) Экспорт
	ТаблицаТоваров = ФорматыЭДО.НоваяТаблицаТоваров();
	КонструкторЭД = Создать();
	МассивРабот = Новый Массив;
	СписокРаботЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.НаимИСт");
	Если ТипЗнч(СписокРаботЭД) = Тип("СписокXDTO") Тогда
		ПрочитатьИнформациюОВыполненныхРаботах(СписокРаботЭД, МассивРабот, КонструкторЭД);
	КонецЕсли;
	Параметры = ПараметрыСопоставленияНоменклатуры();
	Если Параметры.СопоставлятьРазделы Тогда
		ИнформацияОСопоставленияхРазделов(ТаблицаТоваров, МассивРабот);
	КонецЕсли;
	Если Параметры.СопоставлятьРаботы Тогда
		ИнформацияОСопоставленииРабот(ТаблицаТоваров, МассивРабот);
	КонецЕсли;
	Если Параметры.СопоставлятьРасшифровкиСтоимости Тогда
		ИнформацияОСопоставленияхРасшифровокСтоимости(ТаблицаТоваров, МассивРабот);
	КонецЕсли;
	Возврат ТаблицаТоваров;
КонецФункции

// Параметры:
//  Раздел - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
// 
// Возвращаемое значение:
//  см. ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров
//
Функция ДанныеСопоставленияПоРазделу(Раздел) Экспорт
	ДанныеСопоставления = ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров();
	ДанныеСопоставления.Наименование = Раздел.Наименование;
	ДанныеСопоставления.Идентификатор =
		СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеСопоставления);
	Возврат ДанныеСопоставления;
КонецФункции

// Параметры:
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
// 
// Возвращаемое значение:
//  см. ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров
//
Функция ДанныеСопоставленияПоРаботе(Работа) Экспорт
	ДанныеСопоставления = ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров();
	ДанныеСопоставления.Наименование = Работа.Наименование;
	Если ЗначениеЗаполнено(Работа.ЕдиницаИзмерения) Тогда
		ДанныеСопоставления.ЕдиницаИзмерения = Работа.ЕдиницаИзмерения.Наименование;
		ДанныеСопоставления.ЕдиницаИзмеренияКод = Работа.ЕдиницаИзмерения.Наименование;
	КонецЕсли;
	ДанныеСопоставления.ПрослеживаемыйТовар = ЗначениеЗаполнено(Работа.СведениеОПрослеживаемости);
	ДанныеСопоставления.СтавкаНДС = Работа.СтавкаНДС;
	Если ЗначениеЗаполнено(Работа.СтранаПроисхождения) Тогда
		ДанныеСопоставления.СтранаПроисхожденияКод = Работа.СтранаПроисхождения.Код;
	КонецЕсли;
	ДанныеСопоставления.Идентификатор =
		СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеСопоставления);
	Возврат ДанныеСопоставления;
КонецФункции

// Параметры:
//  Расшифровка - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРасшифровкаСтоимости
// 
// Возвращаемое значение:
//  см. ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров
//
Функция ДанныеСопоставленияПоРасшифровкеСтоимости(Расшифровка) Экспорт
	ДанныеСопоставления = ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров();
	ДанныеСопоставления.Наименование = Расшифровка.Наименование;
	ДанныеСопоставления.Идентификатор =
		СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеСопоставления);
	Возврат ДанныеСопоставления;
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен() Экспорт
	Возврат "ON_AKTREZRABP_1_971_01_01_00_01";
КонецФункции

// При определении соответствия титулов.
// 
// Параметры:
//  СоответствиеОсновногоТитулаОтветному - Соответствие Из КлючИЗначение:
//  * Ключ - Строка - пространство имен основного титула
//  * Значение - Строка - пространство имен ответного титула
//
Процедура ЗаполнитьСоответствиеТитулов(СоответствиеОсновногоТитулаОтветному) Экспорт
	ОсновнойТитул = ПространствоИмен();
	ОтветныйТитул = Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияЗаказчикаЭДО.ПространствоИмен();
	СоответствиеОсновногоТитулаОтветному.Вставить(ОсновнойТитул, ОтветныйТитул);
КонецПроцедуры

// Возвращаемое значение:
//  Булево
//
Функция ЗаполнениеДанныхПодписантаДоступно() Экспорт
	Возврат Истина;
КонецФункции

// Поддерживаемые типы документов.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыДокументовЭДО
//
Функция ПоддерживаемыеТипыДокументов() Экспорт
	ПоддерживаемыеТипы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	Возврат ПоддерживаемыеТипы;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Перечисления

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ИнфПолФХЖ1 - Строка
// * ИнфПолФХЖ2 - Строка
// * ИнфПолФХЖ3 - Строка
// * ИнфПолСвОРасч - Строка
// * ИнфПолРазд - Строка
//
Функция РазделыДополнительныхПолей() Экспорт
	Разделы = Новый Структура;
	// BSLLS:Typo-off
	Разделы.Вставить("ИнфПолФХЖ1", "ИнфПолФХЖ1");
	Разделы.Вставить("ИнфПолФХЖ2", "ИнфПолФХЖ2");
	Разделы.Вставить("ИнфПолФХЖ3", "ИнфПолФХЖ3");
	Разделы.Вставить("ИнфПолСвОРасч", "ИнфПолСвОРасч");
	Разделы.Вставить("ИнфПолРазд", "ИнфПолРазд");
	// BSLLS:Typo-on
	Возврат Новый ФиксированнаяСтруктура(Разделы);
КонецФункции

#КонецОбласти

#Область ФормированиеЭлектронногоДокумента

// BSLLS:Typo-off

// Заполнение объекта из таблицы 5.1 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьФайлИнформацииПодрядчика(Объект, КонструкторЭД, Ошибки)
	Идентификатор = КонструкторЭД.ИдентификаторФайла();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдФайл", Идентификатор, Истина, Ошибки);
	ДополнительныеДанные = КонструкторЭД.ПолучитьДополнительныеДанныеДляФормирования();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсПрог", ДополнительныеДанные.ВерсияПрограммы, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсФорм", "1.00", Истина, Ошибки);
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Документ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Документ);
	ЗаполнитьДокументИнформацииПодрядчика(Документ, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Документ", Документ, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.2 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ПодписантПодр - СписокXDTO
//  * НаимИСт - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДокументИнформацииПодрядчика(Объект, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	КНД = КНД();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КНД", КНД, Истина, Ошибки);
	ДатаФайлаПодрядчика = ПредставлениеДаты(КонструкторЭД.ДатаФормирования());
	ВремяФайлаПодрядчика = ПредставлениеВремени(КонструкторЭД.ДатаФормирования());
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаИнфПодр", ДатаФайлаПодрядчика, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВремИнфПодр", ВремяФайлаПодрядчика, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимЭкСубСост", ИнформацияПодрядчика.Составитель, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ДоверенностьНаСоставление) Тогда
		Доверенность = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.РеквДокТип);
		ЗаполнитьРеквизитыДокумента(Доверенность, ИнформацияПодрядчика.ДоверенностьНаСоставление, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОснДовОргСост", Доверенность, Ложь, Ошибки);
	КонецЕсли;
	СведенияФХЖ1 = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвАктСдПр);
	ЗаполнитьСведенияОбУчастникахФХЖ1(СведенияФХЖ1, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвАктСдПр", СведенияФХЖ1, Истина, Ошибки);
	Для Каждого Работа Из ИнформацияПодрядчика.ВыполненныеРаботы Цикл
		ВыполненныеРаботы = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.НаимИСт);
		ЗаполнитьИнформациюОВыполненныхРаботах(ВыполненныеРаботы, Работа, КонструкторЭД, Ошибки);
		Объект.НаимИСт.Добавить(ВыполненныеРаботы);
	КонецЦикла;
	СведенияОПередачеРабот = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвПродПер);
	ЗаполнитьСведенияОФактеСдачиПриемкиРезультатовРабот(СведенияОПередачеРабот, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвПродПер", СведенияОПередачеРабот, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.Расчеты) Тогда
		Расчеты = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвОРасч);
		ЗаполнитьСведенияПодрядчикаОРасчетах(Расчеты, ИнформацияПодрядчика.Расчеты, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвОРасч", Расчеты, Истина, Ошибки);
	КонецЕсли;
	ВсегоЗаОтчетныйПериод = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ВсегоАктТип);
	ЗаполнитьВсегоПоАкту(ВсегоЗаОтчетныйПериод, ИнформацияПодрядчика.Итоги.ОтчетныйПериод, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВсегоАктОтч", ВсегоЗаОтчетныйПериод, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.Итоги.СНачалаСтроительства) Тогда
		ВсегоСНачалаСтроительства = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ВсегоАктТип);
		ЗаполнитьВсегоПоАкту(ВсегоСНачалаСтроительства, ИнформацияПодрядчика.Итоги.СНачалаСтроительства, КонструкторЭд,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВсегоАктСНач", ВсегоСНачалаСтроительства, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.НастройкиДокумента) Тогда
		НастройкиДокумента = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.НастрФормДок);
		ЗаполнитьНастройкиДляФормированияДокумента(НастройкиДокумента, ИнформацияПодрядчика.НастройкиДокумента, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НастрФормДок", НастройкиДокумента, Ложь, Ошибки);
	КонецЕсли;
	Подписант = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантПодр);
	ПустойПодписант = КонструкторЭД.НовыйПодписант();
	ПустойПодписант.ФИО = КонструкторЭД.НовыеФИО("-", "-", "-");
	ЗаполнитьСведенияОПодписанте(Подписант, ПустойПодписант, КонструкторЭД, Ошибки);
	Объект.ПодписантПодр.Добавить(Подписант);
КонецПроцедуры

// Заполнение объекта из таблицы 5.3 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ОснСдачи - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбУчастникахФХЖ1(Объект, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерДок", ИнформацияПодрядчика.НомерАкта, Истина, Ошибки);
	ДатаАкта = ПредставлениеДаты(ИнформацияПодрядчика.ДатаАкта);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаДок", ДатаАкта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОб", ИнформацияПодрядчика.Стройка, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодОКВДог", ИнформацияПодрядчика.КодВалютыДоговора, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдОбОСИтСтр", ИнформацияПодрядчика.ИдентификаторОсновногоСредства,
		Ложь, Ошибки);
	ДоговорПодряда = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
	ЗаполнитьИдентифицирующиеПризнакиДокумента(ДоговорПодряда, ИнформацияПодрядчика.ДоговорПодряда, КонструкторЭД,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдДог", ДоговорПодряда, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ИсправлениеАкта) Тогда
		Исправление = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИспрАктСдПр);
		ЗаполнитьИсправлениеАкта(Исправление, ИнформацияПодрядчика.ИсправлениеАкта, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИспрАктСдПр", Исправление, Ложь, Ошибки);
	КонецЕсли;
	Подрядчик = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвСторДогТип);
	ЗаполнитьСведенияОСторонахДоговораПодряда(Подрядчик, ИнформацияПодрядчика.Подрядчик, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвПодр", Подрядчик, Истина, Ошибки);
	Заказчик = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвСторДогТип);
	ЗаполнитьСведенияОСторонахДоговораПодряда(Заказчик, ИнформацияПодрядчика.Заказчик, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвЗак", Заказчик, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ИнформацияОСтроительстве) Тогда
		СведенияОСтроительстве = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ОсновСтроит);
		ЗаполнитьДанныеОбОснованияхИОбстоятельствахСтроительства(СведенияОСтроительстве,
			ИнформацияПодрядчика.ИнформацияОСтроительстве, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОсновСтроит", СведенияОСтроительстве, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.МестоВыполненияРабот) Тогда
		Адрес = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдресТип);
		ЗаполнитьАдресМестонахождения(Адрес, ИнформацияПодрядчика.МестоВыполненияРабот, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "МестВыпРаб", Адрес, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.СведенияОСмете) Тогда
		Смета = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(Смета, ИнформацияПодрядчика.СведенияОСмете.Смета, КонструкторЭД,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСмет", Смета, Истина, Ошибки);
		Если ЗначениеЗаполнено(ИнформацияПодрядчика.СведенияОСмете.ИзменениеСметы) Тогда
			ИзменениеСметы = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИзмСмет);
			ЗаполнитьИзменениеСметы(ИзменениеСметы, ИнформацияПодрядчика.СведенияОСмете.ИзменениеСметы, КонструкторЭД,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИзмСмет", ИзменениеСметы, Ложь, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИзмСметНет", "смета не менялась", Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.Основания) Тогда
		Для Каждого Основание Из ИнформацияПодрядчика.Основания Цикл
			НовоеОснование = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
			ЗаполнитьИдентифицирующиеПризнакиДокумента(НовоеОснование, Основание, КонструкторЭД, Ошибки);
			Объект.ОснСдачи.Добавить(НовоеОснование);
		КонецЦикла;
	КонецЕсли;
	ДенежноеИзмерение = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ДенИзм);
	ЗаполнитьЕдиницуДенежногоИзмерения(ДенежноеИзмерение, ИнформацияПодрядчика.Валюта, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДенИзм", ДенежноеИзмерение, Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ДополнительнаяИнформацияОбУчастниках) Тогда
		ДопИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьИнформационноеПоле(ДопИнформация, ИнформацияПодрядчика.ДополнительнаяИнформацияОбУчастниках,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфПолФХЖ1", ДопИнформация, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.4 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ИсправлениеАкта - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеИсправлениеАкта
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИсправлениеАкта(Объект, ИсправлениеАкта, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомИспр", ИсправлениеАкта.НомерИсправления, Истина, Ошибки);
	ДатаИсправления = ПредставлениеДаты(ИсправлениеАкта.ДатаИсправления);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаИспр", ДатаИсправления, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.5 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ИдСубПодрСтр - СписокXDTO
//  ИнформацияОСтроительстве - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяИнформацияОСтроительстве
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДанныеОбОснованияхИОбстоятельствахСтроительства(Объект, ИнформацияОСтроительстве, КонструкторЭД,
	Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрГосМун", ?(ИнформацияОСтроительстве.ДляГосИМуниципальныхНужд,
		"1", "0"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрНескОбъект", ?(
		ИнформацияОСтроительстве.ДоговорНаНесколькоОбъектов, "1", "0"), Истина, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияОСтроительстве.Контракт) Тогда
		СтроительныйКонтракт = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(СтроительныйКонтракт, ИнформацияОСтроительстве.Контракт,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдКонтрСтр", СтроительныйКонтракт, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РеестрНомКонт", ИнформацияОСтроительстве.НомерКонтракта,
			ИнформацияОСтроительстве.ДляГосИМуниципальныхНужд, Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияОСтроительстве.Инвестор) Тогда
		ИнвесторСтроительства = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРекСостТип);
		ЗаполнитьИдентифицирующиеРеквизитыСубъектаДокумента(ИнвесторСтроительства, ИнформацияОСтроительстве.Инвестор,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдИнвСтр", ИнвесторСтроительства, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияОСтроительстве.Заказчик) Тогда
		ЗаказчикСтроительства = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРекСостТип);
		ЗаполнитьИдентифицирующиеРеквизитыСубъектаДокумента(ЗаказчикСтроительства, ИнформацияОСтроительстве.Заказчик,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдЗакСтр", ЗаказчикСтроительства, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияОСтроительстве.Субподрядчики) Тогда
		Для Каждого Субподрядчик Из ИнформацияОСтроительстве.Субподрядчики Цикл
			НовыйСубподрядчик = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРекСостТип);
			ЗаполнитьИдентифицирующиеРеквизитыСубъектаДокумента(НовыйСубподрядчик, Субподрядчик, КонструкторЭД, Ошибки);
			Объект.ИдСубПодрСтр.Добавить(НовыйСубподрядчик);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.6 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Изменениесметы - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеИзменениеСметы
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИзменениеСметы(Объект, ИзменениеСметы, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСмет", ИзменениеСметы.Версия, Истина, Ошибки);
	ДопСоглашение = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
	ЗаполнитьИдентифицирующиеПризнакиДокумента(ДопСоглашение, ИзменениеСметы.ДополнительноеСоглашение, КонструкторЭД,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдДопСогл", ДопСоглашение, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.7 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Валюта - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяВалюта
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьЕдиницуДенежногоИзмерения(Объект, Валюта, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодОКВ", Валюта.Код, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОКВ", Валюта.Наименование, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КурсВал", Валюта.Курс, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомВал", Валюта.Номинал, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.8 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ВидРаб - СписокXDTO
//  * Раздел - СписокXDTO
//  * РасшифРес - СписокXDTO
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//         - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИнформациюОВыполненныхРаботах(Объект, Работа, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ТипыРабот = ТипыРабот();
	Если ТипЗнч(Работа) = ТипыРабот.Раздел Тогда
		НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Раздел);
		ЗаполнитьРаздел(НоваяЗапись, Работа, КонструкторЭД, Ошибки);
		Объект.Раздел.Добавить(НоваяЗапись);
	КонецЕсли;
	Если ТипЗнч(Работа) = ТипыРабот.Работа Тогда
		НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвВидРабТип);
		ЗаполнитьСведенияОВыполненнойРаботе(НоваяЗапись, Работа, КонструкторЭД, Ошибки);
		Объект.ВидРаб.Добавить(НоваяЗапись);
	КонецЕсли;
	Для Каждого Расшифровка Из Работа.РасшифровкиСтоимости Цикл
		НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвВидРабТип);
		ЗаполнитьСведенияОВыполненнойРаботе(НоваяЗапись, Расшифровка, КонструкторЭД, Ошибки);
		Объект.РасшифРес.Добавить(НоваяЗапись);
	КонецЦикла;
КонецПроцедуры

// Заполнение объекта из таблицы 5.9 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СвВидРаб - СписокXDTO
//  * ИнфПолРазд - СписокXDTO
//  Раздел - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьРаздел(Объект, Раздел, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Счетчик = КонструкторЭД.СледующийСквознойНомерРабот();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомСтр", Счетчик, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПозРаздСмет", Раздел.ПозицияПоСмете, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомРазд", Раздел.НомерРаздела, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимРаздел", Раздел.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтБезНДСРаздОтч", Раздел.Сумма, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтСНДСРаздОтч", Раздел.СуммаСНДС, Истина, Ошибки);
	Если ЗначениеЗаполнено(Раздел.СуммаНДС) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалРаздОтч", Раздел.СуммаНДС, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрочеркНалОтч", "-", Истина, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Раздел.ИтогиПоСмете) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтБезНДСРаздСмет", Раздел.ИтогиПоСмете.Сумма, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтСНДСРаздСмет", Раздел.ИтогиПоСмете.СуммаСНДС, Ложь, Ошибки);
		Если ЗначениеЗаполнено(Раздел.ИтогиПоСмете.СуммаНДС) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалРаздСмет", Раздел.ИтогиПоСмете.СуммаНДС, Ложь,
				Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрочеркНалСмет", "-", Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Раздел.ИтогиСНачалаСтроительства) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтБезНДСРаздСНач", Раздел.ИтогиСНачалаСтроительства.Сумма,
			Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтСНДСРаздСНач", Раздел.ИтогиСНачалаСтроительства.СуммаСНДС,
			Ложь, Ошибки);
		Если ЗначениеЗаполнено(Раздел.ИтогиСНачалаСтроительства.СуммаНДС) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалРаздСНач",
				Раздел.ИтогиСНачалаСтроительства.СуммаНДС, Ложь, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрочеркНалСНач", "-", Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	Для Каждого Работа Из Раздел.ВыполненныеРаботы Цикл
		НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвВидРабТип);
		ЗаполнитьСведенияОВыполненнойРаботе(НоваяЗапись, Работа, КонструкторЭД, Ошибки);
		Объект.СвВидРаб.Добавить(НоваяЗапись);
	КонецЦикла;
	Для Каждого ДополнительнаяИнформация Из Раздел.ДополнительнаяИнформация Цикл
		ДопИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьИнформационноеПоле(ДопИнформация, ДополнительнаяИнформация, КонструкторЭД, Ошибки);
		Объект.ИнфПолРазд.Добавить(ДопИнформация);
	КонецЦикла;
КонецПроцедуры

// Заполнение объекта из таблицы 5.10 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОФактеСдачиПриемкиРезультатовРабот(Объект, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	СведенияПередачи = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвПер);
	ЗаполнитьСведенияОПередачеРезультатовРабот(СведенияПередачи, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвПер", СведенияПередачи, Истина, Ошибки);
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ДополнительнаяИнформацияОСдачеПриемкеРабот) Тогда
		ДопИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьИнформационноеПоле(ДопИнформация, ИнформацияПодрядчика.ДополнительнаяИнформацияОСдачеПриемкеРабот,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфПолФХЖ3", ДопИнформация, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.11 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОПередачеРезультатовРабот(Объект, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СодОпер", ИнформацияПодрядчика.Содержание, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидОпер", ИнформацияПодрядчика.ВидОперации, Ложь, Ошибки);
	ДатаГотовности = ПредставлениеДаты(ИнформацияПодрядчика.ДатаГотовностиКСдачеРабот);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатПредъявЗак", ДатаГотовности, Ложь, Ошибки);
	ДатаНачала = ПредставлениеДаты(ИнформацияПодрядчика.НачалоРабот);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НачПерВДок", ДатаНачала, Ложь, Ошибки);
	ДатаОкончания = ПредставлениеДаты(ИнформацияПодрядчика.ОкончаниеРабот);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОконПерВДок", ДатаОкончания, Ложь, Ошибки);
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.ПредъявлениеОГотовностиРабот) Тогда
		Предъявление = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(Предъявление, ИнформацияПодрядчика.ПредъявлениеОГотовностиРабот,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдДокПредъявЗак", Предъявление, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.СрокПриемки) Тогда
		Если ТипЗнч(ИнформацияПодрядчика.СрокПриемки) = Тип(
			"ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ДатаПриемки") Тогда
			Срок = ПредставлениеДаты(ИнформацияПодрядчика.СрокПриемки.Дата);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СрокПринДат", Срок, Ложь, Ошибки);
		Иначе
			СрокВДнях = Строка(ИнформацияПодрядчика.СрокПриемки.ЧислоДней);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, ?(ИнформацияПодрядчика.СрокПриемки.ТолькоРабочиеДни,
				"СрокПринРабДн", "СрокПринКалендДн"), СрокВДнях, Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПодрядчика.СообщениеОГотовностиРабот) Тогда
		Сообщение = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(Сообщение, ИнформацияПодрядчика.СообщениеОГотовностиРабот,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСообОГотовн", Сообщение, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.12 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * УчетТребУдерж - СписокXDTO
//  * УчетТребУдержСНач - СписокXDTO
//  * ИнфПолСвОРасч - СписокXDTO
//  Расчеты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеРасчеты
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияПодрядчикаОРасчетах(Объект, Расчеты, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВсегоКОплатОтч", Расчеты.ОтчетныйПериод.ВсегоКОплате, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумУдержВсегоОтч", Расчеты.ОтчетныйПериод.СуммаУдержаний, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумТребВсегоОтч", Расчеты.ОтчетныйПериод.СуммаТребований, Истина,
		Ошибки);
	Для Каждого ТребованиеУдержание Из Расчеты.ОтчетныйПериод.РасшифровкаТребованийУдержаний Цикл
		НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумТребУдержТип);
		ЗаполнитьСуммуТребованийИУдержаний(НоваяЗапись, ТребованиеУдержание, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УчетТребУдерж", НоваяЗапись);
		Прервать; // ошибка в формате, доступна только одна запись
	КонецЦикла;
	Если ЗначениеЗаполнено(Расчеты.СНачалаСтроительства) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВсегоКОплатеСНач", Расчеты.СНачалаСтроительства.ВсегоКОплате,
			Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумУдержВсегоСНач",
			Расчеты.СНачалаСтроительства.СуммаУдержаний, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумТребВсегоСНач",
			Расчеты.СНачалаСтроительства.СуммаТребований, Ложь, Ошибки);
		Если ЗначениеЗаполнено(Расчеты.СНачалаСтроительства.РасшифровкаТребованийУдержаний) Тогда
			Для Каждого ТребованиеУдержание Из Расчеты.СНачалаСтроительства.РасшифровкаТребованийУдержаний Цикл
				НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумТребУдержТип);
				ЗаполнитьСуммуТребованийИУдержаний(НоваяЗапись, ТребованиеУдержание, КонструкторЭД, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УчетТребУдержСНач", НоваяЗапись);
				Прервать; // ошибка в формате, доступна только одна запись
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Для Каждого ДополнительнаяИнформация Из Расчеты.ДополнительнаяИнформация Цикл
		ДопИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьИнформационноеПоле(ДопИнформация, ДополнительнаяИнформация, КонструкторЭД, Ошибки);
		Объект.ИнфПолСвОРасч.Добавить(ДопИнформация);
	КонецЦикла;
КонецПроцедуры

// Заполнение объекта из таблицы 5.13 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Настройки - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеНастройкиДокумента
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьНастройкиДляФормированияДокумента(Объект, Настройки, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрНДСВИтог", Настройки.СпособРасчетаНДС, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрНакИтог", Настройки.СпособНакопленияИтогов, Истина, Ошибки);
	ЗначениеИндекса = "0000";
	Если ЗначениеЗаполнено(Настройки.ИндексБазисныхЦен) Тогда
		ЗначениеИндекса = Формат(Настройки.ИндексБазисныхЦен, "ДФ=yyyy;");
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрИндЦен", ЗначениеИндекса, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтепАгрег", Настройки.СтепеньАгрегации, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрСведРасчСогл", ?(Настройки.ТребуетсяСогласованиеРасчетов
		= Истина, "1", "0"), Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.14 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Подписант - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйПодписант
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОПодписанте(Объект, Подписант, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ПодписантПодрядчика = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантТип);
	ЗаполнитьСведенияОЛицеПодписывающемФайл(ПодписантПодрядчика, Подписант, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Подписант", ПодписантПодрядчика, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.15 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СвПрослежСтройка - СписокXDTO
//  * ИнфПолФХЖ2 - СписокXDTO
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//         - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРасшифровкаСтоимости
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОВыполненнойРаботе(Объект, Работа, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Счетчик = КонструкторЭД.СледующийСквознойНомерРабот();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомСтр", Счетчик, Ложь, Ошибки);
	ТипыРабот = ТипыРабот();
	Если ТипЗнч(Работа) = ТипыРабот.Работа Тогда
		ЕстьОшибки = ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВКоличестве) И ЗначениеЗаполнено(
			Работа.ОшибкиИОбстоятельстваВКоличестве.Ошибки) Или ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВСумме)
			И ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВСумме.Ошибки);
		ЕстьНовыеОбстоятельства = ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВКоличестве) И ЗначениеЗаполнено(
			Работа.ОшибкиИОбстоятельстваВКоличестве.Обстоятельства) Или ЗначениеЗаполнено(
			Работа.ОшибкиИОбстоятельстваВСумме) И ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВСумме.Обстоятельства);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПозСмет", Работа.ПозицияПоСмете, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрИспрОш", ?(ЕстьОшибки, "1", "0"), Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрНовОбст", ?(ЕстьновыеОбстоятельства, "1", "0"), Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТипЗатр", Работа.ТипЗатрат, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдОС", Работа.ИдентификаторОсновногоСредства, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовБезНДС", Работа.Сумма, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовУчНал", Работа.СуммаСНДС, Ложь, Ошибки);
		Если ТипЗнч(Работа.Количество) = Тип("Число") Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолТов", Работа.Количество, Ложь, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолТовТекст", Работа.Количество, Ложь, Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.ЕдиницаИзмерения) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКЕИ_Стройка", Работа.ЕдиницаИзмерения.Код, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимЕдИзм", Работа.ЕдиницаИзмерения.Наименование, Ложь,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОЕИ",
				Работа.ЕдиницаИзмерения.ОбщепринятоеНаименование, Ложь, Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.ПоказателиПоСмете) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтПоСметеБезНДС", Работа.ПоказателиПоСмете.Сумма, Ложь,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтПоСметеУчНал", Работа.ПоказателиПоСмете.СуммаСНДС, Ложь,
				Ошибки);
			Если ТипЗнч(Работа.ПоказателиПоСмете.Количество) = Тип("Число") Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолСмет", Работа.ПоказателиПоСмете.Количество, Ложь,
					Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолСметТекст", Работа.ПоказателиПоСмете.Количество,
					Ложь, Ошибки);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.ПоказателиСНачалаСтроительства) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтСНачСтрБезНДС",
				Работа.ПоказателиСНачалаСтроительства.Сумма, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовУчНалСНачСтр",
				Работа.ПоказателиСНачалаСтроительства.СуммаСНДС, Ложь, Ошибки);
			Если ТипЗнч(Работа.ПоказателиСНачалаСтроительства.Количество) = Тип("Число") Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолСНач",
					Работа.ПоказателиСНачалаСтроительства.Количество, Ложь, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолСНачТекст",
					Работа.ПоказателиСНачалаСтроительства.Количество, Ложь, Ошибки);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.СтранаПроисхождения) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодПроисх", Работа.СтранаПроисхождения.Код, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимСтрПр", Работа.СтранаПроисхождения.Наименование, Ложь,
				Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВСумме) Тогда
			ОшибкиИОбстоятельства = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИзмДаннПрПерТип);
			ЗаполнитьИзмененияВДанныхСНачалаСтроительства(ОшибкиИОбстоятельства, Работа.ОшибкиИОбстоятельстваВСумме,
				КонструкторЭД, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УчОшИНовОбстСт", ОшибкиИОбстоятельства, Ложь, Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.ОшибкиИОбстоятельстваВКоличестве) Тогда
			ОшибкиИОбстоятельства = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИзмДаннПрПерТип);
			ЗаполнитьИзмененияВДанныхСНачалаСтроительства(ОшибкиИОбстоятельства,
				Работа.ОшибкиИОбстоятельстваВКоличестве, КонструкторЭД, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УчОшИНовОбстКол", ОшибкиИОбстоятельства, Ложь, Ошибки);
		КонецЕсли;
		НалоговыеСтавки = НалоговыеСтавки();
		ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
		Если ИнформацияПодрядчика.НастройкиДокумента.СпособРасчетаНДС = СпособыРасчетаНДС().ТолькоВИтогах Тогда
			Если Работа.СтавкаНДС <> НалоговыеСтавки.НДС20 Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НалСтВИтог", Работа.СтавкаНДС, Ложь, Ошибки);
			КонецЕсли;
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НалСтПостр", Работа.СтавкаНДС, Ложь, Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.СтавкаНДС) Тогда
			СуммаНалога = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумНДСТип);
			ЗаполнитьСуммуНДС(СуммаНалога, Работа, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНал", СуммаНалога, Ложь, Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Работа.СведениеОПрослеживаемости) Тогда
			Для Каждого СведениеОПрослеживаемости Из Работа.СведениеОПрослеживаемости Цикл
				НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвПрослежСтройка);
				ЗаполнитьСведенияОПрослеживаемости(НоваяЗапись, СведениеОПрослеживаемости, Ошибки);
				Объект.СвПрослежСтройка.Добавить(НоваяЗапись);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Работа) = ТипыРабот.РасшифровкаСтоимости Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтПоСметеБезНДС", Работа.БазиснаяСтоимость, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КоэфПересч", Работа.КоэффициентПересчета, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовБезНДС", Работа.СуммаБезНДС, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомПоз", Работа.ПозицияПоАкту, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимТов", Работа.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЦенаТов", Работа.Цена, Истина, Ошибки);
	Для Каждого ДополнительнаяИнформация Из Работа.ДополнительнаяИнформация Цикл
		ДопИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьИнформационноеПоле(ДопИнформация, ДополнительнаяИнформация, КонструкторЭД, Ошибки);
		Объект.ИнфПолФХЖ2.Добавить(ДопИнформация);
	КонецЦикла;
КонецПроцедуры

// Заполнение объекта из таблицы 5.16 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведениеОПрослеживаемости - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПрослеживаемости
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОПрослеживаемости(Объект, СведениеОПрослеживаемости, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомТовПрослеж", СведениеОПрослеживаемости.НомерПартии, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЕдИзмПрослеж", СведениеОПрослеживаемости.ЕдиницаИзмерения.Код,
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимЕдИзмПрослеж",
		СведениеОПрослеживаемости.ЕдиницаИзмерения.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолВЕдПрослеж", СведениеОПрослеживаемости.Количество, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимТовВГрупп",
		СведениеОПрослеживаемости.НаименованиеВСоставеГруппы, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовПрослежБезНДС", СведениеОПрослеживаемости.СуммаБезНДС, Ложь,
		Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.17 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ОшибПрПер - СписокXDTO
//  * НовОбстПрПер - СписокXDTO
//  ОшибкиИОбстоятельства - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеОшибкиИОбстоятельства
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИзмененияВДанныхСНачалаСтроительства(Объект, ОшибкиИОбстоятельства, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Если ЗначениеЗаполнено(ОшибкиИОбстоятельства.Ошибки) Тогда
		Для Каждого Ошибка Из ОшибкиИОбстоятельства.Ошибки Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИзмененияТип);
			ЗаполнитьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(НоваяЗапись, Ошибка, КонструкторЭД,
				Ошибки);
			Объект.ОшибПрПер.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОшибкиИОбстоятельства.Обстоятельства) Тогда
		Для Каждого Обстоятельство Из ОшибкиИОбстоятельства.Обстоятельства Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИзмененияТип);
			ЗаполнитьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(НоваяЗапись, Обстоятельство,
				КонструкторЭД, Ошибки);
			Объект.НовОбстПрПер.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.18 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ОписаниеИзменений - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСтруктураИзменений
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(Объект, ОписаниеИзменений, КонструкторЭД,
	Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Если ОписаниеИзменений.ДельтаСуммы > 0 Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УвелДен", ОписаниеИзменений.ДельтаСуммы, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РНПТУвел", ОписаниеИзменений.НомерПартии, Ложь, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УменьшДен", ОписаниеИзменений.ДельтаСуммы, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РНПТУменьш", ОписаниеИзменений.НомерПартии, Ложь, Ошибки);
	КонецЕсли;
	Если ОписаниеИзменений.ДельтаКоличества > 0 Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УвелКол", ОписаниеИзменений.ДельтаКоличества, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РНПТУвел", ОписаниеИзменений.НомерПартии, Ложь, Ошибки);
	ИначеЕсли ОписаниеИзменений.ДельтаКоличества < 0 Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УменьшКол", ОписаниеИзменений.ДельтаКоличества, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РНПТУменьш", ОписаниеИзменений.НомерПартии, Ложь, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НетИзмКол", "без изм", Истина, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеИзменений.Основание) Тогда
		Основание = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(Основание, ОписаниеИзменений.Основание, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрДокИзмСНачСтр", Основание, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.19 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ТребованиеУдержание - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеТребование
//                      - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеУдержание
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСуммуТребованийИУдержаний(Объект, ТребованиеУдержание, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Если ТипЗнч(ТребованиеУдержание)
		= Тип("ОбработкаТабличнаяЧастьСтрока.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.Требования") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидТреб", ТребованиеУдержание.Вид, Истина, Ошибки);
		Если ЗначениеЗаполнено(ТребованиеУдержание.ИнойВид) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидТреб", ТипыТребований().ИныеТребования, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнВидТреб", ТребованиеУдержание.ИнойВид, Ложь, Ошибки);
		КонецЕсли;
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидУдерж", ТребованиеУдержание.Вид, Истина, Ошибки);
		Если ЗначениеЗаполнено(ТребованиеУдержание.ИнойВид) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидУдерж", ТипыУдержаний().ИныеУдержания, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнВидУдерж", ТребованиеУдержание.ИнойВид, Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумТребУдерж", ТребованиеУдержание.Сумма, Истина, Ошибки);
	Если ЗначениеЗаполнено(ТребованиеУдержание.ДокументПодтверждение) Тогда
		Подтверждение = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРеквДокТип);
		ЗаполнитьИдентифицирующиеПризнакиДокумента(Подтверждение, ТребованиеУдержание.ДокументПодтверждение,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДокПодтСумУд", Подтверждение, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.20 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Документ - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеОписаниеДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИдентифицирующиеПризнакиДокумента(Объект, Документ, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Реквизиты = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.РеквДокТип);
	ЗаполнитьРеквизитыДокумента(Реквизиты, Документ, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТипИдДок", Реквизиты, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.21 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ИдРекСост - СписокXDTO
//  Документ - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеОписаниеДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьРеквизитыДокумента(Объект, Документ, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимДок", Документ.Наименование, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерДок", Документ.Номер, Ложь, Ошибки);
	ДатаДокумента = ПредставлениеДаты(Документ.Дата);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаДок", ДатаДокумента, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдДок", Документ.ГосНомер, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДопСведДок", Документ.ДополнительныеСведения, Ложь, Ошибки);
	Если ЗначениеЗаполнено(Документ.Стороны) Тогда
		Для Каждого Сторона Из Документ.Стороны Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдРекСостТип);
			ЗаполнитьИдентифицирующиеРеквизитыСубъектаДокумента(НоваяЗапись, Сторона, КонструкторЭД, Ошибки);
			Объект.ИдРекСост.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.22 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Сторона - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностраннойОрганизации
//          - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностранногоГражданина
//          - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиОрганаИсполнительнойВласти
//          - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиФизЛица
//          - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиЮрЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИдентифицирующиеРеквизитыСубъектаДокумента(Объект, Сторона, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ТипыСторон = ТипыСубъектовДокумента();
	Если ТипЗнч(Сторона) = ТипыСторон.ИностранныйГражданин Тогда
		ДанныеИГ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ДаннИноТип);
		ЗаполнитьДанныеИностраннойОрганизацииГражданина(ДанныеИГ, Сторона, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДаннИно", ДанныеИГ, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Сторона) = ТипыСторон.ИностраннаяОрганизация Тогда
		ДанныеИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ДаннИноТип);
		ЗаполнитьДанныеИностраннойОрганизацииГражданина(ДанныеИО, Сторона, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДаннИно", ДанныеИО, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Сторона) = ТипыСторон.ОрганИсполнительнойВласти Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОИВ", Сторона.Наименование, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Сторона) = ТипыСторон.ЮридическоеЛицо Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННЮЛ", Сторона.ИНН, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", Сторона.ИНН, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.23 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Сторона - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностраннойОрганизации
//          - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностранногоГражданина
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДанныеИностраннойОрганизацииГражданина(Объект, Сторона, Ошибки)
	ТипыСторон = ТипыСубъектовДокумента();
	ЭтоОрганизация = ТипЗнч(Сторона) = ТипыСторон.ИностраннаяОрганизация;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСтат", ?(ЭтоОрганизация, "ИО", "ИГ"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Стран", Сторона.Страна, ЭтоОрганизация, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наим", ?(ЭтоОрганизация, Сторона.Наименование, Сторона.ФИО),
		Не ЭтоОрганизация, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", Сторона.Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", Сторона.ИныеСведения, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.24 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОСторонахДоговораПодряда(Объект, СторонаДоговора, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрИспКППКр", ?(СторонаДоговора.КрупнейшийНалогоплательщик, "1",
		"0"), Ложь, Ошибки);
	Участник = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.УчастникТип);
	ЗаполнитьСведенияОбУчастникеФХЖ(Участник, СторонаДоговора, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвСторДог", Участник, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.25 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбУчастникеФХЖ(Объект, СторонаДоговора, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКПО", СторонаДоговора.КодОКПО, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтруктПодр", СторонаДоговора.СтруктурноеПодразделение, Ложь,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфДляУчаст", СторонаДоговора.ИнформацияДляУчастника, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КраткНазв", СторонаДоговора.КраткоеНазвание, Ложь, Ошибки);
	Сведения = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдСв);
	ЗаполнитьИдентификационныеСведения(Сведения, СторонаДоговора.СведенияОЛице, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСв", Сведения, Истина, Ошибки);
	Если ЗначениеЗаполнено(СторонаДоговора.Адрес) Тогда
		Адрес = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдресТип);
		ЗаполнитьАдресМестонахождения(Адрес, СторонаДоговора.Адрес, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Адрес", Адрес, Ложь, Ошибки);
	КонецЕсли;
	КонтактнаяИнформация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.КонтактТип);
	ЗаполнитьКонтактныеДанные(КонтактнаяИнформация, СторонаДоговора, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Контакт", КонтактнаяИнформация, Ложь, Ошибки);
	Если ЗначениеЗаполнено(СторонаДоговора.БанковскиеРеквизиты) Тогда
		Реквизиты = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.БанкРекв);
		ЗаполнитьБанковскиеРеквизиты(Реквизиты, СторонаДоговора.БанковскиеРеквизиты, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БанкРекв", Реквизиты, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.26 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбОрганизации
//                - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПредпринимателе
//                - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбИностраннойОрганизации
//                - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОФизическомЛице
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИдентификационныеСведения(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ТипыСторон = ТипыСторонПодряда();
	Если ТипЗнч(СведенияОЛице) = ТипыСторон.Предприниматель Тогда
		Предприниматель = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвИП);
		ЗаполнитьСведенияОбИндивидуальномПредпринимателе(Предприниматель, СведенияОЛице, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИП", Предприниматель, Истина, Ошибки);
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.ИностраннаяОрганизация Тогда
		ИностраннаяОрганизация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвИнНеУч);
		ЗаполнитьСведенияОбИностраннойОрганизации(ИностраннаяОрганизация, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИнНеУч", ИностраннаяОрганизация, Истина, Ошибки);
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.Организация Тогда
		Организация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвЮЛУч);
		ЗаполнитьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Организация, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвЮЛУч", Организация, Истина, Ошибки);
	Иначе
		ФизЛицо = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвФЛУчастФХЖ);
		ЗаполнитьСведенияОФизическомЛице(ФизЛицо, СведенияОЛице, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвФЛУчастФХЖ", ФизЛицо, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.27 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПредпринимателе
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбИндивидуальномПредпринимателе(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", СведенияОЛице.ИНН, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОГРНИП", СведенияОЛице.ОГРН, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, СведенияОЛице.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.28 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбОрганизации
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Объект, СведенияОЛице, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОрг", СведенияОЛице.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННЮЛ", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КПП", СведенияОЛице.КПП, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.29 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбИностраннойОрганизации
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбИностраннойОрганизации(Объект, СведенияОЛице, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОрг", СведенияОЛице.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", СведенияОЛице.Идентификатор, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.30 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОФизическомЛице
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОФизическомЛице(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", СведенияОЛице.ИНН, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, СведенияОЛице.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.31 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеБанковскиеРеквизиты
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьБанковскиеРеквизиты(Объект, БанковскиеРеквизиты, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерСчета", БанковскиеРеквизиты.НомерСчета, Ложь, Ошибки);
	СведенияОБанке = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвБанк);
	ЗаполнитьСведенияОБанке(СведенияОБанке, БанковскиеРеквизиты, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвБанк", СведенияОБанке, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.32 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеБанковскиеРеквизиты
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОБанке(Объект, БанковскиеРеквизиты, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимБанк", БанковскиеРеквизиты.Наименование, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БИК", БанковскиеРеквизиты.БИК, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КорСчет", БанковскиеРеквизиты.КорреспондентскийСчет, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.33 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресРФ
//        - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресВСвободнойФорме
//        - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресПоНомеруГАР
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдресМестонахождения(Объект, Адрес, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ТипыАдресов = ТипыАдресов();
	Если ТипЗнч(Адрес) = ТипыАдресов.РФ Тогда
		АдресРФ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрРФТип);
		ЗаполнитьАдресРоссийскойФедерации(АдресРФ, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрРФ", АдресРФ, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Адрес) = ТипыАдресов.ВСвободнойФорме Тогда
		АдресВСвободнойФорме = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрИнфТип);
		ЗаполнитьИнформациюОбАдресе(АдресВСвободнойФорме, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрИнф", АдресВСвободнойФорме, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодГАР", Адрес.Номер, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.34 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресРФ
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдресРоссийскойФедерации(Объект, Адрес, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Индекс", Адрес.Индекс, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодРегион", Адрес.КодРегиона, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Район", Адрес.Район, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Город", Адрес.Город, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаселПункт", Адрес.НаселенныйПункт, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Улица", Адрес.Улица, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Дом", Адрес.Дом, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Корпус", Адрес.Корпус, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Кварт", Адрес.Квартира, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.35 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресВСвободнойФорме
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИнформациюОбАдресе(Объект, Адрес, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСтр", Адрес.КодСтраны, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрТекст", Адрес.Адрес, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.36 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СумПоСтавке - СписокXDTO
//  Итоги - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСтруктураИтогов
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьВсегоПоАкту(Объект, Итоги, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовБезНДСВсего", Итоги.Сумма, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовУчНалВсего", Итоги.СуммаСНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтУчНалВсВалДог", Итоги.СуммаСНДСВВалюте, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалВсВалДог", Итоги.СуммаНДСВВалюте, Ложь, Ошибки);
	Если ЗначениеЗаполнено(Итоги.СуммаНДС) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалВсего", Итоги.СуммаНДС, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОтсСумНДС", "-", Истина, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Итоги.НалогиПоСтавкам) Тогда
		Для Каждого СтавкаИНалог Из Итоги.НалогиПоСтавкам Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумПоСтавке);
			ЗаполнитьСуммуНДСВРазбивкеПоСтавкам(НоваяЗапись, СтавкаИНалог, КонструкторЭД, Ошибки);
			Объект.СумПоСтавке.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.37 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * НомПозСт - СписокXDTO
//  СтавкаИНалог - КлючИЗначение:
//  * Ключ - Строка - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НалоговыеСтавки
//  * Значение - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйНалогПоСтавке
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСуммуНДСВРазбивкеПоСтавкам(Объект, СтавкаИНалог, КонструкторЭД, Ошибки)
	Ставка = СтавкаИНалог.Ключ;
	Налог = СтавкаИНалог.Значение;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НалСт", Ставка, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НалБаза", Налог.НалоговаяБаза, Истина, Ошибки);
	НалоговыеСтавки = НалоговыеСтавки();
	Если Ставка <> НалоговыеСтавки.НДС20 И ЗначениеЗаполнено(Налог.ПозицииАкта) Тогда
			Для Каждого Позиция Из Налог.ПозицииАкта Цикл
				Объект.НомПозСт.Добавить(Позиция);
			КонецЦикла;
	КонецЕсли;
	Если Ставка = НалоговыеСтавки.БезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НеобНДС", "без НДС", Истина, Ошибки);
	ИначеЕсли Ставка = НалоговыеСтавки.НДСАгента Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НДСНалАг", "-", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНДС", Налог.Сумма, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.38 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * Тлф - СписокXDTO
//  * ЭлПочта - СписокXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьКонтактныеДанные(Объект, СторонаДоговора, Ошибки)
	Если ЗначениеЗаполнено(СторонаДоговора.НомераТелефонов) Тогда
		Для Каждого Телефон Из СторонаДоговора.НомераТелефонов Цикл
			Объект.Тлф.Добавить(Телефон);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СторонаДоговора.АдресаЭлектроннойПочты) Тогда
		Для Каждого Адрес Из СторонаДоговора.АдресаЭлектроннойПочты Цикл
			Объект.ЭлПочта.Добавить(Адрес);
		КонецЦикла;
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнКонт", СторонаДоговора.ИныеКонтактныеСведения, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.39 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСуммуНДС(Объект, Работа, Ошибки)
	НалоговыеСтавки = НалоговыеСтавки();
	Если Работа.СтавкаНДС = НалоговыеСтавки.БезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БезНДС", "Без НДС", Истина, Ошибки);
	ИначеЕсли Работа.СтавкаНДС = НалоговыеСтавки.НДСАгента Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДефНДС", "-", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНал", Работа.СуммаНДС, Истина, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.40 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Подписант - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйПодписант
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОЛицеПодписывающемФайл(Объект, Подписант, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтатПодп", Подписант.Статус, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТипПодпис", Подписант.ТипПодписи, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСистХран", Подписант.URLДоверенности, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Должн", Подписант.Должность, Ложь, Ошибки);
	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, Подписант.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
	Если ЗначениеЗаполнено(Подписант.ЭлектроннаяДоверенность) Тогда
		Доверенность = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвДовер);
		ЗаполнитьСведенияОбЭлектроннойДоверенности(Доверенность, Подписант.ЭлектроннаяДоверенность, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвДовер", Доверенность, Ложь, Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подписант.БумажнаяДоверенность) Тогда
		Доверенность = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвДоверБум);
		ЗаполнитьСведенияОБумажнойДоверенности(Доверенность, Подписант.БумажнаяДоверенность, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвДоверБум", Доверенность, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.41 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Доверенность - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяЭлектроннаяДоверенность
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбЭлектроннойДоверенности(Объект, Доверенность, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомДовер", Доверенность.Номер, Ложь, Ошибки);
	ДатаВыдачи = ПредставлениеДаты(Доверенность.ДатаВыдачи);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаНач", ДатаВыдачи, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВнНомДовер", Доверенность.ВнутреннийНомер, Ложь, Ошибки);
	ДатаРегистрации = ПредставлениеДаты(Доверенность.ДатаВнутреннейРегистрации);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаВнРегДовер", ДатаРегистрации, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СведСистОтм", Доверенность.СистемаОтменыДоверенности, Ложь, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.42 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Доверенность - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяБумажнаяДоверенность
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОБумажнойДоверенности(Объект, Доверенность, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ДатаВыдачи = ПредставлениеДаты(Доверенность.ДатаВыдачи);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаНач", ДатаВыдачи, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВнНомДовер", Доверенность.ВнутреннийНомер, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИдДовер", Доверенность.СведенияОДоверителе, Ложь, Ошибки);
	Если ЗначениеЗаполнено(Доверенность.ПодписалФИО) Тогда
		ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
		ЗаполнитьФИО(ФИО, Доверенность.ПодписалФИО, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Ложь, Ошибки);
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.43 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ТекстИнф - СписокXDTO
//  ДополнительнаяИнформация - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяДополнительнаяИнформация
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИнформационноеПоле(Объект, ДополнительнаяИнформация, КонструкторЭД, Ошибки)
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдФайлИнфПол", ДополнительнаяИнформация.ИдентификаторФайла, Ложь,
		Ошибки);
	Если ЗначениеЗаполнено(ДополнительнаяИнформация.Поля) Тогда
		Для Каждого Поле Из ДополнительнаяИнформация.Поля Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ТекстИнфТип);
			ЗаполнитьТекстовуюИнформацию(НоваяЗапись, Поле, Ошибки);
			Объект.ТекстИнф.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполнение объекта из таблицы 5.44 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Поле - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеДополнительноеПоле
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьТекстовуюИнформацию(Объект, Поле, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", Поле.Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Значение", Поле.Значение, Истина, Ошибки);
КонецПроцедуры

// Заполнение объекта из таблицы 5.46 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ФИО - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеФИО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьФИО(Объект, ФИО, Ошибки)
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Фамилия", ФИО.Фамилия, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Имя", ФИО.Имя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Отчество", ФИО.Отчество, Ложь, Ошибки);
КонецПроцедуры

// BSLLS:Typo-on

#КонецОбласти

#Область ЧтениеЭлектронногоДокумента

// BSLLS:Typo-off

// Чтение объекта из таблицы 5.1 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьФайлИнформацииПодрядчика(Объект, КонструкторЭД)
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Документ");
	ПрочитатьДокументИнформацииПодрядчика(Документ, КонструкторЭД);
КонецПроцедуры

// Чтение объекта из таблицы 5.2 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ПодписантПодр - СписокXDTO
//  * НаимИСт - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьДокументИнформацииПодрядчика(Объект, КонструкторЭД)
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	ИнформацияПодрядчика.Составитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимЭкСубСост");
	ДоверенностьЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОснДовОргСост");
	Если ТипЗнч(ДоверенностьЭД) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ДоверенностьНаСоставление = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьРеквизитыДокумента(ДоверенностьЭД, ИнформацияПодрядчика.ДоверенностьНаСоставление, КонструкторЭД);
	КонецЕсли;
	СведенияФХЖ1 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвАктСдПр");
	ПрочитатьСведенияОбУчастникахФХЖ1(СведенияФХЖ1, КонструкторЭД);
	ВыполненныеРаботы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимИСт");
	ПрочитатьИнформациюОВыполненныхРаботах(ВыполненныеРаботы, ИнформацияПодрядчика.ВыполненныеРаботы, КонструкторЭД);
	СведенияОПередачеРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвПродПер");
	ПрочитатьСведенияОФактеСдачиПриемкиРезультатовРабот(СведенияОПередачеРабот, КонструкторЭД);
	Расчеты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвОРасч");
	Если ТипЗнч(Расчеты) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.Расчеты = КонструкторЭД.НовыеРасчеты();
		ПрочитатьСведенияПодрядчикаОРасчетах(Расчеты, ИнформацияПодрядчика.Расчеты, КонструкторЭД);
	КонецЕсли;
	ВсегоЗаОтчетныйПериод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВсегоАктОтч");
	ПрочитатьВсегоПоАкту(ВсегоЗаОтчетныйПериод, ИнформацияПодрядчика.Итоги.ОтчетныйПериод, КонструкторЭД);
	ВсегоСНачалаСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВсегоАктСНач");
	Если ТипЗнч(ВсегоСНачалаСтроительства) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.Итоги.СНачалаСтроительства = КонструкторЭД.НоваяСтруктураИтогов();
		ПрочитатьВсегоПоАкту(ВсегоСНачалаСтроительства, ИнформацияПодрядчика.Итоги.СНачалаСтроительства, КонструкторЭД);
	КонецЕсли;
	НастройкиДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НастрФормДок");
	Если ТипЗнч(НастройкиДокумента) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.НастройкиДокумента = КонструкторЭД.НовыеНастройкиДокумента();
		ПрочитатьНастройкиДляФормированияДокумента(НастройкиДокумента, ИнформацияПодрядчика.НастройкиДокумента);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.3 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ОснСдачи - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОбУчастникахФХЖ1(Объект, КонструкторЭД)
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	ИнформацияПодрядчика.НомерАкта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерДок");
	ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаДок");
	ИнформацияПодрядчика.ДатаАкта = ДатаИЗПредставления(ДатаДокумента);
	ИнформацияПодрядчика.Стройка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОб");
	ИнформацияПодрядчика.КодВалютыДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодОКВДог");
	ИнформацияПодрядчика.ИдентификаторОсновногоСредства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдОбОСИтСтр");
	ДоговорПодряда = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдДог");
	Если ТипЗнч(ДоговорПодряда) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ДоговорПодряда = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(ДоговорПодряда, ИнформацияПодрядчика.ДоговорПодряда, КонструкторЭД);
	КонецЕсли;
	Исправление = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИспрАктСдПр");
	Если ТипЗнч(Исправление) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ИсправлениеАкта = КонструкторЭД.НовоеИсправлениеАкта();
		ПрочитатьИсправлениеАкта(Исправление, ИнформацияПодрядчика.ИсправлениеАкта);
	КонецЕсли;
	Подрядчик = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвПодр");
	ИнформацияПодрядчика.Подрядчик = КонструкторЭД.НоваяСторонаДоговораПодряда();
	ПрочитатьСведенияОСторонахДоговораПодряда(Подрядчик, ИнформацияПодрядчика.Подрядчик, КонструкторЭД);
	Заказчик = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвЗак");
	ИнформацияПодрядчика.Заказчик = КонструкторЭД.НоваяСторонаДоговораПодряда();
	ПрочитатьСведенияОСторонахДоговораПодряда(Заказчик, ИнформацияПодрядчика.Заказчик, КонструкторЭД);
	СведенияОСтроительстве = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОсновСтроит");
	Если ТипЗнч(СведенияОСтроительстве) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ИнформацияОСтроительстве = КонструкторЭД.НоваяИнформацияОСтроительстве();
		ПрочитатьДанныеОбОснованияхИОбстоятельствахСтроительства(СведенияОСтроительстве,
			ИнформацияПодрядчика.ИнформацияОСтроительстве, КонструкторЭД);
	КонецЕсли;
	Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "МестВыпРаб");
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.МестоВыполненияРабот = ПрочитатьАдресМестонахождения(Адрес, КонструкторЭД);
	КонецЕсли;
	Смета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСмет");
	Если ТипЗнч(Смета) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.СведенияОСмете = КонструкторЭД.НовыеСведенияОСмете();
		ИнформацияПодрядчика.СведенияОСмете.Смета = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(Смета, ИнформацияПодрядчика.СведенияОСмете.Смета, КонструкторЭД);
		ИзменениеСметы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИзмСмет");
		Если ТипЗнч(ИзменениеСметы) = Тип("ОбъектXDTO") Тогда
			ИнформацияПодрядчика.СведенияОСмете.ИзменениеСметы = КонструкторЭД.НовоеИзменениеСметы();
			ПрочитатьИзменениеСметы(ИзменениеСметы, ИнформацияПодрядчика.СведенияОСмете.ИзменениеСметы, КонструкторЭД);
		КонецЕсли;
	КонецЕсли;
	Основания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОснСдачи");
	Если ТипЗнч(Основания) = Тип("СписокXDTO") Тогда
		Для Каждого Основание Из Основания Цикл
			НовоеОснование = КонструкторЭД.НовоеОписаниеДокумента();
			ПрочитатьИдентифицирующиеПризнакиДокумента(Основание, НовоеОснование, КонструкторЭД);
		КонецЦикла;
	КонецЕсли;
	ДенежноеИзмерение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДенИзм");
	ПрочитатьЕдиницуДенежногоИзмерения(ДенежноеИзмерение, ИнформацияПодрядчика.Валюта);
	ДопИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПолФХЖ1");
	Если ТипЗнч(ДопИнформация) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ДополнительнаяИнформацияОбУчастниках = КонструкторЭД.НоваяДополнительнаяИнформация();
		ПрочитатьИнформационноеПоле(ДопИнформация, ИнформацияПодрядчика.ДополнительнаяИнформацияОбУчастниках,
			КонструкторЭД);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.4 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ИсправлениеАкта - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеИсправлениеАкта
//
Процедура ПрочитатьИсправлениеАкта(Объект, ИсправлениеАкта)
	ИсправлениеАкта.НомерИсправления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомИспр");
	ДатаИсправления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаИспр");
	ИсправлениеАкта.ДатаИсправления = ДатаИзПредставления(ДатаИсправления);
КонецПроцедуры

// Чтение объекта из таблицы 5.5 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ИдСубПодрСтр - СписокXDTO
//  ИнформацияОСтроительстве - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяИнформацияОСтроительстве
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьДанныеОбОснованияхИОбстоятельствахСтроительства(Объект, ИнформацияОСтроительстве, КонструкторЭД)
	ИнформацияОСтроительстве.ДляГосИМуниципальныхНужд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрГосМун") = "1";
	ИнформацияОСтроительстве.ДоговорНаНесколькоОбъектов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
		"ПрНескОбъект") = "1";
	СтроительныйКонтракт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдКонтрСтр");
	Если ТипЗнч(СтроительныйКонтракт) = Тип("ОбъектXDTO") Тогда
		ИнформацияОСтроительстве.Контракт = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(СтроительныйКонтракт, ИнформацияОСтроительстве.Контракт,
			КонструкторЭД);
		ИнформацияОСтроительстве.НомерКонтракта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "РеестрНомКонт");
	КонецЕсли;
	ИнвесторСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдИнвСтр");
	Если ТипЗнч(ИнвесторСтроительства) = Тип("ОбъектXDTO") Тогда
		ИнформацияОСтроительстве.Инвестор = ПрочитатьИдентифицирующиеРеквизитыСубъектаДокумента(ИнвесторСтроительства,
			КонструкторЭД);
	КонецЕсли;
	ЗаказчикСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдЗакСтр");
	Если ТипЗнч(ЗаказчикСтроительства) = Тип("ОбъектXDTO") Тогда
		ИнформацияОСтроительстве.Заказчик = ПрочитатьИдентифицирующиеРеквизитыСубъектаДокумента(ЗаказчикСтроительства,
			КонструкторЭД);
	КонецЕсли;
	Субподрядчики = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСубПодрСтр");
	Если ТипЗнч(ИнформацияОСтроительстве.Субподрядчики) = Тип("СписокXDTO") Тогда
		Для Каждого Субподрядчик Из Субподрядчики Цикл
			НоваяЗапись = ПрочитатьИдентифицирующиеРеквизитыСубъектаДокумента(Субподрядчик, КонструкторЭД);
			ИнформацияОСтроительстве.Субподрядчики.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.6 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Изменениесметы - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеИзменениеСметы
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИзменениеСметы(Объект, ИзменениеСметы, КонструкторЭД)
	ИзменениеСметы.Версия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСмет");
	ДопСоглашение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдДопСогл");
	ПрочитатьИдентифицирующиеПризнакиДокумента(ДопСоглашение, ИзменениеСметы.ДополнительноеСоглашение, КонструкторЭД);
КонецПроцедуры

// Чтение объекта из таблицы 5.7 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Валюта - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяВалюта
//
Процедура ПрочитатьЕдиницуДенежногоИзмерения(Объект, Валюта)
	Валюта.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодОКВ");
	Валюта.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОКВ");
	Валюта.Курс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КурсВал");
	Валюта.Номинал = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомВал");
КонецПроцедуры

// Чтение объекта из таблицы 5.8 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ВидРаб - СписокXDTO
//  * Раздел - СписокXDTO
//  * РасшифРес - СписокXDTO
//  ВыполненныеРаботы - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//                    - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИнформациюОВыполненныхРаботах(Объект, ВыполненныеРаботы, КонструкторЭД)
	НоваяЗапись = Неопределено;
	ПредыдущийРазделИлиРабота = Неопределено;
	Для Каждого Запись Из Объект Цикл
		Разделы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Запись, "Раздел");
		Если ТипЗнч(Разделы) = Тип("СписокXDTO") Тогда
			Для Каждого Раздел Из Разделы Цикл
				НоваяЗапись = КонструкторЭД.НовыйРаздел();
				ПрочитатьРаздел(Раздел, НоваяЗапись, КонструкторЭД);
				ВыполненныеРаботы.Добавить(НоваяЗапись);
				ПредыдущийРазделИлиРабота = НоваяЗапись;
			КонецЦикла;
		КонецЕсли;
		Работы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Запись, "ВидРаб");
		Если ТипЗнч(Работы) = Тип("СписокXDTO") Тогда
			Для Каждого Работа Из Работы Цикл
				НоваяЗапись = КонструкторЭД.НоваяРабота();
				ПрочитатьСведенияОВыполненнойРаботе(Работа, НоваяЗапись, КонструкторЭД);
				ВыполненныеРаботы.Добавить(НоваяЗапись);
				ПредыдущийРазделИлиРабота = НоваяЗапись;
			КонецЦикла;
		КонецЕсли;
		Расшифровки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Запись, "РасшифРес");
		Если ТипЗнч(Расшифровки) = Тип("СписокXDTO") Тогда
			Для Каждого Расшифровка Из Расшифровки Цикл
				Если ЗначениеЗаполнено(ПредыдущийРазделИлиРабота) Тогда
					НоваяЗапись = КонструкторЭД.НоваяРасшифровкаСтоимости();
					ПрочитатьСведенияОВыполненнойРаботе(Расшифровка, НоваяЗапись, КонструкторЭД);
					ПредыдущийРазделИлиРабота.РасшифровкиСтоимости.Добавить(НоваяЗапись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Чтение объекта из таблицы 5.9 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СвВидРаб - СписокXDTO
//  * ИнфПолРазд - СписокXDTO
//  Раздел - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьРаздел(Объект, Раздел, КонструкторЭД)
	Раздел.СлужебныйНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомСтр");
	Раздел.ПозицияПоСмете = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПозРаздСмет");
	Раздел.НомерРаздела = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомРазд");
	Раздел.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимРаздел");
	Раздел.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтБезНДСРаздОтч");
	Раздел.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтСНДСРаздОтч");
	Раздел.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалРаздОтч");
	СуммаПоСмете = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтБезНДСРаздСмет");
	Если ЗначениеЗаполнено(СуммаПоСмете) Тогда
		Раздел.ИтогиПоСмете = КонструкторЭД.НовыеИтогиРаздела();
		Раздел.ИтогиПоСмете.Сумма = СуммаПоСмете;
		Раздел.ИтогиПоСмете.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтСНДСРаздСмет");
		Раздел.ИтогиПоСмете.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалРаздСмет");
	КонецЕсли;
	СуммаСНачалаСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтБезНДСРаздСНач");
	Если ТипЗнч(Раздел.ИтогиСНачалаСтроительства) = Тип("ОбъектXDTO") Тогда
		Раздел.ИтогиСНачалаСтроительства = КонструкторЭД.НовыеИтогиРаздела();
		Раздел.ИтогиСНачалаСтроительства.Сумма = СуммаСНачалаСтроительства;
		Раздел.ИтогиСНачалаСтроительства.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтСНДСРаздСНач");
		Раздел.ИтогиСНачалаСтроительства.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалРаздСНач");
	КонецЕсли;
	Работы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвВидРаб");
	Для Каждого Работа Из Работы Цикл
		НоваяЗапись = КонструкторЭД.НоваяРабота();
		ПрочитатьСведенияОВыполненнойРаботе(Работа, НоваяЗапись, КонструкторЭД);
		Раздел.ВыполненныеРаботы.Добавить(НоваяЗапись);
	КонецЦикла;
	СписокИнформации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПолРазд");
	Для Каждого ДополнительнаяИнформация Из СписокИнформации Цикл
		НоваяИнформация = КонструкторЭД.НоваяДополнительнаяИнформация();
		ПрочитатьИнформационноеПоле(ДополнительнаяИнформация, НоваяИнформация, КонструкторЭД);
		Раздел.ДополнительнаяИнформация.Добавить(НоваяИнформация);
	КонецЦикла;
КонецПроцедуры

// Чтение объекта из таблицы 5.10 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОФактеСдачиПриемкиРезультатовРабот(Объект, КонструкторЭД)
	СведенияПередачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвПер");
	ПрочитатьСведенияОПередачеРезультатовРабот(СведенияПередачи, КонструкторЭД);
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	ДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПолФХЖ3");
	Если ТипЗнч(ДополнительнаяИнформация) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ДополнительнаяИнформацияОСдачеПриемкеРабот = КонструкторЭД.НоваяДополнительнаяИнформация();
		ПрочитатьИнформационноеПоле(ДополнительнаяИнформация,
			ИнформацияПодрядчика.ДополнительнаяИнформацияОСдачеПриемкеРабот, КонструкторЭД);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.11 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОПередачеРезультатовРабот(Объект, КонструкторЭД)
	ИнформацияПодрядчика = КонструкторЭД.ИнформацияПодрядчика();
	ИнформацияПодрядчика.Содержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СодОпер");
	ИнформацияПодрядчика.ВидОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидОпер");
	ДатаГотовности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатПредъявЗак");
	ИнформацияПодрядчика.ДатаГотовностиКСдачеРабот = ДатаИзПредставления(ДатаГотовности);
	ДатаНачала = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НачПерВДок");
	ИнформацияПодрядчика.НачалоРабот = ДатаИзПредставления(ДатаНачала);
	ДатаОкончания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОконПерВДок");
	ИнформацияПодрядчика.ОкончаниеРабот = ДатаИзПредставления(ДатаОкончания);
	ПредъявлениеОГотовностиРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдДокПредъявЗак");
	Если ТипЗнч(ПредъявлениеОГотовностиРабот) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.ПредъявлениеОГотовностиРабот = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(ПредъявлениеОГотовностиРабот,
			ИнформацияПодрядчика.ПредъявлениеОГотовностиРабот, КонструкторЭД);
	КонецЕсли;
	Срок_Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокПринДат");
	Если ЗначениеЗаполнено(Срок_Дата) Тогда
		Срок = ДатаИзПредставления(Срок_Дата);
		ИнформацияПодрядчика.СрокПриемки = КонструкторЭД.НовыйСрокПоДате(Срок);
	Иначе
		СрокРабДней = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокПринРабДн");
		Если ЗначениеЗаполнено(СрокРабДней) Тогда
			ИнформацияПодрядчика.СрокПриемки = КонструкторЭД.НовыйСрокПоКоличествуДней(СрокРабДней, Истина);
		Иначе
			КоличествоДней = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокПринКалендДн");
			ИнформацияПодрядчика.СрокПриемки = КонструкторЭД.НовыйСрокПоКоличествуДней(КоличествоДней, Ложь);
		КонецЕсли;
	КонецЕсли;
	СообщениеОГотовностиРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСообОГотовн");
	Если ТипЗнч(СообщениеОГотовностиРабот) = Тип("ОбъектXDTO") Тогда
		ИнформацияПодрядчика.СообщениеОГотовностиРабот = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(СообщениеОГотовностиРабот,
			ИнформацияПодрядчика.СообщениеОГотовностиРабот, КонструкторЭД);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.12 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * УчетТребУдерж - СписокXDTO
//  * УчетТребУдержСНач - СписокXDTO
//  * ИнфПолСвОРасч - СписокXDTO
//  Расчеты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеРасчеты
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияПодрядчикаОРасчетах(Объект, Расчеты, КонструкторЭД)
	Расчеты.ОтчетныйПериод.ВсегоКОплате = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВсегоКОплатОтч");
	Расчеты.ОтчетныйПериод.СуммаУдержаний = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумУдержВсегоОтч");
	Расчеты.ОтчетныйПериод.СуммаТребований = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумТребВсегоОтч");
	ТребованиеУдержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УчетТребУдерж");
	Если ТипЗнч(ТребованиеУдержание) = Тип("ОбъектXDTO") Тогда
		Требование = ПрочитатьСуммуТребованийИУдержаний(ТребованиеУдержание, КонструкторЭД);
		Расчеты.ОтчетныйПериод.РасшифровкаТребованийУдержаний.Добавить(Требование);
	КонецЕсли;
	Если ТипЗнч(ТребованиеУдержание) = Тип("СписокXDTO") Тогда
		Для Каждого Запись Из ТребованиеУдержание Цикл
			Требование = ПрочитатьСуммуТребованийИУдержаний(Запись, КонструкторЭД);
			Расчеты.ОтчетныйПериод.РасшифровкаТребованийУдержаний.Добавить(Требование);
		КонецЦикла;
	КонецЕсли;
	ВсегоКОплатеСНачалаСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВсегоКОплатеСНач");
	Если ЗначениеЗаполнено(ВсегоКОплатеСНачалаСтроительства) Тогда
		Расчеты.СНачалаСтроительства = КонструкторЭД.НоваяСтруктураРасчетов();
		Расчеты.СНачалаСтроительства.ВсегоКОплате = ВсегоКОплатеСНачалаСтроительства;
		Расчеты.СНачалаСтроительства.СуммаУдержаний = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
			"СумУдержВсегоСНач");
		Расчеты.СНачалаСтроительства.СуммаТребований = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
			"СумТребВсегоСНач");
		ТребованиеУдержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УчетТребУдержСНач");
		Если ТипЗнч(ТребованиеУдержание) = Тип("ОбъектXDTO") Тогда
			Требование = ПрочитатьСуммуТребованийИУдержаний(ТребованиеУдержание, КонструкторЭД);
			Расчеты.СНачалаСтроительства.РасшифровкаТребованийУдержаний.Добавить(Требование);
		КонецЕсли;
		Если ТипЗнч(ТребованиеУдержание) = Тип("СписокXDTO") Тогда
			Для Каждого Запись Из ТребованиеУдержание Цикл
				Требование = ПрочитатьСуммуТребованийИУдержаний(Запись, КонструкторЭД);
				Расчеты.СНачалаСтроительства.РасшифровкаТребованийУдержаний.Добавить(Требование);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	СписокИнформации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПолСвОРасч");
	Если ТипЗнч(СписокИнформации) = Тип("СписокXDTO") Тогда
		Для Каждого ДополнительнаяИнформация Из СписокИнформации Цикл
			НоваяЗапись = КонструкторЭД.НоваяДополнительнаяИнформация();
			ПрочитатьИнформационноеПоле(ДополнительнаяИнформация, НоваяЗапись, КонструкторЭД);
			Расчеты.ДополнительнаяИнформация.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.13 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Настройки - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеНастройкиДокумента
//
Процедура ПрочитатьНастройкиДляФормированияДокумента(Объект, Настройки)
	Настройки.СпособРасчетаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрНДСВИтог");
	Настройки.СпособНакопленияИтогов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрНакИтог");
	Индекс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрИндЦен");
	Настройки.ИндексБазисныхЦен = ДатаИзПредставления(Индекс);
	Настройки.СтепеньАгрегации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтепАгрег");
	Настройки.ТребуетсяСогласованиеРасчетов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрСведРасчСогл");
КонецПроцедуры

// Чтение объекта из таблицы 5.15 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СвПрослежСтройка - СписокXDTO
//  * ИнфПолФХЖ2 - СписокXDTO
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//         - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРасшифровкаСтоимости
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОВыполненнойРаботе(Объект, Работа, КонструкторЭД)
	ТипыРабот = ТипыРабот();
	Если ТипЗнч(Работа) = ТипыРабот.Работа Тогда
		Работа.ПозицияПоСмете = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПозСмет");
		Работа.ТипЗатрат = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТипЗатр");
		Работа.ИдентификаторОсновногоСредства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдОС");
		Работа.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовБезНДС");
		Работа.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовУчНал");
		Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолТов");
		Если ЗначениеЗаполнено(Количество) Тогда
			Работа.Количество = Количество;
		Иначе
			Работа.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолТовТекст");
		КонецЕсли;
		Работа.ЕдиницаИзмерения = КонструкторЭД.НоваяЕдиницаИзмерения();
		Работа.ЕдиницаИзмерения.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКЕИ_Стройка");
		Работа.ЕдиницаИзмерения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимЕдИзм");
		Работа.ЕдиницаИзмерения.ОбщепринятоеНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОЕИ");
		Если ТипЗнч(Работа.ПозицияПоСмете) = Тип("СписокXDTO") Тогда
			Работа.ПоказателиПоСмете = КонструкторЭД.НовыеЧисловыеПоказатели();
			Работа.ПоказателиПоСмете.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтПоСметеБезНДС");
			Работа.ПоказателиПоСмете.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтПоСметеУчНал");
			Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолСмет");
			Если ЗначениеЗаполнено(Количество) Тогда
				Работа.ПоказателиПоСмете.Количество = Количество;
			Иначе
				Работа.ПоказателиПоСмете.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолСметТекст");
			КонецЕсли;
		КонецЕсли;
		СуммаСНачалаСтроительства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтСНачСтрБезНДС");
		Если ЗначениеЗаполнено(СуммаСНачалаСтроительства) Тогда
			Работа.ПоказателиСНачалаСтроительства = КонструкторЭД.НовыеЧисловыеПоказатели();
			Работа.ПоказателиСНачалаСтроительства.Сумма = СуммаСНачалаСтроительства;
			Работа.ПоказателиСНачалаСтроительства.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
				"СтТовУчНалСНачСтр");
			Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолСНач");
			Если ЗначениеЗаполнено(Количество) Тогда
				Работа.ПоказателиСНачалаСтроительства.Количество = Количество;
			Иначе
				Работа.ПоказателиСНачалаСтроительства.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
					"КолСНачТекст");
			КонецЕсли;
		КонецЕсли;
		КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодПроисх");
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			Работа.СтранаПроисхождения = КонструкторЭД.НоваяСтранаПроисхождения();
			Работа.СтранаПроисхождения.Код = КодСтраны;
			Работа.СтранаПроисхождения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимСтрПр");
		КонецЕсли;
		ОшибкиИОбстоятельстваВСумме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УчОшИНовОбстСт");
		Если ТипЗнч(ОшибкиИОбстоятельстваВСумме) = Тип("ОбъектXDTO") Тогда
			Работа.ОшибкиИОбстоятельстваВСумме = КонструкторЭД.НовыеОшибкиИОбстоятельства();
			ПрочитатьИзмененияВДанныхСНачалаСтроительства(ОшибкиИОбстоятельстваВСумме,
				Работа.ОшибкиИОбстоятельстваВСумме, КонструкторЭД);
		КонецЕсли;
		ОшибкиИОбстоятельстваВКоличестве = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УчОшИНовОбстКол");
		Если ТипЗнч(ОшибкиИОбстоятельстваВКоличестве) = Тип("ОбъектXDTO") Тогда
			Работа.ОшибкиИОбстоятельстваВКоличестве = КонструкторЭД.НовыеОшибкиИОбстоятельства();
			ПрочитатьИзмененияВДанныхСНачалаСтроительства(ОшибкиИОбстоятельстваВКоличестве,
				Работа.ОшибкиИОбстоятельстваВКоличестве, КонструкторЭД);
		КонецЕсли;
		Ставка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НалСтПостр");
		Если Не ЗначениеЗаполнено(Ставка) Тогда
			Ставка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НалСтВИтог", НалоговыеСтавки().НДС20);
		КонецЕсли;
		Работа.СтавкаНДС = Ставка;
		СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНал");
		Если ТИпЗнч(СуммаНалога) = Тип("ОбъектXDTO") Тогда
			ПрочитатьСуммуНДС(СуммаНалога, Работа);
		КонецЕсли;
		СведенияОПрослеживаемости = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвПрослежСтройка");
		Если ТипЗнч(СведенияОПрослеживаемости) = Тип("СписокXDTO") Тогда
			Для Каждого СведениеОПрослеживаемости Из СведенияОПрослеживаемости Цикл
				НоваяЗапись = КонструкторЭД.НовыеСведенияОПрослеживаемости();
				ПрочитатьСведенияОПрослеживаемости(СведениеОПрослеживаемости, НоваяЗапись);
				Работа.СведениеОПрослеживаемости.Добавить(НоваяЗапись);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Работа) = ТипыРабот.РасшифровкаСтоимости Тогда
		Работа.БазиснаяСтоимость = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтПоСметеБезНДС");
		Работа.КоэффициентПересчета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КоэфПересч");
		Работа.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовБезНДС");
	КонецЕсли;
	Работа.СлужебныйНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомСтр");
	Работа.ПозицияПоАкту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомПоз");
	Работа.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимТов");
	Работа.Цена = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЦенаТов");
	ДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПолФХЖ2");
	Если ТипЗнч(ДополнительнаяИнформация) = Тип("СписокXDTO") Тогда
		Для Каждого ДопЗапись Из ДополнительнаяИнформация Цикл
			ДопИнформация = КонструкторЭД.НоваяДополнительнаяИнформация();
			ПрочитатьИнформационноеПоле(ДопЗапись, ДопИнформация, КонструкторЭД);
			Работа.ДополнительнаяИнформация.Добавить(ДопИнформация);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.16 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведениеОПрослеживаемости - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПрослеживаемости
//
Процедура ПрочитатьСведенияОПрослеживаемости(Объект, СведениеОПрослеживаемости)
	СведениеОПрослеживаемости.НомерПартии = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомТовПрослеж");
	СведениеОПрослеживаемости.ЕдиницаИзмерения.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЕдИзмПрослеж");
	СведениеОПрослеживаемости.ЕдиницаИзмерения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
		"НаимЕдИзмПрослеж");
	СведениеОПрослеживаемости.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолВЕдПрослеж");
	СведениеОПрослеживаемости.НаименованиеВСоставеГруппы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
		"НаимТовВГрупп");
	СведениеОПрослеживаемости.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовПрослежБезНДС");
КонецПроцедуры

// Чтение объекта из таблицы 5.17 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ОшибПрПер - СписокXDTO
//  * НовОбстПрПер - СписокXDTO
//  ОшибкиИОбстоятельства - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеОшибкиИОбстоятельства
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИзмененияВДанныхСНачалаСтроительства(Объект, ОшибкиИОбстоятельства, КонструкторЭД)
	Ошибки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОшибПрПер");
	Если ТипЗнч(Ошибки) = Тип("СписокXDTO") Тогда
		Для Каждого Ошибка Из Ошибки Цикл
			НоваяЗапись = КонструкторЭД.НоваяСтруктураИзменений();
			ПрочитатьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(Ошибка, НоваяЗапись, КонструкторЭД);
			ОшибкиИОбстоятельства.Ошибки.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
	НовыеОбстоятельства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НовОбстПрПер");
	Если ТипЗнч(НовыеОбстоятельства) = Тип("СписокXDTO") Тогда
		Для Каждого НовоеОбстоятельство Из НовыеОбстоятельства Цикл
			НоваяЗапись = КонструкторЭД.НоваяСтруктураИзменений();
			ПрочитатьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(НовоеОбстоятельство, НоваяЗапись,
				КонструкторЭД);
			ОшибкиИОбстоятельства.Ошибки.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.18 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ОписаниеИзменений - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСтруктураИзменений
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИзмененияСтоимостногоКоличественногоВыраженияПоказателей(Объект, ОписаниеИзменений, КонструкторЭД)
	Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УвелДен");
	Если ЗначениеЗаполнено(Сумма) Тогда
		ОписаниеИзменений.ДельтаСуммы = Сумма;
	Иначе
		ОписаниеИзменений.ДельтаСуммы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УвелДен");
	КонецЕсли;
	РНПТ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "РНПТУменьш");
	Если ЗначениеЗаполнено(РНПТ) Тогда
		ОписаниеИзменений.НомерПартии = РНПТ;
	Иначе
		ОписаниеИзменений.НомерПартии = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "РНПТУвел");
	КонецЕсли;
	Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УменьшКол");
	Если ЗначениеЗаполнено(Количество) Тогда
		ОписаниеИзменений.ДельтаКоличества = Количество;
	Иначе
		ОписаниеИзменений.ДельтаКоличества = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УвелКол");
	КонецЕсли;
	Основание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрДокИзмСНачСтр");
	Если ТипЗнч(Основание) = Тип("СписокXDTO") Тогда
		ОписаниеИзменений.Основание = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(Основание, ОписаниеИзменений.Основание, КонструкторЭД);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.19 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеТребование
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеУдержание
//
Функция ПрочитатьСуммуТребованийИУдержаний(Объект, КонструкторЭД)
	ВидТребования = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидТреб");
	ВидУдержания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидУдерж");
	НоваяЗапись = Неопределено;
	Если ЗначениеЗаполнено(ВидТребования) Тогда
		НоваяЗапись = КонструкторЭД.НовоеТребование();
		НоваяЗапись.Вид = ВидТребования;
		Если ВидТребования = ТипыТребований().ИныеТребования Тогда
			НоваяЗапись.ИнойВид = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнВидТреб");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидУдержания) Тогда
		НоваяЗапись = КонструкторЭД.НовоеУдержание();
		НоваяЗапись.Вид = ВидУдержания;
		Если ВидУдержания = ТипыУдержаний().ИныеУдержания Тогда
			НоваяЗапись.ИнойВид = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнВидУдерж");
		КонецЕсли;
	КонецЕсли;
	НоваяЗапись.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумТребУдерж");
	Подтверждение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДокПодтСумУд");
	Если ТипЗнч(Подтверждение) = Тип("ОбъектXDTO") Тогда
		НоваяЗапись.ДокументПодтверждение = КонструкторЭД.НовоеОписаниеДокумента();
		ПрочитатьИдентифицирующиеПризнакиДокумента(Подтверждение, НоваяЗапись.ДокументПодтверждение, КонструкторЭД);
	КонецЕсли;
	Возврат НоваяЗапись;
КонецФункции

// Чтение объекта из таблицы 5.20 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Документ - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеОписаниеДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИдентифицирующиеПризнакиДокумента(Объект, Документ, КонструкторЭД)
	Реквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТипИдДок");
	ПрочитатьРеквизитыДокумента(Реквизиты, Документ, КонструкторЭД);
КонецПроцедуры

// Чтение объекта из таблицы 5.21 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ИдРекСост - СписокXDTO
//  Документ - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеОписаниеДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьРеквизитыДокумента(Объект, Документ, КонструкторЭД)
	Документ.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимДок");
	Документ.Номер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерДок");
	ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаДок");
	Документ.Дата = ДатаИзПредставления(ДатаДокумента);
	Документ.ГосНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдДок");
	Документ.ДополнительныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДопСведДок");
	Стороны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдРекСост");
	Если ТипЗнч(Стороны) = Тип("СписокXDTO") Тогда
		Для Каждого Сторона Из Стороны Цикл
			ПризнакиСубъекта = ПрочитатьИдентифицирующиеРеквизитыСубъектаДокумента(Сторона, КонструкторЭД);
			Документ.Стороны.Добавить(ПризнакиСубъекта);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.22 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностранногоГражданина
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностраннойОрганизации
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиОрганаИсполнительнойВласти
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиЮрЛица
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиФизЛица
//
Функция ПрочитатьИдентифицирующиеРеквизитыСубъектаДокумента(Объект, КонструкторЭД)
	ДанныеИно = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДаннИно");
	Если ТипЗнч(ДанныеИно) = Тип("ОбъектXDTO") Тогда
		Возврат ПрочитатьДанныеИностраннойОрганизацииГражданина(ДанныеИно, КонструкторЭД);
	КонецЕсли;
	НаимОИВ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОИВ");
	Если ЗначениеЗаполнено(НаимОИВ) Тогда
		Возврат КонструкторЭД.НовыеПризнакиОрганаИсполнительнойВласти(НаимОИВ);
	КонецЕсли;
	ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННФЛ");
	Если ЗначениеЗаполнено(ИННФЛ) Тогда
		Возврат КонструкторЭД.НовыеПризнакиФизЛица(ИННФЛ);
	КонецЕсли;
	ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННЮЛ");
	Если ЗначениеЗаполнено(ИННЮЛ) Тогда
		Возврат КонструкторЭД.НовыеПризнакиЮрЛица(ИННЮЛ);
	КонецЕсли;
КонецФункции

// Чтение объекта из таблицы 5.23 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностранногоГражданина
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеПризнакиИностраннойОрганизации
//
Функция ПрочитатьДанныеИностраннойОрганизацииГражданина(Объект, КонструкторЭД)
	Сторона = Неопределено;
	ИдСтат = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСтат");
	Если ИдСтат = "ИО" Тогда
		Сторона = КонструкторЭД.НовыеПризнакиИностраннойОрганизации();
		Сторона.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наим");
	Иначе
		Сторона = КонструкторЭД.НовыеПризнакиИностранногоГражданина();
		Сторона.ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наим");
	КонецЕсли;
	Сторона.Страна = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Стран");
	Сторона.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентиф");
	Сторона.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	Возврат Сторона;
КонецФункции

// Чтение объекта из таблицы 5.24 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОСторонахДоговораПодряда(Объект, СторонаДоговора, КонструкторЭД)
	СторонаДоговора.КрупнейшийНалогоплательщик = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрИспКППКр") = "1";
	Участник = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвСторДог");
	ПрочитатьСведенияОбУчастникеФХЖ(Участник, СторонаДоговора, КонструкторЭД);
КонецПроцедуры

// Чтение объекта из таблицы 5.25 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОбУчастникеФХЖ(Объект, СторонаДоговора, КонструкторЭД)
	СторонаДоговора.КодОКПО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКПО");
	СторонаДоговора.СтруктурноеПодразделение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтруктПодр");
	СторонаДоговора.ИнформацияДляУчастника = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфДляУчаст");
	СторонаДоговора.КраткоеНазвание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КраткНазв");
	Сведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСв");
	СторонаДоговора.СведенияОЛице = ПрочитатьИдентификационныеСведения(Сведения, КонструкторЭД);
	Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Адрес");
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		СторонаДоговора.Адрес = ПрочитатьАдресМестонахождения(Адрес, КонструкторЭД);
	КонецЕсли;
	КонтактнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Контакт");
	ПрочитатьКонтактныеДанные(КонтактнаяИнформация, СторонаДоговора);
	БанковскиеРеквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БанкРекв");
	Если ТипЗнч(БанковскиеРеквизиты) = Тип("ОбъектXDTO") Тогда
		СторонаДоговора.БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
		ПрочитатьБанковскиеРеквизиты(БанковскиеРеквизиты, СторонаДоговора.БанковскиеРеквизиты, КонструкторЭД);
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.26 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПредпринимателе
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбОрганизации
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбИностраннойОрганизации
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОФизическомЛице
//
Функция ПрочитатьИдентификационныеСведения(Объект, КонструкторЭД)
	СведенияОЛице = Неопределено;
	Предприниматель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвИП");
	Если ТипЗнч(Предприниматель) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОПредпринимателе();
		ПрочитатьСведенияОбИндивидуальномПредпринимателе(Предприниматель, СведенияОЛице, КонструкторЭД);
	КонецЕсли;
	ИностраннаяОрганизация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвИнНеУч");
	Если ТипЗнч(ИностраннаяОрганизация) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОбИностраннойОрганизации();
		ПрочитатьСведенияОбИностраннойОрганизации(ИностраннаяОрганизация, СведенияОЛице);
	КонецЕсли;
	Организация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвЮЛУч");
	Если ТипЗнч(Организация) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОбОрганизации();
		ПрочитатьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Организация, СведенияОЛице);
	КонецЕсли;
	ФизЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвФЛУчастФХЖ");
	Если ТипЗнч(ФизЛицо) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеСведенияОФизическомЛице();
		ПрочитатьСведенияОФизическомЛице(ФизЛицо, СведенияОЛице, КонструкторЭД);
	КонецЕсли;
	Возврат СведенияОЛице;
КонецФункции

// Чтение объекта из таблицы 5.27 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОПредпринимателе
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОбИндивидуальномПредпринимателе(Объект, СведенияОЛице, КонструкторЭД)
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННФЛ");
	СведенияОЛице.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОГРНИП");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФИО");
	ПрочитатьФИО(ФИО, СведенияОЛице.ФИО);
КонецПроцедуры

// Чтение объекта из таблицы 5.28 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбОрганизации
//
Процедура ПрочитатьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Объект, СведенияОЛице)
	СведенияОЛице.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОрг");
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННЮЛ");
	СведенияОЛице.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
КонецПроцедуры

// Чтение объекта из таблицы 5.29 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОбИностраннойОрганизации
//
Процедура ПрочитатьСведенияОбИностраннойОрганизации(Объект, СведенияОЛице)
	СведенияОЛице.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОрг");
	СведенияОЛице.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентиф");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
КонецПроцедуры

// Чтение объекта из таблицы 5.30 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеСведенияОФизическомЛице
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСведенияОФизическомЛице(Объект, СведенияОЛице, КонструкторЭД)
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННФЛ");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФИО");
	ПрочитатьФИО(ФИО, СведенияОЛице.ФИО);
КонецПроцедуры

// Чтение объекта из таблицы 5.31 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеБанковскиеРеквизиты
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьБанковскиеРеквизиты(Объект, БанковскиеРеквизиты, КонструкторЭД)
	БанковскиеРеквизиты.НомерСчета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерСчета");
	СведенияОБанке = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвБанк");
	ПрочитатьСведенияОБанке(СведенияОБанке, БанковскиеРеквизиты);
КонецПроцедуры

// Чтение объекта из таблицы 5.32 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеБанковскиеРеквизиты
//
Процедура ПрочитатьСведенияОБанке(Объект, БанковскиеРеквизиты)
	БанковскиеРеквизиты.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимБанк");
	БанковскиеРеквизиты.БИК = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БИК");
	БанковскиеРеквизиты.КорреспондентскийСчет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КорСчет");
КонецПроцедуры

// Чтение объекта из таблицы 5.33 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
// 
// Возвращаемое значение:
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресРФ
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресВСвободнойФорме
//  - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресПоНомеруГАР
//
Функция ПрочитатьАдресМестонахождения(Объект, КонструкторЭД)
	АдресРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрРФ");
	Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресРФ();
		ПрочитатьАдресРоссийскойФедерации(АдресРФ, Адрес);
	КонецЕсли;
	АдресВСвободнойФорме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрИнф");
	Если ТипЗнч(АдресВСвободнойФорме) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресВСвободнойФорме();
		ПрочитатьИнформациюОбАдресе(АдресВСвободнойФорме, Адрес);
	КонецЕсли;
	Адрес = КонструкторЭД.НовыйАдресПоНомеруГАР(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодГАР"));
	Возврат Адрес;
КонецФункции

// Чтение объекта из таблицы 5.34 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресРФ
//
Процедура ПрочитатьАдресРоссийскойФедерации(Объект, Адрес)
	Адрес.Индекс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Индекс");
	Адрес.КодРегиона = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодРегион");
	Адрес.Район = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Район");
	Адрес.Город = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Город");
	Адрес.НаселенныйПункт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаселПункт");
	Адрес.Улица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Улица");
	Адрес.Дом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Дом");
	Адрес.Корпус = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Корпус");
	Адрес.Квартира = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Кварт");
КонецПроцедуры

// Чтение объекта из таблицы 5.35 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйАдресВСвободнойФорме
//
Процедура ПрочитатьИнформациюОбАдресе(Объект, Адрес)
	Адрес.КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСтр");
	Адрес.Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрТекст");
КонецПроцедуры

// Чтение объекта из таблицы 5.36 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * СумПоСтавке - СписокXDTO
//  Итоги - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСтруктураИтогов
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьВсегоПоАкту(Объект, Итоги, КонструкторЭД)
	Итоги.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовБезНДСВсего");
	Итоги.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовУчНалВсего");
	Итоги.СуммаСНДСВВалюте = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтУчНалВсВалДог");
	Итоги.СуммаНДСВВалюте = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалВсВалДог");
	СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалВсего");
	Если ЗначениеЗаполнено(СуммаНДС) Тогда
		Итоги.СуммаНДС = СуммаНДС;
	КонецЕсли;
	СумПоСтавке = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумПоСтавке");
	Если ЗначениеЗаполнено(СумПоСтавке) Тогда
		Для Каждого СтавкаИНалог Из СумПоСтавке Цикл
			ПрочитатьСуммуНДСВРазбивкеПоСтавкам(СтавкаИНалог, Итоги.НалогиПоСтавкам, КонструкторЭД);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.37 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * НомПозСт - СписокXDTO
//  СтавкаИНалог - Соответствие Из КлючИЗначение:
//  * Ключ - Строка - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НалоговыеСтавки
//  * Значение - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйНалогПоСтавке
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьСуммуНДСВРазбивкеПоСтавкам(Объект, СтавкаИНалог, КонструкторЭД)
	НалоговыеСтавки = НалоговыеСтавки();
	Налог = КонструкторЭД.НовыйНалогПоСтавке();
	Ставка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НалСт");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НеобНДС") = "без НДС" Тогда
		Ставка = НалоговыеСтавки.БезНДС;
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НДСНалАг") = "-" Тогда
		Ставка = НалоговыеСтавки.НДСАгента;
	КонецЕсли;
	Налог.НалоговаяБаза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НалБаза");
	ПозицииАкта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомПозСт");
	Если Ставка <> НалоговыеСтавки.НДС20 И ТипЗнч(ПозицииАкта) = Тип("СписокXDTO") Тогда
		Для Каждого Позиция Из ПозицииАкта Цикл
			Если ТипЗнч(Позиция) = Тип("Строка") Тогда
				Налог.ПозицииАкта.Добавить(Позиция);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Налог.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНДС");
	СтавкаИНалог.Вставить(Ставка, Налог);
КонецПроцедуры

// Чтение объекта из таблицы 5.38 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * Тлф - СписокXDTO
//  * ЭлПочта - СписокXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяСторонаДоговораПодряда
//
Процедура ПрочитатьКонтактныеДанные(Объект, СторонаДоговора)
	ТелефонныеНомера = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Тлф");
	Если ТипЗнч(ТелефонныеНомера) = Тип("СписокXDTO") Тогда
		Для Каждого Телефон Из ТелефонныеНомера Цикл
			СторонаДоговора.НомераТелефонов.Добавить(Телефон);
		КонецЦикла;
	КонецЕсли;
	АдресаПочты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЭлПочта");
	Если ТипЗнч(АдресаПочты) = Тип("СписокXDTO") Тогда
		Для Каждого Адрес Из АдресаПочты Цикл
			СторонаДоговора.АдресаЭлектроннойПочты.Добавить(Адрес);
		КонецЦикла;
	КонецЕсли;
	СторонаДоговора.ИныеКонтактныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнКонт");
КонецПроцедуры

// Чтение объекта из таблицы 5.39 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Работа - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//
Процедура ПрочитатьСуммуНДС(Объект, Работа)
	Работа.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНал");
КонецПроцедуры

// Чтение объекта из таблицы 5.43 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO:
//  * ТекстИнф - СписокXDTO
//  ДополнительнаяИнформация - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяДополнительнаяИнформация
//  КонструкторЭД - ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО
//
Процедура ПрочитатьИнформационноеПоле(Объект, ДополнительнаяИнформация, КонструкторЭД)
	ДополнительнаяИнформация.ИдентификаторФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдФайлИнфПол");
	Поля = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТекстИнф");
	Если ТипЗнч(Поля) = Тип("СписокXDTO") Тогда
		Для Каждого Поле Из Поля Цикл
			НоваяЗапись = КонструкторЭД.НовоеДополнительноеПоле();
			ПрочитатьТекстовуюИнформацию(Поле, НоваяЗапись);
			ДополнительнаяИнформация.Поля.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Чтение объекта из таблицы 5.44 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Поле - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовоеДополнительноеПоле
//
Процедура ПрочитатьТекстовуюИнформацию(Объект, Поле)
	Поле.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентиф");
	Поле.Значение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Значение");
КонецПроцедуры

// Чтение объекта из таблицы 5.46 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ФИО - см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыеФИО
//
Процедура ПрочитатьФИО(Объект, ФИО)
	ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Фамилия");
	ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Имя");
	ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Отчество");
КонецПроцедуры

// BSLLS:Typo-on

#КонецОбласти

#Область Общее

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДаты(Дата)
	Возврат Формат(Дата, "ДФ=dd.MM.yyyy;");
КонецФункции

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеВремени(Дата)
	Возврат Формат(Дата, "ДФ=ЧЧ:мм:сс;");
КонецФункции

// Параметры:
//  Представление - Строка, Неопределено
// 
// Возвращаемое значение:
//  Дата
//
Функция ДатаИзПредставления(Представление)
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат '00010101';
	ИначеЕсли СтрДлина(Представление) = 4 Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		Год = ТипЧисло.ПривестиЗначение(Представление);
		Если Год = 0 Тогда
			Год = 1;
		КонецЕсли;
		Возврат Дата(Год, 1, 1);
	Иначе
		Возврат РаботаСФайламиБЭД.ДатаИзСтроки(Представление);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

// Параметры:
//  ТаблицаТоваров - см. ФорматыЭДО.НоваяТаблицаТоваров
//  МассивРабот - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//
Процедура ИнформацияОСопоставленияхРазделов(ТаблицаТоваров, МассивРабот)
	ТипыРабот = ТипыРабот();
	Для Каждого Работа Из МассивРабот Цикл
		Если ТипЗнч(Работа) = ТипыРабот.Раздел Тогда
			Запись = ТаблицаТоваров.Добавить();
			Запись.Сопоставление = ДанныеСопоставленияПоРазделу(Работа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  ТаблицаТоваров - см. ФорматыЭДО.НоваяТаблицаТоваров
//  МассивРабот - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//              - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//
Процедура ИнформацияОСопоставленииРабот(ТаблицаТоваров, МассивРабот)
	ТипыРабот = ТипыРабот();
	Для Каждого Работа Из МассивРабот Цикл
		Если ТипЗнч(Работа) = ТипыРабот.Раздел Тогда
			Для Каждого ВложеннаяРабота Из Работа.ВыполненныеРаботы Цикл
				Запись = ТаблицаТоваров.Добавить();
				Запись.Сопоставление = ДанныеСопоставленияПоРаботе(ВложеннаяРабота);
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(Работа) = ТипыРабот.Работа Тогда
			Запись = ТаблицаТоваров.Добавить();
			Запись.Сопоставление = ДанныеСопоставленияПоРаботе(Работа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  ТаблицаТоваров - см. ФорматыЭДО.НоваяТаблицаТоваров
//  МассивРабот - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НоваяРабота
//              - Массив Из см. ОбработкаОбъект.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.НовыйРаздел
//
Процедура ИнформацияОСопоставленияхРасшифровокСтоимости(ТаблицаТоваров, МассивРабот)
	Для Каждого Работа Из МассивРабот Цикл
		Для Каждого Расшифровка Из Работа.РасшифровкиСтоимости Цикл
			Запись = ТаблицаТоваров.Добавить();
			Запись.Сопоставление = ДанныеСопоставленияПоРасшифровкеСтоимости(Расшифровка);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
