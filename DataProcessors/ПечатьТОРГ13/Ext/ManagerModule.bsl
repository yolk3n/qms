#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция возвращает элемент таблицы доступных печатных форм объекта печати
//
Функция ДобавитьПечатнуюФорму(ПечатныеФормы) Экспорт
	
	МетаданныеМакета = МетаданныеМакета();
	МенеджерПечати = МетаданныеМакета.Родитель().ПолноеИмя();
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ТОРГ13", МенеджерПечати);
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета);
	ПечатнаяФорма.Представление = МетаданныеМакета.Представление();
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакета());
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета + "_1";
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	СтруктураТипов = ОбщегоНазначенияБольничнаяАптека.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	
	НомерТипаДокумента = 0;
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ПолучатьЦены");
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечати(СтруктураОбъектов.Значение, ПараметрыПечати);
		
		СформироватьТабличныйДокумент(ТабличныйДокумент, Макет, ДанныеДляПечати, ОбъектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьТабличныйДокумент(ТабличныйДокумент, Макет, ДанныеДляПечати, ОбъектыПечати)
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	
	ПервыйДокумент = Истина;
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Шапка.Следующий() Цикл
		
		// Проверка.
		Если Шапка.ИсточникИнформацииОЦенах = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
			Если Шапка.ПредварительныйРасчет = Null Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: на %Период% не произведен расчет себестоимости.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Шапка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(Шапка.ДатаДокумента),"ДЛФ=DD"));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Шапка.Ссылка);
				
				Продолжить;
				
			ИначеЕсли Шапка.ПредварительныйРасчет Тогда
				
				ТекстСообщения = НСтр("ru = 'При печати цен документа %Документ% использовались данные предварительного расчета себестоимости.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Шапка.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Шапка.Ссылка);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		
		// Получение параметров для заполнения
		ДанныеШапки = ПолучитьДанныеШапкиДокумента(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, "Шапка", ДанныеШапки);
		
		// Инициализация нумерации
		Нумерация = ИнициализироватьНумерацию();
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", Нумерация);
		
		// Инициализация итогов
		ПараметрыИтогоПоСтранице  = ИнициализироватьСтруктуруИтогов();
		ПараметрыИтогоПоДокументу = ИнициализироватьСтруктуруИтогов();
		
		// Формирование многострочной части
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ФормированиеПечатныхФормБольничнаяАптека.УвеличитьНомер(Нумерация, "НомерСтроки");
				
				ДанныеСтроки = Новый Структура(КлючиПараметров);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
				
				ДанныеСтроки.Вставить("КоличествоМест", ВыборкаСтрокТовары.Количество);
				ДанныеСтроки.Вставить("ТоварНаименование", ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					ВыборкаСтрокТовары.Партия));
				
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
				
				СтрокаНеПомещаетсяНаСтраницу = ПроверитьВыводСтроки(ТабличныйДокумент, Макет, МассивВыводимыхОбластей, ОбластьСтрока, Нумерация.НомерСтроки = КоличествоСтрок);
				
				// Создаем массив для проверки вывода
				Если СтрокаНеПомещаетсяНаСтраницу Тогда
					
					ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогиПоСтранице", ПараметрыИтогоПоСтранице);
					
					// инициализация итогов по странице
					ПараметрыИтогоПоСтранице  = ИнициализироватьСтруктуруИтогов();
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					ФормированиеПечатныхФормБольничнаяАптека.УвеличитьНомер(Нумерация, "НомерСтраницы");
					
					ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", Нумерация);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				// Обновим итоги по странице
				ПараметрыИтогоПоСтранице.КоличествоМест = ПараметрыИтогоПоСтранице.КоличествоМест + ВыборкаСтрокТовары.Количество;
				ПараметрыИтогоПоСтранице.Сумма          = ПараметрыИтогоПоСтранице.Сумма + ВыборкаСтрокТовары.Сумма;
				
				// Обновим итогов по документу
				ПараметрыИтогоПоДокументу.КоличествоМест = ПараметрыИтогоПоДокументу.КоличествоМест + ВыборкаСтрокТовары.Количество;
				ПараметрыИтогоПоДокументу.Сумма          = ПараметрыИтогоПоДокументу.Сумма + ВыборкаСтрокТовары.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогиПоСтранице", ПараметрыИтогоПоСтранице);
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтогоПоДокументу);
		
		// Выводим подвал документа
		ДанныеШапки.Вставить("ИтогоСуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ПараметрыИтогоПоДокументу.Сумма, ВалютаПечати));
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ДанныеШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеШапкиДокумента(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	Параметры.Вставить("ПредставлениеОрганизации" , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации));
	Параметры.Вставить("НомерДокумента"           , ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ОрганизацияПоОКПО"        , СведенияОбОрганизации.КодПоОКПО);
	
	Возврат Параметры;
	
КонецФункции

Функция ИнициализироватьСтруктуруИтогов()
	
	ПараметрыИтого = Новый Структура;
	ПараметрыИтого.Вставить("КоличествоМест" , 0);
	ПараметрыИтого.Вставить("МассаБрутто"    , 0);
	ПараметрыИтого.Вставить("МассаНетто"     , 0);
	ПараметрыИтого.Вставить("Сумма"          , 0);
	
	Возврат ПараметрыИтого;
	
КонецФункции

Функция ИнициализироватьНумерацию()
	
	Нумерация = Новый Структура;
	Нумерация.Вставить("НомерСтроки"  , 0);
	Нумерация.Вставить("НомерСтраницы", 1);
	
	Возврат Нумерация;
	
КонецФункции

Функция ПроверитьВыводСтроки(ТабличныйДокумент, Макет, МассивВыводимыхОбластей, ТекущаяОбласть, ЭтоПоследняяСтрока)
	
	МассивВыводимыхОбластей.Очистить();
	МассивВыводимыхОбластей.Добавить(ТекущаяОбласть);
	МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогиПоСтранице"));
	
	Если ЭтоПоследняяСтрока Тогда
		МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
		МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подвал"));
	КонецЕсли;
	
	Возврат Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей);
	
КонецФункции

Функция МетаданныеМакета()
	
	Возврат Метаданные.Обработки.ПечатьТОРГ13.Макеты.ПФ_MXL_ТОРГ13;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
