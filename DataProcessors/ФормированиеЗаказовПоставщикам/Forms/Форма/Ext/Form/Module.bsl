
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПоддержанияЗапасаПередИзменением;

&НаКлиенте
Перем КЗаказуПередИзменением;

&НаКлиенте
Перем ТекущаяСтрокаСписка;

&НаКлиенте
Перем СтрокиКОбновлению;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьСтраницы("Запасы", Элементы);
	
	ИспользоватьПричиныОтменыЗаказовПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	Склад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладАптекиПоУмолчанию();
	ПериодПродаж = 30;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"                               , НСтр("ru = 'Формирование заказов поставщикам'"));
	ПараметрыПодбора.Вставить("ЗаголовокКнопкиПеренести"               , НСтр("ru = 'Перенести в список'"));
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"                   , "Склад");
	ПараметрыПодбора.Вставить("Склад"                                  , Склад);
	ПараметрыПодбора.Вставить("ПодборВПоступление"                     , Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров"      , Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезРазрезовУчета"           , Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ЗапасыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПодборТоваров", ЭтотОбъект);
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборФОЛС(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"                               , НСтр("ru = 'Формирование заказов поставщикам'"));
	ПараметрыПодбора.Вставить("ЗаголовокКнопкиПеренести"               , НСтр("ru = 'Перенести в список'"));
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"                   , "Склад");
	ПараметрыПодбора.Вставить("Склад"                                  , Склад);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров"      , Истина);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПодборТоваров", ЭтотОбъект);
	ПодборТоваровКлиент.ОткрытьПодборОписанийТоваров(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"                               , НСтр("ru = 'Формирование заказов поставщикам'"));
	ПараметрыПодбора.Вставить("ЗаголовокКнопкиПеренести"               , НСтр("ru = 'Перенести в список'"));
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"                   , "Склад");
	ПараметрыПодбора.Вставить("Склад"                                  , Склад);
	ПараметрыПодбора.Вставить("ПодборВПоступление"                     , Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезРазрезовУчета"           , Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ЗапасыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПодборТоваров", ЭтотОбъект);
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоОтбору(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОстатку(Команда)
	
	ИмяКоманды = Команда.Имя;
	Если Элементы[ИмяКоманды].Пометка Тогда
		
		Элементы[ИмяКоманды].Пометка = Ложь;
		ОбновитьФильтрОстаток("");
		
	Иначе
		
		Для Каждого Элемент Из Элементы.ПодменюОстаток.ПодчиненныеЭлементы Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
		
		Элементы[ИмяКоманды].Пометка = Истина;
		ОбновитьФильтрОстаток(ИмяКоманды);
		
	КонецЕсли;
	
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыПоставщикам(Команда)
	
	ДлительнаяОперация = СформироватьЗаказыПоставщикамНаСервере();
	ОбработчикРезультата =  Новый ОписаниеОповещения("ОбработатьРезультатФормированияЗаказовПоставщикам", ЭтотОбъект);
	ОжидатьЗавершение(ДлительнаяОперация, ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ДлительнаяОперация = УдалитьЗаказыПоставщикамНаСервере();
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбработатьРезультатУдаленияЗаказовПоставщикам", ЭтотОбъект);
	ОжидатьЗавершение(ДлительнаяОперация, ОбработчикРезультата);
	
КонецПроцедуры

#Область УстановитьСтатусЗаказаПоставщику

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Не согласован"". По принятым в работу заказам могут быть оформлены документы. Продолжить?'");
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "НеСогласован", НСтр("ru='Не согласован'"),, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласован(Команда)
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Согласован"". Продолжить?'");
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "Согласован", НСтр("ru='Согласован'"),, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПодтвержден(Команда)
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Подтвержден"". Продолжить?'");
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "Подтвержден", НСтр("ru='Подтвержден'"),, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПоступлению(Команда)
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К поступлению"". Продолжить?'");
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "КПоступлению", НСтр("ru='К поступлению'"),, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытУПолностьюОтработанныхЗаказов(Команда)
	
	ТекстВопроса = НСтр("ru='У полностью отработанных из выделенных в списке заказов будет установлен статус ""Закрыт"". Продолжить?'");
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "Закрыт", НСтр("ru='Закрыт'"), Новый Структура("КонтрольВыполненияЗаказа"), ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытСОтменойНеотработанныхСтрок(Команда)
	
	ТекстВопроса = НСтр(
		"ru='У выделенных в списке заказов будет установлен статус ""Закрыт"".
			|Все неотработанные строки будут отменены. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ОтменитьСтрокиПоПричине", ЭтотОбъект);
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСписке(Элементы.СписокДокументы, "Закрыт", НСтр("ru='Закрыт'"),, ТекстВопроса, Оповещение);
	
КонецПроцедуры

#КонецОбласти // УстановитьСтатусЗаказаПоставщику

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПродажПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПериодПродаж) Тогда
		Запасы.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоПоддержанияОстатковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеПриИзменении(Элемент)
	
	Если ТолькоОтмеченные Тогда
		ОбновитьФильтрОстаток();
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗапасыПредставлениеНоменклатуры" Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПоказатьЗначение(, ТекущаяСтрока.Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ТорговоеНаименование) Тогда
			ПоказатьЗначение(, ТекущаяСтрока.ТорговоеНаименование);
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ДействующиеВеществаМНН) Тогда
			ПоказатьЗначение(, ТекущаяСтрока.ДействующиеВеществаМНН);
		Иначе
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ТекущаяСтрока.РежимРедактирования = Истина;
	
	ПараметрыПоддержанияЗапасаПередИзменением = Новый Структура;
	ПараметрыПоддержанияЗапасаПередИзменением.Вставить("МинимальноеКоличествоЗапаса");
	ПараметрыПоддержанияЗапасаПередИзменением.Вставить("МаксимальноеКоличествоЗапаса");
	ПараметрыПоддержанияЗапасаПередИзменением.Вставить("ЕдиницаИзмерения");
	
	КЗаказуПередИзменением = Новый Структура("КЗаказу", ТекущаяСтрока.КЗаказу);
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоддержанияЗапасаПередИзменением, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	ДанныеСтроки.РежимРедактирования = Ложь;
	
	ДанныеИзменились = Ложь;
	Если ДанныеСтроки.МаксимальноеКоличествоЗапаса <> ПараметрыПоддержанияЗапасаПередИзменением.МаксимальноеКоличествоЗапаса
	 Или (ДанныеСтроки.МинимальноеКоличествоЗапаса <> ПараметрыПоддержанияЗапасаПередИзменением.МинимальноеКоличествоЗапаса И ДанныеСтроки.МаксимальноеКоличествоЗапаса > 0) Тогда
		ДанныеИзменились = Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.ЕдиницаИзмерения <> ПараметрыПоддержанияЗапасаПередИзменением.ЕдиницаИзмерения Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаИзмерения)
		   И (ДанныеСтроки.МаксимальноеКоличествоЗапаса <> ПараметрыПоддержанияЗапасаПередИзменением.МаксимальноеКоличествоЗапаса Или ДанныеСтроки.МаксимальноеКоличествоЗапаса > 0) Тогда
			ДанныеИзменились = Истина;
		Иначе
			ДанныеСтроки.ЕдиницаИзмерения = ПараметрыПоддержанияЗапасаПередИзменением.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИзменились Тогда
		
		Если СтрокиКОбновлению = Неопределено Тогда
			СтрокиКОбновлению = Новый Массив;
		КонецЕсли;
		
		СтрокиКОбновлению.Добавить(Элемент.ТекущаяСтрока);
		ПодключитьОбработчикОжидания("ОбновитьПараметрыПоддержанияЗапаса", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКЗаказуПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	НовыеЗначения = Новый Структура("КЗаказу", ТекущаяСтрока.КЗаказу);
	Если ТекущаяСтрока.ПараметрыУстановленыУГруппы Тогда
		ОбновитьРассчитываемыеПоляРодителя(ТекущаяСтрока.ПолучитьРодителя(), НовыеЗначения, КЗаказуПередИзменением);
	КонецЕсли;
	КЗаказуПередИзменением = НовыеЗначения;
	
	ТекущаяСтрока.Отметка = ТекущаяСтрока.КЗаказу > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ПереключитьСтраницы("Заказы", Элементы);
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗапасы Тогда
		ПереключитьСтраницы("Запасы", Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Поставщик);
	ПараметрыФормы.Вставить("РежимВыбора"  , Истина);
	ПараметрыФормы.Вставить("Номенклатура" , ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Склад"        , ТекущиеДанные.Склад);
	
	ОткрытьФорму("Обработка.ФормированиеЗаказовПоставщикам.Форма.ФормаВыбораИсточникаОбеспечения", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзменениеСклада()
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Запасы.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоПоддержанияОстатковНаКлиенте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики заполнения дерева поддержания остатков
#Область ЗаполнениеДереваПоддержанияОстатков

&НаКлиенте
Процедура ОбработатьПодборТоваров(Результат, НеИспользуется) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоПоддержанияОстатковНаКлиенте(Результат.АдресТоваровВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыПоддержанияЗапаса()
	
	Если Не ЗначениеЗаполнено(СтрокиКОбновлению) Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ЗаписатьПараметрыПоддержанияЗапаса(СтрокиКОбновлению);
	СтрокиКОбновлению.Очистить();
	
	Индексы = Новый Массив;
	
	ДанныеСтроки = Элементы.Запасы.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Родитель = ДанныеСтроки.ПолучитьРодителя();
		ТекущиеДанные = ДанныеСтроки;
		Пока Родитель <> Неопределено Цикл
			Индексы.Вставить(0, Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные));
			ТекущиеДанные = Родитель;
			Родитель = ТекущиеДанные.ПолучитьРодителя();
		КонецЦикла;
		
		Индексы.Вставить(0, Запасы.ПолучитьЭлементы().Индекс(ТекущиеДанные));
	КонецЕсли;
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбработатьРезультатОкончанияРедактированияСтрокиЗапасов", ЭтотОбъект, Индексы);
	ЗаполнитьДеревоПоддержанияОстатковНаКлиенте(АдресТоваровВХранилище, ОбработчикРезультата);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПараметрыПоддержанияЗапаса(Знач СтрокиКОбработке)
	
	ТоварныеОграничения = Новый ТаблицаЗначений;
	ТоварныеОграничения.Колонки.Добавить("Номенклатура"                , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварныеОграничения.Колонки.Добавить("ТорговоеНаименование"        , Новый ОписаниеТипов("СправочникСсылка.ТорговыеНаименования"));
	ТоварныеОграничения.Колонки.Добавить("ДействующиеВеществаМНН"      , Новый ОписаниеТипов("СправочникСсылка.ДействующиеВеществаМНН"));
	ТоварныеОграничения.Колонки.Добавить("ФормаВыпуска"                , Новый ОписаниеТипов("СправочникСсылка.ФормыВыпуска"));
	ТоварныеОграничения.Колонки.Добавить("Склад"                       , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТоварныеОграничения.Колонки.Добавить("ЕдиницаИзмерения"            , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТоварныеОграничения.Колонки.Добавить("МинимальноеКоличествоЗапаса" , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТоварныеОграничения.Колонки.Добавить("МаксимальноеКоличествоЗапаса", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Для Каждого Идентификатор Из СтрокиКОбработке Цикл
		ЗаполнитьЗначенияСвойств(ТоварныеОграничения.Добавить(), Запасы.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	Обработки.ФормированиеЗаказовПоставщикам.ЗаписатьПараметрыПоддержанияЗапаса(ТоварныеОграничения);
	Возврат ПоместитьВоВременноеХранилище(ТоварныеОграничения);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОкончанияРедактированияСтрокиЗапасов(АдресРезультата, Индексы) Экспорт
	
	ЗаполнитьДеревоПоддержанияОстатковЗавершениеНаКлиенте(АдресРезультата, Неопределено);
	
	ТекущиеДанные = Запасы;
	Для Индекс = 0 По Индексы.ВГраница() Цикл
		ТекущиеДанные = ТекущиеДанные.ПолучитьЭлементы()[Индексы[Индекс]];
	КонецЦикла;
	
	ТекущаяСтрокаСписка = ТекущиеДанные.ПолучитьИдентификатор();
	ПодключитьОбработчикОжидания("УстановитьТекущуюСтроку", 0.1, Истина);
	
КонецПроцедуры

#Область ЗапускИЗавершениеЗаполненияВФоне

&НаКлиенте
Процедура ЗаполнитьДеревоПоддержанияОстатковНаКлиенте(Знач АдресТоваровВХранилище = Неопределено, ОбработчикРезультата = Неопределено)
	
	ДлительнаяОперация = ЗаполнитьДеревоПоддержанияОстатковНаСервере(АдресТоваровВХранилище);
	Если ОбработчикРезультата = Неопределено Тогда
		ОбработчикРезультата = Новый ОписаниеОповещения("ЗаполнитьДеревоПоддержанияОстатковЗавершениеНаКлиенте", ЭтотОбъект);
	КонецЕсли;
	ОжидатьЗавершение(ДлительнаяОперация, ОбработчикРезультата);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоПоддержанияОстатковНаСервере(Знач АдресТоваровВХранилище = Неопределено)
	
	ПараметрыМетодаДлительнойОперации = Новый Структура;
	ПараметрыМетодаДлительнойОперации.Вставить("Склад"        , Склад);
	ПараметрыМетодаДлительнойОперации.Вставить("ДеревоЗапасов", РеквизитФормыВЗначение("Запасы"));
	ПараметрыМетодаДлительнойОперации.Вставить("ПериодПродаж" , ПериодПродаж);
	
	Если АдресТоваровВХранилище <> Неопределено Тогда
		Товары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Иначе
		Товары = Неопределено;
	КонецЕсли;
	ПараметрыМетодаДлительнойОперации.Вставить("Товары", Товары);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение таблицы поддержания остатков на складе.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЗаказовПоставщикам.ЗаполнитьПоСостояниюЗапасов",
		ПараметрыМетодаДлительнойОперации,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоПоддержанияОстатковЗавершениеНаКлиенте(Знач АдресРезультата, ДополнительныеПараметры)Экспорт
	
	ЗаполнитьДеревоПоддержанияОстатковЗавершениеНаСервере(АдресРезультата);
	РазвернутьДерево();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоддержанияОстатковЗавершениеНаСервере(Знач АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЗначениеВРеквизитФормы(РезультатЗадания.ДеревоЗапасов, "Запасы");
	
	УровеньЗапаса = ТекущийОтборПоУровнюЗапаса();
	Если ТолькоОтмеченные Или УровеньЗапаса <> Неопределено Тогда
		ОбновитьФильтрОстаток(УровеньЗапаса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗапускИЗавершениеЗаполненияВФоне

&НаСервере
Функция ТекущийОтборПоУровнюЗапаса()
	
	Для Каждого Элемент Из Элементы.ПодменюОстаток.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			Возврат Элемент.ИмяКоманды;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьФильтрОстаток(УровеньЗапаса = Неопределено)
	
	Дерево = РеквизитФормыВЗначение("Запасы");
	Если УровеньЗапаса <> Неопределено Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ПараметрыУстановлены, ПараметрыУстановленыУГруппы", Истина, Ложь), Истина);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Остаток = Строка.Остаток;
			ЗаказыКПоступлению = Строка.ЗаказыКПоступлению;
			
			НеУдовлетворяетОтбору = Не
				?(УровеньЗапаса = "МеньшеМинимальногоОстатка"          , Строка.МинимальноеКоличествоЗапаса     >= Остаток,
				?(УровеньЗапаса = "МеньшеУдвоенногоМинимальногоОстатка", Строка.МинимальноеКоличествоЗапаса * 2 >= Остаток,
				?(УровеньЗапаса = "БольшеМинимальногоОстатка"          , Строка.МинимальноеКоличествоЗапаса     < Остаток,
				?(УровеньЗапаса = "БольшеМаксимальногоОстатка"         , Строка.МаксимальноеКоличествоЗапаса    < Остаток + ЗаказыКПоступлению,
					Истина))));
				
			Строка.НеУдовлетворяетОтбору = НеУдовлетворяетОтбору;
			ПодчиненныеСтроки = Строка.Строки.НайтиСтроки(Новый Структура("КлючОтбора", Строка.КлючОтбора), Истина);
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				ПодчиненнаяСтрока.НеУдовлетворяетОтбору = НеУдовлетворяетОтбору;
			КонецЦикла;
			
			Если Не Строка.НеУдовлетворяетОтбору Тогда
				Если Строка.Родитель <> Неопределено Тогда
					Строка.Родитель.НеУдовлетворяетОтбору = Строка.НеУдовлетворяетОтбору;
					Если Строка.Родитель.Родитель <> Неопределено Тогда
						Строка.Родитель.Родитель.НеУдовлетворяетОтбору = Строка.НеУдовлетворяетОтбору;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТолькоОтмеченные Тогда
		ОбновитьФильтрПоОтмеченным(Дерево);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Запасы");
	
КонецПроцедуры

&НаСервере
Функция ОбновитьФильтрПоОтмеченным(Дерево)
	
	ЕстьОтмеченные = Ложь;
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Строка.НеУдовлетворяетОтборуПоОтмеченным = Не Строка.Отметка И Не ОбновитьФильтрПоОтмеченным(Строка);
		Если Не Строка.НеУдовлетворяетОтборуПоОтмеченным Тогда
			ЕстьОтмеченные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтмеченные;
	
КонецФункции

#КонецОбласти // ЗаполнениеДереваПоддержанияОстатков

////////////////////////////////////////////////////////////////////////////////
// Обработчики формирования заказов поставщикам по данным дерева поддержания остатков
#Область ФормированиеЗаказовПоставщикам

&НаСервере
Функция СформироватьЗаказыПоставщикамНаСервере()
	
	ПараметрыМетодаДлительнойОперации = Новый Структура;
	ПараметрыМетодаДлительнойОперации.Вставить("Склад"        , Склад);
	ПараметрыМетодаДлительнойОперации.Вставить("ДеревоЗапасов", РеквизитФормыВЗначение("Запасы"));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов Заказ поставщику.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЗаказовПоставщикам.СформироватьЗаказыПоставщикам",
		ПараметрыМетодаДлительнойОперации,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатФормированияЗаказовПоставщикам(АдресРезультата, ДополнительныеПараметры) Экспорт
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	СозданныеЗаказы = РезультатЗадания.СозданныеЗаказы;
	
	Если СозданныеЗаказы.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументов, "СозданныеЗаказы", СозданныеЗаказы);
		ОповеститьОбИзменении(ТипЗнч(СозданныеЗаказы[0]));
		ПереключитьСтраницы("СписокДокументов", Элементы);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"),, НСтр("ru = 'Формирование заказов поставщикам завершено.'"));
	КонецЕсли;
	
	Для Каждого Сообщение Из РезультатЗадания.СообщенияОбОшибках Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ФормированиеЗаказовПоставщикам

////////////////////////////////////////////////////////////////////////////////
// Обработчики удаления заказов поставщикам при возврате к началу операции
#Область УдалениеСформированныхЗаказов

&НаСервере
Функция УдалитьЗаказыПоставщикамНаСервере()
	
	ПараметрыМетодаДлительнойОперации = Новый Структура;
	ПараметрыМетодаДлительнойОперации.Вставить("УдаляемыеДокументы", СозданныеЗаказы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление сформированных документов Заказ поставщику.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЗаказовПоставщикам.УдалитьСформированныеЗаказыПоставщикам",
		ПараметрыМетодаДлительнойОперации,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатУдаленияЗаказовПоставщикам(АдресРезультата, ДополнительныеПараметры) Экспорт
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ТипОбъектаУдаления = Неопределено;
	Если РезультатЗадания.Свойство("ТипОбъектаУдаления", ТипОбъектаУдаления) Тогда
		ОповеститьОбИзменении(ТипОбъектаУдаления);
		ПереключитьСтраницы("Запасы", Элементы);
		СозданныеЗаказы = Неопределено;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Удаление документов'"),, НСтр("ru = 'Сформированные заказы удалены.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // УдалениеСформированныхЗаказов

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Отображать поле ЗапасыФормаВыпуска.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыФормаВыпуска.Имя);
	
	ГруппаОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Элемент.Отбор.Элементы, "", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Запасы.ЕдиницаИзмерения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Запасы.ТипЕдиницы", ВидСравненияКомпоновкиДанных.НеВСписке, Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Только просмотр, Отображение полей ЗапасыОтметка, ЗапасыПоставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыПоставщик.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать"    , Ложь);
	
	// Только просмотр поля ЗапасыКЗаказу.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыКЗаказу.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр, Отображение полей ЗапасыКЗаказу, ЗапасыОстаток, ЗапасыСреднедневноеПотребление, ЗапасыЗаказыКПоступлению, ЗапасыВСпецификациях.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыКЗаказу.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыОстаток.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыПотребление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыСреднедневноеПотребление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыЗаказыКПоступлению.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыВСпецификациях.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.Номенклатура"               , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановлены"       , ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановленыУГруппы", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Цвет текста, Отметка незаполненного, Текст полей ЗапасыМинимальныйОстаток, ЗапасыМаксимальныйОстаток.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыМинимальныйОстаток.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыМаксимальныйОстаток.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановленыУГруппы", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановлены"       , ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.РежимРедактирования"        , ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<задано для группы>'"));
	
	// Цвет текста, Отметка незаполненного, Текст полей ЗапасыМинимальныйОстаток, ЗапасыМаксимальныйОстаток.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыМинимальныйОстаток.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапасыМаксимальныйОстаток.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановленыУГруппы", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыУстановлены"       , ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.РежимРедактирования"        , ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не задано>'"));
	
	// Шрифт поля Запасы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Запасы.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Запасы.ПараметрыИспользуются", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	// Видимость поля Запасы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Запасы.Имя);
	
	ГруппаОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Элемент.Отбор.Элементы, "", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораИли.Элементы, "", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"ТолькоОтмеченные"            , ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИ,
		"Запасы.НеУдовлетворяетОтборуПоОтмеченным", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Запасы.НеУдовлетворяетОтбору", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершение(ДлительнаяОперация, ОбработчикРезультата)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ОжидатьЗавершениеОкончание", ЭтотОбъект, ОбработчикРезультата);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеОкончание(РезультатДлительнойОперации, ОбработчикРезультата) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатДлительнойОперации.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, РезультатДлительнойОперации.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку()
	
	Элементы.Запасы.ТекущаяСтрока = ТекущаяСтрокаСписка;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	Для Каждого Строка Из Запасы.ПолучитьЭлементы() Цикл
		Элементы.Запасы.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРассчитываемыеПоляРодителя(Родитель, НовыеЗначения, СтарыеЗначения = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из НовыеЗначения Цикл
		Родитель[КлючЗначение.Ключ] = Родитель[КлючЗначение.Ключ] + КлючЗначение.Значение;
		Если СтарыеЗначения <> Неопределено Тогда
			Родитель[КлючЗначение.Ключ] = Родитель[КлючЗначение.Ключ] - СтарыеЗначения[КлючЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	Если Родитель.ПараметрыУстановленыУГруппы Тогда
		Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") Тогда
			СледующийРодитель = Родитель.ПолучитьРодителя();
		Иначе
			СледующийРодитель = Родитель.Родитель;
		КонецЕсли;
		ОбновитьРассчитываемыеПоляРодителя(СледующийРодитель, НовыеЗначения, СтарыеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(ИмяШага, Элементы)
	
	Если ИмяШага = "Запасы" Тогда
		
		Элементы.ГруппаДокументы.Видимость = Ложь;
		Элементы.ГруппаЗапасы.Видимость    = Истина;
		Элементы.ГруппаЗаказы.Видимость    = Истина;
		
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапасы;
		
		Элементы.СтраницыНазад.ТекущаяСтраница                   = Элементы.НазадСкрытие;
		Элементы.СтраницыСформироватьЗаказы.ТекущаяСтраница      = Элементы.СформироватьЗаказыВидимость;
		Элементы.СформироватьЗаказыПоставщикам.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ИмяШага = "Заказы" Тогда
		
		Элементы.ГруппаДокументы.Видимость = Ложь;
		Элементы.ГруппаЗапасы.Видимость    = Истина;
		Элементы.ГруппаЗаказы.Видимость    = Истина;
		
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗаказы;
		
		Элементы.СтраницыНазад.ТекущаяСтраница              = Элементы.НазадСкрытие;
		Элементы.СтраницыСформироватьЗаказы.ТекущаяСтраница = Элементы.СформироватьЗаказыСкрытие;
		
	ИначеЕсли ИмяШага = "СписокДокументов" Тогда
		
		Элементы.ГруппаДокументы.Видимость = Истина;
		Элементы.ГруппаЗапасы.Видимость    = Ложь;
		Элементы.ГруппаЗаказы.Видимость    = Ложь;
		
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаДокументы;
		
		Элементы.СтраницыНазад.ТекущаяСтраница              = Элементы.НазадВидимость;
		Элементы.СтраницыСформироватьЗаказы.ТекущаяСтраница = Элементы.СформироватьЗаказыСкрытие;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтрокиПоПричине(Ответ, ПараметрыУстановкиСтатуса) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		Оповещение = Новый ОписаниеОповещения("ОтменитьСтрокиПоПричинеОкончание", ЭтотОбъект, ПараметрыУстановкиСтатуса);
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтрокиПоПричинеОкончание(ПричинаОтмены, ПараметрыУстановкиСтатуса) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУстановкиСтатуса.Вставить("ДополнительныеПараметры", Новый Структура("ОтменаНеотработанныхСтрок", ПричинаОтмены));
	ОбщегоНазначенияБольничнаяАптекаКлиент.УстановитьСтатусОбъектовВСпискеПродолжение(КодВозвратаДиалога.Да, ПараметрыУстановкиСтатуса);
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
