
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Формирует показатели поддержания остатков товаров на складах.
//
// Параметры:
//  Параметры      - Структура - параметры выполнения заполнения по состоянию запасов.
//  АдресХранилища - Строка - адрес временного хранилища, куда помещается
//                   результат заполнения по состоянию запасов.
//                   Результатом является структура, в которой находится
//                   дерево значений - ДеревоЗапасов, которое хранит показатели
//                   поддержания остатков товаров на складах.
//
Процедура ЗаполнитьПоСостояниюЗапасов(Параметры, АдресХранилища) Экспорт
	
	Дерево       = Параметры.ДеревоЗапасов;
	Склад        = Параметры.Склад;
	ПериодПродаж = Параметры.ПериодПродаж;
	Товары       = Параметры.Товары;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(КонецДня(ТекущаяДатаСеанса()), "ДЕНЬ", -1);
	ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(НачалоДня(ДатаОкончания), "ДЕНЬ", -ПериодПродаж + 1);
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала"   , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура"          , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ТорговоеНаименование"  , Новый ОписаниеТипов("СправочникСсылка.ТорговыеНаименования"));
	ТаблицаТовары.Колонки.Добавить("ДействующиеВеществаМНН", Новый ОписаниеТипов("СправочникСсылка.ДействующиеВеществаМНН"));
	ТаблицаТовары.Колонки.Добавить("ФормаВыпуска"          , Новый ОписаниеТипов("СправочникСсылка.ФормыВыпуска"));
	
	Если Товары <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Товары, ТаблицаТовары);
	Иначе
		ЗаполнитьНоменклатуруСНеустановленнымиПараметрами(Дерево, ТаблицаТовары);
	КонецЕсли;
	
	ДополнитьСписок = Товары <> Неопределено;
	Запрос.УстановитьПараметр("ТолькоНовые", ДополнитьСписок);
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	
	ТаблицаДатыПериодаПотребления = Новый ТаблицаЗначений;
	ТаблицаДатыПериодаПотребления.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	НоваяДата = ДатаНачала;
	Пока НоваяДата < ДатаОкончания Цикл
		НоваяСтрока = ТаблицаДатыПериодаПотребления.Добавить();
		НоваяСтрока.Дата = НоваяДата;
		НоваяДата = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(НоваяДата, "ДЕНЬ", 1);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаДатыПериодаПотребления", ТаблицаДатыПериодаПотребления);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(ТаблицаТовары());
	ТекстыЗапроса.Добавить(ТаблицаСтатистикаПотребления());
	ТекстыЗапроса.Добавить(ТаблицаОстатки());
	ТекстыЗапроса.Добавить(ТаблицаЗаказыКПоступлению());
	ТекстыЗапроса.Добавить(ТаблицаВСпецификациях());
	ТекстыЗапроса.Добавить(ТаблицаТоварныеОграничения(), "ТаблицаТоварныеОграничения");
	
	Таблицы = ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса);
	
	Если Не ДополнитьСписок Тогда
		Дерево.Строки.Очистить();
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Дерево.Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Таблица.Колонки.Добавить("Обрабатывать", Новый ОписаниеТипов("Булево"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблицы.ТаблицаТоварныеОграничения, Таблица);
	
	ТорговоеНаименование   = Неопределено;
	ДействующиеВеществаМНН = Неопределено;
	ФормаВыпуска           = Неопределено;
	
	ТекущаяСтрокаРодителя = Дерево;
	
	Таблица.Сортировать("ДействующиеВеществаМНН, ФормаВыпуска, ТорговоеНаименование");
	
	НовыеСтроки = Новый Массив;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Не Строка.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействующиеВеществаМНН <> Строка.ДействующиеВеществаМНН Или ФормаВыпуска <> Строка.ФормаВыпуска Тогда
			Если ЗначениеЗаполнено(Строка.ДействующиеВеществаМНН) Тогда
				Отбор = Новый Структура("ДействующиеВеществаМНН, ФормаВыпуска, Склад");
				ЗаполнитьЗначенияСвойств(Отбор, Строка);
				НайденныеСтроки = Дерево.Строки.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТекущаяСтрокаРодителя = НайденныеСтроки[0];
					ТекущаяСтрокаРодителя.ТочкаЗаказаДостигнута = Ложь;
				Иначе
					ТекущаяСтрокаРодителя = Дерево.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаРодителя, Строка, "ДействующиеВеществаМНН, ФормаВыпуска, Склад");
					ТекущаяСтрокаРодителя.Представление = ПредставлениеНоменклатуры(ТекущаяСтрокаРодителя);
					ТекущаяСтрокаРодителя.ЕдиницаИзмерения = АптечныеТовары.ОсновнаяЕдиницаИзмерения(Строка);
				КонецЕсли;
				
				ОтборОграничений = Новый Структура("КлючОтбора, ФормаВыпуска", Строка.ДействующиеВеществаМНН, Строка.ФормаВыпуска);
				НайденныеСтроки = Таблица.Скопировать(ОтборОграничений, "КлючОтбора, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, ЕдиницаИзмерения, ТипЕдиницы, Обрабатывать");
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаРодителя, НайденныеСтроки[0]);
					ТекущаяСтрокаРодителя.ПараметрыУстановлены = Истина;
					ТекущаяСтрокаРодителя.ПараметрыИспользуются = НайденныеСтроки.НайтиСтроки(Новый Структура("Обрабатывать", Истина)).Количество() <> 0;
					ТекущаяСтрокаРодителя.ПараметрыУстановленыУГруппы = Ложь;
				Иначе
					ТекущаяСтрокаРодителя.ПараметрыУстановлены = Ложь;
					ТекущаяСтрокаРодителя.ПараметрыИспользуются = Ложь;
				КонецЕсли;
			Иначе
				ТекущаяСтрокаРодителя = Дерево;
			КонецЕсли;
			ДействующиеВеществаМНН = Строка.ДействующиеВеществаМНН;
			ФормаВыпуска = Строка.ФормаВыпуска;
			ТорговоеНаименование = Неопределено;
		КонецЕсли;
		
		Если ТорговоеНаименование <> Строка.ТорговоеНаименование Тогда
			
			Если ЗначениеЗаполнено(Строка.ТорговоеНаименование) Тогда
				Отбор = Новый Структура("ТорговоеНаименование, ФормаВыпуска, Склад");
				ЗаполнитьЗначенияСвойств(Отбор, Строка);
				НайденныеСтроки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТекущаяСтрокаРодителя = НайденныеСтроки[0];
					ТекущаяСтрокаРодителя.ТочкаЗаказаДостигнута = Ложь;
				Иначе
					Если ТорговоеНаименование = Неопределено Тогда
						ТекущаяСтрокаРодителя = ТекущаяСтрокаРодителя.Строки.Добавить();
					Иначе
						Если ТекущаяСтрокаРодителя.Родитель <> Неопределено Тогда
							ТекущаяСтрокаРодителя = ТекущаяСтрокаРодителя.Родитель.Строки.Добавить();
						Иначе
							ТекущаяСтрокаРодителя = Дерево.Строки.Добавить();
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаРодителя, Строка, "ТорговоеНаименование, ФормаВыпуска, Склад");
					ТекущаяСтрокаРодителя.Представление = ПредставлениеНоменклатуры(ТекущаяСтрокаРодителя);
					ТекущаяСтрокаРодителя.ЕдиницаИзмерения = АптечныеТовары.ОсновнаяЕдиницаИзмерения(Строка);
				КонецЕсли;
				
				ОтборОграничений = Новый Структура("КлючОтбора, ФормаВыпуска", Строка.ТорговоеНаименование, Строка.ФормаВыпуска);
				НайденныеСтроки = Таблица.Скопировать(ОтборОграничений, "КлючОтбора, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, ЕдиницаИзмерения, ТипЕдиницы, Обрабатывать");
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаРодителя, НайденныеСтроки[0]);
					ТекущаяСтрокаРодителя.ПараметрыУстановлены = Истина;
					ТекущаяСтрокаРодителя.ПараметрыИспользуются = НайденныеСтроки.НайтиСтроки(Новый Структура("Обрабатывать", Истина)).Количество() <> 0;
					ТекущаяСтрокаРодителя.ПараметрыУстановленыУГруппы = Ложь;
				Иначе
					ТекущаяСтрокаРодителя.ПараметрыУстановлены = Ложь;
					ТекущаяСтрокаРодителя.ПараметрыИспользуются = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТорговоеНаименование = Строка.ТорговоеНаименование;
			
		КонецЕсли;
		
		РассчитываемыеПоля = ИнициализироватьРасчетныеПоказатели();
		Отбор = Новый Структура("Номенклатура, Склад");
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		НайденныеСтроки = ТекущаяСтрокаРодителя.Строки.НайтиСтроки(Отбор);
		НоменклатураНайдена = НайденныеСтроки.Количество() > 0;
		Если НоменклатураНайдена Тогда
			СтрокаНоменклатуры = НайденныеСтроки[0];
			СтрокаНоменклатуры.КЗаказу = 0;
			СтрокаНоменклатуры.ТочкаЗаказаДостигнута = Ложь;
			СтрокаНоменклатуры.Отметка = Ложь;
		Иначе
			СтрокаНоменклатуры = ТекущаяСтрокаРодителя.Строки.Добавить();
			ИсключаемыеПоля = "МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, " + ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(РассчитываемыеПоля);
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, Строка,, ИсключаемыеПоля);
			СтрокаНоменклатуры.Представление = ПредставлениеНоменклатуры(СтрокаНоменклатуры);
		КонецЕсли;
		
		Если Строка.Номенклатура = Строка.КлючОтбора Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, Строка, "КлючОтбора, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, ЕдиницаИзмерения, ТипЕдиницы, Коэффициент");
			СтрокаНоменклатуры.ПараметрыУстановлены = Истина;
			СтрокаНоменклатуры.ПараметрыИспользуются = Истина;
			СтрокаНоменклатуры.ПараметрыУстановленыУГруппы = Ложь;
		Иначе
			СтрокаНоменклатуры.ПараметрыУстановлены = Ложь;
			СтрокаНоменклатуры.ПараметрыИспользуются = Ложь;
		КонецЕсли;
		
		ДобавитьСтрокуДляРасчетаКЗаказу(НовыеСтроки, СтрокаНоменклатуры);
		
		Коэффициент = СтрокаНоменклатуры.Коэффициент;
		Если Коэффициент = 0 Тогда
			СтрокаНоменклатуры.Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ЕдиницаИзмерения);
		КонецЕсли;
		
		Для Каждого КлючЗначение Из РассчитываемыеПоля Цикл
			РассчитываемыеПоля[КлючЗначение.Ключ] = ?(Строка[КлючЗначение.Ключ] <> 0, Строка[КлючЗначение.Ключ] / СтрокаНоменклатуры.Коэффициент, 0);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, РассчитываемыеПоля);
		
		РассчитатьПоляРодителя(СтрокаНоменклатуры.Родитель, РассчитываемыеПоля);
		
	КонецЦикла;
	
	РассчитатьКоличествоКЗаказу(НовыеСтроки);
	
	Дерево.Строки.Сортировать("Представление", Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоЗапасов", Дерево);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Формирует записи в регистре сведений ТоварныеОграничения,
// для хранения настроек формирования заказов поставщикам.
//
// Параметры:
//  Таблица - ТаблицаЗначений - описание товарных ограничений.
//
Процедура ЗаписатьПараметрыПоддержанияЗапаса(Таблица) Экспорт
	
	Таблица.Колонки.Добавить("ОтборНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
	
	Для Каждого ТекущаяСтрока Из Таблица Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыАналитики = Новый Структура;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ТорговоеНаименование) Тогда
			ПараметрыАналитики.Вставить("ТорговоеНаименование", ТекущаяСтрока.ТорговоеНаименование);
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ДействующиеВеществаМНН) Тогда
			ПараметрыАналитики.Вставить("ДействующиеВеществаМНН", ТекущаяСтрока.ДействующиеВеществаМНН);
		Иначе
			ВызватьИсключение НСтр("ru = 'При сохранении параметров поддержания запасов возникла непредвиденная ситуация. Обратитесь к администратору программы.'");
		КонецЕсли;
		
		ПараметрыАналитики.Вставить("ФормаВыпуска", ТекущаяСтрока.ФормаВыпуска);
		
		ТекущаяСтрока.ОтборНоменклатуры = Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ЗначениеКлючаАналитики(ПараметрыАналитики);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Склад                         КАК Склад,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса
	|
	|ПОМЕСТИТЬ НовыеПараметры
	|ИЗ
	|	&Таблица КАК Товары
	|;
	|
	|/////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеПараметры.ОтборНоменклатуры  КАК ОтборНоменклатуры,
	|	НовыеПараметры.Номенклатура       КАК Номенклатура,
	|	НовыеПараметры.Склад              КАК Склад,
	|	НовыеПараметры.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс) КАК МетодОбеспеченияПотребностей,
	|	НовыеПараметры.МинимальноеКоличествоЗапаса  КАК МинимальноеКоличествоЗапаса,
	|	НовыеПараметры.МаксимальноеКоличествоЗапаса КАК МаксимальноеКоличествоЗапаса
	|
	|ИЗ
	|	НовыеПараметры КАК НовыеПараметры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ТоварныеОграничения КАК ТекущиеПараметры
	|	ПО
	|		ТекущиеПараметры.ОтборНоменклатуры = НовыеПараметры.ОтборНоменклатуры
	|		И ТекущиеПараметры.Номенклатура = НовыеПараметры.Номенклатура
	|		И ТекущиеПараметры.Склад = НовыеПараметры.Склад
	|
	|ГДЕ
	|	ТекущиеПараметры.Номенклатура ЕСТЬ NULL
	|	ИЛИ ТекущиеПараметры.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс)
	|	ИЛИ НовыеПараметры.ЕдиницаИзмерения <> ТекущиеПараметры.ЕдиницаИзмерения
	|	ИЛИ НовыеПараметры.МинимальноеКоличествоЗапаса <> ТекущиеПараметры.МинимальноеКоличествоЗапаса
	|	ИЛИ НовыеПараметры.МаксимальноеКоличествоЗапаса <> ТекущиеПараметры.МаксимальноеКоличествоЗапаса
	|	ИЛИ (НовыеПараметры.МаксимальноеКоличествоЗапаса = 0 И НЕ ТекущиеПараметры.Номенклатура ЕСТЬ NULL)
	|";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Таблица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура"     , "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОтборНоменклатуры", "ОтборНоменклатуры");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад"            , "Склад");
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаНовыеПараметры = Запрос.Выполнить().Выгрузить();
		
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Использование      = Истина;
		Набор.Отбор.ОтборНоменклатуры.Использование = Истина;
		Набор.Отбор.Склад.Использование             = Истина;
		
		Для Каждого Строка Из ТаблицаНовыеПараметры Цикл
			
			Набор.Отбор.Номенклатура.Значение      = Строка.Номенклатура;
			Набор.Отбор.ОтборНоменклатуры.Значение = Строка.ОтборНоменклатуры;
			Набор.Отбор.Склад.Значение             = Строка.Склад;
			Набор.Очистить();
			
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) И Строка.МаксимальноеКоличествоЗапаса > 0 Тогда
				НоваяСтрока = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
			Набор.Записать(Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Формирует документы ЗаказПоставщику по заданным настройкам товарных ограничений.
//
// Параметры:
//  Параметры      - Структура - параметры формирования заказов поставщикам.
//  АдресХранилища - Строка - адрес временного хранилища, куда помещается
//                   результат формирования заказов поставщикам.
//                   Результатом является структура, в которой находится
//                   фиксированны массив сформированных заказов поставщикам.
//
Процедура СформироватьЗаказыПоставщикам(Параметры, АдресХранилища) Экспорт
	
	ДеревоЗапасов = Параметры.ДеревоЗапасов;
	Склад = Параметры.Склад;
	
	ТаблицаОбеспечения = ОписаниеТаблицыОбеспечения();
	
	ЗапасыКЗаказу = ДеревоЗапасов.Строки.НайтиСтроки(Новый Структура("Отметка", Истина), Истина);
	Для Каждого Строка Из ЗапасыКЗаказу Цикл
		
		Если Строка.КЗаказу = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОбеспечения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Контрагент = Строка.Поставщик;
		НоваяСтрока.КЗаказу = НоваяСтрока.КЗаказу * Строка.Коэффициент;
		
	КонецЦикла;
	
	КэшированныеЗначения = Неопределено;
	
	ДокументыЗаказов = ОписаниеДокументаЗаказПоставщику();
	КлючевыеПоля = Новый Структура;
	Для Каждого Колонка Из ДокументыЗаказов.Колонки Цикл
		Если Колонка.Имя = "Валюта" Или Колонка.Имя = "ЦенаВключаетНДС" Или Колонка.Имя = "ДатаПоступления" Тогда
			Продолжить;
		КонецЕсли;
		ПустоеЗначение = Колонка.ТипЗначения.ПривестиЗначение();
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ПустоеЗначение) Тогда
			КлючевыеПоля.Вставить(Колонка.Имя, ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары"                        , ТаблицаОбеспечения);
	Запрос.УстановитьПараметр("ДатаДокумента"                 , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Склад"                         , Склад);
	Запрос.УстановитьПараметр("ДатаПоступления"               , ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(НачалоДня(ТекущаяДатаСеанса()), "ДЕНЬ", 1));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(ТаблицаТоварыКЗаказу());
	ТекстыЗапроса.Добавить(ТаблицаТоварыКЗаказуПоСпецификации(), "ТаблицаТоварыКЗаказуПоСпецификации");
	ТекстыЗапроса.Добавить(ТаблицаТоварыКЗаказуБезСпецификации(), "ТаблицаТоварыКЗаказуБезСпецификации");
	
	НачатьТранзакцию();
	ЗаблокироватьДанныеОбеспечения(ТаблицаОбеспечения);
	
	Таблицы = ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса);
	
	ТоварыПоСпецификации = Таблицы.ТаблицаТоварыКЗаказуПоСпецификации;
	ТоварыКЗаказу        = Таблицы.ТаблицаТоварыКЗаказуБезСпецификации;
	
	Для Каждого ТоварОбеспечения Из ТаблицаОбеспечения Цикл
		
		СпецификацииСТоваром = ТоварыПоСпецификации.НайтиСтроки(Новый Структура("Номенклатура", ТоварОбеспечения.Номенклатура));
		
		Для Каждого ТоварПоСпецификации Из СпецификацииСТоваром Цикл
			
			КоличествоКЗаказу = Мин(ТоварОбеспечения.КЗаказу, ТоварПоСпецификации.Количество);
			Если КоличествоКЗаказу = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КлючевыеПоля, ТоварПоСпецификации);
			ОписаниеЗаказа = ПолучитьТаблицуТоваровЗаказаПоКлючевымПолям(ДокументыЗаказов, КлючевыеПоля);
			ЗаполнитьЗначенияСвойств(ОписаниеЗаказа, ТоварПоСпецификации);
			
			СтрокаЗаказа = ОписаниеЗаказа.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, ТоварПоСпецификации);
			СтрокаЗаказа.Количество = КоличествоКЗаказу;
			
			СтруктураДействий = СтруктураДействийЗаполненияПоСпецификации(ТоварПоСпецификации);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
			
			КоличествоВЕдиницахИзмерения = Окр(СтрокаЗаказа.КоличествоВЕдиницахИзмерения + 0.5, 0, РежимОкругления.Окр15как10);
			Если КоличествоВЕдиницахИзмерения > СтрокаЗаказа.КоличествоВЕдиницахИзмерения Тогда
				
				СтрокаЗаказа.КоличествоВЕдиницахИзмерения = КоличествоВЕдиницахИзмерения;
				
				СтруктураДействий = СтруктураДействийЗаполненияПоСпецификации(ТоварПоСпецификации, Истина);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
			ТоварОбеспечения.КЗаказу = ТоварОбеспечения.КЗаказу - СтрокаЗаказа.Количество;
			
		КонецЦикла;
		
		Если ТоварОбеспечения.КЗаказу > 0 Тогда
			
			ТоварКЗаказу = ТоварыКЗаказу.Найти(ТоварОбеспечения.Номенклатура, "Номенклатура");
			
			ЗаполнитьЗначенияСвойств(КлючевыеПоля, ТоварКЗаказу);
			ОписаниеЗаказа = ПолучитьТаблицуТоваровЗаказаПоКлючевымПолям(ДокументыЗаказов, КлючевыеПоля);
			ЗаполнитьЗначенияСвойств(ОписаниеЗаказа, ТоварКЗаказу);
			
			СтрокаЗаказа = ОписаниеЗаказа.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, ТоварКЗаказу);
			СтрокаЗаказа.Количество = ТоварОбеспечения.КЗаказу;
			
			СтруктураДействий = СтруктураДействийЗаполненияБезСпецификации();
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
			
			КоличествоВЕдиницахИзмерения = Окр(СтрокаЗаказа.КоличествоВЕдиницахИзмерения + 0.5, 0, РежимОкругления.Окр15как10);
			Если КоличествоВЕдиницахИзмерения > СтрокаЗаказа.КоличествоВЕдиницахИзмерения Тогда
				
				СтрокаЗаказа.КоличествоВЕдиницахИзмерения = КоличествоВЕдиницахИзмерения;
				
				СтруктураДействий = СтруктураДействийЗаполненияБезСпецификации(Истина);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЗаказов = Новый Массив;
	
	Сообщения = Новый Массив;
	МенеджерЗаказа = Документы.ЗаказПоставщику;
	Для Каждого ОписаниеЗаказа Из ДокументыЗаказов Цикл
		ДанныеЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеЗаказа);
		Заказ = ЗаполнитьИПровестиЗаказ(МенеджерЗаказа, ДанныеЗаполнения, Сообщения);
		МассивЗаказов.Добавить(Заказ);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеЗаказы"   , Новый ФиксированныйМассив(МассивЗаказов));
	Результат.Вставить("СообщенияОбОшибках", Сообщения);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Удаляет сформированные обработкой документы ЗаказПоставщику.
//
// Параметры:
//  Параметры      - Структура - параметры удаления заказов поставщикам.
//  АдресХранилища - Строка - адрес временного хранилища, куда помещается
//                   результат удаления заказов поставщикам.
//
Процедура УдалитьСформированныеЗаказыПоставщикам(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура;
	
	УдаляемыеДокументы = Параметры.УдаляемыеДокументы;
	
	Если ТипЗнч(УдаляемыеДокументы) = Тип("ФиксированныйМассив") И УдаляемыеДокументы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			УдалитьОбъекты(Новый Массив(УдаляемыеДокументы), Ложь);
			Результат.Вставить("ТипОбъектаУдаления", ТипЗнч(УдаляемыеДокументы[0]));
		Исключение
			ШаблонОшибки = НСтр("ru = 'При удалении заказов поставщикам произошла ошибка: %1'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеТаблиц

#Область Запасы

Функция ТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Таблица.Номенклатура                  КАК Номенклатура,
	|	Таблица.Склад                         КАК Склад,
	|	Таблица.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Таблица.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
	|	Таблица.ЕдиницаИзмерения              КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВтТоварыПоддерживаемогоЗапаса
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК Таблица
	|
	|ГДЕ
	|	МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
	|	И Таблица.Склад = &Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                  КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Склад                         КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ИСТИНА                               КАК Обрабатывать
	|ПОМЕСТИТЬ ПоддерживаемыйЗапасНоменклатура
	|ИЗ
	|	ВтТоварыПоддерживаемогоЗапаса КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикиОтбора.ТорговоеНаименование  КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры              КАК ОтборНоменклатуры,
	|	СправочникНоменклатура.Ссылка         КАК Номенклатура,
	|	Товары.Склад                          КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса    КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса   КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения               КАК ЕдиницаИзмерения,
	|	ПоддерживаемыйЗапасНоменклатура.Номенклатура ЕСТЬ NULL КАК Обрабатывать
	|ПОМЕСТИТЬ ПоддерживаемыйЗапасТорговыеНаименования
	|ИЗ
	|	ВтТоварыПоддерживаемогоЗапаса КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикиОтбора
	|	ПО
	|		Товары.ОтборНоменклатуры = АналитикиОтбора.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		ВЫБОР
	|			КОГДА АналитикиОтбора.ТорговоеНаименование <> ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|				ТОГДА АналитикиОтбора.ТорговоеНаименование = СправочникНоменклатура.ЭлементКАТ.ТорговоеНаименование
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		И АналитикиОтбора.ФормаВыпуска = СправочникНоменклатура.ЭлементКАТ.ФормаВыпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПоддерживаемыйЗапасНоменклатура КАК ПоддерживаемыйЗапасНоменклатура
	|	ПО
	|		ПоддерживаемыйЗапасНоменклатура.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикиОтбора.ДействующиеВеществаМНН  КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры                КАК ОтборНоменклатуры,
	|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
	|	Товары.Склад                            КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса      КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса     КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|	ПоддерживаемыйЗапасНоменклатура.Номенклатура ЕСТЬ NULL
	|		И ПоддерживаемыйЗапасТорговыеНаименования.Номенклатура ЕСТЬ NULL КАК Обрабатывать
	|ПОМЕСТИТЬ ПоддерживаемыйЗапасДействующиеВеществаМНН
	|ИЗ
	|	ВтТоварыПоддерживаемогоЗапаса КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикиОтбора
	|	ПО
	|		Товары.ОтборНоменклатуры = АналитикиОтбора.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		АналитикиОтбора.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|		И ВЫБОР
	|			КОГДА АналитикиОтбора.ДействующиеВеществаМНН <> ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)
	|				ТОГДА АналитикиОтбора.ДействующиеВеществаМНН В (СправочникНоменклатура.ЭлементКАТ.ТорговоеНаименование.ДействующиеВеществаМНН,
	|																СправочникНоменклатура.ЭлементКАТ.ДействующиеВеществаМНН)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		И АналитикиОтбора.ФормаВыпуска = СправочникНоменклатура.ЭлементКАТ.ФормаВыпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПоддерживаемыйЗапасНоменклатура КАК ПоддерживаемыйЗапасНоменклатура
	|	ПО
	|		ПоддерживаемыйЗапасНоменклатура.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПоддерживаемыйЗапасТорговыеНаименования КАК ПоддерживаемыйЗапасТорговыеНаименования
	|	ПО
	|		ПоддерживаемыйЗапасТорговыеНаименования.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючОтбора                    КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Склад                         КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.Обрабатывать                  КАК Обрабатывать
	|ПОМЕСТИТЬ ТоварыПоддерживаемогоЗапаса
	|ИЗ
	|	ПоддерживаемыйЗапасНоменклатура КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.КлючОтбора                    КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Склад                         КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.Обрабатывать                  КАК Обрабатывать
	|ИЗ
	|	ПоддерживаемыйЗапасТорговыеНаименования КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.КлючОтбора                    КАК КлючОтбора,
	|	Товары.ОтборНоменклатуры             КАК ОтборНоменклатуры,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Склад                         КАК Склад,
	|	Товары.МинимальноеКоличествоЗапаса   КАК МинимальноеКоличествоЗапаса,
	|	Товары.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.Обрабатывать                  КАК Обрабатывать
	|ИЗ
	|	ПоддерживаемыйЗапасДействующиеВеществаМНН КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура            КАК Номенклатура,
	|	Товары.ТорговоеНаименование    КАК ТорговоеНаименование,
	|	Товары.ДействующиеВеществаМНН  КАК ДействующиеВеществаМНН,
	|	Товары.ФормаВыпуска            КАК ФормаВыпуска,
	|	&Склад                         КАК Склад
	|ПОМЕСТИТЬ ТаблицаОтборТоваров
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура  КАК Номенклатура,
	|	Товары.Склад         КАК Склад
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаОтборТоваров КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка  КАК Номенклатура,
	|	Товары.Склад                   КАК Склад
	|ИЗ
	|	ТаблицаОтборТоваров КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		СправочникНоменклатура.ЭтоЛекарственноеСредство
	|		И СправочникНоменклатура.ЭлементКАТ.ТорговоеНаименование = Товары.ТорговоеНаименование
	|		И СправочникНоменклатура.ЭлементКАТ.ФормаВыпуска = Товары.ФормаВыпуска
	|ГДЕ
	|	Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Товары.ТорговоеНаименование <> ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка  КАК Номенклатура,
	|	Товары.Склад                   КАК Склад
	|ИЗ
	|	ТаблицаОтборТоваров КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		СправочникНоменклатура.ЭтоЛекарственноеСредство
	|		И СправочникНоменклатура.ЭлементКАТ.ДействующиеВеществаМНН = Товары.ДействующиеВеществаМНН
	|		И СправочникНоменклатура.ЭлементКАТ.ФормаВыпуска = Товары.ФормаВыпуска
	|ГДЕ
	|	Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Товары.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
	|	И Товары.ДействующиеВеществаМНН <> ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура  КАК Номенклатура,
	|	Товары.Склад         КАК Склад
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	ТоварыПоддерживаемогоЗапаса КАК Товары
	|ГДЕ
	|	НЕ &ТолькоНовые
	|	И Товары.Обрабатывать
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Товары1.Номенклатура  КАК Номенклатура,
	|	Товары1.Склад         КАК Склад
	|ИЗ
	|	ТоварыПоддерживаемогоЗапаса КАК Товары1
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТоварыПоддерживаемогоЗапаса КАК Товары2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаТовары КАК ТаблицаТовары
	|		ПО
	|			Товары2.Номенклатура = ТаблицаТовары.Номенклатура
	|			И Товары2.Склад = ТаблицаТовары.Склад
	|	ПО
	|		Товары1.ОтборНоменклатуры = Товары2.ОтборНоменклатуры
	|ГДЕ
	|	&ТолькоНовые
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура  КАК Номенклатура,
	|	Товары.Склад         КАК Склад
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаСтатистикаПотребления()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Потребление.Номенклатура                 КАК Номенклатура,
	|	Потребление.Склад                        КАК Склад,
	|	НАЧАЛОПЕРИОДА(Потребление.Период, ДЕНЬ)  КАК Дата,
	|	СУММА(Потребление.Количество)            КАК Количество
	|ПОМЕСТИТЬ ВтРасходТовараПоДням
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК Потребление
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТовары КАК Товары
	|	ПО
	|		Потребление.Номенклатура   = Товары.Номенклатура
	|		И Потребление.Склад        = Товары.Склад
	|ГДЕ
	|	Потребление.Активность
	|	И Потребление.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Потребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(Потребление.Регистратор) НЕ В(
	|		ТИП(Документ.ВозвратТоваровПоставщику),
	|		ТИП(Документ.ПересортицаТоваров),
	|		ТИП(Документ.КорректировкаРегистров))
	|
	|СГРУППИРОВАТЬ ПО
	|	Потребление.Номенклатура,
	|	Потребление.Склад,
	|	НАЧАЛОПЕРИОДА(Потребление.Период, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Возвраты.Номенклатура       КАК Номенклатура,
	|	Возвраты.Склад              КАК Склад,
	|	СУММА(Возвраты.Количество)  КАК Количество
	|
	|ПОМЕСТИТЬ ВтВозвратТовараЗаПериод
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК Возвраты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТовары КАК Товары
	|	ПО
	|		Возвраты.Номенклатура = Товары.Номенклатура
	|		И Возвраты.Склад      = Товары.Склад
	|ГДЕ
	|	Возвраты.Активность
	|	И Возвраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Возвраты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	// Учитываются документы следующих типов:
	|	И ТИПЗНАЧЕНИЯ(Возвраты.Регистратор) В(
	|		ТИП(Документ.ВозвратТоваровИзОтделения),
	|		ТИП(Документ.ЧекККМВозврат))
	|
	|СГРУППИРОВАТЬ ПО
	|	Возвраты.Номенклатура,
	|	Возвраты.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДням.Номенклатура  КАК Номенклатура,
	|	ОстаткиПоДням.Склад         КАК Склад,
	|	ОстаткиПоДням.Период        КАК Дата,
	|	ВЫБОР
	|		КОГДА ОстаткиПоДням.КоличествоНачальныйОстаток > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                       КАК ЕстьНачальныйОстаток,
	|	ВЫБОР
	|		КОГДА ОстаткиПоДням.КоличествоКонечныйОстаток > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                       КАК ЕстьКонечныйОстаток
	|
	|ПОМЕСТИТЬ ВтНаличиеОстаткаТовараПоДням
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|		&ДатаНачала, &ДатаОкончания,
	|		ДЕНЬ,,
	|		(Номенклатура, Склад) В(
	|			ВЫБРАТЬ
	|				Т.Номенклатура   КАК Номенклатура,
	|				Т.Склад          КАК Склад
	|			ИЗ
	|				ВтТовары КАК Т)) КАК ОстаткиПоДням
	|
	|ГДЕ
	|	ОстаткиПоДням.КоличествоНачальныйОстаток > 0
	|	ИЛИ ОстаткиПоДням.КоличествоКонечныйОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	Дата,
	|	ЕстьНачальныйОстаток,
	|	ЕстьКонечныйОстаток
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПериода.Дата КАК Дата
	|ПОМЕСТИТЬ ДатыПериодаПотребления
	|ИЗ
	|	&ТаблицаДатыПериодаПотребления КАК ДатыПериода
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КалендарьПредприятия.Значение, Товары.Склад.Календарь) КАК Календарь,
	|	График.ДатаГрафика КАК ДатаГрафика
	|
	|ПОМЕСТИТЬ ВтРабочиеДниВПериоде
	|ИЗ
	|	ВтТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Константа.ОсновнойКалендарьПредприятия КАК КалендарьПредприятия
	|	ПО
	|		Товары.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КалендарныеГрафики КАК График
	|	ПО
	|		График.Календарь = ЕСТЬNULL(КалендарьПредприятия.Значение, Товары.Склад.Календарь)
	|		И График.ДеньВключенВГрафик
	|		И График.ДатаГрафика МЕЖДУ &ДатаНачала И &ДатаОкончания
	|ГДЕ
	|	ЕСТЬNULL(КалендарьПредприятия.Значение, Товары.Склад.Календарь) <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) КАК Календарь,
	|	ДатыПериода.Дата КАК ДатаГрафика
	|ИЗ
	|	ДатыПериодаПотребления КАК ДатыПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаГрафика,
	|	Календарь
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаличиеОстаткаПоДням.Номенклатура    КАК Номенклатура,
	|	НаличиеОстаткаПоДням.Склад           КАК Склад,
	|	ГрафикРаботы.ДатаГрафика             КАК ДатаГрафика,
	|	МАКСИМУМ(НаличиеОстаткаПоДням.Дата)  КАК ДатаОстатка
	|
	|ПОМЕСТИТЬ ВтДатыОстаткаРабочихДней
	|ИЗ
	|	ВтНаличиеОстаткаТовараПоДням КАК НаличиеОстаткаПоДням
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Константа.ОсновнойКалендарьПредприятия КАК КалендарьПредприятия
	|	ПО
	|		НаличиеОстаткаПоДням.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтРабочиеДниВПериоде КАК ГрафикРаботы
	|	ПО
	|		ЕСТЬNULL(КалендарьПредприятия.Значение, НаличиеОстаткаПоДням.Склад.Календарь) = ГрафикРаботы.Календарь
	|		И НаличиеОстаткаПоДням.Дата <= ГрафикРаботы.ДатаГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	НаличиеОстаткаПоДням.Номенклатура,
	|	НаличиеОстаткаПоДням.Склад,
	|	ГрафикРаботы.ДатаГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ДатаОстатка,
	|	ДатаГрафика
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Склад          КАК Склад,
	|	СУММА(1)         КАК КоличествоДней,
	|	СУММА(ВЫБОР
	|			КОГДА НаличиеОстаткаПоДням.ЕстьКонечныйОстаток
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ)       КАК КоличествоДнейЕстьКонечныйОстаток
	|
	|ПОМЕСТИТЬ ВтКоличествоРабочихДнейСОстатком
	|ИЗ
	|	ВтДатыОстаткаРабочихДней КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтНаличиеОстаткаТовараПоДням КАК НаличиеОстаткаПоДням
	|	ПО
	|		Т.ДатаОстатка    = НаличиеОстаткаПоДням.Дата
	|		И Т.Номенклатура = НаличиеОстаткаПоДням.Номенклатура
	|		И Т.Склад        = НаличиеОстаткаПоДням.Склад
	|		И (Т.ДатаГрафика = Т.ДатаОстатка И НаличиеОстаткаПоДням.ЕстьНачальныйОстаток
	|				ИЛИ НаличиеОстаткаПоДням.ЕстьКонечныйОстаток)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Склад             КАК Склад,
	|	ВЫБОР
	|		КОГДА Товары.СреднедневноеПотребление > Товары.СреднедневноеПотреблениеЕстьКонечныйОстаток
	|			ТОГДА Товары.СреднедневноеПотребление
	|		ИНАЧЕ Товары.СреднедневноеПотреблениеЕстьКонечныйОстаток
	|	КОНЕЦ                    КАК СреднедневноеПотребление,
	|	ВЫБОР
	|		КОГДА Товары.Потребление > Товары.ПотреблениеЕстьКонечныйОстаток
	|			ТОГДА Товары.Потребление
	|		ИНАЧЕ Товары.ПотреблениеЕстьКонечныйОстаток
	|	КОНЕЦ                    КАК Потребление
	|ПОМЕСТИТЬ СтатистикаПотребления
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура      КАК Номенклатура,
	|		Товары.Склад             КАК Склад,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаКоличествоДней.КоличествоДней, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ (Товары.Потребление - ЕСТЬNULL(ТаблицаВозврат.Количество, 0)) / ТаблицаКоличествоДней.КоличествоДней
	|		КОНЕЦ                                                                               КАК СреднедневноеПотребление,
	|		Товары.Потребление - ЕСТЬNULL(ТаблицаВозврат.Количество, 0)                         КАК Потребление,
	|		Товары.ПотреблениеЕстьКонечныйОстаток - ЕСТЬNULL(ТаблицаВозврат.Количество, 0)      КАК ПотреблениеЕстьКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаКоличествоДней.КоличествоДнейЕстьКонечныйОстаток, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ  (Товары.ПотреблениеЕстьКонечныйОстаток - ЕСТЬNULL(ТаблицаВозврат.Количество, 0)) / ТаблицаКоличествоДней.КоличествоДнейЕстьКонечныйОстаток
	|		КОНЕЦ           КАК СреднедневноеПотреблениеЕстьКонечныйОстаток
	|	ИЗ(
	|		ВЫБРАТЬ
	|			Товары.Номенклатура      КАК Номенклатура,
	|			Товары.Склад             КАК Склад,
	|			ЕСТЬNULL(СУММА(ТаблицаРасход.Количество), 0)     КАК Потребление,
	|			ЕСТЬNULL(СУММА(ВЫБОР КОГДА ТаблицаОстатки.ЕстьКонечныйОстаток ТОГДА
	|						ТаблицаРасход.Количество
	|					ИНАЧЕ
	|						0
	|				КОНЕЦ), 0)                                   КАК ПотреблениеЕстьКонечныйОстаток
	|		ИЗ
	|			ВтТовары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				ВтРасходТовараПоДням КАК ТаблицаРасход
	|			ПО
	|				Товары.Номенклатура = ТаблицаРасход.Номенклатура
	|				И Товары.Склад      = ТаблицаРасход.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				ВтНаличиеОстаткаТовараПоДням КАК ТаблицаОстатки
	|			ПО
	|				Товары.Номенклатура  = ТаблицаОстатки.Номенклатура
	|				И Товары.Склад       = ТаблицаОстатки.Склад
	|				И ТаблицаРасход.Дата = ТаблицаОстатки.Дата
	|		СГРУППИРОВАТЬ ПО
	|			Товары.Номенклатура,
	|			Товары.Склад
	|		) КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтВозвратТовараЗаПериод КАК ТаблицаВозврат
	|		ПО
	|			Товары.Номенклатура = Товары.Номенклатура
	|			И Товары.Склад      = Товары.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтКоличествоРабочихДнейСОстатком КАК ТаблицаКоличествоДней
	|		ПО
	|			Товары.Номенклатура = ТаблицаКоличествоДней.Номенклатура
	|			И Товары.Склад      = ТаблицаКоличествоДней.Склад
	|	) КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура       КАК Номенклатура,
	|	Остатки.Склад              КАК Склад,
	|	Остатки.ВНаличииОстаток    КАК Остаток,
	|	Остатки.ВНаличииОстаток - Остатки.ВРезервеСоСкладаОстаток  КАК СвободныйОстаток
	|ПОМЕСТИТЬ ОстаткиТоваров
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(,
	|		(Номенклатура, Склад) В(
	|			ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Склад          КАК Склад
	|			ИЗ
	|				ВтТовары КАК Товары)) КАК Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗаказыКПоступлению()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заказы.Номенклатура           КАК Номенклатура,
	|	Заказы.ЗаказПоставщику.Склад  КАК Склад,
	|	Заказы.КОформлениюОстаток     КАК ЗаказыКПоступлению
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|
	|		(Номенклатура, ЗаказПоставщику.Склад)
	|		В (ВЫБРАТЬ
	|			Товары.Номенклатура,
	|			Товары.Склад
	|		ИЗ
	|			ВтТовары КАК Товары)) КАК Заказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаВСпецификациях()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Номенклатура           КАК Номенклатура,
	|	Т.ПоСпецификацииОстаток  КАК ВСпецификациях
	|ПОМЕСТИТЬ Спецификации
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|		(Номенклатура)
	|		В (ВЫБРАТЬ
	|			Товары.Номенклатура
	|		ИЗ
	|			ВтТовары КАК Товары)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаТоварныеОграничения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.ОтборНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиОписанийОтборовНоменклатуры.ПустаяСсылка))       КАК ОтборНоменклатуры,
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.КлючОтбора, НЕОПРЕДЕЛЕНО)                      КАК КлючОтбора,
	|	Товары.Номенклатура                                                                    КАК Номенклатура,
	|	Товары.Склад                                                                           КАК Склад,
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.МинимальноеКоличествоЗапаса, 0)                КАК МинимальноеКоличествоЗапаса,
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.МаксимальноеКоличествоЗапаса, 0)               КАК МаксимальноеКоличествоЗапаса,
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.ЕдиницаИзмерения,
	|		СпрНоменклатура.ОсновнаяЕдиницаУчета)                                              КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.ЕдиницаИзмерения,
	|		СпрНоменклатура.ОсновнаяЕдиницаУчета) КАК Справочник.ЕдиницыИзмерения).ТипЕдиницы  КАК ТипЕдиницы,
	|	СпрНоменклатура.ОсновнаяЕдиницаУчета                                                   КАК ОсновнаяЕдиницаУчета,
	|	ЕдиницыИзмерения.Коэффициент                                                           КАК Коэффициент,
	|	ЕСТЬNULL(СпрНоменклатура.ЭлементКАТ.ТорговоеНаименование,
	|		ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка))                            КАК ТорговоеНаименование,
	|	ЕСТЬNULL(СпрНоменклатура.ЭлементКАТ.ДействующиеВеществаМНН,
	|			ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка))                      КАК ДействующиеВеществаМНН,
	|	ЕСТЬNULL(СпрНоменклатура.ЭлементКАТ.ФормаВыпуска,
	|		ЗНАЧЕНИЕ(Справочник.ФормыВыпуска.ПустаяСсылка))                                    КАК ФормаВыпуска,
	|
	|	ЕСТЬNULL(СтатистикаПотребления.Потребление, 0)                                         КАК Потребление,
	|	ЕСТЬNULL(СтатистикаПотребления.СреднедневноеПотребление, 0)                            КАК СреднедневноеПотребление,
	|	ЕСТЬNULL(ОстаткиТоваров.Остаток, 0)                                                    КАК Остаток,
	|	ЕСТЬNULL(ОстаткиТоваров.СвободныйОстаток, 0)                                           КАК СвободныйОстаток,
	|	ЕСТЬNULL(ЗаказыПоставщикам.ЗаказыКПоступлению, 0)                                      КАК ЗаказыКПоступлению,
	|	ЕСТЬNULL(Спецификации.ВСпецификациях, 0)                                               КАК ВСпецификациях,
	|
	|	ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.Обрабатывать, ИСТИНА)   КАК Обрабатывать
	|ИЗ
	|	ВтТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыПоддерживаемогоЗапаса КАК ПараметрыПоддерживаемогоЗапаса
	|	ПО
	|		Товары.Номенклатура = ПараметрыПоддерживаемогоЗапаса.Номенклатура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		Товары.Номенклатура = СпрНоменклатура.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмерения
	|	ПО
	|		Товары.Номенклатура = ЕдиницыИзмерения.Номенклатура
	|		И ЕСТЬNULL(ПараметрыПоддерживаемогоЗапаса.ЕдиницаИзмерения, СпрНоменклатура.ОсновнаяЕдиницаУчета) = ЕдиницыИзмерения.ЕдиницаИзмерения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СтатистикаПотребления КАК СтатистикаПотребления
	|	ПО
	|		Товары.Номенклатура = СтатистикаПотребления.Номенклатура
	|		И Товары.Склад      = СтатистикаПотребления.Склад
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиТоваров КАК ОстаткиТоваров
	|	ПО
	|		Товары.Номенклатура = ОстаткиТоваров.Номенклатура
	|		И Товары.Склад      = ОстаткиТоваров.Склад
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|	ПО
	|		Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|		И Товары.Склад      = ЗаказыПоставщикам.Склад
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Спецификации КАК Спецификации
	|	ПО
	|		Товары.Номенклатура = Спецификации.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруСНеустановленнымиПараметрами(Дерево, ТаблицаТовары)
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ПараметрыУстановлены", Ложь));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), НайденнаяСтрока);
		Иначе
			ЗаполнитьНоменклатуруСНеустановленнымиПараметрами(НайденнаяСтрока, ТаблицаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДляРасчетаКЗаказу(НовыеСтроки, Строка)
	
	Если Строка.ПараметрыИспользуются Тогда
		Если НовыеСтроки.Найти(Строка) = Неопределено Тогда
			НовыеСтроки.Добавить(Строка);
		КонецЕсли;
	ИначеЕсли Не Строка.ПараметрыУстановлены Тогда
		Родитель = Строка.Родитель;
		Если Родитель <> Неопределено Тогда
			
			ДобавитьСтрокуДляРасчетаКЗаказу(НовыеСтроки, Родитель);
			
			Строка.ПараметрыУстановленыУГруппы = Родитель.ПараметрыИспользуются Или Родитель.ПараметрыУстановленыУГруппы;
			Если Строка.ПараметрыУстановленыУГруппы Тогда
				Строка.ЕдиницаИзмерения            = Родитель.ЕдиницаИзмерения;
				Строка.ТипЕдиницы                  = Родитель.ТипЕдиницы;
				Строка.Коэффициент                 = НоменклатураСервер.КоэффициентЕдиницыИзмерения(Строка.Номенклатура, Строка.ЕдиницаИзмерения);
				Строка.КлючОтбора                  = Родитель.КлючОтбора;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьПоляРодителя(Родитель, РассчитываемыеПоля)
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из РассчитываемыеПоля Цикл
		Родитель[КлючЗначение.Ключ] = 0;
	КонецЦикла;
	
	Для Каждого Строка Из Родитель.Строки Цикл
		Если Строка.ПараметрыУстановленыУГруппы Тогда
			ЗаполнитьЗначенияСвойств(РассчитываемыеПоля, Строка);
			Для Каждого КлючЗначение Из РассчитываемыеПоля Цикл
				Родитель[КлючЗначение.Ключ] = Родитель[КлючЗначение.Ключ] + КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьПоляРодителя(Родитель.Родитель, РассчитываемыеПоля);
	
КонецПроцедуры

Процедура РассчитатьКоличествоКЗаказу(НовыеСтроки)
	
	Для Каждого ТекущаяСтрока Из НовыеСтроки Цикл
		
		Остаток = ТекущаяСтрока.Остаток;
		ЗаказыКПоступлению = ТекущаяСтрока.ЗаказыКПоступлению;
		
		ТочкаЗаказаДостигнута = Остаток <= ТекущаяСтрока.МинимальноеКоличествоЗапаса;
		КЗаказу = Макс(ТекущаяСтрока.МаксимальноеКоличествоЗапаса - ЗаказыКПоступлению - Остаток, 0);
		
		ТекущаяСтрока.ТочкаЗаказаДостигнута = ТочкаЗаказаДостигнута;
		Если ТочкаЗаказаДостигнута И КЗаказу > 0 Тогда
			
			РодителиНоменклатуры = Новый Массив;
			НоменклатураОтбора = Новый Массив;
			НайденныеСтроки = ТекущаяСтрока.Строки.НайтиСтроки(Новый Структура("КлючОтбора", ТекущаяСтрока.КлючОтбора), Истина);
			НайденныеСтроки.Добавить(ТекущаяСтрока);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.ТочкаЗаказаДостигнута = ТочкаЗаказаДостигнута;
				Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					НоменклатураОтбора.Добавить(Строка);
					Если РодителиНоменклатуры.Найти(Строка.Родитель) = Неопределено Тогда
						РодителиНоменклатуры.Добавить(Строка.Родитель);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НоменклатураОтбора.Количество() = 1 Тогда
				НоменклатураОтбора[0].КЗаказу = КЗаказу;
				НоменклатураОтбора[0].Отметка = Истина;
			ИначеЕсли НоменклатураОтбора.Количество() > 1 Тогда
				КЗаказуМаксимум = 0;
				СтрокаМаксимум = НоменклатураОтбора[0];
				Для Каждого Строка Из НоменклатураОтбора Цикл
					Строка.КЗаказу = 0;
					Строка.Отметка = Ложь;
					Если КЗаказу = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если Строка.ВСпецификациях > 0 Тогда
						Строка.КЗаказу = Мин(КЗаказу, Строка.ВСпецификациях);
						Строка.Отметка = Истина;
						КЗаказу = КЗаказу - Строка.КЗаказу;
						Если КЗаказуМаксимум < Строка.КЗаказу Тогда
							КЗаказуМаксимум = Строка.КЗаказу;
							СтрокаМаксимум = Строка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если КЗаказу > 0 Тогда
					СтрокаМаксимум.КЗаказу = СтрокаМаксимум.КЗаказу + КЗаказу;
					СтрокаМаксимум.Отметка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Родитель Из РодителиНоменклатуры Цикл
				РассчитатьПоляРодителя(Родитель, Новый Структура("КЗаказу"));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеНоменклатуры(ПоляНоменклатуры)
	
	Представление = Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ПолучитьНаименованиеКлючаАналитики(ПоляНоменклатуры);
	Возврат Представление;
	
КонецФункции

Функция ИнициализироватьРасчетныеПоказатели()
	
	РассчитываемыеПоля = Новый Структура;
	РассчитываемыеПоля.Вставить("Остаток"                 , 0);
	РассчитываемыеПоля.Вставить("СвободныйОстаток"        , 0);
	РассчитываемыеПоля.Вставить("Потребление"             , 0);
	РассчитываемыеПоля.Вставить("СреднедневноеПотребление", 0);
	РассчитываемыеПоля.Вставить("ЗаказыКПоступлению"      , 0);
	РассчитываемыеПоля.Вставить("ВСпецификациях"          , 0);
	РассчитываемыеПоля.Вставить("КЗаказу"                 , 0);
	
	Возврат РассчитываемыеПоля;
	
КонецФункции

#КонецОбласти // Запасы

#КонецОбласти // ЗаполнениеТаблиц

#Область ФормированиеЗаказовПоставщикам

Функция ОписаниеТаблицыОбеспечения()
	
	ТаблицаОбеспечения = Новый ТаблицаЗначений();
	ТаблицаОбеспечения.Колонки.Добавить("Номенклатура"            , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОбеспечения.Колонки.Добавить("Склад"                   , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОбеспечения.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаОбеспечения.Колонки.Добавить("Контрагент"              , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОбеспечения.Колонки.Добавить("ДоговорКонтрагента"      , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОбеспечения.Колонки.Добавить("КЗаказу"                 , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаОбеспечения.Колонки.Добавить("Коэффициент"             , ОбщегоНазначения.ОписаниеТипаЧисло(20, 9));
	
	Возврат ТаблицаОбеспечения;
	
КонецФункции

Функция ОписаниеДокументаЗаказПоставщику()
	
	ОписанияЗаказов = Новый ТаблицаЗначений;
	ОписанияЗаказов.Колонки.Добавить("СпецификацияКДоговору"   , Новый ОписаниеТипов("ДокументСсылка.СпецификацияКДоговору"));
	ОписанияЗаказов.Колонки.Добавить("Контрагент"              , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ОписанияЗаказов.Колонки.Добавить("ДоговорКонтрагента"      , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ОписанияЗаказов.Колонки.Добавить("Склад"                   , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОписанияЗаказов.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ОписанияЗаказов.Колонки.Добавить("ЦенаВключаетНДС"         , Новый ОписаниеТипов("Булево"));
	ОписанияЗаказов.Колонки.Добавить("Валюта"                  , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ОписанияЗаказов.Колонки.Добавить("ДатаПоступления"         , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ОписанияЗаказов.Колонки.Добавить("Товары"                  , Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ОписанияЗаказов;
	
КонецФункции

Функция ПолучитьТаблицуТоваровЗаказаПоКлючевымПолям(ОписанияЗаказов, КлючевыеПоля)
	
	ОтобранныеОписания = ОписанияЗаказов.НайтиСтроки(КлючевыеПоля);
	Если ОтобранныеОписания.Количество() = 0 Тогда
		ОписаниеЗаказа = ОписанияЗаказов.Добавить();
		ОписаниеЗаказа.Товары = ОписаниеТабличнойЧастиДокументаЗаказПоставщику();
	Иначе
		ОписаниеЗаказа = ОтобранныеОписания[0];
	КонецЕсли;
	
	Возврат ОписаниеЗаказа;
	
КонецФункции

Функция ОписаниеТабличнойЧастиДокументаЗаказПоставщику()
	
	ТоварыЗаказа = Новый ТаблицаЗначений;
	
	ТоварыЗаказа.Колонки.Добавить("Номенклатура"                , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыЗаказа.Колонки.Добавить("КоличествоВЕдиницахИзмерения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТоварыЗаказа.Колонки.Добавить("ЕдиницаИзмерения"            , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТоварыЗаказа.Колонки.Добавить("Коэффициент"                 , ОбщегоНазначения.ОписаниеТипаЧисло(20, 9));
	ТоварыЗаказа.Колонки.Добавить("Количество"                  , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТоварыЗаказа.Колонки.Добавить("Цена"                        , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыЗаказа.Колонки.Добавить("Сумма"                       , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыЗаказа.Колонки.Добавить("СтавкаНДС"                   , Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТоварыЗаказа.Колонки.Добавить("СуммаНДС"                    , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыЗаказа.Колонки.Добавить("СуммаСНДС"                   , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТоварыЗаказа.Колонки.Добавить("ДатаПоступления"             , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТоварыЗаказа.Колонки.Добавить("КодСтрокиСпецификации"       , ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Возврат ТоварыЗаказа;
	
КонецФункции

Функция ТаблицаТоварыКЗаказу()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Склад                    КАК Склад,
	|	Товары.Контрагент               КАК Контрагент,
	|	Товары.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Товары.КЗаказу                  КАК Количество,
	|	Товары.Коэффициент              КАК Коэффициент
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаТоварыКЗаказуПоСпецификации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СпецификацииОстатки.Спецификация           КАК СпецификацияКДоговору,
	|	ВЫБОР
	|		КОГДА ВтТовары.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДокументСпецификация.Контрагент
	|		ИНАЧЕ ВтТовары.Контрагент
	|	КОНЕЦ                                      КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ВтТовары.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДокументСпецификация.ДоговорКонтрагента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                                      КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВтТовары.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ДокументСпецификация.ПодразделениеОрганизации
	|		ИНАЧЕ ВтТовары.ПодразделениеОрганизации
	|	КОНЕЦ                                      КАК ПодразделениеОрганизации,
	|	ВтТовары.Склад                             КАК Склад,
	|	ДокументСпецификация.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
	|	ДокументСпецификация.Валюта                КАК Валюта,
	|	СпецификацииОстатки.Номенклатура           КАК Номенклатура,
	|	ТоварыСпецификации.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	ТоварыСпецификации.Коэффициент             КАК Коэффициент,
	|	СпецификацииОстатки.ПоСпецификацииОстаток  КАК Количество,
	|	ТоварыСпецификации.Цена                    КАК Цена,
	|	ТоварыСпецификации.СтавкаНДС               КАК СтавкаНДС,
	|	&ДатаПоступления                           КАК ДатаПоступления,
	|	СпецификацииОстатки.КодСтрокиСпецификации  КАК КодСтрокиСпецификации
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ВтТовары.Номенклатура
	|				ИЗ
	|					ВтТовары КАК ВтТовары)) КАК СпецификацииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВтТовары КАК ВтТовары
	|		ПО
	|			СпецификацииОстатки.Номенклатура = ВтТовары.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.СпецификацияКДоговору КАК ДокументСпецификация
	|		ПО
	|			СпецификацииОстатки.Спецификация = ДокументСпецификация.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.СпецификацияКДоговору.Товары КАК ТоварыСпецификации
	|		ПО
	|			СпецификацииОстатки.Спецификация = ТоварыСпецификации.Ссылка
	|			И СпецификацииОстатки.Номенклатура = ТоварыСпецификации.Номенклатура
	|			И СпецификацииОстатки.КодСтрокиСпецификации = ТоварыСпецификации.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСпецификация.МоментВремени,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаТоварыКЗаказуБезСпецификации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура                            КАК Номенклатура,
	|	&Склад                                           КАК Склад,
	|	ДокументЗаказПоставщику.Контрагент               КАК Контрагент,
	|	ДокументЗаказПоставщику.ДоговорКонтрагента       КАК ДоговорКонтрагента,
	|	ДокументЗаказПоставщику.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументЗаказПоставщику.Дата                     КАК Дата,
	|	ВтТовары.Коэффициент                             КАК Коэффициент
	|ПОМЕСТИТЬ ОтборЗаказов
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|	ПО
	|		ЗаказыПоставщикам.Активность
	|		И ВтТовары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|		И ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ЗаказыПоставщикам.Заказано > 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|	ПО
	|		ЗаказыПоставщикам.ЗаказПоставщику = ДокументЗаказПоставщику.Ссылка
	|		И ДокументЗаказПоставщику.Склад = &Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервыйЗаказ.Номенклатура   КАК Номенклатура,
	|	ПервыйЗаказ.Коэффициент    КАК Коэффициент,
	|	МАКСИМУМ(ПервыйЗаказ.Дата) КАК ПерваяДата,
	|	МАКСИМУМ(ВторойЗаказ.Дата) КАК ВтораяДата,
	|	МАКСИМУМ(ТретийЗаказ.Дата) КАК ТретьяДата
	|ПОМЕСТИТЬ СрезЗаказов
	|ИЗ
	|	ОтборЗаказов КАК ПервыйЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтборЗаказов КАК ВторойЗаказ
	|		ПО
	|			ПервыйЗаказ.Номенклатура = ВторойЗаказ.Номенклатура
	|			И ПервыйЗаказ.Дата > ВторойЗаказ.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтборЗаказов КАК ТретийЗаказ
	|		ПО
	|			ПервыйЗаказ.Номенклатура = ТретийЗаказ.Номенклатура
	|			И ВторойЗаказ.Дата > ТретийЗаказ.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервыйЗаказ.Номенклатура,
	|	ПервыйЗаказ.Коэффициент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ПерваяДата,
	|	ВтораяДата,
	|	ТретьяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СпецификацияКДоговору.ПустаяСсылка) КАК СпецификацияКДоговору,
	|	ВЫБОР
	|		КОГДА ВторойЗаказ.Контрагент ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ПервыйЗаказ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		КОГДА ТретийЗаказ.Контрагент ЕСТЬ NULL
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ПервыйЗаказ.Контрагент = ВторойЗаказ.Контрагент
	|						ТОГДА ЕСТЬNULL(ПервыйЗаказ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ПервыйЗаказ.Контрагент В (ВторойЗаказ.Контрагент, ТретийЗаказ.Контрагент)
	|					ТОГДА ЕСТЬNULL(ПервыйЗаказ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|				КОГДА ВторойЗаказ.Контрагент = ТретийЗаказ.Контрагент
	|					ТОГДА ВторойЗаказ.Контрагент
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			КОНЕЦ
	|		КОНЕЦ                                             КАК Контрагент,
	|	
	|	ВЫБОР
	|		КОГДА ВторойЗаказ.ДоговорКонтрагента ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ПервыйЗаказ.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		КОГДА ТретийЗаказ.ДоговорКонтрагента ЕСТЬ NULL
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ПервыйЗаказ.ДоговорКонтрагента = ВторойЗаказ.ДоговорКонтрагента
	|						ТОГДА ЕСТЬNULL(ПервыйЗаказ.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ПервыйЗаказ.ДоговорКонтрагента В (ВторойЗаказ.ДоговорКонтрагента, ТретийЗаказ.ДоговорКонтрагента)
	|					ТОГДА ЕСТЬNULL(ПервыйЗаказ.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|				КОГДА ВторойЗаказ.ДоговорКонтрагента = ТретийЗаказ.ДоговорКонтрагента
	|					ТОГДА ВторойЗаказ.ДоговорКонтрагента
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ
	|		КОНЕЦ                                             КАК ДоговорКонтрагента,
	|
	|	ВЫБОР
	|		КОГДА ВторойЗаказ.ПодразделениеОрганизации ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ПервыйЗаказ.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|		КОГДА ТретийЗаказ.ПодразделениеОрганизации ЕСТЬ NULL
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ПервыйЗаказ.ПодразделениеОрганизации = ВторойЗаказ.ПодразделениеОрганизации
	|						ТОГДА ЕСТЬNULL(ПервыйЗаказ.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ПервыйЗаказ.ПодразделениеОрганизации В (ВторойЗаказ.ПодразделениеОрганизации, ТретийЗаказ.ПодразделениеОрганизации)
	|					ТОГДА ЕСТЬNULL(ПервыйЗаказ.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|				КОГДА ВторойЗаказ.ПодразделениеОрганизации = ТретийЗаказ.ПодразделениеОрганизации
	|					ТОГДА ВторойЗаказ.ПодразделениеОрганизации
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			КОНЕЦ
	|		КОНЕЦ                                             КАК ПодразделениеОрганизации,
	|	&Склад                                                КАК Склад,
	|	ЛОЖЬ                                                  КАК ЦенаВключаетНДС,
	|	&ВалютаРегламентированногоУчета                       КАК Валюта,
	|	СрезЗаказов.Номенклатура                              КАК Номенклатура,
	|	СрезЗаказов.Коэффициент                               КАК Коэффициент,
	|	&ДатаПоступления                                      КАК ДатаПоступления,
	|	0                                                     КАК КодСтрокиСпецификации
	|	
	|ИЗ
	|	СрезЗаказов КАК СрезЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтборЗаказов КАК ПервыйЗаказ
	|		ПО
	|			СрезЗаказов.Номенклатура = ПервыйЗаказ.Номенклатура
	|			И СрезЗаказов.ПерваяДата = ПервыйЗаказ.Дата
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтборЗаказов КАК ВторойЗаказ
	|		ПО
	|			СрезЗаказов.Номенклатура = ВторойЗаказ.Номенклатура
	|			И СрезЗаказов.ВтораяДата = ВторойЗаказ.Дата
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтборЗаказов КАК ТретийЗаказ
	|		ПО
	|			СрезЗаказов.Номенклатура = ТретийЗаказ.Номенклатура
	|			И СрезЗаказов.ТретьяДата = ТретийЗаказ.Дата
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураДействийЗаполненияПоСпецификации(Товар, Округление = Ложь)
	
	СтруктураДействий = Новый Структура;
	
	Если Не Округление Тогда
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьКоличествоУпаковок());
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ЗаполнитьСтавкуНДС());
	Иначе
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьКоличествоЕдиниц());
	КонецЕсли;
	
	СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьПараметрыПересчетаСуммыНДС(Товар);
	СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийЗаполненияБезСпецификации(Округление = Ложь)
	
	СтруктураДействий = Новый Структура;
	
	Если Не Округление Тогда
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьКоэффициент());
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьКоличествоУпаковок());
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ЗаполнитьСтавкуНДС());
	Иначе
		СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ПересчитатьКоличествоЕдиниц());
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

Процедура ЗаблокироватьДанныеОбеспечения(ИсточникДанных)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПоставщикам");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ЗаполнитьИПровестиЗаказ(МенеджерДокументов, ДанныеЗаполнения, СообщенияОбОшибках)
	
	Заказ = МенеджерДокументов.СоздатьДокумент();
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	
	Заказ.Заполнить(ДанныеЗаполнения);
	Заказ.Товары.Загрузить(ДанныеЗаполнения.Товары);
	
	Если Заказ.ПроверитьЗаполнение() Тогда
		Попытка
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Заказ.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование документов ""Заказ поставщику"" обработки ""Формирование заказов поставщикам.""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Заказ.Метаданные(),
				Заказ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Заказ.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Ошибка Из Ошибки Цикл
		Ошибка.КлючДанных = Заказ.Ссылка;
		СообщенияОбОшибках.Добавить(Ошибка);
	КонецЦикла;
	
	Возврат Заказ.Ссылка;
	
КонецФункции

#КонецОбласти // ФормированиеЗаказовПоставщикам

Функция ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса)
	
	ИндексыРезультатовЗапроса = Новый Структура;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапросаПакета = Новый СхемаЗапроса;
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		СхемаЗапросаПакета.УстановитьТекстЗапроса(ТекстЗапроса.Значение);
		Для Каждого ЗапросПакета Из СхемаЗапросаПакета.ПакетЗапросов Цикл
			ТипЗапроса = ТипЗнч(ЗапросПакета);
			НовыйЗапрос = СхемаЗапроса.ПакетЗапросов.Добавить(ТипЗапроса);
			Если ТипЗапроса = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				НовыйЗапрос.ИмяТаблицы = ЗапросПакета.ИмяТаблицы;
			Иначе
				НовыйЗапрос.УстановитьТекстЗапроса(ЗапросПакета.ПолучитьТекстЗапроса());
				Если ПустаяСтрока(НовыйЗапрос.ТаблицаДляПомещения) Тогда
					ИндексыРезультатовЗапроса.Вставить(ТекстЗапроса.Представление, СхемаЗапроса.ПакетЗапросов.Количество() - 2);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Текст = ТекстЗапроса;
	
	Таблицы = Новый Структура;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Для Каждого КлючЗначение Из ИндексыРезультатовЗапроса Цикл
		Таблицы.Вставить(КлючЗначение.Ключ, РезультатЗапроса[КлючЗначение.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат Таблицы;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
