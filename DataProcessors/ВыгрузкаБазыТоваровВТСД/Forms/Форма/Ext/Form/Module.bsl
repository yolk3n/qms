
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора;
	ВариантыЗаполнения.Добавить("ПоВсемТоварам"          , НСтр("ru = 'По всем товарам'"));
	ВариантыЗаполнения.Добавить("ПоТоварамИнвентаризации", НСтр("ru = 'По товарам инвентаризации'"));
	
	Если Не ПустаяСтрока(Параметры.ВариантЗаполнения) Тогда
		
		ВариантЗаполнения = Параметры.ВариантЗаполнения;
		Инвентаризация    = Параметры.Инвентаризация;
		
		ЗаполнитьБазуТоваров();
		
	Иначе
		ВариантЗаполнения = "ПоВсемТоварам";
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьВыполнить(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	ВариантыЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора;
	Если ВариантЗаполнения = "ПоТоварамИнвентаризации" И Не ЗначениеЗаполнено(Инвентаризация) Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Инвентаризация");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Инвентаризация",, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьБазуТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ВыбранныеСтроки = ТаблицаВыгрузки.НайтиСтроки(Новый Структура("Выбран", Истина));
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В списке отсутствуют выбранные строки.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.Штрихкод) Тогда
			ИндексСтроки = ТаблицаВыгрузки.Индекс(ВыбраннаяСтрока);
			ТекстОшибки = НСтр("ru = 'Поле ""%1"" в строке %2 не заполнено'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Штрихкод", ИндексСтроки + 1);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ТаблицаВыгрузки[" + ИндексСтроки + "].Штрихкод",, ЕстьОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТСД = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Штрихкод"                  , ВыбраннаяСтрока.Штрихкод);
		СтруктураСтроки.Вставить("Номенклатура"              , ВыбраннаяСтрока.Номенклатура);
		СтруктураСтроки.Вставить("ЕдиницаИзмерения"          , ВыбраннаяСтрока.ЕдиницаИзмерения);
		СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.СерияНоменклатуры);
		СтруктураСтроки.Вставить("СерияНоменклатуры"         , ВыбраннаяСтрока.Партия);
		СтруктураСтроки.Вставить("Количество"                , 0);
		
		ТаблицаТСД.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьВТСДЗавершение", ЭтотОбъект);
	
	ПараметрыОперации = ОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();
	ПараметрыОперации.ТаблицаТоваров = ТаблицаТСД;
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(Оповещение, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	ИзменитьПометкуВыделенныхСтрок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	ИзменитьПометкуВыделенныхСтрок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаВыгрузки.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	УстановитьНовыйШтрихкодEAN13НаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйШтрихкодEAN13НаСервере()
	
	ВыделенныеСтроки = Элементы.ТаблицаВыгрузки.ВыделенныеСтроки;
	МенеджерРегистра = РегистрыСведений.ШтрихкодыНоменклатуры;
	Штрихкоды        = Новый Соответствие;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			СтрокаТовара = ТаблицаВыгрузки.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Не ПустаяСтрока(СтрокаТовара.Штрихкод) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = МенеджерРегистра.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТовара);
			Запись.Штрихкод = МенеджерРегистра.СформироватьШтрихкодEAN13();
			Запись.Записать();
			
			Штрихкоды.Вставить(СтрокаТовара, Запись.Штрихкод);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из Штрихкоды Цикл
			КлючИЗначение.Ключ.Штрихкод = КлючИЗначение.Значение;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Выгрузка базы товаров в ТСД'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Штрихкод.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор, "ТаблицаВыгрузки.Выбран", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор, "ТаблицаВыгрузки.Штрихкод", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Товары выгружены в ТСД.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазуТоваров()
	
	ВариантыЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора;
	Если ВариантЗаполнения = "ПоТоварамИнвентаризации" Тогда
		ЗаполнитьПоТоварамИнвентаризации();
	Иначе
		ЗаполнитьПоВсемТоварам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТоварамИнвентаризации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                           КАК Выбран,
	|	ШтрихкодыНоменклатуры.Штрихкод  КАК Штрихкод,
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.СерияНоменклатуры        КАК СерияНоменклатуры,
	|	Товары.Партия                   КАК Партия,
	|	Товары.ЕдиницаИзмерения         КАК ЕдиницаИзмерения
	|ИЗ
	|	#Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО
	|			ШтрихкодыНоменклатуры.Номенклатура        = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.СерияНоменклатуры = Товары.СерияНоменклатуры
	|			И ШтрихкодыНоменклатуры.Партия            = Товары.Партия
	|			И ШтрихкодыНоменклатуры.ЕдиницаИзмерения  = Товары.ЕдиницаИзмерения
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|УПОРЯДОЧИТЬ ПО
	|	ШтрихкодыНоменклатуры.Штрихкод
	|";
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Инвентаризация) + ".Товары";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Товары", ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Инвентаризация);
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ТаблицаВыгрузки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВсемТоварам()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА                                   КАК Выбран,
	|	ШтрихкодыНоменклатуры.Штрихкод           КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ШтрихкодыНоменклатуры.Партия             КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения   КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	ШтрихкодыНоменклатуры.Штрихкод
	|");
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ТаблицаВыгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуВыделенныхСтрок(Пометка)
	
	ВыделенныеСтроки = Элементы.ТаблицаВыгрузки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаТовара = ТаблицаВыгрузки.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаТовара.Выбран = Пометка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
