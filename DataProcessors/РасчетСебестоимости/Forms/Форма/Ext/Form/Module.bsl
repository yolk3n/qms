
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		СообщениеПользователю = НСтр("ru = 'Выполнять регламентные операции по расчету себестоимости в подчиненном узле распределенной информационной не требуется,
			|они выполняются только в центральном узле информационной базы.'");
		ВызватьИсключение СообщениеПользователю;
	КонецЕсли;
	
	ЗакрытьФормуБезПодтверждения = Истина;
	
	// Инициализация организации расчета.
	Объект.Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБольничнаяАптека");
	Если ИспользоватьНесколькоОрганизаций Тогда
		СписокВыбора = Элементы.Организация.СписокВыбора;
		СписокВыбора.ЗагрузитьЗначения(Справочники.Организации.ПолучитьДоступные());
		СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>'"));
	Иначе
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	АвтообновлениеПриЗакрытииПодчиненныхФорм = Истина;
	НастроитьОтметкуКнопокНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьОтметкуКнопокНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьПолучениеИнформацииПоРасчету();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстСообщения = НСтр("ru = 'При закрытии формы расчет себестоимости товаров бутет прекращен. Продолжить?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстСообщения, "ЗакрытьФормуБезПодтверждения");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСебестоимость(Команда)
	
	ЗапуститьРасчетСебестоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьРасчетСебестоимости(Команда)
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ЗапуститьПолучениеИнформацииПоРасчету();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоРасчету(Команда)
	
	ЗапуститьПолучениеИнформацииПоРасчету();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрации(Команда)
	
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Новый Структура("Уровень", "Ошибка"), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриЗакрытииПодчиненныхФорм(Команда)
	
	АвтообновлениеПриЗакрытииПодчиненныхФорм = Не АвтообновлениеПриЗакрытииПодчиненныхФорм;
	НастроитьОтметкуКнопокНастроек(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Организация = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	// Запуск фонового задания получения информации по расчету себестоимости,
	// с обходом ограничений вызова серверных методов.
	ПодключитьОбработчикОжидания("ЗапуститьПолучениеИнформацииПоРасчету", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет себестоимости

&НаКлиенте
Процедура ЗапуститьРасчетСебестоимости()
	
	// Установка свойств элементов формы.
	Элементы.ПрерватьРасчетСебестоимости.Доступность = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданияВыполнения;
	Элементы.ДекорацияНадписьОжиданияВыполнения.Заголовок = НСтр("ru = 'Выполняется расчет себестоимости.
		|Пожалуйста, подождите...'");
	
	// Запуск фонового задания получения информации по расчету себестоимости,
	// с ожиданием изменения свойств формы.
	ПодключитьОбработчикОжидания("ЗапуститьРасчетСебестоимостиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРасчетСебестоимостиНаКлиенте()
	
	ЗакрытьФормуБезПодтверждения = Ложь;
	
	РезультатЗадания = ЗапуститьРасчетСебестоимостиНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьИнформациюПоРасчету", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьРасчетСебестоимостиНаСервере()
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Организация", Объект.Организация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет себестоимости товаров'");
	
	РезультатЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РасчетСебестоимости.РассчитатьСебестоимость",
		ПараметрыМетода,
		ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
	
	Возврат РезультатЗадания;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Получение информации по расчету себестоимости

&НаКлиенте
Процедура ЗапуститьПолучениеИнформацииПоРасчету()
	
	// Установка свойств элементов формы.
	Элементы.ГруппаШапка.Доступность = Ложь;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданияВыполнения;
	Элементы.ДекорацияНадписьОжиданияВыполнения.Заголовок = НСтр("ru = 'Выполняется получение информации по расчету себестоимости.
		|Подождите пожалуйста...'");
	
	// Запуск фонового задания получения информации по расчету себестоимости,
	// с ожиданием изменения свойств формы.
	ПодключитьОбработчикОжидания("ЗапуститьПолучениеИнформацииПоРасчетуНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПолучениеИнформацииПоРасчетуНаКлиенте()
	
	РезультатЗадания = ЗапуститьПолучениеИнформацииПоРасчетуНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьИнформациюПоРасчету", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПолучениеИнформацииПоРасчетуНаСервере()
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Организация", Объект.Организация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение информации по расчету себестоимости'");
	
	РезультатЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РасчетСебестоимости.ПолучитьИнформациюПоРасчету",
		ПараметрыМетода,
		ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
	
	Возврат РезультатЗадания;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обработка получения информации по расчету

&НаКлиенте
Процедура ОбработатьИнформациюПоРасчету(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФормуБезПодтверждения = Истина;
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	ОбработатьИнформациюПоРасчетуНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнформациюПоРасчетуНаСервере(Знач Результат)
	
	Если Результат <> Неопределено Тогда
		
		РезультатПолученияИнформации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		СостояниеРасчетаСебестоимости = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияИнформации, "СостояниеРасчета");
		ДатаАктуальностиРасчета       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияИнформации, "ДатаАктуальностиРасчета");
		ОшибкиОстатковТоваров         = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияИнформации, "ОшибкиОстатковТоваров");
		
	Иначе
		// Фоновое задание отменено.
		ОшибкиОстатковТоваров = Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(СостояниеРасчетаСебестоимости) Тогда
		СостояниеРасчетаСебестоимости = Обработки.РасчетСебестоимости.Состояние_РасчетНеВыполнен();
	КонецЕсли;
	
	// Установка свойств формы по состоянию расчета себестоимости.
	Если СостояниеРасчетаСебестоимости = Обработки.РасчетСебестоимости.Состояние_РасчетВыполнен() Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчетСебестоимостиВыполнен;
		Шаблон = НСтр("ru = 'Расчет себестоимости выполнен успешно.
			|Дата актуальности расчета - %1.'");
		Элементы.ДекорацияНадписьРасчетСебестоимостиВыполнен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(ДатаАктуальностиРасчета, "ДЛФ=D"));
		
	ИначеЕсли СостояниеРасчетаСебестоимости = Обработки.РасчетСебестоимости.Состояние_РасчетНеМожетБытьВыполнен() Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчетСебестоимостиНеМожетБытьВыполнен;
		Шаблон = НСтр("ru = 'Расчет себестоимости не может быть выполнен корректно.
			|Дата актуальности расчета - %1.
			|Существуют ограничения выполнения расчета:'");
		Элементы.ДекорацияНадписьРасчетСебестоимостиНеМожетБытьВыполнен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(ДатаАктуальностиРасчета, "ДЛФ=D"));
		
		Если ЗначениеЗаполнено(ОшибкиОстатковТоваров) Тогда
			ОграниченияРасчета.Загрузить(ОшибкиОстатковТоваров);
		КонецЕсли;
		ОбновитьОтображениеОграниченийРасчета();
		
	ИначеЕсли СостояниеРасчетаСебестоимости = Обработки.РасчетСебестоимости.Состояние_РасчетВыполненСОшибками() Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчетСебестоимостиВыполненСОшибками;
		Шаблон = НСтр("ru = 'Расчет себестоимости выполнен с ошибками.
			|Дата актуальности расчета - %1.
			|Подробности см. в Журнале регистрации.'");
		Элементы.ДекорацияНадписьРасчетСебестоимостиВыполненСОшибками.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(ДатаАктуальностиРасчета, "ДЛФ=D"));
		
	Иначе //Если СостояниеРасчетаСебестоимости = Обработки.РасчетСебестоимости.Состояние_РасчетНеВыполнен() Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчетСебестоимостиНеВыполнен;
		Шаблон = НСтр("ru = 'Расчет себестоимости не выполнен.
			|Дата актуальности расчета - %1.'");
		Элементы.ДекорацияНадписьРасчетСебестоимостиНеВыполнен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(ДатаАктуальностиРасчета, "ДЛФ=D"));
		
	КонецЕсли;
	
	// Установка свойств формы
	Элементы.ГруппаШапка.Доступность = Истина;
	Элементы.ПрерватьРасчетСебестоимости.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеОграниченийРасчета()
	
	ЭлементыОграниченияРасчета = Элементы.ГруппаОграниченияРасчета.ПодчиненныеЭлементы;
	Для Каждого Элемент Из ЭлементыОграниченияРасчета Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого ОписаниеОграничения Из ОграниченияРасчета Цикл
		
		ИмяЭлемента = "ДекорацияНадписьОграничение" + ОписаниеОграничения.КлючОшибки;
		
		Элемент = ЭлементыОграниченияРасчета.Найти(ИмяЭлемента);
		Если Элемент = Неопределено Тогда
			
			Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаОграниченияРасчета);
			
			ЗаголовокЭлемента = Новый ФорматированнаяСтрока(ОписаниеОграничения.ПредставлениеОшибки,,,, ОписаниеОграничения.КлючОшибки);
			Элемент.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ВосклицательныйЗнакКрасный, " ", ЗаголовокЭлемента);
			
			Элемент.Подсказка = ОписаниеОграничения.ПояснениеОшибки;
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОграниченияРасчетаОбработкаНавигационнойСсылки");
			
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Анализ остатков товаров на складах

&НаКлиенте
Процедура Подключаемый_ОграниченияРасчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"                          , ПараметрыПроверкиРасчета(Объект.Организация));
	ПараметрыФормы.Вставить("КлючВарианта"                   , НавигационнаяСсылкаФорматированнойСтроки);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования"    , НавигационнаяСсылкаФорматированнойСтроки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"        , Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	
	Оповестить = Новый ОписаниеОповещения("ЗавершитьАнализОстатков", ЭтотОбъект);
	
	ОткрытьФорму("Отчет.АнализОстатковТоваровНаСкладах.Форма", ПараметрыФормы, ЭтотОбъект,,,, Оповестить);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПроверкиРасчета(Знач Организация)
	
	СхемаРасчета = Документы.РасчетСебестоимостиТоваров.СхемаРасчета(, Организация);
	Если СхемаРасчета.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(НачалоМесяца(СхемаРасчета[0].Дата), КонецМесяца(СхемаРасчета[СхемаРасчета.Количество() - 1].Дата));
	СвязанныеОрганизации = СхемаРасчета[СхемаРасчета.Количество() - 1].Организации;
	
	Возврат Новый Структура("Период, Организация", Период, СвязанныеОрганизации);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьАнализОстатков(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не АвтообновлениеПриЗакрытииПодчиненныхФорм Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПолучениеИнформацииПоРасчету();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтметкуКнопокНастроек(Форма)
	
	Форма.Элементы.АвтообновлениеПриЗакрытииПодчиненныхФорм.Пометка = Форма.АвтообновлениеПриЗакрытииПодчиненныхФорм;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
