#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьКлассификаторы(ПараметрыЗагрузки, АдресРезультатаЗагрузки) Экспорт
	
	Каталог = ПолучитьИмяВременногоФайла("rls_files");
	СоздатьКаталог(Каталог);
	Для Каждого Описание Из ПараметрыЗагрузки.ДанныеКлассификаторов Цикл
		Файл = Новый Файл(Описание.Имя);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, Файл.Имя);
		Описание.Хранение.Записать(ИмяФайла);
	КонецЦикла;
	
	Попытка
		ЗагрузитьКлассификаторыИзКаталога(ПараметрыЗагрузки.ЗагружаемыеКлассификаторы, Каталог, "xml");
	Исключение
		ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(Каталог);
		ВызватьИсключение;
	КонецПопытки;
	
	ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(Каталог);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторыССайтаИТС(ПараметрыЗагрузки, АдресРезультатаЗагрузки) Экспорт
	
	Каталог = ПолучитьИмяВременногоФайла("rls_files");
	СоздатьКаталог(Каталог);
	
	Аутентификация = ПараметрыЗагрузки.Аутентификация;
	ЗагружаемыеКлассификаторы = ПараметрыЗагрузки.ЗагружаемыеКлассификаторы;
	
	Для Каждого Справочник Из ЗагружаемыеКлассификаторы Цикл
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, Справочник.НомерСправочника + ".rls");
		Результат = ИТСМедицинаКлиентСервер.ЗагрузитьКлассификаторСВебИТС(Аутентификация, Справочник.НомерСправочника, ИмяФайла);
		
		Если Не Результат.Статус Тогда
			ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(Каталог);
			ВызватьИсключение Результат.СообщениеОбОшибке;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ЗагрузитьКлассификаторыИзКаталога(ЗагружаемыеКлассификаторы, Каталог, "json");
	Исключение
		ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(Каталог);
		ВызватьИсключение;
	КонецПопытки;
	
	ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(Каталог);
	
КонецПроцедуры

Процедура ЗагрузитьОписаниеТоваров(ПараметрыЗагрузки, АдресРезультатаЗагрузки) Экспорт
	
	Штрихкоды = ПараметрыЗагрузки.Штрихкоды;
	Аутентификация = ПараметрыЗагрузки.Аутентификация;
	
	Если Штрихкоды.Количество() > 0 Тогда
		НомераРЛС = НайтиОписанияТоваровНаСайтеРЛС(Аутентификация, Штрихкоды);
	Иначе
		НомераРЛС = ПараметрыЗагрузки.НомераРЛС;
	КонецЕсли;
	
	Если НомераРЛС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтменятьРучныеКорректировки = ПараметрыЗагрузки.ОтменятьРучныеКорректировки;
	
	Прогресс = Новый Структура;
	Прогресс.Вставить("ЗагрузкаОписанийТоваров");
	Прогресс.Вставить("КоличествоПринятых", 0);
	Прогресс.Вставить("КоличествоОбработанных", 0);
	Прогресс.Вставить("КоличествоУспешноОбработанных", 0);
	Прогресс.Вставить("КоличествоОшибок", 0);
	
	РезультатыЗагрузкиТоваров = Обработки.ЗагрузкаДанныхСИТСМедицина.Создать().РезультатыЗагрузкиТоваров.Выгрузить();
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	Если НомераРЛС[0] = "*" Тогда
		ПолучитьОписанияТоваровССайтаИТС(Аутентификация, ИмяФайла);
		ЗагрузитьОписаниеТоваровИзФайла(ИмяФайла, ОтменятьРучныеКорректировки, Прогресс, РезультатыЗагрузкиТоваров)
	Иначе
		
		МаксимальноеКоличество = 20;
		ЗапрашиваемыеОписания = Новый Массив;
		Для Каждого НомерРЛС Из НомераРЛС Цикл
			
			Если ЗапрашиваемыеОписания.Количество() = МаксимальноеКоличество Тогда
				ПолучитьОписанияТоваровССайтаИТС(Аутентификация, ИмяФайла, ЗапрашиваемыеОписания);
				ЗагрузитьОписаниеТоваровИзФайла(ИмяФайла, ОтменятьРучныеКорректировки, Прогресс, РезультатыЗагрузкиТоваров);
				ЗапрашиваемыеОписания.Очистить();
			КонецЕсли;
			
			ЗапрашиваемыеОписания.Добавить(НомерРЛС);
			
		КонецЦикла;
		
		Если ЗапрашиваемыеОписания.Количество() > 0 Тогда
			ПолучитьОписанияТоваровССайтаИТС(Аутентификация, ИмяФайла, ЗапрашиваемыеОписания);
			ЗагрузитьОписаниеТоваровИзФайла(ИмяФайла, ОтменятьРучныеКорректировки, Прогресс, РезультатыЗагрузкиТоваров)
		КонецЕсли;
		
	КонецЕсли;
	
	Прогресс.Вставить("РезультатыЗагрузкиТоваров", РезультатыЗагрузкиТоваров);
	ПоместитьВоВременноеХранилище(Прогресс, АдресРезультатаЗагрузки);
	
	ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(ИмяФайла);
	
КонецПроцедуры

Процедура ПолучитьОписанияТоваровССайтаИТС(Аутентификация, ИмяФайла, ЗапрашиваемыеОписания = Неопределено)
	
	Результат = ИТСМедицинаКлиентСервер.ПолучитьОписанияТоваровССайтаИТС(Аутентификация, ИмяФайла, ЗапрашиваемыеОписания);
	Если Не Результат.Статус Тогда
		ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(ИмяФайла);
		ВызватьИсключение Результат.СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьОписаниеТовара(Описание, ОтменятьРучныеКорректировки = Ложь, ПерезаполнятьКлючевыеПоля = Ложь) Экспорт
	
	АптечныйТовар = АптечныеТовары.ПолучитьОбъектПоНомеруРЛС(Описание.НомерРЛС);
	
	НовыйЭлемент = АптечныйТовар.ЭтоНовый();
	
	Если НачалоДня(АптечныйТовар.ДатаОбновления) > НачалоДня(Описание.ДатаОбновления) Тогда
		ТекстСообщения = НСтр("ru = 'Для обновления элемента требуется диск ИТС начиная с %1 года.'");
		ДатаДискаИТС = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(АптечныйТовар.ДатаОбновления, "МЕСЯЦ", 1);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ДатаДискаИТС, "ДФ='MMMM yyyy'"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если Не НовыйЭлемент Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РегистрЛекарственныхСредств");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", АптечныйТовар.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		// Если передан объект то заполняем всегда, иначе только не откорректированные вручную.
		Если Не АптечныйТовар.РучнаяКорректировка Или ОтменятьРучныеКорректировки Тогда
			
			// замещаем поля объекта из структуры
			ИзменятьКлючевыеПоля = НовыйЭлемент Или ПерезаполнятьКлючевыеПоля Или АптечныйТовар.РучнаяКорректировка И ОтменятьРучныеКорректировки;
			АптечныеТовары.ЗаполнитьЭлементСправочникаКАТИзСтруктуры(АптечныйТовар, Описание, ИзменятьКлючевыеПоля);
			
			Если АптечныйТовар.РучнаяКорректировка Тогда
				АптечныйТовар.РучнаяКорректировка = Ложь;
			КонецЕсли;
			
		Иначе
			АптечныеТовары.ЗаполнитьПринадлежностьКСпискам(АптечныйТовар, Описание);
			АптечныеТовары.ЗаполнитьДанныеРегистрационногоУдостоверения(АптечныйТовар, Описание);
		КонецЕсли;
		
		ЕстьОшибкиПроверкиЗаполнения = Ложь;
		ЕстьОшибкиЗаписи = Ложь;
		СтарыеСообщения = ПолучитьСообщенияПользователю(Истина);
		Если АптечныйТовар.ПроверитьЗаполнение() Тогда
			Попытка
				АптечныйТовар.Записать();
			Исключение
				ЕстьОшибкиЗаписи = Истина;
				ОшибкиЗаписи = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			ТекстДополнительно = "";
			Для Каждого Сообщение Из Сообщения Цикл
				Если СтрНачинаетсяС(Сообщение.Текст, "{") Тогда
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				ТекстДополнительно = ТекстДополнительно
					+ ?(ПустаяСтрока(ТекстДополнительно), "", Символы.ПС)
					+ Сообщение.Текст;
			КонецЦикла;
			ШаблонСообщения = НСтр("ru= 'Незаполнены обязательные поля:
			                            |%1'");
			ЕстьОшибкиПроверкиЗаполнения = Истина;
			
		КонецЕсли;
		
		Если СтарыеСообщения.Количество() > 0 Тогда
			Для Каждого СообщениеПользователю Из СтарыеСообщения Цикл
				СообщениеПользователю.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьОшибкиПроверкиЗаполнения Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстДополнительно);
		ИначеЕсли ЕстьОшибкиЗаписи Тогда
			ВызватьИсключение ОшибкиЗаписи;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Поиск дублей
	Если Описание.Свойство("НомерРЛСРегистрации") И ЗначениеЗаполнено(Описание.НомерРЛСРегистрации) Тогда
		Для Каждого НомерРЛС Из Описание.НомерРЛСРегистрации Цикл
			
			Если НомерРЛС = Описание.НомерРЛС Тогда
				Продолжить;
			КонецЕсли;
			
			ДубльКАТ = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту("НомерРЛС", НомерРЛС);
			Если Не ДубльКАТ.Пустая() Тогда
				АптечныеТовары.ОбработатьДубльЭлементаКАТ(АптечныйТовар.Ссылка, ДубльКАТ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(НовыйЭлемент, "Новый", "Обновлен");
	
КонецФункции

Процедура УстановитьРезультатЗагрузки(РезультатыЗагрузкиТоваров, НомерРЛС, Статус, Комментарий, ИсходныеДанные, ПолноеОписаниеОшибки = "") Экспорт
	
	Если НомерРЛС = "*" Тогда
		Результат = РезультатыЗагрузкиТоваров.Добавить();
	Иначе
		НайденныеСтроки = РезультатыЗагрузкиТоваров.НайтиСтроки(Новый Структура("НомерРЛС", НомерРЛС));
		Если НайденныеСтроки.Количество() Тогда
			Результат = НайденныеСтроки[0];
		Иначе
			Результат = РезультатыЗагрузкиТоваров.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = "Ошибка" Тогда
		ОписаниеСтатуса = НСтр("ru='Ошибка'");
		КартинкаСтатуса = 2;
	ИначеЕсли  Статус = "НетДанных" Тогда
		ОписаниеСтатуса = НСтр("ru='Нет данных'");
		КартинкаСтатуса = 3;
	Иначе
		КартинкаСтатуса = 0;
		Если Статус = "Новый" Тогда
			ОписаниеСтатуса = НСтр("ru = 'Новый'");
		Иначе
			ОписаниеСтатуса = НСтр("ru = 'Обновлен'");
		КонецЕсли;
	КонецЕсли;
	
	Результат.НомерРЛС = НомерРЛС;
	Результат.КартинкаСтатуса = КартинкаСтатуса;
	Результат.Статус = Статус;
	Результат.ОписаниеСтатуса = ОписаниеСтатуса;
	Результат.Комментарий = СокрЛП(Комментарий);
	Результат.ИсходныеДанные = ИсходныеДанные;
	Если Результат.АптечныйТовар.Пустая() Тогда
		Результат.АптечныйТовар = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту("НомерРЛС", НомерРЛС);
	КонецЕсли;
	
	Если Статус = "Ошибка" Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИТС Медицина.Загрузка описания товара'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.РегистрЛекарственныхСредств,
			?(Результат.АптечныйТовар.Пустая(), НСтр("ru='Номер РЛС:'") + " " + НомерРЛС, Результат.АптечныйТовар),
			?(ПустаяСтрока(ПолноеОписаниеОшибки), Комментарий, ПолноеОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьКлассификаторыИзКаталога(ЗагружаемыеКлассификаторы, Каталог, ФорматДанных)
	
	СообщениеОбОшибках = "";
	
	ШаблонОшибки = НСтр("ru='При загрузке классификатора ""%1"" произошла ошибка, загрузка отменена:
	                        |%2'");
	СтруктураСправочников = ИТСМедицинаКлиентСервер.ПолучитьСтруктуруСправочниковНаИТС();
	Для Каждого Классификатор Из ЗагружаемыеКлассификаторы Цикл
		
		Справочник = СтруктураСправочников[Классификатор.ИмяСправочника];
		ДлительныеОперации.СообщитьПрогресс(, СтрЗаменить(НСтр("ru = 'Загружается классификатор %1'"), "%1", Справочник.Наименование));
		
		ФайлКлассификатора = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, Классификатор.НомерСправочника + ".rls");
		
		НачатьТранзакцию();
		Попытка
			ИТСМедицина.ЗагрузитьКлассификаторИзФайла(Справочник, ФайлКлассификатора, ФорматДанных);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				Справочник.Наименование,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			СообщениеОбОшибках = СообщениеОбОшибках + ?(ПустаяСтрока(СообщениеОбОшибках), "", Символы.ПС) + ОписаниеОшибки;
			ЗаписьЖурналаРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Классификаторы.Загрузка классификатора ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Справочник.Наименование),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СообщениеОбОшибках) Тогда
		ВызватьИсключение СообщениеОбОшибках;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОписанияТоваровНаСайтеРЛС(Аутентификация, Штрихкоды)
	
	Прогресс = Новый Структура;
	Прогресс.Вставить("ПоискШтрихкодов");
	Прогресс.Вставить("КоличествоОбработанных", 0);
	
	НомераРЛС = Новый Массив;
	
	МаксимальноеКоличество = 30;
	
	СтрокаПоиска = "";
	Для Индекс = 0 По Штрихкоды.ВГраница() Цикл
		
		Если Индекс % МаксимальноеКоличество = 0 И Не ПустаяСтрока(СтрокаПоиска) Тогда
			ПолучитьНомераРЛСПоСтроке(Аутентификация, Сред(СтрокаПоиска, 2), НомераРЛС);
			Прогресс.КоличествоОбработанных = Индекс + 1;
			ДлительныеОперации.СообщитьПрогресс(,, Прогресс);
			СтрокаПоиска = "";
		КонецЕсли;
		
		Штрихкод = СокрЛП(Штрихкоды[Индекс]);
		Если Не ПустаяСтрока(Штрихкод) Тогда
			СтрокаПоиска = СтрокаПоиска + "|" + Штрихкод;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		ПолучитьНомераРЛСПоСтроке(Аутентификация, Сред(СтрокаПоиска, 2), НомераРЛС);
		Прогресс.КоличествоОбработанных = Штрихкоды.Количество();
		ДлительныеОперации.СообщитьПрогресс(,, Прогресс);
		СтрокаПоиска = "";
	КонецЕсли;
	
	Возврат НомераРЛС;
	
КонецФункции

Процедура ПолучитьНомераРЛСПоСтроке(Аутентификация, СтрокаПоиска, НомераРЛС)
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ПараметрыПоиска = Новый Структура("Текст", Новый Структура("Включить", СтрокаПоиска));
	Результат = ИТСМедицинаКлиентСервер.НайтиОписанияТоваровНаСайтеИТС(Аутентификация, ПараметрыПоиска, ИмяФайла);
	Если Не Результат.Статус Тогда
		ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(ИмяФайла);
		ВызватьИсключение Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ИмяФайла, "windows-1251");
	ОписаниеССайтаОбъект = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	Данные = ОписаниеССайтаОбъект.Получить("data");
	Если ЗначениеЗаполнено(Данные) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НомераРЛС, Данные);
	КонецЕсли;
	
	ФайловыеФункцииБольничнаяАптекаСервер.УдалитьФайлКаталог(ИмяФайла);
	
КонецПроцедуры

Процедура ЗагрузитьОписаниеТоваровИзФайла(ИмяФайла, ОтменятьРучныеКорректировки, Прогресс, РезультатыЗагрузкиТоваров)
	
	РезультатыЗагрузки = РезультатыЗагрузкиТоваров.СкопироватьКолонки();
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ИмяФайла, "windows-1251");
	Чтение.Прочитать();
	Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
				ИмяСвойства = НРег(Чтение.ТекущееЗначение);
				Если ИмяСвойства = "status" Тогда
					Чтение.Прочитать();
					Если Чтение.ТекущееЗначение <> 200 Тогда
						ВызватьИсключение СтрЗаменить(НСтр("ru = 'Ошибка получения данных с сайта: %1'"), "%1", Чтение.ТекущееЗначение);
					КонецЕсли;
				ИначеЕсли ИмяСвойства = "data" Тогда
					Чтение.Прочитать();
					Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						Пока Чтение.Прочитать() Цикл
							Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
								ИмяСвойства = НРег(Чтение.ТекущееЗначение);
								Если ИмяСвойства = "updatedate" Тогда
									Чтение.Прочитать();
									ДатаОбновления = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(Лев(Чтение.ТекущееЗначение, 10));
								ИначеЕсли ИмяСвойства = "documents" Тогда
									Чтение.Прочитать();
									Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
										Пока Чтение.Прочитать() Цикл
											Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
												ЗагрузитьОписаниеССайта(
													ПрочитатьОбъектJSON(Чтение),
													ДатаОбновления,
													ОтменятьРучныеКорректировки,
													Прогресс,
													РезультатыЗагрузкиТоваров,
													РезультатыЗагрузки);
											ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
												Прервать;
											КонецЕсли;
										КонецЦикла;
									Иначе
										ВызватьИсключение НСтр("ru = 'Ошибка формата данных'");
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ВызватьИсключение НСтр("ru = 'Ошибка формата данных'");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка формата данных'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыЗагрузки, РезультатыЗагрузкиТоваров);
	СообщитьПрогресс(Прогресс, РезультатыЗагрузки);
	
КонецПроцедуры

Функция ПрочитатьОбъектJSON(Чтение, ИспользоватьСоответствие = Истина)
	
	Если ИспользоватьСоответствие Тогда
		ПрочитанныйОбъект = Новый Соответствие;
	Иначе
		ПрочитанныйОбъект = Новый Структура;
	КонецЕсли;
	
	Пока Чтение.Прочитать() Цикл
		ТипЗначения = Чтение.ТипТекущегоЗначения;
		Если ТипЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = НРег(Чтение.ТекущееЗначение);
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ПрочитанныйОбъект.Вставить(ИмяСвойства, ПрочитатьМассивJSON(Чтение, ИспользоватьСоответствие));
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ПрочитанныйОбъект.Вставить(ИмяСвойства, ПрочитатьОбъектJSON(Чтение, ИспользоватьСоответствие));
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			Прервать;
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.Ничего Тогда
			Продолжить;
		Иначе
			ПрочитанныйОбъект.Вставить(ИмяСвойства, Чтение.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрочитанныйОбъект;
	
КонецФункции

Функция ПрочитатьМассивJSON(Чтение, ИспользоватьСоответствие = Истина)
	
	ПрочитанныйМассив = Новый Массив;
	Пока Чтение.Прочитать() Цикл
		ТипЗначения = Чтение.ТипТекущегоЗначения;
		Если ТипЗначения = ТипЗначенияJSON.КонецМассива Тогда
			Прервать;
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ПрочитанныйМассив.Добавить(ПрочитатьМассивJSON(Чтение));
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ПрочитанныйМассив.Добавить(ПрочитатьОбъектJSON(Чтение, ИспользоватьСоответствие));
		ИначеЕсли ТипЗначения = ТипЗначенияJSON.Ничего Тогда
			Продолжить;
		Иначе
			ПрочитанныйМассив.Добавить(Чтение.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрочитанныйМассив;
	
КонецФункции

Процедура ЗагрузитьОписаниеССайта(ОписаниеССайта, ДатаОбновления, ОтменятьРучныеКорректировки, Прогресс, РезультатыЗагрузкиТоваров, РезультатыЗагрузки)
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, ОписаниеССайта);
	ИсходныеДанные = Запись.Закрыть();
	
	Попытка
		Описание = РаботаСРЛС.ПреобразоватьОписаниеТовараВоВнутреннийФормат(ОписаниеССайта, ДатаОбновления);
		Статус = ЗагрузитьОписаниеТовара(Описание, ОтменятьРучныеКорректировки);
		Прогресс.КоличествоУспешноОбработанных = Прогресс.КоличествоУспешноОбработанных + 1;
		
		УстановитьРезультатЗагрузки(
			РезультатыЗагрузки,
			Описание.НомерРЛС,
			Статус,
			"",
			ИсходныеДанные);
			
	Исключение
		Прогресс.КоличествоОшибок = Прогресс.КоличествоОшибок + 1;
		УстановитьРезультатЗагрузки(
			РезультатыЗагрузки,
			?(ЗначениеЗаполнено(Описание) И Описание.Свойство("НомерРЛС"), Описание.НомерРЛС, "*"),
			"Ошибка",
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			?(ИсходныеДанные = Неопределено, "", ИсходныеДанные));
	КонецПопытки;
	
	Прогресс.КоличествоПринятых = Прогресс.КоличествоПринятых + 1;
	Прогресс.КоличествоОбработанных = Прогресс.КоличествоОбработанных + 1;
	
	Если Прогресс.КоличествоОбработанных % 10 = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыЗагрузки, РезультатыЗагрузкиТоваров);
		СообщитьПрогресс(Прогресс, РезультатыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПрогресс(Прогресс, РезультатыЗагрузкиТоваров = Неопределено)
	
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() = Неопределено Тогда
		РезультатыЗагрузкиТоваров.Очистить();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(,, Прогресс);
	Если РезультатыЗагрузкиТоваров <> Неопределено И РезультатыЗагрузкиТоваров.Количество() > 0 Тогда
		ТекстСообщения = "{РезультатыЗагрузкиТоваров}" + ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатыЗагрузкиТоваров);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатыЗагрузкиТоваров.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли