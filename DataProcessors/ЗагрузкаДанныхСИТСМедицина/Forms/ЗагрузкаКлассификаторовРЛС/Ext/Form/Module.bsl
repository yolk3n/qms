
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПутьКДаннымНаКлиенте;

&НаКлиенте
Перем ЗапрашиваемыеСправочники;

&НаКлиенте
Перем НачалоЗагрузки;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОтмеченныеКлассификаторы = Неопределено;
	Параметры.Свойство("Классификаторы", ОтмеченныеКлассификаторы);
	
	ЗаполнитьТаблицуКлассификаторов(ОтмеченныеКлассификаторы);
	
	Для Каждого Источник Из Элементы.КодИсточникаЗагрузки.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(ДоступныеИсточникиЗагрузки.Добавить(), Источник);
	КонецЦикла;
	
	Если Не ОбщегоНазначения.ЭтоWindowsКлиент() Или ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ПредупреждениеОНевозможностиЗагрузки = НСтр("ru = 'Загрузка классификаторов с диска ИТС поддерживается только в Windows клиенте.'");
		ДоступныеИсточникиЗагрузки.Удалить(ДоступныеИсточникиЗагрузки.НайтиПоЗначению("ДискИТС"));
	КонецЕсли;
	
	КодИсточникаЗагрузки = ДоступныеИсточникиЗагрузки[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	КодИсточника = Настройки["КодИсточникаЗагрузки"];
	Если ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточника) = Неопределено Тогда
		// Оставляем умолчания
		Настройки.Удалить("КодИсточникаЗагрузки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьРазрешениеЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИТСМедицина_ЗагрузкаДанныхСДискаИТС" Тогда
		Параметр.ЗагрузкаЗапрещена = Параметр.ЗагрузкаЗапрещена Или ОжидаютсяДанныеОтИТС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница <> Элементы.ОжиданиеЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Прервать загрузку классификаторов?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстСообщения, "ЗакрытьФормуБезПодтверждения");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьКлассификаторы(Команда)
	
	ОчиститьСообщения();
	
	НачалоЗагрузки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если КодИсточникаЗагрузки = "ДискИТС" Тогда
		Текст = НСтр("ru = 'Для загрузки классификаторов с диска ИТС
		                   |необходимо установить расширение для работы с файлами.'");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьСДискаИТСПослеУстановкеРасширенияРаботыСФайлами", ЭтотОбъект);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, Текст, Ложь);
		
	ИначеЕсли КодИсточникаЗагрузки = "СайтИТС" Тогда
		ЗагрузитьКлассификаторССайта();
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю( НСтр("ru = 'Не указан вариант загрузки классификатора.'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеВыполнить()
	
	Для Каждого ЭлементКлассификатор Из КлассификаторыДляЗагрузки Цикл
		ЭлементКлассификатор.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделитьВсеВыполнить(Команда)
	
	Для Каждого ЭлементКлассификатор Из КлассификаторыДляЗагрузки Цикл
		ЭлементКлассификатор.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователей(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЛогинаИПароля", ЭтотОбъект);
	ИТСМедицинаКлиент.АвторизоватьсяНаСайтеИТС(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЛогинаИПароля(Результат, Параметр) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
	   И ЗначениеЗаполнено(Результат.Логин)
	   И ЗначениеЗаполнено(Результат.Пароль) Тогда
		Аутентификация = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлассификаторыДляЗагрузкиПометкаПриИзменении(Элемент)
	
	УстановитьРазрешениеЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура КодИсточникаЗагрузкиПриИзменении(Элемент)
	
	УстановитьРазрешениеЗагрузки();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьРазрешениеЗагрузки(Знач КоличествоЗагружаемых = Неопределено)
	
	Если КоличествоЗагружаемых = Неопределено Тогда
		КоличествоЗагружаемых = КоличествоЗагружаемыхКлассификаторов();
	КонецЕсли;
	
	Элементы.Загрузить.Доступность = (КоличествоЗагружаемых > 0)
		И ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки) <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСДискаИТСПослеУстановкеРасширенияРаботыСФайлами(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИТСМедицинаКлиент.ДискИТССвободен() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Другая форма ожидает данные с диска ИТС'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	
	ПолучитьВыбранныеКлассификаторы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКлассификаторов(ОтмеченныеКлассификаторы)
	
	СправочникиРЛС = ИТСМедицинаКлиентСервер.ПолучитьСтруктуруСправочниковНаИТС();
	
	Для Каждого СправочникРЛС Из СправочникиРЛС Цикл
		
		Если Не СправочникРЛС.Значение.Свойство("ИмяМетаданных") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКлассификатор = КлассификаторыДляЗагрузки.Добавить();
		СтрокаКлассификатор.НаименованиеКлассификатора = СправочникРЛС.Значение.Наименование;
		СтрокаКлассификатор.НомерСправочника = СправочникРЛС.Значение.Номер;
		СтрокаКлассификатор.ИмяСправочника = СправочникРЛС.Ключ;
		СтрокаКлассификатор.ИмяМетаданных = СправочникРЛС.Значение.ИмяМетаданных;
		
		Если ОтмеченныеКлассификаторы <> Неопределено И ОтмеченныеКлассификаторы.Найти(СправочникРЛС.Ключ) <> Неопределено Тогда
			СтрокаКлассификатор.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоЗагружаемыхКлассификаторов()
	
	КоличествоЗагружаемыхКлассификаторов = 0;
	
	Для Каждого ЭлементКлассификатор Из КлассификаторыДляЗагрузки Цикл
		Если ЭлементКлассификатор.Пометка Тогда
			КоличествоЗагружаемыхКлассификаторов = КоличествоЗагружаемыхКлассификаторов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоЗагружаемыхКлассификаторов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусЗагрузки(Знач Сообщение = "")
	
	СтатусЗагрузки = Сообщение;
	
	СтатусЗагрузки = НСтр("ru = 'Пожалуйста, подождите...'") + Символы.ПС + Сообщение;
	
	ОбновитьВремяРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяРаботы()
	
	ПрошлоВремени = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПрошлоВремени(НачалоЗагрузки);
	ТекущееВремяРаботы = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПредставлениеВремени(ПрошлоВремени);
	Если ВремяРаботы <> ТекущееВремяРаботы Тогда
		ВремяРаботы = ТекущееВремяРаботы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяВНачало()
	
	УстановитьСтатусЗагрузки("");
	
	ОжидаютсяДанныеОтИТС = Ложь;
	ОтключитьОбработчикОжидания("Подключаемый_ПолучитьФайлыКлассификаторов");
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборКлассификаторов;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка с сайта

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайта()
	
	Если Аутентификация = Неопределено Тогда
		Аутентификация = ИТСМедицинаВызовСервера.ПараметрыАутентификацииНаСайте();
	КонецЕсли;
	
	Если ПустаяСтрока(Аутентификация.Логин) Или ПустаяСтрока(Аутентификация.Пароль) Тогда
		// Проходим через форму авторизации принудительно.
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКлассификаторССайтаЗапросАутентификации", ЭтотОбъект);
		ИТСМедицинаКлиент.АвторизоватьсяНаСайтеИТС(ЭтотОбъект, Оповещение);
	Иначе
		ЗагрузитьКлассификаторССайтаПослеАутентификации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаЗапросАутентификации(Знач ЗапросАутентификации, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ЗапросАутентификации) <> Тип("Структура") Тогда
		// Возвращаемся на страницу выбора.
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборКлассификаторов;
		Возврат;
	КонецЕсли;
	
	Аутентификация = ЗапросАутентификации;
	Если ПустаяСтрока(Аутентификация.Логин) Или ПустаяСтрока(Аутентификация.Пароль) Тогда
		// На повторный ввод пароля
		ЗагрузитьКлассификаторССайта();
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКлассификаторССайтаПослеАутентификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаПослеАутентификации()
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу.
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	УстановитьСтатусЗагрузки(НСтр("ru = 'Загрузка файлов с сайта ИТС...'"));
	
	Элементы.ПрерватьЗагрузку.Доступность = Ложь;
	
	ПодключитьОбработчикОжидания("ЗагрузитьКлассификаторССайтаИТС", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаИТС()
	
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОтобразитьПрогресс", ЭтотОбъект);
	
	ОповеститьОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗагрузки", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповеститьОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновуюЗагрузкуССайтаНаСервере()
	
	// Запущенное
	Элементы.ПрерватьЗагрузку.Доступность = Истина;
	
	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка классификаторов РЛС'");
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ЗагружаемыеКлассификаторы", ЗапрашиваемыеСправочники(КлассификаторыДляЗагрузки));
	ПараметрыЗагрузки.Вставить("Аутентификация", Аутентификация);
	
	Задание = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаДанныхСИТСМедицина.ЗагрузитьКлассификаторыССайтаИТС", ПараметрыЗагрузки, ПараметрыЗадания);
	
	Возврат Задание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение файлов классификаторов от ИТС:Медицина

&НаКлиенте
Процедура ПолучитьВыбранныеКлассификаторы()
	
	ОжидаютсяДанныеОтИТС = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьВыбранныеКлассификаторыПослеПолученияИмениКаталога", ЭтотОбъект, Аутентификация);
	ФайловыеФункцииБольничнаяАптекаКлиент.ИмяВременногоФайла(Оповещение, "rls_files");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеКлассификаторыПослеПолученияИмениКаталога(ИмяКаталога, Аутентификация) Экспорт
	
	ПутьКДаннымНаКлиенте = ИмяКаталога;
	Оповещение = Новый ОписаниеОповещения("ПолучитьВыбранныеКлассификаторыПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, ПутьКДаннымНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеКлассификаторыПослеСозданияКаталога(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ЗапрашиваемыеСправочники = ЗапрашиваемыеСправочники(КлассификаторыДляЗагрузки, ПутьКДаннымНаКлиенте);
	
	Попытка
		ИТСМедицинаКлиент.ВыгрузитьСправочникиИзБазыРЛС(ЗапрашиваемыеСправочники);
	Исключение
		ФайловыеФункцииБольничнаяАптекаКлиент.УдалитьФайлНаКлиенте(ПутьКДаннымНаКлиенте);
		ПоказатьПредупреждение(, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВернутьсяВНачало();
		Возврат;
	КонецПопытки;
	
	Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получено файлов: 0 из %1'"), ЗапрашиваемыеСправочники.Количество());
	УстановитьСтатусЗагрузки(Состояние);
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьФайлыКлассификаторов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьФайлыКлассификаторов()
	
	ЕстьВсеФайлы = Истина;
	ПолученоФайлов = 0;
	Для Каждого Справочник Из ЗапрашиваемыеСправочники Цикл
		
		Если Справочник.ФайлПолучен Тогда
			ПолученоФайлов = ПолученоФайлов + 1;
			Продолжить;
		КонецЕсли;
		
		ЕстьВсеФайлы = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПолучитьФайлыКлассификаторовПослеПоискаФайла", ЭтотОбъект, Справочник);
		НачатьПоискФайлов(Оповещение, Справочник.ИмяФайла);
		
	КонецЦикла;
	
	Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получено файлов: %1 из %2'"),
		ПолученоФайлов,
		ЗапрашиваемыеСправочники.Количество());
	УстановитьСтатусЗагрузки(Состояние);
	
	Если ЕстьВсеФайлы Тогда
		ОжидаютсяДанныеОтИТС = Ложь;
		УстановитьСтатусЗагрузки(НСтр("ru='Начало загрузки классификаторов.'"));
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьКлассификаторы", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьФайлыКлассификаторов", 10, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлыКлассификаторовПослеПоискаФайла(НайденныеФайлы, Справочник) Экспорт
	
	Если НайденныеФайлы.Количество() = 1 Тогда
		Справочник.ФайлПолучен = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка классификаторов

&НаКлиенте
Процедура Подключаемый_ЗагрузитьКлассификаторы()
	
	Попытка
		
		ИменаФайлов = Новый Массив;
		Для Каждого Справочник Из ЗапрашиваемыеСправочники Цикл
			ИменаФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(Справочник.ИмяФайла));
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКлассификаторыПослеПомещенияФайлов", ЭтотОбъект);
		НачатьПомещениеФайлов(Оповещение, ИменаФайлов,, Ложь);
		
	Исключение
		ФайловыеФункцииБольничнаяАптекаКлиент.УдалитьФайлНаКлиенте(ПутьКДаннымНаКлиенте);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВернутьсяВНачало();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторыПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		ВернутьсяВНачало();
	КонецЕсли;
	
	ФайловыеФункцииБольничнаяАптекаКлиент.УдалитьФайлНаКлиенте(ПутьКДаннымНаКлиенте);
	
	Задание = ЗагрузитьКлассификаторыРЛССервер(ПомещенныеФайлы, ЗапрашиваемыеСправочники);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОтобразитьПрогресс", ЭтотОбъект);
	
	ОповеститьОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗагрузки", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповеститьОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьКлассификаторыРЛССервер(Знач ПомещенныеФайлы, Знач ЗагружаемыеКлассификаторы)
	
	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка классификаторов РЛС'");
	
	ОписаниеФайлов = Новый Массив;
	Для Каждого Описание Из ПомещенныеФайлы Цикл
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Имя", Описание.Имя);
		ДанныеФайла.Вставить("Хранение", ПолучитьИзВременногоХранилища(Описание.Хранение));
		
		ОписаниеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ДанныеКлассификаторов", ОписаниеФайлов);
	ПараметрыЗагрузки.Вставить("ЗагружаемыеКлассификаторы", ЗагружаемыеКлассификаторы);
	
	Задание = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаДанныхСИТСМедицина.ЗагрузитьКлассификаторы", ПараметрыЗагрузки, ПараметрыЗадания);
	
	Возврат Задание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ЗапрашиваемыеСправочники(КлассификаторыДляЗагрузки, ПутьКДанным = "")
	
	ЗапрашиваемыеСправочники = Новый Массив;
	Для Каждого ЭлементКлассификатор Из КлассификаторыДляЗагрузки Цикл
		
		Если Не ЭлементКлассификатор.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапрашиваемыйСправочник = Новый Структура;
		ЗапрашиваемыйСправочник.Вставить("НомерСправочника", ЭлементКлассификатор.НомерСправочника);
		ЗапрашиваемыйСправочник.Вставить("ИмяСправочника", ЭлементКлассификатор.ИмяСправочника);
		Если Не ПустаяСтрока(ПутьКДанным) Тогда
			ЗапрашиваемыйСправочник.Вставить("ИмяФайла", ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКДанным, ЭлементКлассификатор.НомерСправочника + ".rls"));
		КонецЕсли;
		ЗапрашиваемыйСправочник.Вставить("ФайлПолучен", Ложь);
		
		ЗапрашиваемыеСправочники.Добавить(ЗапрашиваемыйСправочник);
		
	КонецЦикла;
	
	Возврат ЗапрашиваемыеСправочники;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПрогресс(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Прогресс.Прогресс) = Тип("Структура") Тогда
		УстановитьСтатусЗагрузки(Прогресс.Прогресс.Текст);
	Иначе
		ОбновитьВремяРаботы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Задание отменено
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВернутьсяВНачало();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка загрузки классификаторов РЛС.
			         |%1'"), 
			Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	Иначе // Результат.Статус = "Выполнено"
		
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение;
		ТекстОписанияЗагрузки = НСтр("ru = 'Классификаторы успешно загружены.'");
		
		Для Каждого Классификатор Из КлассификаторыДляЗагрузки Цикл
			Если Классификатор.Пометка Тогда
				ОповеститьОбИзменении(Тип("СправочникСсылка." + Классификатор.ИмяМетаданных));
			КонецЕсли;
		КонецЦикла;
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.Закрыть;
		ЗакрытьФормуБезПодтверждения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
