
#Область ОписаниеПеременных

&НаКлиенте
Перем ОчередьОбработкиШтрихкодов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметрыОбработки();
	
	ПодключитьМеханизмПроверкиКМ();
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки.Удалить("Организация");
		Настройки.Удалить("МестоДеятельности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	ОчередьОбработкиШтрихкодов = Новый Массив;
	
	ЗапуститьПолучениеРезультатовПроверкиКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			// Штрихкоды помещаются в очередь, т.к. может использоваться сканер с памятью.
			ОчередьОбработкиШтрихкодов.Добавить(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Данные были изменены. Записать результаты выборочного контроля?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповестить, Отказ, ЗавершениеРаботы, ТекстСообщения, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Обработчик = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	СобытияФормМДЛПКлиент.ПоказатьВводШтрихкода(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроки(Команда)
	
	УдаляемыеСтроки = Новый Массив;
	Если Элементы.ТаблицаВыборочногоКонтроля.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаВыборочногоКонтроля.ВыделенныеСтроки Цикл
			УдаляемыеСтроки.Добавить(ТаблицаВыборочногоКонтроля.НайтиПоИдентификатору(ВыделеннаяСтрока));
		КонецЦикла;
	КонецЕсли;
	
	ФлагМодифицированность = Ложь;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		ТаблицаВыборочногоКонтроля.Удалить(УдаляемаяСтрока);
		
		ФлагМодифицированность = Истина;
		
	КонецЦикла;
	
	Если ФлагМодифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметку(Команда)
	
	УстановитьСнятьОтметку();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	
	УстановитьСнятьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтмеченные(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборочныйКонтроль(Команда)
	
	ЗавершитьИЗакрытьВыборочныйКонтроль();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияПараметров

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыборочногоКонтроляПояснениеСтатусаПроверкиКМ.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ТаблицаВыборочногоКонтроля.ПолныйКодМаркировки",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ТаблицаВыборочногоКонтроля.КонтрольВыполнен", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ТаблицаВыборочногоКонтроля.ПояснениеСтатусаПроверкиКМ",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<необходимо отсканировать код маркировки>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыборочногоКонтроляОтметка.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ТаблицаВыборочногоКонтроля.ПолныйКодМаркировки",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ТаблицаВыборочногоКонтроля.КонтрольВыполнен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыОбработки()
	
	ЗаполнитьПроверяемыйДокумент();
	
	ЗаполнитьОрганизациюИМестоДеятельностиПоПроверяемомуДокументу();
	
	ЗаполнитьНомераУпаковокИзПараметров();
	
	ИнициализироватьДоступныеРежимыРаботыОбработки();
	
	УстановитьТекущийРежимРаботыОбработки();
	
	ИспользуетсяНезависимыйРежим = ТекущийРежимРаботыОбработки = ДоступныеРежимыРаботыОбработки.Независимый;
	Элементы.ТаблицаВыборочногоКонтроляУдалитьСтроки.Доступность = ИспользуетсяНезависимыйРежим;
	Элементы.ТаблицаВыборочногоКонтроляКонтекстноеМенюУдалитьСтроки.Доступность = ИспользуетсяНезависимыйРежим;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроверяемыйДокумент()
	
	ПроверяемыйДокумент = Параметры.ПроверяемыйДокумент;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПроверяемыйДокумент)) Тогда
		
		ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
		Для Каждого КлючИЗначение Из ГруппыНастроекКонтроляКМ Цикл
			ОперацииСВключеннымКонтролемКМ = КонтрольКодовМаркировкиМДЛП.ОперацииСВключеннымКонтролемКМ(КлючИЗначение.Значение);
			Если ЗначениеЗаполнено(ОперацииСВключеннымКонтролемКМ) Тогда
				ПроверяемыйДокумент = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОперацииСВключеннымКонтролемКМ[0]).ПустаяСсылка();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПроверяемыйДокумент)) Тогда
			ВызватьИсключение НСтр("ru = 'Механизм контроля КМ выключен'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюИМестоДеятельностиПоПроверяемомуДокументу()
	
	Если Не ЗначениеЗаполнено(ПроверяемыйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверяемыйДокумент.Метаданные().Реквизиты.Найти("МестоДеятельности") <> Неопределено Тогда
		РеквизитыПроверяемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроверяемыйДокумент, "Организация, МестоДеятельности");
		Организация = РеквизитыПроверяемогоДокумента.Организация;
		МестоДеятельности = РеквизитыПроверяемогоДокумента.МестоДеятельности;
	Иначе
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераУпаковокИзПараметров()
	
	Если ЗначениеЗаполнено(Параметры.НомераУпаковок) Тогда
		НомераУпаковок.ЗагрузитьЗначения(Параметры.НомераУпаковок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДоступныеРежимыРаботыОбработки()
	
	РежимыРаботыОбработки = Новый Структура;
	РежимыРаботыОбработки.Вставить("Контекстный", "Контекстный");
	РежимыРаботыОбработки.Вставить("Независимый", "Независимый");
	
	ДоступныеРежимыРаботыОбработки = Новый ФиксированнаяСтруктура(РежимыРаботыОбработки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийРежимРаботыОбработки()
	
	ТекущийРежимРаботыОбработки = ?(ЗначениеЗаполнено(ПроверяемыйДокумент), ДоступныеРежимыРаботыОбработки.Контекстный, ДоступныеРежимыРаботыОбработки.Независимый);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОчередьОбработкиШтрихкодов.Добавить(ДанныеШтрихкода);
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыОтложенно()
	
	ОтключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно");
	
	// Обрабатывать штрихкоды из очереди будем по одному.
	Если ОчередьОбработкиШтрихкодов.Количество() > 0 Тогда
		ДанныеШтрихкода = ОчередьОбработкиШтрихкодов[0];
		ОчередьОбработкиШтрихкодов.Удалить(0);
		ОбработатьШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкода));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект, ДанныеШтрихкодовПоТипам);
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуШтрихкодов(Результат, ДанныеШтрихкодовПоТипам) Экспорт
	
	ЗаполнитьТаблицуВыборочногоКонтроляПоДаннымШтрихкодов(ДанныеШтрихкодовПоТипам);
	
	// Когда была обработана очередная порция данных, можно обрабатывать следующую.
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуВыборочногоКонтроляПоДаннымШтрихкодов(ДанныеШтрихкодовПоТипам)
	
	ФлагМодифицированность = Ложь;
	
	Для Каждого Данные Из ДанныеШтрихкодовПоТипам.НомераКиЗ Цикл
		
		НайденныеСтроки = ТаблицаВыборочногоКонтроля.НайтиСтроки(Новый Структура("ПолныйКодМаркировки", Данные.ШтрихкодBase64));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер упаковки %1 с отсканированным кодом маркировки уже присутствует в таблице'"), Данные.sgtin);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаВыборочногоКонтроля", ТаблицаВыборочногоКонтроля.Индекс(НайденныеСтроки[0]) + 1, "НомерУпаковкиПроверки");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаВыборочногоКонтроля.НайтиСтроки(Новый Структура("НомерУпаковкиПроверки", Данные.sgtin));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
		ИначеЕсли ТекущийРежимРаботыОбработки = ДоступныеРежимыРаботыОбработки.Независимый Тогда
			
			СтрокаТаблицы = ТаблицаВыборочногоКонтроля.Добавить();
			СтрокаТаблицы.НомерУпаковкиПроверки = Данные.sgtin;
			
			НомераУпаковок.Добавить(СтрокаТаблицы.НомерУпаковкиПроверки);
			
		Иначе
			
			// Добавлять новые строки в Контекстном режиме запрещено.
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы.КлючУпаковкиПроверки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(СтрокаТаблицы.НомерУпаковкиПроверки);
		СтрокаТаблицы.ПолныйКодМаркировки = СтрЗаменить(СтрЗаменить(Данные.ШтрихкодBase64, Символы.ПС, ""), Символы.ВК, "");
		
		ФлагМодифицированность = Истина;
		
	КонецЦикла;
	
	ЗапуститьПолучениеРезультатовПроверкиКМ();
	
	Если ФлагМодифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКМ

&НаСервере
Процедура ПодключитьМеханизмПроверкиКМ()
	
	ПараметрыПодключения = КонтрольКодовМаркировкиМДЛП.ПараметрыПодключенияПроверкиКМ(ЭтотОбъект);
	ПараметрыПодключения.ДокументСсылка = ПроверяемыйДокумент;
	ПараметрыПодключения.КонтрольВыполнятьВФормеВыборочногоКонтроляКМ = Ложь;
	
	КонтрольКодовМаркировкиМДЛП.ПодключитьМеханизмПроверкиКМ(ПараметрыПодключения);
	
	Элементы.ТаблицаВыборочногоКонтроляГруппаПроверкаКМ.Видимость = КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМПодключен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуКМ()
	
	Если Не КонтрольКодовМаркировкиМДЛПКлиент.МеханизмПроверкиКМИспользуется(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаВыборочногоКонтроля Цикл
		
		Если Не СтрокаТаблицы.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементДанных = КонтрольКодовМаркировкиМДЛПКлиент.ЭлементДанныхДляПроверки();
		ЭлементДанных.КодМаркировки         = СтрокаТаблицы.НомерУпаковкиПроверки;
		ЭлементДанных.ПолныйКодМаркировки   = СтрокаТаблицы.ПолныйКодМаркировки;
		ЭлементДанных.ИдентификаторЭлемента = СтрокаТаблицы.ПолныйКодМаркировки;
		
		ДанныеДляПроверки.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Если ДанныеДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Доступность = Ложь;
	
	ОповещениеОЗавершенииПроверкиКМ = Новый ОписаниеОповещения("ЗакончитьПроверкуКМ", ЭтотОбъект);
	
	ПараметрыПроверкиКМ = КонтрольКодовМаркировкиМДЛПКлиент.ПараметрыПроверкиКМ(ЭтотОбъект);
	ПараметрыПроверкиКМ.ОповещениеОЗавершении = ОповещениеОЗавершенииПроверкиКМ;
	
	ПараметрыПроверкиКМ.Организация       = Организация;
	ПараметрыПроверкиКМ.МестоДеятельности = МестоДеятельности;
	ПараметрыПроверкиКМ.ДанныеДляПроверки = ДанныеДляПроверки;
	
	ПараметрыПроверкиКМ.ИнтерактивныйРежим        = Ложь;
	ПараметрыПроверкиКМ.СообщатьОбОшибкахПроверки = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиент.НачатьПроверкуКМ(ПараметрыПроверкиКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуКМ(РезультатПроверки, ДополнительныеПараметры) Экспорт
	
	Доступность = Истина;
	
	ФлагМодифицированность = Ложь;
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаВыборочногоКонтроля Цикл
			
			Если Не СтрокаТаблицы.Отметка Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = РезультатПроверки.ДанныеПроверки[СтрокаТаблицы.ПолныйКодМаркировки];
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Данные);
			
			СтрокаТаблицы.РезультатИзменен = Истина;
			ФлагМодифицированность = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФлагМодифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРезультатыПроверкиКМ()
	
	Если Не КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМИспользуется(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = КонтрольКодовМаркировкиМДЛП.ПараметрыЗаписиРезультатовПроверкиКМ(ЭтотОбъект);
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыборочногоКонтроля Цикл
		
		Если Не СтрокаТаблицы.КонтрольВыполнен Или Не СтрокаТаблицы.РезультатИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультата = ПараметрыЗаписи.ТаблицаРезультатовПроверкиКМ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаТаблицы);
		СтрокаРезультата.НомерУпаковки = СтрокаТаблицы.НомерУпаковкиПроверки;
		
	КонецЦикла;
	
	КонтрольКодовМаркировкиМДЛП.ЗаписатьРезультатыПроверкиКМ(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПолучениеРезультатовПроверкиКМ()
	
	ПодключитьОбработчикОжидания("ПолучитьРезультатыПроверкиКМОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатыПроверкиКМОтложенно()
	
	ПолучитьРезультатыПроверкиКМ();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатыПроверкиКМ()
	
	Если Не КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМПодключен(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НомераУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = КонтрольКодовМаркировкиМДЛП.ПараметрыПолученияРезультатовПроверкиКМ();
	ПараметрыПолучения.НомераУпаковок = НомераУпаковок.ВыгрузитьЗначения();
	
	ТаблицаРезультатовПроверкиКМ = КонтрольКодовМаркировкиМДЛП.ПолучитьРезультатыПроверкиКМ(ПараметрыПолучения);
	Если Не ЗначениеЗаполнено(ТаблицаРезультатовПроверкиКМ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультатовПроверкиКМ Из ТаблицаРезультатовПроверкиКМ Цикл
		
		НайденныеСтроки = ТаблицаВыборочногоКонтроля.НайтиСтроки(Новый Структура("НомерУпаковкиПроверки", СтрокаРезультатовПроверкиКМ.НомерУпаковкиПроверки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы = НайденныеСтроки[0];
		Иначе
			СтрокаТаблицы = ТаблицаВыборочногоКонтроля.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРезультатовПроверкиКМ);
		
		СтрокаТаблицы.КонтрольВыполнен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультатовПроверкиКМ.РезультатПроверкиКМ, "КонтрольВыполнен");
		ПолныйКодМаркировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультатовПроверкиКМ.РезультатПроверкиКМ, "ПолныйКодМаркировки");
		Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
			СтрокаТаблицы.ПолныйКодМаркировки = ПолныйКодМаркировки;
		КонецЕсли;
		
		КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеРезультатаПроверкиКМ(ЭтотОбъект, СтрокаТаблицы);
		
	КонецЦикла;
	
	НомераУпаковок.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеВыборочногоКонтроля

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗавершитьИЗакрытьВыборочныйКонтроль();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИЗакрытьВыборочныйКонтроль()
	
	ОчиститьСообщения();
	
	ЗаписатьРезультатыПроверкиКМ();
	
	ОповеститьОВыполненииВыборочногоКонтроля();
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОВыполненииВыборочногоКонтроля()
	
	Если ТекущийРежимРаботыОбработки = ДоступныеРежимыРаботыОбработки.Контекстный Тогда
		Оповестить("СохранениеРезультатовВыборочногоКонтроляМДЛП", ПроверяемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьСнятьОтметку(Отметка = Истина)
	
	Если Элементы.ТаблицаВыборочногоКонтроля.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаВыборочногоКонтроля.ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТаблицаВыборочногоКонтроля.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПолныйКодМаркировки) И СтрокаТаблицы.КонтрольВыполнен Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Отметка = Отметка;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаВыборочногоКонтроля Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПолныйКодМаркировки) И СтрокаТаблицы.КонтрольВыполнен Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Отметка = Отметка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
