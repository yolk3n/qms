
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Контрагент = Константы.КонтрагентДляПроектаОперативныйМониторингЛС.Получить();
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ВызватьИсключение НСтр("ru = 'Не настроены параметры проекта оперативного мониторинга ЛС. Для настройки параметров перейдите Администрирование - Предприятие - Оперативный мониторинг ЛС.'");
	КонецЕсли;
	
	ПериодСоставленияОтчета = НачалоМесяца(ТекущаяДатаСеанса());
	
	Сегмент = 2; // Госпитальный
	УстановитьДоступностьЭлементовПоСегменту(ЭтотОбъект);
	
	НастроитьОтборДанныхМониторинга();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьДоступностьЭлементовПоСегменту(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДанныеОперативногоМониторингуЛС(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыгружаемыеДанные.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеПоМониторингуЦенЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДанныеПоМониторингуЦен();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоМониторингуЦенЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыгружаемыеДанные.Очистить();
		ЗаполнитьДанныеПоМониторингуЦен();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеОперативногоМониторингаЛС(Команда)
	
	Если Не ПроверитьЗаполнениеДанныхОперативногоМониторингаЛС() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеМониторингаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	ИзменитьПериод(-1);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	ИзменитьПериод(1);
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбработатьИзменениеОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АмбулаторныйСегментПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСегменту(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоспитальныйСегментПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСегменту(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеНоменклатураРосздравнадзораПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураРосздравнадзора) Тогда
		
		Коды = ПолучитьДанныеНоменклатурыРосздравнадзора(ТекущаяСтрока.НоменклатураРосздравнадзора);
		ТекущаяСтрока.УникальныйКодРосздравнадзора = Коды.DrugId;
		ТекущаяСтрока.МаксимальнаяЦенаПроизводителя = Коды.МаксимальнаяЦенаПроизводителя;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеСерииНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.СерияНоменклатуры) Тогда
		ТекущаяСтрока.Серия = ПолучитьНомерСерии(ТекущаяСтрока.СерияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеДанныеПоставщикПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыгружаемыеДанные.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Поставщик) Тогда
		ТекущаяСтрока.КодПоставщика = ПолучитьКодПоставщика(ТекущаяСтрока.Поставщик);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыгружаемыеДанныеЦенаЗакупки.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыгружаемыеДанныеРозничнаяЦена.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сегмент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = 1; // Амбулаторный
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыгружаемыеДанныеСредстваНаЗакупку.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сегмент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = 2; // Госпитальный
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборДанныхМониторинга()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка) КАК МестоХранения,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
	|";
	
	Схема = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	ОписаниеПоля = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ОписаниеПоля.Поле = "Номенклатура";
	ПараметрыВыбора = ОписаниеПоля.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора").Значение;
	Параметр = ПараметрыВыбора.Добавить();
	Параметр.Имя = "Отбор.ТипНоменклатуры";
	Параметр.Значение = Перечисления.ТипыНоменклатуры.Товар;
	ОписаниеПоля.ПараметрыРедактирования.УстановитьЗначениеПараметра("ПараметрыВыбора", ПараметрыВыбора);
	
	ОписаниеПоля = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ОписаниеПоля.Поле = "Склад";
	ПараметрыВыбора = ОписаниеПоля.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора").Значение;
	Параметр = ПараметрыВыбора.Добавить();
	Параметр.Имя = "Отбор.ТипСклада";
	Параметр.Значение = Новый ФиксированныйМассив(Перечисления.ТипыСкладов.ТипыСкладовАптеки());
	ОписаниеПоля.ПараметрыРедактирования.УстановитьЗначениеПараметра("ПараметрыВыбора", ПараметрыВыбора);
	
	ОписаниеПоля = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ОписаниеПоля.Поле = "МестоХранения";
	СвязиПараметровВыбора = ОписаниеПоля.ПараметрыРедактирования.Элементы.Найти("СвязиПараметровВыбора").Значение;
	Связь = СвязиПараметровВыбора.Добавить();
	Связь.Имя = "Отбор.Владелец";
	Связь.Поле = Новый ПолеКомпоновкиДанных("Склад");
	Связь.ИзменениеЗначения = РежимИзмененияСвязанногоЗначения.Очищать;
	ОписаниеПоля.ПараметрыРедактирования.УстановитьЗначениеПараметра("СвязиПараметровВыбора", СвязиПараметровВыбора);
	
	URLСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	КомпоновщикНастроекДляОтбора.Инициализировать(ИсточникНастроек);
	
	Отбор = КомпоновщикНастроекДляОтбора.Настройки.Отбор.Элементы;
	ЭлементОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	
	ЭлементОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПоСегменту(Форма)
	
	Форма.Элементы.РозничныйВидЦены.Доступность = (Форма.Сегмент = 1); // Амбулаторный
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Шаг)
	ПериодСоставленияОтчета = КонецМесяца(ДобавитьМесяц(ПериодСоставленияОтчета, Шаг));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатурыРосздравнадзора(Знач НоменклатураРосздравнадзора)
	
	МенеджерЗаписи = РегистрыСведений.ДанныеДействующегоСправочникаЛС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Номенклатура = НоменклатураРосздравнадзора;
	МенеджерЗаписи.Прочитать();
	
	Данные = Новый Структура;
	Данные.Вставить("DrugId", 0);
	Данные.Вставить("МаксимальнаяЦенаПроизводителя", 0);
	ЗаполнитьЗначенияСвойств(Данные, МенеджерЗаписи);
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеДанныхОперативногоМониторингаЛС()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если Не ВыгружаемыеДанные.Количество() Тогда
		СообщениеОбОшибке = НСтр("ru='Нет данных для выгрузки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "ВыгружаемыеДанные",, Отказ);
	КонецЕсли;
	
	Если Сегмент = 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Не выбран сегмент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "ГоспитальныйСегмент",, Отказ);
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("УникальныйКодРосздравнадзора", "DrugID");
	ПроверяемыеРеквизиты.Вставить("Количество", НСтр("ru = 'Количество'"));
	Если Сегмент = 2 Тогда // Госпитальный
		ПроверяемыеРеквизиты.Вставить("СредстваНаЗакупку" , НСтр("ru = 'Средства на закупку'"));
	ИначеЕсли Сегмент = 1 Тогда // Амбулаторный
		ПроверяемыеРеквизиты.Вставить("ЦенаЗакупки"       , НСтр("ru = 'Цена закупки'"));
		ПроверяемыеРеквизиты.Вставить("РозничнаяЦена"     , НСтр("ru = 'Розничная цена'"));
	КонецЕсли;
	ПроверяемыеРеквизиты.Вставить("КодПоставщика"     , НСтр("ru = 'Код поставщика'"));
	
	АдресОшибки = " " + НСтр("ru='в строке %1 списка ""Данные оперативного мониторинга ЛС""'");
	
	Для Каждого СтрокаДанных Из ВыгружаемыеДанные Цикл
		
		Индекс = ВыгружаемыеДанные.Индекс(СтрокаДанных) + 1;
		
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных[ПроверяемыйРеквизит.Ключ]) Тогда
				
				СообщениеОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не заполнена колонка ""%1""'"),
						ПроверяемыйРеквизит.Значение)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						АдресОшибки,
						Индекс);
					
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СообщениеОбОшибке,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыгружаемыеДанные", Индекс, ПроверяемыйРеквизит.Ключ),
					,
					Отказ);
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

#Область ЗаполнениеДанныхМониторингаПоУчету

&НаКлиенте
Процедура ЗаполнитьДанныеПоМониторингуЦен()
	
	Задание = ЗаполнитьДанныеПоМониторингуЦенСервер();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповеститьОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗаполненияДанных", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповеститьОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоМониторингуЦенСервер()
	
	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Выгрузка данных по проекту мониторинга цен'");
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("Организация"     , Организация);
	ПараметрыВыгрузки.Вставить("ДатаОтчета"      , ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(НачалоМесяца(ПериодСоставленияОтчета), "ДЕНЬ", 15));
	ПараметрыВыгрузки.Вставить("Сегмент"         , Сегмент);
	ПараметрыВыгрузки.Вставить("РозничныйВидЦены", РозничныйВидЦены);
	ПараметрыВыгрузки.Вставить("Отбор"           , КомпоновщикНастроекДляОтбора.ПолучитьНастройки());
	
	Задание = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ОперативныйМониторингЛС.ПолучитьДанныеМониторингаЦенПоОстаткам", ПараметрыВыгрузки, ПараметрыЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаполненияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Задание отменено
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При заполнении данных мониторинга возникла ошибка.
			         |%1'"), 
			Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	Иначе // Результат.Статус = "Выполнено"
		
		ПеренестиДанныеПоМониторингуВТаблицу(Результат.АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеПоМониторингуВТаблицу(Знач АдресРезультата)
	
	ВыгружаемыеДанные.Загрузить(ПолучитьИзВременногоХранилища(АдресРезультата));
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеФалаСДаннымиМониторинга

&НаКлиенте
Процедура ВыгрузитьДанныеМониторингаЦен()
	
	Задание = ВыгрузитьДанныеМониторингаЦенСервер();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповеститьОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеВыгрузкиДанных", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповеститьОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеМониторингаЦенСервер()
	
	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Выгрузка данных по проекту мониторинга цен'");
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("КодОрганизации"         , КодОрганизации);
	ПараметрыВыгрузки.Вставить("ПериодСоставленияОтчета", ПериодСоставленияОтчета);
	ПараметрыВыгрузки.Вставить("Сегмент"                , Сегмент);
	ПараметрыВыгрузки.Вставить("ДанныеМониторинга"      , ВыгружаемыеДанные.Выгрузить());
	
	Задание = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ОперативныйМониторингЛС.СформироватьДанныеОперативногоМониторингаЦенДляПередачи", ПараметрыВыгрузки, ПараметрыЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеВыгрузкиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Задание отменено
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При формировании данных выгрузки возникла ошибка.
			         |%1'"), 
			Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	Иначе // Результат.Статус = "Выполнено"
		
		ПолучитьФайл(Результат.АдресРезультата, "monprice.csv", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьНомерСерии(СерияНоменклатуры)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СерияНоменклатуры, "Номер");
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	КодОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодВПроектеОперативныйМониторингЛС");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодПоставщика(Поставщик)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Поставщик, "КодПоставщикаВПроектеОперативныйМониторингЛС");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
