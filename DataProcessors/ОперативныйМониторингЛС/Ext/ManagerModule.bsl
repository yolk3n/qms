#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДействующегоСправочникаЛС

Процедура ЗагрузитьНоменклатуруСегментаИзФайла(ПараметрыЗагрузки, АдресРезультата) Экспорт
	
	ДвоичныеДанные = ПараметрыЗагрузки.ДанныеКлассификатора;
	
	Результат = ЗагрузитьНоменклатуруСегмента(
		ДвоичныеДанные.ОткрытьПотокДляЧтения(),
		ПараметрыЗагрузки.Контрагент,
		ПараметрыЗагрузки.ЗагружатьНоменклатуруСНулевойЦеной,
		ПараметрыЗагрузки.ПометитьНаУдалениеОтсутствующие);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ЗагрузитьНоменклатуруСегмента(ИсточникДанных,
									  Контрагент,
									  ЗагружатьНоменклатуруСНулевойЦеной,
									  ПометитьНаУдалениеОтсутствующие)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ТекстОшибки = НСтр("ru='Не указан контрагент для проекта по мониторингу цен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НоменклатураСегмента = Новый ЧтениеТекста(ИсточникДанных);
	
	РазделительКолонок = ";";
	
	ИменаКолонокВФайле = ПолучитьИменаКолонокИзФайла(НоменклатураСегмента, РазделительКолонок);
	
	ПроверитьНаличиеОбязательныхКолонокНоменклатурыВСегменте(ИменаКолонокВФайле);
	
	ЗагруженнаяНоменклатура = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		Блокировка = БлокировкаДанных.Добавить("Справочник.НоменклатураКонтрагентов");
		Блокировка.УстановитьЗначение("Владелец", Контрагент);
		Блокировка.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НомерСтроки = 1;
		ЗагруженоСтрок = 0;
		Пока Истина Цикл
			
			СтрокаШаблона = НоменклатураСегмента.ПрочитатьСтроку();
			Если СтрокаШаблона = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Номенклатура = ЗагрузитьНоменклатуруИзСтроки(
				СтрокаШаблона,
				НомерСтроки,
				ИменаКолонокВФайле,
				РазделительКолонок,
				Контрагент,
				ЗагружатьНоменклатуруСНулевойЦеной);
				
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				ЗагруженнаяНоменклатура.Добавить(Номенклатура);
				ЗагруженоСтрок = ЗагруженоСтрок + 1;
			КонецЕсли;
			
			Если (НомерСтроки - 1) % 100 = 0 Тогда
				ЗагруженоОбъектов = НСтр("ru = 'Обработано строк: %1, в том числе загружено: %2.'");
				ДлительныеОперации.СообщитьПрогресс(, СтрЗаменить(СтрЗаменить(ЗагруженоОбъектов, "%1", НомерСтроки - 1), "%2", ЗагруженоСтрок));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПометитьНаУдалениеОтсутствующие И ЗагруженнаяНоменклатура.Количество() > 0 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.НоменклатураКонтрагентов ГДЕ Владелец = &Контрагент И НЕ Ссылка В (&ЗагруженнаяНоменклатура) И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("ЗагруженнаяНоменклатура", ЗагруженнаяНоменклатура);
			Выборка = Запрос.Выполнить().Выбрать();
			
			НомерУдаленного = 0;
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.УстановитьПометкуУдаления(Истина);
				НомерУдаленного = НомерУдаленного + 1;
				Если НомерУдаленного % 100 = 0 Тогда
					ЗагруженоОбъектов = НСтр("ru = 'Помечено на удаление объектов: %1'");
					ДлительныеОперации.СообщитьПрогресс(, СтрЗаменить(ЗагруженоОбъектов, "%1", НомерУдаленного));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр("ru='Невозможно обработать файл номенклатуры сегмента.'");
		ВызватьИсключение ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Новый Структура("ВсегоСтрок, ЗагруженоСтрок", НомерСтроки - 1, ЗагруженоСтрок);
	
КонецФункции

Функция ЗагрузитьНоменклатуруИзСтроки(СтрокаШаблона,
									  НомерСтроки,
									  ИменаКолонокВФайле,
									  РазделительКолонок,
									  Поставщик,
									  ЗагружатьНоменклатуруСНулевойЦеной = Ложь)
	
	ЗначенияСтрокиШаблона = РазложитьСтрокуВМассивПодстрок(СтрокаШаблона, РазделительКолонок);
	
	Если Не ЗначенияСтрокиШаблона.Количество() = ИменаКолонокВФайле.Количество() Тогда
		ТекстОшибки = НСтр("ru='Обработка строки %1: количество значений строки не соответствует количеству колонок заголовка.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтроки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не ЗагружатьНоменклатуруСНулевойЦеной
	   И Не ЗначениеЗаполнено(ЗначенияСтрокиШаблона[ИменаКолонокВФайле.Найти(ВРег("MaxMnfPrice"))]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат ЗаписатьЭлементНоменклатурыВСегменте(Поставщик, ИменаКолонокВФайле, ЗначенияСтрокиШаблона);
	Исключение
		ТекстОшибки = НСтр("ru='Обработка строки %1. Ошибка записи номенклатуры в сегменте:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтроки);
		ВызватьИсключение ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьИменаКолонокИзФайла(ТекстовыйФайл, РазделительКолонок)
	
	Заголовок = ТекстовыйФайл.ПрочитатьСтроку();
	Если Заголовок = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Невозможно обработать файл шаблона. Файл не содержит данных.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ИменаКолонок = РазложитьСтрокуВМассивПодстрок(Заголовок, РазделительКолонок);
	Для Индекс = 0 По ИменаКолонок.Количество() - 1 Цикл
		ИменаКолонок[Индекс] = ВРег(ИменаКолонок[Индекс]);
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

Функция ЗаписатьЭлементНоменклатурыВСегменте(Поставщик, ИменаКолонок, ЗначенияСтроки)
	
	НоменклатураВСегментеСсылка = НайтиНоменклатуруСегмента(Поставщик, ИменаКолонок, ЗначенияСтроки);
	
	Если НоменклатураВСегментеСсылка.Пустая() Тогда
		НоменклатураВСегменте = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
	Иначе
		
		НоменклатураВСегменте = НоменклатураВСегментеСсылка.ПолучитьОбъект();
		Если НоменклатураВСегменте.ПометкаУдаления Тогда
			НоменклатураВСегменте.ПометкаУдаления = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураВСегменте.Владелец = Поставщик;
	ОбновитьРеквизитыНоменклатурыВСегменте(НоменклатураВСегменте, ИменаКолонок, ЗначенияСтроки);
	
	НоменклатураВСегменте.Записать();
	
	ОбновитьКодыНоменклатурыСегмента(НоменклатураВСегменте.Ссылка, ИменаКолонок, ЗначенияСтроки);
	
	Возврат НоменклатураВСегменте.Ссылка;
	
КонецФункции

Функция НайтиНоменклатуруСегмента(Поставщик, ИменаКолонок, ЗначенияСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДействующегоСправочникаЛС.Номенклатура
	|ИЗ
	|	РегистрСведений.ДанныеДействующегоСправочникаЛС КАК ДанныеДействующегоСправочникаЛС
	|ГДЕ
	|	ДанныеДействующегоСправочникаЛС.DrugID = &DrugID
	|	И ДанныеДействующегоСправочникаЛС.PackNX = &PackNX
	|";
	
	Запрос.УстановитьПараметр("DrugID", Число(ЗначенияСтроки[ИменаКолонок.Найти(ВРег("DrugID"))]));
	Запрос.УстановитьПараметр("PackNX", Число(ЗначенияСтроки[ИменаКолонок.Найти(ВРег("PackNX"))]));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоменклатураСегмента = Выборка.Номенклатура;
	Иначе
		НоменклатураСегмента = Справочники.НоменклатураКонтрагентов.ПустаяСсылка(); 
	КонецЕсли;
	
	Возврат НоменклатураСегмента;
	
КонецФункции

Процедура ОбновитьРеквизитыНоменклатурыВСегменте(НоменклатураВСегменте, ИменаКолонок, ЗначенияСтроки)
	
	НоменклатураВСегменте.Наименование = ПолучитьНаименованиеНоменклатурыВСегменте(ИменаКолонок, ЗначенияСтроки);
	НоменклатураВСегменте.НаименованиеНоменклатуры = НоменклатураВСегменте.Наименование;
	НоменклатураВСегменте.НаименованиеПолное = НоменклатураВСегменте.Наименование;
	
	НоменклатураВСегменте.ДополнительныеРеквизитыНоменклатурыПоставщика.Очистить();
	ЗаполнитьДополнительныеРеквизитыНоменклатурыПоставщика(
		НоменклатураВСегменте.ДополнительныеРеквизитыНоменклатурыПоставщика,
		ИменаКолонок,
		ЗначенияСтроки);
	
КонецПроцедуры

Процедура ОбновитьКодыНоменклатурыСегмента(НоменклатураВСегменте, ИменаКолонок, ЗначенияСтроки)
	
	МенеджерЗаписи = РегистрыСведений.ДанныеДействующегоСправочникаЛС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Номенклатура = НоменклатураВСегменте;
	МенеджерЗаписи.DrugID      = ЗначенияСтроки[ИменаКолонок.Найти(ВРег("DrugID"))];
	МенеджерЗаписи.PackNX      = ЗначенияСтроки[ИменаКолонок.Найти(ВРег("PackNx"))];
	
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ДанныеДействующегоСправочникаЛС.Ресурсы Цикл
		Если ПустаяСтрока(Ресурс.Комментарий) Или ИменаКолонок.Найти(ВРег(Ресурс.Комментарий)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи[Ресурс.Имя] = ЗначенияСтроки[ИменаКолонок.Найти(ВРег(Ресурс.Комментарий))];
		
	КонецЦикла;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьНаименованиеНоменклатурыВСегменте(ИменаКолонок, ЗначенияСтроки)
	
	КолонкиДляНаименования = ПолучитьИменаКолонокДляФормированияНаименования();
	Наименование = "";
	Для каждого ИмяКолонки Из КолонкиДляНаименования Цикл
		Наименование = Наименование + ", " + ЗначенияСтроки[ИменаКолонок.Найти(ИмяКолонки)];
	КонецЦикла;
	
	ПроверитьНаименованиеНоменклатурыВСегменте(Наименование);
	
	Наименование = Сред(Наименование, 3);
	
	Возврат Наименование;

КонецФункции

Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыПоставщика(ДополнительныеРеквизиты, ИменаКолонок, ЗначенияСтроки)
	
	Для ИндексКолонки = 0 По ИменаКолонок.Количество() - 1 Цикл
		
		СвойствоНоменклатуры = ДополнительныеРеквизиты.Добавить();
		СвойствоНоменклатуры.Свойство = ИменаКолонок[ИндексКолонки];
		СвойствоНоменклатуры.Значение = ЗначенияСтроки[ИндексКолонки];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеОбязательныхКолонокНоменклатурыВСегменте(ИменаКолонок)
	
	ИменаОбязательныхКолонок = ПолучитьИменаОбязательныхКолонок();
	
	ОтсутствующиеКолонки = "";
	Для Каждого ИмяОбязательнойКолонки Из ИменаОбязательныхКолонок Цикл
		
		Если ИменаКолонок.Найти(ИмяОбязательнойКолонки) = Неопределено Тогда
			ОтсутствующиеКолонки = ОтсутствующиеКолонки + ", " + ИмяОбязательнойКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОтсутствующиеКолонки) Тогда
		ТекстОшибки = НСтр("ru='Ошибка формата файла. Отсутствуют обязательные колонки:'") + " " + ОтсутствующиеКолонки;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаименованиеНоменклатурыВСегменте(Наименование)
	
	Если Не ПроверитьСтрокуСРазделителямиНаЗаполненность(Наименование, ",") Тогда
		ТекстОшибки = НСтр("ru='Пустое наименование.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИменаОбязательныхКолонок()
	
	ИменаКолонок = Новый Массив();
	ИменаКолонок.Добавить(ВРег("DrugID"));
	ИменаКолонок.Добавить(ВРег("PackNx"));
	ИменаКолонок.Добавить(ВРег("Ean"));
	
	ИменаКолонок.Добавить(ВРег("TradeNmR"));
	ИменаКолонок.Добавить(ВРег("DrugFmNmRS"));
	ИменаКолонок.Добавить(ВРег("DosageR"));
	ИменаКолонок.Добавить(ВРег("MnfNm"));
	ИменаКолонок.Добавить(ВРег("Pack"));
	
	ИменаКолонок.Добавить(ВРег("MaxMnfPrice"));
	
	Возврат ИменаКолонок;
	
КонецФункции

Функция ПолучитьИменаКолонокДляФормированияНаименования()
	
	ИменаКолонок = Новый Массив();
	ИменаКолонок.Добавить(ВРег("TradeNmR"));
	ИменаКолонок.Добавить(ВРег("DrugFmNmRS"));
	ИменаКолонок.Добавить(ВРег("DosageR"));
	ИменаКолонок.Добавить(ВРег("MnfNm"));
	ИменаКолонок.Добавить(ВРег("Pack"));
	
	Возврат ИменаКолонок;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхМониторингаПоУчету

Процедура ПолучитьДанныеМониторингаЦенПоОстаткам(Параметры, АдресРезультата)Экспорт
	
	Организация      = Параметры.Организация;
	ДатаОкончания    = Параметры.ДатаОтчета;
	Сегмент          = Параметры.Сегмент;
	РозничныйВидЦены = Параметры.РозничныйВидЦены;
	Отбор            = Параметры.Отбор;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагент = Константы.КонтрагентДляПроектаОперативныйМониторингЛС.Получить();
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ВызватьИсключение НСтр("ru = 'Не настроены параметры проекта оперативного мониторинга ЛС. Для настройки параметров перейдите Администрирование - Предприятие - Оперативный мониторинг ЛС.'");
	КонецЕсли;
	
	ОстаткиТоваров = ПолучитьОстаткиТоваров(ДатаОкончания, Организация, Контрагент, Отбор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ОстаткиТоваров", ОстаткиТоваров);
	Запрос.УстановитьПараметр("РозничныйВидЦены", ?(Сегмент = 1, РозничныйВидЦены, Неопределено)); // Амбулаторный
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Остатки.Номенклатура КАК Справочник.Номенклатура)            КАК Номенклатура,
	|	Остатки.НоменклатураРосздравнадзора                                   КАК НоменклатураРосздравнадзора,
	|	Остатки.ЕдиницаИзмерения                                              КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Остатки.СерияНоменклатуры КАК Справочник.СерииНоменклатуры)  КАК СерияНоменклатуры,
	|	Остатки.Партия                                                        КАК Партия,
	|	Остатки.ДокументЗакупки                                               КАК ДокументЗакупки,
	|	Остатки.КоличествоВБазовыхЕдиницахИзмерения                           КАК КоличествоВБазовыхЕдиницахИзмерения
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	&ОстаткиТоваров КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1 Данные о закупках
	|ВЫБРАТЬ
	|	ДокументПоступления.Дата                                КАК ДатаПоступления,
	|	ДокументПоступления                                     КАК ДокументЗакупки,
	|	Поставщик                                               КАК Поставщик,
	|	Поставщик.КодПоставщикаВПроектеОперативныйМониторингЛС  КАК КодПоставщика,
	|	Номенклатура                                            КАК Номенклатура,
	|	СерияНоменклатуры                                       КАК СерияНоменклатуры,
	|	Количество                                              КАК КоличествоВБазовыхЕдиницахИзмерения,
	|	Стоимость                                               КАК СредстваНаЗакупку,
	|	ЦенаПроизводителя                                       КАК ЦенаПроизводителя,
	|	ЕдиницаИзмерения                                        КАК ЕдиницаИзмеренияЦены
	|ИЗ
	|	РегистрНакопления.ДанныеПоступленийДляПроектаПоМониторингуЦен
	|ГДЕ
	|	Активность
	|	И ПЕРИОД <= &ДатаОкончания
	|	И Организация = &Организация
	|	И (Номенклатура, СерияНоменклатуры)
	|		В(ВЫБРАТЬ
	|			Номенклатура,
	|			СерияНоменклатуры
	|		ИЗ
	|			втОстатки
	|		)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления Убыв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2 Данные об остатках
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Остатки.ДокументЗакупки ЕСТЬ NULL
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                КАК Порядок,
	|	Остатки.Номенклатура                                 КАК Номенклатура,
	|	Остатки.НоменклатураРосздравнадзора                  КАК НоменклатураРосздравнадзора,
	|	Остатки.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	КоэффициентыЕдиницИзмерения.Коэффициент              КАК Коэффициент,
	|	Остатки.СерияНоменклатуры                            КАК СерияНоменклатуры,
	|	Остатки.СерияНоменклатуры.Номер                      КАК Серия,
	|	Остатки.ДокументЗакупки                              КАК ДокументЗакупки,
	|	Остатки.КоличествоВБазовыхЕдиницахИзмерения          КАК КоличествоВБазовыхЕдиницахИзмерения,
	|	ДанныеНоменклатуры.DrugID                            КАК УникальныйКодРосздравнадзора,
	|	ДанныеНоменклатуры.МаксимальнаяЦенаПроизводителя     КАК МаксимальнаяЦенаПроизводителя,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ЦеныНоменклатуры.Упаковка = Остатки.ЕдиницаИзмерения
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена * КоэффициентыЕдиницИзмерения.Коэффициент / КоэффициентыЕдиницИзмеренияРозничнойЦены.Коэффициент
	|	КОНЕЦ                                                КАК РозничнаяЦена
	|ИЗ
	|	втОстатки КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеДействующегоСправочникаЛС КАК ДанныеНоменклатуры
	|	ПО
	|		ДанныеНоменклатуры.Номенклатура = Остатки.НоменклатураРосздравнадзора
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницИзмерения
	|	ПО
	|		КоэффициентыЕдиницИзмерения.Номенклатура = Остатки.Номенклатура
	|		И КоэффициентыЕдиницИзмерения.ЕдиницаИзмерения = Остатки.ЕдиницаИзмерения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОкончания,
	|				ВидЦены = &РозничныйВидЦены
	|				И (Номенклатура, СерияНоменклатуры, Партия)
	|					В (ВЫБРАТЬ Номенклатура, СерияНоменклатуры, Партия ИЗ втОстатки)) КАК ЦеныНоменклатуры
	|	ПО
	|		ЦеныНоменклатуры.Номенклатура        = Остатки.Номенклатура
	|		И ЦеныНоменклатуры.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|		И ЦеныНоменклатуры.Партия            = Остатки.Партия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницИзмеренияРозничнойЦены
	|	ПО
	|		КоэффициентыЕдиницИзмеренияРозничнойЦены.Номенклатура = Остатки.Номенклатура
	|		И КоэффициентыЕдиницИзмеренияРозничнойЦены.ЕдиницаИзмерения = ЦеныНоменклатуры.Упаковка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Номенклатура.Наименование,
	|	Остатки.СерияНоменклатуры,
	|	Порядок
	|";
	
	ДанныеМониторингаЦен = ПолучитьДанныеМониторингаЦен();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОстатки = РезультатыЗапроса[2].Выбрать();
	ДанныеОЗакупках = РезультатыЗапроса[1].Выгрузить();
	
	Пока ВыборкаОстатки.Следующий() Цикл
		
		ПоляОтбора = "Номенклатура, СерияНоменклатуры";
		Если ЗначениеЗаполнено(ВыборкаОстатки.ДокументЗакупки) Тогда
			ПоляОтбора = ПоляОтбора + ", ДокументЗакупки";
		КонецЕсли;
		Отбор = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(Отбор, ВыборкаОстатки);
		
		Коэффициент = ВыборкаОстатки.Коэффициент;
		КоличествоОстатка = ВыборкаОстатки.КоличествоВБазовыхЕдиницахИзмерения;
		
		НайденныеСтроки = ДанныеОЗакупках.НайтиСтроки(Отбор);
		Для Каждого ДанныеОЗакупке Из НайденныеСтроки Цикл
			
			Если КоличествоОстатка = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМониторинга = ДанныеМониторингаЦен.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМониторинга, ВыборкаОстатки);
			ЗаполнитьЗначенияСвойств(СтрокаМониторинга, ДанныеОЗакупке, "Поставщик, КодПоставщика");
			
			ЦенаПроизводителя = ДанныеОЗакупке.ЦенаПроизводителя;
			Если ЦенаПроизводителя <> 0 И ВыборкаОстатки.ЕдиницаИзмерения <> ДанныеОЗакупке.ЕдиницаИзмеренияЦены Тогда
				КоэффициентЕдиницыЦены = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ВыборкаОстатки.Номенклатура, ДанныеОЗакупке.ЕдиницаИзмеренияЦены, 1);
				ЦенаПроизводителя = Окр(ЦенаПроизводителя * Коэффициент / КоэффициентЕдиницыЦены, 2);
			КонецЕсли;
			СтрокаМониторинга.ЦенаПроизводителя = ЦенаПроизводителя;
			
			Если ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения <= КоличествоОстатка Тогда
				
				СтрокаМониторинга.СредстваНаЗакупку = ДанныеОЗакупке.СредстваНаЗакупку;
				СтрокаМониторинга.Количество =  ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения / Коэффициент;
				КоличествоОстатка = КоличествоОстатка - ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения;
				ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения = 0;
				
			Иначе
				
				СтрокаМониторинга.СредстваНаЗакупку =
					ДанныеОЗакупке.СредстваНаЗакупку * КоличествоОстатка
						/ ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения;
				
				СтрокаМониторинга.Количество =  КоличествоОстатка / Коэффициент;
				
				КоличествоОстатка = 0;
				ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения = 
					ДанныеОЗакупке.КоличествоВБазовыхЕдиницахИзмерения - КоличествоОстатка;
				ДанныеОЗакупке.СредстваНаЗакупку = ДанныеОЗакупке.СредстваНаЗакупку - СтрокаМониторинга.СредстваНаЗакупку;
				
			КонецЕсли;
			
			СтрокаМониторинга.ЦенаЗакупки = Окр(СтрокаМониторинга.СредстваНаЗакупку
				/ ?(СтрокаМониторинга.Количество = 0, 1, СтрокаМониторинга.Количество), 2);
			
		КонецЦикла;
		
		Если КоличествоОстатка Тогда
			
			СтрокаМониторинга = ДанныеМониторингаЦен.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМониторинга, ВыборкаОстатки);
			СтрокаМониторинга.Количество = КоличествоОстатка / Коэффициент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Группировки = Новый Структура;
	Группировки.Вставить("УникальныйКодРосздравнадзора");
	Группировки.Вставить("Номенклатура");
	Группировки.Вставить("НоменклатураРосздравнадзора");
	Группировки.Вставить("СерияНоменклатуры");
	Группировки.Вставить("Серия");
	Группировки.Вставить("Поставщик");
	Группировки.Вставить("КодПоставщика");
	Группировки.Вставить("ЦенаПроизводителя");
	Группировки.Вставить("МаксимальнаяЦенаПроизводителя");
	Если Сегмент = 1 Тогда // Амбулаторный
		Группировки.Вставить("ЦенаЗакупки");
		Группировки.Вставить("РозничнаяЦена");
	КонецЕсли;
	
	Суммы = Новый Структура;
	Суммы.Вставить("Количество");
	Если Сегмент = 2 Тогда // Госпитальный
		Суммы.Вставить("СредстваНаЗакупку");
	КонецЕсли;
	
	ДанныеМониторингаЦен.Свернуть(
		ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Группировки),
		ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Суммы));
	
	ПоместитьВоВременноеХранилище(ДанныеМониторингаЦен, АдресРезультата);
	
КонецПроцедуры

Функция ПолучитьОстаткиТоваров(ДатаОкончания, Организация, Контрагент, Отбор)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НоменклатураРосздравнадзора.Номенклатура      КАК Номенклатура,
	|	НоменклатураРосздравнадзора.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(НоменклатураРосздравнадзора.Ссылка)  КАК НоменклатураРосздравнадзора
	|ПОМЕСТИТЬ втНоменклатураРосздравнадзора
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураРосздравнадзора
	|ГДЕ
	|	НЕ НоменклатураРосздравнадзора.ПометкаУдаления
	|	И НоменклатураРосздравнадзора.Владелец = &Контрагент
	|	И (НоменклатураРосздравнадзора.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураРосздравнадзора.Номенклатура,
	|	НоменклатураРосздравнадзора.ЕдиницаИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                  КАК Номенклатура,
	|	СписокНоменклатурыРосздравнадзора.НоменклатураРосздравнадзора  КАК НоменклатураРосздравнадзора,
	|	СписокНоменклатурыРосздравнадзора.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.СерияНоменклатуры             КАК СерияНоменклатуры,
	|	Остатки.Партия                        КАК Партия,
	|	Остатки.Партия.ДокументОприходования  КАК ДокументЗакупки,
	|	Остатки.КоличествоОстаток             КАК КоличествоВБазовыхЕдиницахИзмерения
	|//ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Организация = &Организация
	|			И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ втНоменклатураРосздравнадзора)
	|			{Номенклатура.* КАК Номенклатура, Склад.* КАК Склад, МестоХранения.* КАК МестоХранения}) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			втНоменклатураРосздравнадзора КАК СписокНоменклатурыРосздравнадзора
	|			ПО
	|				Остатки.Номенклатура = СписокНоменклатурыРосздравнадзора.Номенклатура
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|";
	
	Схема = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "Данные";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "Данные";
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(Отбор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КонецДня(ДатаОкончания));
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", Организация);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Контрагент", Контрагент);
	
	Для Каждого ДоступноеПоле Из НастройкиКомпоновки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
	КонецЦикла;
	
	Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ОстаткиТоваров = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ОстаткиТоваров;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаДанныхПоМониторингу

Процедура СформироватьДанныеОперативногоМониторингаЦенДляПередачи(Параметры, АдресРезультата) Экспорт
	
	КодОрганизации          = Параметры.КодОрганизации;
	ПериодСоставленияОтчета = Параметры.ПериодСоставленияОтчета;
	Сегмент                 = Параметры.Сегмент;
	ДанныеМониторинга       = Параметры.ДанныеМониторинга;
	
	АмбулаторныйСегмент = 1;
	ГоспитальныйСегмент = 2;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ФайлВыгрузки = Новый ЗаписьТекста(ИмяФайла, "Windows-1251");
	
	ИменаКолонокФайла = Новый Массив;
	ИменаКолонокФайла.Добавить("DrugID");
	ИменаКолонокФайла.Добавить("Segment");
	ИменаКолонокФайла.Добавить("Year");
	ИменаКолонокФайла.Добавить("Month");
	ИменаКолонокФайла.Добавить("Series");
	ИменаКолонокФайла.Добавить("TotDrugQn");
	ИменаКолонокФайла.Добавить("MnfPrice");
	ИменаКолонокФайла.Добавить("PrcPrice");
	ИменаКолонокФайла.Добавить("RtlPrice");
	ИменаКолонокФайла.Добавить("Funds");
	ИменаКолонокФайла.Добавить("VendorID");
	ИменаКолонокФайла.Добавить("Remark");
	ИменаКолонокФайла.Добавить("SrcOrg");
	
	РазделительКолонок = ";";
	
	СтрокаЗаголовка = СтрСоединить(ИменаКолонокФайла, РазделительКолонок);
	ФайлВыгрузки.ЗаписатьСтроку(СтрокаЗаголовка);
	
	СтруктураСтрокиВыгрузки = Новый Структура(СтрСоединить(ИменаКолонокФайла, ","));
	СтруктураСтрокиВыгрузки.Segment = ПолучитьПредставлениеЧисла(Сегмент);
	СтруктураСтрокиВыгрузки.SrcOrg = ПолучитьПредставлениеЧисла(КодОрганизации);
	
	НомерСтроки = 0;
	Для Каждого СтрокаДанныхМониторинга Из ДанныеМониторинга Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураСтрокиВыгрузки.DrugID     = ПолучитьПредставлениеЧисла(СтрокаДанныхМониторинга.УникальныйКодРосздравнадзора);
		СтруктураСтрокиВыгрузки.Year       = ПолучитьПредставлениеГодаИзДаты(ПериодСоставленияОтчета);
		СтруктураСтрокиВыгрузки.Month      = ПолучитьПредставлениеМесяцаИзДаты(ПериодСоставленияОтчета);
		СтруктураСтрокиВыгрузки.Series     = ПолучитьПредставлениеСтроки(СтрокаДанныхМониторинга.Серия, """-""");
		СтруктураСтрокиВыгрузки.TotDrugQn  = ПолучитьПредставлениеЧисла(СтрокаДанныхМониторинга.Количество, 2);
		СтруктураСтрокиВыгрузки.Funds      = ПолучитьПредставлениеЧисла(?(Сегмент = АмбулаторныйСегмент, 0, СтрокаДанныхМониторинга.СредстваНаЗакупку), 2, Истина);
		СтруктураСтрокиВыгрузки.VendorID   = ПолучитьПредставлениеЧисла(СтрокаДанныхМониторинга.КодПоставщика);
		ЦенаПроизводителя = ?(СтрокаДанныхМониторинга.ЦенаПроизводителя = 0, СтрокаДанныхМониторинга.МаксимальнаяЦенаПроизводителя, СтрокаДанныхМониторинга.ЦенаПроизводителя);
		СтруктураСтрокиВыгрузки.MnfPrice   = ПолучитьПредставлениеЧисла(ЦенаПроизводителя, 2, Истина);
		СтруктураСтрокиВыгрузки.PrcPrice   = ПолучитьПредставлениеЧисла(?(Сегмент = ГоспитальныйСегмент, 0, СтрокаДанныхМониторинга.ЦенаЗакупки), 2, Истина);
		СтруктураСтрокиВыгрузки.RtlPrice   = ПолучитьПредставлениеЧисла(?(Сегмент = ГоспитальныйСегмент, 0, СтрокаДанныхМониторинга.РозничнаяЦена), 2, Истина);
		СтруктураСтрокиВыгрузки.Remark     = "";
		
		
		ЗначенияСтрокиВыгрузки = Новый Массив();
		Для ИндексКолонки = 0 По ИменаКолонокФайла.Количество() - 1 Цикл
			
			ИмяКолонки = ИменаКолонокФайла[ИндексКолонки];
			ЗначенияСтрокиВыгрузки.Добавить(СтруктураСтрокиВыгрузки[ИмяКолонки]);
			
		КонецЦикла;
		
		СтрокаВыгрузки = СтрСоединить(ЗначенияСтрокиВыгрузки, РазделительКолонок);
		ФайлВыгрузки.ЗаписатьСтроку(СтрокаВыгрузки);
		
	КонецЦикла;
	
	ФайлВыгрузки.Закрыть();
	
	Данные = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
	
КонецПроцедуры

Функция ПолучитьДанныеМониторингаЦен()
	
	// Поля формируемой таблицы
	//	УникальныйКодРосздравнадзора - DrugID
	//	КодПроизводителя	- 
	//	СерииНоменклатуры	- серии поступившей номенклатуры через запятую
	//	Количество			- количество упаковок товара
	//	СредстваНаЗакупку	- сумма по накладной (Госпитальный сегмент)
	//	КодПоставщика		- 
	//	ЦенаПроизводителя	- цена производителя, если есть, иначе 0.00
	//	ЦенаЗакупки			- сумма по накладной / количество по накладной (Амбулаторный сегмент)
	//	РозничнаяЦена		- розничная цена (Амбулаторный сегмент)
	
	Число10 = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	Число15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	Строки = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ТаблицаМониторингаЦен = Новый ТаблицаЗначений;
	ТаблицаМониторингаЦен.Колонки.Добавить("УникальныйКодРосздравнадзора", Число10);
	ТаблицаМониторингаЦен.Колонки.Добавить("Серия"             , Строки);
	ТаблицаМониторингаЦен.Колонки.Добавить("Количество"        , Число15_2);
	ТаблицаМониторингаЦен.Колонки.Добавить("СредстваНаЗакупку" , Число15_2);
	ТаблицаМониторингаЦен.Колонки.Добавить("КодПоставщика"     , Число10);
	ТаблицаМониторингаЦен.Колонки.Добавить("ЦенаПроизводителя" , Число15_2);
	ТаблицаМониторингаЦен.Колонки.Добавить("ЦенаЗакупки"       , Число15_2);
	ТаблицаМониторингаЦен.Колонки.Добавить("РозничнаяЦена"     , Число15_2);
	
	ТаблицаМониторингаЦен.Колонки.Добавить("Номенклатура"                 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМониторингаЦен.Колонки.Добавить("НоменклатураРосздравнадзора"  , Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	ТаблицаМониторингаЦен.Колонки.Добавить("СерияНоменклатуры"            , Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМониторингаЦен.Колонки.Добавить("Поставщик"                    , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаМониторингаЦен.Колонки.Добавить("МаксимальнаяЦенаПроизводителя", Число15_2);
	
	Возврат ТаблицаМониторингаЦен;
	
КонецФункции

// Получает строковое представление года из даты в формате yyyy
//
Функция ПолучитьПредставлениеГодаИзДаты(Дата)
	Возврат Формат(Дата, "ДФ=yyyy");
КонецФункции

// Получает представление месяца из даты в виде: 01, 02, ..., 12
//
Функция ПолучитьПредставлениеМесяцаИзДаты(Дата)
	Возврат ПолучитьПредставлениеЧисла(Число(Формат(Дата, "ДФ=MM")));
КонецФункции

// Получает представление в виде строки для файла.
// Если "Значение" заполнено, то спереди и сзади "Значения" добавляются двойные кавычки
//
Функция ПолучитьПредставлениеСтроки(Значение, ПустаяСтрока = "")
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Результат = """" + Строка(Значение) + """";
	Иначе
		Результат = ПустаяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует строковое представление числа
//
Функция ПолучитьПредставлениеЧисла(Значение, КоличествоЗнаковПослеЗапятой = 0, ВыводитьНоль = Ложь)
	
	Если ВыводитьНоль Или ЗначениеЗаполнено(Значение) Тогда
		Результат = Формат(Значение, "ЧРД=.; ЧН=; ЧГ=0; ЧДЦ=" + КоличествоЗнаковПослеЗапятой);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ВыгрузкаДанныхПоМониторингу

#Область РазборСтроки

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		
		ПодстрокаДоРазделителя = ПолучитьПодстрокуДоРазделителяСУчетомКавычек(Стр, Разделитель);
		МассивСтрок.Добавить(ПолучитьСтрокуБезКавычек(ПодстрокаДоРазделителя));
		
		Если Стр = ПодстрокаДоРазделителя Тогда
			Возврат МассивСтрок;
		КонецЕсли;
		
		ПозицияРазделителя = СтрДлина(ПодстрокаДоРазделителя) + 1;
		Стр = Сред(Стр, ПозицияРазделителя + ДлинаРазделителя);
		
	КонецЦикла;
	
	МассивСтрок.Добавить(ПолучитьСтрокуБезКавычек(Стр));
		
	Возврат МассивСтрок;
	
КонецФункции

Функция ПолучитьПодстрокуДоРазделителяСУчетомКавычек(Знач Стр, Разделитель)
	
	ПозицияРазделителя = Найти(Стр, Разделитель);
	Если ПозицияРазделителя = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПозицияОткрывающейКавычки = Найти(Стр, """");
	Если ПозицияОткрывающейКавычки = 0 Или ПозицияОткрывающейКавычки > ПозицияРазделителя Тогда
		
		ПодстрокаДоРазделителя = Лев(Стр, ПозицияРазделителя - 1);
		
	Иначе
		
		ПодстрокаДоРазделителя = Лев(Стр, ПозицияОткрывающейКавычки);
		Стр = Сред(Стр, ПозицияОткрывающейКавычки + 1);
		
		ПозицияЗакрывающейКавычки = Найти(Стр, """");
		
		ПодстрокаДоРазделителя = ПодстрокаДоРазделителя + Лев(Стр, ПозицияЗакрывающейКавычки);
		Стр = Сред(Стр, ПозицияЗакрывающейКавычки + 1);
		
		ПодстрокаДоРазделителя = ПодстрокаДоРазделителя + ПолучитьПодстрокуДоРазделителяСУчетомКавычек(Стр, Разделитель);
		
	КонецЕсли;
		
	Возврат ПодстрокаДоРазделителя;
	
КонецФункции 

Функция ПолучитьСтрокуБезКавычек(Стр)
	
	Результат = СокрЛП(Стр);
	
	Если Не ПустаяСтрока(Результат) Тогда
		
		Если Лев(Результат, 1) = """" И Прав(Результат, 1) = """" Тогда
			Результат = Сред(Результат, 2, СтрДлина(Результат) - 2);
			Результат = СокрЛП(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;		
	
КонецФункции

Функция ПроверитьСтрокуСРазделителямиНаЗаполненность(Знач ПроверяемоеЗначение, Разделитель)
	
	ПроверяемоеЗначение = СтрЗаменить(ПроверяемоеЗначение, Разделитель, "");
	
	Возврат Не ПустаяСтрока(ПроверяемоеЗначение);
	
КонецФункции

#КонецОбласти // РазборСтроки

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли