#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Перечисления

// Варианты договора.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * НетПриложений  - Строка - Нет дополнительных приложений
//   * ЕстьПриложения - Строка - Есть дополнительные приложения (если в имени файла значение N4 больше нуля)
//
Функция ПризнакиНаличияДопФайлов() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("НетПриложений", "0");
	Данные.Вставить("ЕстьПриложения", "1");

	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Варианты функции документа.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Дог     - Строка - договор, выражающий согласованную волю стороны 1 и стороны 2 на установление гражданских прав
//   	и обязанностей, а также предложение в виде оферты (договор, контракт, соглашение и тому подобное)
//   * Прораз  - Строка - протокол разногласий, позволяющий выразить возражения и согласовать условия договора, по
//   	которым у сторон есть разногласия (пункт 1 ст. 445 ГК РФ)
//   * Допсогл - Строка - дополнительное соглашение к договору, представляющее собой согласованную волю стороны 1
//   	и стороны 2 на изменений или прекращение ранее установленных гражданских прав и обязанностей 
//
Функция ФункцииДокумента() Экспорт
	
	Данные = Новый Структура;
	// BSLLS:Typo-off
	Данные.Вставить("Дог", "ДОГ");
	Данные.Вставить("Прораз", "ПРОРАЗ");
	Данные.Вставить("Допсогл", "ДОПСОГЛ");
	// BSLLS:Typo-on
	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Варианты договора.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Оферта   - Строка - договорный документ формируется в виде оферты: информация о соглашении является предложением,
//   	которое достаточно определенно выражает намерение лица, сделавшего предложение, считать себя заключившим
//   	договор с адресатом, которым будет принято предложение (ст. 435 ГК РФ)
//   * НеОферта - Строка - договорный документ формируется путем подписания информации о содержании сделки электронной
//   	подписью уполномоченного лица стороны 1 и электронной подписью уполномоченного лица стороны 2
//
Функция ПризнакиПорядкаФормирования() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Оферта", "0");
	Данные.Вставить("НеОферта", "1");

	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Варианты предмета договорного документа.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ПокупкаПродажаТоваров - Строка - Покупка-продажа товаров, продукции
//   * ВыполнениеРабот       - Строка
//   * ОказаниеУслуг         - Строка
//   * Иное                  - Строка
//
Функция ПризнакиПредметаДоговорногоДокумента() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("ПокупкаПродажаТоваров", "1");
	Данные.Вставить("ВыполнениеРабот", "2");
	Данные.Вставить("ОказаниеУслуг", "3");
	Данные.Вставить("Иное", "4");

	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Виды сделок предмета договорного документа.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Мена                                          - Строка
//   * Дарение                                       - Строка
//   * Аренда                                        - Строка
//   * Заем                                          - Строка
//   * Кредит                                        - Строка
//   * ВнешнеторговаяСделка                          - Строка
//   * ДоговорыКомиссии                              - Строка - Договоры комиссии (агентские, поручение)
//   * УступкаПраваТребования                        - Строка - Уступка права требования (цессия)
//   * ОперацииСЦеннымиБумагами                      - Строка - Операции с ценными бумагами, долями участия
//   * ОперацииСПроизводнымиФинансовымиИнструментами - Строка - Операции с производными финансовыми инструментами
//   * Реорганизация                                 - Строка
//   * Строительство                                 - Строка
//   * СделкиОС                                      - Строка - Сделки с основными средствами
//   * ПоручительствоГарантийЗалог                   - Строка - Предоставление поручительств, гарантий, залога
//   * ВыплатаДивидендов                             - Строка
//   * Лизинг                                        - Строка
//   * Перевозка                                     - Строка - Перевозка, транспортное экспедирование
//   * ДоверительноеУправление                       - Строка
//   * СделкиСОбъектамиИнтеллектуальнойСобственности - Строка
//   * ДоговорыТоварищества                          - Строка
//   * Прочее                                        - Строка
//
Функция ВидыСделок() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Мена", "02");
	Данные.Вставить("Дарение", "03");
	Данные.Вставить("Аренда", "04");
	Данные.Вставить("Заем", "07");
	Данные.Вставить("Кредит", "08");
	Данные.Вставить("ВнешнеторговаяСделка", "09");
	Данные.Вставить("ДоговорыКомиссии", "10");
	Данные.Вставить("УступкаПраваТребования", "11");
	Данные.Вставить("ОперацииСЦеннымиБумагами", "12");
	Данные.Вставить("ОперацииСПроизводнымиФинансовымиИнструментами", "13");
	Данные.Вставить("Реорганизация", "14");
	Данные.Вставить("Строительство", "15");
	Данные.Вставить("СделкиОС", "16");
	Данные.Вставить("ПоручительствоГарантийЗалог", "17");
	Данные.Вставить("ВыплатаДивидендов", "18");
	Данные.Вставить("Лизинг", "19");
	Данные.Вставить("Перевозка", "20");
	Данные.Вставить("ДоверительноеУправление", "21");
	Данные.Вставить("СделкиСОбъектамиИнтеллектуальнойСобственности", "22");
	Данные.Вставить("ДоговорыТоварищества", "23");
	Данные.Вставить("Прочее", "24");
		
	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Статусы подписанта.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ПолномочияБезДоверенности                    - Строка
//   * ПолномочияНаОснованииЭлектроннойДоверенности - Строка
//   * ПолномочияНаОснованииБумажнойДоверенности    - Строка
//
Функция СтатусыПодписанта() Экспорт
	
	Типы = Новый Структура;
	Типы.Вставить("ПолномочияБезДоверенности", "1");
	Типы.Вставить("ПолномочияНаОснованииЭлектроннойДоверенности", "2");
	Типы.Вставить("ПолномочияНаОснованииБумажнойДоверенности", "3");
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

// Типы подписи.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * УсиленнаяКвалифицированная   - Строка
//   * Простая                      - Строка
//   * УсиленнаяНеквалифицированная - Строка
//
Функция ТипыПодписи() Экспорт
	
	Типы = Новый Структура;	
	Типы.Вставить("УсиленнаяКвалифицированная", "1");
	Типы.Вставить("Простая", "2");
	Типы.Вставить("УсиленнаяНеквалифицированная", "3");
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

// Варианты пролонгации договора.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ПрисутствуетУсловиеПролонгации - Строка
//   * ОтсутствуетУсловиеПролонгации  - Строка
//
Функция ПризнакиНаличияПролонгации() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ПрисутствуетУсловиеПролонгации", "0");
	Данные.Вставить("ОтсутствуетУсловиеПролонгации", "1");

	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Виды элементов для поля МуниципальныйРайон адреса ФИАС 
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * МуниципальныйРайон        - Строка
//   * ГородскойОкруг            - Строка
//   * ВнутригородскаяТерритория - Строка - Внутригородская территория города федерального значения
//   * МуниципальныйОкруг        - Строка
//
Функция ВидыЭлементовМуниципальногоРайонаФИАС() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("МуниципальныйРайон", "1");
	Данные.Вставить("ГородскойОкруг", "2");
	Данные.Вставить("ВнутригородскаяТерритория", "3");
	Данные.Вставить("МуниципальныйОкруг", "4");
	
	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Виды элементов для поля ГородскоеПоселение адреса ФИАС 
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ГородскоеПоселение    - Строка
//   * СельскоеПоселение     - Строка
//   * МежселеннаяТерритория - Строка - Межселенная территория в составе муниципального района
//   * ВнутригородскойРайон  - Строка - Внутригородской район городского округа
//
Функция ВидыЭлементовГородскихПоселенийФИАС() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("ГородскоеПоселение", "1");
	Данные.Вставить("СельскоеПоселение", "2");
	Данные.Вставить("МежселеннаяТерритория", "3");
	Данные.Вставить("ВнутригородскойРайон", "4");
	
	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ИностранноеЛицо - Тип
//   * Организация     - Тип
//   * Предприниматель - Тип
//   * ФизическоеЛицо  - Тип
//
Функция ТипыСторонДоговора() Экспорт
	
	Типы = Новый Структура;
	
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматДоговорнойДокумент101.%1";
	ИностранноеЛицо = СтрШаблон(Шаблон, "ИдентификационныеСведенияИностранногоЛица");
	Типы.Вставить("ИностранноеЛицо", Тип(ИностранноеЛицо));
	Организация = СтрШаблон(Шаблон, "ИдентификационныеСведенияОрганизации");
	Типы.Вставить("Организация", Тип(Организация));
	Предприниматель = СтрШаблон(Шаблон, "ИдентификационныеСведенияИП");
	Типы.Вставить("Предприниматель", Тип(Предприниматель));
	ФизическоеЛицо = СтрШаблон(Шаблон, "ИдентификационныеСведенияФизЛица");
	Типы.Вставить("ФизическоеЛицо", Тип(ФизическоеЛицо));
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * КЛАДР         - Тип
//   * ЗаПределамиРФ - Тип
//   * ФИАС          - Тип
//
Функция ТипыАдресов() Экспорт
	
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматДоговорнойДокумент101.%1";
	АдресКЛАДР = СтрШаблон(Шаблон, "АдресКЛАДР");
	Типы.Вставить("КЛАДР", Тип(АдресКЛАДР));
	АдресЗаПределамиРФ = СтрШаблон(Шаблон, "АдресЗаПределамиРФ");
	Типы.Вставить("ЗаПределамиРФ", Тип(АдресЗаПределамиРФ));
	АдресФИАС = СтрШаблон(Шаблон, "АдресФИАС");
	Типы.Вставить("ФИАС", Тип(АдресФИАС));
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Служебное имя формата.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяФормата() Экспорт
	Возврат ПространствоИмен();
КонецФункции

// Параметры:
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФайлФормата(ИмяФайла) Экспорт
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	
	ИмяСоответствуетФормату = СтрНачинаетсяС(СтруктураИмениФайла.Имя, ПрефиксФормата());
	
	Если ИмяСоответствуетФормату Тогда
		Если ЗначениеЗаполнено(СтруктураИмениФайла.Расширение) Тогда
			
			РасширениеФайла = НРег(СтруктураИмениФайла.Расширение);
			Если РасширениеФайла = ".pdf" Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция КНД() Экспорт
	
	Возврат "1110331";
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ПрефиксФормата() Экспорт
	
	Возврат "ON_DOGDOC";
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Параметры   - см. ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  см. ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета
//
Функция ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры) Экспорт
	
	КонструкторЭД = Создать();
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоДоговорномуДокументу101(ОбъектУчета, КонструкторЭД, Отказ);
	Если Отказ Тогда
		Возврат ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;

	Результат = ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = КонструкторЭД;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

// Сформировать документ.
// 
// Параметры:
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
// 
// Возвращаемое значение:
//  см. ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента
//
Функция СформироватьДокумент(КонструкторЭД) Экспорт
	
	Документ = ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента();
	Файл = КонструкторЭД.ПолучитьXDTOОбъект(КонструкторЭД.ТипыОбъектов().Файл);
	
	ЗаполнитьФайлИнформации(Файл, КонструкторЭД, Документ.Ошибки);
	
	Если Не ЗначениеЗаполнено(Документ.Ошибки) Тогда
		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Файл, Ложь, , "Файл");
		Документ.ДанныеОсновногоФайла.ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные,
			КонструкторЭД.ПространствоИмен());
		Расширение = "xml";
		Документ.ДанныеОсновногоФайла.ИмяФайла = СтрШаблон("%1.%2", КонструкторЭД.ИдентификаторФайла(), Расширение);
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

// Заменяет файл электронного документа на файл договора в формате PDF.
// Файла электронного документа прикрепляется во вложения файла договора.
//
// Параметры:
//  ДвоичныеДанныеФайлаПДФ - ДвоичныеДанные
//  ДанныеФайла            - Структура - Файл в формате XML:
//   * ИмяФайла       - Строка
//   * ДвоичныеДанные - ДвоичныеДанные
//
Процедура ПоместитьФайлЭДВФайлПДФ(ДвоичныеДанныеФайлаПДФ, ДанныеФайла) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		КоллекцияВложенийПДФ = Новый КоллекцияВложенийPDF; 
		КоллекцияВложенийПДФ.Добавить(ДанныеФайла.ИмяФайла, ДанныеФайла.ДвоичныеДанные, , ТипСвязиВложенияPDF.Данные);

		ИзмененныеДвоичныеДанные = ЗаписатьКоллекциюВложенийВПДФ(ДвоичныеДанныеФайлаПДФ, КоллекцияВложенийПДФ);
		
		ДанныеФайла.ИмяФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, ".xml", ".pdf");
		ДанныеФайла.ДвоичныеДанные = ИзмененныеДвоичныеДанные;
	
	#КонецЕсли
	
КонецПроцедуры

// Обновляет файл вложения электронного документа.
//
// Параметры:
//  ПрисоединенныйФайлДляОбновления - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - Файл PDF.
//  Данные                          - ДвоичныеДанные
//
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - содержание файла.
//
Функция ОбновитьВложениеВФайлеПДФ(ПрисоединенныйФайлДляОбновления, Данные) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		ДвоичныеДанныеФайлаПДФ = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайлДляОбновления);
		
		ИмяВложения = СтрЗаменить(ПрисоединенныйФайлДляОбновления.ПолноеИмяФайла, ".pdf", ".xml");
		КоллекцияВложенийПДФ = Новый КоллекцияВложенийPDF; 
		КоллекцияВложенийПДФ.Добавить(ИмяВложения, Данные, , ТипСвязиВложенияPDF.Данные);
		
		ДвоичныеДанные = ЗаписатьКоллекциюВложенийВПДФ(ДвоичныеДанныеФайлаПДФ, КоллекцияВложенийПДФ);
		
		Возврат ДвоичныеДанные;
		
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO:
//   * Документ - ОбъектXDTO:
//    ** ПодписантСт - СписокXDTO
//  ДанныеПодписанта - см. ФорматыЭДО.НовыеДанныеПодписанта
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДанныеПодписанта(ДанныеФайлаЭД, ДанныеПодписанта, Ошибки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеПодписанта.Организация) Или Не ЗначениеЗаполнено(
		ДанныеПодписанта.СертификатПодписи) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить подписанта. Не заполнены организация или сертификат подписи'");
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КонструкторЭД = Создать();
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Подписант = КонструкторЭД.НовыеСведенияОПодписанте();
	Статусы = СтатусыПодписанта();
	
	Если ЭлектронныеДокументыЭДО.ТребуетсяМашиночитаемаяДоверенность(ДанныеПодписанта.Организация,
		ДанныеПодписанта.СертификатПодписи) Тогда
		Подписант.СтатусПодписанта = Статусы.ПолномочияНаОснованииЭлектроннойДоверенности;
	Иначе
		Подписант.СтатусПодписанта = Статусы.ПолномочияБезДоверенности;
	КонецЕсли;
	
	Подписант.ТипПодписи = ТипыПодписи().УсиленнаяКвалифицированная;
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПодписанта.СертификатПодписи,
		"Должность, Фамилия, Имя, Отчество");
	Подписант.Должность = РеквизитыСертификата.Должность;
	Подписант.ФИО = КонструкторЭД.НовыеФИО();
	ЗаполнитьЗначенияСвойств(Подписант.ФИО, РеквизитыСертификата);
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.Доверенность) Тогда
		РеквизитыДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПодписанта.Доверенность,
			"НомерДоверенности, СведенияОбИнформационнойСистеме, ДатаВыдачи, ДатаСоздания");
		Подписант.СведенияОбЭлектроннойДоверенности = КонструкторЭД.НовыеСведенияОбЭлектроннойДоверенности();
		Подписант.СведенияОбЭлектроннойДоверенности.Номер = РеквизитыДоверенности.НомерДоверенности;
		Подписант.СведенияОбЭлектроннойДоверенности.СведенияОбИСПроверки =
			РеквизитыДоверенности.СведенияОбИнформационнойСистеме;
		Подписант.СведенияОбЭлектроннойДоверенности.Дата = РеквизитыДоверенности.ДатаВыдачи;
		Подписант.СведенияОбЭлектроннойДоверенности.ДатаВнутренняя = РеквизитыДоверенности.ДатаСоздания;
	КонецЕсли;
	
	ЭлементПодписант = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантСт);
	ЗаполнитьПодписанта(ЭлементПодписант, Подписант, КонструкторЭД, Ошибки);
	ДанныеФайлаЭД.Документ.СвСодСдел.СтороныДок.СторКонтр1.ПодписантСт.Очистить();
	ДанныеФайлаЭД.Документ.СвСодСдел.СтороныДок.СторКонтр1.ПодписантСт.Добавить(ЭлементПодписант);
	
КонецПроцедуры

// Возвращает содержание документа XML из присоединенных файлов PDF.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - содержание файла.
//
Функция ДанныеДокументаИзФайлаОбмена(ОписаниеФайла) Экспорт

	#Если Не ВнешнееСоединение Тогда
	
		Если НЕ ЭтоФайлФормата(ОписаниеФайла.ИмяФайла) Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
		ЧтениеПДФ = Новый ЧтениеPDF;
		ЧтениеПДФ.Открыть(Поток);
		СписокВложений = ЧтениеПДФ.ПолучитьВложения();
		
		Для Каждого Вложение Из СписокВложений Цикл
			
			Если НРег(Прав(Вложение.ИмяФайла, 4)) = ".xml" Тогда
				ЧтениеПДФ.Закрыть();
				Возврат Вложение.Содержимое;
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеПДФ.Закрыть();
	
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  НовыйЭД       - СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  ОшибкаРазбора - Булево
//
Процедура ПрочитатьФайлОбмена(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора) Экспорт
	
	КонструкторЭД = Создать();
	ПрочитатьФайлИнформации(ДанныеФайлаЭД, КонструкторЭД);
	
	НовыйЭД.ВерсияФормата = КонструкторЭД.ПространствоИмен();
	НовыйЭД.ЗначениеРеквизита = КонструкторЭД;
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент;
	
КонецПроцедуры

// Параметры:
//  РазделыДополнительныхПолей - см. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
//
Процедура ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей) Экспорт
	
КонецПроцедуры

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO:
// 
// Возвращаемое значение:
//  Неопределено
// 
Функция ИнформацияОТоваре(ДанныеФайлаЭД) Экспорт

	Возврат Неопределено;
	
КонецФункции

// При определении соответствия титулов.
// 
// Параметры:
//  СоответствиеОсновногоТитулаОтветному - Соответствие Из КлючИЗначение:
//  * Ключ - Строка - пространство имен основного титула
//  * Значение - Строка - пространство имен ответного титула
//
Процедура ЗаполнитьСоответствиеТитулов(СоответствиеОсновногоТитулаОтветному) Экспорт

КонецПроцедуры

// Возвращаемое значение:
//  Булево
//
Функция ЗаполнениеДанныхПодписантаДоступно() Экспорт
	Возврат Истина;
КонецФункции

// Поддерживаемые типы документов.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыДокументовЭДО
//
Функция ПоддерживаемыеТипыДокументов() Экспорт
	ПоддерживаемыеТипы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);
	Возврат ПоддерживаемыеТипы;
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен() Экспорт
	Возврат "ON_DOGDOC_1_999_01_01_01_01";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Перечисления

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Документ_ИнфПол - Строка
//   * Предмет_ИнфПол  - Строка
//
Функция РазделыДополнительныхПолей() Экспорт
	Разделы = Новый Структура;
	// BSLLS:Typo-off
	Разделы.Вставить("Документ_ИнфПол", "ИнфПол");
	Разделы.Вставить("Предмет_ИнфПол", "ИнфПол");
	// BSLLS:Typo-on
	Возврат Новый ФиксированнаяСтруктура(Разделы);
КонецФункции

#КонецОбласти

#Область ФормированиеЭлектронногоДокумента

// BSLLS:Typo-off

// Заполнение объекта Из таблицы 8.1 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьФайлИнформации(Объект, КонструкторЭД, Ошибки)
	
	Идентификатор = КонструкторЭД.ИдентификаторФайла();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдФайл", Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПризнПрил", ПризнакиНаличияДопФайлов().НетПриложений, Истина, Ошибки);
	ДополнительныеДанные = КонструкторЭД.ПолучитьДополнительныеДанныеДляФормирования();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсПрог", ДополнительныеДанные.ВерсияПрограммы, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсФорм", "1.01", Истина, Ошибки);
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	Документ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Документ);
	ЗаполнитьДокументИнформации(Документ, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Документ", Документ, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.2 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДокументИнформации(Объект, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КНД", КНД(), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Функция", ИнформацияДокумента.ФункцияДокумента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПорФормДок", ИнформацияДокумента.ПризнакПорядкаФормирования,
		Истина, Ошибки);
	
	СведенияОСодержанииСделки = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвСодСдел);
	ЗаполнитьСведенияОСодержанииСделки(СведенияОСодержанииСделки, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвСодСдел", СведенияОСодержанииСделки, Истина, Ошибки);

	Если ЗначениеЗаполнено(ИнформацияДокумента.ДополнительнаяИнформация) Тогда
		ИнформационноеПоле = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьДополнительнуюИнформацию(ИнформационноеПоле, ИнформацияДокумента.ДополнительнаяИнформация,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфПол", ИнформационноеПоле, Ложь, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.3 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * ОКИН - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОСодержанииСделки(Объект, КонструкторЭД, Ошибки)

	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.КодЯзыкаДокумента) Тогда
		Для Каждого ЭлементКодаЯзыка Из ИнформацияДокумента.КодЯзыкаДокумента Цикл
			
			Объект.ОКИН.Добавить(ЭлементКодаЯзыка);

		КонецЦикла;
	КонецЕсли;
	
	РеквизитыДоговорногоДокумента = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.РекДок);
	ЗаполнитьРеквизитыДоговорногоДокумента(РеквизитыДоговорногоДокумента, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РекДок", РеквизитыДоговорногоДокумента, Истина, Ошибки);
	
	СтороныДоговора = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СтороныДок);
	ЗаполнитьСтороныДоговора(СтороныДоговора, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтороныДок", СтороныДоговора, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.СведенияОбОбщейСтоимости) Тогда
		СведенияОСтоимости = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвОбщСтДок);
		ЗаполнитьСведенияОбОбщейСтоимости(СведенияОСтоимости, ИнформацияДокумента.СведенияОбОбщейСтоимости,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвОбщСтДок", СведенияОСтоимости, Ложь, Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.УсловияПоставки) Тогда
		УсловияПоставки = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.УслПост);
		ЗаполнитьУсловияПоставки(УсловияПоставки, ИнформацияДокумента.УсловияПоставки, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УслПост", УсловияПоставки, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.ПорядокРасчета) Тогда
		ПорядокРасчета = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПорРасч);
		ЗаполнитьПорядокРасчета(ПорядокРасчета, ИнформацияДокумента.ПорядокРасчета, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПорРасч", ПорядокРасчета, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.СрокДействия) Тогда
		СрокДействия = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СрокДок);
		ЗаполнитьСрокДействия(СрокДействия, ИнформацияДокумента.СрокДействия, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СрокДок", СрокДействия, Ложь, Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.СведенияОбИномДоговорномДокументе) Тогда
		СведенияОбИномДоговорномДокументе = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвязДок);
		ЗаполнитьСведенияОбИномДоговорномДокументе(СведенияОбИномДоговорномДокументе,
			ИнформацияДокумента.СведенияОбИномДоговорномДокументе, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвязДок", СведенияОбИномДоговорномДокументе, Ложь, Ошибки);
	КонецЕсли;

КонецПроцедуры

// Заполнение объекта Из таблицы 8.4 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * ДопСвДок - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьРеквизитыДоговорногоДокумента(Объект, КонструкторЭД, Ошибки)

	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	Если СокрЛП(ИнформацияДокумента.НомерДоговора) = "" Тогда
		НомерДок = "без номера (б/н)";
	Иначе
		НомерДок = ИнформацияДокумента.НомерДоговора;
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерДок", НомерДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "МестоДок", ИнформацияДокумента.МестоЗаключенияДоговора, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТипДок", ИнформацияДокумента.ТипДоговора, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.ДатаДоговора) Тогда
		ДатаДоговора = ПредставлениеДаты(ИнформацияДокумента.ДатаДоговора);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаДок", ДатаДоговора, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БезДаты", "без даты", Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.ДополнительныеСведения) Тогда
		Для Каждого СтрокаДопСв Из ИнформацияДокумента.ДополнительныеСведения Цикл

			Объект.ДопСвДок.Добавить(СтрокаДопСв);

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Заполнение объекта Из таблицы 8.5 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСтороныДоговора(Объект, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	ИнформацияОрганизации = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.КонтрТип);
	ЗаполнитьСторонуДоговора(ИнформацияОрганизации, ИнформацияДокумента.Организация, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СторКонтр1", ИнформацияОрганизации, Истина, Ошибки);

	Если ЗначениеЗаполнено(ИнформацияДокумента.Контрагент) Тогда
		ИнформацияКонтрагента = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.КонтрТип);
		ЗаполнитьСторонуДоговора(ИнформацияКонтрагента, ИнформацияДокумента.Контрагент, КонструкторЭД, Ошибки, Истина);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СторКонтр2", ИнформацияКонтрагента, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.6 формата.
// 
// Параметры:
//  Объект                   - ОбъектXDTO:
//   * ПредметДок - СписокXDTO
//  СведенияОбОбщейСтоимости - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОбОбщейСтоимости
//  КонструкторЭД            - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки                   - Неопределено
//                           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбОбщейСтоимости(Объект, СведенияОбОбщейСтоимости, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОбщСтУчНДС", СведенияОбОбщейСтоимости.СуммаСНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОбщСтБезНДС", СведенияОбОбщейСтоимости.СуммаБезНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНалДок", СведенияОбОбщейСтоимости.СуммаНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодОКВ", СведенияОбОбщейСтоимости.КодВалюты, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено (СведенияОбОбщейСтоимости.Предмет) Тогда
		Для Каждого ЭлементПредмета Из СведенияОбОбщейСтоимости.Предмет Цикл
			
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПредметДок);
			ЗаполнитьЭлементПредмета(НоваяЗапись, ЭлементПредмета, КонструкторЭД, Ошибки);
			Объект.ПредметДок.Добавить(НоваяЗапись);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.7 формата.
// 
// Параметры:
//  Объект          - ОбъектXDTO
//  ЭлементПредмета - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйПредмет
//  КонструкторЭД   - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки          - Неопределено
//                  - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьЭлементПредмета(Объект, ЭлементПредмета, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомСтр", ЭлементПредмета.НомерСтрокиТаблицы, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПрПред", ЭлементПредмета.ПризнакПредмета, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодКат", ЭлементПредмета.КодКаталога, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТНВЭД", ЭлементПредмета.КодТНВЭД, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКПД2", ЭлементПредмета.КодОКПД2, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКВЭД2", ЭлементПредмета.КодОКВЭД2, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидСдел", ЭлементПредмета.ВидСделки, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимТов", ЭлементПредмета.НаименованиеТовара, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КолТов", ЭлементПредмета.Количество, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКЕИ_Тов", ЭлементПредмета.КодЕдиницыИзмерения, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЦенаТов", ЭлементПредмета.Цена, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовБезНДС", ЭлементПредмета.СуммаБезНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НалСт", ЭлементПредмета.СтавкаНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтТовУчНал", ЭлементПредмета.СуммаСНДС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодОКВ", ЭлементПредмета.КодВалюты, Ложь, Ошибки);
	
	СуммаНалога = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумНДСТип);
	ЗаполнитьСуммуНалога(СуммаНалога, ЭлементПредмета.СуммаНалога, ЭлементПредмета.БезНДС, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНал", СуммаНалога, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено(ЭлементПредмета.СуммаАкциза) ИЛИ ЭлементПредмета.БезАкциза Тогда
		СуммаАкциза = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СумАкцизТип);
		ЗаполнитьСуммуАкциза(СуммаАкциза, ЭлементПредмета.СуммаАкциза, ЭлементПредмета.БезАкциза, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Акциз", СуммаАкциза, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементПредмета.ДополнительнаяИнформация) Тогда
		ИнформационноеПоле = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИнфПолТип);
		ЗаполнитьДополнительнуюИнформацию(ИнформационноеПоле, ЭлементПредмета.ДополнительнаяИнформация, КонструкторЭД,
		Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфПол", ИнформационноеПоле, Ложь, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.8 формата.
// 
// Параметры:
//  Объект          - ОбъектXDTO
//  УсловияПоставки - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеУсловияПоставки
//  Ошибки          - Неопределено
//                  - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьУсловияПоставки(Объект, УсловияПоставки, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "МесПерПрСоб", УсловияПоставки.МестоПереходаПраваСобственности,
		Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Инкотермс", УсловияПоставки.Инкотермс, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", УсловияПоставки.ИныеСведения, Ложь, Ошибки);
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.9 формата.
// 
// Параметры:
//  Объект         - ОбъектXDTO
//  ПорядокРасчета - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйПорядокРасчета
//  Ошибки         - Неопределено
//                 - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьПорядокРасчета(Объект, ПорядокРасчета, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидПлатеж", ПорядокРасчета.ВидПлатежа, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПорядНомер", ПорядокРасчета.КоличествоПлатежей, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Процент", ПорядокРасчета.ПроцентОтОбщейСуммы, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СрокПост", ПорядокРасчета.СрокПоставки, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Пени", ПорядокРасчета.РазмерПени, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодОКВ", ПорядокРасчета.КодВалюты, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СрокОпл", ПорядокРасчета.СрокОплаты, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СобЧастПлат", ПорядокРасчета.СобытиеИсчисленияСрокаПлатежа, Ложь,
		Ошибки);
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.10 формата.
// 
// Параметры:
//  Объект       - ОбъектXDTO
//  СрокДействия - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйСрокДействия
//  Ошибки       - Неопределено
//               - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСрокДействия(Объект, СрокДействия, Ошибки)
	
	ДатаНачалаДействия = ПредставлениеДаты(СрокДействия.ДатаНачалаДействия);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаНачДок", ДатаНачалаДействия, Ложь, Ошибки);
	
	ДатаОкончанияДействия = ПредставлениеДаты(СрокДействия.ДатаОкончанияДействия);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаОконДок", ДатаОкончанияДействия, Ложь, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПризнНалПро", СрокДействия.НаличиеПролонгации, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СрокДействия.ИныеСведения, Ложь, Ошибки);
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.11 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO:
//   * ДопСвязДок - СписокXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОбИномДоговорномДокументе
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбИномДоговорномДокументе(Объект, Сведения, Ошибки)
	
	Если СокрЛП(Сведения.НомерСвязанногоДоговора) = "" Тогда
		НомерСвязДок = "без номера (б/н)";
	Иначе
		НомерСвязДок = Сведения.НомерСвязанногоДоговора;
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомСвязДок", НомерСвязДок, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимСвязДок", Сведения.НаименованиеСвязанногоДоговора, Ложь, Ошибки);

	Если ЗначениеЗаполнено(Сведения.ДатаСвязанногоДоговора) Тогда
		ДатаСвязанногоДоговора = ПредставлениеДаты(Сведения.ДатаСвязанногоДоговора);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаСвязДок", ДатаСвязанногоДоговора, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БезДаты", "без даты", Истина, Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(Сведения.ДополнительныеСведенияСвязанногоДоговора) Тогда
		Для Каждого СтрокаДопСв Из Сведения.ДополнительныеСведенияСвязанногоДоговора Цикл
			
			Объект.ДопСвязДок.Добавить(СтрокаДопСв);

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта Из таблицы 8.12 формата.
// 
// Параметры:
//  Объект                  - ОбъектXDTO
//   * ДопСвСт     - СписокXDTO
//   * ПодписантСт - СписокXDTO
//  СторонаДоговора         - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НоваяСторонаДоговора
//  КонструкторЭД           - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки                  - Неопределено
//                          - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//  ПодписантИзКонструктора - Булево - Заполнять данные о подписанте из данных конструктора ЭД
//
Процедура ЗаполнитьСторонуДоговора(Объект, СторонаДоговора, КонструкторЭД, Ошибки, ПодписантИзКонструктора = Ложь)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОКПО", СторонаДоговора.КодОКПО, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтруктПодр", СторонаДоговора.СтруктурноеПодразделение, Ложь,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнфДляУчаст", СторонаДоговора.ИнформацияДляУчастника, Ложь,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КраткНазв", СторонаДоговора.КраткоеНазвание, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено(СторонаДоговора.ДополнительныеСведения) Тогда
		Для Каждого СтрокаДопСв Из СторонаДоговора.ДополнительныеСведения Цикл
			
			Объект.ДопСвСт.Добавить(СтрокаДопСв);
			
		КонецЦикла;
	КонецЕсли;

	ИдентификационныеСведения = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдСв);
	ЗаполнитьИдентификационныеСведения(ИдентификационныеСведения, СторонаДоговора.ИдентификационныеСведения,
		КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСв", ИдентификационныеСведения, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(СторонаДоговора.Адрес) Тогда
		Адрес = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрДокТип);
		ЗаполнитьАдрес(Адрес, СторонаДоговора.Адрес, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресСт", Адрес, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СторонаДоговора.КонтактныеДанные) Тогда
		КонтактныеДанные = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Контакт);
		ЗаполнитьКонтактныеДанные(КонтактныеДанные, СторонаДоговора.КонтактныеДанные, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Контакт", КонтактныеДанные, Ложь, Ошибки);
	КонецЕсли;
	
	БанковскиеРеквизиты = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.БанкРекв);
	ЗаполнитьБанковскиеРеквизиты(БанковскиеРеквизиты, СторонаДоговора.БанковскиеРеквизиты, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БанкРекв", БанковскиеРеквизиты, Истина, Ошибки);
	
	Если ПодписантИзКонструктора = Ложь Тогда
		Статусы = СтатусыПодписанта();
	
		Подписант = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантСт);
		
		ПустойПодписант = КонструкторЭД.НовыеСведенияОПодписанте();
		ПустойПодписант.ФИО = КонструкторЭД.НовыеФИО("-", "-", "-");
		ПустойПодписант.СтатусПодписанта = Статусы.ПолномочияБезДоверенности;
		
		ЗаполнитьПодписанта(Подписант, ПустойПодписант, КонструкторЭД, Ошибки);
		Объект.ПодписантСт.Добавить(Подписант);
	Иначе
		Если ЗначениеЗаполнено(СторонаДоговора.СведенияОПодписанте) Тогда
			Для Каждого Подписант Из СторонаДоговора.СведенияОПодписанте Цикл
				НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПодписантСт);
				ЗаполнитьПодписанта(НоваяЗапись, Подписант, КонструкторЭД, Ошибки);
				Объект.ПодписантСт.Добавить(НоваяЗапись);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.13 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИП
//                - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияОрганизации
//                - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИностранногоЛица
//                - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияФизЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьИдентификационныеСведения(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	ТипыСторон = ТипыСторонДоговора();
	
	Если ТипЗнч(СведенияОЛице) = ТипыСторон.Предприниматель Тогда
		Предприниматель = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвИП);
		ЗаполнитьСведенияОбИндивидуальномПредпринимателе(Предприниматель, СведенияОЛице, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИП", Предприниматель, Истина, Ошибки);
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.ИностранноеЛицо Тогда
		ИностранноеЛицо = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвИнНеУч);
		ЗаполнитьСведенияОбИностраннойОрганизации(ИностранноеЛицо, СведенияОЛице, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИнНеУч", ИностранноеЛицо, Истина, Ошибки);
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.Организация Тогда
		Организация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвЮЛУч);
		ЗаполнитьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Организация, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвЮЛУч", Организация, Истина, Ошибки);
	Иначе
		ФизЛицо = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвФЛУч);
		ЗаполнитьСведенияОФизическомЛице(ФизЛицо, СведенияОЛице, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвФЛУч", ФизЛицо, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.14 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИП
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбИндивидуальномПредпринимателе(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено(СведенияОЛице.РеквизитыСвидетельстваОГосударственнойРегистрации) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвГосРегИП",
			СведенияОЛице.РеквизитыСвидетельстваОГосударственнойРегистрации, Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОГРНИП", СведенияОЛице.ОГРН, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОЛице.УдостоверениеЛичности) Тогда
		УдостоверениеЛичности = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.УдЛичнФЛТип);
		ЗаполнитьУдостоверениеЛичности(УдостоверениеЛичности, СведенияОЛице.УдостоверениеЛичности, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УдЛичн", УдостоверениеЛичности, Ложь, Ошибки);
	КонецЕсли;
	
	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, СведенияОЛице.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.15 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * КПП - СписокXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияОрганизации
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Объект, СведенияОЛице, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОрг", СведенияОЛице.НаименованиеПолное, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННЮЛ", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ОГРН", СведенияОЛице.ОГРН, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	
	Для Каждого ЭлементКПП Из СведенияОЛице.КПП Цикл
		
		Если ЗначениеЗаполнено(ЭлементКПП) Тогда
			Объект.КПП.Добавить(ЭлементКПП);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заполнение объекта из таблицы 8.16 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИностранногоЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбИностраннойОрганизации(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСтр", СведенияОЛице.КодСтраны, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено(СведенияОЛице.УдостоверениеЛичностиИностранногоЛица) Тогда
		УдостоверениеЛичностиИнЛица = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.УдЛичнИнФЛТип);
		ЗаполнитьУдостоверениеЛичностиИностранногоЛица(УдостоверениеЛичностиИнЛица,
		СведенияОЛице.УдостоверениеЛичностиИностранногоЛица, Ошибки);
	Иначе
		УдостоверениеЛичностиИнЛица = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(УдостоверениеЛичностиИнЛица) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УдЛичнИнФЛ", УдостоверениеЛичностиИнЛица, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОрг", СведенияОЛице.НаименованиеПолное, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", СведенияОЛице.Идентификатор, Ложь, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимОрг", СведенияОЛице.НаименованиеПолное, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", СведенияОЛице.Идентификатор, Истина, Ошибки);
	КонецЕсли;

КонецПроцедуры

// Заполнение объекта из таблицы 8.17 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияФизЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОФизическомЛице(Объект, СведенияОЛице, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();

	Если ЗначениеЗаполнено(СведенияОЛице.УдостоверениеЛичности) Тогда
		УдостоверениеЛичности = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.УдЛичнФЛТип);
		ЗаполнитьУдостоверениеЛичности(УдостоверениеЛичности, СведенияОЛице.УдостоверениеЛичности, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УдЛичн", УдостоверениеЛичности, Истина, Ошибки);
	Иначе
		УдостоверениеЛичности = Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(УдостоверениеЛичности) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УдЛичн", УдостоверениеЛичности, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", СведенияОЛице.ИНН, Ложь, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННФЛ", СведенияОЛице.ИНН, Истина, Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", СведенияОЛице.ИныеСведения, Ложь, Ошибки);
	
	Адрес = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрДокТип);
	ЗаполнитьАдрес(Адрес, СведенияОЛице.Адрес, КонструкторЭД, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресФл", Адрес, Истина, Ошибки);
	
	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, СведенияОЛице.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.18 формата.
// 
// Параметры:
//  Объект           - ОбъектXDTO
//  КонтактныеДанные - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеКонтактныеДанные
//  Ошибки           - Неопределено
//                   - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьКонтактныеДанные(Объект, КонтактныеДанные, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Тлф", КонтактныеДанные.НомерТелефона, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЭлПочта", КонтактныеДанные.АдресЭП, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИнКонт", КонтактныеДанные.Прочее, Ложь, Ошибки);

КонецПроцедуры

// Заполнение объекта из таблицы 8.19 формата.
// 
// Параметры:
//  Объект              - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеБанковскиеРеквизиты
//  Ошибки              - Неопределено
//                      - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьБанковскиеРеквизиты(Объект, БанковскиеРеквизиты, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИННЮЛ", БанковскиеРеквизиты.ИНН, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КПП", БанковскиеРеквизиты.КПП, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "РасчСчет", БанковскиеРеквизиты.НомерСчета, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаимБанк", БанковскиеРеквизиты.Наименование, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БИК", БанковскиеРеквизиты.БИК, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КорСчет", БанковскиеРеквизиты.КорреспондентскийСчет, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", БанковскиеРеквизиты.ИныеСведения, Ложь, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.20 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  Подписант     - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОПодписанте
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьПодписанта(Объект, Подписант, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СтатПодп", Подписант.СтатусПодписанта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ТипПодпис", Подписант.ТипПодписи, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдСистХран", Подписант.ИдентифицирующиеСведенияОбИС, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Должн", Подписант.Должность, Ложь, Ошибки);

	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, Подписант.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);
	
	СтатусыПодписанта = СтатусыПодписанта();

	Если Подписант.СтатусПодписанта = СтатусыПодписанта.ПолномочияНаОснованииЭлектроннойДоверенности
		И Не ЗначениеЗаполнено(Подписант.ИдентифицирующиеСведенияОбИС) Тогда
		СведенияОбЭлектроннойДоверенности = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвДовер);
		ЗаполнитьСведенияОбЭлектроннойДоверенности(СведенияОбЭлектроннойДоверенности,
			Подписант.СведенияОбЭлектроннойДоверенности, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвДовер", СведенияОбЭлектроннойДоверенности, Истина, Ошибки);
	ИначеЕсли Подписант.СтатусПодписанта = СтатусыПодписанта.ПолномочияНаОснованииБумажнойДоверенности Тогда
		СведенияОБумажнойДоверенности = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвДоверБум);
		ЗаполнитьСведенияОБумажнойДоверенности(СведенияОБумажнойДоверенности, Подписант.СведенияОБумажнойДоверенности,
			КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвДоверБум", СведенияОБумажнойДоверенности, Истина, Ошибки);
	КонецЕсли;

КонецПроцедуры

// Заполнение объекта из таблицы 8.21 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОбЭлектроннойДоверенности
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОбЭлектроннойДоверенности(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомДовер", Сведения.Номер, Истина, Ошибки);
	Дата = ПредставлениеДаты(Сведения.Дата);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаНач", Дата, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВнНомДовер", Сведения.НомерВнутренний, Ложь, Ошибки);
	ДатаВнутренняя = ПредставлениеДаты(Сведения.ДатаВнутренняя);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаВнРегДовер", ДатаВнутренняя, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СведСистОтм", Сведения.СведенияОбИСПроверки, Истина, Ошибки);

КонецПроцедуры

// Заполнение объекта из таблицы 8.22 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  Сведения      - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОБумажнойДоверенности
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОБумажнойДоверенности(Объект, Сведения, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();

	Дата = ПредставлениеДаты(Сведения.Дата);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаНач", Дата, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВнНомДовер", Сведения.НомерВнутренний, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СвИдДовер", Сведения.СведенияОДоверителе, Истина, Ошибки);

	ФИО = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФИОТип);
	ЗаполнитьФИО(ФИО, Сведения.ФИО, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФИО", ФИО, Истина, Ошибки);

КонецПроцедуры

// Заполнение объекта из таблицы 8.23 формата.
// 
// Параметры:
//  Объект      - ОбъектXDTO
//  СуммаАкциза - Число
//  БезАкциза   - Булево
//  Ошибки      - Неопределено
//              - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСуммуАкциза(Объект, СуммаАкциза, БезАкциза, Ошибки)
	
	Если БезАкциза Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БезАкциз", "без акциза", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумАкциз", СуммаАкциза, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.24 формата.
// 
// Параметры:
//  Объект      - ОбъектXDTO
//  СуммаНалога - Число
//  БезНДС      - Булево
//  Ошибки      - Неопределено
//              - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСуммуНалога(Объект, СуммаНалога, БезНДС, Ошибки)
	
	Если БезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БезНДС", "без НДС", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СумНДС", СуммаНалога, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.25 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  Адрес         - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресКЛАДР
//                - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресФИАС
//                - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресЗаПределамиРФ
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдрес(Объект, Адрес, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	ТипыАдресов = ТипыАдресов();
	
	Если ТипЗнч(Адрес) = ТипыАдресов.КЛАДР Тогда
		АдресКЛАДР = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрКЛАДРТип);
		ЗаполнитьАдресКЛАДР(АдресКЛАДР, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрКЛАДР", АдресКЛАДР, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Адрес) = ТипыАдресов.ЗаПределамиРФ Тогда
		АдресЗаПределамиРФ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрИнфТип);
		ЗаполнитьАдресЗаПределамиРФ(АдресЗаПределамиРФ, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрИнф", АдресЗаПределамиРФ, Истина, Ошибки);
	ИначеЕсли ТипЗнч(Адрес) = ТипыАдресов.ФИАС Тогда
		АдресФИАС = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдрФИАСТип);
		ЗаполнитьАдресФИАС(АдресФИАС, Адрес, КонструкторЭД, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрФИАС", АдресФИАС, Истина, Ошибки);
	КонецЕсли;

КонецПроцедуры

// Заполнение объекта из таблицы 8.26 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес  - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресКЛАДР
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдресКЛАДР(Объект, Адрес, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Индекс", Адрес.Индекс, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодРегион", Адрес.КодРегиона, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Район", Адрес.Район, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Город", Адрес.Город, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаселПункт", Адрес.НаселенныйПункт, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Улица", Адрес.Улица, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Дом", Адрес.Дом, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Корпус", Адрес.Корпус, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Кварт", Адрес.Квартира, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИныеСвед", Адрес.ИныеСведения, Ложь, Ошибки);

КонецПроцедуры

// Заполнение объекта из таблицы 8.27 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  Адрес         - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресФИАС
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдресФИАС(Объект, Адрес, КонструкторЭД, Ошибки)

	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдНом", Адрес.ИдентификаторОбъекта, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Регион", Адрес.Регион, Истина, Ошибки);

	Если ЗначениеЗаполнено(Адрес.МуниципальныйРайон) Тогда
		Район = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ВидНаимКодТип);
		ЗаполнитьРайонГородФИАС(Район, Адрес.МуниципальныйРайон, Ошибки);
	Иначе
		Район = Неопределено;
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "МуниципРайон", Район, ?(Адрес.Регион = "99", Ложь, Истина),
		Ошибки);

	Если ЗначениеЗаполнено(Адрес.ГородскоеПоселение) Тогда
		Город = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ВидНаимКодТип);
		ЗаполнитьРайонГородФИАС(Город, Адрес.ГородскоеПоселение, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ГородСелПоселен", Город, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
		НаселенныйПункт = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ВидНаимТип);
		ЗаполнитьСведенияОВидеИНаименованииАдрЭлементаФИАС(НаселенныйПункт, Адрес.НаселенныйПункт, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаселенПункт", НаселенныйПункт, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес.ЭлементПланировочнойСтруктуры) Тогда
		ЭлементПланировочнойСтруктуры = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ТипНаимТип);
		ЗаполнитьСведенияОТипеИНаименованииАдрЭлементаФИАС(ЭлементПланировочнойСтруктуры,
			Адрес.ЭлементПланировочнойСтруктуры, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЭлПланСтруктур", ЭлементПланировочнойСтруктуры, Ложь, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес.ЭлементУличноДорожнойСети) Тогда
		ЭлементУличноДорожнойСети = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ТипНаимТип);
		ЗаполнитьСведенияОТипеИНаименованииАдрЭлементаФИАС(ЭлементУличноДорожнойСети,
			Адрес.ЭлементУличноДорожнойСети, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЭлУлДорСети", ЭлементУличноДорожнойСети, Ложь, Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(Адрес.ЗданиеСооружение) Тогда
		Для Каждого ЭлементЗдание Из Адрес.ЗданиеСооружение Цикл
		
			Здание = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.НомерТип);
			ЗаполнитьСведенияОНомереАдрЭлементаФИАС(Здание, ЭлементЗдание, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Здание", Здание, Ложь, Ошибки);
		
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес.ПомещениеЗдания) Тогда
		ПомещениеВЗдании = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.НомерТип);
		ЗаполнитьСведенияОНомереАдрЭлементаФИАС(ПомещениеВЗдании, Адрес.ПомещениеЗдания, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПомещЗдания", ПомещениеВЗдании, Ложь, Ошибки);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Адрес.ПомещениеКвартиры) Тогда
		ПомещениеВКвартире = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.НомерТип);
		ЗаполнитьСведенияОНомереАдрЭлементаФИАС(ПомещениеВКвартире, Адрес.ПомещениеКвартиры, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ПомещКвартиры", ПомещениеВКвартире, Ложь, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.28 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйРайонГородФИАС
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьРайонГородФИАС(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидКод", Сведения.КодЭлемента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наим", Сведения.Наименование, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.29 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОВидеИНаименованииАдрЭлементаФИАС
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОВидеИНаименованииАдрЭлементаФИАС(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Вид", Сведения.ВидЭлемента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наим", Сведения.Наименование, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.30 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОТипеИНаименованииАдресногоЭлементаФИАС
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОТипеИНаименованииАдрЭлементаФИАС(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Тип", Сведения.ТипЭлемента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наим", Сведения.Наименование, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.31 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОНомереАдрЭлементаФИАС
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьСведенияОНомереАдрЭлементаФИАС(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Тип", Сведения.ТипЭлемента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Номер", Сведения.НомерЭлемента, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.32 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресЗаПределамиРФ
//  Ошибки   - Неопределено
//           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьАдресЗаПределамиРФ(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСтр", Сведения.КодСтраны, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдрТекст", Сведения.Адрес, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.33 формата.
// 
// Параметры:
//  Объект                - ОбъектXDTO
//  УдостоверениеЛичности - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеУдостоверениеЛичности
//  Ошибки                - Неопределено
//                        - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьУдостоверениеЛичности(Объект, УдостоверениеЛичности, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодВидДок", УдостоверениеЛичности.КодВидаДокумента, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СерНомДок", УдостоверениеЛичности.СерияНомерДокумента, Истина,
		Ошибки);
	
	ДатаВыдачи = ПредставлениеДаты(УдостоверениеЛичности.ДатаВыдачи);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаДок", ДатаВыдачи, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВыдДок", УдостоверениеЛичности.НаименованиеОргана, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодВыдДок", УдостоверениеЛичности.КодПодразделения, Ложь, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.34 формата.
// 
// Параметры:
//  Объект                - ОбъектXDTO
//  УдостоверениеЛичности - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеУдостоверениеЛичностиИностранногоЛица
//  Ошибки                - Неопределено
//                        - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьУдостоверениеЛичностиИностранногоЛица(Объект, УдостоверениеЛичности, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВидДок", УдостоверениеЛичности.ВидДокумента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомДок", УдостоверениеЛичности.НомерДокумента, Истина, Ошибки);
	
	ДатаВыдачи = ПредставлениеДаты(УдостоверениеЛичности.ДатаВыдачи);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаДок", ДатаВыдачи, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.35 формата.
// 
// Параметры:
//  Объект                   - ОбъектXDTO:
//   * ТекстИнф - СписокXDTO
//  ДополнительнаяИнформация - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НоваяДополнительнаяИнформация
//  КонструкторЭД            - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки                   - Неопределено
//                           - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДополнительнуюИнформацию(Объект, ДополнительнаяИнформация, КонструкторЭД, Ошибки)
	
	ТипыОбъектов = КонструкторЭД.ТипыОбъектов();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдФайлИнфПол", ДополнительнаяИнформация.ИдентификаторФайла, Ложь,
		Ошибки);
	
	Если ЗначениеЗаполнено(ДополнительнаяИнформация.Поля) Тогда
		Для Каждого Поле Из ДополнительнаяИнформация.Поля Цикл
			НоваяЗапись = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ТекстИнфТип);
			ЗаполнитьДополнительноеПоле(НоваяЗапись, Поле, Ошибки);
			Объект.ТекстИнф.Добавить(НоваяЗапись);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.36 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Поле   - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеДополнительноеПоле
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьДополнительноеПоле(Объект, Поле, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентиф", Поле.Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Значение", Поле.Значение, Истина, Ошибки);
	
КонецПроцедуры

// Заполнение объекта из таблицы 8.37 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ФИО    - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеФИО
//  Ошибки - Неопределено
//         - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ЗаполнитьФИО(Объект, ФИО, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Фамилия", ФИО.Фамилия, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Имя", ФИО.Имя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Отчество", ФИО.Отчество, Ложь, Ошибки);
	
КонецПроцедуры

// BSLLS:Typo-on

#КонецОбласти

#Область ЧтениеЭлектронногоДокумента

// BSLLS:Typo-off

// Чтение объекта из таблицы 8.1 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьФайлИнформации(Объект, КонструкторЭД)
	
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Документ");
	ПрочитатьДокументИнформации(Документ, КонструкторЭД);
	
КонецПроцедуры

// Чтение объекта Из таблицы 8.2 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьДокументИнформации(Объект, КонструкторЭД)
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	ИнформацияДокумента.ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Функция");
	ИнформацияДокумента.ПризнакПорядкаФормирования = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПорФормДок");
	
	СведенияОСодержанииСделки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвСодСдел");
	ПрочитатьСведенияОСодержанииСделки(СведенияОСодержанииСделки, КонструкторЭД);

	ДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПол");
	Если ТипЗнч(ДополнительнаяИнформация) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.ДополнительнаяИнформация = КонструкторЭД.НоваяДополнительнаяИнформация();
		ПрочитатьДополнительнуюИнформацию(ДополнительнаяИнформация, ИнформацияДокумента.ДополнительнаяИнформация,
			КонструкторЭД);
	КонецЕсли;

КонецПроцедуры

// Чтение объекта Из таблицы 8.3 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * ОКИН - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСведенияОСодержанииСделки (Объект, КонструкторЭД)

	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	КодыЯзыка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКИН");
	Если ТипЗнч(КодыЯзыка) = Тип("СписокXDTO") Тогда
		Для Каждого КодЯзыка Из КодыЯзыка Цикл
			
			ИнформацияДокумента.КодЯзыкаДокумента.Добавить(КодЯзыка);
		
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыДоговорногоДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "РекДок");
	ПрочитатьРеквизитыДоговорногоДокумента(РеквизитыДоговорногоДокумента, КонструкторЭД);

	СтороныДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтороныДок");
	ПрочитатьСтороныДоговора(СтороныДоговора, КонструкторЭД);

	СведенияОбОбщейСтоимости = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвОбщСтДок");
	Если ТипЗнч(СведенияОбОбщейСтоимости) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.СведенияОбОбщейСтоимости = КонструкторЭД.НовыеСведенияОбОбщейСтоимости();
		ПрочитатьСведенияОбОбщейСтоимости(СведенияОбОбщейСтоимости, ИнформацияДокумента.СведенияОбОбщейСтоимости,
			КонструкторЭД);
	КонецЕсли;

	УсловияПоставки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УслПост");
	Если ТипЗнч(УсловияПоставки) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.УсловияПоставки = КонструкторЭД.НовыеУсловияПоставки();
		ПрочитатьУсловияПоставки(УсловияПоставки, ИнформацияДокумента.УсловияПоставки);
	КонецЕсли;

	ПорядокРасчета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПорРасч");
	Если ТипЗнч(ПорядокРасчета) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.ПорядокРасчета = КонструкторЭД.НовыйПорядокРасчета();
		ПрочитатьПорядокРасчета(ПорядокРасчета, ИнформацияДокумента.ПорядокРасчета);
	КонецЕсли;

	СрокДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокДок");
	Если ТипЗнч(СрокДействия) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.СрокДействия = КонструкторЭД.НовыйСрокДействия();
		ПрочитатьСрокДействия(СрокДействия, ИнформацияДокумента.СрокДействия);
	КонецЕсли;

	СведенияОбИномДоговорномДокументе = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвязДок");
	Если ТипЗнч(СведенияОбИномДоговорномДокументе) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.СведенияОбИномДоговорномДокументе = КонструкторЭД.НовыеСведенияОбИномДоговорномДокументе();
		ПрочитатьСведенияОбИномДоговорномДокументе(СведенияОбИномДоговорномДокументе,
		ИнформацияДокумента.СведенияОбИномДоговорномДокументе);
	КонецЕсли;

КонецПроцедуры

// Чтение объекта Из таблицы 8.4 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * ДопСвДок - СписокXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьРеквизитыДоговорногоДокумента(Объект, КонструкторЭД)

	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	ИнформацияДокумента.НомерДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерДок");
	ИнформацияДокумента.МестоЗаключенияДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "МестоДок");
	ИнформацияДокумента.ТипДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТипДок");

	ДатаДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаДок");
	ИнформацияДокумента.ДатаДоговора = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаДоговора);
	
	ДополнительныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДопСвДок");
	Если ТипЗнч(ДополнительныеСведения) = Тип("СписокXDTO") Тогда
		Для Каждого ДопСведение Из ДополнительныеСведения Цикл
			
			ИнформацияДокумента.ДополнительныеСведения.Добавить(ДопСведение);
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Чтение объекта Из таблицы 8.5 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСтороныДоговора(Объект, КонструкторЭД)
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	ИнформацияОрганизации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СторКонтр1");
	ИнформацияДокумента.Организация = КонструкторЭД.НоваяСторонаДоговора();
	ПрочитатьСторонуДоговора(ИнформацияОрганизации, ИнформацияДокумента.Организация, КонструкторЭД);
	
	ИнформацияКонтрагента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СторКонтр2");
	Если ТипЗнч(ИнформацияКонтрагента) = Тип("ОбъектXDTO") Тогда
		ИнформацияДокумента.Контрагент = КонструкторЭД.НоваяСторонаДоговора();
		ПрочитатьСторонуДоговора(ИнформацияКонтрагента, ИнформацияДокумента.Контрагент, КонструкторЭД);
	КонецЕсли;

КонецПроцедуры

// Чтение объекта Из таблицы 8.6 формата.
// 
// Параметры:
//  Объект                   - ОбъектXDTO:
//   * ПредметДок - СписокXDTO
//  СведенияОбОбщейСтоимости - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОбОбщейСтоимости
//  КонструкторЭД            - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСведенияОбОбщейСтоимости(Объект, СведенияОбОбщейСтоимости, КонструкторЭД)
	
	СведенияОбОбщейСтоимости.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОбщСтУчНДС");
	СведенияОбОбщейСтоимости.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОбщСтБезНДС");
	СведенияОбОбщейСтоимости.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНалДок");
	СведенияОбОбщейСтоимости.КодВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодОКВ");
	
	ПредметТаблица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПредметДок");
	Если ТипЗнч(ПредметТаблица) = Тип("СписокXDTO") Тогда
		
		СведенияОбОбщейСтоимости.Предмет = Новый Массив;
		
		Для Каждого Предмет Из ПредметТаблица Цикл
			
			НоваяЗапись = КонструкторЭД.НовыйПредмет();
			ПрочитатьЭлементПредмета(Предмет, НоваяЗапись, КонструкторЭД);
			СведенияОбОбщейСтоимости.Предмет.Добавить(НоваяЗапись);
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Чтение объекта Из таблицы 8.7 формата.
// 
// Параметры:
//  Объект          - ОбъектXDTO
//  ЭлементПредмета - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйПредмет
//  КонструкторЭД   - ОбработкаОбъект.ФорматДоговорнойДокумент101
//  Ошибки          - Неопределено
//                  - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Процедура ПрочитатьЭлементПредмета(Объект, ЭлементПредмета, КонструкторЭД)
	
	ЭлементПредмета.НомерСтрокиТаблицы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомСтр");
	ЭлементПредмета.ПризнакПредмета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПрПред");
	ЭлементПредмета.КодКаталога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодКат");
	ЭлементПредмета.КодТНВЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТНВЭД");
	ЭлементПредмета.КодОКПД2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКПД2");
	ЭлементПредмета.КодОКВЭД2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКВЭД2");
	ЭлементПредмета.ВидСделки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидСдел");
	ЭлементПредмета.НаименованиеТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимТов");
	ЭлементПредмета.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КолТов");
	ЭлементПредмета.КодЕдиницыИзмерения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКЕИ_Тов");
	ЭлементПредмета.Цена = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЦенаТов");
	ЭлементПредмета.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовБезНДС");	
	ЭлементПредмета.СтавкаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НалСт");
	ЭлементПредмета.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтТовУчНал");
	ЭлементПредмета.КодВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодОКВ");
	
	СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНал");
	Если ТипЗнч(СуммаНалога) = Тип("ОбъектXDTO") Тогда
		ПрочитатьСуммуНалога(СуммаНалога, ЭлементПредмета.СуммаНалога, ЭлементПредмета.БезНДС);
	КонецЕсли;
	
	СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Акциз");
	Если ТипЗнч(СуммаАкциза) = Тип("ОбъектXDTO") Тогда
		ПрочитатьСуммуАкциза(СуммаАкциза, ЭлементПредмета.СуммаАкциза, ЭлементПредмета.БезАкциза);
	КонецЕсли;

	ДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфПол");
	Если ТипЗнч(ДополнительнаяИнформация) = Тип("ОбъектXDTO") Тогда
		ЭлементПредмета.ДополнительнаяИнформация = КонструкторЭД.НоваяДополнительнаяИнформация();
		ПрочитатьДополнительнуюИнформацию(ДополнительнаяИнформация, ЭлементПредмета.ДополнительнаяИнформация,
			КонструкторЭД);
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта Из таблицы 8.8 формата.
// 
// Параметры:
//  Объект          - ОбъектXDTO
//  УсловияПоставки - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеУсловияПоставки
//
Процедура ПрочитатьУсловияПоставки(Объект, УсловияПоставки)
	
	УсловияПоставки.МестоПереходаПраваСобственности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "МесПерПрСоб");
	УсловияПоставки.Инкотермс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Инкотермс");
	УсловияПоставки.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");

КонецПроцедуры

// Чтение объекта Из таблицы 8.9 формата.
// 
// Параметры:
//  Объект         - ОбъектXDTO
//  ПорядокРасчета - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйПорядокРасчета
//
Процедура ПрочитатьПорядокРасчета(Объект, ПорядокРасчета)
	
	ПорядокРасчета.ВидПлатежа = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидПлатеж");
	ПорядокРасчета.КоличествоПлатежей = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПорядНомер");
	ПорядокРасчета.ПроцентОтОбщейСуммы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Процент");
	ПорядокРасчета.СрокПоставки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокПост");
	ПорядокРасчета.РазмерПени = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Пени");
	ПорядокРасчета.КодВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодОКВ");
	ПорядокРасчета.СрокОплаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СрокОпл");
	ПорядокРасчета.СобытиеИсчисленияСрокаПлатежа = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СобЧастПлат");

КонецПроцедуры

// Чтение объекта Из таблицы 8.10 формата.
// 
// Параметры:
//  Объект       - ОбъектXDTO
//  СрокДействия - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйСрокДействия
//
Процедура ПрочитатьСрокДействия(Объект, СрокДействия)

	ДатаНачалаДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаНачДок");
	СрокДействия.ДатаНачалаДействия = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаНачалаДействия);

	ДатаОкончанияДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаОконДок");
	СрокДействия.ДатаОкончанияДействия = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаОкончанияДействия);
	
	СрокДействия.НаличиеПролонгации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПризнНалПро");
	СрокДействия.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");

КонецПроцедуры

// Чтение объекта Из таблицы 8.11 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO:
//   * ДопСвязДок - СписокXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОбИномДоговорномДокументе
//
Процедура ПрочитатьСведенияОбИномДоговорномДокументе(Объект, Сведения)
	
	Сведения.НомерСвязанногоДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомСвязДок");
	Сведения.НаименованиеСвязанногоДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимСвязДок");

	ДатаСвязанногоДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаСвязДок");
	Сведения.ДатаСвязанногоДоговора = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаСвязанногоДоговора);

	ДополнительныеСведенияСвязанногоДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДопСвязДок");
	Если ТипЗнч(ДополнительныеСведенияСвязанногоДоговора) = Тип("СписокXDTO") Тогда
		Для Каждого ДопСведение Из ДополнительныеСведенияСвязанногоДоговора Цикл
			
			Сведения.ДополнительныеСведенияСвязанногоДоговора.Добавить(ДопСведение);
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта Из таблицы 8.12 формата.
// 
// Параметры:
//  Объект          - ОбъектXDTO
//   * ДопСвСт - СписокXDTO
//   * ПодписантСт - СписокXDTO
//  СторонаДоговора - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НоваяСторонаДоговора
//  КонструкторЭД   - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСторонуДоговора(Объект, СторонаДоговора, КонструкторЭД)

	СторонаДоговора.КодОКПО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОКПО");
	СторонаДоговора.СтруктурноеПодразделение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтруктПодр");
	СторонаДоговора.ИнформацияДляУчастника = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнфДляУчаст");
	СторонаДоговора.КраткоеНазвание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КраткНазв");
	
	ДополнительныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДопСвСт");
	Если ТипЗнч(ДополнительныеСведения) = Тип("СписокXDTO") Тогда
		Для Каждого ДопСведение Из ДополнительныеСведения Цикл
			
			СторонаДоговора.ДополнительныеСведения.Добавить(ДопСведение);
		
		КонецЦикла;
	КонецЕсли;

	ИдентификационныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдСв");
	СторонаДоговора.ИдентификационныеСведения = ПрочитатьИдентификационныеСведения(ИдентификационныеСведения,
		КонструкторЭД);

	Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресСт");
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		СторонаДоговора.Адрес = ПрочитатьАдрес(Адрес, КонструкторЭД);
	КонецЕсли;

	КонтактныеДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Контакт");
	Если ТипЗнч(КонтактныеДанные) = Тип("ОбъектXDTO") Тогда
		СторонаДоговора.КонтактныеДанные = КонструкторЭД.НовыеКонтактныеДанные();
		ПрочитатьКонтактныеДанные(КонтактныеДанные, СторонаДоговора.КонтактныеДанные);
	КонецЕсли;
	
	БанковскиеРеквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БанкРекв");
	СторонаДоговора.БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
	ПрочитатьБанковскиеРеквизиты(БанковскиеРеквизиты, СторонаДоговора.БанковскиеРеквизиты);
	
КонецПроцедуры

// Чтение объекта из таблицы 8.13 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
// 
// Возвращаемое значение:
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИП
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияОрганизации
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИностранногоЛица
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияФизЛица
//
Функция ПрочитатьИдентификационныеСведения(Объект, КонструкторЭД)
	
	СведенияОЛице = Неопределено;
	
	Предприниматель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвИП");
	Если ТипЗнч(Предприниматель) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеИдентификационныеСведенияИП();
		ПрочитатьСведенияОбИндивидуальномПредпринимателе(Предприниматель, СведенияОЛице, КонструкторЭД);
	КонецЕсли;
	
	ИностраннаяОрганизация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвИнНеУч");
	Если ТипЗнч(ИностраннаяОрганизация) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеИдентификационныеСведенияИностранногоЛица();
		ПрочитатьСведенияОбИностраннойОрганизации(ИностраннаяОрганизация, СведенияОЛице, КонструкторЭД);
	КонецЕсли;
	
	Организация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвЮЛУч");
	Если ТипЗнч(Организация) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеИдентификационныеСведенияОрганизации();
		ПрочитатьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Организация, СведенияОЛице);
	КонецЕсли;
	
	ФизЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвФЛУч");
	Если ТипЗнч(ФизЛицо) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице = КонструкторЭД.НовыеИдентификационныеСведенияФизЛица();
		ПрочитатьСведенияОФизическомЛице(ФизЛицо, СведенияОЛице, КонструкторЭД);
	КонецЕсли;
	
	Возврат СведенияОЛице;
	
КонецФункции

// Чтение объекта из таблицы 8.14 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИП
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСведенияОбИндивидуальномПредпринимателе(Объект, СведенияОЛице, КонструкторЭД)
	
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННФЛ");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	
	СведенияОЛице.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОГРНИП");
	СведенияОЛице.РеквизитыСвидетельстваОГосударственнойРегистрации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект,
		"СвГосРегИП");
	
	ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФИО");
	СведенияОЛице.ФИО = КонструкторЭД.НовыеФИО();
	ПрочитатьФИО(ФИО, СведенияОЛице.ФИО);
	
	УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УдЛичн");
	Если ТипЗнч(УдостоверениеЛичности) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице.УдостоверениеЛичности = КонструкторЭД.НовоеУдостоверениеЛичности();
		ПрочитатьУдостоверениеЛичности(УдостоверениеЛичности, СведенияОЛице.УдостоверениеЛичности);
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта из таблицы 8.15 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO:
//   * КПП - СписокXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияОрганизации
//
Процедура ПрочитатьСведенияОбОрганизацииСостоящейНаНалоговомУчете(Объект, СведенияОЛице)
	
	СведенияОЛице.НаименованиеПолное = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОрг");
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННЮЛ");
	СведенияОЛице.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ОГРН");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");

	ЭлементыКПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
	Для Каждого КПП Из ЭлементыКПП Цикл
		
		СведенияОЛице.КПП.Добавить(КПП);
		
	КонецЦикла;

КонецПроцедуры

// Чтение объекта из таблицы 8.16 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияИностранногоЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСведенияОбИностраннойОрганизации(Объект, СведенияОЛице, КонструкторЭД)
	
	СведенияОЛице.НаименованиеПолное = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимОрг");
	СведенияОЛице.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентиф");
	СведенияОЛице.КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСтр");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");

	УдостоверениеЛичностиИностранногоЛица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УдЛичнИнФЛ");
	Если ТипЗнч(УдостоверениеЛичностиИностранногоЛица) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице.УдостоверениеЛичностиИностранногоЛица = КонструкторЭД.НовоеУдостоверениеЛичностиИностранногоЛица();
		ПрочитатьУдостоверениеЛичностиИностранногоЛица(УдостоверениеЛичностиИностранногоЛица,
			СведенияОЛице.УдостоверениеЛичностиИностранногоЛица);
	КонецЕсли;

КонецПроцедуры

// Чтение объекта из таблицы 8.17 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  СведенияОЛице - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеИдентификационныеСведенияФизЛица
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьСведенияОФизическомЛице(Объект, СведенияОЛице, КонструкторЭД)
	
	СведенияОЛице.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННФЛ");
	СведенияОЛице.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	
	ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФИО");
	СведенияОЛице.ФИО = КонструкторЭД.НовыеФИО();
	ПрочитатьФИО(ФИО, СведенияОЛице.ФИО);
	
	Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресФл");
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице.Адрес = ПрочитатьАдрес(Адрес, КонструкторЭД);
	КонецЕсли;
	
	УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "УдЛичн");
	Если ТипЗнч(УдостоверениеЛичности) = Тип("ОбъектXDTO") Тогда
		СведенияОЛице.УдостоверениеЛичности = КонструкторЭД.НовоеУдостоверениеЛичности();
		ПрочитатьУдостоверениеЛичности(УдостоверениеЛичности, СведенияОЛице.УдостоверениеЛичности);
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта из таблицы 8.18 формата.
// 
// Параметры:
//  Объект           - ОбъектXDTO
//  КонтактныеДанные - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеКонтактныеДанные
//
Процедура ПрочитатьКонтактныеДанные(Объект, КонтактныеДанные)
	
	КонтактныеДанные.НомерТелефона = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Тлф");
	КонтактныеДанные.АдресЭП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЭлПочта");
	КонтактныеДанные.Прочее = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИнКонт");

КонецПроцедуры

// Чтение объекта из таблицы 8.19 формата.
// 
// Параметры:
//  Объект              - ОбъектXDTO
//  БанковскиеРеквизиты - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеБанковскиеРеквизиты
//
Процедура ПрочитатьБанковскиеРеквизиты(Объект, БанковскиеРеквизиты)
	
	БанковскиеРеквизиты.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИННЮЛ");
	БанковскиеРеквизиты.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
	БанковскиеРеквизиты.НомерСчета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "РасчСчет");
	БанковскиеРеквизиты.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаимБанк");
	БанковскиеРеквизиты.БИК = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БИК");
	БанковскиеРеквизиты.КорреспондентскийСчет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КорСчет");
	БанковскиеРеквизиты.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");
	
КонецПроцедуры

// Чтение объекта из таблицы 8.23 формата.
// 
// Параметры:
//  Объект      - ОбъектXDTO
//  СуммаАкциза - Число
//  БезАкциза   - Булево
//
Процедура ПрочитатьСуммуАкциза(Объект, СуммаАкциза, БезАкциза)
	
	ПолеБезАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БезАкциз");
	Если ЗначениеЗаполнено(ПолеБезАкциза) И ПолеБезАкциза = "без акциза" Тогда
		БезАкциза = Истина;
	Иначе
		СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумАкциз");
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта из таблицы 8.24 формата.
// 
// Параметры:
//  Объект      - ОбъектXDTO
//  СуммаНалога - Число
//  БезНДС      - Булево
//
Процедура ПрочитатьСуммуНалога(Объект, СуммаНалога, БезНДС)

	ПолеБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БезНДС");
	Если ЗначениеЗаполнено(ПолеБезНДС) И ПолеБезНДС = "без НДС" Тогда
		БезНДС = Истина;
	Иначе
		СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СумНДС");
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта из таблицы 8.25 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
// 
// Возвращаемое значение:
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресКЛАДР
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресФИАС
//  см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресЗаПределамиРФ
//
Функция ПрочитатьАдрес(Объект, КонструкторЭД)
	
	АдресКЛАДР = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрКЛАДР");
	Если ТипЗнч(АдресКЛАДР) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресКЛАДР();
		ПрочитатьАдресКЛАДР(АдресКЛАДР, Адрес);
		Возврат Адрес;
	КонецЕсли;
	
	АдресЗаПределамиРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрИнф");	
	Если ТипЗнч(АдресЗаПределамиРФ) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресЗаПределамиРФ();
		ПрочитатьАдресЗаПределамиРФ(АдресЗаПределамиРФ, Адрес);
		Возврат Адрес;
	КонецЕсли;
	
	АдресФИАС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрФИАС");	
	Если ТипЗнч(АдресФИАС) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресФИАС();
		ПрочитатьАдресФИАС(АдресФИАС, Адрес, КонструкторЭД);
		Возврат Адрес;
	КонецЕсли;

КонецФункции

// Чтение объекта из таблицы 8.26 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Адрес  - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресКЛАДР
//
Процедура ПрочитатьАдресКЛАДР(Объект, Адрес)
	
	Адрес.Индекс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Индекс");
	Адрес.КодРегиона = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодРегион");
	Адрес.Район = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Район");
	Адрес.Город = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Город");
	Адрес.НаселенныйПункт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаселПункт");
	Адрес.Улица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Улица");
	Адрес.Дом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Дом");
	Адрес.Корпус = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Корпус");
	Адрес.Квартира = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Кварт");
	Адрес.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИныеСвед");

КонецПроцедуры

// Чтение объекта из таблицы 8.27 формата.
// 
// Параметры:
//  Объект        - ОбъектXDTO
//  Адрес         - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресФИАС
//  КонструкторЭД - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьАдресФИАС(Объект, Адрес, КонструкторЭД)

	Адрес.ИдентификаторОбъекта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдНом");
	Адрес.Регион = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Регион");
	
	РайонФИАС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "МуниципРайон");
	Если ТипЗнч(РайонФИАС) = Тип("ОбъектXDTO") Тогда
		Адрес.МуниципальныйРайон = КонструкторЭД.НовыйРайонГородФИАС();
		ПрочитатьРайонГородФИАС(РайонФИАС, Адрес.МуниципальныйРайон);
	КонецЕсли;
		
	ГородФИАС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ГородСелПоселен");
	Если ТипЗнч(ГородФИАС) = Тип("ОбъектXDTO") Тогда
		Адрес.ГородскоеПоселение = КонструкторЭД.НовыйРайонГородФИАС();
		ПрочитатьРайонГородФИАС(ГородФИАС, Адрес.ГородскоеПоселение);
	КонецЕсли;

	НаселенныйПункт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаселенПункт");
	Если ТипЗнч(НаселенныйПункт) = Тип("ОбъектXDTO") Тогда
		Адрес.НаселенныйПункт = КонструкторЭД.НовыеСведенияОВидеИНаименованииАдрЭлементаФИАС();
		ПрочитатьСведенияОВидеИНаименованииАдрЭлементаФИАС(НаселенныйПункт, Адрес.НаселенныйПункт);
	КонецЕсли;

	ЭлементПланировочнойСтруктуры = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЭлПланСтруктур");
	Если ТипЗнч(ЭлементПланировочнойСтруктуры) = Тип("ОбъектXDTO") Тогда
		Адрес.ЭлементПланировочнойСтруктуры = КонструкторЭД.НовыеСведенияОТипеИНаименованииАдресногоЭлементаФИАС();
		ПрочитатьСведенияОТипеИНаименованииАдрЭлементаФИАС(ЭлементПланировочнойСтруктуры,
			Адрес.ЭлементПланировочнойСтруктуры);
	КонецЕсли;
	
	ЭлементУличноДорожнойСети = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЭлУлДорСети");
	Если ТипЗнч(ЭлементУличноДорожнойСети) = Тип("ОбъектXDTO") Тогда
		Адрес.ЭлементУличноДорожнойСети = КонструкторЭД.НовыеСведенияОТипеИНаименованииАдресногоЭлементаФИАС();
		ПрочитатьСведенияОТипеИНаименованииАдрЭлементаФИАС(ЭлементУличноДорожнойСети,
			Адрес.ЭлементУличноДорожнойСети);
	КонецЕсли;

	ЗданияМассив = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Здание");
	Если ТипЗнч(ЗданияМассив) = Тип("СписокXDTO") Тогда
		Для Каждого Здание Из ЗданияМассив Цикл
			
			НоваяЗапись = КонструкторЭД.НовыеСведенияОНомереАдрЭлементаФИАС();
			ПрочитатьСведенияОНомереАдрЭлементаФИАС(Здание, НоваяЗапись);
			Адрес.ЗданиеСооружение.Добавить(НоваяЗапись);
		
		КонецЦикла;
	КонецЕсли;

	ПомещениеВЗдании = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПомещЗдания");
	Если ТипЗнч(ПомещениеВЗдании) = Тип("ОбъектXDTO") Тогда
		Адрес.ПомещениеЗдания = КонструкторЭД.НовыеСведенияОНомереАдрЭлементаФИАС();
		ПрочитатьСведенияОНомереАдрЭлементаФИАС(ПомещениеВЗдании, Адрес.ПомещениеЗдания);
	КонецЕсли;

	ПомещениеВКвартире = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПомещКвартиры");
	Если ТипЗнч(ПомещениеВКвартире) = Тип("ОбъектXDTO") Тогда
		Адрес.ПомещениеКвартиры = КонструкторЭД.НовыеСведенияОНомереАдрЭлементаФИАС();
		ПрочитатьСведенияОНомереАдрЭлементаФИАС(ПомещениеВКвартире, Адрес.ПомещениеКвартиры);
	КонецЕсли;
	
КонецПроцедуры

// Чтение объекта из таблицы 8.28 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйРайонГородФИАС
//
Процедура ПрочитатьРайонГородФИАС(Объект, Сведения)
	
	Сведения.КодЭлемента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидКод");
	Сведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наим");

КонецПроцедуры

// Чтение объекта из таблицы 8.29 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОВидеИНаименованииАдрЭлементаФИАС
//
Процедура ПрочитатьСведенияОВидеИНаименованииАдрЭлементаФИАС(Объект, Сведения)
	
	Сведения.ВидЭлемента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Вид");
	Сведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наим");

КонецПроцедуры

// Чтение объекта из таблицы 8.30 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОТипеИНаименованииАдресногоЭлементаФИАС
//
Процедура ПрочитатьСведенияОТипеИНаименованииАдрЭлементаФИАС(Объект, Сведения)
	
	Сведения.ТипЭлемента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Тип");
	Сведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наим");

КонецПроцедуры

// Чтение объекта из таблицы 8.31 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеСведенияОНомереАдрЭлементаФИАС
//
Процедура ПрочитатьСведенияОНомереАдрЭлементаФИАС(Объект, Сведения)
	
	Сведения.ТипЭлемента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Тип");
	Сведения.НомерЭлемента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Номер");

КонецПроцедуры

// Чтение объекта из таблицы 8.32 формата.
// 
// Параметры:
//  Объект   - ОбъектXDTO
//  Сведения - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыйАдресЗаПределамиРФ
//
Процедура ПрочитатьАдресЗаПределамиРФ(Объект, Сведения)
	
	Сведения.КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСтр");
	Сведения.Адрес = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдрТекст");

КонецПроцедуры

// Чтение объекта из таблицы 8.33 формата.
// 
// Параметры:
//  Объект                - ОбъектXDTO
//  УдостоверениеЛичности - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеУдостоверениеЛичности
//
Процедура ПрочитатьУдостоверениеЛичности(Объект, УдостоверениеЛичности)
	
	УдостоверениеЛичности.КодВидаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодВидДок");
	УдостоверениеЛичности.СерияНомерДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СерНомДок");
	
	ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаДок");
	УдостоверениеЛичности.ДатаВыдачи = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаВыдачи);
	
	УдостоверениеЛичности.НаименованиеОргана = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВыдДок");
	УдостоверениеЛичности.КодПодразделения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодВыдДок");
	
КонецПроцедуры

// Чтение объекта из таблицы 8.34 формата.
// 
// Параметры:
//  Объект                - ОбъектXDTO
//  УдостоверениеЛичности - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеУдостоверениеЛичностиИностранногоЛица
//
Процедура ПрочитатьУдостоверениеЛичностиИностранногоЛица(Объект, УдостоверениеЛичности)
	
	УдостоверениеЛичности.ВидДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВидДок");
	УдостоверениеЛичности.НомерДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомДок");
	
	ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаДок");
	УдостоверениеЛичности.ДатаВыдачи = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ДатаВыдачи);

КонецПроцедуры

// Чтение объекта из таблицы 8.35 формата.
// 
// Параметры:
//  Объект                   - ОбъектXDTO:
//   * ТекстИнф - СписокXDTO
//  ДополнительнаяИнформация - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НоваяДополнительнаяИнформация
//  КонструкторЭД            - ОбработкаОбъект.ФорматДоговорнойДокумент101
//
Процедура ПрочитатьДополнительнуюИнформацию(Объект, ДополнительнаяИнформация, КонструкторЭД)
	
	ДополнительнаяИнформация.ИдентификаторФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдФайлИнфПол");

	ДополнительныеПоля = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ТекстИнф");
	Если ТипЗнч(ДополнительныеПоля) = Тип("СписокXDTO") Тогда
		Для Каждого ДопПоле Из ДополнительныеПоля Цикл
			
			НоваяЗапись = КонструкторЭД.НовоеДополнительноеПоле();
			ПрочитатьДополнительноеПоле(ДопПоле, НоваяЗапись);
			ДополнительныеПоля.Поля.Добавить(НоваяЗапись);
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Чтение объекта из таблицы 8.36 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Поле   - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовоеДополнительноеПоле
//
Процедура ПрочитатьДополнительноеПоле(Объект, Поле)
	
	Поле.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентиф");
	Поле.Значение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Значение");

КонецПроцедуры

// Чтение объекта из таблицы 8.37 формата.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ФИО    - см. ОбработкаОбъект.ФорматДоговорнойДокумент101.НовыеФИО
//
Процедура ПрочитатьФИО(Объект, ФИО)
	
	ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Фамилия");
	ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Имя");
	ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Отчество");
	
КонецПроцедуры

// BSLLS:Typo-on

#КонецОбласти

#Область Общее

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДаты(Дата)
	Возврат Формат(Дата, "ДФ=dd.MM.yyyy;");
КонецФункции

// Параметры:
//  ДвоичныеДанныеФайлаПДФ - ДвоичныеДанные
//  КоллекцияВложенийПДФ   - КоллекцияВложенийPDF
//  
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - содержание файла.
//
Функция ЗаписатьКоллекциюВложенийВПДФ(ДвоичныеДанныеФайлаПДФ, КоллекцияВложенийПДФ)
	
	#Если Не ВнешнееСоединение Тогда
		
		ПотокДанныхФайлаПДФ = Новый ПотокВПамяти;
		ЗаписьДанных = Новый ЗаписьДанных(ПотокДанныхФайлаПДФ);
		ЗаписьДанных.Записать(ДвоичныеДанныеФайлаПДФ);
		ЗаписьДанных.Закрыть();
		
		ЗаписьПДФ = Новый ЗаписьPDF;
		ЗаписьПДФ.Открыть(ПотокДанныхФайлаПДФ);
		ЗаписьПДФ.ЗаписатьВложения(КоллекцияВложенийПДФ);
		ЗаписьПДФ.Закрыть();
		Возврат ПотокДанныхФайлаПДФ.ЗакрытьИПолучитьДвоичныеДанные();
	
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
