
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроверитьНеобходимостьЗаполненияПрограммы(Параметры.Сертификаты, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Сертификат.СписокВыбора.ЗагрузитьЗначения(Параметры.Сертификаты);
	Заголовок = Параметры.Заголовок;
	Если Параметры.Сертификаты.Количество() > 0 Тогда
		Сертификат = Параметры.Сертификаты[0];
		ПроверитьНаличиеПароля(Сертификат, Пароль, ИспользоватьСохраненныйПароль);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ РазрешитьЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеНабораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаНабора", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, ОписаниеДанных.СписокПредставлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ИспользоватьСохраненныйПароль = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	
	ПроверитьНаличиеПароля(Сертификат, Пароль, ИспользоватьСохраненныйПароль);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписать(Команда)
	
	НачатьПодписаниеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// АПК:78-выкл: для безопасной передачи данных на клиенте на форму, не отправляя их на сервер.
&НаКлиенте
Процедура ПродолжитьОткрытие(Знач ВходящееОписаниеДанных) Экспорт
// АПК:78-вкл: для безопасной передачи данных на клиенте на форму, не отправляя их на сервер.
	
	ОписаниеДанных = Новый ФиксированнаяСтруктура(ВходящееОписаниеДанных);
	ПредставлениеНабора = ОписаниеДанных.ПредставлениеНабора;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормыПриПодписании()
	
	Элементы.Подписать.Доступность = Не ВыполняетсяОпределениеПрограммы;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьЗаполненияПрограммы(Сертификаты, Отказ)
	
	ВременныеСвойстваСертификатов = Новый Соответствие;
	ПрограммаЗаполненаВоВсехСертификатах = Истина;
	Свойства = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
	Для Каждого КлючИЗначение Из Свойства Цикл
		СвойстваСертификата = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(СвойстваСертификата.Программа) Тогда
			ПрограммаЗаполненаВоВсехСертификатах = Ложь;
		КонецЕсли;
		ВременныеСвойстваСертификатов.Вставить(КлючИЗначение.Ключ, СвойстваСертификата);
	КонецЦикла;
	
	Если ПрограммаЗаполненаВоВсехСертификатах Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СвойстваСертификатов = Новый ФиксированноеСоответствие(ВременныеСвойстваСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодписаниеДанных()
	
	Если ВыполняетсяОпределениеПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяОпределениеПрограммы = Истина;
	
	НастроитьЭлементыФормыПриПодписании();
	
	СвойстваСертификата = СвойстваСертификатов[Сертификат];
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеОпределенияПрограммы", ЭтотОбъект);
	КриптографияБЭДКлиент.ОпределитьПрограммуСертификата(СвойстваСертификата.ДанныеСертификата, ИспользуемыйПароль(),
		ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОпределенияПрограммы(Программа, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Программа) Тогда
		УстановитьПрограммуСертификата(Сертификат, Программа);
		ОпределилиПрограмму = Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить программу закрытого ключа сертификата.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОтменитьПодписаниеДанных();
		Возврат;
	КонецЕсли;
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПодписаниеДанных()
	
	ВыполняетсяОпределениеПрограммы = Ложь;
	НастроитьЭлементыФормыПриПодписании();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПрограммуСертификата(Знач Сертификат, Знач Программа)
	
	КриптографияБЭД.УстановитьПрограммуСертификата(Сертификат, Программа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Если Открыта() Тогда
		РазрешитьЗакрытие = Истина;
		
		Результат = Новый Структура;
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("Сертификат",
			ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка"));
		Результат.Вставить("Пароль", "");
		
		Если ОпределилиПрограмму Тогда
			Результат.Вставить("Результат", Истина);
			Результат.Сертификат = Сертификат;
			Результат.Пароль = ИспользуемыйПароль();
		КонецЕсли;
		
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСертификата(Сертификат)
	
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат));
	Возврат ПаролиСертификатов[Сертификат];
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораЭлементаНабора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеПароля(Сертификат, Пароль, ИспользоватьСохраненныйПароль)
	
	СохраненныйПароль = ПарольСертификата(Сертификат);
	Если СохраненныйПароль = Неопределено Тогда
		Пароль = "";
		ИспользоватьСохраненныйПароль = Ложь;
	Иначе
		Пароль = Новый УникальныйИдентификатор;
		ИспользоватьСохраненныйПароль = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИспользуемыйПароль()
	
	ИспользуемыйПароль = Пароль;
	Если ИспользоватьСохраненныйПароль Тогда
		ИспользуемыйПароль = ПарольСертификата(Сертификат);
	КонецЕсли;
	
	Возврат ИспользуемыйПароль;
	
КонецФункции

#КонецОбласти
