
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сертификат = Параметры.Сертификат;
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат,
		"ДанныеСертификата, ВводитьПарольВПрограммеЭлектроннойПодписи, Пользователь, Добавил, Программа");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Свойства);
	ДанныеСертификата = ДанныеСертификата.Получить();
	
	Если ВводитьПарольВПрограммеЭлектроннойПодписи Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрограммыБанков.ПрограммаБанка
			|ИЗ
			|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
			|ГДЕ
			|	ПрограммыБанков.СертификатЭП = &СертификатЭП";
		
		Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПрограммаБанка = Неопределено;
		Пока Выборка.Следующий() Цикл
			ПрограммаБанка = Выборка.ПрограммаБанка;
		КонецЦикла;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоЗаписиПароля = ЕстьПравоЗаписиПароля();
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = КриптографияБЭДСлужебный.ДанныеПароляСертификата(Сертификат);
	УстановитьПривилегированныйРежим(Ложь);
	
	СохранятьДляВсех = Ложь;
	Если Параметры.Свойство("СохранятьДляВсех") Тогда
		СохранятьДляВсех = Параметры.СохранятьДляВсех;
	КонецЕсли;
	
	Если СохранятьДляВсех Тогда
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Пользователь = Пользователи.ТекущийПользователь();
		Пароль = Данные.Получить(Пользователь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
		Пароль = Данные.Получить(Пользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		ПарольУстановлен = Истина;
		Пароль = "********";
	Иначе
		Если СохранятьДляВсех Тогда
			Пользователь = Справочники.Пользователи.ПустаяСсылка();
		Иначе
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		ПарольУстановлен = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУдалитьПароль.Доступность = ПарольУстановлен;
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВводитьПарольВПрограммеЭлектроннойПодписи Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У сертификата включена опция ""Вводить пароль в программе электронной подписи"".
			           |Запоминание и запись пароля невозможны.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У сертификата не указана программа для закрытого ключа.
			           |Невозможно проверить пароль перед записью.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПравоЗаписиПароля Тогда
		ПоказатьПредупреждение(, ОписаниеОшибкиПраваДоступа(ПользовательСертификата, ДобавилСертификат));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьПароль(Команда)
	
	УдалитьПарольНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПароль(Команда)
	
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Поле ""Пароль"" не заполнено'"));
		Возврат; 
	КонецЕсли;
	
	Если Не ПарольИзменен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Введите пароль повторно.'"));
		Возврат;
	КонецЕсли;
	
	ПроверитьПароль();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПарольПослеПроверки(Результат, ОписаниеОшибки)
	
	Если Результат Тогда
		ЗаписатьПарольНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, СокрЛП(ОписаниеОшибки));
	КонецЕсли;
	
	Если Результат Тогда
		Оповестить("СохраненПарольСертификата", Сертификат);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольДоступенВсем(Команда)
	
	ПарольДоступенВсемНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьПарольНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КриптографияБЭДСлужебный.УдалитьПарольСертификата(Сертификат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ФормаУдалитьПароль.Доступность = Ложь;
	Пользователь = Пользователи.ТекущийПользователь();
	Пароль = "";
	ПарольИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПароль()
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуПодписания", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Пароль);
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание для проверки пароля сертификата'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	ОписаниеДанных.Вставить("Данные", ДанныеСертификата);
	ОписаниеДанных.Вставить("ОтборСертификатов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат));
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, КонтекстДиагностики, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Если Результат.Свойство("ОписаниеОшибки") Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось пройти проверку подписания с помощью программы %1 по причине:'"),
				Программа) + Символы.ПС + Результат.ОписаниеОшибки;
		Иначе
			ТекстОшибки = "";
		КонецЕсли;
		
		ЗаписатьПарольПослеПроверки(Ложь, ТекстОшибки);
	Иначе
		ЗаписатьПарольПослеПроверки(Истина, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПарольНаСервере()
	
	Если Не ЕстьПравоЗаписиПароля() Тогда
		ВызватьИсключение ОписаниеОшибкиПраваДоступа(ПользовательСертификата, ДобавилСертификат);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КриптографияБЭДСлужебный.ЗаписатьПарольСертификата(Сертификат, Пароль, Пользователь);
	
	Элементы.ФормаУдалитьПароль.Доступность = Истина;
	Пароль = "********";
	ПарольИзменен = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьПравоЗаписиПароля()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка роли ДобавлениеИзменениеНастроекЭлектронногоВзаимодействия.
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПодписываемыеВидыЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Пользователь, Добавил");
	ПользовательСертификата = Свойства.Пользователь;
	ДобавилСертификат = Свойства.Добавил;
	Если Свойства.Добавил = Пользователи.ТекущийПользователь()
		Или Свойства.Пользователь = Пользователи.ТекущийПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеОшибкиПраваДоступа(ПользовательСертификата, ДобавилСертификат)
	
	Шаблон = НСтр("ru = 'Недостаточно прав для записи пароля.
		           |
		           |Запись пароля могут сделать пользователи:
				   |%1,
				   |%2
				   |или администратор.'");
	Возврат СтрШаблон(Шаблон, ПользовательСертификата, ДобавилСертификат);
	
КонецФункции

&НаСервере
Процедура ПарольДоступенВсемНаСервере()
	
	Если Элементы.ПользователиПароляДоступенВсем.Пометка Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем()
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.НадписьДоступенПользователю.Заголовок = НСтр("ru = 'Пароль доступен пользователю:'")
			+ " " + Пользователь;
	Иначе
		Элементы.НадписьДоступенПользователю.Заголовок = НСтр("ru = 'Пароль доступен всем пользователям.'")
	КонецЕсли;
	
	Элементы.ПользователиПароляДоступенВсем.Пометка = НЕ ЗначениеЗаполнено(Пользователь);
	
КонецПроцедуры

#КонецОбласти
