// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Владелец; // ОбработкаОбъектИмяОбработки
Перем ВладелецРеквизитПараметры; // см. ВладелецРеквизитПараметры
Перем ПараметрыПоУмолчанию; // см. НовыеПараметрыОбработкиОшибки
Перем ТабличныеЧастиВладельца; // КоллекцияОбъектовМетаданных Из ОбъектМетаданныхТабличнаяЧасть
Перем ПодсистемаРегистрацииОшибок; // Строка
Перем ОшибкаЗаполнения; // Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  см. НовыеПараметрыОбработкиОшибки
//
Функция ПараметрыСвязиПоУмолчанию(Ссылка = Неопределено) Экспорт
	Если ПараметрыПоУмолчанию = Неопределено Тогда
		ПараметрыПоУмолчанию = НовыеПараметрыОбработкиОшибки();
		ПараметрыПоУмолчанию.Ссылка = Ссылка;
	КонецЕсли;
	Возврат ПараметрыПоУмолчанию;
КонецФункции

// Параметры:
//  Таблица - СтрокаТабличнойЧасти
//  Реквизит - Строка
//  ПутьКДаннымСсылки - Строка
//  НомерСтроки - Число
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  см. НовыеПараметрыОбработкиОшибки
//
Функция УстановитьСвязь(Таблица, Реквизит, ПутьКДаннымСсылки = Неопределено, НомерСтроки = Неопределено,
		Ссылка = Неопределено) Экспорт
		
	Если ВладелецРеквизитПараметры[Таблица] = Неопределено Тогда
		ВладелецРеквизитПараметры.Вставить(Таблица, Новый Соответствие);
	КонецЕсли;
	Если ВладелецРеквизитПараметры[Таблица][Реквизит] = Неопределено Тогда
		Если Ссылка = Неопределено Тогда
			ШаблонПараметров = ПараметрыСвязиПоУмолчанию();
			НовыеПараметры = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметров);
		Иначе
			НовыеПараметры = НовыеПараметрыОбработкиОшибки();
			НовыеПараметры.Ссылка = Ссылка;
		КонецЕсли;
		ВладелецРеквизитПараметры[Таблица].Вставить(Реквизит, НовыеПараметры);
	КонецЕсли;
	Если ТипЗнч(ПутьКДаннымСсылки) = Тип("Строка") И ЗначениеЗаполнено(ПутьКДаннымСсылки) Тогда
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			ЧастиПути = СтрРазделить(ПутьКДаннымСсылки, ".");
			Если ЧастиПути.Количество() > 1 Тогда
				ИндексТаблицы = ЧастиПути.ВГраница() - 1;
				ЧастиПути[ИндексТаблицы] = СтрШаблон("%1[%2]", ЧастиПути[ИндексТаблицы], НомерСтроки - 1);
			КонецЕсли;
			ПолныйПуть = СтрСоединить(ЧастиПути, ".");
		Иначе
			ПолныйПуть = ПутьКДаннымСсылки;
		КонецЕсли;
		ВладелецРеквизитПараметры[Таблица][Реквизит].Реквизит = ПолныйПуть;
	КонецЕсли;
	Возврат ВладелецРеквизитПараметры[Таблица][Реквизит];
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Данные - СтрокаТабличнойЧасти
//  ПроверяемыеРеквизиты - Массив Из Строка
// 
// Возвращаемое значение:
//  Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Функция ПроверитьЗаполнениеДанных(Данные, ПроверяемыеРеквизиты) Экспорт
	ОшибкаЗаполнения = Новый Массив;
	СтруктураПроверки = СтруктураПроверяемыхРеквизитов(ПроверяемыеРеквизиты);
	Метаинформация = Метаданные.НайтиПоТипу(ТипЗнч(Данные)); // ОбъектМетаданныхТабличнаяЧасть
	Если Метаинформация <> Неопределено И ТабличныеЧастиВладельца.Содержит(Метаинформация) Тогда
		ПроверитьДанныеРекурсивно(Данные, Метаинформация, СтруктураПроверки);
	КонецЕсли;
	ПроверяемыеРеквизиты.Очистить();
	Возврат ОшибкаЗаполнения;
КонецФункции

Процедура ТранслироватьОшибку(СтрокаТаблицы, ИмяРеквизита, СинонимРеквизита) Экспорт
	
	ПараметрыОшибки = ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки();
	ПараметрыОшибки.ТекстОшибки = СтрШаблон("Не заполнено поле: ""%1""", СинонимРеквизита);
	
	Если ЗначениеЗаполнено(ВладелецРеквизитПараметры[СтрокаТаблицы])
	И ЗначениеЗаполнено(ВладелецРеквизитПараметры[СтрокаТаблицы][ИмяРеквизита]) Тогда
		Параметры = ВладелецРеквизитПараметры[СтрокаТаблицы][ИмяРеквизита];
		ПараметрыОшибки.КлючСообщения = Параметры.Ссылка;
		ПараметрыОшибки.ПутьКДаннымСообщения = Параметры.Реквизит;
	КонецЕсли;
	
	ОшибкаЗаполнения.Добавить(ПараметрыОшибки);
	
КонецПроцедуры

// Параметры:
//  НовыйВладелец - ОбработкаОбъектИмяОбработки
//
Процедура Инициализировать(НовыйВладелец) Экспорт
	Владелец = НовыйВладелец;
	ТабличныеЧастиВладельца = Владелец.Метаданные().ТабличныеЧасти;
	ВладелецРеквизитПараметры = ВладелецРеквизитПараметры();
	ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	ОшибкаЗаполнения = Новый Массив;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - Неопределено, ЛюбаяСсылка - Владелец реквизита.
//  * Реквизит - Строка - Имя реквизита.
//
Функция НовыеПараметрыОбработкиОшибки()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Неопределено);
	СтруктураПараметров.Вставить("Реквизит", "");
	Возврат СтруктураПараметров;
КонецФункции

// Параметры:
//  Данные - СтрокаТабличнойЧасти
//  Метаинформация - ОбъектМетаданныхТабличнаяЧасть
//  СтруктураПроверки - см. СтруктураПроверяемыхРеквизитов
//
Процедура ПроверитьДанныеРекурсивно(Данные, Метаинформация, СтруктураПроверки)
	ОбязательныеРеквизиты = СтруктураПроверки[Метаинформация.Имя];
	Если ТипЗнч(ОбязательныеРеквизиты) = Тип("Неопределено") Тогда
		ОбязательныеРеквизиты = Новый Соответствие;
	КонецЕсли;
	Для Каждого Реквизит Из Метаинформация.Реквизиты Цикл
		ЗначениеРеквизита = Данные[Реквизит.Имя]; // Произвольный
		Если ОбязательныеРеквизиты[Реквизит.Имя] <> Неопределено Тогда
			ТипЗначения = ТипЗнч(ЗначениеРеквизита);
			МетаинформацияЗначения = Метаданные.НайтиПоТипу(ТипЗначения);
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ТранслироватьОшибку(Данные, Реквизит.Имя, Реквизит.Синоним);
			ИначеЕсли ТипЗначения = Тип("Массив") Тогда
				ПроверитьМассив(ЗначениеРеквизита, СтруктураПроверки);
			ИначеЕсли МетаинформацияЗначения <> Неопределено И ТабличныеЧастиВладельца.Содержит(МетаинформацияЗначения) Тогда
				// Условие гарантирует типы переменных ЗначениеРеквизита и МетаинформацияЗначения
				//@skip-check invocation-parameter-type-intersect
				ПроверитьДанныеРекурсивно(ЗначениеРеквизита, МетаинформацияЗначения, СтруктураПроверки);
			Иначе
				Параметры = Новый Структура("ИмяРеквизита, ИмяТаблицы, ТипЗначения", Реквизит.Имя, Метаинформация.Имя,
					ТипЗначения);
				Шаблон = НСтр(
					"ru = 'Не удалось выполнить проверку реквизита ""[ИмяРеквизита]"" таблицы ""[ИмяТаблицы]"":
					|Неизвестный тип значения ""[ТипЗначения]"".'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Параметры);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
					УровеньЖурналаРегистрации.Предупреждение);
			КонецЕсли;
		// Если реквизит не обязателен, но заполнен, нужно проверить обязательные реквизиты внутри.
		ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ТипЗначения = ТипЗнч(ЗначениеРеквизита);
			МетаинформацияЗначения = Метаданные.НайтиПоТипу(ТипЗначения);
			Если ТипЗначения = Тип("Массив") Тогда
				ПроверитьМассив(ЗначениеРеквизита, СтруктураПроверки);
			ИначеЕсли МетаинформацияЗначения <> Неопределено И ТабличныеЧастиВладельца.Содержит(МетаинформацияЗначения) Тогда
				// Условие гарантирует типы переменных ЗначениеРеквизита и МетаинформацияЗначения
				//@skip-check invocation-parameter-type-intersect
				ПроверитьДанныеРекурсивно(ЗначениеРеквизита, МетаинформацияЗначения, СтруктураПроверки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьМассив(Массив, СтруктураПроверки)
	Для Каждого Элемент Из Массив Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		МетаинформацияЭлемента = Метаданные.НайтиПоТипу(ТипЭлемента);
		Если МетаинформацияЭлемента <> Неопределено И ТабличныеЧастиВладельца.Содержит(МетаинформацияЭлемента) Тогда
			// Условие гарантирует типы переменных Элемент и МетаинфорацияЭлемента
			//@skip-check invocation-parameter-type-intersect
			ПроверитьДанныеРекурсивно(Элемент, МетаинформацияЭлемента, СтруктураПроверки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  ПроверяемыеРеквизиты - Массив Из Строка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//  * Ключ - Строка - Имя таблицы
//  * Значение - Соответствие Из КлючИЗначение:
//  ** Ключ - Строка - Имя реквизита
//
Функция СтруктураПроверяемыхРеквизитов(ПроверяемыеРеквизиты)
	Путь = Новый Структура("Таблица, Реквизит", "", "");
	Таблицы = Новый Соответствие;
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		ЧастиПути = СтрРазделить(ПроверяемыйРеквизит, ".");
		Если ЧастиПути.Количество() = Путь.Количество() Тогда
			Путь.Таблица = ЧастиПути[0];
			Путь.Реквизит = ЧастиПути[1];
			РеквизитыТаблицы = Таблицы[Путь.Таблица];
			Если ТипЗнч(РеквизитыТаблицы) = Тип("Соответствие") Тогда
				РеквизитыТаблицы.Вставить(Путь.Реквизит, Истина);
			Иначе
				РеквизитыТаблицы = Новый Соответствие;
				РеквизитыТаблицы.Вставить(Путь.Реквизит, Истина);
				Таблицы.Вставить(Путь.Таблица, РеквизитыТаблицы);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Возврат Таблицы;
КонецФункции

// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//  * Ключ - СтрокаТабличнойЧасти
//  * Значение - Соответствие Из КлючИЗначение:
//  ** Ключ - Строка - Имя реквизита табличной части
//  ** Значение - см. НовыеПараметрыОбработкиОшибки
//
Функция ВладелецРеквизитПараметры()
	Возврат Новый Соответствие;
КонецФункции

#КонецОбласти

#КонецЕсли