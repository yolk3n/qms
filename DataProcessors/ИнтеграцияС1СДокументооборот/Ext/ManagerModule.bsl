#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает значения реквизитов состояний в форме документа Документооборота
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа 1С:Документооборота
//   ОбъектXDTO - ОбъектXDTO - документ, по которому будут заполнены состояния
//
Процедура УстановитьСостоянияДокумента(Форма, ОбъектXDTO) Экспорт
	
	// независимые состояния документа
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Возврат
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.statusRegistration,
		"СостояниеРегистрация");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.statusConsideration,
		"СостояниеРассмотрение");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.statusApproval,
		"СостояниеСогласование");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.statusConfirmation,
		"СостояниеУтверждение");
	Если Форма.Тип = "DMInternalDocument"
			И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.statusSigning,
			"СостояниеПодписание");
	КонецЕсли;
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.statusPerformance,
		"СостояниеИсполнение");
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("СостояниеСогласование");
	Реквизиты.Вставить("СостояниеУтверждение");
	Если Форма.Тип = "DMInternalDocument" Тогда
		Реквизиты.Вставить("СостояниеПодписание");
	КонецЕсли;
	Реквизиты.Вставить("СостояниеРегистрация");
	Реквизиты.Вставить("СостояниеРассмотрение");
	Реквизиты.Вставить("СостояниеИсполнение");
	Форма.СостояниеСписок.Очистить();
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Если ЗначениеЗаполнено(Форма[ИмяРеквизита + "ID"]) Тогда
			Форма.СостояниеСписок.Добавить(Форма[ИмяРеквизита + "ID"], Форма[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	Если Форма.СостояниеСписок.Количество() > 1 Тогда
		Для Каждого Элемент Из Форма.СостояниеСписок Цикл
			Если Элемент.Значение = "Проект" Тогда
				Форма.СостояниеСписок.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает заголовок документа в зависимости от типа интегрированного объекта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа 1С:Документооборота:
//     * Наименование - Строка
//
Процедура УстановитьЗаголовокДокумента(Форма) Экспорт
	
	ПредставлениеТипа = "";
	Если Форма.Тип = "DMInternalDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Внутренний документ'");
	ИначеЕсли Форма.Тип = "DMIncomingDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Входящий документ'");
	ИначеЕсли Форма.Тип = "DMOutgoingDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Исходящий документ'");
	КонецЕсли;
	
	ПредставлениеДокумента = "";
	Если ЗначениеЗаполнено(Форма.ВнешнийОбъект) Тогда
		Если ОбщегоНазначения.ЭтоДокумент(Форма.ВнешнийОбъект.Метаданные()) Тогда
			ПредставлениеДокумента = Форма.Наименование;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПредставлениеДокумента) И ЗначениеЗаполнено(Форма.Представление) Тогда
		ПредставлениеДокумента = Форма.Представление;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Форма.ID) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (создание)'"), ПредставлениеТипа);
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), ПредставлениеДокумента, ПредставлениеТипа);
	КонецЕсли;
		
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

// Устанавливает свойства элементов хронометража формы
//
// Параметры:
//   ВключенХронометраж - Булево
//   КомандаПереключитьХронометраж - КомандаФормы
//   ЭлементПереключитьХронометраж - КнопкаФормы
//
Процедура УстановитьСвойстваЭлементовХронометража(ВключенХронометраж, КомандаПереключитьХронометраж,
		ЭлементПереключитьХронометраж) Экспорт
	
	Если ВключенХронометраж Тогда // хронометраж включен
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Закончить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Истина;
	Иначе
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Включить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры хронометража объекта Документооборота.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта Документооборота.
//   ОбъектXDTO - ОбъектXDTO - содержит настройки хронометража.
//
Процедура ЗаполнитьПараметрыХронометража(Форма, ОбъектXDTO) Экспорт
	
	// хронометраж
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMGetChronometrationSettingsResponse")
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMSetChronometrationSettingsResponse") Тогда
			Параметры = ОбъектXDTO.settings[0];
		Иначе
			Параметры = ОбъектXDTO.chronometrationSettings;
		КонецЕсли;
		Форма.ВключенХронометраж = Параметры.chronometrationOn;
		Форма.ДатаНачалаХронометража = Параметры.beginDate;
		Форма.ДатаКонцаХронометража = Параметры.endDate;
		УстановитьСвойстваЭлементовХронометража(Форма.ВключенХронометраж,
			Форма.Команды.ПереключитьХронометраж, Форма.Элементы.ФормаПереключитьХронометраж);
	КонецЕсли;
	
КонецПроцедуры

// Инвертирует значение хронометража
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//
Процедура ПереключитьХронометраж(Форма) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMSetChronometrationSettingsRequest");
	ОбъектID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, Форма.ID, Форма.Тип);
	СписокОбъектов = Запрос.objects; // СписокXDTO
	СписокОбъектов.Добавить(ОбъектID);
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	ЗаполнитьПараметрыХронометража(Форма, Результат);
	
КонецПроцедуры

// Заполняет дерево связей в форме по объекту XDTO и начинает асинхронное получение файлов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - заполняемая форма обработки ИнтеграцияС1СДокументооборот.
//   ОбъектXDTO - ОбъектXDTO - объект, из которого заполняются реквизиты формы.
//   ЭлементДляОбновленияЗаголовка - ПолеФормы, ГруппаФормы - элемент, чей заголовок обновляется.
//   ДобавленныйДокумент - Строка - идентификатор документа, файлы которого следует обновить, или
//                       - Неопределено - признак необходимости обновить все файлы.
//
// Возвращаемое значение:
//   Строка - адрес в хранилище, куда будут помещены сведения о файлах.
//
Функция ЗаполнитьДеревоСвязейИНачатьПолучениеФайлов(Форма, ОбъектXDTO,
		ЭлементДляОбновленияЗаголовка = Неопределено, ДобавленныйДокумент = Неопределено) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить("relations") = Неопределено
			Или Не ОбъектXDTO.Установлено("relations") Тогда
		
		ЭлементыДерева = Форма.ДеревоСвязей.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
		
		Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
			ЭлементДляОбновленияЗаголовка.Заголовок = НСтр("ru = 'Связи'");
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей"); // ДеревоЗначений
	
	// Сохраним файлы текущих документов.
	КэшФайлов = Новый Соответствие;
	Для Каждого СтрокаТип Из Дерево.Строки Цикл
		Для Каждого СтрокаДокумент Из СтрокаТип.Строки Цикл
			ФайлыДокумента = Новый Массив;
			Для Каждого СтрокаФайл Из СтрокаДокумент.Строки Цикл
				Файл = Новый Структура;
				Файл.Вставить("ID", СтрокаФайл.ID);
				Файл.Вставить("Тип", СтрокаФайл.Тип);
				Файл.Вставить("Заголовок", СтрокаФайл.Заголовок);
				Файл.Вставить("Расширение", СтрокаФайл.Расширение);
				Файл.Вставить("Картинка", СтрокаФайл.Картинка);
				ФайлыДокумента.Добавить(Файл);
			КонецЦикла;
			Если ФайлыДокумента.Количество() > 0 Тогда
				КэшФайлов.Вставить(СтрокаДокумент.ID, ФайлыДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Дерево.Строки.Очистить();
	
	ЗаполнятьАвансовыйОтчет =
		(ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP")
		И Форма.ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент"
		И Форма.ЯвляетсяЗаявкойНаОплату);
	
	СвязанныеДокументы = Новый Массив;
	
	Для Каждого Связь Из ОбъектXDTO.relations Цикл
		
		// Найдем строку связи по типу или создадим ее.
		НайденнаяСтрока = Дерево.Строки.Найти(Связь.relationType.name, "Заголовок", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТипСвязи = НайденнаяСтрока;
		Иначе
			СтрокаТипСвязи = Дерево.Строки.Добавить();
			СтрокаТипСвязи.Заголовок = Связь.relationType.name;
			СтрокаТипСвязи.ID = Связь.relationType.objectID.ID;
			СтрокаТипСвязи.Тип = Связь.relationType.objectID.type;
		КонецЕсли;
		
		// Добавим строку для документа.
		СтрокаДокумент = СтрокаТипСвязи.Строки.Добавить();
		Если ЗначениеЗаполнено(Связь.relatedDocument.regNumber)
			И ЗначениеЗаполнено(Связь.relatedDocument.regDate) Тогда
			СтрокаДокумент.Заголовок = СтроковыеФункцииКлиентСервер.
				ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (№ %2 от %3)'"),
					Связь.relatedDocument.title,
					Связь.relatedDocument.regNumber,
					Связь.relatedDocument.regDate);
		Иначе
			СтрокаДокумент.Заголовок = Связь.relatedDocument.title;
		КонецЕсли;
		СтрокаДокумент.Тип = Связь.relatedDocument.objectID.type;
		СтрокаДокумент.ID = Связь.relatedDocument.objectID.ID;
		СтрокаДокумент.РегистрационныйНомер = Связь.relatedDocument.regNumber;
		СтрокаДокумент.ДатаРегистрации = Связь.relatedDocument.regDate;
		
		ФайлыДокумента = КэшФайлов.Получить(СтрокаДокумент.ID);
		Если ФайлыДокумента <> Неопределено Тогда
			Для Каждого Файл Из ФайлыДокумента Цикл
				СтрокаФайл = СтрокаДокумент.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФайл, Файл);
			КонецЦикла;
		КонецЕсли;
		
		// Подготовим параметры для асинхронного получения файлов.
		Если ДобавленныйДокумент = Неопределено
			Или ДобавленныйДокумент = Связь.relatedDocument.objectID.ID Тогда
			СвязанныйДокумент = Новый Структура;
			СвязанныйДокумент.Вставить("ID", Связь.relatedDocument.objectID.ID);
			СвязанныйДокумент.Вставить("Тип", Связь.relatedDocument.objectID.type);
			СвязанныеДокументы.Добавить(СвязанныйДокумент);
		КонецЕсли;
		
		Если ЗаполнятьАвансовыйОтчет И Связь.relationType.predefinedName = "АвансовыйОтчет" Тогда //@NON-NLS-1
			Форма.АвансовыйОтчет = Связь.relatedDocument.name;
			Форма.АвансовыйОтчетID = Связь.relatedDocument.objectID.ID;
			Форма.АвансовыйОтчетТип = Связь.relatedDocument.objectID.type;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
		Если ОбъектXDTO.relations.Количество() = 0 Тогда 
			ТекстЗаголовка = НСтр("ru = 'Связи'");
		Иначе
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Связи (%1)'"),
				ОбъектXDTO.relations.Количество());
		КонецЕсли;
		ЭлементДляОбновленияЗаголовка.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Если СвязанныеДокументы.Количество() > 0 Тогда
		Возврат ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументов(
			СвязанныеДокументы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает описания файлов по списку связанных документов-владельцев.
//
// Параметры:
//   СвязанныеДокументы - Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//
// Возвращаемое значение:
//   Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//     * Файлы - Массив из Структура:
//         ** ID - Строка - идентификатор файла.
//         ** Тип - Строка - тип файла (DMFile).
//         ** Наименование - Строка - имя без расширения.
//         ** Расширение - Строка - расширение файла.
//
Функция ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокВладельцевXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъекты(
		Прокси,
		СвязанныеДокументы,
		"files");
	
	Результат = Новый Массив;
	
	Для Каждого ВладелецXDTO Из СписокВладельцевXDTO Цикл
		
		Владелец = Новый Структура;
		Владелец.Вставить("ID", ВладелецXDTO.objectID.ID);
		Владелец.Вставить("Тип", ВладелецXDTO.objectID.type);
		Владелец.Вставить("Файлы", Новый Массив);
		
		Для Каждого ФайлXDTO Из ВладелецXDTO.files Цикл
			Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
				ФайлXDTO.name,
				ФайлXDTO.objectID.ID,
				ФайлXDTO.objectID.type,
				ФайлXDTO.extension);
			Владелец.Файлы.Добавить(Файл);
		КонецЦикла;
		
		Результат.Добавить(Владелец);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет дерево связей автоматически по ссылкам в объекте интегрируемой конфигурации.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - заполняемая форма обработки ИнтеграцияС1СДокументооборот.
//   ОбъектИС - ЛюбаяСсылка - объект, на основании которого заполняется объект ДО.
//   ЭлементДляОбновленияЗаголовка - ПолеФормы, ГруппаФормы - элемент, чей заголовок обновляется.
//
Процедура ЗаполнитьСвязиНовогоДокумента(Форма, ОбъектИС, ЭлементДляОбновленияЗаголовка) Экспорт
	
	ПодходящиеОбъекты = ИнтеграцияС1СДокументооборот.ПолучитьПодходящиеОбъектыДляДобавленияСвязей(ОбъектИС);
	
	Если ПодходящиеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = Новый Структура("ID, Тип",
		Форма.ВидДокументаID,
		Форма.ВидДокументаТип);
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей");
	КоличествоСвязей = 0;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Для Каждого ПодходящийОбъект Из ПодходящиеОбъекты Цикл
		
		СвязываемыйДокумент = Новый Структура("Ссылка, Заголовок",
			ПодходящийОбъект,
			Строка(ПодходящийОбъект));
			
		Попытка
			СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
				ПодходящийОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось получить связанный объект Документооборота при автоматическом создании связей: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
			
		Если СвязанныйОбъектДО = Неопределено Тогда
			
			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПодходящийОбъект);
			Если Правила.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правила[0].ТипОбъектаДО) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидСвязываемогоДокумента = Новый Структура("ID, Тип",
				Правила[0].ИдентификаторВидаДокумента,
				Правила[0].ТипВидаДокумента);
			
			СвязываемыйДокумент.Вставить("Правило", Правила[0].Ссылка);
			
		Иначе // получим связи по виду существующего документа
			
			Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СвязанныйОбъектДО.type) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидСвязываемогоДокумента = Новый Структура("ID, Тип",
				СвязанныйОбъектДО.documentType.ID,
				СвязанныйОбъектДО.documentType.type);
			
			СвязываемыйДокумент.Вставить("ID", СвязанныйОбъектДО.ID);
			СвязываемыйДокумент.Вставить("Тип", СвязанныйОбъектДО.type);
			
		КонецЕсли;
		
		Условия = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		СписокУсловийОтбора = Условия.conditions; // СписокXDTO
		
		УсловиеИз = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеИз.property = "DocumentFrom";
		УсловиеИз.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ВидДокумента.ID,
			ВидДокумента.Тип);
		СписокУсловийОтбора.Добавить(УсловиеИз);
		
		УсловиеВ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеВ.property = "DocumentTo";
		УсловиеВ.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ВидСвязываемогоДокумента.ID,
			ВидСвязываемогоДокумента.Тип);
		СписокУсловийОтбора.Добавить(УсловиеВ);
		
		УсловиеПредопределенная = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеПредопределенная.property = "Predefined";
		УсловиеПредопределенная.value = Ложь;
		СписокУсловийОтбора.Добавить(УсловиеПредопределенная);
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			"DMRelationType",
			Условия);
		
		Если Результат.items.Количество() > 1 Тогда
			Продолжить;
		ИначеЕсли Результат.items.Количество() = 1 Тогда
			ТипСвязиXDTO = Результат.items[0].object;
			ТипСвязи = Новый Структура("ID, Тип, Заголовок",
				ТипСвязиXDTO.objectID.ID,
				ТипСвязиXDTO.objectID.type,
				ТипСвязиXDTO.name);
		Иначе // предопределенный
			ТипСвязи = Новый Структура("ID, Тип, Заголовок",
				"",
				"DMRelationType",
				НСтр("ru = 'Содержит ссылку на'"));
		КонецЕсли;
			
		ПодходящиеСтрокиДерева = Дерево.Строки.НайтиСтроки(ТипСвязи);
		Если ПодходящиеСтрокиДерева.Количество() = 0 Тогда
			СтрокаТипа = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТипа, ТипСвязи);
		Иначе
			СтрокаТипа = ПодходящиеСтрокиДерева[0];
		КонецЕсли;
		
		ПодходящиеСтрокиДерева = СтрокаТипа.Строки.НайтиСтроки(СвязываемыйДокумент);
		Если ПодходящиеСтрокиДерева.Количество() = 0 Тогда
			СтрокаДокумента = СтрокаТипа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СвязываемыйДокумент);
			СтрокаДокумента.СвязьНовогоДокумента = Истина;
			КоличествоСвязей = КоличествоСвязей + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Если КоличествоСвязей = 0 Тогда 
		ТекстЗаголовка = НСтр("ru = 'Связи'");
	Иначе
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'Связи (%1)'"),
			КоличествоСвязей);
	КонецЕсли;
	ЭлементДляОбновленияЗаголовка.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Создает в ДО связи нового документа, добавленные автоматически при его создании на основании
// объекта ИС, но еще не записанные.
//
// Параметры:
//   ДеревоСвязей - ДанныеФормыДерево - дерево связей в форме документа.
//   ID - Строка - идентификатор документа-владельца.
//   Тип - Строка - тип документа-владельца.
//   Представление - Строка - представление документа-владельца.
//
Процедура ЗаписатьСвязиНовогоДокумента(ДеревоСвязей, ID, Тип, Представление) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
		ID,
		Тип,
		Представление);
	
	СтрокиТиповСвязей = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого СтрокаТипаСвязи Из СтрокиТиповСвязей Цикл
		
		Если ЗначениеЗаполнено(СтрокаТипаСвязи.ID) Тогда
			ТипСвязи = Новый Структура("ID, Тип, Представление",
				СтрокаТипаСвязи.ID,
				СтрокаТипаСвязи.Тип,
				СтрокаТипаСвязи.Заголовок);
		Иначе
			ТипСвязи = Неопределено;
		КонецЕсли;
		
		СтрокиДокументов = СтрокаТипаСвязи.ПолучитьЭлементы();
		Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
			
			Если Не СтрокаДокумента.СвязьНовогоДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ID) Тогда
				
				СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
					СтрокаДокумента.ID,
					СтрокаДокумента.Тип,
					СтрокаДокумента.Заголовок);
				
			Иначе
				
				НовыйОбъектДО = ИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(
					Прокси,
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Правило);
				
				Если ТипЗнч(НовыйОбъектДО) = Тип("ОбъектXDTO") Тогда
					
					СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
						НовыйОбъектДО.objectID.ID,
						НовыйОбъектДО.objectID.type,
						НовыйОбъектДО.name);
					
				Иначе // сообщение об ошибке
					
					ИмяСобытия = НСтр("ru = 'Автоматическое создание связанного объекта'");
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(ИмяСобытия), 
						УровеньЖурналаРегистрации.Ошибка,,,
						НовыйОбъектДО);
					
					ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось создать связанный документ для ""%1"":
						|%2'"),
						СтрокаДокумента.Заголовок,
						НовыйОбъектДО);
					ВызватьИсключение ТекстИсключения;
				
				КонецЕсли;
				
			КонецЕсли;
			
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент,
				СвязываемыйДокумент,
				ТипСвязи);
			
			СтрокаДокумента.СвязьНовогоДокумента = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Передает в ДО файлы нового документа.
//
// Параметры:
//   Файлы - ДанныеФормыКоллекция - список файлов в форме документа.
//   ВладелецID - Строка - идентификатор документа-владельца.
//   ВладелецТип - Строка - тип документа-владельца.
//   ВладелецПредставление - Строка - представление документа-владельца.
//   Владелец - ЛюбаяСсылка - документ-владельца.
//
Процедура ЗаписатьФайлыНовогоДокумента(Файлы, ВладелецID, ВладелецТип, ВладелецПредставление, Владелец) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		
		Если ЗначениеЗаполнено(Файл.ID) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			Файл.Наименование,
			Неопределено,
			"DMFile",
			Файл.Расширение);
		
		ПараметрыСоздания = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(
			ТекущийФайл);
		ПараметрыСоздания.Владелец = Владелец;
		
		Если ЗначениеЗаполнено(Файл.АдресВременногоХранилищаФайла) Тогда
			// Передадим в ДО печатные формы, которые могли быть добавлены на стороне ИС до записи документа.
			ПараметрыСоздания.ТекущийФайл.Размер = Файл.Размер;
			ПараметрыСоздания.ТекущийФайл.ДатаМодификации = Файл.ДатаСоздания;
			ПараметрыСоздания.ТекущийФайл.ДатаМодификацииУниверсальная = Файл.ДатаМодификацииУниверсальная;
			ПараметрыСоздания.АдресВременногоХранилищаФайла = Файл.АдресВременногоХранилищаФайла;
		ИначеЕсли ЗначениеЗаполнено(Файл.ШаблонID) Тогда
			// Создадим в ДО файлы по их шаблонам, скопированным из шаблона документа и хранящимся в ДО.
			ПараметрыСоздания.ШаблонID = Файл.ШаблонID;
		КонецЕсли;
		
		Файл.ID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьФайлВДокументообороте(
			ПараметрыСоздания,
			ВладелецID,
			ВладелецТип,
			ВладелецПредставление);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает видимость группы информации о недоступности функционала версии веб-сервиса.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта или списка 1С:Документооборота
//
Процедура ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(Форма) Экспорт
	
	Форма.Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
	Форма.Элементы.ДекорацияФункционалНеПоддерживается.Заголовок =
		НСтр("ru='Функционал не поддерживается в данной версии 1С:Документооборота.'");
	
	Форма.ТолькоПросмотр = Истина;
	
КонецПроцедуры

// Заполняет стандартные реквизиты бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая бизнес-процессу:
//     * ДатаНачала - Дата
//     * Наименование - Строка
//     * Описание - Строка
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьСтандартнуюШапкуБизнесПроцесса(Форма, ОбъектXDTO) Экспорт
	
	Форма.Стартован = ОбъектXDTO.started;
	Форма.Завершен = ОбъектXDTO.completed;
	Форма.ДатаНачала = ОбъектXDTO.beginDate;
	Форма.ДатаЗавершения = ОбъектXDTO.endDate;
	Форма.Наименование = ОбъектXDTO.name;
	Если ОбъектXDTO.objectID.Свойства().Получить("presentation") <> Неопределено Тогда
		Форма.Заголовок = ОбъектXDTO.objectID.presentation;
	Иначе
		Форма.Заголовок = ОбъектXDTO.name;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокДата") <> Неопределено Тогда
		Форма.Срок = ОбъектXDTO.dueDate;
	КонецЕсли;
	Если Форма.Элементы.Найти("Описание") <> Неопределено Тогда
		Форма.Описание = ОбъектXDTO.description;
	КонецЕсли;
	Форма.Тип = ОбъектXDTO.objectID.type;
	Если ОбъектXDTO.objectID.Свойства().Получить("presentation") <> неопределено Тогда
		Форма.Представление = ОбъектXDTO.objectID.presentation;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.author,
		"Автор");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.parentTask,
		"ГлавнаяЗадача");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ОбъектXDTO.state,
		"Состояние");
	
	Если Форма.Параметры.Свойство("ГлавнаяЗадача") И Не ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Форма.ГлавнаяЗадача = Форма.Параметры.ГлавнаяЗадача.name;
		Форма.ГлавнаяЗадачаID = Форма.Параметры.ГлавнаяЗадача.ID;
		Форма.ГлавнаяЗадачаТип = Форма.Параметры.ГлавнаяЗадача.type;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Если Форма.Элементы.Найти("ГлавнаяЗадачаПредставление") <> Неопределено Тогда
			Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПредметыВФорме(Форма, ОбъектXDTO);
	
	Если Форма.Элементы.Найти("ГруппаСостояние") <> Неопределено Тогда
		Если Форма.СостояниеID = "Остановлен" Тогда //@NON-NLS-1
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр("ru = 'Остановлен'");
			Форма.КартинкаСостояние = 1;
		ИначеЕсли Форма.СостояниеID = "Прерван" Тогда //@NON-NLS-1
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр("ru = 'Прерван'");
			Форма.КартинкаСостояние = 2;
		ИначеЕсли ОбъектXDTO.completionMark = "ReadyToStart" Тогда
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр("ru = 'Старт отложен'");
			Форма.КартинкаСостояние = 3;
		ИначеЕсли ОбъектXDTO.completionMark = "StartCanceled" Тогда
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр("ru = 'Старт отменен'");
			Форма.КартинкаСостояние = 4;
		ИначеЕсли ОбъектXDTO.completionMark = "ReadyToExecute" Тогда
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр(
				"ru = 'Процесс находится в очереди для запуска. Его старт произойдет автоматически в ближайшее время.'");
			Форма.КартинкаСостояние = 0;
		ИначеЕсли ОбъектXDTO.completionMark = "ExecutionCanceled" Тогда
			Форма.Элементы.ГруппаСостояние.Видимость = Истина;
			Форма.Элементы.ТекстСостояние.Заголовок = НСтр("ru = 'Ошибка при старте процесса'");
			Форма.КартинкаСостояние = 0;
		Иначе
			Форма.Элементы.ГруппаСостояние.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ВидПроцессаПредставление") <> Неопределено Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "processType") Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
				Форма,
				ОбъектXDTO.processType,
				"ВидПроцесса");
			Форма.Элементы.ВидПроцессаПредставление.Видимость = Истина;
		Иначе
			Форма.ВидПроцесса = "Утверждение";
			Форма.ВидПроцессаID = "Утверждение"; //@NON-NLS-1
			Форма.ВидПроцессаТип = "DMProcessConfirmationType";
			Форма.Элементы.ВидПроцессаПредставление.Видимость = Ложь;
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "target")
				И ОбъектXDTO.target.objectID.type = "DMInternalDocument" Тогда
			Форма.Элементы.ВидПроцессаПредставление.Видимость = Ложь;
		КонецЕсли;
		Если Не Форма.Элементы.ВидПроцессаПредставление.Видимость Тогда
			Форма.Заголовок = Форма.ВидПроцесса;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ВажностьПредставление") <> Неопределено
			Или Форма.Элементы.Найти("Важность") <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.importance,
			"Важность");
	КонецЕсли;
	
	Если ОбъектXDTO.started Или ОбъектXDTO.completed Тогда
		Форма.ТолькоПросмотр = Истина;
		Если Форма.Элементы.Найти("ФормаСтартоватьИЗакрыть") <> Неопределено Тогда
			Форма.Элементы.ФормаСтартоватьИЗакрыть.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("ФормаЗаполнитьПоШаблону") <> Неопределено Тогда
			Форма.Элементы.ФормаЗаполнитьПоШаблону.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("ИсполнителиГруппаПеремещение") <> Неопределено Тогда
			Форма.Элементы.ИсполнителиГруппаПеремещение.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияДней") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияДней.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияЧасов.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ОбъектXDTO.completed Тогда
			Форма.Элементы.ФормаЗаписать.Доступность = Ложь;
			Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
				Форма.Элементы.Предметы.Доступность = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ФормаДобавитьПредмет") <> Неопределено Тогда
				Форма.Элементы.ФормаДобавитьПредмет.Доступность = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ФормаУдалитьПредмет") <> Неопределено Тогда
				Форма.Элементы.ФормаУдалитьПредмет.Доступность = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ДобавитьПредмет") <> Неопределено Тогда
				Форма.Элементы.ДобавитьПредмет.Доступность = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("УдалитьПредмет") <> Неопределено Тогда
				Форма.Элементы.УдалитьПредмет.Доступность = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ДобавитьПредметИзДекорации") <> Неопределено Тогда
				Форма.Элементы.ДобавитьПредметИзДекорации.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("state") И ОбъектXDTO.state.objectID.ID = "Прерван" Тогда //@NON-NLS-2
		Форма.Элементы.ФормаЗаписать.Доступность = Ложь;
		Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
			Форма.Элементы.Предметы.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение формы в зависимости от функциональных опций.
	Если Форма.Элементы.Найти("ГлавнаяЗадачаПредставление") <> Неопределено Тогда
		Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = ОбъектXDTO.parentTaskEnabled;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокВремя") <> Неопределено Тогда
		Форма.Элементы.СрокВремя.Видимость = ОбъектXDTO.dueTimeEnabled;
	ИначеЕсли Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
		Форма.Элементы.СрокИсполненияЧасов.Видимость = ОбъектXDTO.dueTimeEnabled;
		Форма.Элементы.Часов.Видимость = ОбъектXDTO.dueTimeEnabled;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ID) Тогда
		Форма.Заголовок = СтрШаблон(НСтр("ru = '%1 (Создание)'"), Форма.Заголовок);
		Если Форма.Элементы.Найти("ГруппаИнфо") <> Неопределено Тогда
			Форма.Элементы.ГруппаИнфо.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предметы бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая бизнес-процессу:
//     * Предметы - ТаблицаЗначений:
//         ** Ссылка - ЛюбаяСсылка
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьПредметыВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) И Не ЗначениеЗаполнено(ОбъектXDTO.objectID.ID) Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ГлавнаяЗадачаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			Форма.ГлавнаяЗадачаТип,
			Форма.ГлавнаяЗадачаID);
		Если Форма.ДоступнаМультипредметность Тогда
			ПредметыXDTO = ГлавнаяЗадачаXDTO.targets.items;
		Иначе
			ПредметXDTO = ГлавнаяЗадачаXDTO.target;
		КонецЕсли;
	Иначе // предметы самой задачи
		Если Форма.ДоступнаМультипредметность Тогда
			ПредметыXDTO = ОбъектXDTO.targets.items;
		Иначе
			ПредметXDTO = ОбъектXDTO.target;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ДоступнаМультипредметность Тогда
		
		Форма.Предметы.Очистить();
		
		Для Каждого ПредметXDTO Из ПредметыXDTO Цикл
			
			СтрокаПредмета = Форма.Предметы.Добавить();
			СтрокаПредмета.ИмяПредмета = ПредметXDTO.name;
			СтрокаПредмета.Предмет = ПредметXDTO.target.name;
			СтрокаПредмета.ПредметID = ПредметXDTO.target.objectID.ID;
			СтрокаПредмета.ПредметТип = ПредметXDTO.target.objectID.type;
			СтрокаПредмета.РольПредмета = ПредметXDTO.role.objectID.ID;
			СтрокаПредмета.Картинка = ИнтеграцияС1СДокументооборотКлиентСервер.
				НомерКартинкиПоРолиПредмета(СтрокаПредмета.РольПредмета);
			МассивСсылокПоВнешнимОбъектам = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкиПоВнешнимОбъектам(ПредметXDTO.target);
			СтрокаПредмета.Ссылка = ?(МассивСсылокПоВнешнимОбъектам.Количество() > 0,
				МассивСсылокПоВнешнимОбъектам[0],
				Неопределено);
			
			Если ЗначениеЗаполнено(СтрокаПредмета.Ссылка) Тогда
				СтрокаПредмета.Представление = Строка(СтрокаПредмета.Ссылка);
			Иначе
				Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
					СтрокаПредмета.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1 (%2)",
						СтрокаПредмета.Предмет,
						СтрокаПредмета.ИмяПредмета);
				Иначе
					СтрокаПредмета.Представление = СтрокаПредмета.Предмет;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // по предметам
		
	Иначе // мультипредметность не поддерживается
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(Форма, ПредметXDTO, "Предмет");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контролера бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьКонтролераВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.controller.Установлено("user") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.controller.user,
			"Контролер");
	ИначеЕсли ОбъектXDTO.controller.Установлено("role") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.controller.role,
			"Контролер");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.controller.mainAddressingObject,
			"ОсновнойОбъектАдресацииКонтролера");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.controller.secondaryAddressingObject,
			"ДополнительныйОбъектАдресацииКонтролера");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет проверяющего бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьПроверяющегоВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.verifier.Установлено("user") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.verifier.user,
			"Проверяющий");
	ИначеЕсли ОбъектXDTO.verifier.Установлено("role") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.verifier.role,
			"Проверяющий");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.verifier.mainAddressingObject,
			"ОсновнойОбъектАдресацииПроверяющего");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Форма,
			ОбъектXDTO.verifier.secondaryAddressingObject,
			"ДополнительныйОбъектАдресацииПроверяющего");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет исполнителя бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Приемник - СтрокаТаблицыЗначений - строка таблицы значений Исполнители.
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьИсполнителяВФорме(Приемник, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить("performer") = Неопределено Тогда
		ИсполнительXDTO = ОбъектXDTO;
	Иначе
		ИсполнительXDTO = ОбъектXDTO.performer;
	КонецЕсли;
		
	Если ИсполнительXDTO.Установлено("user") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			ИсполнительXDTO.user,
			"Исполнитель");
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			ИсполнительXDTO.role,
			"Исполнитель");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			ИсполнительXDTO.mainAddressingObject,
			"ОсновнойОбъектАдресации");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			ИсполнительXDTO.secondaryAddressingObject,
			"ДополнительныйОбъектАдресации");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд, меняющих состояние процесса, в его форме.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO - Объект XDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура УстановитьВидимостьКомандИзмененияСостоянияПроцесса(Форма, ОбъектXDTO) Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "leadingTask") Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		
	ИначеЕсли Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "state") Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "completed") И ОбъектXDTO.completed Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		
	ИначеЕсли Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "started") Или Не ОбъектXDTO.started Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		
	ИначеЕсли ОбъектXDTO.state.objectID.ID = "Активен" Тогда //@NON-NLS-1
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Истина;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Истина;
		
	ИначеЕсли ОбъектXDTO.state.objectID.ID = "Остановлен" Тогда //@NON-NLS-1
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Истина;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Истина;
		
	ИначеЕсли ОбъектXDTO.state.objectID.ID = "Прерван" Тогда //@NON-NLS-1
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект XDTO (приемник) по реквизиту (источник)
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Источник - ФормаКлиентскогоПриложения, Структура - содержит реквизиты или свойства,
//     по которым заполняется объект XDTO.
//   ИмяРеквизита - Строка - имя объектного реквизита источника.
//   Приемник - ОбъектXDTO - содержит заполняемое свойство.
//   ТипОбъектаXDTO - Строка - тип XDTO заполняемого свойства.
//   ЗаполнятьВсегда - Булево - признак заполнения, даже если объектный реквизит не заполнен.
//
Процедура ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Источник, ИмяРеквизита, Приемник, ТипОбъектаXDTO,
		ЗаполнятьВсегда = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Источник[ИмяРеквизита])
			Или ЗначениеЗаполнено(Источник[ИмяРеквизита + "ID"])
			Или ЗаполнятьВсегда Тогда
		Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ТипОбъектаXDTO);
		Приемник.name = Источник[ИмяРеквизита];
		Приемник.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Источник[ИмяРеквизита + "ID"],
			Источник[ИмяРеквизита + "Тип"]);
	КонецЕсли;
	
КонецПроцедуры

// Создает объект XDTO типа DMBusinessProcess[ИмяПроцесса], и заполняет общие свойства по данным формы.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип объекта XDTO бизнес-процесса.
//   Форма - ФормаКлиентскогоПриложения - содержит реквизиты - источники заполнения:
//     * ДатаНачала - Дата
//     * Наименование - Строка
//     * Описание - Строка
//   Исключения - Строка - имена исключаемых из заполнения реквизитов формы разделенных запятой.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ПодготовитьШапкуБизнесПроцесса(Прокси, Тип, Форма, Исключения = "") Экспорт
	
	Объект = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Тип);
	
	Объект.name = Форма.Наименование;
	Объект.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, Форма.ID, Тип);
	
	// Общая шапка бизнес-процессов
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
		Прокси,
		Форма,
		"Автор",
		Объект.author,
		"DMUser");
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
		Прокси,
		Форма,
		"Состояние",
		Объект.state,
		"DMBusinessProcessState");
	
	Если Форма.ДоступнаМультипредметность Тогда
		ЗаполнитьПроцессПредметамиИзФормы(Прокси, Форма.Предметы, Объект);
	Иначе
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			Форма,
			"Предмет",
			Объект.target,
			"DMObject");
	КонецЕсли;
	
	Если Найти(Исключения, "ВидПроцесса") = 0
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Объект, "processType") Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			Форма,
			"ВидПроцесса",
			Объект.processType,
			"DMProcessConfirmationType");
	КонецЕсли;
	
	Если Найти(Исключения, "Важность") = 0 Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			Форма,
			"Важность",
			Объект.importance,
			"DMBusinessProcessImportance");
	КонецЕсли;
	
	Если Найти(Исключения, "Шаблон") = 0 Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			Форма,
			"Шаблон",
			Объект.businessProcessTemplate,
			Тип + "Template");
	КонецЕсли;
	
	Объект.beginDate = Форма.ДатаНачала;
	
	Если Найти(Исключения,"Стартован") = 0 Тогда
		Объект.started = Форма.Стартован;
	КонецЕсли;
	Если Найти(Исключения,"Завершен") = 0 Тогда
		Объект.completed = Форма.Завершен;
	КонецЕсли;
	Если Найти(Исключения,"Описание") = 0 Тогда
		Объект.description = Форма.Описание;
	КонецЕсли;
	Если Найти(Исключения,"Срок") = 0 Тогда
		Объект.dueDate = Форма.Срок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		ГлавнаяЗадачаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			Форма.ГлавнаяЗадачаТип,
			Форма.ГлавнаяЗадачаID);
		ГлавнаяЗадачаПриемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMBusinessProcessTask");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьЗначенияСвойствXDTO(
			Прокси,
			ГлавнаяЗадачаПриемник,
			ГлавнаяЗадачаXDTO);
		Объект.parentTask = ГлавнаяЗадачаПриемник;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

// Выполняет поиск объектов ДО по реквизитам, сохраняя результат во временное хранилище
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта, поиск по которому требуется выполнить
//   РеквизитыПоиска - Структура - описание реквизитов поиска
//   АдресВоВременномХранилище - Строка - параметр, в который помещается адрес результатов поиска
//   КоличествоРезультатов - Число - количество результатов поиска
//   ПредельноеКоличествоРезультатов - Число - предельное количество выбираемых объектов, если оно превышено
//
Процедура ВыполнитьПоискПоРеквизитам(ТипОбъекта, РеквизитыПоиска, АдресВоВременномХранилище,
		КоличествоРезультатов, ПредельноеКоличествоРезультатов) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	ПредельноеКоличествоРезультатов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредельноеКоличествоВыбираемыхОбъектов(
		ТипОбъекта);
	СписокУсловий.limit = ПредельноеКоличествоРезультатов;
	ВыбираемыеПоля = СписокУсловий.columnSet; // СписокXDTO
	
	НаборКолонок = Новый Массив;
	Если ТипОбъекта = "DMIncomingDocument"
			Или ТипОбъекта = "DMInternalDocument"
			Или ТипОбъекта = "DMOutgoingDocument" Тогда
		НаборКолонок.Добавить("documentType");
		НаборКолонок.Добавить("regNumber");
		НаборКолонок.Добавить("regDate");
		НаборКолонок.Добавить("sum");
		НаборКолонок.Добавить("organization");
		НаборКолонок.Добавить("correspondent");
		Если ТипОбъекта = "DMInternalDocument" Тогда
			НаборКолонок.Добавить("folder");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("inn");
		НаборКолонок.Добавить("kpp");
		НаборКолонок.Добавить("legalPrivatePerson");
		
	КонецЕсли;
	
	Представление = "";
	Для Каждого РеквизитПоиска Из РеквизитыПоиска Цикл
		ИмяРеквизита = РеквизитПоиска.Ключ;
		ОписаниеУсловия = РеквизитПоиска.Значение;
		ДобавитьРеквизитВСписокУсловий(
			Прокси,
			ИмяРеквизита,
			ОписаниеУсловия,
			СписокУсловий,
			Представление);
		// Реквизиты с отбором на равенство не информативны.
		Если ОписаниеУсловия.ОператорСравнения = "=" Тогда
			ПозицияВМассиве = НаборКолонок.Найти(ИмяРеквизита);
			Если ПозицияВМассиве <> Неопределено Тогда
				НаборКолонок.Удалить(ПозицияВМассиве);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// добавим оставшиеся колонки в требование выборки
	Для Каждого ИмяРеквизита Из НаборКолонок Цикл
		ВыбираемыеПоля.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	Если Представление = "" Тогда
		Представление = НСтр("ru = 'Условия не заданы.'");
	Иначе
		Представление = Представление + ".";
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		ТипОбъекта,
		СписокУсловий);
	
	НайденныеОбъекты = Новый Массив;
	Для Каждого ОбъектXDTO Из Результат.items Цикл
		НайденныйОбъект = Новый Структура;
		НайденныеОбъекты.Добавить(НайденныйОбъект);
		НайденныйОбъект.Вставить("name", ОбъектXDTO.object.name);
		НайденныйОбъект.Вставить("ID", ОбъектXDTO.object.objectID.ID);
		Для Каждого ОписаниеКолонки Из НаборКолонок Цикл
			ИмяРеквизита = ОписаниеКолонки;
			ЗначениеСвойства = ОбъектXDTO.object.Получить(ИмяРеквизита);
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда // ссылочный тип ДО
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства.name);
				НайденныйОбъект.Вставить(ИмяРеквизита + "ID", ЗначениеСвойства.objectID.ID);
			Иначе // примитивный тип
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// ранние версии ДО не поддерживают tooManyObjects
	Если ?(Результат.Установлено("tooManyObjects"), Результат.tooManyObjects, Ложь) Тогда
		Представление = Представление
			+ " " + НСтр("ru = 'Перетащите сюда любой реквизит, чтобы уточнить условия.'");
		
	Иначе
		ПредельноеКоличествоРезультатов = 0;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НайденныеОбъекты", НайденныеОбъекты);
	Результат.Вставить("НаборКолонок", НаборКолонок);
	Результат.Вставить("ПредставлениеУсловийПоиска", Представление);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	
	КоличествоРезультатов = НайденныеОбъекты.Количество();
	
КонецПроцедуры

// Стандартный обработчик печати для подсистемы УправлениеПечатью БСП.
//
// Параметры:
//   МассивОбъектов  - Массив из ЛюбаяСсылка - ссылки на объекты, которые нужно распечатать.
//   ПараметрыПечати - Структура - дополнительные настройки печати.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати - СписокЗначений - значение - ссылка на объект, представление - имя области,
//     в которой был выведен объект.
//   ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ИмяМакета = "ЛистСогласования" Тогда
			ЛистСогласования = ПодготовитьЛистСогласования(МассивОбъектов); // возможно исключение
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				ПечатнаяФорма.ИмяМакета,
				ПечатнаяФорма.СинонимМакета,
				ЛистСогласования);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет объект XDTO бизнес-процесса предметами из таблицы формы.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Предметы - ДанныеФормыКоллекция - таблица предметов.
//   Процесс - ОбъектXDTO - Объект XDTO типа DMBusinessProcess<...> - заполняемый процесс.
//
Процедура ЗаполнитьПроцессПредметамиИзФормы(Прокси, Предметы, Процесс)
	
	targetCollection = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси, "DMBusinessProcessTargetCollection");
	ОписаниеПредмета = targetCollection.items; // СписокXDTO
		
	Для Каждого СтрокаПредмета Из Предметы Цикл
			
		Если Не Процесс.Установлено("target") Тогда
			Процесс.target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, СтрокаПредмета.ПредметТип);
			Процесс.target.name = СтрокаПредмета.Предмет;
			Процесс.target.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				СтрокаПредмета.ПредметID,
				СтрокаПредмета.ПредметТип);
		КонецЕсли;
		
		target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMBusinessProcessTarget");
		target.name = СтрокаПредмета.ИмяПредмета;
		
		target.role = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMBusinessProcessTargetRole");
		target.role.name = СтрокаПредмета.РольПредмета;
		target.role.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			СтрокаПредмета.РольПредмета,
			"DMBusinessProcessTargetRole");
		
		target.target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, СтрокаПредмета.ПредметТип);
		target.target.name = СтрокаПредмета.Предмет;
		target.target.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			СтрокаПредмета.ПредметID,
			СтрокаПредмета.ПредметТип);
		
		ОписаниеПредмета.Добавить(target);
		
	КонецЦикла;
	
	Процесс.targets = targetCollection;
	
КонецПроцедуры

// Добавляет реквизит поиска в список условий XDTO, параллельно формируя представление условия
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ИмяРеквизита - Строка - имя реквизита поиска.
//   ОписаниеУсловий - Структура - описание условий поиска.
//   СписокУсловий - ОбъектXDTO - ОбъектXDTO типа DMObjectListQuery, пополняемый список условий.
//   Представление - Строка - пополняемое представление условия.
//
Процедура ДобавитьРеквизитВСписокУсловий(Прокси, ИмяРеквизита, ОписаниеУсловия, СписокУсловий, Представление)
	
	Если Представление = "" Тогда
		Представление = Представление + ОписаниеУсловия.Представление;
	Иначе
		Представление = Представление + "; " + НРег(ОписаниеУсловия.Представление);
	КонецЕсли;
	
	Если ОписаниеУсловия.Свойство("ПредставлениеУсловия")
			И ЗначениеЗаполнено(ОписаниеУсловия.ПредставлениеУсловия) Тогда
		Представление = Представление + ": " + ОписаниеУсловия.ПредставлениеУсловия;
	Иначе
		Представление = Представление + ": "
			+ ?(ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата"),
				Формат(ОписаниеУсловия.Значение, "ДЛФ=D"),
				ОписаниеУсловия.Значение);
	КонецЕсли;	
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = ИмяРеквизита;
	Если ОписаниеУсловия.ОператорСравнения = "<=" И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
	Иначе
		Если ОписаниеУсловия.Свойство("ЗначениеID") И ЗначениеЗаполнено(ОписаниеУсловия.ЗначениеID) Тогда
			ЗначениеРеквизита = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ОписаниеУсловия.ЗначениеID,
				ОписаниеУсловия.ЗначениеТип);
			Условие.value = ЗначениеРеквизита;
		Иначе // примитивный тип
			Условие.value = ОписаниеУсловия.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеУсловия.ОператорСравнения = "=" И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.comparisonOperator = ">=";
	Иначе
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения;
	КонецЕсли;
	
	Условия = СписокУсловий.conditions; // СписокXDTO
	Условия.Добавить(Условие);
	
	Если ОписаниеУсловия.Свойство("ОператорСравнения2") 
			И ЗначениеЗаполнено(ОписаниеУсловия.ОператорСравнения2) Тогда
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Если ОписаниеУсловия.ОператорСравнения2 = "<=" И ТипЗнч(ОписаниеУсловия.Значение2) = Тип("Дата") Тогда
			Условие.value = КонецДня(ОписаниеУсловия.Значение2);
		Иначе
			Условие.value = ОписаниеУсловия.Значение2;
		КонецЕсли;
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения2;
		Условия.Добавить(Условие);
	ИначеЕсли ОписаниеУсловия.ОператорСравнения = "="
			И ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата")
			И ИмяРеквизита <> "anyDate" Тогда
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
		Условие.comparisonOperator = "<=";
		Условия.Добавить(Условие);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в виде табличного документа печатную форму листа согласования по переданному предмету.
//
// Параметры:
//   ПредметыСогласования - ЛюбаяСсылка, Массив из ЛюбаяСсылка - согласуемые объекты ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма листа (листов) согласования.
//
Функция ПодготовитьЛистСогласования(ПредметыСогласования)
	
	// Без поддержки листа согласования со стороны веб-сервиса этой команды не должно быть в интерфейсе.
	// В случае неожиданной смены версии на стороне сервиса выдадим, однако, исключение.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
		ВызватьИсключение НСтр("ru = 'Для вывода листа согласования нужен 1С:Документооборот версии не ниже 1.4.8.1'");
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.Защита = Истина;
	
	Макет = Обработки.ИнтеграцияС1СДокументооборот.ПолучитьМакет("ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	ОбластьСогласованиеНеЗапускалось = Макет.ПолучитьОбласть("СогласованиеНеЗапускалось");
	
	НуженРазделительСтраниц = Ложь;
	
	Если ТипЗнч(ПредметыСогласования) = Тип("Массив") Тогда
		МассивПредметов = ПредметыСогласования;
	Иначе // единственная ссылка
		МассивПредметов = Новый Массив;
		МассивПредметов.Добавить(ПредметыСогласования);
	КонецЕсли;
	
	Для Каждого ПредметСогласования Из МассивПредметов Цикл
		
		Если НуженРазделительСтраниц Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Результат.Вывести(ОбластьЗаголовок);
		ОбластьШапка.Параметры.Предмет = Строка(ПредметСогласования);
		Результат.Вывести(ОбластьШапка);
		
		// Проверим существование связанного объекта.
		СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
			ПредметСогласования);
		Если СвязанныйОбъектДО = Неопределено Тогда // согласование не запускалось
			Результат.Вывести(ОбластьСогласованиеНеЗапускалось);
			
		Иначе
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetApprovalSheetRequest");
			Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, СвязанныйОбъектДО.type);
			Запрос.object.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				СвязанныйОбъектДО.ID,
				СвязанныйОбъектДО.type);
			Запрос.object.name = СвязанныйОбъектДО.name;
			Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Если Ответ.items.Количество() = 0 Тогда
				Результат.Вывести(ОбластьСогласованиеНеЗапускалось);
			Иначе
				Результат.Вывести(ОбластьИсполнителиШапка);
				Для Каждого Пункт Из Ответ.items Цикл
					ОбластьИсполнители.Параметры.Должность = Пункт.position;
					ОбластьИсполнители.Параметры.Исполнитель = Пункт.name;
					ОбластьИсполнители.Параметры.РезультатСогласования = Пункт.result;
					ОбластьИсполнители.Параметры.ДатаИсполнения = Пункт.date;
					ОбластьИсполнители.Параметры.РезультатВыполнения = Пункт.comment;
					Результат.Вывести(ОбластьИсполнители);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		НуженРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли