#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОтображатьИсточник", ОтображатьИсточник);
	
	Если Параметры.Свойство("ИсточникID") Тогда
		Источник = Параметры["Источник"];
		ИсточникID = Параметры["ИсточникID"];
		ИсточникТип = Параметры["ИсточникТип"];
	КонецЕсли;
	
	Элементы.Источник.Видимость = ОтображатьИсточник;
	
	ЗначениеПеречисленияДлительность = "Длительность";
	ЗначениеПеречисленияВремяНачала = "ВремяНачала";
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ЗначениеЗаполнено(ИсточникID) Тогда
		
		// Получим данные хронометража
		Если Найти(ИсточникТип, "Document") Или Найти(ИсточникТип, "Task") Тогда
			
			ЗапросыПакета = Новый Массив;
			
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъектЗапрос(Прокси, "DMActualWork"));
			
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMGetChronometrationSettingsRequest");
			СписокОбъектов = Запрос.objects; // СписокXDTO
			ОбъектID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ИсточникID, ИсточникТип);
			СписокОбъектов.Добавить(ОбъектID);
			ЗапросыПакета.Добавить(Запрос);
			
			ОбъектДляПолученияИзДО = Новый Структура("ID, Тип", ИсточникID, ИсточникТип);
			ПолучаемыеПоля = Новый Массив;
			ПолучаемыеПоля.Добавить("project");
			Если Найти(ИсточникТип, "Task") Тогда
				ПолучаемыеПоля.Добавить("projectTask");
			КонецЕсли;
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектыЗапрос(
					Прокси,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДляПолученияИзДО),
					ПолучаемыеПоля));
			
			ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
				Прокси,
				ЗапросыПакета,
				Истина);
			
			ЗаполнитьФормуОбъекта(ОтветНаЗапросыПакета.responses[0]);
			
			ПараметрыХронометража = ОтветНаЗапросыПакета.responses[1].settings[0];
			Если ПараметрыХронометража.Установлено("beginDate") И ЗначениеЗаполнено(ПараметрыХронометража.beginDate) Тогда
				Начало = ПараметрыХронометража.beginDate;
			КонецЕсли;
			Если ПараметрыХронометража.Установлено("timeInputMethod") Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					ЭтотОбъект, ПараметрыХронометража.timeInputMethod, "СпособУказанияВремени", Ложь);
			КонецЕсли;
			Если ПараметрыХронометража.Установлено("workType") Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					ЭтотОбъект, ПараметрыХронометража.workType, "ВидРабот", Ложь);
			КонецЕсли;
			Если ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) Тогда
				Длительность = Окончание - Начало;
			КонецЕсли;
			
			ОбъектОснование = ОтветНаЗапросыПакета.responses[2].objects[0];
			Если ОбъектОснование.Установлено("project") Тогда
				Проект = ОбъектОснование.project.name;
				ПроектID = ОбъектОснование.project.objectID.ID;
				Если ОбъектОснование.Свойства().Получить("projectTask") <> Неопределено
						И ОбъектОснование.Установлено("projectTask") Тогда
					ПроектнаяЗадача = ОбъектОснование.projectTask.name;
					ПроектнаяЗадачаID = ОбъектОснование.projectTask.objectID.ID;
					ПроектнаяЗадачаТип = ОбъектОснование.projectTask.objectID.type;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = "DMActualWork";
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		ОбъектXDTO = Результат;
		
		ЗаполнитьФормуОбъекта(ОбъектXDTO);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеРаботы) Тогда
		
		Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
			
			ОбъектМетаданных = Параметры.ВнешнийОбъект.Метаданные();
			
			Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
					Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
				СтрокаПодстановки = СтрШаблон("%1 (%2)",
					Строка(Параметры.ВнешнийОбъект),
					Строка(ОбъектМетаданных.ПредставлениеОбъекта));
			Иначе
				СтрокаПодстановки = Строка(Параметры.ВнешнийОбъект);
			КонецЕсли;
			
			ОписаниеРаботы = СтрШаблон(НСтр("ru = 'Работа над ""%1""'"), СтрокаПодстановки);
			
		Иначе
			
			ОписаниеРаботы = СтрШаблон(НСтр("ru = 'Работа над ""%1""'"), Источник);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаДобавления) Тогда
		ДатаДобавления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДлительностьРаботы = ИнтеграцияС1СДокументооборотКлиентСервер.ЧислоВСтроку(Длительность);
	ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
	Если Не ЗначениеЗаполнено(СпособУказанияВремениID) Тогда
		СпособУказанияВремениID = ЗначениеПеречисленияДлительность;
	КонецЕсли;
	
	Если СпособУказанияВремени = ЗначениеПеречисленияДлительность Тогда 
		Элементы.ДлительностьРаботы.Видимость = Истина;
		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
	Иначе
		Элементы.ДлительностьРаботы.Видимость = Ложь;
		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
	КонецЕсли;
	
	// Хронометраж и проекты.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Элементы.ПроектЗадача.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
		Элементы.ДатаДобавления.ТолькоПросмотр = Истина;
		Элементы.ДатаДобавления.Заголовок = НСтр("ru='Добавить в отчет за'");
		Элементы.Начало.Заголовок = НСтр("ru='Время начала работы'");
	Иначе
		ДоступенФункционалХронометраж = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Документооборот_ВыбратьЗначениеИзСпискаЗавершение" И Источник = ЭтотОбъект Тогда
		Если Параметр = "Проект" Тогда
			ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	Начало = Начало - Секунда(Начало);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	Окончание = Окончание - Секунда(Окончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Пользователь", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Пользователь",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Пользователь",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		"DMWorkType",
		"ВидРабот",
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMWorkType",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMWorkType",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ВидРабот",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект,
				Ложь,
				Элемент);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ВидРабот",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект,
		Ложь,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProject",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProject",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Проект",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект,
				Ложь,
				Элемент);
			
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMProject", "Проект", ЭтотОбъект);
	
	ПроектнаяЗадача = "";
	ПроектнаяЗадачаID = "";
	ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Проект",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект,
		Ложь,
		Элемент);
	
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение.type = "DMProject" Тогда
		ПроектнаяЗадача = "";
		ПроектнаяЗадачаID = "";
	КонецЕсли;
	
	ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда
		Проект = "";
		ПроектID = "";
		ПроектнаяЗадача = "";
		ПроектнаяЗадачаID = "";
	КонецЕсли;
	
	ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Проект = "";
	ПроектID = "";
	ПроектнаяЗадача = "";
	ПроектнаяЗадачаID = "";
	
	ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = СписокВыбораВремени();
	
	Оповещение = Новый ОписаниеОповещения("ДлительностьРаботыНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Источник) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(ИсточникТип, ИсточникID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Добавить(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(СпособУказанияВремениID) Тогда
		СпособУказанияВремениID =ЗначениеПеречисленияДлительность;
	КонецЕсли;
	
	Если СпособУказанияВремениID = ЗначениеПеречисленияДлительность Тогда
		Если Не ЗначениеЗаполнено(ДлительностьРаботы) Или ДлительностьРаботы = "00:00" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Длительность'")),,
				"ДлительностьРаботы",,
				Отказ);
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Начало) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Начало'")),,
				"Начало",,
				Отказ);
		КонецЕсли;
		
		Если ДоступенФункционалХронометраж Тогда
			Если Не ЗначениеЗаполнено(Окончание) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Окончание'")),,
					"Окончание",,
					Отказ);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) И Начало > Окончание Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Время окончания меньше, чем время начала'"),,
					"Окончание",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособУказанияВремениID = ЗначениеПеречисленияДлительность Тогда
		Длительность = ИнтеграцияС1СДокументооборотКлиентСервер.ЧислоИзСтроки(ДлительностьРаботы);
	ИначеЕсли ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) Тогда
		Длительность = Окончание - Начало;
	КонецЕсли;
	
	ЗаписатьДанные();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Источник);
	ПараметрыОповещения.Вставить("ID", ИсточникID);
	ПараметрыОповещения.Вставить("type", ИсточникТип);
	
	Оповестить("Запись_ДокументооборотТрудозатраты", ПараметрыОповещения, ИсточникID);
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеДобавлять(Команда)
	
	Закрыть(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДлительностьРаботыНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительностьРаботы = Результат.Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанные()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMActualWork");
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ДатаДобавления",  "addDate");
	СоответствиеРеквизитов.Вставить("Начало",          "begin");
	СоответствиеРеквизитов.Вставить("Окончание",       "end");
	СоответствиеРеквизитов.Вставить("ОписаниеРаботы",  "description");
	СоответствиеРеквизитов.Вставить("Длительность",    "duration");
	СоответствиеРеквизитов.Вставить("ВидРабот",        "workType");
	СоответствиеРеквизитов.Вставить("Проект",          "project");
	СоответствиеРеквизитов.Вставить("ПроектнаяЗадача", "projectTask");
	СоответствиеРеквизитов.Вставить("Источник",        "source");
	
	Для Каждого СтрокаСоответствия Из СоответствиеРеквизитов Цикл
		
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Значение,
			ЭтотОбъект,
			СтрокаСоответствия.Ключ);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		ОбъектXDTO.externalSource = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,
			ВнешнийОбъект);
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуОбъекта(ОбъектXDTO)
	
	ДатаДобавления = ОбъектXDTO.addDate;
	Начало = ОбъектXDTO.begin;
	Окончание = ОбъектXDTO.end;
	ОписаниеРаботы = ОбъектXDTO.description;
	Длительность = ОбъектXDTO.duration;
	ВестиУчетПоПроектам = ОбъектXDTO.projectsEnabled;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.workType,
		"ВидРабот",
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.project,
		"Проект",
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.projectTask,
		"ПроектнаяЗадача",
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.source,
		"Источник",
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.timeInputMethod,
		"СпособУказанияВремени",
		Ложь);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		ЭтотОбъект,
		ОбъектXDTO.user,
		"Пользователь",
		Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораВремени()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("00:15");
	СписокВыбора.Добавить("00:30");
	СписокВыбора.Добавить("00:45");
	СписокВыбора.Добавить("01:00");
	СписокВыбора.Добавить("01:30");
	СписокВыбора.Добавить("02:00");
	СписокВыбора.Добавить("03:00");
	СписокВыбора.Добавить("04:00");
	СписокВыбора.Добавить("05:00");
	
	Возврат СписокВыбора;
	
КонецФункции

#КонецОбласти