#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВладелецФайла", Владелец);
	Параметры.Свойство("ТекущийФайл", ТекущийФайл);
	
	// Покажем владельца при открытии из карточки файла.
	Элементы.ВладелецФайла.Видимость = ЗначениеЗаполнено(ТекущийФайл) И ЗначениеЗаполнено(Владелец);
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
		ЗаголовокУстановлен = Истина;
	Иначе
		Заголовок = СтрШаблон("%1: %2", Заголовок, Владелец);
	КонецЕсли;
	
	ИспользоватьЭлектроннуюПочтуДокументооборота =
		ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПочту1СДокументооборота");
	
	ИспользоватьЭлектронныеПодписиИС =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если Параметры.Свойство("ПростаяФорма") Тогда
		Элементы.ОткрытьДляРедактирования.ТолькоВоВсехДействиях = Истина;
		Элементы.ОткрытьНаЧтение.ТолькоВоВсехДействиях = Истина;
		Элементы.ЗакончитьРедактирование.ТолькоВоВсехДействиях = Истина;
		Предпросмотр = Истина;
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ИмяСправочникаХранилищаФайлов = МодульРаботаСФайлами.НоваяСсылкаНаФайл(Владелец).Метаданные().Имя;
		Если ЗначениеЗаполнено(ИмяСправочникаХранилищаФайлов) Тогда
			ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
			Предпросмотр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ТипСправочникаСФайлами, "Предпросмотр");
		Иначе
			Предпросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПереключитьПредпросмотр.Пометка = Предпросмотр;
	Элементы.КартинкаПредпросмотра.Видимость = Предпросмотр;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		РасширенияПоддерживающиеПредпросмотр = МодульРаботаСФайламиСлужебный.СписокРасширенийДляПредпросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ID = ВладелецФормы["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"];
		Тип = ВладелецФормы["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"];
	Исключение
		ID = "";
		Тип = "";
	КонецПопытки;
	
	Если Не ЗаголовокУстановлен Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.УстановитьЗаголовокПриОткрытии(ЭтотОбъект);
	КонецЕсли;
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтотОбъект Тогда
		ПриПодключении();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		ПрочитатьИОбновитьСписокФайловИПодписей();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНаЧтение(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНаЧтение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ДобавитьКопированием(Элементы.Файлы.ТекущиеДанные.ID);
	Иначе
		ДобавитьСДиска(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() = 1 Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"), ТекущиеДанные.Наименование);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru='Снять с выделенных файлов пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru='Пометить выделенные файлы на удаление?'");
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", Элементы.Файлы.ВыделенныеСтроки);
	Оповещение = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаФайлов();
	ОбновитьПредпросмотр(Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		Для Каждого ПеретаскиваемыйФайл Из ПараметрыПеретаскивания.Значение Цикл
			
			Если ТипЗнч(ПеретаскиваемыйФайл) = Тип("Файл")
				И ПеретаскиваемыйФайл.ЭтоФайл() Тогда
				
				МассивФайлов.Добавить(ПеретаскиваемыйФайл);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыПеретаскиваниеЗавершение", ЭтотОбъект, МассивФайлов);
		Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Иначе // связанный объект следует найти или создать
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
				Владелец,
				ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеЗавершение(Результат, МассивФайлов) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлПеретаскиваниеЗавершение", ЭтотОбъект, МассивФайлов);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлПеретаскиваниеЗавершение(Результат, МассивФайлов) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
	
	Для Каждого Файл Из МассивФайлов Цикл
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДискаПеретаскиванием(
			Файл,
			ID,
			Тип,
			ЭтотОбъект.УникальныйИдентификатор,
			Строка(Владелец),
			Владелец,
			ЯвляетсяСканКопией,,
			ОписаниеОповещения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьКопированием(ОригиналID)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлКопированием(ОригиналID, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСДиска(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСДискаЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе // связанный объект следует найти или создать
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПечатнуюФорму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПечатнуюФормуЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе // связанный объект следует найти или создать
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаЧтение(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляРедактирования(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			Ложь,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВыделенныхФайлов(
		Файлы,
		Элементы.Файлы.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			ТекущиеДанные.ДатаМодификации,
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
			ТекущиеДанные.ID,
			ОписаниеОповещения,,
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьКаталогФайла(Элементы.Файлы.ТекущиеДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьИзмененияРедактируемогоФайла(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПредпросмотр(Команда)
	
	Предпросмотр = Не Предпросмотр;
	Элементы.ПереключитьПредпросмотр.Пометка = Предпросмотр;
	Элементы.КартинкаПредпросмотра.Видимость = Предпросмотр;
	ОбновитьПредпросмотр(Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
			И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НапечататьФайлы(
		Файлы,
		Элементы.Файлы.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ИспользоватьЭлектроннуюПочтуДокументооборота Тогда
		
		ОтправитьЧерезДокументооборот();
		
	Иначе
		
		ОтправитьЧерезИС();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы (ЭП)

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		Подписи,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПодписатьФайл(
		ИдентификаторФайла,
		ТекущиеДанные.Наименование,
		ID,
		ТекущиеДанные.Редактируется,
		ТекущиеДанные.Зашифрован,
		ТекущиеДанные.Описание,
		ДанныеПодписейФайла,
		УникальныйИдентификатор);
	
	ПрочитатьИОбновитьСписокФайловИПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		Подписи,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	СвойстваФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла();
	СвойстваФайла.ИдентификаторФайла = ИдентификаторФайла;
	СвойстваФайла.ИмяФайла = ТекущиеДанные.Наименование;
	СвойстваФайла.ОписаниеФайла = ТекущиеДанные.Описание;
	СвойстваФайла.Редактируется = ТекущиеДанные.Редактируется;
	СвойстваФайла.Зашифрован = ТекущиеДанные.Зашифрован;
	СвойстваФайла.ДанныеПодписейФайла = ДанныеПодписейФайла;
	СвойстваФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	СвойстваФайла.ВладелецФайла = ID;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьДобавлениеЭПИзФайла(СвойстваФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлВместеСЭП(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВместеСЭП(
		ТекущиеДанные.ID,
		ТекущиеДанные.Расширение,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Размер * 1024,
		ТекущиеДанные.ДатаМодификации,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		// Установим текущую строку.
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			Для Каждого Файл Из Файлы Цикл
				Если Файл.ID = ТекущийФайл Тогда
					Элементы.Файлы.ТекущаяСтрока = Файл.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.1.1") Тогда
			
			ФормаОбработанаУспешно = Ложь;
			Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтотОбъект);
			Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
			Элементы.ГруппаФайлыИПредпросмотр.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Ложь;
			Элементы.ГруппаКоманднаяПанель.Видимость = Истина;
			Элементы.ГруппаФайлыИПредпросмотр.Видимость = Истина;
			
			ДоступенЗахватФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса(
				"1.4.9.1");
			
			ДоступныПомеченныеНаУдаление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса(
				"2.0.6.3");
				
			// Обработаем настройки ЭП.
			НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ИспользоватьЭлектронныеПодписиДО =
				(НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Истина);
			ИспользоватьЭлектронныеПодписи =
				ИспользоватьЭлектронныеПодписиДО
				И ИспользоватьЭлектронныеПодписиИС;
			
			Элементы.ФайлыНомерКартинкиПодписанЗашифрован.Видимость =
				ИспользоватьЭлектронныеПодписиДО;
			Элементы.Подписать.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ДобавитьЭПИзФайла.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.СохранитьВместеСЭП.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ПодписатьКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ДобавитьЭПИзФайлаКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.СохранитьВместеСЭПКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			
			СостояниеРазрешаетДобавлениеФайла = Истина;
			СостояниеРазрешаетДобавлениеСканКопии = Истина;
			СостояниеРазрешаетРедактированиеФайла = Ложь;
			
			СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
				Владелец);
			Если СвязанныйОбъектДО <> Неопределено Тогда
				ID = СвязанныйОбъектДО.ID;
				Тип = СвязанныйОбъектДО.type;
			Иначе
				ID = "";
				Тип = "";
			КонецЕсли;
			
			ПрочитатьИОбновитьСписокФайлов();
			
			Если ID <> "" И Тип <> "" Тогда
				ОбъектИС = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
					ID,
					Тип);
				Если ОбъектИС = Неопределено Тогда
					РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
						ID,
						Тип,
						Владелец,
						(Файлы.Количество() > 0));
				КонецЕсли;
			КонецЕсли;
			
			Элементы.ДобавитьПечатнуюФорму.Доступность = СостояниеРазрешаетДобавлениеФайла;
			Элементы.ДобавитьСДиска.Доступность = (СостояниеРазрешаетДобавлениеФайла
				Или СостояниеРазрешаетДобавлениеСканКопии);
			Элементы.ДобавитьСДискаКонтекст.Доступность = (СостояниеРазрешаетДобавлениеФайла
				Или СостояниеРазрешаетДобавлениеСканКопии);
			
			Элементы.ОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.КонтекстОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.ЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.КонтекстЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.ОбновитьИзФайлаНаДиске.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = СостояниеРазрешаетРедактированиеФайла;
			Элементы.СохранитьИзменения.Доступность = СостояниеРазрешаетРедактированиеФайла;
			
			Элементы.ПоказыватьУдаленные.Видимость = ДоступныПомеченныеНаУдаление;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

// Общее завершение команд редактирования. Обновляет форму.
//
&НаКлиенте
Процедура КомандыРедактированияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ID") Тогда
		ОбновитьСписокФайловКлиент(Результат.ID);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Массив")
			И Результат.Количество() > 0
			И ТипЗнч(Результат[0]) = Тип("Структура")
			И Результат[0].Свойство("ID") Тогда
		ОбновитьСписокФайловКлиент(Результат[0].ID);
		
	Иначе
		ОбновитьСписокФайловКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает добавление файла с диска и обновляет форму.
&НаКлиенте
Процедура ДобавитьСДискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
		ID,
		Тип,
		УникальныйИдентификатор,
		Строка(Владелец),
		Владелец,
		ЯвляетсяСканКопией,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Продолжает добавление печатной формы владельца.
&НаКлиенте
Процедура ДобавитьПечатнуюФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектИС", Владелец);
	ПараметрыФормы.Вставить("ИдентификаторОбъектаДО", ID);
	ПараметрыФормы.Вставить("ТипОбъектаДО", Тип);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеПечатнойФормыЗавершение", ЭтотОбъект);
	ФормаДобавления = ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ДобавлениеПечатнойФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ФормаДобавления = Неопределено Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не имеет печатных форм.'"), Строка(Владелец));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Завершает добавление печатной формы владельца. Обновляет форму.
//
// Параметры:
//   Результат - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//   Параметры - Неопределено
//
&НаКлиенте
Процедура ДобавлениеПечатнойФормыЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ОбновитьСписокФайловКлиент(Результат[0].ТекущийФайл.ID);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет список файлов, заново получая его из ДО.
//
&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.Файлы.ТекущиеДанные.ID;
	КонецЕсли;
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		// Восстановим положение в списке.
		Для Каждого Строка Из Файлы Цикл
			Если Строка.ID = ТекущийИдентификаторФайла Тогда
				Элементы.Файлы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает список файлов из ДО и обновляет список.
&НаСервере
Процедура ПрочитатьИОбновитьСписокФайлов()
	
	Файлы.Очистить();
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("files");
	Если Тип = "DMInternalDocument" Или Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Тогда
		ПолучаемыеПоля.Добавить("enabledProperties");
	КонецЕсли;
	Если ПоказыватьУдаленные Тогда
		ПолучаемыеПоля.Добавить("ignoreDeletionMark");
	КонецЕсли;
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		Тип,
		ID,
		ПолучаемыеПоля);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокФайлов(
		ОбъектXDTO.files,
		Файлы);
	
	Если ИспользоватьЭлектронныеПодписи Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокПодписейФайлов(
			ОбъектXDTO.files,
			Подписи,
			УникальныйИдентификатор);
	КонецЕсли;
	
	// Уточним доступность команд добавления и редактирования.
	СостояниеРазрешаетДобавлениеФайла = Истина;
	СостояниеРазрешаетРедактированиеФайла = Истина;
	СостояниеРазрешаетДобавлениеСканКопии = Истина;
	Если ОбъектXDTO.Свойства().Получить("enabledProperties") <> Неопределено
		И ОбъектXDTO.enabledProperties.Количество() <> 0 Тогда
		СостояниеРазрешаетДобавлениеФайла = Ложь;
		СостояниеРазрешаетРедактированиеФайла = Ложь;
		СостояниеРазрешаетДобавлениеСканКопии = Ложь;
		Для Каждого ДоступноеПоле Из ОбъектXDTO.enabledProperties Цикл
			Если НРег(ДоступноеПоле) = "addfile" Тогда
				СостояниеРазрешаетДобавлениеФайла = Истина;
			ИначеЕсли НРег(ДоступноеПоле) = "editfile" Тогда
				СостояниеРазрешаетРедактированиеФайла = Истина;
			ИначеЕсли НРег(ДоступноеПоле) = "addscannedcopy" Тогда
				СостояниеРазрешаетДобавлениеСканКопии = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Открывает карточку выбранного файла.
//
&НаКлиенте
Процедура ОткрытьКарточку()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("РазрешеноРедактирование", СостояниеРазрешаетРедактированиеФайла);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			"DMFile",
			ТекущиеДанные.ID,
			ЭтотОбъект,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершает удаление файла после вопроса пользователю.
//
&НаКлиенте
Процедура ФайлыПередУдалениемЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдаление(ПараметрыОповещения.ВыделенныеСтроки);
		ОбновитьСписокФайловКлиент();
	КонецЕсли;
	
КонецПроцедуры

// Помечает на удаление выделенные файлы.
//
&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	СписокОбъектов = Новый Массив;
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Данные = Файлы.НайтиПоИдентификатору(НомерСтроки);
		СписокОбъектов.Добавить(Новый Структура("ID, Тип", Данные.ID, "DMFile"));
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПометитьНаУдалениеСнятьПометкуОбъектов(
		Прокси,
		СписокОбъектов);
	
КонецПроцедуры

// Меняет доступность команд в зависимости от выбранного файла.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаФайлов()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Элементы.ОткрытьНаЧтение.Доступность = Ложь;
		Элементы.КонтекстОткрытьНаЧтение.Доступность = Ложь;
		Элементы.ОткрытьДляРедактирования.Доступность = Ложь;
		Элементы.КонтекстОткрытьДляРедактирования.Доступность = Ложь;
		Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		Элементы.КонтекстЗакончитьРедактирование.Доступность = Ложь;
		Элементы.СохранитьНаДиск.Доступность = Ложь;
		Элементы.СохранитьНаДискКонтекст.Доступность = Ложь;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = Ложь;
		Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = Ложь;
		Элементы.СохранитьИзменения.Доступность = Ложь;
		Элементы.ОтменитьРедактирование.Доступность = Ложь;
		Элементы.ОтменитьРедактированиеКонтекст.Доступность = Ложь;
		Элементы.ОткрытьКарточку.Доступность = Ложь;
		Элементы.ОткрытьКарточкуКонтекст.Доступность = Ложь;
		Элементы.Удалить.Доступность = Ложь;
		Элементы.УдалитьКонтекст.Доступность = Ложь;
		
	Иначе
		
		Редактируется = ТекущиеДанные.Редактируется;
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		РедактируетсяДругимПользователем = 
			Редактируется
			И Не РедактируетсяТекущимПользователем;
		МожноЗахватить = 
			СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов
			И Не РедактируетсяДругимПользователем;
		МожноОтпустить =
			СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов
			И РедактируетсяТекущимПользователем;
		
		Элементы.ОткрытьНаЧтение.Доступность = Истина;
		Элементы.КонтекстОткрытьНаЧтение.Доступность = Истина;
		Элементы.ОткрытьДляРедактирования.Доступность = МожноЗахватить;
		Элементы.КонтекстОткрытьДляРедактирования.Доступность = МожноЗахватить;
		Элементы.ЗакончитьРедактирование.Доступность = МожноОтпустить;
		Элементы.КонтекстЗакончитьРедактирование.Доступность = МожноОтпустить;
		Элементы.СохранитьИзменения.Доступность = МожноОтпустить;
		Элементы.ОтменитьРедактирование.Доступность = МожноОтпустить;
		Элементы.ОтменитьРедактированиеКонтекст.Доступность = МожноОтпустить;
		Элементы.СохранитьНаДиск.Доступность = Истина;
		Элементы.СохранитьНаДискКонтекст.Доступность = Истина;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = МожноЗахватить;
		Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = МожноЗахватить;
		Элементы.ОткрытьКарточку.Доступность = Истина;
		Элементы.ОткрытьКарточкуКонтекст.Доступность = Истина;
		Элементы.Удалить.Доступность = МожноЗахватить;
		Элементы.УдалитьКонтекст.Доступность = МожноЗахватить;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет картинку предпросмотра.
//
&НаСервере
Процедура ОбновитьПредпросмотр(ТекущаяСтрока)
	
	Если Не Предпросмотр
		Или ТекущаяСтрока = Неопределено Тогда
		АдресДанныхФайла = "";
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(НРег(ТекущиеДанные.Расширение)) <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.АдресДанныхФайла) Тогда
			ТекущиеДанные.АдресДанныхФайла =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
					ТекущиеДанные.ID,
					УникальныйИдентификатор);
		КонецЕсли;
		АдресДанныхФайла = ТекущиеДанные.АдресДанныхФайла;
	Иначе
		АдресДанныхФайла = "";
		Элементы.КартинкаПредпросмотра.ТекстНевыбраннойКартинки = НСтр("ru = 'Предпросмотр файлов этого типа не поддерживается.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Почта

// Формирует параметры исходящего письма со вложениями.
//
// Параметры:
//   Владелец - Произвольный - владелец файлов.
//   Вложения - Массив - массив структур со свойствами:
//     Представление - Строка - представление файла;
//     Идентификатор - Строка - идентификатор файла в ДО.
//   УникальныйИдентификатор - Строка - идентификатор формы-владельца.
//
&НаСервереБезКонтекста
Функция ПараметрыИсходящегоПисьма(Знач Владелец, Знач Вложения, Знач УникальныйИдентификатор)
	
	// Подготовим заголовок письма.
	ПараметрыПисьма = Новый Структура("УдалятьФайлыПослеОтправки", Истина);
	ОдноВложение = Вложения.Количество() = 1;
	
	// Получатель.
	Если ОбщегоНазначения.ПодсистемаСуществует("ОтправкаПочтовыхСообщений") Тогда
		МодульОтправкаПочтовыхСообщений = 
			ОбщегоНазначения.ОбщийМодуль("ОтправкаПочтовыхСообщений");
	Иначе
		МодульОтправкаПочтовыхСообщений = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", Владелец.Метаданные())
			И МодульОтправкаПочтовыхСообщений <> Неопределено Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Контрагент");
		ПараметрыПисьма.Вставить("Получатель", МодульОтправкаПочтовыхСообщений.АдресаЭлектроннойПочты(Контрагент));
	Иначе
		ПараметрыПисьма.Вставить("Получатель", "");
	КонецЕсли;
	
	// Тема.
	НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Номер");
	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
		МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		НомерДокумента = МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	КонецЕсли;
	ДатаДокумента = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Дата"), "ДЛФ=DD");
	Тема = СтрШаблон(НСтр("ru='%1, %2 к документу %3 %4 от %5'"),
		?(ОдноВложение, НСтр("ru='Файл'"), НСтр("ru='Файлы'")),
		?(ОдноВложение, НСтр("ru='присоединенный'"), НСтр("ru='присоединенные'")),
		ТипЗнч(Владелец),
		НомерДокумента,
		ДатаДокумента);
	ПараметрыПисьма.Вставить("Тема", Тема);
	
	// Текст.
	Текст = СтрШаблон(НСтр("ru='К письму %1 %2:'"),
		?(ОдноВложение, НСтр("ru='присоединен'"), НСтр("ru='присоединены'")),
		?(ОдноВложение, НСтр("ru='файл'"), НСтр("ru='файлы'")));
	
	// Получим вложения из ДО.
	Для Каждого Вложение Из Вложения Цикл
		АдресВоВременномХранилище =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Вложение.ИдентификаторДО,
				УникальныйИдентификатор);
		Вложение.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		Текст = Текст + Символы.ПС + СтрШаблон(НСтр("ru='- %1'"), Вложение.Представление);
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	Если МодульОтправкаПочтовыхСообщений <> Неопределено Тогда
		ПодготовленныйТекст = МодульОтправкаПочтовыхСообщений.ПодготовитьТекстПисьма(Текст);
		ПараметрыПисьма.Вставить("Текст", ПодготовленныйТекст);
		МодульОтправкаПочтовыхСообщений.ДополнитьПараметрыПисьма(ПараметрыПисьма);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Начинает отправку письма через ДО. Вызывается, если включена соответствующая ФО.
//
&НаКлиенте
Процедура ОтправитьЧерезДокументооборот()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЧерезДокументооборотЗавершение",
		ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ID) Тогда
		
		Предмет = Новый Структура;
		Предмет.Вставить("ID", ID);
		Предмет.Вставить("type", Тип);
		Предмет.Вставить("name", Строка(Владелец));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Предмет);
		
	Иначе
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает отправку письма через ДО после нахождения связанного документа ДО.
//
&НаКлиенте
Процедура ОтправитьЧерезДокументооборотЗавершение(Предмет, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Предмет) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура("Предмет", Предмет);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыПисьма);
	
КонецПроцедуры

// Начинает отправку письма средствами ИС, если использование почты ДО выключено.
//
&НаКлиенте
Процедура ОтправитьЧерезИС()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЧерезИСНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.
			ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает отправку письма средствами ИС после помещения файлов из ДО в хранилище.
//
&НаКлиенте
Процедура ОтправитьЧерезИСНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, Параметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Вложения = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
		Строка = Файлы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Представление = СтрШаблон("%1.%2", Строка.Наименование, Строка.Расширение);
		Вложение = Новый Структура;
		Вложение.Вставить("Представление", Представление);
		Вложение.Вставить("Идентификатор", Неопределено);
		Вложение.Вставить("ИдентификаторДО", Строка.ID);
		Вложения.Добавить(Вложение);
	КонецЦикла;
	
	Параметры = ПараметрыИсходящегоПисьма(Владелец, Вложения, УникальныйИдентификатор);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Параметры);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Электронная подпись

// Получает подписи из ДО и обновляет форму.
//
&НаСервере
Процедура ПрочитатьИОбновитьСписокФайловИПодписей()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("files");
	Если Тип = "DMInternalDocument" Или Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Тогда
		ПолучаемыеПоля.Добавить("enabledProperties");
	КонецЕсли;
	Если ПоказыватьУдаленные Тогда
		ПолучаемыеПоля.Добавить("ignoreDeletionMark");
	КонецЕсли;
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		Тип,
		ID,
		ПолучаемыеПоля);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокФайлов(
		ОбъектXDTO.files,
		Файлы);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокПодписейФайлов(
		ОбъектXDTO.files,
		Подписи,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти