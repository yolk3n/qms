#Область ОписаниеПеременных

&НаКлиенте
Перем НомерАктивизированнойСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВнешнийОбъект") Тогда
		Если ТипЗнч(Параметры.ВнешнийОбъект) = Тип("Структура") Тогда
			ВнешнийОбъект = Параметры.ВнешнийОбъект.presentation;
			ВнешнийОбъектID = Параметры.ВнешнийОбъект.ID;
			ВнешнийОбъектТип = Параметры.ВнешнийОбъект.type;
			Если Найти(ВнешнийОбъектТип,"Document") <> 0 
					Или ВнешнийОбъектТип = "DMFile" 
					Или ВнешнийОбъектТип = "DMCorrespondent" Тогда
				Заголовок = НСтр("ru = 'Процессы и задачи'");
			ИначеЕсли Найти(ВнешнийОбъектТип,"BusinessProcess") <> 0 Тогда
				Заголовок = НСтр("ru = 'Задачи процесса %Объект%'");
				Заголовок = СтрЗаменить(Заголовок, "%Объект%", Параметры.ВнешнийОбъект.presentation);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаВнешнийОбъект = Параметры.СсылкаНаВнешнийОбъект;
	Если ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		Заголовок = НСтр("ru = 'Задачи по ""%Объект%""'");
		Заголовок = СтрЗаменить(Заголовок, "%Объект%", Параметры.ВнешнийОбъект.name);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВнешнийОбъектID) Или ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
	КонецЕсли;
	
	// результаты выполнения задач
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
		Элементы.ДеревоБизнесПроцессовИЗадачВыполнено.Видимость = Истина;
		Элементы.ДеревоБизнесПроцессовИЗадачКартинка.Видимость = Ложь;
	КонецЕсли;
	// Принятие задач к исполнению.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.2.7.3.CORP") Тогда
		Элементы.ДеревоБизнесПроцессовИЗадачПринятьКИсполнению.Видимость = Ложь;
	КонецЕсли;
	// Отмена принятия задач к исполнению.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
		Элементы.ДеревоБизнесПроцессовИЗадачОтменитьПринятиеКИсполнению.Видимость = Ложь;
	КонецЕсли;
	
	// Условное оформление
	УстановитьУсловноеОформлениеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		РаскрытыеЭлементы = Новый СписокЗначений;
		ПолучитьРаскрытыеЭлементы(
			Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
		РаскрытыеЭлементы.Добавить(Параметр.ID);
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
		УстановитьРазвернутостьЭлементовДерева(
			Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы);
		УстановитьТекущийЭлементВДереве(
			Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, Параметр.ID);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоБизнесПроцессовИЗадач

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачПриАктивизацииСтроки(Элемент)
	
	Если НомерАктивизированнойСтроки <> Элемент.ТекущаяСтрока Тогда
		
		НомерАктивизированнойСтроки = Элемент.ТекущаяСтрока;
		СтрокаЗадачи = Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные;
		Если СтрокаЗадачи = Неопределено
			Или СтрокаЗадачи.ОбъектТип <> "DMBusinessProcessTask"
			Или СтрокаЗадачи.Выполнено Тогда
			
			Элементы.ДеревоБизнесПроцессовИЗадачПринятьКИсполнению.Доступность = Ложь;
			Элементы.ДеревоБизнесПроцессовИЗадачОтменитьПринятиеКИсполнению.Доступность = Ложь;
		Иначе
			Элементы.ДеревоБизнесПроцессовИЗадачПринятьКИсполнению.Доступность = Не СтрокаЗадачи.ПринятаКИсполнению;
			Элементы.ДеревоБизнесПроцессовИЗадачОтменитьПринятиеКИсполнению.Доступность = СтрокаЗадачи.ПринятаКИсполнению;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКарточкуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	Модифицированность = Ложь;
	ОткрытьКарточкуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Модифицированность = Ложь;
	ОбновитьСписокЗадачНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Модифицированность = Ложь;
	ПринятьЗадачиКИсполнению();
	
	Если Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные <> Неопределено Тогда
		Параметр = Новый Структура("ID", Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.ОбъектID);
		ОбновитьСписокЗадачНаКлиенте(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	Модифицированность = Ложь;
	ОтменитьПринятиеЗадачКИсполнению();
	
	Если Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные <> Неопределено Тогда
		Параметр = Новый Структура("ID", Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.ОбъектID);
		ОбновитьСписокЗадачНаКлиенте(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()
	
	Если УсловноеОформление.Элементы.Количество() = 3 Тогда
		ЭлементДляУдаления = УсловноеОформление.Элементы[2];
		УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.Выполнено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачСрокИсполнения");
		
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, СтрокиОтвета)
		
	Для Каждого ОднаСтрокаОтвета Из СтрокиОтвета Цикл
		Важность = 1;
		Если ОднаСтрокаОтвета.importance.objectID.ID = "Низкая" Тогда //@NON-NLS-1
			Важность = 0;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectID.ID = "Обычная" Тогда //@NON-NLS-1
			Важность = 1;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectID.ID = "Высокая" Тогда //@NON-NLS-1
			Важность = 2;
		КонецЕсли;
		Если Найти(ОднаСтрокаОтвета.objectID.type, "BusinessProcess") > 0
			И Найти(ОднаСтрокаОтвета.objectID.type, "Task") = 0 Тогда
			Если Не (ЗначениеЗаполнено(ВнешнийОбъектID) И ВнешнийОбъектID = ОднаСтрокаОтвета.objectID.ID) Тогда
				НоваяСтрока = СтрокиДереваЗадач.Добавить();
				НоваяСтрока.Важность = Важность;
				НоваяСтрока.Выполнено = ЗначениеЗаполнено(ОднаСтрокаОтвета.endDate);
				НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
				НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
				НоваяСтрока.Автор = ОднаСтрокаОтвета.author.name;
				НоваяСтрока.Тип = 0;
				НоваяСтрока.ОбъектТип = ОднаСтрокаОтвета.objectID.type;
				НоваяСтрока.ОбъектID  = ОднаСтрокаОтвета.objectID.ID;
				// результаты выполнения задач
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
					НоваяСтрока.Картинка = ИнтеграцияС1СДокументооборот.ИндексКартинкиПометкиЗавершения(
						ОднаСтрокаОтвета.completionMark);
				КонецЕсли;
				ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.tasks);
			Иначе
				ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, ОднаСтрокаОтвета.tasks);
			КонецЕсли;
		ИначеЕсли Найти(ОднаСтрокаОтвета.objectID.type, "Task") > 0 Тогда
			Если ЭтоСлужебнаяЗадача(ОднаСтрокаОтвета) Тогда
				ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, ОднаСтрокаОтвета.businessProcesses);
			Иначе	
				НоваяСтрока = СтрокиДереваЗадач.Добавить();
				НоваяСтрока.Важность = Важность;
				НоваяСтрока.Выполнено = ОднаСтрокаОтвета.executed;
				НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
				НоваяСтрока.СрокИсполнения = ОднаСтрокаОтвета.dueDate;
				НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
				Если ОднаСтрокаОтвета.performer.Установлено("user") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.user.name;
				ИначеЕсли ОднаСтрокаОтвета.performer.Установлено("role") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.role.name;
					Если ОднаСтрокаОтвета.performer.Установлено("mainAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", "
							+ ОднаСтрокаОтвета.performer.mainAddressingObject.name;
					КонецЕсли;
					Если ОднаСтрокаОтвета.Performer.Установлено("secondaryAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", "
							+ ОднаСтрокаОтвета.performer.secondaryAddressingObject.name;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.Тип = 1;
				НоваяСтрока.ОбъектТип = ОднаСтрокаОтвета.objectID.type;
				НоваяСтрока.ОбъектID = ОднаСтрокаОтвета.objectID.ID;
				НоваяСтрока.ВладелецТип = ОднаСтрокаОтвета.parentBusinessProcess.objectID.type;
				НоваяСтрока.ВладелецID = ОднаСтрокаОтвета.parentBusinessProcess.objectID.ID;
				НоваяСтрока.ТочкаМаршрута = ОднаСтрокаОтвета.businessProcessStep;
				НоваяСтрока.ПринятаКИсполнению = ОднаСтрокаОтвета.accepted;
				// результаты выполнения задач
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
					НоваяСтрока.Картинка = ИнтеграцияС1СДокументооборот.ИндексКартинкиПометкиЗавершения(
						ОднаСтрокаОтвета.executionMark);
				КонецЕсли;
				ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.businessProcesses);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.ОбъектТип,
		Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.ОбъектID,
		Элементы.ДеревоБизнесПроцессовИЗадач);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоБизнесПроцессовИЗадач()
	
	// Задачи.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2")
			Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.1.1") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтотОбъект);
		Элементы.ДеревоБизнесПроцессовИЗадач.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	Отбор = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	ОтборБизнесПроцессов = Отбор.businessProcess; // СписокXDTO
	ОтборДокументов = Отбор.target; // СписокXDTO
	
	Если Найти(ВнешнийОбъектТип,"BusinessProcess")<>0 Тогда
		Процесс = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
		Процесс.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ВнешнийОбъектID,
			ВнешнийОбъектТип);
		Процесс.name = "";
		ОтборБизнесПроцессов.Добавить(Процесс);
		
	ИначеЕсли Найти(ВнешнийОбъектТип, "Document") <> 0
			Или ВнешнийОбъектТип = "DMFile"
			Или ВнешнийОбъектТип = "DMCorrespondent" Тогда
		
		// Получение задач по предмету.
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
			Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтотОбъект);
			Возврат;
		КонецЕсли;
		Предмет = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMObject");
		Предмет.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ВнешнийОбъектID,
			ВнешнийОбъектТип);
		Предмет.name = "";
		ОтборДокументов.Добавить(Предмет);
		
	КонецЕсли;
	
	Запрос.query = Отбор;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДеревоЗадач = РеквизитФормыВЗначение("ДеревоБизнесПроцессовИЗадач", Тип("ДеревоЗначений"));
	ДеревоЗадач.Строки.Очистить();
	ПостроитьДеревоЗадачИзОтветаВебСервиса(ДеревоЗадач.Строки, Ответ.businessProcesses);
	ЗначениеВРеквизитФормы(ДеревоЗадач, "ДеревоБизнесПроцессовИЗадач");
	УстановитьУсловноеОформлениеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачНаКлиенте(Параметр = Неопределено)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьРаскрытыеЭлементы(
		Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
	Если ЗначениеЗаполнено(Параметр) Тогда
		РаскрытыеЭлементы.Добавить(Параметр.ID);
	КонецЕсли;
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы);
	Если ЗначениеЗаполнено(Параметр) Тогда
		УстановитьТекущийЭлементВДереве(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, Параметр.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьЗадачиКИсполнению()
	
	МассивСтрок = Элементы.ДеревоБизнесПроцессовИЗадач.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадач = Новый Массив;
		Для Каждого Элемент Из МассивСтрок Цикл
			СтрокаДанных = ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Элемент);
			Если ЗначениеЗаполнено(СтрокаДанных.ОбъектID) И СтрокаДанных.ОбъектТип = "DMBusinessProcessTask" Тогда
				МассивЗадач.Добавить(СтрокаДанных.ОбъектID);
			КонецЕсли;
		КонецЦикла;
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ИнтеграцияС1СДокументооборот.ПринятьЗадачуКИсполнению(Прокси, МассивЗадач);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПринятиеЗадачКИсполнению()
	
	МассивСтрок = Элементы.ДеревоБизнесПроцессовИЗадач.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадач = Новый Массив;
		Для Каждого Элемент Из МассивСтрок Цикл
			СтрокаДанных = ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Элемент);
			Если ЗначениеЗаполнено(СтрокаДанных.ОбъектID) И СтрокаДанных.ОбъектТип = "DMBusinessProcessTask" Тогда
				МассивЗадач.Добавить(СтрокаДанных.ОбъектID);
			КонецЕсли;
		КонецЦикла;
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ИнтеграцияС1СДокументооборот.ОтменитьПринятиеЗадачКИсполнению(Прокси, МассивЗадач);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРаскрытыеЭлементы(ДеревоЭлемент, МассивСтрокОдногоУровня, СписокРаскрытыхЭлементов)
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЭлемента = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЭлемента) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЭлемента) Тогда
			СписокРаскрытыхЭлементов.Добавить(СтрокаОдногоУровня.ОбъектID);
		КонецЕсли;
		ПолучитьРаскрытыеЭлементы(ДеревоЭлемент, СтрокаОдногоУровня.ПолучитьЭлементы(), СписокРаскрытыхЭлементов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит, СписокЭлементовДляРазвертывания)
	
	Если СписокЭлементовДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЭлементовДляРазвертывания Цикл
			Индекс = -1;
			НайтиЭлементВДереве(ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), ЭлементСписка.Значение, Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(), Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементВДереве(КоллекцияЭлементовОдногоУровня, ИскомыйЭлемент, Индекс) 
	
	Если КоллекцияЭлементовОдногоУровня.Количество() > 0 Тогда
		Для Каждого ЭлементДерева Из КоллекцияЭлементовОдногоУровня Цикл
			Если ЭлементДерева.ОбъектID = ИскомыйЭлемент Тогда
				Индекс = ЭлементДерева.ПолучитьИдентификатор();
			Иначе
				НайтиЭлементВДереве(ЭлементДерева.ПолучитьЭлементы(), ИскомыйЭлемент, Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементВДереве(ДеревоЭлемент, ДеревоРеквизит, ТекущийЭлемент) 
	
	Если ТекущийЭлемент <> Неопределено Тогда
		Индекс = -1;
		НайтиЭлементВДереве(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийЭлемент, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСлужебнаяЗадача(Задача)
	
	Служебная = Ложь;
	
	Если Задача.parentBusinessProcess.objectID.type = "DMComplexBusinessProcess" Тогда
		Если Задача.businessProcessStep = "Выполнить все действия процесса" Тогда //@NON-NLS-1
			Служебная = Истина;
		КонецЕсли;
	ИначеЕсли Задача.parentBusinessProcess.objectID.type = "DMBusinessProcessInternalDocumentProcessing"
			Или Задача.parentBusinessProcess.objectID.type = "DMBusinessProcessIncomingDocumentProcessing"
			Или Задача.parentBusinessProcess.objectID.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Служебная = Истина;
	КонецЕсли;
	
	Возврат Служебная;
	
КонецФункции

#КонецОбласти