#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	// Задачи.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступноПолучениеСводки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.28.12.CORP");
	
	Если Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) Тогда
		Предмет = Параметры.Предмет.name;
		ПредметID = Параметры.Предмет.ID;
		ПредметТип = Параметры.Предмет.type;
		Если Параметры.Предмет.Свойство("ВнешнийОбъект") Тогда
			ВнешнийОбъект = Параметры.Предмет.ВнешнийОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ГлавнаяЗадача") И ЗначениеЗаполнено(Параметры.ГлавнаяЗадача) Тогда
		ГлавнаяЗадача = Параметры.ГлавнаяЗадача.name;
		ГлавнаяЗадачаID = Параметры.ГлавнаяЗадача.ID;
		ГлавнаяЗадачаТип = Параметры.ГлавнаяЗадача.type;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПолучатьВидДокумента = Ложь;
		Если Не ЗначениеЗаполнено(ВидДокументаID) Тогда
			// Пакетные запросы.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
				ПолучатьВидДокумента = Истина;
			Иначе
				Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
				СписокОбъектов = Запрос.objectIDs; // СписокXDTO
				ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
				
				ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ПредметID, ПредметТип);
				СписокОбъектов.Добавить(ОбъектИд);
				
				ПолучаемыеПоля.Добавить("documentType");
				
				Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
				Объект = Результат.objects[0];
				Если Найти(Объект.objectID.type,"Document") <> 0 Тогда
					ВидДокумента = Объект.documentType.name;
				Иначе
					Элементы.ВидДокумента.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента);
	Иначе
		ЗаполнитьДеревоШаблонов();
	КонецЕсли;
	
	УстановитьЗаголовокПредметаПоТипуОбъекта();
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		Элементы.ГруппаЭлементы.Доступность = Истина;
		Элементы.СоздатьПроцесс.Доступность = Истина;
		Элементы.ГруппаПредмет.Видимость = Истина;
	Иначе
		Элементы.СтартоватьСразу.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливается развернутость ветвей по умолчанию.
	ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Развернуть Тогда
			Элементы.ДеревоШаблонов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Если СозданНовыйДокумент Тогда // оповестим открытые формы
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("name", Предмет);
		ПараметрыОповещения.Вставить("ID", ПредметID);
		ПараметрыОповещения.Вставить("type", ПредметТип);
		ПараметрыОповещения.Вставить("documentType", ВидДокумента);
		
		Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент" И Источник = Элементы.Предмет Тогда
		ПредметID = Параметр.ID;
		ПредметТип = Параметр.type;
		Предмет = Параметр.name;
		Если Параметр.Свойство("documentType") Тогда
			ВидДокумента = Параметр.documentType;
		КонецЕсли;
		
		Элементы.ГруппаЭлементы.Доступность = Истина;
		Элементы.СоздатьПроцесс.Доступность = Истина;
		Элементы.ГруппаПредмет.Доступность = Истина;
		
		ЗаполнитьДеревоШаблонов();
		
		ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Развернуть Тогда
				Элементы.ДеревоШаблонов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		Если Параметр.Свойство("Стартован") Тогда
			Если Параметр.Стартован Тогда
				ПодключитьОбработчикОжидания("ЗакрытьФорму",0.1,Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотИсходящееПисьмо"
			И Параметр.ПредметID = ПредметID Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(ПредметТип, ПредметID, Элементы.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоШаблонов

&НаКлиенте
Процедура ДеревоШаблоновПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СоздатьПроцессВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СоздатьПроцесс.Доступность = Не ТекущиеДанные.ЭтоЗаголовок;
	
	Если Не ТекущиеДанные.ПодсказкаПолучена И ДоступноПолучениеСводки Тогда
		Сводка = СводкаШаблона(ТекущиеДанные.ШаблонID, ТекущиеДанные.ШаблонТип);
	Иначе
		Сводка = HTMLПодсказка(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	СоздатьПроцессВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция HTMLПодсказка(Данные)
	
	Если СтрНайти(Данные.Подсказка, "<html>") = 1 Тогда
		Возврат Данные.Подсказка;
	КонецЕсли;
	
	Если Данные.ЭтоЗаголовок Тогда
		Возврат HTMLПодсказкаЗаголовка(Данные.Подсказка);
	Иначе
		Возврат HTMLПодсказкаСтроки(Данные.Подсказка);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция HTMLПодсказкаЗаголовка(Подсказка)
	
	Возврат СтрЗаменить(
		"<html><head><style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solID;}
		|	td {vertical-align: top;}
		|	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solID #C8C8C8;}
		|	td.frame {
		|		border: 1px solID #C8C8C8;}
		|</style><body><table><tr><td><html><head><style type=""text/css""><br>
		|	body {<br>
		|		overflow:    auto;<br>
		|		margin-top:  2px;<br>
		|		margin-left: 2px;<br>
		|		font-family: Arial;<br>
		|		font-size:   10pt;}<br>
		|	table {<br>
		|		width:       100%;<br>
		|		font-family: Arial;<br>
		|		font-size:   10pt;<br>
		|		border: 0px solID;}<br>
		|	td {vertical-align: top;}<br>
		|	a:link {<br>
		|		color: #006699; text-decoration: none;}<br>
		|	a:visited {<br>
		|		color: #006699; text-decoration: none;}<br>
		|	a:hover {<br>
		|		color: #006699; text-decoration: underline;}<br>
		|	p {<br>
		|		margin-top: 15px;}<br>
		|	table.frame {<br>
		|		border-collapse: collapse;<br>
		|		border: 1px solID #C8C8C8;}<br>
		|	td.frame {<br>
		|		border: 1px solID #C8C8C8;}<br></style><body><table><tr>
		|<td>%Подсказка%</td>
		|</tr></table></body></html></td></tr></table></body></html>",
		"%Подсказка%",
		СтрЗаменить(Подсказка, Символы.ПС, "<br>"));
	
КонецФункции

&НаКлиенте
Функция HTMLПодсказкаСтроки(Подсказка)
	
	Возврат СтрЗаменить(
		"<html><head><style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solID;}
		|	td {vertical-align: top;}
		|	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solID #C8C8C8;}
		|	td.frame {
		|		border: 1px solID #C8C8C8;}
		|</style><body><table><tr><td>%Подсказка%</td></tr></table></body></html>",
		"%Подсказка%",
		СтрЗаменить(Подсказка, Символы.ПС, "<br>"));
	
КонецФункции

&НаСервере
Функция СводкаШаблона(ШаблонID, ШаблонТип)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetTemplateHintRequest");
	Запрос.template = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ШаблонID,
		ШаблонТип);
	
	РезультатЗапроса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, РезультатЗапроса);
	
	Возврат РезультатЗапроса.hintHTML;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокПредметаПоТипуОбъекта()
	
	Если ПредметТип = "DMInternalDocument" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Внутренний документ'");
		
	ИначеЕсли ПредметТип = "DMIncomingDocument" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Входящий документ'");
		
	ИначеЕсли ПредметТип = "DMOutgoingDocument" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Исходящий документ'");
		
	ИначеЕсли ПредметТип = "DMFile" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Файл'");
		
	ИначеЕсли ПредметТип = "DMActivity" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Мероприятие'");
		
	ИначеЕсли ПредметТип = "DMIncomingEMail" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Входящее письмо'");
		
	ИначеЕсли ПредметТип = "DMOutgoingEMail" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Исходящее письмо'");
		
	ИначеЕсли ПредметТип = "DMProject" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Проект'");
		
	ИначеЕсли ПредметТип = "DMProjectTask" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Проектная задача'");
		
	ИначеЕсли ПредметТип = "DMDiscussionMessage" Тогда
		Элементы.Предмет.Заголовок = НСтр("ru='Сообщение'");
		
	Иначе
		Элементы.Предмет.Заголовок = "Предмет";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента = Ложь)
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ЗапросыПакета = Новый Массив;
	
	Если ПолучатьВидДокумента Тогда
		ПредметДляПолученияИзДО = Новый Структура("ID, Тип", ПредметID, ПредметТип);
		ЗапросыПакета.Добавить(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектыЗапрос(
				Прокси,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредметДляПолученияИзДО),
				"documentType"));
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetBusinessProcessTemplatesTreeRequest");
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Запрос, "getComplexBusinessProcessTemplateHint") Тогда
		Запрос.getComplexBusinessProcessTemplateHint = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ПредметID,
			ПредметТип);
		Запрос.businessProcessTargetID = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Если ПолучатьВидДокумента Тогда
		ЗапросыПакета.Добавить(Запрос);
		ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			ЗапросыПакета,
			Истина);
		
		РезультатВидДокумента = ОтветНаЗапросыПакета.responses[0];
		Объект = РезультатВидДокумента.objects[0];
		Если Найти(Объект.objectID.type,"Document") <> 0 Тогда
			ВидДокумента = Объект.documentType.name;
		Иначе
			Элементы.ВидДокумента.Видимость = Ложь;
		КонецЕсли;
		
		РезультатДеревоШаблонов = ОтветНаЗапросыПакета.responses[1];
	Иначе
		РезультатДеревоШаблонов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, РезультатДеревоШаблонов);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(РезультатДеревоШаблонов, "formHeader") Тогда
		ЭтотОбъект.Заголовок = РезультатДеревоШаблонов.formHeader;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(РезультатДеревоШаблонов, "commandHeader") Тогда
		Элементы.СоздатьПроцесс.Заголовок = РезультатДеревоШаблонов.commandHeader;
	КонецЕсли;
	
	Если ИспользуетсяОтправкаПоПочте() Тогда
		ОтправитьПоПочте = Дерево.Строки.Добавить();
		ОтправитьПоПочте.Наименование = НСтр("ru = 'По почте'");
		ОтправитьПоПочте.Подсказка = НСтр("ru = 'Создание почтового сообщения для отправки.'");
		ОтправитьПоПочте.ПодсказкаПолучена = Истина;
		ОтправитьПоПочте.ЭтоЗаголовок = Ложь;
		ОтправитьПоПочте.ТипПроцесса = "ОтправитьПоПочте";
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
		ОбработатьРезультат_2_1_18_1(Дерево, РезультатДеревоШаблонов);
	Иначе
		ОбработатьРезультат(Дерево, РезультатДеревоШаблонов);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультат(Дерево, РезультатДеревоШаблонов)
	
	ПорядокБизнесПроцессов = Новый Массив();
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOrder");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessApproval");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessPerformance");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConsideration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessAcquaintance");
	ПорядокБизнесПроцессов.Добавить("DMComplexBusinessProcess");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessRegistration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConfirmation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInvitation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOutgoingDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInternalDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessIncomingDocumentProcessing");
	
	СкрытьПоручения = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.0.0");
	
	Для Каждого Раздел Из РезультатДеревоШаблонов.BusinessProcessTemplatesTree Цикл
		
		РазделДерева = Дерево.Строки.Добавить();
		РазделДерева.Наименование = Раздел.name;
		РазделДерева.Подсказка = Раздел.hint;
		РазделДерева.ПодсказкаПолучена = Истина;
		РазделДерева.ЭтоЗаголовок = Истина;
		
		Если РазделДерева.Наименование = НСтр("ru = 'Другие шаблоны'") Тогда
			РазделДерева.Развернуть = Ложь;
		Иначе
			РазделДерева.Развернуть = Истина;
		КонецЕсли;
		
		Для Каждого Шаблон Из Раздел.elements Цикл
			
			Если СкрытьПоручения И Шаблон.businessProcessType = "DMBusinessProcessOrder" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРаздела = РазделДерева.Строки.Добавить();
			СтрокаРаздела.Наименование = Шаблон.name;
			СтрокаРаздела.Подсказка = Шаблон.hint;
			СтрокаРаздела.ПодсказкаПолучена = Истина;
			СтрокаРаздела.ЭтоЗаголовок = Ложь;
			СтрокаРаздела.ТипПроцесса = Шаблон.businessProcessType;
			Если ЗначениеЗаполнено(Шаблон.template.objectID.ID) Тогда
				СтрокаРаздела.ШаблонID = Шаблон.template.objectID.ID;
				СтрокаРаздела.ШаблонТип = Шаблон.template.objectID.type;
			Иначе
				СтрокаРаздела.Индекс = ПорядокБизнесПроцессов.Найти(СтрокаРаздела.ТипПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделДерева.Строки.Сортировать("Индекс");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультат_2_1_18_1(Дерево, РезультатДеревоШаблонов)
	
	УсловноеОформление.Элементы.Очистить();
	
	Для Каждого Раздел Из РезультатДеревоШаблонов.BusinessProcessTemplatesTree Цикл
		
		Если Раздел.name = НСтр("ru = 'Рекомендованные шаблоны'") Тогда
			
			Для Каждого Шаблон Из Раздел.elements Цикл
				
				Если Шаблон.businessProcessType = "DMBusinessProcessOrder" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаздела = Дерево.Строки.Добавить();
				СтрокаРаздела.Наименование = Шаблон.name;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Шаблон, "hintHTML") Тогда
					СтрокаРаздела.Подсказка = Шаблон.hintHTML;
					СтрокаРаздела.ПодсказкаПолучена = Истина;
				ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Шаблон, "hint") Тогда
					СтрокаРаздела.Подсказка = Шаблон.hint;
					СтрокаРаздела.ПодсказкаПолучена = Истина;
				КонецЕсли;
				СтрокаРаздела.ЭтоЗаголовок = Ложь;
				СтрокаРаздела.ТипПроцесса = Шаблон.businessProcessType;
				Если ЗначениеЗаполнено(Шаблон.template.objectID.ID) Тогда
					СтрокаРаздела.ШаблонID = Шаблон.template.objectID.ID;
					СтрокаРаздела.ШаблонТип = Шаблон.template.objectID.type;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РазделДерева = Дерево.Строки.Добавить();
			РазделДерева.Наименование = Раздел.name;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Раздел, "hintHTML") Тогда
				РазделДерева.Подсказка = Раздел.hintHTML;
				РазделДерева.ПодсказкаПолучена = Истина;
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Раздел, "hint") Тогда
				РазделДерева.Подсказка = Раздел.hint;
				РазделДерева.ПодсказкаПолучена = Истина;
			КонецЕсли;
			РазделДерева.ЭтоЗаголовок = Истина;
			
			Если РазделДерева.Наименование = НСтр("ru = 'Другие варианты'") Тогда
				РазделДерева.Развернуть = Ложь;
			Иначе
				РазделДерева.Развернуть = Истина;
			КонецЕсли;
			
			Для Каждого Шаблон Из Раздел.elements Цикл
				
				Если Шаблон.businessProcessType = "DMBusinessProcessOrder" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаздела = РазделДерева.Строки.Добавить();
				СтрокаРаздела.Наименование = Шаблон.name;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Шаблон, "hintHTML") Тогда
					СтрокаРаздела.Подсказка = Шаблон.hintHTML;
					СтрокаРаздела.ПодсказкаПолучена = Истина;
				ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Шаблон, "hint") Тогда
					СтрокаРаздела.Подсказка = Шаблон.hint;
					СтрокаРаздела.ПодсказкаПолучена = Истина;
				КонецЕсли;
				СтрокаРаздела.ЭтоЗаголовок = Ложь;
				СтрокаРаздела.ТипПроцесса = Шаблон.businessProcessType;
				Если ЗначениеЗаполнено(Шаблон.template.objectID.ID) Тогда
					СтрокаРаздела.ШаблонID = Шаблон.template.objectID.ID;
					СтрокаРаздела.ШаблонТип = Шаблон.template.objectID.type;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяОтправкаПоПочте()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПочту1СДокументооборота") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборотСоздатьПисьмо.
		ТипПараметраКоманды.Типы().Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент()
	
	ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПерваяГруппа = ЭлементыДерева[0];
	Если ПерваяГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПервыйЭлементПервойГруппы = ПерваяГруппа.ПолучитьЭлементы()[0];
	Индекс = ПервыйЭлементПервойГруппы.ПолучитьИдентификатор();
	Элементы.ДеревоШаблонов.ТекущаяСтрока = Индекс;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессВыполнить()
	
	Если Элементы.ДеревоШаблонов.ТекущиеДанные = Неопределено
			Или Элементы.ДеревоШаблонов.ТекущиеДанные.ЭтоЗаголовок Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПредметБизнесПроцесса = Новый Структура;
	ПредметБизнесПроцесса.Вставить("ID", ПредметID);
	ПредметБизнесПроцесса.Вставить("type", ПредметТип);
	ПредметБизнесПроцесса.Вставить("name", Предмет);
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
	КонецЕсли;
	
	Данные = Элементы.ДеревоШаблонов.ТекущиеДанные;
	
	Если Данные.ТипПроцесса = "ОтправитьПоПочте" Тогда
		Если ЗначениеЗаполнено(ПредметID) Тогда
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыФормы);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлавнаяЗадачаID) Тогда
		ГлавнаяЗадачаБизнесПроцесса = Новый Структура;
		ГлавнаяЗадачаБизнесПроцесса.Вставить("ID",ГлавнаяЗадачаID);
		ГлавнаяЗадачаБизнесПроцесса.Вставить("type",ГлавнаяЗадачаТип);
		ГлавнаяЗадачаБизнесПроцесса.Вставить("name",ГлавнаяЗадача);
		ПараметрыФормы.Вставить("ГлавнаяЗадача", ГлавнаяЗадачаБизнесПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ШаблонID) Тогда
		ШаблонБизнесПроцесса = Новый Структура;
		ШаблонБизнесПроцесса.Вставить("ID", Данные.ШаблонID);
		ШаблонБизнесПроцесса.Вставить("type", Данные.ШаблонТип);
		ПараметрыФормы.Вставить("Шаблон", ШаблонБизнесПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредметID) И СтартоватьСразу Тогда
		Если ЗначениеЗаполнено(Данные.ШаблонID) Тогда
			
			Элементы.СоздатьПроцесс.Доступность = Ложь;
			
			Если ЗаполнитьСтартоватьПроцесс(Данные.ТипПроцесса, ПараметрыФормы) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Стартован бизнес-процесс по шаблону ""%1"".'"), Данные.Наименование);
				ТекстЗаголовка = НСтр("ru='Стартован процесс'");
				ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ID", ПроцессID);
				ПараметрыОповещения.Вставить("Стартован", Истина);
				
				// Соберем предметы.
				Предметы = Новый Массив;
				Предметы.Добавить(ПредметБизнесПроцесса);
				
				ПараметрыОповещения.Вставить("Предметы", Предметы);
				
				Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);
				
			Иначе
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(Данные.ТипПроцесса, Неопределено, , ПараметрыФормы);
			КонецЕсли;
			
		Иначе
			Элементы.СоздатьПроцесс.Доступность = Истина;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(Данные.ТипПроцесса, Неопределено, , ПараметрыФормы);
		КонецЕсли;
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(Данные.ТипПроцесса, Неопределено, , ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыЗапуска)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыЗапуска.Свойство("Предмет") Тогда
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон, ПараметрыЗапуска.Предмет);
	Иначе
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон);
	КонецЕсли;
	
	НовыйПроцесс = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ШаблонПроцесса.ObjectID.type);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйПроцесс, ШаблонПроцесса);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, НовыйПроцесс);
		
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатЗапуска, "DMError") Тогда
		Возврат Ложь;
	Иначе
		ПроцессID = РезультатЗапуска.businessProcess.ObjectID.ID;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти