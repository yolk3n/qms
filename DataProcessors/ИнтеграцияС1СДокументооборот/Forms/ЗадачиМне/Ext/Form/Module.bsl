#Область ОписаниеПеременных

&НаКлиенте
Перем ДетальныеСведенияОЗадачах;

&НаКлиенте
Перем СохраненныеКомментарии;

&НаКлиенте
Перем КлючСтрокиЗадач;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Автообновление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Автообновление", Истина);
	ПериодАвтообновления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "ПериодАвтообновления", 900);
	
	Элементы.ГруппаОсновная.Доступность = Ложь;
	Элементы.Автообновление.Доступность = Ложь;
	
	УстановитьОформлениеЗадач(УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДетальныеСведенияОЗадачах = Новый Соответствие;
	СохраненныеКомментарии = Новый Соответствие;
	
	Элементы.ГруппаПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтотОбъект Тогда
		ПриПодключении();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотЗадача" И Источник = ЭтотОбъект Тогда
		ОбновитьСписокЗадачЧастично();
		РазвернутьГруппыЗадач();
	КонецЕсли;
	
	Если ИмяСобытия = "Документооборот_ДействиеНадЗадачей"
			И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ID")
			И Параметр.Свойство("Тип")
			И СтрокаПоID(Параметр.ID, Параметр.Тип, Задачи.ПолучитьЭлементы()) <> Неопределено Тогда
		Обновить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачаНажатие(Элемент)
	
	Если ПредметРассмотренияID = "" Или ПредметРассмотренияТип = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID", ПредметРассмотренияID);
	ПараметрыФормы.Вставить("type", ПредметРассмотренияТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтотОбъект, ПредметРассмотренияID);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроцессНажатие(Элемент)
	
	Если БизнесПроцессПредметаРассмотренияID = "" Или БизнесПроцессПредметаРассмотренияТип = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		БизнесПроцессПредметаРассмотренияТип, БизнесПроцессПредметаРассмотренияID, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// Сохраним текст комментария при уходе фокуса.
	Если Элементы.Задачи.ТекущиеДанные <> Неопределено
		И Не Элементы.Задачи.ТекущиеДанные.Группировка Тогда
		
		ЗадачаID = Элементы.Задачи.ТекущиеДанные.ЗадачаID;
		СохраненныйКомментарий = СохраненныеКомментарии.Получить(ЗадачаID);
		Если СохраненныйКомментарий <> Неопределено
			Или Не ПустаяСтрока(Текст) Тогда
			СохраненныеКомментарии.Вставить(ЗадачаID, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	ДлительностьПереноса = ИнтеграцияС1СДокументооборотВызовСервера.ПодписьДлительностиПереносаСрока(
		Автор,
		АвторID,
		АвторТип,
		СтарыйСрок,
		НовыйСрок);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	ДлительностьПереноса = ИнтеграцияС1СДокументооборотВызовСервера.ПодписьДлительностиПереносаСрока(
		Автор,
		АвторID,
		АвторТип,
		СтарыйСрок,
		НовыйСрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Ложь;
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиВыборЗавершение", ЭтотОбъект, ТекущиеДанные.ЗадачаID);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ТекущиеДанные.ЗадачаТип, ТекущиеДанные.ЗадачаID, ЭтотОбъект,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыборЗавершение(Результат, ЗадачаID) Экспорт
	
	Если Элементы.Задачи.Отображение = ОтображениеТаблицы.Список Тогда
		СтрокиЗадачи = Задачи.ПолучитьЭлементы();
		Для Каждого СтрокаЗадачи Из СтрокиЗадачи Цикл
			Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
				СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
				АктуализироватьДетальныеСведения(СтрокаЗадачи);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе // группировка
		Для Каждого ГруппаДерева Из Задачи.ПолучитьЭлементы() Цикл
			СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаЗадачи Из СтрокиЗадачи Цикл
				Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
					СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
					АктуализироватьДетальныеСведения(СтрокаЗадачи);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = КлючСтрокиЗадач Тогда
		Возврат;
	КонецЕсли;
	КлючСтрокиЗадач = Элемент.ТекущаяСтрока;
	
	Элементы.СоздатьПодзадачу.Доступность = Ложь;
	Элементы.ЗадачаПеренаправить.Доступность = Ложь;
	Элементы.ПринятьКИсполнению.Доступность = Ложь;
	Элементы.ЗадачиКонтекстноеМенюПринятьКИсполнению.Доступность = Ложь;
	Элементы.ОтменитьПринятиеКИсполнению.Доступность = Ложь;
	Элементы.ЗадачиКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность = Ложь;
	Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
	Элементы.СогласоватьПереносСрока.Видимость = Ложь;
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если НеПоказыватьОбластьПросмотраЗадачи Или СтрокаЗадачи = Неопределено Тогда
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	Иначе
		Если СтрокаЗадачи.Группировка Тогда
			Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
		Иначе
			Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаПросмотрЗадачи;
		КонецЕсли;
		
		Если СтрокаЗадачи <> Неопределено И Не СтрокаЗадачи.Группировка Тогда
			Элементы.ЗадачаПеренаправить.Доступность = Истина;
			Элементы.СоздатьПодзадачу.Доступность = Истина;
			Элементы.ПринятьКИсполнению.Доступность = Не СтрокаЗадачи.ПринятаКИсполнению;
			Элементы.ЗадачиКонтекстноеМенюПринятьКИсполнению.Доступность = Не СтрокаЗадачи.ПринятаКИсполнению;
			Элементы.ОтменитьПринятиеКИсполнению.Доступность = СтрокаЗадачи.ПринятаКИсполнению;
			Элементы.ЗадачиКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность = СтрокаЗадачи.ПринятаКИсполнению;
			
			Если СтрокаЗадачи.ПроцессТип <> "DMBusinessProcessIssuesSolution" Тогда
				Элементы.ЗадатьВопросАвтору.Видимость = Истина;
				Элементы.СогласоватьПереносСрока.Видимость = Не СтрокаЗадачи.Выполнена
					И ЗначениеЗаполнено(СтрокаЗадачи.СрокИсполнения)
					И ДоступенФункционалПереносСрока;
			КонецЕсли;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьДетальныеСведения", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДерева = Элемент.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Тип = "DMFile" Тогда // открытие файла на просмотр
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			СтрокаДерева.ID,
			СтрокаДерева.Наименование,
			СтрокаДерева.Расширение,
			УникальныйИдентификатор);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда // объект ИС
		ПоказатьЗначение(, СтрокаДерева.Ссылка);
		
	Иначе // открытие карточки объекта ДО
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(СтрокаДерева.Тип, СтрокаДерева.ID, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если СтрокаЗадачи = Неопределено
			Или СтрокаЗадачи.Группировка
			Или СтрокаПредмета = Неопределено Тогда
		Элементы.ОткрытьПредметДляПросмотра.Доступность = Ложь;
		Элементы.ДобавитьПредмет.Доступность = Ложь;
		Элементы.УдалитьПредмет.Доступность = Ложь;
		Элементы.Редактировать.Доступность = Ложь;
		Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ОтменитьРедактирование.Доступность = Ложь;
	Иначе
		Элементы.ДобавитьПредмет.Доступность = Истина;
		Элементы.УдалитьПредмет.Доступность = СтрокаПредмета.ДоступноУдаление И Не СтрокаПредмета.Редактируется;
		Если СтрокаПредмета.Тип = "DMFile" Тогда
			Элементы.ОткрытьПредметДляПросмотра.Доступность = Истина;
			Элементы.Редактировать.Доступность = ДоступенЗахватФайлов
				И (Не СтрокаПредмета.Редактируется Или СтрокаПредмета.РедактируетсяТекущимПользователем);
			Элементы.ЗакончитьРедактирование.Доступность = ДоступенЗахватФайлов
				И СтрокаПредмета.РедактируетсяТекущимПользователем;
			Элементы.ОтменитьРедактирование.Доступность = ДоступенЗахватФайлов
				И СтрокаПредмета.РедактируетсяТекущимПользователем;
			
			СтрокаПредмета = СтрокаПредмета.ПолучитьРодителя();
		Иначе
			Элементы.ОткрытьПредметДляПросмотра.Доступность = Ложь;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
			Элементы.ОтменитьРедактирование.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНетПредметовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьПредмет(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Модифицированность = Ложь;
	ДетальныеСведенияОЗадачах = Новый Соответствие;
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	Модифицированность = Ложь;
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ДетальныеСведенияОЗадачах.Удалить(ТекущиеДанные.ЗадачаID);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ТекущиеДанные.ЗадачаТип, ТекущиеДанные.ЗадачаID, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ТекущиеДанные.ПроцессТип,
		ТекущиеДанные.ПроцессID,
		ЭтотОбъект);
	
КонецПроцедуры

// Команды с этим обработчиком создаются программно согласно предметам активной задачи.
//
// Параметры:
//   Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_СоздатьСвязанныйОбъект(Команда)
	
	// Создать_Справочник_Контрагенты__1 -> Справочник.Контрагенты_1
	ИмяКоманды = Команда.Имя;
	ИмяТипа = Сред(ИмяКоманды, 9);
	ИмяТипа = СтрЗаменить(ИмяТипа, "___", "~");
	ИмяТипа = СтрЗаменить(ИмяТипа, "__", "&");
	ИмяТипа = СтрЗаменить(ИмяТипа, "_", ".");
	ИмяТипа = СтрЗаменить(ИмяТипа, "&", "_");
	ИмяТипа = СтрЗаменить(ИмяТипа, "~", "._");
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено 
		Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаПредмета = Неопределено Тогда
		ЭлементыДереваПриложений = ДеревоПриложений.ПолучитьЭлементы();
		Если ЭлементыДереваПриложений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаПредмета = ЭлементыДереваПриложений[0];
	Иначе
		СтрокаРодителя = СтрокаПредмета.ПолучитьРодителя();
		Если СтрокаРодителя <> Неопределено Тогда
			СтрокаПредмета = СтрокаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.СоздатьИнтегрированныйОбъектПоТипу(
		ЭтотОбъект, ИмяТипа, СтрокаПредмета.Тип, СтрокаПредмета.ID);
	СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)

	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Предмет", Новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", ТекущиеДанные.Задача);
	ПараметрыФормы.Предмет.Вставить("ID", ТекущиеДанные.ЗадачаID);
	ПараметрыФормы.Предмет.Вставить("type", ТекущиеДанные.ЗадачаТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбластьПросмотраЗадачи(Команда)
	
	НеПоказыватьОбластьПросмотраЗадачи = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	Элементы.ГруппаПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
		АктуализироватьДетальныеСведения(Элементы.Задачи.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятьЗадачиКИсполнению();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	ОтменитьПринятиеЗадачКИсполнению();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", СтрокаЗадачи.Задача);
	ПараметрыФормы.Вставить("ЗадачаID", СтрокаЗадачи.ЗадачаID);
	ПараметрыФормы.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ПеренаправлениеЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	
	СгруппироватьПоКолонке("ВажностьСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	
	СгруппироватьПоКолонке("ТочкаМаршрута");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьПоКолонке("Автор");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	
	СгруппироватьПоКолонке("Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьПоКолонке("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	ДетальныеСведенияЗадачи = ДетальныеСведенияОЗадачах.Получить(СтрокаЗадачи.ЗадачаID);
	Если ДетальныеСведенияЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредметID = Неопределено;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаПредмета <> Неопределено Тогда
		СтрокаРодителя = СтрокаПредмета.ПолучитьРодителя();
		Если СтрокаРодителя <> Неопределено Тогда
			СтрокаПредмета = СтрокаРодителя;
		КонецЕсли;
		ПредметID = СтрокаПредмета.ID;
	КонецЕсли;
	
	НуженДиалог = Истина;
	ДлительностьРаботы = ИнтеграцияС1СДокументооборотКлиент.ПолучитьДлительностьРаботы(
		ДетальныеСведенияЗадачи.ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
		ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
		ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
			
			ПереключитьХронометражСервер(
				СтрокаЗадачи.ЗадачаТип,
				СтрокаЗадачи.ЗадачаID,
				ПредметID,
				ДетальныеСведенияЗадачи);
			Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(СтрокаЗадачи.Задача));
				Состояние(Текст);
			КонецЕсли;
			ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаID, ДетальныеСведенияЗадачи);
			
		Иначе
			
			// возможно, хронометраж все-таки включен, но детальная запись не успела обновиться
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			Если АктивныеЗаписи.Количество() = 0
					Или (АктивныеЗаписи.Количество() = 1 И АктивныеЗаписи[0].ИсточникID = СтрокаЗадачи.ЗадачаID) Тогда
				
				ПереключитьХронометражСервер(
					СтрокаЗадачи.ЗадачаТип,
					СтрокаЗадачи.ЗадачаID,
					ПредметID,
					ДетальныеСведенияЗадачи);
				Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(СтрокаЗадачи.Задача));
					Состояние(Текст);
				КонецЕсли;
				ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаID, ДетальныеСведенияЗадачи);
				
			Иначе
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				ПараметрыОповещения.Вставить("Задача", СтрокаЗадачи.Задача);
				ПараметрыОповещения.Вставить("ЗадачаID", СтрокаЗадачи.ЗадачаID);
				ПараметрыОповещения.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
				ПараметрыОповещения.Вставить("ПредметID", ПредметID);
				ПараметрыОповещения.Вставить("ДетальныеСведенияЗадачи", ДетальныеСведенияЗадачи);
				Оповещение = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение",
					ЭтотОбъект, ПараметрыОповещения);
				
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб + Запись.Источник + Символы.ПС;
				КонецЦикла;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
						
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Отмена'"));
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Отмена);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
	ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
	ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
		ПараметрыФормы, СтрокаЗадачи.ЗадачаID);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросАвтору(Команда)
	
	Если Элементы.Задачи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.Задачи.ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID", Элементы.Задачи.ТекущиеДанные.ЗадачаID);
	ПараметрыФормы.Вставить("type", Элементы.Задачи.ТекущиеДанные.ЗадачаТип);
	ПараметрыФормы.Вставить("ВидВопроса", НСтр("ru = 'Иное'"));
	ПараметрыФормы.Вставить("ВидВопросаID", "Иное"); //@NON-NLS-2
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос",
		ПараметрыФормы, ЭтотОбъект, Элементы.Задачи.ТекущиеДанные.ЗадачаID);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПереносСрока(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID", СтрокаЗадачи.ЗадачаID);
	ПараметрыФормы.Вставить("type", СтрокаЗадачи.ЗадачаТип);
	ПараметрыФормы.Вставить("ВидВопроса", НСтр("ru = 'Перенос срока'"));
	ПараметрыФормы.Вставить("ВидВопросаID", "ПереносСрока"); //@NON-NLS-2
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос",
		ПараметрыФормы, ЭтотОбъект, СтрокаЗадачи.ЗадачаID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Ссылка) Тогда // объект ИС
		ПоказатьЗначение(, Строка.Ссылка);
		
	Иначе // объект ДО
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			Строка.Тип,
			Строка.ID,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредметДляПросмотра(Команда)
	
	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
		ПоказатьЗначение(, Строка.Ссылка);
		
	ИначеЕсли Строка.Тип = "DMFile" Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			Строка.ID,
			Строка.Наименование,
			Строка.Расширение,
			УникальныйИдентификатор);
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			Строка.Тип,
			Строка.ID,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнойПредмет(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ОсновнойПредметТип,
		ОсновнойПредметID,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПервая(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатID = СтрокаЗадачи.РезультатID;
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	ТекстСообщенияПользователю = "";
	
	Если ПроцессТип = "DMBusinessProcessRegistration" И ТочкаМаршрута = "Зарегистрировать" Тогда //@NON-NLS-2
		Для Каждого СтрокаПредмета Из СтрокаЗадачи.Предметы Цикл
			Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной") //@NON-NLS-1
				И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.Тип) Тогда
				ИнтеграцияС1СДокументооборотВызовСервера.
					ЗарегистрироватьДокументПриНеобходимости(СтрокаПредмета.Тип, СтрокаПредмета.ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ID, type, taskID", СтрокаЗадачи.ПроцессID, ПроцессТип, СтрокаЗадачи.ЗадачаID);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуПерваяЗавершение", ЭтотОбъект);
	
	Если СтрокаЗадачи.ПроцессТип = "DMBusinessProcessInvitation"
			И РезультатID = "ПринятоОбязательнымиУчастниками" Тогда //@NON-NLS-2
		ТекстВопроса = НСтр("ru = 'Есть не принявшие приглашения участники.
			|При подтверждении они будут исключены из списка участников. Продолжить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	Если ПроцессТип = "DMBusinessProcessConsideration" И ТочкаМаршрута = "Рассмотреть" Тогда //@NON-NLS-2
		ТребоватьРезультатВыполнения = Истина;
		ТекстСообщенияПользователю = НСтр("ru = 'Поле ""Резолюция"" не заполнено'");
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" И ТочкаМаршрута = "РассмотрениеИнициатором" //@NON-NLS-2
			И ВидВопросаID = "Иное" Тогда //@NON-NLS-1
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
	
	// Требует ли тип задачи открытия сложной формы?
	Если ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Ознакомиться" //@NON-NLS-2
			И (РезультатID = "НеПринятоОбязательнымиУчастниками" //@NON-NLS-1
				Или РезультатID = "НеПринятоВсемиУчастниками") Тогда //@NON-NLS-1
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессПриглашение",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТребоватьРезультатВыполнения И Не ЗначениеЗаполнено(Комментарий) Тогда
			ОчиститьСообщения();
			Элементы.Комментарий.ОтметкаНезаполненного = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				?(ЗначениеЗаполнено(ТекстСообщенияПользователю),
					ТекстСообщенияПользователю,
					НСтр("ru = 'Поле ""Комментарий"" не заполнено'")),,
				"Комментарий");
			Возврат;
		Иначе
			ВыполнитьЗадачу(1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВторая(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатID = СтрокаЗадачи.РезультатID;
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	ТекстСообщенияПользователю = "";
	
	// Требует ли тип задачи ввода результата выполнения?
	Если (ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Согласовать") //@NON-NLS-2
			Или (ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Пригласить") Тогда //@NON-NLS-2
		ТребоватьРезультатВыполнения = Истина;
	ИначеЕсли СтрокаЗадачи.ЗадачаТип = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		ТребоватьРезультатВыполнения = Истина;
		ТекстСообщенияПользователю = НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'");
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ТочкаМаршрута = "Утвердить" Тогда //@NON-NLS-2
		ТребоватьРезультатВыполнения = Истина;
		ТекстСообщенияПользователю = НСтр("ru = 'Укажите причину отклонения документа'");
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ТочкаМаршрута = "Зарегистрировать" Тогда //@NON-NLS-2
		ТребоватьРезультатВыполнения = Истина;
		ТекстСообщенияПользователю = НСтр("ru = 'Укажите причину отказа в регистрации'");
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" И ТочкаМаршрута = "РассмотрениеИнициатором" //@NON-NLS-2
			И ВидВопросаID = "ПереносСрока" Тогда //@NON-NLS-1
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ID, type, taskID", СтрокаЗадачи.ПроцессID, ПроцессТип, СтрокаЗадачи.ЗадачаID);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуВтораяЗавершение", ЭтотОбъект);
	
	// Требует ли тип задачи открытия сложной формы?
	Если ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Ознакомиться" Тогда //@NON-NLS-2
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессСогласование",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ТочкаМаршрута = "Ознакомиться" Тогда //@NON-NLS-2
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессУтверждение",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ТочкаМаршрута = "Ознакомиться" Тогда //@NON-NLS-2
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРегистрация",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Ознакомиться" //@NON-NLS-2
			И РезультатID = "ПринятоОбязательнымиУчастниками" Тогда //@NON-NLS-1
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессПриглашение",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТребоватьРезультатВыполнения И Не ЗначениеЗаполнено(Комментарий) Тогда
			ОчиститьСообщения();
			Элементы.Комментарий.ОтметкаНезаполненного = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				?(ЗначениеЗаполнено(ТекстСообщенияПользователю),
					ТекстСообщенияПользователю,
					НСтр("ru = 'Поле ""Комментарий"" не заполнено'")),,
				"Комментарий");
			Возврат;
		Иначе
			ВыполнитьЗадачу(2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуТретья(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	
	// Требует ли тип задачи ввода результата выполнения?
	Если ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Согласовать" Тогда //@NON-NLS-2
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
	
	Если ТребоватьРезультатВыполнения
			И Не ЗначениеЗаполнено(Комментарий) Тогда
		ОчиститьСообщения();
		Элементы.Комментарий.ОтметкаНезаполненного = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"Комментарий");
		Возврат;
	Иначе
		ВыполнитьЗадачу(3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.ЗадачаID = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредметЗавершение",
		ЭтотОбъект,
		Новый Структура("СтрокаЗадачи", СтрокаЗадачи));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ФормаВладельца", ЭтотОбъект);
	ПараметрыОповещения.Вставить("Представление", СтрокаЗадачи.Задача);
	ПараметрыОповещения.Вставить("ИдентификаторВладельца", СтрокаЗадачи.ЗадачаID);
	ПараметрыОповещения.Вставить("ТипВладельца", СтрокаЗадачи.ЗадачаТип);
	ПараметрыОповещения.Вставить("РольПредмета", "Вспомогательный"); //@NON-NLS-2
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОВыбореТипа = Новый ОписаниеОповещения(
		"ДобавитьПредметПослеВыбораТипа",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаПредмета",
		Новый Структура("ПроцессТип", СтрокаЗадачи.ПроцессТип),
		ИнтеграцияС1СДокументооборотКлиент,,,,
		ОписаниеОповещенияОВыбореТипа,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Обработчик оповещения "ДобавитьПредметЗавершение".
//
// Параметры:
//   ДобавленныеПредметы - Массив из Структура:
//     * Предмет - Строка
//     * ПредметID - Строка
//     * ПредметТип - Строка
//     * Представление - Строка
//     * Расширение - Строка
//     * РольПредмета - Строка
//   ПараметрыОбработчика - Структура:
//     * СтрокаЗадачи - ДанныеФормыЭлементДерева:
//         ** Наименование - Строка
//         ** Предметы - ДанныеФормыКоллекция
//
&НаКлиенте
Процедура ДобавитьПредметЗавершение(ДобавленныеПредметы, ПараметрыОбработчика) Экспорт
	
	Если ДобавленныеПредметы = Неопределено Или ДобавленныеПредметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеПредмета Из ДобавленныеПредметы Цикл
		НовыйПредмет = ПараметрыОбработчика.СтрокаЗадачи.Предметы.Добавить();
		НовыйПредмет.ИмяПредмета = "";
		НовыйПредмет.Наименование = ОписаниеПредмета.Представление;
		НовыйПредмет.ID = ОписаниеПредмета.ПредметID;
		НовыйПредмет.Тип = ОписаниеПредмета.ПредметТип;
		НовыйПредмет.РольПредмета = ОписаниеПредмета.РольПредмета;
		Если ОписаниеПредмета.Свойство("Расширение") Тогда
			НовыйПредмет.Расширение = ОписаниеПредмета.Расширение;
		КонецЕсли;
		НовыйПредмет.ДоступноУдаление = Истина;
		НовыйПредмет.Редактируется = Ложь;
		НовыйПредмет.РедактируетсяТекущимПользователем = Ложь;
	КонецЦикла;
	
	ПараметрыОбработчика.СтрокаЗадачи.ДатаПолученияДетальныхСведений = Дата(1, 1, 1);
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("ID", ПараметрыОбработчика.СтрокаЗадачи.ЗадачаID);
	ПараметрыЗадачи.Вставить("Тип", ПараметрыОбработчика.СтрокаЗадачи.ЗадачаТип);
	ПараметрыЗадачи.Вставить("ПроцессТип", ПараметрыОбработчика.СтрокаЗадачи.ПроцессТип);
	ПараметрыЗадачи.Вставить("Комментарий", Комментарий);
	ПараметрыЗадачи.Вставить("ДоступнаМультипредметность", ДоступнаМультипредметность);
	
	ЗаписатьПредметыЗадачи(ПараметрыЗадачи, ПараметрыОбработчика.СтрокаЗадачи.Предметы);
	
	АктуализироватьДетальныеСведения(ПараметрыОбработчика.СтрокаЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ID = "" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.ЗадачаID = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПредметКУдалению = СтрокаЗадачи.Предметы.НайтиСтроки(Новый Структура("ID, Тип",
		ТекущиеДанные.ID,
		ТекущиеДанные.Тип));
	
	Если ПредметКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗадачи.Предметы.Удалить(ПредметКУдалению[0]);
	СтрокаЗадачи.ДатаПолученияДетальныхСведений = Дата(1, 1, 1);
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("ID", СтрокаЗадачи.ЗадачаID);
	ПараметрыЗадачи.Вставить("Тип", СтрокаЗадачи.ЗадачаТип);
	ПараметрыЗадачи.Вставить("ПроцессТип", СтрокаЗадачи.ПроцессТип);
	ПараметрыЗадачи.Вставить("Комментарий", Комментарий);
	ПараметрыЗадачи.Вставить("ДоступнаМультипредметность", ДоступнаМультипредметность);
	
	ЗаписатьПредметыЗадачи(ПараметрыЗадачи, СтрокаЗадачи.Предметы);
	
	АктуализироватьДетальныеСведения(СтрокаЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Редактируется И Не ТекущиеДанные.РедактируетсяТекущимПользователем Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Этот файл сейчас редактируется другим пользователем.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", "Редактировать");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандыРедактированияЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ТекущиеДанные.ID,
		ТекущиеДанные.Представление,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,
		Ложь,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
			Или ТекущиеДанные.Тип <> "DMFile"
			Или Не ТекущиеДанные.РедактируетсяТекущимПользователем Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", "ЗакончитьРедактирование");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандыРедактированияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
		ТекущиеДанные.ID,
		ТекущиеДанные.Представление,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
			Или ТекущиеДанные.Тип <> "DMFile"
			Или Не ТекущиеДанные.РедактируетсяТекущимПользователем Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", "ОтменитьРедактирование");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандыРедактированияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
		ТекущиеДанные.ID,
		ОписаниеОповещения,,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Общее завершение команд редактирования.
&НаКлиенте
Процедура КомандыРедактированияЗавершение(Результат, Параметры) Экспорт
	
	СтрокаПредмета = НайтиСтрокуПредмета(ДеревоПриложений.ПолучитьЭлементы(), Результат.ID, Результат.Тип);
	
	Если СтрокаПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Команда = "Редактировать" Тогда
		СтрокаПредмета.Редактируется = Истина;
		СтрокаПредмета.РедактируетсяТекущимПользователем = Истина;
	Иначе // "ЗакончитьРедактирование" Или "ОтменитьРедактирование"
		СтрокаПредмета.Редактируется = Ложь;
		СтрокаПредмета.РедактируетсяТекущимПользователем = Ложь;
	КонецЕсли;
	ДеревоПриложенийПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодзадачу(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПредметПодзадачи = Неопределено;
	Приложения = ДеревоПриложений.ПолучитьЭлементы();

	Для Каждого Элемент Из Приложения Цикл
		Если Элемент.РольПредмета = "Основной" Тогда //@NON-NLS-1
			ПредметПодзадачи = Новый Структура;
			ПредметПодзадачи.Вставить("name", Элемент.Наименование);
			ПредметПодзадачи.Вставить("id", Элемент.ID);
			ПредметПодзадачи.Вставить("type", Элемент.Тип);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПредметПодзадачи = Неопределено И Приложения.Количество() > 0 Тогда
		ПредметПодзадачи = Новый Структура;
		ПредметПодзадачи.Вставить("name", Приложения[0].Наименование);
		ПредметПодзадачи.Вставить("id", Приложения[0].ID);
		ПредметПодзадачи.Вставить("type", Приложения[0].Тип);
	КонецЕсли;
	
	ГлавнаяЗадача = Новый Структура;
	ГлавнаяЗадача.Вставить("name", ТекущиеДанные.Задача);
	ГлавнаяЗадача.Вставить("id", ТекущиеДанные.ЗадачаID);
	ГлавнаяЗадача.Вставить("type", ТекущиеДанные.ЗадачаТип);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПодзадачуЗавершение", ЭтаФорма);
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс(ПредметПодзадачи, ГлавнаяЗадача, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СтрокаПоID(ЗадачаID, ЗадачаТип, КоллекцияСтрок)
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЗадачаID = ЗадачаID И Строка.ЗадачаТип = ЗадачаТип Тогда
			Возврат Строка;
		КонецЕсли;
		
		ПодчиненнаяСтрока = СтрокаПоID(ЗадачаID, ЗадачаТип, Строка.ПолучитьЭлементы());
		Если ПодчиненнаяСтрока <> Неопределено Тогда
			Возврат ПодчиненнаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПредмета(СтрокиДерева, ПредметID, ПредметТип)
	
	НайденнаяСтрока = Неопределено;
	
	Для Каждого СтрокаПредмета Из СтрокиДерева Цикл
		
		Если ПредметID = СтрокаПредмета.ID И ПредметТип = СтрокаПредмета.Тип Тогда
			НайденнаяСтрока = СтрокаПредмета;
		Иначе
			Если ТипЗнч(СтрокаПредмета) = Тип("ДанныеФормыЭлементДерева") Тогда
				СтрокиФайлов = СтрокаПредмета.ПолучитьЭлементы();
			Иначе
				СтрокиФайлов = СтрокаПредмета.Строки;
			КонецЕсли;
			Для Каждого СтрокаФайла Из СтрокиФайлов Цикл
				Если ПредметID = СтрокаФайла.ID И ПредметТип = СтрокаФайла.Тип Тогда
					НайденнаяСтрока = СтрокаФайла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденнаяСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПодзадачуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьСписокЗадачЧастично();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыЗадач()
	
	ЭлементыДерева = Задачи.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Группировка Тогда
			Элементы.Задачи.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(ИмяКолонки)
	
	Модифицированность = Ложь;
	РежимГруппировки = ИмяКолонки;
	УстановитьПометкуРежимаГруппировки();
	СгруппироватьПоКолонкеНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРежимаГруппировки()
	
	Элементы.СписокСгруппироватьПоАвтору.Пометка = (РежимГруппировки = "Автор");
	Элементы.СписокСгруппироватьПоВажности.Пометка = (РежимГруппировки = "ВажностьСтрокой");
	Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = (РежимГруппировки = "ТочкаМаршрута");
	Элементы.СписокСгруппироватьПоИсполнителю.Пометка = (РежимГруппировки = "Исполнитель");
	Элементы.СписокСгруппироватьСгруппироватьПоБезГруппировки.Пометка = (РежимГруппировки = "");
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере()
	
	Если Не ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадача = Элементы.Задачи.ТекущаяСтрока;
	СледующаяЗадача = Неопределено;
	ПредыдущаяЗадача = Неопределено;
	Если ТекущаяЗадача <> Неопределено Тогда
		СтрокаТекущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача);
		Если СтрокаТекущейЗадачи = Неопределено Тогда
			ТекущаяЗадача = Неопределено;
		Иначе
			Если СтрокаТекущейЗадачи.ЗадачаID <> "" Тогда
				СтрокаСледующейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача + 1);
				Если СтрокаСледующейЗадачи <> Неопределено Тогда
					СледующаяЗадача = СтрокаСледующейЗадачи.ЗадачаID;
				КонецЕсли;
				СтрокаПредыдущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача - 1);
				Если СтрокаПредыдущейЗадачи <> Неопределено Тогда
					ПредыдущаяЗадача = СтрокаПредыдущейЗадачи.ЗадачаID;
				КонецЕсли;
			КонецЕсли;
			ТекущаяЗадача = СтрокаТекущейЗадачи.ЗадачаID;
		КонецЕсли;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("Задачи");
	
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка); // ТаблицаЗначений
	
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
		ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для Каждого СтрокаГруппировки Из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(Новый Структура(РежимГруппировки,
				СтрокаГруппировки[РежимГруппировки]));
			Для Каждого Строка Из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
			КонецЦикла;
			СтрокаДерева.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
		КонецЦикла;
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Дерево;
		Дерево.Строки.Сортировать("Задача");
	Иначе
		Для Каждого Строка Из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Список;
		Дерево.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Задачи");
	УстановитьТекущуюСтроку(ТекущаяЗадача, СледующаяЗадача, ПредыдущаяЗадача);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку(ТекущаяЗадачаID, СледующаяЗадачаID, ПредыдущаяЗадачаID)
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ТекущаяЗадачаID);
	Если СледующаяЗадачаID <> Неопределено Тогда
		МассивЗадач.Добавить(СледующаяЗадачаID);
	КонецЕсли;
	Если ПредыдущаяЗадачаID <> Неопределено Тогда
		МассивЗадач.Добавить(ПредыдущаяЗадачаID);
	КонецЕсли;
	
	Для Каждого ЗадачаID Из МассивЗадач Цикл
		Если ЗначениеЗаполнено(ЗадачаID) Тогда
			Если Элементы.Задачи.Отображение = ОтображениеТаблицы.Список Тогда
				СтрокиЗадачи = Задачи.ПолучитьЭлементы();
				Для Каждого СтрокаЗадачи Из СтрокиЗадачи Цикл
					Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
						Элементы.Задачи.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
						Возврат;
					КонецЕсли;
				КонецЦикла;
			Иначе // группировка
				Для Каждого ГруппаДерева Из Задачи.ПолучитьЭлементы() Цикл
					СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
					Для Каждого СтрокаЗадачи Из СтрокиЗадачи Цикл
						Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
							Элементы.Задачи.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
							Возврат;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		РазвернутьГруппыЗадач();
		УстановитьПометкуРежимаГруппировки();
#Если Не ВебКлиент Тогда
		Если ДоступенФункционалЗадачи Тогда
			Элементы.Автообновление.Доступность = Истина;
			Если Автообновление Тогда
				ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления);
			КонецЕсли;
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	Заголовок = НСтр("ru = 'Документооборот: задачи мне'");
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаОсновная.Доступность = Ложь;
		Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
		Элементы.ГруппаПроверкаАвторизации.Видимость = Истина;
		Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = НСтр("ru = 'Нет доступа к 1С:Документообороту.'");
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Элементы.ГруппаПроверкаАвторизации.Видимость = Ложь;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.1.1") Тогда
			
			ФормаОбработанаУспешно = Ложь;
			Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтотОбъект);
			Элементы.ГруппаОсновная.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Ложь;
			Элементы.ГруппаОсновная.Видимость = Истина;
			ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
			
			// Задачи.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
				Элементы.ГруппаОсновная.Доступность = Истина;
				ДоступенФункционалЗадачи = Истина;
				ДоступенФункционалХронометраж =
					ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.3.2.3")
						И ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота");
				ДоступенЗахватФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.4.9.1");
				ДоступнаМультипредметность = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.3.1");
				ОбновитьСписокЗадачНаСервере();
			Иначе
				Элементы.ГруппаОсновная.Доступность = Ложь;
				ДоступенФункционалЗадачи = Ложь;
				ДоступенФункционалХронометраж = Ложь;
				Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(
					ЭтотОбъект);
			КонецЕсли;
			Элементы.ПереключитьХронометраж.Доступность = ДоступенФункционалХронометраж;
			Элементы.УказатьТрудозатраты.Доступность = ДоступенФункционалХронометраж;
			// Решение вопросов.
			Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
				Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
			КонецЕсли;
			// Почта.
			Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
				Элементы.СоздатьПисьмо.Видимость = Ложь;
			КонецЕсли;
			// Принятие задач к исполнению.
			Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("1.2.7.3.CORP") Тогда
				Элементы.ПринятьКИсполнению.Видимость = Ложь;
				Элементы.ЗадачиКонтекстноеМенюПринятьКИсполнению.Видимость = Ложь;
			КонецЕсли;
			// Отмена принятия задач к исполнению.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
				ДоступенФункционалПереносСрока = Истина;
			Иначе
				Элементы.ОтменитьПринятиеКИсполнению.Видимость = Ложь;
				Элементы.ЗадачиКонтекстноеМенюОтменитьПринятиеКИсполнению.Видимость = Ложь;
			КонецЕсли;
			НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи =
				НастройкиДокументооборота.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
			ФактическийИсполнительЗадач = НастройкиДокументооборота.ФактическийИсполнительЗадач;
			Если ФактическийИсполнительЗадач <> "taskPerformer" Тогда
				ТекущийПользовательИСотрудники =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					ЭтотОбъект, ТекущийПользовательИСотрудники[0], "ТекущийПользователь");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеЗадач(УсловноеОформление)

	// Установка оформления для непринятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Группировка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Метаданные.ЭлементыСтиля.ШрифтНеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиЗадача");
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиСрокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновления()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автообновление", Автообновление);
	ПараметрыФормы.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	
	Оповещение = Новый ОписаниеОповещения("НастройкаАвтообновленияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.НастройкаАвтообновления",
		ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Автообновление = Результат.Автообновление;
	ПериодАвтообновления = Результат.ПериодАвтообновления;
	
	ОтключитьОбработчикОжидания("Автообновление");
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ИнтеграцияС1СДокументооборот");
	Элемент.Вставить("Настройка", "Автообновление");
	Элемент.Вставить("Значение", Автообновление);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ИнтеграцияС1СДокументооборот");
	Элемент.Вставить("Настройка", "ПериодАвтообновления");
	Элемент.Вставить("Значение", ПериодАвтообновления);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	Если Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьЗадачиКИсполнению()
	
	Модифицированность = Ложь;
	МассивСтрок = Элементы.Задачи.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадачДО = Новый Массив;
		Для Каждого Элемент Из МассивСтрок Цикл
			СтрокаЗадачи = Задачи.НайтиПоИдентификатору(Элемент);
			Если ЗначениеЗаполнено(СтрокаЗадачи.ЗадачаID) Тогда
				МассивЗадачДО.Добавить(СтрокаЗадачи.ЗадачаID);
			КонецЕсли;
		КонецЦикла;
		Если МассивЗадачДО.Количество() > 0 Тогда
			Попытка
				Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
				ИнтеграцияС1СДокументооборот.ПринятьЗадачуКИсполнению(Прокси, МассивЗадачДО);
			Исключение
				ОбработатьИсключение(ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			ОбновитьСписокЗадачЧастичноНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПринятиеЗадачКИсполнению()
	
	Модифицированность = Ложь;
	МассивСтрок = Элементы.Задачи.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадачДО = Новый Массив;
		Для Каждого Элемент Из МассивСтрок Цикл
			СтрокаЗадачи = Задачи.НайтиПоИдентификатору(Элемент);
			Если ЗначениеЗаполнено(СтрокаЗадачи.ЗадачаID) Тогда
				МассивЗадачДО.Добавить(СтрокаЗадачи.ЗадачаID);
			КонецЕсли;
		КонецЦикла;
		Если МассивЗадачДО.Количество() > 0 Тогда
			Попытка
				Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
				ИнтеграцияС1СДокументооборот.ОтменитьПринятиеЗадачКИсполнению(Прокси, МассивЗадачДО);
			Исключение
				ОбработатьИсключение(ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			ОбновитьСписокЗадачЧастичноНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачЧастично()
	
	ОбновитьСписокЗадачЧастичноНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачи(Прокси, Выполненные)
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Истина;
	УсловияОтбора.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withExecuted";
	Условие.value = Выполненные;
	УсловияОтбора.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withDelayed";
	Условие.value = Ложь;
	УсловияОтбора.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "typed";
	Условие.value = Истина;
	УсловияОтбора.Добавить(Условие);
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		"DMBusinessProcessTask",
		СписокУсловий);
	
	Возврат Ответ.items;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗадач(ЗадачиXDTO)
	
	ТекущаяЗадача = Элементы.Задачи.ТекущаяСтрока;
	СледующаяЗадача = Неопределено;
	ПредыдущаяЗадача = Неопределено;
	Если ТекущаяЗадача <> Неопределено Тогда
		СтрокаТекущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача);
		Если СтрокаТекущейЗадачи = Неопределено Тогда
			ТекущаяЗадача = Неопределено;
		Иначе
			Если СтрокаТекущейЗадачи.ЗадачаID <> "" Тогда
				СтрокаСледующейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача + 1);
				Если СтрокаСледующейЗадачи <> Неопределено Тогда
					СледующаяЗадача = СтрокаСледующейЗадачи.ЗадачаID;
				КонецЕсли;
				СтрокаПредыдущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача - 1);
				Если СтрокаПредыдущейЗадачи <> Неопределено Тогда
					ПредыдущаяЗадача = СтрокаПредыдущейЗадачи.ЗадачаID;
				КонецЕсли;
			КонецЕсли;
			ТекущаяЗадача = СтрокаТекущейЗадачи.ЗадачаID;
		КонецЕсли;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("Задачи");
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Дерево.Колонки Цикл
		ТаблицаЗадач.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Каждого ЗадачаXDTO Из ЗадачиXDTO Цикл
		СтрокаЗадачи = ТаблицаЗадач.Добавить();
		СтрокаЗадачи.Предметы = ТаблицаПредметовЗадачи();
		ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи, ЗадачаXDTO.object);
	КонецЦикла;
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Дерево;
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
		ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для Каждого СтрокаГруппировки Из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(Новый Структура(РежимГруппировки,
				СтрокаГруппировки[РежимГруппировки]));
			Для Каждого Строка Из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента, Строка);
				СтрокаДерева.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
			КонецЦикла;
		КонецЦикла;
		Дерево.Строки.Сортировать("Задача");
	Иначе
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Список;
		Для Каждого Строка Из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
		КонецЦикла;
		Дерево.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Задачи");
	
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач, УникальныйИдентификатор);
	
	УстановитьТекущуюСтроку(ТекущаяЗадача, СледующаяЗадача, ПредыдущаяЗадача);
	
	ЗаполнитьПоляЧислаЗадач();
	
КонецПроцедуры

// Раскладывает полное имя файла на составляющие.
//
// Параметры:
//   СтрокаЗадачи - Структура:
//     * Предметы - ТаблицаЗначений:
//         ** Наименование - Строка
//         ** ID - Строка
//         ** Тип - Строка
//         ** РольПредмета - Строка
//         ** Расширение - Строка
//         ** СвязанныйОбъектТип - Строка
//         ** СвязанныйОбъектID - Строка
//         ** ИмяПредмета - Строка
//         ** ДоступноУдаление - Булево
//         ** Редактируется - Булево
//         ** РедактируетсяТекущимПользователем - Булево
//
&НаСервере
Процедура ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи, ЗадачаXDTO)
	
	Важность = 1;
	Если ЗадачаXDTO.importance.objectID.ID = "Низкая" Тогда //@NON-NLS-1
		Важность = 0;
	ИначеЕсли ЗадачаXDTO.importance.objectID.ID = "Обычная" Тогда //@NON-NLS-1
		Важность = 1;
	ИначеЕсли ЗадачаXDTO.importance.objectID.ID = "Высокая" Тогда //@NON-NLS-1
		Важность = 2;
	КонецЕсли;
	
	СтрокаЗадачи.Важность = Важность;
	СтрокаЗадачи.ВажностьСтрокой = ЗадачаXDTO.importance.name;
	СтрокаЗадачи.КартинкаЗадачи = ?(ЗадачаXDTO.executed,1,0);
	СтрокаЗадачи.Описание = ЗадачаXDTO.description;
	СтрокаЗадачи.Выполнена = ЗадачаXDTO.executed;
	СтрокаЗадачи.ТочкаМаршрута = ЗадачаXDTO.businessProcessStep;
	СтрокаЗадачи.ТочкаМаршрутаКратко = ИнтеграцияС1СДокументооборот.КраткоеИмяТочкиМаршрута(
		ЗадачаXDTO.parentBusinessProcess.objectID.type,
		ЗадачаXDTO.businessProcessStep);
	СтрокаЗадачи.СрокИсполнения = ЗадачаXDTO.dueDate;
	СтрокаЗадачи.Записана = ЗадачаXDTO.beginDate;
	СтрокаЗадачи.Автор = ЗадачаXDTO.author.name;
	СтрокаЗадачи.АвторID = ЗадачаXDTO.author.objectID.ID;
	СтрокаЗадачи.АвторТип = ЗадачаXDTO.author.objectID.type;
	СтрокаЗадачи.ПринятаКИсполнению = ЗадачаXDTO.accepted;
	СтрокаЗадачи.РезультатВыполнения = ЗадачаXDTO.executionComment;
	
	Если ЗадачаXDTO.Свойства().Получить("iterationNumber") = Неопределено Тогда
		СтрокаЗадачи.НомерИтерации = 0;
	Иначе
		СтрокаЗадачи.НомерИтерации = ЗадачаXDTO.iterationNumber;
	КонецЕсли;
	
	ИсполнительXDTO = ЗадачаXDTO.performer;
	Если ИсполнительXDTO.Установлено("user") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ИсполнительXDTO.user, "Исполнитель")
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ИсполнительXDTO.role, "Исполнитель")
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
		ЗадачаXDTO.parentBusinessProcess, "Процесс");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
		ЗадачаXDTO, "Задача");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "state") Тогда
		СтрокаЗадачи.Состояние = ?(ЗадачаXDTO.parentBusinessProcess.state = Неопределено,
			"Активен", //@NON-NLS-1
			ЗадачаXDTO.parentBusinessProcess.state.name);
	ИначеЕсли СтрокаЗадачи.ТочкаМаршрутаКратко = "Ознакомиться" //@NON-NLS-1
			И (СтрокаЗадачи.ПроцессТип = "DMBusinessProcessApproval"
				Или СтрокаЗадачи.ПроцессТип = "DMBusinessProcessConfirmation"
				Или СтрокаЗадачи.ПроцессТип = "DMBusinessProcessConsideration"
				Или СтрокаЗадачи.ПроцессТип = "DMBusinessProcessRegistration"
				Или СтрокаЗадачи.ПроцессТип = "DMBusinessProcessInvitation") Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ПроцессXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			СтрокаЗадачи.ПроцессТип,
			СтрокаЗадачи.ПроцессID,
			"state");
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПроцессXDTO, "executionResult") Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
				ПроцессXDTO.executionResult, "Результат");
		КонецЕсли;
		
		СтрокаЗадачи.Состояние = ?(ПроцессXDTO.state = Неопределено, "Активен", ПроцессXDTO.state.name); //@NON-NLS-1
	Иначе
		СтрокаЗадачи.Состояние = "Активен"; //@NON-NLS-1
	КонецЕсли;
	
	// Заполним реквизиты, специфичные для типа процесса.
	Если СтрокаЗадачи.ПроцессТип = "DMBusinessProcessApproval" Тогда
		ЗаполнитьДанныеБПСогласование(СтрокаЗадачи, ЗадачаXDTO);
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		ЗаполнитьДанныеБПУтверждение(СтрокаЗадачи, ЗадачаXDTO);
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessConsideration" Тогда
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessOrder" Тогда
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessPerformance" Тогда
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMComplexBusinessProcess" Тогда
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessRegistration" Тогда
		ЗаполнитьДанныеБПРегистрация(СтрокаЗадачи, ЗадачаXDTO);
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessAcquaintance" Тогда
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		ЗаполнитьДанныеБПРешениеВопросов(СтрокаЗадачи, ЗадачаXDTO);
		
	ИначеЕсли СтрокаЗадачи.ПроцессТип = "DMBusinessProcessInvitation" Тогда
		ЗаполнитьДанныеБППриглашение(СтрокаЗадачи, ЗадачаXDTO);
		
	КонецЕсли;
	
	// Получим предмет(ы) задачи.
	СтрокаЗадачи.Предметы.Очистить();
	Если СтрокаЗадачи.ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		
		Для Каждого ФайлXDTO Из ЗадачаXDTO.files Цикл
			СтрокаПредмета = СтрокаЗадачи.Предметы.Добавить();
			СтрокаПредмета.ИмяПредмета = ФайлXDTO.name;
			СтрокаПредмета.РольПредмета = "Вспомогательный"; //@NON-NLS-1
			СтрокаПредмета.ДоступноУдаление = Истина;
			СтрокаПредмета.Наименование = ФайлXDTO.name;
			СтрокаПредмета.ID = ФайлXDTO.objectID.ID;
			СтрокаПредмета.Тип = ФайлXDTO.objectID.type;
			СтрокаПредмета.Расширение = ФайлXDTO.extension;
			Если ДоступенЗахватФайлов Тогда
				СтрокаПредмета.Редактируется = ФайлXDTO.editing;
				Если ФайлXDTO.Установлено("editingUser") Тогда
					ТекущийПользовательИСотрудники =
						ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
					СтрокаПредмета.РедактируетсяТекущимПользователем =
						ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
							ФайлXDTO.editingUser.objectID.ID,
							ФайлXDTO.editingUser.objectID.type,
							ТекущийПользовательИСотрудники);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДоступнаМультипредметность Тогда
		
		Если ЗадачаXDTO.Свойства().Получить("targets") <> Неопределено
				И ЗадачаXDTO.Установлено("targets") Тогда
			Для Каждого СтрокаПредметаXDTO Из ЗадачаXDTO.targets.items Цикл
				СтрокаПредмета = СтрокаЗадачи.Предметы.Добавить();
				СтрокаПредмета.ИмяПредмета = СтрокаПредметаXDTO.name;
				СтрокаПредмета.РольПредмета = СтрокаПредметаXDTO.role.objectID.ID;
				СтрокаПредмета.ДоступноУдаление = СтрокаПредметаXDTO.allowDeletion;
				ПредметXDTO = СтрокаПредметаXDTO.target;
				СтрокаПредмета.Наименование = ПредметXDTO.name;
				СтрокаПредмета.ID = ПредметXDTO.objectID.ID;
				СтрокаПредмета.Тип = ПредметXDTO.objectID.type;
				Если СтрокаПредмета.Тип = "DMFile" // для файлов сервис возвращает расширение
						И ПредметXDTO.Установлено("extension") Тогда
					СтрокаПредмета.Расширение = ПредметXDTO.extension;
					Если ДоступенЗахватФайлов Тогда
						СтрокаПредмета.Редактируется = ПредметXDTO.editing;
						Если ПредметXDTO.Установлено("editingUser") Тогда
							ТекущийПользовательИСотрудники =
								ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
							СтрокаПредмета.РедактируетсяТекущимПользователем =
								ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
									ПредметXDTO.editingUser.objectID.ID,
									ПредметXDTO.editingUser.objectID.type,
									ТекущийПользовательИСотрудники);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ПредметXDTO.Установлено("externalObject") Тогда // объект ИС
					СтрокаПредмета.СвязанныйОбъектID = ПредметXDTO.externalObject.ID;
					СтрокаПредмета.СвязанныйОбъектТип = ПредметXDTO.externalObject.type;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗадачаXDTO.Установлено("target") Тогда
		
		ПредметXDTO = ЗадачаXDTO.target;
		СтрокаПредмета = СтрокаЗадачи.Предметы.Добавить();
		СтрокаПредмета.Наименование = ПредметXDTO.name;
		СтрокаПредмета.ID = ПредметXDTO.objectID.ID;
		СтрокаПредмета.Тип = ПредметXDTO.objectID.type;
		СтрокаПредмета.ДоступноУдаление = Ложь;
		СтрокаПредмета.Редактируется = Ложь;
		СтрокаПредмета.РедактируетсяТекущимПользователем = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует таблицу предметов задачи.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Наименование - Строка
//     * ID - Строка
//     * Тип - Строка
//     * РольПредмета - Строка
//     * Расширение - Строка
//     * СвязанныйОбъектТип - Строка
//     * СвязанныйОбъектID - Строка
//     * ИмяПредмета - Строка
//     * ДоступноУдаление - Булево
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//
&НаСервере
Функция ТаблицаПредметовЗадачи()
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("РольПредмета", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("СвязанныйОбъектТип", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("СвязанныйОбъектID", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("ИмяПредмета", Новый ОписаниеТипов("Строка"));
	Предметы.Колонки.Добавить("ДоступноУдаление", Новый ОписаниеТипов("Булево"));
	Предметы.Колонки.Добавить("Редактируется", Новый ОписаниеТипов("Булево"));
	Предметы.Колонки.Добавить("РедактируетсяТекущимПользователем", Новый ОписаниеТипов("Булево"));
	
	Возврат Предметы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеБПСогласование(СтрокаЗадачи, ЗадачаXDTO)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "executionResult") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.parentBusinessProcess.executionResult, "Результат");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПУтверждение(СтрокаЗадачи, ЗадачаXDTO)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "executionResult") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.parentBusinessProcess.executionResult, "Результат");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "processType") Тогда
		СтрокаЗадачи.ЭтоПодписание = (ЗадачаXDTO.parentBusinessProcess.processType.objectID.ID = "Подписание"); //@NON-NLS-1
	Иначе
		СтрокаЗадачи.ЭтоПодписание = Ложь;
	КонецЕсли;
	
	Если СтрокаЗадачи.ЭтоПодписание Тогда
		Если СтрокаЗадачи.РезультатID = "Утверждено" Тогда //@NON-NLS-1
			СтрокаЗадачи.Результат = НСтр("ru='Подписано'");
		Иначе
			СтрокаЗадачи.Результат = НСтр("ru='Не подписано'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРешениеВопросов(СтрокаЗадачи, ЗадачаXDTO)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO, "issueType") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.issueType, "ВидВопроса");
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
		СтрокаЗадачи.ВидВопроса = НСтр("ru = 'Иное'");
		СтрокаЗадачи.ВидВопросаID = "Иное"; //@NON-NLS-1
		СтрокаЗадачи.ВидВопросаТип = "DMIssueType";
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "issueTask") Тогда
		СтрокаЗадачи.СтарыйСрок = ЗадачаXDTO.parentBusinessProcess.issueTask.dueDate;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "newDueDate") Тогда
		СтрокаЗадачи.НовыйСрок = ЗадачаXDTO.parentBusinessProcess.newDueDate;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO, "issueTask") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.issueTask, "ПредметРассмотрения");
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.issueTask.parentBusinessProcess, "БизнесПроцессПредметаРассмотрения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРегистрация(СтрокаЗадачи, ЗадачаXDTO)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "executionResult") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.parentBusinessProcess.executionResult, "Результат");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБППриглашение(СтрокаЗадачи, ЗадачаXDTO)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "activityVenue") Тогда
		СтрокаЗадачи.МестоПроведенияПриглашения = ЗадачаXDTO.parentBusinessProcess.activityVenue;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "activityBegin") Тогда
		СтрокаЗадачи.ДатаНачалаПриглашения = ЗадачаXDTO.parentBusinessProcess.activityBegin;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO.parentBusinessProcess, "invitationResult") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ЗадачаXDTO.parentBusinessProcess.invitationResult, "Результат");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	Попытка
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ЗадачиXDTO = ПолучитьЗадачи(Прокси, Ложь);
		ЗаполнитьСписокЗадач(ЗадачиXDTO);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачЧастичноНаСервере()
	
	Если Не ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		ОбновитьСписокЗадачНаСервере();
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Попытка
		ЗадачиXDTO = ПолучитьЗадачи(Прокси, Ложь);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка); // ТаблицаЗначений
	ЗадачиКУдалению = ТаблицаЗадач.ВыгрузитьКолонку("ЗадачаID");
	
	Для Каждого ЗадачаXDTO Из ЗадачиXDTO Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("ЗадачаID", ЗадачаXDTO.object.objectID.ID));
		Если СтрокиЗадач.Количество() > 0 Тогда
			СтрокаЗадачи = СтрокиЗадач[0];
			ЗадачиКУдалению.Удалить(ЗадачиКУдалению.Найти(ЗадачаXDTO.object.objectID.ID));
		Иначе
			СтрокаЗадачи = ТаблицаЗадач.Добавить();
			СтрокаЗадачи.Предметы = ТаблицаПредметовЗадачи();
		КонецЕсли;
		ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи, ЗадачаXDTO.object);
	КонецЦикла;
	
	Для Каждого УдаляемаяЗадача Из ЗадачиКУдалению Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("ЗадачаID", УдаляемаяЗадача));
		Если СтрокиЗадач.Количество() > 0 Тогда
			ТаблицаЗадач.Удалить(СтрокиЗадач[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач, УникальныйИдентификатор);
	СгруппироватьПоКолонкеНаСервере();
	
	ЗаполнитьПоляЧислаЗадач();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляЧислаЗадач()
	
	Просрочено = 0;
	НеПринято = 0;
	ТекущаяДата = ТекущаяДатаСеанса();
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка); // ТаблицаЗначений
	НеВыполненныеЗадачи = ТаблицаЗадач.НайтиСтроки(Новый Структура("Выполнена", Ложь));
	
	Для Каждого СтрокаЗадачи Из НеВыполненныеЗадачи Цикл
		Если ЗначениеЗаполнено(СтрокаЗадачи.СрокИсполнения) И СтрокаЗадачи.СрокИсполнения < ТекущаяДата Тогда
			Просрочено = Просрочено + 1;
		КонецЕсли;
		Если Не СтрокаЗадачи.ПринятаКИсполнению Тогда
			НеПринято = НеПринято + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсеЗадачи = ТаблицаЗадач.НайтиСтроки(Новый Структура("Группировка", Неопределено));
	ЗадачиВсего = ВсеЗадачи.Количество();
	ЗадачиПросроченные = Просрочено;
	ЗадачиНовые = НеПринято;
	
	Заголовок =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документооборот: задачи мне (Новых: %1 / Просроченных: %2 / Всего: %3)'"),
		ЗадачиНовые, ЗадачиПросроченные, ЗадачиВсего);

	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьДетальныеСведения()
	
	АктуализироватьДетальныеСведения(Элементы.Задачи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДетальныеСведения(СтрокаЗадачи)
	
	Комментарий = "";
	
	Если СтрокаЗадачи <> Неопределено
			И Не СтрокаЗадачи.Группировка
			И ЗначениеЗаполнено(СтрокаЗадачи.ЗадачаID) Тогда
		
		// Соберем уже известные реквизиты задачи для получения детальных сведений на сервере.
		РеквизитыЗадачи = Новый Структура;
		РеквизитыЗадачи.Вставить("Задача", СтрокаЗадачи.Задача);
		РеквизитыЗадачи.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
		РеквизитыЗадачи.Вставить("ЗадачаID", СтрокаЗадачи.ЗадачаID);
		РеквизитыЗадачи.Вставить("Процесс", СтрокаЗадачи.Процесс);
		РеквизитыЗадачи.Вставить("ПроцессТип", СтрокаЗадачи.ПроцессТип);
		РеквизитыЗадачи.Вставить("ПроцессID", СтрокаЗадачи.ПроцессID);
		РеквизитыЗадачи.Вставить("ЭтоПодписание", СтрокаЗадачи.ЭтоПодписание);
		РеквизитыЗадачи.Вставить("Описание", СтрокаЗадачи.Описание);
		РеквизитыЗадачи.Вставить("Исполнитель", СтрокаЗадачи.Исполнитель);
		РеквизитыЗадачи.Вставить("Выполнена", СтрокаЗадачи.Выполнена);
		РеквизитыЗадачи.Вставить("ТочкаМаршрутаКратко", СтрокаЗадачи.ТочкаМаршрутаКратко);
		РеквизитыЗадачи.Вставить("НомерИтерации", СтрокаЗадачи.НомерИтерации);
		РеквизитыЗадачи.Вставить("ВидВопросаID", СтрокаЗадачи.ВидВопросаID);
		РеквизитыЗадачи.Вставить("РезультатID", СтрокаЗадачи.РезультатID);
		РеквизитыЗадачи.Вставить("Состояние", СтрокаЗадачи.Состояние);
		Предметы = Новый Массив;
		Для Каждого СтрокаПредмета Из СтрокаЗадачи.Предметы Цикл
			Предмет = Новый Структура;
			Предмет.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
			Предмет.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
			Предмет.Вставить("Наименование", СтрокаПредмета.Наименование);
			Предмет.Вставить("Тип", СтрокаПредмета.Тип);
			Предмет.Вставить("ID", СтрокаПредмета.ID);
			Предмет.Вставить("Расширение", СтрокаПредмета.Расширение);
			Предмет.Вставить("СвязанныйОбъектТип", СтрокаПредмета.СвязанныйОбъектТип);
			Предмет.Вставить("СвязанныйОбъектID", СтрокаПредмета.СвязанныйОбъектID);
			Предмет.Вставить("ДоступноУдаление", СтрокаПредмета.ДоступноУдаление);
			Предмет.Вставить("Редактируется", СтрокаПредмета.Редактируется);
			Предмет.Вставить("РедактируетсяТекущимПользователем", СтрокаПредмета.РедактируетсяТекущимПользователем);
			Предметы.Добавить(Предмет);
		КонецЦикла;
		РеквизитыЗадачи.Вставить("Предметы", Предметы);
		
		АктуализацияТекущейСтроки = (СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные);
		ДетальныеСведенияЗадачи = Неопределено;
		
		// Возможно, кэша нет или он устарел.
		Если Не ЗначениеЗаполнено(СтрокаЗадачи.ДатаПолученияДетальныхСведений)
				Или ТекущаяДата() - СтрокаЗадачи.ДатаПолученияДетальныхСведений > 5 * 60
				Или ДетальныеСведенияОЗадачах.Получить(СтрокаЗадачи.ЗадачаID) = Неопределено Тогда // Использование оправдано: расчет длительности.
			
			ДетальныеСведенияЗадачи = ПолучитьДетальныеСведенияНаСервере(РеквизитыЗадачи);
			Если ДетальныеСведенияЗадачи = Неопределено Или СтрокаЗадачи = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаID, ДетальныеСведенияЗадачи);
			СтрокаЗадачи.ДатаПолученияДетальныхСведений = ТекущаяДата(); // Использование оправдано: расчет длительности.
			
		КонецЕсли;
		
		Если АктуализацияТекущейСтроки И ДетальныеСведенияЗадачи = Неопределено Тогда
			ДетальныеСведенияЗадачи = ДетальныеСведенияОЗадачах.Получить(СтрокаЗадачи.ЗадачаID);
		КонецЕсли;
		
		СохраненныйКомментарий = СохраненныеКомментарии.Получить(СтрокаЗадачи.ЗадачаID);
		Если СохраненныйКомментарий = Неопределено Тогда
			Комментарий = СтрокаЗадачи.РезультатВыполнения;
		Иначе
			Комментарий = СохраненныйКомментарий;
		КонецЕсли;
		Процесс = СтрокаЗадачи.Процесс;
		ПроцессТип = СтрокаЗадачи.ПроцессТип;
		ПроцессID = СтрокаЗадачи.ПроцессID;
		Автор = СтрокаЗадачи.Автор;
		АвторID = СтрокаЗадачи.АвторID;
		АвторТип = СтрокаЗадачи.АвторТип;
		ВидВопроса = СтрокаЗадачи.ВидВопроса;
		ВидВопросаID = СтрокаЗадачи.ВидВопросаID;
		ВидВопросаТип = СтрокаЗадачи.ВидВопросаТип;
		РезультатВыполнения = СтрокаЗадачи.Результат;
		РезультатВыполненияТип = СтрокаЗадачи.РезультатТип;
		РезультатВыполненияID = СтрокаЗадачи.РезультатID;
		ПредметРассмотренияТип = СтрокаЗадачи.ПредметРассмотренияТип;
		ПредметРассмотренияID = СтрокаЗадачи.ПредметРассмотренияID;
		БизнесПроцессПредметаРассмотренияТип = СтрокаЗадачи.БизнесПроцессПредметаРассмотренияТип;
		БизнесПроцессПредметаРассмотренияID = СтрокаЗадачи.БизнесПроцессПредметаРассмотренияID;
		СтарыйСрок = СтрокаЗадачи.СтарыйСрок;
		НовыйСрок = СтрокаЗадачи.НовыйСрок;
		МестоПроведенияПриглашения = СтрокаЗадачи.МестоПроведенияПриглашения;
		ДатаНачалаПриглашения = СтрокаЗадачи.ДатаНачалаПриглашения;
		
		ОбновитьПредставлениеЗадачиНаСервере(РеквизитыЗадачи, ДетальныеСведенияЗадачи);
		
		ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
		Для Каждого ЭлементДереваВерхнегоУровня Из ЭлементыДерева Цикл
			Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	Иначе
		
		ОбновитьПредставлениеЗадачиНаСервере(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает детальные сведения о задаче.
//
// Параметры:
//   РеквизитыЗадачи - Структура:
//     * ВидВопросаID - Строка
//     * Выполнена - Булево
//     * Задача - Строка
//     * ЗадачаID - Строка
//     * ЗадачаТип - Строка
//     * Исполнитель - Строка
//     * НомерИтерации - Число
//     * Описание - Строка
//     * Предметы - Массив из Структура:
//         ** ID - Строка
//         ** ДоступноУдаление - Булево
//         ** ИмяПредмета - Строка
//         ** Наименование - Строка
//         ** Расширение - Строка
//         ** Редактируется - Булево
//         ** РедактируетсяТекущимПользователем - Булево
//         ** РольПредмета - Строка
//         ** СвязанныйОбъектID - Строка
//         ** СвязанныйОбъектТип - Строка
//         ** Тип - Строка
//     * Процесс - Строка
//     * ПроцессID - Строка
//     * ПроцессТип - Строка
//     * РезультатID - Строка
//     * Состояние - Строка
//     * ТочкаМаршрутаКратко - Строка
//     * ЭтоПодписание - Булево
//
// Возвращаемое значение:
//   Структура:
//     * HTMLПредставление - Строка
//     * ФункционалНеДоступен - Булево
//     * ВыполнитьЗадачуПервая - Строка
//     * ВыполнитьЗадачуВторая - Строка
//     * ВыполнитьЗадачуТретья - Строка
//     * ЦветТекстаПервая - Цвет
//     * ЦветТекстаВторая - Цвет
//     * ЦветТекстаТретья - Цвет
//     * ВключенХронометраж - Булево
//     * ДатаНачалаХронометража - Дата
//     * ДатаКонцаХронометража - Дата
//     * Предметы - Массив из Структура:
//         ** Наименование - Строка
//         ** ID - Строка
//         ** Тип - Строка
//         ** Расширение - Строка
//         ** РольПредмета - Строка
//         ** КлючСтраницыКоманд - Строка
//         ** Ссылка - ЛюбаяСсылка
//         ** ДоступноУдаление - Булево
//         ** Редактируется - Булево
//         ** РедактируетсяТекущимПользователем - Булево
//         ** Картинка - Число
//         ** Представление - Строка
//         ** Файлы - Массив из Структура:
//              *** Наименование - Строка
//              *** Тип - Строка
//              *** ID - Строка
//              *** Расширение - Строка
//              *** Представление - Строка
//              *** Картинка - Число
//              *** ДоступноУдаление - Булево
//              *** Редактируется - Булево
//              *** РедактируетсяТекущимПользователем - Булево
//         ** КомандыСоздания - Массив из Структура:
//              *** Тип - Строка
//              *** Представление - Строка
//
&НаСервере
Функция ПолучитьДетальныеСведенияНаСервере(РеквизитыЗадачи)
	
	Результат = Новый Структура;
	
	Результат.Вставить("HTMLПредставление", "");
	Результат.Вставить("ФункционалНеДоступен", Ложь);
	Результат.Вставить("ВыполнитьЗадачуПервая", "");
	Результат.Вставить("ВыполнитьЗадачуВторая", "");
	Результат.Вставить("ВыполнитьЗадачуТретья", "");
	Результат.Вставить("ЦветТекстаПервая", Новый Цвет);
	Результат.Вставить("ЦветТекстаВторая", Новый Цвет);
	Результат.Вставить("ЦветТекстаТретья", Новый Цвет);
	Результат.Вставить("ВключенХронометраж", Ложь);
	Результат.Вставить("ДатаНачалаХронометража", Дата(1, 1, 1));
	Результат.Вставить("ДатаКонцаХронометража", Дата(1, 1, 1));
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Предметы = Новый Массив;
	
	Для Каждого СтрокаПредмета Из РеквизитыЗадачи.Предметы Цикл
		
		Предмет = Новый Структура;
		Предмет.Вставить("Наименование", СтрокаПредмета.Наименование);
		Предмет.Вставить("ID", СтрокаПредмета.ID);
		Предмет.Вставить("Тип", СтрокаПредмета.Тип);
		Предмет.Вставить("Расширение", СтрокаПредмета.Расширение);
		Предмет.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
		Предмет.Вставить("КлючСтраницыКоманд", "");
		Предмет.Вставить("Ссылка", Неопределено);
		Предмет.Вставить("ДоступноУдаление", СтрокаПредмета.ДоступноУдаление);
		Предмет.Вставить("Редактируется", СтрокаПредмета.Редактируется);
		Предмет.Вставить("РедактируетсяТекущимПользователем", СтрокаПредмета.РедактируетсяТекущимПользователем);
		
		Файлы = Новый Массив;
		
		Если СтрокаПредмета.Тип = "DMFile" Тогда
			// Веб-сервис с мультипредметностью сообщает расширение вместе с коллекцией предметов.
			Если Не ДоступнаМультипредметность Тогда // получим расширение вызовом сервиса.
				Попытка
					ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
						Прокси,
						СтрокаПредмета.Тип,
						СтрокаПредмета.ID,
						"extension");
				Исключение
					ОбработатьИсключение(ИнформацияОбОшибке());
					Возврат Неопределено;
				КонецПопытки;
				Предмет.Расширение = ОбъектXDTO.extension;
			КонецЕсли;
			Предмет.Вставить("Картинка",
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИндексПиктограммыФайла(Предмет.Расширение));
			Предмет.Вставить("Представление", СтрокаПредмета.Наименование);
			
		Иначе // объект иного типа, который может иметь приложенные файлы
			Если ДоступнаМультипредметность Тогда
				Предмет.Вставить("Картинка", ИнтеграцияС1СДокументооборотКлиентСервер.КартинкаПоРолиПредмета(
					СтрокаПредмета.РольПредмета));
			Иначе // роль предмета неизвестна, пусть будет основной
				Предмет.Вставить("Картинка", ИнтеграцияС1СДокументооборотКлиентСервер.КартинкаПоРолиПредмета(
					"Основной"));
			КонецЕсли;
			// Получим представление из наименования предмета и его имени в процессе.
			Представление = Строка(Предмет.Наименование);
			Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
				Представление = Представление + " (" + СтрокаПредмета.ИмяПредмета + ")";
			КонецЕсли;
			Представление = Представление + НСтр("ru = ', документ ДО'");
			// Найдем связанный объект.
			Если ЗначениеЗаполнено(СтрокаПредмета.СвязанныйОбъектID) Тогда
				СвязанныйОбъект = Новый Структура("ID, type",
					СтрокаПредмета.СвязанныйОбъектID,
					СтрокаПредмета.СвязанныйОбъектТип);
				МассивСсылокПоВнешнимОбъектам = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкиПоВнешнимОбъектам(СвязанныйОбъект);
				Предмет.Ссылка = ?(МассивСсылокПоВнешнимОбъектам.Количество() > 0,
					МассивСсылокПоВнешнимОбъектам[0],
					Неопределено);
			КонецЕсли;
			Если ЗначениеЗаполнено(Предмет.Ссылка) Тогда
				// Ситуация, когда права на объект в ДО есть, а в ИС нет, не должна приводить к исключению
				// при выборке задач. При возникновении исключения получим представление из ДО, а пользователь
				// увидит "Нарушение прав доступа" лишь при попытке открыть предмет.
				Попытка
					СокращенноеНаименованиеКонфигурации = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
					Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
						ПредставлениеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = ', объект %1'"), СокращенноеНаименованиеКонфигурации);
					Иначе
						ПредставлениеОбъекта = НСтр("ru = ', объект ИС'");
					КонецЕсли;
					Предмет.Вставить("Представление", Строка(Предмет.Ссылка) + ПредставлениеОбъекта);
				Исключение
					Предмет.Вставить("Представление", Представление);
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
							НСтр("ru = 'Ошибка при получении представления связанного объекта'",
								ОбщегоНазначения.КодОсновногоЯзыка())),
						УровеньЖурналаРегистрации.Ошибка,,
						Предмет.Ссылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			Иначе
				Предмет.Вставить("Представление", Представление);
			КонецЕсли;
			// Получим приложенные файлы.
			Попытка
				СписокФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлыПоВладельцу(
					СтрокаПредмета.ID,
					СтрокаПредмета.Наименование,
					СтрокаПредмета.Тип);
			Исключение
				ОбработатьИсключение(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			Для Каждого ФайлXDTO Из СписокФайлов.files Цикл
				Файл = Новый Структура;
				Файл.Вставить("Наименование", ФайлXDTO.name);
				Файл.Вставить("Тип", ФайлXDTO.objectID.type);
				Файл.Вставить("ID", ФайлXDTO.objectID.ID);
				Файл.Вставить("Расширение", ФайлXDTO.extension);
				Файл.Вставить("Представление", Файл.Наименование);
				
				ПометкаУдаления = Ложь;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "deletionMark") Тогда
					ПометкаУдаления = ФайлXDTO.deletionMark;
				КонецЕсли;
				Файл.Вставить("Картинка",
					ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИндексПиктограммыФайла(
						ФайлXDTO.extension,
						ПометкаУдаления));
				
				Файл.Вставить("ДоступноУдаление", Ложь);
				Если ДоступенЗахватФайлов Тогда
					Файл.Вставить("Редактируется", ФайлXDTO.editing);
					Если ФайлXDTO.Установлено("editingUser") Тогда
						ТекущийПользовательИСотрудники =
							ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
						РедактируетсяТекущимПользователем =
							ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
								ФайлXDTO.editingUser.objectID.ID,
								ФайлXDTO.editingUser.objectID.type,
								ТекущийПользовательИСотрудники);
						Файл.Вставить("РедактируетсяТекущимПользователем", РедактируетсяТекущимПользователем);
					КонецЕсли;
				КонецЕсли;
				Файлы.Добавить(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Предмет.Вставить("Файлы", Файлы);
		
		// Получим пункты подменю "Создать на основании".
		СтруктураКоманд = ИнтеграцияС1СДокументооборотВызовСервера.СтруктураКомандСозданияИОткрытия(
			СтрокаПредмета.Тип, СтрокаПредмета.ID);
		Если СтруктураКоманд <> Неопределено Тогда
			КомандыСоздания = Неопределено;
			Если СтруктураКоманд.Свойство("КомандыСоздания", КомандыСоздания)
					И КомандыСоздания.Количество() > 0 Тогда
				КлючСтраницы = КлючСтраницыКоманд(СтрокаПредмета.Тип, СтруктураКоманд.ВидДокументаID);
				Предмет.Вставить("КлючСтраницыКоманд", КлючСтраницы);
				Предмет.Вставить("КомандыСоздания", КомандыСоздания);
			КонецЕсли;
		КонецЕсли;
		
		Предметы.Добавить(Предмет);
		
	КонецЦикла;
	
	Результат.Вставить("Предметы", Предметы);
	
	// Получим HTML-представление.
	СтрокаПолноеОписаниеЗадачи = РеквизитыЗадачи.Описание;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ПроцессТип) И ЗначениеЗаполнено(РеквизитыЗадачи.ПроцессID) Тогда
		
		Попытка
			ПроцессОбъект = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
				Прокси,
				РеквизитыЗадачи.ПроцессТип,
				РеквизитыЗадачи.ПроцессID,
				"executionComment");
		Исключение
			ОбработатьИсключение(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		
		Если ПроцессОбъект.Свойства().Получить("executionComment") <> Неопределено Тогда
			Если Не ПустаяСтрока(ПроцессОбъект.executionComment) Тогда
				Если Не ПустаяСтрока(СтрокаПолноеОписаниеЗадачи) Тогда
					СтрокаПолноеОписаниеЗадачи = СтрокаПолноеОписаниеЗадачи + Символы.ПС + Символы.ПС;
				КонецЕсли;
				СтрокаПолноеОписаниеЗадачи = СтрокаПолноеОписаниеЗадачи
					+ Символы.ПС + НСтр("ru = 'История выполнения:'")
					+ Символы.ПС + "------------------------------------"
					+ Символы.ПС + ПроцессОбъект.executionComment;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПолноеОписаниеЗадачи = СтрЗаменить(СтрокаПолноеОписаниеЗадачи, Символы.ПС, "<br>");
	ТекстHTML = "<html>
		|<head>
		| <style>
		|  h1 {
		|   font-size: 10pt;
		|	 font-family:Arial;
		|  }
		|  p {
		|   font-size: 10pt;
		|	 font-family:Arial;
		|  }
		|	BODY {
		|	 margin: 0px;
		|	 padding: 3px;
		|	}
		| </style>
		|</head>
		|<body scroll=auto>";
	ТекстHTML = ТекстHTML + "<h1>" + РеквизитыЗадачи.Задача + "</h1>";
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		Если СокрЛП(РеквизитыЗадачи.Исполнитель) <> СокрЛП(ИмяПользователя) Тогда
			ОписаниеИсполнителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСТР("ru = 'Кому: %1'"),
				РеквизитыЗадачи.Исполнитель);
			ТекстHTML = ТекстHTML + "<p>" + ОписаниеИсполнителя + "</p>";
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыЗадачи.НомерИтерации <> 0 Тогда
		ИтерацияЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСТР("ru = 'Цикл: %1'"),
			РеквизитыЗадачи.НомерИтерации);
			
		ТекстHTML = ТекстHTML + "<p>" + ИтерацияЗадачи + "</p>";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПолноеОписаниеЗадачи) Тогда
		ТекстHTML = ТекстHTML + "<p>" + СтрокаПолноеОписаниеЗадачи + "</p>";
	Иначе
		ТекстHTML = ТекстHTML + "<p><FONT color=""#C0C0C0"">"
			+ НСтр("ru = 'У задачи нет описания.'") + "</FONT></p>";
	КонецЕсли;
	ТекстHTML = ТекстHTML + "</body></html>";
	Результат.HTMLПредставление = ТекстHTML;
	
	// Цвета и заголовки кнопок исполнения.
	СтруктураКнопок = ИнтеграцияС1СДокументооборотВызовСервера.СтруктураИсполненияЗадачи(РеквизитыЗадачи);
	ИменаЦветаКнопок = Новый Структура("ВыполнитьЗадачуПервая, ВыполнитьЗадачуВторая, ВыполнитьЗадачуТретья",
		"ЦветТекстаПервая", "ЦветТекстаВторая", "ЦветТекстаТретья");
	Для Каждого ИмяЦветКнопки Из ИменаЦветаКнопок Цикл
		Результат[ИмяЦветКнопки.Ключ] = СтруктураКнопок[ИмяЦветКнопки.Ключ];
		Результат[ИмяЦветКнопки.Значение] = СтруктураКнопок[ИмяЦветКнопки.Значение];
	КонецЦикла;
	Результат.ФункционалНеДоступен = СтруктураКнопок.ФункционалНеДоступен;
	
	// Хронометраж.
	Если ДоступенФункционалХронометраж Тогда
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetChronometrationSettingsRequest");
		СписокОбъектов = Запрос.objects; // СписокXDTO
		
		ОбъектID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			РеквизитыЗадачи.ЗадачаID,
			РеквизитыЗадачи.ЗадачаТип);
		СписокОбъектов.Добавить(ОбъектID);
		Попытка
			ОтветСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		Исключение
			ОбработатьИсключение(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, ОтветСервиса);
		ПараметрыХронометража = ОтветСервиса.settings[0];
		Результат.ВключенХронометраж = ПараметрыХронометража.chronometrationOn;
		Результат.ДатаНачалаХронометража = ПараметрыХронометража.beginDate;
		Результат.ДатаКонцаХронометража = ПараметрыХронометража.endDate;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи)
	
	КлючСтраницыКоманд = "";
	Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница.Видимость = Ложь;
	
	// На каждой странице - своя кнопка хронометража.
	Если ДетальныеСведенияЗадачи = Неопределено Тогда
		ЭлементПереключитьХронометраж = Элементы.ПереключитьХронометраж;
		ЭлементПереключитьХронометраж.Доступность = Ложь;
	Иначе
		ТекущийПредмет = Неопределено;
		Для Каждого Предмет Из ДетальныеСведенияЗадачи.Предметы Цикл
			Если Предмет.Тип <> "DMFile" Тогда
				ТекущийПредмет = Предмет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийПредмет <> Неопределено Тогда
			КлючСтраницыКоманд = Предмет.КлючСтраницыКоманд;
			ИмяНовойСтраницы = "ГруппаСтраницаКоманд" + КлючСтраницыКоманд;
			// Строим подменю лишь при необходимости.
			Если Элементы.Найти(ИмяНовойСтраницы) = Неопределено Тогда
				ПостроитьПодменюСозданияНаОсновании();
			КонецЕсли;
			ЭлементПереключитьХронометраж = Элементы["ПереключитьХронометраж" + КлючСтраницыКоманд];
			ЭлементПереключитьХронометраж.Доступность = Истина;
			Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
				ЭлементПереключитьХронометраж.Пометка = Истина;
			Иначе
				ЭлементПереключитьХронометраж.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = Элементы["ГруппаСтраницаКоманд" + КлючСтраницыКоманд];
	Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиНаСервере(РеквизитыЗадачи, ДетальныеСведенияЗадачи)
	
	Элементы.Комментарий.ОтметкаНезаполненного = Ложь;
	Элементы.ГруппаРеквизитыРассмотрения.Видимость = Ложь;
	Элементы.РезультатВыполнения.Видимость = Ложь;
	Элементы.ДатаНачалаПриглашения.Видимость = Ложь;
	Элементы.МестоПроведенияПриглашения.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Истина;
	Элементы.Комментарий.ПодсказкаВвода = НСтр("ru = 'Комментарий'");
	
	ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи);
	
	Если РеквизитыЗадачи = Неопределено Тогда
		Элементы.Открыть.Доступность = Ложь;
		Элементы.ЗадачиКонтекстноеМенюОткрытьПроцесс.Доступность = Ложь;
		Элементы.ГруппаИсполнениеСтраницыКнопок.ТекущаяСтраница = Элементы.ГруппаИсполнениеНоль;
		Комментарий = "";
		HTMLПредставление = "";
		ДеревоПриложений.ПолучитьЭлементы().Очистить();
		Для Каждого КнопкаСоздания Из Элементы.ГруппаСоздатьНаОсновании.ПодчиненныеЭлементы Цикл
			Если Лев(КнопкаСоздания.ИмяКоманды, 8) = "Создать_" Тогда
				КнопкаСоздания.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	Иначе
		Элементы.Открыть.Доступность = Истина;
		Элементы.ЗадачиКонтекстноеМенюОткрытьПроцесс.Доступность = Истина;
	КонецЕсли;
	
	Если ДетальныеСведенияЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетальныеСведенияЗадачи.ФункционалНеДоступен Тогда
		ВывестиИнформациюОНедоступностиВыполненияЗадачи();
		Возврат;
	Иначе
		Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
		Элементы.ДекорацияВнимание2.Видимость = Ложь;
	КонецЕсли;
	
	// Цвета и заголовки кнопок исполнения.
	ИменаЦветаКнопок = Новый Структура("ВыполнитьЗадачуПервая, ВыполнитьЗадачуВторая, ВыполнитьЗадачуТретья",
		"ЦветТекстаПервая", "ЦветТекстаВторая", "ЦветТекстаТретья");
	Если ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуТретья) Тогда
		КоличествоКнопок = "Три";
	ИначеЕсли ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуВторая) Тогда
		КоличествоКнопок = "Две";
	ИначеЕсли ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуПервая) Тогда
		КоличествоКнопок = "Одна";
	Иначе
		КоличествоКнопок = "Ноль";
	КонецЕсли;
	Для Каждого ИмяЦветКнопки Из ИменаЦветаКнопок Цикл
		Если ЗначениеЗаполнено(ДетальныеСведенияЗадачи[ИмяЦветКнопки.Ключ]) Тогда
			Кнопка = Элементы[КоличествоКнопок + ИмяЦветКнопки.Ключ];
			Кнопка.Заголовок = ДетальныеСведенияЗадачи[ИмяЦветКнопки.Ключ];
			Кнопка.ЦветТекста = ДетальныеСведенияЗадачи[ИмяЦветКнопки.Значение];
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаИсполнениеСтраницыКнопок.ТекущаяСтраница = Элементы["ГруппаИсполнение" + КоличествоКнопок];
	
	HTMLПредставление = ДетальныеСведенияЗадачи.HTMLПредставление;
	
	ОсновнойПредметТип = "";
	ОсновнойПредметID = "";
	
	// Заполним дерево приложений.
	Предметы = ДеревоПриложений.ПолучитьЭлементы();
	Предметы.Очистить();
	Для Каждого Предмет Из ДетальныеСведенияЗадачи.Предметы Цикл
		Если Предмет.РольПредмета = "Основной" И ОсновнойПредметID = "" Тогда //@NON-NLS-1
			ОсновнойПредметТип = Предмет.Тип;
			ОсновнойПредметID = Предмет.ID;
		КонецЕсли;
		СтрокаПредмет = Предметы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмет, Предмет);
		Файлы = СтрокаПредмет.ПолучитьЭлементы();
		Файлы.Очистить();
		Для Каждого Файл Из Предмет.Файлы Цикл
			СтрокаФайл = Файлы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФайл, Файл);
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ОткрытьОсновнойПредмет.Доступность = ЗначениеЗаполнено(ОсновнойПредметТип)
		И ЗначениеЗаполнено(ОсновнойПредметID);
	
	// Для задачи без предметов покажем декорацию.
	ЕстьПредметы = (ДетальныеСведенияЗадачи.Предметы.Количество() > 0);
	Если ЕстьПредметы Тогда
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним реквизиты, специфичные для типа процесса.
	Если РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessApproval" Тогда
		ОбновитьПредставлениеЗадачиБПСогласование(РеквизитыЗадачи);
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		ОбновитьПредставлениеЗадачиБПУтверждение(РеквизитыЗадачи);
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessConsideration" Тогда
		ОбновитьПредставлениеЗадачиБПРассмотрение(РеквизитыЗадачи);
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessOrder" Тогда
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessPerformance" Тогда
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMComplexBusinessProcess" Тогда
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessRegistration" Тогда
		ОбновитьПредставлениеЗадачиБПРегистрация(РеквизитыЗадачи);
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessAcquaintance" Тогда
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		ОбновитьПредставлениеЗадачиБПРешениеВопросов(РеквизитыЗадачи);
		
	ИначеЕсли РеквизитыЗадачи.ПроцессТип = "DMBusinessProcessInvitation" Тогда
		ОбновитьПредставлениеЗадачиБППриглашение(РеквизитыЗадачи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБПСогласование(РеквизитыЗадачи)
	
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "Ознакомиться" Тогда //@NON-NLS-1
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Истина;
		Если РеквизитыЗадачи.РезультатID = "НеСогласовано" Тогда //@NON-NLS-1
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБПУтверждение(РеквизитыЗадачи)
	
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "Ознакомиться" Тогда //@NON-NLS-1
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Истина;
		Если РеквизитыЗадачи.РезультатID = "НеУтверждено" Тогда //@NON-NLS-1
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБПРассмотрение(РеквизитыЗадачи)
	
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "Рассмотреть" Тогда //@NON-NLS-1
		Элементы.Комментарий.ПодсказкаВвода = НСтр("ru = 'Ваша резолюция'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБПРегистрация(РеквизитыЗадачи)
	
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "Ознакомиться" Тогда //@NON-NLS-1
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Истина;
		Если РеквизитыЗадачи.РезультатID = "НеЗарегистрировано" Тогда //@NON-NLS-1
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБПРешениеВопросов(РеквизитыЗадачи)
	
	// Рассмотрение переноса срока
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "РассмотрениеИнициатором" //@NON-NLS-1
			И РеквизитыЗадачи.ВидВопросаID = "ПереносСрока" Тогда //@NON-NLS-1
		Элементы.ГруппаРеквизитыРассмотрения.Видимость = Истина;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
			Элементы.ДлительностьПереноса.Видимость = Истина;
			ДлительностьПереноса = ИнтеграцияС1СДокументооборотВызовСервера.ПодписьДлительностиПереносаСрока(
				Автор,
				АвторID,
				АвторТип,
				СтарыйСрок,
				НовыйСрок);
		Иначе
			Элементы.ДлительностьПереноса.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиБППриглашение(РеквизитыЗадачи)
	
	Если РеквизитыЗадачи.ТочкаМаршрутаКратко = "Пригласить" Тогда //@NON-NLS-1
		Элементы.ДатаНачалаПриглашения.Видимость = Истина;
		Элементы.МестоПроведенияПриглашения.Видимость = Истина;
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрутаКратко = "Ознакомиться" Тогда //@NON-NLS-1
		Элементы.Комментарий.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Истина;
		Если РеквизитыЗадачи.РезультатID = "НеПринятоОбязательнымиУчастниками" //@NON-NLS-1
				Или РеквизитыЗадачи.РезультатID = "НеПринятоВсемиУчастниками" Тогда //@NON-NLS-1
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ЗадачаТип, ЗадачаID, ПредметID, ДетальныеСведенияЗадачи)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMSetChronometrationSettingsRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	ОбъектID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ЗадачаID, ЗадачаТип);
	СписокОбъектов.Добавить(ОбъектID);
	
	Попытка
		ОтветСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, ОтветСервиса);
	
	ПараметрыХронометража = ОтветСервиса.settings[0];
	ДетальныеСведенияЗадачи.ВключенХронометраж = ПараметрыХронометража.chronometrationOn;
	ДетальныеСведенияЗадачи.ДатаНачалаХронометража = ПараметрыХронометража.beginDate;
	ДетальныеСведенияЗадачи.ДатаКонцаХронометража = ПараметрыХронометража.endDate;
	
	ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	Записи = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоОбъектамДокументооборота(
		ПараметрыОповещения.АктивныеЗаписи);
	
	Для Каждого Запись Из Записи Цикл
		ПараметрыОповещенияЗаписи = Новый Структура;
		ПараметрыОповещенияЗаписи.Вставить("name", Запись.Источник);
		ПараметрыОповещенияЗаписи.Вставить("ID", Запись.ИсточникID);
		ПараметрыОповещенияЗаписи.Вставить("type", Запись.ИсточникТип);
		Оповестить("Запись_ДокументооборотТрудозатраты", ПараметрыОповещенияЗаписи, Запись.ИсточникID);
	КонецЦикла;
	
	ДетальныеСведенияЗадачи = ПараметрыОповещения.ДетальныеСведенияЗадачи;
	ПереключитьХронометражСервер(ПараметрыОповещения.ЗадачаТип, ПараметрыОповещения.ЗадачаID, 
		ПараметрыОповещения.ПредметID, ДетальныеСведенияЗадачи);
	Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(ПараметрыОповещения.Задача));
		Состояние(Текст);
	КонецЕсли;
	ДетальныеСведенияОЗадачах.Вставить(ПараметрыОповещения.ЗадачаID, ДетальныеСведенияЗадачи);
		
КонецПроцедуры

&НаСервере
Функция КлючСтраницыКоманд(Тип, ВидID)
	
	Если ЗначениеЗаполнено(ВидID) Тогда
		БезопасныйID = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВидID, "_", ""), " ", ""), "-", "");
		Возврат Тип + "_" + БезопасныйID;
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПостроитьПодменюСозданияНаОсновании()
	
	// Соберем источники заполнения (для создания страниц-подменю) и получателей (для добавления кнопок).
	ЗапросИсточникиПолучатели = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Правила.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ВЫБОР
		|		КОГДА Правила.ТипОбъектаДО = ""DMCorrespondent""
		|			ТОГДА """"
		|		КОГДА Реквизиты.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение)
		|			ТОГДА Реквизиты.ЗначениеРеквизитаДОID
		|		КОГДА Реквизиты.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона)
		|			ТОГДА Реквизиты.ШаблонID
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ИдентификаторВидаДокумента,
		|	Правила.ТипОбъектаИС КАК ТипОбъектаИС
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовДО КАК Реквизиты
		|		ПО Правила.Ссылка = Реквизиты.Ссылка
		|			И (Реквизиты.ИмяРеквизитаОбъектаДО = ""documentType"")
		|ГДЕ
		|	НЕ Правила.ПометкаУдаления
		|ИТОГИ ПО
		|	ТипОбъектаДО,
		|	ИдентификаторВидаДокумента");
	
	// Элементы, подлежащие копированию.
	ИмяИсходнойСтраницы = "ГруппаСтраницаКоманд";
	ИсходнаяСтраница = Элементы[ИмяИсходнойСтраницы];
	ИмяИсходногоПодменю = "ГруппаСоздатьНаОсновании";
	ИмяИсходнойПанели = "ГруппаКоманды";
	ИсходнаяПанель = Элементы[ИмяИсходнойПанели];
	
	ВыборкаТипДО = ЗапросИсточникиПолучатели.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипДО.Следующий() Цикл
		
		// Обезопасим построение важной формы от возможных проблем с содержимым справочника.
		Если Не ЗначениеЗаполнено(ВыборкаТипДО.ТипОбъектаДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВидID = ВыборкаТипДО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидID.Следующий() Цикл
			
			КлючСтраницы = КлючСтраницыКоманд(ВыборкаТипДО.ТипОбъектаДО,
				ВыборкаВидID.ИдентификаторВидаДокумента);
			
			ИмяНовойСтраницы = ИмяИсходнойСтраницы + КлючСтраницы;
			Если Элементы.Найти(ИмяНовойСтраницы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяНовойПанели = ИмяИсходнойПанели + КлючСтраницы;
			
			// Создадим новую страницу.
			НоваяСтраница = Элементы.Добавить(ИмяНовойСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыКоманд);
			ЗаполнитьЗначенияСвойств(НоваяСтраница, ИсходнаяСтраница, , "Имя, ПутьКДаннымЗаголовка");
			
			// Создадим новую командную панель.
			НоваяПанель = Элементы.Добавить(ИмяНовойПанели, Тип("ГруппаФормы"), НоваяСтраница);
			ЗаполнитьЗначенияСвойств(НоваяПанель, ИсходнаяПанель, , "Имя");
			
			// Скопируем элементы командной панели, ограничившись двумя уровнями.
			Для Каждого ИсходныйЭлемент Из ИсходнаяПанель.ПодчиненныеЭлементы Цикл
				НовыйЭлемент = Элементы.Добавить(ИсходныйЭлемент.Имя + КлючСтраницы, ТипЗнч(ИсходныйЭлемент), НоваяПанель);
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент, , "Имя");
				Если ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаФормы") Тогда
					НоваяГруппа = НовыйЭлемент;
					Для Каждого ИсходныйЭлементГруппы Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
						НовыйЭлементГруппы = Элементы.Добавить(ИсходныйЭлементГруппы.Имя + КлючСтраницы, 
							ТипЗнч(ИсходныйЭлементГруппы), НоваяГруппа);
						ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, ИсходныйЭлементГруппы, , "Имя");
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним стандартное подменю создания пунктами, специфичными для этого вида объекта.
			НовоеПодменю = Элементы.Найти(ИмяИсходногоПодменю + КлючСтраницы);
			ВыборкаТипПотребителя = ВыборкаВидID.Выбрать();
			Пока ВыборкаТипПотребителя.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаТипПотребителя.ТипОбъектаИС) Тогда
					
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыборкаТипПотребителя.ТипОбъектаИС);
					Если ОбъектМетаданных = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
						Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Элемент справочника %1'"),
							ОбъектМетаданных.Представление());
					Иначе
						Представление = ОбъектМетаданных.Представление();
					КонецЕсли;
					
					ИмяКоманды = СтрЗаменить(ВыборкаТипПотребителя.ТипОбъектаИС, "_", "__");
					ИмяКоманды = СтрЗаменить(ИмяКоманды, ".", "_");
					ИмяКоманды = "Создать_" + ИмяКоманды;
					
					Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
						КомандаСоздатьСвязанныйОбъект = Команды.Добавить(ИмяКоманды);
						КомандаСоздатьСвязанныйОбъект.Действие = "Подключаемый_СоздатьСвязанныйОбъект";
					КонецЕсли;
					
					ИмяЭлемента = ИмяКоманды + КлючСтраницы;
					Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда // страховка от дубликатов правил
						Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), НовоеПодменю);
						Кнопка.Заголовок = Представление;
						Кнопка.ИмяКоманды = ИмяКоманды;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПерваяЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Или Результат = Истина Тогда
		ВыполнитьЗадачу(1);
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Успешно = Истина Тогда
		Комментарий = Результат.Комментарий;
		ВыполнитьЗадачу(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВтораяЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Булево") И Результат = Истина Тогда
		ВыполнитьЗадачу(2);
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Успешно = Истина Тогда
		Комментарий = Результат.Комментарий;
		ВыполнитьЗадачу(2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(НомерКнопки)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуЗавершение", ЭтотОбъект, НомерКнопки);
	
	Если ФактическийИсполнительЗадач = "userChoice"
			И СтрокаЗадачи.ИсполнительТип = "DMUser"
			И СтрокаЗадачи.ИсполнительID <> ТекущийПользовательID Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Исполнитель", СтрокаЗадачи.Исполнитель);
		ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИсполнителяЗадачи",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе // без вопроса
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ФактическийИсполнительЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуЗавершение(ВыбранныйИсполнитель, НомерКнопки) Экспорт
	
	Если ВыбранныйИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	ПредметСсылка = Неопределено;
	
	Если ЗаписатьЗадачу(
			СтрокаЗадачи.ЗадачаТип,
			СтрокаЗадачи.ЗадачаID,
			Комментарий,
			Истина,
			НомерКнопки,
			СтрокаЗадачи.Предметы,
			ВыбранныйИсполнитель,
			СтрокаЗадачи.РезультатID,
			ПредметСсылка) Тогда
		
		Если ЗначениеЗаполнено(ПредметСсылка) Тогда
			ОповеститьОбИзменении(ПредметСсылка);
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("name, ID, type",
			СтрокаЗадачи.Задача, СтрокаЗадачи.ЗадачаID, СтрокаЗадачи.ЗадачаТип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтотОбъект);
		Если ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
			ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
			ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
				ПараметрыФормы,
				СтрокаЗадачи.ЗадачаID);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗадачу(Тип, Идентификатор, Комментарий, ВыполнитьЗадачу, НомерКнопки, Знач ПредметыЗадачи,
		ВыбранныйИсполнитель, РезультатID, ПредметСсылка)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Попытка
		Задача = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(Прокси, Тип, Идентификатор);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ПроцессXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ПроцессТип);
	ПроцессXDTO.name = Процесс;
	ПроцессXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ПроцессID,
		ПроцессТип);
	Задача.parentBusinessProcess = ПроцессXDTO;
	
	ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, Комментарий, НомерКнопки, РезультатID);
	
	Задача.executed = Задача.executed Или ВыполнитьЗадачу;
	Задача.endDate = ТекущаяДатаСеанса();
	Задача.executionComment = Комментарий;
	
	Если ВыбранныйИсполнитель = "currentUser" Тогда
		ДанныеИсполнитель = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			ТекущийПользовательID,
			ТекущийПользовательТип,
			ТекущийПользователь);
		Задача.performer = ИнтеграцияС1СДокументооборот.УчастникЗадач(
			Прокси,
			ДанныеИсполнитель);
	КонецЕсли;
	
	РезультатЗаписи = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, Задача);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатЗаписи, "DMError") Тогда
		Возврат Ложь;
	Иначе
		Если Тип = "DMBusinessProcessApprovalTaskApproval" И ВыполнитьЗадачу Тогда
			НовоеСостояние = Неопределено;
			Если НомерКнопки = 3 Тогда
				НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован;
			Иначе
				ДанныеПроцесса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
					Прокси,
					Задача.parentBusinessProcess.objectID.type,
					Задача.parentBusinessProcess.objectID.ID,
					"completed");
				Если ДанныеПроцесса.completed = Истина Тогда
					НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован;
				КонецЕсли;
			КонецЕсли;
			Если НовоеСостояние <> Неопределено Тогда
				Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
					Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной") //@NON-NLS-1
							И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.Тип) Тогда
						ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПриИзмененииСостоянияСогласования(
							СтрокаПредмета.ID,
							СтрокаПредмета.Тип,
							НовоеСостояние,
							Ложь,
							ПредметСсылка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПредметыЗадачи(ПараметрыЗадачи, Знач ПредметыЗадачи)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Задача = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		ПараметрыЗадачи.Тип,
		ПараметрыЗадачи.ID);
	
	Задача.executionComment = ПараметрыЗадачи.Комментарий;
	
	Если ПараметрыЗадачи.ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		
		Задача.files.Очистить();
		
		Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
			
			file = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, СтрокаПредмета.Тип);
			file.name = СтрокаПредмета.Наименование;
			file.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				СтрокаПредмета.ID,
				СтрокаПредмета.Тип);
			
			Задача.files.Добавить(file);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыЗадачи.ДоступнаМультипредметность Тогда
		
		targetCollection = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси, "DMBusinessProcessTaskTargetCollection");
		ОписаниеПредмета = targetCollection.items; // СписокXDTO
		
		Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
			
			target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMBusinessProcessTaskTarget");
			
			target.name = СтрокаПредмета.ИмяПредмета;
			target.allowDeletion = Истина;
			
			target.role = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMBusinessProcessTargetRole");
			target.role.name = СтрокаПредмета.РольПредмета;
			target.role.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				СтрокаПредмета.РольПредмета,
				"DMBusinessProcessTargetRole");
			
			target.target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, СтрокаПредмета.Тип);
			target.target.name = СтрокаПредмета.Наименование;
			target.target.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				СтрокаПредмета.ID,
				СтрокаПредмета.Тип);
			
			ОписаниеПредмета.Добавить(target);
			
		КонецЦикла;
		
		Задача.targets = targetCollection;
		
	КонецЕсли;
	
	РезультатЗаписи = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, Задача);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, РезультатЗаписи);
	
	ОбновитьСписокЗадачЧастичноНаСервере();
	
КонецПроцедуры

// Заполняет свойства XDTO объекта задачи по ее типу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Задача - ОбъектXDTO - объект XDTO задачи.
//   Комментарий - Строка
//   НомерКнопки - Число
//   РезультатID - Строка
//
&НаСервере
Процедура ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, Комментарий, НомерКнопки, РезультатID)
	
	ИмяТипа = Задача.Тип().Имя;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMApprovalResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = НСтр("ru = 'Согласовано'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"Согласовано", //@NON-NLS-1
				"DMApprovalResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = НСтр("ru = 'Согласовано с замечаниями'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"СогласованоСЗамечаниями", //@NON-NLS-1
				"DMApprovalResult");
		ИначеЕсли НомерКнопки = 3 Тогда
			Ответ.name = НСтр("ru = 'Не согласовано'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"НеСогласовано", //@NON-NLS-1
				"DMApprovalResult");
		КонецЕсли;
		Задача.approvalResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMConfirmationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = НСтр("ru = 'Утверждено'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"Утверждено", //@NON-NLS-1
				"DMConfirmationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = НСтр("ru = 'Не утверждено'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"НеУтверждено", //@NON-NLS-1
				"DMConfirmationResult");
		КонецЕсли;
		Задача.confirmationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskRegistration" Тогда
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMRegistrationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = НСтр("ru = 'Зарегистрировано'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"Зарегистрировано", //@NON-NLS-1
				"DMRegistrationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = НСтр("ru = 'Не зарегистрировано'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"НеЗарегистрировано", //@NON-NLS-1
				"DMRegistrationResult");
		КонецЕсли;
		Задача.registrationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		Если НомерКнопки = 2 Тогда
			Для Каждого РезультатПроверки Из Задача.checkResults Цикл
				РезультатПроверки.returned = Истина;
				РезультатПроверки.checkComment = Комментарий;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		Задача.resolution = Комментарий;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskInvitation" Тогда
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMInvitationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = НСтр("ru = 'Принято'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"Принято", //@NON-NLS-1
				"DMInvitationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = НСтр("ru = 'Не принято'");
			Ответ.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				"НеПринято", //@NON-NLS-1
				"DMInvitationResult");
		КонецЕсли;
		Задача.invitationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskAcquaint" Тогда
		
		Если РезультатID = "НеПринятоОбязательнымиУчастниками" //@NON-NLS-1
				Или РезультатID = "НеПринятоВсемиУчастниками" Тогда //@NON-NLS-1
			
			Если НомерКнопки = 1 Тогда
				Задача.invitationReturned = Истина;
			КонецЕсли;
			
		Иначе
			
			Если НомерКнопки = 1 Тогда
				Задача.invitationAccepted = Истина;
			ИначеЕсли НомерКнопки = 2 Тогда
				Задача.invitationReturned = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskQuestion" Тогда
		Если НомерКнопки = 1 Тогда
			Задача.executionMark = "ExecutedPositive";
			Если Задача.parentBusinessProcess.Свойства().Получить("newDueDate") <> Неопределено Тогда
				Задача.parentBusinessProcess.newDueDate = НовыйСрок;
			КонецЕсли;
		ИначеЕсли НомерКнопки = 2 Тогда
			Задача.executionMark = "ExecutedNegative";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса)
			Или ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.1.1") Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюОНедоступностиВыполненияЗадачи()
	
	Элементы.ГруппаИсполнениеСтраницыКнопок.ТекущаяСтраница = Элементы.ГруппаИсполнениеНоль;
	Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
	Элементы.ДекорацияВнимание2.Видимость = Истина;
	
	Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru='Выполнение задач такого типа не поддерживается в данной версии 1С:Документооборота.'");
	Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	
КонецПроцедуры

#КонецОбласти