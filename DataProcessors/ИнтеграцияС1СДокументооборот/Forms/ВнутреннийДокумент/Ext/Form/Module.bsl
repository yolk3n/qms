#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступенФункционалКОРП = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.0.0.0.CORP");
	
	ID = Параметры.ID;
	Тип = Параметры.type;
	Если Не ЗначениеЗаполнено(Тип) Тогда
		Тип = "DMInternalDocument";
	КонецЕсли;
	Параметры.Свойство("ВнешнийОбъект", ВнешнийОбъект);
	
	СокращенноеНаименованиеКонфигурации = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	
	ТекущийПользовательИСотрудники =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
	ТекущийПользовательXDTO = ТекущийПользовательИСотрудники[0];
	ТекущийПользовательДО = ТекущийПользовательXDTO.name;
	ТекущийПользовательДОID = ТекущийПользовательXDTO.objectID.ID;
	ТекущийПользовательДОТип = ТекущийПользовательXDTO.objectID.type;
	
	// Считаем данные документа.
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Если ЗначениеЗаполнено(ID) И ЗначениеЗаполнено(Тип) Тогда
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		СписокОбъектов = Запрос.objectIDs; // СписокXDTO
		
		ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
		СписокОбъектов.Добавить(ОбъектИд);
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат.objects[0];
		Если Не ЗначениеЗаполнено(ВнешнийОбъект) Тогда
			ВнешниеОбъекты = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкиПоВнешнимОбъектам(ОбъектXDTO);
			Если ВнешниеОбъекты.Количество() <> 0 Тогда
				ВнешнийОбъект = ВнешниеОбъекты[0];
			КонецЕсли;
		КонецЕсли;
		
	Иначе // новый документ
		
		Модифицированность = Истина;
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = Тип;
		
		Если ЗначениеЗаполнено(Параметры.Правило) Тогда
			
			РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Параметры.Правило,
				"НеСоздаватьСвязиПоСсылкам, Шаблон, ШаблонID, ШаблонТип");
			
			// Заполнение документов по шаблонам.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
				
				Если ЗначениеЗаполнено(РеквизитыПравила.ШаблонID) Тогда
					
					ШаблонXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
						Прокси,
						РеквизитыПравила.ШаблонТип);
					ШаблонXDTO.name = РеквизитыПравила.Шаблон;
					ШаблонXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
						Прокси,
						РеквизитыПравила.ШаблонID,
						РеквизитыПравила.ШаблонТип);
					
					Запрос.dataSource = ШаблонXDTO;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // создается пустой документ
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРеквизиты;
			
		КонецЕсли;
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат;
		
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
		Элементы.ГруппаКонтрагент.Заголовок = НСтр("ru = 'Корреспондент'");
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Корреспондент'");
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.28.12") Тогда
		Элементы.Подписал.Видимость = Ложь;
		Элементы.ПодписалОтКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьСвязанныеДокументы1СДокументооборота =
		Константы.ИспользоватьСвязанныеДокументы1СДокументооборота.Получить();
	
	// Заполним форму данными документа.
	ПрочитатьОбъектВФорму(ОбъектXDTO);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокФайлов(
		ОбъектXDTO.files, Файлы, Элементы.ФайлыНаименование);
	
	// Обработаем резолюции.
	Если ОбъектXDTO.Свойства().Получить("resolutions") <> Неопределено И ОбъектXDTO.resolutions.Количество() <> 0 Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьПредставлениеРезолюций(
			ОбъектXDTO.resolutions,
			РезолюцииHTMLПредставление,
			Элементы.СтраницаРезолюции);
	Иначе
		Элементы.СтраницаРезолюции.Видимость = Ложь;
	КонецЕсли;
	
	// Обработаем визы.
	Если ОбъектXDTO.Свойства().Получить("visas") <> Неопределено И ОбъектXDTO.visas.Количество() <> 0 Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьВизыСогласования(
			ОбъектXDTO.visas,
			ВизыСогласования,
			Элементы.СтраницаВизы);
	Иначе
		Элементы.СтраницаВизы.Видимость = Ложь;
	КонецЕсли;
	
	НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
	
	Элементы.ЗаполнитьФайлДаннымиДокумента.Видимость = НастройкиДО.ИспользоватьАвтозаполнениеФайлов;
	
	// Применим настройки использования ЭП в ДО и в ИС.
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Ложь Тогда
		Элементы.ФайлыНомерКартинкиПодписанЗашифрован.Видимость = Ложь;
		Элементы.СтраницаЭП.Видимость = Ложь;
		Элементы.ГруппаКомандыЭП.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей(ОбъектXDTO.signatures, ОбъектXDTO.files);
		Если ОбъектXDTO.Установлено("keyPropertiesValue") Тогда
			АдресСлепкаДокумента = ПоместитьВоВременноеХранилище(
				ОбъектXDTO.keyPropertiesValue, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Ложь
			Или ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		Элементы.Подписать.Видимость = Ложь;
		Элементы.ДобавитьЭПИзФайла.Видимость = Ложь;
		Элементы.ФормаПодписатьДокумент.Видимость = Ложь;
	КонецЕсли;
	
	// Заполним документ по связанному объекту ИС.
	Если Не ЗначениеЗаполнено(ID)
			И ЗначениеЗаполнено(ВнешнийОбъект)
			И ЗначениеЗаполнено(Параметры.Правило) Тогда
		
		Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьФормуОбъектаДОПоПравилу(
			ВнешнийОбъект, ЭтотОбъект, Параметры.Правило);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьФормуИзПотребителя(
			ВнешнийОбъект, ЭтотОбъект);
		
		Объекты = Новый Массив;
		Объекты.Добавить(Новый Структура("ID, Тип", ВидДокументаID, ВидДокументаТип));
		Если ОрганизацияID <> "" И ОрганизацияТип = "DMOrganization" Тогда
			Объекты.Добавить(Новый Структура("ID, Тип", ОрганизацияID, ОрганизацияТип));
		КонецЕсли;
		Для Каждого Строка Из Стороны Цикл
			Если Строка.СторонаТип = "DMCorrespondent" Тогда
				Объекты.Добавить(Новый Структура("ID, Тип", Строка.СторонаID, Строка.СторонаТип));
			КонецЕсли;
		КонецЦикла;
		ДанныеОбъектовДО = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъекты(Прокси, Объекты);
		
		Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриИзмененииВидаНаФормеДокумента(
			ЭтотОбъект,
			ДанныеОбъектовДО);
		
		Для Каждого Строка Из Стороны Цикл
			legalPrivatePersonID = "";
			Если Строка.СторонаТип = "DMCorrespondent" Тогда
				Для Каждого Элемент Из ДанныеОбъектовДО Цикл
					Если Элемент.objectID.ID = Строка.СторонаID И Элемент.objectID.type = Строка.СторонаТип Тогда
						legalPrivatePersonID = Элемент.legalPrivatePerson.objectID.ID;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьДополнительныеДанныеСторон(Строка, Строка.СторонаТип, legalPrivatePersonID);
		КонецЦикла;
		
		СрокДействияПредставление =
			ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеСрокаДействияДокумента(
				ДатаНачалаДействия,
				Бессрочный,
				ДатаОкончанияДействия,
				ПорядокПродленияID,
				ПорядокПродления);
		
		Обработки.ИнтеграцияС1СДокументооборот.УстановитьСостоянияДокумента(ЭтотОбъект, ОбъектXDTO);
		
		Если ИспользоватьСвязанныеДокументы1СДокументооборота
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("2.1.0.1")
				И Не РеквизитыПравила.НеСоздаватьСвязиПоСсылкам Тогда
			
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьСвязиНовогоДокумента(ЭтотОбъект,
				ВнешнийОбъект,
				Элементы.СтраницаСвязи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизоватьРеквизитИТЧКонтрагенты();
	НесколькоКонтрагентов = (Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	СформироватьПредставлениеСтатейДДС();
	
	// Установим видимость команды копирования файлов.
	Элементы.ЗаполнитьФайлыКопированием.Видимость = Ложь;
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЕстьХранимыеФайлыВИС(ВнешнийОбъект) Тогда
			Элементы.ЗаполнитьФайлыКопированием.Видимость = Истина;
			Элементы.ЗаполнитьФайлыКопированием.Доступность = (Файлы.Количество() = 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ТолькоПросмотр Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Хронометраж.
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Элементы.ФормаУказатьТрудозатраты.Видимость = Ложь;
		Элементы.ФормаПереключитьХронометраж.Видимость = Ложь;
	КонецЕсли;
	ДоступенЗахватФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1");
	
	ОбновитьДекорацииСвязи();
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнительнаяОбработкаФормыДокумента(
		ЭтотОбъект,
		Отказ,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
	
	ОбновитьОбзор();
	ОбновитьОтображениеСуммы();
	ОбновитьОтображениеСуммыНДС();
	ОбновитьЗаголовокСтраницыКонтрагенты();
	ОбновитьЗаголовокСтраницыТовары();
	
	УстановитьДоступностьКомандСпискаЭП();
	
	Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗакрытиеСПараметром Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстПредупреждения = "";
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
			Оповещение,
			Отказ,
			ЗавершениеРаботы,,
			ТекстПредупреждения);
		
	Иначе
		
		Отказ = Истина;
		ПодключитьОбработчикОжидания("ЗакрытьСПараметром", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл"
			И ID <> ""
			И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ОповещатьКарточкуДокумента")
			И Параметр.ОповещатьКарточкуДокумента = Истина
			И Параметр.Свойство("ВладелецФайла")
			И Параметр.ВладелецФайла = ID Тогда
		ОбновитьСписокФайловКлиент();
		ПрочитатьИОбновитьСписокПодписей();
		УстановитьДоступностьКомандСпискаЭП();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотТрудозатраты" И Источник = ID Тогда
		ВключенХронометраж = Ложь;
		ДатаНачалаХронометража = '00010101';
		УстановитьСвойстваЭлементовХронометражаСервер();
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзСпискаЗавершение" И Источник = ЭтотОбъект Тогда
		Если Параметр = "ВидДокумента" Тогда
			ПриИзмененииВидаДокумента();
			
		ИначеЕсли Параметр = "Получатель" Тогда
			Элементы.АвансовыйОтчет.Видимость = (ПолучательТип = "DMUser"
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
					ПолучательТип) = "DMUser");
			
		ИначеЕсли Параметр = "Контрагент" Тогда
			ОчиститьКонтактыДокумента();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзВыпадающегоСпискаЗавершение"
			И Источник = ЭтотОбъект И Параметр.Реквизит = "СтавкаНДС" Тогда
		ПриИзмененииТоварыСтавкаНДС(Элементы.Товары.ТекущиеДанные);
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзВыпадающегоСпискаЗавершение"
			И Источник = ЭтотОбъект И Параметр.Реквизит = "Организация" Тогда
		ДанныеОрганизации = ДанныеОрганизации(ОрганизацияТип, ОрганизацияID);
		ОбновитьВидимостьНДС(ДанныеОрганизации);
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" И Параметр.ID = ID Тогда
		ВнешнийОбъект = Параметр.Объект;
		ОбновитьДекорацииСвязи();
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" И Параметр.ID = ID Тогда
		ВнешнийОбъект = Неопределено;
		ОбновитьДекорацииСвязи();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		Для Каждого Предмет Из Параметр.Предметы Цикл
			Если Предмет.ID = ID Тогда
				ОбновитьСостояние();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотДокумент" Тогда
		Для Каждого СтрокаТипаСвязи Из ДеревоСвязей.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаДокумента Из СтрокаТипаСвязи.ПолучитьЭлементы() Цикл
				Если СтрокаДокумента.Ссылка = Параметр.ВнешнийОбъект
						И Не ЗначениеЗаполнено(СтрокаДокумента.ID) Тогда
					СтрокаДокумента.ID = Параметр.ID;
					СтрокаДокумента.Тип = Параметр.type;
					СтрокаДокумента.Заголовок = Параметр.name;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ОбновитьДекорацииСвязи();
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение" И Источник = ЭтотОбъект Тогда
		Если Параметр.Реквизит = "Сторона" Тогда
			ОчиститьКонтактыТЧСтороны();
			ЗаполнитьДополнительныеДанныеСторон(
				Параметр.Данные,
				Параметр.Результат.РеквизитТип,
				?(Параметр.Результат.Свойство("legalPrivatePersonID"),
					Параметр.Результат.legalPrivatePersonID,
					""));
			ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
			
		ИначеЕсли Параметр.Реквизит = "Номенклатура" Тогда
			ДанныеНоменклатуры = ДанныеНоменклатуры(Параметр.Данные.НоменклатураТип, Параметр.Данные.НоменклатураID);
			ЗаполнитьДополнительныеДанныеНоменклатуры(ДанныеНоменклатуры, Параметр.Данные);
			
		ИначеЕсли Параметр.Реквизит = "Контрагент" Тогда
			ОчиститьКонтактыТЧКонтрагенты();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьОбзор" И Источник = ЭтотОбъект Тогда
		ОбновитьОбзор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

///////////////////////////////////////////////////////////////////////////////////////////////////
// Общие

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьОбзор();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязьОбъектНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязьСоздатьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		ЗаписатьОбъект();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязьСоздатьНажатиеЗавершение", ЭтотОбъект);
	Если ПравилаЗаполнения.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПравилаЗаполнения[0]);
	Иначе
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПравилаЗаполнения, Элементы.СвязьСоздать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязьВыбратьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		ЗаписатьОбъект();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязьВыбратьНажатиеЗавершение", ЭтотОбъект);
	Если ПравилаЗаполнения.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПравилаЗаполнения[0]);
	Иначе
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПравилаЗаполнения, Элементы.СвязьВыбрать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязьОчиститьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ВнешнийОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СвязьОчиститьНажатиеЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Очистить соответствие для
					|%1?'"), Строка(ВнешнийОбъект));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не очищать'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Обзор

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Или ID = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда
		
		НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаПоля);
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 5) = "dmil:" Тогда
		
		НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 6);
		РазделеннаяСсылка = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НавигационнаяСсылкаПоля, ":");
		ТипОбъекта = РазделеннаяСсылка[0];
		ИдентификаторОбъекта = РазделеннаяСсылка[1];
		
		Если РазделеннаяСсылка.Количество() = 2 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
				ТипОбъекта,
				ИдентификаторОбъекта,
				Элемент);
			
		ИначеЕсли РазделеннаяСсылка.Количество() = 3 Тогда
			ИмяРеквизита = РазделеннаяСсылка[2];
			Если ИмяРеквизита = "status" Тогда
				ИнтеграцияС1СДокументооборотКлиент.ОткрытьСостоянияДокумента(
					ЭтотОбъект,
					Элементы.Состояние.ТолькоПросмотр);
			ИначеЕсли ИмяРеквизита = "term" Тогда
				ИнтеграцияС1СДокументооборотКлиент.ОткрытьСрокДействияДокумента(
					ЭтотОбъект,
					Элементы.СрокДействияПредставление.ТолькоПросмотр);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Реквизиты

///////////////////////////////////////////////////////////////////////////////////////////////////
// ВидДокумента

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		"DMInternalDocumentType", "ВидДокумента", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ВидДокумента", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMInternalDocumentType", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMInternalDocumentType", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ВидДокумента", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
			
			ПриИзмененииВидаДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Организация

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка(
		"DMOrganization", "Организация", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Организация", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
	ОбновитьВидимостьНДС(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMOrganization", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	ОрганизацияID = "";
	ОрганизацияТип = "";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMOrganization", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Организация", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
			
			ОбновитьВидимостьНДС(ДанныеВыбора[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОрганизации(ОрганизацияТип, ОрганизацияID)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДанныеОрганизации = Новый Структура();
	
	ОрганизацияXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		ОрганизацияТип,
		ОрганизацияID);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОрганизацияXDTO, "VATpayer") Тогда
		ДанныеОрганизации.Вставить("VATpayer", ОрганизацияXDTO.VATpayer);
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьНДС(ОрганизацияЗначение)
	
	Если ОрганизацияЗначение.Свойство("VATpayer") Тогда
		УчитыватьНДС = ОрганизацияЗначение.VATpayer;
	Иначе
		УчитыватьНДС = Истина;
	КонецЕсли;
	
	Элементы.СуммаНДС.Видимость = Элементы.Сумма.Видимость И УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = Элементы.Сумма.Видимость И УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = Элементы.Сумма.Видимость И УчитыватьНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Организация = "";
	ОрганизацияID = "";
	ОрганизацияТип = "";
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подписал

&НаКлиенте
Процедура ПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Подписал", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Подписал", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Подписал", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подразделение

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMSubdivision", "Подразделение", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Подразделение", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMSubdivision", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	ПодразделениеID = "";
	ПодразделениеТип = "";
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMSubdivision", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Подразделение", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Подразделение = "";
	ПодразделениеID = "";
	ПодразделениеТип = "";
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ГрифДоступа

&НаКлиенте
Процедура ГрифДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка(
		"DMAccessLevel", "ГрифДоступа", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ГрифДоступа", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMAccessLevel", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMAccessLevel", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ГрифДоступа", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ВопросДеятельности

&НаКлиенте
Процедура ВопросДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		"DMActivityMatter", "ВопросДеятельности", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ВопросДеятельности", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMActivityMatter", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMActivityMatter", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ВопросДеятельности", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Проект

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMProject", "Проект", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Проект", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProject", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProject", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Проект", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Состояние

&НаКлиенте
Процедура СостояниеСписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьСостоянияДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка(
		"DMDocumentStatus", "Состояние", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Состояние", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMDocumentStatus", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMDocumentStatus", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Состояние", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Ответственный

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Ответственный", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Ответственный", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		 Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Ответственный", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Хранение

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьНоменклатуруДел(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НоменклатураДел = "";
	НоменклатураДелID = "";
	НоменклатураДелТип = "";
	НоменклатураДелГод = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьДелоХраненияДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Дело = "";
	ДелоID = "";
	ДелоТип = "";
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Валюта

&НаКлиенте
Процедура ВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMCurrency", "Валюта", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Валюта", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCurrency", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCurrency", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Валюта", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Состав документа

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьСоставДокумента(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Адресат

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Адресат", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Адресат", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		 Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Адресат", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подготовил

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Подготовил", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Подготовил", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Подготовил", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Получатель

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	Получатель = "";
	ПолучательID = "";
	ПолучательТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Если Получатель = "" Тогда
		ПолучательID = "";
		ПолучательТип = "";
	КонецЕсли;
	
	Элементы.АвансовыйОтчет.Видимость = (ПолучательТип = "DMUser"
		Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(ПолучательТип) = "DMUser");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПолучательID) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(ПолучательТип, ПолучательID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Получатель", ВыбранноеЗначение.Значение, СтандартнаяОбработка, ЭтотОбъект);
	
	Элементы.АвансовыйОтчет.Видимость = (ПолучательТип = "DMUser"
		Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(ПолучательТип) = "DMUser");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборПолучателя(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборПолучателя(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Получатель", ДанныеВыбора[0].Значение.Значение, СтандартнаяОбработка, ЭтотОбъект);
			Элементы.АвансовыйОтчет.Видимость = (ПолучательТип = "DMUser"
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(ПолучательТип) = "DMUser");
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Новый СписокЗначений;
	
	СписокДоступныхТипов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMUser", НСтр("ru = 'Пользователь'")));
	СписокДоступныхТипов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMCorrespondent", НСтр("ru = 'Контрагент'")));
	
	ЗаголовокФормы = НСтр("ru = 'Тип получателя'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы",
		СписокДоступныхТипов, ЗаголовокФормы);
	Оповещение = Новый ОписаниеОповещения("ПолучательНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОдногоТипаИзСоставногоТипа",
		ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораЗавершение(ТипПолучателя, Параметры) Экспорт
	
	Если ТипПолучателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		ТипПолучателя, "Получатель", ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Контрагент

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Контрагент = "" Тогда
		КонтрагентID = "";
		КонтрагентТип = "";
		
		ОчиститьКонтактыДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект("DMCorrespondent", КонтрагентID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMCorrespondent", "Контрагент", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Контрагент", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
	ОчиститьКонтактыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Контрагент", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			ОчиститьКонтактыДокумента();
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	Иначе
		ОчиститьКонтактыДокумента();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// КонтактноеЛицо

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если КонтактноеЛицо = "" Тогда
		КонтактноеЛицоID = "";
		КонтактноеЛицоТип = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
			"DMContactPerson", "КонтактноеЛицо", ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Контрагент""'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"КонтактноеЛицо", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицо(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицо(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"КонтактноеЛицо", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подписал от контрагента

&НаКлиенте
Процедура ПодписалОтКонтрагентаПриИзменении(Элемент)
	
	Если ПодписалОтКонтрагента = "" Тогда
		ПодписалОтКонтрагентаID = "";
		ПодписалОтКонтрагентаТип = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
			"DMContactPerson", "ПодписалОтКонтрагента", ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Контрагент""'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ПодписалОтКонтрагента", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицо(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицо(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ПодписалОтКонтрагента", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Авансовый отчет

&НаКлиенте
Процедура АвансовыйОтчетОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(АвансовыйОтчетID) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект("DMInternalDocument", АвансовыйОтчетID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("АвансовыйОтчетНачалоВыбораЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеПоТипуОбъекта(
		ОповещениеПродолжения,
		"DMInternalDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетНачалоВыбораЗавершение(ВыбранныйДокумент, Параметры) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АвансовыйОтчет = ВыбранныйДокумент.РеквизитПредставление;
	АвансовыйОтчетID = ВыбранныйДокумент.РеквизитID;
	АвансовыйОтчетТип = ВыбранныйДокумент.РеквизитТип;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетОчистка(Элемент, СтандартнаяОбработка)
	
	АвансовыйОтчет = "";
	АвансовыйОтчетID = "";
	АвансовыйОтчетТип = "";
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Папка

&НаКлиенте
Процедура ПапкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(ПапкаТип, ПапкаID, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		"DMInternalDocumentFolder", "Папка", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Папка", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMInternalDocumentFolder", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMInternalDocumentFolder", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Папка", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Статьи ДДС, сумма, сумма НДС

&НаКлиенте
Процедура ПредставлениеСтатейДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтатьиДДС.Очистить();
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДДС.Очистить();
	Строка = СтатьиДДС.Добавить();
	Строка.СтатьяДДС = ВыбранноеЗначение.name;
	Строка.СтатьяДДСID = ВыбранноеЗначение.ID;
	Строка.СтатьяДДСТип = ВыбранноеЗначение.type;
	
	Строка.Сумма = Сумма;
	Строка.СуммаНДС = СуммаНДС;
	
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCashFlowItem", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCashFlowItem", ДанныеВыбора, Текст, СтандартнаяОбработка);
			
		Если ДанныеВыбора.Количество() = 1 Тогда 
				
			СтандартнаяОбработка = Истина;
			
			СтатьиДДС.Очистить();
			Строка = СтатьиДДС.Добавить();
			Строка.СтатьяДДС = ДанныеВыбора[0].Значение.name;
			Строка.СтатьяДДСID = ДанныеВыбора[0].Значение.ID;
			Строка.СтатьяДДСТип = ДанныеВыбора[0].Значение.type;
			
			Строка.Сумма = Сумма;
			Строка.СуммаНДС = СуммаНДС;
			
			СформироватьПредставлениеСтатейДДС();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ОбновитьОтображениеСуммыНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьСуммуНажатие(Элемент)
	
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// СрокДействияПредставление

&НаКлиенте
Процедура СрокДействияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьСрокДействияДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлНаЧтение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьФайл(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"), Элементы.Файлы.ТекущиеДанные.Наименование);
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить выделенные файлы на удаление?'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", Элементы.Файлы.ВыделенныеСтроки);
	Оповещение = Новый ОписаниеОповещения("ФайлыПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
	Оповещение = Новый ОписаниеОповещения("ФайлыПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокФайловПослеДобавленияФайла", ЭтотОбъект);
	Если ТипЗнч(ПараметрыОповещения.ПараметрыПеретаскивания.Значение) = Тип("Файл")
			И ПараметрыОповещения.ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДискаПеретаскиванием(
			ПараметрыОповещения.ПараметрыПеретаскивания.Значение,
			ID,
			Тип,
			УникальныйИдентификатор,
			Представление,
			ВнешнийОбъект,
			ЯвляетсяСканКопией,,
			ОписаниеОповещения);
		
	ИначеЕсли ТипЗнч(ПараметрыОповещения.ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ФайлПринятый Из ПараметрыОповещения.ПараметрыПеретаскивания.Значение Цикл
			
			Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДискаПеретаскиванием(
					ФайлПринятый,
					ID,
					Тип,
					УникальныйИдентификатор,
					Представление,
					ВнешнийОбъект,
					ЯвляетсяСканКопией,,
					ОписаниеОповещения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойства

&НаКлиенте
Процедура СвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыбратьЗначениеДополнительногоРеквизита(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
		ТипXDTO =ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
		Если ТипXDTO = "integer" Тогда
			ТекущиеДанные.Значение = 0;
		ИначеЕсли ТипXDTO = "boolean" Тогда
			ТекущиеДанные.Значение = Ложь;
		ИначеЕсли ТипXDTO = "date" Тогда
			ТекущиеДанные.Значение = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer"
		Или ТипXDTO = "boolean"
		Или ТипXDTO = "date"
		Или ТипXDTO = "string" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("ID", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer" 
		Или ТипXDTO = "boolean" 
		Или ТипXDTO = "string" 
		Или ТипXDTO = "date" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("ID", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
	Если ДанныеВыбора.Количество() = 1 Тогда 
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
			"Значение", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Значение", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Свойства.ТекущиеДанные.Значение = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеID = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеТип = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСвязей

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	ОткрытьСвязанныеДанныеСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Строка = Элемент.ТекущиеДанные;
	
	ДоступностьОткрытия = 
		(Строка <> Неопределено)
		И (Строка.Тип <> "DMRelationType");
	ДоступностьУдаления = ДоступностьОткрытия
		И (Строка.Тип <> "DMFile");
		
	Элементы.ДеревоСвязейОткрыть.Доступность = ДоступностьОткрытия;
	Элементы.ДеревоСвязейОткрытьКонтекст.Доступность = ДоступностьОткрытия;
	Элементы.ДеревоСвязейУдалить.Доступность = ДоступностьУдаления;
	Элементы.ДеревоСвязейУдалитьКонтекст.Доступность = ДоступностьОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.Тип = "DMRelationType"
		Или ТекущиеДанные.Тип = "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьУдалениеСвязиЗавершение", ЭтотОбъект);
	
	СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя();
	
	ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
		ID, Тип, Представление);
	СвязанныйДокумент = Новый Структура("ID, Тип, Представление",
		ТекущиеДанные.ID, ТекущиеДанные.Тип, ТекущиеДанные.Заголовок);
	ТипСвязи = Новый Структура("ID, Тип, Представление",
		СтрокаТипаСвязи.ID, СтрокаТипаСвязи.Тип, СтрокаТипаСвязи.Заголовок);
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьУдалениеСвязи(
		ИсходныйДокумент,
		СвязанныйДокумент,
		ТипСвязи,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВизыСогласования

&НаКлиенте
Процедура ВизыСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьВизуСогласования(
		ЭтотОбъект,
		Элементы.ВизыСогласования.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	СуммаНДС = Товары.Итог("СуммаНДС");
	ОбновитьОтображениеСуммыНДС();
	
	Сумма = Товары.Итог("Сумма");
	ОбновитьОтображениеСуммы();
	
	ОбновитьЗаголовокСтраницыТовары();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Номенклатура

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
		"DMProduct", "Номенклатура", Элемент.Родитель.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProduct", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMProduct", ДанныеВыбора, Текст, СтандартнаяОбработка);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ВыборНоменклатуры(ДанныеВыбора[0].Значение, СтандартнаяОбработка, Элемент);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборНоменклатуры(ВыбранноеЗначение, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Количество, Цена, Сумма

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличество(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииТоварыЦена(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииТоварыСуммаНДС(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииТоварыСумма(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// Единица измерения

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
		"DMMeasurementUnit", "ЕдиницаИзмерения", Элемент.Родитель.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMMeasurementUnit", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора("DMMeasurementUnit", ДанныеВыбора, Текст, СтандартнаяОбработка);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ЕдиницаИзмерения", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ЕдиницаИзмерения", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Ставка НДС

&НаКлиенте
Процедура ТоварыСтавкаНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка(
		"DMVATRate", "СтавкаНДС", ЭтотОбъект,, Истина, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора("DMVATRate", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора("DMVATRate", ДанныеВыбора, Текст, СтандартнаяОбработка);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"СтавкаНДС", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
			СтандартнаяОбработка = Истина;
			
			ПриИзмененииТоварыСтавкаНДС(Элемент.Родитель.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"СтавкаНДС", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
	ПриИзмененииТоварыСтавкаНДС(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииТоварыСтавкаНДС(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтороны

&НаКлиенте
Процедура СтороныПриИзменении(Элемент)
	
	ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользовательПодписант = (ТекущиеДанные.ПодписалID = ТекущийПользовательДОID)
		И (ТекущиеДанные.ПодписалТип = ТекущийПользовательДОТип);
	ТекущийПользовательУстановилПодпись = (ТекущиеДанные.УстановилID = ТекущийПользовательДОID)
		И (ТекущиеДанные.УстановилТип = ТекущийПользовательДОТип);
	
	Если ТекущиеДанные.СторонаТип = "DMOrganization"
		И ТекущиеДанные.Подписан = Истина
		И ЗначениеЗаполнено(ТекущиеДанные.Подписал)
		И ЗначениеЗаполнено(ТекущиеДанные.Установил)
		И (Не ТекущийПользовательПодписант И Не ТекущийПользовательУстановилПодпись) Тогда
			Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Сторона

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Новый СписокЗначений;
	
	СписокДоступныхТипов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMOrganization", НСтр("ru = 'Организация'")));
	СписокДоступныхТипов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMCorrespondent", НСтр("ru = 'Контрагент'")));
	
	ЗаголовокФормы = НСтр("ru = 'Тип стороны'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы",
		СписокДоступныхТипов, ЗаголовокФормы);
	Оповещение = Новый ОписаниеОповещения("СтороныСторонаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОдногоТипаИзСоставногоТипа",
		ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбораЗавершение(ТипСтороны, Параметры) Экспорт
	
	Если ТипСтороны = Неопределено Или Элементы.Стороны.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
		ТипСтороны, "Сторона", Элементы.Стороны.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Сторона", ДанныеВыбора[0].Значение.Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
			ОчиститьКонтактыТЧСтороны();
			ЗаполнитьДополнительныеДанныеСторон(
				Элементы.Стороны.ТекущиеДанные,
				ДанныеВыбора[0].Значение.Значение.type,
				ДанныеВыбора[0].Значение.Значение.legalPrivatePersonID);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	Иначе
		ОчиститьКонтактыТЧСтороны();
	КонецЕсли;
	ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьКонтактыТЧСтороны();
	ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Сторона", ВыбранноеЗначение.Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
	
	ОчиститьКонтактыТЧСтороны();
	ЗаполнитьДополнительныеДанныеСторон(
		Элементы.Стороны.ТекущиеДанные,
		ВыбранноеЗначение.Значение.type,
		ВыбранноеЗначение.Значение.legalPrivatePersonID);
	ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Контактное лицо

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СторонаТип = "DMOrganization" Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMUser", "КонтактноеЛицо", Элементы.Стороны.ТекущиеДанные, ЭтотОбъект);
		
	ИначеЕсли ТекущиеДанные.СторонаТип = "DMCorrespondent" Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.СторонаID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMContactPerson", "КонтактноеЛицо", ТекущиеДанные, ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сторона""'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"КонтактноеЛицо", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"КонтактноеЛицо", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Наименование стороны

&НаКлиенте
Процедура СтороныНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
		"DMPartyName", "Наименование", Элементы.Стороны.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Наименование", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныНаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMPartyName", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныНаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMPartyName", ДанныеВыбора, Текст, СтандартнаяОбработка);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Наименование", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подписал

&НаКлиенте
Процедура СтороныПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СторонаТип = "DMOrganization" Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMUser", "Подписал", Элементы.Стороны.ТекущиеДанные, ЭтотОбъект);
		
	ИначеЕсли ТекущиеДанные.СторонаТип = "DMCorrespondent" Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.СторонаID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMContactPerson", "Подписал", ТекущиеДанные, ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сторона""'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Подписал", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Подписал", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент.Родитель);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПриИзменении(Элемент)
	
	ОбновитьЗаголовокСтраницыКонтрагенты();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Контрагент

&НаКлиенте
Процедура КонтрагентыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
		"DMCorrespondent", "Контрагент", Элементы.Контрагенты.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Контрагент", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
	ОчиститьКонтактыТЧКонтрагенты();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Контрагент", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
			ОчиститьКонтактыТЧКонтрагенты();
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	Иначе
		ОчиститьКонтактыТЧКонтрагенты();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Подписал от контрагента

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"ПодписалОтКонтрагента", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧКонтрагенты(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧКонтрагенты(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"ПодписалОтКонтрагента", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMContactPerson", "ПодписалОтКонтрагента", ТекущиеДанные, ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Контрагент""'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Контактное лицо

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"КонтактноеЛицо", ВыбранноеЗначение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧКонтрагенты(СтандартнаяОбработка, ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		АвтоПодборКонтактноеЛицоТЧКонтрагенты(СтандартнаяОбработка, ДанныеВыбора, Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"КонтактноеЛицо", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСпискаВТаблице(
			"DMContactPerson", "КонтактноеЛицо", ТекущиеДанные, ЭтотОбъект, Отбор);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Контрагент""'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////////////////////
// Общие

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ЗаписатьИВозможноЗакрыть(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИВозможноЗакрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьЗавершение", ЭтотОбъект);
	
	Если ОграничиватьДоступностьПолей Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'После регистрации документ станет недоступным для изменения.
			|Продолжить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
			Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Источник", Представление);
	ПараметрыФормы.Вставить("ИсточникID", ID);
	ПараметрыФормы.Вставить("ИсточникТип", Тип);
	
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		ПараметрыФормы.Вставить("ВнешнийОбъект", ВнешнийОбъект);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	НуженДиалог = Истина;
	ДлительностьРаботы = 
		ИнтеграцияС1СДокументооборотКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты - детали не спрашиваем
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", Представление);
		ПараметрыФормы.Вставить("ИсточникID", ID);
		ПараметрыФормы.Вставить("ИсточникТип", Тип);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ID);
		
	Иначе // запишем молча
		
		Если ВключенХронометраж Тогда
			ПереключитьХронометражСервер();
			Если ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
				Состояние(Текст);
			КонецЕсли;
		Иначе 
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			Если АктивныеЗаписи.Количество() = 0 Тогда
				ПереключитьХронометражСервер();
				Если ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
					Состояние(Текст);
				КонецЕсли;
			Иначе
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				
				Оповещение = Новый ОписаниеОповещения(
					"ПереключитьХронометражЗавершение", ЭтотОбъект, ПараметрыОповещения);
					
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл 
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб 
						+ Запись.Источник + Символы.ПС;
				КонецЦикла;
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты
						|перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
						
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ЗначениеЗаполнено(ID) Тогда
		
		ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоОбъектуДО(ID, Тип, Наименование, ВнешнийОбъект);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("СоздатьБизнесПроцессЗавершение", ЭтотОбъект);
		ЗаписатьИВозможноЗакрыть(Ложь, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Связи

// Начинает добавление связанного документа.
&НаКлиенте
Процедура ДобавитьСвязь(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект(Ложь);
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		Условие = Новый Структура;
		Условие.Вставить("Значение", Контрагент);
		Условие.Вставить("ЗначениеID", КонтрагентID);
		Отбор.Вставить("correspondent", Условие);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияID) Тогда
		Условие = Новый Структура;
		Условие.Вставить("Значение", Организация);
		Условие.Вставить("ЗначениеID", ОрганизацияID);
		Отбор.Вставить("organization", Условие);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотКлиент.НачатьДобавлениеСвязи(
		ID, Тип, Представление,, ОписаниеОповещения, Отбор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныеДанные(Команда)
	
	Строка = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		ОткрытьСвязанныеДанныеСтроки(Строка);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы

&НаКлиенте
Процедура СоздатьФайл(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокФайловПослеДобавленияФайла", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
		ID,
		Тип,
		УникальныйИдентификатор,
		Представление,
		ВнешнийОбъект,
		ЯвляетсяСканКопией,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПечатнуюФорму(Команда)
	
	Если Не ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перед добавлением печатной формы нужно связать
				|внутренний документ с объектом %1'"), СокращенноеНаименованиеКонфигурации);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектИС", ВнешнийОбъект);
	ПараметрыФормы.Вставить("ИдентификаторОбъектаДО", ID);
	ПараметрыФормы.Вставить("ТипОбъектаДО", Тип);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеПечатнойФормыЗавершение", ЭтотОбъект);
	
	ФормаДобавления = ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ДобавлениеПечатнойФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Если ФормаДобавления = Неопределено Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не имеет печатных форм.'"), Строка(ВнешнийОбъект));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлыКопированием(Команда)
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не заполнять'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФайлыКопированиемЗавершение", ЭтотОбъект);
	ТекстВопроса =  НСтр("ru = 'Заполнить файлы копированием из присоединенных файлов?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНаЧтение(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляРедактирования(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			Ложь,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВыделенныхФайлов(
		Файлы,
		Элементы.Файлы.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			МестноеВремя(ТекущиеДанные.ДатаМодификацииУниверсальная),
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьИзмененияРедактируемогоФайла(
			ТекущиеДанные.ID,
			ТекущиеДанные.Наименование,
			ТекущиеДанные.Расширение,
			УникальныйИдентификатор,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактированиеФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандыРедактированияЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
			ТекущиеДанные.ID,
			ОписаниеОповещения,,
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлДаннымиДокумента(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьПоляФайлаДаннымиВладельца(
			ТекущиеДанные.ID);
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'");
		ПоказатьПредупреждение(, Текст);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы (ЭП)

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ЭтотОбъект, Неопределено);
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьИВозможноЗакрыть(Ложь, Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ИмяФайла = ТекущиеДанные.Наименование;
	Описание = ТекущиеДанные.Описание;
	Редактируется = ТекущиеДанные.Редактируется;
	Зашифрован = ТекущиеДанные.Зашифрован;
	
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		ДеревоПодписей,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПодписатьФайл(
		ИдентификаторФайла,
		ИмяФайла,
		ID,
		Редактируется,
		Зашифрован,
		Описание,
		ДанныеПодписейФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		ДеревоПодписей,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	СвойстваФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла();
	СвойстваФайла.ИдентификаторФайла = ИдентификаторФайла;
	СвойстваФайла.ИмяФайла = ТекущиеДанные.Наименование;
	СвойстваФайла.ОписаниеФайла = ТекущиеДанные.Описание;
	СвойстваФайла.Редактируется = ТекущиеДанные.Редактируется;
	СвойстваФайла.Зашифрован = ТекущиеДанные.Зашифрован;
	СвойстваФайла.ДанныеПодписейФайла = ДанныеПодписейФайла;
	СвойстваФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	СвойстваФайла.ВладелецФайла = ID;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьДобавлениеЭПИзФайла(СвойстваФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлВместеСЭП(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	Расширение = ТекущиеДанные.Расширение;
	Имя = ТекущиеДанные.Наименование;
	Размер = ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВместеСЭП(
		ИдентификаторФайла,
		Расширение,
		Имя,
		Размер,
		ДатаМодификацииУниверсальная,
		УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ЭП

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		Оповещение = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект);
		ЗаписатьИВозможноЗакрыть(Ложь, Оповещение);
	Иначе
		УстановитьПодписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодписьНаДиск(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодпись(Команда)
	
	ВыделенныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи(
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		ДеревоПодписей);
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(ДеревоПодписей);
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодписи(
		ТаблицаПодписей,
		УникальныйИдентификатор,
		Оповещение,
		ВыделенныеПодписи,
		АдресСлепкаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсеПодписи(Команда)
	
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(ДеревоПодписей);
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодписи(
		ТаблицаПодписей,
		УникальныйИдентификатор,
		Оповещение,,
		АдресСлепкаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Счетчик = 0;
	Для Каждого ВладелецПодписи Из ДеревоПодписей.ПолучитьЭлементы() Цикл
		Для Каждого Подпись Из ВладелецПодписи.ПолучитьЭлементы() Цикл
			ЗаполнитьЗначенияСвойств(
				Подпись,
				Результат[Счетчик],
				"Неверна, Статус, КомуВыданСертификатИСтатус, ПодписьВерна");
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	ВыделенныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи(
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		ДеревоПодписей);
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(ДеревоПодписей);
	
	Оповещение = Новый ОписаниеОповещения("УдалитьПодписьЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.УдалитьПодписи(
		ВыделенныеПодписи,
		ТаблицаПодписей,
		ID,
		Оповещение,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Завершает удаление подписи после подтверждения пользователя.
//
&НаКлиенте
Процедура УдалитьПодписьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьИОбновитьСписокПодписей();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Контрагенты

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	ОбновитьТабличнуюЧастьКонтрагенты();
	УстановитьВидимостьКонтрагентов();

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтрагенты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = Контрагенты.Количество();
	Для Инд = 1 По КоличествоКонтрагентов Цикл
		Строка = Контрагенты[КоличествоКонтрагентов - Инд];
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда
			Контрагенты.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	КоличествоКонтрагентов = Контрагенты.Количество();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект,
		Новый Структура("КоличествоКонтрагентов", КоличествоКонтрагентов));
	
	Если КоличествоКонтрагентов > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены.
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Пока Контрагенты.Количество() > 1 Цикл
			Контрагенты.Удалить(1);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если Параметры.КоличествоКонтрагентов > 0 Тогда
		Строка = Контрагенты[0];
		Контрагент = Строка.Контрагент;
		КонтрагентID = Строка.КонтрагентID;
		КонтрагентТип = Строка.КонтрагентТип;
		КонтактноеЛицо = Строка.КонтактноеЛицо;
		КонтактноеЛицоID = Строка.КонтактноеЛицоID;
		КонтактноеЛицоТип = Строка.КонтактноеЛицоТип;
		ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
		ПодписалОтКонтрагентаID = Строка.ПодписалОтКонтрагентаID;
		ПодписалОтКонтрагентаТип = Строка.ПодписалОтКонтрагентаТип;
	Иначе
		Контрагент = "";
		КонтрагентID = "";
		КонтрагентТип = "";
		ОчиститьКонтактыДокумента();
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРеквизиты;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Закрытие и запись

// Вызывается перед закрытием после ответа пользователя на вопрос "Записать?"
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	ЗаписатьОбъект();
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	ЗакрытьСПараметром();
	
КонецПроцедуры

// Вызывается перед записью и, если нужно, задает вопрос о последствиях регистрации.
//
// Параметры:
//   ЗакрытьПослеЗаписи - Булево - Истина, если форму после записи следует закрыть.
//   ОповещениеПослеЗаписи - ОписаниеОповещения - необязательный, обработчик, вызываемый после записи.
//
&НаКлиенте
Процедура ЗаписатьИВозможноЗакрыть(ЗакрытьПослеЗаписи, ОповещениеПослеЗаписи = Неопределено)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ПараметрыОповещения.Вставить("ОповещениеПослеЗаписи", ОповещениеПослеЗаписи);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗаписатьИВозможноЗакрытьЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если ОграничиватьДоступностьПолей
			И ЗначениеЗаполнено(РегистрационныйНомер)
			И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'При записи документ будет зарегистрирован и станет недоступным для изменения.
			|Продолжить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
			Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
		
	Иначе // вопрос не нужен
		
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед записью и закрытием после ответа пользователя на вопрос "Зарегистрировать?"
//
&НаКлиенте
Процедура ЗаписатьИВозможноЗакрытьЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НесколькоКонтрагентов = Ложь Тогда
		ОбновитьТабличнуюЧастьКонтрагенты();
	КонецЕсли;
	
	ЗаписатьОбъект();
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	Если ПараметрыОповещения.ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	Если ПараметрыОповещения.ОповещениеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОповещениеПослеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Безусловно закрывает документ с передачей его описания.
//
&НаКлиенте
Процедура ЗакрытьСПараметром()
	
	Если ЗначениеЗаполнено(ID) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ID", ID);
		Результат.Вставить("type", Тип);
		Результат.Вставить("name", Представление);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	ЗакрытиеСПараметром = Истина;
	Закрыть(Результат);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Связь с объектом ИС

// Вызывается после создания объекта ИС и фиксирует созданную связь.
//
&НаКлиенте
Процедура СвязьСоздатьНажатиеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.СоздатьИнтегрированныйОбъектПоДаннымФормы(
			ЭтотОбъект, Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выбора типа объекта ИС и начинает выбор объекта.
//
&НаКлиенте
Процедура СвязьВыбратьНажатиеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено  Тогда
		ТипОбъектаИС = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Результат.Значение,
			"ТипОбъектаИС");
		Оповещение = Новый ОписаниеОповещения("СвязьВыбратьНажатиеЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму(ТипОбъектаИС + ".ФормаВыбора",, Элементы.СвязьВыбрать,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выбора объекта ИС и фиксирует созданную связь.
//
&НаКлиенте
Процедура СвязьВыбратьНажатиеЗавершениеВыбора(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
			ID,
			Тип,
			Результат,
			(Файлы.Количество() > 0));
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_ДобавлениеСвязи(ID, Тип, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после ответа на вопрос "Очистить связь?" и очищает ее.
//
&НаКлиенте
Процедура СвязьОчиститьНажатиеЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КэшВнешнийОбъект = ВнешнийОбъект;
		УдалитьСвязьНаСервере();
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_УдалениеСвязи(ID, Тип, КэшВнешнийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет связь между объектом ДО и объектом ИС.
//
&НаСервере
Процедура УдалитьСвязьНаСервере()

	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьСвязь(ID, Тип, ВнешнийОбъект);
	ВнешнийОбъект = Неопределено;
	ОбновитьДекорацииСвязи();

КонецПроцедуры

// Обновляет форму согласно состоянию связи с объектом ИС.
//
&НаСервере
Процедура ОбновитьДекорацииСвязи()
	
	ДокументЗаполнен = ЗначениеЗаполнено(ВнешнийОбъект);
	
	Элементы.СвязьОбъект.Видимость = ДокументЗаполнен;
	Элементы.СвязьОчистить.Видимость = ДокументЗаполнен;
	Элементы.СвязьВыбрать.Видимость = Не ДокументЗаполнен;
	Элементы.ГруппаСвязь.Видимость = (ID <> "");
	
	Если ДокументЗаполнен Тогда
		
		МетаданныеОбъекта = ВнешнийОбъект.Метаданные();
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
			Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеОбъекта) Тогда
			ВнешнийОбъектПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				Строка(ВнешнийОбъект), МетаданныеОбъекта.Представление());
		Иначе
			ВнешнийОбъектПредставление = Строка(ВнешнийОбъект);
		КонецЕсли;
		
	Иначе
		
		ВозможноСозданиеОбъекта = (ПравилаЗаполнения.Количество() > 0);
		
		Если ПравилаЗаполнения.Количество() = 1 Тогда
			ТекстЗаголовкаСоздать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'создать %1'"), НРег(ПравилаЗаполнения[0].Представление));
		ИначеЕсли ПравилаЗаполнения.Количество() = 0 Тогда
			Элементы.ГруппаСвязь.Видимость = Ложь;
			Возврат;
		Иначе
			ТекстЗаголовкаСоздать = НСтр("ru = 'создать...'");
		КонецЕсли;
		
		Элементы.СвязьСоздать.Заголовок = ТекстЗаголовкаСоздать;
		
	КонецЕсли;
	
	Элементы.СвязьСоздать.Видимость = Не ДокументЗаполнен И ВозможноСозданиеОбъекта;
	Элементы.СвязьИли.Видимость = Не ДокументЗаполнен И ВозможноСозданиеОбъекта;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Хронометраж и трудозатраты

// Завершает переключение хронометража после ответа на вопрос "Выключить по другим объектам?".
//
&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записи = ИнтеграцияС1СДокументооборотВызовСервера.
			ПереключитьХронометражПоОбъектамДокументооборота(ПараметрыОповещения.АктивныеЗаписи);
		
		Для Каждого Запись Из Записи Цикл
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("name", Запись.Источник);
			ПараметрыОповещения.Вставить("ID", Запись.ИсточникID);
			ПараметрыОповещения.Вставить("type", Запись.ИсточникТип);
			Оповестить("Запись_ДокументооборотТрудозатраты", ПараметрыОповещения, Запись.ИсточникID);
		КонецЦикла;
	
		ПереключитьХронометражСервер();
		Если ВключенХронометраж Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
			Состояние(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет элементы формы согласно текущему состоянию хронометража.
//
&НаСервере
Процедура УстановитьСвойстваЭлементовХронометражаСервер()
	
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьСвойстваЭлементовХронометража(
		ВключенХронометраж, Команды.ПереключитьХронометраж, Элементы.ФормаПереключитьХронометраж);
	
КонецПроцедуры

// Переключает хронометраж по текущему объекту.
//
&НаСервере
Процедура ПереключитьХронометражСервер()
	
	Обработки.ИнтеграцияС1СДокументооборот.ПереключитьХронометраж(ЭтотОбъект);
	
КонецПроцедуры

// Завершает регистрацию документа после подтверждения пользователя.
//
&НаКлиенте
Процедура ЗарегистрироватьЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
		ЗарегистрироватьНаСервере();
		ОбновитьОбзор();
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует документ и обновляет измененные этим реквизиты.
//
&НаСервере
Процедура ЗарегистрироватьНаСервере()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMInternalDocument");
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	ОбъектXDTO.name = Представление;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDocumentRegistrationRequest");
	Запрос.document = ОбъектXDTO;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитФормыИзXDTO(
		ЭтотОбъект,
		"ДатаРегистрации",
		Результат.document,
		"regDate");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитФормыИзXDTO(
		ЭтотОбъект,
		"РегистрационныйНомер",
		Результат.document,
		"regNumber");
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитФормыИзXDTO(
		ЭтотОбъект,
		"Состояние",
		Результат.document,
		"status");
	
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьСостоянияДокумента(ЭтотОбъект, Результат.document);
	Представление = Результат.document.name;
	
	// доступность по состоянию
	УстановитьДоступностьПоСостоянию(Результат.document);
	УстановитьДоступностьПоЭП(Результат.document);
	
	НачальныйРегистрационныйНомер = РегистрационныйНомер;
	НачальнаяДатаРегистрации = ДатаРегистрации;
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьДоступностьРегистрации(
		ЭтотОбъект,
		Результат.document);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы

// Завершает удаление файла после подтверждения пользователя.
//
&НаКлиенте
Процедура ФайлыПередУдалениемЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдаление(ПараметрыОповещения.ВыделенныеСтроки);
		ОбновитьСписокФайловКлиент();
		УстановитьДоступностьКомандСпискаЭП();
	КонецЕсли; 
	
КонецПроцедуры

// Завершает копирование файлов из общей папки после подтверждения пользователя.
//
&НаКлиенте
Процедура ЗаполнитьФайлыКопированиемЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет заполнение файлов копированием из присоединенных файлов...'"));
	
	ЗаполнитьФайлыКопированиемСервер();
	
	Состояние();
	
КонецПроцедуры

// Копирует файлы из общей папки и обновляет список.
//
&НаСервере
Процедура ЗаполнитьФайлыКопированиемСервер()
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьФайлыКопированием(
		ВнешнийОбъект, ID, Тип, Представление, УникальныйИдентификатор);
	ПрочитатьИОбновитьСписокФайлов();
	Элементы.ЗаполнитьФайлыКопированием.Доступность = (Файлы.Количество() = 0);
	
КонецПроцедуры

// Получает список файлов из ДО и обновляет форму.
//
&НаСервере
Процедура ПрочитатьИОбновитьСписокФайлов()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	СписокОбъектов.Добавить(ОбъектИд);
	ПолучаемыеПоля.Добавить("files");
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);

	ОбъектXDTO = Результат.objects[0];
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокФайлов(
		ОбъектXDTO.files, Файлы, Элементы.ГруппаФайлы);
	
КонецПроцедуры

// Общее завершение команд редактирования. Обновляет список файлов.
//
&НаКлиенте
Процедура КомандыРедактированияЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

// Завершение добавления печатной формы файла. Обновляет список.
//
// Параметры:
//   Результат - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//   Параметры - Неопределено
//
&НаКлиенте
Процедура ДобавлениеПечатнойФормыЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ОбновитьСписокФайловКлиент(Результат[0].ТекущийФайл.ID);
	КонецЕсли;
	
КонецПроцедуры

// Открывает карточку текущего файла.
//
&НаКлиенте
Процедура ОткрытьКарточку()
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Если Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РазрешеноРедактирование",
			СостояниеРазрешаетРедактированиеФайла);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект("DMFile", Элементы.Файлы.ТекущиеДанные.ID,
			ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Помечает выделенные файлы на удаление.
//
&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	СписокОбъектов = Новый Массив;
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Данные = Файлы.НайтиПоИдентификатору(НомерСтроки);
		СписокОбъектов.Добавить(Новый Структура("ID, Тип", Данные.ID, "DMFile"));
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПометитьНаУдалениеСнятьПометкуОбъектов(
		Прокси,
		СписокОбъектов);
	
	ПрочитатьИОбновитьСписокПодписей();
	
КонецПроцедуры

// Получает подписи из ДО и обновляет список в форме.
//
&НаСервере
Процедура ЗаполнитьСписокПодписей(ПодписиXDTO, ФайлыXDTO)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьСписокПодписейСервер(
		ПодписиXDTO,
		ФайлыXDTO,
		ЭтотОбъект,
		Элементы.СтраницаЭП);
	
КонецПроцедуры

// Получает список файлов из ДО и обновляет его, сохраняя выделенную строку.
//
&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.Файлы.ТекущиеДанные.ID;
	КонецЕсли;
	
	ПрочитатьИОбновитьСписокФайлов();
	
	// Восстановим положение в списке.
	Для Каждого Строка Из Файлы Цикл
		Если Строка.ID = ТекущийИдентификаторФайла Тогда
			Элементы.Файлы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗаполнитьФайлыКопированием.Доступность = (Файлы.Количество() = 0);
	
КонецПроцедуры

// Завершение добавления файла. Обновляет список.
//
// Параметры:
//   ОписанияФайлов - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//   Параметры - Неопределено
//
&НаКлиенте
Процедура СписокФайловПослеДобавленияФайла(ОписанияФайлов, Параметры) Экспорт
	
	ОбновитьСписокФайловКлиент(ОписанияФайлов[0].ID);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ЭП

// Завершает подписание документа после ответа на вопрос "Подписать?".
//
&НаКлиенте
Процедура ПодписатьДокументЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		ЗаписатьОбъект();
		УстановитьПодписи();
	КонецЕсли;
	
КонецПроцедуры

// Подписывает документ.
//
&НаКлиенте
Процедура УстановитьПодписи()
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("МассивДанныхДляЗанесенияВБазу", МассивДанныхДляЗанесенияВБазу);
	ПараметрыОповещения.Вставить("МассивАдресов", МассивАдресов);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьПодписиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьФормированиеПодписиОбъекта(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

// Вызывается после подписания документа и обновляет форму.
//
&НаКлиенте
Процедура УстановитьПодписиЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ИсходныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.МассивПодписей(ДеревоПодписей);
	ДобавитьПодписиИОбновитьСписок(ПараметрыОповещения.ДобавленныеПодписиОбъектов);
	Подписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.МассивПодписей(ДеревоПодписей);
	
	Если ИсходныеПодписи.Количество() <> Подписи.Количество() Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОПодписании(
			Представление,
			ПараметрыОповещения.ДобавленныеПодписиОбъектов,
			ID,
			УникальныйИдентификатор);
		УстановитьДоступностьКомандСпискаЭП();
	КонецЕсли;
	
КонецПроцедуры

// В зависимости от наличия подписи меняет доступность команд ЭП.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ДеревоПодписей.ПолучитьЭлементы().Количество() <> 0);
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = Не ПустаяСтрока(ТекущиеДанные.Объект);
	КонецЕсли;
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи;
	
КонецПроцедуры

// Добавляет переданные подписи к документу.
//
&НаСервере
Процедура ДобавитьПодписиИОбновитьСписок(ДобавленныеПодписиОбъектов)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПодписатьДокумент(
		ДобавленныеПодписиОбъектов,
		ДеревоПодписей);
	ПрочитатьИОбновитьСписокПодписей();
	
КонецПроцедуры

// Получает подписи из ДО и обновляет форму.
//
&НаСервере
Процедура ПрочитатьИОбновитьСписокПодписей()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	СписокОбъектов.Добавить(ОбъектИд);
	
	ПолучаемыеПоля.Добавить("signatures");
	ПолучаемыеПоля.Добавить("files"); // также и файлы обновляем - чтобы иконку Подписан расставить
	ПолучаемыеПоля.Добавить("enabledProperties");
	ПолучаемыеПоля.Добавить("keyPropertiesValue");
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.objects[0];
	
	ЗаполнитьСписокПодписей(ОбъектXDTO.signatures, ОбъектXDTO.files);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокФайлов(
		ОбъектXDTO.files, Файлы, Элементы.ФайлыНаименование);
	
	УстановитьДоступностьПоСостоянию(ОбъектXDTO);// доступность по состоянию
	УстановитьДоступностьПоЭП(ОбъектXDTO);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Связи

// Открывает текущий связанный документ или его файл.
//
&НаКлиенте
Процедура ОткрытьСвязанныеДанныеСтроки(Строка)
	
	Если Строка.Тип = "DMRelationType" Тогда // объект ИС
		Возврат;
		
	ИначеЕсли Строка.Тип = "DMFile" Тогда // файл
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			Строка.ID,
			Строка.Заголовок,
			Строка.Расширение,
			УникальныйИдентификатор);
		
	ИначеЕсли ЗначениеЗаполнено(Строка.Ссылка) Тогда
		ПоказатьЗначение(, Строка.Ссылка);
		
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(Строка.Тип, Строка.ID, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после добавления связи и обновляет дерево связей.
//
&НаКлиенте
Процедура НачатьДобавлениеСвязиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоСвязей(, Результат.СвязанныйДокумент.ID);
		
	Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается после удаления связи и обновляет дерево связей.
//
&НаКлиенте
Процедура НачатьУдалениеСвязиЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ИсходныйДокумент.ID) Тогда
		
		ОбновитьДеревоСвязей();
		
		Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
			ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
		КонецЕсли;
		
	Иначе
		
		СтрокаТипаСвязи = Элементы.ДеревоСвязей.ТекущиеДанные.ПолучитьРодителя();
		СтрокиТипаСвязи = СтрокаТипаСвязи.ПолучитьЭлементы();
		СтрокаДокумента = ДеревоСвязей.НайтиПоИдентификатору(Элементы.ДеревоСвязей.ТекущаяСтрока);
		СтрокиТипаСвязи.Удалить(СтрокаДокумента);
		Если СтрокиТипаСвязи.Количество() = 0 Тогда
			ДеревоСвязей.ПолучитьЭлементы().Удалить(СтрокаТипаСвязи);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обновляет данные связей документа, получая их заново, если необходимо.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - полученный из ДО документ, или
//              - Неопределено - признак необходимости получить его.
//   ДобавленныйДокумент - Строка - идентификатор документа, чьи файлы нужно обновить, или
//                       - Неопределено - признак необходимости обновить все файлы.
//
&НаСервере
Процедура ОбновитьДеревоСвязей(Знач ОбъектXDTO = Неопределено, ДобавленныйДокумент = Неопределено)
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		ДеревоСвязей.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	Если ОбъектXDTO = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		СписокОбъектов = Запрос.objectIDs; // СписокXDTO
		
		ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
		СписокОбъектов.Добавить(ОбъектИд);
		ПолучаемыеПоля.Добавить("relations");
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат.objects[0];
	КонецЕсли;
	
	АдресДляФайловСвязанныхДокументов = Обработки.ИнтеграцияС1СДокументооборот.
		ЗаполнитьДеревоСвязейИНачатьПолучениеФайлов(
			ЭтотОбъект,
			ОбъектXDTO,
			Элементы.СтраницаСвязи,
			ДобавленныйДокумент);
	
КонецПроцедуры

// Обновляет файлы связанных документов данными временного хранилища, заполняемыми
// в асинхронном задании, откладывая обновление, если данные еще не готовы.
//
&НаКлиенте
Процедура ОбновлениеФайловСвязанныхДокументов()
	
	Если Не ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраним текущее положение по ID объекта с учетом типа связи.
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийID = Неопределено;
		ТекущийТип = Неопределено;
		ТекущийТипСвязи = Неопределено;
	Иначе
		ТекущийID = ТекущиеДанные.ID;
		ТекущийТип = ТекущиеДанные.Тип;
		Если ТекущийТип = "DMRelationType" Тогда
			СтрокаТипаСвязи = ТекущиеДанные;
		ИначеЕсли ТекущийТип = "DMFile" Тогда
			СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
		Иначе
			СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя();
		КонецЕсли;
		ТекущийТипСвязи = СтрокаТипаСвязи.ID;
	КонецЕсли;
	
	Если ОбновлениеФайловСвязанныхДокументовСервер() Тогда // данные еще не готовы
		
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
		
	Иначе // данные получены, развернем дерево и восстановим позицию в нем
		
		СтрокиТипСвязи = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого СтрокаТипСвязи Из СтрокиТипСвязи Цикл
			
			Идентификатор = СтрокаТипСвязи.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(Идентификатор, Истина);
			
			Если ТекущийТип = Неопределено Тогда
				Продолжить;
				
			ИначеЕсли ТекущийТип = "DMRelationType" Тогда
				Если СтрокаТипСвязи.ID = ТекущийID Тогда
					Элементы.ДеревоСвязей.ТекущаяСтрока = Идентификатор;
				КонецЕсли;
				
			ИначеЕсли СтрокаТипСвязи.ID = ТекущийТипСвязи Тогда
				
				СтрокиДокумент = СтрокаТипСвязи.ПолучитьЭлементы();
				Для Каждого СтрокаДокумент Из СтрокиДокумент Цикл
					
					Если ТекущийТип = "DMFile" Тогда
						СтрокиФайл = СтрокиДокумент.ПолучитьЭлементы();
						Для Каждого СтрокаФайл Из СтрокиФайл Цикл
							Если СтрокаФайл.ID = ТекущийID Тогда
								Элементы.ДеревоСвязей.ТекущаяСтрока = СтрокаФайл.ПолучитьИдентификатор();
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли СтрокаДокумент.ID = ТекущийID Тогда
						Элементы.ДеревоСвязей.ТекущаяСтрока = СтрокаДокумент.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файлы связанных документов данными временного хранилища, если они готовы.
//
// Возвращаемое значение:
//   Булево - Истина, если требуется повторное обновление, и Ложь, если не требуется.
//
&НаСервере
Функция ОбновлениеФайловСвязанныхДокументовСервер()
	
	Результат = ПолучитьИзВременногоХранилища(АдресДляФайловСвязанныхДокументов);
	Если Результат = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоСвязей");
	
	Для Каждого СвязанныйДокумент Из Результат Цикл
		
		СтруктураПоиска = Новый Структура("ID, Тип",
			СвязанныйДокумент.ID,
			СвязанныйДокумент.Тип);
		СтрокиДокументов = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
			
			ФайлыСвязанногоДокумента = СвязанныйДокумент.Файлы; // Массив из Структура
			
			СтрокаДокумента.Строки.Очистить();
			Для Каждого Файл Из ФайлыСвязанногоДокумента Цикл
				СтрокаФайла = СтрокаДокумента.Строки.Добавить();
				СтрокаФайла.ID = Файл.ID;
				СтрокаФайла.Тип = Файл.Тип;
				СтрокаФайла.Заголовок = Файл.Наименование;
				СтрокаФайла.Расширение = Файл.Расширение;
				СтрокаФайла.Картинка =
					ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИндексПиктограммыФайла(СтрокаФайла.Расширение);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Возврат Ложь;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прочее

// Обновляет HTML-представление документа.
//
&НаКлиенте
Процедура ОбновитьОбзор()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбзор Тогда
		ПредставлениеHTML = ИнтеграцияС1СДокументооборотКлиентСервер.ПолучитьОбзорДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет форму по данным объекта XDTO, обновляя обзор и дерево связей, но не файлы.
//
&НаСервере
Процедура ПрочитатьОбъектВФорму(ОбъектXDTO)
	
	// Заполнение реквизитов.
	СоответствиеРеквизитов =
		Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(Тип);
	ИнтеграцияС1СДокументооборот.ЗаполнитьФормуИзОбъектаXDTO(ЭтотОбъект, ОбъектXDTO, СоответствиеРеквизитов);
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.НастроитьФормуДокументаСогласноВидуДокументаXDTO(
		ЭтотОбъект,
		ОбъектXDTO.documentType,
		ОбъектXDTO.organization);
	
	Представление = ОбъектXDTO.name;
	
	НачальныйРегистрационныйНомер = РегистрационныйНомер;
	НачальнаяДатаРегистрации = ДатаРегистрации;
	
	// Доступность по состоянию.
	УстановитьДоступностьПоСостоянию(ОбъектXDTO);
	УстановитьДоступностьПоЭП(ОбъектXDTO);
	
	// Заголовок, заполняемый по шаблону.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "titleBlockedByTemplate")
			И ОбъектXDTO.titleBlockedByTemplate = Истина Тогда
		Элементы.Наименование.ТолькоПросмотр = Истина;
		Элементы.Наименование.Подсказка =
			НСтр("ru = 'Наименование документа сформировано автоматически по шаблону, редактирование запрещено.'");
		Элементы.Наименование.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	// Реквизиты номенклатуры дел
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "caseFilesCatalog") Тогда
		НоменклатураДелГод = ОбъектXDTO.caseFilesCatalog.year;
	КонецЕсли;
	
	// Контрагенты
	Если Контрагенты.Количество() = 1 Тогда
		ПодписалОтКонтрагента = Контрагенты[0].ПодписалОтКонтрагента;
		ПодписалОтКонтрагентаID = Контрагенты[0].ПодписалОтКонтрагентаID;
		ПодписалОтКонтрагентаТип = Контрагенты[0].ПодписалОтКонтрагентаТип;
	КонецЕсли;
	
	// Стороны
	Для Каждого Строка Из Стороны Цикл
		СтрокаXDTO = ОбъектXDTO.partyRows.rows[ЭтотОбъект.Стороны.Индекс(Строка)];
		legalPrivatePersonID = "";
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "party")
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO.party, "correspondent") Тогда
			legalPrivatePersonID = СтрокаXDTO.party.correspondent.legalPrivatePerson.objectID.ID;
		КонецЕсли;
		ЗаполнитьДополнительныеДанныеСторон(Строка, Строка.СторонаТип, legalPrivatePersonID);
	КонецЦикла;
	
	Элементы.Организация.Видимость = (ОбъектXDTO.organizationEnabled = Истина);
	Элементы.ВопросДеятельности.Видимость = (ОбъектXDTO.activityMatterEnabled = Истина);
	Элементы.ГрифДоступа.Видимость = (ОбъектXDTO.accessLevelEnabled = Истина);
	Элементы.Файлы.Видимость = (ОбъектXDTO.filesEnabled = Истина);
	Элементы.ВидДокумента.Видимость = (ОбъектXDTO.documentTypeEnabled = Истина);
	Элементы.Состояние.Видимость = (ОбъектXDTO.statusEnabled = Истина);
	Элементы.Состояние.ТолькоПросмотр = (ОбъектXDTO.statusChangeEnabled <> Истина);
	Элементы.СостояниеСписок.ТолькоПросмотр = (ОбъектXDTO.statusChangeEnabled <> Истина);
	ОграничиватьДоступностьПолей = (ОбъектXDTO.limitPropertiesAvailability = Истина);
	
	// Проекты и независимые состояния.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Элементы.Проект.Видимость = (ОбъектXDTO.projectsEnabled = Истина);
		Элементы.СостояниеСписок.Видимость = (ОбъектXDTO.statusEnabled = Истина);
		Элементы.Состояние.Видимость = Ложь;
	Иначе
		Элементы.Проект.Видимость = Ложь;
		Элементы.СостояниеСписок.Видимость = Ложь;
		Элементы.Состояние.Видимость = (ОбъектXDTO.statusEnabled = Истина);
	КонецЕсли;
	
	// Хранение
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
		
		Элементы.ГруппаХранение.Видимость = Истина;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "contentAvailable")
				И ОбъектXDTO.contentAvailable Тогда
			Элементы.СоставСтрока.Видимость = Истина;
			СоставСтрока = ИнтеграцияС1СДокументооборотКлиентСервер.ПолучитьСтрокуСоставДокумента(ЭтотОбъект);
		Иначе
			Элементы.СоставСтрока.Видимость = Ложь;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "useCaseFiles")
				И ОбъектXDTO.useCaseFiles Тогда
			Элементы.Дело.Видимость = Истина;
		Иначе
			Элементы.НоменклатураДел.Видимость = Ложь;
			Элементы.Дело.Видимость = Ложь;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "caseFilesCatalog") Тогда
			НоменклатураДел = ОбъектXDTO.caseFilesCatalog.objectID.presentation;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "caseFileDossier") Тогда
			Дело = ОбъектXDTO.caseFileDossier.objectID.presentation;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаХранение.Видимость = Ложь;
	КонецЕсли;
	
	СрокДействияПредставление =
		ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеСрокаДействияДокумента(
			ДатаНачалаДействия,
			Бессрочный,
			ДатаОкончанияДействия,
			ПорядокПродленияID,
			ПорядокПродления);
			
	СформироватьПредставлениеСтатейДДС();
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПоместитьДополнительныеРеквизитыНаФорму(
		ЭтотОбъект,
		ОбъектXDTO);
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьНавигационнуюСсылку(
		ЭтотОбъект,
		ОбъектXDTO);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьПараметрыХронометража(ЭтотОбъект, ОбъектXDTO);
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьСостоянияДокумента(ЭтотОбъект, ОбъектXDTO);
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьЗаголовокДокумента(ЭтотОбъект);
	
	Если ИспользоватьСвязанныеДокументы1СДокументооборота Тогда
		ОбновитьДеревоСвязей();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID) Тогда
		ПравилаЗаполнения = ИнтеграцияС1СДокументооборотВызовСервера.
			ПравилаЗаполненияИнтегрированныхОбъектовСписком(ОбъектXDTO);
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьДоступностьРегистрации(
		ЭтотОбъект,
		ОбъектXDTO);
	
КонецПроцедуры

// Получает обновленное состояние из ДО и перезаполняет форму.
//
&НаСервере
Процедура ОбновитьСостояние()
	
	// Получим объект из ДО.
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	СписокОбъектов.Добавить(ОбъектИд);
	
	ПолучаемыеПоля.Добавить("status");
	ПолучаемыеПоля.Добавить("statusApproval");
	ПолучаемыеПоля.Добавить("statusConfirmation");
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
		ПолучаемыеПоля.Добавить("statusSigning");
	КонецЕсли;
	ПолучаемыеПоля.Добавить("statusRegistration");
	ПолучаемыеПоля.Добавить("statusConsideration");
	ПолучаемыеПоля.Добавить("statusPerformance");
	ПолучаемыеПоля.Добавить("statusEnabled");
	ПолучаемыеПоля.Добавить("enabledProperties");
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.objects[0];
	
	// Проекты и независимые состояния.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Элементы.СостояниеСписок.Видимость = (ОбъектXDTO.statusEnabled = Истина);
		Элементы.Состояние.Видимость = Ложь;
	Иначе
		Элементы.Проект.Видимость = Ложь;
		Элементы.СостояниеСписок.Видимость = Ложь;
		Элементы.Состояние.Видимость = (ОбъектXDTO.statusEnabled = Истина);
	КонецЕсли;
	
	// Установим доступность по состоянию.
	Элементы.Состояние.ТолькоПросмотр = (ОбъектXDTO.statusChangeEnabled <> Истина);
	Элементы.СостояниеСписок.ТолькоПросмотр = (ОбъектXDTO.statusChangeEnabled <> Истина);
	УстановитьДоступностьПоСостоянию(ОбъектXDTO);
	
	// Заполним реквизиты формы, соответствующие состоянию.
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьСостоянияДокумента(ЭтотОбъект, ОбъектXDTO);
	
КонецПроцедуры

// Заполняет документ в ДО и обновляет форму.
//
&НаСервере
Процедура ЗаписатьОбъект(ПроверятьСвязи = Истина)
	
	Отказ = Ложь;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMInternalDocument",
		ВнешнийОбъект);
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.СформироватьДополнительныеСвойства(
		Прокси,
		ОбъектXDTO,
		ЭтотОбъект);
	
	// Заявки на оплату.
	Если ЯвляетсяЗаявкойНаОплату Тогда
		ЗаполнитьДанныеЗаявкиНаОплату();
	КонецЕсли;
	
	// Заполним простые свойства по реквизитам формы.
	СоответствиеРеквизитов =
		Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(Тип);
	Для Каждого СтрокаСоответствия Из СоответствиеРеквизитов Цикл
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			ЭтотОбъект,
			СтрокаСоответствия.Значение);
	КонецЦикла;
	
	// Заполним независимые состояния.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		
		ВозможныеСостояния =
			Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоответствиеСвойствXDTOиСостоянийДокумента(Тип);
		Для Каждого СтрокаСоответствия Из ВозможныеСостояния Цикл
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ОбъектXDTO,
				СтрокаСоответствия.Ключ,
				ЭтотОбъект,
				СтрокаСоответствия.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПередЗаписьюДокумента(Прокси, ОбъектXDTO, ЭтотОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO.name = Представление;
	Если ОбъектXDTO.Свойства().Получить("checkRelations") <> Неопределено Тогда
		ОбъектXDTO.checkRelations = ПроверятьСвязи;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID) И ЗначениеЗаполнено(Тип) Тогда // обновление
		
		ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
		
		ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
			ДеревоПодписей,,
			ID);
		ДанныеПодписейДокумента = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеПодписей(ТаблицаПодписей);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьПодписиОбъектаXDTO(
			Прокси,
			ОбъектXDTO,
			ДанныеПодписейДокумента);
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, ОбъектXDTO);
		
		ОбъектXDTO = Результат.objects[0];
		
		Если ИспользоватьСвязанныеДокументы1СДокументооборота
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
			Обработки.ИнтеграцияС1СДокументооборот.ЗаписатьСвязиНовогоДокумента(
				ДеревоСвязей,
				ID,
				Тип,
				Представление);
		КонецЕсли;
		
	Иначе // создание
		
		ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateRequest");
		Запрос.object = ОбъектXDTO;
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат.object;
		ID = ОбъектXDTO.objectID.ID;
		Тип = ОбъектXDTO.objectID.type;
		Представление = Результат.object.name;
		
		Обработки.ИнтеграцияС1СДокументооборот.ЗаписатьФайлыНовогоДокумента(
			Файлы,
			ID,
			Тип,
			Представление,
			ВнешнийОбъект);
		
		Если ИспользоватьСвязанныеДокументы1СДокументооборота
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
			Обработки.ИнтеграцияС1СДокументооборот.ЗаписатьСвязиНовогоДокумента(
				ДеревоСвязей,
				ID,
				Тип,
				Представление);
		КонецЕсли;
		
		// Возможно, созданному объекту нужно присвоить штрихкод.
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(ВнешнийОбъект, ID, Тип);
		
	КонецЕсли;
	
	Если ТипЗнч(КонтрольОтправкиФайлов) = Тип("ХранилищеЗначения") Тогда
		Для Каждого Строка Из КонтрольОтправкиФайлов.Получить() Цикл
			РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
				Строка.Источник,
				Строка.ИмяФайла,
				Строка.ТабличныйДокумент)
		КонецЦикла;
	КонецЕсли;
	
	// Запишем авансовый отчет заявки на расход ДС
	Если ЯвляетсяЗаявкойНаОплату
		И (ПолучательТип = "DMUser"
			Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(ПолучательТип) = "DMUser") Тогда
		
		СвязьУжеЕсть = Ложь;
		АвансовыйОтчетXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			"DMRelationType", "АвансовыйОтчет"); //@NON-NLS-2
		ТипСвязиАвансовыйОтчет = Новый Структура("ID, Тип, Представление",
			АвансовыйОтчетXDTO.objectID.ID, АвансовыйОтчетXDTO.objectID.type, АвансовыйОтчетXDTO.name);
		ИсходныйДокумент = Новый Структура("ID, Тип, Представление", ID, Тип, Представление);
		
		Для Каждого ЭлТипСвязи Из ДеревоСвязей.ПолучитьЭлементы() Цикл
			Если ЭлТипСвязи.ID = ТипСвязиАвансовыйОтчет.ID Тогда
				
				Для Каждого ЭлСвязанныйДокумент Из ЭлТипСвязи.ПолучитьЭлементы() Цикл
					Если ЭлСвязанныйДокумент.ID = АвансовыйОтчетID
							И ЭлСвязанныйДокумент.Тип = АвансовыйОтчетТип Тогда
						СвязьУжеЕсть = Истина;
						
					Иначе
						СвязанныйДокумент = Новый Структура("ID, Тип, Представление",
							ЭлСвязанныйДокумент.ID, ЭлСвязанныйДокумент.Тип, ЭлСвязанныйДокумент.Заголовок);
						ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязьДокументов(
							ИсходныйДокумент, СвязанныйДокумент, ТипСвязиАвансовыйОтчет);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СвязьУжеЕсть = Ложь И АвансовыйОтчетID <> "" Тогда
			СвязанныйДокумент = Новый Структура("ID, Тип, Представление",
				АвансовыйОтчетID, АвансовыйОтчетТип, АвансовыйОтчет);
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент, СвязанныйДокумент, ТипСвязиАвансовыйОтчет);
		КонецЕсли;
		
	КонецЕсли;
	
	ПрочитатьОбъектВФорму(ОбъектXDTO);
	
	Если ОбъектXDTO.Установлено("keyPropertiesValue") Тогда
		АдресСлепкаДокумента = ПоместитьВоВременноеХранилище(
			ОбъектXDTO.keyPropertiesValue, УникальныйИдентификатор);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗаявкиНаОплату()
	
	Контрагент = "";
	КонтрагентID = "";
	КонтрагентТип = "";
	Контрагенты.Очистить();
	Если (ПолучательТип = "DMCorrespondent"
		Или ПолучательТип = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаИС("DMCorrespondent"))
			И ЗначениеЗаполнено(ПолучательID) Тогда
		СтрокаКонтрагент = Контрагенты.Добавить();
		СтрокаКонтрагент.Контрагент = Получатель;
		СтрокаКонтрагент.КонтрагентID = ПолучательID;
		СтрокаКонтрагент.КонтрагентТип = ПолучательТип;
		Контрагент = Получатель;
		КонтрагентID = ПолучательID;
		КонтрагентТип = ПолучательТип;
	КонецЕсли;
	
	Стороны.Очистить();
	Если ЗначениеЗаполнено(ОрганизацияID) Тогда
		СторонаПлательщик = Стороны.Добавить();
		СторонаПлательщик.Сторона = Организация;
		СторонаПлательщик.СторонаID = ОрганизацияID;
		СторонаПлательщик.СторонаТип = ОрганизацияТип;
		НаименованиеПлательщикXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			"DMPartyName", "Плательщик"); //@NON-NLS-2
		СторонаПлательщик.Наименование = НаименованиеПлательщикXDTO.name;
		СторонаПлательщик.НаименованиеID = НаименованиеПлательщикXDTO.objectID.ID;
		СторонаПлательщик.НаименованиеТип = НаименованиеПлательщикXDTO.objectID.type;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПолучательID) Тогда
		СторонаПолучатель = Стороны.Добавить();
		СторонаПолучатель.Сторона = Получатель;
		СторонаПолучатель.СторонаID = ПолучательID;
		СторонаПолучатель.СторонаТип = ПолучательТип;
		НаименованиеПолучательXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
			"DMPartyName", "Получатель"); //@NON-NLS-2
		СторонаПолучатель.Наименование = НаименованиеПолучательXDTO.name;
		СторонаПолучатель.НаименованиеID = НаименованиеПолучательXDTO.objectID.ID;
		СторонаПолучатель.НаименованиеТип = НаименованиеПолучательXDTO.objectID.type;
	КонецЕсли;
	
КонецПроцедуры

// Обработка формы при изменении вида документа.
//
&НаСервере
Процедура ПриИзмененииВидаДокумента()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Объекты = Новый Массив;
	Объекты.Добавить(Новый Структура("ID, Тип", ВидДокументаID, ВидДокументаТип));
	Если ОрганизацияID <> "" И ОрганизацияТип = "DMOrganization" Тогда
		Объекты.Добавить(Новый Структура("ID, Тип", ОрганизацияID, ОрганизацияТип));
	КонецЕсли;
	ДанныеОбъектовДО = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъекты(Прокси, Объекты);
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриИзмененииВидаНаФормеДокумента(
		ЭтотОбъект,
		ДанныеОбъектовДО);
	ОбновитьДекорацииСвязи();
	
	НесколькоКонтрагентов = (Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
КонецПроцедуры

// Устанавливает доступность полей и кнопок формы в зависимости от состояния документа.
//
&НаСервере
Процедура УстановитьДоступностьПоСостоянию(ОбъектXDTO)
	
	ДоступныеПоля = Новый Массив;
	Для Каждого ИмяПоля Из ОбъектXDTO.enabledProperties Цикл
		ДоступныеПоля.Добавить(НРег(ИмяПоля));
	КонецЦикла;
	
	КоличествоДоступныхПолей = ДоступныеПоля.Количество();
	
	СоответствиеРеквизитов =
		Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(Тип);
	ДополнитьСоответствиеРеквизитов(СоответствиеРеквизитов);
	Для Каждого СтрокаСоответствия Из СоответствиеРеквизитов Цикл
		
		Если ТипЗнч(СтрокаСоответствия.Значение) = Тип("Структура") Тогда
			Если СтрокаСоответствия.Значение.Свойство("rows") Тогда
				ИмяРеквизита = СтрокаСоответствия.Значение.rows[0];
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ИмяРеквизита = СтрокаСоответствия.Значение;
		КонецЕсли;
		
		Если ИмяРеквизита = "ДатаНачалаДействия"
				Или ИмяРеквизита = "ДатаОкончанияДействия"
				Или ИмяРеквизита = "ПорядокПродления"
				Или ИмяРеквизита = "Бессрочный" Тогда
			ИмяРеквизита = "СрокДействияПредставление";
		КонецЕсли;
		
		// Пропустим реквизиты, не выведенные на форму.
		Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоличествоДоступныхПолей = 0 Или ДоступныеПоля.Найти(НРег(СтрокаСоответствия.Ключ)) <> Неопределено Тогда
			Элементы[ИмяРеквизита].ТолькоПросмотр = Ложь;
		Иначе
			Элементы[ИмяРеквизита].ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (КоличествоДоступныхПолей = 0 Или ДоступныеПоля.Найти("register") <> Неопределено)
			И АвтоматическаяНумерация Тогда
		Элементы.Зарегистрировать.Доступность = Истина;
	Иначе
		Элементы.Зарегистрировать.Доступность = Ложь;
	КонецЕсли;
	
	Если КоличествоДоступныхПолей = 0 Или ДоступныеПоля.Найти("additionalproperties") <> Неопределено Тогда
		Элементы.Свойства.Доступность = Истина;
	Иначе
		Элементы.Свойства.Доступность = Ложь;
	КонецЕсли;
	
	СостояниеРазрешаетРедактированиеФайла = (КоличествоДоступныхПолей = 0
		Или ДоступныеПоля.Найти("editfile") <> Неопределено);
	СостояниеРазрешаетДобавлениеФайла = (КоличествоДоступныхПолей = 0
		Или ДоступныеПоля.Найти("addfile") <> Неопределено);
	СостояниеРазрешаетДобавлениеСканКопии = (КоличествоДоступныхПолей = 0
		Или ДоступныеПоля.Найти("addscannedcopy") <> Неопределено);
	
	Элементы.Файлы.ИзменятьСоставСтрок = (СостояниеРазрешаетДобавлениеФайла Или СостояниеРазрешаетДобавлениеСканКопии);
	Элементы.ДобавитьПечатнуюФорму.Доступность = ЗначениеЗаполнено(ВнешнийОбъект)
		И СостояниеРазрешаетДобавлениеФайла;
	
	Элементы.СоздатьФайл.Доступность = (СостояниеРазрешаетДобавлениеФайла Или СостояниеРазрешаетДобавлениеСканКопии);
	Элементы.ФайлыКонтекстСоздатьФайл.Доступность = (СостояниеРазрешаетДобавлениеФайла
		Или СостояниеРазрешаетДобавлениеСканКопии);
	
КонецПроцедуры

// Устанавливает доступность файловых команд согласно состоянию текущего файла.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаФайлов()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Элементы.ОткрытьНаЧтение.Доступность = Ложь;
		Элементы.ФайлыКонтекстОткрытьНаЧтение.Доступность = Ложь;
		
		Элементы.ОткрытьДляРедактирования.Доступность = Ложь;
		Элементы.ФайлыКонтекстОткрытьДляРедактирования.Доступность = Ложь;
		
		Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ФайлыКонтекстЗакончитьРедактирование.Доступность = Ложь;
		
		Элементы.СохранитьНаДиск.Доступность = Ложь;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = Ложь;
		Элементы.СохранитьИзменения.Доступность = Ложь;
		Элементы.ОтменитьРедактирование.Доступность = Ложь;
		
		Элементы.ОткрытьКарточку.Доступность = Ложь;
		Элементы.ФайлыКонтекстОткрытьКарточку.Доступность = Ложь;
		
		Элементы.УдалитьФайл.Доступность = Ложь;
		Элементы.ФайлыКонтекстУдалитьФайл.Доступность = Ложь;
		
		Элементы.ЗаполнитьФайлДаннымиДокумента.Доступность = Ложь;
		
		Элементы.Подписать.Доступность = Ложь;
		Элементы.ДобавитьЭПИзФайла.Доступность = Ложь;
		Элементы.СохранитьВместеСЭП.Доступность = Ложь;
		
	Иначе
		
		Редактируется = ТекущиеДанные.Редактируется;
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		РедактируетсяДругимПользователем = Редактируется И Не РедактируетсяТекущимПользователем;
		
		Элементы.ОткрытьНаЧтение.Доступность = Истина;
		Элементы.ФайлыКонтекстОткрытьНаЧтение.Доступность = Истина;
		
		Элементы.ОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И Не РедактируетсяДругимПользователем;
		Элементы.ФайлыКонтекстОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И Не РедактируетсяДругимПользователем;
			
		Элементы.ЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И РедактируетсяТекущимПользователем;
		Элементы.ФайлыКонтекстЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И РедактируетсяТекущимПользователем;
			
		Элементы.СохранитьИзменения.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И РедактируетсяТекущимПользователем;
		Элементы.ОтменитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла
			И ДоступенЗахватФайлов И РедактируетсяТекущимПользователем;
		Элементы.СохранитьНаДиск.Доступность = Истина;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = СостояниеРазрешаетРедактированиеФайла
			И Не РедактируетсяДругимПользователем;
			
		Элементы.ОткрытьКарточку.Доступность = Истина;
		Элементы.ФайлыКонтекстОткрытьКарточку.Доступность = Истина;
		
		Элементы.УдалитьФайл.Доступность = СостояниеРазрешаетРедактированиеФайла
			И Не РедактируетсяДругимПользователем;
		Элементы.ФайлыКонтекстУдалитьФайл.Доступность = СостояниеРазрешаетРедактированиеФайла
			И Не РедактируетсяДругимПользователем;
			
		Элементы.ЗаполнитьФайлДаннымиДокумента.Доступность = Не Редактируется;
			
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		
		Элементы.Подписать.Доступность = Не Редактируется И Не Зашифрован;
		Элементы.ДобавитьЭПИзФайла.Доступность = Не Редактируется И Не Зашифрован;
		Элементы.СохранитьВместеСЭП.Доступность = ПодписанЭП;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность реквизитов документа в зависимости от наличия подписи.
//
&НаСервере
Процедура УстановитьДоступностьПоЭП(ОбъектXDTO)
	
	Если ОбъектXDTO.signatures.Количество() <> 0 Тогда
		КлючевыеПоля = Новый Массив;
		КлючевыеПоля.Добавить("Наименование");
		КлючевыеПоля.Добавить("Описание");
		Для Каждого ИмяПоля Из КлючевыеПоля Цикл
			Элементы[ИмяПоля].ТолькоПросмотр = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после ответа на вопрос "Записать документ?".
//
&НаКлиенте
Процедура СоздатьБизнесПроцессЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоОбъектуДО(ID, Тип, Наименование, ВнешнийОбъект);
	
КонецПроцедуры

// Вызывает обработчик команды, которая добавлена программно при создании формы на сервере.
// (см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнительнаяОбработкаФормыДокумента).
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьПрограммноДобавленнуюКоманду(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ВыполнитьПрограммноДобавленнуюКоманду(
		Команда, ЭтотОбъект);
	
КонецПроцедуры

// Формирует представление статей ДДС по списку.
//
&НаСервере
Процедура СформироватьПредставлениеСтатейДДС()
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДДС.Количество();
	Элементы.ПредставлениеСтатейДДС.ОтметкаНезаполненного = (КоличествоСтатей = 0);
	
	Если КоличествоСтатей <= 1 Тогда
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьяДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Истина;
		
		Если КоличествоСтатей = 1 Тогда
			ПредставлениеСтатейДДС = СтатьиДДС[0].СтатьяДДС;
		Иначе
			ПредставлениеСтатейДДС = "";
		КонецЕсли;
		
	Иначе // несколько статей
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьиДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Ложь;
		
		// Соберем представление статей строкой в поле формы.
		Результат = "";
		Для Каждого Строка Из СтатьиДДС Цикл
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли;
			Результат = Результат + Строка.СтатьяДДС;
		КонецЦикла;
		
		ПредставлениеСтатейДДС = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра и редактирования расшифровки по статьям ДДС.
//
&НаКлиенте
Процедура ОткрытьСтатьиДДС()
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СтатьиДДС", Новый Массив);
	Для Каждого Строка Из СтатьиДДС Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СтатьяДДС", Строка.СтатьяДДС);
		СтруктураСтроки.Вставить("СтатьяДДСID", Строка.СтатьяДДСID);
		СтруктураСтроки.Вставить("СтатьяДДСТип", Строка.СтатьяДДСТип);
		СтруктураСтроки.Вставить("Сумма", Строка.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);
		ПараметрыФормы.СтатьиДДС.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Сумма", Сумма);
	ПараметрыФормы.Вставить("СуммаНДС", СуммаНДС);
	ПараметрыФормы.Вставить("УчитыватьНДС", УчитыватьНДС);
	ПараметрыФормы.Вставить("ТолькоПросмотр",
		Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр Или ТолькоПросмотр);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтатьиДДСЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СтатьиДвиженияДенежныхСредств",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Завершает редактирование расшифровки по статьям ДДС.
//
&НаКлиенте
Процедура ОткрытьСтатьиДДСЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	СтатьиДДС.Очистить();
	Сумма = 0;
	СуммаНДС = 0;
	Для Каждого СтруктураСтроки Из Результат Цикл
		Строка = СтатьиДДС.Добавить();
		Строка.СтатьяДДС = СтруктураСтроки.СтатьяДДС;
		Строка.СтатьяДДСID = СтруктураСтроки.СтатьяДДСID;
		Строка.СтатьяДДСТип = СтруктураСтроки.СтатьяДДСТип;
		Строка.Сумма = СтруктураСтроки.Сумма;
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		Сумма = Сумма + СтруктураСтроки.Сумма;
		СуммаНДС = СуммаНДС + СтруктураСтроки.СуммаНДС;
	КонецЦикла;
	СформироватьПредставлениеСтатейДДС();
	
	Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница = Элементы.СтраницаСуммаВерна;
	
КонецПроцедуры

// Обновляет отображение суммы, сверяя ее с расшифровкой.
//
&НаКлиенте
Процедура ОбновитьОтображениеСуммы()
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДДС.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДДС[0].Сумма = Сумма;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСумма = 0;
		Для Каждого Строка Из СтатьиДДС Цикл
			ИтогСумма = ИтогСумма + Строка.Сумма;
		КонецЦикла;
		Если ИтогСумма = Сумма Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет отображение суммы НДС, сверяя ее с расшифровкой.
//
&НаКлиенте
Процедура ОбновитьОтображениеСуммыНДС()
	
	Если Не ВестиУчетПоСтатьямДДС Или Не УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДДС.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДДС[0].СуммаНДС = СуммаНДС;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСумма = 0;
		Для Каждого Строка Из СтатьиДДС Цикл
			ИтогСумма = ИтогСумма + Строка.СуммаНДС;
		КонецЦикла;
		Если ИтогСумма = СуммаНДС Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНоменклатуры(ДанныеНоменклатуры, СтандартнаяОбработка, Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Номенклатура", ДанныеНоменклатуры, СтандартнаяОбработка, ЭтотОбъект, Истина, Элемент);
	
	ЗаполнитьДополнительныеДанныеНоменклатуры(ДанныеНоменклатуры, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеДанныеНоменклатуры(ДанныеНоменклатуры, ТекущиеДанные)
	
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
	ТекущиеДанные.Цена = ДанныеНоменклатуры.price;
	
	Если ДанныеНоменклатуры.measurementUnit <> Неопределено Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ДанныеНоменклатуры.measurementUnit;
		ТекущиеДанные.ЕдиницаИзмеренияID = ДанныеНоменклатуры.measurementUnitID;
		ТекущиеДанные.ЕдиницаИзмеренияТип = ДанныеНоменклатуры.measurementUnitТип;
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = "";
		ТекущиеДанные.ЕдиницаИзмеренияID = "";
		ТекущиеДанные.ЕдиницаИзмеренияТип = "";
	КонецЕсли;
	
	Если ДанныеНоменклатуры.VATRate <> Неопределено Тогда
		ТекущиеДанные.СтавкаНДС = ДанныеНоменклатуры.VATRate;
		ТекущиеДанные.СтавкаНДСID = ДанныеНоменклатуры.VATRateID;
		ТекущиеДанные.СтавкаНДСТип = ДанныеНоменклатуры.VATRateТип;
	Иначе
		ТекущиеДанные.СтавкаНДС = "";
		ТекущиеДанные.СтавкаНДСID = "";
		ТекущиеДанные.СтавкаНДСТип = "";
	КонецЕсли;
	
	ПриИзмененииТоварыКоличество(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ДанныеНоменклатуры(НоменклатураТип, НоменклатураID)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДанныеНоменклатуры = Новый Структура(
		"price, measurementUnit, measurementUnitID, measurementUnitТип, VATRate, VATRateID, VATRateТип");
	
	НоменклатураXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		НоменклатураТип,
		НоменклатураID);
	ДанныеНоменклатуры.price = НоменклатураXDTO.price;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(НоменклатураXDTO, "measurementUnit")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(НоменклатураXDTO.measurementUnit, "objectID") Тогда
		ДанныеНоменклатуры.measurementUnit = НоменклатураXDTO.measurementUnit.name;
		ДанныеНоменклатуры.measurementUnitID = НоменклатураXDTO.measurementUnit.objectID.ID;
		ДанныеНоменклатуры.measurementUnitТип = НоменклатураXDTO.measurementUnit.objectID.type;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(НоменклатураXDTO, "VATRate")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(НоменклатураXDTO.VATRate, "objectID") Тогда
		ДанныеНоменклатуры.VATRate = НоменклатураXDTO.VATRate.name;
		ДанныеНоменклатуры.VATRateID = НоменклатураXDTO.VATRate.objectID.ID;
		ДанныеНоменклатуры.VATRateТип = НоменклатураXDTO.VATRate.objectID.type;
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииТоварыКоличество(ДанныеСтроки)
	
	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Количество;
	ПриИзмененииТоварыСумма(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыЦена(ДанныеСтроки)
	
	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Количество;
	ПриИзмененииТоварыСумма(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыСтавкаНДС(ДанныеСтроки)
	
	СтавкаЧислом = СтавкаНДСЧислом(ДанныеСтроки.СтавкаНДСID);
	ДанныеСтроки.СуммаНДС = ДанныеСтроки.Сумма * СтавкаЧислом / (1 + СтавкаЧислом);
	
	ПриИзмененииТоварыСуммаНДС(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыСуммаНДС(ДанныеСтроки)
	
	СуммаНДС = Товары.Итог("СуммаНДС");
	
	ОбновитьОтображениеСуммыНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыСумма(ДанныеСтроки)
	
	СтавкаЧислом = СтавкаНДСЧислом(ДанныеСтроки.СтавкаНДСID);
	ДанныеСтроки.СуммаНДС = ДанныеСтроки.Сумма * СтавкаЧислом / (1 + СтавкаЧислом);
	Сумма = Товары.Итог("Сумма");
	
	ОбновитьОтображениеСуммы();
	
	ПриИзмененииТоварыСуммаНДС(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция СтавкаНДСЧислом(СтавкаНДС)
	
	Если СтавкаНДС = "НДС20" Тогда
		Возврат 0.2;
	ИначеЕсли СтавкаНДС = "НДС18" Тогда
		Возврат 0.18;
	ИначеЕсли СтавкаНДС = "НДС10" Тогда
		Возврат 0.10;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АвтоПодборСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст)
	
	ДанныеВыбораОрганизации = Новый СписокЗначений();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		"DMOrganization", ДанныеВыбораОрганизации, Текст, СтандартнаяОбработка);
	ДанныеВыбораКонтрагента = Новый СписокЗначений();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		"DMCorrespondent", ДанныеВыбораКонтрагента, Текст, СтандартнаяОбработка);
	
	ДанныеВыбора = Новый СписокЗначений();
	Для Каждого Элемент Из ДанныеВыбораОрганизации Цикл
		Элемент.Представление = СтрШаблон(НСтр("ru = '%1 (Организация)'"), Элемент.Представление);
		ДанныеВыбора.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из ДанныеВыбораКонтрагента Цикл
		Элемент.Представление = СтрШаблон(НСтр("ru = '%1 (Контрагент)'"), Элемент.Представление);
		ДанныеВыбора.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборПолучателя(СтандартнаяОбработка, ДанныеВыбора, Текст)
	
	ДанныеВыбораПользователи = Новый СписокЗначений();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		"DMUser", ДанныеВыбораПользователи, Текст, СтандартнаяОбработка);
	ДанныеВыбораКонтрагента = Новый СписокЗначений();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
		"DMCorrespondent", ДанныеВыбораКонтрагента, Текст, СтандартнаяОбработка);
	
	ДанныеВыбора = Новый СписокЗначений();
	Для Каждого Элемент Из ДанныеВыбораПользователи Цикл
		Элемент.Представление = СтрШаблон(НСтр("ru = '%1 (Пользователь)'"), Элемент.Представление);
		ДанныеВыбора.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из ДанныеВыбораКонтрагента Цикл
		Элемент.Представление = СтрШаблон(НСтр("ru = '%1 (Контрагент)'"), Элемент.Представление);
		ДанныеВыбора.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыТЧСтороны()
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КонтактноеЛицо = "";
	ТекущиеДанные.КонтактноеЛицоID = "";
	ТекущиеДанные.КонтактноеЛицоТип = "";
	
	ТекущиеДанные.Подписал = "";
	ТекущиеДанные.ПодписалID = "";
	ТекущиеДанные.ПодписалТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыТЧКонтрагенты()
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КонтактноеЛицо = "";
	ТекущиеДанные.КонтактноеЛицоID = "";
	ТекущиеДанные.КонтактноеЛицоТип = "";
	
	ТекущиеДанные.ПодписалОтКонтрагента = "";
	ТекущиеДанные.ПодписалОтКонтрагентаID = "";
	ТекущиеДанные.ПодписалОтКонтрагентаТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыДокумента()
	
	КонтактноеЛицо = "";
	КонтактноеЛицоID = "";
	КонтактноеЛицоТип = "";
	
	ПодписалОтКонтрагента = "";
	ПодписалОтКонтрагентаID = "";
	ПодписалОтКонтрагентаТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборКонтактноеЛицо(СтандартнаяОбработка, ДанныеВыбора, Текст)
	
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMContactPerson", ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
		
	Иначе
		ДанныеВыбора = Новый СписокЗначений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборКонтактноеЛицоТЧСтороны(СтандартнаяОбработка, ДанныеВыбора, Текст)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СторонаТип = "DMOrganization" Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
	ИначеЕсли ТекущиеДанные.СторонаТип = "DMCorrespondent" Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.СторонаID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMContactPerson", ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
		
	Иначе
		ДанныеВыбора = Новый СписокЗначений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборКонтактноеЛицоТЧКонтрагенты(СтандартнаяОбработка, ДанныеВыбора, Текст)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Correspondent = Новый Структура;
		Correspondent.Вставить("ID", ТекущиеДанные.КонтрагентID);
		Correspondent.Вставить("type", "DMCorrespondent");
		
		Отбор = Новый Структура;
		Отбор.Вставить("correspondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMContactPerson", ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
		
	Иначе
		ДанныеВыбора = Новый СписокЗначений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДополнительныеДанныеСторон(Строка, СторонаТип, legalPrivatePersonID)
	
	Если Лев(СторонаТип, 2) = "DM" Тогда
		СторонаТипXDTO = СторонаТип;
	Иначе
		СторонаТипXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(СторонаТип);
	КонецЕсли;
	
	Если СторонаТипXDTO = "DMCorrespondent" Тогда
		Строка.ИндексКартинкиСтороны = 1;
		
		Если legalPrivatePersonID = "ФизЛицо" Тогда //@NON-NLS-1
			Строка.КонтрагентЯвляетсяФизЛицом = Истина;
		Иначе
			Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		КонецЕсли;
		
	ИначеЕсли СторонаТипXDTO = "DMOrganization" Тогда
		Строка.ИндексКартинкиСтороны = 2;
		Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		
	Иначе
		Строка.ИндексКартинкиСтороны = 0;
		Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКонтрагентаИОрганизациюИзТЧСтороныВРеквизиты()
	
	КоличествоСторон = Стороны.Количество();
	
	ИмяТипаКонтрагента = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаИС("DMCorrespondent");
	
	// копирование контрагента
	ИндексСторон = КоличествоСторон - 1;
	Пока ИндексСторон > -1 Цикл
		Строка = Стороны[ИндексСторон];
		Если ЗначениеЗаполнено(Строка.Сторона)
				И (Строка.СторонаТип = "DMCorrespondent" Или Строка.СторонаТип = ИмяТипаКонтрагента) Тогда
			Контрагент = Строка.Сторона;
			КонтрагентID = Строка.СторонаID;
			КонтрагентТип = Строка.СторонаТип;
		КонецЕсли;
		
		ИндексСторон = ИндексСторон - 1;
	КонецЦикла;
	
	// копирование организации
	Если КоличествоСторон > 0
			И (Стороны[0].СторонаТип = "DMOrganization"
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
					Стороны[0].СторонаТип) = "DMOrganization") Тогда
		Если ОрганизацияID <> Стороны[0].СторонаID Тогда
			Организация = Строка.Сторона;
			ОрганизацияID = Строка.СторонаID;
			ОрганизацияТип = Строка.СторонаТип;
			Если Стороны[0].СторонаТип = "DMOrganization" Тогда
				ДанныеОрганизации = ДанныеОрганизации(ОрганизацияТип, ОрганизацияID);
				ОбновитьВидимостьНДС(ДанныеОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДополнитьСоответствиеРеквизитов(СоответствиеРеквизитов)
	
	СоответствиеРеквизитов.Вставить("cashFlowRows", "ПредставлениеСтатейДДС");
	СоответствиеРеквизитов.Вставить("correspondent", "ГруппаКонтрагент");
	СоответствиеРеквизитов.Вставить("correspondentRows", "СтраницаКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСтраницыКонтрагенты()
	
	КоличествоКонтрагентов = Контрагенты.Количество();
	
	Если КоличествоКонтрагентов = 0 Тогда 
		Элементы.СтраницаКонтрагенты.Заголовок = НСтр("ru = 'Контрагенты'");
	Иначе
		Элементы.СтраницаКонтрагенты.Заголовок = СтрШаблон(
			НСтр("ru = 'Контрагенты (%1)'"),
			КоличествоКонтрагентов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСтраницыТовары()
	
	КоличествоТоваров = Товары.Количество();
	
	Если КоличествоТоваров = 0 Тогда
		Элементы.СтраницаТовары.Заголовок = НСтр("ru = 'Товары и услуги'");
	Иначе
		Элементы.СтраницаТовары.Заголовок = СтрШаблон(
			НСтр("ru = 'Товары и услуги (%1)'"),
			КоличествоТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.ГруппаКонтрагент.Видимость =
		Не НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату;
		
	Элементы.СтраницаКонтрагенты.Видимость =
		НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьКонтрагенты()
	
	Контрагенты.Очистить();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НоваяСтрока = Контрагенты.Добавить();
		
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.КонтрагентID = КонтрагентID;
		НоваяСтрока.КонтрагентТип = КонтрагентТип;
		
		НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;
		НоваяСтрока.КонтактноеЛицоID = КонтактноеЛицоID;
		НоваяСтрока.КонтактноеЛицоТип = КонтактноеЛицоТип;
		
		НоваяСтрока.ПодписалОтКонтрагента = ПодписалОтКонтрагента;
		НоваяСтрока.ПодписалОтКонтрагентаID = ПодписалОтКонтрагентаID;
		НоваяСтрока.ПодписалОтКонтрагентаТип = ПодписалОтКонтрагентаТип;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизоватьРеквизитИТЧКонтрагенты()
	
	Если Контрагенты.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			НоваяСтрока = Контрагенты.Добавить();
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.КонтрагентID = КонтрагентID;
			НоваяСтрока.КонтрагентТип = КонтрагентТип;
			
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;
			НоваяСтрока.КонтактноеЛицоID = КонтактноеЛицоID;
			НоваяСтрока.КонтактноеЛицоТип = КонтактноеЛицоТип;
			
			НоваяСтрока.ПодписалОтКонтрагента = ПодписалОтКонтрагента;
			НоваяСтрока.ПодписалОтКонтрагентаID = ПодписалОтКонтрагентаID;
			НоваяСтрока.ПодписалОтКонтрагентаТип = ПодписалОтКонтрагентаТип;
		КонецЕсли;
	Иначе
		Строка = Контрагенты[0];
		Контрагент = Строка.Контрагент;
		КонтрагентID = Строка.КонтрагентID;
		КонтрагентТип = Строка.КонтрагентТип;
		КонтактноеЛицо = Строка.КонтактноеЛицо;
		КонтактноеЛицоID = Строка.КонтактноеЛицоID;
		КонтактноеЛицоТип = Строка.КонтактноеЛицоТип;
		ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
		ПодписалОтКонтрагентаID = Строка.ПодписалОтКонтрагентаID;
		ПодписалОтКонтрагентаТип = Строка.ПодписалОтКонтрагентаТип;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти