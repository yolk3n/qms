
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЕстьПравоНастройкиОбмена         = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ИспользуютсяДоговорыКонтрагентов = ИнтеграцияЭДО.ИспользуютсяДоговорыКонтрагентов();
	
	Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Видимость      = ЕстьПравоНастройкиОбмена;
	Элементы.НастройкиОтправкиСоздатьНастройкуПрямогоОбмена.Видимость = ЕстьПравоНастройкиОбмена;
	Элементы.НастройкиОтправкиОбновитьСтатусыПодключения.Видимость    = ЕстьПравоНастройкиОбмена;
	Элементы.ИнтеркампаниСоздатьНастройкуИнтеркампани.Видимость       = ЕстьПравоНастройкиОбмена;
	Элементы.НастройкиПолученияСоздатьНастройкуПолучения.Видимость    = ЕстьПравоНастройкиОбмена;
	Элементы.СоздатьНастройкуВнутреннегоЭДО.Видимость                 = ЕстьПравоНастройкиОбмена;
	Элементы.НастройкиОтправкиДоговор.Видимость                       = ИспользуютсяДоговорыКонтрагентов;
	
	НастроитьОтображениеСтраницСервер();
	УправлениеДоступностьюЭлементовУправления();
	
	Если ЗначениеЗаполнено(Параметры.Источник) Тогда
	
		Элементы.Отборы.Видимость = Ложь;
		ИмяСправочникаКонтрагенты = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
		ИмяСправочникаОрганизации = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Организации");
		ИмяСправочникаПартнеры = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Партнеры");
		
		Если ТипЗнч(Параметры.Источник) = Тип("СправочникСсылка." + ИмяСправочникаКонтрагенты) Тогда
			Контрагент = Параметры.Источник;
			УстановитьОтборыКонтрагентаВДинамическихСписках(ЭтотОбъект);
		ИначеЕсли ТипЗнч(Параметры.Источник) = Тип("СправочникСсылка." + ИмяСправочникаОрганизации) Тогда
			Организация = Параметры.Источник;
			УстановитьОтборыОрганизацииВДинамическихСписках(ЭтотОбъект);
		ИначеЕсли ТипЗнч(Параметры.Источник) = Тип("СправочникСсылка." + ИмяСправочникаПартнеры) Тогда
			Партнер = Параметры.Источник;
			УстановитьОтборыПартнераВДинамическихСписках(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	ИмяРеквизитаПартнераКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УстановитьОтборыОрганизацииВДинамическихСписках(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		УстановитьОтборыКонтрагентаВДинамическихСписках(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусПриглашения) Тогда
		УстановитьОтборыСтатусаПодключенияВДинамическихСписках(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		УстановитьОтборыПартнераВДинамическихСписках(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьТекущиеДелаЭДО"
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений"
		ИЛИ ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.НастройкиОтправки.Обновить();
		Элементы.НастройкиПолучения.Обновить();
		Если Элементы.МеждуСвоимиОрганизациями.Видимость Тогда
			Элементы.Интеркампани.Обновить();
		КонецЕсли;
		Если Элементы.СтраницаНастройкиВнутреннегоЭДО.Видимость Тогда
			Элементы.НастройкиВнутреннегоЭДО.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		Если Источник = "ИспользоватьОбменЭДМеждуОрганизациями"
			ИЛИ Источник = "ИспользоватьПрямойОбменЭлектроннымиДокументами"
			Или Источник = "ИспользоватьВнутренниеДокументыЭДО" Тогда
			
			НастроитьОтображениеСтраницСервер();
			
		КонецЕсли;
		
	КонецЕсли;

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияБЭДКлиент.ЗаблокироватьОткрытиеФормыНаМобильномКлиенте(Отказ);
	ОбработкаНеисправностейБЭДКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки,
		АдресЭлектроннойПочтыСлужбыПоддержки);
	Элементы.Техподдержка.Заголовок =
		ОбработкаНеисправностейБЭДКлиент.СформироватьГиперссылкуДляОбращенияВСлужбуПоддержки();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборыОрганизацииВДинамическихСписках(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации());
	
	СформироватьКонтекст(ОбновляемыеКатегории);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьОтборыКонтрагентаВДинамическихСписках(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПодключенияПриИзменении(Элемент)
	УстановитьОтборыСтатусаПодключенияВДинамическихСписках(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	УстановитьОтборыПартнераВДинамическихСписках(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиОтправки

&НаКлиенте
Процедура НастройкиОтправкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекущиеДанные.ЭтоПрямойОбмен Тогда
		ОткрытьФормуНастроекПрямогоОбмена();
	Иначе
		ОткрытьФормуНастроекОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкиОтправкиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ТекущиеДанные = ТекущаяСтрока.Значение.Данные;
		
		СтандартныйРежим = Истина;
		Если ТекущиеДанные.КоличествоИдентификаторовОтправителя > 1 Тогда
			СтандартныйРежим = Ложь;
			ТекущиеДанные.ИдентификаторОтправителя = ПредставлениеИдентификатораРасширенныйРежим(
				ТекущиеДанные.КоличествоИдентификаторовОтправителя);
		КонецЕсли;
		
		Если ТекущиеДанные.КоличествоИдентификаторовПолучателя > 1 Тогда
			СтандартныйРежим = Ложь;
			ТекущиеДанные.ИдентификаторПолучателя = ПредставлениеИдентификатораРасширенныйРежим(
				ТекущиеДанные.КоличествоИдентификаторовПолучателя);
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоПрямойОбмен Тогда
			ТекущиеДанные.СтатусПриглашенияПредставление = НСтр("ru = '<Не требуется>'");
			Продолжить;
		КонецЕсли;
		
		Если СтандартныйРежим Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = 0;
		Если ТекущиеДанные.КоличествоОшибка Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Ошибка;
			Количество = ТекущиеДанные.КоличествоОшибка;
		ИначеЕсли ТекущиеДанные.КоличествоТребуетсяСогласие Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие;
			Количество = ТекущиеДанные.КоличествоТребуетсяСогласие;
		ИначеЕсли ТекущиеДанные.КоличествоТребуетсяОтправить Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
			Количество = ТекущиеДанные.КоличествоТребуетсяОтправить;
		ИначеЕсли ТекущиеДанные.КоличествоОтклонено Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Отклонено;
			Количество = ТекущиеДанные.КоличествоОтклонено;
		ИначеЕсли ТекущиеДанные.КоличествоОжидаемСогласия Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
			Количество = ТекущиеДанные.КоличествоОжидаемСогласия;
		ИначеЕсли ТекущиеДанные.КоличествоНастройкаРоуминга Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.НастройкаРоуминга;
			Количество = ТекущиеДанные.КоличествоНастройкаРоуминга;
		ИначеЕсли ТекущиеДанные.КоличествоНеТребуется Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.НеТребуется;
			Количество = ТекущиеДанные.КоличествоНеТребуется;
		Иначе
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Принято;
		КонецЕсли;
		
		Если Количество > 0 Тогда
			ТекущиеДанные.СтатусПриглашенияПредставление = СтрШаблон("%1 (%2)", СтатусПриглашения, Количество);
		Иначе
			ТекущиеДанные.СтатусПриглашенияПредставление = Строка(СтатусПриглашения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПолучения

&НаКлиенте
Процедура НастройкиПолученияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастроекПолучения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПолучения

&НаКлиенте
Процедура ИнтеркампаниВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастроекИнтеркампани();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСтатусыПодключения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьСтатусыНастроекПослеАвторизации", ЭтотОбъект);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();	
	СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(Оповещение, КонтекстДиагностики);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуОтправки(Команда)
	ОткрытьФормуНастроекОтправки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуПолучения(Команда)
	ОткрытьФормуНастроекПолучения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуИнтеркампани(Команда)
	ОткрытьФормуНастроекИнтеркампани(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуПрямогоОбмена(Команда)
	ОткрытьФормуНастроекПрямогоОбмена(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбработкаНеисправностейБЭДКлиент.ОткрытьСтраницуСервиса1СКоннект();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = НастройкиПолучения.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Все учетные записи>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИдентификаторКонтрагента");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = НастройкиПолучения.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Все учетные записи>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторОрганизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИдентификаторОрганизации");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

	ЭлементУсловногоОформления = НастройкиВнутреннегоДО.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НастройкиВнутреннегоЭДОКлиентСервер.ВидЭлектроннойПодписиПоВидамДокументов());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидПодписи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ВидПодписи");

КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеСтраницСервер()
	
	ИспользуетсяДополнительнаяАналитикаПартнеры    = ИнтеграцияЭДО.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	ИспользоватьОбменЭДМеждуОрганизациями          = НастройкиЭДО.ОбменЭлектроннымиДокументамиМеждуОрганизациями();
	ИспользоватьВнутренниеДокументы                = НастройкиВнутреннегоЭДО.ИспользуютсяВнутренниеДокументы();
	ИспользуетсяПрямойОбменЭлектроннымиДокументами = НастройкиЭДО.ИспользуетсяПрямойОбменЭлектроннымиДокументами();
	Элементы.МеждуСвоимиОрганизациями.Видимость = ИспользоватьОбменЭДМеждуОрганизациями;
	Элементы.СтраницаНастройкиВнутреннегоЭДО.Видимость = ИспользоватьВнутренниеДокументы;
	
	Элементы.Партнер.Видимость = Ложь;
	Если ИспользуетсяДополнительнаяАналитикаПартнеры
		И НастройкиЭДО.ИспользуютсяПартнерыИКонтрагенты() Тогда
		
		Элементы.Партнер.Видимость = Истина;
	КонецЕсли;
	
	Если ИспользуетсяПрямойОбменЭлектроннымиДокументами Тогда
		Элементы.НастройкиОтправкиГруппаСоздать.Вид = ВидГруппыФормы.Подменю;
		Элементы.НастройкиОтправкиГруппаСоздать.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
		Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Заголовок = НСтр("ru = 'настройку обмена через сервис ЭДО'");
		Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Картинка = БиблиотекаКартинок.Пустая;
	Иначе
		Элементы.НастройкиОтправкиГруппаСоздать.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Заголовок = НСтр("ru = 'Создать'");
		Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	КонецЕсли;
	
	НастройкиОтправки.Параметры.УстановитьЗначениеПараметра("ИспользоватьПрямойОбмен",
		ИспользуетсяПрямойОбменЭлектроннымиДокументами);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюЭлементовУправления()
	
	ЕстьПравоИзменения = НастройкиОтправкиЭДО.ЕстьПравоИзмененияНастроекОтправки();
	
	Элементы.НастройкиОтправкиСоздатьНастройкуОтправки.Доступность = ЕстьПравоИзменения;
	Элементы.НастройкиОтправкиСоздатьНастройкуПрямогоОбмена.Доступность = ЕстьПравоИзменения;
	Элементы.НастройкиПолученияСоздатьНастройкуПолучения.Доступность = ЕстьПравоИзменения;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФормыНастроек

&НаКлиенте
Процедура ОткрытьФормуНастроекОтправки(ФормаСоздания = Ложь)
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	
	Если ФормаСоздания Тогда
		
		КлючНастроек.Отправитель = Организация;
		КлючНастроек.Получатель = Контрагент;
		
	Иначе
		
		ТекущиеДанные = Элементы.НастройкиОтправки.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КлючНастроек.Отправитель = ТекущиеДанные.Организация;
		КлючНастроек.Получатель = ТекущиеДанные.Контрагент;
		КлючНастроек.Договор = ТекущиеДанные.Договор;
		
	КонецЕсли;
	
	ПараметрыФормы = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастроекОтправки();
	ПараметрыФормы.КлючНастроекОтправки = КлючНастроек;
	ПараметрыФормы.Создание = ФормаСоздания;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	
	НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуОтправки(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПолучения(ФормаСоздания = Ложь)
	
	ПараметрыФормы = НастройкиОтраженияВУчетеЭДОКлиент.НовыеПараметрыФормыНастройкиОтраженияВУчете();
	
	Если ФормаСоздания Тогда
		ПараметрыФормы.Создание = Истина;
		ПараметрыФормы.Организация = Организация;
		ПараметрыФормы.Контрагент = Контрагент;
	Иначе
		
		ТекущиеДанные = Элементы.НастройкиПолучения.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Организация = ТекущиеДанные.Организация;
		ПараметрыФормы.Контрагент = ТекущиеДанные.Контрагент;
		ПараметрыФормы.ИдентификаторКонтрагента = ТекущиеДанные.ИдентификаторКонтрагента;
		ПараметрыФормы.ИдентификаторОрганизации = ТекущиеДанные.ИдентификаторОрганизации;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	
	НастройкиОтраженияВУчетеЭДОКлиент.ОткрытьНастройкуОтраженияВУчете(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекИнтеркампани(ФормаСоздания = Ложь)
	
	ПараметрыФормы = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастроекИнтеркампани();
	
	Если ФормаСоздания Тогда
		ПараметрыФормы.Создание = Истина;
		ПараметрыФормы.Отправитель = Организация;
	Иначе
		
		ТекущиеДанные = Элементы.Интеркампани.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Отправитель = ТекущиеДанные.Отправитель;
		ПараметрыФормы.Получатель = ТекущиеДанные.Получатель;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	
	НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуИнтеркампани(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПрямогоОбмена(ФормаСоздания = Ложь)
	
	ПараметрыФормы = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастройкиПрямогоОбмена();
	Если ФормаСоздания Тогда
		ПараметрыФормы.Организация = Организация;
		ПараметрыФормы.Контрагент = Контрагент;
	Иначе
		ТекущиеДанные = Элементы.НастройкиОтправки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Организация = ТекущиеДанные.Организация;
		ПараметрыФормы.Контрагент = ТекущиеДанные.Контрагент;
		ПараметрыФормы.Договор = ТекущиеДанные.Договор;
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	
	НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуПрямогоОбмена(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОтборами

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыОрганизацииВДинамическихСписках(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиОтправки, "Организация",
		Форма.Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиПолучения, "Организация",
		Форма.Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Интеркампани, "Отправитель",
		Форма.Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиВнутреннегоДО, "Организация",
		Форма.Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Организация));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыКонтрагентаВДинамическихСписках(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиОтправки, "Контрагент",
		Форма.Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Контрагент));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиПолучения, "Контрагент",
		Форма.Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.Контрагент));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыСтатусаПодключенияВДинамическихСписках(Форма)

	Если Форма.СтатусПриглашения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.НеТребуется") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.НастройкиОтправки, "СтатусПриглашенияСсылка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиОтправки, "ЭтоПрямойОбмен",
			Истина, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.СтатусПриглашения));
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.НастройкиОтправки, "ЭтоПрямойОбмен");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиОтправки, "СтатусПриглашенияСсылка",
			Форма.СтатусПриглашения, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.СтатусПриглашения));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыПартнераВДинамическихСписках(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиОтправки,
		"Контрагент." + Форма.ИмяРеквизитаПартнераКонтрагента, Форма.Партнер, ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Форма.Партнер));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.НастройкиПолучения,
		"Контрагент." + Форма.ИмяРеквизитаПартнераКонтрагента, Форма.Партнер, ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Форма.Партнер));
		
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОбновитьСтатусыНастроекПослеАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...'");
	Состояние(НСтр("ru = 'Получение.'"), , ТекстСообщения);
	
	ОбновитьСтатусыНастроекНаСервере(РезультатАвторизации.КлючиСинхронизации, РезультатАвторизации.КонтекстДиагностики);
	
	Оповестить("ОбновитьСостояниеПриглашений");
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатАвторизации.КонтекстДиагностики);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСтатусыНастроекНаСервере(КлючиСинхронизации, КонтекстДиагностики)
	
	СинхронизацияЭДО.ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеИдентификатораРасширенныйРежим(Количество)
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 идентификатор;;%1 идентификатора;%1 идентификаторов;%1 идентификатора'"), Количество);
КонецФункции

#Область КонтекстныеПодсказки

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭДПовтИсп.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

&НаКлиенте
Процедура НастройкиВнутреннегоЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиВнутреннегоЭДОКлиент.ОткрытьНастройкуВнутреннегоЭлектронногоДокументооборота(Элементы.НастройкиВнутреннегоЭДО.ТекущиеДанные.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуВнутреннегоЭДО(Команда)
	
	НастройкиВнутреннегоЭДОКлиент.ОткрытьНастройкуВнутреннегоЭлектронногоДокументооборота(Организация);
	
КонецПроцедуры

#КонецОбласти
