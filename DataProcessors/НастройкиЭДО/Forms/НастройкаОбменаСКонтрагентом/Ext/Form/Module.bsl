#Область ОписаниеПеременных

&НаКлиенте
Перем ОтправкаПриглашенияЧерезПомощник;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ТекстСообщения = НСтр("ru = 'Обмен с контрагентом не настроен. Выполните настройку в настольном приложении.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	Если Параметры.Свойство("КлючНастроек") И Параметры.КлючНастроек <> Неопределено Тогда
		КлючНастроекОтправки = Параметры.КлючНастроек;
	КонецЕсли;
	
	КлючиНастроекОтправки = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастроекОтправки));
	
	Организация = КлючНастроекОтправки.Отправитель;
	Контрагент = КлючНастроекОтправки.Получатель;
	ДоговорКонтрагента = КлючНастроекОтправки.Договор;
	ВидДокумента = КлючНастроекОтправки.ВидДокумента;
	
	НастройкаОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
	ЭтоРедактированиеСуществующейНастройки = НастройкаОтправки <> Неопределено;
	
	Параметры.Свойство("РасширенныйРежимНастройки"        , РасширенныйРежимНастройки);
	Параметры.Свойство("НастройкаДокумента"               , НастройкаДокумента);
	Параметры.Свойство("ВыборУчетныхЗаписей"              , ВыборУчетныхЗаписей);
	Параметры.Свойство("ПоказыватьДополнительныеНастройки", ПоказыватьДополнительныеНастройки);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НастройкаРегламентаЭДО", Ложь)
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВыборУчетныхЗаписей", Ложь) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НастройкаРегламентаЭДО", Ложь) Тогда
			СкрыватьНастройкиТранспорта = Не РасширенныйРежимНастройки;
		КонецЕсли;
		Параметры.Свойство("ИдентификаторОтправителя" , ИдентификаторОтправителя);
		Параметры.Свойство("ИдентификаторПолучателя"  , ИдентификаторПолучателя);
		Параметры.Свойство("Формат"                   , НастройкаФорматЭД);
		Параметры.Свойство("МаршрутПодписания"        , НастройкаПодписьПоМаршруту);
		Параметры.Свойство("ТребуетсяПодтверждение"   , НастройкаОжидатьОтветнуюПодпись);
		Параметры.Свойство("ТребуетсяИзвещение"       , НастройкаОжидатьИзвещение);
		Параметры.Свойство("ВыгружатьДопСведения"     , НастройкиВыгружатьДопСведения);
		Параметры.Свойство("ЗаполнениеКодаТовара"     , ЗаполнениеКодаТовара);
		Параметры.Свойство("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
		Параметры.Свойство("НастройкаРегламентаЭДО"   , НастройкаРегламентаЭДО);
		Параметры.Свойство("ПодтверждениеОбязательно" , ПодтверждениеОбязательно);
		Параметры.Свойство("ВерсияФорматаУстановленаВручную"   , НастройкиВерсияФорматаУстановленаВручную);
		Параметры.Свойство("СпособОбмена"             , СпособОбмена);
		Параметры.Свойство("Формировать"              , Формировать);
		Параметры.Свойство("ОбменБезПодписи"          , ОбменБезПодписи);
	Иначе
		Если НастройкаОтправки <> Неопределено Тогда
			ИдентификаторОтправителя = НастройкаОтправки.ИдентификаторОтправителя;
			ИдентификаторПолучателя = НастройкаОтправки.ИдентификаторПолучателя;
			НастройкаФорматЭД = НастройкаОтправки.Формат;
			НастройкаПодписьПоМаршруту = НастройкаОтправки.МаршрутПодписания;
			НастройкаОжидатьОтветнуюПодпись = НастройкаОтправки.ТребуетсяОтветнаяПодпись;
			НастройкаОжидатьИзвещение = НастройкаОтправки.ТребуетсяИзвещениеОПолучении;
			НастройкиВыгружатьДопСведения = НастройкаОтправки.ВыгружатьДополнительныеСведения;
			ЗаполнениеКодаТовара = НастройкаОтправки.ЗаполнениеКодаТовара;
			НастройкиВерсияФорматаУстановленаВручную = НастройкаОтправки.ВерсияФорматаУстановленаВручную;
			СпособОбмена = НастройкаОтправки.СпособОбмена;
			Формировать = НастройкаОтправки.Формировать;
			ОбменБезПодписи = НастройкаОтправки.ОбменБезПодписи;
		КонецЕсли;
	КонецЕсли;
	
	ПредварительнаяНастройка = Не ВыборУчетныхЗаписей И Не НастройкаДокумента И Не НастройкаРегламентаЭДО;
	
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	
	Если ПредварительнаяНастройка
			И Не ЕстьПравоНастройкиОбмена Тогда
				ШаблонСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
	                                   |Организация - %1.
	                                   |Контрагент - %2.
	                                   |Недостаточно прав для выполнения операции. Обратитесь к администратору.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация, Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
	КонецЕсли;
	
	Если КриптографияБЭД.ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		ДоступенОблачныйСервис = Истина;
		ПользователюДоступенНеоблачныйСертификат = ПользователюДоступенНеоблачныйСертификат();
	КонецЕсли;
	
	УстановитьДоступность();
	ИнициализироватьПараметрыВыбора();
	ЗаполнитьПрограммыЭлектроннойПодписиИШифрования();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	ИнициализацияФормы();
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	ИнициализироватьНастройкиФормированияДокумента();
	
	Элементы.ПроверкаВыполнена.Видимость      = Ложь;
	Элементы.РедактированиеНастроек.Видимость = Ложь; 
	Элементы.ОжиданиеПроверки.Видимость       = Истина;
	
	// Начальная проверка
	Если Не ПредварительнаяНастройка Тогда
		ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
		УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
		Элементы.НастройкиВерсияФорматаУстановленаВручную.Видимость = Не НастройкаДокумента;
	КонецЕсли;
	
	Элементы.ГруппаДругиеНастройки.Видимость = ПоказыватьДополнительныеНастройки И НастройкаРегламентаЭДО
		И НастройкаФорматЭД <> "";
		
	УстановитьТекстОписанияНастройки(ЭтотОбъект);
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	СформироватьПредставлениеСтрокиСохраненияНастроек(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПанельКонтекстныхНовостей);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьУстановленныеПрограммы();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СертификатыКлючейЭлектроннойПодписиИШифрования"
		Или ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО"
		Или ОбщегоНазначенияБЭДКлиент.ЭтоСобытиеИзменениеОбъекта(Контрагент, ИмяСобытия) Тогда
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеПриглашений"
		И ОтправкаПриглашенияЧерезПомощник <> Истина Тогда
		ПроверкаИдентификаторАбонента = Ложь;
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Если ПредварительнаяНастройка Тогда
		
		МассивУдаляемыхРеквизитов.Добавить("ИдентификаторПолучателя");
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
		
	КонецЕсли;
	
	Если ВыборУчетныхЗаписей Тогда
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивУдаляемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьОшибкаРоумингаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОткрытьСтраницуТехническойПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодробнееНажатие(Элемент)
	
	Строки = ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", НастройкаФорматЭД));
	Если Строки.Количество() > 0 Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Строки[0].СсылкаНаПриказОВведенииФормата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИдентификаторЭДО = СокрЛП(Текст);
	
	Если Не ПустаяСтрока(ИдентификаторЭДО) Тогда
		Элементы.ИдентификаторПолучателя.СписокВыбора.Добавить(ИдентификаторЭДО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяПриИзменении(Элемент)
	
	ИдентификаторПолучателя = СокрЛП(ИдентификаторПолучателя);
	
	Если ИдентификаторПолучателяКорректный(ЭтотОбъект) Тогда
		НастройкиИзменены = Истина;
		ПараметрыПриглашения = ПолучитьПараметрыПриглашения(ЭтотОбъект, Ложь);
		ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект, ПараметрыПриглашения);
		ПодобратьФорматКонтрагента();
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДПриИзменении(Элемент)
	
	ПриИзмененииФорматаВручную();
	ПриИзмененииФормата();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	СпособОбмена = СпособОбменаАбонентаЭДОНаСервере(ИдентификаторОтправителя);
	ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект);
	ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПоМаршрутуПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьИзвещениеПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьОтветнуюПодписьПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
	Если Не НастройкаОжидатьОтветнуюПодпись Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОжидатьОтветнуюПодписьЗавершение", ЭтотОбъект);
		НастройкиЭДОКлиент.ЗапроситьПодтверждениеОтключенияОжиданияОтветнойПодписи(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгружатьДопСведенияПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	
	Если Не НастройкиВыгружатьДопСведения Тогда
		
		ТекстВопроса = НСтр("ru = 'Отключение выгрузки дополнительных сведений может привести к проблемам при загрузке документа у получателя. Рекомендуется проконсультироваться у специалистов технической поддержки.
                             |Вы действительно хотите отключить выгрузку дополнительных сведений?'");
		
		Описание = Новый ОписаниеОповещения("ВопросВыгружатьДопСведенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОбратитьВниманиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыОткрытия.Предупреждения = ПредупрежденияПоНастройке(КлючНастроекОтправки, ИдентификаторПолучателя);
	ПараметрыОткрытия.ФормаВладелец = ЭтотОбъект;
	ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Неопределено, ПараметрыОткрытия)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНастройкиЗаполненияДополнительныхПолейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
	НастройкиОтправкиЭДОКлиент.ОткрытьНастройкиЗаполненияДополнительныхПолей(ТекущаяНастройкаОтправки(), Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияУчетнойЗаписи", ЭтотОбъект);
	СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(ИдентификаторОтправителя, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НастройкаФорматЭД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаДокумента
			И Не НастройкиВерсияФорматаУстановленаВручную Тогда
			
		СтандартнаяОбработка = Ложь;
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаКорректировкиФормата", ЭтотОбъект, ВыбранноеЗначение);
	
		ПоказатьВопрос(Описание, НСтр("ru = 'В случае ручной корректировки будет отключен автоматический подбор формата, наиболее оптимального для обмена с выбранным контрагентом.
                           |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВерсияФорматаУстановленаВручнуюПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТребуетсяНастройкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОтправитьПриглашение" Тогда
		ОткрытьПомощникОтправкиПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОжиданиеНастройкиРоумингаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьТекущиеДелаЭДО" Тогда
		ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашениеКонтрагентаКОбменуПояснениеОжиданиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьПриглашение" Тогда
		ОткрытьПриглашение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПриглашениеУжеОтправленоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьПриглашение" Тогда
		ОткрытьПриглашение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПоМаршрутуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыборМаршрутаЗавершение", ЭтотОбъект);
	
	Отбор = МаршрутыПодписанияБЭДКлиент.НовыйОтборМаршрутовПодписания();
	Отбор.Организация = Организация;
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ОднойДоступнойПодписью"));
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ПоПравилам"));
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.УказыватьПриСоздании"));
	Отбор.ВидПодписи = ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная"); 
	
	МаршрутыПодписанияБЭДКлиент.ВыбратьМаршрутПодписания(Отбор, НастройкаПодписьПоМаршруту,
		ЭтотОбъект.УникальныйИдентификатор, Оповещение); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРасширение(Команда)
	
	Описание = Новый ОписаниеОповещения("ПослеУстановкиРасширения", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьCryptoPRO(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	КриптографияБЭДКлиент.УстановитьCryptoPRO(ОповещениеОЗавершении, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьVipNet(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	КриптографияБЭДКлиент.УстановитьVipNet(ОповещениеОЗавершении, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказатьСертификат(Команда)
	
	ПараметрыДобавления = ЭлектроннаяПодписьКлиент.ПараметрыДобавленияСертификата();
	ПараметрыДобавления.Организация = Организация;
	ПараметрыДобавления.СоздатьЗаявление = Истина;
	ПараметрыДобавления.ИзЛичногоХранилища = Ложь;
	ЭлектроннаяПодписьКлиент.ДобавитьСертификат(, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ПараметрыДобавления = ЭлектроннаяПодписьКлиент.ПараметрыДобавленияСертификата();
	ПараметрыДобавления.Организация = Организация;
	ПараметрыДобавления.СоздатьЗаявление = Ложь;
	ПараметрыДобавления.ИзЛичногоХранилища = Истина;
	ЭлектроннаяПодписьКлиент.ДобавитьСертификат(, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрироваться(Команда)
	
	ПараметрыСоздания = СинхронизацияЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСоздания.Организация = Организация;
	ПараметрыСоздания.ВладелецФормы = ЭтаФорма;
	СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатЗавершение", ЭтотОбъект);
	
	ПараметрыРегистрации = СинхронизацияЭДОКлиент.НовыеПараметрыРегистрацииСертификатов();
	ПараметрыРегистрации.УчетныеЗаписи.Добавить(ИдентификаторОтправителя);
	ПараметрыРегистрации.Операция =
		СинхронизацияЭДОКлиент.ОперацииПомощникаРегистрацииСертификатов().Прочее;
	СинхронизацияЭДОКлиент.ОткрытьПомощникРегистрацииСертификатов(ПараметрыРегистрации, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИдентификаторВручную(Команда)
	ПроверкаИдентификаторАбонента = Не ПроверкаИдентификаторАбонента;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашениеЧерезПомощник(Команда)
	
	ОткрытьПомощникОтправкиПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашение()
	
	СоздаватьНастройкиЭДО = (Не НастройкаДокумента) ИЛИ СохранитьНастройки;
	
	Приглашение = СинхронизацияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
	Приглашение.ИдентификаторОрганизации = ИдентификаторОтправителя;
	Приглашение.ИдентификаторКонтрагента = ИдентификаторПолучателя;
	Приглашение.Организация              = Организация;
	Приглашение.Контрагент               = Контрагент;
	Приглашение.СоздаватьНастройкиЭДО    = СоздаватьНастройкиЭДО;
	
	ПриглашенияЭДОКлиент.АктуализироватьКлючПриглашенияПоНатуральнымКлючам(Приглашение);
	
	Приглашения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Приглашение);
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиПриглашения", ЭтотОбъект);
	СинхронизацияЭДОКлиент.ОтправитьПриглашения(Приглашения, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиПриглашения(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	БылоОтправленоПриглашение = РезультатОтправки.Успех;
	ЗавершитьРаботуМастера(РезультатОтправки);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяНастройкаОтправки()
	
	НастройкаОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
	НастройкаОтправки.Отправитель = Организация;
	НастройкаОтправки.Получатель = Контрагент;
	НастройкаОтправки.Договор = ДоговорКонтрагента;
	НастройкаОтправки.ВидДокумента = ВидДокумента;
	НастройкаОтправки.Формат = НастройкаФорматЭД;
	НастройкаОтправки.МаршрутПодписания = НастройкаПодписьПоМаршруту;
	НастройкаОтправки.ТребуетсяОтветнаяПодпись = НастройкаОжидатьОтветнуюПодпись;
	НастройкаОтправки.ТребуетсяИзвещениеОПолучении = НастройкаОжидатьИзвещение;
	НастройкаОтправки.ИдентификаторПолучателя = ИдентификаторПолучателя;
	НастройкаОтправки.ИдентификаторОтправителя = ИдентификаторОтправителя;
	НастройкаОтправки.ВыгружатьДополнительныеСведения = НастройкиВыгружатьДопСведения;
	НастройкаОтправки.ВерсияФорматаУстановленаВручную = НастройкиВерсияФорматаУстановленаВручную;
	НастройкаОтправки.ЗаполнениеКодаТовара = ЗаполнениеКодаТовара;
	НастройкаОтправки.СпособОбмена = СпособОбмена;
	НастройкаОтправки.Формировать = Формировать;
	НастройкаОтправки.ОбменБезПодписи = ОбменБезПодписи;
	
	Возврат НастройкаОтправки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраненнаяНастройкаОтправки(КлючНастроекОтправки)
	
	Возврат НастройкиОтправкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
КонецФункции

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Если ТребуетсяОтправкаПриглашения(ЭтаФорма) Тогда
		
		Если Не ЕстьПравоНастройкиОбмена Тогда
			ТекстСообщения = НСтр("ru = 'По выбранным учетным записям связь не настроена.
			|Недостаточно прав для отправки приглашения. Обратитесь к администратору'");
			Элементы.ФормаПодключить.Доступность = Истина;
			Элементы.ФормаПодключить.Картинка    = Новый Картинка;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Контрагент);
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(КонтрагентИНН) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У контрагента %1 не указан ИНН.'"), Контрагент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Контрагент);
			Элементы.ФормаПодключить.Доступность = Истина;
			Элементы.ФормаПодключить.Картинка    = Новый Картинка;
			Возврат;
		КонецЕсли;
		
		ОтправитьПриглашение();
		Возврат;
		
	ИначеЕсли ПредварительнаяНастройка И ПроверкаОтправкаПриглашений = "Отправлено"
		И ЗначениеЗаполнено(ИдентификаторПолучателя)
		И ОтправкаПриглашенияЧерезПомощник <> Истина Тогда
		
		Отказ = Ложь;
		СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Неопределено, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить настройки обмена документами.
				|Подробнее см. в журнале регистрации'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьРаботуМастера(Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Договор, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
	
	НастройкиОтправкиЭДО.СоздатьНастройкиОтправки(Организация, Контрагент, Договор,
		ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
	НастройкиОтраженияВУчетеЭДО.СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, "", "");
	
КонецПроцедуры

#Область ВизуальноеОформление

&НаСервере
Процедура ИнициализацияФормы()
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	ПроверкаСертификатУстановлен      = "Требуется";
	ПроверкаРегистрацияУОператора     = "Требуется";
	ПроверкаПриглашенияКонтрагента    = "Требуется";
	ПроверкаОтправкаПриглашений       = "Требуется";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстОписанияНастройки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияОписаниеНастройки.Видимость = Ложь;
	МассивСтрок = Новый Массив;
	
	Если Форма.ПредварительнаяНастройка Тогда
		
		Шаблон = НСтр("ru = 'Обмен между %1 и %2 еще не настроен. Выполните этапы настройки, чтобы отправить документ.'");
		
		МассивСтрок.Добавить(СтрШаблон(Шаблон, Форма.Организация, Форма.Контрагент));
		
		Элементы.ДекорацияОписаниеНастройки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеНастройки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭтапыМастераНастройкиПодключения(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ДоступенОблачныйСервис И (Форма.ПроверкаКриптопровайдерУстановлен = "Требуется") Тогда
		Если Форма.ПользователюДоступенНеоблачныйСертификат Тогда
			Форма.ПроверкаКриптопровайдерУстановлен = "Облачный"
		Иначе
			Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
		КонецЕсли;
	КонецЕсли;

	ВсеГотовоКУстановкеСвязи = (Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено"
									ИЛИ Форма.ПроверкаКриптопровайдерУстановлен = "Облачный")
								И Форма.ПроверкаСертификатУстановлен  = "Выполнено"
								И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
	
	Если Не Форма.ПредварительнаяНастройка
		И ВсеГотовоКУстановкеСвязи Тогда
		
		Элементы.ГруппаУстановкаКриптопровайдера.Видимость = Ложь;
		Элементы.ГруппаПолучениеСертификатов.Видимость = Ложь;
		
		Элементы.РегистрацияУОператораТребуется.Видимость = Ложь;
		Элементы.РегистрацияУОператораИндикаторВыполнено.Видимость = Ложь;
		Элементы.ПолучениеСертификатовВыполненоПояснениеРегистрация.Видимость = Ложь;
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость = Ложь;
		Элементы.РегистрацияУОператораВыполнено.Видимость = Не Форма.СкрыватьНастройкиТранспорта;
		
		Элементы.ИдентификаторОтправителя.Заголовок = НСтр("ru = 'Учетная запись организации'");
		
		Элементы.ГруппаПриглашенияКонтрагента.Доступность = Истина;
		Элементы.ГруппаДопПоляПриглашения.Видимость = Ложь;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Ложь;
		Элементы.УчетнаяЗаписьАбонента.Видимость = Не Форма.СкрыватьНастройкиТранспорта;
		Элементы.ОтступУчетнаяЗаписьАбонента.Видимость = Ложь;
		
		Элементы.ИдентификаторПолучателя.Заголовок = НСтр("ru = 'Учетная запись контрагента'");
		Элементы.ГруппаНадписьИдентификаторПолучателяНекорректный.Ширина = 44;
	Иначе
	
		Элементы.РегистрацияУОператораТребуется.Видимость = Истина;
		Элементы.РегистрацияУОператораИндикаторВыполнено.Видимость = Истина;
		Элементы.ПолучениеСертификатовВыполненоПояснениеРегистрация.Видимость = Истина;
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость = Истина;
		
		Элементы.ИдентификаторОтправителя.Заголовок = НСтр("ru = 'Учетная запись'");
		
		Элементы.ГруппаДопПоляПриглашения.Видимость = Истина;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Истина;
		Элементы.ОтступУчетнаяЗаписьАбонента.Видимость = Истина;
		
		Элементы.ИдентификаторПолучателя.Заголовок  = НСтр("ru = 'Учетная запись'");
		Элементы.ГруппаНадписьИдентификаторПолучателяНекорректный.Ширина = 36;
		
		// Проверка доступности криптопровайдеров
		Элементы.УстановкаКриптопровайдераТребуется.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Требуется";
		Элементы.УстановкаКриптопровайдераВыполнено.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
		Элементы.УстановкаКриптопровайдераОшибка.Видимость    = Форма.ПроверкаКриптопровайдерУстановлен = "Ошибка";
		Элементы.ЕстьОблачныйКриптопровайдер.Видимость        = Форма.ПроверкаКриптопровайдерУстановлен = "Облачный";
		
		// Проверка доступности сертификатов
		Элементы.ГруппаПолучениеСертификатов.Доступность      = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено"
			Или Форма.ПроверкаКриптопровайдерУстановлен = "Облачный";
		Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт = ?(Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено"
			Или Форма.ПроверкаКриптопровайдерУстановлен = "Облачный",
			Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт,,,Истина), Новый Шрифт);
		Элементы.ПолучениеСертификатовТребуется.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Требуется";
		Элементы.ПолучениеСертификатовВыполнено.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Выполнено";
		Элементы.ПолучениеСертификатовОжидание.Видимость      = Форма.ПроверкаСертификатУстановлен      = "Ожидание";
		
		// Проверка регистрации у оператора ЭДО
		Элементы.ГруппаРегистрацияУОператора.Доступность      = Форма.ПроверкаСертификатУстановлен      = "Выполнено"
			Или Не Форма.ПредварительнаяНастройка;
		Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт = ?(Форма.ПроверкаСертификатУстановлен  = "Выполнено", 
			Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт,,,Истина), Новый Шрифт);
		Элементы.РегистрацияУОператораТребуется.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Требуется";
		Элементы.РегистрацияУОператораВыполнено.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Выполнено"
			Или Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость =
			Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		Если Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов" Тогда
			Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		Иначе
			Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
		КонецЕсли;
		
		// Проверка идентификатора абонента ЭДО
		Элементы.ГруппаПриглашенияКонтрагента.Доступность     = Форма.ПроверкаРегистрацияУОператора  = "Выполнено";
		Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт = ?(Форма.ПроверкаРегистрацияУОператора = "Выполнено", 
			Новый Шрифт(Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт,,,Истина), Новый Шрифт);
		Элементы.ПриглашениеКонтрагентаТребуется.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Требуется";
		Элементы.ПриглашениеКонтрагентаВыполнено.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Выполнено";
		Элементы.ПриглашениеКонтрагентаОжидается.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Ожидание";
		
		Элементы.ОтправитьПриглашение.Видимость = Форма.ПроверкаПриглашенияКонтрагента = "Требуется"
			И Не Форма.ПроверкаИдентификаторАбонента;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Форма.ПроверкаПриглашенияКонтрагента <> "Выполнено"
			И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		
		Элементы.ВвестиДанныеИдентификатораВручную.Пометка = Форма.ПроверкаИдентификаторАбонента;
		
		Элементы.УчетнаяЗаписьАбонента.Видимость = Форма.ПроверкаИдентификаторАбонента
			И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		
	КонецЕсли;
	
	ИдентификаторПолучателяКорректный = ИдентификаторПолучателяКорректный(Форма);
	
	Если Элементы.УчетнаяЗаписьАбонента.Видимость Тогда
		ЭлементСписка = Элементы.ИдентификаторПолучателя.СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторПолучателя);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.КартинкаСтатусПриглашения.Картинка = ЭлементСписка.Картинка;
		КонецЕсли;
		Элементы.НадписьИдентификаторПолучателяНекорректный.Видимость = ЗначениеЗаполнено(Форма.ИдентификаторПолучателя)
			И Не ИдентификаторПолучателяКорректный;
		Элементы.Подробнее.Видимость = ИдентификаторПолучателяКорректный;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеРоуминга.Видимость = ВсеГотовоКУстановкеСвязи
		И (Форма.ПроверкаВозможностьРоуминга <> "Выполнено"
		И Форма.ПроверкаОтправкаПриглашений <> "Отправлено"
		Или Форма.ПредварительнаяНастройка И Форма.ПроверкаИдентификаторАбонента)
		И ИдентификаторПолучателяКорректный;
	
	Элементы.ГруппаТребуетсяНастройка.Видимость = Форма.ПроверкаВозможностьРоуминга = "Требуется"
		И Форма.ПроверкаОтправкаПриглашений <> "Отправлено";
	Элементы.ГруппаРоумингДоступен.Видимость    = Форма.ПроверкаВозможностьРоуминга = "Выполнено";
	Элементы.ГруппаОбратитьВнимание.Видимость   = Форма.ПроверкаВозможностьРоуминга = "Внимание";
	Элементы.ГруппаОшибкаРоуминга.Видимость     = Форма.ПроверкаВозможностьРоуминга = "Ошибка";
	
	Элементы.ГруппаПриглашениеУжеОтправлено.Видимость = Форма.ПроверкаОтправкаПриглашений = "Отправлено"
		И Форма.ПроверкаВозможностьРоуминга <> "Выполнено";
	
	Элементы.ГруппаОжиданиеНастройкиРоуминга.Видимость = Не Форма.ПредварительнаяНастройка
		И Форма.ПроверкаОтправкаПриглашений = "Отправлено"
		И Форма.ПроверкаВозможностьРоуминга = "Требуется";
	
	Элементы.ГруппаСохранитьНастройки.Видимость = Форма.ЕстьПравоНастройкиОбмена
		И Форма.НастройкаДокумента И Форма.НастройкиИзменены
		И (Форма.ПроверкаВозможностьРоуминга = "Выполнено"
			Или Форма.ПроверкаВозможностьРоуминга = "Внимание");
	
	// Управление кнопкой "Готово"
	Элементы.ФормаПодключить.Доступность = (ВсеГотовоКУстановкеСвязи Или Не ТребуетсяОтправкаПриглашения(Форма))
		И (Форма.ПроверкаВозможностьРоуминга = "Выполнено"
			Или Форма.ПроверкаВозможностьРоуминга = "Внимание")
		И (Форма.НастройкиИзменены
			Или Форма.ПредварительнаяНастройка)
		И ИдентификаторПолучателяКорректный;
	
	// Видимость основной формы
	Элементы.ОжиданиеПроверки.Видимость  = Ложь;
	Элементы.ПроверкаВыполнена.Видимость = Истина;
	Если Не Форма.ПредварительнаяНастройка Тогда
		Элементы.РедактированиеНастроек.Видимость = Истина;
		Элементы.НастройкаФорматЭД.ТолькоПросмотр = Не Форма.ЕстьПравоНастройкиОбмена И Не Форма.НастройкаДокумента;
		Если Форма.ФорматыЭД.Количество() > 0 Тогда			
			Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", Форма.НастройкаФорматЭД));
			Если Строки.Количество() > 0 Тогда
				Элементы.ДекорацияПодробнее.Видимость = Не ПустаяСтрока(Строки[0].СсылкаНаПриказОВведенииФормата);		
			КонецЕсли;			 
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.СкрыватьНастройкиТранспорта Тогда
		Элементы.ГруппаРегламентЭДО.Показать();
	КонецЕсли;
	
	Если Форма.ВыборУчетныхЗаписей Тогда
		Элементы.РедактированиеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаФорматЭД.Видимость = Элементы.НастройкаФорматЭД.СписокВыбора.Количество() > 0;
	Элементы.СохранитьНастройки.ОтображениеПодсказки = 
		?(Форма.НастройкаДокумента И Форма.НастройкиВерсияФорматаУстановленаВручную,
			ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыбора()
	
	// Параметры выбора маршрута.
	ВозможныеСхемыПодписания = Новый Массив;
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ОднойДоступнойПодписью);
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ПоПравилам);
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.УказыватьПриСоздании);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.СхемаПодписания", ВозможныеСхемыПодписания);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
	МассивПараметров.Добавить(ПараметрВыбора); 	
	
	ВозможныеОрганизации = Новый Массив;
	ВозможныеОрганизации.Добавить(Организация);
	ВозможныеОрганизации.Добавить(ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации"));

	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", ВозможныеОрганизации);
	МассивПараметров.Добавить(ПараметрВыбора); 
	
	Элементы.ПодписьПоМаршруту.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеРегламентаЭДО(Форма)
	
	МассивСтрок = Новый Массив;
	Текст       = "";
	
	Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", Форма.НастройкаФорматЭД));
	Если Строки.Количество() > 0 Тогда
		Форма.ЭтоСоставнойФормат = Строки[0].ВозможноИспользованиеУПД;
		МассивСтрок.Добавить(НСтр("ru = 'Регламент:'")+ " " + Строки[0].ПредставлениеФормата);
		МассивСтрок.Добавить(?(Форма.НастройкаОжидатьОтветнуюПодпись, НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
		Текст = СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	Форма.Элементы.ГруппаРегламентЭДО.ЗаголовокСвернутогоОтображения = Текст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСтрокиСохраненияНастроек(Форма)
	
	
	Шаблон  = НСтр("ru = 'Использовать эти настройки для последующих документов по контрагенту ""%1"" %2'");
	Договор = "";
	
	Если ЗначениеЗаполнено(Форма.ДоговорКонтрагента) Тогда 
		Договор = СтрШаблон(НСтр("ru = 'и договору ""%1""'"), Форма.ДоговорКонтрагента);
	КонецЕсли;
	
	Текст = СтрШаблон(Шаблон, Форма.Контрагент, Договор);
	Форма.Элементы.СохранитьНастройки.Заголовок = Текст;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКриптопровайдером

&НаСервере
Процедура ЗаполнитьПрограммыЭлектроннойПодписиИШифрования()
	
	Для Каждого Программа Из КриптографияБЭД.ОписанияПрограммЭлектроннойПодписиИШифрования() Цикл
		Программы.Добавить(Программа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьУстановленныеПрограммы()
	
	Описание = Новый ОписаниеОповещения("ПроверкаУстановкиРасширения", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		Описание = Новый ОписаниеОповещения("ПроверкаПрограммКриптографииЗакончена", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(Описание, Программы.ВыгрузитьЗначения(), Истина);
		Возврат;
		
	Иначе
		
		ПроверкаКриптопровайдерУстановлен = "Ошибка";
		
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПроверкаПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Выполнено Тогда
		Элементы.УстановитьVipNet.Доступность = Ложь;
		Элементы.УстановитьCryptoPRO.Доступность = Ложь;
	КонецЕсли;
	ОпределитьУстановленныеПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПрограммКриптографииЗакончена(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	ЕстьОшибки = Истина;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеПрограммы = Новый Соответствие;
	
	Для Каждого Программа Из Программы Цикл
		
		ИспользуемыеПрограммы.Вставить(Программа.Значение.ИмяПрограммы, Программа.Значение);
		
	КонецЦикла;
	
	Для Каждого Программа Из Результат Цикл
		
		Если Не Программа.Установлена Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыПрограммы = ИспользуемыеПрограммы.Получить(Программа.ИмяПрограммы);
		Если ПараметрыПрограммы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаКриптопровайдерУстановлен = "Выполнено";
		ЕстьОшибки = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьОшибки И ПредварительнаяНастройка И Не ДоступенОблачныйСервис Тогда
		ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьПолнуюПроверкуНастройкиОбмена", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОпределитьУстановленныеПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатамиИУчетнымиЗаписями

&НаКлиенте
Процедура ВыполнитьПолнуюПроверкуНастройкиОбмена()
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковСертификатовКлиента", ЭтотОбъект);
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковСертификатовКлиента(РезультатПолученияОтпечатков, ДополнительныеПараметры) Экспорт
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение", ЭтотОбъект);
	
	ПараметрыПолучения = НастройкиЭДОСлужебныйКлиент.НовыеПараметрыПолученияДанныхДляНастройкиСвязиСКонтрагентом();
	ПараметрыПолучения.ОтпечаткиСертификатов    = РезультатПолученияОтпечатков;
	ПараметрыПолучения.Организация              = Организация;
	ПараметрыПолучения.Контрагент               = Контрагент;
	ПараметрыПолучения.ИдентификаторОрганизации = ИдентификаторОтправителя;
	ПараметрыПолучения.ИдентификаторКонтрагента = ИдентификаторПолучателя;
	ПараметрыПолучения.ПриоритетПодключенные    = Истина;
	
	ДлительнаяОперация = ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(ПараметрыПолучения, УникальныйИдентификатор);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(Знач ПараметрыПолучения, Знач УникальныйИдентификатор)
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	Отпечатки = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(НСтр("ru = 'Получение данных для настройки связи ЭДО'"),
		КонтекстДиагностики, ПараметрыПолучения.ОтпечаткиСертификатов);
	ПараметрыПолучения.ОтпечаткиСертификатов = Отпечатки;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получить данные для настройки связи ЭДО'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"НастройкиЭДОСлужебный.ДанныеДляНастройкиСвязиСКонтрагентом", ПараметрыПолучения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
			И Результат.Статус = "Выполнено" Тогда
			
			ОбработатьРезультатыНастройкиСвязиСКонтрагентом(Результат.АдресРезультата);
			
	ИначеЕсли Результат <> Неопределено
				И Результат.Статус = "Ошибка" Тогда
				
				ТекстОшибки = НСтр("ru = 'Во время получения данных для настройки связи с абонентом ЭДО произошла ошибка.
                                   |Подробнее см. в журнале регистрации.'");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
				
	КонецЕсли;
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СерыйШарБЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыНастройкиСвязиСКонтрагентом(АдресРезультата)
	
	СтруктураОтвет = ПолучитьИзВременногоХранилища(АдресРезультата);// см. НастройкиЭДОСлужебный.ДанныеДляНастройкиСвязиСКонтрагентом
		
	Если ТипЗнч(СтруктураОтвет) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСертификатов = СтруктураОтвет.ПроверкаСертификатов;
	Если ПроверкаСертификатов <> Неопределено Тогда
		
		Если ПроверкаСертификатов.ЕстьДоступныеСертификаты Тогда
			ПроверкаСертификатУстановлен = "Выполнено";
		ИначеЕсли ПроверкаСертификатов.ОжидаетсяВыпускСертификата Тогда
			ПроверкаСертификатУстановлен = "Ожидание" ;
		Иначе
			ПроверкаСертификатУстановлен = "Требуется";
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторыОрганизации = СтруктураОтвет.ИдентификаторыОрганизации;
	Если ИдентификаторыОрганизации <> Неопределено Тогда
		
		Если ИдентификаторыОрганизации.Количество() = 0 Тогда
			ПроверкаРегистрацияУОператора = "Требуется";
		Иначе
			ПроверкаРегистрацияУОператора = "Выполнено";
			
			СписокВыбора = Элементы.ИдентификаторОтправителя.СписокВыбора;
			СписокВыбора.Очистить();
			Для Каждого ЭлементСписка Из ИдентификаторыОрганизации Цикл
				ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыСвязиИдентификаторов = СтруктураОтвет.ПараметрыСвязиИдентификаторовЭДО;
	Если ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		
		КонтрагентИНН = ПараметрыСвязиИдентификаторов[0].КонтрагентИНН;
		Если НастройкаДокумента Или НастройкаРегламентаЭДО Тогда
			ПараметрыПриглашения = ПолучитьПараметрыПриглашения(ЭтотОбъект, Ложь);
		Иначе 
			ПараметрыПриглашения = НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов);
		КонецЕсли;
		ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект, ПараметрыПриглашения);
		
	КонецЕсли;
	
	Если Не ПредварительнаяНастройка Тогда
		ЗаполнитьФорматыЭД();
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеПриглашенияКонтрагента(Форма, ПараметрыПриглашения = Неопределено)
	
	Если ПараметрыПриглашения = Неопределено Тогда
		ПараметрыПриглашения = ПолучитьПараметрыПриглашения(Форма);
	КонецЕсли;
	
	Форма.ПолучательОператорЭДО            = ПараметрыПриглашения.ОператорКонтрагентаПредставление;
	Форма.ПолучательПодробноеОписание      = ПараметрыПриглашения.ИдентификаторКонтрагентаОписание;
	Форма.ПроверкаВозможностьРоуминга      = ПараметрыПриглашения.ПроверкаВозможностьРоуминга;
	Форма.ПроверкаОтправкаПриглашений      = ПараметрыПриглашения.ПроверкаОтправкаПриглашений;
	Форма.СтатусПриглашенияПредставление   = ПараметрыПриглашения.СтатусПриглашенияПредставление;
	Форма.НавигационнаяСсылкаНаПриглашение = ПараметрыПриглашения.НавигационнаяСсылкаНаПриглашение;
	
	Если ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторОрганизации) Тогда
		Форма.ИдентификаторОтправителя = ПараметрыПриглашения.ИдентификаторОрганизации;
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.ИдентификаторПолучателя.СписокВыбора;
	Если ПараметрыПриглашения.СписокИдентификаторовКонтрагента <> Неопределено Тогда
		СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из ПараметрыПриглашения.СписокИдентификаторовКонтрагента Цикл
			ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
		КонецЦикла;
		
		Форма.ПроверкаПриглашенияКонтрагента = ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента;
		Форма.ПроверкаИдентификаторАбонента  = ПараметрыПриглашения.ПроверкаИдентификаторАбонента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторКонтрагента) Тогда
		Форма.ИдентификаторПолучателя = ПараметрыПриглашения.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПолучателя)
		И СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторПолучателя) = Неопределено Тогда
		СписокВыбора.Добавить(Форма.ИдентификаторПолучателя);
	КонецЕсли;
	
	Если ПараметрыПриглашения.КартинкаСтатусаПодключения <> Неопределено
		И ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторКонтрагента)
		И СписокВыбора.Количество() Тогда
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПараметрыПриглашения.ИдентификаторКонтрагента);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Картинка = ПараметрыПриглашения.КартинкаСтатусаПодключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыПриглашения(Форма, ФормироватьСписокВыбора = Истина)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		МассивИдентификаторовОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ИдентификаторОтправителя);
	Иначе
		МассивИдентификаторовОрганизации = Форма.Элементы.ИдентификаторОтправителя.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПолучателя) Тогда
		МассивИдентификаторовКонтрагента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ИдентификаторПолучателя);
	Иначе
		МассивИдентификаторовКонтрагента = Форма.Элементы.ИдентификаторПолучателя.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	ПараметрыПолученияСвязи = Новый Структура;
	ПараметрыПолученияСвязи.Вставить("ИдентификаторыОрганизации", МассивИдентификаторовОрганизации);
	ПараметрыПолученияСвязи.Вставить("ИдентификаторыКонтрагента", МассивИдентификаторовКонтрагента);
	ПараметрыПолученияСвязи.Вставить("Контрагент", Форма.Контрагент);
	ПараметрыПолученияСвязи.Вставить("ФормироватьСписокВыбора", ФормироватьСписокВыбора);
	ПараметрыПолученияСвязи.Вставить("ПриоритетПодключенные"  , Истина);
	
	ПараметрыПриглашения = ПолучитьПараметрыПриглашенияНаСервере(ПараметрыПолученияСвязи);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПриглашенияНаСервере(Знач ПараметрыПолучения)
	
	ПараметрыСвязиИдентификаторов = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыПолучения.Контрагент) Тогда
		ПараметрыПолученияСвязи = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияСвязи, ПараметрыПолучения);
		ПараметрыСвязиИдентификаторов = РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов(ПараметрыПолученияСвязи,,
			Истина);
	КонецЕсли;
	
	ПараметрыПриглашения = НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов = Неопределено)
	
	ПараметрыПриглашения = Новый Структура(
		"ПроверкаПриглашенияКонтрагента,
		|ПроверкаИдентификаторАбонента,
		|ПроверкаВозможностьРоуминга,
		|ПроверкаОтправкаПриглашений,
		|ИдентификаторОрганизации,
		|ИдентификаторКонтрагента,
		|ИдентификаторКонтрагентаОписание,
		|ОператорКонтрагентаПредставление,
		|СписокИдентификаторовКонтрагента,
		|СтатусПриглашенияПредставление,
		|КартинкаСтатусаПодключения,
		|НавигационнаяСсылкаНаПриглашение");
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		Возврат ПараметрыПриглашения;
	КонецЕсли;
	
	СтрокаПараметровСвязи = ПараметрыСвязиИдентификаторов[0];
	ЗаполнитьЗначенияСвойств(ПараметрыПриглашения, СтрокаПараметровСвязи);
	ПараметрыПриглашения.СписокИдентификаторовКонтрагента = СтрокаПараметровСвязи.СписокВыбора;
	ПроверитьВозможностьРоуминга(ПараметрыПриглашения, СтрокаПараметровСвязи);
	
	Если СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
		ПараметрыПриглашения.ПроверкаОтправкаПриглашений = "Отправлено";
	Иначе
		ПараметрыПриглашения.ПроверкаОтправкаПриглашений = "Требуется";
	КонецЕсли;
	
	ПараметрыПриглашения.ПроверкаИдентификаторАбонента = ЗначениеЗаполнено(СтрокаПараметровСвязи.СписокВыбора);
	
	Если СтрокаПараметровСвязи.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
		Если СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
		Иначе
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
		КонецЕсли;
	ИначеЕсли СтрокаПараметровСвязи.ТребуетсяСоглашениеПриПервомПодключении Тогда
		Если СтрокаПараметровСвязи.ЗаявкаНаРоумингПринята Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Выполнено";
		ИначеЕсли СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
		Иначе
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
		КонецЕсли;
	ИначеЕсли ПараметрыПриглашения.ПроверкаИдентификаторАбонента
		Или СтрокаПараметровСвязи.СтатусПодключения > 1 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Выполнено";
		ПараметрыПриглашения.ПроверкаИдентификаторАбонента = Истина;
	ИначеЕсли СтрокаПараметровСвязи.СтатусПодключения = 1 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
	ИначеЕсли СтрокаПараметровСвязи.СтатусПодключения = 0 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
	КонецЕсли;
	
	ПараметрыПриглашения.КартинкаСтатусаПодключения = СинхронизацияЭДО.КартинкаСтатусаПодключенияАбонента(
		СтрокаПараметровСвязи.СтатусПодключения);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьРоуминга(ПараметрыПриглашения, ПараметрыСвязиИдентификаторов)
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ИдентификаторОрганизации)
		Или Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ИдентификаторКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаИдентификатораКонтрагента = СтрДлина(ПараметрыСвязиИдентификаторов.ИдентификаторКонтрагента);
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ОператорКонтрагента)
		Или ДлинаИдентификатораКонтрагента < 4 ИЛИ ДлинаИдентификатораКонтрагента > 46 Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Ошибка";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.СтатусПодключения > 1 Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Выполнено";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.СвязьДоступна = -1
		И Не ПараметрыСвязиИдентификаторов.ОператорыСовпадают Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Ошибка";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.СвязьДоступна = 0 Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
		
	ИначеЕсли Не ПараметрыСвязиИдентификаторов.АбонентАктивен
		Или Не ПараметрыСвязиИдентификаторов.СертификатДействителен Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Внимание";
	
	ИначеЕсли ПараметрыСвязиИдентификаторов.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.ТребуетсяСоглашениеПриПервомПодключении
		И Не ПараметрыСвязиИдентификаторов.ЗаявкаНаРоумингПринята Тогда
		
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
	
	ИначеЕсли (ПараметрыСвязиИдентификаторов.ОператорыСовпадают
		Или ПараметрыСвязиИдентификаторов.СвязьДоступна = 1) Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Выполнено";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(Знач Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		ЕстьДоступныеСертификатыУчетнойЗаписи = ЕстьДоступныеСертификатыУчетнойЗаписи(Форма.ИдентификаторОтправителя, Форма.Отпечатки);
		
		Если ЕстьДоступныеСертификатыУчетнойЗаписи Тогда
			Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		Иначе
			Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеСертификатыУчетнойЗаписи(ИдентификаторУчетнойЗаписи, Отпечатки)
	
	Запросы = Новый Массив;
	Отбор = СинхронизацияЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	ЗапросСертификатовУчетныхЗаписей = СинхронизацияЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей",
		Отбор);
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	ОтборСертификатов = КриптографияБЭД.НовыйОтборСертификатов();
	ОтборСертификатов.Отпечатки = "&Отпечатки";
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", ОтборСертификатов);
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сертификаты.Ссылка КАК Ссылка
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
		|		ПО СертификатыУчетныхЗаписей.Сертификат = Сертификаты.Ссылка";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", ИдентификаторУчетнойЗаписи);
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки", КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(Отпечатки));
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСертификатЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникОтправкиПриглашения()
	
	ОтправкаПриглашенияЧерезПомощник = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаПомощникаОтправкиПриглашения", ЭтотОбъект);
	
	ПараметрыОткрытия = СинхронизацияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	ПараметрыОткрытия.Организация              = Организация;
	ПараметрыОткрытия.Контрагент               = Контрагент;
	ПараметрыОткрытия.ИдентификаторОрганизации = ИдентификаторОтправителя;
	ПараметрыОткрытия.ИдентификаторКонтрагента = ИдентификаторПолучателя;
	
	СинхронизацияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПомощникаОтправкиПриглашения(Результат, Контекст) Экспорт
	
	ОтправкаПриглашенияЧерезПомощник = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = Результат.ИдентификаторОрганизации;
	ИдентификаторПолучателя = Результат.ИдентификаторКонтрагента;
	
	ВыполнитьПолнуюПроверкуНастройкиОбмена();
	
КонецПроцедуры

#Область РаботаСФорматамиЭД

&НаСервере
Процедура ЗаполнитьФорматыЭД()
	
	ОтборФорматов = ЭлектронныеДокументыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.ВидыДокументов.Добавить(ВидДокумента);
	ОтборФорматов.Действует = Истина;
	СписокПоддерживаемыхФорматыЭД = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов(ОтборФорматов);
	
	Для Каждого СтрокаТаблицы Из СписокПоддерживаемыхФорматыЭД Цикл
		Элементы.НастройкаФорматЭД.СписокВыбора.Добавить(СтрокаТаблицы.ИдентификаторФормата,
			СтрокаТаблицы.ПредставлениеФормата);
		НоваяСтрока = ФорматыЭД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.СсылкаНаПриказОВведенииФормата = СтрокаТаблицы.СсылкаНаПриказОВведении;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	ДанныеУчетнойЗаписи = СинхронизацияЭДО.ДанныеУчетнойЗаписи(ИдентификаторОтправителя);
	
	Если ДанныеУчетнойЗаписи = Неопределено Тогда
		НастройкиРегламента = Неопределено;
	Иначе
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
		НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, НастройкаФорматЭД);
	КонецЕсли;
		
	Если НастройкиРегламента <> Неопределено Тогда
		// Первичная инициализация - ориентируемся на переданный регламент
		Элементы.НастройкаОжидатьИзвещение.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = ?(НастройкаДокумента,
			Не ПодтверждениеОбязательно И НастройкиРегламента.РедактироватьОтветнуюПодпись,
			НастройкиРегламента.РедактироватьОтветнуюПодпись);
	Иначе
		// Изменение реквизитов в процессе работы формы
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОжидатьОтветнуюПодписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкаОжидатьОтветнуюПодпись = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыгружатьДопСведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкиВыгружатьДопСведения = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПолейРегламентаЭДО()
	
	УстановитьДоступность();
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
	УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИнициализироватьНастройкиФормированияДокумента()
	
	ВариантыЗаполненияПолей = ЭлектронныеДокументыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(
		ВидДокумента, НастройкаФорматЭД);
	ЗначениеСвойства = Неопределено;
	Если ВариантыЗаполненияПолей.Свойство("ТоварКод", ЗначениеСвойства) Тогда
		Для Каждого Вариант Из ЗначениеСвойства Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ЗаполнениеКодаТовара.СписокВыбора.Добавить(), Вариант);
		КонецЦикла;
	Иначе
		Элементы.ЗаполнениеКодаТовара.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = Результат;
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиЗаполненияДополнительныхПолей()
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = НастройкиОтправкиЭДО.ЕстьНастройкиЗаполненияДополнительныхПолей(
		КлючНастроекОтправки, НастройкаФорматЭД);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей()

	Элементы.ЕстьНастройкиЗаполненияДополнительныхПолей.Видимость =
		ЭлектронныеДокументыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ВидДокумента,
			НастройкаФорматЭД).Количество();
				
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуМастера(Результат)
	
	ЕстьОшибка = Ложь;
	СообщитьОбОшибке = Ложь;
	
	Если Результат = Истина Тогда
		// Пропускаем дальше. Приглашения отправлять Не надо.
	Иначе 
		
		ТекстОшибки = НСтр("ru = 'Во время отправки приглашения произошла ошибка.
                            |Подробнее см. в журнале регистрации.'");
		
		Если Не Результат.Успех Тогда
			ЕстьОшибка = Истина;
			СообщитьОбОшибке = Истина;
			Если Не ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
				СообщитьОбОшибке = Истина;
			КонецЕсли;
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Если СообщитьОбОшибке Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		Элементы.ФормаПодключить.Доступность = Истина;
		Элементы.ФормаПодключить.Картинка    = Новый Картинка;
		Возврат;
	КонецЕсли;
	
	Если Результат <> Истина Тогда
		Оповестить("ОбновитьСостояниеПриглашений");
	КонецЕсли;
	
	Если БылоОтправленоПриглашение И СоздаватьНастройкиЭДО Тогда
		Оповестить("ОтправкаПриглашенияССозданиемНастроек");
	КонецЕсли;
	
	НастройкаОтправки = ТекущаяНастройкаОтправки();
	СохраненнаяНастройкаОтправки = СохраненнаяНастройкаОтправки(КлючНастроекОтправки);
	Если ПредварительнаяНастройка Тогда
		Если ЭтоРедактированиеСуществующейНастройки Тогда
			ЗаписатьОбновленныеНастройки(НастройкаОтправки, КлючНастроекОтправки, ВыборУчетныхЗаписей);
		Иначе 
			Если СохраненнаяНастройкаОтправки <> Неопределено Тогда
				СохраненнаяНастройкаОтправки.Договор = 
					?(ЗначениеЗаполнено(СохраненнаяНастройкаОтправки.Договор), 
						СохраненнаяНастройкаОтправки.Договор, 
						КлючНастроекОтправки.Договор);
				НастройкаОтправки = СохраненнаяНастройкаОтправки;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КлючНастроекОтправкиДляОбновления = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		ЗаполнитьЗначенияСвойств(КлючНастроекОтправкиДляОбновления, КлючНастроекОтправки);
		Если ЭтоРедактированиеСуществующейНастройки Тогда 
			Если Не ЗначениеЗаполнено(СохраненнаяНастройкаОтправки.Договор) Тогда
				НастройкаОтправки.Договор = СохраненнаяНастройкаОтправки.Договор;
				КлючНастроекОтправкиДляОбновления.Договор = СохраненнаяНастройкаОтправки.Договор;
			КонецЕсли;
		КонецЕсли;
		Если НастройкаДокумента И СохранитьНастройки Тогда
			ЗаписатьОбновленныеНастройки(НастройкаОтправки, КлючНастроекОтправкиДляОбновления, ВыборУчетныхЗаписей);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть(НастройкаОтправки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОбновленныеНастройки(НастройкаОтправки, КлючНастроекОтправки, ВыборУчетныхЗаписей)
	
	Если ВыборУчетныхЗаписей И Не НастройкиОтправкиЭДО.ЭтоРасширеннаяНастройка(КлючНастроекОтправки) Тогда
		НастройкиОтправкиЭДО.ИзменитьТранспортныеНастройки(КлючНастроекОтправки,
			НастройкаОтправки.ИдентификаторОтправителя, НастройкаОтправки.ИдентификаторПолучателя);
	Иначе 
		НастройкиОтправкиЭДО.ИзменитьНастройку(НастройкаОтправки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияУчетнойЗаписи(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаКорректировкиФормата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НастройкаФорматЭД = ДополнительныеПараметры;
		НастройкиВерсияФорматаУстановленаВручную = Истина;
		НастройкаФорматЭДПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриглашение()
	
	Если ЗначениеЗаполнено(НавигационнаяСсылкаНаПриглашение) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаНаПриглашение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПолучателяКорректный(Форма)
	
	Если Не РаботаСАбонентамиЭДОКлиентСервер.ИдентификаторАбонентаКорректный(Форма.ИдентификаторПолучателя)
		ИЛИ Форма.ИдентификаторПолучателя = Форма.ИдентификаторОтправителя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПользователюДоступенНеоблачныйСертификат()
	
	Запросы = Новый Массив;
	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Организация = Организация;
	Отбор.Облачные = Ложь;
	Отбор.ДоступныеТекущемуПользователю = Истина;
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", Отбор);
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка
		|ИЗ
		|	Сертификаты КАК Сертификаты";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ВыборМаршрутаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И НастройкаПодписьПоМаршруту <> Результат Тогда 
		НастройкаПодписьПоМаршруту = Результат;
		НастройкиИзменены = Истина;
		ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСФорматом

&НаКлиенте
Процедура ПриИзмененииФорматаВручную()
	
	НастройкиВерсияФорматаУстановленаВручную = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормата()
	
	НастройкиИзменены = Истина;
	УстановитьЗначенияПолейРегламентаЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФорматКонтрагента()
	
	ПодбиратьФормат = Не НастройкиВерсияФорматаУстановленаВручную
		И (НастройкаРегламентаЭДО Или ПредварительнаяНастройка);
		
	Если Не ПодбиратьФормат Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьФорматКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьФорматКонтрагентаНаСервере()
	
	НовыйФормат = ФорматКонтрагентаПоВидуЭД(ИдентификаторПолучателя, ВидДокумента);
	
	Если Не ЗначениеЗаполнено(НовыйФормат) Тогда
		НовыйФормат = ЭлектронныеДокументыЭДО.ФорматПоУмолчанию(ВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйФормат) И НастройкаФорматЭД <> НовыйФормат Тогда
		НастройкаФорматЭД = НовыйФормат;
		ПриИзмененииФормата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматКонтрагентаПоВидуЭД(Знач ИдентификаторПолучателя, Знач ВидДокумента)
	
	ПоддерживаемыеФорматы = НастройкиЭДО.АктуальныеПоддерживаемыеФорматыАбонента(ИдентификаторПолучателя);
	ОтборСтрок = Новый Структура("ИдентификаторАбонента,ВидДокумента", ИдентификаторПолучателя, ВидДокумента);
	НайденныеСтроки = ПоддерживаемыеФорматы.НайтиСтроки(ОтборСтрок);
	
	ФорматКонтрагента = Неопределено;
	
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ФорматКонтрагента = НайденныеСтроки[0].формат;
	КонецЕсли;
	
	Возврат ФорматКонтрагента;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ОператорАбонента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ОператорАбонента(ИдентификаторПолучателя); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОтправкаПриглашения(Форма)
	
	ТребуетсяОтправка = Форма.ПроверкаОтправкаПриглашений <> "Отправлено"
		И ЗначениеЗаполнено(Форма.ИдентификаторПолучателя);
	Если Форма.НастройкаРегламентаЭДО И Не Форма.РасширенныйРежимНастройки Тогда
		ТребуетсяОтправка = Ложь;
	КонецЕсли;
	
	Возврат ТребуетсяОтправка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредупрежденияПоНастройке(КлючНастроекОтправки, ИдентификаторПолучателя)
	
	Возврат НастройкиЭДОСлужебный.ПредупрежденияПоНастройкеОбменаНаДату(КлючНастроекОтправки, ИдентификаторПолучателя);
	
КонецФункции

&НаСервереБезКонтекста
Функция СпособОбменаАбонентаЭДОНаСервере(ИдентификаторОтправителя)
	
	Возврат ОбменСКонтрагентамиИнтеграция.СпособОбменаАбонентаЭДО(ИдентификаторОтправителя);
	
КонецФункции

#КонецОбласти