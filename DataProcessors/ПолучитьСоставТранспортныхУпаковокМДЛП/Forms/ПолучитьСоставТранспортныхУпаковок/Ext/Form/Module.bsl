
&НаКлиенте
Перем ПараметрыПодключения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Организация        = Параметры.Организация;
	МестоДеятельности  = Параметры.МестоДеятельности;
	
	ПравоИзмененияУпаковокМДЛП = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УпаковкиМДЛП);
	Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = ПравоИзмененияУпаковокМДЛП;
	Элементы.ЗаписатьИзмененияУпаковок.Видимость     = ПравоИзмененияУпаковокМДЛП;
	
	ИспользоватьСерии = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Элементы.ИерархияУпаковокСерия.Видимость = ИспользоватьСерии;
	Элементы.СгенерироватьСерии.Видимость    = ИспользоватьСерии;
	
	Элементы.ИерархияУпаковокХарактеристика.Видимость = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ИерархияУпаковокУпаковка.Видимость       = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ЭтотОбъект, Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП);
	
	СтатусыУпаковокВРезерве = ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве();
	Для Каждого СтатусУпаковкиМДЛП Из Перечисления.СтатусыУпаковокМДЛП Цикл
		Если СтатусыУпаковокВРезерве.Найти(СтатусУпаковкиМДЛП) <> Неопределено
		 Или СтатусУпаковкиМДЛП = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ИерархияУпаковокСтатус.СписокВыбора.Добавить(СтатусУпаковкиМДЛП);
	КонецЦикла;
	
	УстановитьОтображениеКнопок();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
		Элементы.ИерархияУпаковокИдентификаторЗТК.Видимость = Ложь;
		Элементы.ИерархияУпаковокЗонаТаможенногоКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки.Удалить("Организация");
		Настройки.Удалить("МестоДеятельности");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ДанныеШтрихкода = ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			ОбработатьШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкода));
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Данные были изменены. Записать изменения?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповестить, Отказ, ЗавершениеРаботы, ТекстСообщения, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьУпаковкиМДЛП(Команда)
	
	ОчиститьСообщения();
	
	НачатьПолучениеУпаковокМДЛП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПолучениеУпаковокМДЛП(Команда)
	
	ОтменитьПолучениеИнформациюОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУпаковкиПоДаннымМДЛП(Команда)
	
	Результат = ЗаполнитьУпаковкиПоДаннымМДЛПНаСервере();
	ОповеститьОбОкончанииЗаполненияУпаковок(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Результат = СгенерироватьСерииНаСервере();
	СобытияФормМДЛПКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияУпаковок(Команда)
	
	ЗаписатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	Иначе
		УстановитьОтображениеКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоДеятельностиПриИзменении(Элемент)
	
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерГрупповойУпаковкиПриИзменении(Элемент)
	
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияУпаковокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ЗапрещенВводДанныхНоменклатуры
	   И (Поле = Элементы.ИерархияУпаковокНоменклатура
		Или Поле = Элементы.ИерархияУпаковокХарактеристика
		Или Поле = Элементы.ИерархияУпаковокСерия
		Или Поле = Элементы.ИерархияУпаковокУпаковка
		Или Поле = Элементы.ИерархияУпаковокЕдиницаИзмерения) Тогда
		
		ТекущиеДанные = ИерархияУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
		
		Оповестить = Новый ОписаниеОповещения("ОбработатьВводДанныхНоменклатуры", ЭтотОбъект, ВыбраннаяСтрока);
		ОткрытьФорму("Обработка.ПолучитьСоставТранспортныхУпаковокМДЛП.Форма.ФормаВводаДанныхНоменклатуры", ПараметрыФормы, ЭтотОбъект,,,, Оповестить);
		
	ИначеЕсли Поле = Элементы.ИерархияУпаковокСтатус Тогда
		
		Оповестить = Новый ОписаниеОповещения("ОбработкаВыборкаСтатусаУпаковки", ЭтотОбъект, ВыбраннаяСтрока);
		ПоказатьВыборИзМеню(Оповестить, Поле.СписокВыбора, Поле);
		
	ИначеЕсли Поле = Элементы.ИерархияУпаковокЗонаТаможенногоКонтроля Тогда
		
		ПодключитьОбработчикОжидания("ОбработатьВводДанныхЗТКОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДанныхУпаковок

&НаКлиенте
Процедура НачатьПолучениеУпаковокМДЛП()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация, МестоДеятельности);
	Иначе
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация);
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОбУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОТранспортныхУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерГрупповойУпаковки);
	ПараметрыМетода.ПолучатьВерхнеуровневыеУпаковки = Истина;
	ПараметрыМетода.ПолучатьРасширеннуюИнформациюОВложенныхКИЗ = Истина;
	ПараметрыМетода.ТипИсточникаИнформацииОВложенныхКИЗ = ПредопределенноеЗначение("Перечисление.ТипыИсточниковИнформацииОбУпаковкахМДЛП.Приватный");
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОбУпаковках", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеУпаковок", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОТранспортныхУпаковках(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеУпаковок(Результат, Контекст) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОбУпаковках = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Отменено" Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИерархияУпаковок.ПолучитьЭлементы().Очистить();
	
	ЗакончитьПолучениеУпаковок(АдресРезультатаМетодаАПИ);
	
	РазвернутьДеревоРекурсивно(ИерархияУпаковок, Элементы.ИерархияУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьПолучениеУпаковок(Знач АдресРезультатаМетодаАПИ)
	
	Иерархия = РеквизитФормыВЗначение("ИерархияУпаковок");
	
	РезультатУпаковки = ПолучитьИзВременногоХранилища(АдресРезультатаМетодаАПИ);
	ДанныеУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатУпаковки, "Данные", Новый Соответствие);
	
	ЗаполнитьИерархиюУпаковок(ДанныеУпаковок, Иерархия);
	ДозаполнитьУчетнымиДанными(Иерархия);
	
	УстановитьОтображениеКнопок(Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Имя);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИерархиюУпаковок(ДанныеУпаковок, Иерархия)
	
	Для Каждого КлючИЗначение Из ДанныеУпаковок Цикл
		
		СтрокиИерархии = Иерархия.Строки;
		
		НомерУпаковки  = КлючИЗначение.Ключ;
		ДанныеУпаковки = КлючИЗначение.Значение;
		
		ЕстьИнформацияВМДЛП = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформацияВМДЛП Тогда
			
			ДополнитьИерархиюУпаковок(ДанныеУпаковки["up"], СтрокиИерархии);
			ДополнитьИерархиюУпаковок(ДанныеУпаковки["down"], СтрокиИерархии);
			
		Иначе
			
			Строка = СтрокиИерархии.Добавить();
			Строка.ЕстьИнформацияВМДЛП    = Ложь;
			Строка.НомерУпаковки          = НомерУпаковки;
			Строка.КлючУпаковки           = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
			Строка.СтатусМДЛП             = РассчитатьСтатусМДЛП(ДанныеУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИерархиюУпаковок(Данные, СтрокиИерархии)
	
	ОчередьУпаковок = Новый Массив;
	ОчередьУпаковок.Добавить(Новый Структура("ДанныеУпаковки, СтрокиИерархии", Данные, СтрокиИерархии));
	
	Пока ОчередьУпаковок.Количество() > 0 Цикл
		
		ТекущаяУпаковка = ОчередьУпаковок[0].ДанныеУпаковки;
		СтрокиИерархии = ОчередьУпаковок[0].СтрокиИерархии;
		ОчередьУпаковок.Удалить(0);
		
		ДочерниеУпаковки = ТекущаяУпаковка["childs"];
		Если ДочерниеУпаковки <> Неопределено Тогда
			
			НомерУпаковки = ТекущаяУпаковка["sscc"];
			
			Строка = СтрокиИерархии.Найти(НомерУпаковки, "НомерУпаковки", Истина);
			Если Строка = Неопределено Тогда
				
				Строка = СтрокиИерархии.Добавить();
				Строка.ЕстьИнформацияВМДЛП    = Истина;
				Строка.ГрупповаяУпаковкаМДЛП  = Истина;
				Строка.НомерУпаковки          = НомерУпаковки;
				Строка.КлючУпаковки           = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
				Строка.ИндексКартинкиШтрихкод = 0;
				
				РодительскаяСтрока = Строка.Родитель;
				Если РодительскаяСтрока <> Неопределено Тогда
					Строка.ДокументРезерваМДЛП        = ?(ЗначениеЗаполнено(РодительскаяСтрока.ДокументРезерваМДЛП), РодительскаяСтрока.ДокументРезерваМДЛП, РодительскаяСтрока.НомерУпаковки);
					Строка.НомерГрупповойУпаковкиМДЛП = РодительскаяСтрока.НомерУпаковки;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ДочерняяУпаковка Из ДочерниеУпаковки Цикл
				ОчередьУпаковок.Добавить(Новый Структура("ДанныеУпаковки, СтрокиИерархии", ДочерняяУпаковка, Строка.Строки));
			КонецЦикла;
			
		Иначе
			
			НомерПотребительскойУпаковки = ТекущаяУпаковка["sgtin"];
			Если НомерПотребительскойУпаковки <> Неопределено Тогда
				
				Строка = СтрокиИерархии.Добавить();
				Строка.ЕстьИнформацияВМДЛП               = Истина;
				Строка.ГрупповаяУпаковкаМДЛП             = Ложь;
				Строка.ИндексКартинкиШтрихкод            = 1;
				Строка.НомерУпаковки                     = НомерПотребительскойУпаковки;
				Строка.КлючУпаковки                      = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
				Строка.СтатусМДЛП                        = РассчитатьСтатусМДЛП(ТекущаяУпаковка);
				Строка.GTIN                              = ТекущаяУпаковка["gtin"];
				Строка.КодЕСКЛП                          = ТекущаяУпаковка["drug_code"];
				Строка.ДатаСтатусаМДЛП                   = ИнтеграцияМДЛП.СтрокаВДатуЧасовогоПоясаСеанса(ИнтеграцияМДЛП.ДобавитьНулевойЧасовойПоясКДате(ТекущаяУпаковка["status_date"]));
				Строка.НомерСерии                        = ТекущаяУпаковка["batch"];
				Строка.ГоденДо                           = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ТекущаяУпаковка["expiration_date"]);
				Строка.НаименованиеТовара                = ТекущаяУпаковка["full_prod_name"];
				Строка.ВладелецМДЛП                      = ТекущаяУпаковка["owner"];
				Строка.ИдентификаторСубъектаОбращения    = ТекущаяУпаковка["sys_id"];
				Строка.ИдентификаторЗТК                  = ТекущаяУпаковка["customs_point_id"];
				Строка.ИдентификаторРешенияОПриостановке = ТекущаяУпаковка["halt_id"];
				Строка.НомерРешенияОПриостановке         = ТекущаяУпаковка["halt_doc_num"];
				Строка.ДатаРешенияОПриостановке          = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ТекущаяУпаковка["halt_doc_date"]);
				Строка.СуммарноВыбытаяДоля               = ТекущаяУпаковка["total_sold_part"];
				Строка.СуммарноСписаннаяДоля             = ТекущаяУпаковка["total_withdrawal_part"];
				
				ИсточникФинансированияМДЛП = ТекущаяУпаковка["source_type"];
				Если ЗначениеЗаполнено(ИсточникФинансированияМДЛП) Тогда
					Строка.ИсточникФинансированияМДЛП = Перечисления.ИсточникиФинансированияМДЛП.Получить(ИсточникФинансированияМДЛП - 1);
				КонецЕсли;
				
				ТипВыводаИзОборотаМДЛП = ТекущаяУпаковка["withdrawal_type"];
				Если ЗначениеЗаполнено(ТипВыводаИзОборотаМДЛП) Тогда
					Строка.ТипВыводаИзОборота = Перечисления.ТипыВыводаИзОборотаМДЛП.Получить(ТипВыводаИзОборотаМДЛП - 1);
				КонецЕсли;
				
				ТипЭмиссииМДЛП = ТекущаяУпаковка["emission_type"];
				Если ЗначениеЗаполнено(ТипЭмиссииМДЛП) Тогда
					Строка.ТипЭмиссииМДЛП = Перечисления.ТипыЭмиссииУпаковокМДЛП.Получить(ТипЭмиссииМДЛП - 1);
				КонецЕсли;
				
				РодительскаяСтрока = Строка.Родитель;
				Если РодительскаяСтрока <> Неопределено Тогда
					Строка.ДокументРезерваМДЛП        = ?(ЗначениеЗаполнено(РодительскаяСтрока.ДокументРезерваМДЛП), РодительскаяСтрока.ДокументРезерваМДЛП, РодительскаяСтрока.НомерУпаковки);
					Строка.НомерГрупповойУпаковкиМДЛП = РодительскаяСтрока.НомерУпаковки;
					РодительскаяСтрока.ВложеныПотребительскиеУпаковкиМДЛП = Истина;
				КонецЕсли;
				
				Пока РодительскаяСтрока <> Неопределено Цикл
					РодительскаяСтрока.СтатусМДЛП                        = Строка.СтатусМДЛП;
					РодительскаяСтрока.ДатаСтатусаМДЛП                   = Строка.ДатаСтатусаМДЛП;
					РодительскаяСтрока.ИдентификаторСубъектаОбращения    = Строка.ИдентификаторСубъектаОбращения;
					РодительскаяСтрока.ИдентификаторЗТК                  = Строка.ИдентификаторЗТК;
					РодительскаяСтрока.ИдентификаторРешенияОПриостановке = Строка.ИдентификаторРешенияОПриостановке;
					РодительскаяСтрока.НомерРешенияОПриостановке         = Строка.НомерРешенияОПриостановке;
					РодительскаяСтрока.ДатаРешенияОПриостановке          = Строка.ДатаРешенияОПриостановке;
					РодительскаяСтрока = РодительскаяСтрока.Родитель;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОбУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОбУпаковках = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОбУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОбУпаковках) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОбУпаковках);
		ИдентификаторЗаданияПолученияИнформацииОбУпаковках = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеПолученияИнформацииОбУпаковках(Состояние)
	
	Если Состояние = "Начало" Тогда
		
		Элементы.ОтменитьПолучениеУпаковокМДЛП.Видимость = Истина;
		
		Элементы.ИерархияУпаковок.Доступность = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках запущено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Элементы.ОтменитьПолучениеУпаковокМДЛП.Видимость = Ложь;
		
		Элементы.ИерархияУпаковок.Доступность = Истина;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках завершено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#Область СопоставлениеДанных

&НаСервере
Процедура ДозаполнитьУчетнымиДанными(Иерархия)
	
	ТаблицаИерархии = ИнтеграцияМДЛП.ДеревоВТаблицуЗначений(Иерархия,, "НомерУпаковки, КлючУпаковки, ИдентификаторСубъектаОбращения");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаИерархии.НомерУпаковки                   КАК НомерУпаковки,
	|	ТаблицаИерархии.КлючУпаковки                    КАК КлючУпаковки,
	|	ТаблицаИерархии.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА                                       КАК ЕстьИнформацияВБазе,
	|	УпаковкиМДЛП.НомерУпаковки                   КАК НомерУпаковки,
	|	УпаковкиМДЛП.КлючУпаковки                    КАК КлючУпаковки,
	|	УпаковкиМДЛП.МестоДеятельности               КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА УпаковкиМДЛП.МестоДеятельности ССЫЛКА Справочник.МестаДеятельностиМДЛП
	|			ТОГДА УпаковкиМДЛП.МестоДеятельности.Идентификатор
	|		КОГДА УпаковкиМДЛП.МестоДеятельности ССЫЛКА Справочник.ОрганизацииМДЛП
	|			ТОГДА УпаковкиМДЛП.МестоДеятельности.РегистрационныйНомерУчастника
	|		ИНАЧЕ """"
	|	КОНЕЦ                                        КАК ИдентификаторСубъектаОбращения,
	|	УпаковкиМДЛП.ЗонаТаможенногоКонтроля         КАК ЗонаТаможенногоКонтроля,
	|	УпаковкиМДЛП.Статус                          КАК Статус,
	|	УпаковкиМДЛП.ИсходныйСтатус                  КАК ИсходныйСтатус,
	|	УпаковкиМДЛП.ДокументРезерва                 КАК ДокументРезерва,
	|	УпаковкиМДЛП.ДатаСтатуса                     КАК ДатаСтатуса,
	|	УпаковкиМДЛП.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	УпаковкиМДЛП.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
	|	УпаковкиМДЛП.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	УпаковкиМДЛП.Владелец                        КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеУпаковок КАК ДанныеУпаковок
	|		ПО
	|			УпаковкиМДЛП.НомерУпаковки = ДанныеУпаковок.НомерУпаковки
	|			И УпаковкиМДЛП.КлючУпаковки = ДанныеУпаковок.КлючУпаковки
	|");
	
	Запрос.УстановитьПараметр("ТаблицаИерархии", ТаблицаИерархии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("НомерУпаковки, КлючУпаковки, ИдентификаторСубъектаОбращения", Выборка.НомерУпаковки, Выборка.КлючУпаковки, Выборка.ИдентификаторСубъектаОбращения);
		Строки = Иерархия.Строки.НайтиСтроки(Отбор, Истина);
		Если Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строки[0], Выборка);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Иерархия, "ИерархияУпаковок");
	
	ЗаполнитьДанныеУпаковокИзИерархииУпаковок();
	
	Для Каждого Строка Из Объект.ДанныеУпаковок Цикл
		
		Если Строка.ГрупповаяУпаковка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
		ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
		ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		
		ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(ЭтотОбъект, Строка, ПараметрыЗаполнения);
		
	КонецЦикла;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.ДанныеУпаковок);
	
	ЗаполнитьИерархиюУпаковокИзДанныхУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУпаковокИзИерархииУпаковок()
	
	Объект.ДанныеУпаковок.Очистить();
	
	Стек = Новый Массив;
	Стек.Добавить(ИерархияУпаковок.ПолучитьЭлементы());
	
	Пока Стек.Количество() > 0 Цикл
		
		СтрокиИерархии = Стек[0];
		Стек.Удалить(0);
		
		Для Каждого Строка Из СтрокиИерархии Цикл
			
			ПодчененныеСтроки = Строка.ПолучитьЭлементы();
			Если ПодчененныеСтроки.Количество() > 0 Тогда
				Стек.Добавить(ПодчененныеСтроки);
			КонецЕсли;
			
			СтрокаДанныхУпаковок = Объект.ДанныеУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхУпаковок, Строка);
			СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии = Строка.ПолучитьИдентификатор();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИерархиюУпаковокИзДанныхУпаковок()
	
	Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеУпаковок Цикл
		Строка = ИерархияУпаковок.НайтиПоИдентификатору(СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии);
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхУпаковок);
		Строка.ИдентификаторСтрокиДанных = СтрокаДанныхУпаковок.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СопоставлениеДанных

#КонецОбласти // ЗагрузкаДанныхУпаковок

#Область ЗаполнениеСтрок

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий();
	
	Если Объект.ДанныеУпаковок.Количество() > 0 Тогда
		СтрокиКОбработке = Объект.ДанныеУпаковок.НайтиСтроки(Новый Структура("ГрупповаяУпаковкаМДЛП", Ложь));
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "ДанныеУпаковок", СтрокиКОбработке, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		
		Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеУпаковок Цикл
			Строка = ИерархияУпаковок.НайтиПоИдентификатору(СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии);
			Если Строка.Серия <> СтрокаДанныхУпаковок.Серия Тогда
				СтрокаДанныхУпаковок.ИзмененыДанныеНоменклатуры = Истина;
				ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхУпаковок);
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьУпаковкиПоДаннымМДЛПНаСервере()
	
	Результат = ПустойРезультатИзмененияИнформацииОбУпаковках();
	
	СоответствиеСтатусов = ИнтеграцияМДЛПКлиентСервер.СоответствиеВнутреннихСтатусовКИЗСтатусамМДЛП();
	
	СтатусыУпаковокВРезерве = ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве();
	
	СтатусыУпаковокМДЛП = Новый Структура;
	СтатусыУпаковокМДЛП.Вставить("ВРезерве" , Перечисления.СтатусыУпаковокМДЛП.ВРезерве);
	СтатусыУпаковокМДЛП.Вставить("ВУпаковке", Перечисления.СтатусыУпаковокМДЛП.ВУпаковке);
	СтатусыУпаковокМДЛП.Вставить("КПоступлению", Перечисления.СтатусыУпаковокМДЛП.КПоступлению);
	СтатусыУпаковокМДЛП.Вставить("ОтгруженВРФ", Перечисления.СтатусыУпаковокМДЛП.ОтгруженВРФ);
	СтатусыУпаковокМДЛП.Вставить("ОжидаетПодтвержденияИмпортером", Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером);
	СтатусыУпаковокМДЛП.Вставить("ОжидаетПодтвержденияСменыСобственника", Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Ссылка         КАК СубъектОбращения,
	|	Данные.Идентификатор  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.МестаДеятельностиМДЛП КАК Данные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Данные.Ссылка                         КАК СубъектОбращения,
	|	Данные.РегистрационныйНомерУчастника  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Ссылка                         КАК ЗонаТаможенногоКонтроля,
	|	Данные.РегистрационныйНомерУчастника  КАК ИдентификаторЗТК
	|ИЗ
	|	Справочник.ЗоныТаможенногоКонтроляМДЛП КАК Данные
	|");
	Результаты = Запрос.ВыполнитьПакет();
	СубъектыОбращения       = Результаты[0].Выгрузить();
	ЗоныТаможенногоКонтроля = Результаты[1].Выгрузить();
	
	Для Каждого СтрокаДанныхУпаковок Из Объект.ДанныеУпаковок Цикл
		
		Если Не СтрокаДанныхУпаковок.ЕстьИнформацияВМДЛП Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанныхУпаковок.ЕстьИнформацияВБазе И СтатусыУпаковокВРезерве.Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхСубъектовОбращения = СубъектыОбращения.Найти(СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, "ИдентификаторСубъектаОбращения");
		Если СтрокаДанныхСубъектовОбращения = Неопределено Тогда
			Текст = НСтр("ru = 'Не удалось идентифицировать место деятельности с идентификатором %1.'");
			Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, СтрокаДанныхУпаковок.НомерУпаковки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			Продолжить;
		КонецЕсли;
		
		ЗонаТаможенногоКонтроля = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДанныхУпаковок.ИдентификаторЗТК) Тогда
			СтрокаДанныхЗТК = ЗоныТаможенногоКонтроля.Найти(СтрокаДанныхУпаковок.ИдентификаторЗТК, "ИдентификаторЗТК");
			Если СтрокаДанныхЗТК <> Неопределено Тогда
				ЗонаТаможенногоКонтроля = СтрокаДанныхЗТК.ЗонаТаможенногоКонтроля;
			ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
				Текст = НСтр("ru = 'Не удалось идентифицировать зону таможенного контроля с идентификатором %1.'");
				Текст = Текст + НСтр("ru = 'Данные упаковки %2 не были заполнены.'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаДанныхУпаковок.ИдентификаторСубъектаОбращения, СтрокаДанныхУпаковок.НомерУпаковки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", Текст);
			КонецЕсли;
		КонецЕсли;
		
		СтатусУпаковки = СоответствиеСтатусов[СтрокаДанныхУпаковок.СтатусМДЛП];
		Если СтатусыУпаковокВРезерве.Найти(СтатусУпаковки) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП) Тогда
			СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке;
		Иначе
			Если СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ
			   И СтрокаДанныхУпаковок.ТипЭмиссииМДЛП = Перечисления.ТипыЭмиссииУпаковокМДЛП.МаркированВЗТК Тогда
				СтатусУпаковки = Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеАктуализации = Новый Структура("Статус, ДатаСтатуса, ДокументРезерва, ГрупповаяУпаковка, НомерГрупповойУпаковки, ВложеныПотребительскиеУпаковки, МестоДеятельности, ЗонаТаможенногоКонтроля");
		ДанныеАктуализации.Статус                         = СтатусУпаковки;
		ДанныеАктуализации.ДатаСтатуса                    = СтрокаДанныхУпаковок.ДатаСтатусаМДЛП;
		ДанныеАктуализации.ДокументРезерва                = СтрокаДанныхУпаковок.ДокументРезерваМДЛП;
		ДанныеАктуализации.ГрупповаяУпаковка              = СтрокаДанныхУпаковок.ГрупповаяУпаковкаМДЛП;
		ДанныеАктуализации.НомерГрупповойУпаковки         = СтрокаДанныхУпаковок.НомерГрупповойУпаковкиМДЛП;
		ДанныеАктуализации.ВложеныПотребительскиеУпаковки = СтрокаДанныхУпаковок.ВложеныПотребительскиеУпаковкиМДЛП;
		ДанныеАктуализации.МестоДеятельности              = СтрокаДанныхСубъектовОбращения.СубъектОбращения;
		ДанныеАктуализации.ЗонаТаможенногоКонтроля        = ЗонаТаможенногоКонтроля;
		
		Для Каждого КлючИЗначение Из ДанныеАктуализации Цикл
			Если СтрокаДанныхУпаковок[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				СтрокаДанныхУпаковок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках Тогда
			Строка = ИерархияУпаковок.НайтиПоИдентификатору(СтрокаДанныхУпаковок.ИдентификаторСтрокиИерархии);
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхУпаковок);
			Результат.ЕстьЗаполненныеСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		Модифицированность = Истина;
		УстановитьОтображениеКнопок(Элементы.ЗаписатьИзмененияУпаковок.Имя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустойРезультатИзмененияИнформацииОбУпаковках()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЗаполненныеСтроки", Ложь);
	Результат.Вставить("Ошибки");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбОкончанииЗаполненияУпаковок(Результат)
	
	ОчиститьСообщения();
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Информация об упаковках актуализирована'"),
			,
			НСтр("ru = 'Информация об упаковках актуализирована'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Информация об упаковках не актуализирована'"),
			,
			НСтр("ru = 'Ни в одной строке информация об упаковках не актуализирована'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Результат.Ошибки);
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеСтрок

#Область ЗаписьУпаковокМДЛП

// Продолжение процедуры ПередЗакрытием
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаписатьНаКлиенте();
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	
	ОчиститьСообщения();
	
	ЗаписатьНаСервере();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Если Модифицированность Тогда
		
		ИмяТабличнойЧасти = Метаданные.Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП.ТабличныеЧасти.ДанныеУпаковок.Имя;
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ЗаписатьРезультатПолученияСоставаТранспортныхУпаковок(ЭтотОбъект, Объект, ИмяТабличнойЧасти, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ЗаписатьУпаковкиМДЛП();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеКнопок(Элементы.ПолучитьУпаковкиМДЛП.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУпаковкиМДЛП()
	
	ИзмененияИнформации = Объект.ДанныеУпаковок.Выгрузить(Новый Структура("ИзмененаИнформацияОбУпаковках", Истина));
	Если ИзмененияИнформации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИзмененияИнформации.НомерУпаковки      КАК НомерУпаковки,
	|	ИзмененияИнформации.КлючУпаковки       КАК КлючУпаковки,
	|	ИзмененияИнформации.МестоДеятельности  КАК МестоДеятельности
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	&ИзмененияИнформации КАК ИзмененияИнформации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиМДЛП.НомерУпаковки                   КАК НомерУпаковки,
	|	УпаковкиМДЛП.КлючУпаковки                    КАК КлючУпаковки,
	|	УпаковкиМДЛП.МестоДеятельности               КАК МестоДеятельности,
	|	УпаковкиМДЛП.ЗонаТаможенногоКонтроля         КАК ЗонаТаможенногоКонтроля,
	|	УпаковкиМДЛП.ДокументРезерва                 КАК ДокументРезерва,
	|	УпаковкиМДЛП.Статус                          КАК Статус,
	|	УпаковкиМДЛП.ДатаСтатуса                     КАК ДатаСтатуса,
	|	УпаковкиМДЛП.Владелец                        КАК Владелец,
	|	УпаковкиМДЛП.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	УпаковкиМДЛП.ИсходныйСтатус                  КАК ИсходныйСтатус,
	|	УпаковкиМДЛП.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
	|	УпаковкиМДЛП.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	УпаковкиМДЛП.ПредыдущийСтатус                КАК ПредыдущийСтатус
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераУпаковок КАК НомераУпаковок
	|		ПО
	|			УпаковкиМДЛП.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И УпаковкиМДЛП.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И УпаковкиМДЛП.МестоДеятельности = НомераУпаковок.МестоДеятельности
	|");
	
	Запрос.УстановитьПараметр("ИзмененияИнформации", ИзмененияИнформации);
	УпаковкиМДЛП = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаИзменений Из ИзмененияИнформации Цикл
		
		Отбор = Новый Структура("МестоДеятельности, НомерУпаковки, КлючУпаковки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИзменений);
		
		Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
		Для Каждого КлючИЗначение Из Отбор Цикл
			Набор.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		
		Запись = Набор.Добавить();
		
		НайденныеУпаковкиМДЛП = УпаковкиМДЛП.НайтиСтроки(Отбор);
		Если НайденныеУпаковкиМДЛП.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Запись, НайденныеУпаковкиМДЛП[0]);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаИзменений);
		
		Набор.Записать();
		
	КонецЦикла;
	
	Для Каждого ЭлементДанных Из Объект.ДанныеУпаковок Цикл
		ЭлементДанных.ИзмененаИнформацияОбУпаковках = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗаписьУпаковокМДЛП

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект,
		Элементы.ИерархияУпаковокЕдиницаИзмерения.Имя, "ИерархияУпаковок.Упаковка");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		Элементы.ИерархияУпаковокХарактеристика.Имя, "ИерархияУпаковок.ХарактеристикиИспользуются");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект,
		Элементы.ИерархияУпаковокСерия.Имя, "ИерархияУпаковок.СтатусУказанияСерий", "ИерархияУпаковок.ТипНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ОчиститьСообщения();
	
	ШтрихкодыПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	НомераГрупповыхУпаковок = Новый Массив;
	Для Каждого ДанныеГрупповойУпаковки Из ШтрихкодыПоТипам.НомераТранспортныхУпаковок Цикл
		НомераГрупповыхУпаковок.Добавить(ДанныеГрупповойУпаковки.SSCC);
	КонецЦикла;
	
	Если НомераГрупповыхУпаковок.Количество() > 0 Тогда
		
		Если НомераГрупповыхУпаковок.Количество() = 1 Тогда
			НомерГрупповойУпаковки = НомераГрупповыхУпаковок[0];
			НачатьПолучениеУпаковокМДЛП();
		Иначе
			Текст = НСтр("ru = 'Нет данных для обработки. Транспортные упаковки не могут обрабатываться пакетно.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		КонецЕсли;
		
	Иначе
		Текст = НСтр("ru = 'Нет данных для обработки. Могут быть обработаны только транспортные упаковки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводДанныхНоменклатуры(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ИерархияУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Для Каждого КлючИЗначение Из РезультатЗакрытия Цикл
		Если Строка[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Строка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Строка.ИзмененыДанныеНоменклатуры = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Строка.ИзмененыДанныеНоменклатуры Тогда
		СтрокаДанныхУпаковок = Объект.ДанныеУпаковок.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиДанных);
		ЗаполнитьЗначенияСвойств(СтрокаДанныхУпаковок, Строка);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборкаСтатусаУпаковки(РезультатВыбора, ВыбраннаяСтрока) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	Контекст.Вставить("Статус"         , РезультатВыбора.Значение);
	
	Оповестить = Новый ОписаниеОповещения("ОбработкаВыборкаСтатусаУпаковкиЗавершение", ЭтотОбъект, Контекст);
	
	СтрокаДанныхУпаковок = ИерархияУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаДанныхУпаковок.ПолучитьРодителя() <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Изменение статуса доступно только для верхнеуровневой упаковки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения,, НСтр("ru = 'Изменение статуса упаковки'"));
		Возврат;
	ИначеЕсли ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве().Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
		ТекстВопроса = НСтр("ru = 'Упаковка находится в статусе %1. Это значит, что операция документооборота с этой упаковкой не завершена.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'После изменения, есть вероятность, что вы не сможете завершить документооборот по документу, указанному в поле Документ резерва.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Вы уверены, что хотите изменить статус?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтрокаДанныхУпаковок.Статус);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение статуса упаковки'"));
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборкаСтатусаУпаковкиЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанныхУпаковок = ИерархияУпаковок.НайтиПоИдентификатору(Контекст.ВыбраннаяСтрока);
	Если ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВРезерве().Найти(СтрокаДанныхУпаковок.Статус) <> Неопределено Тогда
		СтрокаДанныхУпаковок.ДокументРезерва = Неопределено;
		СтрокаДанныхУпаковок.ИсходныйСтатус = Неопределено;
	КонецЕсли;
	СтрокаДанныхУпаковок.Статус = Контекст.Статус;
	СтрокаДанныхУпаковок.ИзмененаИнформацияОбУпаковках = Истина;
	
	ЗаполнитьДанныеУпаковокИзИерархииУпаковок();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводДанныхЗТКОтложенно()
	
	ТекущаяСтрока = Элементы.ИерархияУпаковок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ИерархияУпаковок.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторЗТК) Тогда
		
		ОбработатьВводДанныхЗТКНаСервере(Неопределено, ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) Тогда
			ПараметрыФормы = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторЗТК);
			Оповестить = Новый ОписаниеОповещения("ОбработатьВводДанныхЗТК", ЭтотОбъект, ТекущаяСтрока);
			ОткрытьФорму("Справочник.ЗоныТаможенногоКонтроляМДЛП.Форма.ЗапросДанныхЗТК", ПараметрыФормы, ЭтотОбъект,,,, Оповестить);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗонаТаможенногоКонтроля) Тогда
			СтрокаДанныхУпаковок = Объект.ДанныеУпаковок.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтрокиДанных);
			СтрокаДанныхУпаковок.ЗонаТаможенногоКонтроля = ТекущиеДанные.ЗонаТаможенногоКонтроля;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВводДанныхЗТК(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	ОбработатьВводДанныхЗТКНаСервере(РезультатЗакрытия, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВводДанныхЗТКНаСервере(РезультатЗакрытия, ВыбраннаяСтрока) Экспорт
	
	ТекущиеДанные = ИерархияУпаковок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущиеДанные.ЗонаТаможенногоКонтроля = Неопределено;
	ИнтеграцияМДЛП.ПолучитьЗонуТаможенногоКонтроляПоИдентификатору(ТекущиеДанные.ИдентификаторЗТК, ТекущиеДанные.ЗонаТаможенногоКонтроля);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Если Элемент.НомерУпаковки = НомерГрупповойУпаковки Тогда
			ЭлементФормы.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
		ЭлементФормы.Развернуть(Идентификатор);
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСтатусМДЛП(Данные)
	
	ЕстьОшибки = Данные["error_code"] <> Неопределено;
	Если ЕстьОшибки Тогда
		Возврат СтрШаблон("(%1) %2", Данные["error_code"], Данные["error_desc"]);
	Иначе
		ЭтоПотребительскаяУпаковка = Данные["sgtin"] <> Неопределено;
		Если ЭтоПотребительскаяУпаковка Тогда
			СтатусМДЛП = Данные["status"];
			Если Не ЗначениеЗаполнено(СтатусМДЛП) Тогда
				СтатусМДЛП = Данные["internal_state"];
			КонецЕсли;
			Возврат СтатусМДЛП;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеКнопок(ИмяОсновнойКнопки = Неопределено)
	
	Если ИмяОсновнойКнопки = Неопределено Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Ложь;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ПолучитьУпаковкиМДЛП.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Истина;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	ИначеЕсли ИмяОсновнойКнопки = Элементы.ЗаписатьИзмененияУпаковок.Имя Тогда
		
		Элементы.ПолучитьУпаковкиМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.КнопкаПоУмолчанию = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.КнопкаПоУмолчанию = Истина;
		
		Элементы.ЗаполнитьУпаковкиПоДаннымМДЛП.Видимость = Ложь;
		Элементы.ЗаписатьИзмененияУпаковок.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
