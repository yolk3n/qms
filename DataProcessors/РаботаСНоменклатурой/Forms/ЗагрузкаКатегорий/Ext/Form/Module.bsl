
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИдентификаторыВыбранных = Неопределено;
	СсылкаНаОбъект          = Неопределено;
	ТекстПредупреждения     = "";
	
	Параметры.Свойство("РежимВыбораКатегорий",             РежимВыбораКатегорий);
	Параметры.Свойство("ИдентификаторыВыбранныхКатегорий", ИдентификаторыВыбранных);
	Параметры.Свойство("ЗаполнятьПриВыборе",               ЗаполнятьПриВыборе);
	Параметры.Свойство("СкрыватьОписаниеКатегорий",        СкрыватьОписаниеКатегорий);
	Параметры.Свойство("ОдиночныйРежимВыбора",             ОдиночныйРежимВыбора);
	Параметры.Свойство("РазрешеноВыбиратьГруппы",          РазрешеноВыбиратьГруппы);
	Параметры.Свойство("ЭтоВыгрузкаВНациональныйКаталог",  ЭтоВыгрузкаВНациональныйКаталог);
	Параметры.Свойство("СсылкаНаОбъект",                   СсылкаНаОбъект);
	Параметры.Свойство("ВидНоменклатуры",                  ВидНоменклатуры);
	Параметры.Свойство("ТекстПредупреждения",              ТекстПредупреждения);
	
	Если ИдентификаторыВыбранных = Неопределено Тогда
		ИдентификаторыВыбранных = Новый Массив;
	КонецЕсли;
	
	ТолькоКатегорииНациональногоКаталога = ЭтоВыгрузкаВНациональныйКаталог;
	
	ВыводитьПредупреждение = Не ПустаяСтрока(ТекстПредупреждения);
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ВидНоменклатуры);
		Шаблон              = "%1%2Отображаются только категории, сопоставленные с <a href='%3'>%4</a>";
		Разделитель         = ?(ЗначениеЗаполнено(ТекстПредупреждения), Символы.ПС, "");
		ТекстПредупреждения = СтроковыеФункции.ФорматированнаяСтрока(Шаблон, ТекстПредупреждения, Разделитель, НавигационнаяСсылка, ВидНоменклатуры);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
		|ИЗ
		|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		ДоступныеКатегории      = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		ИдентификаторыВыбранных = ПересечениеМассивов(ИдентификаторыВыбранных, ДоступныеКатегории);
		ИдентификаторыКатегорийОграничения.ЗагрузитьЗначения(ДоступныеКатегории);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		ВыводитьПредупреждение = Истина;
		Элементы.ПодсказкаКФормеТекст.Заголовок = ТекстПредупреждения;
	КонецЕсли;
	
	ВедетсяУчетВидовНоменклатуры = РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры();
	
	ЗаголовокФормы = "";
	Если Параметры.Свойство("ЗаголовокФормы", ЗаголовокФормы)
		И ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		
		Заголовок = Параметры.ЗаголовокФормы;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыВыбранных) Тогда
		ИдентификаторыВыбранныхКатегорий.ЗагрузитьЗначения(ИдентификаторыВыбранных);
	КонецЕсли;
	
	ЗаполнитьРеквизитыФормы();
	
	ПодготовитьМакеты();
	
	НастроитьФормуПриСоздании();
	
	Если СсылкаНаОбъект <> Неопределено И НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ИмяМетода           = "РаботаСНоменклатуройСлужебный.ДоступныеКатегорииСервиса";
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Вычисление доступных категорий сервиса 1С:Номенклатура'");
		
		ВычислениеКатегорийОграничения = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, СсылкаНаОбъект);
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		
		ИспользоватьСопоставлениеПоРазнымТоварнымГруппам = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"РаботаСНоменклатурой", "СопоставлениеНоменклатуры\ИспользоватьСопоставлениеПоРазнымТоварнымГруппам", Ложь);
	КонецЕсли;
	
	Если ИдентификаторыВыбранных.Количество() > 1 Тогда
		ВычислениеКэшаПутей = ДлительнаяОперацияВычислениеКэшаПутей(ИдентификаторыВыбранных, УникальныйИдентификатор);
		КоличествоЗаданий   = КоличествоЗаданий + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнтернетПоддержкаПодключена Тогда
		Если КоличествоЗаданий > 0 Тогда
			УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		КонецЕсли;
		
		Если ТипЗнч(ВычислениеКатегорийОграничения) = Тип("Структура") И ВычислениеКатегорийОграничения.Свойство("Статус") Тогда
			// Массив идентификаторов выбранных пересчитывается после завершения фонового задания.
			// После пересчета производится повторный запуск метода ПостроитьДеревоКатегорий, если массив непустой.
			Если ВычислениеКатегорийОграничения.Статус = "Выполнено" Тогда
				ВычислениеКатегорийЗавершение(ВычислениеКатегорийОграничения, Неопределено);
			Иначе 
				ОповещениеОЗавершении = Новый ОписаниеОповещения("ВычислениеКатегорийЗавершение", ЭтотОбъект);
				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
				ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
				ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
				ПараметрыОжидания.ВыводитьСообщения = Ложь;
				ДлительныеОперацииКлиент.ОжидатьЗавершение(ВычислениеКатегорийОграничения, ОповещениеОЗавершении, ПараметрыОжидания);
				УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторыВыбранныхКатегорий) Тогда
			ПостроитьДеревоКатегорий(ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения(), Истина,, Истина);
		ИначеЕсли УстановленоОграничениеКатегорий() Тогда
			ПостроитьДеревоКатегорий(ИдентификаторыКатегорийОграничения.ВыгрузитьЗначения(), Истина,, Истина);
		Иначе
			ПостроитьДеревоКатегорий(Неопределено, Истина,, Истина);
		КонецЕсли;
	Иначе
		ПостроитьДеревоПослеОткрытияПродолжение = Новый ОписаниеОповещения("ПостроитьДеревоПослеОткрытияПродолжение",
			ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ПостроитьДеревоПослеОткрытияПродолжение,
			ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
		
		ИнтернетПоддержкаПодключена = Ложь;
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеПоискомКатегорий

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) И РежимОтборПоСтроке() Тогда
		ОчиститьСтрокиПоискаКатегорий();
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СформироватьРезультатПоиска();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элементы.СтрокаПоиска.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = Элементы.СтрокаПоиска.ТекстРедактирования;
	
	СформироватьРезультатПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не РежимОтборПоСтроке() Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСтрокиПоискаКатегорий();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиПоискаКатегорий()
	
	Идентификатор = Неопределено;
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Идентификатор = ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Категории.ПолучитьЭлементы().Очистить();
	
	Если Идентификатор = Неопределено И НЕ МожноПостроитьДеревоКатегорий(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
	
	ПостроитьДеревоКатегорий(Идентификатор, Истина, СтрокаПоиска);
	
	УправлениеВидимостьюДоступностью(ЭтаФорма, РежимОтборПоСтроке(), РежимТолькоВыбранные());
	
	НастроитьДоступностьКнопкиВыбора(Элементы.Категории.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРезультатПоиска()
	
	Категории.ПолучитьЭлементы().Очистить();
	
	Если НЕ РежимОтборПоСтроке() Тогда
		Элементы.Категории.Отображение = ОтображениеТаблицы.Список;
		УправлениеВидимостьюДоступностью(ЭтаФорма, РежимОтборПоСтроке(), РежимТолькоВыбранные());
	КонецЕсли;
	
	ДанныеПоКатегории = Неопределено;
	
	ПостроитьДеревоКатегорий(Неопределено, , СтрокаПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегории

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ДочерниеПодгружены Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановленОтборКатегорий Тогда
		Дочерние = СтрокаДерева.ПолучитьЭлементы();
		Если Дочерние.Количество() > 0 И Не Дочерние[0].ПустаяГруппа Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НеТребуетсяЗагрузка = Ложь;
	
	РаботаСНоменклатуройСлужебныйКлиент.КатегорииПередРазворачиванием(СтрокаДерева, СписокРазвернутыхКатегорий,
				КоличествоЗаданий, НеТребуетсяЗагрузка);
	
	Если НеТребуетсяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПостроитьДеревоКатегорий(СтрокаДерева.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ДанныеПоКатегории = Новый ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	НастроитьДоступностьКнопкиВыбора(ТекущиеДанные);
	
	Если СкрыватьОписаниеКатегорий Тогда
		Возврат;
	КонецЕсли;
	
	Баннер = "";
	Если НЕ ТекущиеДанные.ЛистоваяКатегория Тогда
		ДанныеПоКатегории = ПредставлениеГруппыКатегории(ДанныеОГруппе(ТекущиеДанные));
	Иначе
		Если НЕ ДанныеЗагруженыИзКэша(ТекущиеДанные.Идентификатор) Тогда
			СформироватьПредставлениеКатегории(ТекущиеДанные);
		Иначе
			Элементы.Баннер.Гиперссылка = Не ПустаяСтрока(Баннер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;

	ИзменитьПометкуРодителей(ТекущиеДанные, ТекущиеДанные.Пометка);
	ИзменитьПометкуПодчиненных(ТекущиеДанные, ТекущиеДанные.Пометка);
	
	УстановитьСнятьОтметкуВыбораКатегории(ТекущиеДанные.Пометка, ТекущиеДанные.Идентификатор);
	
	Если НЕ ТекущиеДанные.Пометка И РежимТолькоВыбранные() Тогда
		УдалитьСтрокиБезПометки();
	КонецЕсли;
	
	ОбновитьСписокВыбранных(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные.ПустаяГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ОдиночныйРежимВыбора 
		И ТекущиеДанные.КоличествоПодчиненных = 0 Тогда
		
		ВыбратьКатегориюИЗакрыть(ТекущиеДанные);
		
	ИначеЕсли РежимОтборПоСтроке() Тогда
		
		СтандартнаяОбработка = Ложь;
		ОчиститьСтрокиПоискаКатегорий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БаннерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(СсылкаПереходаПоБаннеру) Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаПереходаПоБаннеру);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьКатегорию(Команда)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	ИдентификаторКатегории = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторКатегории = ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Если РежимОтборПоСтроке()
		ИЛИ РазрешеноВыбиратьГруппы Тогда
		
		Если ОдиночныйРежимВыбора Тогда
			ВыбратьКатегориюИЗакрыть(ТекущиеДанные);
		Иначе
			СтандартнаяОбработка = Ложь;
			Если Элементы.Категории.Отображение = ОтображениеТаблицы.Список Тогда
				ОчиститьСтрокиПоискаКатегорий();
			Иначе
				ПостроитьДеревоКатегорий(ИдентификаторКатегории, Истина);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ЗаполнятьПриВыборе Тогда
			ПоказатьВопросПриВыбореКатегории();
		Иначе
			ВыбратьКатегориюИзСписка();
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКатегории(Команда)
	
	ПроставитьПризнакЗагрузки();
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗагруженыИзКэша(ТекущиеДанные.Идентификатор) Тогда
		СформироватьПредставлениеКатегории(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранные(Команда)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	Элементы.ТолькоВыбранные.Пометка = НЕ Элементы.ТолькоВыбранные.Пометка;
	
	ИдентификаторКатегории = "";
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ИдентификаторКатегории = Элементы.Категории.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Если ИдентификаторыВыбранныхКатегорий.Количество() > 1 Тогда
		СформироватьДополнитьДеревоКатегорий(ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения(), ИдентификаторКатегории);
		Возврат;
	КонецЕсли;
	
	Если РежимТолькоВыбранные() Тогда
		// Отображение только выбранных элементов.
		УдалитьСтрокиБезПометки();
		Если РежимВыбораКатегорий
			И Команда = Неопределено Тогда
			ИзменитьЗначенияПометокГрупп(Категории, 2);
		КонецЕсли;

	Иначе
		// Отображение всех элементов.
		КэшКатегорий           = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
		ВосстановитьКатегорииИзКэша(КэшКатегорий, ИдентификаторКатегории, Окно <> Неопределено);
		ВосстановитьПометкиДереваКатегорий();
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект, РежимОтборПоСтроке(), РежимТолькоВыбранные());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ИзменитьЗначениеПометок(Категории, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ИзменитьЗначениеПометок(Категории, 0);
	СписокОтмеченныхКатегорий.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегории(Команда)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	Если Не ВедетсяУчетВидовНоменклатуры Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Возможность загрузки категорий отключена'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КатегорииКЗагрузке = ВыбранныеКатегории();
	
	Если КатегорииКЗагрузке.Количество() = 0 Тогда 
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбраны категории для загрузки.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоКатегорийДляЗагрузки = 0;
	
	Для Каждого ЭлементКоллекции Из КатегорииКЗагрузке Цикл
		КоличествоКатегорийДляЗагрузки = КоличествоКатегорийДляЗагрузки 
			+ ?(ЭлементКоллекции.КоличествоПодчиненных = 0, 1, ЭлементКоллекции.КоличествоПодчиненных);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораРежимаЗагрузки", ЭтотОбъект,
		Новый Структура("КатегорииКЗагрузке", КатегорииКЗагрузке));
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ВыборРежимаЗагрузкиКатегорий",
		Новый Структура("КоличествоКатегорийДляЗагрузки, КатегорииКЗагрузке", 
			КоличествоКатегорийДляЗагрузки, КатегорииКЗагрузке), ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРежимаЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТолькоКатегорииНациональногоКаталогаПриИзменении(Элемент)
	ОбработатьИзменениеНастроекОтбораКатегорий();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоКатегорииТоварнойГруппыПриИзменении(Элемент)
	ОбработатьИзменениеНастроекОтбораКатегорий();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПометками

&НаКлиенте
Процедура ИзменитьПометкуРодителей(ТекущиеДанные, Пометка)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Пометка <> 0 Тогда
		
		НайденыНеОтмеченные = Ложь;
		
		Для Каждого ЭлементКоллекции Из Родитель.ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.Пометка <> 1
				И ОтрабатыватьСтроку(ЭлементКоллекции)
				И НЕ ЭлементКоллекции.ПустаяГруппа Тогда
				
				НайденыНеОтмеченные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыНеОтмеченные Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = 1;
		КонецЕсли;
		
	Иначе
		
		НайденыОтмеченные = Ложь;
		
		Для Каждого ЭлементКоллекции Из Родитель.ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.Пометка <> 0
				И ОтрабатыватьСтроку(ЭлементКоллекции)
				И НЕ ЭлементКоллекции.ПустаяГруппа Тогда
				
				НайденыОтмеченные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НайденыОтмеченные Тогда
			Родитель.Пометка = 0;
		Иначе 
			Родитель.Пометка = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСнятьОтметкуВыбораКатегории(Родитель.Пометка, Родитель.Идентификатор);
	
	ИзменитьПометкуРодителей(Родитель, Пометка);
			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкуВыбораКатегории(Пометка, Идентификатор)
	
	НайденноеЗначение = СписокОтмеченныхКатегорий.НайтиПоЗначению(Идентификатор);
	Если НайденноеЗначение = Неопределено И Пометка = 1 Тогда
		СписокОтмеченныхКатегорий.Добавить(Идентификатор);
	ИначеЕсли НайденноеЗначение <> Неопределено И Пометка <> 1 Тогда
		СписокОтмеченныхКатегорий.Удалить(НайденноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияПометокГрупп(ТекущаяВетка, ЗначениеПометки)
	
	Для Каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Пометка = ЗначениеПометки;
		
		ИзменитьЗначенияПометокГрупп(ЭлементКоллекции, ЗначениеПометки);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеПометок(ТекущаяВетка, ЗначениеПометки)
	
	Для Каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если Не ОтрабатыватьСтроку(ЭлементКоллекции)
			ИЛИ ЭлементКоллекции.ПустаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Пометка = ЗначениеПометки;
		Если ЗначениеЗаполнено(ЭлементКоллекции.Идентификатор) И ЗначениеПометки = 1 Тогда
			УстановитьСнятьОтметкуВыбораКатегории(ЗначениеПометки, ЭлементКоллекции.Идентификатор);
		КонецЕсли;
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			ИзменитьЗначениеПометок(ЭлементКоллекции, ЗначениеПометки);
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуПодчиненных(ТекущиеДанные, Пометка)
	
	Подчиненные = ТекущиеДанные.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из Подчиненные Цикл
		
		Если НЕ ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Пометка = Пометка;
		Если НЕ ЭлементКоллекции.ПустаяГруппа Тогда
			УстановитьСнятьОтметкуВыбораКатегории(Пометка, ЭлементКоллекции.Идентификатор);
		КонецЕсли;
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			ИзменитьПометкуПодчиненных(ЭлементКоллекции, Пометка);
		КонецЕсли;
		
		ОбновитьСписокВыбранных(ЭлементКоллекции);
		
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеДанных

&НаКлиенте
Функция ПредставлениеГруппыКатегории(ДанныеЗаполнения)
	
	ДанныеПоКатегории = Новый ТабличныйДокумент;
	
	Область = ДанныеПоКатегории.Область(2, 1);
	
	Область.ЦветТекста = ГиперссылкаЦвет;
	Область.Шрифт      = Новый Шрифт("Arial", 12);
	Область.Текст      = ДанныеЗаполнения.НаименованиеКатегории;
	
	Возврат ДанныеПоКатегории;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеКатегории(ДанныеЗаполнения)
	
	ДанныеПоКатегории = Новый ТабличныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ПутьДоКатегории) Тогда
		ДанныеЗаполнения.ПутьДоКатегории = НСтр("ru='Все категории'");
	КонецЕсли;
	
	РаботаСНоменклатурой.ЗаполнитьКарточкуВидаНоменклатуры(ДанныеПоКатегории, ДанныеЗаполнения, Истина);
		
	Возврат ДанныеПоКатегории;
	
КонецФункции

&НаСервере
Процедура ПодготовитьМакеты()
	
	МакетГруппыКатегорий = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_ГруппаКатегорий");
		
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗагруженыИзКэша(Идентификатор)
	
	ПредставлениеКатегории = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Если ПредставлениеКатегории.Количество() > 0
		И ЭтоАдресВременногоХранилища(ПредставлениеКатегории[0].ПутьКТабличномуДокументу) Тогда
		
		ДанныеПоКатегории       = ПолучитьИзВременногоХранилища(ПредставлениеКатегории[0].ПутьКТабличномуДокументу);
		Баннер                  = ПредставлениеКатегории[0].ПутьКДаннымБаннера;
		СсылкаПереходаПоБаннеру = ПредставлениеКатегории[0].СсылкаПереходаПоБаннеру;
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ДанныеОГруппе(ТекущиеДанные)
	
	ДанныеОГруппеСтруктура = Новый Структура;
	
	ДанныеОГруппеСтруктура.Вставить("НаименованиеКатегории", ТекущиеДанные.Наименование);
	ДанныеОГруппеСтруктура.Вставить("КоличествоПодчиненных", ТекущиеДанные.КоличествоПодчиненных);
	
	Возврат ДанныеОГруппеСтруктура;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПредставлениеКатегории(ТекущиеДанные)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ИдентификаторКатегории                 = ТекущиеДанные.Идентификатор;
	ДанныеПоКатегории                      = Новый ТабличныйДокумент;
	ПолучитьПредставлениеКатегорииССервиса = Истина;
	
	КэшКатегорий = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	Если ЗначениеЗаполнено(КэшКатегорий) Тогда
		
		НайденнаяСтрокаКэша = Неопределено;
		Если КэшКатегорий.Свойство("_" + ИдентификаторКатегории, НайденнаяСтрокаКэша) Тогда
			
			Если НайденнаяСтрокаКэша.Свойство("АдресКэшаДанныхСервиса") Тогда
				ЗаполнитьПредставлениеКатегорииИзКэша(НайденнаяСтрокаКэша.АдресКэшаДанныхСервиса, ИдентификаторКатегории);
					
				ПолучитьПредставлениеКатегорииССервиса = НЕ ДанныеЗагруженыИзКэша(ИдентификаторКатегории);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьПредставлениеКатегорииССервиса Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗаданий = КоличествоЗаданий + 1;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("Идентификатор",        ИдентификаторКатегории);
	
	СформироватьПредставлениеКатегорииЗавершение = Новый ОписаниеОповещения("СформироватьПредставлениеКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ПолучитьПолноеОписаниеКатегорииПоИдентификатору(СформироватьПредставлениеКатегорииЗавершение,
		ИдентификаторКатегории, ЭтотОбъект, Неопределено, Элементы.ДекорацияДлительнаяОперация);
		
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	СформироватьПредставлениеКатегорииНаСервере(Результат.АдресРезультата);
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено
		И Элементы.Категории.ТекущиеДанные.Идентификатор = ДополнительныеПараметры.Идентификатор Тогда
		
		ДанныеЗагруженыИзКэша(ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
		
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеКатегорииНаСервере(АдресРезультата)
	
	Результат = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если Результат = Неопределено
		ИЛИ Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКатегорииСервиса = Результат[0];
	
	ТабличныйДокументКатегории = ПредставлениеКатегории(ДанныеКатегорииСервиса);
		
	НоваяСтрока = КэшПредставленийКатегорий.Добавить();
	
	НоваяСтрока.Идентификатор                = ДанныеКатегорииСервиса.Идентификатор;
	НоваяСтрока.ПутьКТабличномуДокументу     = ПоместитьВоВременноеХранилище(ТабличныйДокументКатегории, УникальныйИдентификатор);
	НоваяСтрока.ИдентификаторРекламнойЗаписи = ДанныеКатегорииСервиса.ИдентификаторРекламнойЗаписи;
	НоваяСтрока.ЗакэшироватьБаннер           = Не ПустаяСтрока(ДанныеКатегорииСервиса.ИдентификаторРекламнойЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКатегорииОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РаботаСНоменклатуройКлиент.
		ОбработкаРасшифровкиПредставленияКатегории(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаКлиенте
Процедура НастроитьДоступностьКнопкиВыбора(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ВыбратьКатегорию.Доступность = Ложь;
	Иначе
		Элементы.ВыбратьКатегорию.Доступность = ТекущиеДанные.ЛистоваяКатегория
			ИЛИ НЕ ОдиночныйРежимВыбора
			ИЛИ НЕ РежимВыбораКатегорий 
			ИЛИ РазрешеноВыбиратьГруппы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РежимОтборПоСтроке()
	
	Результат = Элементы.Категории.Отображение = ОтображениеТаблицы.Список;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РежимТолькоВыбранные()
	
	Результат = Элементы.ТолькоВыбранные.Пометка;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации()
	
	Если КоличествоЗаданий = 0 Тогда
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	ДлительнаяОперацияНеАктивна = Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.Пустая;
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Не ДлительнаяОперацияНеАктивна;
	
	Элементы.ГруппаОсновныеКнопкиФормы.Доступность = ДлительнаяОперацияНеАктивна;
	Элементы.КоманднаяПанельКатегорий.Доступность = ДлительнаяОперацияНеАктивна И Не РежимОтборПоСтроке();
	Элементы.СтрокаПоиска.Доступность = ДлительнаяОперацияНеАктивна И Не РежимТолькоВыбранные();
	
	Элементы.УправлениеОтборами.Доступность = ДлительнаяОперацияНеАктивна;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Категории.Загружена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РежимВыбораКатегорий");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПометка.Имя);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюДоступностью(Форма, РежимОтборПоСтроке, РежимТолькоВыбранные)
	
	// Отбор по строке.
	Форма.Элементы.КатегорииПометка.ТолькоПросмотр               = РежимОтборПоСтроке;
	Форма.Элементы.НадписьКоличествоКатегорийПриПоиске.Видимость = РежимОтборПоСтроке;
	Форма.Элементы.КоманднаяПанельКатегорий.Доступность          = НЕ РежимОтборПоСтроке;
	Форма.Элементы.ЗагрузитьКатегории.Доступность                = НЕ РежимОтборПоСтроке;
	Форма.Элементы.ВыбратьКатегорию.Доступность                  = НЕ РежимОтборПоСтроке;
	
	// Только выбранные.
	Форма.Элементы.СтрокаПоиска.Доступность     = НЕ РежимТолькоВыбранные;
	Форма.Элементы.УстановитьФлажки.Доступность = НЕ РежимТолькоВыбранные;
	Форма.Элементы.СнятьФлажки.Доступность      = НЕ РежимТолькоВыбранные;
	
	Если НЕ Форма.ПравоИзмененияДанных Тогда
		Форма.Элементы.ЗагрузитьКатегории.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	Если СкрыватьОписаниеКатегорий Тогда
		Элементы.ГруппаДеревоКатегорий.Ширина                   = 0;
		Элементы.ГруппаДеревоКатегорий.РастягиватьПоГоризонтали = Истина;
		Элементы.ГруппаДанныеКатегорий.Видимость                = Ложь;
		ЭтотОбъект.Ширина = 60;
	КонецЕсли;
	
	Элементы.КоманднаяПанельКатегорий.Видимость   = Не ОдиночныйРежимВыбора;
	Элементы.КатегорииПометка.Видимость           = Не ОдиночныйРежимВыбора;

	Элементы.ЗагрузитьКатегории.Видимость         = НЕ РежимВыбораКатегорий;
	Элементы.ЗагрузитьКатегории.КнопкаПоУмолчанию = НЕ РежимВыбораКатегорий;
	Элементы.ПодсказкаКФорме.Видимость            = НЕ РежимВыбораКатегорий ИЛИ ВыводитьПредупреждение;
	Элементы.ПодсказкаКФормеКартинка.Видимость    = ВыводитьПредупреждение И НЕ ЗначениеЗаполнено(ВидНоменклатуры);

	Элементы.ВыбратьКатегорию.Видимость           = РежимВыбораКатегорий;
	Элементы.ВыбратьКатегорию.КнопкаПоУмолчанию   = РежимВыбораКатегорий;
	
	Элементы.ТолькоКатегорииНациональногоКаталога.Видимость = ТолькоКатегорииНациональногоКаталога;
	
	Если НЕ ПравоИзмененияДанных Тогда
		Элементы.ЗагрузитьКатегории.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
		Если ЗначениеЗаполнено(ИдентификаторыВыбранныхКатегорий) Тогда
			ПостроитьДеревоКатегорий(ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения(), Истина);
		Иначе
			ПостроитьДеревоКатегорий(Неопределено);
		КонецЕсли;

	Иначе
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ИмяФормыВидаНоменклатуры = Метаданные.НайтиПоТипу(ТипВидаНоменклатуры()).ПолноеИмя() +".Форма.ФормаСписка";
	
	ПравоИзмененияДанных = РаботаСНоменклатурой.ПравоИзмененияДанных();
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если ИнтернетПоддержкаПодключена Тогда
		ОперацияЗагрузкаКатегорий = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
			УникальныйИдентификатор, Неопределено, Неопределено);
	КонецЕсли;
	
	РазвернутыеСтрокиИндекс = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	ГиперссылкаЦвет = ЦветаСтиля.ГиперссылкаЦвет;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриВыбореКатегории(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьКатегориюИзСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПриВыбореКатегории()
	
	ТекущаяКатегория = "";
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.Категории.ТекущиеДанные.Наименование;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПриВыбореКатегории", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, 
		СтрШаблон(НСтр("ru = 'Текущий вид номенклатуры будет заполнен на основании категории %1 и записан. Продолжить?'"),
			ТекущаяКатегория), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипВидаНоменклатуры()
	
	Возврат Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
	
КонецФункции

&НаКлиенте
Процедура СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки()
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеОповещенияПользователя(ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.Количество() = 1 Тогда
		
		ИмяФормыВидаНоменклатуры = РаботаСНоменклатуройСлужебныйВызовСервера.ИмяФормыЭлементаВидаНоменклатуры();
		Если НЕ ЗначениеЗаполнено(ИмяФормыВидаНоменклатуры) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыВидаНоменклатуры, Новый Структура("Ключ", ДополнительныеПараметры[0]), ЭтотОбъект);
		
	Иначе
		
		РаботаСНоменклатуройКлиентПереопределяемый.ОткрытьФормуСпискаВидаНоменклатуры(ДополнительныеПараметры, ЭтотОбъект);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюИзСписка()
	
	ВыбранныеКатегории = ВыбранныеКатегории();
	
	ПолучитьЛистовыеКатегорииИзРодительских(ВыбранныеКатегории);
	
	ПараметрыЗакрытия = Неопределено;
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		ПараметрыЗакрытия = Новый Структура("ЗаполнятьПриВыборе, ВыбранныеОбъекты",
			ЗаполнятьПриВыборе,
			ВыбранныеКатегории);
	КонецЕсли;
	
	Закрыть(ПараметрыЗакрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКатегорий(ИдентификаторКатегории, ВосстановитьДеревоКатегорий = Ложь,
				СтрокаПоискаКатегорий = Неопределено, ЭтоСозданиеФормы = Ложь)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаКатегорий.ПостроитьДеревоКатегорий",
		Истина);
	
	МножественныйВыборКатегории = Ложь;
	Если ТипЗнч(ИдентификаторКатегории) = Тип("Массив") Тогда
		Если ИдентификаторКатегории.Количество()= 1 Тогда
			ИдентификаторКатегории = ИдентификаторКатегории[0];
		Иначе
			МножественныйВыборКатегории = Истина;
		КонецЕсли;
	КонецЕсли;
			
	Если НЕ МножественныйВыборКатегории Тогда
		
		ТекущаяКатегория      = ИдентификаторКатегории;
		ТекущаяВетка          = Неопределено;
		ТребуетсяЗагрузка     = Истина;
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории,
			ТекущаяВетка, ТребуетсяЗагрузка);
		
		Если НЕ ТребуетсяЗагрузка
			И НЕ ВосстановитьДеревоКатегорий Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИдентификаторКатегории) = Тип("Массив") И ИдентификаторКатегории.Количество() > 0 Тогда 
		// Для построения дерева используется кэш путей
		СформироватьДополнитьДеревоКатегорий(ИдентификаторКатегории, ИдентификаторКатегории[ИдентификаторКатегории.ВГраница()]);
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеИзКэша = Ложь;
	
	ДлительнаяОперация = ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, ПолучитьДанныеИзКэша,
				ВосстановитьДеревоКатегорий, ЭтоСозданиеФормы, СтрокаПоискаКатегорий, МножественныйВыборКатегории);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ИдентификаторКатегории",   ИдентификаторКатегории);
		ПараметрыЗавершения.Вставить("ЭтоСозданиеФормы",         ЭтоСозданиеФормы);

		Если ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
			ПараметрыЗавершения.Вставить("СтрокаПоиска",        СтрокаПоискаКатегорий);
		КонецЕсли;
		
		Если ВосстановитьДеревоКатегорий Тогда
			ПараметрыЗавершения.Вставить("ВосстановитьДеревоКатегорий", Истина);
		КонецЕсли;

		ПостроитьДеревоКатегорийЗавершение = Новый ОписаниеОповещения("ПостроитьДеревоКатегорийЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		
		РаботаСНоменклатуройСлужебныйКлиент.НачатьОжиданиеПолученияДанныхСервиса(ПостроитьДеревоКатегорийЗавершение,
			ДлительнаяОперация, ЭтотОбъект, Неопределено, Элементы.ДекорацияДлительнаяОперация);
		
	КонецЕсли;
	
	Если ПолучитьДанныеИзКэша Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторКатегории",   ИдентификаторКатегории);
		ДополнительныеПараметры.Вставить("ПолучитьДанныеИзКэша",     Истина);
		ДополнительныеПараметры.Вставить("ЭтоСозданиеФормы",         ЭтоСозданиеФормы);
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		
		ПостроитьДеревоКатегорийЗавершение(Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, ПолучитьДанныеИзКэша,
				Знач ВосстановитьДеревоКатегорий, Знач ЭтоСозданиеФормы, Знач СтрокаПоискаКатегорий, МножественныйВыборКатегории)
	
	ЕстьКорневыеКатегории = Категории.ПолучитьЭлементы().Количество() > 0;

	КэшКатегорий = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	
	Если НЕ ЕстьКорневыеКатегории И ИдентификаторКатегории = Неопределено И НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
		
		Если РаботаСНоменклатуройСлужебныйКлиентСервер.ЕстьКорневыеКатегорииВКэше(КэшКатегорий) Тогда
			ВосстановитьКатегорииИзКэша(КэшКатегорий, "");
			ПроставитьПризнакЗагрузки();
		Иначе
			
			Если ОперацияЗагрузкаКатегорий = Неопределено Тогда
				ОперацияЗагрузкаКатегорий = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
					УникальныйИдентификатор, Неопределено, Неопределено);
			КонецЕсли;
			
			ДлительнаяОперация = ОперацияЗагрузкаКатегорий;
			
		КонецЕсли;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
			СтрокаПоиска = "";
			Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;

		Если НЕ ВосстановитьИНайтиВеткуКатегорииИзКэша(ИдентификаторКатегории, ЭтоСозданиеФормы,
					МножественныйВыборКатегории, КэшКатегорий) Тогда
			Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
				ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориямиВФоне(
					ИдентификаторКатегории, Неопределено, УникальныйИдентификатор, Неопределено);
			Иначе
				ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуВФоне(
					ИдентификаторКатегории, Неопределено, УникальныйИдентификатор, Неопределено);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаКатегорий) И ИдентификаторКатегории = Неопределено Тогда
		
		ДлительнаяОперация = РаботаСНоменклатуройСлужебныйКлиент.ПоискКатегорийПоСтроке(СтрокаПоискаКатегорий,
			УникальныйИдентификатор, Неопределено);
		
	Иначе
		
		Если РаботаСНоменклатуройСлужебныйКлиент.ЗагрузитьДанныеДочернихИзКэша(ИдентификаторКатегории, КэшКатегорий) Тогда
			ПолучитьДанныеИзКэша = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьДочерниеКатегорииВФоне(
			ИдентификаторКатегории, 3, УникальныйИдентификатор, Неопределено);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Функция ВосстановитьИНайтиВеткуКатегорииИзКэша(ИдентификаторКатегории, ЭтоСозданиеФормы, МножественныйВыборКатегории, КэшКатегорий)
	
	Если ЗначениеЗаполнено(КэшКатегорий) Тогда
		
		ВосстановитьКатегорииИзКэша(КэшКатегорий, "");
		
		Если ИдентификаторКатегории = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ МножественныйВыборКатегории Тогда
			
			Если КэшКатегорий.Свойство("_" + ИдентификаторКатегории) Тогда
				
				ВеткаРодителя = Неопределено;
				ТекущаяВетка  = Неопределено;
				РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(
					Категории, ИдентификаторКатегории, ТекущаяВетка, , Истина, ВеткаРодителя);
				
				Если ВеткаРодителя <> Неопределено И ТекущаяВетка <> Неопределено И ВеткаРодителя.ДочерниеПодгружены Тогда
					
					ИдентификаторВыбранногоРубрикатора = ТекущаяВетка.ПолучитьИдентификатор();
					
					Если ЭтоСозданиеФормы
						И ЗначениеЗаполнено(ИдентификаторыВыбранныхКатегорий)
						И Не ОдиночныйРежимВыбора Тогда
						
						ТекущаяВетка = Категории.НайтиПоИдентификатору(ИдентификаторВыбранногоРубрикатора);
						Если ТекущаяВетка <> Неопределено Тогда
							ТекущаяВетка.Пометка = 1;
							ТолькоВыбранные(Неопределено);
						КонецЕсли;
						
					Иначе
						ПроставитьПризнакЗагрузки();
						ВосстановитьПометкиДереваКатегорий();
					КонецЕсли;
					
					Элементы.Категории.ТекущаяСтрока = ИдентификаторВыбранногоРубрикатора;
					Возврат Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПостроитьДеревоКатегорийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПолучитьДанныеИзКэша = ДополнительныеПараметры.Свойство("ПолучитьДанныеИзКэша");
	СтруктураПоискаКатегорий                 = Новый Структура;
	ВыбранныйИдентификатор                   = Неопределено;
	ЭтоПоискКатегорий                        = ДополнительныеПараметры.Свойство("СтрокаПоиска");
	ВосстановитьДеревоКатегорий              = ДополнительныеПараметры.Свойство("ВосстановитьДеревоКатегорий");
	МассивИдентификаторовРодителей           = Новый Массив();
	ИдентификаторКатегории                   = Неопределено;
	КэшКатегорий                             = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	
	Если Не ПолучитьДанныеИзКэша Тогда
		Если Результат.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ЗагрузитьДанныеДерева(Результат.АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий,
									ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
	КонецЕсли;
	
	ДополнительныеПараметры.Свойство("ИдентификаторКатегории", ИдентификаторКатегории);
	
	ЗаполнитьДеревоКатегорийИзКэша(ЭтоПоискКатегорий, ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, ВосстановитьДеревоКатегорий, ВыбранныйИдентификатор);

	Если ЗначениеЗаполнено(КэшКатегорий) И НЕ ПолучитьДанныеИзКэша Тогда
		РаботаСНоменклатуройСлужебныйКлиент.СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли;

	ЗакэшироватьИзображенияБаннеров();
	
	Если ДополнительныеПараметры.ЭтоСозданиеФормы
		И ЗначениеЗаполнено(ИдентификаторыВыбранныхКатегорий)
		И Не ОдиночныйРежимВыбора Тогда
		
		Если ИдентификаторКатегории <> Неопределено
			И ТипЗнч(ИдентификаторКатегории) = Тип("Строка")
			И ВыбранныйИдентификатор <> Неопределено Тогда
			
			Элементы.Категории.ТекущаяСтрока = ВыбранныйИдентификатор;
			ТекущаяВетка = Категории.НайтиПоИдентификатору(ВыбранныйИдентификатор);
			Если ТекущаяВетка <> Неопределено Тогда
				ТекущаяВетка.Пометка = 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ИдентификаторКатегории) = Тип("Массив") Тогда
			ПоследняяКатегорияИзСписка = ИдентификаторКатегории[ИдентификаторКатегории.ВГраница()];
			ПроставитьПометкуВыбраннымКатегориям(Категории, ИдентификаторКатегории, ПоследняяКатегорияИзСписка);
		КонецЕсли;
		
		ТолькоВыбранные(Неопределено);
		
	Иначе
		
		ПроставитьПризнакЗагрузки();
		ВосстановитьПометкиДереваКатегорий();
		
	КонецЕсли;

	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	
	Если ЭтоПоискКатегорий Тогда
		ОставитьТолькоВыбранныеКатегории();
	КонецЕсли;
	
	НастроитьДоступностьКнопкиВыбора(Элементы.Категории.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДерева(АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий = Неопределено,
				ЭтоПоискКатегорий = Ложь, МассивИдентификаторовРодителей = Неопределено)
	
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройСлужебный.ОбработатьРезультатДанныхСервисаКатегорий(ДанныеСервиса, ДополнительныеПараметры,
		КэшКатегорий, СтруктураПоискаКатегорий, ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоКатегорийИзКэша(ЭтоПоискКатегорий, Знач ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, ВосстановитьДеревоКатегорий, ВыбранныйИдентификатор)
					
	НайтиИУстановитьВеткуКатегории = Ложь;
	
	ОткрытоОкноПриложения = Истина;
	
	Если ЭтоПоискКатегорий Тогда // Поиск по строке.
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыПоискаРубрики(СтруктураПоискаКатегорий, Категории);
		
		Элементы.Категории.Отображение  = ОтображениеТаблицы.Список;
		Если Категории.ПолучитьЭлементы().Количество() Тогда
			Элементы.Категории.ТекущаяСтрока = Категории.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
		Иначе
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
		КонецЕсли;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда
		
		Если ИдентификаторКатегории = Неопределено Тогда
			ИдентификаторКатегории = "";
		ИначеЕсли ТипЗнч(ИдентификаторКатегории) = Тип("Массив")
			И ИдентификаторКатегории.Количество() Тогда
			ИдентификаторКатегории = ИдентификаторКатегории[0];
		КонецЕсли;
		
		Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
			РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		КонецЕсли;
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории,
			МассивИдентификаторовРодителей);
		
		РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьРазвернутыеСтроки(Элементы.Категории, РазвернутыеСтрокиИндекс, Категории,
			СписокРазвернутыхКатегорий, ,МассивИдентификаторовРодителей);
			
		ОбработатьПредставлениеКатегорийИзКэша(КэшКатегорий);
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, 
			Категории.ПолучитьЭлементы().Количество() > 0);
			
		НайтиИУстановитьВеткуКатегории = Истина;
		
	ИначеЕсли ИдентификаторКатегории = Неопределено Тогда // Начальная загрузка разделов.
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		ИдентификаторКатегории         = "";
		ОткрытоОкноПриложения          = Истина;
		
	Иначе // Загрузка подчиненных элементов классификатора (потомков).
		
		МассивИдентификаторовРодителей = Новый Массив;
		МассивИдентификаторовРодителей.Добавить(ИдентификаторКатегории);
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории, МассивИдентификаторовРодителей);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		
	КонецЕсли;
		
	Если НайтиИУстановитьВеткуКатегории Тогда
		РаботаСНоменклатуройСлужебныйКлиент.НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории,
			Элементы.Категории, Категории, ОткрытоОкноПриложения, , ВыбранныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьКатегорииИзКэша(КэшКатегорий, ИдентификаторКатегории, ФормаОткрыта = Истина)
				
	РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьДеревоИзКэшаКатегорий(КэшКатегорий, Категории,
		"", СписокРазвернутыхКатегорий);
	
	ОбработатьПредставлениеКатегорийИзКэша(КэшКатегорий);
	
	РаботаСНоменклатуройСлужебныйКлиент.НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории,
		Элементы.Категории, Категории, ФормаОткрыта);
		
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы,
				Категории.ПолучитьЭлементы().Количество() > 0);

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПометкиДереваКатегорий()
	
	ПроставитьВДеревеКатегорийОтметкиВыбранных(Категории.ПолучитьЭлементы());
	
	ПомеченныеКатегории = СписокОтмеченныхКатегорий.Скопировать();
	
	Для Каждого ЭлементВыбранныхКатегорий Из ИдентификаторыВыбранныхКатегорий Цикл
		ПомеченныеКатегории.Добавить(ЭлементВыбранныхКатегорий.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементПометки Из ПомеченныеКатегории Цикл
		ТекущаяВетка = Неопределено;
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ЭлементПометки.Значение, ТекущаяВетка, , Истина);
		Если ТекущаяВетка <> Неопределено Тогда
			ТекущаяВетка.Пометка = 1;
			Если НЕ РежимТолькоВыбранные() Тогда
				ИзменитьПометкуРодителей(ТекущаяВетка, 1);
			КонецЕсли;
			ИзменитьПометкуПодчиненных(ТекущаяВетка, 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьВДеревеКатегорийОтметкиВыбранных(СтрокиДереваКатегорий)
	
	Для Каждого СтрокаКатегории Из СтрокиДереваКатегорий Цикл
		
		Если СтрокаКатегории.ПустаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимВыбораКатегорий Тогда
			СтрокаКатегории.Загружена = Ложь;
			Если ИдентификаторыВыбранныхКатегорий.НайтиПоЗначению(СтрокаКатегории.Идентификатор) <> Неопределено Тогда
				СтрокаКатегории.Пометка = 1;
			КонецЕсли;
		ИначеЕсли СтрокаКатегории.Загружена Тогда
			СтрокаКатегории.Пометка = 1;
		КонецЕсли;
		
		Если НЕ СтрокаКатегории.ЛистоваяКатегория Тогда
			ПроставитьВДеревеКатегорийОтметкиВыбранных(СтрокаКатегории.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПредставлениеКатегорийИзКэша(КэшКатегорий)
	
	Для Каждого СтрокаКэша Из КэшКатегорий Цикл
		
		ИдентификаторКатегории = СтрокаКэша.Ключ;
		
		Если КэшПредставленийКатегорий.НайтиСтроки(
			Новый Структура("Идентификатор", ИдентификаторКатегории)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСтрокиКэшаКатегорий = СтрокаКэша.Значение;
		Если ЗначениеСтрокиКэшаКатегорий.КоличествоПодчиненных > 0
			ИЛИ НЕ ЗначениеСтрокиКэшаКатегорий.Свойство("АдресКэшаДанныхСервиса") Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаполнитьПредставлениеКатегорииИзКэша(ЗначениеСтрокиКэшаКатегорий.АдресКэшаДанныхСервиса, ИдентификаторКатегории);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеКатегорииИзКэша(АдресКэшаДанныхСервиса, ИдентификаторКатегории)
	
	ДанныеСервисаКатегорий = ПолучитьИзВременногоХранилища(АдресКэшаДанныхСервиса);
	
	НайденнаяСтрокаВКэше = ДанныеСервисаКатегорий.Найти(ИдентификаторКатегории);
	
	Если НайденнаяСтрокаВКэше <> Неопределено Тогда
		Если НайденнаяСтрокаВКэше.ДополнительныеРеквизиты.Количество() Тогда
			ПодготовитьПредставлениеКатегории(НайденнаяСтрокаВКэше, КэшПредставленийКатегорий,
				УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьПредставлениеКатегории(ДанныеДляДобавления, КэшПредставленийКатегорий, УникальныйИдентификатор)
	
	НоваяСтрока = КэшПредставленийКатегорий.Добавить();
	НоваяСтрока.Идентификатор                = ДанныеДляДобавления.Идентификатор;
	НоваяСтрока.ИдентификаторРекламнойЗаписи = ДанныеДляДобавления.ИдентификаторРекламнойЗаписи;
	НоваяСтрока.ЗакэшироватьБаннер           = Не ПустаяСтрока(ДанныеДляДобавления.ИдентификаторРекламнойЗаписи);

	ТабличныйДокументКатегории               = ПредставлениеКатегории(ДанныеДляДобавления);
	НоваяСтрока.ПутьКТабличномуДокументу     = ПоместитьВоВременноеХранилище(ТабличныйДокументКатегории, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПомеченныеКатегории(ТекущаяВетка, КатегорииКЗагрузке)
	
	Для Каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если НЕ ЭлементКоллекции.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементКоллекции.ТехническаяСтрока
			ИЛИ ЭлементКоллекции.ПустаяГруппа Тогда
			КатегорииКЗагрузке.Добавить(СтруктураДанных(ЭлементКоллекции.ПолучитьРодителя()));
			Возврат;
		КонецЕсли;
		
		Если ЭлементКоллекции.ЛистоваяКатегория Тогда
			КатегорииКЗагрузке.Добавить(СтруктураДанных(ЭлементКоллекции));
		Иначе
			ЗаполнитьПомеченныеКатегории(ЭлементКоллекции, КатегорииКЗагрузке);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураДанных(СтрокаДерева)
	
	Данные = Новый Структура;
	
	Данные.Вставить("Наименование", СтрокаДерева.Наименование);
	Данные.Вставить("Идентификатор", СтрокаДерева.Идентификатор);
	Данные.Вставить("КоличествоПодчиненных", СтрокаДерева.КоличествоПодчиненных);
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьКатегориюИЗакрыть(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ВыбранныеКатегории = Новый Массив;
	
	ВыбранныеКатегории.Добавить(СтруктураДанных(ТекущиеДанные));
	
	ПараметрыЗакрытия = Новый Структура("ЗаполнятьПриВыборе, ВыбранныеОбъекты",
		ЗаполнятьПриВыборе,
		ВыбранныеКатегории);
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЛистовыеКатегорииИзРодительских(ВыбранныеКатегории)
	
	ИдентификаторыРодительскихКатегорий = Новый Массив;
	ЛистовыеКатегории = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ВыбранныеКатегории Цикл
		Если ЭлементКоллекции.КоличествоПодчиненных = 0 Тогда
			ЛистовыеКатегории.Добавить(ЭлементКоллекции);
		Иначе
			ИдентификаторыРодительскихКатегорий.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыРодительскихКатегорий.Количество() > 0 Тогда
		
		ЛистовыеКатегорииИзРодительских 
			= РаботаСНоменклатурой.ИдентификаторыВсехДочернихЛистовыхКатегорий(ИдентификаторыРодительскихКатегорий, Истина);
			
		Для Каждого ЭлементКоллекции Из ЛистовыеКатегорииИзРодительских Цикл
			ЭлементКоллекции.Вставить("КоличествоПодчиненных", 0);
			ЛистовыеКатегории.Добавить(ЭлементКоллекции);
		КонецЦикла;
				
	КонецЕсли;
		
	ВыбранныеКатегории = ЛистовыеКатегории;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеКатегории()
	
	КатегорииКЗагрузке = Новый Массив;
	
	Если ОдиночныйРежимВыбора Тогда
		Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
			КатегорииКЗагрузке.Добавить(
				СтруктураДанных(Элементы.Категории.ТекущиеДанные));
		КонецЕсли;
	Иначе
		ЗаполнитьПомеченныеКатегории(Категории, КатегорииКЗагрузке);
	КонецЕсли;
	
	Возврат КатегорииКЗагрузке;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПометкуВыбраннымКатегориям(ТекущаяВетка, МассивВыбранныхКатегорий, ПоследняяКатегорияИзСписка)
	
	ДочерниеЭлементы = ТекущаяВетка.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	УстановленоДляВсех = Истина;
	ПометкаЭталон       = Неопределено;
	
	Для Каждого ЭлементКоллекции Из ДочерниеЭлементы Цикл
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			ПроставитьПометкуВыбраннымКатегориям(ЭлементКоллекции, МассивВыбранныхКатегорий, ПоследняяКатегорияИзСписка);
		ИначеЕсли Не ЭлементКоллекции.ПустаяГруппа
			И МассивВыбранныхКатегорий.Найти(ЭлементКоллекции.Идентификатор) <> Неопределено Тогда
			ЭлементКоллекции.Пометка = 1;
		Иначе 
			ЭлементКоллекции.Пометка = 0;
		КонецЕсли;
		
		Если ПометкаЭталон = Неопределено Тогда
			ПометкаЭталон = ЭлементКоллекции.Пометка;
		ИначеЕсли УстановленоДляВсех = Истина Тогда
			УстановленоДляВсех = (ЭлементКоллекции.Пометка = ПометкаЭталон);
		КонецЕсли;
		
		Если ПоследняяКатегорияИзСписка = ЭлементКоллекции.Идентификатор Тогда
			ИдентификаторПоследнейСтроки     = ЭлементКоллекции.ПолучитьИдентификатор();
			Элементы.Категории.ТекущаяСтрока = ИдентификаторПоследнейСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ТекущаяВетка) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекущаяВетка.Пометка = ?(УстановленоДляВсех = Истина, ПометкаЭталон, 2);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбщегоНазначения

// Возвращает массив, состоящий из элементов, повторяющихся в обоих входящих массивах
&НаКлиентеНаСервереБезКонтекста
Функция ПересечениеМассивов(Знач Массив1, Знач Массив2)
	
	Возврат РаботаСНоменклатуройСлужебныйКлиентСервер.ПересечениеМассивов(Массив1, Массив2);
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревом

&НаКлиенте
Процедура УдалитьСтрокиБезПометки(ТекущаяВетка = Неопределено)
	
	Если ТекущаяВетка = Неопределено Тогда
		ЭлементыДерева = Категории.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = ТекущаяВетка.ПолучитьЭлементы();
	КонецЕсли;
	
	Счетчик = 0;
	
	Пока Счетчик < ЭлементыДерева.Количество() Цикл
		
		Если ЭлементыДерева[Счетчик].ПолучитьЭлементы().Количество() <> 0 Тогда
			УдалитьСтрокиБезПометки(ЭлементыДерева[Счетчик]);
		КонецЕсли;
		
		ЭтоЛистоваяКатегорияБезПометки = ЭлементыДерева[Счетчик].Пометка = 0
			И ЭлементыДерева[Счетчик].ПолучитьЭлементы().Количество() = 0;
			
		РежимПривязкиКатегорий = ЗначениеЗаполнено(ИдентификаторыВыбранныхКатегорий);
		
		Если ЭлементыДерева[Счетчик].ПустаяГруппа Тогда
			Родитель = ЭлементыДерева[Счетчик].ПолучитьРодителя();
			Если Родитель <> Неопределено Тогда
				Если Родитель.Пометка = 1 Тогда
					Счетчик = Счетчик + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если ЭтоЛистоваяКатегорияБезПометки
			ИЛИ (НЕ ОтрабатыватьСтроку(ЭлементыДерева[Счетчик])
				И НЕ РежимПривязкиКатегорий) 
			ИЛИ ЭлементыДерева[Счетчик].ПустаяГруппа Тогда
			
			ЭлементыДерева.Удалить(ЭлементыДерева[Счетчик]);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакэшироватьИзображенияБаннеров()
	
	МассивДляКэширования = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("ЗакэшироватьБаннер", Истина));
	Если МассивДляКэширования.Количество() Тогда
		ИдентификаторыИсточников = Новый Массив;
		
		Для Каждого ЗаписьКэша Из МассивДляКэширования Цикл
			Если Не ПустаяСтрока(ЗаписьКэша.ИдентификаторРекламнойЗаписи)
				И ИдентификаторыИсточников.Найти(ЗаписьКэша.ИдентификаторРекламнойЗаписи) = Неопределено Тогда
				ИдентификаторыИсточников.Добавить(ЗаписьКэша.ИдентификаторРекламнойЗаписи);
			КонецЕсли;
		КонецЦикла;

		ЗакэшироватьИзображенияБаннеровЗавершение = Новый ОписаниеОповещения("ЗакэшироватьИзображенияБаннеровЗавершение",
			ЭтотОбъект);
			
		РаботаСНоменклатуройКлиент.ЗакэшироватьИзображенияБаннеров(ЗакэшироватьИзображенияБаннеровЗавершение, ИдентификаторыИсточников, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакэшироватьИзображенияБаннеровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		КэшБаннеров = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если КэшБаннеров = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Кэш Из КэшБаннеров Цикл 
		МассивДляКэширования = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("ИдентификаторРекламнойЗаписи", Кэш.Ключ));
		Для Каждого ЗаписьКэша Из МассивДляКэширования Цикл
			ЗаписьКэша.ЗакэшироватьБаннер      = Ложь;
			ЗаписьКэша.ПутьКДаннымБаннера      = Кэш.Значение.ПутьКДаннымБаннера;
			ЗаписьКэша.СсылкаПереходаПоБаннеру = Кэш.Значение.СсылкаПереходаПоБаннеру;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтрабатыватьСтроку(СтрокаДерева)
	
	Возврат НЕ (СтрокаДерева.Загружена И СтрокаДерева.ЛистоваяКатегория);
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПризнакЗагрузки()
	
	// В режиме привязки категорий, отображения признака загрузки не требуется.
	Если РежимВыбораКатегорий Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДляПоиска = Новый Массив;
	ПолучитьЛистовыеКатегории(Категории, ИдентификаторыДляПоиска);
	
	Если ИдентификаторыДляПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивЗагруженныхИдентификаторов = ПроверитьЗагрузкуЛистовыхКатегорий(ИдентификаторыДляПоиска);

	Если МассивЗагруженныхИдентификаторов.Количество() Тогда
		ПроставитьПризнакЗагрузкиКатегории(Категории, МассивЗагруженныхИдентификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗагрузкуЛистовыхКатегорий(ИдентификаторыДляПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Соответствие.ИдентификаторКатегории КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК Соответствие
	|ГДЕ
	|	Соответствие.ИдентификаторКатегории В(&ИдентификаторыДляПоиска)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДляПоиска", ИдентификаторыДляПоиска);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПризнакЗагрузкиКатегории(ТекущаяВетка, МассивЗагруженныхИдентификаторов)
	
	Для Каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.ЛистоваяКатегория
			И Не ЭлементКоллекции.ПустаяГруппа Тогда
			
			ПризнакЗагрузкиДоИзменения = ЭлементКоллекции.Загружена;
			
			ЭлементКоллекции.Загружена = МассивЗагруженныхИдентификаторов.Найти(ЭлементКоллекции.Идентификатор) <> Неопределено;
			Если ЭлементКоллекции.Загружена Тогда
				ЭлементКоллекции.Пометка = 1;
			КонецЕсли;
			
			// Если изменился признак Загружено с Истина на Ложь - снимается пометка.
			Если ПризнакЗагрузкиДоИзменения <> ЭлементКоллекции.Загружена
				И ПризнакЗагрузкиДоИзменения Тогда
				
				ЭлементКоллекции.Пометка = Ложь;
				УдалитьПредставлениеКатегории(ЭлементКоллекции.Идентификатор);
			КонецЕсли;
			
		Иначе
			ПроставитьПризнакЗагрузкиКатегории(ЭлементКоллекции, МассивЗагруженныхИдентификаторов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛистовыеКатегории(ТекущаяВетка, ИдентификаторыДляПоиска)
	
	Для Каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.ЛистоваяКатегория
			И Не ЭлементКоллекции.ПустаяГруппа Тогда
			
			ИдентификаторыДляПоиска.Добавить(ЭлементКоллекции.Идентификатор);

		Иначе
			ПолучитьЛистовыеКатегории(ЭлементКоллекции, ИдентификаторыДляПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПредставлениеКатегории(ИдентификаторКатегории)
	
	ПредставленияКатегорий =
		КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторКатегории));
	
	Для Каждого ТекущееПредставление Из ПредставленияКатегорий Цикл
		КэшПредставленийКатегорий.Удалить(ТекущееПредставление);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОтборыКатегорий

&НаКлиенте
Процедура ВычислениеКатегорийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Статус")
		Или Результат.Статус <> "Выполнено"
		Или Не Результат.Свойство("АдресРезультата") 
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса            = "";
	ДоступныеКатегории      = Новый Массив();
	ИдентификаторыВыбранных = ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения();
	КатегорииСервиса        = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(КатегорииСервиса) = Тип("Структура") Тогда
		ДоступныеКатегории = КатегорииСервиса.Категории;
		Если ДоступныеКатегории.Количество() Тогда
			ТолькоКатегорииТоварнойГруппы    = Истина;
			ИдентификаторыВыбранных          = ПересечениеМассивов(ИдентификаторыВыбранных, ДоступныеКатегории);
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Показывать только категории по %1'"), КатегорииСервиса.Представление);
			
			ИдентификаторыКатегорийОграничения.ЗагрузитьЗначения(ДоступныеКатегории);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ТолькоКатегорииТоварнойГруппы", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ТолькоКатегорииТоварнойГруппы", "Заголовок", ТекстНадписи);
		КонецЕсли;
		Если КатегорииСервиса.ТоварныеГруппы.Количество() > 1 Тогда
			ЗаголовокВопроса = СтрШаблон(НСтр("ru = 'Рекомендуется выполнять сопоставление в рамках одной %1'"), 
				КатегорииСервиса.ЗаголовокТоварныхГрупп);
			ТекстВопроса     = СтрШаблон(НСтр("ru = 'Выбранные объекты относятся к %1.
			|%2.
			|Продолжить?'"), КатегорииСервиса.Представление, ЗаголовокВопроса);
		КонецЕсли;
	КонецЕсли;
	
	ВычислениеКатегорийОграничения = Неопределено;
	КоличествоЗаданий              = Макс(КоличествоЗаданий - 1, 0);
	
	ДанныеДляОбработкиВопроса = Новый Структура("ИдентификаторыВыбранных, ДоступныеКатегории", ИдентификаторыВыбранных, ДоступныеКатегории);
	Если ТекстВопроса = "" ИЛИ ИспользоватьСопоставлениеПоРазнымТоварнымГруппам Тогда
		ОбработатьОтветПоТоварнымГруппам(Новый Структура("Значение", Истина), ДанныеДляОбработкиВопроса);
	Иначе 
		Кнопки           = Новый СписокЗначений;
		Оповещение       = Новый ОписаниеОповещения("ОбработатьОтветПоТоварнымГруппам", ЭтотОбъект, ДанныеДляОбработкиВопроса);
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		Кнопки.Добавить(Истина, НСтр("ru = 'Да'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Нет'"));
		ПараметрыВопроса.Заголовок = ЗаголовокВопроса;
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоВыбранныеКатегории()
	
	ИдентификаторКатегории = Неопределено;
	Если ТолькоКатегорииНациональногоКаталога Тогда 
		Если Элементы.ТолькоВыбранные.Пометка Тогда
			Элементы.ТолькоВыбранные.Пометка = Ложь;
		КонецЕсли;
		ИдентификаторКатегории = ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения();
		Если УстановленоОграничениеКатегорий() Тогда
			ИдентификаторКатегории = ПересечениеМассивов(ИдентификаторКатегории, ИдентификаторыКатегорийОграничения.ВыгрузитьЗначения());
		КонецЕсли;
	ИначеЕсли УстановленоОграничениеКатегорий() Тогда
		ИдентификаторКатегории = ИдентификаторыКатегорийОграничения.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторКатегории) = Тип("Массив") Тогда
		Если ИдентификаторКатегории.Количество() Тогда
			ПоследняяКатегорияИзСписка = ИдентификаторКатегории[ИдентификаторКатегории.ВГраница()];
			ПроставитьПометкуВыбраннымКатегориям(Категории, ИдентификаторКатегории, ПоследняяКатегорияИзСписка);
			УдалитьСтрокиБезПометки();
		Иначе 
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноПостроитьДеревоКатегорий(МассивКатегорий)
	
	Результат = Истина;
	
	Если ТолькоКатегорииНациональногоКаталога Тогда
		МассивКатегорий = ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения();
		Если ТолькоКатегорииТоварнойГруппы Тогда
			МассивКатегорий = ПересечениеМассивов(МассивКатегорий, ИдентификаторыКатегорийОграничения.ВыгрузитьЗначения());
		КонецЕсли;
		Если НЕ МассивКатегорий.Количество() Тогда
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли УстановленоОграничениеКатегорий() Тогда 
		МассивКатегорий = ИдентификаторыКатегорийОграничения.ВыгрузитьЗначения();
	Иначе
		МассивКатегорий = ИдентификаторыВыбранныхКатегорий.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекОтбораКатегорий()
	
	ИдентификаторКатегории = "";
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ИдентификаторКатегории = Элементы.Категории.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторКатегории) И ИдентификаторыВыбранныхКатегорий.Количество() Тогда
		ИдентификаторКатегории = ИдентификаторыВыбранныхКатегорий[ИдентификаторыВыбранныхКатегорий.Количество() -1].Значение;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда 
		СформироватьРезультатПоиска();
	ИначеЕсли МожноПостроитьДеревоКатегорий(Идентификатор) Тогда
		СформироватьДополнитьДеревоКатегорий(Идентификатор, ИдентификаторКатегории);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПоТоварнымГруппам(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("Значение") 
		ИЛИ Результат.Значение <> Истина Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИсточникКатегорий       = Неопределено;
	ИдентификаторыВыбранных = ДополнительныеПараметры.ИдентификаторыВыбранных;
	ДоступныеКатегории      = ДополнительныеПараметры.ДоступныеКатегории;
	Если ИдентификаторыВыбранных.Количество() Тогда
		ИсточникКатегорий = ИдентификаторыВыбранных;
	ИначеЕсли УстановленоОграничениеКатегорий() Тогда
		Если ИдентификаторыВыбранныхКатегорий.Количество() 
			ИЛИ ДоступныеКатегории.Количество() = 0 Тогда
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
		Иначе 
			ИсточникКатегорий = ДоступныеКатегории;
		КонецЕсли;
		УстановленОтборКатегорий = Истина;
	КонецЕсли;
	
	НеЗадаватьВопрос = Неопределено;
	Результат.Свойство("БольшеНеЗадаватьЭтотВопрос", НеЗадаватьВопрос);
	Если НеЗадаватьВопрос = Истина Тогда
		ИспользоватьСопоставлениеПоРазнымТоварнымГруппам = Истина;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой", 
			"СопоставлениеНоменклатуры\ИспользоватьСопоставлениеПоРазнымТоварнымГруппам", Истина);
	КонецЕсли;
	
	ПостроитьДеревоКатегорий(ИсточникКатегорий, Истина, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КэшаПутей

&НаСервереБезКонтекста
Функция ДлительнаяОперацияВычислениеКэшаПутей(Знач ИдентификаторыВыбранных, Знач УникальныйИдентификатор)
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.КэшПутейКатегорийСервиса";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Вычисление путей категорий сервиса 1С:Номенклатура'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
		РаботаСНоменклатуройСлужебныйПовтИсп.КэшПутейКатегорий(), ИдентификаторыВыбранных);
КонецФункции

&НаКлиенте
Процедура ВычислениеКэшаПутейЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("Статус")
		ИЛИ Результат.Статус <> "Выполнено"
		ИЛИ НЕ Результат.Свойство("АдресРезультата") Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполненияДерева = Новый Структура("ИдентификаторыПомеченных,ИдентификаторКатегории");
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияДерева, ДополнительныеПараметры);
	
	СформироватьДополнитьДеревоКатегорийНаСервере(Результат.АдресРезультата, 
		ПараметрыЗаполненияДерева.ИдентификаторыПомеченных, ЭтоСнятиеОтбора());
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	ВычислениеКэшаПутей = Неопределено;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(
		Элементы,
		Категории.ПолучитьЭлементы().Количество() > 0);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполненияДерева.ИдентификаторКатегории) Тогда
		РаботаСНоменклатуройСлужебныйКлиент.НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(
			ПараметрыЗаполненияДерева.ИдентификаторКатегории,
			Элементы.Категории,
			Категории,
			Истина,
			Истина,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиДобавитьУзелВДерево(ПутиККорню, ДеревоКатегорийФормы, ТекущийУзел, ТекущийИдентификатор, ЭтоСозданиеДерева = Истина)
	
	// проверка/заполнение родителей
	СтрокиДерева = ДеревоКатегорийФормы.Строки;
	Для каждого ТекущийУровень Из ТекущийУзел.ТекущийПуть Цикл
		СтрокаДерева = НайтиДобавитьСтрокуДерева(ПутиККорню, СтрокиДерева, ТекущийУровень, ЭтоСозданиеДерева);
		СтрокиДерева = СтрокаДерева.Строки;
	КонецЦикла;
	// добавление текущего узла
	СтрокаДерева = НайтиДобавитьСтрокуДерева(ПутиККорню, СтрокиДерева, ТекущийИдентификатор, ЭтоСозданиеДерева);
	
	Возврат СтрокаДерева;
	
КонецФункции

&НаСервере
Функция НайтиДобавитьСтрокуДерева(ПутиККорню, СтрокиДерева, Идентификатор, ЭтоСозданиеДерева)
	
	СтрокаДерева     = СтрокиДерева.Найти(Идентификатор, "Идентификатор");
	ДочерниеПолучены = Неопределено;
	Если СтрокаДерева = Неопределено Тогда
		ДанныеКэша = ПутиККорню.Получить(Идентификатор);
		ДанныеКэша.Свойство("ДочерниеПолучены", ДочерниеПолучены);
		СтрокаДерева = СтрокиДерева.Добавить();
		Если ДанныеКэша <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеКэша.ДанныеУзла);
		КонецЕсли;
		СтрокаДерева.Идентификатор = Идентификатор;
		Если СтрокаДерева.ЛистоваяКатегория Тогда
			СтрокаДерева.ИндексКартинки = 3;
		КонецЕсли;
		Если ЭтоСозданиеДерева Тогда
			СтрокаДерева.Пометка = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЭтоСозданиеДерева 
		И НЕ СтрокаДерева.ДочерниеПодгружены Тогда 
		ДанныеКэша = ПутиККорню.Получить(Идентификатор);
		ДанныеКэша.Свойство("ДочерниеПолучены", ДочерниеПолучены);
	КонецЕсли;
	
	Если ДочерниеПолучены <> Неопределено Тогда
		СтрокаДерева.ДочерниеПодгружены = Истина;
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

&НаСервере
Функция НайтиДобавитьСлужебнуюКатегориюКорня(ДеревоКатегорийФормы)
	СлужебнаяКатегорияКорня = ДеревоКатегорийФормы.Строки.Найти("", "Идентификатор");
	Если СлужебнаяКатегорияКорня = Неопределено Тогда
		СлужебнаяКатегорияКорня = ДеревоКатегорийФормы.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СлужебнаяКатегорияКорня, РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеСлужебнойКорневойКатегории());
		СлужебнаяКатегорияКорня.ИндексКартинки        = 12;
		СлужебнаяКатегорияКорня.Пометка               = Истина;
		СлужебнаяКатегорияКорня.ЛистоваяКатегория     = Ложь;
		СлужебнаяКатегорияКорня.КоличествоПодчиненных = 1;
	КонецЕсли;
	Возврат СлужебнаяКатегорияКорня;
КонецФункции

&НаСервере
Функция ВосстановлениеДереваКатегорийИзКэшаНаСервере(ИдентификаторыПомеченных, РежимОтборПоСтроке, РежимТолькоВыбранные)
	
	ИдентификаторыРодителей = Новый Массив;
	ДеревоКатегорийФормы    = РеквизитФормыВЗначение("Категории");
	
	ЛистовыеСПометками = Новый Массив;
	ПолучитьИдентификаторыРодителей(ДеревоКатегорийФормы, ИдентификаторыРодителей, ЛистовыеСПометками);
	Если НЕ ЗначениеЗаполнено(ИдентификаторыПомеченных) Тогда
		ИдентификаторыПомеченных = ЛистовыеСПометками;
	КонецЕсли;
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.КэшПутейКатегорийСервиса";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Вычисление путей категорий сервиса 1С:Номенклатура'");
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект, РежимОтборПоСтроке, РежимТолькоВыбранные);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, 
		РаботаСНоменклатуройСлужебныйПовтИсп.КэшПутейКатегорий(), ИдентификаторыРодителей, РежимТолькоВыбранные);
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторыРодителей(ДеревоКатегорий, ИдентификаторыРодителей, ЛистовыеСПометками)
	Для каждого СтрокаДерева Из ДеревоКатегорий.Строки Цикл
		Если СтрокаДерева.ЛистоваяКатегория Тогда
			Если СтрокаДерева.Пометка Тогда
				ЛистовыеСПометками.Добавить(СтрокаДерева.Идентификатор);
			КонецЕсли;
		Иначе 
			ИдентификаторыРодителей.Добавить(СтрокаДерева.Идентификатор);
		КонецЕсли;
		ПолучитьИдентификаторыРодителей(СтрокаДерева, ИдентификаторыРодителей, ЛистовыеСПометками)
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура СформироватьДополнитьДеревоКатегорий(ИдентификаторыПомеченных, ИдентификаторКатегории = "")
	
	Если ЭтоСнятиеОтбора() Тогда
		ДлительнаяОперация = ВосстановлениеДереваКатегорийИзКэшаНаСервере(ИдентификаторыПомеченных, РежимОтборПоСтроке(), Ложь);
		КоличествоЗаданий  = КоличествоЗаданий + 1;
		УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	Иначе 
		Если ВычислениеКэшаПутей = Неопределено Тогда
			ВычислениеКэшаПутей = ДлительнаяОперацияВычислениеКэшаПутей(ИдентификаторыПомеченных, УникальныйИдентификатор);
			КоличествоЗаданий   = КоличествоЗаданий + 1;
			УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		КонецЕсли;
		ДлительнаяОперация = ВычислениеКэшаПутей;
	КонецЕсли;
	
	ПараметрыЗаполненияДерева = Новый Структура("ИдентификаторыПомеченных", ИдентификаторыПомеченных);
	
	Если УстановленОтборКатегорий Тогда
		ПараметрыЗаполненияДерева.Вставить("ТолькоПомеченные", Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		ПараметрыЗаполненияДерева.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	КонецЕсли;
	
	Если ТипЗнч(ДлительнаяОперация) = Тип("Структура") И ДлительнаяОперация.Свойство("Статус") Тогда
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ВычислениеКэшаПутейЗавершение(ДлительнаяОперация, ПараметрыЗаполненияДерева);
		Иначе 
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ВычислениеКэшаПутейЗавершение", ЭтотОбъект, ПараметрыЗаполненияДерева);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
			ПараметрыОжидания.ВыводитьСообщения = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДополнитьДеревоКатегорийНаСервере(АдресВременногоХранилища, ИдентификаторыКатегорий, Знач СнятьОтбор)
	
	КэшПутейКатегорий = РаботаСНоменклатуройСлужебныйПовтИсп.КэшПутейКатегорий();
	РезультатМетода   = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресВременногоХранилища);
	ПутиККорню        = Новый Соответствие;
	КорневыеПолучены  = Ложь;
	Если ТипЗнч(РезультатМетода) = Тип("Структура") Тогда
		РезультатМетода.Свойство("ПутиККорню", ПутиККорню);
		РезультатМетода.Свойство("КорневыеПолучены", КорневыеПолучены);
		КэшПутейКатегорий.Вставить("ПутиККорню", ПутиККорню);
		КэшПутейКатегорий.Вставить("КорневыеПолучены", КорневыеПолучены);
	Иначе 
		КэшПутейКатегорий.Свойство("ПутиККорню", ПутиККорню);
		КэшПутейКатегорий.Свойство("КорневыеПолучены", КорневыеПолучены);
	КонецЕсли;
	
	Если ТипЗнч(ПутиККорню) <> Тип("Соответствие") Тогда
		ПутиККорню = Новый Соответствие;
		Если НЕ СнятьОтбор Тогда
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоКатегорийФормы    = РеквизитФормыВЗначение("Категории");
	СлужебнаяКатегорияКорня = НайтиДобавитьСлужебнуюКатегориюКорня(ДеревоКатегорийФормы);
	
	Если СнятьОтбор Тогда
		Для каждого ТекущийУзел Из ПутиККорню Цикл
			Если ТипЗнч(ТекущийУзел.Значение) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДерева = НайтиДобавитьУзелВДерево(ПутиККорню, СлужебнаяКатегорияКорня, ТекущийУзел.Значение, ТекущийУзел.Ключ, Ложь);
			Если НЕ СтрокаДерева.ЛистоваяКатегория И СтрокаДерева.Строки.Количество() = 0 Тогда
				СтрокаДерева.Строки.Добавить().ПустаяГруппа = Истина;
			КонецЕсли;
		КонецЦикла;
		СлужебнаяКатегорияКорня.ДочерниеПодгружены = Истина;
		Элементы.Категории.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		УстановленОтборКатегорий                      = Ложь;
	Иначе 
		СлужебнаяКатегорияКорня.Строки.Очистить();
		СлужебнаяКатегорияКорня.КоличествоПодчиненных = 1;
		Для каждого ТекущийИдентификатор Из ИдентификаторыКатегорий Цикл
			ТекущийУзел = ПутиККорню.Получить(ТекущийИдентификатор);
			Если ТипЗнч(ТекущийУзел) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			НайтиДобавитьУзелВДерево(ПутиККорню, СлужебнаяКатегорияКорня, ТекущийУзел, ТекущийИдентификатор);
		КонецЦикла;
		УстановленОтборКатегорий                      = Истина;
		Элементы.ТолькоВыбранные.Пометка              = НЕ ЭтоВыгрузкаВНациональныйКаталог;
		Элементы.Категории.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	Если СлужебнаяКатегорияКорня.Строки.Количество() > СлужебнаяКатегорияКорня.КоличествоПодчиненных Тогда
		СлужебнаяКатегорияКорня.КоличествоПодчиненных = СлужебнаяКатегорияКорня.Строки.Количество();
	КонецЕсли;
	
	РасставитьПометкиОтЛистовыхККорню(ДеревоКатегорийФормы);
	
	ЗначениеВДанныеФормы(ДеревоКатегорийФормы, Категории);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасставитьПометкиОтЛистовыхККорню(ДеревоКатегорийФормы, ПометкаДляВсех = Неопределено)
	
	Для каждого СтрокаДерева Из ДеревоКатегорийФормы.Строки Цикл
		Если НЕ СтрокаДерева.ЛистоваяКатегория И НЕ СтрокаДерева.ПустаяГруппа Тогда
			РасставитьПометкиОтЛистовыхККорню(СтрокаДерева, ПометкаДляВсех);
			Если СтрокаДерева.Строки.Количество() = СтрокаДерева.КоличествоПодчиненных Тогда
				СтрокаДерева.Пометка = ПометкаДляВсех;
			ИначеЕсли СтрокаДерева.Строки.Количество() > 0
				И НЕ СтрокаДерева.Строки[0].ПустаяГруппа Тогда
				СтрокаДерева.Пометка = 2;
			КонецЕсли;
		КонецЕсли;
		Если ПометкаДляВсех = Неопределено Тогда
			ПометкаДляВсех = СтрокаДерева.Пометка;
		ИначеЕсли ПометкаДляВсех <> СтрокаДерева.Пометка Тогда 
			ПометкаДляВсех = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбранных(ДанныеСтроки)
	
	Если НЕ ДанныеСтроки.ЛистоваяКатегория Тогда 
		Возврат
	КонецЕсли;
	
	ЭлементСписка = ИдентификаторыВыбранныхКатегорий.НайтиПоЗначению(ДанныеСтроки.Идентификатор);
	Если ДанныеСтроки.Пометка = 0 И ЭлементСписка <> Неопределено Тогда
		ИдентификаторыВыбранныхКатегорий.Удалить(ЭлементСписка);
	ИначеЕсли ДанныеСтроки.Пометка = 1 И ЭлементСписка = Неопределено Тогда
		ИдентификаторыВыбранныхКатегорий.Добавить(ДанныеСтроки.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановленоОграничениеКатегорий()
	
	Возврат ИдентификаторыКатегорийОграничения.Количество()
		И (ТолькоКатегорииТоварнойГруппы 
			ИЛИ ЗначениеЗаполнено(ВидНоменклатуры))
	
КонецФункции

&НаКлиенте
Функция ЭтоСнятиеОтбора()
	
	НовоеЗначениеУстановленОтбор = ТолькоКатегорииНациональногоКаталога ИЛИ УстановленоОграничениеКатегорий();
	Возврат УстановленОтборКатегорий И Не НовоеЗначениеУстановленОтбор;
	
КонецФункции

#КонецОбласти

#КонецОбласти