#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроверитьДоступностьФункционалаНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияРеквизитовФормы();
	ЗаполнитьСписокВыбораОрганизаций();
	УстановитьЗаголовкиЭлементовФормы();
	НастроитьЭлементыРасписания();
	УстановитьВидимостьГруппыРасписание(Элементы, РазделениеВключено, ВыбраноКВыгрузке, ВыгруженоПредставление);
	
	Обработки.РаботаСНоменклатурой.СоздатьКомандыСостояния(ЭтаФорма, Элементы.ГруппаРезультатыНациональныйКаталог.Имя, ВидКнопкиФормы.Гиперссылка);
	
	ПодсчетСтатистикиРезультатов   = РаботаСНоменклатуройСлужебный.ПолучитьСтатистикуРезультатов(УникальныйИдентификатор, Организация);
	ЕстьПроблемыДлительнаяОперация = ДлительнаяОперацияЕстьПроблемыБыстро(УникальныйИдентификатор, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьДоступностьФункционалаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыгрузкаНоменклатурыЗавершена" И Организация <> Параметр Тогда
		Организация = Параметр;
		ОрганизацияПриИзменении(Неопределено);
	ИначеЕсли Источник = "ИспользоватьСервисРаботаСНоменклатурой" Тогда
		ИспользоватьСервисРаботаСНоменклатурой = Не ИспользоватьСервисРаботаСНоменклатурой;
		Если Не ИспользоватьСервисРаботаСНоменклатурой Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	РаботаСНоменклатуройСлужебныйКлиент.ЗапуститьПроверкуВыгрузкиНоменклатуры();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыгружатьНоменклатуруПриИзменении(Элемент)
	Если ВыгружатьВНациональныйКаталог Тогда 
		ОбновляемыеПараметры = Новый Структура(Элемент.Имя, ЭтотОбъект[Элемент.Имя]);
		РаботаСНоменклатуройСлужебныйВызовСервера.ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры);
	Иначе 
		ОбновляемыеПараметры = ОбновляемыеПараметрыПриИзмененииФлагаКаталога(Элемент.Имя);
		ОбновитьПараметрНастройкиНаКлиенте(ОбновляемыеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПриИзменении()
	
	КонтактнаяИнформация = КонтактнаяИнформация();
	Если ПараметрыЗаполнены(КонтактнаяИнформация) Тогда
		ВводКонтактнойИнформации = СтрШаблон("%1, %2, %3", КонтактнаяИнформация.КонтактноеЛицо, КонтактнаяИнформация.Должность, КонтактнаяИнформация.Email);
		Элементы.ВводКонтактнойИнформации.ЦветТекста = ЦветОсновной;
	Иначе 
		ВводКонтактнойИнформации = НСтр("ru = 'Контактная информация (не заполнена)'");
		Элементы.ВводКонтактнойИнформации.ЦветТекста = ЦветОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементВыгружатьВНациональныйКаталогПриИзменении(Элемент)
	
	ОбновляемыеПараметры = ОбновляемыеПараметрыПриИзмененииФлагаКаталога(Элемент.Имя);
	Если ВыгружатьВНациональныйКаталог Тогда
		ОбновитьПараметрНастройкиНаКлиенте(ОбновляемыеПараметры);
	Иначе
		СостояниеВыгрузки = СостояниеВыгрузкиВНациональныйКаталог(Организация);
		Если СостояниеВыгрузки.НаМодерации = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отключить обмен с ""Национальным каталогом"" пока есть данные на модерации.'"));
			ВыгружатьВНациональныйКаталог = Истина;
			Возврат;
		ИначеЕсли СостояниеВыгрузки.Отклонена = Истина Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьОтветПоВыгрузкеВНациональныйКаталог", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Есть товарные позиции в состоянии ""Отклонена"".
			|Если отключить обмен с ""Национальным каталогом"", то эти позиции не будут приняты в каталог.
			|Отключить обмен?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			ОбновитьПараметрНастройкиНаКлиенте(ОбновляемыеПараметры);
		КонецЕсли;
	КонецЕсли;
	ВыгружатьВНациональныйКаталогПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьВНациональныйКаталогПриИзменении()
	
	УстановитьВидимостьГруппыРезультаты();
	
	Элементы.НадписьПараметрыДоступаНациональныйКаталог.Доступность = ВыгружатьВНациональныйКаталог;
	Если ВыгружатьВНациональныйКаталог = Истина Тогда
		ПараметрыНациональныйКаталогПриИзменении();
	Иначе
		Элементы.НадписьПараметрыДоступаНациональныйКаталог.ЦветТекста = Элементы.ГруппаНациональныйКаталогДетали.ЦветТекстаЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНациональныйКаталогПриИзменении()
	НадписьПараметрыДоступаНациональныйКаталог = НСтр("ru = 'Параметры доступа'");
	Если НЕ ПараметрыДоступаНациональныйКаталогЗаполнены() Тогда
		НадписьПараметрыДоступаНациональныйКаталог = НадписьПараметрыДоступаНациональныйКаталог
													+ " "
													+ НСтр("ru = '(не заполнены)'");
		Элементы.НадписьПараметрыДоступаНациональныйКаталог.ЦветТекста = ЦветОшибки;
	ИначеЕсли ТестовыйРежим Тогда
		НадписьПараметрыДоступаНациональныйКаталог = НадписьПараметрыДоступаНациональныйКаталог
													+ " "
													+ НСтр("ru = '(тестовый режим)'");
		Элементы.НадписьПараметрыДоступаНациональныйКаталог.ЦветТекста = ЦветОшибки;
	Иначе 
		Элементы.НадписьПараметрыДоступаНациональныйКаталог.ЦветТекста = ЦветОсновной;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеАктивноПриИзменении(Элемент)
	Элементы.НастроитьРасписание.Доступность = РасписаниеАктивно;
	УстановитьПараметрыРегламентногоЗаданияВыгрузки(Новый Структура("Использование", РасписаниеАктивно));
КонецПроцедуры

&НаКлиенте
Процедура ТипОрганизацииПриИзменении(Элемент)
	Элементы.ТипОрганизацииДругое.Видимость = (ТипОрганизации = "other");
	ОбновляемыеПараметры = Новый Структура(Элемент.Имя, ЭтотОбъект[Элемент.Имя]);
	РаботаСНоменклатуройСлужебныйВызовСервера.ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ТипОрганизацииДругоеПриИзменении(Элемент)
	ОбновляемыеПараметры = Новый Структура(Элемент.Имя, ЭтотОбъект[Элемент.Имя]);
	РаботаСНоменклатуройСлужебныйВызовСервера.ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыФормы(Организация, ЛимитЗаписей, УникальныйИдентификатор),, "Организация");
	ОбновитьПараметрыФормыПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВводКонтактнойИнформацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение           = Новый ОписаниеОповещения("ВводКонтактнойИнформацииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия    = Новый Структура("КонтактнаяИнформация", КонтактнаяИнформация());
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ВводКонтактнойИнформации", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВводКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И НЕ РаботаСНоменклатуройСлужебныйКлиентСервер.ДанныеСовпадают(РезультатЗакрытия, КонтактнаяИнформация()) Тогда
		РаботаСНоменклатуройСлужебныйВызовСервера.ОбновитьПараметрыНастройкиВыгрузки(Организация, РезультатЗакрытия);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
		КонтактнаяИнформацияПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДоступаНациональныйКаталогНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение           = Новый ОписаниеОповещения("ВводПараметровДоступаНациональныйКаталогЗавершение", ЭтотОбъект);
	ПараметрыОткрытия    = Новый Структура("ПараметрыДоступаНациональныйКаталог, Организация", ПараметрыДоступаНациональныйКаталог(), Организация);
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ВводПараметровДоступаНациональныйКаталог", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВводПараметровДоступаНациональныйКаталогЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И НЕ РаботаСНоменклатуройСлужебныйКлиентСервер.ДанныеСовпадают(РезультатЗакрытия, ПараметрыДоступаНациональныйКаталог()) Тогда
		ТестовыйРежимДо = ТестовыйРежим;
		ОбновитьПараметрНастройкиНаКлиенте(РезультатЗакрытия);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
		ПараметрыНациональныйКаталогПриИзменении();
		Если ТестовыйРежимДо И НЕ ТестовыйРежим И ТипЗнч(СтатистикаРезультатов) = Тип("Структура") Тогда
			Для каждого ДанныеСостояния Из СтатистикаРезультатов Цикл
				СтатистикаРезультатов.Вставить(ДанныеСостояния.Ключ, 0);
			КонецЦикла;
			РаботаСНоменклатуройСлужебныйКлиент.ОбновитьЗаголовкиКнопокСостояние(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьНоменклатуру(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выгрузка уже запущена, дождитесь завершения'"));
		Возврат;
	КонецЕсли;
	
	Если ВыбраноКВыгрузке = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура для выгрузки'"));
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Если ОрганизацияЗаполнена(Ложь) = Ложь Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	КонтактнаяИнформация = КонтактнаяИнформация();
	Если НЕ ПараметрыЗаполнены(КонтактнаяИнформация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация'"),, "ВводКонтактнойИнформации",, ЕстьОшибки);
	КонецЕсли;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Email) Тогда
		ТекстСообщения = НСтр("ru = 'Введите адрес электронной почты'");
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Email) Тогда
		ТекстСообщения = НСтр("ru = 'Адрес электронной почты введен неверно'");
	КонецЕсли;
	Если НЕ ТекстСообщения = "" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВводКонтактнойИнформации",, ЕстьОшибки);
	КонецЕсли;
	
	Если НЕ (ВыгружатьНоменклатуру ИЛИ ВыгружатьВНациональныйКаталог) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран ни один каталог для выгрузки'"),, "ВыгружатьНоменклатуру",, ЕстьОшибки);
	КонецЕсли;
	
	Если ВыгружатьВНациональныйКаталог И НЕ ПараметрыДоступаНациональныйКаталогЗаполнены() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнены параметры доступа в Национальный каталог'"),, "ПараметрыДоступаНациональныйКаталог",, ЕстьОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан тип организации'"),, "ТипОрганизации",, ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПроблемы Тогда
		Оповещение   = Новый ОписаниеОповещения("ОтветНаВопросВыгрузкаНоменклатуры", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Выберите действие'");
		Кнопки       = Новый СписокЗначений;
		Кнопки.Добавить("ПодготовитьНоменклатуру", НСтр("ru = 'Подготовить номенклатуру'"));
		Кнопки.Добавить("ПродолжитьВыгрузку", НСтр("ru = 'Продолжить выгрузку'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.КнопкаПоУмолчанию = "ПодготовитьНоменклатуру";
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Не вся номенклатура готова к выгрузке'");
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьДанныеДляВыгрузки(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки'"));
		Возврат;
	КонецЕсли;
	
	ЗапуститьВыгрузкуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	ОткрытьФормыСопоставление();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКомандыСостояние(Команда)
	
	Если ОрганизацияЗаполнена() = Ложь Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("ИмяКоманды", СтрЗаменить(Команда.Имя, "ВсеРезультаты", ""));
	ПараметрыОткрытия.Вставить("СтатистикаРезультатов", СтатистикаРезультатов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсторияВыгрузкиЗакрытие", ЭтотОбъект, Новый Структура("СтатистикаРезультатов", СтатистикаРезультатов));
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.РезультатыВыгрузкиНоменклатуры.ОткрытиеФормы");
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.РезультатыВыгрузкиНоменклатуры", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыгрузкиЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	СтатистикаРезультатов = ДополнительныеПараметры.СтатистикаРезультатов;
	РаботаСНоменклатуройСлужебныйКлиент.ОбновитьЗаголовкиКнопокСостояние(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Если Расписание = Неопределено Тогда
		РедактируемоеРасписание = Новый РасписаниеРегламентногоЗадания;
	Иначе
		РедактируемоеРасписание = Расписание;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РедактируемоеРасписание);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ИзменитьРасписание", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(НовоеРасписание, ДополнительныеПараметры) Экспорт
	
	Если НовоеРасписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расписание = НовоеРасписание;
	
	Элементы.НастроитьРасписание.Заголовок = ПредставлениеРасписания(Расписание);
	
	УстановитьПараметрыРегламентногоЗаданияВыгрузки(Новый Структура("Расписание", Расписание));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	
	Если ОрганизацияЗаполнена() = Ложь Тогда
		Возврат;
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.НоменклатураКВыгрузке.ОткрытиеФормы");
	ПараметрыФормы = Новый Структура("Организация , АдресТоваровВХранилище", Организация, АдресТоваровВХранилище);
	Оповещение     = Новый ОписаниеОповещения("НоменклатураКВыгрузкеЗакрытие", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.НоменклатураКВыгрузке", ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКВыгрузкеЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	ОбновитьКоличествоКВыгрузке = Истина;
	Если ТипЗнч(РезультатЗакрытия) = Тип("Число") Тогда
		ВыбраноКВыгрузке = РезультатЗакрытия;
		ОбновитьЗаголовокЭлементаВыбратьНоменклатуру();
		ОбновитьКоличествоКВыгрузке = Ложь;
	КонецЕсли;
	Если ВыбраноКВыгрузке > 0 Тогда
		ОбновитьСтатистикуИПроблемыБыстро(ОбновитьКоличествоКВыгрузке);
	Иначе 
		ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру();
	КонецЕсли;
	АдресТоваровВХранилище = "";
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимПолученияНовыхШтрихкодов(Команда)
	
	Оповещение        = Новый ОписаниеОповещения("ВыбратьРежимПолученияНовыхШтрихкодовЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = РаботаСНоменклатуройСлужебныйКлиент.НовыйРежимПолученияШтрихкодов();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.РежимПолученияНовыхШтрихкодов", ПараметрыОткрытия, ЭтотОбъект,
		УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРасписания(Знач Расписание)
	
	Возврат ?(Расписание = Неопределено, НСтр("ru = 'Не задано'"), Строка(Расписание));
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПараметрыРегламентногоЗаданияВыгрузки(ПараметрыЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеЗадания	= Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой;
	СписокЗаданий		= РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", МетаданныеЗадания));
	
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить("Метаданные", МетаданныеЗадания);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(СписокЗаданий[0].УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция КонтактнаяИнформация()

	КонтактнаяИнформация = Новый Структура;
	КонтактнаяИнформация.Вставить("КонтактноеЛицо");
	КонтактнаяИнформация.Вставить("Должность");
	КонтактнаяИнформация.Вставить("Email");
	ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, ЭтотОбъект);
	
	Возврат КонтактнаяИнформация;

КонецФункции

&НаКлиенте
Функция ПараметрыДоступаНациональныйКаталог()

	ПараметрыДоступаНациональныйКаталог = Новый Структура;
	ПараметрыДоступаНациональныйКаталог.Вставить("apikey");
	ПараметрыДоступаНациональныйКаталог.Вставить("ТестовыйРежим");
	ЗаполнитьЗначенияСвойств(ПараметрыДоступаНациональныйКаталог, ЭтотОбъект);
	
	Возврат ПараметрыДоступаНациональныйКаталог;

КонецФункции

&НаКлиенте
Функция ПараметрыЗаполнены(Параметры)
	
	ДанныеЗаполнены = Истина;
	Для каждого Параметр Из Параметры Цикл
		Если НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
			ДанныеЗаполнены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормыСопоставление(ТолькоНеподготовленные = Ложь)
	
	Если ОрганизацияЗаполнена() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия  = РаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором();
	ПараметрыОткрытия.Заголовок             = НСтр("ru = 'Подготовка номенклатуры к выгрузке'");
	ПараметрыОткрытия.ЗаголовокКатегории    = НСтр("ru = 'Категория 1С:Номенклатура'");
	ПараметрыОткрытия.ЗаголовокРеквизита    = НСтр("ru = 'Реквизит 1С:Номенклатура'");
	ПараметрыОткрытия.ЗаголовокТипа         = НСтр("ru = 'Тип 1С:Номенклатура'");
	ПараметрыОткрытия.ИнформацияСписок      = НСтр("ru = 'Необходимо сопоставить категории рубрикатора 1С:Номенклатура.'");
	ПараметрыОткрытия.ИнформацияРеквизиты   = НСтр("ru = 'Необходимо сопоставить реквизиты номенклатуры с реквизитами сервиса 1С:Номенклатура.'");
	ПараметрыОткрытия.СценарийИспользования = "ВыгрузкаНоменклатуры";
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеНоменклатурыСРубрикаторомЗакрытие", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатурыСРубрикатором(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеНоменклатурыСРубрикаторомЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьСтатусПроблем = Истина;
	Если ТипЗнч(РезультатЗакрытия) = Тип("Булево") Тогда
		ЕстьПроблемы = РезультатЗакрытия;
		ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру();
		ОбновитьСтатусПроблем = Ложь;
	КонецЕсли;
	
	ОбновитьСтатистикуИПроблемыБыстро(, ОбновитьСтатусПроблем);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеНоменклатурыГотовоСтатистикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормыСопоставление(Истина);
КонецПроцедуры

&НаКлиенте
Функция ОрганизацияЗаполнена(ОчищатьСообщения = Истина)
	Если Организация.Пустая() Тогда
		Если ОчищатьСообщения = Истина Тогда
			ОчиститьСообщения();
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите организацию'"),, "Организация");
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьПроверкуАктивностиПартнера(Знач УникальныйИдентификатор, Знач КодПартера)
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ПартнерАктивен";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Проверка активности партнера сервиса 1С:Номенклатура'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, КодПартера);
	
КонецФункции

&НаКлиенте
Процедура ПроверкаАктивностиПартнераЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("Статус")
		И Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат;
	КонецЕсли;
	
	НациональныйКаталогВидимость = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	НациональныйКаталогВидимость = (НациональныйКаталогВидимость = Истина);
	Элементы.ГруппаНациональныйКаталог.Видимость = НациональныйКаталогВидимость;
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой",
	"ПомощникВыгрузки\НациональныйКаталогВидимость", НациональныйКаталогВидимость);
	
	Если НациональныйКаталогВидимость = Ложь И ВыгружатьВНациональныйКаталог = Истина Тогда
		ВыгружатьВНациональныйКаталог = Ложь;
		ОбновляемыеПараметры = Новый Структура("ВыгружатьВНациональныйКаталог", Ложь);
		РаботаСНоменклатуройСлужебныйВызовСервера.ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураКВыгрузке(Знач Организация, Знач ЛимитЗаписей)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	1
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(ЛимитЗаписей, "ЧГ=0"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокСостояний", РаботаСНоменклатуройСлужебный.СостоянияНоменклатурыДоВыгрузки());
	Запрос.УстановитьПараметр("Организация", Организация);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Количество();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыФормы(Знач Организация, Знач ЛимитЗаписей, Знач УникальныйИдентификатор)
	
	Настройка = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	Настройка.Вставить("ВыбраноКВыгрузке");
	Настройка.Вставить("ПодсчетСтатистикиРезультатов");
	Настройка.Вставить("ЕстьПроблемыДлительнаяОперация");
	
	ЗаполнитьПараметрыНаСервере(Настройка, УникальныйИдентификатор, Организация, ЛимитЗаписей);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой", "ПомощникВыгрузки\Организация", Организация);
	
	Возврат Настройка;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокЭлементаВыбратьНоменклатуру()

	Если ВыбраноКВыгрузке >= ЛимитЗаписей Тогда
		ВыбраноКВыгрузкеСтрокой = СтрШаблон(НСтр("ru = 'выбрано более %1'"), Формат(ЛимитЗаписей, "ЧГ="));
	ИначеЕсли ВыбраноКВыгрузке = 0 Тогда
		ВыбраноКВыгрузкеСтрокой = НСтр("ru = 'не выбрана'");
	Иначе 
		ВыбраноКВыгрузкеСтрокой = СтрШаблон(НСтр("ru = 'выбрано %1'"), Формат(ВыбраноКВыгрузке, "ЧГ="));
	КонецЕсли;
	Элементы.ВыбратьНоменклатуру.Заголовок = СтрШаблон(НСтр("ru = 'Выбрать номенклатуру для выгрузки (%1)'"), ВыбраноКВыгрузкеСтрокой);

КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросВыгрузкаНоменклатуры(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ОтветНаВопрос = Результат.Значение;
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда 
		ОтветНаВопрос = Результат;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если ОтветНаВопрос = "ПодготовитьНоменклатуру" Тогда
		ОткрытьФормыСопоставление();
	ИначеЕсли ОтветНаВопрос = "ПродолжитьВыгрузку" Тогда
		ЗапуститьВыгрузкуНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыПриИзмененииОрганизации()
	
	ОбновитьИнформациюОВыгрузке();

	УстановитьВидимостьГруппыРасписаниеНаКлиенте();
	
	ОбновитьЗаголовокЭлементаВыбратьНоменклатуру();
	
	РаботаСНоменклатуройСлужебныйКлиент.ОбновитьСтатистикуРезультатов(ЭтотОбъект);
	
	Элементы.ТипОрганизацииДругое.Видимость = (ТипОрганизации = "other");
	ВыгружатьВНациональныйКаталогПриИзменении();
	КонтактнаяИнформацияПриИзменении();
	ПараметрыНациональныйКаталогПриИзменении();
	ПроверкаПроблемБыстро();
	
КонецПроцедуры

#Область ЗапускВыгрузки

&НаКлиенте
Процедура ЗапуститьВыгрузкуНоменклатуры()
	
	ИдентификаторЗадания = ЗапуститьВыгрузкуНоменклатурыВФоне(РазделениеВключено, Организация);
	ПослеЗапускаВыгрузкиНоменклатурыВФоне();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДанныеДляВыгрузки(Знач Организация)
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки);
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.Новая);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторАктивногоРегламентногоЗадания(Знач РазделениеВключено)
	
	Результат = "";
	
	Если РазделениеВключено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОтборЗаданийРегламентных = Новый Структура("Метаданные", 
		Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой);
	Если РазделениеВключено Тогда
		ОтборЗаданийРегламентных.Вставить("ОбластьДанных", Строка(ПараметрыСеанса.ОбластьДанныхЗначение));
		ОтборЗаданийРегламентных.Вставить("СостояниеЗадания", Перечисления.СостоянияЗаданий.Выполняется);
	Иначе
		ОтборЗаданийРегламентных.Вставить("Предопределенное", Истина);
	КонецЕсли;
	
	ЗаданияРегламентные = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданийРегламентных);
	
	Если ЗаданияРегламентные.Количество() = 0 Тогда
	ИначеЕсли РазделениеВключено Тогда
		Результат = Строка(ЗаданияРегламентные[0].ИдентификаторЗадания);
	Иначе
		ОтборЗаданийФоновых = Новый Структура("РегламентноеЗадание, Состояние",
			ЗаданияРегламентные[0], СостояниеФоновогоЗадания.Активно);
		ЗаданияФоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданийФоновых);
		Если ЗаданияФоновые.Количество() Тогда
			Результат = ЗаданияФоновые[0].УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьВыгрузкуНоменклатурыВФоне(Знач РазделениеВключено, Знач Организация)
	
	// проверка запуска выгрузки по расписанию
	ИдентификаторАктивногоЗадания = ИдентификаторАктивногоРегламентногоЗадания(РазделениеВключено);
	Если Не ПустаяСтрока(ИдентификаторАктивногоЗадания) Тогда
		Возврат ИдентификаторАктивногоЗадания;
	КонецЕсли;
	
	КлючиВыгрузки   = КлючиВыгрузки();
	Если КлючиВыгрузки.Найти(Организация) = Неопределено Тогда
		КлючиВыгрузки.Добавить(Организация);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой", "ПомощникВыгрузки\КлючиВыгрузки",
			КлючиВыгрузки);
	КонецЕсли;
	
	КлючЗадания = "ВыгрузкаНоменклатуры"
		+ ?(РазделениеВключено, Строка(ПараметрыСеанса.ОбластьДанныхЗначение), "")
		+ XMLСтрока(Организация);
	
	ИмяМетода = "РаботаСНоменклатуройСлужебный.ВыгрузитьДанныеНоменклатуры";
	УстановитьПривилегированныйРежим(Истина);
	Задания   = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Ключ, Состояние", 
		ИмяМетода, КлючЗадания, СостояниеФоновогоЗадания.Активно)); 
	
	Если Задания.Количество() Тогда
		// уже запущено
		Возврат Строка(Задания[0].УникальныйИдентификатор);
	КонецЕсли;
	
	НастройкаВыгрузки = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияВыгрузкиНоменклатуры.ОжидаетВыгрузки);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("СписокСостояний", СписокСостояний);
	
	НастройкаВыгрузки.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	НастройкаВыгрузки.Вставить("ПроверитьПередВыгрузкой", Истина);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяМетода, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкаВыгрузки),
		КлючЗадания, НСтр("ru = 'Выгрузка номенклатуры'"));
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
	РаботаСНоменклатуройСлужебный.ОбновитьПараметрыНастройкиВыгрузки(Организация, 
		Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания));
	
	Возврат ИдентификаторЗадания;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПослеЗапускаВыгрузкиНоменклатурыВФоне()
	
	Элементы.ВыгрузкаДлительнаяОперация.Видимость = Истина;
	Элементы.ДатаПредставление.Видимость = Истина;
	ДатаПредставление      = НСтр("ru = 'выгружается'");
	ВыгруженоПредставление = НСтр("ru = 'Выгружается...'");
	ЭлементСписка = Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = Элементы.Организация.СписокВыбора.Добавить(Организация);
	КонецЕсли;
	ЭлементСписка.Представление = СтрШаблон("%1 (%2)", Организация, ДатаПредставление);
	ЭлементСписка.Пометка = Истина;
	
	ПодключитьОбработчикОжидания("ПроверитьВыгрузкуНоменклатурыВФорме", 1);
	РаботаСНоменклатуройСлужебныйКлиент.ЗапуститьПроверкуВыгрузкиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуНоменклатурыВФорме()
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПрогрессВыгрузки = ПрогрессВыгрузки(ПараметрыВычисленияПрогресса());
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПрогрессВыгрузки);
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Элементы.ВыгрузкаДлительнаяОперация.Видимость = Ложь;
			ОтключитьОбработчикОжидания("ПроверитьВыгрузкуНоменклатурыВФорме");
			УстановитьВидимостьГруппыРезультаты();
			УстановитьВидимостьГруппыРасписаниеНаКлиенте();
			РаботаСНоменклатуройСлужебныйКлиент.ОбновитьСтатистикуРезультатов(ЭтотОбъект);
			
			Если ПрогрессВыгрузки.Свойство("ДатаПредставление") ИЛИ ПрогрессВыгрузки.Свойство("ДатаВыгрузки") Тогда
				ДатаПредставление        = ПредставлениеДатыВыгрузки(ДатаВыгрузки, ДатаПредставление);
				ОрганизацияПредставление = СтрШаблон("%1 (%2)", Организация, ДатаПредставление);
				ЭлементСписка = Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация);
				Если ЭлементСписка <> Неопределено Тогда
					ЭлементСписка.Представление = ОрганизацияПредставление;
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру();
			ОбновитьЗаголовокЭлементаВыбратьНоменклатуру();
		КонецЕсли;
	Иначе 
		ОтключитьОбработчикОжидания("ПроверитьВыгрузкуНоменклатурыВФорме");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрогрессВыгрузки(Знач ПараметрыПрогресса)

	Организация          = ПараметрыПрогресса.Организация;
	ИдентификаторЗадания = ПараметрыПрогресса.ИдентификаторЗадания;
	РазделениеВключено   = ПараметрыПрогресса.РазделениеВключено;
	СоздатьЗадание       = ПараметрыПрогресса.СоздатьЗадание;
	ИдентификаторФормы   = ПараметрыПрогресса.УникальныйИдентификатор;
	ЛимитЗаписей         = ПараметрыПрогресса.ЛимитЗаписей;
	
	НастройкаВыгрузки = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	ПрогрессВыгрузки  = Новый Структура;
	Задания           = Неопределено;
	
	Если ИдентификаторЗадания = "РегламентноеЗадание" Тогда
		// найти фоновое
		ИдентификаторЗадания = ИдентификаторАктивногоРегламентногоЗадания(РазделениеВключено);
	КонецЕсли;
	
	Попытка
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторЗадания); 
	Исключение
		Шаблон = НСтр("ru = 'Не удалось получить уникальный идентификатор из строки ""%1"" по причине %2'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		Пояснение = СтрШаблон(Шаблон, ИдентификаторЗадания, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИмяСобытия = НСтр("ru = 'Выгрузка номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
		РаботаСНоменклатурой.ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(ИмяСобытия, Пояснение);
		ВызватьИсключение Пояснение;
	КонецПопытки;
	
	ОтборЗаданий = Новый Структура("УникальныйИдентификатор, Состояние", 
		УникальныйИдентификатор, СостояниеФоновогоЗадания.Активно);
	УстановитьПривилегированныйРежим(Истина);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Задания) = Тип("Массив") И Задания.Количество() Тогда
		Задание   = Задания[0];
		Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
		Индекс    = Сообщения.ВГраница();
		Если Индекс >= 0 Тогда
			Сообщение = РаботаСНоменклатуройСлужебный.ЗначениеИзСтрокиJSON(Сообщения[Индекс].Текст);
			Если ТипЗнч(Сообщение) = Тип("Структура")
				И Сообщение.Свойство("Организация")
				И Сообщение.Организация = XMLСтрока(Организация) Тогда
				ПрогрессВыгрузки.Вставить("ВыгруженоПредставление", Сообщение.ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе 
		// Фоновое задание по идентификатору не найдено
		// это означает, что надо проверить состояние константы: 
		// в случае, если фоновое задание завершилось успешно, то идентификатор задания в константе пустой,
		// в противном случае нужно его очистить, а пользователю сообщить об ошибке
		ПрогрессВыгрузки.Вставить("ВыгруженоПредставление");
		ПрогрессВыгрузки.Вставить("ИдентификаторЗадания");
		ПрогрессВыгрузки.Вставить("ДатаПредставление");
		Если ЗначениеЗаполнено(НастройкаВыгрузки.ИдентификаторЗадания) Тогда
			ПрогрессВыгрузки.ВыгруженоПредставление = НСтр("ru = 'Последняя выгрузка завершена ошибкой'");
			ПрогрессВыгрузки.ИдентификаторЗадания   = "";
			ПрогрессВыгрузки.ДатаПредставление      = НСтр("ru = 'выгрузка завершена ошибкой'");
			РаботаСНоменклатуройСлужебный.ОбновитьПараметрыНастройкиВыгрузки(Организация, ПрогрессВыгрузки);
		Иначе
			ПрогрессВыгрузки.Вставить("ДатаВыгрузки");
			ЗаполнитьЗначенияСвойств(ПрогрессВыгрузки, НастройкаВыгрузки);
			// обновить статистику результатов
			ПрогрессВыгрузки.Вставить("ПодсчетСтатистикиРезультатов");
			ЗаполнитьПараметрыНаСервере(ПрогрессВыгрузки, ИдентификаторФормы, Организация);
		КонецЕсли;
		ПрогрессВыгрузки.Вставить("ВыбраноКВыгрузке", НоменклатураКВыгрузке(Организация, ЛимитЗаписей));
	КонецЕсли;
	
	Если СоздатьЗадание = Истина
		И ПрогрессВыгрузки.Свойство("ИдентификаторЗадания") 
		И НЕ ЗначениеЗаполнено(ПрогрессВыгрузки.ИдентификаторЗадания) Тогда
		// такой набор условий означает, что выгрузка запущена впервые
		Расписание                   = Новый РасписаниеРегламентногоЗадания;
		Расписание.ДеньВМесяце       = 1;
		Расписание.ПериодПовтораДней = 1;
		УстановитьПараметрыРегламентногоЗаданияВыгрузки(Новый Структура("Расписание, Использование", Расписание, Истина));
	КонецЕсли;
	
	Возврат ПрогрессВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючиВыгрузки()
	
	КлючиВыгрузки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСНоменклатурой", "ПомощникВыгрузки\КлючиВыгрузки");
	Если ТипЗнч(КлючиВыгрузки) <> Тип("Массив") Тогда
		КлючиВыгрузки = Новый Массив;
	КонецЕсли;
	Возврат КлючиВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДлительнаяОперацияЕстьПроблемыБыстро(Знач УникальныйИдентификатор, Знач Организация)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ЕстьПроблемыБыстро";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Поиск проблем заполнения номенклатуры в режиме ""Быстрая проверка"".'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, Организация);
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПроблемБыстро()
	
	Если НЕ ВыгружатьНоменклатуру И НЕ ВыгружатьВНациональныйКаталог Тогда
		Элементы.СопоставитьНоменклатуру.Заголовок = НСтр("ru = 'Подготовить номенклатуру для выгрузки (не выбран каталог для выгрузки)'");
	КонецЕсли;
	
	Если ВыбраноКВыгрузке = 0 Тогда
		ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЕстьПроблемыДлительнаяОперация) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	Если ЕстьПроблемыДлительнаяОперация.Статус = "Выполнено" Тогда
		ПроверкаПроблемБыстроЗавершение(ЕстьПроблемыДлительнаяОперация, Неопределено);
	Иначе
		Элементы.СопоставитьНоменклатуру.Заголовок = НСтр("ru = 'Подготовить номенклатуру для выгрузки (выполняется проверка…)'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаПроблемБыстроЗавершение", ЭтотОбъект);
		ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ЕстьПроблемыДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПроблемБыстроЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда 
		Возврат;
	КонецЕсли;
	
	ПроблемыСтрокой = "";
	ПолученныйОтвет = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ПолученныйОтвет = Неопределено Тогда
		ЕстьПроблемы = Истина;
		ПроблемыСтрокой = НСтр("ru = 'не удалось проверить готовность к выгрузке'");
	ИначеЕсли ВыбраноКВыгрузке = 0 Тогда
		ЕстьПроблемы = Ложь;
	Иначе
		ЕстьПроблемы = (ПолученныйОтвет = Истина);
	КонецЕсли;
	
	ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру(ПроблемыСтрокой);
	
	ЕстьПроблемыДлительнаяОперация = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрНастройкиНаКлиенте(ОбновляемыеПараметры, ОбработатьОтклоненные = Ложь)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбновитьПараметрыНастройкиВыгрузки(УникальныйИдентификатор, Организация, ОбновляемыеПараметры, ОбработатьОтклоненные, ИдентификаторЗадания));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбновляемыеПараметры);
	ПроверкаПроблемБыстро();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьПараметрыНастройкиВыгрузки(Знач УникальныйИдентификатор, Знач Организация, Знач ОбновляемыеПараметры, Знач ОбработатьОтклоненные, Знач ИдентификаторЗадания)
	
	РаботаСНоменклатуройСлужебный.ОбновитьПараметрыНастройкиВыгрузки(Организация, ОбновляемыеПараметры);
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("УникальныйИдентификатор", ИдентификаторЗадания));
		Для каждого Задание Из Задания Цикл
			Задание.Отменить();
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПроблемыДлительнаяОперация", ДлительнаяОперацияЕстьПроблемыБыстро(УникальныйИдентификатор, Организация));
	Если ОбработатьОтклоненные Тогда
		ДлительныеОперации.ВыполнитьПроцедуру(, "Обработки.РаботаСНоменклатурой.СброситьСостоянияВыгрузкиНоменклатуры", Организация, Перечисления.СостоянияВыгрузкиНоменклатуры.Отклонена);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыНаСервере(Параметры, Знач УникальныйИдентификатор, Знач Организация, Знач ЛимитЗаписей = 0)
	
	Если Параметры.Свойство("ПодсчетСтатистикиРезультатов") Тогда
		Параметры.ПодсчетСтатистикиРезультатов = РаботаСНоменклатуройСлужебный.ПолучитьСтатистикуРезультатов(УникальныйИдентификатор, Организация);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбраноКВыгрузке") Тогда
		Параметры.ВыбраноКВыгрузке = НоменклатураКВыгрузке(Организация, ЛимитЗаписей);
		Если Параметры.ВыбраноКВыгрузке = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПроблемыДлительнаяОперация") Тогда
		Параметры.ЕстьПроблемыДлительнаяОперация = ДлительнаяОперацияЕстьПроблемыБыстро(УникальныйИдентификатор, Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистикуИПроблемыБыстро(ОбновитьКоличествоКВыгрузке = Истина, ОбновитьСтатусПроблем = Истина)
	
	ЗапроситьНаСервере = Новый Структура;
	Если ВыгружатьВНациональныйКаталог Тогда
		ЗапроситьНаСервере.Вставить("ПодсчетСтатистикиРезультатов");
	КонецЕсли;
	Если ОбновитьКоличествоКВыгрузке Тогда
		ЗапроситьНаСервере.Вставить("ВыбраноКВыгрузке");
	КонецЕсли;
	Если ОбновитьСтатусПроблем Тогда
		ЗапроситьНаСервере.Вставить("ЕстьПроблемыДлительнаяОперация");
	КонецЕсли;
	
	Если НЕ ЗапроситьНаСервере.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыНаСервере(ЗапроситьНаСервере, УникальныйИдентификатор, Организация, ЛимитЗаписей);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗапроситьНаСервере);
	
	Если ВыгружатьВНациональныйКаталог Тогда
		РаботаСНоменклатуройСлужебныйКлиент.ОбновитьСтатистикуРезультатов(ЭтотОбъект);
	КонецЕсли;
	Если ОбновитьКоличествоКВыгрузке Тогда
		ОбновитьЗаголовокЭлементаВыбратьНоменклатуру();
	КонецЕсли;
	Если ОбновитьСтатусПроблем Тогда
		ПроверкаПроблемБыстро();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВыгрузки(Знач ДатаВыгрузки, Знач ДатаПредставление)

	Если ПустаяСтрока(ДатаПредставление) Тогда
		Если ЗначениеЗаполнено(ДатаВыгрузки) Тогда
			ДатаПредставление = СтрШаблон(НСтр("ru = 'выгружена %1'"), ДатаВыгрузки);
		Иначе
			ДатаПредставление = НСтр("ru = 'не выгружалась'");
		КонецЕсли;
	КонецЕсли;

	Возврат ДатаПредставление;
	
КонецФункции

&НаСервереБезКонтекста
Функция СостояниеВыгрузкиВНациональныйКаталог(Знач Организация)
	
	СостоянияВыгрузки = Новый Структура("НаМодерации, Отклонена");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НаМодерации,
	|	NULL КАК Отклонена
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.ПроверяетсяМодератором)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	NULL,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.Отклонена)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.НаМодерации = Истина Тогда
			СостоянияВыгрузки.Вставить("НаМодерации", Истина);
		КонецЕсли;
		Если Выборка.Отклонена = Истина Тогда
			СостоянияВыгрузки.Вставить("Отклонена", Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СостоянияВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветПоВыгрузкеВНациональныйКаталог(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыгружатьВНациональныйКаталог = Истина;
	Иначе 
		ОбновляемыеПараметры = ОбновляемыеПараметрыПриИзмененииФлагаКаталога("ВыгружатьВНациональныйКаталог");
		ОбновитьПараметрНастройкиНаКлиенте(ОбновляемыеПараметры, Истина);
		ВыгружатьВНациональныйКаталогПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбновляемыеПараметрыПриИзмененииФлагаКаталога(ИмяКаталога)
	
	ОбновляемыеПараметры = Новый Структура(ИмяКаталога, ЭтотОбъект[ИмяКаталога]);
	ОбновляемыеПараметры.Вставить("ДатаПредставление",      "");
	ОбновляемыеПараметры.Вставить("ВыгруженоПредставление", "");
	ОбновляемыеПараметры.Вставить("ДатаВыгрузки",           Дата(1, 1, 1));
	ОбновляемыеПараметры.Вставить("ИдентификаторЗадания",   "");
	
	Возврат ОбновляемыеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюОВыгрузке()
	
	Если НЕ Организация.Пустая() Тогда
		ДатаПредставление        = ПредставлениеДатыВыгрузки(ДатаВыгрузки, ДатаПредставление);
		ОрганизацияПредставление = СтрШаблон("%1 (%2)", Организация, ДатаПредставление);
		ЭлементСписка = Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация);
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка = Элементы.Организация.СписокВыбора.Добавить(Организация, ОрганизацияПредставление);
		Иначе 
			ЭлементСписка.Представление = ОрганизацияПредставление;
		КонецЕсли;
		Элементы.ДатаПредставление.Видимость = ЭлементСписка.Пометка;
	Иначе 
		Элементы.ДатаПредставление.Видимость = Ложь;
	КонецЕсли;
	НоменклатураВыгружается = ЗначениеЗаполнено(ИдентификаторЗадания);
	Элементы.ВыгрузкаДлительнаяОперация.Видимость = НоменклатураВыгружается;
	Если НоменклатураВыгружается Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыгрузкуНоменклатурыВФорме", 1);
	Иначе 
		УстановитьВидимостьГруппыРезультаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокЭлементаСопоставитьНоменклатуру(ПроблемыСтрокой = "")
	
	Если ПроблемыСтрокой = "" Тогда
		Если ВыбраноКВыгрузке = 0 Тогда
			ПроблемыСтрокой = НСтр("ru = 'не выбрана номенклатура'");
		ИначеЕсли ЕстьПроблемы Тогда 
			ПроблемыСтрокой = НСтр("ru = 'есть проблемы'");
		Иначе 
			ПроблемыСтрокой = НСтр("ru = 'готова к выгрузке'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СопоставитьНоменклатуру.Заголовок = СтрШаблон(НСтр("ru = 'Подготовить номенклатуру для выгрузки (%1)'"), ПроблемыСтрокой);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДоступаНациональныйКаталогЗаполнены()
	Возврат ЗначениеЗаполнено(apikey);
КонецФункции

&НаКлиенте
Функция ПараметрыВычисленияПрогресса()
	
	ПараметрыПрогресса = Новый Структура();
	
	ПараметрыПрогресса.Вставить("Организация");
	ПараметрыПрогресса.Вставить("ИдентификаторЗадания");
	ПараметрыПрогресса.Вставить("РазделениеВключено");
	ПараметрыПрогресса.Вставить("СоздатьЗадание");
	ПараметрыПрогресса.Вставить("УникальныйИдентификатор");
	ПараметрыПрогресса.Вставить("ЛимитЗаписей");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПрогресса, ЭтотОбъект);
	
	Возврат ПараметрыПрогресса;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияРеквизитовФормы()
	
	ЦветОсновной       = ЦветаСтиля.ГиперссылкаЦвет;
	ЦветОшибки         = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЛимитЗаписей       = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище);
	Параметры.Свойство("ВыгружатьНоменклатуру", ВыгружатьНоменклатуру);
	Параметры.Свойство("ВыгружатьВНациональныйКаталог", ВыгружатьВНациональныйКаталог);
	Параметры.Свойство("Организация", Организация);
	
	Если Организация.Пустая() Тогда
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСНоменклатурой", "ПомощникВыгрузки\Организация");
	КонецЕсли;
	
	ВыбраноКВыгрузке = НоменклатураКВыгрузке(Организация, ЛимитЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиЭлементовФормы()
	
	Элементы.НадписьНоменклатура.Заголовок = ФорматированныйЗаголовокКаталога(НСтр("ru = '1С:Номенклатура'"),
		НСтр("ru = 'Единый каталог описаний товаров в 1С:Предприятии 8'"),
		РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура());
	
	Элементы.НадписьНациональныйКаталог.Заголовок = ФорматированныйЗаголовокКаталога(НСтр("ru = 'Национальный каталог'"),
		НСтр("ru = 'Важная составляющая национальной системы цифровой маркировки Честный ЗНАК'"),
		РаботаСНоменклатурой.ГиперссылкаНаСайтНациональногоКаталога());
	
	Оферта = Новый Массив;
	Оферта.Добавить(НСтр("ru = 'Нажатие ""Выгрузить номенклатуру"" означает согласие с'"));
	Оферта.Добавить(" ");
	Оферта.Добавить(СтрШаблон("<a href = %1>%2</a>",
		РаботаСНоменклатурой.ГиперссылкаНаОфертуСервисов(),
		НСтр("ru = 'Условиями использования сервиса 1С:Номенклатура'")));
	Элементы.ГруппаВыгрузитьНоменклатуру.РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(Оферта));
	
	УстановитьЗаголовокКомандыВыбораРежимаПолученияНовыхШтрихкодов();
	
КонецПроцедуры

&НаСервере
Функция ФорматированныйЗаголовокКаталога(Имя, Пояснение, Гиперссылка)
	
	ЗаголовокКаталога = Новый Массив;
	ЗаголовокКаталога.Добавить(СтрШаблон("<b>%1</b> - <span style=""color: ПоясняющийТекст>%2</span>", Имя, Пояснение));
	ЗаголовокКаталога.Добавить(
		РаботаСНоменклатуройСлужебный.ПредставлениеГиперссылки(Гиперссылка, НСтр("ru = 'подробнее'")));
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(ЗаголовокКаталога, Символы.ПС));
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыРасписания()
	
	Если РазделениеВключено Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные",
		Метаданные.РегламентныеЗадания.ВыгрузкаНоменклатурыРаботаСНоменклатурой));
	Если Не СписокЗаданий.Количество() = 0 Тогда
		Расписание        = СписокЗаданий[0].Расписание;
		РасписаниеАктивно = СписокЗаданий[0].Использование;
	Иначе
		Расписание                   = Новый РасписаниеРегламентногоЗадания;
		Расписание.ДеньВМесяце       = 1;
		Расписание.ПериодПовтораДней = 1;
		РасписаниеАктивно            = Истина;
		СоздатьЗадание               = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Элементы.НастроитьРасписание.Заголовок = ПредставлениеРасписания(Расписание);
	Элементы.НастроитьРасписание.Доступность = РасписаниеАктивно;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизаций()

	НастройкиВыгрузки = РаботаСНоменклатуройСлужебный.НастройкиВыгрузкиНоменклатуры();
	
	ТипДанныхОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ИмяТаблицыОрганизация = РаботаСНоменклатурой.ИмяТаблицыПоТипу(ТипДанныхОрганизация);
	ДанныеПоОрганизациям  = Новый ТаблицаЗначений;
	ДанныеПоОрганизациям.Колонки.Добавить("Организация", ТипДанныхОрганизация);
	ДанныеПоОрганизациям.Колонки.Добавить("ДатаПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеПоОрганизациям.Колонки.Добавить("ДатаВыгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПоОрганизациям.Колонки.Добавить("ВыгруженоПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеПоОрганизациям.Колонки.Добавить("ИдентификаторЗадания", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Для Каждого ПараметрыНастройки Из НастройкиВыгрузки Цикл
		ТекущаяНастройка = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(ПараметрыНастройки.Ключ, 
			НастройкиВыгрузки);
		ЗаполнитьЗначенияСвойств(ДанныеПоОрганизациям.Добавить(), ТекущаяНастройка);
		Если ПараметрыНастройки.Ключ = Организация Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущаяНастройка, , "Организация");
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаДанныеДляЗаполненияСпискаОрганизаций(ИмяТаблицыОрганизация);
	Запрос       = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеПоОрганизациям", ДанныеПоОрганизациям);
	
	КлючиВыгрузки = КлючиВыгрузки();
	ОбновитьКлючи = Ложь;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущаяОрганизация       = Выборка.Организация;
		ВыводитьНадпись          = ЗначениеЗаполнено(Выборка.ДатаПредставление) Или ЗначениеЗаполнено(
			Выборка.ДатаВыгрузки);
		ПредставлениеДаты        = ПредставлениеДатыВыгрузки(Выборка.ДатаВыгрузки, Выборка.ДатаПредставление);
		ПредставлениеОрганизации = СтрШаблон("%1 (%2)", ТекущаяОрганизация, ПредставлениеДаты);
		Элементы.Организация.СписокВыбора.Добавить(ТекущаяОрганизация, ПредставлениеОрганизации, ВыводитьНадпись);
		Если ЗначениеЗаполнено(Выборка.ИдентификаторЗадания) И Выборка.ИдентификаторЗадания <> "РегламентноеЗадание"
			И (КлючиВыгрузки.Найти(ТекущаяОрганизация) = Неопределено) Тогда
			КлючиВыгрузки.Добавить(ТекущаяОрганизация);
			ОбновитьКлючи = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ОбновитьКлючи Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой", "ПомощникВыгрузки\КлючиВыгрузки",
			КлючиВыгрузки);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаДанныеДляЗаполненияСпискаОрганизаций(Знач ИмяТаблицыОрганизация)

	ТекстЗапроса = "ВЫБРАТЬ
	|	ДанныеПоОрганизациям.Организация КАК Организация,
	|	ДанныеПоОрганизациям.ДатаПредставление КАК ДатаПредставление,
	|	ДанныеПоОрганизациям.ДатаВыгрузки КАК ДатаВыгрузки,
	|	ДанныеПоОрганизациям.ВыгруженоПредставление КАК ВыгруженоПредставление,
	|	ДанныеПоОрганизациям.ИдентификаторЗадания КАК ИдентификаторЗадания
	|ПОМЕСТИТЬ втДанныеПоОрганизациям
	|ИЗ
	|	&ДанныеПоОрганизациям КАК ДанныеПоОрганизациям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Организации.Ссылка) КАК ОрганизацияПредставление,
	|	втДанныеПоОрганизациям.ДатаПредставление КАК ДатаПредставление,
	|	втДанныеПоОрганизациям.ДатаВыгрузки КАК ДатаВыгрузки,
	|	втДанныеПоОрганизациям.ВыгруженоПредставление КАК ВыгруженоПредставление,
	|	втДанныеПоОрганизациям.ИдентификаторЗадания КАК ИдентификаторЗадания
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоОрганизациям КАК втДанныеПоОрганизациям
	|		ПО Организации.Ссылка = втДанныеПоОрганизациям.Организация";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", ИмяТаблицыОрганизация);

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ПроверитьДоступностьФункционалаНаСервере(Отказ)
	
	НастройкиВыгрузки = Новый Структура("ИспользоватьВыгрузкуВКаталог1С, ИспользоватьВыгрузкуВНациональныйКаталог");
	ЗаполнитьЗначенияСвойств(НастройкиВыгрузки, РаботаСНоменклатурой.НастройкиПодсистемы());
	// проверка корректности встраивания функционала выгрузки
	Если НЕ РаботаСНоменклатурой.ВыгрузкаНоменклатурыИспользуется(НастройкиВыгрузки) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьСервисРаботаСНоменклатурой = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
	Если Не ИспользоватьСервисРаботаСНоменклатурой Тогда
		Если Не РаботаСНоменклатурой.ПравоИзмененияДанных(Истина) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ИспользоватьСервисРаботаСНоменклатурой = Истина;
		Константы.ИспользоватьСервисРаботаСНоменклатурой.Установить(ИспользоватьСервисРаботаСНоменклатурой);
	КонецЕсли;
	
	Если НастройкиВыгрузки.ИспользоватьВыгрузкуВНациональныйКаталог Тогда
		НациональныйКаталогВидимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСНоменклатурой", "ПомощникВыгрузки\НациональныйКаталогВидимость");
		НациональныйКаталогВидимость = (НациональныйКаталогВидимость = Истина);
		Элементы.ГруппаНациональныйКаталог.Видимость = НациональныйКаталогВидимость;
		
		Если НациональныйКаталогВидимость = Ложь Тогда
			ПроверкаАктивностиПартнера = ЗапуститьПроверкуАктивностиПартнера(УникальныйИдентификатор, "crpt");
		КонецЕсли;
	Иначе 
		Элементы.ГруппаНациональныйКаталог.Видимость = Ложь;
	КонецЕсли;
	Элементы.ГруппаНоменклатура.Видимость = (НастройкиВыгрузки.ИспользоватьВыгрузкуВКаталог1С = Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьФункционалаНаКлиенте()
	
	Если ИспользоватьСервисРаботаСНоменклатурой Тогда
		ОбновитьФормуПослеОткрытия();
	Иначе
		
		ПараметрыОткрытия = РаботаСНоменклатуройКлиент.ПараметрыФормыПанелиАдминистрирования();
		ПараметрыОткрытия.Раздел          =    "НастройкиРаботаСНоменклатурой";
		ПараметрыОткрытия.Заголовок       = НСтр("ru = 'Сервис 1С:Номенклатура'");
		ПараметрыОткрытия.ОписаниеРаздела = НСтр(
			"ru = 'Для возможности выгрузки номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'");
	
		РаботаСНоменклатуройКлиент.ОткрытьФормуПанелиАдминистрирования(ПараметрыОткрытия, ЭтотОбъект,
			Новый ОписаниеОповещения("ПослеЗакрытияПанелиАдминистрирования", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПослеОткрытия()
	
	Если (Не Элементы.ГруппаНациональныйКаталог.Видимость
		Или Не ВыгружатьВНациональныйКаталог) 
		И ТипЗнч(ПроверкаАктивностиПартнера) = Тип("Структура") Тогда
		Если ПроверкаАктивностиПартнера.Статус = "Выполнено" Тогда
			ПроверкаАктивностиПартнераЗавершение(ПроверкаАктивностиПартнера, Неопределено);
		Иначе
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаАктивностиПартнераЗавершение", ЭтотОбъект);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
			ПараметрыОжидания.ВыводитьСообщения = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ПроверкаАктивностиПартнера, ОповещениеОЗавершении,
				ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПараметрыФормыПриИзмененииОрганизации();
	
	Если Не ПустаяСтрока(АдресТоваровВХранилище) И ЭтоАдресВременногоХранилища(АдресТоваровВХранилище) Тогда
		ВыбратьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПанелиАдминистрирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено И РезультатЗакрытия.ИспользоватьСервисРаботаСНоменклатурой Тогда
		ИспользоватьСервисРаботаСНоменклатурой = Истина;
		ОбновитьФормуПослеОткрытия();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРезультаты()
	
	ВидимостьГруппы = ВыгружатьВНациональныйКаталог 
		И Не Организация.Пустая() И ЗначениеЗаполнено(ВыгруженоПредставление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Шаг5Результаты", 
		"Видимость",
		ВидимостьГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРасписаниеНаКлиенте()
	
	УстановитьВидимостьГруппыРасписание(Элементы, РазделениеВключено, ВыбраноКВыгрузке, ВыгруженоПредставление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьГруппыРасписание(Элементы, Знач РазделениеВключено, Знач ВыбраноКВыгрузке, Знач ВыгруженоПредставление)
	
	ВидимостьГруппы = Не РазделениеВключено 
		И ((ВыбраноКВыгрузке > 0) Или ЗначениеЗаполнено(ВыгруженоПредставление));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаРасписание", 
		"Видимость",
		ВидимостьГруппы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКомандыВыбораРежимаПолученияНовыхШтрихкодов()
	
	ТекстПояснения = СтрШаблон("%1 %2", 
	               ?(ПолучитьТехническиеШтрихкоды, НСтр("ru = 'получать технические'"), НСтр("ru = 'получать GS46'")),
	               ?(ИспользоватьШтрихкодыБазы, НСтр("ru = 'если нет'"), НСтр("ru = 'для всех'")));
	
	ЗаголовокРежим = СтрШаблон(НСтр("ru = 'Выбрать режим получения новых штрихкодов (%1)'"),
	               ?(ПолучитьШтрихкоды, ТекстПояснения, НСтр("ru = 'не получать'")));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьРежимПолученияНовыхШтрихкодов",
		"Заголовок" , ЗаголовокРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимПолученияНовыхШтрихкодовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ВыбратьРежимПолученияНовыхШтрихкодовНаСервере(РезультатЗакрытия);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыбратьРежимПолученияНовыхШтрихкодовНаСервере(Знач РезультатЗакрытия)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	УстановитьЗаголовокКомандыВыбораРежимаПолученияНовыхШтрихкодов();
	
	НастройкаВыгрузки = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	НастройкаВыгрузки.ПолучитьШтрихкоды = ПолучитьШтрихкоды;
	НастройкаВыгрузки.ПолучитьТехническиеШтрихкоды = ПолучитьТехническиеШтрихкоды;
	НастройкаВыгрузки.ИспользоватьШтрихкодыБазы = ИспользоватьШтрихкодыБазы;
	РаботаСНоменклатуройСлужебный.СохранитьНастройкуВыгрузкиНоменклатуры(НастройкаВыгрузки);
	
КонецПроцедуры

#КонецОбласти