
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Параметры.Свойство("РежимПривязкиНоменклатуры",           ЭтоПривязкаНоменклатуры);
	Параметры.Свойство("РежимВыбораНоменклатуры",             РежимВыбораНоменклатуры); //используется при выборе номенклатуры из других форм
	Параметры.Свойство("СтрокаПоиска",                        СтрокаПоиска);
	Параметры.Свойство("ИдентификаторНоменклатуры",           ИдентификаторНоменклатуры);
	Параметры.Свойство("СоздаватьНоменклатуруПриВыборе",      СоздаватьНоменклатуруПриВыборе);
	Параметры.Свойство("ПодтверждатьСозданиеНоменклатуры",    ПодтверждатьСозданиеНоменклатуры);
	Параметры.Свойство("ИдентификаторКатегории",              ИдентификаторКатегории); //используется при переходе к категориям карточки номенклатуры.
	Параметры.Свойство("ЗапрещатьВыборЗагруженных",           ЗапрещатьВыборЗагруженных);
	Параметры.Свойство("ВозвращатьРасширенныйНаборПолей",     ВозвращатьРасширенныйНаборПолей);
	Параметры.Свойство("НеЗагружатьДанныеСервисаПриОткрытии", НеЗагружатьДанныеСервисаПриОткрытии); //используется при переходе к категориям карточки номенклатуры.
	
	Если Не Параметры.Свойство("ПокупатьНоменклатуруПриВыборе", ПокупатьНоменклатуруПриВыборе) Тогда
		ПокупатьНоменклатуруПриВыборе = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияУсловияИспользованияСервиса.Заголовок =
		Новый ФорматированнаяСтрока(УсловиеИспользованияСервиса(РежимВыбораНоменклатуры));
	
	ИмяФормыНоменклатуры = РаботаСНоменклатуройСлужебныйВызовСервера.ИмяФормыСпискаНоменклатуры();
	
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	ЗаполнитьРеквизитыФормы();
	
	Если ИнтернетПоддержкаПодключена Тогда
		
		Элементы.НайтиКарточки.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		
		ПараметрыЗапросаНоменклатуры = Новый Структура;
		ПараметрыЗапросаНоменклатуры.Вставить("ВключитьНоменклатуру", Истина);
		
		ОперацияЗагрузкаКатегорий = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
			УникальныйИдентификатор, Неопределено, ПараметрыЗапросаНоменклатуры);
		
	КонецЕсли;
	
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УбратьВидимостьБыстрыхОтборов(0);
	
	Если НЕ ЗначениеЗаполнено(РежимПросмотраСписка) Тогда
		РежимПросмотраСписка = "Линейный";
	КонецЕсли;
	
	УстановитьПометкиРежимаПросмотра();
	
	Если НЕ НеЗагружатьДанныеСервисаПриОткрытии Тогда
		Если ИнтернетПоддержкаПодключена Тогда
			Если ОперацияЗагрузкаКатегорий <> Неопределено
				ИЛИ РежимВыбораНоменклатуры Тогда
				ПолучитьДанныеСервиса(ТекущаяКатегория);
			КонецЕсли;
		Иначе
			ПолучитьДанныеПослеОткрытия = Новый ОписаниеОповещения("ПолучитьДанныеПослеОткрытия", ЭтотОбъект);
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ПолучитьДанныеПослеОткрытия, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаботаСНоменклатурой_ПерейтиККатегории" Тогда
		
		// Переход к категории, переданной из карточки номенклатуры.
		
		ТекущийИдентификатор = Неопределено;
		ТекущиеДанные        = Элементы.Категории.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийИдентификатор = Элементы.Категории.ТекущиеДанные.Идентификатор;
		КонецЕсли;
		
		Если Параметр.Свойство("ИдентификаторКатегории") И ТекущийИдентификатор <> Параметр.ИдентификаторКатегории Тогда
			ПолучитьДанныеСервиса(Параметр.ИдентификаторКатегории, , Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры
		ИЛИ ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры Тогда
		
		ОбновитьПризнакЗагрузки();
		
		УстановитьВидимостьДоступность();
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
		
		ИнтернетПоддержкаПодключена = Ложь;
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ИдентификаторНоменклатуры = "";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.СтрокаПоискаПриИзменении",
		Истина);
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

#Область УправлениеБыстрымОтбором

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		ИдентификаторОтбора = Элемент.Заголовок;
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			Если СтрокаОтбора.Идентификатор = ИдентификаторОтбора Тогда
				СтрокаОтбора.Отбор = Ложь;
				Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
					СтрокиЗначенийОтбора = СтрокаОтбора.ПолучитьЭлементы();
					Для Каждого СтрокаЗначения Из СтрокиЗначенийОтбора Цикл
						СтрокаЗначения.Отбор = Ложь;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПолучитьНоменклатуру();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_Еще") Тогда
		
		ПоказатьПанельОтборов();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			Если СтрокаОтбора.Идентификатор = НавигационнаяСсылкаФорматированнойСтроки Тогда
				Элементы.ДеревоОтборов.ТекущаяСтрока = СтрокаОтбора.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			ПоказатьПанельОтборов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокКоличествоХарактеристик Тогда
		
		// Раскрытие ветки характеристик.
		
		СтандартнаяОбработка = Ложь;
		
		ИзменитьТекущегоРодителяНаСервере();
		
	ИначеЕсли Поле = Элементы.СписокГиперссылкаЗапросаДанных Тогда	
		
		// Догрузка данных.
		
		НомерСтраницыДанных = НомерСтраницыДанных + 1;
		
		Элементы.Список.ТекущаяСтрока = ИдентификаторСтрокиЗагрузкиДанных - 1;
		
		СтрокаДанных = Список.НайтиПоИдентификатору(ИдентификаторСтрокиЗагрузкиДанных);
		
		Если СтрокаДанных <> Неопределено Тогда
			Список.ПолучитьЭлементы().Удалить(СтрокаДанных);
		КонецЕсли;
		
		ПолучитьНоменклатуру(Неопределено, Истина, ИдентификаторСтрокиЗагрузкиДанных - 1);
		
	Иначе
		Если РежимВыбораНоменклатуры 
			И Элементы.СписокВыбратьНоменклатуру.Доступность Тогда
			
			ВыбратьНоменклатуруИзСписка();
		Иначе
			ОткрытьКарточкуНоменклатуры();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриСменеТекущегоРодителя(Элемент)
	
	Если Элементы.Список.ТекущийРодитель = Неопределено Тогда
		
		// Проверка нужна, поскольку событие вызывается не только при раскрытии характеристик:
		Если ЗначениеЗаполнено(ИдентификаторСтрокиРодителя) Тогда
			Элементы.Список.ТекущаяСтрока = ИдентификаторСтрокиРодителя;
			ИдентификаторСтрокиРодителя = 0;
		КонецЕсли;
		
		Возврат;
		
	Иначе
		// Сохраняется родитель, чтобы при сворачивании вернуться на строку-родителя:
		ИдентификаторСтрокиРодителя = Элементы.Список.ТекущийРодитель;
	КонецЕсли;

	Родитель = Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель);
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыРодителя[0].Наименование = ПредставлениеТехническойСтроки() Тогда
		ПолучитьХарактеристики(Родитель);
	Иначе
		ОбновитьПризнакЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// При загрузке, стандартное поведение при активации не выполняется.
	Если Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоСтрокаЗапросаДанных Тогда
		Элементы.СписокОткрытьКарточку.Доступность = Ложь;
		Элементы.СписокСоздатьНоменклатуру.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегории

&НаКлиенте
Процедура КатегорииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Категории.Развернут(ВыбраннаяСтрока) Тогда
		Элементы.Категории.Свернуть(ВыбраннаяСтрока);
	Иначе
		Элементы.Категории.Развернуть(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НеТребуетсяЗагрузка = Ложь;
	
	РаботаСНоменклатуройСлужебныйКлиент.КатегорииПередРазворачиванием(СтрокаДерева, СписокРазвернутыхКатегорий, КоличествоЗаданий, НеТребуетсяЗагрузка);
	
	Если НеТребуетсяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеКатегории = СтрокаДерева.Наименование;
	
	Отказ = Истина;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;

	ОчиститьБыстрыеОтборыИДерево();
	
	ПолучитьДанныеСервиса(СтрокаДерева.Идентификатор);

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередСворачиванием(Элемент, Строка, Отказ)
	
	РаботаСНоменклатуройСлужебныйКлиент.КатегорииПередСворачиванием(Строка, Категории, СписокРазвернутыхКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВОбработке
		ИЛИ КоличествоЗаданий > 10
		ИЛИ (ТекущаяКатегория = ТекущиеДанные.Идентификатор И КоличествоЗаданийНаПутиКЭлементу = 0)
		ИЛИ (ТекущаяКатегория <> ТекущиеДанные.Идентификатор И КоличествоЗаданийНаПутиКЭлементу > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	// При открытии формы номенклатура запрашивается отдельно
	Если ТекущаяКатегория = Неопределено И ПустаяСтрока(ТекущиеДанные.Идентификатор) Тогда
		ЗапрашиватьНоменклатуру = Ложь;
	Иначе
		ЗапрашиватьНоменклатуру = Истина;
	КонецЕсли;
	
	ПредставлениеКатегории = ТекущиеДанные.Наименование;
	ТекущаяКатегория       = ТекущиеДанные.Идентификатор;
	
	// При смене категории очищаем отборы.
	ОчиститьБыстрыеОтборыИДерево();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиПродолжение", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;

	РаботаСНоменклатуройСлужебныйКлиент.КатегорияСтрокаПоискаНачалоВыбора(ЭтотОбъект, ТекущаяКатегория);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Результат.ВыбранныеОбъекты[0];
	ПредставлениеКатегории = ВыбранноеЗначение.Наименование;
	
	Если ТекущаяКатегория = ВыбранноеЗначение.Идентификатор Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКатегория = ВыбранноеЗначение.Идентификатор;
	
	ПолучитьДанныеСервиса(ТекущаяКатегория, Истина, Истина);
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы,
		Категории.ПолучитьЭлементы().Количество()> 0);
		
	ОчиститьБыстрыеОтборыИДерево();
	
	Подключаемый_ПриАктивизацииСтрокиПродолжение();
	
КонецПроцедуры

#Область УправлениеПоискомКатегорий

&НаКлиенте
Процедура СтрокаПоискаКатегорийПриИзменении(Элемент)
	
	Если КоличествоЗаданий = 0 Тогда
		ИзменитьСтрокуПоискаКатегорий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКатегорийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если НЕ ЗначениеЗаполнено(Элементы.СтрокаПоискаКатегорий.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСтрокуПоискаКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКатегорийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаПоискаКатегорий = "";
	
	ОчиститьСтрокиПоискаКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиПоискаКатегорий()
	
	СтрокаДерева            = Элементы.Категории.ТекущиеДанные;
	ИдентификаторКатегории  = Неопределено;
	
	Если Элементы.Категории.Отображение = ОтображениеТаблицы.Список
		И СтрокаДерева <> Неопределено Тогда
		ИдентификаторКатегории = СтрокаДерева.Идентификатор;
	КонецЕсли;
	
	Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
	
	ПолучитьДанныеСервиса(ИдентификаторКатегории, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуПоискаКатегорий()
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	СтрокаПоискаКатегорий = СокрЛП(Элементы.СтрокаПоискаКатегорий.ТекстРедактирования);
	
	Если ПустаяСтрока(СтрокаПоискаКатегорий) Тогда
		Если Элементы.Категории.Отображение = ОтображениеТаблицы.Список Тогда
			ОчиститьСтрокиПоискаКатегорий();
		КонецЕсли;
		Возврат;
	ИначеЕсли СтрДлина(СтрокаПоискаКатегорий) < 2 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Для поиска используйте строку длиной от двух символов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СтрокаПоискаКатегорий");
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеСервиса();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваОтборов

&НаКлиенте
Процедура ДеревоОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = ДеревоОтборов.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ВРаботе Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ДочерниеПодгружены Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(СтрокаДерева, ПолучитьДанныеСервисаПоОтбору = Ложь)
	
	ИдентификаторСтрокиДерева = СтрокаДерева.ПолучитьИдентификатор();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтрокиДерева",     ИдентификаторСтрокиДерева);
	ДополнительныеПараметры.Вставить("ИдентификаторРеквизита",        СтрокаДерева.Идентификатор);
	ДополнительныеПараметры.Вставить("ИдентификаторКатегории",        ТекущаяКатегория);
	ДополнительныеПараметры.Вставить("ПолучитьДанныеСервисаПоОтбору", ПолучитьДанныеСервисаПоОтбору);
	
	КэшКатегорий                 = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	СтрокаКатегорийИзКэша        = Неопределено;
	ЭлементСпискаЗначенийСвойств = Неопределено;
	
	Если КэшКатегорий.Свойство("_" + ТекущаяКатегория, СтрокаКатегорийИзКэша) Тогда
		ЭлементСпискаЗначенийСвойств = СтрокаКатегорийИзКэша.СписокКэшированныхСвойств.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	КонецЕсли;

	Если ЭлементСпискаЗначенийСвойств <> Неопределено Тогда

		РаботаСНоменклатуройСлужебныйКлиент.ДополнитьДеревоОтборовЗначениямиВыбораСписка(ДополнительныеПараметры, КэшКатегорий, ДеревоОтборов);

		ЗавершитьВыводДополнительныхРеквизитовПоСписку(ПолучитьДанныеСервисаПоОтбору, ИдентификаторСтрокиДерева);

	Иначе
		ДополнительныеПараметры.Вставить("Представление", СтрокаДерева.Представление);
		
		РаботаСНоменклатуройСлужебныйКлиент.ПолучитьЗначенияДополнительныхРеквизитов(ЭтотОбъект, Элементы.ДекорацияДлительнаяЗагрузкаСвойств,
			ИдентификаторЗаданияЗначенийСвойств, ДополнительныеПараметры);
		ИдентификаторЗаданияЗначенийСвойств = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
	
	РаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовВыбор(Элементы.ДеревоОтборов, Элементы.ДеревоОтборовПредставлениеОтбора,
		Элементы.ДеревоОтборовПредставление, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(ДанныеОтбораИзменены, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрокаДерева = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	
	Если ТекущаяСтрокаДерева.Отбор И НЕ ТекущаяСтрокаДерева.ДочерниеПодгружены
		И ТекущаяСтрокаДерева.ЗначениеОтбора = "Список" Тогда
		ПолучитьЗначенияДополнительныхРеквизитовДереваОтборов(ТекущаяСтрокаДерева, Истина);
	Иначе
		Если ДополнительныеПараметры.Свойство("ДанныеОтбораИзменены") Тогда
			ДанныеОтбораИзменены = ДополнительныеПараметры.ДанныеОтбораИзменены;
			ТекущаяСтрокаДерева.Отбор = ДанныеОтбораИзменены;
		КонецЕсли;
		Если ДанныеОтбораИзменены Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьНоменклатуру", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьНоменклатуру()
	
	ПолучитьНоменклатуру(ТекущаяКатегория);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		ТекущаяСтрока.Отбор = Ложь;
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЗначениеОтбора = "Список" Тогда
		Если ТекущаяСтрока.ДочерниеПодгружены Тогда
			ТекущаяСтрока.ВРаботе = Ложь;
		Иначе
			Если ТекущаяСтрока.ВРаботе Тогда
				Возврат;
			КонецЕсли;
			ТекущаяСтрока.ВРаботе = Истина;
		КонецЕсли;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
	
	РаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовОтборПриИзменении(Элементы.ДеревоОтборов,
		Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеречитатьНоменклатуру(Команда)
	
	ОбновитьПризнакЗагрузки();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		СтрокаОтбора.Отбор = Ложь;
		Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
			ЭлементыСпискаОтбора = СтрокаОтбора.ПолучитьЭлементы();
			Для Каждого ЭлементОтбора Из ЭлементыСпискаОтбора Цикл
				ЭлементОтбора.Отбор = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	БыстрыеОтборы.Очистить();
	УбратьВидимостьБыстрыхОтборов(0);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраСписок(Команда)
	
	РежимПросмотраСписка = "Линейный";
	
	УстановитьПометкиРежимаПросмотра();
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраГруппировка(Команда)
	
	РежимПросмотраСписка = "Группировка";
	
	УстановитьПометкиРежимаПросмотра();
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРежимаПросмотра()
	
	Если НЕ Элементы.Список.КонтекстноеМеню.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюРежимПросмотраСписок.Пометка = РежимПросмотраСписка = "Линейный";
	
	Элементы.СписокКонтекстноеМенюРежимПросмотраГруппировка.Пометка = РежимПросмотраСписка = "Группировка";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьКарточкуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторыНоменклатурыИХарактеристик(ИсключитьЗагруженные = Ложь)
	
	ИдентификаторыНоменклатуры = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СтрокаНоменклатуры = Список.НайтиПоИдентификатору(ЭлементКоллекции);
		
		Если ИсключитьЗагруженные
			И СтрокаНоменклатуры.Загружена = 1 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.ЭтоСтрокаЗапросаДанных Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляЗагрузки = Новый Структура(
			"ИдентификаторНоменклатуры, ИдентификаторХарактеристики, Загружена");
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗагрузки, СтрокаНоменклатуры);
		
		ИдентификаторыНоменклатуры.Добавить(ДанныеДляЗагрузки);
		
	КонецЦикла;

	Возврат ИдентификаторыНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	Если Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Загружена = 1 Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ИдентификаторыНоменклатуры = ИдентификаторыНоменклатурыИХарактеристик(Истина);
	
	ИдентификаторыСНарушениемРежима = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ИдентификаторыНоменклатуры Цикл
		Если ЭлементКоллекции.Загружена = 3 Тогда
			ИдентификаторыСНарушениемРежима.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСНарушениемРежима.Количество() > 0 Тогда
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.НарушениеРежимаЗагрузкиХарактеристик", 
			Новый Структура("Идентификаторы", ИдентификаторыСНарушениемРежима), ЭтотОбъект);
	Иначе
		ЗагрузитьНоменклатуру(ИдентификаторыНоменклатуры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуру(ИдентификаторыНоменклатуры, ЗакрытьФормуПослеСоздания = Ложь)
	
	НастроитьФормуПриДлительнойОперации(Истина);
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("ЗакрытьФормуПослеСоздания", ЗакрытьФормуПослеСоздания);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаДанныхПродолжение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ЗагрузитьНоменклатуруИХарактеристики(
		Оповещение,
		ИдентификаторыНоменклатуры,
		ЭтотОбъект,
		Неопределено,
		Неопределено,
		Элементы.СтраницыДлительнойОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	НастроитьФормуПриДлительнойОперации(Ложь);
	
	Если Результат = Неопределено Тогда
		ОбновитьПризнакЗагрузки();
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗакрытьФормуПослеСоздания Тогда
		Закрыть(Новый Структура("ВыбранныеОбъекты", Результат.НовыеЭлементы));
		Возврат;
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	
	ВыбратьНоменклатуруИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиКарточки(Команда)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьКатегории(Команда)
	
	ВидимостьКатегорий = Элементы.ПоказатьСкрытьКатегории.Пометка;
	
	Элементы.ПоказатьСкрытьКатегории.Пометка    = НЕ ВидимостьКатегорий;
	Элементы.ГруппаКатегорий.Видимость          = НЕ ВидимостьКатегорий;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = НЕ Элементы.ПоказатьСкрытьКатегории.Пометка И Элементы.ПоказатьСкрытьОтборы.Пометка;
	
	Если Элементы.ПоказатьСкрытьКатегории.Пометка
		И Категории.ПолучитьЭлементы().Количество() Тогда
		ИдентификаторСтрока = ТекущаяКатегория;
		ПолучитьДанныеСервиса(ИдентификаторСтрока, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	ВидимостьОтборов = Элементы.ПоказатьСкрытьОтборы.Пометка;
	
	Элементы.ПоказатьСкрытьОтборы.Пометка       = НЕ ВидимостьОтборов;
	Элементы.ГруппаОтборов.Видимость            = НЕ ВидимостьОтборов;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = НЕ Элементы.ПоказатьСкрытьКатегории.Пометка И Элементы.ПоказатьСкрытьОтборы.Пометка;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеБыстрымОтбором

&НаКлиенте
Процедура ОчиститьБыстрыеОтборыИДерево()
	
	БыстрыеОтборы.Очистить();
	ДеревоОтборов.ПолучитьЭлементы().Очистить();
	УбратьВидимостьБыстрыхОтборов(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБыстрыеОтборыНаФорме(ОбновитьОтборы = Ложь)

	ВыбраноОтборов = 0;
	
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		Если ЭлементОтбора.Пометка И НЕ ОбновитьОтборы Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВыбраноОтборов < 10 Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + ВыбраноОтборов];
			
			Представление = ЭлементОтбора.Представление;
			ПредставлениеОтбора = Сред(Представление, СтрНайти(Представление, ":")+1);
			Если СтрДлина(ПредставлениеОтбора) > 85 Тогда
				ПредставлениеЗаголовка = Лев(ПредставлениеОтбора, 82) + "...";
			Иначе
				ПредставлениеЗаголовка = ПредставлениеОтбора;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Лев(Представление, СтрНайти(Представление, ":")));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаголовка,, ЦветаСтиляЦветТекстаФормы));
			ЭлементЗаголовокОтбора.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок, , ЦветаСтиляПоясняющийТекст, , ЭлементОтбора.Значение);
			ЭлементЗаголовокОтбора.Видимость = Истина;
			
			ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + ВыбраноОтборов];
			ЭлементОчиститьОтбор.Заголовок = ЭлементОтбора.Значение;
			ЭлементОчиститьОтбор.Видимость = Истина;

			ВыбраноОтборов = ВыбраноОтборов + 1;
			
		КонецЕсли;
		ЭлементОтбора.Пометка = Истина;
	КонецЦикла;
	
	Если ВыбраноОтборов < БыстрыеОтборы.Количество() Тогда
		ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
		ЭлементЗаголовокОтбора.Заголовок = СтрШаблон(НСтр("ru = 'И еще %1'"), БыстрыеОтборы.Количество() - ВыбраноОтборов);
		ЭлементЗаголовокОтбора.Видимость = Истина;
	Иначе
		УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, ОбновитьОтборы = Ложь)
	
	Для Счетчик = ВыбраноОтборов По 9 Цикл
		
		ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + Счетчик];
		
		БыстрыйОтбор = БыстрыеОтборы.НайтиПоЗначению(ЭлементОчиститьОтбор.Заголовок);
		Если БыстрыйОтбор = Неопределено ИЛИ ОбновитьОтборы Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + Счетчик];
			ЭлементЗаголовокОтбора.Видимость = Ложь;
			ЭлементОчиститьОтбор.Видимость   = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
	ЭлементЗаголовокОтбора.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельОтборов()
	
	Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
		Элементы.ПоказатьСкрытьОтборы.Пометка       = Истина;
		Элементы.ГруппаОтборов.Видимость            = Истина;
		Элементы.ГруппаЗаголовкаСвойств.Видимость   = НЕ Элементы.ПоказатьСкрытьКатегории.Пометка И Элементы.ПоказатьСкрытьОтборы.Пометка;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Управление видимостью колонки с характеристиками.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ГруппаЭлементовОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.КоличествоХарактеристикПредставление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЭтоХарактеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// Оформляемое поле.
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКоличествоХарактеристик.Имя);
	
	// Гиперссылка запроса данных.
	
	РаботаСНоменклатурой.УсловноеОформлениеГиперссылкиЗапросаДанных(ЭтотОбъект, "Список");
	
	// Оформление дерева отборов.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ОтборДоступен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Выделение установленных отборов жирным шрифтом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[Элементы.ДеревоОтборовПредставление.Имя].Шрифт, , ,
		Истина, Ложь, Ложь, Ложь, ));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ТекущаяКатегория = ИдентификаторКатегории;
	
	РазмерПорцииДанныхНоменклатуры = РаботаСНоменклатурой.РазмерПорцииДанныхНоменклатуры();
	
	НомерСтраницыДанных = 1;
	НомерСтраницыДанныхХарактеристик = 1;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ПравоИзмененияДанных = РаботаСНоменклатурой.ПравоИзмененияДанных();
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	РазвернутыеСтрокиИндекс = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	ЗапрашиватьНоменклатуру = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	НастройкиПодсистемы = РаботаСНоменклатурой.НастройкиПодсистемы();
	
	// Настройка режима представления характеристик.
	
	Элементы.Список.КонтекстноеМеню.Видимость
		= НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками = "Настраиваемый";
		
	Если НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками = "Настраиваемый" Тогда
		РежимПросмотраСписка = "Группировка";
	Иначе
		РежимПросмотраСписка = НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками;
	КонецЕсли;
	
	// Настройка множественного режима выбора.
	
	Элементы.Список.МножественныйВыбор = НастройкиПодсистемы.ИспользоватьПакетноеСозданиеНоменклатуры
		И НЕ РежимВыбораНоменклатуры;
	Элементы.Список.РежимВыделения = ?(Элементы.Список.МножественныйВыбор,
		РежимВыделенияТаблицы.Множественный, РежимВыделенияТаблицы.Одиночный);
	
	Элементы.СписокСоздатьНоменклатуру.Видимость         = НЕ РежимВыбораНоменклатуры И ПравоИзмененияДанных;
	Элементы.СписокСоздатьНоменклатуру.КнопкаПоУмолчанию = НЕ РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.Видимость         = РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.КнопкаПоУмолчанию = РежимВыбораНоменклатуры;
	
	ЗакрыватьПриВыборе = РежимВыбораНоменклатуры;
	
	Если РежимВыбораНоменклатуры Тогда 
		Заголовок = НСтр("ru = 'Выбор номенклатуры из сервиса 1С:Номенклатура'");
	Иначе
		Заголовок = НСтр("ru = 'Добавление номенклатуры из сервиса 1С:Номенклатура'");
	КонецЕсли;
		
	Элементы.СписокСоздатьНоменклатуру.Доступность      = Ложь;
	Элементы.СписокОткрытьКарточку.Доступность          = Ложь;
	Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияНеАктивна;
	
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Ложь;
	Элементы.ГруппаЗаголовкаСвойств.Видимость             = Ложь;
	
	Элементы.СтрокаПоиска.Доступность  = Ложь;

	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьЗаполненностиДереваОтборов(Элементы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	// Можно создавать и привязывать только номенклатуру со статусом не загружена или загружена частично.
	// Доступность кнопки для режима 3 оставляется для возможности уведомления пользователя.
	ЕстьВозможностьЗагрузкиИПривязки = 
		ТекущиеДанные <> Неопределено И ТекущиеДанные.Загружена <> 1;
	
	Элементы.СписокСоздатьНоменклатуру.Доступность = ЕстьВозможностьЗагрузкиИПривязки;
	Элементы.СписокОткрытьКарточку.Доступность     = ТекущиеДанные <> Неопределено;
	
	Если ЭтоПривязкаНоменклатуры Тогда
		
		// В режиме привязки действует правила как и при загрузке - нельзя выбирать загруженные.
		
		Элементы.СписокВыбратьНоменклатуру.Доступность = ЕстьВозможностьЗагрузкиИПривязки;
		
	ИначеЕсли ЗапрещатьВыборЗагруженных Тогда
		
		// В режиме запрета загруженных доступна возможность выбора только строк без флагов.
		
		Элементы.СписокВыбратьНоменклатуру.Доступность = ТекущиеДанные <> Неопределено И ТекущиеДанные.Загружена = 0;
		
	Иначе
		Элементы.СписокВыбратьНоменклатуру.Доступность = ТекущиеДанные <> Неопределено;
	КонецЕсли;
	
	Если НЕ ПравоИзмененияДанных Тогда
		Элементы.СписокСоздатьНоменклатуру.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПослеОткрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		// Если интернет поддержка подключена производится загрузка данных.
		ИнтернетПоддержкаПодключена = Истина;
		ОперацияЗагрузкаКатегорий = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКорневыеКатегорииВФоне(
			УникальныйИдентификатор, Неопределено, Неопределено);
		Если ОперацияЗагрузкаКатегорий <> Неопределено
			ИЛИ РежимВыбораНоменклатуры Тогда
			
			ПолучитьДанныеСервиса(ТекущаяКатегория);
			ПолучитьНоменклатуру(ТекущаяКатегория);
			
			Возврат;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить корневой каталог.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = Ложь;
	Элементы.ДекорацияЗагрузкаКатегорийИзОтборов.Видимость  = Ложь;
	Элементы.ДекорацияКатегорииЗаголовок.Заголовок = НСтр("ru = 'Категории не загружены'");
	
	Если НЕ Элементы.СтрокаПоиска.Доступность Тогда
		Элементы.СтрокаПоиска.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки()
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекущегоРодителяНаСервере()
	
	Если Элементы.Список.ТекущийРодитель = Неопределено Тогда
		Элементы.Список.ТекущийРодитель = Элементы.Список.ТекущаяСтрока;
	Иначе
		Элементы.Список.ТекущийРодитель = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

#Область СтроковыеКонстанты

&НаСервере
Функция УсловиеИспользованияСервиса(РежимВыбора)
	
	МассивПодстрок = Новый Массив;
	
	МассивПодстрок.Добавить(НСтр("ru = 'Нажатие'") + " """);
	
	Если РежимВыбора Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'Выбрать'"));
	Иначе
		МассивПодстрок.Добавить(НСтр("ru = 'Загрузить номенклатуру'"));
	КонецЕсли;
	
	МассивПодстрок.Добавить(""" " + НСтр("ru = 'означает согласие с'") + " ");
	МассивПодстрок.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'Условиями использования сервиса'"),,,,
		"https://catalog-api.1c.ru/agreement"));
		
	Возврат МассивПодстрок;
		
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТехническойСтроки()
	
	Возврат "РаботаСНоменклатурой_ТехническаяСтрока";
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакЗагрузки()
	
	Если Элементы.Список.ТекущийРодитель <> Неопределено Тогда
		ОбновитьПризнакЗагрузкиКоллекции(
			Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель).ПолучитьЭлементы(), Истина);
	КонецЕсли;
		
	ОбновитьПризнакЗагрузкиКоллекции(Список.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакЗагрузкиКоллекции(ДанныеДляЗаполнения, ЭтоДанныеХарактеристик = Ложь)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИспользуемыйИдентификатор",     Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторХарактеристики",   Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Наименование",                  Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПредставлениеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КоличествоХарактеристик",       Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Характеристики",                Новый ОписаниеТипов("Массив"));
		
	Для Каждого ТекущаяКолонка Из ДанныеДляЗаполнения Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		НоваяСтрока.Идентификатор                 = ТекущаяКолонка.ИдентификаторНоменклатуры;
		НоваяСтрока.Наименование                  = ТекущаяКолонка.Наименование;
		НоваяСтрока.ИспользуемыйИдентификатор     = НоваяСтрока.Идентификатор;
		НоваяСтрока.ПредставлениеЕдиницыИзмерения = ТекущаяКолонка.ПредставлениеЕдиницыИзмерения;
		НоваяСтрока.КоличествоХарактеристик       = ТекущаяКолонка.КоличествоХарактеристик;
		НоваяСтрока.ИдентификаторХарактеристики   = ТекущаяКолонка.ИдентификаторХарактеристики;
		
	КонецЦикла;
	
	Если ЭтоДанныеХарактеристик Тогда
		РаботаСНоменклатурой.ЗаполнитьСписокНоменклатуры(ТаблицаДанных, "Линейный");
	Иначе
		РаботаСНоменклатурой.ЗаполнитьСписокНоменклатуры(ТаблицаДанных, РежимПросмотраСписка);
	КонецЕсли;
		
	Для Каждого ЭлементКоллекции Из ДанныеДляЗаполнения Цикл
		
		Если РежимПросмотраСписка = "Линейный" ИЛИ ЭтоДанныеХарактеристик Тогда
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Идентификатор, ИдентификаторХарактеристики", 
				ЭлементКоллекции.ИдентификаторНоменклатуры, ЭлементКоллекции.ИдентификаторХарактеристики));
		Иначе
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Идентификатор", ЭлементКоллекции.ИдентификаторНоменклатуры));
		КонецЕсли;
			
		Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
			ЭлементКоллекции.Загружена = СтрокаНоменклатуры.Загружена;
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСХарактеристиками

&НаКлиенте
Процедура ПолучитьХарактеристики(ТекущиеДанные)
	
	ИдентификаторТекущейНоменклатуры = ТекущиеДанные.ИдентификаторНоменклатуры;
	ТекущаяСтрока                    = Элементы.Список.ТекущийРодитель;
		
	Если НЕ ЗначениеЗаполнено(ИдентификаторТекущейНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаДанных = Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель);
	СтрокаДанных.ПолучитьЭлементы().Очистить();
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьХарактеристикиЗавершение", ЭтотОбъект,
		Новый Структура("ТекущаяСтрока, ИдентификаторНоменклатуры", 
			ТекущаяСтрока, 
			ИдентификаторТекущейНоменклатуры));
			
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
	
	ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыМетода);
	
	ПараметрыМетода.ИдентификаторНоменклатуры = ИдентификаторТекущейНоменклатуры;
	ПараметрыМетода.НаборПолей                = "Минимальный";
	ПараметрыМетода.ЗаполнитьПризнакЗагрузки  = Истина;
	ПараметрыМетода.НомерСтраницыДанных       = НомерСтраницыДанныхХарактеристик;
			
	РаботаСНоменклатуройКлиент.ПолучитьДанныеХарактеристикСервиса(
		Оповещение,
		ПараметрыМетода,
		ЭтотОбъект,
		ИдентификаторЗаданияРаботыСНоменклатурой);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьХарактеристикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВывестиХарактеристики(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиХарактеристики(Результат, ДополнительныеПараметры)
	
	ДанныеХарактеристик = Новый Массив;
	
	ЗаполнитьДанныеХарактеристик(Результат.АдресРезультата, ДанныеХарактеристик);
	
	ТекущаяСтрока = Список.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	
	ЭлементыСтроки.Очистить();
	
	Для Каждого ТекущаяХарактеристика Из ДанныеХарактеристик Цикл
		
		СтрокаХарактеристики = ЭлементыСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаХарактеристики, ТекущаяСтрока);
		
		СтрокаХарактеристики.ЭтоХарактеристика           = Истина;
		СтрокаХарактеристики.ИдентификаторХарактеристики = ТекущаяХарактеристика.Идентификатор;
		СтрокаХарактеристики.НаименованиеХарактеристики  = ТекущаяХарактеристика.Наименование;
		СтрокаХарактеристики.Загружена                   = ТекущаяХарактеристика.Загружена;
		СтрокаХарактеристики.Характеристика              = ТекущаяХарактеристика.Характеристика;
		СтрокаХарактеристики.НаименованиеНоменклатуры    = ТекущаяСтрока.Наименование;
		
		СтрокаХарактеристики.Наименование =
			СтрШаблон("%1, %2", СтрокаХарактеристики.Наименование, СтрокаХарактеристики.НаименованиеХарактеристики);
		
		Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = СтрокаХарактеристики.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеХарактеристик(АдресРезультата, ДанныеХарактеристик)
			
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеХарактеристик = ОбщегоНазначения.ТаблицаЗначенийВМассив(
		ДанныеСервиса.Скопировать(, "Идентификатор, Наименование, Характеристика, Загружена"));
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыПоиска)
	
	МассивПроизводителей                 = Новый Массив;
	ДополнительныеРеквизиты              = Новый Массив;
	ДополнительныеРеквизитыХарактеристик = Новый Массив;
	
	СтрокиОтборов = ДеревоОтборов.ПолучитьЭлементы();
	БыстрыеОтборы.Очистить();
	
	Для Каждого ЭлементОтбора Из СтрокиОтборов Цикл
		
		Если НЕ ЭлементОтбора.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураАтрибутов = Неопределено;
		РаботаСНоменклатуройСлужебныйКлиент.ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(ЭлементОтбора, БыстрыеОтборы,
			СтруктураАтрибутов, МассивПроизводителей);
						
		Если СтруктураАтрибутов <> Неопределено Тогда
			Если ЭлементОтбора.ЭтоДопРеквизит Тогда
				ДополнительныеРеквизитыХарактеристик.Добавить(СтруктураАтрибутов);
			Иначе
				ДополнительныеРеквизиты.Добавить(СтруктураАтрибутов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеРеквизиты.Количество() Тогда
		ПараметрыПоиска.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	Если ДополнительныеРеквизитыХарактеристик.Количество() Тогда
		ПараметрыПоиска.Вставить("РеквизитыХарактеристик", ДополнительныеРеквизитыХарактеристик);
	КонецЕсли;
	
	Если МассивПроизводителей.Количество() Тогда
		ПараметрыПоиска.Вставить("ИдентификаторыПроизводителей", МассивПроизводителей);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСКатегориями

&НаКлиенте
Процедура ПолучитьДанныеСервиса(ИдентификаторКатегории = Неопределено, ВосстановитьДеревоКатегорий = Ложь, НайтиПутьККатегории = Ложь)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ПолучитьДанныеСервиса",
		Истина);
	
	ТекущаяКатегория          = ИдентификаторКатегории;
	ТекущаяВетка              = Неопределено;
	ТребуетсяЗагрузка         = Истина;
	ПолучитьДанныеИзКэша      = Ложь;
	ДлительнаяОперация        = Неопределено;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(Категории, ИдентификаторКатегории, ТекущаяВетка, ТребуетсяЗагрузка);
	
	Если НайтиПутьККатегории Тогда
		Если ТекущаяВетка <> Неопределено Тогда
			СпозиционироватьНаСтрокеКатегории(ТекущаяВетка);
			Возврат;
		Иначе
			ВосстановитьДеревоКатегорий  = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяЗагрузка ИЛИ ВосстановитьДеревоКатегорий Тогда
		ДлительнаяОперация = ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, НайтиПутьККатегории, ПолучитьДанныеИзКэша, ВосстановитьДеревоКатегорий);
	КонецЕсли;
	
	Если ДлительнаяОперация <> Неопределено Тогда
				
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ИдентификаторКатегории",      ИдентификаторКатегории);
		ПараметрыЗавершения.Вставить("ИдентификаторЗадания",        ИдентификаторЗаданияОбработкиРубрикатора);
		
		Если НЕ ПустаяСтрока(СтрокаПоискаКатегорий) Тогда
			ПараметрыЗавершения.Вставить("СтрокаПоискаКатегорий",   СтрокаПоискаКатегорий);
		КонецЕсли;
		
		Если ВосстановитьДеревоКатегорий Тогда
			ПараметрыЗавершения.Вставить("ВосстановитьДеревоКатегорий", Истина);
		КонецЕсли;
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		
		ПолучитьДанныеСервисаЗавершение = Новый ОписаниеОповещения("ПолучитьДанныеСервисаЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);
		
		РаботаСНоменклатуройСлужебныйКлиент.НачатьОжиданиеПолученияДанныхСервиса(ПолучитьДанныеСервисаЗавершение,
			ДлительнаяОперация, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
				Элементы.ДекорацияДлительнаяЗагрузкаКатегорий);
	Иначе
		ЗаполнитьЗаголовокФормы();
	КонецЕсли;
			
	Если ПолучитьДанныеИзКэша Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
		ДополнительныеПараметры.Вставить("ПолучитьДанныеИзКэша",   Истина);
		
		КоличествоЗаданий = КоличествоЗаданий + 1;
		РаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
			Элементы, КоличествоЗаданий);
		
		ПолучитьДанныеСервисаЗавершение(Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		РаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
			Элементы, КоличествоЗаданий);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОперациюДляЗапросаВСервисе(ИдентификаторКатегории, Знач НайтиПутьККатегории, ПолучитьДанныеИзКэша, ВосстановитьДеревоКатегорий)
	
	ДлительнаяОперация    = Неопределено;
	КэшКатегорий          = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	ЕстьКорневыеКатегории = Категории.ПолучитьЭлементы().Количество() > 0;
	
	Если НЕ ЕстьКорневыеКатегории И ИдентификаторКатегории = Неопределено И НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий)
		И НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Если РаботаСНоменклатуройСлужебныйКлиентСервер.ЕстьКорневыеКатегорииВКэше(КэшКатегорий) Тогда
			РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьДеревоИзКэшаКатегорий(КэшКатегорий, Категории,
				"", СписокРазвернутыхКатегорий);
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
			Возврат ОперацияЗагрузкаКатегорий;
		Иначе
			ДлительнаяОперация = ОперацияЗагрузкаКатегорий;
		КонецЕсли;
		
	ИначеЕсли РежимВыбораНоменклатуры И НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий) И ИдентификаторКатегории = Неопределено Тогда
		
		ИдентификаторНоменклатурыЗаполнен = ЗначениеЗаполнено(ИдентификаторНоменклатуры);
		
		Если ЗначениеЗаполнено(КэшКатегорий) И ИдентификаторНоменклатурыЗаполнен Тогда
			РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьДеревоИзКэшаКатегорий(КэшКатегорий, Категории,
				"", СписокРазвернутыхКатегорий);
		КонецЕсли;
		
		ЗапрашиватьНоменклатуру = Ложь;
		Если Категории.ПолучитьЭлементы().Количество() = 0 ИЛИ НЕ ИдентификаторНоменклатурыЗаполнен Тогда
			
			НоменклатураИОтборы = Новый Структура;
			НоменклатураИОтборы.Вставить("ПараметрыПоиска", СформироватьПараметрыПоиска(Ложь));
			
			Если ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
				НоменклатураИОтборы.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
			КонецЕсли;
			
			ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьДочерниеКатегорииВФоне(
				ИдентификаторКатегории, 2, УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора,
					НоменклатураИОтборы);
		Иначе
			
			// Кэш категорий заполнен и передан идентификатор номенклатуры.
			Если ИдентификаторНоменклатурыЗаполнен Тогда
				ИдентификаторКатегории = ПолучитьДанныеНоменклатурыСервиса(ИдентификаторНоменклатуры);
			КонецЕсли;

			Если ИдентификаторКатегории <> Неопределено Тогда
				ТекущаяВетка = Неопределено;
				РаботаСНоменклатуройСлужебныйКлиентСервер.ПодготовитьТекущуюВеткуКатегории(
					Категории, ИдентификаторКатегории, ТекущаяВетка, , Истина);
				Если ТекущаяВетка <> Неопределено Тогда
					
					СпозиционироватьНаСтрокеКатегории(ТекущаяВетка);
					
					Если НЕ Элементы.СтрокаПоиска.Доступность Тогда
						Элементы.СтрокаПоиска.Доступность = Истина;
					КонецЕсли;
					
					ЗапрашиватьНоменклатуру = Истина;
					ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиПродолжение", 0.5, Истина);
				Иначе
					ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуВФоне(
						ИдентификаторКатегории, ДополнительныеПараметрыЗапросаНоменклатуры(Истина), УникальныйИдентификатор,
						ИдентификаторЗаданияОбработкиРубрикатора);
						
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьДеревоКатегорий = Истина;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
			СтрокаПоискаКатегорий = "";
			Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
		
		КатегорииВосстановлены = РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьКатегорииИзКэшаИНайтиТекущуюВетку(КэшКатегорий,
			ИдентификаторКатегории, Категории, СписокРазвернутыхКатегорий, РазвернутыеСтрокиИндекс,
				Элементы, Элементы.ПоказатьСкрытьКатегории.Пометка);

		Если КатегорииВосстановлены Тогда
			ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ПредставлениеКатегории = Элементы.Категории.ТекущиеДанные.Наименование;
			КонецЕсли;
			Если НайтиПутьККатегории Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиПродолжение", 0.5, Истина);
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;

		Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
			ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориямиВФоне(
				ИдентификаторКатегории, ДополнительныеПараметрыЗапросаНоменклатуры(), УникальныйИдентификатор,
					ИдентификаторЗаданияОбработкиРубрикатора);
		Иначе
			ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьКатегорииНаПутиКЭлементуВФоне(
				ИдентификаторКатегории, ДополнительныеПараметрыЗапросаНоменклатуры(Истина), УникальныйИдентификатор,
					ИдентификаторЗаданияОбработкиРубрикатора);
					
			Если НЕ НайтиПутьККатегории
				И Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
				ТекущаяКатегория = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ЗапрашиватьНоменклатуру          = Ложь;
		КоличествоЗаданийНаПутиКЭлементу = КоличествоЗаданийНаПутиКЭлементу + 1;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаКатегорий) И ИдентификаторКатегории = Неопределено Тогда
		
		ДлительнаяОперация = РаботаСНоменклатуройСлужебныйКлиент.ПоискКатегорийПоСтроке(СтрокаПоискаКатегорий,
			УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора);
		
	Иначе
		
		Если РаботаСНоменклатуройСлужебныйКлиент.ЗагрузитьДанныеДочернихИзКэша(ИдентификаторКатегории, КэшКатегорий) Тогда
			ПолучитьДанныеИзКэша = Истина;
			ТекущаяКатегория = Неопределено;
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыПоиска = ?(ИдентификаторКатегории = Неопределено И НЕ ЗначениеЗаполнено(СтрокаПоискаКатегорий)
			И НЕ ЗначениеЗаполнено(СтрокаПоиска), ИдентификаторКатегории, СформироватьПараметрыПоиска(Ложь));
		
		ПолучитьОтборы = ИдентификаторКатегории <> Неопределено;
		
		НоменклатураИОтборы = Новый Структура;
		НоменклатураИОтборы.Вставить("ПараметрыПоиска", ПараметрыПоиска);
		НоменклатураИОтборы.Вставить("ПолучитьОтборы",  ПолучитьОтборы);
		
		ДлительнаяОперация = РаботаСНоменклатуройСлужебныйВызовСервера.ПолучитьДочерниеКатегорииВФоне(
			ИдентификаторКатегории, 2, УникальныйИдентификатор, ИдентификаторЗаданияОбработкиРубрикатора,
				НоменклатураИОтборы);
				
		ЗапрашиватьНоменклатуру = Ложь;
		КоличествоЗаданийНаПутиКЭлементу = КоличествоЗаданийНаПутиКЭлементу + 1;
	КонецЕсли;
	
	Возврат ДлительнаяОперация;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатурыСервиса(ИдентификаторНоменклатуры)
	
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.ДанныеНоменклатурыСервиса(ИдентификаторНоменклатуры);

	ИдентификаторКатегории = Неопределено;
	Если ЗначениеЗаполнено(ДанныеПоНоменклатуре)
		И ДанныеПоНоменклатуре.Количество() Тогда
		
		ДанныеПоНоменклатуре[0].Категория.Свойство("Идентификатор", ИдентификаторКатегории);
		
	КонецЕсли;

	Возврат ИдентификаторКатегории;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Элементы.СтрокаПоиска.Доступность Тогда
		Элементы.СтрокаПоиска.Доступность = Истина;
	КонецЕсли;
	
	ПолучитьДанныеИзКэша = ДополнительныеПараметры.Свойство("ПолучитьДанныеИзКэша");
	
	Если НЕ ПолучитьДанныеИзКэша Тогда
		
		Если Результат.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если ИдентификаторЗаданияОбработкиРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
			РаботаСНоменклатуройСлужебныйКлиент.НайтиИСвернутьОткрытуюНеЗагруженнуюКатегорию(Категории,
				ДополнительныеПараметры.ИдентификаторКатегории, Элементы, КоличествоЗаданий);
			КоличествоЗаданийНаПутиКЭлементу = Макс(КоличествоЗаданийНаПутиКЭлементу - 1, 0);
			Возврат;
		КонецЕсли;
		
		ИдентификаторЗаданияОбработкиРубрикатора = Неопределено;
		
	КонецЕсли;

	СтруктураПоискаКатегорий                 = Новый Структура;
	ЭтоПоискКатегорий                        = ДополнительныеПараметры.Свойство("СтрокаПоискаКатегорий");
	ВосстановитьДеревоКатегорий              = ДополнительныеПараметры.Свойство("ВосстановитьДеревоКатегорий");
	МассивИдентификаторовРодителей           = Новый Массив();
	ИдентификаторКатегории                   = Неопределено;
	КэшКатегорий                             = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	
	Если НЕ ПолучитьДанныеИзКэша Тогда
		
		Если НЕ (РежимВыбораНоменклатуры И КоличествоЗаданийНаПутиКЭлементу > 0) Тогда
			ДополнительныеПараметры.Вставить("ЗагружатьНоменклатуру",          Истина);
			ЗапрашиватьНоменклатуру = Ложь;
		КонецЕсли;
		
		ОбработатьДанныеСервиса(Результат.АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий,
									ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
									
		МассивПеречняНоменклатуры = Неопределено;
		ДополнительныеПараметры.Свойство("МассивПеречняНоменклатуры", МассивПеречняНоменклатуры);
		ЗаполнитьДеревоСпискаНоменклатуры(МассивПеречняНоменклатуры);
		
	КонецЕсли;

	ДополнительныеПараметры.Свойство("ИдентификаторКатегории", ИдентификаторКатегории);
	
	ЗаполнитьДеревоКатегорийИзКэша(ЭтоПоискКатегорий, ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, ВосстановитьДеревоКатегорий);
			
	Если ЗначениеЗаполнено(КэшКатегорий) И НЕ ПолучитьДанныеИзКэша Тогда
		РаботаСНоменклатуройСлужебныйКлиент.СохранитьКэшКатегорий(КэшКатегорий);
	КонецЕсли;
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	Если НЕ ЗапрашиватьНоменклатуру Тогда
		КоличествоЗаданийНаПутиКЭлементу = Макс(КоличествоЗаданийНаПутиКЭлементу - 1, 0);
	КонецЕсли;
	
	Если НЕ Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		
		ЗаполнитьОтборыДополнительнымиХарактеристиками();
		
	ИначеЕсли ВосстановитьДеревоКатегорий
		И ТекущаяКатегория = Неопределено Тогда
		
		ТекущаяКатегория = ИдентификаторКатегории;
		КоличествоЗаданийНаПутиКЭлементу = Макс(КоличествоЗаданийНаПутиКЭлементу - 1, 0);
		Если НЕ РежимВыбораНоменклатуры Тогда
			ЗапрашиватьНоменклатуру = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Категории.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено
		И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		ТекущиеДанные = Категории.НайтиПоИдентификатору(ТекущаяСтрока);
	Иначе
		ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено
		И ПредставлениеКатегории <> ТекущиеДанные.Наименование Тогда
		ПредставлениеКатегории = ТекущиеДанные.Наименование;
	КонецЕсли;

	ЗаполнитьЗаголовокФормы();
	
	РаботаСНоменклатуройСлужебныйКлиент.УстановитьВидимостьДоступностьЭлементовКатегорийПриДлительнойОперации(
		Элементы, КоличествоЗаданий);
	УстановитьВидимостьДоступность();
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьЗаполненностиДереваОтборов(Элементы,
		ДеревоОтборов.ПолучитьЭлементы().Количество() > 0);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьЗаголовокФормы()
	
	// Заголовок формы.
	Если ЗначениеЗаполнено(ТекущаяКатегория)
		И ЗначениеЗаполнено(ПредставлениеКатегории) Тогда
		ТекстНоменклатуры = ?(РежимВыбораНоменклатуры, НСтр("ru = 'Выбор 1С:Номенклатуры'"),  НСтр("ru = '1С:Номенклатура'"));
		ТекстЗаголовка = СтрШаблон("%2 - %1", ПредставлениеКатегории, ТекстНоменклатуры);
	Иначе
		ТекстЗаголовка = ?(РежимВыбораНоменклатуры, НСтр("ru = 'Выбор номенклатуры из сервиса 1С:Номенклатура'"), 
			НСтр("ru = 'Добавление номенклатуры из сервиса 1С:Номенклатура'"));
	КонецЕсли;
	
	Если Заголовок <> ТекстЗаголовка Тогда
		Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры
	

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСервиса(АдресРезультата, ДополнительныеПараметры, КэшКатегорий, СтруктураПоискаКатегорий = Неопределено,
				ЭтоПоискКатегорий = Ложь, МассивИдентификаторовРодителей = Неопределено)
				
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройСлужебный.ОбработатьРезультатДанныхСервисаКатегорий(ДанныеСервиса, ДополнительныеПараметры, КэшКатегорий,
		СтруктураПоискаКатегорий, ЭтоПоискКатегорий, МассивИдентификаторовРодителей);
		
	Если ДополнительныеПараметры.Свойство("ЗагружатьНоменклатуру") Тогда
			
		// Обработка данных номенклатуры.
		ПереченьНоменклатуры = Неопределено;
		ДанныеСервиса.Свойство("ПереченьНоменклатуры", ПереченьНоменклатуры);
		
		МассивПеречняНоменклатуры = ОбработатьДанныеСервисаПеречняНоменклатуры(ПереченьНоменклатуры);
		Если МассивПеречняНоменклатуры <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("МассивПеречняНоменклатуры", МассивПеречняНоменклатуры);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоКатегорийИзКэша(ЭтоПоискКатегорий, Знач ИдентификаторКатегории, СтруктураПоискаКатегорий,
			МассивИдентификаторовРодителей, КэшКатегорий, ВосстановитьДеревоКатегорий)
					
	НайтиИУстановитьВеткуКатегории = Ложь;
	
	Если ЭтоПоискКатегорий Тогда // Поиск по строке.
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыПоискаРубрики(СтруктураПоискаКатегорий, Категории);
		
		Элементы.Категории.Отображение  = ОтображениеТаблицы.Список;
		Если Категории.ПолучитьЭлементы().Количество() Тогда
			ПерваяСтрокаКатегорииПоиска      = Категории.ПолучитьЭлементы()[0];
			Элементы.Категории.ТекущаяСтрока = ПерваяСтрокаКатегорииПоиска.ПолучитьИдентификатор();
			ПредставлениеКатегории           = ПерваяСтрокаКатегорииПоиска.Наименование;
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
		Иначе
			ПредставлениеКатегории = "";
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Ложь);
			ОчиститьБыстрыеОтборыИДерево();
		КонецЕсли;
		
	ИначеЕсли ВосстановитьДеревоКатегорий Тогда
		
		Если ИдентификаторКатегории = Неопределено Тогда
			ИдентификаторКатегории = "";
		КонецЕсли;
		
		Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
			РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		КонецЕсли;
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории, МассивИдентификаторовРодителей);
		
		РаботаСНоменклатуройСлужебныйКлиент.ВосстановитьРазвернутыеСтроки(Элементы.Категории, РазвернутыеСтрокиИндекс, Категории,
			СписокРазвернутыхКатегорий, Элементы.ПоказатьСкрытьКатегории.Пометка, МассивИдентификаторовРодителей);
			
		РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьОбластиКатегорий(Элементы, Истина);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		
	ИначеЕсли ИдентификаторКатегории = Неопределено Тогда // Начальная загрузка разделов.
		
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРазделыРубрики(КэшКатегорий, Категории);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		ИдентификаторКатегории         = "";
		
	Иначе // Загрузка подчиненных элементов классификатора (потомков).
		
		МассивИдентификаторовРодителей = Новый Массив;
		МассивИдентификаторовРодителей.Добавить(ИдентификаторКатегории);
		РаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьРубрикаторДоПозиционирования(КэшКатегорий, Категории, МассивИдентификаторовРодителей);
		
		НайтиИУстановитьВеткуКатегории = Истина;
		
	КонецЕсли;
		
	Если НайтиИУстановитьВеткуКатегории Тогда
		РаботаСНоменклатуройСлужебныйКлиент.НайтиИУстановитьВеткуИдентификатораВДеревеКатегорий(ИдентификаторКатегории,
			Элементы.Категории, Категории, Окно <> Неопределено, Элементы.ПоказатьСкрытьКатегории.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗначенияДополнительныхРеквизитовПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторСтрокиДерева = ДополнительныеПараметры.ИдентификаторСтрокиДерева;
	Если ИдентификаторСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройСлужебныйКлиент.ОбработатьЗначенияДополнительныхРеквизитов(Результат.АдресРезультата, ДополнительныеПараметры, ДеревоОтборов,
		Элементы.ДекорацияДлительнаяЗагрузкаСвойств);
	
	ЗавершитьВыводДополнительныхРеквизитовПоСписку(ДополнительныеПараметры.ПолучитьДанныеСервисаПоОтбору,
		ИдентификаторСтрокиДерева);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПриЗагрузкиСвойств(Видимость)
	
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Видимость;
	Элементы.СтрокаПоискаКатегорий.Доступность            = НЕ Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьНаСтрокеКатегории(ТекущаяВетка)
	
	Если Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		ТекущаяКатегория = Неопределено;
	КонецЕсли;
	ТекущаяВетка.ВОбработке = Ложь;
	Элементы.Категории.ТекущаяСтрока = ТекущаяВетка.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыводДополнительныхРеквизитовПоСписку(ПолучитьДанныеСервисаПоОтбору, ИдентификаторСтрокиДерева)
	
	Если ПолучитьДанныеСервисаПоОтбору Тогда
		// Вызывается из отбора в дереве, когда не все дочерние подгружены по отбору.
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьНоменклатуру", 0.5, Истина);
	ИначеЕсли Окно <> Неопределено Тогда
		ДеревоОтборовФормы = Элементы.ДеревоОтборов;
		ЭлементРазвернут     = ДеревоОтборовФормы.Развернут(ИдентификаторСтрокиДерева);
		Если ЭлементРазвернут <> Неопределено И НЕ ЭлементРазвернут Тогда
			ДеревоОтборовФормы.Развернуть(ИдентификаторСтрокиДерева);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиПродолжение()
	
	Если КоличествоЗаданийНаПутиКЭлементу = 0 И ЗапрашиватьНоменклатуру Тогда
		ЗаполнитьЗаголовокФормы();
		ПолучитьНоменклатуру(ТекущаяКатегория);
	КонецЕсли;
	
	ЗаполнитьОтборыДополнительнымиХарактеристиками();
	
	КоличествоЗаданийНаПутиКЭлементу = Макс(КоличествоЗаданийНаПутиКЭлементу - 1, 0);
	ЗапрашиватьНоменклатуру = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборыДополнительнымиХарактеристиками()
	
	ТекущиеДанные = Категории.НайтиПоИдентификатору(Элементы.Категории.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЛистоваяКатегория Тогда
		
		КэшКатегорий = РаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
		
		СвойстваКэшированы = Ложь;
		Если НЕ ТекущиеДанные.СвойстваКэшированы Тогда
			СтрокаКатегорииИзКэша = Неопределено;
			Если КэшКатегорий.Свойство("_" + ТекущиеДанные.Идентификатор, СтрокаКатегорииИзКэша) Тогда
				СвойстваКэшированы = СтрокаКатегорииИзКэша.СвойстваКэшированы;
			КонецЕсли;
		Иначе
			СвойстваКэшированы = Истина;
		КонецЕсли;
		
		Если СвойстваКэшированы Тогда
			РаботаСНоменклатуройСлужебныйКлиент.СформироватьИзКэшаОтборыПоДополнительнымРеквизитам(ДеревоОтборов, КэшКатегорий, ТекущаяКатегория, ТекущиеДанные);
			РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьЗаполненностиДереваОтборов(Элементы,
				ДеревоОтборов.ПолучитьЭлементы().Количество() > 0);
		Иначе
			
			Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Истина;

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СтрокаДереваКатегории", ТекущиеДанные);
			
			РаботаСНоменклатуройСлужебныйКлиент.ПолучитьДополнительныеРеквизитыКатегории(ТекущаяКатегория, ЭтотОбъект, ДополнительныеПараметры,
				ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы.ДекорацияДлительнаяЗагрузкаСвойств, Элементы.СтрокаПоискаКатегорий);
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОбработкиФильтровРубрикатора) Тогда
			РаботаСНоменклатуройСлужебныйВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбработкиФильтровРубрикатора);
			УстановитьВидимостьПриЗагрузкиСвойств(Ложь);
		КонецЕсли;
		ДеревоОтборов.ПолучитьЭлементы().Очистить();
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьЗаполненностиДереваОтборов(Элементы, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвойстваЛистовойКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
	РаботаСНоменклатуройСлужебныйКлиент.ОбработатьСвойстваЛистовойКатегории(Результат.АдресРезультата, ДеревоОтборов, ДополнительныеПараметры,
		Элементы.ДекорацияДлительнаяЗагрузкаСвойств, Элементы.СтрокаПоискаКатегорий);
		
	РаботаСНоменклатуройСлужебныйКлиентСервер.УстановитьВидимостьЗаполненностиДереваОтборов(Элементы,
		ДеревоОтборов.ПолучитьЭлементы().Количество() > 0);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатурами

&НаКлиенте
Процедура ЗаполнитьДеревоСпискаНоменклатуры(МассивПеречняНоменклатуры, ЭтоЗапросПорцииДанных = Ложь)
	
	Элементы.НайтиКарточки.Картинка = Новый Картинка;
	
	Если МассивПеречняНоменклатуры <> Неопределено Тогда
		
		ЭлементыСписка = Список.ПолучитьЭлементы();
		
		Если НЕ ЭтоЗапросПорцииДанных Тогда
			ЭлементыСписка.Очистить();
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из МассивПеречняНоменклатуры Цикл
			
			НоваяСтрока = ЭлементыСписка.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			Если ЗначениеЗаполнено(ИдентификаторНоменклатуры)
				И ИдентификаторНоменклатуры = ЭлементКоллекции.ИдентификаторНоменклатуры Тогда
				Элементы.Список.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			Если РежимПросмотраСписка = "Группировка"
				И ЭлементКоллекции.КоличествоХарактеристик > 0 Тогда
				
				// Отображение подчиненных характеристик в иерархическом режиме просмотра.
				НоваяСтрока.КоличествоХарактеристикПредставление = СтрШаблон(НСтр("ru = 'Характеристик: %1'"),
					ЭлементКоллекции.КоличествоХарактеристик);
				
				ТехническаяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ТехническаяСтрока.Наименование = ПредставлениеТехническойСтроки();
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПеречняНоменклатуры.Количество() = РазмерПорцииДанныхНоменклатуры Тогда
			
			НоваяСтрока = ЭлементыСписка.Добавить();
			НоваяСтрока.ЭтоСтрокаЗапросаДанных = Истина;
			ИдентификаторСтрокиЗагрузкиДанных  = НоваяСтрока.ПолучитьИдентификатор();
			
		КонецЕсли;
			
	Иначе
		Список.ПолучитьЭлементы().Очистить();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьДанныеСервисаПеречняНоменклатуры(ПереченьНоменклатуры)

	Если ПереченьНоменклатуры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПеречняНоменклатуры = Новый Массив;
	
	ЕстьНаименованиеХарактеристики = ПереченьНоменклатуры.Колонки.Найти("НаименованиеХарактеристики") <> Неопределено;
	
	Для Каждого ЭлементКоллекции Из ПереченьНоменклатуры Цикл
		
		СтруктураПеречняНоменклатуры = ЗаполнитьСтруктуруПеречняНоменклатуры();
		ЗаполнитьЗначенияСвойств(СтруктураПеречняНоменклатуры, ЭлементКоллекции);
		
		Если ЕстьНаименованиеХарактеристики
			И ЗначениеЗаполнено(ЭлементКоллекции.НаименованиеХарактеристики) Тогда
			
			ПолноеНаименование = РаботаСНоменклатурой.НаименованиеПоНоменклатуреИХарактеристике(
				ЭлементКоллекции.Наименование, 
				ЭлементКоллекции.НаименованиеХарактеристики);
		Иначе
			ПолноеНаименование = ЭлементКоллекции.Наименование
		КонецЕсли;

		СтруктураПеречняНоменклатуры.ИдентификаторНоменклатуры = ЭлементКоллекции.Идентификатор;
		СтруктураПеречняНоменклатуры.НаименованиеНоменклатуры  = ЭлементКоллекции.Наименование;
		СтруктураПеречняНоменклатуры.Наименование              = ПолноеНаименование;
		
		МассивПеречняНоменклатуры.Добавить(СтруктураПеречняНоменклатуры);
		
	КонецЦикла;

	Возврат МассивПеречняНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСтруктуруПеречняНоменклатуры()
	
	СтруктураПеречняНоменклатуры = Новый Структура;
	СтруктураПеречняНоменклатуры.Вставить("ГиперссылкаЗапросаДанных",      "");
	СтруктураПеречняНоменклатуры.Вставить("Загружена",                     0);
	СтруктураПеречняНоменклатуры.Вставить("ИдентификаторКатегории",        "");
	СтруктураПеречняНоменклатуры.Вставить("ИдентификаторНоменклатуры",     "");
	СтруктураПеречняНоменклатуры.Вставить("ИдентификаторХарактеристики",   "");
	СтруктураПеречняНоменклатуры.Вставить("КоличествоХарактеристик",       0);
	СтруктураПеречняНоменклатуры.Вставить("Наименование",                  "");
	СтруктураПеречняНоменклатуры.Вставить("НаименованиеНоменклатуры",      "");
	СтруктураПеречняНоменклатуры.Вставить("НаименованиеПроизводителя",     "");
	СтруктураПеречняНоменклатуры.Вставить("НаименованиеХарактеристики",    "");
	СтруктураПеречняНоменклатуры.Вставить("ПредставлениеЕдиницыИзмерения", "");
	СтруктураПеречняНоменклатуры.Вставить("Номенклатура",                  Неопределено);
	
	Возврат СтруктураПеречняНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьНоменклатуруИзСписка()
	
	ДанныеНоменклатуры = РаботаСНоменклатуройСлужебныйКлиентСервер.ШаблонДанныхНоменклатуры();
	
	ДанныеНоменклатуры.Вставить("НаименованиеНоменклатуры",    "");
	ДанныеНоменклатуры.Вставить("НаименованиеХарактеристики",  "");
	ДанныеНоменклатуры.Вставить("ИспользуютсяХарактеристики", Ложь);
	
	ПараметрыЗакрытия = ПараметрыЗакрытияФормы();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Закрыть(Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры.ИдентификаторНоменклатуры   = ТекущиеДанные.ИдентификаторНоменклатуры;
	ДанныеНоменклатуры.Номенклатура                = ТекущиеДанные.Номенклатура;
	ДанныеНоменклатуры.НаименованиеНоменклатуры    = ТекущиеДанные.НаименованиеНоменклатуры;
	ДанныеНоменклатуры.ИдентификаторХарактеристики = ТекущиеДанные.ИдентификаторХарактеристики;
	ДанныеНоменклатуры.НаименованиеХарактеристики  = ТекущиеДанные.НаименованиеХарактеристики;
	ДанныеНоменклатуры.ИспользуютсяХарактеристики  = ТекущиеДанные.КоличествоХарактеристик > 0;
	
	Если ТекущиеДанные.Загружена = 0
		И СоздаватьНоменклатуруПриВыборе Тогда
		
		Если ПодтверждатьСозданиеНоменклатуры Тогда
			
			Оповещение = Новый ОписаниеОповещения("ВопросСозданияНоменклатурыПриВыборе", ЭтотОбъект, 
				Новый Структура("ДанныеНоменклатуры", ДанныеНоменклатуры));
			
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранная номенклатура будет загружена. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ЗагрузитьНоменклатуру(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеНоменклатуры), Истина);
		КонецЕсли;
	Иначе
		
		Если ЭтоПривязкаНоменклатуры
			И ТекущиеДанные.Загружена = 3 Тогда
			
			// Если выбрана характеристика, номенклатура которой загружена в режиме БезХарактеристик.
			
			ВыбранныеДанные = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
			
			ЗаполнитьЗначенияСвойств(ВыбранныеДанные, ТекущиеДанные);
			
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.НарушениеРежимаЗагрузкиХарактеристик",
				Новый Структура("Идентификаторы",
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеДанные)), ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
		Если ПокупатьНоменклатуруПриВыборе Тогда
			
			Отказ = Ложь;
			
			Результат = КупитьКарточкиНоменклатуры(ДанныеНоменклатуры.ИдентификаторНоменклатуры, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Если Результат.ЕстьОшибки Тогда
				ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ОшибкаПокупкиНоменклатуры",
					Новый Структура("Ошибка", Результат.ОписаниеОшибки));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСсылкиНаОбъекты(ДанныеНоменклатуры);
		
		Если ВозвращатьРасширенныйНаборПолей Тогда
			ДополнитьДанныеПоНоменклатуре(ДанныеНоменклатуры);
		КонецЕсли;
		
		ПараметрыЗакрытия.ВыбранныеОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеНоменклатуры);
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.ИдентификаторХарактеристики)
			И ИдентификаторНоменклатурыПривязан(ИдентификаторНоменклатуры) Тогда
			
			// Привязка к характеристике.
			
			ПараметрыЗакрытия.ПривязкаХарактеристики = Истина;
		КонецЕсли;
		
		Закрыть(ПараметрыЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗакрытияФормы()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыбранныеОбъекты",       Новый Массив);
	Результат.Вставить("СозданныеОбъекты",       Новый Массив);
	Результат.Вставить("ПривязкаХарактеристики", Ложь);
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура ДополнитьДанныеПоНоменклатуре(ДанныеНоменклатуры)
	
	ДанныеНоменклатуры.Вставить("ИдентификаторКатегории",       "");
	ДанныеНоменклатуры.Вставить("НаименованиеКатегории",        "");
	ДанныеНоменклатуры.Вставить("НаименованиеЕдиницыИзмерения", "");
	ДанныеНоменклатуры.Вставить("КодЕдиницыИзмерения",          "");

	ДанныеНоменклатурыСервиса = РаботаСНоменклатурой.
		ДанныеНоменклатурыСервиса(ДанныеНоменклатуры.ИдентификаторНоменклатуры);

	Если Не ЗначениеЗаполнено(ДанныеНоменклатурыСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры.ИдентификаторКатегории       = ДанныеНоменклатурыСервиса[0].Категория.Идентификатор;
	ДанныеНоменклатуры.НаименованиеКатегории        = ДанныеНоменклатурыСервиса[0].Категория.Наименование;
	ДанныеНоменклатуры.НаименованиеЕдиницыИзмерения = ДанныеНоменклатурыСервиса[0].ЕдиницаИзмерения.Наименование;
	ДанныеНоменклатуры.КодЕдиницыИзмерения          = ДанныеНоменклатурыСервиса[0].ЕдиницаИзмерения.ОКЕИ;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторНоменклатурыПривязан(ИдентификаторНоменклатуры)
	
	Возврат РаботаСНоменклатурой.ИдентификаторНоменклатурыИспользуется(ИдентификаторНоменклатуры);
	
КонецФункции

&НаКлиенте
Процедура ВопросСозданияНоменклатурыПриВыборе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНоменклатуру(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ДанныеНоменклатуры), Истина);
	
КонецПроцедуры

&НаСервере
Функция КупитьКарточкиНоменклатуры(Идентификатор, Отказ)
	
	Возврат РаботаСНоменклатурой.ПокупкаКарточекНоменклатуры(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), Отказ);
		
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ИдентификаторыНоменклатурыИХарактеристик();
	
	ПараметрыФормы = Новый Структура;
	Если Элементы.СписокВыбратьНоменклатуру.Доступность Тогда
		ПараметрыФормы.Вставить("РежимВыбора", РежимВыбораНоменклатуры);
	Иначе 
		ПараметрыФормы.Вставить("ЭтоРежимПросмотра", Истина);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ОткрытьКарточкиНоменклатуры",
		Истина);

	РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиНоменклатуры(Идентификаторы, ЭтотОбъект,
		Новый ОписаниеОповещения("ЗакрытиеФормыКарточкиНоменклатуры", ЭтотОбъект),, ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК И Открыта() Тогда
		ВыбратьНоменклатуруИзСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуру(ИдентификаторКатегории = Неопределено, ЭтоЗапросПорцииДанных = Ложь, СтрокаАктивации = 0)
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		СообщитьПользователюОбОтсутствииПодключенияИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	Если Категории.ПолучитьЭлементы().Количество() = 0
		И ЗначениеЗаполнено(СтрокаПоискаКатегорий) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не выбрана категория.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,
			?(Элементы.ПоказатьСкрытьКатегории.Пометка, "СтрокаПоискаКатегорий", "ПредставлениеКатегории"));
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ПолучитьНоменклатуру",
		Истина);
	
	Если НЕ ЭтоЗапросПорцииДанных Тогда
		НомерСтраницыДанных = 1;
		Список.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",   ИдентификаторЗаданияРаботыСНоменклатурой);
	ПараметрыЗавершения.Вставить("ЭтоЗапросПорцииДанных",  ЭтоЗапросПорцииДанных);
	ПараметрыЗавершения.Вставить("СтрокаАктивации",        СтрокаАктивации);
	
	ПолучитьНоменклатуруЗавершение = Новый ОписаниеОповещения("ПолучитьНоменклатуруЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	ПараметрыПоиска = СформироватьПараметрыПоиска();
	
	Элементы.СтрокаПоискаКатегорий.Доступность = Ложь;
	
	РаботаСНоменклатуройКлиент.ПолучитьПереченьНоменклатуры(ПолучитьНоменклатуруЗавершение, ПараметрыПоиска, ЭтотОбъект,
		ИдентификаторЗаданияРаботыСНоменклатурой, Элементы.НайтиКарточки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
	Если ИдентификаторЗаданияРаботыСНоменклатурой <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияРаботыСНоменклатурой = Неопределено;

	МассивПеречняНоменклатуры = ЗаполнитьТаблицуФормы(Результат.АдресРезультата);
		
	ЭтоЗапросПорцииДанных = ДополнительныеПараметры.ЭтоЗапросПорцииДанных;
		
	ЗаполнитьДеревоСпискаНоменклатуры(МассивПеречняНоменклатуры, ЭтоЗапросПорцииДанных);
	
	Если ЭтоЗапросПорцииДанных И ЗначениеЗаполнено(ДополнительныеПараметры.СтрокаАктивации) Тогда
		Элементы.Список.ТекущаяСтрока = ДополнительныеПараметры.СтрокаАктивации;
	КонецЕсли;
	
	Элементы.СтрокаПоискаКатегорий.Доступность = Истина;
	Если НЕ Элементы.СтрокаПоиска.Доступность Тогда
		Элементы.СтрокаПоиска.Доступность = Истина;
	КонецЕсли;
	Элементы.НайтиКарточки.Картинка  = БиблиотекаКартинок.УправлениеПоиском;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТаблицуФормы(АдресРезультата)
	
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеПоНоменклатуре = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбработатьДанныеСервисаПеречняНоменклатуры(ДанныеПоНоменклатуре.ПереченьНоменклатуры);
	
КонецФункции

&НаКлиенте
Процедура НастроитьФормуПриДлительнойОперации(ЭтоНачалоДлительнойОперации)
	
	// Управление видимостью реализовано через страницы из-за проблем с отображением иерархического списка
	// при не явном серверном вызове.
	
	Если ЭтоНачалоДлительнойОперации Тогда
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна;
	Иначе
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияНеАктивна;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаОбъекты(ДанныеНоменклатуры)
	
	СсылкиНаОбъекты = РаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(ДанныеНоменклатуры);
	
	Если ЗначениеЗаполнено(СсылкиНаОбъекты) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СсылкиНаОбъекты[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ДополнительныеПараметрыЗапросаНоменклатуры(ПолучитьОтборы = Ложь, ВключитьНоменклатуру = Истина)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВключитьНоменклатуру",          ВключитьНоменклатуру);
	Результат.Вставить("РежимОтображенияХарактеристик", РежимПросмотраСписка);
	
	Если ПолучитьОтборы Тогда
		ПараметрыПоиска = СформироватьПараметрыПоиска();
		ПараметрыПоиска.Вставить("ПолучитьОтборы", Истина);
		Результат.Вставить("ПараметрыПоиска", ПараметрыПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьПараметрыПоиска(ОбновлятьЭлементыОтбора = Истина, УстановитьОтборы = Истина)
	
	ПараметрыПоиска = Новый Структура();
	
	ПараметрыПоиска.Вставить("НомерСтраницыДанных",           НомерСтраницыДанных);
	ПараметрыПоиска.Вставить("СтрокаПоиска",                  СтрокаПоиска);
	ПараметрыПоиска.Вставить("РежимОтображенияХарактеристик", РежимПросмотраСписка);
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыПоиска.Вставить("ИдентификаторКатегории",    ТекущаяКатегория);
		ПараметрыПоиска.Вставить("ИскатьВПодчиненных",        Истина);
	КонецЕсли;
	
	// Быстрые отборы.
	Если УстановитьОтборы Тогда
		ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыПоиска);
	КонецЕсли;
	
	Если ОбновлятьЭлементыОтбора Тогда
		
		ИзменитьБыстрыеОтборыНаФорме();
		
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

#КонецОбласти