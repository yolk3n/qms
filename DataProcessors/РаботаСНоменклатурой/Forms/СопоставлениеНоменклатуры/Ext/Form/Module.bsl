
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	УстановитьУсловноеОформление();
		
	Номенклатура = Новый Массив;
	
	Параметры.Свойство("Номенклатура",             Номенклатура);
	Параметры.Свойство("ПодсистемаВладелец",       ПодсистемаВладелец);
	Параметры.Свойство("ОтображатьСопоставленные", ОтображатьСопоставленные);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураДляСопоставления.ЗагрузитьЗначения(Номенклатура);
	КонецЕсли;

	СформироватьСписокФормыСопоставленияНоменклатуры();
	
	СтатистикаСопоставления(ПодсистемаВладелец, Элементы, НоменклатураДляСопоставления.ВыгрузитьЗначения());
	
	НастроитьФормуПриСоздании();
	
	ЗапуститьПоискСоответствийНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НайтиСоответствия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		Оповестить(РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПереключение(Элемент)
	
	РежимОтбора = СтрЗаменить(Элемент.Имя, "Отбор", "");
	УстановитьОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПоказатьВарианты.Пометка Тогда
		ПодключитьОбработчикОжидания("ПоказатьСписокВариантов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.СписокНоменклатура Тогда
		
		// Открытие номенклатуры
		
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли Поле = Элементы.СписокХарактеристика Тогда
		
		// Открытие характеристики
		
		ПоказатьЗначение(, ТекущиеДанные.Характеристика);
		
	ИначеЕсли Поле = Элементы.СписокПодтверждено Тогда
		
		// Изменение флага проверки сопоставления
		
		ИзменитьФлагПроверкиСопоставления(ТекущиеДанные);
		
	ИначеЕсли Поле = Элементы.СписокПредставлениеНоменклатурыСервиса Тогда
		
		// Открытие карточки номенклатуры
		
		ВыбратьНоменклатуруСервиса(ТекущиеДанные, Элемент);

	ИначеЕсли Поле = Элементы.СписокНайти Тогда
		
		// Выбор номенклатуры из сервиса вручную
		
		ОткрытьФормуПоискаНоменклатурыСервиса();
		
	ИначеЕсли Поле = Элементы.ГиперссылкаОчистить Тогда	
		
		// Очистка сопоставления
		
		ОтменитьВыборНаСервере(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВарианты

&НаКлиенте
Процедура ВариантыПоискаПометкаПриИзменении(Элемент)
	
	// Установить в списке.
	ТекущиеДанныеСписка    = Элементы.Список.ТекущиеДанные;
	ТекущиеДанныеВариантов = Элементы.ВариантыПоиска.ТекущиеДанные;
	
	// Изменение режима подтверждения.
	Отбор = Новый Структура("Номенклатура, Характеристика",
		ТекущиеДанныеСписка.Номенклатура, ТекущиеДанныеСписка.Характеристика);
	
	ЗначенияРеквизитов = Новый Структура();
	
	ЗначенияРеквизитов.Вставить("СтатусСопоставления");
	ЗначенияРеквизитов.Вставить("ИдентификаторНоменклатурыСервиса");
	ЗначенияРеквизитов.Вставить("ИдентификаторХарактеристикиСервиса");
	ЗначенияРеквизитов.Вставить("ПредставлениеНоменклатурыСервиса");
	ЗначенияРеквизитов.Вставить("ПредставлениеХарактеристикиСервиса");
	
	Если ТекущиеДанныеВариантов.Пометка Тогда
		
		// Выбор варианта сопоставления.
		
		ИдентификаторыИспользуются = ИдентификаторыИспользуются(
			ТекущиеДанныеСписка.Номенклатура, 
			ТекущиеДанныеСписка.Характеристика,
			ТекущиеДанныеВариантов.ИдентификаторНоменклатурыСервиса, 
			ТекущиеДанныеВариантов.ИдентификаторХарактеристикиСервиса);
			
		СтатусСопоставления = ?(ИдентификаторыИспользуются, СтатусыСопоставления().Выбрано, СтатусыСопоставления().Проверено);
				
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, ТекущиеДанныеВариантов);
		ЗначенияРеквизитов.СтатусСопоставления = СтатусСопоставления;
		
	Иначе
		
		// Отмена выбора сопоставления.
		
		ЗначенияРеквизитов.СтатусСопоставления = СтатусыСопоставления().НеСопоставлено;
		
		Если ТекущиеДанныеСписка.КоличествоСовпадений > 0 
			И Не ЗначениеЗаполнено(ТекущиеДанныеСписка.ИдентификаторНоменклатурыСервиса) Тогда
			
			ЗначенияРеквизитов.ПредставлениеНоменклатурыСервиса
				= СтрШаблон(НСтр("ru = '<Несколько вариантов (%1)>'"), ТекущиеДанныеСписка.КоличествоСовпадений);
		КонецЕсли;
			
	КонецЕсли;
	
	ИзменитьРеквизитыСписка(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор), ЗначенияРеквизитов, Ложь);
	
	// Сбросить другие пометки.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Номенклатура",   ТекущиеДанныеСписка.Номенклатура);
	Отбор.Вставить("Характеристика", ТекущиеДанныеСписка.Характеристика);
	
	ВариантыПоискаТекущейНоменклатуры = ВариантыПоиска.НайтиСтроки(Отбор);
	
	Для каждого ЭлементКоллекции Из ВариантыПоискаТекущейНоменклатуры Цикл
		Если ЭлементКоллекции <> ТекущиеДанныеВариантов И ЭлементКоллекции.Пометка Тогда
			ЭлементКоллекции.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВариантыПоиска.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ЭтоГиперссылка Тогда
		ОткрытьКарточкуНоменклатуры(ТекущиеДанные.ИдентификаторНоменклатурыСервиса, ТекущиеДанные.ИдентификаторХарактеристикиСервиса);
	Иначе
		ОткрытьФормуПоискаНоменклатурыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнятьНоменклатуруПриСопоставленииПриИзменении(Элемент)
	
	Элементы.УстанавливатьАвтоматическийРежимОбновления.Доступность = ЗаполнятьНоменклатуруПриСопоставлении;
	
	Если Не ЗаполнятьНоменклатуруПриСопоставлении Тогда
		УстанавливатьАвтоматическийРежимОбновления = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоискСервиса(Команда)
	
	Элементы.ПоказатьВарианты.Пометка = Не Элементы.ПоказатьВарианты.Пометка;
	Элементы.ГруппаПоиска.Видимость = Элементы.ПоказатьВарианты.Пометка;
	
	Если Элементы.ПоказатьВарианты.Пометка Тогда
		ПодключитьОбработчикОжидания("ПоказатьСписокВариантов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	Если ЕстьСопоставленияДляСохранения(НоменклатураДляСопоставления, ПодсистемаВладелец) Тогда
		СохранитьПодтвержденныеСопоставления();	
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствуют подтвержденные сопоставления'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПоискНоменклатурыСервиса(Команда)
	
	ЗапуститьПоискСоответствийНоменклатуры();
	
	НайтиСоответствия();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	ОчиститьСообщения();
	
	СтрокиБезСопоставленных = ВыделенныеСтрокиБезСопоставленных(Элементы.Список.ВыделенныеСтроки);
	
	Если Не ЗначениеЗаполнено(СтрокиБезСопоставленных) Тогда
		Возврат;
	КонецЕсли;

	ИзменитьРеквизитыСписка(СтрокиБезСопоставленных, 
		Новый Структура("СтатусСопоставления", СтатусыСопоставления().Проверено), 
		Истина);
	
	Элементы.Список.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	ОчиститьСообщения();
	
	СтрокиБезСопоставленных = ВыделенныеСтрокиБезСопоставленных(Элементы.Список.ВыделенныеСтроки);
	
	Если Не ЗначениеЗаполнено(СтрокиБезСопоставленных) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизитыСписка(СтрокиБезСопоставленных, 
		Новый Структура("СтатусСопоставления", СтатусыСопоставления().Выбрано),
		Ложь);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбор(Команда)
		
	ОтменитьВыборНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияПользователю

&НаСервереБезКонтекста
Процедура СообщитьПользователюОНаличииИдентификаторов(НесколькоЭлементов = Истина)
	
	СтрокаСообщения = "";
	
	Если НесколькоЭлементов Тогда
		СтрокаСообщения = НСтр("ru = 'Для некоторых строк не удалось установить признак проверки: выбранная 1С:Номенклатура уже сопоставлена'");
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не удалось установить признак проверки: выбранная 1С:Номенклатура уже сопоставлена'");
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователюОбОтсутствииНоменклатуры(НесколькоЭлементов = Истина)
	
	СтрокаСообщения = "";
	
	Если НесколькоЭлементов Тогда
		СтрокаСообщения = НСтр("ru = 'Для некоторых строк не удалось установить признак проверки: не выбрана 1С:Номенклатура'");
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не удалось установить признак проверки: не выбрана 1С:Номенклатура'");
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ВыделенныеСтрокиБезСопоставленных(ВыделенныеСтроки)
	
	СтрокиБезСопоставленных = Новый Массив;
	ЕстьСопоставленные = Ложь;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
		
		Если ДанныеСтроки.Сопоставлено Тогда
			ЕстьСопоставленные = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокиБезСопоставленных.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Если ЕстьСопоставленные Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нельзя изменить статус проверки сопоставленных позиций'"));
	КонецЕсли;
	
	Возврат СтрокиБезСопоставленных;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьФлагПроверкиСопоставления(ТекущиеДанные)
	
	Если Не ТекущиеДанные.Подтверждено
		И Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторНоменклатурыСервиса) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать номенклатуру сервиса.'"));
	Иначе
		
		Отбор = Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		
		ЗначенияРеквизитов = Новый Структура("СтатусСопоставления",
			?(ТекущиеДанные.Подтверждено, СтатусыСопоставления().Выбрано, СтатусыСопоставления().Проверено));
						
		ИзменитьРеквизитыСписка(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор), ЗначенияРеквизитов, Не ТекущиеДанные.Подтверждено);
				
		Элементы.Список.Обновить();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуруСервиса(ТекущиеДанные, Элемент)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторНоменклатурыСервиса) Тогда
		ОткрытьКарточкуНоменклатуры(ТекущиеДанные.ИдентификаторНоменклатурыСервиса, ТекущиеДанные.ИдентификаторХарактеристикиСервиса);
	Иначе
		
		Если Не Элементы.ПоказатьВарианты.Пометка Тогда
			ОтображатьПоискСервиса(Элемент);
		КонецЕсли;
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.ВариантыПоиска;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторыИспользуются(Номенклатура, Характеристика, ИдентификаторНоменклатуры, ИдентификаторХарактеристики)
	
	Параметры = РаботаСНоменклатурой.ПараметрыПроверкиИспользованияИдентификаторов();
	
	Параметры.Номенклатура                       = Номенклатура;
	Параметры.Характеристика                     = Характеристика;
	Параметры.ИдентификаторНоменклатурыСервиса   = ИдентификаторНоменклатуры;
	Параметры.ИдентификаторХарактеристикиСервиса = ИдентификаторХарактеристики;
	Параметры.УчитыватьПроверенные               = Истина;
		
	Возврат РаботаСНоменклатурой.ИдентификаторыИспользуются(Параметры);
	
КонецФункции

&НаСервере
Функция ДанныеДляЗаписиВРегистрСоответствия(НоменклатураИХарактеристики, ЕстьДублиИдентификаторов = Ложь, ЕстьСтрокиБезНоменклатуры = Ложь)
	
	СсылкиНоменклатурыИХарактеристик = Новый ТаблицаЗначений;
	
	СсылкиНоменклатурыИХарактеристик.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
	СсылкиНоменклатурыИХарактеристик.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
	
	Для каждого ЭлементКоллекции Из НоменклатураИХарактеристики Цикл
		ЗаполнитьЗначенияСвойств(СсылкиНоменклатурыИХарактеристик.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	СсылкиНоменклатурыИХарактеристик.Свернуть("Номенклатура, Характеристика");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СсылкиНоменклатурыИХарактеристик.Номенклатура КАК Номенклатура,
	|	СсылкиНоменклатурыИХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураИХарактеристики
	|ИЗ
	|	&СсылкиНоменклатурыИХарактеристик КАК СсылкиНоменклатурыИХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса, """") КАК ИдентификаторНоменклатуры,
	|	ЕСТЬNULL(СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса, """") КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ИдентификаторыОбъектов
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО НоменклатураИХарактеристики.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И НоменклатураИХарактеристики.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектов.Номенклатура КАК Номенклатура,
	|	ИдентификаторыОбъектов.Характеристика КАК Характеристика,
	|	ИдентификаторыОбъектов.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИдентификаторыОбъектов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	ИдентификаторыОбъектов КАК ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО ИдентификаторыОбъектов.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|			И ИдентификаторыОбъектов.ИдентификаторХарактеристики = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|			И (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В (&СтатусСопоставлено))
	|ГДЕ
	|	(СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура ЕСТЬ NULL
	|			ИЛИ ИдентификаторыОбъектов.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|				И ИдентификаторыОбъектов.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектов.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИдентификаторыОбъектов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	ИдентификаторыОбъектов КАК ИдентификаторыОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыОбъектов.ИдентификаторНоменклатуры,
	|	ИдентификаторыОбъектов.ИдентификаторХарактеристики
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ИдентификаторыОбъектов.Номенклатура), 0) КАК КоличествоЭлементовДляЗаписи
	|ИЗ
	|	ИдентификаторыОбъектов КАК ИдентификаторыОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектов.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИдентификаторыОбъектов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ИЗ
	|	ИдентификаторыОбъектов КАК ИдентификаторыОбъектов
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				ИдентификаторыОбъектов.ИдентификаторХарактеристики <> """"
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В (&СтатусСопоставлено)
	|				И ИдентификаторыОбъектов.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|				И ИдентификаторыОбъектов.ИдентификаторХарактеристики = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса
	|				И НЕ (ИдентификаторыОбъектов.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|				И ИдентификаторыОбъектов.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				ИдентификаторыОбъектов.ИдентификаторХарактеристики <> """"
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В (&СтатусСопоставлено)
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
	|				И ИдентификаторыОбъектов.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|				И ИдентификаторыОбъектов.Номенклатура <> СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				ИдентификаторыОбъектов.ИдентификаторХарактеристики = """"
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления В (&СтатусСопоставлено)
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса = """"
	|				И ИдентификаторыОбъектов.ИдентификаторНоменклатуры = СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса
	|				И ИдентификаторыОбъектов.Номенклатура <> СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура)";
	
	СтатусСопоставлено = Новый Массив;
	
	СтатусСопоставлено.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено);
	СтатусСопоставлено.Добавить(Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.Проверено);
	
	Запрос.УстановитьПараметр("СсылкиНоменклатурыИХарактеристик", СсылкиНоменклатурыИХарактеристик);
	Запрос.УстановитьПараметр("СтатусСопоставлено", СтатусСопоставлено);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОбъектыДляЗаписи                  = Результат[2].Выгрузить();
	ИдентификаторыДублиТекущейВыборки = Результат[3].Выгрузить();
	КоличествоЭлементовДляЗаписи      = Результат[4].Выгрузить()[0].КоличествоЭлементовДляЗаписи;
	ИдентификаторыДублиПоДаннымИБ     = Результат[5].Выгрузить();
	
	ЕстьДублиИдентификаторов = 
		ИдентификаторыДублиТекущейВыборки.Количество() > 0 
			ИЛИ ИдентификаторыДублиПоДаннымИБ.Количество() >0;
	
	// В запросе нельзя свернуть данные по идентификаторам, поскольку ссылка номенклатуры и характеристики
	// являются разными объектами и нельзя использовать агрегирующие функции сразу на два поля.
	
	Для каждого ЭлементКоллекции Из ИдентификаторыДублиТекущейВыборки Цикл
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИдентификаторНоменклатуры", ЭлементКоллекции.ИдентификаторНоменклатуры);
		Отбор.Вставить("ИдентификаторХарактеристики", ЭлементКоллекции.ИдентификаторХарактеристики);
		
		СтрокиДублей = ОбъектыДляЗаписи.НайтиСтроки(Отбор);
		
		// Удаление всех строк кроме первой.
		Для Счетчик = 1 По СтрокиДублей.Количество() - 1 Цикл
			ОбъектыДляЗаписи.Удалить(СтрокиДублей[Счетчик]);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из ИдентификаторыДублиПоДаннымИБ Цикл
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИдентификаторНоменклатуры", ЭлементКоллекции.ИдентификаторНоменклатуры);
		Отбор.Вставить("ИдентификаторХарактеристики", ЭлементКоллекции.ИдентификаторХарактеристики);
		
		СтрокиДублей = ОбъектыДляЗаписи.НайтиСтроки(Отбор);
		
		Для Счетчик = 0 По СтрокиДублей.Количество() - 1 Цикл
			ОбъектыДляЗаписи.Удалить(СтрокиДублей[Счетчик]);
		КонецЦикла;
		
	КонецЦикла;

	Если ОбъектыДляЗаписи.Количество() <> КоличествоЭлементовДляЗаписи Тогда
		ЕстьДублиИдентификаторов = Истина;
	КонецЕсли;
	
	Если НоменклатураИХарактеристики.Количество() <> КоличествоЭлементовДляЗаписи Тогда
		ЕстьСтрокиБезНоменклатуры = Истина;
	КонецЕсли;	
	
	Возврат ОбъектыДляЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСопоставленияДляСохранения(НоменклатураДляСопоставления, ПодсистемаВладелец)
	
	Запрос = Новый Запрос;
	
	РаботаСНоменклатурой.ПодготовитьЗапросДляПроверкиНаличияПодтвержденныхЗаписей(
		Запрос, НоменклатураДляСопоставления);
		
	Если ПодсистемаВладелец = "ТорговыеПредложения"
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложения.ПодготовитьЗапросСопоставленияНоменклатуры(Запрос);	
	КонецЕсли;
				
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗапуститьПоискСоответствийНоменклатуры()
	
	ДлительнаяОперация = НайтиСоответствияНаСервере();
	
	Если Не ДлительнаяОперация = Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НастроитьФормуПриДлительнойОперации(Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	РежимОтбора                                = "ВсяНоменклатура";
	ФонУправляющегоПоля                        = ЦветаСтиля.ЦветФонаШапкиТаблицы;
	ФонОбычный                                 = ЦветаСтиля.ЦветФонаКнопки;
	Элементы.ОтборВсяНоменклатура.Гиперссылка  = Ложь;
	ВариантыПоискаИндекс                       = Новый ФиксированноеСоответствие(Новый Соответствие);
	ПоказыватьВопросПоВидамНоменклатуры        = ПоказыватьВопросПоЗаполнениюВидовНоменклатуры();
	
	// Отображение поиска выполнять с сохранением данных.
	
	Элементы.ПоказатьВарианты.Пометка = Ложь;
	Элементы.ГруппаПоиска.Видимость   = Ложь;
	
	// По умолчанию доступность отключена, переопределяется сохраненной настройкой.
	
	Элементы.УстанавливатьАвтоматическийРежимОбновления.Доступность = Ложь;
	
	Если ОтсутствуютДанные Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ОтсутствуютДанные;
		ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПоказыватьВопросПоЗаполнениюВидовНоменклатуры()
	
	СтрокаНастроек = 
		ХранилищеСистемныхНастроек.Загрузить("Обработка.РаботаСНоменклатурой.Форма.ВопросПоЗаполнениюВидовНоменклатуры/ТекущиеДанные");	
	
	Если СтрокаНастроек = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаНастроек) = Тип("Соответствие") 
		И СтрокаНастроек["БольшеНеПоказывать"] <> Неопределено Тогда
		
		Возврат Не СтрокаНастроек["БольшеНеПоказывать"];
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредложениеПоСопоставлениюВидовНоменклатуры()
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОСопоставленииВидовНоменклатуры", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ВопросПоЗаполнениюВидовНоменклатуры",,,,,, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСопоставленииВидовНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Действие = "ПерейтиКВидамНоменклатуры" Тогда
			
			ВидыНоменклатуры = ПолучитьИзВременногоХранилища(АдресСопоставленныхВидовНоменклатуры);
			
			РаботаСНоменклатуройКлиентПереопределяемый.ОткрытьФормуСпискаВидаНоменклатуры(
				ВидыНоменклатуры, Неопределено, Неопределено);
				
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииСопоставления()
	
	ПоказатьОповещениеПользователя("1С:Номенклатура",, НСтр("ru = 'Выполнено сопоставление номенклатуры'"));
	Оповестить(РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСопоставления()
	
	Результат = Новый Структура;
	
	Результат.Вставить("НеСопоставлено", ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено"));
	Результат.Вставить("Выбрано",        ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Выбрано"));
	Результат.Вставить("Проверено",      ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Проверено"));
	Результат.Вставить("Сопоставлено",   ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокФормыСопоставленияНоменклатуры()
	
	РаботаСНоменклатурой.СформироватьСписокФормыСопоставления(ПодсистемаВладелец, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатистикаСопоставления(ПодсистемаВладелец, Элементы = Неопределено, Номенклатура = Неопределено)
	
	Статистика = РаботаСНоменклатурой.СтатистикаСопоставленияНоменклатуры(ПодсистемаВладелец, Номенклатура);
	НеточноеСовпадение = (Статистика.Количество - Статистика.ТочноеСовпадение);
	
	Статистика.Вставить("ВсяНоменклатураПредставление", НСтр("ru = 'Вся номенклатура'")
		+ ?(Статистика.Количество > 0, " (" + Формат(Статистика.Количество, "ЧН=0") + ")", ""));
	Статистика.Вставить("ТочноеСовпадениеПредставление", НСтр("ru = 'Точное совпадение'")
		+ ?(Статистика.ТочноеСовпадение > 0, " (" + Формат(Статистика.ТочноеСовпадение, "ЧН=0") + ")", ""));
	Статистика.Вставить("НеточноеСовпадениеПредставление", НСтр("ru = 'Неточное совпадение'")
		+ ?(НеточноеСовпадение > 0, " (" + Формат(НеточноеСовпадение, "ЧН=0") + ")", ""));
	Статистика.Вставить("СохранениеСопоставления", НСтр("ru = 'Сохранить сопоставление'")
		+ ?(Статистика.КоличествоПодготовлено = 0, "", " (" + Формат(Статистика.КоличествоПодготовлено, "ЧН=0") + ")"));
	
	Если ЗначениеЗаполнено(Элементы) Тогда
		Элементы.ОтборВсяНоменклатура.Заголовок    = Статистика.ВсяНоменклатураПредставление;
		Элементы.ОтборТочноеСовпадение.Заголовок   = Статистика.ТочноеСовпадениеПредставление;
		Элементы.ОтборНеточноеСовпадение.Заголовок = Статистика.НеточноеСовпадениеПредставление;
		Элементы.СохранитьСопоставление.Заголовок  = Статистика.СохранениеСопоставления;
	КонецЕсли;
	
	Возврат Статистика;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПодтвержденныеСопоставления()

	ДлительнаяОперация = СохранениеСопоставлений();
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ПараметрыОжидания.ТекстСообщения                  = НСтр("ru = 'Сохранение сопоставлений номенклатуры.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Истина;
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"СохранитьПодтвержденныеСопоставленияЗавершение", ЭтотОбъект, ПараметрыОжидания);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодтвержденныеСопоставленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РаботаСНоменклатуройКлиент.ВывестиСообщения(Результат);
	
	Отказ = Ложь;
	
	ПолучитьРезультатСохраненияСопоставлений(Отказ, Результат.АдресРезультата);
		
	// Если были произведены новые сопоставления видов номенклатуры, появляется предложение по их заполнению.
	
	Если Не Отказ Тогда
		
		ОповеститьОЗавершенииСопоставления();
		
		Если ЗначениеЗаполнено(АдресСопоставленныхВидовНоменклатуры)
			И ПоказыватьВопросПоВидамНоменклатуры Тогда
			
			ПоказатьПредложениеПоСопоставлениюВидовНоменклатуры();
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатСохраненияСопоставлений(Отказ, АдресРезультата)
	
	РезультатСохраненияСопоставлений = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если РезультатСохраненияСопоставлений = Неопределено 
		ИЛИ РезультатСохраненияСопоставлений.Отказ Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РезультатСохраненияСопоставлений.ВидыНоменклатурыДляСопоставления) Тогда
		АдресСопоставленныхВидовНоменклатуры = ПоместитьВоВременноеХранилище(
			РезультатСохраненияСопоставлений.ВидыНоменклатурыДляСопоставления, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранениеСопоставлений()
	
	НастроитьФормуПриДлительнойОперации(Истина, Истина);
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ЗаполнятьНоменклатуруПриСопоставлении",      ЗаполнятьНоменклатуруПриСопоставлении);
	ПараметрыМетода.Вставить("УстанавливатьАвтоматическийРежимОбновления", УстанавливатьАвтоматическийРежимОбновления);
	ПараметрыМетода.Вставить("НоменклатураДляСопоставления",               НоменклатураДляСопоставления);
	ПараметрыМетода.Вставить("ПодсистемаВладелец",                         ПодсистемаВладелец);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Сохранение подтвержденных сопоставлений номенклатуры.'");
	
	Задание = Новый Структура;
	
	Задание.Вставить("ИмяПроцедуры",       "РаботаСНоменклатурой.СохранитьПодтвержденныеСопоставления");
	Задание.Вставить("Наименование",       НаименованиеЗадания);
	Задание.Вставить("ПараметрыПроцедуры", ПараметрыМетода);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "";
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);	
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтбор()
	
	Элементы.ГруппаОтборВсяНоменклатура.ЦветФона = ?(РежимОтбора = "ВсяНоменклатура", ФонУправляющегоПоля, ФонОбычный);
	Элементы.ОтборВсяНоменклатура.Гиперссылка = РежимОтбора <> "ВсяНоменклатура";
	
	Элементы.ГруппаОтборТочноеСовпадение.ЦветФона = ?(РежимОтбора = "ТочноеСовпадение", ФонУправляющегоПоля, ФонОбычный);
	Элементы.ОтборТочноеСовпадение.Гиперссылка = РежимОтбора <> "ТочноеСовпадение";
	
	Элементы.ГруппаОтборНеточноеСовпадение.ЦветФона = ?(РежимОтбора = "НеточноеСовпадение", ФонУправляющегоПоля, ФонОбычный);
	Элементы.ОтборНеточноеСовпадение.Гиперссылка = РежимОтбора <> "НеточноеСовпадение";
	
	ОбновитьОтборСписка();
	
	Если РежимОтбора = "ТочноеСовпадение" Тогда
		
		Если Элементы.ПоказатьВарианты.Пометка Тогда
			Элементы.ГруппаПоиска.Видимость = Ложь;
			Элементы.ПоказатьВарианты.Пометка = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если РежимОтбора = "НеточноеСовпадение"
			И Не Элементы.ПоказатьВарианты.Пометка Тогда
			
			Элементы.ПоказатьВарианты.Пометка = Истина;
			Элементы.ГруппаПоиска.Видимость = Истина;
			ПоказатьСписокВариантов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборСписка()
	
	Если РежимОтбора = "ТочноеСовпадение" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТочноеСовпадение", 
			Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ИначеЕсли РежимОтбора = "НеточноеСовпадение" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТочноеСовпадение", 
			Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТочноеСовпадение", 
			Ложь, ВидСравненияКомпоновкиДанных.Равно, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыСписка(Знач ЗаписиДляИзменения, ЗначенияРеквизитов, ТребуетсяПроверка);
	
	ОбщийСчетчик              = 0;
	ТекущийСчетчикПорции      = 0;
	ДанныеДляФильтрации       = Новый Массив;
	КоличествоЭлементов       = ЗаписиДляИзменения.Количество();
	РазмерПорции              = 1000;
	ЕстьСтрокиБезНоменклатуры = Ложь;
	ЕстьДублиИдентификаторов  = Ложь;
	
	Для каждого ЭлементКоллекции Из ЗаписиДляИзменения Цикл
		
		ДанныеДляФильтрации.Добавить(Новый Структура("Номенклатура, Характеристика", 
			ЭлементКоллекции.Номенклатура, ЭлементКоллекции.Номенклатура));
			
		Если ТекущийСчетчикПорции = РазмерПорции
			ИЛИ ОбщийСчетчик = КоличествоЭлементов - 1 Тогда
			
			ИзменитьЗаписиРегистра(ЗаписиДляИзменения, ТребуетсяПроверка, ЗначенияРеквизитов,
				ЕстьДублиИдентификаторов, ЕстьСтрокиБезНоменклатуры);
						
			ТекущийСчетчикПорции = 0;
			
		КонецЕсли;	
		
		ТекущийСчетчикПорции = ТекущийСчетчикПорции + 1;
		ОбщийСчетчик = ОбщийСчетчик + 1;
		
	КонецЦикла;	
	
	СтатистикаСопоставления(ПодсистемаВладелец, Элементы, НоменклатураДляСопоставления);
	
	Если ЕстьДублиИдентификаторов Тогда
		СообщитьПользователюОНаличииИдентификаторов(ЗаписиДляИзменения.Количество() > 1);
	КонецЕсли;
	
	Если ЕстьСтрокиБезНоменклатуры Тогда
		СообщитьПользователюОбОтсутствииНоменклатуры(ЗаписиДляИзменения.Количество() > 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписиРегистра(ЗаписиДляИзменения, ТребуетсяПроверка, ЗначенияРеквизитов,
			ЕстьДублиИдентификаторов, ЕстьСтрокиБезНоменклатуры)
	
	Если ТребуетсяПроверка Тогда
		ДанныеДляЗаписи = ДанныеДляЗаписиВРегистрСоответствия(ЗаписиДляИзменения, ЕстьДублиИдентификаторов, ЕстьСтрокиБезНоменклатуры);
	Иначе
		ДанныеДляЗаписи = ЗаписиДляИзменения;
	КонецЕсли;
	
	Если ДанныеДляЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураСХарактеристиками = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
				
		Для каждого ЭлементКоллекции Из ДанныеДляЗаписи Цикл
			
			Запись = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
			
			Запись.Номенклатура = ЭлементКоллекции.Номенклатура;
			Запись.Характеристика = ЭлементКоллекции.Характеристика;
			Запись.Прочитать();
				
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияРеквизитов);
			
			Если Не ЗначениеЗаполнено(Запись.ИдентификаторНоменклатурыСервиса) Тогда
				Запись.СтатусСопоставления = СтатусыСопоставления().НеСопоставлено;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Запись.Характеристика) И ЗначениеЗаполнено(Запись.ИдентификаторХарактеристикиСервиса) Тогда
				// Привязка характеристики сервиса к номенклатуре.
				Запись.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру;
			КонецЕсли;
			
			Запись.Записать(Истина);

			Если ЗначениеЗаполнено(ЭлементКоллекции.Характеристика) Тогда
				НоменклатураСХарактеристиками.Вставить(ЭлементКоллекции.Номенклатура);
			КонецЕсли;
						
		КонецЦикла;
		
		// В случае наличия характеристик, производится обновление основных записей регистра соответствия номенклатуры:
		Если НоменклатураСХарактеристиками.Количество() > 0 Тогда
			ИзменитьОсновныеЗаписиСоответствияНоменклатуры(
				РаботаСНоменклатурой.КлючиКоллекцииКакМассив(НоменклатураСХарактеристиками));
		КонецЕсли;
				
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		РаботаСНоменклатурой.ЗаписатьИнформациюОбОшибкеВЖурналРегистрации(
			НСтр("ru = 'Изменение сопоставления 1С:Номенклатура.'"), ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(ИдентификаторНоменклатуры, ИдентификаторХарактеристики)
	
	Идентификаторы = Новый Структура;
	Идентификаторы.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	Идентификаторы.Вставить("ИдентификаторХарактеристики", ИдентификаторХарактеристики);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиНоменклатуры(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Скрытие характеристики номенклатуры.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокХарактеристика.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие характеристики номенклатуры сервиса.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеХарактеристикиСервиса.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ИдентификаторХарактеристикиСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость гиперссылки Выбрать для списка (показать, если не выбрано значение).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНайти.Имя);
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ИдентификаторНоменклатурыСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выбрать'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Видимость гиперссылки Выбрать для списка (скрыть, если выбрано значение).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНайти.Имя);
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ИдентификаторНоменклатурыСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость номенклатуры сервиса (скрыть, если не выбрано значение).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеНоменклатурыСервиса.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ИдентификаторНоменклатурыСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие характеристики варианта номенклатуры сервиса.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаХарактеристикаСервиса.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантыПоиска.ИдентификаторХарактеристикиСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Гиперссылка показать все варианты (скрыть основные поля, если гиперссылка).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаПометка.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаНоменклатураСервиса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаХарактеристикаСервиса.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантыПоиска.ЭтоГиперссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Гиперссылка показать все варианты (скрыть если гиперссылка).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаПоказатьВсе.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантыПоиска.ЭтоГиперссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Гиперссылка показать все варианты (показать если гиперссылка).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантыПоискаПоказатьВсе.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантыПоиска.ЭтоГиперссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Гиперссылка списка формы Очистить - пусто.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГиперссылкаОчистить.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПредставлениеНоменклатурыСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст","");
	
	// Гиперссылка списка формы Очистить - Х.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГиперссылкаОчистить.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПредставлениеНоменклатурыСервиса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Х'"));
	
	// Доступность сопоставленных.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПодтверждено.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Сопоставлено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Цвет сопоставленных.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Сопоставлено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНесопоставленногоОбъектаБЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСоответствия()
		
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ПараметрыОжидания.ТекстСообщения                  = НСтр("ru = 'Поиск соответствий 1С:Номенклатура.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"НайтиСоответствияЗавершение", ЭтотОбъект, ПараметрыОжидания);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСоответствияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РаботаСНоменклатуройКлиент.ВывестиСообщения(Результат, Истина);
	
	ОбновитьСтатистикуПослеПоискаСоответствий();
	
	Оповестить(РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистикуПослеПоискаСоответствий()
	
	ОтсутствуютДанные = ДинамическийСписокПуст(Элементы.Список);
	НастроитьФормуПриДлительнойОперации(Ложь);
	
	СтатистикаСопоставления(ПодсистемаВладелец, Элементы, НоменклатураДляСопоставления);
	
КонецПроцедуры

&НаСервере
Функция НайтиСоответствияНаСервере()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Статус",                         "Выполняется");
	Результат.Вставить("ИдентификаторЗадания",           Неопределено);
	Результат.Вставить("АдресРезультата",                "");
	Результат.Вставить("АдресДополнительногоРезультата", "");
	Результат.Вставить("КраткоеПредставлениеОшибки",     "");
	Результат.Вставить("ПодробноеПредставлениеОшибки",   "");
	Результат.Вставить("Сообщения",                      Новый ФиксированныйМассив(Новый Массив));
	
	// Поиск запущенного ранее регламентного задания.
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние",
		"РаботаСНоменклатурой.ПоискСоответствийНоменклатурыСервиса", СостояниеФоновогоЗадания.Активно));
	
	Если АктивныеЗадания.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Результат, АктивныеЗадания[0]);
		Результат.ИдентификаторЗадания = АктивныеЗадания[0].УникальныйИдентификатор;
		Возврат Результат;
	КонецЕсли;
	
	// Поиск запущенного ранее фонового задания из формы.
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Поиск соответствий 1С:Номенклатура.'");
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование, Состояние",
		НаименованиеЗадания, СостояниеФоновогоЗадания.Активно));
	
	Если АктивныеЗадания.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Результат, АктивныеЗадания[0]);
		Результат.ИдентификаторЗадания = АктивныеЗадания[0].УникальныйИдентификатор;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("Номенклатура", НоменклатураДляСопоставления.ВыгрузитьЗначения());
	ПараметрыМетода.Вставить("ПодсистемаВладелец", ПодсистемаВладелец);
	
	Задание = Новый Структура;
	
	Задание.Вставить("ИмяПроцедуры",       "РаботаСНоменклатурой.ПоискСоответствийНоменклатурыСервиса");
	Задание.Вставить("Наименование",       НаименованиеЗадания);
	Задание.Вставить("ПараметрыПроцедуры", ПараметрыМетода);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "";
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСписокВариантов()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница <> Элементы.ГруппаНичегоНеВыбрано Тогда
			Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаНичегоНеВыбрано;
		КонецЕсли;
		ТекущийКлючВариантов = "";
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = "" + ТекущиеДанные.Номенклатура.УникальныйИдентификатор() + "-" + ТекущиеДанные.Характеристика.УникальныйИдентификатор();
	Если ТекущийКлючВариантов = НовыйКлюч Тогда
		Возврат;
	Иначе
		ТекущийКлючВариантов = НовыйКлюч;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоСовпадений = 1
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторНоменклатурыСервиса) Тогда
		
		Если ВариантыПоискаИндекс.Получить(ТекущийКлючВариантов) = Неопределено Тогда
			
			СтрокаВарианта = ВариантыПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВарианта, ТекущиеДанные);
			СтрокаВарианта.Пометка = Истина;
			
			ВариантыПоискаИндексОбновленный = Новый Соответствие(ВариантыПоискаИндекс);
			ВариантыПоискаИндексОбновленный.Вставить(ТекущийКлючВариантов, Истина);
			ВариантыПоискаИндекс = Новый ФиксированноеСоответствие(ВариантыПоискаИндексОбновленный);
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		Отбор.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		Элементы.ВариантыПоиска.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
		Если Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница <> Элементы.ГруппаВарианты Тогда
			Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаВарианты;
		КонецЕсли;
		
	Иначе
		
		Если ВариантыПоискаИндекс.Получить(ТекущийКлючВариантов) = Неопределено Тогда
			
			ПараметрыПодбораВариантов = Новый Структура;
			ПараметрыПодбораВариантов.Вставить("КлючВариантов",  ТекущийКлючВариантов);
			ПараметрыПодбораВариантов.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
			ПараметрыПодбораВариантов.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ПараметрыПодбораВариантов.Вставить("ИдентификаторНоменклатурыСервиса",
				ТекущиеДанные.ИдентификаторНоменклатурыСервиса);
			ПараметрыПодбораВариантов.Вставить("ИдентификаторХарактеристикиСервиса",
				ТекущиеДанные.ИдентификаторХарактеристикиСервиса);
			
			НачатьОбновлениеВариантовСопоставления(ПараметрыПодбораВариантов);
			
		Иначе
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
			Отбор.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			
			Элементы.ВариантыПоиска.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
			
			Если Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница <> Элементы.ГруппаВарианты Тогда
				Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаВарианты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеВариантовСопоставления(ПараметрыПодбораВариантов)
	
	ДлительнаяОперация = ОбновитьВариантыСопоставленияВФоне(ПараметрыПодбораВариантов,
		ЭтотОбъект.УникальныйИдентификатор);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаВариантыДлительнаяОперация;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск соответствий 1С:Номенклатура.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ОбновитьВариантыСопоставленияЗавершение = Новый ОписаниеОповещения("ОбновитьВариантыСопоставленияЗавершение",
		ЭтотОбъект, ПараметрыПодбораВариантов);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОбновитьВариантыСопоставленияЗавершение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьВариантыСопоставленияВФоне(Знач ПараметрыПодбораВариантов, Знач ИдентификаторФормы)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",                         "Выполняется");
	Результат.Вставить("ИдентификаторЗадания",           Неопределено);
	Результат.Вставить("АдресРезультата",                "");
	Результат.Вставить("АдресДополнительногоРезультата", "");
	Результат.Вставить("КраткоеПредставлениеОшибки",     "");
	Результат.Вставить("ПодробноеПредставлениеОшибки",   "");
	Результат.Вставить("Сообщения",                      Новый ФиксированныйМассив(Новый Массив));
	
	// Поиск запущенного ранее фонового задания из формы.
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Обновление вариантов сопоставления номенклатуры.'");
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование, Состояние",
		НаименованиеЗадания, СостояниеФоновогоЗадания.Активно));
	
	Если АктивныеЗадания.Количество() Тогда
		НайденноеЗадание = АктивныеЗадания[0];
		Если НайденноеЗадание.Ключ = ПараметрыПодбораВариантов.КлючВариантов Тогда
			ЗаполнитьЗначенияСвойств(Результат, НайденноеЗадание);
			Результат.ИдентификаторЗадания = АктивныеЗадания[0].УникальныйИдентификатор;
			Возврат Результат;
		Иначе
			НайденноеЗадание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	Задание                    = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование       = НаименованиеЗадания;
	Задание.ИмяПроцедуры       = "РаботаСНоменклатурой.ОбновитьВариантыСопоставленияНоменклатуры";
	Задание.ПараметрыПроцедуры = ПараметрыПодбораВариантов;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.КлючФоновогоЗадания = ПараметрыПодбораВариантов.КлючВариантов;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВариантыСопоставленияЗавершение(Результат, ПараметрыПодбораВариантов) Экспорт
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Элементы.ПоказатьВарианты.Пометка = Не Элементы.ПоказатьВарианты.Пометка;
		Элементы.ГруппаПоиска.Видимость = Элементы.ПоказатьВарианты.Пометка;
		
	ИначеЕсли Результат = Неопределено
		Или Результат.Статус <> "Выполнено"
		Или ПараметрыПодбораВариантов.Номенклатура <> ТекущиеДанные.Номенклатура
		Или ПараметрыПодбораВариантов.Характеристика <> ТекущиеДанные.Характеристика
		Или ВариантыПоискаИндекс.Получить(ПараметрыПодбораВариантов.КлючВариантов) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбновленияВариантов = Новый Структура;
	ПараметрыОбновленияВариантов.Вставить("ДанныеСервиса", Результат.АдресРезультата);
	ПараметрыОбновленияВариантов.Вставить("ТекущийВариант", ПараметрыПодбораВариантов);
	
	ОбновитьВариантыСопоставленияНаСервере(ПараметрыОбновленияВариантов)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВариантыСопоставленияНаСервере(ПараметрыОбновленияВариантов)
	
	Если ЭтоАдресВременногоХранилища(ПараметрыОбновленияВариантов.ДанныеСервиса) Тогда
		ДанныеСервиса = ПолучитьИзВременногоХранилища(ПараметрыОбновленияВариантов.ДанныеСервиса);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущийВариант = ПараметрыОбновленияВариантов.ТекущийВариант;
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда		
		
		Элементы.ПустойРезультатПоясняющийТекст.Заголовок = СтрШаблон(НСтр("ru = 'Не найдено вариантов для ""%1""'"),
			Строка(ТекущийВариант.Номенклатура));
		Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаПустойРезультат;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ГруппаПоискаСтраницы.ТекущаяСтраница = Элементы.ГруппаВарианты;
	
	Для Каждого ДанныеВарианта Из ДанныеСервиса Цикл
		
		Если ДанныеВарианта.Характеристики.Количество() > 0 Тогда
			Для каждого ТекущаяХарактеристика Из ДанныеВарианта.Характеристики Цикл
				
				// Добавление строки варианта для каждой найденной характеристики
				
				НоваяСтрока = ВариантыПоиска.Добавить();
				
				НоваяСтрока.Номенклатура                       = ТекущийВариант.Номенклатура;
				НоваяСтрока.Характеристика                     = ТекущийВариант.Характеристика;
				НоваяСтрока.ПредставлениеНоменклатурыСервиса   = ДанныеВарианта.Наименование;
				НоваяСтрока.ИдентификаторНоменклатурыСервиса   = ДанныеВарианта.Идентификатор;
				НоваяСтрока.ПредставлениеХарактеристикиСервиса = ТекущаяХарактеристика.Наименование;
				НоваяСтрока.ИдентификаторХарактеристикиСервиса = ТекущаяХарактеристика.Идентификатор;

			КонецЦикла;
		Иначе
			
			// Добавление строки варианта для номенклатуры без характеристик
			
			НоваяСтрока = ВариантыПоиска.Добавить();
			
			НоваяСтрока.Номенклатура                     = ТекущийВариант.Номенклатура;
			НоваяСтрока.Характеристика                   = ТекущийВариант.Характеристика;
			НоваяСтрока.ПредставлениеНоменклатурыСервиса = ДанныеВарианта.Наименование;
			НоваяСтрока.ИдентификаторНоменклатурыСервиса = ДанныеВарианта.Идентификатор;
		КонецЕсли;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеСервиса) Тогда // обновление количества найденных вариантов
		
		Отбор = Новый Структура("Номенклатура, Характеристика", ТекущийВариант.Номенклатура, ТекущийВариант.Характеристика);
		ЗначенияРеквизитов = Новый Структура("КоличествоВариантов", ДанныеСервиса.Количество());
		
		ИзменитьРеквизитыСписка(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор), ЗначенияРеквизитов, Ложь);
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура",   ТекущийВариант.Номенклатура);
	Отбор.Вставить("Характеристика", ТекущийВариант.Характеристика);
	
	Если ВариантыПоиска.НайтиСтроки(Отбор).Количество() >= 50 Тогда
		
		НоваяСтрока = ВариантыПоиска.Добавить();
		НоваяСтрока.Номенклатура   = ТекущийВариант.Номенклатура;
		НоваяСтрока.Характеристика = ТекущийВариант.Характеристика;
		НоваяСтрока.ВсеВарианты    = НСтр("ru = 'Показать все'");
		НоваяСтрока.ЭтоГиперссылка = Истина;
		
	КонецЕсли;
	
	Элементы.ВариантыПоиска.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	// Установка текущего варианта.
	ОписаниеТекущегоВарианта = Новый Структура;
	ОписаниеТекущегоВарианта.Вставить("ИдентификаторНоменклатурыСервиса",
		ТекущийВариант.ИдентификаторНоменклатурыСервиса);
	ОписаниеТекущегоВарианта.Вставить("ИдентификаторХарактеристикиСервиса",
		ТекущийВариант.ИдентификаторХарактеристикиСервиса);
	ОписаниеТекущегоВарианта.Вставить("Номенклатура",
		ТекущийВариант.Номенклатура);
	ОписаниеТекущегоВарианта.Вставить("Характеристика",
		ТекущийВариант.Характеристика);
	
	Если ЗначениеЗаполнено(ОписаниеТекущегоВарианта.ИдентификаторНоменклатурыСервиса) Тогда
		
		ВыбранныйВариант = ВариантыПоиска.НайтиСтроки(ОписаниеТекущегоВарианта);
		
		Если ВыбранныйВариант.Количество() <> 0 Тогда
			ВыбранныйВариант[0].Пометка = Истина;
			Элементы.ВариантыПоиска.ТекущаяСтрока = ВариантыПоиска.Индекс(ВыбранныйВариант[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	ВариантыПоискаИндексОбновленный = Новый Соответствие(ВариантыПоискаИндекс);
	ВариантыПоискаИндексОбновленный.Вставить(ТекущийВариант.КлючВариантов, Истина);
	
	ВариантыПоискаИндекс = Новый ФиксированноеСоответствие(ВариантыПоискаИндексОбновленный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоискаНоменклатурыСервиса(ЗаполнятьСтрокуПоиска = Истина)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыОткрытия = РаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиНоменклатуры();
	
	ПараметрыОткрытия.РежимВыбораНоменклатуры       = Истина;
	ПараметрыОткрытия.ЗапрещатьВыборЗагруженных     = Истина;
	ПараметрыОткрытия.ПокупатьНоменклатуруПриВыборе = Ложь;
	
	Если ЗаполнятьСтрокуПоиска Тогда
		ПараметрыОткрытия.СтрокаПоиска = СокрЛП(СтрШаблон("%1 %2", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НоменклатураСервисаВыборЗавершение", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуЗагрузкиНоменклатуры(
		ПараметрыОткрытия, 
		ЭтотОбъект, 
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСервисаВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РаботаСНоменклатуройКлиент.ВывестиСообщения(Результат, Истина);
	
	Если Результат = Неопределено 
		ИЛИ Результат.ВыбранныеОбъекты.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Отбор = Новый Структура("Номенклатура, Характеристика",
		ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		
	НоменклатураСервисаВыборЗавершениеНаСервере(Результат.ВыбранныеОбъекты[0], Отбор);
		
КонецПроцедуры

&НаСервере
Процедура НоменклатураСервисаВыборЗавершениеНаСервере(СтрокаРезультата, Отбор)
		
	ИдентификаторыИспользуются = ИдентификаторыИспользуются(
		Отбор.Номенклатура, 
		Отбор.Характеристика, 
		СтрокаРезультата.ИдентификаторНоменклатуры, 
		СтрокаРезультата.ИдентификаторХарактеристики);
		
	Если ИдентификаторыИспользуются Тогда
		СообщитьПользователюОНаличииИдентификаторов(Ложь);
	КонецЕсли;	
		
	СтатусСопоставления = ?(ИдентификаторыИспользуются,
		СтатусыСопоставления().Выбрано, 
		СтатусыСопоставления().Проверено);
		
	ЗначенияРеквизитов = Новый Структура;
	
	ЗначенияРеквизитов.Вставить("ИдентификаторНоменклатурыСервиса",   СтрокаРезультата.ИдентификаторНоменклатуры);
	ЗначенияРеквизитов.Вставить("ИдентификаторХарактеристикиСервиса", СтрокаРезультата.ИдентификаторХарактеристики);
	ЗначенияРеквизитов.Вставить("ПредставлениеНоменклатурыСервиса",   СтрокаРезультата.НаименованиеНоменклатуры);
	ЗначенияРеквизитов.Вставить("ПредставлениеХарактеристикиСервиса", СтрокаРезультата.НаименованиеХарактеристики);
	ЗначенияРеквизитов.Вставить("СтатусСопоставления",                СтатусСопоставления);
	
	Если СтрокаРезультата.ИспользуютсяХарактеристики И Не ЗначениеЗаполнено(Отбор.Характеристика) Тогда
		// Привязка номенклатуры с характеристиками к номенклатуре без характеристик
		ЗначенияРеквизитов.Вставить("РежимЗагрузкиХарактеристик", Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики);
	КонецЕсли;
	
	ИзменитьРеквизитыСписка(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор), ЗначенияРеквизитов, Ложь);
		
	ВариантыПоискаТекущейНоменклатуры = ВариантыПоиска.НайтиСтроки(Отбор);
	
	// Установка пометки у вариантов.
	Для каждого ЭлементКоллекции Из ВариантыПоискаТекущейНоменклатуры Цикл
		ЭлементКоллекции.Пометка = 
			СтрокаРезультата.ИдентификаторНоменклатуры = ЭлементКоллекции.ИдентификаторНоменклатурыСервиса  
			И СтрокаРезультата.ИдентификаторХарактеристики = ЭлементКоллекции.ИдентификаторХарактеристикиСервиса;  
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьОсновныеЗаписиСоответствияНоменклатуры(Номенклатура)
	
	РаботаСНоменклатурой.ИзменитьОсновныеЗаписиСоответствияНоменклатуры(Номенклатура, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ПустойРезультатГиперссылкаНажатие(Элемент)
	
	ОткрытьФормуПоискаНоменклатурыСервиса(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыборНаСервере(Знач ТекущиеДанные = Неопределено)
	
	ЗначенияРеквизитов = Новый Структура;
	
	ЗначенияРеквизитов.Вставить("ИдентификаторНоменклатурыСервиса",   "");
	ЗначенияРеквизитов.Вставить("ИдентификаторХарактеристикиСервиса", "");
	ЗначенияРеквизитов.Вставить("ПредставлениеНоменклатурыСервиса",   "");
	ЗначенияРеквизитов.Вставить("ПредставлениеХарактеристикиСервиса", "");
	ЗначенияРеквизитов.Вставить("КоличествоВариантов",                0);
	ЗначенияРеквизитов.Вставить("ТочноеСовпадение",                   Ложь);
	ЗначенияРеквизитов.Вставить("СтатусСопоставления",                СтатусыСопоставления().НеСопоставлено);
	
	ЗаписиДляИзменения = Новый Массив;
	
	Если ТекущиеДанные = Неопределено Тогда
		ЗаписиДляИзменения = Элементы.Список.ВыделенныеСтроки;
	Иначе
		ЗаписиДляИзменения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	КонецЕсли;
		
	ИзменитьРеквизитыСписка(ЗаписиДляИзменения, ЗначенияРеквизитов, Ложь);
		
	Элементы.Список.Обновить();
	
	ОчиститьВыбранныеВарианты(ЗаписиДляИзменения);
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьВыбранныеВарианты(ЗаписиДляИзменения)
	
	Для каждого ЭлементКоллекции Из ЗаписиДляИзменения Цикл
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",   ЭлементКоллекции.Номенклатура);
		Отбор.Вставить("Характеристика", ЭлементКоллекции.Характеристика);
		
		ВариантыПоискаТекущейНоменклатуры = ВариантыПоиска.НайтиСтроки(Отбор);
		
		Для каждого ЭлементКоллекции Из ВариантыПоискаТекущейНоменклатуры Цикл
			ЭлементКоллекции.Пометка = Ложь;
		КонецЦикла;
	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриДлительнойОперации(ЭтоНачалоОперации, ЭтоСохранение = Ложь)
	
	Если ЭтоНачалоОперации Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
	ИначеЕсли ОтсутствуютДанные Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ОтсутствуютДанные;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ОсновныеДанные;
	КонецЕсли;
	
	Если ЭтоСохранение Тогда
		Элементы.НадписьПоискВариантов.Заголовок = НСтр("ru = 'Сохранение сопоставлений'");
	Иначе
		Элементы.НадписьПоискВариантов.Заголовок = НСтр("ru = 'Сопоставление номенклатуры'");
	КонецЕсли;
	
	Элементы.СохранитьСопоставление.Доступность = Не ЭтоНачалоОперации;
	Элементы.ГруппаНастройки.Доступность = Не ЭтоНачалоОперации; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.УстанавливатьАвтоматическийРежимОбновления.Доступность = ЗаполнятьНоменклатуруПриСопоставлении;
	
КонецПроцедуры

&НаСервере
Функция ДинамическийСписокПуст(ТаблицаФормы)

	СхемаКомпоновкиДанных = ТаблицаФормы.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = ТаблицаФормы.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].Операторы[0].КоличествоПолучаемыхЗаписей = 1;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла; 
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти