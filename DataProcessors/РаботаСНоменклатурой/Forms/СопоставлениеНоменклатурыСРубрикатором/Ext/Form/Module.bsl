
#Область ОбработчикиСобытийФормы

&НаСервере
// Описание параметров формы см. в 
//  РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипДанныхНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип;
	ТаблицаНоменклатура   = РаботаСНоменклатурой.ИмяТаблицыПоТипу(ТипДанныхНоменклатура);
	ТекстЗапроса          = "";
	РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса);
	Если НЕ (ЗначениеЗаполнено(ТекстЗапроса) И ЗначениеЗаполнено(ТаблицаНоменклатура)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ПараметрыФормы = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	
	УстановитьЗаголовкиЭлементовФормы(ПараметрыФормы);
	
	СценарийИспользования        = ПараметрыФормы.СценарийИспользования;
	ИспользоватьИерархию         = ИерархияНоменклатурыИспользуется(ТипДанныхНоменклатура);
	ИспользоватьВидыНоменклатуры = РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры();
	
	ИнициализацияДинамическихСписков(ТекстЗапроса, ТаблицаНоменклатура, ИспользоватьИерархию, ИспользоватьВидыНоменклатуры);
	
	Если НЕ ИспользоватьИерархию Тогда
		Элементы.ГруппаРежимПоИерархии.Видимость = Ложь;
		Если РежимСопоставления = "ПоИерархии" Тогда
			РежимСопоставления = "ПоНоменклатуре";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользоватьВидыНоменклатуры Тогда
		Элементы.ГруппаРежимПоВидам.Видимость = Ложь;
		Если РежимСопоставления = "ПоВидам" Тогда
			РежимСопоставления = "ПоНоменклатуре";
		КонецЕсли;
	КонецЕсли;
	
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ЗаполнитьОрганизацию(Параметры);
		ПодготовитьФормуКРаботеВРежимеВыгрузкиНоменклатуры(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, ТаблицаНоменклатура, Отказ);
	ИначеЕсли СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда 
		Параметры.Свойство("СостояниеВыгрузки", СостояниеВыгрузки);
		ПодготовитьФормуКРаботеВРежимеУстранениеПроблемЗаполнения(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ, Параметры.КлючЗаписиРегистра);
	КонецЕсли;
	
	ЭтоВыгрузкаВНациональныйКаталог = (ТипЗнч(НастройкаВыгрузки) = Тип("Структура")
		И НастройкаВыгрузки.Свойство("ВыгружатьВНациональныйКаталог")
		И НастройкаВыгрузки.ВыгружатьВНациональныйКаталог = Истина);
	
	УстановитьРежимСопоставления();
	УстановитьУсловноеОформление();
	
	Для каждого ТипДанных Из Метаданные.ОпределяемыеТипы.ЗначенияСвойствОбъектовРаботаСНоменклатурой.Тип.Типы() Цикл
		ТипыЗначенийСвойств.Добавить(ТипДанных);
	КонецЦикла;
	
	ПрименитьНастройкиОтбора(ПараметрыФормы.НастройкиОтбора, ИспользоватьИерархию, ИспользоватьВидыНоменклатуры);
	ЗавершитьНастройкуФормыВРежимеВыгрузки();
	
	ИспользоватьЧастичноеСопоставлениеБезВопроса = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСНоменклатурой", "СопоставлениеНоменклатуры\ИспользоватьЧастичноеСопоставлениеБезВопроса", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ПроверитьСтатусОперацииПроблемыЗаполнения();
	КонецЕсли;
	
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ОбновитьКатегориюСервиса();
		ОбработатьОбновлениеРасшифровки();
	КонецЕсли;
	
	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ПроверитьПолучениеОбязательныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура РежимСопоставленияНажатие(Элемент)
	
	Если Элемент.Имя = "РежимПоВидам" Тогда
		РежимСопоставления = "ПоВидам";
	ИначеЕсли Элемент.Имя = "РежимПоИерархии" Тогда
		РежимСопоставления = "ПоИерархии";
	Иначе
		РежимСопоставления = "ПоНоменклатуре";
	КонецЕсли;
	
	УстановитьРежимСопоставления(Истина);
	ОбновитьРеквизитыСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказатьНезаполненныеНажатие(Элемент)
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	Если Расшифровка.Проблемы.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНоменклатуры", ЭтотОбъект, КатегорииНоменклатуры.Ссылка);
		РаботаСНоменклатуройКлиентПереопределяемый.ПоказатьНезаполненныеДанныеНоменклатуры(КатегорииНоменклатуры.Ссылка, Расшифровка.Проблемы, ЭтотОбъект, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСервисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегорииСервиса = КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления];
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКатегорииСервиса", ЭтотОбъект, РежимСопоставления);
	
	ВидНоменклатуры = Неопределено;
	Если КатегорииНоменклатуры.Свойство("МожноСопоставлятьВидНоменклатуры")
		И КатегорииНоменклатуры.МожноСопоставлятьВидНоменклатуры = Ложь Тогда
		ВидНоменклатуры = ТекущаяСсылка("ПоВидам");
	КонецЕсли;
	
	ВыбратьКатегориюСервиса(ИдентификаторКатегорииСервиса, ТекущаяСсылка(), ВидНоменклатуры, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПредупреждениеТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокПоВидам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РежимСопоставления = "ПоВидам" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
		"ВидНоменклатуры", ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Вид номенклатуры'") + ":";
		Элементы.ДекорацияЗначениеОтбора.Заголовок = ТекущиеДанные.Ссылка;
		Элементы.ГруппаОтбор.Видимость = Истина;
		РежимСопоставления = "ПоНоменклатуре";
		УстановитьРежимСопоставления(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыСервиса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "Категория")
		И Не (Элемент.Имя = "СписокПоВидам" И Элемент.ТекущиеДанные.ЭтоГруппа) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НЕ ПродолжитьВыборКатегории(Элемент.ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;
		
		ВидНоменклатуры = Неопределено;
		Если Элемент.Имя = "СписокПоНоменклатуре"
			И Элемент.ТекущиеДанные.ИдентификаторКатегорииПоВидам = "МножественнаяПривязкаКатегорий" Тогда
			ВидНоменклатуры = Элемент.ТекущиеДанные.ВидНоменклатуры;
		КонецЕсли;
		
		ВыбратьКатегориюСервиса(Элемент.ТекущиеДанные.ИдентификаторКатегории, Элемент.ТекущиеДанные.Ссылка, ВидНоменклатуры);
		
	ИначеЕсли Найти(Поле.Имя, "Ссылка") И Не Элемент.Имя = "СписокПоНоменклатуре" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
			"ВидНоменклатуры", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
			"Родитель", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
		Элементы.ГруппаОтбор.Видимость = Ложь;
		
		Если РежимСопоставления = "ПоВидам" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"ВидНоменклатуры", Элемент.ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Вид номенклатуры'") + ":";
			Элементы.ДекорацияЗначениеОтбора.Заголовок = Элемент.ТекущиеДанные.Ссылка;
			Элементы.ГруппаОтбор.Видимость = Истина;
			
		ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"Родитель", Элемент.ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Группа номенклатуры'") + ":";
			Элементы.ДекорацияЗначениеОтбора.Заголовок = Элемент.ТекущиеДанные.Ссылка;
			Элементы.ГруппаОтбор.Видимость = Истина;
		КонецЕсли;
		
		РежимСопоставления = "ПоНоменклатуре";
		УстановитьРежимСопоставления(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизиты

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийСписок = Элементы["Список" + РежимСопоставления];
	
	СтрокаРеквизита = Элементы.Реквизиты.ТекущиеДанные;
	СтрокаСопоставления = ТекущийСписок.ТекущиеДанные;
	Если Поле.Имя = "РеквизитыСоответствие" Тогда
		СтандартнаяОбработка = Ложь;
		Если СтрокаРеквизита.ВозможноСопоставление Тогда
			ОбработчикЗакрытия  = Новый ОписаниеОповещения("ОбновитьСоответствие", ЭтотОбъект);
			ОбъектСопоставления = ТекущийВидНоменклатуры();
			ПараметрыОткрытия   = Новый Структура;
			ПараметрыОткрытия.Вставить("РеквизитОбъекта",                 СтрокаРеквизита.РеквизитОбъекта);
			ПараметрыОткрытия.Вставить("ОбъектСопоставления",             ОбъектСопоставления);
			ПараметрыОткрытия.Вставить("ТипЗначения",                     СтрокаРеквизита.ТипЗначения);
			ПараметрыОткрытия.Вставить("ИдентификаторКатегории",          СтрокаСопоставления.ИдентификаторКатегории);
			ПараметрыОткрытия.Вставить("ИдентификаторРеквизитаКатегории", СтрокаРеквизита.ИдентификаторРеквизитаКатегории);
			ПараметрыОткрытия.Вставить("ТолькоПросмотр",                  ЗапретРедактированиеРеквизитов);
			ПараметрыОткрытия.Вставить("СценарийИспользования",           СценарийИспользования);
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.СопоставлениеЗначенийСРубрикатором", ПараметрыОткрытия,,,,, ОбработчикЗакрытия);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "РеквизитыТипРеквизитаРубрикатора" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИдентификаторКатегории",          СтрокаСопоставления.ИдентификаторКатегории);
		ПараметрыОткрытия.Вставить("ИдентификаторРеквизитаКатегории", СтрокаРеквизита.ИдентификаторРеквизитаКатегории);
		ПараметрыОткрытия.Вставить("Категория",                       СтрокаСопоставления.Категория);
		ПараметрыОткрытия.Вставить("ТипРеквизитаРубрикатора",         СтрокаРеквизита.ТипРеквизитаРубрикатора);
		ПараметрыОткрытия.Вставить("ПредставлениеРеквизитаКатегории", СтрокаРеквизита.ПредставлениеРеквизитаКатегории);
		ПараметрыОткрытия.Вставить("СценарийИспользования",           СценарийИспользования);
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ПросмотрЗначений", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыРеквизитОбъектаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	ДанныеВыбора = Новый СписокЗначений;
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение списка выбора.
	Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Очистить();
	ПорядокСортировки = Новый СписокЗначений;
	ДоступныеЗначения = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокВыбораРеквизитов Цикл
		Если Реквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", ЭлементСписка.Значение)).Количество()
			И ТекущиеДанные.РеквизитОбъекта <> ЭлементСписка.Значение Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеЗначения.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Если СтрНайти(ЭлементСписка.Представление, ТекущиеДанные.ПредставлениеРеквизитаКатегории) > 0 Тогда
			// вхождение полного представления
			ПорядокСортировки.Добавить(ЭлементСписка.Значение, "999999");
		Иначе
			// расчет веса
			СловаПредставленияСервис = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТекущиеДанные.ПредставлениеРеквизитаКатегории);
			СловаПредставленияБаза   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЭлементСписка.Представление);
			ПовторяющиесяСлова       = РаботаСНоменклатуройСлужебныйКлиентСервер.ПересечениеМассивов(СловаПредставленияСервис, СловаПредставленияБаза);
			Вес                      = ПовторяющиесяСлова.Количество();
			Если Вес > 0 Тогда
				ПорядокСортировки.Добавить(ЭлементСписка.Значение, Формат(Вес, "ЧГ=0"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ДоступныеЗначения.Количество() Тогда
		Если ПорядокСортировки.Количество() Тогда
			ПорядокСортировки.СортироватьПоПредставлению();
			Для каждого ЭлементСписка Из ПорядокСортировки Цикл
				ЗначениеСписка = ДоступныеЗначения.НайтиПоЗначению(ЭлементСписка.Значение);
				ДоступныеЗначения.Сдвинуть(ЗначениеСписка, - ДоступныеЗначения.Индекс(ЗначениеСписка));
			КонецЦикла;
		КонецЕсли;
		
		Для каждого ЭлементСписка Из ДоступныеЗначения Цикл
			Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыРеквизитОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Реквизиты.ТекущиеДанные.РеквизитОбъекта = Неопределено
		ИЛИ Не ЗначениеЗаполнено(Элементы.Реквизиты.ТекущиеДанные.РеквизитОбъекта) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоВидам

&НаСервереБезКонтекста
Процедура СписокПоВидамПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НесопоставленныеВиды = Новый Массив;
	Для каждого Строка Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Значение.Данные.ИдентификаторКатегории) Тогда
			НесопоставленныеВиды.Добавить(Строка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеВидов.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидов.ПредставлениеКатегории КАК Категория
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидов
	|ГДЕ
	|	СоответствиеВидов.ВидНоменклатуры В(&НесопоставленныеВиды)
	|	И НЕ СоответствиеВидов.ЭтоЕдинственнаяЗапись
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("НесопоставленныеВиды", НесопоставленныеВиды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		КатегорииСоответствия = Новый Массив;
		ВыборкаДетали          = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			КатегорииСоответствия.Добавить(ВыборкаДетали.Категория);
		КонецЦикла;
		КатегорияПредставление = СтрСоединить(КатегорииСоответствия, ", ");
		Если СтрДлина(КатегорияПредставление) > 100 Тогда
			КатегорияПредставление = СтрШаблон("%1...", Лев(КатегорияПредставление, 97));
		КонецЕсли;
		
		КатегорияОбъекта = Новый Структура("Категория, ИдентификаторКатегории");
		КатегорияОбъекта.Категория = КатегорияПредставление;
		КатегорияОбъекта.ИдентификаторКатегории = "МножественнаяПривязкаКатегорий";
		
		ЗаполнитьЗначенияСвойств(Строки[Выборка.ВидНоменклатуры].Данные, КатегорияОбъекта);
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоВидамОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ПроверитьИзменитьОтборПоСсылке(СписокПоВидам, НовыйОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоНоменклатуре

&НаСервереБезКонтекста
Процедура СписокПоНоменклатуреПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ТаблицаВиды = РаботаСНоменклатурой.ИмяТаблицыПоТипу(Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип);
	Если НЕ ЗначениеЗаполнено(ТаблицаВиды) Тогда
		Возврат;
	КонецЕсли;
	
	НесопоставленныеВиды = Новый Массив;
	СтрокиДляОбработки   = Новый Соответствие;
	Для каждого Строка Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Значение.Данные.ИдентификаторКатегорииПоВидам)
			И ЗначениеЗаполнено(Строка.Значение.Данные.ВидНоменклатуры) Тогда
			НесопоставленныеВиды.Добавить(Строка.Значение.Данные.ВидНоменклатуры);
			СтрокиДляОбработки.Вставить(Строка.Ключ, Строка.Значение.Данные.ВидНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&НесопоставленныеВиды)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|				И НЕ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЭтоЕдинственнаяЗапись)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ВидыНоменклатуры", ТаблицаВиды);
	Запрос.УстановитьПараметр("НесопоставленныеВиды", НесопоставленныеВиды);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		Если Выборка.НайтиСледующий(Новый Структура("Ссылка", СтрокаДляОбработки.Значение)) Тогда
			Строка = Строки[СтрокаДляОбработки.Ключ];
			Строка.Данные.ИдентификаторКатегорииПоВидам = "МножественнаяПривязкаКатегорий";
			Если ПустаяСтрока(Строка.Данные.ИдентификаторКатегории) Тогда
				Строка.Данные.Категория = НСтр("ru = '<Уточнить категорию>'");
			КонецЕсли;
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоНоменклатуреОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		Результат = ДобавитьПроверитьНоменклатуруКВыгрузке(Организация, НовыйОбъект, НастройкаВыгрузки, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(Результат.ВидНоменклатуры) Тогда
			ПроверитьИзменитьОтборПоСсылке(СписокПоВидам, Результат.ВидНоменклатуры);
		КонецЕсли;
		ДлительнаяОперацияПроблемыЗаполнения = Результат.ДлительнаяОперацияПроблемыЗаполнения;
		ПроверитьСтатусОперацииПроблемыЗаполнения();
	Иначе
		ПроверитьИзменитьОтборПоСсылке(СписокПоНоменклатуре, НовыйОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроблемы

&НаКлиенте
Процедура ПроблемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Расшифровка   = РаботаСНоменклатуройСлужебныйКлиент.ЗначениеИзСтрокиJSON(ТекущиеДанные.РасшифровкаПроблемы);
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ОчиститьСообщения();
		
		Если Расшифровка.Проблемы.Количество() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНоменклатуры", ЭтотОбъект, ТекущиеДанные.Номенклатура);
			РаботаСНоменклатуройКлиентПереопределяемый.ПоказатьНезаполненныеДанныеНоменклатуры(ТекущиеДанные.Номенклатура, Расшифровка.Проблемы, ЭтотОбъект, ОписаниеОповещения);
		ИначеЕсли Расшифровка.Категории <> Истина Тогда
			Элементы.СтраницыПодготовкаКВыгрузке.ТекущаяСтраница = Элементы.СопоставлениеСРубрикатором;
			РежимСопоставленияНажатие(Элементы.РежимПоНоменклатуре);
			Элементы.СписокПоНоменклатуре.ТекущаяСтрока = ТекущиеДанные.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроблемыПослеУдаления(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница = Элементы.ПроблемНет
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьКатегорию(Команда)
	
	ТекущийСписок          = Элементы["Список" + РежимСопоставления];
	СтрокиДляОбработки     = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ТекущийСписок.ВыделенныеСтроки);
	ВыбраноСтрок           = СтрокиДляОбработки.Количество();
	Если ВыбраноСтрок = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбраны элементы для сопоставления'"));
		Возврат;
	КонецЕсли;
	ИдентификаторКатегории = ТекущийСписок.ТекущиеДанные.ИдентификаторКатегории;
	ВидНоменклатуры        = Неопределено;
	ТекстПредупреждения    = "";
	Если ВыбраноСтрок = 1 И ПродолжитьВыборКатегории(ТекущийСписок.ТекущиеДанные) = Ложь Тогда
		Возврат;
	ИначеЕсли СтрокиДляОбработки.Количество() > 1 Тогда
		Если РежимСопоставления = "ПоВидам" Тогда
			// нужно удалить все группы и множественные привязки
			Для ОбратныйИндекс = 1 По ВыбраноСтрок Цикл
				СтрокаДляОбработки = СтрокиДляОбработки[ВыбраноСтрок - ОбратныйИндекс];
				ДанныеСтроки = ТекущийСписок.ДанныеСтроки(СтрокаДляОбработки);
				Если ДанныеСтроки.ЭтоГруппа ИЛИ ДанныеСтроки.ИдентификаторКатегории = "МножественнаяПривязкаКатегорий" Тогда
					СтрокиДляОбработки.Удалить(ВыбраноСтрок - ОбратныйИндекс);
				ИначеЕсли ИдентификаторКатегории = "МножественнаяПривязкаКатегорий" ИЛИ ПустаяСтрока(ИдентификаторКатегории) Тогда 
					ИдентификаторКатегории = ДанныеСтроки.ИдентификаторКатегории;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли РежимСопоставления = "ПоНоменклатуре" Тогда
			ВидыНоменклатуры = Новый Соответствие;
			Для ОбратныйИндекс = 1 По ВыбраноСтрок Цикл
				СтрокаДляОбработки = СтрокиДляОбработки[ВыбраноСтрок - ОбратныйИндекс];
				ДанныеСтроки = ТекущийСписок.ДанныеСтроки(СтрокаДляОбработки);
				Если ИзменениеКатегорииНоменклатурыЗапрещено(ДанныеСтроки) Тогда 
					// сопоставлено на верхнем уровне, прямое сопоставление запрещено
					СтрокиДляОбработки.Удалить(ВыбраноСтрок - ОбратныйИндекс);
				ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ВидНоменклатуры) И ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторКатегорииПоВидам) Тогда
					// Заполнен вид и вид сопоставлен.
					// Выполняем группировку по видам, чтобы узнать, сколько различных видов попадает в выделение.
					Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
						ВидНоменклатуры = ДанныеСтроки.ВидНоменклатуры;
					КонецЕсли;
					Если ВидыНоменклатуры.Получить(ДанныеСтроки.ВидНоменклатуры) = Неопределено Тогда
						ВидыНоменклатуры.Вставить(ДанныеСтроки.ВидНоменклатуры, Новый Массив);
					КонецЕсли;
					ВидыНоменклатуры[ДанныеСтроки.ВидНоменклатуры].Добавить(СтрокаДляОбработки);
					СтрокиДляОбработки.Удалить(ВыбраноСтрок - ОбратныйИндекс);
				КонецЕсли;
			КонецЦикла;
			ЗадатьВопрос = Ложь;
			Если НЕ СтрокиДляОбработки.Количество() И ВидыНоменклатуры.Количество()Тогда
				СтрокиДляОбработки = ВидыНоменклатуры.Получить(ВидНоменклатуры);
				ЗадатьВопрос       = Истина;
			Иначе 
				ВидНоменклатуры = Неопределено;
			КонецЕсли;
			Если СтрокиДляОбработки.Количество() Тогда
				Для каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
					ИдентификаторКатегории = ТекущийСписок.ДанныеСтроки(СтрокаДляОбработки).ИдентификаторКатегории ;
					Если ИдентификаторКатегории <> "МножественнаяПривязкаКатегорий" И НЕ ПустаяСтрока(ИдентификаторКатегории) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе 
				ПродолжитьВыборКатегории(ТекущийСписок.ТекущиеДанные);
				Возврат;
			КонецЕсли;
			Если ЗадатьВопрос Тогда
				ТекстПредупреждения = НСтр("ru = 'Некоторая выделенная номенклатура относится к разным видам номенклатуры, которые сопоставлены с разными категориям.
				|Выбор категории применится не ко всей номенклатуре.'");
				Если НЕ ИспользоватьЧастичноеСопоставлениеБезВопроса Тогда
					ДанныеДляВопроса = Новый Структура;
					ДанныеДляВопроса.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
					ДанныеДляВопроса.Вставить("СтрокиДляОбработки",     СтрокиДляОбработки);
					ДанныеДляВопроса.Вставить("ВидНоменклатуры",        ВидНоменклатуры);
					ДанныеДляВопроса.Вставить("ТекстПредупреждения",    ТекстПредупреждения);
					Кнопки           = Новый СписокЗначений;
					Оповещение       = Новый ОписаниеОповещения("ОбработатьОтветПередВыборомКатегории", ЭтотОбъект, ДанныеДляВопроса);
					ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
					Кнопки.Добавить(Истина, НСтр("ru = 'Продолжить'"));
					Кнопки.Добавить(Ложь, НСтр("ru = 'Отмена'"));
					ПараметрыВопроса.Заголовок = НСтр("ru = 'Не вся выбранная номенклатура может быть обработана'");
					ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
					
					ТекстВопроса = НСтр("ru = 'Некоторая выделенная номенклатура относится к разным видам номенклатуры, которые сопоставлены с разными категориями сервиса, поэтому уточнение категорий для этой номенклатуры невозможно.
					|
					|Если продолжить, то выбор категории применится не ко всей выделенной номенклатуре.
					|
					|Продолжить?'");
					
					СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РежимСопоставления = "ПоНоменклатуре" И ТекущийСписок.ТекущиеДанные.ИдентификаторКатегорииПоВидам = "МножественнаяПривязкаКатегорий" Тогда
		ВидНоменклатуры = ТекущийСписок.ТекущиеДанные.ВидНоменклатуры;
	КонецЕсли;
	
	Если СтрокиДляОбработки.Количество() = 0 Тогда
		ПродолжитьВыборКатегории(ТекущийСписок.ТекущиеДанные);
		Возврат;
	КонецЕсли;
	
	ВыбратьКатегориюСервиса(ИдентификаторКатегории, СтрокиДляОбработки, ВидНоменклатуры,, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКатегорию(Команда)
	
	ТекущийСписок = Элементы["Список" + РежимСопоставления];
	
	Если ТекущийСписок.ВыделенныеСтроки.Количество() <> 0 Тогда
		РежимУдаления = Истина;
		Отказ = Ложь;
		Если РежимСопоставления = "ПоВидам" Тогда
			ОбъектыСопоставления = Новый Массив;
			Для каждого ВыделеннаяСтрока Из ТекущийСписок.ВыделенныеСтроки Цикл
				ДанныеСтроки = Элементы.СписокПоВидам.ДанныеСтроки(ВыделеннаяСтрока);
				Если ДанныеСтроки.ИдентификаторКатегории <> "МножественнаяПривязкаКатегорий" Тогда 
					ОбъектыСопоставления.Добавить(ВыделеннаяСтрока);
				КонецЕсли;
			КонецЦикла;
			Если ОбъектыСопоставления.Количество() = 0 Тогда
				Возврат
			КонецЕсли;
		ИначеЕсли РежимСопоставления = "ПоНоменклатуре" Тогда
			ОбъектыСопоставления = Новый Массив;
			Для каждого ВыделеннаяСтрока Из ТекущийСписок.ВыделенныеСтроки Цикл
				ДанныеСтроки = ТекущийСписок.ДанныеСтроки(ВыделеннаяСтрока);
				Если ИзменениеКатегорииНоменклатурыЗапрещено(ДанныеСтроки) Тогда
					Продолжить;
				КонецЕсли;
				ОбъектыСопоставления.Добавить(ВыделеннаяСтрока);
			КонецЦикла;
			Если ОбъектыСопоставления.Количество() = 0 Тогда
				Возврат
			КонецЕсли;
		Иначе 
			ОбъектыСопоставления = ТекущийСписок.ВыделенныеСтроки;
		КонецЕсли;
		РаботаСНоменклатуройСлужебныйВызовСервера.ОчиститьСопоставлениеКатегорий(ОбъектыСопоставления, Отказ);
		
		Если Не Отказ Тогда
			ТекущийСписок.Обновить();
			КатегорияРеквизитов = "";
			ОбновитьРеквизитыСервиса();
			Оповестить("ТорговыеПредложение_СопоставлениеНоменклатуры");
		КонецЕсли;
		
		Если ЭтоВыгрузкаВНациональныйКаталог
			И ЗначениеЗаполнено(Организация) Тогда
			ЗапуститьОбновлениеПроблемЗаполнения(ТекущийСписок.ВыделенныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РеквизитОбъекта = Неопределено;
	ПриИзмененииРеквизитаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияНоменклатура(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоНоменклатуре";
	ОбновитьКатегориюСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияВидНоменклатуры(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоВидам";
	КатегорииНоменклатуры.Свойство("КатегорияПоВидам", КатегорияСервиса);
	Элементы.КатегорияСервиса.Шрифт          = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста     = Новый Цвет;
	Элементы.КатегорияСервиса.ТолькоПросмотр = Ложь;
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставленияРодитель(Команда)
	Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы[Команда.Имя].Заголовок;
	РежимСопоставления = "ПоИерархии";
	КатегорииНоменклатуры.Свойство("КатегорияПоИерархии", КатегорияСервиса);
	Элементы.КатегорияСервиса.Шрифт          = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста     = Новый Цвет;
	Элементы.КатегорияСервиса.ТолькоПросмотр = Ложь;
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПроблемНетНажатие(Элемент)
	Закрыть(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНеСопоставлена(Команда)
	УстановитьОтборНоменклатуры(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСопоставлена(Команда)
	УстановитьОтборНоменклатуры(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеУстановлен(Команда)
	УстановитьОтборНоменклатуры(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыАвтоматически(Команда)
	
	ИзмененныеСтроки       = Новый Массив;
	СоответствиеРеквизитов = Новый Массив;
	Для каждого Реквизит Из Реквизиты Цикл
		Если НЕ ЗначениеЗаполнено(Реквизит.РеквизитОбъекта) Тогда
			ВсегоЗначений = Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Количество();
			Если ВсегоЗначений = 0 Тогда
				Прервать;
			КонецЕсли;
			ПредставлениеРеквизитаКатегории = Реквизит.ПредставлениеРеквизитаКатегории;
			Если ЗначениеЗаполнено(Реквизит.ЕдиницаИзмерения) Тогда
				ПредставлениеРеквизитаКатегории = Лев(ПредставлениеРеквизитаКатегории, СтрДлина(ПредставлениеРеквизитаКатегории)
				- СтрДлина(", " + Реквизит.ЕдиницаИзмерения));
			КонецЕсли;
			ПредставлениеРеквизитаКатегории = ВРег(СокрЛП(ПредставлениеРеквизитаКатегории));
			Для ОбратныйИндекс = 1 По ВсегоЗначений Цикл
				ТекущееЗначение = Элементы.РеквизитыРеквизитОбъекта.СписокВыбора[ВсегоЗначений - ОбратныйИндекс];
				Если ВРег(СокрЛП(ТекущееЗначение.Представление)) = ПредставлениеРеквизитаКатегории Тогда
					Реквизит.РеквизитОбъекта = ТекущееЗначение.Значение;
					Элементы.РеквизитыРеквизитОбъекта.СписокВыбора.Удалить(ВсегоЗначений - ОбратныйИндекс);
					ИзмененныеСтроки.Добавить(Реквизит.ПолучитьИдентификатор());
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Реквизит.ВозможноСопоставление Тогда
			ОписаниеРеквизита = Новый Структура("РеквизитОбъекта, ИдентификаторРеквизитаКатегории");
			ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, Реквизит);
			СоответствиеРеквизитов.Добавить(ОписаниеРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененныеСтроки.Количество() ИЛИ СоответствиеРеквизитов.Количество() Тогда
		ДлительнаяОперация = Неопределено;
		
		СохранитьИзмененияРеквизитовНаСервере(ИзмененныеСтроки, СоответствиеРеквизитов, 
			ТекущийВидНоменклатуры(), ТекущаяКатегорияСервиса());
		
		Если ТипЗнч(ДлительнаяОперация) = Тип("Структура") И ДлительнаяОперация.Свойство("Статус") Тогда
			Если ДлительнаяОперация.Статус = "Выполнено" Тогда
				АвтоматическоеЗаполнениеРеквизитовЗавершение(ДлительнаяОперация, КатегорияРеквизитов);
			Иначе 
				ОповещениеОЗавершении = Новый ОписаниеОповещения("АвтоматическоеЗаполнениеРеквизитовЗавершение", ЭтотОбъект, КатегорияРеквизитов);
				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
				ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
				ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
				ПараметрыОжидания.ВыводитьСообщения = Ложь;
				ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	Закрыть(Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница <> Элементы.ПроблемНет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьРеквизитыСервиса()
	
	ТекстЗаголовка = НСтр("ru = 'Сопоставление реквизитов номенклатуры'");
	ТребуетсяОбновлениеРеквизитов = Ложь;
	
	Если ПустаяСтрока(РежимСопоставления) Тогда
		КатегорияРеквизитов = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры             = Новый Структура;
	ЗапретРедактированиеРеквизитов = Ложь;
	НоваяКатегорияРеквизитов       = ТекущаяКатегорияСервиса();
	ПараметрыПроцедуры.Вставить("ИдентификаторКатегории", НоваяКатегорияРеквизитов);
	
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ПараметрыПроцедуры.Вставить("Ссылка", КатегорииНоменклатуры.ВидНоменклатуры);
		ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 (не обязательно)'"), ТекстЗаголовка);
	Иначе
		ТекущиеДанные = Элементы["Список" + РежимСопоставления].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			КатегорияРеквизитов = "";
			Реквизиты.Очистить();
			Возврат;
		КонецЕсли;
		Если РежимСопоставления = "ПоВидам" И НоваяКатегорияРеквизитов = "МножественнаяПривязкаКатегорий" Тогда
			КатегорияРеквизитов = НоваяКатегорияРеквизитов;
			Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаПредупреждения;
			Возврат;
		КонецЕсли;
		
		Если РежимСопоставления = "ПоНоменклатуре" Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.ВидНоменклатуры);
			ЗапретРедактированиеРеквизитов = ИзменениеКатегорииНоменклатурыЗапрещено(ТекущиеДанные);
			Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКатегорииПоВидам) 
				И ТекущиеДанные.ИдентификаторКатегорииПоВидам <> "МножественнаяПривязкаКатегорий" Тогда
				ТекстЗаголовка = НСтр("ru = 'Сопоставленные реквизиты по виду номенклатуры'");
			КонецЕсли;
		ИначеЕсли РежимСопоставления = "ПоВидам" Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", ТекущиеДанные.Ссылка);
		ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
			ПараметрыПроцедуры.Вставить("Ссылка", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если КатегорияРеквизитов <> НоваяКатегорияРеквизитов Тогда
		КатегорияРеквизитов = НоваяКатегорияРеквизитов;
		ТребуетсяОбновлениеРеквизитов = Истина;
	КонецЕсли;
	
	Если ПараметрыПроцедуры.Ссылка <> ВидНоменклатурыСопоставления Тогда
		ВидНоменклатурыСопоставления = ПараметрыПроцедуры.Ссылка;
		ТребуетсяОбновлениеРеквизитов = Истина;
	КонецЕсли;
	
	Если Элементы.ЗаголовокТаблицыРеквизитов.Заголовок <> ТекстЗаголовка Тогда 
		Элементы.ЗаголовокТаблицыРеквизитов.Заголовок = ТекстЗаголовка;
	КонецЕсли;
		
	Если Элементы.Реквизиты.ТолькоПросмотр <> ЗапретРедактированиеРеквизитов Тогда
		ТребуетсяОбновлениеРеквизитов = Истина;
		Элементы.Реквизиты.ТолькоПросмотр = ЗапретРедактированиеРеквизитов;
		Элементы.РеквизитыРеквизитОбъекта.КартинкаШапки =
			?(ЗапретРедактированиеРеквизитов, Новый Картинка, БиблиотекаКартинок.Изменить);
		Элементы.РеквизитыСоответствие.КартинкаШапки =
			?(ЗапретРедактированиеРеквизитов, Новый Картинка, БиблиотекаКартинок.Изменить);
		Элементы.РеквизитыЗаполнитьРеквизитыАвтоматически.Доступность = НЕ ЗапретРедактированиеРеквизитов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КатегорияРеквизитов) Тогда
		Реквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяОбновлениеРеквизитов Тогда
		Возврат
	КонецЕсли;
	
	Если ИдентификаторЗаданияОбновленияРеквизитов <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбновленияРеквизитов);
	КонецЕсли;
	
	Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаДлительногоОжидания;
	
	ПараметрыПроцедуры.Вставить("ПолучитьСопоставленныеФормализованныеРеквизиты", ЭтоВыгрузкаВНациональныйКаталог);
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование       = НСтр("ru = '1С:Номенклатура. Получение реквизитов рубрикатора'");
	Задание.ИмяПроцедуры       = "РаботаСНоменклатурой.ПолучитьРеквизитыРубрикатора";
	Задание.ПараметрыПроцедуры = ПараметрыПроцедуры;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = Задание.Наименование;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ВыполнитьЗаданиеВФоне(Задание, УникальныйИдентификатор);
	
	Если СписокВыбораРеквизитов.Количество() Тогда
		СписокВыбораРеквизитов.Очистить();
	КонецЕсли;
	
	ИдентификаторЗаданияОбновленияРеквизитов = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыПроцедуры.Вставить("ИдентификаторЗадания", ИдентификаторЗаданияОбновленияРеквизитов);
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ОбновитьРеквизитыСервисаЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитаОбъекта()
	
	ТекущаяСтрока = Элементы.Реквизиты.ТекущаяСтрока;
	Если ТипЗнч(ТекущаяСтрока) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСопоставлениеРеквизитов(ТекущаяСтрока, ТекущийВидНоменклатуры());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаРеквизитов;
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		// Обновление реквизитов.
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И КатегорияРеквизитов = ДополнительныеПараметры.ИдентификаторКатегории
			И ИдентификаторЗаданияОбновленияРеквизитов = ДополнительныеПараметры.ИдентификаторЗадания Тогда
			
			ЗаполнитьСопоставлениеРеквизитов(Результат.АдресРезультата);
		КонецЕсли;
		ИдентификаторЗаданияОбновленияРеквизитов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопоставлениеРеквизитов(АдресРезультата)
	
	Результат = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если Результат = Неопределено Тогда
		СписокВыбораРеквизитов.Очистить();
		Реквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Результат.СопоставленныеРеквизиты.Количество() Тогда
		СписокВыбораРеквизитов.Очистить();
		Для Каждого СтрокаРеквизита Из Результат.СопоставленныеРеквизиты Цикл
			Если СписокВыбораРеквизитов.НайтиПоЗначению(СтрокаРеквизита.РеквизитОбъекта) = Неопределено Тогда
				СписокВыбораРеквизитов.Добавить(СтрокаРеквизита.РеквизитОбъекта, СтрокаРеквизита.Представление);
			КонецЕсли;
			СписокВыбораРеквизитов.СортироватьПоПредставлению();
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ОбязательныеРеквизиты) = Тип("Структура") Тогда
		РеквизитыРубрикатора = Результат.РеквизитыРубрикатора;
		Если ТипЗнч(РеквизитыРубрикатора) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;
		РеквизитыРубрикатора.Колонки.Добавить("ОбязательныйРеквизит", Новый ОписаниеТипов("Булево"));
		КатегорияКлюч = СтрШаблон("Категория%1", КатегорияРеквизитов);
		Если ОбязательныеРеквизиты.Свойство(КатегорияКлюч) Тогда
			Атрибуты = ОбязательныеРеквизиты[КатегорияКлюч];
		Иначе 
			Атрибуты = Неопределено;
		КонецЕсли;
		Если ТипЗнч(Атрибуты) = Тип("Массив") Тогда
			Для каждого Атрибут Из Атрибуты Цикл
				Если ТипЗнч(Атрибут) <> Тип("Структура") 
					ИЛИ НЕ Атрибут.Свойство("ИдентификаторРеквизитаКатегории") 
					ИЛИ НЕ Атрибут.Свойство("ФормализованныйРеквизит")Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(Атрибут.ИдентификаторРеквизитаКатегории) Тогда
					КлючПоиска         = Новый Структура("ИдентификаторРеквизитаКатегории", Атрибут.ИдентификаторРеквизитаКатегории);
					НайденныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(КлючПоиска);
				ИначеЕсли ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) Тогда
					КлючПоиска         = Новый Структура("ФормализованныйРеквизит", Атрибут.ФормализованныйРеквизит);
					НайденныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(КлючПоиска);
				Иначе
					НайденныеРеквизиты = Новый Массив;
				КонецЕсли;
				Если НайденныеРеквизиты.Количество() > 0 Тогда
					Для каждого ОписаниеРеквизита Из НайденныеРеквизиты Цикл
						ОписаниеРеквизита.ОбязательныйРеквизит = Истина;
						РеквизитыРубрикатора.Сдвинуть(ОписаниеРеквизита, - РеквизитыРубрикатора.Индекс(ОписаниеРеквизита));
						Если НЕ ЗначениеЗаполнено(ОписаниеРеквизита.ТипРеквизитаРубрикатора) 
							И Атрибут.Свойство("ТипРеквизитаРубрикатора") Тогда
							ОписаниеРеквизита.ТипРеквизитаРубрикатора = Атрибут.ТипРеквизитаРубрикатора;
						КонецЕсли;
						Если ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) 
							И ЗначениеЗаполнено(Атрибут.ПредставлениеРеквизитаКатегории) Тогда
							ОписаниеРеквизита.ПредставлениеРеквизитаКатегории = Атрибут.ПредставлениеРеквизитаКатегории;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(Атрибут.ФормализованныйРеквизит) Тогда
					ОписаниеРеквизита = РеквизитыРубрикатора.Вставить(0);
					ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, Атрибут);
					ОписаниеРеквизита.ОбязательныйРеквизит = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// найти и удалить необязательные для заполнения формализованные реквизиты
		НеОбязательныеРеквизиты = РеквизитыРубрикатора.НайтиСтроки(Новый Структура("ОбязательныйРеквизит", Ложь));
		Для каждого НеОбязательныйРеквизит Из НеОбязательныеРеквизиты Цикл
			Если ЗначениеЗаполнено(НеОбязательныйРеквизит.ФормализованныйРеквизит) Тогда
				РеквизитыРубрикатора.Удалить(НеОбязательныйРеквизит);
			КонецЕсли;
		КонецЦикла;
		Реквизиты.Загрузить(РеквизитыРубрикатора);
	Иначе 
		Реквизиты.Загрузить(Результат.РеквизитыРубрикатора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗаданиеВФоне(Знач Задание, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИнтеграцияБСПБЭД.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюСервиса(ИдентификаторКатегории, СсылкаНаОбъект, ВидНоменклатуры = Неопределено, Оповещение = Неопределено, ТекстПредупреждения = "")
	
	ОчиститьСообщения();
	
	Если Оповещение = Неопределено Тогда
		ПараметрыОповещения = Новый Структура("СсылкаНаОбъект, ТекущийЭлементИмя", СсылкаНаОбъект, ЭтотОбъект.ТекущийЭлемент.Имя);
		Оповещение = Новый ОписаниеОповещения("ВыбратьКатегориюСервисаПродолжение", ЭтотОбъект, ПараметрыОповещения);
	КонецЕсли;
	
	ПараметрыФормыВыбора = РаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиКатегорий();
	ПараметрыФормыВыбора.ОдиночныйРежимВыбора      = Истина;
	ПараметрыФормыВыбора.РежимВыбораКатегорий      = Истина;
	Если СценарийИспользования = "ПубликацияТорговыхПредложенийБезКонтекста" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории товаров 1С:Бизнес-сеть'");
	ИначеЕсли СценарийИспользования = "ПубликацияТорговыхПредложений" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории товаров 1С:Бизнес-сеть'");
	ИначеЕсли СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории рубрикатора 1С:Номенклатура'");
	ИначеЕсли СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ПараметрыФормыВыбора.ЗаголовокФормы = НСтр("ru = 'Выбор категории рубрикатора 1С:Номенклатура'");
	Иначе
		ПараметрыФормыВыбора.ЗаголовокФормы = "";
	КонецЕсли;
	Если Не ПустаяСтрока(ИдентификаторКатегории) Тогда
		ПараметрыФормыВыбора.ИдентификаторыВыбранныхКатегорий.Добавить(ИдентификаторКатегории);
	КонецЕсли;
	
	ПараметрыФормыВыбора.ЭтоВыгрузкаВНациональныйКаталог = ЭтоВыгрузкаВНациональныйКаталог;
	Если ЭтоВыгрузкаВНациональныйКаталог И ТипЗнч(ОбязательныеРеквизиты) = Тип("Структура") И ОбязательныеРеквизиты.Количество() > 0 Тогда
		Для каждого Категория Из ОбязательныеРеквизиты Цикл
			ПараметрыФормыВыбора.ИдентификаторыВыбранныхКатегорий.Вставить(0, СтрЗаменить(Категория.Ключ, "Категория", ""));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормыВыбора.СсылкаНаОбъект      = СсылкаНаОбъект;
	ПараметрыФормыВыбора.ВидНоменклатуры     = ВидНоменклатуры;
	ПараметрыФормыВыбора.ТекстПредупреждения = ТекстПредупреждения;
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаКатегорий", ПараметрыФормыВыбора,,,,, Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюСервисаПродолжение(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ПараметрыВыбора.СсылкаНаОбъект;
	
	Если ТипЗнч(СсылкаНаОбъект) <> Тип("Массив") Тогда
		СсылкаНаОбъект = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект);
	КонецЕсли;
	
	Если Результат.ВыбранныеОбъекты.Количество() > 0 Тогда
		
		Отказ = Ложь;
		РаботаСНоменклатуройСлужебныйВызовСервера.ЗаписатьЗначениеСопоставления(СсылкаНаОбъект, Результат.ВыбранныеОбъекты[0], Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Элементы[ПараметрыВыбора.ТекущийЭлементИмя].Обновить();
		КатегорияРеквизитов = "";
		ОбновитьРеквизитыСервиса();
		
	КонецЕсли;
	
	Оповестить("ТорговыеПредложение_СопоставлениеНоменклатуры");
	
	Если ЭтоВыгрузкаВНациональныйКаталог И ЗначениеЗаполнено(Организация) Тогда
		ЗапуститьОбновлениеПроблемЗаполнения(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоответствие(Результат, ПараметрыОбработчика) Экспорт
	
	// Обновление данных по строке.
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	ТекущиеДанные.Сопоставлено = СоответствиеЗначенийВСтроке(ТекущийВидНоменклатуры(), ТекущиеДанные.РеквизитОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеЗначенийВСтроке(Знач ОбъектСопоставления, Знач РеквизитОбъекта)
	
	РасчетСоответствий = РаботаСНоменклатуройСлужебный.РасчетСоответствийЗначенийРеквизитов(ОбъектСопоставления, РеквизитОбъекта);
	
	Если РасчетСоответствий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РасчетСоответствий[0];
	
	Результат = РаботаСНоменклатуройСлужебный.ТекстКоличествоСопоставленныхЗначений(
		Выборка.КоличествоСопоставленныхРеквизитов, Выборка.КоличествоЗначенийРеквизита);

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьСопоставлениеРеквизитов(ТекущаяСтрока, Знач ВидНоменклатуры)
	
	ДанныеСтроки            = Реквизиты.НайтиПоИдентификатору(ТекущаяСтрока);
	РеквизитОбъекта         = ДанныеСтроки.РеквизитОбъекта;
	ФормализованныйРеквизит = Неопределено;
	ТипВидНоменклатуры      = Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип;
	Если НЕ ТипВидНоменклатуры.СодержитТип(ТипЗнч(ВидНоменклатуры)) Тогда
		ВидНоменклатуры = ТипВидНоменклатуры.ПривестиЗначение();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "ФормализованныйРеквизит") Тогда
		ФормализованныйРеквизит = ДанныеСтроки.ФормализованныйРеквизит;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторРеквизитаКатегории) Тогда
		// сопоставление доп. реквизиту сервиса - отбор по идентификатору
		СоответствиеРеквизитов = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		СоответствиеРеквизитов.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		СоответствиеРеквизитов.Отбор.ИдентификаторРеквизитаКатегории.Установить(ДанныеСтроки.ИдентификаторРеквизитаКатегории);
		Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
			ЗаписьРегистра = СоответствиеРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСтроки);
			ЗаписьРегистра.ОбъектСопоставления = ВидНоменклатуры;
		КонецЕсли;
		СоответствиеРеквизитов.Записать();
	ИначеЕсли ФормализованныйРеквизит <> Неопределено Тогда
		// сопоставление формализованному реквизиту
		
		НачатьТранзакцию();
		Попытка
			ДобавитьЗапись = ЗначениеЗаполнено(РеквизитОбъекта);
			
			// 1. очистка существующих записей
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта,
			|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории
			|ИЗ
			|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
			|ГДЕ
			|	СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ОбъектСопоставления
			|	И СоответствиеРеквизитовРаботаСНоменклатурой.ФормализованныйРеквизит = &ФормализованныйРеквизит";
			
			Запрос.УстановитьПараметр("ОбъектСопоставления", ВидНоменклатуры);
			Запрос.УстановитьПараметр("ФормализованныйРеквизит", ФормализованныйРеквизит);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.РеквизитОбъекта = РеквизитОбъекта Тогда
					ДобавитьЗапись = Ложь;
					Если ЗначениеЗаполнено(Выборка.РеквизитОбъекта) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ОчисткаСопоставления = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
				ОчисткаСопоставления.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
				ОчисткаСопоставления.Отбор.РеквизитОбъекта.Установить(Выборка.РеквизитОбъекта);
				ОчисткаСопоставления.Отбор.ИдентификаторРеквизитаКатегории.Установить(
				Выборка.ИдентификаторРеквизитаКатегории);
				ОчисткаСопоставления.Записать();
			КонецЦикла;
			
			// 2. запись нового сопоставления, если требуется
			Если ДобавитьЗапись Тогда
				ЗаписьРегистра = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСтроки);
				ЗаписьРегистра.ОбъектСопоставления = ВидНоменклатуры;
				ЗаписьРегистра.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Ошибка записи сопоставления:'") + " " + ИнформацияОбОшибке().Описание;
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.Работа с номенклатурой'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			Возврат;
		КонецПопытки;
	Иначе
		// Нештатная ситуация
		// реквизит ИБ может быть сопоставлен либо доп.реквизиту сервиса, либо формализованному реквизиту
		// если не заполнены оба эти параметра, такой строки в таблице быть не должно
		Реквизиты.Удалить(ТекущаяСтрока);
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТипЗначенияРеквизиты  = Метаданные.ОпределяемыеТипы.ЗначенияСвойствОбъектовРаботаСНоменклатурой.Тип;
	ТипЗначения           = Неопределено;
	ВозможноСопоставление = Ложь;
	Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
		СоответствиеРеквизитов = Новый Соответствие;
		РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СоответствиеРеквизитов);
		ОписаниеРеквизита = СоответствиеРеквизитов.Получить(РеквизитОбъекта);
		Если ТипЗнч(ОписаниеРеквизита) = Тип("Структура") Тогда
			ОписаниеРеквизита.Свойство("ТипЗначения", ТипЗначения);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитОбъекта, "ТипЗначения") Тогда 
			ТипЗначения = РеквизитОбъекта.ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗначения = ТипЗначенияРеквизиты Тогда
		ВозможноСопоставление = Истина;
	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("Тип") И ТипЗначенияРеквизиты.СодержитТип(ТипЗначения) Тогда
		ВозможноСопоставление = Истина;
	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда 
		Для каждого ТекущийТипЗначения Из ТипЗначения.Типы() Цикл
			Если ТипЗначенияРеквизиты.СодержитТип(ТекущийТипЗначения) Тогда
				ВозможноСопоставление = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВозможноСопоставление = ВозможноСопоставление И (ДанныеСтроки.ТипРеквизитаРубрикатора = "Список");
	
	ДанныеСтроки.ТипЗначения           = ТипЗначения;
	ДанныеСтроки.ВозможноСопоставление = ВозможноСопоставление;
	ДанныеСтроки.Сопоставлено          = ?(ВозможноСопоставление, СоответствиеЗначенийВСтроке(ВидНоменклатуры, РеквизитОбъекта), "");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияРеквизитовНаСервере(ИзмененныеСтроки, Знач СоответствиеРеквизитов, Знач ПараметрВидНоменклатуры, Знач ПараметрИдентификаторКатегории)
	
	Для каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		СохранитьСопоставлениеРеквизитов(ИзмененнаяСтрока, ПараметрВидНоменклатуры);
		
		ПараметрыТекущегоРеквизита = Реквизиты.НайтиПоИдентификатору(ИзмененнаяСтрока);
		Если ПараметрыТекущегоРеквизита.ВозможноСопоставление Тогда
			ОписаниеРеквизита = Новый Структура("РеквизитОбъекта, ИдентификаторРеквизитаКатегории");
			ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ПараметрыТекущегоРеквизита);
			СоответствиеРеквизитов.Добавить(ОписаниеРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствиеРеквизитов.Количество() Тогда
		Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаДлительногоОжидания;
		
		НаименованиеЗадания = НСтр("ru = 'Работа с номенклатурой. Автоматическое сопоставление значений реквизитов'");
		ИмяМетода           = "РаботаСНоменклатуройСлужебный.СопоставитьЗначенияРеквизитовАвтоматически";
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, СоответствиеРеквизитов, 
		ПараметрВидНоменклатуры, ПараметрИдентификаторКатегории);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Надпись <Укажите реквизит>.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретРедактированиеРеквизитов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Укажите реквизит>'"));
	
	// Надпись <Автоматически>.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыСоответствие.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ВозможноСопоставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Автоматически>'"));
	
	// Подчиненные по группам и видам номенклатуры (выделение серым).
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоНоменклатуреКатегорияБезГиперссылки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ГруппаЭлементов = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегории");
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегорииПоВидам");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегории");
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегорииПоИерархии");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтРаботаСНоменклатурой);
	
	// Переопределение значений выводе реквизитов сопоставления.
	СписокРеквизитов = Новый Соответствие;
	РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СписокРеквизитов);
	
	Для Каждого ДоступныйРеквизит Из СписокРеквизитов Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ДоступныйРеквизит.Значение.ПутьКДанным;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ДоступныйРеквизит.Значение.Представление);
	КонецЦикла;
	
	// Установка видимости колонок с гиперссылками и без них
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоНоменклатуреКатегорияБезГиперссылки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоНоменклатуреКатегорияГиперссылка.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоНоменклатуре.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоВидамКатегорияБезГиперссылки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоВидам.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоВидамКатегорияГиперссылка.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоВидам.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоИерархииКатегорияБезГиперссылки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоИерархии.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоИерархииКатегорияГиперссылка.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоИерархии.ИдентификаторКатегории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ДобавитьУсловноеОформлениеВРежимеВыгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеВРежимеВыгрузки()
	Если СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеГиперссылка.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеГиперссылка.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеБезГиперссылки.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроблемыОписаниеБезГиперссылки.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проблемы.ЭтоОшибка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;

	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Реквизиты.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ОбязательныйРеквизит");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Реквизиты.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ОбязательныйРеквизит");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",
			ЦветаСтиля.ПоясняющийОшибкуТекст);

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыРеквизитОбъекта.Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ОбязательныйРеквизит");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.РеквизитОбъекта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьРежимСопоставления(Интерактивно = Ложь, ТекущаяСтрока = Неопределено)
	
	Элементы.ГруппаРежимПоВидам.ЦветФона        = ?(РежимСопоставления = "ПоВидам", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	Элементы.ГруппаРежимПоИерархии.ЦветФона     = ?(РежимСопоставления = "ПоИерархии", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	Элементы.ГруппаРежимПоНоменклатуре.ЦветФона = ?(РежимСопоставления = "ПоНоменклатуре", ЦветаСтиля.ЦветФонаШапкиТаблицы, ЦветаСтиля.ЦветФонаФормы);
	
	Элементы.РежимПоВидам.Гиперссылка        = ?(РежимСопоставления <> "ПоВидам", Истина, Ложь);
	Элементы.РежимПоИерархии.Гиперссылка     = ?(РежимСопоставления <> "ПоИерархии", Истина, Ложь);
	Элементы.РежимПоНоменклатуре.Гиперссылка = ?(РежимСопоставления <> "ПоНоменклатуре", Истина, Ложь);
	
	Если РежимСопоставления = "ПоВидам" Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоВидам;
	ИначеЕсли РежимСопоставления = "ПоИерархии" Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоИерархии;
	ИначеЕсли РежимСопоставления = "ПоНоменклатуре" Тогда
		
		Если Не Интерактивно Тогда
			// Очистка отбора.
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"ВидНоменклатуры", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
				"Родитель", Неопределено, ВидСравненияКомпоновкиДанных.Равно,, Ложь);
			Элементы.ГруппаОтбор.Видимость = Ложь;
		КонецЕсли;
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоНоменклатуре;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Элементы["Список" + РежимСопоставления].ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Если Интерактивно Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой",
			"СопоставлениеНоменклатуры\РежимСопоставления", РежимСопоставления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьОтборНажатие(Элемент)
	
	РежимСопоставления = "ПоНоменклатуре";
	УстановитьРежимСопоставления(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ЗапуститьПроверкуГотовностиНоменклатурнойПозиции(ДополнительныеПараметры);
	ИначеЕсли СценарийИспользования = "ВыгрузкаНоменклатуры" Тогда
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры);
		ЗапуститьОбновлениеПроблемЗаполнения(МассивСсылок, "ПоНоменклатуре");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуКРаботеВРежимеВыгрузкиНоменклатуры(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, ТаблицаНоменклатура, Отказ)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Настройка для выгрузки не определена. Форма не может быть открыта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат
	КонецЕсли;
	
	СвойстваСписка    = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СписокСостояний   = РаботаСНоменклатуройСлужебный.СостоянияНоменклатурыДоВыгрузки();
	ЛимитЗаписей      = РаботаСНоменклатуройСлужебныйКлиентСервер.РазмерПорции();
	НастройкаВыгрузки = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	НастройкаВыгрузки.Вставить("ЛимитЗаписей", ЛимитЗаписей);
	
	ДлительнаяОперацияПроблемыЗаполнения = ОбновлениеПроблемЗаполнения(УникальныйИдентификатор, НастройкаВыгрузки);
	
	СвойстваСписка.ТекстЗапроса = ДобавитьВЗапросУсловиеНоменклатураВыгружается(СписокПоНоменклатуре.ТекстЗапроса);
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоНоменклатуре, СвойстваСписка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "СписокСостояний", СписокСостояний);
	
	Если ИспользоватьИерархию = Истина Тогда
		СвойстваСписка.ТекстЗапроса = ДобавитьВЗапросУсловиеНоменклатураВыгружается(СписокПоИерархии.ТекстЗапроса, Истина);
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоИерархии, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "Организация", Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "СписокСостояний", СписокСостояний);
	КонецЕсли;
	
	Если ИспользоватьВидыНоменклатуры Тогда
		ОтборВидыНоменклатуры = Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке(Организация, СписокСостояний);
		УстановитьОтборСпискаПоВидам();
	КонецЕсли;
	
	ПустаяХарактеристика         = РаботаСНоменклатурой.ПустаяСсылкаНаХарактеристику();
	ВедетсяУчетПоХарактеристикам = (РаботаСНоменклатурой.ВедетсяУчетПоХарактеристикам() = Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "ДатаОткрытияФормы", ТекущаяДатаСеанса());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Исправлено", НСтр("ru = 'Исправлено'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "ПустаяХарактеристика", ПустаяХарактеристика);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "ВедетсяУчетПоХарактеристикам", ВедетсяУчетПоХарактеристикам);
	
	ПояснениеКФорме = Новый Массив;
	ПояснениеКФорме.Добавить(НСтр("ru = 'Выгрузка номенклатуры в электронные каталоги'"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1С:Номенклатура'"),,,, РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура()));
	ПояснениеКФорме.Добавить(НСтр("ru = 'и'"));
	ПояснениеКФорме.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Национальный каталог'"),,,, РаботаСНоменклатурой.ГиперссылкаНаСайтНациональногоКаталога()));
	ПояснениеКФорме.Добавить(НСтр("ru = 'возможна только при условии заполнения обязательных сведений о товаре – это наименование,'"));
	ПояснениеКФорме.Добавить(НСтр("ru = 'единица измерения, ставка НДС, артикул либо штрихкод(ы), а для выгрузки в Национальный'"));
	ПояснениеКФорме.Добавить(НСтр("ru = 'каталог так же необходимо сопоставить номенклатуру с рубрикатором 1С:Номенклатура.'"));
	ПояснениеКФорме = СтрСоединить(ПояснениеКФорме, " ");
	ПояснениеКФорме = ПояснениеКФорме
						+ Символы.ПС
						+ НСтр("ru = 'Заполните недостающую информацию и номенклатура станет доступной для выгрузки.'");
	
	Элементы.ПояснениеКФорме.Заголовок = Новый ФорматированнаяСтрока(ПояснениеКФорме);
	Элементы.Закрыть.Видимость = Истина;
	Элементы.ГруппаШапка.Видимость = Истина;
	Элементы.СтраницыПодготовкаКВыгрузке.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ГруппаРазметки, Элементы.СопоставлениеСРубрикатором);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВЗапросУсловиеНоменклатураВыгружается(ТекстЗапроса, ПоРодителю = Ложь)

	СхемаЗапроса        = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОсновнойЗапрос      = СхемаЗапроса.ПакетЗапросов[0];
	КолонкаНоменклатура = ОсновнойЗапрос.Колонки.Найти("Ссылка");
	ПолеНоменклатура    = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)]);
	ИмяОсновнойТаблицы  = СтрЗаменить(ПолеНоменклатура, ".Ссылка", "");
	ОсновнаяТаблица     = ОсновнойЗапрос.Операторы[0].Источники.НайтиПоПсевдониму(ИмяОсновнойТаблицы);
	ОсновнаяТаблица.Источник.Псевдоним = "СправочникНоменклатура";
	ПолеНоменклатура    = "СправочникНоменклатура.Ссылка";
	УсловиеВыгружаемая  = "
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|			ГДЕ
	|				СостоянияВыгрузкиНоменклатуры.Номенклатура%1 = %2
	|				И СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|				И СостоянияВыгрузкиНоменклатуры.Состояние В (&СписокСостояний))";
	ПолеСоединения      = ?(ПоРодителю = Истина, ".Родитель", "");
	УсловиеВыгружаемая  = СтрШаблон(УсловиеВыгружаемая, ПолеСоединения, ПолеНоменклатура);
	ОсновнойЗапрос.Операторы[0].Отбор.Добавить(УсловиеВыгружаемая);
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();

КонецФункции

&НаСервереБезКонтекста
Функция ОбновлениеПроблемЗаполнения(Знач УникальныйИдентификатор, Знач НастройкаВыгрузки)
	
	НаименованиеЗадания = НСтр("ru = 'Работа с номенклатурой. Проверка готовности номенклатуры к выгрузке'");
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ПроверитьГотовностьНоменклатурыКВыгрузке";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0.4;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, НастройкаВыгрузки);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеПроблемЗаполнения(МассивСсылок, ПараметрРежим = "")
	
	Если ПараметрРежим = "" Тогда
		ПараметрРежим = РежимСопоставления;
	КонецЕсли;
	
	НастройкаВыгрузки.Вставить("МассивСсылок", МассивСсылок);
	НастройкаВыгрузки.Вставить("РежимСопоставления", ПараметрРежим);
	ДлительнаяОперацияПроблемыЗаполнения = ОбновлениеПроблемЗаполнения(УникальныйИдентификатор, НастройкаВыгрузки);
	ПроверитьСтатусОперацииПроблемыЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусОперацииПроблемыЗаполнения()
	Если ТипЗнч(ДлительнаяОперацияПроблемыЗаполнения) = Тип("Структура") Тогда
		Если ДлительнаяОперацияПроблемыЗаполнения.Статус = "Выполнено" Тогда
			ПослеОбновленияПроблемЗаполнения(ДлительнаяОперацияПроблемыЗаполнения, Неопределено);
		Иначе
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОбновленияПроблемЗаполнения", ЭтотОбъект);
			ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОЗавершении;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроблемыЗаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияПроблемЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СценарийИспользования <> "ВыгрузкаНоменклатуры" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполняется" И Результат.Прогресс <> Неопределено Тогда
		ЗаголовокПрогресс = НСтр("ru = 'Выполняется проверка заполнения данных'") + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Проверено %1'"), Результат.Прогресс.Процент);
		Элементы.НадписьПроблемыРасчет.Заголовок = ЗаголовокПрогресс;
		Возврат
	ИначеЕсли НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат
	КонецЕсли;
	
	ОбновитьЗакладкуЗаполнениеДанных(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
	ДлительнаяОперацияПроблемыЗаполнения = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуКРаботеВРежимеУстранениеПроблемЗаполнения(ИспользоватьИерархию, ИспользоватьВидыНоменклатуры, Отказ, КлючЗаписи)
	
	Организация    = КлючЗаписи.Организация;
	СхемаЗапроса   = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СписокПоНоменклатуре.ТекстЗапроса);
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[0];
	ВсегоКолонок   = ОсновнойЗапрос.Колонки.Количество();
	Для Сч = 1 По ВсегоКолонок Цикл
		Псевдоним = ОсновнойЗапрос.Колонки[Сч-1].Псевдоним;
		Если Псевдоним = "Ссылка"
			ИЛИ Псевдоним = "Родитель"
			ИЛИ Псевдоним = "ВидНоменклатуры" Тогда
			Поле = Строка(ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля[Сч-1]);
			Если Псевдоним = "Ссылка" Тогда
				ОсновнойЗапрос.Операторы[0].Отбор.Добавить(СтрШаблон("%1 = &Номенклатура", Поле));
			КонецЕсли;
			ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(СтрШаблон("ПРЕДСТАВЛЕНИЕ(%1)", Поле));
			ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = СтрШаблон("%1Представление", Псевдоним);
		КонецЕсли;
	КонецЦикла;
	
	ОсновнойЗапрос.Операторы[0].ВыраженияОтбораКомпоновкиДанных.Очистить();
	ОсновнойЗапрос.Характеристики.Очистить();
	
	ОсновнойЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("ВЫБОР
	|	КОГДА СоответствиеПоВидам.ИдентификаторКатегории ЕСТЬ НЕ NULL 
	|		ТОГДА ИСТИНА
	|	КОГДА ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = СправочникНоменклатура.ВидНоменклатуры
	|				И НЕ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЭтоЕдинственнаяЗапись)
	|		ТОГДА ЛОЖЬ
	|	ИНАЧЕ ИСТИНА
	|КОНЕЦ");
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "МожноСопоставлятьВидНоменклатуры"; 
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ
	|	СостоянияВыгрузкиНоменклатуры.РасшифровкаПроблемы КАК РасшифровкаПроблемы
	|ИЗ
	|	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
	|ГДЕ
	|	СостоянияВыгрузкиНоменклатуры.Организация = &Организация
	|	И СостоянияВыгрузкиНоменклатуры.Номенклатура = &Номенклатура
	|	И СостоянияВыгрузкиНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	
	Запрос    = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", КлючЗаписи.ХарактеристикаНоменклатуры);
	Для каждого ЭлементПараметр Из СписокПоНоменклатуре.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(ЭлементПараметр.Параметр, ЭлементПараметр.Значение);
	КонецЦикла;
	Результат = Запрос.ВыполнитьПакет();
	Выборка   = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КатегорииНоменклатуры = Новый Структура;
		Для каждого КолонкаРезультата Из Результат[0].Колонки Цикл
			КатегорииНоменклатуры.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
		КонецЦикла;
		Элементы.ОбъектСопоставленияНоменклатура.Заголовок    = СтрШаблон(НСтр("ru = 'Номенклатура: %1'"), Выборка.СсылкаПредставление);
		Элементы.ОбъектСопоставленияРодитель.Заголовок        = СтрШаблон(НСтр("ru = 'Иерархия: %1'"), Выборка.РодительПредставление);
		Элементы.ОбъектСопоставленияВидНоменклатуры.Заголовок = СтрШаблон(НСтр("ru = 'Вид номенклатуры: %1'"), Выборка.ВидНоменклатурыПредставление);
		
		Элементы.ОбъектСопоставленияРодитель.Видимость        = ЗначениеЗаполнено(Выборка.Родитель) И ИспользоватьИерархию;
		Элементы.ОбъектСопоставленияВидНоменклатуры.Видимость = ЗначениеЗаполнено(Выборка.ВидНоменклатуры) И ИспользоватьВидыНоменклатуры
			И Выборка.МожноСопоставлятьВидНоменклатуры;
			
		Элементы.ГруппаОбъектыСопоставления.Заголовок = Элементы.ОбъектСопоставленияНоменклатура.Заголовок;
	Иначе 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Выборка = Результат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		РасшифровкаПроблемы = Выборка.РасшифровкаПроблемы;
	Иначе 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Расшифровка = РаботаСНоменклатуройСлужебный.ЗначениеИзСтрокиJSON(РасшифровкаПроблемы);
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	НастройкаВыгрузки  = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	КатегорияСервиса   = КатегорииНоменклатуры.КатегорияПоНоменклатуре;
	РежимСопоставления = "ПоНоменклатуре";
	
	ПояснениеКФорме    = Новый Массив;
	ПояснениеКФорме.Добавить(НСтр("ru = 'Заполните недостающую информацию по номенклатуре'"));
	ПояснениеКФорме.Добавить(СтрШаблон("<span style=""font: ПолужирныйНаклонныйШрифтРаботаСНоменклатурой"">%1</span>",
		КатегорииНоменклатуры.СсылкаПредставление)); 
	ПояснениеКФорме.Добавить(НСтр("ru = 'для выгрузки в электронные каталоги'"));
	ПояснениеКФорме.Добавить(РаботаСНоменклатуройСлужебный.ПредставлениеГиперссылки(
		РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура(),
		НСтр("ru = '1С:Номенклатура'")));
	ПояснениеКФорме.Добавить(НСтр("ru = 'и'"));
	ПояснениеКФорме.Добавить(РаботаСНоменклатуройСлужебный.ПредставлениеГиперссылки(
		РаботаСНоменклатурой.ГиперссылкаНаСайтНациональногоКаталога(),
		НСтр("ru = 'Национальный каталог'")));
	
	Элементы.Переместить(Элементы.ГруппаРеквизитов, Элементы.ГруппаСопоставлениеРеквизитов);
	
	Элементы.ПояснениеКФорме.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(ПояснениеКФорме, " "));
	Элементы.Закрыть.Видимость = Истина;
	Элементы.ГруппаШапка.Видимость = Истина;
	Элементы.ГруппаРазметки.Видимость = Ложь;
	Элементы.ГруппаРеквизитов.Заголовок = НСтр("ru = 'Сопоставление реквизитов номенклатуры (не обязательно)'");
	Элементы.ГруппаРеквизитов.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийТекст;
	Элементы.ГруппаУстранениеПроблемПоНоменклатуре.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКатегорииСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ТекущаяСсылка(ДополнительныеПараметры);
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяКатегория   = Результат.ВыбранныеОбъекты[0];
	ОбъектыСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСсылка);
	
	Отказ = Ложь;
	РаботаСНоменклатуройСлужебныйВызовСервера.ЗаписатьЗначениеСопоставления(ОбъектыСопоставления, ВыбраннаяКатегория, Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияСервиса = ВыбраннаяКатегория.Наименование;
	КатегорииНоменклатуры["Категория" + ДополнительныеПараметры] = КатегорияСервиса;
	КатегорииНоменклатуры["ИдентификаторКатегории" + ДополнительныеПараметры] = ВыбраннаяКатегория.Идентификатор;
	ЗаполнитьКатегориюВРежимеУстраненияПроблем();
	ОбновитьРеквизитыСервиса();
	
	Элементы.КатегорияСервиса.Шрифт = Новый Шрифт;
	Элементы.КатегорияСервиса.ЦветТекста = Новый Цвет;
	
	ЗапуститьОбновлениеПроблемЗаполнения(ОбъектыСопоставления, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуГотовностиНоменклатурнойПозиции(Номенклатура)
	
	ДлительнаяОперацияПроблемыЗаполнения = РаботаСНоменклатуройСлужебныйВызовСервера.ПроверитьГотовностьНоменклатурнойПозиции(УникальныйИдентификатор,
		Организация, Номенклатура, СостояниеВыгрузки);
	Если ДлительнаяОперацияПроблемыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДлительнаяОперацияПроблемыЗаполнения.Статус = "Выполнено" Тогда
		ЗавершитьПроверкуГотовностиНоменклатурнойПозиции(ДлительнаяОперацияПроблемыЗаполнения, Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПроверкуГотовностиНоменклатурнойПозиции", ЭтотОбъект);
	ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроблемыЗаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуГотовностиНоменклатурнойПозиции(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) 
		ИЛИ СценарийИспользования <> "УстранениеПроблемЗаполнения" Тогда 
		Возврат
	КонецЕсли;
	
	Расшифровка = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОбработатьОбновлениеРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеРасшифровки()
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	ВсегоПроблем = Расшифровка.Проблемы.Количество();
	Если ВсегоПроблем = 0 Тогда
		Элементы.НадписьЗаполнитеДанные.Шрифт = Новый Шрифт();
		Элементы.НадписьЗаполнитеДанные.Заголовок = НСтр("ru = 'Проблем с заполнением не выявлено'");
		
		Элементы.ГруппаЗаполнениеДанных.Доступность = Ложь;
		
		Элементы.НадписьПоказатьНезаполненные.Видимость = Ложь;
		
		Элементы.ГруппаСопоставлениеНоменклатуры.Доступность = Истина;
		
		Элементы.ГруппаСопоставлениеСРубрикатором.ШрифтЗаголовка = Новый Шрифт(,, Истина);
	Иначе 
		Элементы.НадписьЗаполнитеДанные.Шрифт = Новый Шрифт(,, Истина);
		
		Элементы.ГруппаЗаполнениеДанных.Доступность = Истина;
		
		Элементы.НадписьЗаполнитеДанные.Заголовок = НСтр("ru = 'Заполните данные номенклатуры'");
		
		Элементы.НадписьПоказатьНезаполненные.Видимость = Истина;
		Элементы.НадписьПоказатьНезаполненные.Заголовок = СтрШаблон(НСтр("ru = 'Показать незаполненные реквизиты (%1)'"), ВсегоПроблем);
		
		Элементы.ГруппаСопоставлениеНоменклатуры.Доступность = Ложь;
		
		Элементы.ГруппаСопоставлениеСРубрикатором.ШрифтЗаголовка = Новый Шрифт();
	КонецЕсли;
	
	Элементы.ГруппаСопоставлениеНоменклатуры.Видимость = Элементы.ГруппаСопоставлениеНоменклатуры.Видимость ИЛИ НЕ (Расшифровка.Категории = Истина);
	Элементы.ГруппаСопоставлениеРеквизитов.Видимость = Элементы.ГруппаСопоставлениеРеквизитов.Видимость ИЛИ НЕ (Расшифровка.Категории = Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСервисаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ПустаяСтрока(КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления]) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ТекущаяСсылка();
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСсылка);
	Отказ                = Ложь;
	РаботаСНоменклатуройСлужебныйВызовСервера.ОчиститьСопоставлениеКатегорий(ОбъектыСопоставления, Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	КатегорияРеквизитов = "";
	КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления] = "";
	КатегорииНоменклатуры["Категория" + РежимСопоставления] = "";
	ЗаполнитьКатегориюВРежимеУстраненияПроблем();
	Если РежимСопоставления = "ПоНоменклатуре" Тогда
		ОбновитьКатегориюСервиса();
		СтандартнаяОбработка = Ложь;
	Иначе 
		ОбновитьРеквизитыСервиса();
	КонецЕсли;
	
	ЗапуститьОбновлениеПроблемЗаполнения(ОбъектыСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Проблемы, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "Организация", Организация);
	
	Если Элементы.ГруппаРежимПоИерархии.Видимость = Истина Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "Организация", Организация);
	КонецЕсли;
	
	Если Элементы.ГруппаРежимПоВидам.Видимость = Истина Тогда
		ОтборВидыНоменклатуры = Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке(Организация);
		УстановитьОтборСпискаПоВидам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКатегориюСервиса()
	КатегорииНоменклатуры.Свойство("КатегорияПоНоменклатуре", КатегорияСервиса);
	Если ЗначениеЗаполнено(КатегорияСервиса) Тогда
		Элементы.КатегорияСервиса.Шрифт          = Новый Шрифт;
		Элементы.КатегорияСервиса.ЦветТекста     = Новый Цвет;
		Элементы.КатегорияСервиса.ТолькоПросмотр = Ложь;
	Иначе 
		КатегорииНоменклатуры.Свойство("КатегорияПоВидам", КатегорияСервиса);
		Если НЕ ЗначениеЗаполнено(КатегорияСервиса) Тогда
			КатегорииНоменклатуры.Свойство("КатегорияПоИерархии", КатегорияСервиса);
		КонецЕсли;
		Если ЗначениеЗаполнено(КатегорияСервиса) Тогда
			Элементы.КатегорияСервиса.Шрифт          = Новый Шрифт(,,, Истина);
			Элементы.КатегорияСервиса.ЦветТекста     = Элементы.НедоступныеДанныеЭДЦвет.ЦветТекста;
			Элементы.КатегорияСервиса.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьРеквизитыСервиса();
	ТекущийЭлемент = Элементы.ГруппаОбъектыСопоставления;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗакладкуЗаполнениеДанных(НайденоПроблем)
	Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница = Элементы.ПроблемыЗаполнения;
	Если НайденоПроблем = 0 Тогда
		ОписаниеПроблем = НСтр("ru = 'проблем не найдено'");
		Элементы.ЗаполнениеДанныхСтраницы.ТекущаяСтраница = Элементы.ПроблемНет;
	ИначеЕсли НайденоПроблем >= ЛимитЗаписей Тогда
		ОписаниеПроблем = СтрШаблон(НСтр("ru = 'более %1 проблем'"), Формат(ЛимитЗаписей, "ЧГ="));
	Иначе 
		ОписаниеПроблем = СтрШаблон(НСтр("ru = '%1 проблем'"), Формат(НайденоПроблем, "ЧГ="));
	КонецЕсли;
	Элементы.ЗаполнениеДанных.Заголовок = СтрШаблон(НСтр("ru = 'Заполнение данных (%1)'"), ОписаниеПроблем);
	Элементы.Проблемы.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДлительнаяОперацияОбязательныеРеквизиты(Знач УникальныйИдентификатор)
	
	ИмяМетода           = "РаботаСНоменклатуройСлужебный.ОбязательныеРеквизитыНациональногоКаталога";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Работа с номенклатурой. Получение обязательных реквизитов Национального каталога.'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПолучениеОбязательныхРеквизитов()
	
	Если НЕ ЭтоВыгрузкаВНациональныйКаталог Тогда
		Возврат
	КонецЕсли;
	
	Если ОбязательныеРеквизитыДлительнаяОперация.Статус = "Выполнено" Тогда
		ПолучитьОбязательныеРеквизиты(ОбязательныеРеквизитыДлительнаяОперация, Неопределено);
	Иначе 
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОбязательныеРеквизиты", ЭтотОбъект);
		ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОбязательныеРеквизитыДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбязательныеРеквизиты(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат.Статус = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)) Тогда 
		Возврат
	КонецЕсли;
	
	ОбязательныеРеквизиты = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСсылка(ПараметрРежим = "")
	
	Если ПараметрРежим = "" Тогда
		ПараметрРежим = РежимСопоставления;
	КонецЕсли;
	
	ТекущаяСсылка = Неопределено;
	
	Если ПараметрРежим = "ПоНоменклатуре" Тогда
		ТекущаяСсылка = КатегорииНоменклатуры["Ссылка"];
	ИначеЕсли ПараметрРежим = "ПоВидам" Тогда
		ТекущаяСсылка = КатегорииНоменклатуры["ВидНоменклатуры"];
	ИначеЕсли ПараметрРежим = "ПоИерархии" Тогда
		ТекущаяСсылка = КатегорииНоменклатуры["Родитель"];
	КонецЕсли;
	
	Возврат ТекущаяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонКатегория(ПараметрПодстановки = """""")
	Возврат СтрШаблон("ВЫРАЗИТЬ(%1 КАК СТРОКА(100))", ПараметрПодстановки);
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонИдентификатор(ПараметрПодстановки = """""")
	Возврат СтрШаблон("ВЫРАЗИТЬ(%1 КАК СТРОКА(50))", ПараметрПодстановки);
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонПредставлениеКатегории(ПараметрПодстановки)
	Возврат СтрШаблон("%1.ПредставлениеКатегории", ПараметрПодстановки);
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонИдентификаторКатегории(ПараметрПодстановки)
	Возврат СтрШаблон("%1.ИдентификаторКатегории", ПараметрПодстановки);
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонЕстьNULL(ПараметрПодстановки1, ПараметрПодстановки2)
	Возврат СтрШаблон("ЕСТЬNULL(%1, %2)", ПараметрПодстановки1, ПараметрПодстановки2);
КонецФункции

&НаСервере
Процедура ИнициализацияДинамическихСписков(ТекстЗапроса, ТаблицаНоменклатура, ИспользоватьИерархию, ИспользоватьВидыНоменклатуры)
	
	ПустаяХарактеристика = РаботаСНоменклатурой.ПустаяХарактеристикаСтрокойДляЗапроса();
	СопоставленаГруппа   = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа;
	СхемаЗапроса         = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОсновнойЗапрос       = СхемаЗапроса.ПакетЗапросов[0];
	ОператорыЗапроса     = ОсновнойЗапрос.Операторы[0];
	Источники            = ОператорыЗапроса.Источники;
	ОсновнаяТаблица      = Источники.НайтиПоИмени(ТаблицаНоменклатура);
	КолонкаНоменклатура  = ОсновнойЗапрос.Колонки.Найти("Номенклатура");
	ПолеНоменклатура     = ОператорыЗапроса.ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаНоменклатура)];
	КолонкаНоменклатура.Псевдоним = "Ссылка";
	
	ОператорыЗапроса.Отбор.Добавить(СтрШаблон("%1.ЭтоГруппа = ЛОЖЬ", ОсновнаяТаблица.Источник.Псевдоним));
	
	ИмяТаблицыСоединения = "СоответствиеПоНоменклатуре";
	УсловиеСоединения    = СтрШаблон("%1 = %2.Номенклатура
	|	И %2.Характеристика = &ПустаяХарактеристика
	|	И %2.ИдентификаторКатегории <> """"", ПолеНоменклатура, ИмяТаблицыСоединения);
	НовыйИсточник = Источники.Добавить("РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой", ИмяТаблицыСоединения);
	НовыйИсточник.Соединения.Очистить();
	ОсновнаяТаблица.Соединения.Добавить(НовыйИсточник, УсловиеСоединения);
	
	ТекстКатегория        = ШаблонПредставлениеКатегории(ИмяТаблицыСоединения);
	ТекстИдентификатор    = ШаблонИдентификаторКатегории(ИмяТаблицыСоединения);
	ПустаяКатегория       = "&ВыбратьКатегорию";
	ТекстВыбратьКатегорию = НСтр("ru = '<Выбрать категорию>'");
	
	ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория(ТекстКатегория));
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "КатегорияПоНоменклатуре";
	ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонИдентификатор(ТекстИдентификатор));
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегорииПоНоменклатуре";
	
	ТекстКатегория = ШаблонЕстьNULL(ТекстКатегория,ПустаяКатегория);
	
	Если ИспользоватьИерархию Тогда
		ИмяТаблицыСоединения = "СоответствиеПоИерархии";
		КолонкаСоединения    = ОсновнойЗапрос.Колонки.Найти("Родитель");
		ПолеСоединения       = ОператорыЗапроса.ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаСоединения)];
		
		УсловиеСоединения = СтрШаблон("%1 = %2.Номенклатура
		|	И %2.Характеристика = &ПустаяХарактеристика
		|	И %2.СтатусСопоставления = &СопоставленаГруппа", ПолеСоединения, ИмяТаблицыСоединения);
		НовыйИсточник     = Источники.Добавить("РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой", ИмяТаблицыСоединения);
		НовыйИсточник.Соединения.Очистить();
		ОсновнаяТаблица.Соединения.Добавить(НовыйИсточник, УсловиеСоединения);
		
		ПараметрКатегория        = ШаблонПредставлениеКатегории(ИмяТаблицыСоединения);
		ПараметрИдентификатор    = ШаблонИдентификаторКатегории(ИмяТаблицыСоединения);
		ТекстКатегория           = ШаблонЕстьNULL(ПараметрКатегория, ТекстКатегория);
		ТекстИдентификатор       = ШаблонЕстьNULL(ПараметрИдентификатор, ТекстИдентификатор);
		ПараметрИдентификатор    = ШаблонИдентификатор(ПараметрИдентификатор);
		
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория(ПараметрКатегория));
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "КатегорияПоИерархии";
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПараметрИдентификатор);
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегорииПоИерархии";
		
		// инициализация списка по иерархии
		ТекстЗапросаПоИерархии =
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	&Категория КАК Категория,
		|	&ИдентификаторКатегории КАК ИдентификаторКатегории
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеКатегорий
		|		ПО СправочникНоменклатура.Ссылка = СоответствиеКатегорий.Номенклатура
		|			И (СоответствиеКатегорий.Характеристика = &ПустаяХарактеристика)
		|			И (СоответствиеКатегорий.СтатусСопоставления = &СопоставленаГруппа)
		|ГДЕ
		|	СправочникНоменклатура.ЭтоГруппа";
		
		ТекстЗапросаПоИерархии = СтрЗаменить(ТекстЗапросаПоИерархии, "Справочник.Номенклатура", ТаблицаНоменклатура);
		ТекстЗапросаПоИерархии = СтрЗаменить(ТекстЗапросаПоИерархии, "&Категория", ШаблонКатегория(ШаблонЕстьNULL(ПараметрКатегория, ПустаяКатегория)));
		ТекстЗапросаПоИерархии = СтрЗаменить(ТекстЗапросаПоИерархии, "&ИдентификаторКатегории", ПараметрИдентификатор);
		ТекстЗапросаПоИерархии = СтрЗаменить(ТекстЗапросаПоИерархии, "СоответствиеКатегорий", ИмяТаблицыСоединения);
		ТекстЗапросаПоИерархии = СтрЗаменить(ТекстЗапросаПоИерархии, "&ПустаяХарактеристика", ПустаяХарактеристика);
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица = ТаблицаНоменклатура;
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса = ТекстЗапросаПоИерархии;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоИерархии, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, "СопоставленаГруппа", СопоставленаГруппа);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоИерархии, СтрЗаменить(ПустаяКатегория, "&", ""), ТекстВыбратьКатегорию);
	Иначе 
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория());
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "КатегорияПоИерархии";
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонИдентификатор());
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегорииПоИерархии";
	КонецЕсли;
	
	Если ИспользоватьВидыНоменклатуры Тогда
		ТаблицаВиды = РаботаСНоменклатурой.ИмяТаблицыПоТипу(Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип);
		Если ЗначениеЗаполнено(ТаблицаВиды) Тогда
			ИмяТаблицыСоединения = "СоответствиеПоВидам";
			КолонкаСоединения    = ОсновнойЗапрос.Колонки.Найти("ВидНоменклатуры");
			ПолеСоединения       = ОператорыЗапроса.ВыбираемыеПоля[ОсновнойЗапрос.Колонки.Индекс(КолонкаСоединения)];
			
			УсловиеСоединения = СтрШаблон("%1 = %2.ВидНоменклатуры
			|	И %2.ЭтоЕдинственнаяЗапись", ПолеСоединения, ИмяТаблицыСоединения);
			НовыйИсточник = Источники.Добавить("РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой", ИмяТаблицыСоединения);
			НовыйИсточник.Соединения.Очистить();
			ОсновнаяТаблица.Соединения.Добавить(НовыйИсточник, УсловиеСоединения);
			
			ПараметрКатегория        = ШаблонПредставлениеКатегории(ИмяТаблицыСоединения);
			ПараметрИдентификатор    = ШаблонИдентификаторКатегории(ИмяТаблицыСоединения);
			ТекстКатегория           = ШаблонЕстьNULL(ПараметрКатегория, ТекстКатегория);
			ТекстИдентификатор       = ШаблонЕстьNULL(ПараметрИдентификатор, ТекстИдентификатор);
			ПараметрИдентификатор    = ШаблонИдентификатор(ПараметрИдентификатор);
			
			ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория(ПараметрКатегория));
			ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "КатегорияПоВидам";
			ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПараметрИдентификатор);
			ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегорииПоВидам";
			
			// инициализация списка по видам
			ТекстЗапросаПоВидам =
			"ВЫБРАТЬ
			|	СправочникВидыНоменклатуры.Ссылка КАК Ссылка,
			|	СправочникВидыНоменклатуры.Наименование КАК Наименование,
			|	&Категория КАК Категория,
			|	&ИдентификаторКатегории КАК ИдентификаторКатегории
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеКатегорий
			|		ПО СправочникВидыНоменклатуры.Ссылка = СоответствиеКатегорий.ВидНоменклатуры
			|			И (СоответствиеКатегорий.ЭтоЕдинственнаяЗапись)";
			
			ТекстЗапросаПоВидам = СтрЗаменить(ТекстЗапросаПоВидам, "Справочник.ВидыНоменклатуры", ТаблицаВиды);
			ТекстЗапросаПоВидам = СтрЗаменить(ТекстЗапросаПоВидам, "СоответствиеКатегорий", ИмяТаблицыСоединения);
			ТекстЗапросаПоВидам = СтрЗаменить(ТекстЗапросаПоВидам, "&Категория", ШаблонКатегория(ШаблонЕстьNULL(ПараметрКатегория, ПустаяКатегория)));
			ТекстЗапросаПоВидам = СтрЗаменить(ТекстЗапросаПоВидам, "&ИдентификаторКатегории", ПараметрИдентификатор);
			
			СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
			СвойстваСписка.ОсновнаяТаблица              = ТаблицаВиды;
			СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
			СвойстваСписка.ТекстЗапроса                 = ТекстЗапросаПоВидам;
			ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоВидам, СвойстваСписка);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоВидам, СтрЗаменить(ПустаяКатегория, "&", ""), ТекстВыбратьКатегорию);
		Иначе 
			ИспользоватьВидыНоменклатуры = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьВидыНоменклатуры = Ложь Тогда
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория());
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "КатегорияПоВидам";
		ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонИдентификатор());
		ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегорииПоВидам";
	КонецЕсли;
	
	ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонКатегория(ТекстКатегория));
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "Категория";
	ОператорыЗапроса.ВыбираемыеПоля.Добавить(ШаблонИдентификатор(ТекстИдентификатор));
	ОсновнойЗапрос.Колонки[ОсновнойЗапрос.Колонки.Количество() - 1].Псевдоним = "ИдентификаторКатегории";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = ТаблицаНоменклатура;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = СтрЗаменить(СхемаЗапроса.ПолучитьТекстЗапроса(), "&ПустаяХарактеристика", ПустаяХарактеристика);
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПоНоменклатуре, СвойстваСписка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, СтрЗаменить(ПустаяКатегория, "&", ""), ТекстВыбратьКатегорию);
	Если ИспользоватьИерархию Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПоНоменклатуре, "СопоставленаГруппа", СопоставленаГруппа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПродолжитьВыборКатегории(ТекущиеДанные)
	
	Результат = Истина;
	
	Если РежимСопоставления = "ПоНоменклатуре" И ИзменениеКатегорииНоменклатурыЗапрещено(ТекущиеДанные) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.КатегорияПоВидам)
			И ЗначениеЗаполнено(ТекущиеДанные.ВидНоменклатуры) Тогда
			РежимСопоставления = "ПоВидам";
			УстановитьРежимСопоставления(Истина, ТекущиеДанные.ВидНоменклатуры);
			Результат = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КатегорияПоИерархии) 
			И ЗначениеЗаполнено(ТекущиеДанные.Родитель) Тогда
			РежимСопоставления = "ПоИерархии";
			УстановитьРежимСопоставления(Истина, ТекущиеДанные.Родитель);
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли РежимСопоставления = "ПоВидам" И ТекущиеДанные.ИдентификаторКатегории = "МножественнаяПривязкаКатегорий" Тогда 
		ЗначениеОтбора = ТекущиеДанные.Ссылка;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре,
		"ВидНоменклатуры", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре, "Родитель",,,, Ложь);
		РежимСопоставления = "ПоНоменклатуре";
		Элементы.ДекорацияИмяПоляОтбора.Заголовок = НСтр("ru = 'Вид номенклатуры'") + ":";
		Элементы.ДекорацияЗначениеОтбора.Заголовок = ЗначениеОтбора;
		Элементы.ГруппаОтбор.Видимость = Истина;
		УстановитьРежимСопоставления(Истина);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборСпискаПоВидам()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоВидам,
		"Ссылка", ОтборВидыНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНоменклатуры(ИмяКоманды)
	
	Команда = Команды[ИмяКоманды];
	Элементы.СписокПоНоменклатуреГруппаОтбор.Картинка  = Команда.Картинка;
	Элементы.СписокПоНоменклатуреГруппаОтбор.Заголовок = Команда.Заголовок;
	
	ВидСравненияОтбора  = Неопределено;
	ИспользованиеОтбора = Ложь;
	Если ИмяКоманды = "НоменклатураНеСопоставлена" Тогда
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ИспользованиеОтбора = Истина;
	ИначеЕсли ИмяКоманды = "НоменклатураСопоставлена" Тогда
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Заполнено;
		ИспользованиеОтбора = Истина;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоНоменклатуре, "ИдентификаторКатегории",, 
	ВидСравненияОтбора,, ИспользованиеОтбора);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийВидНоменклатуры()
	
	ВидНоменклатуры = Неопределено;
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ВидНоменклатуры = КатегорииНоменклатуры.ВидНоменклатуры;
	ИначеЕсли РежимСопоставления = "ПоНоменклатуре" Тогда
		ВидНоменклатуры = Элементы.СписокПоНоменклатуре.ТекущиеДанные.ВидНоменклатуры;
	ИначеЕсли РежимСопоставления = "ПоВидам" Тогда
		ВидНоменклатуры = Элементы.СписокПоВидам.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
КонецФункции

&НаКлиенте
Функция ТекущаяКатегорияСервиса()
	
	ИдентификаторКатегории = "";
	Если СценарийИспользования = "УстранениеПроблемЗаполнения" Тогда
		ИдентификаторКатегории = КатегорииНоменклатуры["ИдентификаторКатегории" + РежимСопоставления];
	Иначе
		ТекущиеДанные = Элементы["Список" + РежимСопоставления].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ИдентификаторКатегории = ТекущиеДанные.ИдентификаторКатегории;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторКатегории;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветПередВыборомКатегории(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	Если Результат.Свойство("Значение ") И Результат.Значение = Истина Тогда
		ВыбратьКатегориюСервиса(ДополнительныеПараметры.ИдентификаторКатегории, ДополнительныеПараметры.СтрокиДляОбработки, 
			ДополнительныеПараметры.ВидНоменклатуры,, ДополнительныеПараметры.ТекстПредупреждения);
		Если Результат.Свойство("БольшеНеЗадаватьЭтотВопрос") И Результат.БольшеНеЗадаватьЭтотВопрос = Истина Тогда
			ИспользоватьЧастичноеСопоставлениеБезВопроса = Истина;
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РаботаСНоменклатурой",
				"СопоставлениеНоменклатуры\ИспользоватьЧастичноеСопоставлениеБезВопроса", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКатегориюВРежимеУстраненияПроблем()
	
	Режимы = СтрРазделить("ПоНоменклатуре,ПоВидам,ПоИерархии", ",");
	
	КатегорииНоменклатуры.Категория              = "";
	КатегорииНоменклатуры.ИдентификаторКатегории = "";
	
	Для каждого Режим Из Режимы Цикл
		Если ЗначениеЗаполнено(КатегорииНоменклатуры["ИдентификаторКатегории" + Режим]) Тогда
			КатегорииНоменклатуры.Категория              = КатегорииНоменклатуры["Категория"              + Режим];
			КатегорииНоменклатуры.ИдентификаторКатегории = КатегорииНоменклатуры["ИдентификаторКатегории" + Режим];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИзменениеКатегорииНоменклатурыЗапрещено(ДанныеДляПроверки)
	
	Возврат ЗначениеЗаполнено(ДанныеДляПроверки.ИдентификаторКатегории)
		И (ДанныеДляПроверки.ИдентификаторКатегории = ДанныеДляПроверки.ИдентификаторКатегорииПоВидам
		ИЛИ ДанныеДляПроверки.ИдентификаторКатегории = ДанныеДляПроверки.ИдентификаторКатегорииПоИерархии)
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИзменитьОтборПоСсылке(ДинамическийСписок, НовыйОбъект)
	
	Если ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Количество() Тогда
		ПолеСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
		Для каждого ЭлементОтбора Из ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеСсылка И ЭлементОтбора.Использование = Истина Тогда
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") 
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ЭлементОтбора.ПравоеЗначение.Добавить(НовыйОбъект);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					СписокОтбор = Новый СписокЗначений;
					СписокОтбор.Добавить(ЭлементОтбора.ПравоеЗначение);
					СписокОтбор.Добавить(НовыйОбъект);
					ЭлементОтбора.ПравоеЗначение = СписокОтбор;
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьПроверитьНоменклатуруКВыгрузке(Знач Организация, Знач НовыйОбъект, Знач НастройкаВыгрузки, Знач УникальныйИдентификатор)
	
	Обработки.РаботаСНоменклатурой.ДобавитьКВыгрузкеНоменклатуруПоСписку(Организация,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыйОбъект));
	
	НастройкаВыгрузки.Вставить("МассивСсылок", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыйОбъект));
	НастройкаВыгрузки.Вставить("РежимСопоставления", "ПоНоменклатуре");
	ДлительнаяОперацияПроблемыЗаполнения = ОбновлениеПроблемЗаполнения(УникальныйИдентификатор, НастройкаВыгрузки);
	
	ВидНоменклатуры = Неопределено;
	РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(НовыйОбъект, ВидНоменклатуры);
	
	Возврат Новый Структура("ДлительнаяОперацияПроблемыЗаполнения, ВидНоменклатуры", ДлительнаяОперацияПроблемыЗаполнения, ВидНоменклатуры);
	
КонецФункции

&НаКлиенте
Процедура АвтоматическоеЗаполнениеРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если КатегорияРеквизитов <> ДополнительныеПараметры Тогда
		Возврат;
	КонецЕсли;
	
	СтатусЗадания = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Результат.Свойство("Статус", СтатусЗадания);
	КонецЕсли;
	
	Если СтатусЗадания = Неопределено ИЛИ СтатусЗадания = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницРеквизитовСервиса.ТекущаяСтраница = Элементы.СтраницаРеквизитов;
	
	Если СтатусЗадания = "Выполнено" 
		И Результат.Свойство("АдресРезультата")
		И ТипЗнч(Результат.АдресРезультата) = Тип("Строка") 
		И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		ТекстыСопоставленныхЗначений = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(ТекстыСопоставленныхЗначений) <> Тип("Соответствие") Тогда
			ДлительнаяОперация = Неопределено;
			Возврат;
		КонецЕсли;
		
		Для каждого ОписаниеРеквизита Из Реквизиты Цикл
			Если Не ОписаниеРеквизита.ВозможноСопоставление Тогда
				Продолжить;
			КонецЕсли;
			ТекстСопоставлено = ТекстыСопоставленныхЗначений.Получить(ОписаниеРеквизита.РеквизитОбъекта);
			Если ЗначениеЗаполнено(ТекстСопоставлено) Тогда
				ОписаниеРеквизита.Сопоставлено = ТекстСопоставлено;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	ДлительнаяОперация = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиЭлементовФормы(ПараметрыФормы)
	
	РежимСопоставления = ПараметрыФормы.РежимСопоставления;
	Если Не ЗначениеЗаполнено(РежимСопоставления) Тогда
		РежимСопоставления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСНоменклатурой",
			"СопоставлениеНоменклатуры\РежимСопоставления");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РежимСопоставления) Тогда
		РежимСопоставления = "ПоНоменклатуре";
	КонецЕсли;
	
	Заголовок = ПараметрыФормы.Заголовок;
	
	Элементы.Категория.Заголовок                                = ПараметрыФормы.ЗаголовокКатегории;
	Элементы.СписокПоИерархииКатегория.Заголовок                = ПараметрыФормы.ЗаголовокКатегории;
	Элементы.СписокПоНоменклатуреКатегория.Заголовок            = ПараметрыФормы.ЗаголовокКатегории;
	Элементы.РеквизитыПредставлениеРеквизитаКатегории.Заголовок = ПараметрыФормы.ЗаголовокРеквизита;
	Элементы.РеквизитыТипРеквизитаРубрикатора.Заголовок         = ПараметрыФормы.ЗаголовокТипа;
	Элементы.ИнформацияСписок.Заголовок                         = ПараметрыФормы.ИнформацияСписок;
	Элементы.ИнформацияРеквизиты.Заголовок                      = ПараметрыФормы.ИнформацияРеквизиты;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизацию(Параметры)
	
	Параметры.Свойство("Организация", Организация);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Элементы.Организация.Видимость = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					   |	СостоянияВыгрузкиНоменклатуры.Организация КАК Организация
					   |ИЗ
					   |	РегистрСведений.СостоянияВыгрузкиНоменклатуры КАК СостоянияВыгрузкиНоменклатуры
					   |ГДЕ
					   |	СостоянияВыгрузкиНоменклатуры.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыгрузкиНоменклатуры.СодержитПроблемы)";

		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИерархияНоменклатурыИспользуется(ТипДанныхНоменклатура)

	ИерархияНоменклатурыИспользуется = Ложь;
	Если СценарийИспользования <> "ВыгрузкаНоменклатуры" И СценарийИспользования <> "УстранениеПроблемЗаполнения" Тогда
		ОписаниеМетаданных = Новый Структура("Иерархический", ИерархияНоменклатурыИспользуется);
		Для Каждого ТипыДанныхНоменклатуры Из ТипДанныхНоменклатура.Типы() Цикл
			ЗаполнитьЗначенияСвойств(ОписаниеМетаданных, Метаданные.НайтиПоТипу(ТипыДанныхНоменклатуры));
			Если ОписаниеМетаданных.Иерархический = Истина Тогда
				ИерархияНоменклатурыИспользуется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ИерархияНоменклатурыИспользуется;

КонецФункции

&НаСервере
Процедура ПрименитьНастройкиОтбора(НастройкиОтбора, ИспользоватьИерархию, ИспользоватьВидыНоменклатуры)

	Если НастройкиОтбора <> Неопределено Тогда
		Если НастройкиОтбора.Отбор.Элементы.Количество() > 0 И (ИспользоватьИерархию Или ИспользоватьВидыНоменклатуры) Тогда

			ВидыНоменклатурыИРодители = Обработки.РаботаСНоменклатурой.РодителиИВидыНоменклатурыПоОтбору(НастройкиОтбора,
				ИспользоватьИерархию, ИспользоватьВидыНоменклатуры);

			Если ИспользоватьИерархию Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПоИерархии, "Ссылка",
					ВидыНоменклатурыИРодители.Родители, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
				Элементы.СписокПоИерархии.Отображение = ОтображениеТаблицы.Список;
			КонецЕсли;

			Если ИспользоватьВидыНоменклатуры Тогда
				ОтборВидыНоменклатуры.ЗагрузитьЗначения(ВидыНоменклатурыИРодители.ВидыНоменклатуры);
				УстановитьОтборСпискаПоВидам();
			КонецЕсли;

			Если Не РаботаСНоменклатуройВстроена Тогда
				Для Каждого ЭлементОтбора Из НастройкиОтбора.Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура") Тогда
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СписокПоНоменклатуре.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗавершитьНастройкуФормыВРежимеВыгрузки()

	Если ЭтоВыгрузкаВНациональныйКаталог Тогда
		ОбязательныеРеквизитыДлительнаяОперация = ДлительнаяОперацияОбязательныеРеквизиты(УникальныйИдентификатор);
		ТипБулево            = Новый ОписаниеТипов("Булево");
		ТипРеквизит          = Новый ОписаниеТипов("ПеречислениеСсылка.РеквизитыНоменклатурыДляВыгрузки");
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОбязательныйРеквизит", ТипБулево, "Реквизиты"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ФормализованныйРеквизит", ТипРеквизит, "Реквизиты"));
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);

		ТекстИнформацияРеквизиты = Новый Массив;
		ТекстИнформацияРеквизиты.Добавить(Элементы.ИнформацияРеквизиты.Заголовок);
		ТекстИнформацияРеквизиты.Добавить("<b>%1</b> %2.");
		ТекстИнформацияРеквизиты.Добавить(
		"<span style=""color: ПоясняющийОшибкуТекст; font: ВажнаяНадписьШрифт"">%3</span> %4.");
		Шаблон = СтрСоединить(ТекстИнформацияРеквизиты, Символы.ПС);

		Элементы.ИнформацияРеквизиты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Шаблон, 
			НСтр("ru='Жирным шрифтом'"), 
			НСтр("ru='выделены обязательные для заполнения реквизиты'"),
			НСтр("ru='Красным'"), 
			НСтр("ru='дополнительно отмечены не сопоставленные обязательные реквизиты'"));
	Иначе
		Элементы.ГруппаШапка.Видимость = (ТипЗнч(НастройкаВыгрузки) = Тип("Структура"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти