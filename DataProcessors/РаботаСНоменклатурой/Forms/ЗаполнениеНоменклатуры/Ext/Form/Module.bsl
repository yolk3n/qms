
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если Не Параметры.Свойство("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан идентификатор номенклатуры'");
	КонецЕсли;
	
	Если Не Параметры.Свойство("Номенклатура", НоменклатураСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Не задана номенклатура информационной базы'");
	КонецЕсли;
	
	РеквизитыНоменклатурыДляОбновления = Неопределено;
	
	Параметры.Свойство("ЭтоПривязка",                          ЭтоПривязка);                          // если заполнение идет после выбора 1С:Номенклатуры
	Параметры.Свойство("НоменклатураНаименование",             НаименованиеНоменклатуры);             // наименование выбранной номенклатуры
	Параметры.Свойство("ВызовИзПомощникаОбновления",           ВызовИзПомощникаОбновления);           // вызов из помощника обновления
	Параметры.Свойство("ДанныеИнтерактивногоЗаполнения",       ДанныеИнтерактивногоЗаполнения);       // значения реквизитов номенклатуры из формы
	Параметры.Свойство("РеквизитыНоменклатурыДляОбновления",   РеквизитыНоменклатурыДляОбновления);   // реквизиты, переданные из помощника обновления
	Параметры.Свойство("ИдентификаторыВыбранныхХарактеристик", ИдентификаторыВыбранныхХарактеристик); // идентификаторы, переданные из формы загрузки номенклатуры
	Параметры.Свойство("ИдентификаторХарактеристики",          ИдентификаторХарактеристики);          // идентификатор характеристики, при привязке к номенклатуры к конкретной характеристике
	
	КоличествоВыбранныхХарактеристик    = ИдентификаторыВыбранныхХарактеристик.Количество();
	ЭтоПервичноеЗаполнение              = Не ЗначениеЗаполнено(НоменклатураСсылка);
	ВедетсяУчетВидовНоменклатуры        = РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры();
	ИспользуютсяХарактеристикиВСистеме  = РаботаСНоменклатурой.ВедетсяУчетПоХарактеристикам();
	ИспользуютсяДополнительныеРеквизиты = РаботаСНоменклатурой.ИспользуютсяДополнительныеРеквизиты();
	
	// КоличествоНедоступныхХарактеристик - количество характеристик сопоставленных с другой номенклатурой.
	
	КоличествоНедоступныхХарактеристик = 
		РаботаСНоменклатурой.КоличествоСопоставленныхХарактеристикПоИдентификатору(ИдентификаторНоменклатуры, НоменклатураСсылка);
	
	Если ВызовИзПомощникаОбновления Тогда
		
		ОсновнаяЗапись = РаботаСНоменклатурой.ОсновнаяЗаписьСоответствияНоменклатуры(НоменклатураСсылка);
		
		Если ОсновнаяЗапись <> Неопределено 
			И ЗначениеЗаполнено(ОсновнаяЗапись.ИдентификаторХарактеристикиСервиса) Тогда
			
			ИдентификаторХарактеристики = ОсновнаяЗапись.ИдентификаторХарактеристикиСервиса;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыНоменклатурыДляОбновления) Тогда
			РеквизитыИзПомощникаОбновления.ЗагрузитьЗначения(РеквизитыНоменклатурыДляОбновления);
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ВедетсяУчетВидовНоменклатуры Тогда
		ПолучитьВидНоменклатурыИзДанныхЗаполнения(НоменклатураСсылка, ДанныеИнтерактивногоЗаполнения);			
	КонецЕсли;
			
	НастроитьФормуПриСоздании();
	
	ОчиститьДанныеПоВидуНоменклатуры();
	
	Если Не ЭтоПервичноеЗаполнение 
		И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		// Если объект уже записан в ИБ и в форме загрузки номенклатуры была выбрана характеристики, 
		// выполняется проверка возможности привязки характеристики к номенклатуре. Если характеристики
		// не поддерживаются - привязка к характеристике выполняется как к номенклатуре.
				
		ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры);
	КонецЕсли;
	
	ЗаполнитьПодсказкиФормы();
	
	НастроитьФормуПриДлительнойОперации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьДанныеПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьНеСопоставленВидНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьВидНоменклатуры" Тогда
		
		РаботаСНоменклатуройКлиентПереопределяемый.ОткрытьФормуВидаНоменклатуры(ВидНоменклатуры, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьКатегорию" Тогда
		
		РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиКатегории(ИдентификаторКатегории, Неопределено, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СопоставитьВидНоменклатуры" Тогда
						
		Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияРеквизитов", ЭтотОбъект);
				
		ПараметрыФормы = РаботаСНоменклатуройКлиент.ПараметрыФормыЗаполненияВидаНоменклатуры();
		
		ПараметрыФормы.ВидНоменклатуры    = ВидНоменклатуры;
		ПараметрыФормы.ЭтоВнешняяПривязка = Истина;
		
		ПараметрыФормы.ИдентификаторыКатегорий.Добавить(ИдентификаторКатегории, НаименованиеКатегории);
		
		РаботаСНоменклатуройКлиент.ОткрытьФормуЗаполненияВидаНоменклатуры(ПараметрыФормы, ЭтотОбъект, Оповещение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияРеквизитов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидНоменклатурыСопоставленСКатегорией(ВидНоменклатуры, ИдентификаторКатегории) Тогда
		ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры(Ложь);
	КонецЕсли;
	
	ИзменитьПодчиненныеСтроки(ВидНоменклатуры);
	
	ОповеститьОбИзменении(ВидНоменклатуры);
	
	ПриИзмененииВидаНоменклатурыСопоставления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбновляемыеРеквизиты

&НаКлиенте
Процедура ОбновляемыеРеквизитыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ОбновляемыеРеквизиты.ТекущийЭлемент <> Элементы.ОбновляемыеРеквизитыПометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновляемыеРеквизитыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновлятьВсеАвтоматически(Команда)
		
	РаботаСНоменклатуройКлиент.ПоказатьВопросПриВключенииАвтообновленияНоменклатуры(
		НоменклатураСсылка, ИдентификаторНоменклатуры, ЭтотОбъект, БлокируемыеРеквизиты.Количество() = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуру(Команда)
	
	Если ДействиеСВидомНоменклатуры = "Создать" Тогда
		СоздатьВидНоменклатуры();
	Иначе
		Если ДействиеСВидомНоменклатуры = "Выбрать" Тогда
			ДобавитьВыбранныйВидНоменклатуры();
		КонецЕсли;
		
		ОбновитьНоменклатуруПродолжение();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйВидНоменклатуры()
	
	Если ЗначениеЗаполнено(ВидНоменклатурыДляСопоставления) Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ОбновляемыеРеквизиты, "ВидНоменклатуры", 
			ВидНоменклатурыДляСопоставления, ВидНоменклатуры, НСтр("ru = 'Вид номенклатуры'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуруПродолжение()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.РаботаСНоменклатурой.Форма.ЗаполнениеНоменклатуры.ОбновитьНоменклатуру");

	Если ИспользуютсяХарактеристикиВСервисе Тогда
		УдалитьЛишниеХарактеристики();
	КонецЕсли;
	
	ЗакрытьСРасширеннымиПараметрами();
	
КонецПроцедуры

&НаСервере
Функция ХарактеристикаПривязываетсяКакНоменклатура()
	
	Возврат Не ЭтоПервичноеЗаполнение
		И ЭтоПривязка
		И СтатусВеденияУчетаХарактеристик = "НеВедутся"
		И ЗначениеЗаполнено(ИдентификаторыВыбранныхХарактеристик);
	
КонецФункции
	
&НаСервере
Функция ПривязываетсяНоменклатураБезХарактеристик()
	
	Возврат Не ЭтоПервичноеЗаполнение
		И ЭтоПривязка
		И СтатусВеденияУчетаХарактеристик = "НеВедутся"
		И Не ЗначениеЗаполнено(ИдентификаторыВыбранныхХарактеристик) > 0
		И ИспользуютсяХарактеристикиВСервисе;
	
КонецФункции	

&НаКлиенте
Процедура ЗакрытьСРасширеннымиПараметрами()
	
	Если ХарактеристикаПривязываетсяКакНоменклатура() Тогда
		
		// Если идет привязка характеристики в режиме номенклатуры.
		
		ИдентификаторХарактеристики = "";
		ИдентификаторХарактеристики = ИдентификаторыВыбранныхХарактеристик[0].Значение;
		ИдентификаторыВыбранныхХарактеристик.Очистить();
		РежимЗагрузкиХарактеристик = "НеЗагружать";
		
	ИначеЕсли ПривязываетсяНоменклатураБезХарактеристик() Тогда	
		
		// Если идет привязка номенклатуры с характеристиками без учета характеристик.
		
		РежимЗагрузкиХарактеристик = "БезПоддержкиХарактеристик";	
	Иначе
		
		Если Не ИспользуютсяХарактеристикиВСервисе Тогда
			
			// Если характеристики не используются.
			
			РежимЗагрузкиХарактеристик = "НеЗагружать";
		Иначе
			
			Если СтрокаХарактеристикВыбрана() Тогда
				
				// Если флаг строки характеристик установлен.
				
				Если КоличествоХарактеристик = КоличествоВыбранныхХарактеристик Тогда
					РежимЗагрузкиХарактеристик = "Все";
				ИначеЕсли КоличествоХарактеристик <> КоличествоВыбранныхХарактеристик И КоличествоВыбранныхХарактеристик > 0 Тогда	
					РежимЗагрузкиХарактеристик = "Выбранные";	
				КонецЕсли;	
			Иначе
				
				// Если флаг строки характеристик снят.
				
				РежимЗагрузкиХарактеристик = "Поддержка";
				ИдентификаторыВыбранныхХарактеристик.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УдалитьТехническиеРеквизиты();
	
	ПараметрыЗакрытия = Новый Структура;
	
	ПараметрыЗакрытия.Вставить("ТаблицаОтличий",                ПоместитьДанныеВХранилище());
	ПараметрыЗакрытия.Вставить("ИдентификаторыХарактеристик",   ИдентификаторыВыбранныхХарактеристик);
	ПараметрыЗакрытия.Вставить("АвтоматическийРежимОбновления", Ложь);
	ПараметрыЗакрытия.Вставить("ИдентификаторНоменклатуры",     ИдентификаторНоменклатуры);
	ПараметрыЗакрытия.Вставить("НаименованиеНоменклатуры",      НаименованиеНоменклатуры);
	ПараметрыЗакрытия.Вставить("ИдентификаторХарактеристики",   ИдентификаторХарактеристики);
	ПараметрыЗакрытия.Вставить("РежимЗагрузкиХарактеристик",    РежимЗагрузкиХарактеристик);
	ПараметрыЗакрытия.Вставить("КоличествоХарактеристик",       КоличествоХарактеристик);
	ПараметрыЗакрытия.Вставить("ЗагрузитьИзображения",          ЗагрузитьИзображения);
	ПараметрыЗакрытия.Вставить("АдресДанныхНоменклатуры",       АдресДанныхНоменклатуры);
	
	ПараметрыЗакрытия.Вставить("ИдентификаторКатегории",        ИдентификаторКатегории);
	ПараметрыЗакрытия.Вставить("НаименованиеКатегории",         НаименованиеКатегории);
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидНоменклатуры()
	
	ИдентификаторыКатегорий = 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый Структура("Идентификатор, КоличествоПодчиненных", ИдентификаторКатегории, 0));
		
	ПараметрыЗавершения = Новый Структура;
	
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("КатегорииКЗагрузке",   ИдентификаторыКатегорий);
	
	ЗагрузитьКатегорииЗавершение = Новый ОписаниеОповещения("ЗагрузитьКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ЗагрузитьКатегории(
		ЗагрузитьКатегорииЗавершение, ИдентификаторыКатегорий, ЭтотОбъект, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Ошибка = Ложь;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатЗагрузки = Неопределено Тогда 
			Ошибка = Истина;
		КонецЕсли;
	Иначе
		Ошибка = Истина;
	КонецЕсли;
	
	Если Ошибка Тогда 
		КартинкаОповещения = БиблиотекаКартинок.Ошибка32;
		ТекстОповещения = НСтр("ru = 'Создать не удалось'");
	Иначе
		Если РезультатЗагрузки.НовыеЭлементы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ВидНоменклатурыДляЗаполнения = РезультатЗагрузки.НовыеЭлементы[0].ВидНоменклатуры;
	
	ЗаполнитьДанныеПослеСозданияВидаНоменклатуры();
	
	ОбновитьНоменклатуруПродолжение();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПослеСозданияВидаНоменклатуры()
	
	РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ОбновляемыеРеквизиты, "ВидНоменклатуры", 
		ВидНоменклатурыДляЗаполнения, ВидНоменклатуры, НСтр("ru = 'Вид номенклатуры'"));
	
	ОбновитьДанныеДополнительныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДополнительныхРеквизитов()
	
	ДанныеНоменклатуры = ПолучитьИзВременногоХранилища(АдресДанныхНоменклатуры);
	
	ТекущаяНоменклатура = ДанныеНоменклатуры[0];
	
	ТекущаяНоменклатура.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры                   = ВидНоменклатурыДляЗаполнения;
	ТекущаяНоменклатура.ВидНоменклатурыПоУмолчанию.ВариантИспользованияХарактеристик = "Общие";
	
	ЗаполнитьСоответствиеДополнительныхРеквизитов(ТекущаяНоменклатура);
	
	Для каждого ЭлементКоллекции Из ТекущаяНоменклатура.ДополнительныеРеквизиты Цикл
		
		СтрокиДанных = ОбновляемыеРеквизиты.НайтиСтроки(Новый Структура("ИдентификаторРеквизита", ЭлементКоллекции.Идентификатор));
		
		Если СтрокиДанных.Количество() > 0 Тогда
			СтрокиДанных[0].РеквизитОбъекта = ЭлементКоллекции.РеквизитИнформационнойБазы;
			СтрокиДанных[0].НовоеЗначение = ЭлементКоллекции.ЗначениеИнформационнойБазы;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеНоменклатуры, АдресДанныхНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеХарактеристики()
	
	СтрокаХарактеристик = СтрокаХарактеристик(); 
	
	Если СтрокаХарактеристик = Неопределено
		ИЛИ СтрокаХарактеристик.Пометка Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = ПолучитьИзВременногоХранилища(АдресДанныхНоменклатуры);
	
	ТекущаяНоменклатура = ДанныеНоменклатуры[0];
	
	Характеристики = ТекущаяНоменклатура.Характеристики;
	
	Счетчик = 0;
	
	Пока Счетчик < Характеристики.Количество() Цикл
		
		// Удаление характеристик, которые создавать не требуется
		
		Если ИдентификаторыВыбранныхХарактеристик.НайтиПоЗначению(Характеристики[Счетчик].Идентификатор) = Неопределено Тогда
			Характеристики.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеНоменклатуры, АдресДанныхНоменклатуры)
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТехническиеРеквизиты()
	
	СтрокаХарактеристик = СтрокаХарактеристик();
	
	Если СтрокаХарактеристик <> Неопределено Тогда
		
		Если Не СтрокаХарактеристик.Пометка Тогда
			ИдентификаторыРеквизитовХарактеристик.Очистить();
		КонецЕсли;
		
		ОбновляемыеРеквизиты.Удалить(СтрокаХарактеристик);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеВХранилище()
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(НоменклатураСсылка, Ложь);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ОбновляемыеРеквизиты.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
		Если Не ЭлементКоллекции.ТолькоПросмотр Тогда
			ЭлементКоллекции.Пометка = Истина;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
		Если Не ЭлементКоллекции.ТолькоПросмотр Тогда
			ЭлементКоллекции.Пометка = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКФормеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиНоменклатуры(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НавигационнаяСсылкаФорматированнойСтроки), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеСтроки

&НаСервере
Функция СтрокаХарактеристик()
	
	Строки = ОбновляемыеРеквизиты.НайтиСтроки(Новый Структура("ЭтоСтрокаХарактеристик", Истина));
	
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтрокаВидаНоменклатуры()
	
	НайденныеСтроки = ОбновляемыеРеквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", "ВидНоменклатуры"));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено; 	
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ЭтоСтрокаВидаНоменклатуры(ТекущиеДанные)
	
	Возврат ТекущиеДанные.РеквизитОбъекта = "ВидНоменклатуры";
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура НастроитьФормуПриДлительнойОперации(ЭтоНачалоДлительнойОперации)
	
	Если ЭтоНачалоДлительнойОперации Тогда
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДлительнойОперации;
	Иначе
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаРеквизитов;
	КонецЕсли;
	
	Элементы.ГруппаКнопкиФормы.Доступность                = Не ЭтоНачалоДлительнойОперации;
	Элементы.ГруппаДействиеСВидомНоменклатуры.Доступность = Не ЭтоНачалоДлительнойОперации;
	Элементы.ОбновляемыеРеквизиты.Доступность             = Не ЭтоНачалоДлительнойОперации;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидНоменклатурыПоддерживаетХарактеристикиСервиса(
			ВидНоменклатуры, 
			ИдентификаторКатегории, 
			ИдентификаторыРеквизитовХарактеристик, 
			РезультатПроверки = Неопределено)
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("Сопоставлен",                        Ложь); // Вид номенклатуры сопоставлен с категорией
	РезультатПроверки.Вставить("ВедутсяХарактеристики",              Ложь); // Ведутся характеристики для вида номенклатуры
	
	Результат = Ложь;
	
	Если ВидНоменклатурыСопоставленСКатегорией(ВидНоменклатуры, ИдентификаторКатегории) Тогда
		РезультатПроверки.Сопоставлен = Истина;
	КонецЕсли;
	
	СтатусВеденияУчетаХарактеристик = РаботаСНоменклатурой.ВариантИспользованияХарактеристик(ВидНоменклатуры);
	
	Если СтатусВеденияУчетаХарактеристик <> "НеВедутся" Тогда
		РезультатПроверки.ВедутсяХарактеристики = Истина;
	КонецЕсли;
		
	Результат = РезультатПроверки.Сопоставлен 
		И РезультатПроверки.ВедутсяХарактеристики; 
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьВидНоменклатурыИзДанныхЗаполнения(НоменклатураСсылка, ДанныеИнтерактивногоЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		ПолученыЗначенияРеквизитов(ВидНоменклатуры, "ВидНоменклатуры");
	Иначе
		РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоНоменклатуре()
	
	ПараметрыЗавершения = Новый Структура;
	
	ПолучитьНоменклатуруЗавершение = Новый ОписаниеОповещения("ПолучитьДанныеПоНоменклатуреЗавершение", ЭтотОбъект, ПараметрыЗавершения);
	
	Если ЗначениеЗаполнено(ИдентификаторХарактеристики) Тогда
		Идентификатор = Новый Соответствие();
		
		Идентификатор.Вставить(ИдентификаторНоменклатуры, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторХарактеристики));
	Иначе
		Идентификатор = ИдентификаторНоменклатуры;
	КонецЕсли;
	
	ПараметрыМетода = РаботаСНоменклатуройКлиент.ПараметрыЗапросаДанныхНоменклатуры();
	
	ПараметрыМетода.Идентификаторы                       = Идентификатор;
	ПараметрыМетода.АктуализироватьВспомогательныеДанные = Истина;
	
	РаботаСНоменклатуройКлиент.ПолучитьДанныеНоменклатурыСервиса(
		ПолучитьНоменклатуруЗавершение, 
		ПараметрыМетода, 
		ЭтотОбъект, 
		ИдентификаторЗадания, 
		Элементы.КартинкаДлительнойОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоНоменклатуреЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторЗадания <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТаблицыФорм(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыФорм(АдресРезультата, ДополнительныеПараметры)
	
	НастроитьФормуПриДлительнойОперации(Ложь);
	
	СтрокаДанных = ДанныеИзХранилища(АдресРезультата);
		
	Если СтрокаДанных = Неопределено Тогда
		ЗаблокироватьФорму();
		Возврат;
	КонецЕсли;
	
	Если ВедетсяУчетВидовНоменклатуры Тогда
		ЗаполнитьДанныеПоВидуНоменклатуры(СтрокаДанных);
	КонецЕсли;
		
	СформироватьТаблицуОсновныхРеквизитов(СтрокаДанных);
	
	ИспользуютсяХарактеристикиВСервисе = СтрокаДанных.КоличествоХарактеристик > 0;
		
	Если ВедетсяУчетВидовНоменклатуры Тогда
		
		Если ИспользуютсяДополнительныеРеквизиты Тогда
			СформироватьТаблицуДополнительныхРеквизитов(СтрокаДанных);
		КонецЕсли;
		
		Если (ЭтоПривязка ИЛИ ЭтоПервичноеЗаполнение)
			И ИспользуютсяХарактеристикиВСистеме Тогда
			
			Если ИспользуютсяХарактеристикиВСервисе Тогда
				// Обновление подсказки, после получения статуса учета характеристик.
				Элементы.ПояснениеКФорме.Заголовок = ТекстПоясненияКФорме();
			КонецЕсли;
						
			ДобавитьСтрокуХарактеристик(СтрокаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВызовИзПомощникаОбновления Тогда
		Для каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
			ЭлементКоллекции.Пометка 
				= РеквизитыИзПомощникаОбновления.НайтиПоЗначению(ЭлементКоллекции.РеквизитОбъекта) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоПривязка И ЗначениеЗаполнено(СтрокаДанных.Изображения) Тогда
		ЗагрузитьИзображения = Истина;	
	КонецЕсли;
	
	Если Не ЭтоПервичноеЗаполнение Тогда
		РаботаСНоменклатурой.ЗаблокироватьРеквизиты(ЭтотОбъект, ОбновляемыеРеквизиты, НоменклатураСсылка);
	КонецЕсли;
	
	Если ОбновляемыеРеквизиты.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОтсутствияИзменений;
		
		Если Не ЭтоПривязка И Не ЭтоПервичноеЗаполнение Тогда
			Элементы.ОбновитьНоменклатуру.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьФорму()
	
	Элементы.ГруппаКнопкиФормы.Доступность = Ложь;
	ЭтотОбъект.Доступность = Ложь;
		
КонецПроцедуры

&НаСервере
Функция ДанныеИзХранилища(АдресРезультата)
	
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.
		ПолучитьДанныеИзВременногоХранилища(АдресРезультата, Тип("ТаблицаЗначений"), Ложь);
		
	Если Не ЗначениеЗаполнено(ДанныеПоНоменклатуре) Тогда
		Возврат Неопределено; 
	КонецЕсли;	
		
	АдресДанныхНоменклатуры = АдресРезультата;
	
	Результат = ДанныеПоНоменклатуре[0];
	
	Если ЗначениеЗаполнено(ИдентификаторХарактеристики) Тогда
		ПреобразоватьХарактеристикуВНоменклатуру(Результат);
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре[0];
	
КонецФункции

&НаСервере
Процедура ПреобразоватьХарактеристикуВНоменклатуру(СтрокаДанных)
	
	СтрокаХарактеристики = СтрокаДанных.ДанныеХарактеристик.Найти(ИдентификаторХарактеристики, "Идентификатор");
	
	Если СтрокаХарактеристики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.Наименование = РаботаСНоменклатурой.
		НаименованиеПоНоменклатуреИХарактеристике(СтрокаДанных.Наименование, СтрокаХарактеристики.Наименование);
		
	Если СтрокаДанных.ДанныеХарактеристик.Количество() > 0 Тогда	
		Для каждого ЭлементКоллекции Из СтрокаДанных.ДанныеХарактеристик[0].ДополнительныеРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДанных.ДополнительныеРеквизиты.Добавить(), ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоВидуНоменклатуры(СтрокаДанных)
	
	ИдентификаторКатегории = СтрокаДанных.Категория.Идентификатор;
	НаименованиеКатегории  = СтрокаДанных.Категория.Наименование;
	
	ВидыНоменклатурыБазы = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(СтрокаДанных.Категория.Идентификатор);
	
	ВидыНоменклатурыКатегории.ЗагрузитьЗначения(ВидыНоменклатурыБазы);
			
	Если ЭтоПервичноеЗаполнение Тогда
		
		// Заполняемая номенклатура не записана в базу.
		
		Если ВидыНоменклатурыБазы.Количество() = 1 Тогда
			ВидНоменклатурыДляЗаполнения = ВидыНоменклатурыБазы[0];
			
			Если ВидНоменклатуры <> ВидыНоменклатурыБазы[0] Тогда
				РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ОбновляемыеРеквизиты, "ВидНоменклатуры", 
					ВидНоменклатурыДляЗаполнения, ВидНоменклатуры, НСтр("ru = 'Вид номенклатуры'"));
			КонецЕсли;
		Иначе
			// Обнаружено 0 или несколько видов номенклатуры.
			ПоказатьЭлементыДляВыбораСозданияВидаНоменклатуры(СтрокаДанных.Категория.Наименование);	
		КонецЕсли;
		
	Иначе
		
		// Заполняемая номенклатура уже записана в базу.
		
		Если ВидыНоменклатурыБазы.Найти(ВидНоменклатуры) = Неопределено Тогда
			
			// Вид номенклатуры не соответствует идентификатору категории.
			
			Если ВидНоменклатурыСопоставлен(ВидНоменклатуры) Тогда 
				// вид номенклатуры сопоставлен с другой категорией.
				ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры(Истина, Истина);
			Иначе
				ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры(Истина);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуХарактеристик(СтрокаДанных)
	
	Если СтрокаДанных.Характеристики.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
		
	КоличествоХарактеристик = СтрокаДанных.КоличествоХарактеристик - КоличествоНедоступныхХарактеристик;
	
	Если ЭтоПервичноеЗаполнение
		И ИдентификаторыВыбранныхХарактеристик.Количество() = 0 Тогда
		
		КоличествоВыбранныхХарактеристик = КоличествоХарактеристик;
	КонецЕсли;
	
	ИдентификаторыРеквизитовХарактеристик.ЗагрузитьЗначения(
		СтрокаДанных.Характеристики[0].ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор"));
	
	НоваяСтрока = ОбновляемыеРеквизиты.Добавить();
	
	НоваяСтрока.ЭтоСтрокаХарактеристик = Истина;
	
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru = 'Характеристики'");
	
	НоваяСтрока.ГиперссылкаСтроки = ПредставлениеСтрокиХарактеристик();
	
	Если СтрокаВидаНоменклатуры() <> Неопределено Тогда
		Если НЕ ВидНоменклатурыПоддерживаетХарактеристикиСервиса(
			СтрокаВидаНоменклатуры().НовоеЗначение, ИдентификаторКатегории, ИдентификаторыРеквизитовХарактеристик) Тогда
			
			ИзменитьДоступностьСтроки(НоваяСтрока, Ложь);
		Иначе
			ИзменитьДоступностьСтроки(НоваяСтрока, Истина);	
		КонецЕсли;
	Иначе
		Если Не ЭтоПервичноеЗаполнение
			И Не ВидНоменклатурыПоддерживаетХарактеристикиСервиса(
				ВидНоменклатуры, ИдентификаторКатегории, ИдентификаторыРеквизитовХарактеристик) Тогда
			
			ИзменитьДоступностьСтроки(НоваяСтрока, Ложь);
		Иначе
			ИзменитьДоступностьСтроки(НоваяСтрока, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждениеОСозданииХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ВидНоменклатурыБудетИзменен()
	
	Результат = Ложь;
	
	СтрокаВидаНоменклатуры = СтрокаВидаНоменклатуры();
	
	Если ДействиеСВидомНоменклатуры = "Создать"
		ИЛИ (СтрокаВидаНоменклатуры <> Неопределено И СтрокаВидаНоменклатуры.Пометка) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	Элементы.ОбновлятьВсеАвтоматически.Видимость 
		= НЕ ВызовИзПомощникаОбновления 
			И Не ЭтоПривязка
			И ЗначениеЗаполнено(НоменклатураСсылка);
	
	Если ВызовИзПомощникаОбновления Тогда
		Элементы.ОбновитьНоменклатуру.Заголовок = НСтр("ru = 'Закрыть'");
		Заголовок = НСтр("ru = 'Изменения номенклатуры'");
	Иначе
		Если ЭтоПривязка  Тогда
			Элементы.ОбновитьНоменклатуру.Заголовок = НСтр("ru = 'Заполнить'");
			Заголовок = НСтр("ru = 'Заполнение номенклатуры'");
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ГруппаДействиеСВидомНоменклатуры.Видимость = Ложь;
	Элементы.ГруппаРеквизитыЗаблокированы.Видимость     = Ложь;
	
	Если ЭтоПривязка ИЛИ ЭтоПервичноеЗаполнение Тогда
		Элементы.НадписьДлительнойОперации.Заголовок  = НСтр("ru = 'Проверка наличия расхождений в данных...'");
		Элементы.НадписьОтсутствияИзменений.Заголовок = НСтр("ru = 'Данные номенклатуры актуальны'");
	Иначе
		Элементы.НадписьДлительнойОперации.Заголовок  = НСтр("ru = 'Проверка наличия обновлений...'");
		Элементы.НадписьОтсутствияИзменений.Заголовок = НСтр("ru = 'Данные номенклатуры актуальны, обновление не требуется'");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидНоменклатурыСопоставлен(СсылкаНаВидНоменклатуры)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", СсылкаНаВидНоменклатуры);
		
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуОсновныхРеквизитов(СтрокаДанных)
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		ЗначенияРеквизитовОбъекта = Неопределено;
		
		Если НЕ ПолученыЗначенияРеквизитов(ЗначенияРеквизитовОбъекта, "ОсновныеРеквизиты") Тогда
			Возврат;	
		КонецЕсли;
	Иначе
		ЗначенияРеквизитовОбъекта = Новый ТаблицаЗначений;
		
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(НоменклатураСсылка, ЗначенияРеквизитовОбъекта);
		
		Если ЗначенияРеквизитовОбъекта.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ЗначенияРеквизитовОбъекта = ЗначенияРеквизитовОбъекта[0];
	КонецЕсли;
		
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры(СтрокаДанных, ЗначенияРеквизитовОбъекта, ТаблицаОтличий);
	
	Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
		ЗаполнитьЗначенияСвойств(ОбновляемыеРеквизиты.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолученыЗначенияРеквизитов(ЗначенияРеквизитовОбъекта, ТипРеквизитов)
	
	Если НЕ ЭтоАдресВременногоХранилища(ДанныеИнтерактивногоЗаполнения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияИзХранилища = ПолучитьИзВременногоХранилища(ДанныеИнтерактивногоЗаполнения);
	
	Если ТипЗнч(ЗначенияИзХранилища) <> Тип("Структура")
		ИЛИ Не ЗначенияИзХранилища.Свойство(ТипРеквизитов) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияРеквизитовОбъекта = ЗначенияИзХранилища[ТипРеквизитов];
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДополнительныхРеквизитов(СтрокаДанных)
	
	ИдентификаторыДополнительныхРеквизитов.ЗагрузитьЗначения(СтрокаДанных.ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор"));
	
	СоответствиеРеквизитовИЗначений = Неопределено;
	
	Если ВидНоменклатурыБудетИзменен() Тогда
		РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(СтрокаДанных.ИдентификаторКатегории, СоответствиеРеквизитовИЗначений, ВидНоменклатурыДляЗаполнения);
		РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанных, ВидНоменклатурыДляЗаполнения);
	Иначе
		РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(СтрокаДанных.ИдентификаторКатегории, СоответствиеРеквизитовИЗначений, ВидНоменклатуры);
		РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанных, ВидНоменклатуры);
	КонецЕсли;
		
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		Если Не ПолученыЗначенияРеквизитов(ЗначенияРеквизитов, "ДополнительныеРеквизиты") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураСсылка), ЗначенияРеквизитов);
	КонецЕсли;
	
	ВидНоменклатурыБудетСоздан = ДействиеСВидомНоменклатуры = "Создать";
	РаботаСНоменклатурой.ДобавитьДополнительныеРеквизитыКОбновляемым(ОбновляемыеРеквизиты, 
		СтрокаДанных, ЗначенияРеквизитов, ВидНоменклатурыБудетСоздан);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкиФормы()
	
	Элементы.ПояснениеКФорме.Заголовок = ТекстПоясненияКФорме();
	Элементы.ГруппаНеСопоставленВидНоменклатуры.Видимость = Ложь;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры(Видимость, КатегорииОтличаются = Ложь)
	
	Если Видимость Тогда
		Элементы.НадписьНеСопоставленВидНоменклатуры.Заголовок  
			= Новый ФорматированнаяСтрока(ТекстНеСопоставленногоВида(КатегорииОтличаются));
	КонецЕсли;
	
	Элементы.ГруппаНеСопоставленВидНоменклатуры.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СерыйЦвет = Новый Цвет(200, 200, 200);
	
	// Не сопоставленные реквизиты
	
	// Текст
	
	// Реквизит не сопоставлен
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<реквизит не сопоставлен>'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НеСопоставлен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыТекущееЗначение.Имя);
	
	// Реквизит не сопоставлен, но будет загружен
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<значение будет установлено автоматически>'"));
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", СерыйЦвет);
	
	ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ЭтоДополнительныйРеквизит");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ТекущееЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НеСопоставлен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыТекущееЗначение.Имя);
	
	// Только просмотр
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизиты.Имя);
		
	// Цвет не сопоставленных
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", СерыйЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НеСопоставлен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизиты.Имя);
	
	// Значение не сопоставлено
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Значение не сопоставлено>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", СерыйЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НовоеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыНовоеЗначение.Имя);
	
	// Выделение вида номенклатуры
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт("Arial", 10, Истина));
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.РеквизитОбъекта");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = "ВидНоменклатуры";
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыПредставлениеРеквизита.Имя);
	
	// Видимость гиперссылки Истина
	
	УстановитьУсловноеОформлениеДляХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляХарактеристик()
	
	// Видимость гиперссылки Ложь
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ЭтоСтрокаХарактеристик");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Ложь;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыГиперссылкаСтроки.Имя);
	
	// Видимость гиперссылки Истина
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ЭтоСтрокаХарактеристик");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Истина;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыГиперссылкаСтроки.Имя);
	
	// Видимость полей с текстом
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ЭтоСтрокаХарактеристик");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Истина;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыТекущееЗначение.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыНовоеЗначение.Имя);
	
	// Доступность гиперссылки Ложь
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыГиперссылкаСтроки.Имя);
	
	// Доступность гиперссылки Истина
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);	
	
	// Отбор
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыГиперссылкаСтроки.Имя);
	
КонецПроцедуры

&НаСервере
Функция ТекстПоясненияКФорме()
	
	Результат = "";
	
	Если ХарактеристикаПривязываетсяКакНоменклатура() 
		ИЛИ ПривязываетсяНоменклатураБезХарактеристик() Тогда
		
		СтрокаПодсказки = НСтр("ru = 'Вид номенклатуры <b>%1</b> не поддерживает характеристики. Номенклатура <a href = ""%2"">%3</a> будет привязана без характеристик.'");
		
		Результат = СтрШаблон(СтрокаПодсказки, ВидНоменклатуры, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		
	Иначе
		
		Если ЭтоПервичноеЗаполнение Тогда			
			СтрокаПодсказки = НСтр("ru = 'Заполнение номенклатуры на основании карточки 1С:Номенклатуры <a href = ""%1"">%2</a>.'");
			Результат = СтрШаблон(СтрокаПодсказки, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		Иначе
			СтрокаПодсказки = НСтр("ru = 'Обновление номенклатуры <b>%1</b> на основании карточки 1С:Номенклатуры <a href = ""%2"">%3</a>.'");
			Результат = СтрШаблон(СтрокаПодсказки, НоменклатураСсылка, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Результат);
	
КонецФункции

&НаСервере
Функция ТекстНеСопоставленногоВида(КатегорииОтличаются = Ложь)
	
	ПредставлениеВидаНоменклатуры = 
		?(НЕ ЗначениеЗаполнено(ВидНоменклатуры), Строка(НоменклатураСсылка), Строка(ВидНоменклатуры));
	
	МассивПодстрок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		МассивПодстрок.Добавить(НСтр("ru = 'Не заполнен вид номенклатуры карточки'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВидаНоменклатуры, Новый Шрифт(,,Истина)));
		МассивПодстрок.Добавить(". " + НСтр("ru = 'Для возможности обновления дополнительных реквизитов необходимо выбрать вид номенклатуры, сопоставленный с категорией'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НаименованиеКатегории,,,,"ОткрытьКатегорию"));
		МассивПодстрок.Добавить(".");
		
	Иначе
		
		Если КатегорииОтличаются Тогда
			
			МассивПодстрок.Добавить(НСтр("ru = 'Вид текущей номенклатуры сопоставлен с категорий, отличной от категории выбранной номенклатуры'") + ". ");
			МассивПодстрок.Добавить(НСтр("ru = 'Работа с дополнительными реквизитами недоступна'") + ".");
			
		Иначе
			МассивПодстрок.Добавить(НСтр("ru = 'Вид номенклатуры'") + " ");
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВидаНоменклатуры, Новый Шрифт(,,Истина)));
			МассивПодстрок.Добавить(" " + НСтр("ru = 'не сопоставлен с категорией 1С:Номенклатуры'") + " ");
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НаименованиеКатегории,,,,"ОткрытьКатегорию"));
			МассивПодстрок.Добавить(НСтр("ru = '. Для возможности обновления дополнительных реквизитов необходимо'") + " ");
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'сопоставить вид номенклатуры с категорией'"),,,,"СопоставитьВидНоменклатуры"));
			МассивПодстрок.Добавить(".");
		КонецЕсли;
				
	КонецЕсли;
		
	Возврат МассивПодстрок;
	
КонецФункции

&НаКлиенте
Процедура ОбновляемыеРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбновляемыеРеквизитыГиперссылкаСтроки Тогда
		
		ОткрытьФормуЗаполненияХарактеристик();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияХарактеристик()
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораХарактеристик", ЭтотОбъект, 
		Новый Структура("ТекущаяСтрока", Элементы.ОбновляемыеРеквизиты.ТекущаяСтрока));
		
	РаботаСНоменклатуройКлиент.ОткрытьФормуПодбораХарактеристик(ИдентификаторНоменклатуры,
		АдресДанныхНоменклатуры, ИдентификаторыВыбранныхХарактеристик, Ложь, ЭтотОбъект, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораХарактеристик(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВыбораХарактеристикСервер(Результат, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораХарактеристикСервер(Результат, ДополнительныеПараметры)
	
	КоличествоВыбранныхХарактеристик = Результат.КоличествоВыбранныхХарактеристик;
	
	ИдентификаторыВыбранныхХарактеристик.ЗагрузитьЗначения(Результат.ИдентификаторыВыбранныхХарактеристик);
	
	СтрокаДанных = СтрокаХарактеристик();
	
	Если СтрокаДанных <> Неопределено Тогда
		СтрокаДанных.ГиперссылкаСтроки = ПредставлениеСтрокиХарактеристик();	
	КонецЕсли;
	
	ПоказатьПредупреждениеОСозданииХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеСтрокиХарактеристик()
	
	Результат = "";
	
	Результат = СтрШаблон(
		НСтр("ru = 'Выбрано характеристик: %1 из %2'"), КоличествоВыбранныхХарактеристик, КоличествоХарактеристик);
	
	Возврат Результат;
			
КонецФункции

&НаКлиенте
Процедура СоздатьВидНоменклатурыПриИзменении(Элемент)
	
	ДействиеСВидомНоменклатуры = "Создать";
	
	ИзменитьПодчиненныеСтроки();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСуществующийВидНоменклатурыПриИзменении(Элемент)
	
	ДействиеСВидомНоменклатуры = "Выбрать";
	
	ИзменитьПодчиненныеСтроки(ВидНоменклатурыДляСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьЭлементыДляВыбораСозданияВидаНоменклатуры(НаименованиеКатегории)
	
	Элементы.ГруппаДействиеСВидомНоменклатуры.Видимость = Истина;
	
	Если ВидыНоменклатурыКатегории.Количество() = 0 Тогда
		Элементы.ПояснениеПоВидуНоменклатуры.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Не обнаружен вид номенклатуры, сопоставленный с категорией <b>%1</b>'"),
			НаименованиеКатегории);
					
		ДействиеСВидомНоменклатуры = "Создать";			
					
	ИначеЕсли ВидыНоменклатурыКатегории.Количество() > 0 Тогда
		Элементы.ПояснениеПоВидуНоменклатуры.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Обнаружено несколько видов номенклатуры, сопоставленных с категорией <b>%1</b>. 
				|Выберите вид номенклатуры, если хотите использовать дополнительные реквизиты и характеристики.'"),
			НаименованиеКатегории);
						
		Элементы.СоздатьВидНоменклатуры.Видимость = Ложь;
		Элементы.ВыбратьСуществующийВидНоменклатуры.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыДляСопоставленияПриИзменении(Элемент)
	
	ПриИзмененииВидаНоменклатурыСопоставления();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаНоменклатурыСопоставления()
	
	ОчиститьДанныеПоВидуНоменклатуры();
	
	Если Не ЗначениеЗаполнено(ВидНоменклатурыДляСопоставления) Тогда
		Возврат;
	КонецЕсли;
		
	ВидНоменклатурыСопоставлен 
		= ВидНоменклатурыСопоставленСКатегорией(ВидНоменклатурыДляСопоставления, ИдентификаторКатегории);
				
	ЗаполнитьКоличествоРеквизитов();
	
	Если ВсеРеквизитыСопоставлены Тогда
		Характеристики = "ВсеХарактеристики";
	КонецЕсли;		
	
	ПолучитьВариантИспользованияХарактеристик(ВидНоменклатурыДляСопоставления);	
	
	СформироватьПодсказкуКВидуНоменклатуры(ПараметрыДляПодсказкиКВидуНоменклатуры(),
		Элементы.ПояснениеКВидуНоменклатуры.Заголовок);
		
	ИзменитьПодчиненныеСтроки(ВидНоменклатурыДляСопоставления);	
		
КонецПроцедуры
	
&НаСервере
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатурыСсылка)
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыСсылка) Тогда
		Возврат;
	КонецЕсли;	
	
	СтатусВеденияУчетаХарактеристик = РаботаСНоменклатурой.ВариантИспользованияХарактеристик(ВидНоменклатурыСсылка);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидНоменклатурыСопоставленСКатегорией(ВидНоменклатуры, ИдентификаторКатегории)
	
	Идентификаторы = РаботаСНоменклатурой.ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(ВидНоменклатуры);
	
	Возврат Идентификаторы.Найти(ИдентификаторКатегории, "ИдентификаторКатегории") <> Неопределено;
		
КонецФункции

&НаСервере
Процедура ОчиститьДанныеПоВидуНоменклатуры()
	
	Элементы.ПояснениеКВидуНоменклатуры.Заголовок  = "";
	КоличествоДополнительныхРеквизитов             = 0;
	КоличествоСопоставленныхРеквизитов             = 0;
	СтатусВеденияУчетаХарактеристик                = "";

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКоличествоРеквизитов()
	
	ДанныеДляЗаполнения = Новый Структура;
	
	ДанныеДляЗаполнения.Вставить("ВидНоменклатуры", ВидНоменклатурыДляСопоставления);
	ДанныеДляЗаполнения.Вставить("КоличествоДополнительныхРеквизитов", 0);
	ДанныеДляЗаполнения.Вставить("КоличествоСопоставленныхРеквизитов", 0);
	
	ДанныеНоменклатуры = ПолучитьИзВременногоХранилища(АдресДанныхНоменклатуры);
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатурой.ПодсчитатьКоличествоДополнительныхРеквизитов(ДанныеНоменклатуры[0], ДанныеДляЗаполнения);
		
	КоличествоДополнительныхРеквизитов = ДанныеДляЗаполнения.КоличествоДополнительныхРеквизитов;
	КоличествоСопоставленныхРеквизитов = ДанныеДляЗаполнения.КоличествоСопоставленныхРеквизитов;
	
	ВсеРеквизитыСопоставлены 
		= КоличествоДополнительныхРеквизитов = КоличествоСопоставленныхРеквизитов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеДополнительныхРеквизитов(СтрокаНоменклатуры)
	
	СоответствиеРеквизитовИЗначений = Неопределено;
	
	РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории), СоответствиеРеквизитовИЗначений, Неопределено);
	
	РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаНоменклатуры);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьПодсказкуКВидуНоменклатуры(Данные, РеквизитХраненияПодсказки)
	
	РаботаСНоменклатурой.СформироватьПодсказкуКВидуНоменклатуры(Данные, РеквизитХраненияПодсказки);
	
	Элементы.ПояснениеКВидуНоменклатуры.Гиперссылка 
		= Данные.ВидНоменклатурыСопоставлен 
			И Данные.КоличествоДополнительныхРеквизитов <> Данные.КоличествоСопоставленныхРеквизитов;
			
	Если Элементы.ПояснениеКВидуНоменклатуры.Гиперссылка  Тогда
		Элементы.ПояснениеКВидуНоменклатуры.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		Элементы.ПояснениеКВидуНоменклатуры.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПараметрыДляПодсказкиКВидуНоменклатуры()
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ВидНоменклатуры",                    ВидНоменклатурыДляСопоставления);
	ПараметрыМетода.Вставить("ИдентификаторКатегории",             ИдентификаторКатегории);
	ПараметрыМетода.Вставить("НаименованиеКатегории",              НаименованиеКатегории);
	ПараметрыМетода.Вставить("СтатусВеденияУчетаХарактеристик",    СтатусВеденияУчетаХарактеристик);
	ПараметрыМетода.Вставить("КоличествоСопоставленныхРеквизитов", КоличествоСопоставленныхРеквизитов);
	ПараметрыМетода.Вставить("КоличествоДополнительныхРеквизитов", КоличествоДополнительныхРеквизитов);
	ПараметрыМетода.Вставить("ИспользуютсяХарактеристикиВСервисе", ИспользуютсяХарактеристикиВСервисе);
	ПараметрыМетода.Вставить("ВидыНоменклатурыКатегории",          ВидыНоменклатурыКатегории);
	ПараметрыМетода.Вставить("ВидНоменклатурыСопоставлен",         ВидНоменклатурыСопоставлен);

	Возврат ПараметрыМетода;
	
КонецФункции

&НаКлиенте
Процедура ОбновляемыеРеквизитыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбновляемыеРеквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭтоСтрокаВидаНоменклатуры(ТекущиеДанные) Тогда
		ИзменитьПодчиненныеСтроки(?(ТекущиеДанные.Пометка, ТекущиеДанные.НовоеЗначение, ТекущиеДанные.ТекущееЗначение));
	ИначеЕсли ТекущиеДанные.ЭтоСтрокаХарактеристик Тогда
		ПоказатьПредупреждениеОСозданииХарактеристик();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаХарактеристикВыбрана()
	
	СтрокаХарактеристик = СтрокаХарактеристик();
	
	Возврат СтрокаХарактеристик <> Неопределено 
		И СтрокаХарактеристик.Пометка;
	
КонецФункции

&НаСервере
Процедура ИзменитьПодчиненныеСтроки(ТекущийВидНоменклатуры = Неопределено)
	
	СоответствиеРеквизитов = РаботаСНоменклатурой.СоответствиеРеквизитовИЗначенийПоВидуНоменклатуры(ТекущийВидНоменклатуры);
		
	Для каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
		Если ЭлементКоллекции.ЭтоСтрокаХарактеристик Тогда
			
			Если ДействиеСВидомНоменклатуры = "Создать" Тогда
				ИзменитьДоступностьСтроки(ЭлементКоллекции, Истина);
			ИначеЕсли Не ЗначениеЗаполнено(ТекущийВидНоменклатуры) Тогда
				ИзменитьДоступностьСтроки(ЭлементКоллекции, Ложь);
			Иначе
				ХарактеристикиНастроены = 
					ВидНоменклатурыПоддерживаетХарактеристикиСервиса(ТекущийВидНоменклатуры, ИдентификаторКатегории, ИдентификаторыРеквизитовХарактеристик.ВыгрузитьЗначения());
				
				ИзменитьДоступностьСтроки(ЭлементКоллекции, ХарактеристикиНастроены);	
			КонецЕсли;
			
			ПоказатьПредупреждениеОСозданииХарактеристик();

		ИначеЕсли ЭлементКоллекции.ЭтоДополнительныйРеквизит Тогда	
			
			Если ДействиеСВидомНоменклатуры = "Создать" Тогда
				ИзменитьДоступностьСтроки(ЭлементКоллекции, Истина);
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекущийВидНоменклатуры) Тогда
				ИзменитьДоступностьСтроки(ЭлементКоллекции, Ложь);
				Продолжить;
			КонецЕсли;
						
			ЭлементКоллекции.РеквизитОбъекта = Неопределено;
			ЭлементКоллекции.НовоеЗначение = Неопределено;
									
			ЗаполнитьРеквизитИЗначенияПоСоответствию(ЭлементКоллекции, СоответствиеРеквизитов);
			
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредупреждениеОСозданииХарактеристик()
	
	ЛимитХарактеристик = 1000;
	
	Если СтрокаХарактеристикВыбрана() 
		И КоличествоВыбранныхХарактеристик >= ЛимитХарактеристик Тогда
		
		Элементы.ПредупреждениеОСозданииХарактеристик.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеОСозданииХарактеристик.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьСтроки(СтрокаДанных, Доступность)
	
	СтрокаДанных.Пометка        = Доступность;
	СтрокаДанных.НеСопоставлен  = Не Доступность;
	СтрокаДанных.ТолькоПросмотр = Не Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитИЗначенияПоСоответствию(СтрокаДанных, СоответствиеРеквизитов)
	
	СтрокаРеквизита = СоответствиеРеквизитов.Строки.Найти(СтрокаДанных.ИдентификаторРеквизита, "ИдентификаторРеквизитаКатегории");
	
	Если СтрокаРеквизита <> Неопределено Тогда
		СтрокаДанных.РеквизитОбъекта = СтрокаРеквизита.РеквизитОбъекта;
		
		СтрокаЗначения = СтрокаРеквизита.Строки.Найти(СтрокаДанных.ИдентификаторЗначения, "ИдентификаторЗначения");
		
		Если СтрокаЗначения <> Неопределено Тогда
			СтрокаДанных.НовоеЗначение = СтрокаЗначения.ЗначениеОбъекта;
		КонецЕсли;
		
		ИзменитьДоступностьСтроки(СтрокаДанных, Истина);
	Иначе
		ИзменитьДоступностьСтроки(СтрокаДанных, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКВидуНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Сопоставить" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияВидаНоменклатурыДляСопоставления", ЭтотОбъект);
				
		ПараметрыФормы = РаботаСНоменклатуройКлиент.ПараметрыФормыЗаполненияВидаНоменклатуры();
		
		ПараметрыФормы.ВидНоменклатуры    = ВидНоменклатурыДляСопоставления;
		ПараметрыФормы.ЭтоВнешняяПривязка = Истина;
		
		ПараметрыФормы.ИдентификаторыКатегорий.Добавить(ИдентификаторКатегории, НаименованиеКатегории);
		
		РаботаСНоменклатуройКлиент.ОткрытьФормуЗаполненияВидаНоменклатуры(ПараметрыФормы, ЭтотОбъект, Оповещение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияВидаНоменклатурыДляСопоставления(Результат, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииВидаНоменклатурыСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКВидуНоменклатурыНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ВидНоменклатурыДляСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуЗаполненияВидаНоменклатуры(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияВидаНоменклатуры(ЭтоРежимСопоставленияРеквизитов)
	
	Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияРеквизитов", ЭтотОбъект);
	
	ПараметрыФормы = РаботаСНоменклатуройКлиент.ПараметрыФормыЗаполненияВидаНоменклатуры();
	
	ПараметрыФормы.ВидНоменклатуры                 = ВидНоменклатурыДляСопоставления;
	ПараметрыФормы.ЭтоВнешняяПривязка              = Истина;
	ПараметрыФормы.ЭтоРежимСопоставленияРеквизитов = ЭтоРежимСопоставленияРеквизитов;
	
	ПараметрыФормы.ИдентификаторыКатегорий.Добавить(ИдентификаторКатегории, НаименованиеКатегории);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуЗаполненияВидаНоменклатуры(ПараметрыФормы, ЭтотОбъект, Оповещение);
			
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыЗаблокированыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСНоменклатуройКлиент.ПроверитьИспользованиеОбъекта(ЭтотОбъект, ОбновляемыеРеквизиты, НоменклатураСсылка);
	
КонецПроцедуры

#КонецОбласти