
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДеревоРеквизитов     = ДанныеФормыВЗначение(РеквизитыДерево, Тип("ДеревоЗначений"));
	ВыгружаемыеРеквизиты = Неопределено;
	
	ЗаполнитьДеревоРеквизитов(ДеревоРеквизитов, Отказ, ВыгружаемыеРеквизиты);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДеревоРеквизитов, РеквизитыДерево);
	
	ЗаполнитьСлужебныеРеквизитыДерева(РеквизитыДерево, ВыгружаемыеРеквизиты = Неопределено);
	ОбработатьАльтернативныеРеквизиты(РеквизитыДерево, АльтернативныеРеквизиты);
	
	СтрокиДереваВТаблицу(РеквизитыДерево, РеквизитыСписком);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	Если Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Дерево Тогда
		Возврат
	КонецЕсли;
	ЭлементСписка = Элементы.РеквизитыСписком.ТекущиеДанные;
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементДерева = НайтиСтрокуДереваРеквизитовПоИдентификатору(РеквизитыДерево, ЭлементСписка.Идентификатор);
		Элементы.РеквизитыДерево.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
	КонецЕсли;
	Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Дерево;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Дерево;
	Иначе 
		Элементы.РеквизитыСписком.ОтборСтрок = Новый ФиксированнаяСтруктура("Синоним", Текст);
		Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Таблица;
		СтрокаПоиска = Текст;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыДерево

&НаКлиенте
Процедура РеквизитыДеревоПометкаПриИзменении(Элемент)
	
	ИндексТекущейСтроки = Элементы.РеквизитыДерево.ТекущаяСтрока;
	
	Если ИндексТекущейСтроки <> Неопределено Тогда
		ЭлементДерева = РеквизитыДерево.НайтиПоИдентификатору(ИндексТекущейСтроки);
		ОбработатьИзменениеПометкиДерева(ЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыСписком

&НаКлиенте
Процедура РеквизитыСпискомПометкаПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.РеквизитыСписком.ТекущаяСтрока;
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ЭлементСписка = РеквизитыСписком.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		Если ЭлементСписка.Пометка = 2 Тогда
			ЭлементСписка.Пометка = 0;
		КонецЕсли;
		ПеренестиПометкиИзСпискаВДерево(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Если Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Дерево Тогда
		УстановкаФлажков(РеквизитыДерево, 1);
	Иначе 
		УстановкаФлажковСписка(1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Если Элементы.СтраницыРеквизиты.ТекущаяСтраница = Элементы.Дерево Тогда
		УстановкаФлажков(РеквизитыДерево, 0);
	Иначе 
		УстановкаФлажковСписка(0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ВыгружаемыеРеквизиты = Новый Структура;
	ВыгружаемыеРеквизиты.Вставить("Реквизиты", Новый Массив);
	ВыгружаемыеРеквизиты.Вставить("ДополнительныеРеквизиты", Новый Массив);
	
	ВыгружаемыеРеквизиты.Вставить("ВыгружатьИндивидуальныеХарактеристики", Истина);
	ВыгружаемыеРеквизиты.Вставить("ВидыНоменклатуры", Новый Массив);
	
	СобратьВыгружаемыеРеквизитыИзДерева(РеквизитыДерево, ВыгружаемыеРеквизиты);
	
	Закрыть(Новый Структура("ВыгружаемыеРеквизиты", ВыгружаемыеРеквизиты));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СобратьВыгружаемыеРеквизитыИзДерева(ЭлементКоллекции, ВыгружаемыеРеквизиты)
	
	Для Каждого ТекЭлемент Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
		
		Если ТекЭлемент.ПолучитьЭлементы().Количество() Тогда
			СобратьВыгружаемыеРеквизитыИзДерева(ТекЭлемент, ВыгружаемыеРеквизиты);
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент.Пометка <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент.Обязательный = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИспользоватьПодбор И ТекЭлемент.ИспользоватьХарактеристики = Истина Тогда
			Если ЗначениеЗаполнено(ТекЭлемент.ВидНоменклатуры) Тогда
				ВыгружаемыеРеквизиты.ВидыНоменклатуры.Добавить(ТекЭлемент.ВидНоменклатуры);
			Иначе 
				ВыгружаемыеРеквизиты.ВыгружатьИндивидуальныеХарактеристики = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекЭлемент.Имя) Тогда 
			ВыгружаемыеРеквизиты.Реквизиты.Добавить(ТекЭлемент.Имя);
		ИначеЕсли ЗначениеЗаполнено(ТекЭлемент.Свойство) Тогда
			ВыгружаемыеРеквизиты.ДополнительныеРеквизиты.Добавить(ТекЭлемент.Свойство);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
	
	Для Каждого ЭлементДерева Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Обязательный Тогда
			ЭлементДерева.Пометка = 1;
		ИначеЕсли ЭлементДерева.Ключевой Тогда
			ЭлементДерева.Пометка = Макс(ЗначениеПометки, ЭлементДерева.Пометка);
			РеквизитИзСписка = АльтернативныеРеквизиты.НайтиПоЗначению(ЭлементДерева.ПолучитьИдентификатор());
			РеквизитИзСписка.Пометка = ЭлементДерева.Пометка;
			ОбработатьАльтернативныеРеквизиты(РеквизитыДерево, АльтернативныеРеквизиты, РеквизитыСписком);
		Иначе
			ЭлементДерева.Пометка = ЗначениеПометки;
		КонецЕсли;
		ПеренестиПометкиИзДереваВСписок(ЭлементДерева, РеквизитыСписком);
		УстановкаФлажков(ЭлементДерева, ЗначениеПометки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажковСписка(ЗначениеПометки);
	Для Каждого ЭлементСписка Из РеквизитыСписком Цикл
		Если Элементы.РеквизитыСписком.ПроверитьСтроку(ЭлементСписка.ПолучитьИдентификатор()) Тогда
			Если ЭлементСписка.Ключевой ИЛИ ЭлементСписка.Обязательный Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСписка.Пометка = ЗначениеПометки;
			ПеренестиПометкиИзСпискаВДерево(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УстановленоДляВсех(ЭлементКоллекции)
	
	Для Каждого ТекЭлемент Из ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы() Цикл
		Если ТекЭлемент.Пометка <> ЭлементКоллекции.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтрокиДереваВТаблицу(СтрокиДерева, Таблица)
	Для каждого ВложеннаяСтрока Из СтрокиДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ВложеннаяСтрока);
		СтрокиДереваВТаблицу(ВложеннаяСтрока, Таблица);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыДерева(СтрокиДерева, ЗаполнитьПометки, УстановленоДляВсех = Истина)
	
	ПометкаДляВсех = СтрокиДерева.ПолучитьЭлементы()[0].Пометка;
	
	Для каждого ВложеннаяСтрока Из СтрокиДерева.ПолучитьЭлементы() Цикл
		ВложеннаяСтрока.Идентификатор = Новый УникальныйИдентификатор();
		Если ЗаполнитьПометки = Истина ИЛИ ВложеннаяСтрока.Обязательный Тогда
			ВложеннаяСтрока.Пометка = 1;
		КонецЕсли;
		
		Если УстановленоДляВсех = Истина И ПометкаДляВсех <> ВложеннаяСтрока.Пометка Тогда
			УстановленоДляВсех = Ложь;
		КонецЕсли;
		
		Если ВложеннаяСтрока.ПолучитьЭлементы().Количество() Тогда
			ПометкаПодчиненных = Истина;
			ЗаполнитьСлужебныеРеквизитыДерева(ВложеннаяСтрока, ЗаполнитьПометки, ПометкаПодчиненных);
			ВложеннаяСтрока.Пометка = ?(ПометкаПодчиненных = Истина, ВложеннаяСтрока.ПолучитьЭлементы()[0].Пометка, 2);
			ВложеннаяСтрока.ИндексКартинки = 2;
		Иначе 
			ВложеннаяСтрока.ИндексКартинки = ?(ВложеннаяСтрока.ИспользоватьХарактеристики = Истина, 1, 0);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПометкиДерева(ЭлементКоллекции, КромеТекущего = Истина)
	
	Если КромеТекущего = Истина Тогда
		Если ЭлементКоллекции.Пометка = 2 Тогда
			ЭлементКоллекции.Пометка = 0;
		КонецЕсли;
		ПеренестиПометкиИзДереваВСписок(ЭлементКоллекции, РеквизитыСписком);
	КонецЕсли;
	
	Если ЭлементКоллекции.Ключевой = Истина Тогда
		РеквизитИзСписка = АльтернативныеРеквизиты.НайтиПоЗначению(ЭлементКоллекции.ПолучитьИдентификатор());
		РеквизитИзСписка.Пометка = ЭлементКоллекции.Пометка;
		
		ОбработатьАльтернативныеРеквизиты(РеквизитыДерево, АльтернативныеРеквизиты, РеквизитыСписком);
	КонецЕсли;
	
	// дочерние элементы
	УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Пометка);
	
	// родительские элементы
	Родитель = ЭлементКоллекции.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Родитель.Пометка = ?(УстановленоДляВсех(ЭлементКоллекции), ЭлементКоллекции.Пометка, 2);
		ПеренестиПометкиИзДереваВСписок(Родитель, РеквизитыСписком);
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьАльтернативныеРеквизиты(Реквизиты, АльтернативныеРеквизиты, РеквизитыСписком = Неопределено)
	
	Если АльтернативныеРеквизиты.Количество() < 2 Тогда
		Возврат
	КонецЕсли;
	
	Помеченные = Новый Массив;
	Для каждого РеквизитИзСписка Из АльтернативныеРеквизиты Цикл
		Если РеквизитИзСписка.Пометка Тогда
			Помеченные.Добавить(РеквизитИзСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Помеченные.Количество() = 1 Тогда
		ЭлементДерева = Реквизиты.НайтиПоИдентификатору(Помеченные[0]);
		ЭлементДерева.Обязательный = Истина;
		Если РеквизитыСписком <> Неопределено Тогда
			ПеренестиПометкиИзДереваВСписок(ЭлементДерева, РеквизитыСписком);
		КонецЕсли;
	Иначе 
		Для каждого РеквизитИзСписка Из АльтернативныеРеквизиты Цикл
			ЭлементДерева = Реквизиты.НайтиПоИдентификатору(РеквизитИзСписка.Значение);
			ЭлементДерева.Обязательный = Ложь;
			Если РеквизитыСписком <> Неопределено Тогда
				ПеренестиПометкиИзДереваВСписок(ЭлементДерева, РеквизитыСписком);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДереваРеквизитовПоИдентификатору(Элементы, Идентификатор)
	
	Для каждого ЭлементКоллекции Из Элементы.ПолучитьЭлементы() Цикл
		Если ЭлементКоллекции.Идентификатор = Идентификатор Тогда
			Возврат ЭлементКоллекции;
		КонецЕсли;
		Результат = НайтиСтрокуДереваРеквизитовПоИдентификатору(ЭлементКоллекции, Идентификатор);
		Если Результат <> Неопределено Тогда
			Возврат Результат
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеРеквизита(ФормализованныеРеквизиты, ИмяРеквизита, ПубликуемыеРеквизиты, Знач Синоним)
		
	Если ФормализованныеРеквизиты.Свойство(ИмяРеквизита) Тогда
		Синоним = ФормализованныеРеквизиты[ИмяРеквизита];
		ПубликуемыйРеквизит = ПубликуемыеРеквизиты.Получить(Синоним);
		Если НЕ ПубликуемыйРеквизит = Неопределено Тогда
			ПубликуемыеРеквизиты.Удалить(Синоним);
			Синоним = ПубликуемыйРеквизит.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Имя, Синоним", ИмяРеквизита, Синоним);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиПометкиИзДереваВСписок(ЭлементДерева, РеквизитыСписком)
	СтрокиСписка = РеквизитыСписком.НайтиСтроки(Новый Структура("Идентификатор", ЭлементДерева.Идентификатор));
	Для каждого ЭлементТаблицы Из СтрокиСписка Цикл
		ЗаполнитьЗначенияСвойств(ЭлементТаблицы, ЭлементДерева);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПометкиИзСпискаВДерево(ЭлементСписка)
	ЭлементДерева = НайтиСтрокуДереваРеквизитовПоИдентификатору(РеквизитыДерево, ЭлементСписка.Идентификатор);
	Если ЭлементДерева <> Неопределено Тогда
		ЭлементДерева.Пометка = ЭлементСписка.Пометка;
		ОбработатьИзменениеПометкиДерева(ЭлементДерева, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов(ДеревоРеквизитов, Отказ, ВыгружаемыеРеквизиты)
	
	Организация = Неопределено;
	Параметры.Свойство("Организация", Организация);
	Если НЕ Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗнч(Организация)) Тогда
		ТекстСообщения = НСтр("ru = 'Настройка для выгрузки не определена. Форма не может быть открыта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	НастройкаВыгрузки = РаботаСНоменклатуройСлужебный.НастройкаВыгрузкиНоменклатуры(Организация);
	ВыгружаемыеРеквизиты = НастройкаВыгрузки.ВыгружаемыеРеквизиты;
	
	// Набор доступных для выгрузки реквизитов Номенклатуры формируется на основе 4х списков:
	//  ФормализованныеРеквизиты - это все формализованные реквизиты, входящие в состав формата обмена;
	//  КлючевыеРеквизиты - это набор атрибутов (не обязательно реквизитов в понимании "метаданные справочника Номенклатура", например Штрихкоды),
	//    обрабатываемых особым образом при выгрузке: часть из них являются обязательными для заполнения безусловно, другие могут быть пустыми при определенных условиях,
	//    КлючевыеРеквизиты являются подмножеством ФормализованныеРеквизиты за исключением Штрихкодов;
	//  АльтернативныеРеквизиты - это список реквизитов, из которых как минимум один должен являться обязательным, при условии, что в списке больше 1 реквизита,
	//    является подмножеством множества КлючевыеРеквизиты, все элементы КлючевыеРеквизиты, не входящие в АльтернативныеРеквизиты являются обязательными безусловно;
	//  ПубликуемыеРеквизиты - это реквизиты Номенклатуры, для которых настраивается соответствие с рубрикатором 1С:Номенклатура
	//    множества ФормализованныеРеквизиты и ПубликуемыеРеквизиты могут пересекаться.
	ФормализованныеРеквизиты = РаботаСНоменклатуройСлужебный.ФормализованныеРеквизитыНоменклатурыДляВыгрузки();
	КлючевыеРеквизиты        = РаботаСНоменклатурой.КлючевыеРеквизитыНоменклатурыДляВыгрузки();
	ПубликуемыеРеквизиты     = Новый Соответствие;
	РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты);
	
	// Считаем, что «по умолчанию» Артикул является опциональным реквизитом для всех каталогов.
	// Это верно в частности для выгрузки в "Национальный каталог".
	// Для выгрузки в 1С:Номенклатуру обязательные: либо Артикул либо Штрихкод должны быть.
	АльтернативныеРеквизиты.Добавить("Артикул");
	Если НастройкаВыгрузки.ВыгружатьВНациональныйКаталог <> Истина Тогда
		АльтернативныеРеквизиты.Добавить("Штрихкоды");
	КонецЕсли;
	
	ДобавитьВДеревоКлючевыеРеквизиты(ДеревоРеквизитов, 
		КлючевыеРеквизиты, ФормализованныеРеквизиты, ПубликуемыеРеквизиты);
	
	ДобавитьВДеревоАльтернативныеРеквизиты(ДеревоРеквизитов, 
		ФормализованныеРеквизиты, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты);
	
	ДобавитьВДеревоФормализованныеРеквизиты(ДеревоРеквизитов,
		ФормализованныеРеквизиты, КлючевыеРеквизиты, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты);
	
	ДобавитьВДеревоПубликуемыеРеквизиты(ДеревоРеквизитов, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты);
	
	ДобавитьВДеревоДополнительныеРеквизиты(ДеревоРеквизитов, Организация, ВыгружаемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоКлючевыеРеквизиты(ДеревоРеквизитов, КлючевыеРеквизиты, ФормализованныеРеквизиты, ПубликуемыеРеквизиты)

	Для Каждого ОбязательныйРеквизит Из КлючевыеРеквизиты Цикл
		ИмяРеквизита = ОбязательныйРеквизит.Ключ;
		АльтернативныйРеквизит = АльтернативныеРеквизиты.НайтиПоЗначению(ИмяРеквизита);
		Если АльтернативныйРеквизит <> Неопределено Тогда
			АльтернативныйРеквизит.Представление = ИмяРеквизита;
			Продолжить;
		КонецЕсли;
		ОписаниеРеквизита = ОписаниеРеквизита(ФормализованныеРеквизиты, ИмяРеквизита, ПубликуемыеРеквизиты,
			ОбязательныйРеквизит.Значение);
		ОписаниеРеквизита.Вставить("Обязательный", Истина);
		ЗаполнитьЗначенияСвойств(ДеревоРеквизитов.Строки.Добавить(), ОписаниеРеквизита);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоАльтернативныеРеквизиты(ДеревоРеквизитов, ФормализованныеРеквизиты, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты)

	Для каждого АльтернативныйРеквизит Из АльтернативныеРеквизиты Цикл
		ИмяРеквизита = АльтернативныйРеквизит.Значение;
		ОписаниеРеквизита = ОписаниеРеквизита(ФормализованныеРеквизиты, ИмяРеквизита, ПубликуемыеРеквизиты, АльтернативныйРеквизит.Представление);
		ОписаниеРеквизита.Вставить("Ключевой", Истина);
		Пометка = (ВыгружаемыеРеквизиты = Неопределено 
			Или Не ВыгружаемыеРеквизиты.Свойство("Реквизиты") Или ВыгружаемыеРеквизиты.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
		ОписаниеРеквизита.Вставить("Пометка", Пометка);
		
		СтрокаДерева = ДеревоРеквизитов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ОписаниеРеквизита);
		
		АльтернативныйРеквизит.Пометка = Пометка;
		АльтернативныйРеквизит.Значение = ДеревоРеквизитов.Строки.Индекс(СтрокаДерева);
		АльтернативныйРеквизит.Представление = ИмяРеквизита;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоФормализованныеРеквизиты(ДеревоРеквизитов, ФормализованныеРеквизиты, КлючевыеРеквизиты, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты)

	Для Каждого ФормализованныйРеквизит Из ФормализованныеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(ФормализованныйРеквизит.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = ФормализованныйРеквизит.Ключ;
		Если КлючевыеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеРеквизита = ОписаниеРеквизита(ФормализованныеРеквизиты, ИмяРеквизита, ПубликуемыеРеквизиты,
			ФормализованныйРеквизит.Значение);
		Пометка = (ВыгружаемыеРеквизиты = Неопределено Или Не ВыгружаемыеРеквизиты.Свойство("Реквизиты")
			Или ВыгружаемыеРеквизиты.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
		ОписаниеРеквизита.Вставить("Пометка", Пометка);
		ЗаполнитьЗначенияСвойств(ДеревоРеквизитов.Строки.Добавить(), ОписаниеРеквизита);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоПубликуемыеРеквизиты(ДеревоРеквизитов, ПубликуемыеРеквизиты, ВыгружаемыеРеквизиты)

	Для Каждого ПубликуемыйРеквизит Из ПубликуемыеРеквизиты Цикл
		КлючРеквизита = ПубликуемыйРеквизит.Ключ;
		ОписаниеРеквизита = Новый Структура("Свойство, Синоним", КлючРеквизита,
			ПубликуемыйРеквизит.Значение.Представление);
		Пометка = (ВыгружаемыеРеквизиты = Неопределено Или ВыгружаемыеРеквизиты.ДополнительныеРеквизиты.Найти(
			КлючРеквизита) = Неопределено);
		ОписаниеРеквизита.Вставить("Пометка", Пометка);
		ЗаполнитьЗначенияСвойств(ДеревоРеквизитов.Строки.Добавить(), ОписаниеРеквизита);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоДополнительныеРеквизиты(ДеревоРеквизитов, Организация, ВыгружаемыеРеквизиты)

	НастройкиПодсистемы                    = РаботаСНоменклатурой.НастройкиПодсистемы();
	ИспользоватьХарактеристикиНоменклатуры = НастройкиПодсистемы.ИспользоватьХарактеристики;
	ИспользоватьВидыНоменклатуры           = НастройкиПодсистемы.ИспользоватьВидыНоменклатуры;
	ИспользоватьДополнительныеРеквизиты    = НастройкиПодсистемы.ИспользоватьДополнительныеРеквизиты;
	ИспользоватьПодбор                     = НастройкиПодсистемы.ИспользоватьПодборНоменклатурыСХарактеристиками;

	ИндексВставки = ДеревоРеквизитов.Строки.Количество();
	Если ИспользоватьДополнительныеРеквизиты Или ИспользоватьХарактеристикиНоменклатуры И ИспользоватьВидыНоменклатуры Тогда
		ВидыНоменклатуры = Неопределено;
		Если ИспользоватьВидыНоменклатуры Тогда
			ВидыНоменклатуры = Обработки.РаботаСНоменклатурой.ВидыНоменклатурыКВыгрузке(Организация);
		КонецЕсли;

		ДополнительныеРеквизиты = РаботаСНоменклатуройСлужебный.ДополнительныеРеквизитыНоменклатурыДляВыгрузки(
			ВидыНоменклатуры);

		ВидыНоменклатуры = ДополнительныеРеквизиты.Скопировать( , "ВидНоменклатуры");
		ВидыНоменклатуры.Свернуть("ВидНоменклатуры");
		Для Каждого ВидНоменклатуры Из ВидыНоменклатуры.ВыгрузитьКолонку("ВидНоменклатуры") Цикл
			Если ИспользоватьДополнительныеРеквизиты = Ложь И Не ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;

			СтрокиВида = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ВидНоменклатуры", ВидНоменклатуры));

			Родитель = Неопределено;
			Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				Если СтрокиВида.Количество() = 1 И СтрокиВида[0].ИспользоватьХарактеристики = Ложь Тогда
					Продолжить;
				КонецЕсли;
				Родитель = ДеревоРеквизитов.Строки.Добавить();
				Родитель.Синоним = СтрокиВида[0].ВидНоменклатурыНаименование;
			КонецЕсли;

			Для Каждого СтрокаВида Из СтрокиВида Цикл
				Если Не ЗначениеЗаполнено(СтрокаВида.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеДопРеквизита = Новый Структура("Свойство, Синоним");
				ЗаполнитьЗначенияСвойств(ОписаниеДопРеквизита, СтрокаВида);
				Пометка = (ВыгружаемыеРеквизиты = Неопределено Или ВыгружаемыеРеквизиты.ДополнительныеРеквизиты.Найти(
					ОписаниеДопРеквизита.Свойство) = Неопределено);
				ОписаниеДопРеквизита.Вставить("Пометка", Пометка);
				Если Родитель = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДеревоРеквизитов.Строки.Вставить(ИндексВставки), ОписаниеДопРеквизита);
					ИндексВставки = ИндексВставки + 1;
				Иначе
					ЗаполнитьЗначенияСвойств(Родитель.Строки.Добавить(), ОписаниеДопРеквизита);
				КонецЕсли;
			КонецЦикла;

			Если Не ИспользоватьПодбор И Не Родитель = Неопределено И СтрокиВида[0].ИспользоватьХарактеристики = Истина
				И ИспользоватьХарактеристикиНоменклатуры Тогда
				СтрокаХарактеристики = Новый Структура("Синоним, ВидНоменклатуры, ИспользоватьХарактеристики",
					"Характеристики");
				ЗаполнитьЗначенияСвойств(СтрокаХарактеристики, СтрокиВида[0], , "Синоним");
				Пометка = (ВыгружаемыеРеквизиты = Неопределено 
					Или ВыгружаемыеРеквизиты.ВидыНоменклатуры.Найти(СтрокаХарактеристики.ВидНоменклатуры) = Неопределено);
				СтрокаХарактеристики.Вставить("Пометка", Пометка);
				ЗаполнитьЗначенияСвойств(Родитель.Строки.Добавить(), СтрокаХарактеристики);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если Не ИспользоватьПодбор И ИспользоватьХарактеристикиНоменклатуры = Истина Тогда
		Пометка = ?(ВыгружаемыеРеквизиты = Неопределено, Ложь,
			ВыгружаемыеРеквизиты.ВыгружатьИндивидуальныеХарактеристики);
		ЗаполнитьЗначенияСвойств(ДеревоРеквизитов.Строки.Вставить(ИндексВставки),
			Новый Структура("Синоним, ИспользоватьХарактеристики, Пометка", "Характеристики", Истина, Пометка));
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// РеквизитыДерево
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДерево.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыДерево.Обязательный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//РеквизитыСписком
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыСписком.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыСписком.Обязательный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры


#КонецОбласти