#Область ОписаниеПеременных

&НаКлиенте
Перем СтрокиКРаскрытию;

&НаКлиенте
Перем ТекущийИдентификаторСтроки;

&НаКлиенте
Перем ТекущийТипСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВладелецФайла", Владелец);
	Параметры.Свойство("ВладелецФайлаID", ID);
	Параметры.Свойство("ВладелецФайлаТип", Тип);
	Параметры.Свойство("ТекущийФайл", ТекущийФайл);
	
	ЕстьВладелец = ЗначениеЗаполнено(Владелец);
	
	// Покажем владельца при открытии из карточки файла.
	Элементы.ВладелецФайла.Видимость = ЗначениеЗаполнено(ТекущийФайл) И ЕстьВладелец;
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
		ЗаголовокУстановлен = Истина;
	ИначеЕсли ЕстьВладелец Тогда
		Заголовок = СтрШаблон("%1: %2", Заголовок, Владелец);
	КонецЕсли;
	
	ПравилоИнтеграции = Неопределено;
	Если Параметры.Свойство("ПравилоИнтеграции") И Параметры.ПравилоИнтеграции <> Неопределено Тогда
		ПравилоИнтеграции = Параметры.ПравилоИнтеграции;
	ИначеЕсли ЕстьВладелец Тогда
		Правила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(
			Владелец);
		Если Правила.Количество() > 0 Тогда
			ПравилоИнтеграции = Правила[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ПравилоИнтеграции <> Неопределено Тогда
		Тип = ПравилоИнтеграции.ТипОбъектаДО;
		ТипВидаДокумента = ПравилоИнтеграции.ТипВидаДокумента;
		ИдентификаторВидаДокумента = ПравилоИнтеграции.ИдентификаторВидаДокумента;
	КонецЕсли;
	
	Если Не ЕстьВладелец И ПравилоИнтеграции = Неопределено И ID = "" И Тип = "" Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ИспользоватьЭлектронныеПодписиИС =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если Параметры.Свойство("ПростаяФорма") Тогда
		Элементы.ОткрытьДляРедактирования.ТолькоВоВсехДействиях = Истина;
		Элементы.ОткрытьНаЧтение.ТолькоВоВсехДействиях = Истина;
		Элементы.ЗакончитьРедактирование.ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	ТипСправочникаСФайлами = "Неопределено";
	ПредставлениеТипаВладельца = "объекта";
	Если ЕстьВладелец Тогда
		ВладелецМетаданные = Владелец.Метаданные();
		ТипСправочникаСФайлами = ВладелецМетаданные.ПолноеИмя();
		ТипОбъектаМассив = СтрРазделить(ТипСправочникаСФайлами, ".");
		Если ТипОбъектаМассив[0] = "Справочник" Тогда
			ПредставлениеТипаВладельца = "справочника";
		ИначеЕсли ТипОбъектаМассив[0] = "Документ" Тогда
			ПредставлениеТипаВладельца = "документа";
		КонецЕсли;
	КонецЕсли;
	
	СокращенноеНаименованиеКонфигурации =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	
	ПредпросмотрХранилище = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ТипСправочникаСФайлами,
		"ПредпросмотрФайловБИД");
	Если ПредпросмотрХранилище = Неопределено Тогда
		Предпросмотр = Истина;
	Иначе
		Предпросмотр = ПредпросмотрХранилище;
	КонецЕсли;
	
	ЗадаватьВопросПереносФайловХранилище = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ТипСправочникаСФайлами,
		"ЗадаватьВопросПереносФайловВБИД");
	Если ЗадаватьВопросПереносФайловХранилище = Неопределено Тогда
		ЗадаватьВопросПереносФайлов = Истина;
	Иначе
		ЗадаватьВопросПереносФайлов = ЗадаватьВопросПереносФайловХранилище;
	КонецЕсли;
	
	Элементы.ПереключитьПредпросмотр.Пометка = Предпросмотр;
	Элементы.ГруппаСтраницыПревью.Видимость = Предпросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ID = ВладелецФормы["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"];
		Тип = ВладелецФормы["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"];
	Исключение
		// Действие не требуется.
	КонецПопытки;
	
	Если Не ЗаголовокУстановлен Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.УстановитьЗаголовокПриОткрытии(ЭтотОбъект);
	КонецЕсли;
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" Тогда
		Если Источник <> ЭтотОбъект Тогда
			ПриПодключении();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПолученHTMLПредпросмотрОбъекта" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ПредставлениеHTML")
				Или Не Параметр.Свойство("ПредпросмотрУрезан")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		Строка = СтрокаПоID(Параметр.ID, Параметр.Тип);
		Если Строка <> Неопределено Тогда
			Строка.ПредставлениеHTML = Параметр.ПредставлениеHTML;
			Строка.ПредпросмотрУрезан = Параметр.ПредпросмотрУрезан;
			Строка.ОжиданиеПредпросмотра = Ложь;
			ОбновитьПредпросмотр();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ИдентификаторФайла")
				Или Не Параметр.Свойство("Событие")
				Или Не Параметр.Свойство("ВладелецФайла")
				Или Не Параметр.Свойство("УникальныйИдентификаторФормы")
				Или ID = ""
				Или Параметр.ВладелецФайла <> ID
				Или (Параметр.Событие = "УдалениеФайла"
					И УникальныйИдентификатор = Параметр.УникальныйИдентификаторФормы) Тогда
			Возврат;
		КонецЕсли;
		НужноОбновление = Истина;
		Если Параметр.Событие = "РедактированиеФайла" Тогда
			Строка = СтрокаПоID(Параметр.ИдентификаторФайла, "DMFile");
			Если Строка = Неопределено Тогда
				НужноОбновление = Ложь;
			Иначе
				НужноОбновление = Не Строка.Редактируется;
			КонецЕсли;
		КонецЕсли;
		Если НужноОбновление Тогда
			Если Параметр.УникальныйИдентификаторФормы = Неопределено Тогда
				ВыводитьОкноОжидания = Истина;
			Иначе
				ВыводитьОкноОжидания = (УникальныйИдентификатор = Параметр.УникальныйИдентификаторФормы);
			КонецЕсли;
			ОбновитьСписокФайловКлиент(Параметр.ИдентификаторФайла, ВыводитьОкноОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ОткрытьТекущийФайлДляРедактирования();
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ОткрытьТекущийФайлНаЧтение();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьТекущийФайлНаЧтение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
			Возврат;
		КонецЕсли;
		ДобавитьКопированием(Элементы.ДеревоФайлов.ТекущиеДанные.ID);
	Иначе
		ДобавитьСДиска(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияФайлов", ЭтотОбъект);
	
	ВыделенныеФайлы = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеФайлы(
		ДеревоФайлов,
		Элементы.ДеревоФайлов.ВыделенныеСтроки);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПометитьНаУдалениеСнятьПометкуФайлов(
		ВыделенныеФайлы,
		ТекущиеДанные.ПометкаУдаления,
		Оповещение,
		ID,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаФайлов();
	ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьРолиФайлов Тогда
		РольФайлаID = ИнтеграцияС1СДокументооборот3Клиент.ТекущаяРольФайла(
			ДеревоФайлов,
			Строка);
	Иначе
		РольФайлаID = "";
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		Для Каждого ПеретаскиваемыйФайл Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ПеретаскиваемыйФайл) = Тип("Файл") И ПеретаскиваемыйФайл.ЭтоФайл() Тогда
				МассивФайлов.Добавить(ПеретаскиваемыйФайл);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура("МассивФайлов, РольФайлаID", МассивФайлов, РольФайлаID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыОповещения);
		Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Иначе // связанный объект следует найти или создать
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
				Владелец,
				ОписаниеОповещения);
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлПеретаскиваниеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	
	Для Каждого Файл Из ПараметрыОповещения.МассивФайлов Цикл
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДискаПеретаскиванием(
			Файл,
			ID,
			Тип,
			ЭтотОбъект.УникальныйИдентификатор,
			Строка(Владелец),
			Владелец,
			ЯвляетсяСканКопией,
			ПараметрыОповещения.РольФайлаID);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьРольФайла(Команда)
	
	Если Не ИспользоватьРолиФайлов Или ДоступныеРоли.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеФайлы(
		ДеревоФайлов,
		Элементы.ДеревоФайлов.ВыделенныеСтроки);
	
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ВладелецФайлов", ID);
	ПараметрыФормы.Вставить("ДоступныеРоли", ДоступныеРоли);
	ПараметрыФормы.Вставить("СписокФайлов", СписокФайлов);
	ПараметрыФормы.Вставить("ВыбраннаяРоль",
		ИнтеграцияС1СДокументооборот3Клиент.ТекущаяРольФайла(
			ДеревоФайлов,
			Элементы.ДеревоФайлов.ТекущаяСтрока));
	
	ФормаДобавления = ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборРолейДляФайла",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСДиска(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСДискаЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе // связанный объект следует найти или создать
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПечатнуюФорму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПечатнуюФормуЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе // связанный объект следует найти или создать
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиФайлыИСвДОКоманда(Команда)
	
	СохранитьВХранилищеНастроек(ТипСправочникаСФайлами, "ЗадаватьВопросПереносФайловВБИД", Истина);
	ПеренестиФайлыИСвДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаЧтение(Команда)
	
	ОткрытьТекущийФайлНаЧтение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляРедактирования(Команда)
	
	ОткрытьТекущийФайлДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,,
		ID);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВыделенныхФайлов(
		ДеревоФайлов,
		Элементы.ДеревоФайлов.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		ТекущиеДанные.ДатаМодификации,
		УникальныйИдентификатор,,
		ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрКоманда(Команда)
	
	ОбновитьПредпросмотр(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
		ТекущиеДанные.ID,,
		ID,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьКаталогФайла(ТекущиеДанные.ID);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьИзмененияРедактируемогоФайла(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,,
		ID);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПредпросмотр(Команда)
	
	Предпросмотр = Не Предпросмотр;
	Элементы.ПереключитьПредпросмотр.Пометка = Предпросмотр;
	Элементы.ГруппаСтраницыПревью.Видимость = Предпросмотр;
	СохранитьВХранилищеНастроек(ТипСправочникаСФайлами, "ПредпросмотрФайловБИД", Предпросмотр);
	ОбновитьПредпросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
			И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НапечататьФайлы(
		ДеревоФайлов,
		Элементы.ДеревоФайлов.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьЧерезИС();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы (ЭП)

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		Подписи,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПодписатьФайл(
		ИдентификаторФайла,
		ТекущиеДанные.Наименование,
		ID,
		ТекущиеДанные.Редактируется,
		ТекущиеДанные.Зашифрован,
		ТекущиеДанные.Описание,
		ДанныеПодписейФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(
		Подписи,,
		ИдентификаторФайла);
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ДанныеПодписей(ТаблицаПодписей);
	
	СвойстваФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла();
	СвойстваФайла.ИдентификаторФайла = ИдентификаторФайла;
	СвойстваФайла.ИмяФайла = ТекущиеДанные.Наименование;
	СвойстваФайла.ОписаниеФайла = ТекущиеДанные.Описание;
	СвойстваФайла.Редактируется = ТекущиеДанные.Редактируется;
	СвойстваФайла.Зашифрован = ТекущиеДанные.Зашифрован;
	СвойстваФайла.ДанныеПодписейФайла = ДанныеПодписейФайла;
	СвойстваФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	СвойстваФайла.ВладелецФайла = ID;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьДобавлениеЭПИзФайла(СвойстваФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлВместеСЭП(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьСохранениеВместеСЭП(
		ТекущиеДанные.ID,
		ТекущиеДанные.Расширение,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Размер * 1024,
		ТекущиеДанные.ДатаМодификации,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ВопросПереносФайловЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиФайлыИСвДО();
	ИначеЕсли Результат = КодВозвратаДиалога.Прервать Тогда
		СохранитьВХранилищеНастроек(ТипСправочникаСФайлами, "ЗадаватьВопросПереносФайловВБИД", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКопированием(ОригиналID)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлКопированием(ОригиналID);
	
КонецПроцедуры

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		НачатьОбновлениеФайлов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеФайлов(ПриОткрытии = Ложь, ВыводитьОкноОжидания = Ложь, СкрыватьИнтерфейс = Истина)
	
	ОбновлениеУспешноЗавершено = Ложь;
	Элементы.ГруппаДобавить.Доступность = Ложь;
	Элементы.СписокКонтекстноеМенюГруппаКомандДобавить.Доступность = Ложь;
	УбратьДоступностьКоманд();
	ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
		НСтр("ru='Данные предпросмотра отсутствуют.'"),
		ЗаголовокСообщенияВОбластиПредпросмотра);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбновлениеФайловЗавершение",
		ЭтотОбъект,
		Новый Структура("ПриОткрытии", ПриОткрытии));
	ТекстСообщения = НСтр("ru = 'Получение списка файлов из 1С:Документооборот.'");
	
	ПолучаемыеПоля = Новый Массив;
	
	Если ЗначениеЗаполнено(ID) Тогда
		
		ПолучаемыеПоля.Добавить("files");
		Если Предпросмотр Тогда
			ПолучаемыеПоля.Добавить("htmlView");
		КонецЕсли;
		Если Тип = "DMDocument" Тогда
			ПолучаемыеПоля.Добавить("documentType");
			ПолучаемыеПоля.Добавить("enabledProperties");
		КонецЕсли;
		Если ПоказыватьУдаленные Тогда
			ПолучаемыеПоля.Добавить("ignoreDeletionMark");
		КонецЕсли;
		
		ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектАсинхронно(
			УникальныйИдентификатор,
			Тип,
			ID,
			ПолучаемыеПоля);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
			ЭтотОбъект,
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ВыводитьОкноОжидания,
			ТекстСообщения,
			СкрыватьИнтерфейс);
		
	ИначеЕсли Тип = "DMDocument"
			И ЗначениеЗаполнено(ТипВидаДокумента) И ЗначениеЗаполнено(ИдентификаторВидаДокумента) Тогда
		
		ПолучаемыеПоля.Добавить("roles");
		
		ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектАсинхронно(
			УникальныйИдентификатор,
			ТипВидаДокумента,
			ИдентификаторВидаДокумента,
			ПолучаемыеПоля);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
			ЭтотОбъект,
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ВыводитьОкноОжидания,
			ТекстСообщения,
			СкрыватьИнтерфейс);
		
	Иначе
		
		Результат = Новый Структура;
		Если ЗначениеЗаполнено(Тип) Тогда
			Результат.Вставить("Статус", "Выполнено");
			Результат.Вставить("РезультатДлительнойОперации", Новый Структура("Тип", Тип));
		Иначе
			Результат.Вставить("Статус", "Ошибка");
			Результат.Вставить("КраткоеПредставлениеОшибки", НСтр("ru='Не указан тип владельца файлов'"));
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеФайловЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОбновлениеУспешноЗавершено = Истина;
		
		ДеревоФайлов.ПолучитьЭлементы().Очистить();
		
		Элементы.ГруппаДобавить.Доступность = Истина;
		Элементы.СписокКонтекстноеМенюГруппаКомандДобавить.Доступность = Истина;
		
		ПрочитатьИОбновитьСписокФайлов(Результат.РезультатДлительнойОперации);
		ОбновитьЭлементыФормы();
		
		Если Параметры.ПриОткрытии Тогда
			СтрокиКРаскрытию = Новый Массив;
			Если ИспользоватьРолиФайлов Тогда
				Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(Строка.ID) И Строка.РольОбязательная Тогда
						СтрокиКРаскрытию.Добавить(Строка.ID);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТекущийИдентификаторСтроки = ТекущийФайл;
			ТекущийТипСтроки = "DMFile";
		КонецЕсли;
		
		ВосстановитьПоложениеВСписке();
		
		Если ЗадаватьВопросПереносФайлов И ПрисоединенныеФайлыВИС.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросПереносФайловЗавершение",
				ЭтотОбъект);
			ТекстВопроса = СтрШаблон(
				НСтр("ru='У %1 ""%2"" есть присоединенные файлы, хранящиеся на стороне %3.
					|
					|Перенести файлы данного %1 из %3 в 1С:Документооборот?'"),
				ПредставлениеТипаВладельца,
				Строка(Владелец),
				СокращенноеНаименованиеКонфигурации);
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да);
			Кнопки.Добавить(КодВозвратаДиалога.Нет);
			Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Больше не спрашивать'"));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает добавление файла с диска и обновляет форму.
//
&НаКлиенте
Процедура ДобавитьСДискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(
		СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРолиФайлов Тогда
		РольФайлаID = ИнтеграцияС1СДокументооборот3Клиент.ТекущаяРольФайла(
			ДеревоФайлов,
			Элементы.ДеревоФайлов.ТекущаяСтрока);
	Иначе
		РольФайлаID = "";
	КонецЕсли;
	ЯвляетсяСканКопией = (СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
		ID,
		Тип,
		УникальныйИдентификатор,
		Строка(Владелец),
		Владелец,
		ЯвляетсяСканКопией,
		РольФайлаID);
	
КонецПроцедуры

// Продолжает добавление печатной формы владельца.
//
&НаКлиенте
Процедура ДобавитьПечатнуюФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРолиФайлов Тогда
		РольФайлаID = ИнтеграцияС1СДокументооборот3Клиент.ТекущаяРольФайла(
			ДеревоФайлов,
			Элементы.ДеревоФайлов.ТекущаяСтрока);
	Иначе
		РольФайлаID = "";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектИС", Владелец);
	ПараметрыФормы.Вставить("ИдентификаторОбъектаДО", ID);
	ПараметрыФормы.Вставить("ТипОбъектаДО", Тип);
	ПараметрыФормы.Вставить("РольФайлаID", РольФайлаID);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеПечатнойФормыЗавершение", ЭтотОбъект);
	ФормаДобавления = ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ДобавлениеПечатнойФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ФормаДобавления = Неопределено Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не имеет печатных форм.'"), Строка(Владелец));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиФайлыИСвДО()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиФайлыИСвДОЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(ID) Тогда // связанный объект уже известен
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе // связанный объект следует найти или создать
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Владелец,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает перенос файлов из интегрированной системы.
//
&НаКлиенте
Процедура ПеренестиФайлыИСвДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ID = Результат.ID;
		Тип = Результат.type;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРолиФайлов Тогда
		РольФайлаID = ИнтеграцияС1СДокументооборот3Клиент.ТекущаяРольФайла(
			ДеревоФайлов,
			Элементы.ДеревоФайлов.ТекущаяСтрока);
	Иначе
		РольФайлаID = "";
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ПеренестиФайлыИСвДО(
		ПрисоединенныеФайлыВИС,
		ID,
		Тип,
		Строка(Владелец),
		Владелец,
		РольФайлаID,
		УникальныйИдентификатор);
	
	ЕстьПрисоединенныеФайлыВИС = (ПрисоединенныеФайлыВИС.Количество() > 0);
	Элементы.ПеренестиФайлыИСвДО.Видимость = ЕстьПрисоединенныеФайлыВИС;
	Элементы.ДеревоФайловКонтекстноеМенюПеренестиФайлыИСвДО.Видимость = ЕстьПрисоединенныеФайлыВИС;
	
КонецПроцедуры

// Завершает добавление печатной формы владельца. Обновляет форму.
//
// Параметры:
//   Результат - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//   Параметры - Неопределено
//
&НаКлиенте
Процедура ДобавлениеПечатнойФормыЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ОбновитьСписокФайловКлиент(Результат[0].ТекущийФайл.ID);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет список файлов, заново получая его из ДО.
//
&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено,
		ВыводитьОкноОжидания = Истина, СкрыватьИнтерфейс = Ложь)
	
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийТипСтроки = Неопределено;
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторСтроки = ИдентификаторФайла;
		ТекущийТипСтроки = "DMFile";
	ИначеЕсли Элементы.ДеревоФайлов.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторСтроки = Элементы.ДеревоФайлов.ТекущиеДанные.ID;
		ТекущийТипСтроки = Элементы.ДеревоФайлов.ТекущиеДанные.Тип;
	КонецЕсли;
	СтрокиКРаскрытию = Новый Массив;
	Если ИспользоватьРолиФайлов Тогда
		Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
			Если Элементы.ДеревоФайлов.Развернут(Строка.ПолучитьИдентификатор()) Тогда
				СтрокиКРаскрытию.Добавить(Строка.ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НачатьОбновлениеФайлов(Ложь, ВыводитьОкноОжидания, СкрыватьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	Элементы.ВыбратьРольФайла.Видимость = ИспользоватьРолиФайлов;
	Элементы.ВыбратьРольФайлаКонтекст.Видимость = ИспользоватьРолиФайлов;
	
	ЕстьПрисоединенныеФайлыВИС = (ПрисоединенныеФайлыВИС.Количество() > 0);
	Элементы.ПеренестиФайлыИСвДО.Видимость = ЕстьПрисоединенныеФайлыВИС;
	Элементы.ДеревоФайловКонтекстноеМенюПеренестиФайлыИСвДО.Видимость = ЕстьПрисоединенныеФайлыВИС;
	
	Если ЕстьПрисоединенныеФайлыВИС
			И ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		ЗаголовокКоманды = СтрШаблон(
			НСтр("ru = 'Файлы %1 из %2...'"),
			ПредставлениеТипаВладельца,
			СокращенноеНаименованиеКонфигурации);
		Элементы.ПеренестиФайлыИСвДО.Заголовок = ЗаголовокКоманды;
		Элементы.ДеревоФайловКонтекстноеМенюПеренестиФайлыИСвДО.Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
	Элементы.ДобавитьПечатнуюФорму.Видимость = ЕстьВладелец;
	Элементы.ДеревоФайловКонтекстноеМенюДобавитьПечатнуюФорму.Видимость = ЕстьВладелец;
	Если ЕстьВладелец Тогда
		ЗаголовокКоманды = СтрШаблон(НСтр("ru = 'Печатную форму из %1...'"), ПредставлениеТипаВладельца);
		Элементы.ДобавитьПечатнуюФорму.Заголовок = ЗаголовокКоманды;
		Элементы.ДеревоФайловКонтекстноеМенюДобавитьПечатнуюФорму.Заголовок = ЗаголовокКоманды;
		Элементы.ДобавитьПечатнуюФорму.Доступность = СостояниеРазрешаетДобавлениеФайла;
		Элементы.ДеревоФайловКонтекстноеМенюДобавитьПечатнуюФорму.Доступность = СостояниеРазрешаетДобавлениеФайла;
	КонецЕсли;
	
	Элементы.ВыбратьРольФайла.Доступность = СостояниеРазрешаетДобавлениеФайла;
	Элементы.ВыбратьРольФайлаКонтекст.Доступность = СостояниеРазрешаетДобавлениеФайла;
	Элементы.ДобавитьСДиска.Доступность = (СостояниеРазрешаетДобавлениеФайла
		Или СостояниеРазрешаетДобавлениеСканКопии);
	Элементы.ДобавитьСДискаКонтекст.Доступность = (СостояниеРазрешаетДобавлениеФайла
		Или СостояниеРазрешаетДобавлениеСканКопии);
	
	Элементы.ОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.КонтекстОткрытьДляРедактирования.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.ЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.КонтекстЗакончитьРедактирование.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = СостояниеРазрешаетРедактированиеФайла;
	Элементы.СохранитьИзменения.Доступность = СостояниеРазрешаетРедактированиеФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоложениеВСписке()
	
	// Раскроем дерево
	Для Каждого СтрокаКРаскрытию Из СтрокиКРаскрытию Цикл
		Строка = СтрокаПоID(СтрокаКРаскрытию);
		Если Строка <> Неопределено Тогда
			Элементы.ДеревоФайлов.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяСтрокаУстановлена = Ложь;
	
	// Если передан идентификатор текущей строки - установим текущую строку на него.
	Если ЗначениеЗаполнено(ТекущийИдентификаторСтроки) Тогда
		Строка = СтрокаПоID(ТекущийИдентификаторСтроки, ТекущийТипСтроки);
		Если Строка <> Неопределено Тогда
			Элементы.ДеревоФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			ТекущаяСтрокаУстановлена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Если идентификатор текущей строки не передан - установим текущей первую строку с HTML представлением файла.
	Если Не ТекущаяСтрокаУстановлена Тогда
		
		Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
			
			Если ИспользоватьРолиФайлов Тогда
				Для Каждого СтрокаФайл Из Строка.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(СтрокаФайл.ПредставлениеHTML) Тогда
						Элементы.ДеревоФайлов.ТекущаяСтрока = СтрокаФайл.ПолучитьИдентификатор();
						ТекущаяСтрокаУстановлена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(Строка.ПредставлениеHTML) Тогда
					Элементы.ДеревоФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					ТекущаяСтрокаУстановлена = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяСтрокаУстановлена Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если никаких файлов нет - установим строку на первую обязательную роль файлов.
	Если Не ТекущаяСтрокаУстановлена И СтрокиКРаскрытию.Количество() > 0 Тогда
		Строка = СтрокаПоID(СтрокиКРаскрытию[0]);
		Если Строка <> Неопределено Тогда
			Элементы.ДеревоФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			ТекущаяСтрокаУстановлена = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПоID(ИдентификаторСтроки, ТипСтроки = Неопределено)
	
	Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
		
		Если Строка.ID = ИдентификаторСтроки И Строка.Тип = ТипСтроки Тогда
			Возврат Строка;
			
		ИначеЕсли Строка.ID = ИдентификаторСтроки И ТипСтроки = Неопределено Тогда
			Возврат Строка;
			
		КонецЕсли;
		
		Если ИспользоватьРолиФайлов Тогда
			Для Каждого СтрокаФайл Из Строка.ПолучитьЭлементы() Цикл
				Если СтрокаФайл.ID = ИдентификаторСтроки И СтрокаФайл.Тип = ТипСтроки Тогда
					Возврат СтрокаФайл;
					
				ИначеЕсли СтрокаФайл.ID = ИдентификаторСтроки И ТипСтроки = Неопределено Тогда
					Возврат СтрокаФайл;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Открывает карточку выбранного файла.
//
&НаКлиенте
Процедура ОткрытьКарточку()
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("РазрешеноРедактирование", СостояниеРазрешаетРедактированиеФайла);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ТекущиеДанные.Тип,
		ТекущиеДанные.ID,
		ЭтотОбъект,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущийФайлНаЧтение()
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущийФайлДляРедактирования()
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Тип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,
		Ложь,,
		ID);
	
КонецПроцедуры

// Завершает удаление файла после вопроса пользователю.
//
&НаКлиенте
Процедура ПослеУдаленияФайлов(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

// Меняет доступность команд в зависимости от выбранного файла.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаФайлов()
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
			Или Не ОбновлениеУспешноЗавершено
			Или (ТекущиеДанные <> Неопределено И ТекущиеДанные.Тип = "DMFileRole") Тогда
		
		УбратьДоступностьКоманд();
		
	Иначе
		
		Редактируется = ТекущиеДанные.Редактируется;
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		ЕстьПодписи = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		
		РедактируетсяДругимПользователем =
			Редактируется
			И Не РедактируетсяТекущимПользователем;
		МожноЗахватить =
			СостояниеРазрешаетРедактированиеФайла
			И Не РедактируетсяДругимПользователем
			И Не Зашифрован
			И Не ЕстьПодписи;
		МожноОтпустить =
			СостояниеРазрешаетРедактированиеФайла
			И РедактируетсяТекущимПользователем
			И Не Зашифрован
			И Не ЕстьПодписи;
		
		Элементы.ОткрытьНаЧтение.Доступность = Не Зашифрован;
		Элементы.КонтекстОткрытьНаЧтение.Доступность = Не Зашифрован;
		Элементы.ОткрытьДляРедактирования.Доступность = МожноЗахватить;
		Элементы.КонтекстОткрытьДляРедактирования.Доступность = МожноЗахватить;
		Элементы.ЗакончитьРедактирование.Доступность = МожноОтпустить;
		Элементы.КонтекстЗакончитьРедактирование.Доступность = МожноОтпустить;
		Элементы.СохранитьИзменения.Доступность = МожноОтпустить;
		Элементы.ОтменитьРедактирование.Доступность = МожноОтпустить;
		Элементы.ОтменитьРедактированиеКонтекст.Доступность = МожноОтпустить;
		Элементы.СохранитьНаДиск.Доступность = Не Зашифрован;
		Элементы.СохранитьНаДискКонтекст.Доступность = Не Зашифрован;
		Элементы.ОбновитьИзФайлаНаДиске.Доступность = МожноЗахватить;
		Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = МожноЗахватить;
		Элементы.ОткрытьКарточку.Доступность = Истина;
		Элементы.ОткрытьКарточкуКонтекст.Доступность = Истина;
		Элементы.Удалить.Доступность = Не Редактируется И СостояниеРазрешаетУдалениеФайла;
		Элементы.УдалитьКонтекст.Доступность = Не Редактируется И СостояниеРазрешаетУдалениеФайла;
		Элементы.ПодменюПечать.Доступность = Не Зашифрован;
		Элементы.Отправить.Доступность = Истина;
		Элементы.ГруппаЭП.Доступность = СостояниеРазрешаетИзменениеЭП;
		Элементы.ГруппаЭПКонтекст.Доступность = СостояниеРазрешаетИзменениеЭП;
		Элементы.ФормаГруппаДополнительно.Доступность = Истина;
		Элементы.ВыбратьРольФайлаКонтекст.Доступность = СостояниеРазрешаетДобавлениеФайла;
		Элементы.Скопировать.Доступность = СостояниеРазрешаетДобавлениеФайла;
		Элементы.СкопироватьКонтекст.Доступность = СостояниеРазрешаетДобавлениеФайла;
		Элементы.ОткрытьКаталогФайлаКонтекст.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьДоступностьКоманд()
	
	Элементы.ОткрытьНаЧтение.Доступность = Ложь;
	Элементы.КонтекстОткрытьНаЧтение.Доступность = Ложь;
	Элементы.ОткрытьДляРедактирования.Доступность = Ложь;
	Элементы.КонтекстОткрытьДляРедактирования.Доступность = Ложь;
	Элементы.ЗакончитьРедактирование.Доступность = Ложь;
	Элементы.КонтекстЗакончитьРедактирование.Доступность = Ложь;
	Элементы.СохранитьИзменения.Доступность = Ложь;
	Элементы.ОтменитьРедактирование.Доступность = Ложь;
	Элементы.ОтменитьРедактированиеКонтекст.Доступность = Ложь;
	Элементы.СохранитьНаДиск.Доступность = Ложь;
	Элементы.СохранитьНаДискКонтекст.Доступность = Ложь;
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = Ложь;
	Элементы.ОбновитьИзФайлаНаДискеКонтекст.Доступность = Ложь;
	Элементы.ОткрытьКарточку.Доступность = Ложь;
	Элементы.ОткрытьКарточкуКонтекст.Доступность = Ложь;
	Элементы.Удалить.Доступность = Ложь;
	Элементы.УдалитьКонтекст.Доступность = Ложь;
	Элементы.ПодменюПечать.Доступность = Ложь;
	Элементы.Отправить.Доступность = Ложь;
	Элементы.ГруппаЭП.Доступность = Ложь;
	Элементы.ГруппаЭПКонтекст.Доступность = Ложь;
	Элементы.ФормаГруппаДополнительно.Доступность = Ложь;
	Элементы.ВыбратьРольФайлаКонтекст.Доступность = Ложь;
	Элементы.Скопировать.Доступность = Ложь;
	Элементы.СкопироватьКонтекст.Доступность = Ложь;
	Элементы.ОткрытьКаталогФайлаКонтекст.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюФайла()
	
	ОбновитьПредпросмотр();
	
КонецПроцедуры

// Обновляет картинку предпросмотра.
//
&НаКлиенте
Процедура ОбновитьПредпросмотр(ОбновитьДанные = Ложь)
	
	Если Предпросмотр = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыПревью.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью;
	
	РедактируетсяТекущимПользователем = Ложь;
	ПредпросмотрУрезан = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ОжиданиеПредпросмотра Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Тип = "DMFile"
				И (Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Или ОбновитьДанные) Тогда
			
			ТекущиеДанные.ОжиданиеПредпросмотра = Истина;
			ДлительнаяОперация = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьHTMLПредпросмотрОбъектаАсинхронно(
				УникальныйИдентификатор,
				ТекущиеДанные.ID,
				ТекущиеДанные.Тип);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
					"ОбновитьПредпросмотрЗавершение",
					ЭтотОбъект,
					Новый Структура("ТекущиеДанные", ТекущиеДанные));
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
				ЭтотОбъект,
				ДлительнаяОперация,
				ОповещениеОЗавершении,
				Ложь,,
				Ложь);
			
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Тогда
			ПредставлениеHTML = ТекущиеДанные.ПредставлениеHTML;
		Иначе
			ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				НСтр("ru='Данные предпросмотра отсутствуют.'"),
				ЗаголовокСообщенияВОбластиПредпросмотра);
		КонецЕсли;
		
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		ПредпросмотрУрезан = ТекущиеДанные.ПредпросмотрУрезан;
		
	КонецЕсли;
	
	ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем, ПредпросмотрУрезан);
	
	Элементы.ГруппаСтраницыПревью.ТекущаяСтраница = Элементы.СтраницаПревью;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		HTMLПредпросмотрОбъекта = Результат.РезультатДлительнойОперации;
		HTMLПредпросмотрОбъекта.Вставить("ID", ПараметрыОповещения.ТекущиеДанные.ID);
		HTMLПредпросмотрОбъекта.Вставить("Тип", ПараметрыОповещения.ТекущиеДанные.Тип);
		Оповестить("ПолученHTMLПредпросмотрОбъекта", HTMLПредпросмотрОбъекта, ЭтотОбъект);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем = Ложь, ПредпросмотрУрезан = Ложь)
	
	Если Предпросмотр Тогда
		Если РедактируетсяТекущимПользователем Тогда
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Иначе
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПредпросмотрУрезан;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервереБезКонтекста
Процедура СохранитьВХранилищеНастроек(КлючОбъекта, КлючНастройки, Настройка)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастройки,
		Настройка);
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборот3.ДоступенФункционалФайлов() Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			// Обработаем настройки ЭП.
			НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ЗаголовокСообщенияВОбластиПредпросмотра = НастройкиДО.ЗаголовокСообщенияВОбластиПредпросмотра;
			ИспользоватьЭлектронныеПодписиДО = (НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Истина);
			ИспользоватьЭлектронныеПодписи = (ИспользоватьЭлектронныеПодписиДО И ИспользоватьЭлектронныеПодписиИС);
			
			Элементы.ДеревоФайловНомерКартинкиПодписанЗашифрован.Видимость = ИспользоватьЭлектронныеПодписиДО;
			Элементы.Подписать.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ДобавитьЭПИзФайла.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.СохранитьВместеСЭП.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ПодписатьКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.ДобавитьЭПИзФайлаКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			Элементы.СохранитьВместеСЭПКонтекст.Видимость = ИспользоватьЭлектронныеПодписи;
			
			СостояниеРазрешаетДобавлениеФайла = Истина;
			СостояниеРазрешаетУдалениеФайла = Истина;
			СостояниеРазрешаетДобавлениеСканКопии = Истина;
			СостояниеРазрешаетРедактированиеФайла = Ложь;
			СостояниеРазрешаетИзменениеЭП = Истина;
			
			Если ЕстьВладелец Тогда
				
				СвязанныйОбъектДО = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДанныеОбъектаДОПоВнешнемуОбъекту(
					Владелец);
				Если СвязанныйОбъектДО <> Неопределено Тогда
					ID = СвязанныйОбъектДО.ID;
					Тип = СвязанныйОбъектДО.type;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаСервере
Процедура ПрочитатьИОбновитьСписокФайлов(РезультатДлительнойОперации)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Если ТипЗнч(РезультатДлительнойОперации) = Тип("Структура") Тогда
		ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			РезультатДлительнойОперации.Тип);
	Иначе
		ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
			Прокси,
			РезультатДлительнойОперации);
	КонецЕсли;
	
	РолиФайлов = Новый Массив;
	Если ОбъектXDTO.objectID.type = "DMDocument" Тогда
		РолиФайлов = ОбъектXDTO.documentType.roles;
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "roles") Тогда
		РолиФайлов = ОбъектXDTO.roles;
	КонецЕсли;
	
	СписокФайлов = Новый Массив;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		СписокФайлов = ОбъектXDTO.files;
	КонецЕсли;
	
	ИспользоватьРолиФайлов = (РолиФайлов.Количество() > 0);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьДеревоФайлов(
		ДеревоФайлов,
		ДоступныеРоли,
		СписокФайлов,
		ИспользоватьРолиФайлов,
		РолиФайлов);
	
	Если ЕстьВладелец Тогда
		МассивПрисоединенныеФайлыВИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединенныеФайлыВИС(
			Владелец);
		КолВоФайловИС = МассивПрисоединенныеФайлыВИС.ВГраница();
		Для Индекс = 0 По КолВоФайловИС Цикл
			НомерФайла = КолВоФайловИС - Индекс;
			ПрисоединенныйФайлВИС = МассивПрисоединенныеФайлыВИС[НомерФайла];
			ИдентификаторФайлаИС = Строка(ПрисоединенныйФайлВИС.УникальныйИдентификатор());
			ФайлЕстьВДО = Ложь;
			Для Каждого ФайлXDTO Из СписокФайлов Цикл
				Если ФайлXDTO.objectID.id = ИдентификаторФайлаИС Тогда
					ФайлЕстьВДО = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ФайлЕстьВДО Тогда
				МассивПрисоединенныеФайлыВИС.Удалить(НомерФайла);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПрисоединенныйФайлВИС Из МассивПрисоединенныеФайлыВИС Цикл
			ПрисоединенныеФайлыВИС.Добавить(ПрисоединенныйФайлВИС);
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьЭлектронныеПодписи Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокПодписейФайлов(
			СписокФайлов,
			Подписи,
			УникальныйИдентификатор);
	КонецЕсли;
	
	// Уточним доступность команд добавления и редактирования.
	СостояниеРазрешаетДобавлениеФайла = Истина;
	СостояниеРазрешаетУдалениеФайла = Истина;
	СостояниеРазрешаетРедактированиеФайла = Истина;
	СостояниеРазрешаетДобавлениеСканКопии = Истина;
	СостояниеРазрешаетИзменениеЭП = Истина;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "enabledProperties")
			И ОбъектXDTO.enabledProperties.Количество() <> 0 Тогда
		СостояниеРазрешаетДобавлениеФайла = Ложь;
		СостояниеРазрешаетУдалениеФайла = Ложь;
		СостояниеРазрешаетРедактированиеФайла = Ложь;
		СостояниеРазрешаетДобавлениеСканКопии = Ложь;
		СостояниеРазрешаетИзменениеЭП = Ложь;
		Для Каждого ДоступноеПоле Из ОбъектXDTO.enabledProperties Цикл
			
			Если НРег(ДоступноеПоле) = "addfile" Тогда
				СостояниеРазрешаетДобавлениеФайла = Истина;
				
			ИначеЕсли НРег(ДоступноеПоле) = "deletefile" Тогда
				СостояниеРазрешаетУдалениеФайла = Истина;
				
			ИначеЕсли НРег(ДоступноеПоле) = "editfile" Тогда
				СостояниеРазрешаетРедактированиеФайла = Истина;
				
			ИначеЕсли НРег(ДоступноеПоле) = "addscannedcopy" Тогда
				СостояниеРазрешаетДобавлениеСканКопии = Истина;
				
			ИначеЕсли НРег(ДоступноеПоле) = "signatures" Тогда
				СостояниеРазрешаетИзменениеЭП = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Почта

// Начинает отправку письма средствами ИС, если использование почты ДО выключено.
//
&НаКлиенте
Процедура ОтправитьЧерезИС()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЧерезИСНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает отправку письма средствами ИС после помещения файлов из ДО в хранилище.
//
&НаКлиенте
Процедура ОтправитьЧерезИСНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, Параметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеФайлы = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеФайлы(
		ДеревоФайлов,
		Элементы.ДеревоФайлов.ВыделенныеСтроки);
	Вложения = Новый Массив;
	Для Каждого ВыделенныйФайл Из ВыделенныеФайлы Цикл
		Представление = СтрШаблон("%1.%2", ВыделенныйФайл.Наименование, ВыделенныйФайл.Расширение);
		Вложение = Новый Структура;
		Вложение.Вставить("Представление", Представление);
		Вложение.Вставить("Идентификатор", Неопределено);
		Вложение.Вставить("ИдентификаторДО", ВыделенныйФайл.ID);
		Вложения.Добавить(Вложение);
	КонецЦикла;
	
	Параметры = ПараметрыИсходящегоПисьма(Владелец, Вложения, УникальныйИдентификатор);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Параметры);
	
КонецПроцедуры

// Формирует параметры исходящего письма со вложениями.
//
// Параметры:
//   Владелец - Произвольный - владелец файлов.
//   Вложения - Массив - массив структур со свойствами:
//     Представление - Строка - представление файла;
//     Идентификатор - Строка - идентификатор файла в ДО.
//   УникальныйИдентификатор - Строка - идентификатор формы-владельца.
//
&НаСервереБезКонтекста
Функция ПараметрыИсходящегоПисьма(Знач Владелец, Знач Вложения, Знач УникальныйИдентификатор)
	
	// Подготовим заголовок письма.
	ПараметрыПисьма = Новый Структура("УдалятьФайлыПослеОтправки", Истина);
	ОдноВложение = Вложения.Количество() = 1;
	
	// Получатель.
	Если ОбщегоНазначения.ПодсистемаСуществует("ОтправкаПочтовыхСообщений") Тогда
		МодульОтправкаПочтовыхСообщений = ОбщегоНазначения.ОбщийМодуль("ОтправкаПочтовыхСообщений");
	Иначе
		МодульОтправкаПочтовыхСообщений = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", Владелец.Метаданные())
			И МодульОтправкаПочтовыхСообщений <> Неопределено Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Контрагент");
		ПараметрыПисьма.Вставить("Получатель", МодульОтправкаПочтовыхСообщений.АдресаЭлектроннойПочты(Контрагент));
	Иначе
		ПараметрыПисьма.Вставить("Получатель", "");
	КонецЕсли;
	
	// Тема.
	НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Номер");
	Если Метаданные.ОбщиеМодули.Найти("ПрефиксацияОбъектовКлиентСервер") <> Неопределено Тогда
		МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		НомерДокумента = МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	КонецЕсли;
	ДатаДокумента = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Дата"), "ДЛФ=DD");
	Тема = СтрШаблон(НСтр("ru='%1, %2 к документу %3 %4 от %5'"),
		?(ОдноВложение, НСтр("ru='Файл'"), НСтр("ru='Файлы'")),
		?(ОдноВложение, НСтр("ru='присоединенный'"), НСтр("ru='присоединенные'")),
		ТипЗнч(Владелец),
		НомерДокумента,
		ДатаДокумента);
	ПараметрыПисьма.Вставить("Тема", Тема);
	
	// Текст.
	Текст = СтрШаблон(НСтр("ru='К письму %1 %2:'"),
		?(ОдноВложение, НСтр("ru='присоединен'"), НСтр("ru='присоединены'")),
		?(ОдноВложение, НСтр("ru='файл'"), НСтр("ru='файлы'")));
	
	// Получим вложения из ДО.
	Для Каждого Вложение Из Вложения Цикл
		АдресВоВременномХранилище =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Вложение.ИдентификаторДО,
				УникальныйИдентификатор);
		Вложение.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		Текст = Текст + Символы.ПС + СтрШаблон(НСтр("ru='- %1'"), Вложение.Представление);
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	Если МодульОтправкаПочтовыхСообщений <> Неопределено Тогда
		ПодготовленныйТекст = МодульОтправкаПочтовыхСообщений.ПодготовитьТекстПисьма(Текст);
		ПараметрыПисьма.Вставить("Текст", ПодготовленныйТекст);
		МодульОтправкаПочтовыхСообщений.ДополнитьПараметрыПисьма(ПараметрыПисьма);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

#КонецОбласти

#КонецОбласти