
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	ЗаполнениеПараметровФормы = Новый Структура;
	ЗаполнениеПараметровФормы.Вставить("ФормаПодбора");
	ЗаполнениеПараметровФормы.Вставить("ПодборФормальныхОписаний");
	
	ПараметрыФормы = Новый ФиксированнаяСтруктура(ЗаполнениеПараметровФормы);
	
	КодФормы = "Обработка_ПодборПоФормальнымОписаниямЛекарственныхСредств_Форма";
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтотОбъект);
	ПодборТоваровСервер.УстановитьЗаголовокФормыПодбора(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТоваров, "ЕстьНоменклатура", Истина);
	
	Элементы.ОстаткиТоваров.Видимость = ОтображатьОстатки;
	УстановитьТекстНадписиОтображатьОстатки(ЭтотОбъект);
	Элементы.ОстаткиПоСкладамСклад.Видимость = Не ЗначениеЗаполнено(Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("НастроитьПользовательскиеНастройкиПриНеобходимости", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Объект.Корзина.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПодборТоваровКлиент.ПередЗакрытиемФормыПодбора(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПеренестиВДокументДанныеПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокументДанныеПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапрашиватьКоличество", "Пометка", ЗапрашиватьКоличество);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Отборы формы

&НаКлиенте
Процедура ОтборГруппаПКУПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораПоГруппеПКУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПКУПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораПоГруппеПКУ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаТолькоВНаличии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатковБезЗабракованныхИПросроченныхПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковБезЗабракованныхИПросроченных();
	ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтотОбъект, Элементы.СписокТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсточникФинансированияПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования();
	ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтотОбъект, Элементы.СписокТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникФинансированияПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования(Истина);
	ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтотОбъект, Элементы.СписокТоваров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Список "Список товаров"

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровПриАктивизацииСтроки(Элемент)
	
	ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СписокТоваровПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ТребуетсяОбновитьОтображениеПользовательскихНастроек = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ДобавитьТоварВКорзину(Элемент.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Список "Корзина"

&НаКлиенте
Процедура КоличествоПодобраноИнформацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриНажатииНаИнформациюОПодобранныхТоварах(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////////////////////////////////////// 
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ЗаказыСервер.УстановитьОформлениеОтбораНоменклатуры(ЭтотОбъект, "Корзина", "Объект.Корзина");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументДанныеПодбора()
	
	АдресТоваровВХранилище = ПоместитьОтобранныеТоварыВХранилище();
	ДанныеПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ЗакрыватьПриВыборе = Ложь;
	ОповеститьОВыборе(ДанныеПодбора);
	
	ЗакрытьФормуБезПодтверждения = Истина;
	Закрыть(ДанныеПодбора);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОтобранныеТоварыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Корзина.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ПодборТоваровСервер.СохранитьНастройкиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораПоГруппеПКУ(Знач ИзменитьПризнакОтбора = Ложь)
	
	Если ИзменитьПризнакОтбора Тогда
		ОтборГруппаПКУ = ЗначениеЗаполнено(ГруппаПКУ);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокТоваров,
		"ГруппаПКУ",
		ГруппаПКУ,
		,
		,
		ОтборГруппаПКУ);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПользовательскиеНастройкиПриНеобходимости()
	
	Если ТребуетсяОбновитьОтображениеПользовательскихНастроек И Элементы.ГруппаПользовательскихНастроек.ПодчиненныеЭлементы.Количество() > 0 Тогда
		ТребуетсяОбновитьОтображениеПользовательскихНастроек = Ложь;
		НастроитьОтображениеПользовательскихНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПользовательскихНастроек()
	
	ПодборТоваровСервер.НастроитьОтображениеПользовательскихНастроек(Элементы.ГруппаПользовательскихНастроек);
	
КонецПроцедуры

#Область ОстаткиТоваров

&НаСервере
Процедура ОбработатьИзменениеПризнакаТолькоВНаличии()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораОстатковБезЗабракованныхИПросроченных()
	
	ПодборТоваровСервер.УстановитьОтборОстатковБезЗабракованныхИПросроченных(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования(Знач ИзменитьПризнакОтбора = Ложь)
	
	Если ИзменитьПризнакОтбора Тогда
		ОтборИсточникФинансирования = ЗначениеЗаполнено(ИсточникФинансирования);
	КонецЕсли;
	
	ПодборТоваровСервер.УстановитьОтборОстатковПоИсточникуФинансирования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ПолучитьИнформациюОТоваре(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтображенияОстатковПоСкладамДокумента(Форма)
	
	Форма.ОтображатьОстатки = Не Форма.ОтображатьОстатки;
	Форма.Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	УстановитьТекстНадписиОтображатьОстатки(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиОтображатьОстатки(Форма)
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.Элементы.ОстаткиТоваров.Видимость,
		НСтр("ru = 'Информация об остатках (скрыть)'"),
		НСтр("ru = 'Информация об остатках (показать)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элемент)
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		
		ОчиститьТаблицуОстатков(Форма);
		Форма.ТекущаяСтрокаНоменклатуры = СтруктураСтрокиНоменклатуры();
		
	Иначе
		
		Если Форма.ТекущаяСтрокаНоменклатуры <> Неопределено Тогда
			
			СтрокаИзменилась = Ложь;
			Для Каждого КлючЗначение Из Форма.ТекущаяСтрокаНоменклатуры Цикл
				Если КлючЗначение.Значение <> СтрокаТаблицыНоменклатуры[КлючЗначение.Ключ] Тогда
					СтрокаИзменилась = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СтрокаИзменилась Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТекущаяСтрокаНоменклатуры = СтруктураСтрокиНоменклатуры();
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаНоменклатуры, СтрокаТаблицыНоменклатуры);
		
		Если Форма.ОтображатьОстатки Тогда
			Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОТоваре(Форма)
	
	Если Не Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицуОстатков(Форма);
	
	ЕстьОстатки = Форма.ТекущаяСтрокаНоменклатуры.ВНаличииОстаток > 0;
	
	Если Не ЕстьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникФинансированияОстатка = ?(Форма.ОтборИсточникФинансирования, Форма.ИсточникФинансирования, Неопределено);
	ИнформацияОТоваре = ОстаткиТоваров(Форма.ТекущаяСтрокаНоменклатуры, Форма.Организации, Форма.Склады, ИсточникФинансированияОстатка, ОтборОстатковБезЗабракованныхИПросроченных);
	
	Для Каждого СтрокаТекущиеОстатки Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = Форма.ОстаткиПоСкладам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстаткиПоСкладам, СтрокаТекущиеОстатки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураСтрокиНоменклатуры()
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ТорговоеНаименование");
	СтруктураСтроки.Вставить("ДействующиеВеществаМНН");
	СтруктураСтроки.Вставить("ФормаВыпуска");
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТаблицуОстатков(Форма)
	
	Форма.ОстаткиПоСкладам.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстаткиТоваров(Знач ТекущаяСтрокаНоменклатуры, Знач Организации, Знач Склады, Знач ИсточникФинансирования, Знач БезПросроченныхИЗабракованных)
	
	Номенклатура            = ТекущаяСтрокаНоменклатуры.Номенклатура;
	ТорговоеНаименование    = ТекущаяСтрокаНоменклатуры.ТорговоеНаименование;
	ДействующиеВеществаМНН  = ТекущаяСтрокаНоменклатуры.ДействующиеВеществаМНН;
	ФормаВыпуска            = ТекущаяСтрокаНоменклатуры.ФормаВыпуска;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ЗапросНоменклатура = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	((&ТорговоеНаименование = НЕОПРЕДЕЛЕНО ИЛИ СправочникНоменклатура.ЭлементКАТ.ТорговоеНаименование = &ТорговоеНаименование)
		|		ИЛИ (&ДействующиеВеществаМНН = НЕОПРЕДЕЛЕНО ИЛИ СправочникНоменклатура.ЭлементКАТ.ДействующиеВеществаМНН = &ДействующиеВеществаМНН))
		|	И СправочникНоменклатура.ЭлементКАТ.ФормаВыпуска = &ФормаВыпуска
		|");
		ЗапросНоменклатура.УстановитьПараметр("ТорговоеНаименование", ?(ЗначениеЗаполнено(ТорговоеНаименование), ТорговоеНаименование, Неопределено));
		ЗапросНоменклатура.УстановитьПараметр("ДействующиеВеществаМНН", ?(ЗначениеЗаполнено(ДействующиеВеществаМНН), ДействующиеВеществаМНН, Неопределено));
		ЗапросНоменклатура.УстановитьПараметр("ФормаВыпуска", ФормаВыпуска);
		Номенклатура = ЗапросНоменклатура.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Склад                                                                       КАК Склад,
	|	Остатки.Номенклатура                                                                КАК Номенклатура,
	|	Остатки.Номенклатура.ОсновнаяЕдиницаУчета                                           КАК ЕдиницаИзмерения,
	|	СУММА(Остатки.ВНаличииОстаток / Упаковки.Коэффициент)                               КАК ВНаличии,
	|	СУММА((Остатки.ВНаличииОстаток  - ВРезервеСоСкладаОстаток) / Упаковки.Коэффициент)  КАК Доступно
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Организация В (&Организации)
	|			И Склад В (&Склады)
	|			И Номенклатура В (&Номенклатура)
	|			И (НЕ &БезПросроченныхИЗабракованных
	|				ИЛИ ВЫБОР
	|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0)
	|							ТОГДА ДАТАВРЕМЯ(2339,1,1,0,0,0)
	|								ИНАЧЕ СерияНоменклатуры.ГоденДо
	|					КОНЕЦ > &ТекущаяДата)
	|			И (&ИсточникФинансирования = НЕОПРЕДЕЛЕНО ИЛИ ИсточникФинансирования В ИЕРАРХИИ(&ИсточникФинансирования))) КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
	|	ПО
	|		Остатки.СерияНоменклатуры = СерияЗабракована.Объект
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|	ПО
	|		Остатки.Номенклатура = Упаковки.Номенклатура
	|		И Остатки.Номенклатура.ОсновнаяЕдиницаУчета = Упаковки.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ &БезПросроченныхИЗабракованных ИЛИ НЕ ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Склад,
	|	Остатки.Номенклатура
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Склад.Наименование,
	|	Остатки.Номенклатура.Наименование
	|");
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ИсточникФинансирования", ?(ЗначениеЗаполнено(ИсточникФинансирования), ИсточникФинансирования, Неопределено));
	Запрос.УстановитьПараметр("БезПросроченныхИЗабракованных", БезПросроченныхИЗабракованных);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ТекущиеОстатки = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Номенклатура, ЕдиницаИзмерения, ВНаличии, Доступно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки", ТекущиеОстатки);
	
КонецФункции

#КонецОбласти // ОстаткиТоваров

#КонецОбласти // СлужебныеПроцедурыИФункции
