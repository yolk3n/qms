
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	ЗаполнениеПараметровФормы = Новый Структура;
	ЗаполнениеПараметровФормы.Вставить("ФормаПодбора");
	ЗаполнениеПараметровФормы.Вставить("ПодборТоваров");
	ЗаполнениеПараметровФормы.Вставить("ПодборПоЗаказу");
	ЗаполнениеПараметровФормы.Вставить("ПодборВДокументСписания");
	
	ПараметрыФормы = Новый ФиксированнаяСтруктура(ЗаполнениеПараметровФормы);
	
	КодФормы = "Обработка_ПодборТоваровВДокументСписанияПоЗаказу_Форма";
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтотОбъект);
	ПодборТоваровСервер.УстановитьЗаголовокФормыПодбора(ЭтотОбъект);
	
	ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
	
	ЗаполнитьДеревоЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ГруппаПользовательскихНастроек.ПодчиненныеЭлементы.Количество() > 0 Тогда
		НастроитьОтображениеПользовательскихНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПодборТоваровКлиент.ПередЗакрытиемФормыПодбора(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПеренестиВДокументДанныеПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработкаКомандФормы

&НаКлиенте
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапрашиватьКоличество", "Пометка", ЗапрашиватьКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПоиск(Команда)
	
	ПодборТоваровКлиент.НастроитьПоиск(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокументДанныеПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	ЗаполнитьПоОстаткамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ТекущаяСтрока = ПодборТоваровКлиентСервер.ТекущийСписокТоваров(ЭтотОбъект).ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(, ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокТоваровИнформацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПоказатьСкрытьПодборТоваров(ЭтотОбъект);
	Если ПоказыватьПодборТоваров Тогда
		// ФильтрНоменклатурыПоИерархии
		ФильтрНоменклатурыПоИерархииКлиент.ПриАктивизацииСтрокиСпискаНоменклатуры(ЭтотОбъект);
		// Конец ФильтрНоменклатурыПоИерархии
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отборы списка "Товары"
#Область ОтборыСпискаТовары

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаТолькоВНаличии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатковБезЗабракованныхИПросроченныхПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковБезЗабракованныхИПросроченных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсточникФинансированияПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникФинансированияПриИзменении(Элемент)
	
	ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования(Истина);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура СписокТоваровПриАктивизацииСтроки(Элемент)
	
	// ФильтрНоменклатурыПоИерархии
	ФильтрНоменклатурыПоИерархииКлиент.ПриАктивизацииСтрокиСпискаНоменклатуры(ЭтотОбъект);
	// Конец ФильтрНоменклатурыПоИерархии
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровРасширенныйПоискНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущаяСтрока = ПодборТоваровКлиентСервер.ТекущийСписокТоваров(ЭтотОбъект).ДанныеСтроки(ПараметрыПеретаскивания.Значение);
	Товар = ПодборТоваровКлиентСервер.ПараметрыТовара(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(Товар, ТекущаяСтрока);
	
	ПараметрыПеретаскивания.Значение = Товар;
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Корзина"
#Область Корзина

&НаКлиенте
Процедура КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ТипСтроки = 0 И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа) И ПоказыватьПодборТоваров Тогда
		СтандартнаяОбработка = Ложь;
		УстановитьОтборСпискаНоменклатурыПоСтрокеЗаказа(ТекущаяСтрока.НоменклатураЗаказа);
	ИначеЕсли ТекущаяСтрока.ТипСтроки = 1 И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа) Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаЗаказа = ТекущаяСтрока.ПолучитьРодителя();
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрока);
		ПараметрыТовара.Вставить("Заказ", СтрокаЗаказа.Заказ);
		ПараметрыТовара.Вставить("КодСтроки", СтрокаЗаказа.КодСтроки);
		ПараметрыТовара.Вставить("НоменклатураЗаказа", СтрокаЗаказа.НоменклатураЗаказа);
		ПараметрыТовара.Вставить("ЕдиницаИзмеренияЗаказа", СтрокаЗаказа.ЕдиницаИзмеренияЗаказа);
		ПараметрыТовара.Вставить("КОформлению", Мин(СтрокаЗаказа.КОформлению - СтрокаЗаказа.КоличествоВЕдиницахЗаказа + ТекущаяСтрока.КоличествоВЕдиницахЗаказа, СтрокаЗаказа.КОформлению));
		ПараметрыТовара.Вставить("Цена", СтрокаЗаказа.Цена);
		ПараметрыТовара.Вставить("Количество", ТекущаяСтрока.КоличествоВЕдиницахИзмерения);
		ПараметрыТовара.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
		
		ПараметрыТовара.Вставить("Склад", Склад);
		ПараметрыТовара.Вставить("Валюта", Валюта);
		ПараметрыТовара.Вставить("СкрытьЦену", РежимПодбораБезСуммовыхПараметров);
		ПараметрыТовара.Вставить("РедактироватьЦену", Истина);
		ПараметрыТовара.Вставить("УчетВОтделениях", ПодборТоваровКлиентСервер.ПодборВОтделении(ЭтотОбъект));
		ПараметрыТовара.Вставить("ПараметрыУчетаНоменклатуры", ПараметрыУчетаНоменклатуры);
		ПараметрыТовара.Вставить("ЗапретитьИзменениеИсточникаФинансирования", ЗапретитьИзменениеИсточникаФинансирования);
		ПараметрыТовара.Вставить("СкрытьСерию", РежимПодбораБезРазрезовУчета);
		ПараметрыТовара.Вставить("СкрытьПартия", РежимПодбораБезРазрезовУчета);
		ПараметрыТовара.Вставить("СкрытьИсточникФинансирования", РежимПодбораБезРазрезовУчета);
		
		ОткрытьФорму("Обработка.ПодборТоваровВДокументСписанияПоЗаказу.Форма.ФормаЗапросаКоличества", ПараметрыТовара, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока.ТипСтроки <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаказа = ТекущаяСтрока.получитьРодителя();
	СтрокаЗаказа.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(СтрокаЗаказа);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение,, "Количество");
	ТекущаяСтрока.КоличествоВЕдиницахИзмерения = ВыбранноеЗначение.Количество;
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоВЕдиницахИзмерения * ТекущаяСтрока.Коэффициент;
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(ТекущаяСтрока.ПолучитьРодителя());
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для Каждого Идентификатор Из ПараметрыПеретаскивания.Значение Цикл
		Если Элемент.ДанныеСтроки(Идентификатор).ТипСтроки <> 1 Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	КудаДобавить = Элемент.ДанныеСтроки(Строка);
	Если КудаДобавить = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если КудаДобавить.ТипСтроки = 1 Тогда
		КудаДобавить = КудаДобавить.ПолучитьРодителя();
	КонецЕсли;
	
	Если КудаДобавить.КОформлению = 0 И ЗначениеЗаполнено(КудаДобавить.НоменклатураЗаказа) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение);
	Если ТипЗначения = Тип("Массив") Тогда
		
		Для Каждого Идентификатор Из ПараметрыПеретаскивания.Значение Цикл
			ЧтоДобавить = Элемент.ДанныеСтроки(Идентификатор);
			Если КудаДобавить.Заказ = ЧтоДобавить.Заказ
			   И КудаДобавить.КодСтроки = ЧтоДобавить.КодСтроки
			   И КудаДобавить.НоменклатураЗаказа = ЧтоДобавить.НоменклатураЗаказа
			   И КудаДобавить.ЕдиницаИзмеренияЗаказа = ЧтоДобавить.ЕдиницаИзмеренияЗаказа Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗначения <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаЗаказа = Элементы.Корзина.ДанныеСтроки(Строка);
	Если СтрокаЗаказа.ТипСтроки = 1 Тогда
		СтрокаЗаказа = СтрокаЗаказа.ПолучитьРодителя();
	КонецЕсли;
	
	Товары = СтрокаЗаказа.ПолучитьЭлементы();
	
	ДанныеИзменились = Ложь;
	Элементы.Корзина.ТекущаяСтрока = СтрокаЗаказа.ПолучитьИдентификатор();
	
	ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение);
	Если ТипЗначения = Тип("Структура") Тогда
		
		ПодборТоваровКлиент.ДобавитьТоварВКорзину(ПараметрыПеретаскивания.Значение, ЭтотОбъект);
		ДанныеИзменились = Истина;
		
	ИначеЕсли ТипЗначения = Тип("Массив")  Тогда
		
		Для Каждого Идентификатор Из ПараметрыПеретаскивания.Значение Цикл
			
			ИсходнаяСтрока = Элементы.Корзина.ДанныеСтроки(Идентификатор);
			Товар = ПодборТоваровКлиентСервер.ПараметрыТовара(ЭтотОбъект);
			ЗаполнитьЗначенияСвойств(Товар, ИсходнаяСтрока,, "Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
			Товар.Количество = ИсходнаяСтрока.КоличествоВЕдиницахИзмерения;
			ПодборТоваровКлиент.ДобавитьТоварВКорзинуОкончание(Товар, ЭтотОбъект);
			
			СтрокаЗаказаИсходнойСтроки = ИсходнаяСтрока.ПолучитьРодителя();
			СтрокаЗаказаИсходнойСтроки.КоличествоВЕдиницахЗаказа = СтрокаЗаказаИсходнойСтроки.КоличествоВЕдиницахЗаказа - ИсходнаяСтрока.КоличествоВЕдиницахЗаказа;
			СтрокаЗаказаИсходнойСтроки.ПолучитьЭлементы().Удалить(ИсходнаяСтрока);
			
		КонецЦикла;
		
		ДанныеИзменились = Истина;
		
	КонецЕсли;
	
	Если ДанныеИзменились Тогда
		ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(СтрокаЗаказа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.КодСтроки <> 0 Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияЗаказа;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	КонецЕсли;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Параметры.Документ);
	ОтборПартий.Вставить("Организация"  , Организация);
	ОтборПартий.Вставить("Склад"        , Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ПараметрыВыбораПартии.ВыборВОтделении = ПодборТоваровКлиентСервер.ПодборВОтделении(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПартияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоВЕдиницахЗаказаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоВЕдиницахЗаказа * ТекущаяСтрока.КоэффициентЕдиницыЗаказа;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(ТекущаяСтрока.ПолучитьРодителя());
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоэффициентЕдиницыЗаказаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Если ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0 Тогда
		Если ТекущаяСтрока.КоэффициентЕдиницыЗаказа <> 0 Тогда
			ТекущаяСтрока.КоличествоВЕдиницахЗаказа = ТекущаяСтрока.Количество / ТекущаяСтрока.КоэффициентЕдиницыЗаказа;
			ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(ТекущаяСтрока.ПолучитьРодителя());
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоВЕдиницахЗаказа * ТекущаяСтрока.КоэффициентЕдиницыЗаказа;
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоВЕдиницахИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.КоличествоВЕдиницахЗаказа = ?(ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0, 0, ТекущаяСтрока.Количество / ТекущаяСтрока.КоэффициентЕдиницыЗаказа);
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(ТекущаяСтрока.ПолучитьРодителя());
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), Действия.ПолучитьПараметрыПересчетаЦеныЗаУпаковку(ТекущаяСтрока.Количество));
	Иначе
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.КоличествоВЕдиницахЗаказа = ?(ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0, 0, ТекущаяСтрока.Количество / ТекущаяСтрока.КоэффициентЕдиницыЗаказа);
	
	ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(ТекущаяСтрока.ПолучитьРодителя());
	
КонецПроцедуры

#КонецОбласти // Корзина

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект, "КорзинаСерияНоменклатуры", "Корзина.СтатусУказанияСерий");
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект, "КорзинаПартия", "Корзина.СтатусУказанияПартий");
	
	// Видимость поля КорзинаСуммаСНДС
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСуммаСНДС.Имя);
	
	ГруппаОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Элемент.Отбор.Элементы, "", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"ЦенаВключаетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость полей КорзинаНомерСтроки, КорзинаНоменклатура, КорзинаСерияНоменклатуры, КорзинаПартия, КорзинаИсточникФинансирования, КорзинаМестоХранения, КорзинаКоличествоВЕдиницахИзмерения, КорзинаЕдиницаИзмерения, КорзинаКоэффициент
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСерияНоменклатуры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаПартия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаИсточникФинансирования.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаМестоХранения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоличествоВЕдиницахИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоэффициент.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость полей КорзинаКодСтроки, КорзинаНоменклатураЗаказа, КорзинаЗаказ, КорзинаЦена, КорзинаКОформлению, КорзинаКоличествоВЕдиницахЗаказа, КорзинаЕдиницаИзмеренияЗаказа, КорзинаКоэффициентЕдиницыЗаказа, КорзинаСумма, КорзинаСтавкаНДС, КорзинаСуммаНДС
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКодСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаНоменклатураЗаказа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЗаказ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЦена.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКОформлению.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоличествоВЕдиницахЗаказа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЕдиницаИзмеренияЗаказа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоэффициентЕдиницыЗаказа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСумма.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСуммаНДС.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отметка незаполненного, Только просмотр, Отображать полей КорзинаКоличествоВЕдиницахЗаказа, КорзинаКоэффициентЕдиницыЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоличествоВЕдиницахЗаказа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоэффициентЕдиницыЗаказа.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.НоменклатураЗаказа", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Цвет текста, Текст поля КорзинаКодСтроки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКодСтроки.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.НоменклатураЗаказа", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>'"));
	
	// Шрифт таблицы Корзина
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Корзина.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	// Цвет текста поля КорзинаКоличествоВЕдиницахЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоличествоВЕдиницахЗаказа.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.КОформлению", ВидСравненияКомпоновкиДанных.Меньше, Новый ПолеКомпоновкиДанных("Корзина.КоличествоВЕдиницахЗаказа"));
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Шрифт таблицы Корзина
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Корзина.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.КОформлению", ВидСравненияКомпоновкиДанных.Равно, 0);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.НоменклатураЗаказа", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,,,,, Истина));
	
	// Цвет фона поля КорзинаКОформлению
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКОформлению.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.КОформлению", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("Корзина.КоличествоВЕдиницахЗаказа"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.КОформлению", ВидСравненияКомпоновкиДанных.Больше, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);
	
	// Отметка незаполненного, Текст, Только просмотр поля КорзинаКоэффициентЕдиницыЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоэффициентЕдиницыЗаказа.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	// Цвет текста полей КорзинаКоличествоВЕдиницахИзмерения, КорзинаЕдиницаИзмерения, КорзинаКоэффициент
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоличествоВЕдиницахИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЕдиницаИзмерения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаКоэффициент.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 1);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.НоменклатураЗаказа", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Корзина.КоэффициентЕдиницыЗаказа", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументДанныеПодбора()
	
	АдресТоваровВХранилище = ПоместитьОтобранныеТоварыВХранилище();
	ДанныеПодбора = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ЗакрыватьПриВыборе = Ложь;
	ОповеститьОВыборе(ДанныеПодбора);
	
	ЗакрытьФормуБезПодтверждения = Истина;
	Закрыть(ДанныеПодбора);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОтобранныеТоварыВХранилище()
	
	КэшированныеЗначения = Неопределено;
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ЭтотОбъект);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	СтрокиЗаказа = Корзина.ПолучитьЭлементы();
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		
		Товары = СтрокаЗаказа.ПолучитьЭлементы();
		Для Каждого ВыбранныйТовар Из Товары Цикл
			
			Товар = Объект.Корзина.Добавить();
			Если СтрокаЗаказа.КОформлению > 0 Тогда
				ЗаполнитьЗначенияСвойств(Товар, ВыбранныйТовар);
				Товар.ИсходныйНомерСтроки = ВыбранныйТовар.НомерСтроки;
				Товар.СтавкаНДС = СтрокаЗаказа.СтавкаНДС;
				Если ВыбранныйТовар.КоэффициентЕдиницыЗаказа <> 0 Тогда
					Товар.Цена = СтрокаЗаказа.Цена * Товар.Коэффициент / Товар.КоэффициентЕдиницыЗаказа;
				КонецЕсли;
				
				Если Товар.КоличествоВЕдиницахЗаказа <> СтрокаЗаказа.КОформлению Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(Товар, ДействияПересчетСумм, КэшированныеЗначения);
				Иначе
					ЗаполнитьЗначенияСвойств(Товар, СтрокаЗаказа, "Сумма, СуммаНДС, СуммаСНДС");
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(Товар, ВыбранныйТовар, "Номенклатура, СерияНоменклатуры, Партия, ИсточникФинансирования, ЕдиницаИзмерения, КоличествоВЕдиницахИзмерения, Количество, Коэффициент");
				Товар.ИсходныйНомерСтроки = ВыбранныйТовар.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Корзина.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ПодборТоваровСервер.СохранитьНастройкиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПризнакаТолькоВНаличии()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораОстатковБезЗабракованныхИПросроченных()
	
	ПодборТоваровСервер.УстановитьОтборОстатковБезЗабракованныхИПросроченных(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораОстатковПоИсточникуФинансирования(Знач ИзменитьПризнакОтбора = Ложь)
	
	Если ИзменитьПризнакОтбора Тогда
		ОтборИсточникФинансирования = ЗначениеЗаполнено(ИсточникФинансирования);
	КонецЕсли;
	
	ПодборТоваровСервер.УстановитьОтборОстатковПоИсточникуФинансирования(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаНоменклатурыПоСтрокеЗаказа(Знач НоменклатураЗаказа)
	
	ПараметрыОтбора = РасширеннаяАналитикаУчета.ПолучитьЗначенияАналитики(НоменклатураЗаказа);
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		
		ПодборТоваровСервер.ОтфильтроватьПоАналогичнымСвойствам(ЭтотОбъект, ПараметрыОтбора.Номенклатура);
		ФильтрыСписковКлиентСервер.ФильтруемыйСписокЭлементФормы(ЭтотОбъект).ТекущаяСтрока = ПараметрыОтбора.Номенклатура;
		
	Иначе
		
		ФильтрыСписков.УстановитьВариантФильтра(ЭтотОбъект, ФильтрНоменклатурыЛекарственныхСредствКлиентСервер.Идентификатор());
		Отборы = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыОтбора.ТорговоеНаименование) Тогда
			Отборы.Вставить("ТорговоеНаименование", ПараметрыОтбора.ТорговоеНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыОтбора.ДействующиеВеществаМНН) Тогда
			Отборы.Вставить("ДействующиеВеществаМНН", ПараметрыОтбора.ДействующиеВеществаМНН);
		КонецЕсли;
		
		ЗапрашиваемыеПоля = ФильтрНоменклатурыЛекарственныхСредствКлиентСервер.ПараметрыФормыВыпуска();
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(Отборы, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтбора.ФормаВыпуска, ЗапрашиваемыеПоля));
		
		ФильтрНоменклатурыЛекарственныхСредств.СброситьОтборы(ЭтотОбъект);
		ФильтрНоменклатурыЛекарственныхСредств.УстановитьОтборыСписка(ЭтотОбъект, Отборы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказа()
	
	ЗаказТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТоваровВХранилище);
	
	Дерево = РеквизитФормыВЗначение("Корзина");
	
	СтрокиЗаказа = Дерево.Строки;
	СтрокаЗаказа = СтрокиЗаказа.Добавить();
	
	ДанныеЗаказа = ЗаказТовары.ДанныеЗаказа;
	Для Каждого ДанныеСтрокиЗаказа Из ДанныеЗаказа Цикл
		
		СтрокаЗаказа = СтрокиЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, ДанныеСтрокиЗаказа);
		
	КонецЦикла;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	КэшированныеЗначения = Неопределено;
	
	Товары = ЗаказТовары.Товары;
	Отбор = Новый Структура("Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	Для Каждого Товар Из Товары Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Товар);
		НайденныеСтроки = СтрокиЗаказа.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаЗаказа = НайденныеСтроки[0];
		Иначе
			СтрокаЗаказа = СтрокиЗаказа[0]; // сверх заказа
			ЗаполнитьЗначенияСвойств(Товар, СтрокаЗаказа, "Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
			Товар.КоличествоВЕдиницахЗаказа = 0;
			Товар.КоэффициентЕдиницыЗаказа = 0;
		КонецЕсли;
		
		СтрокаТовара = СтрокаЗаказа.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Товар);
		СтрокаТовара.ТипСтроки = 1;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		СтрокаЗаказа.КоличествоВЕдиницахЗаказа = СтрокаЗаказа.Строки.Итог("КоличествоВЕдиницахЗаказа");
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "Корзина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Заказ", Метаданные.Обработки.ПодборТоваровВДокументСписанияПоЗаказу.ТабличныеЧасти.Корзина.Реквизиты.Заказ.Тип);
	ТаблицаЗаказа.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗаказа.Колонки.Добавить("НоменклатураЗаказа", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
	ТаблицаЗаказа.Колонки.Добавить("ЕдиницаИзмеренияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗаказа.Колонки.Добавить("ИсточникФинансированияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансирования"));
	ТаблицаЗаказа.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого СтрокаЗаказа Из Корзина.ПолучитьЭлементы() Цикл
		Если Не ЗначениеЗаполнено(СтрокаЗаказа.НоменклатураЗаказа) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа);
		НоваяСтрока.Количество = СтрокаЗаказа.КОформлению;
	КонецЦикла;
	
	ПараметрыОстатков = ОтборНоменклатуры.ПараметрыПолученияОстатков();
	ПараметрыОстатков.Организация = Организация;
	ПараметрыОстатков.Склад = Склад;
	Если ОтборИсточникФинансирования Тогда
		ПараметрыОстатков.ИсточникФинансирования = ИсточникФинансирования;
	КонецЕсли;
	ПараметрыОстатков.ДатаОстатков = ДатаОстатков;
	ПараметрыОстатков.БезЗабракованныхИПросроченных = ОтборОстатковБезЗабракованныхИПросроченных;
	Отбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокТоваров.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "МестоХранения");
	Если Отбор.Количество() > 0 Тогда
		ПараметрыОстатков.МестоХранения = Отбор[0].ПравоеЗначение;
	КонецЕсли;
	
	Товары = ОтборНоменклатуры.ПолучитьОстаткиНоменклатурыПоЗаказу(ТаблицаЗаказа, ПараметрыОстатков, Не АвтозаполнениеБезУчетаМинимальнойУпаковки);
	
	Для Каждого СтрокаЗаказа Из Корзина.ПолучитьЭлементы() Цикл
		СтрокиЗаказа = СтрокаЗаказа.ПолучитьЭлементы();
		СтрокиЗаказа.Очистить();
		Если Не ЗначениеЗаполнено(СтрокаЗаказа.НоменклатураЗаказа) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаЗаказа);
		НайденныеСтроки = Товары.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = СтрокиЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.ТипСтроки = 1;
			ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатурыПриИзмененииРеквизитовВСтроке(НоваяСтрока, ПараметрыУчетаНоменклатуры);
		КонецЦикла;
		
		ПодборТоваровКлиентСервер.ПересчитатьИтогПоСтрокеЗаказа(СтрокаЗаказа);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПользовательскихНастроек()
	
	ПодборТоваровСервер.НастроитьОтображениеПользовательскихНастроек(Элементы.ГруппаПользовательскихНастроек);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Расширенный поиск в списке номенклатуры
#Область РасширенныйПоискНоменклатуры

&НаКлиенте
Процедура Подключаемый_РасширенныйПоискВСписках_СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасширенныйПоискВСписках_СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасширенныйПоискВСпискахКлиентСервер.СнятьОтборПоСтрокеПоиска(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасширенныйПоискВСписках_НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	ВыполнитьПоискНаСервере();
	
	РасширенныйПоискВСпискахКлиент.ПослеВыполненияПоиска(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНаСервере()
	
	РасширенныйПоискВСписках.ВыполнитьПоиск(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // РасширенныйПоискНоменклатуры

////////////////////////////////////////////////////////////////////////////////
// Фильтры списка номенклатуры
#Область ФильтрыНоменклатуры

&НаКлиенте
Процедура Подключаемый_ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам(Команда)
	
	ТекущаяСтрока = ПодборТоваровКлиентСервер.ТекущийСписокТоваров(ЭтотОбъект).ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьПоАналогичнымСвойствам(Знач Номенклатура)
	
	ПодборТоваровСервер.ОтфильтроватьПоАналогичнымСвойствам(ЭтотОбъект, Номенклатура);
	ФильтрыСписковКлиентСервер.ФильтруемыйСписокЭлементФормы(ЭтотОбъект).ТекущаяСтрока = Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрыСписков_ИспользоватьФильтрыПриИзменении(Элемент)
	
	ФильтрыСписков_ИспользоватьФильтрыПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрыСписков_ИспользоватьФильтрыПриИзменении()
	
	ФильтрыСписков.ИспользоватьФильтрыПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрыСписков_ВариантФильтраПриИзменении(Элемент)
	
	Если ФильтрыСписковКлиент.НуженСерверныйВызовПриИзмененииВариантаФильтра(ЭтотОбъект) Тогда
		ФильтрыСписков_ВариантФильтраПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФильтрыСписков_ВариантФильтраПриИзменении()
	
	ФильтрыСписков.ВариантФильтраПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрыСписков_ВариантФильтраОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фильтр номенклатуры по иерархии
#Область ФильтрНоменклатурыПоИерархии

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоИерархии_УстановитьТекущуюСтрокуИерархииНоменклатуры()
	
	ФильтрНоменклатурыПоИерархииКлиент.УстановитьТекущуюСтрокуИерархииНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоИерархии_ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ФильтрНоменклатурыПоИерархииКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоИерархии_ОбработатьАктивациюСтрокиИерархииНоменклатуры()
	
	ФильтрНоменклатурыПоИерархииКлиент.ОбработатьАктивациюСтрокиИерархииНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ФильтрНоменклатурыПоИерархии

////////////////////////////////////////////////////////////////////////////////
// Фильтр номенклатуры лекарственных средств
#Область ФильтрНоменклатурыЛекарственныхСредств

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыЛекарственныхСредств_СброситьОтборы(Команда)
	
	ФильтрНоменклатурыЛекарственныхСредств_СброситьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыЛекарственныхСредств_СброситьОтборы()
	
	ФильтрНоменклатурыЛекарственныхСредств.СброситьОтборы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыЛекарственныхСредств_СписокОтбораНажатие(Элемент, СтандартнаяОбработка)
	
	ФильтрНоменклатурыЛекарственныхСредствКлиент.ВыбратьСписокОтбора(ЭтотОбъект, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииФлажкаОтбора(Элемент)
	
	ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииФлажкаОтбора(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииФлажкаОтбора(Знач ИмяФлажка)
	
	ФильтрНоменклатурыЛекарственныхСредств.ПриИзмененииФлажкаОтбора(ЭтотОбъект, ИмяФлажка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииЗначенияОтбора(Элемент)
	
	ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииЗначенияОтбора(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииЗначенияОтбора(ИмяЭлемента)
	
	ФильтрНоменклатурыЛекарственныхСредств.ПриИзмененииЗначенияОтбора(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНоменклатурыЛекарственныхСредств_ОбработатьВыборЭлементовСписка(СписокВыбора, ИмяСписка) Экспорт
	
	Если ФильтрНоменклатурыЛекарственныхСредствКлиент.ОбработатьВыборЭлементовСписка(ЭтотОбъект, СписокВыбора, ИмяСписка) Тогда
		ФильтрНоменклатурыЛекарственныхСредств_ПриИзмененииЗначенияОтбора(ЭтотОбъект.ТекущийЭлемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыЛекарственныхСредств_ФормаВыпускаНажатие(Элемент, СтандартнаяОбработка)
	
	ФильтрНоменклатурыЛекарственныхСредствКлиент.УстановитьОтборПоФормеВыпуска(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНоменклатурыЛекарственныхСредств_ОбработатьУстановкуОтбораПоФормеВыпуска(Отбор, ДополнительныеПараметры) Экспорт
	
	Если Отбор <> Неопределено Тогда
		ФильтрНоменклатурыЛекарственныхСредств_ОбработатьУстановкуОтбораПоФормеВыпускаСервер(Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыЛекарственныхСредств_ОбработатьУстановкуОтбораПоФормеВыпускаСервер(Знач Отбор)
	
	ФильтрНоменклатурыЛекарственныхСредств.УстановитьОтборыСписка(ЭтотОбъект, Отбор);
	
КонецПроцедуры

#КонецОбласти // ФильтрНоменклатурыЛекарственныхСредств

////////////////////////////////////////////////////////////////////////////////
// Фильтр номенклатуры по виду и свойствам
#Область ПоВидуИСвойствам

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_СброситьФильтрПоСвойствам(Команда)
	
	ФильтрНоменклатурыПоВидуИСвойствам_СброситьФильтрПоСвойствам();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыПоВидуИСвойствам_СброситьФильтрПоСвойствам()
	
	ФильтрНоменклатурыПоВидуИСвойствам.СброситьФильтрПоСвойствам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ПриИзмененииВидаНоменклатуры(Элемент)
	
	ФильтрНоменклатурыПоВидуИСвойствам_ПриИзмененииВидаНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыПоВидуИСвойствам_ПриИзмененииВидаНоменклатуры()
	
	ФильтрНоменклатурыПоВидуИСвойствам.ПриИзмененииВидаНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ПоказатьСкрытьВидыНоменклатурыНажатие(Элемент)
	
	ФильтрНоменклатурыПоВидуИСвойствамКлиент.ПоказатьСкрытьВидыНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ФильтрНоменклатурыПоВидуИСвойствамКлиент.ПриАктивизацииСтрокиВидаНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоИерархии_ОбработатьАктивациюСтрокиВидаНоменклатуры()
	
	ФильтрНоменклатурыПоВидуИСвойствам_ПриИзмененииВидаНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ФильтрНоменклатурыПоВидуИСвойствамКлиент.ФильтрПоСвойствамВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамОтборПриИзменении(Элемент)
	
	ФильтрНоменклатурыПоВидуИСвойствамКлиент.ФильтрПоСвойствамОтборПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамПриИзмененииОтбора() Экспорт
	
	ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамПриИзмененииОтбораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамПриИзмененииОтбораНаСервере()
	
	ФильтрНоменклатурыПоВидуИСвойствам.ФильтрПоСвойствамПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ПоВидуИСвойствам

&НаКлиенте
Процедура Подключаемый_ПанельОтборов_СвернутьРазвернутьОтбор(Элемент)
	
	ПанельОтборовКлиентСервер.СкрытьПоказатьПанельОтборов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ФильтрыНоменклатуры
