
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаНастроекРегламентныхЗаданий

// Запускает проверку настроек регламентных заданий в фоне.
// 
// Параметры:
// 	ИдентификаторФормы - УникальныйИдентификатор
// 	ИнициировалПользователь - Булево
// 	Операция - Строка
// Возвращаемое значение:
// 	См. ДлительныеОперации.ВыполнитьФункцию
Функция НачатьПроверкуНастроекРегламентныхЗаданий(ИдентификаторФормы, ИнициировалПользователь = Ложь,
	Операция = "ПоУмолчанию") Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.СинхронизацияЭДО.ПроверитьНастройкиРегламентныхЗаданийЭДО",
		ИнициировалПользователь, Операция);
	
КонецФункции

Функция РезультатЗапросаСертификатов(ИдентификаторЭДО = Неопределено) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Если ИдентификаторЭДО <> ИдентификаторЭДО Тогда
		Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	КонецЕсли;
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей",
		Отбор);
	
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Если ИдентификаторЭДО <> ИдентификаторЭДО Тогда
		ОтборУчетныхЗаписей.УчетныеЗаписи = "&УчетныеЗаписи";
	КонецЕсли;
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписи", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	ДополнительныеПользователиДляОтбора = Новый Массив;
	
	ИмяЗадания = СинхронизацияЭДОКлиентСервер.ИмяРегламентногоЗаданияОтправкаЭлектронныхДокументов();
	ИмяПользователяРегламентногоЗадания = ОбщегоНазначенияБЭД.РегламентноеЗаданиеПоНаименованию(ИмяЗадания).ИмяПользователя;
	ДополнительныеПользователиДляОтбора.Добавить(Пользователи.НайтиПоИмени(ИмяПользователяРегламентногоЗадания));
	
	ИмяЗадания = СинхронизацияЭДОКлиентСервер.ИмяРегламентногоЗаданияПолучениеЭлектронныхДокументов();
	ИмяПользователяРегламентногоЗадания = ОбщегоНазначенияБЭД.РегламентноеЗаданиеПоНаименованию(ИмяЗадания).ИмяПользователя;
	ДополнительныеПользователиДляОтбора.Добавить(Пользователи.НайтиПоИмени(ИмяПользователяРегламентногоЗадания));
	
	ОтборСертификатов = КриптографияБЭД.НовыйОтборСертификатов();
	ОтборСертификатов.Отпечатки = "&Отпечатки";
	ОтборСертификатов.ДоступныеТекущемуПользователю = Неопределено;
	ОтборСертификатов.ДополнительныеПользователиДляОтбора = ДополнительныеПользователиДляОтбора;
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", ОтборСертификатов);
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СертификатыУчетныхЗаписей.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	УчетныеЗаписи.НаименованиеУчетнойЗаписи КАК НаименованиеУчетнойЗаписи,
	|	ЕСТЬNULL(СертификатыУчетныхЗаписей.Сертификат, НЕОПРЕДЕЛЕНО) КАК Сертификат
	|ИЗ
	|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписи КАК УчетныеЗаписи
	|		ПО СертификатыУчетныхЗаписей.ИдентификаторЭДО = УчетныеЗаписи.ИдентификаторЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО СертификатыУчетныхЗаписей.Сертификат = Сертификаты.Ссылка
	|ИТОГИ ПО
	|	ИдентификаторЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", ИдентификаторЭДО);
	
	ВидОперации = НСтр("ru = 'Получение доступных серверных сертификатов для электронного документооборота'");
	РезультатПолучения = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, Неопределено);
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки", РезультатПолучения.Сервер.Отпечатки);
	
	Возврат ИтоговыйЗапрос.Выполнить();
	
КонецФункции

// Проверяет выполнение необходимых условий для работы регламентных заданий
// по отправке и получению электронных документов.
// 
// Параметры:
// 	ИнициировалПользователь - Булево
// 	Операция - Строка
// Возвращаемое значение:
// 	Структура:
// * ИнициировалПользователь - Булево
// * Операция - Строка
// * РежимРаботы - Число
// * ЕстьКриптоПровайдер - Число
// * ЕстьСертификаты - Число
// * ПаролиСохранены - Число
// * ПроверкаПодписи - Число
// * СозданиеПодписи - Число
// * Успех - Булево
Функция ПроверитьНастройкиРегламентныхЗаданийЭДО() Экспорт
	
	// Коды состояний.
	// 0 - Блокирующая ошибка.
	// 1 - Неблокирующая ошибка.
	// 2 - Ошибок нет.
	
	РежимРаботы         = 0; // режим работы только "клиент - сервер"
	ЕстьКриптоПровайдер = 0; // криптопровайдер установлен на сервере
	ЕстьСертификаты     = 0; // есть сертификаты на сервере и они подвязаны к профилям
	ПаролиСохранены     = 0; // по каждому профилю есть хотя бы один сертификат с сохраненным для всех паролем
	ПроверкаПодписи     = 0; // подписи проверяются на сервере
	СозданиеПодписи     = 0; // подписи создаются на сервере
	
	// 1) Режим работы только клиент-сервер
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РежимРаботы = 2;
	КонецЕсли;
	
	Если РежимРаботы Тогда // остальные проверки актуальны только для клиент-серверной базы
		
		// 2) Криптопровайдер установлен на сервере.
		
		Если КриптографияБЭД.МенеджерКриптографии(Ложь) <> Неопределено Тогда
			ЕстьКриптоПровайдер = 2;
		КонецЕсли;
		
		// Совмещаем проверки.
		// 3) Есть сертификаты на сервере для всех профилей.
		// 4) Пароли сертификатов сохранены.
		
		ВсеСертификатыНаСервере = Истина;
		ВсеПаролиСохранены      = Истина;
		
		ХотяБыОдинСертификатНаСервере = Ложь;
		ХотяБыОдинПарольСохранен      = Ложь;
		
		РезультатЗапроса = РезультатЗапросаСертификатов();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ВсеСертификатыНаСервере = Ложь;
			ВсеПаролиСохранены      = Ложь;
			
		Иначе
			
			ВыборкаУчетныхЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
				
				// Определяем в разрезе профиля.
				ЕстьСертификатНаСервере = Ложь;
				ЕстьСохраненныйПароль   = Ложь;
				
				ВыборкаСертификат = ВыборкаУчетныхЗаписей.Выбрать();
				Пока ВыборкаСертификат.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаСертификат.Сертификат) Тогда
						ЕстьСертификатНаСервере = Истина;
						Если КриптографияБЭД.ПарольСертификатаСохраненДляВсех(ВыборкаСертификат.Сертификат) Тогда
							ЕстьСохраненныйПароль = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьСертификатНаСервере Тогда
					
					ХотяБыОдинСертификатНаСервере = Истина;
					
					Если ЕстьСохраненныйПароль Тогда
						ХотяБыОдинПарольСохранен = Истина;
					Иначе
						ВсеПаролиСохранены = Ложь;
					КонецЕсли;
					
				Иначе
					ВсеСертификатыНаСервере = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ХотяБыОдинПарольСохранен Тогда
				ВсеПаролиСохранены = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Есть сертификаты на сервере для всех профилей.
		Если ВсеСертификатыНаСервере Тогда
			ЕстьСертификаты = 2;
		ИначеЕсли ХотяБыОдинСертификатНаСервере Тогда
			ЕстьСертификаты = 1;
		КонецЕсли;
		
		// Пароли сертификатов сохранены.
		Если ВсеПаролиСохранены Тогда
			ПаролиСохранены = 2;
		ИначеЕсли ХотяБыОдинПарольСохранен Тогда
			ПаролиСохранены = 1;
		КонецЕсли;
		
		// 5) Проверка подписей и сертификатов происходит на сервере.
		Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
			ПроверкаПодписи = 2;
		КонецЕсли;
		
		// 6) Подпись и шифрование происходит на сервере.
		Если ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
			СозданиеПодписи = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	// Итог проверки.
	Успех = РежимРаботы
		И ЕстьКриптоПровайдер
		И ЕстьСертификаты
		И ПаролиСохранены
		И ПроверкаПодписи
		И СозданиеПодписи;
	
	Результат = Новый Структура;
	Результат.Вставить("РежимРаботы",             РежимРаботы);
	Результат.Вставить("ЕстьКриптоПровайдер",     ЕстьКриптоПровайдер);
	Результат.Вставить("ЕстьСертификаты",         ЕстьСертификаты);
	Результат.Вставить("ПаролиСохранены",         ПаролиСохранены);
	Результат.Вставить("ПроверкаПодписи",         ПроверкаПодписи);
	Результат.Вставить("СозданиеПодписи",         СозданиеПодписи);
	Результат.Вставить("Успех",                   Успех);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли