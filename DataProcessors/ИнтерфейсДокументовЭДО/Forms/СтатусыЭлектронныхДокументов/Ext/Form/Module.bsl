
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	АдресДанных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресДанных", "");
	
	ЗаполнитьСтатусыЭлектронныхДокументов(АдресДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		Или ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО() Тогда
		
		ОбновитьСтатусыДокументов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатусыДокументов

&НаКлиенте
Процедура СтатусыДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа
		И Элемент = Элементы.СтатусыДокументовОжидаемоеДействие Тогда
		Для каждого ПодчиненныйЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ОткрытьЭлектронныйДокументОбъектаУчета(ПодчиненныйЭлемент);
		КонецЦикла;
	Иначе
		ОткрытьЭлектронныйДокументОбъектаУчета(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОбновитьСтатусыДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОформлениеСтрокиСтатусыДокументов();
	
	ОформлениеПоляОжидаемоеДействие();
	
	ОформлениеПоляПредставлениеСостояния();
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеСтрокиСтатусыДокументов()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтатусыДокументов");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусыДокументов.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеПоляОжидаемоеДействие()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусыДокументовОжидаемоеДействие.Имя);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусыДокументов.ОжидаемоеДействие");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеПоляПредставлениеСостояния()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусыДокументовПредставлениеСостояния.Имя);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусыДокументов.ОжидаемоеДействие");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСтатусыЭлектронныхДокументов(АдресДанных = "")
	
	СтатусыДокументов.ПолучитьЭлементы().Очистить();
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		ТаблицаДокументов = ПолучитьИзВременногоХранилища(АдресДанных);
		УдалитьИзВременногоХранилища(АдресДанных);
	Иначе
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
		ТаблицаДокументов = ИнтерфейсДокументовЭДО.СтатусыЭлектронныхДокументовОбъектаУчета(ОписаниеОбъектаУчета, Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("ОжидаемоеДействие Убыв, ПредставлениеДокумента Возр");
	
	ОбъектУчета = ТаблицаДокументов[0].ОбъектУчета;
	
	КоллекцииГрупп = Новый Соответствие;
	ОтображатьКонтрагента = Ложь;
	ОтображатьДоговорКонтрагента = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		ДобавитьЭлементДереваСтатусовДокументов(КоллекцииГрупп, СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			ОтображатьКонтрагента = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ОтображатьДоговорКонтрагента = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СтатусыДокументовКонтрагент.Видимость = ОтображатьКонтрагента;
	Элементы.СтатусыДокументовДоговорКонтрагента.Видимость = ОтображатьДоговорКонтрагента;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементДереваСтатусовДокументов(КоллекцииГрупп, СтрокаТаблицы)
	
	ГруппаДействий = ГруппаСтатусовДокументов(КоллекцииГрупп, СтрокаТаблицы.ОжидаемоеДействие, СтрокаТаблицы.НетНастройки);
	Элемент = ГруппаДействий.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(Элемент, СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Функция ГруппаСтатусовДокументов(КоллекцииГрупп, ОжидаемоеДействие, НетНастройки)
	
	Если НетНастройки Тогда
		КлючГруппы = "НетНастроек";
	Иначе
		КлючГруппы = ОжидаемоеДействие;
	КонецЕсли;
	
	ГруппаДействий = КоллекцииГрупп[КлючГруппы];
	Если ГруппаДействий <> Неопределено Тогда
		Возврат ГруппаДействий;
	КонецЕсли;
	
	Если НетНастройки Тогда
		ПредставлениеГруппы = НСтр("ru = 'Требуется настройка'");
	ИначеЕсли Не ЗначениеЗаполнено(ОжидаемоеДействие) Тогда
		ПредставлениеГруппы = НСтр("ru = 'Действий не требуется'");
	ИначеЕсли ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Сформировать Тогда
		ПредставлениеГруппы = НСтр("ru = 'Отправить на подпись'");
	ИначеЕсли ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Подписать Тогда
		ПредставлениеГруппы = НСтр("ru = 'Требуется подписание'");
	Иначе
		ПредставлениеГруппы = Строка(ОжидаемоеДействие);
	КонецЕсли;
	
	ГруппаДействий = СтатусыДокументов.ПолучитьЭлементы().Добавить();
	ГруппаДействий.ПредставлениеДокумента = ПредставлениеГруппы;
	ГруппаДействий.ЭтоГруппа = Истина;
	
	КоллекцииГрупп.Вставить(КлючГруппы, ГруппаДействий);
	
	Возврат ГруппаДействий;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыДокументов()
	
	ТекущиеДанные = Элементы.СтатусыДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		КлючТекущегоЭлемента = Неопределено;
	Иначе
		КлючТекущегоЭлемента = Новый Структура("ЭтоГруппа, ОжидаемоеДействие, ВидДокумента, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(КлючТекущегоЭлемента, ТекущиеДанные);
	КонецЕсли;
	
	Результат = ОбновитьСтатусыВнутреннихДокументовНаСервере(КлючТекущегоЭлемента);
	
	Для Каждого ИдентификаторГруппы Из Результат.ДобавленныеГруппы Цикл
		Элементы.СтатусыДокументов.Развернуть(ИдентификаторГруппы);
	КонецЦикла;
	
	Элементы.СтатусыДокументов.ТекущаяСтрока = Результат.ИдентификаторСтроки;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусыВнутреннихДокументовНаСервере(Знач КлючТекущегоЭлемента)
	
	Результат = Новый Структура;
	Результат.Вставить("ДобавленныеГруппы", Новый Массив);
	Результат.Вставить("ИдентификаторСтроки", 0);
	
	ЗаполнитьСтатусыЭлектронныхДокументов();
	
	Для Каждого Элемент Из СтатусыДокументов.ПолучитьЭлементы() Цикл
		Результат.ДобавленныеГруппы.Добавить(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КлючТекущегоЭлемента) Тогда
		Результат.ИдентификаторСтроки = ИдентификаторТекущейСтроки(СтатусыДокументов, КлючТекущегоЭлемента);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ИдентификаторТекущейСтроки(КоллекцияЭлементов, КлючТекущегоЭлемента)
	
	Для Каждого Элемент Из КоллекцияЭлементов.ПолучитьЭлементы() Цикл
		
		Если ЭтоТекущийЭлемент(Элемент, КлючТекущегоЭлемента) Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элемент.ЭтоГруппа Тогда
			
			Результат = ИдентификаторТекущейСтроки(Элемент, КлючТекущегоЭлемента);
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЭтоТекущийЭлемент(Элемент, КлючТекущегоЭлемента)
	Для Каждого КлючЗначение Из КлючТекущегоЭлемента Цикл
		Если Элемент[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументОбъектаУчета(ТекущиеДанные)
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ЭлектронныйДокумент) Тогда 
		ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ТекущиеДанные.ЭлектронныйДокумент);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("ОбъектУчета", ТекущиеДанные.ОбъектУчета);
	ПараметрыОписания.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);
	ПараметрыОписания.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыОписания.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	ПараметрыОписания.Вставить("Договор", ТекущиеДанные.ДоговорКонтрагента);
	
	ОписаниеЭлектронногоДокументаОбъектаУчета = ОписаниеЭлектронногоДокументаОбъектаУчета(ПараметрыОписания);
	ОписаниеЭлектронногоДокументаОбъектаУчета.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеЭлектронногоДокументаОбъектаУчета(ПараметрыОписания)
	
	Возврат ИнтеграцияЭДО.ОписаниеОбъектаУчетаПоОтбору(ПараметрыОписания.ОбъектУчета, ПараметрыОписания);
	
КонецФункции

#КонецОбласти