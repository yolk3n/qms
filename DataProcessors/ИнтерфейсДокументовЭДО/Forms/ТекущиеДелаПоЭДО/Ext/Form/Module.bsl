////////////////////////////////////////////////////////////////////////////////
// Модуль формы Обработка.ОбменСКонтрагентами.ТекущиеДелаПоЭДО.

// Параметры формы:
//  * РежимОтображения - Строка - режим просмотра, устанавливаемый при открытии.
//                                Доступные значения: "ВсеДокументы", "МоиДокументы", "КИсполнению".
//  * Раздел - Строка - раздел, устанавливаемый при открытии. Доступные разделы: см. ИнициализироватьРазделы.
//  * ОтборУчетныхДокументов - Массив Из Структура - отборы, которые нужно установить на прикладной документ в разделе "Создать": 
//   ** Поле - Строка - путь к данным, на которые устанавливается отбор. Должно начинаться с "Документ".
//		Примеры: "Документ", "Документ.Организация".
//   ** ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения отбора.
//   ** Значение - Произвольный - значение отбора.
//  * ОтборВходящихДокументов - Массив Из Структура - отборы, которые нужно установить на входящие электронные документы:
//   ** Поле - Строка - путь к данным, на которые устанавливается отбор. Должно начинаться с "ЭлектронныйДокумент".
//		Примеры: "ЭлектронныйДокумент", "ЭлектронныйДокумент.СодержитДанныеОМаркируемыхТоварах"
//   ** ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения отбора.
//   ** Значение - Произвольный - значение отбора.
//  * ОтборИсходящихДокументов - Массив Из Структура - отборы, которые нужно установить на исходящие электронные документы:
//   ** Поле - Строка - путь к данным, на которые устанавливается отбор. Должно начинаться с "ЭлектронныйДокумент".
//		Примеры: "ЭлектронныйДокумент", "ЭлектронныйДокумент.СодержитДанныеОМаркируемыхТоварах"
//   ** ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения отбора.
//   ** Значение - Произвольный - значение отбора.
//   
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СписокВидовДокументов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам", ЭтотОбъект);
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами", ЭтотОбъект);
	
	Если ТолькоПросмотр Тогда
		Для каждого Команда Из Команды Цикл
			Команда.ИзменяетСохраняемыеДанные = Истина;
		КонецЦикла;
	КонецЕсли; 
	
	УстановитьУсловноеОформление();

	РежимОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "РежимОтображения", "ВсеДокументы");
	ПакетноеОтображение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "ПакетноеОтображение", Истина);
	
	ПоказыватьОбластьПросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, 
		"ПоказыватьОбластьПросмотра", Ложь);  
	ПоказыватьОбластьЛегенды = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, 
		"ПоказыватьОбластьЛегенды", Истина);
	
	ОбновитьЗаголовокФормы();
	ОбновитьЗаголовкиЭлементов();
	ИспользоватьЭП = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	ОтправлятьВходящиеДокументыНаУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	
	Если Не ОтправлятьВходящиеДокументыНаУтверждение Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;

	ИнициализироватьДерево();

	ИнтерфейсДокументовЭДО.ИнициализироватьРазделыТекущихДел(ОписаниеРазделов);
	Элементы.ПанельСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	АдресКэшаРасчетов = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);

	Если ЗначениеЗаполнено(Параметры.РежимОтображения) Тогда
		УстановитьРежимОтображения(Параметры.РежимОтображения);
	КонецЕсли;

	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);

	Если НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов() Тогда

		Элементы.КомандаПодписать.Заголовок = НСтр("ru = 'Подписать'");
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать, подписать и подготовить к отправке
			|выделенные электронные документы'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и подготовить к отправке
				|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и отправить
			|выделенные электронные документы'");
	КонецЕсли;

	СформироватьТаблицуБыстрогоОтбора();
	ЗагрузитьОтборы();

	НедоступныеКоманды = Новый СписокЗначений;

	Если НЕ ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда

		НедоступныеКоманды.Добавить("ЗакрытьПринудительно");
		НедоступныеКоманды.Добавить("Перенаправить");
		НедоступныеКоманды.Добавить("УтвердитьЭД");
		НедоступныеКоманды.Добавить("ВернутьНаПодготовкуКОтправке");
		НедоступныеКоманды.Добавить("ПодписатьВх");
		НедоступныеКоманды.Добавить("ПодписатьИсх");
		НедоступныеКоманды.Добавить("ОтправитьЭД");
		НедоступныеКоманды.Добавить("ОтклонитьПодписаниеИсх");
		НедоступныеКоманды.Добавить("Аннулировать");
		НедоступныеКоманды.Добавить("ОтклонитьДокумент");		
		НедоступныеКоманды.Добавить("ОтклонитьАннулирование");
		НедоступныеКоманды.Добавить("ИзменитьДокумент");
		НедоступныеКоманды.Добавить("СформироватьЭД");
		НедоступныеКоманды.Добавить("ОтменитьКонтейнеры");
		НедоступныеКоманды.Добавить("РаспаковатьКонтейнеры");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьВх");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьИсх");
		НедоступныеКоманды.Добавить("СформироватьПодписатьИОтправить");
		НедоступныеКоманды.Добавить("ОтправитьВАрхив");

	КонецЕсли;

	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда

		НедоступныеКоманды.Добавить("ВАрхивПриглашенияОтправить");
		НедоступныеКоманды.Добавить("ПринятьПриглашения");
		НедоступныеКоманды.Добавить("ОтправитьПриглашения");
		НедоступныеКоманды.Добавить("ОтклонитьПриглашения");
		НедоступныеКоманды.Добавить("ОтозватьПриглашение");

	КонецЕсли;

	Элементы.ПроверитьПодписи.Видимость = ОбщегоНазначенияБЭД.ЕстьПравоАдминистрирования();
	Элементы.ОтправитьИПолучитьЭД.Видимость = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();

	Если Не ИнтеграцияЭДО.ИспользуютсяДоговорыКонтрагентов() Тогда
		Элементы.ВходящиеЭДДоговорКонтрагента.Видимость = Ложь;
		Элементы.ИсходящиеЭДДоговорКонтрагента.Видимость = Ложь;
	КонецЕсли;

	УстановитьОтборУчетныхДокументов(Параметры.ОтборУчетныхДокументов);
	УстановитьОтборВходящихДокументов(Параметры.ОтборВходящихДокументов);
	УстановитьОтборИсходящихДокументов(Параметры.ОтборИсходящихДокументов);

	НастроитьСпискиРазделов();
	Если ЗначениеЗаполнено(Параметры.Раздел) Тогда
		ПоказатьРазделСПроверкой(Параметры.Раздел);
	Иначе
		ПоказатьРаздел("Входящие");
	КонецЕсли;

	ОбновитьНавигациюПоРазделамНаСервере(Истина, Ложь);

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Сформировать.Дата", "СформироватьЭДДата");

	СохраняемыеВНастройкахДанныеМодифицированы = Истина;

	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;

	УстановитьСвойстваПереопределяемыхЭлементовФормы();
	
	ПустойКонтрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение();
	
	ПриглашенияЭД.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", ПустойКонтрагент);

	ПриглашенияЭД.Параметры.УстановитьЗначениеПараметра("ИНН", НСтр("ru = 'ИНН'"));
	Сформировать.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", ПустойКонтрагент);
	РежимОтображенияПриИзмененииНаСервере();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОформитьИнтерфейсДляМобильногоКлиентаНаСервере();
	КонецЕсли;
	
	ВывестиВерсиюБЭД();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений"
		Или ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО()Тогда

		ОбновитьНавигациюПоРазделам();
		ОбновитьОтображениеДанных();
		РазблокироватьЗаблокированныеЭлементыФормы();

	ИначеЕсли ИмяСобытия = "ВыполнитьСинхронизацию" Тогда
		ЭтотОбъект.Активизировать();
		ОтправитьИПолучитьЭД(Неопределено);

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
		И (Источник = "ОтправлятьВходящиеДокументыНаУтверждение"
			Или Источник = "ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов") Тогда

		Если Источник = "ОтправлятьВходящиеДокументыНаУтверждение" Тогда
			ПриИзмененииУтвержденияВходящихДокументов();
		КонецЕсли;
		ОбновитьОтображениеДанных();
		ОбновитьЗаголовкиЭлементов();
		РазблокироватьЗаблокированныеЭлементыФормы();
		ПодключитьОбработчикОжидания("РазвернутьУзлыДереваОтложенно", 0.1, Истина);

	ИначеЕсли ИмяСобытия = "ПрочтениеОбновитьСписок" Тогда
		
		ОбновитьДинамическиеСписки();
	
	КонецЕсли;
	
	ОчиститьОбластьПросмотраЕслиСписокПуст();

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьСкрытьБыстрыйПоиск();
	ОбработкаНеисправностейБЭДКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	Элементы.Техподдержка.Заголовок = ОбработкаНеисправностейБЭДКлиент.СформироватьГиперссылкуДляОбращенияВСлужбуПоддержки();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "РежимОтображения", РежимОтображения);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ОбновитьНавигациюПоРазделамНаСервере(Ложь, Истина);
	
	ПоказыватьОбластьПросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, 
		"ПоказыватьОбластьПросмотра", Ложь);  
	ПоказыватьОбластьЛегенды = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, 
		"ПоказыватьОбластьЛегенды", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСсылкаИдеяНажатие(Элемент)

	ИнтерфейсДокументовЭДОКлиент.ОткрытьСтраницуОпроса();

КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)

	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();

КонецПроцедуры

#Область ОбработчикиСобытийОбластьПросмотра

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийДокументУчетаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ТекущийДокументУчета) Тогда
		ПоказатьЗначение( , ТекущийДокументУчета);
	Иначе

		ПараметрыФормы = ПараметрыФормыПодбораОбъектовУчета();
		ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийФайлПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДляРедактирования = Ложь;
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФайл(ТекущийФайл, УникальныйИдентификатор, ДляРедактирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатураКонтрагентов

&НаКлиенте
Процедура НоменклатураКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле,	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПоказатьСопоставлениеНоменклатуры();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если СтрНайти(Поле.Имя, "Кнопка") <> 0 Тогда

		ИмяСписка = СписокРаздела(ТекущийРаздел);
		Список = ЭтотОбъект[ИмяСписка];

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Раздел", ТекущийРаздел);

		Оповещение = Новый ОписаниеОповещения("ПриОкончанииНастройкиСписка", ЭтотОбъект, ДопПараметры);

		ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтборовСписка(Оповещение, ЭтотОбъект, Список.КомпоновщикНастроек)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаВОтбореВПапке <> Элементы.БыстрыеОтборы.ТекущаяСтрока Тогда	
		НеобходимВыпадающийСписок = Не (Элементы.БыстрыеОтборы.ТекущиеДанные.Тип = "Дата" 
			Или Элементы.БыстрыеОтборы.ТекущиеДанные.Тип = "Число");
		Элементы.БыстрыеОтборыЗначение.КнопкаВыпадающегоСписка = НеобходимВыпадающийСписок;
		ТекущаяСтрокаВОтбореВПапке = Элементы.БыстрыеОтборы.ТекущаяСтрока;
		ОбновитьСписокВыбораУТекущегоПоляОтбора();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)

	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;

	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока,
		Копирование)

	Если Элемент.ТекущиеДанные.Значение = Неопределено И Не Элемент.ТекущиеДанные.Тип = "Булево" Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока,	ОтменаРедактирования)

	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;

	ВведеноЧисло = Ложь;

	СохраняемыеВНастройкахДанныеМодифицированы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидДокумента" Тогда
		Если СписокВидовДокументов = Неопределено Тогда
			СписокВидовДокументов = СписокВидовДокументовДляОтбора();
		КонецЕсли;
		ДанныеВыбора = СписокВидовДокументов;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораУТекущегоПоляОтбора()
	
	Элементы.БыстрыеОтборыЗначение.СписокВыбора.Очистить();
	
	ТекущаяСтрокаВОтборе = БыстрыеОтборы.НайтиПоИдентификатору(ТекущаяСтрокаВОтбореВПапке);
	
	Если ТекущаяСтрокаВОтборе <> Неопределено
		И ТекущаяСтрокаВОтборе.Значение = Неопределено
		И ТекущаяСтрокаВОтборе.Тип = "Булево" Тогда
		
		Элементы.БыстрыеОтборыЗначение.СписокВыбора.Добавить(Истина);
		Элементы.БыстрыеОтборыЗначение.СписокВыбора.Добавить(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)

	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ТипыДокументовЭДО" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."
			+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."
			+ НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."
			+ НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."
			+ НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭДО" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);

	ПриИзмененииОтбора();
	ОбновитьСписокВыбораУТекущегоПоляОтбора();

КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.БыстрыеОтборы.ТекущиеДанные.Значение = ВыбранноеЗначение;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НовыйРаздел = Элемент.ТекущиеДанные.Значение;
	Если НовыйРаздел <> ТекущийРаздел Тогда
		ПриИзмененииРаздела(НовыйРаздел);
		УстановитьУсловноеОформление();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеЭД

&НаКлиенте
Процедура ВходящиеЭДПриИзменении(Элемент)
		
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());

КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);

	ЭтоКаталогТоваров = (ДанныеСтроки.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.КаталогТоваров"));

	Если Поле.Имя = "ВходящиеЭДОтражениеВУчете" И Не ЭтоКаталогТоваров Тогда
		СтандартнаяОбработка = Ложь;

		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда

			ПоказатьСопоставлениеНоменклатуры();

		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда

			ПоказатьРасширенныйПодборДокументовУчета();

		Иначе

			ПоказатьУчетныйДокумент();

		КонецЕсли;

	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВходящиеЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки,
		Строки)

	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;

	ЭлектронныеДокументы = Новый Массив;

	Для каждого ТекущаяСтрока Из Строки Цикл

		Данные = ТекущаяСтрока.Значение.Данные;
		ЭлектронныеДокументы.Добавить(Данные.ЭлектронныйДокумент);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныеДокументы);

	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Для каждого ТекущаяСтрока Из Строки Цикл

		Данные = ТекущаяСтрока.Значение.Данные;

		ОтборЭД = Новый Структура("ЭлектронныйДокумент", Данные.ЭлектронныйДокумент);
		ОснованияЭД = Основания.НайтиСтроки(ОтборЭД);

		Если ЗначениеЗаполнено(ОснованияЭД) Тогда

			Представление = "";
			КоличествоОснований = ОснованияЭД.Количество();
			Если КоличествоОснований = 1 Тогда
				Представление = Строка(ОснованияЭД[0].ОбъектУчета);
			Иначе
				ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
				Представление = СтрокаСЧислом(ШаблонСтроки, КоличествоОснований, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			Данные.ОтражениеВУчете = Представление;

		ИначеЕсли Данные.КонтрольОтраженияВУчете = 0 Тогда
			Данные.ОтражениеВУчете = НСтр("ru = 'Сопоставить номенклатуру'");
		ИначеЕсли Данные.КонтрольОтраженияВУчете = 1 Тогда
			Если Данные.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
				Данные.ОтражениеВУчете = НСтр("ru = 'Создать контракт'");
			Иначе
				Данные.ОтражениеВУчете = НСтр("ru = 'Создать документы'");
			КонецЕсли;
		ИначеЕсли Данные.КонтрольОтраженияВУчете = 2 Тогда
			Данные.ОтражениеВУчете = НСтр("ru = 'Провести документы'");
		Иначе
			Данные.ОтражениеВУчете = НСтр("ru = '<Не требуется>'");
		КонецЕсли;

	КонецЦикла;
	
	РассчитатьДополнительныеПоляПакетов(Строки);

КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭДОбработкаЗапросаОбновления()

	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеЭД

&НаКлиенте
Процедура ИсходящиеЭДПриИзменении(Элемент)
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторПакета = ТекущиеДанные.КлючСортировкиПакета;
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийИдентификаторПакета = "";
		ТекущийЭлектронныйДокумент = Неопределено;
	КонецЕсли;
	
	Если ПакетноеОтображение Тогда
		ЗаполнитьВыбранныеДанные();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле,
		СтандартнаяОбработка)

	Если Поле.Имя = "ИсходящиеЭДОтражениеВУчете" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьУчетныйДокумент("ИсходящиеЭД");
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсходящиеЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки,
		Строки)
	
	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = Новый Массив;

	Для каждого ТекущаяСтрока Из Строки Цикл

		Данные = ТекущаяСтрока.Значение.Данные;
		ЭлектронныеДокументы.Добавить(Данные.ЭлектронныйДокумент);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныеДокументы);

	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Для каждого ТекущаяСтрока Из Строки Цикл

		Данные = ТекущаяСтрока.Значение.Данные;

		ОтборЭД = Новый Структура("ЭлектронныйДокумент", Данные.ЭлектронныйДокумент);
		ОснованияЭД = Основания.НайтиСтроки(ОтборЭД);

		Если ЗначениеЗаполнено(ОснованияЭД) Тогда

			Представление = "";
			КоличествоОснований = ОснованияЭД.Количество();
			Если КоличествоОснований = 1 Тогда
				Представление = Строка(ОснованияЭД[0].ОбъектУчета);
			Иначе
				ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
				Представление = СтрокаСЧислом(ШаблонСтроки, КоличествоОснований, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			Данные.ОтражениеВУчете = Представление;

		КонецЕсли;
	
	КонецЦикла;
	
	РассчитатьДополнительныеПоляПакетов(Строки);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОшибкиЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	РассчитатьДополнительныеПоляПакетов(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	РассчитатьДополнительныеПоляПакетов(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОзнакомитьсяЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	РассчитатьДополнительныеПоляПакетов(Строки);
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭДОбработкаЗапросаОбновления()

	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформироватьЭД

&НаКлиенте
Процедура СформироватьЭДВыбор(Элемент, ВыбраннаяСтрока, Поле,
		СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭДПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОзнакомитьсяЭД

&НаКлиенте
Процедура ОзнакомитьсяЭДВыбор(Элемент, ВыбраннаяСтрока, Поле,
		СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);

	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьсяЭДОбработкаЗапросаОбновления()

	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтправитьЭД

&НаКлиенте
Процедура ОтправитьЭДВыбор(Элемент, ВыбраннаяСтрока, Поле,
		СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);

	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиЭД

&НаКлиенте
Процедура ОшибкиЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);

	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	Если Элементы.ПанельСписков.ТекущаяСтраница = Элементы.СтраницаОтправитьЭД Тогда
	
		ТекущиеДанные = Элементы.ОтправитьЭД.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
		ПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
		
		ДополнительныеПараметры = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПометкуУдаленияВопрос", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбщегоНазначенияБЭДКлиент.ЗадатьВопросНаУстановкуПометкиУдаления(ПометкаУдаления, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПомеченныеНаУдаление(Команда)
	
	ОбновитьПросмотрПомеченныхНаУдаление();

КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияОтправитьВАрхив(Команда)

	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтправитьПриглашенияВАрхив.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтправитьПриглашенияВАрхив");
		ПодключитьОбработчикОжидания("ВыполнитьОтправкуПриглашенийВАрхив", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПросмотра(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРежимПросмотраОкончание", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.ВыборРежимаПросмотраТекущихДел(ОписаниеОповещения, ЭтотОбъект, РежимОтображения,
		ПакетноеОтображение, ПоказыватьОбластьЛегенды, ПоказыватьОбластьПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	ОбновитьНавигациюПоРазделам();
	РазблокироватьЗаблокированныеЭлементыФормы(); 

КонецПроцедуры  

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)

	Если Не ИспользоватьЭП Тогда
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("ОтправкаИПолучениеЭД");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли; 

	Элементы.ОтправитьИПолучитьЭД.Доступность = Ложь;
	
	#Если МобильныйКлиент Тогда
		Элементы.ОтправитьИПолучитьЭД.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	#КонецЕсли

	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.НачатьОтправкуПолучениеДокументов(ЭтотОбъект, Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)

	Если Элементы.СформироватьЭД.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.СформироватьЭД.ТекущиеДанные.Документ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененКонтейнера(Команда)

	УстановитьСтатусОтменен(Элементы.КонтейнерыЭД.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)

	СинхронизацияЭДОКлиент.РаспаковатьТранспортныеКонтейнеры(Элементы.КонтейнерыЭД.ВыделенныеСтроки); 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	Если Элементы.СформироватьЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаСформироватьПодписатьИОтправить.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаСформироватьПодписатьИОтправить");
		ПодключитьОбработчикОжидания("ВыполнитьСформироватьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	Если Элементы.СформироватьЭД.ТекущиеДанные <> Неопределено Тогда
		ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчета(Элементы.СформироватьЭД.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТекущийРаздел = "Сформировать" Тогда
		Обработчик = Новый ОписаниеОповещения("ВыполнитьОтменуФормированияДокументовПослеВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
		ОбъектыУчета = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Документ");
		ДополнительныеПараметры.Вставить("ОбъектыУчета", ОбъектыУчета);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект));
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
					
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину закрытия документооборота'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть электронный документ'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаПодготовкуКОтправке(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтменитьОтправку"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)

	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПодписать.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписать");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьИсх(Команда)

	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПодписатьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписатьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	Элементы.КомандаОтправить.Доступность = Ложь;
	Элементы.КомандаВернутьНаПодготовкуКОтправке.Доступность = Ложь;
	ЗаблокированныеЭлементыФормы.Добавить("КомандаОтправить");
	ЗаблокированныеЭлементыФормы.Добавить("КомандаВернутьНаПодготовкуКОтправке");
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ОтложеннаяОтправкаЭлектронныхДокументов() Тогда
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандаПодписать()	
		
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформироватьПодписатьИОтправить()
	
	ВыделенныеСтроки = Элементы.СформироватьЭД.ВыделенныеСтроки;
	НаборОбъектовУчета = Новый Массив(ВыделенныеСтроки.Количество());
	Для Индекс = 0 По НаборОбъектовУчета.ВГраница() Цикл
		НаборОбъектовУчета[Индекс] = Элементы.СформироватьЭД.ДанныеСтроки(ВыделенныеСтроки[Индекс]).Документ;
	КонецЦикла;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбъектыУчета", НаборОбъектовУчета);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД(НаборОбъектовУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеИсх(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект));
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьПодписание"));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьПодписание"));
			
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
				
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания по выбранным ЭД необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)

	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправить");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправитьИсх(Команда)

	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправитьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправитьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)

	СброситьОтборНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)

	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "КлючПриглашения, ИдентификаторОрганизации, ИдентификаторКонтрагента, Контрагент, Организация");

	ИсходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл	
		ИсходящееПриглашение = СинхронизацияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
		ЗаполнитьЗначенияСвойств(ИсходящееПриглашение, ДанныеПриглашения);	
		ИсходящиеПриглашения.Добавить(ИсходящееПриглашение);
	КонецЦикла;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправкаПриглашенийОповещениеОЗавершении", ЭтотОбъект);
		
	СинхронизацияЭДОКлиент.ОтправитьПриглашения(ИсходящиеПриглашения, ЭтотОбъект, ОбработчикОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)

	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПринятьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПринятьПриглашения");
		ПодключитьОбработчикОжидания("НачатьПринятиеПриглашений", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	ТекущийСписок = ПолучитьТекущийСписок();
	Если ТекущийСписок <> Неопределено Тогда
		ИнтерфейсДокументовЭДОКлиент.ПометитьКакПрочтенные(ТекущийСписок);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)

	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтклонитьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтклонитьПриглашения");
		ПодключитьОбработчикОжидания("НачатьОтклонениеПриглашений", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПриглашение(Команда)

	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтозватьПриглашение.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтозватьПриглашение");
		ПодключитьОбработчикОжидания("НачатьОтзывПриглашений", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)

	НастройкиЭДОКлиент.ОткрытьФормуНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМашиночитаемыеДоверенности(Команда)

	МашиночитаемыеДоверенностиКлиент.ОткрытьОбщуюФормуСписковМЧД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	ИнтерфейсДокументовЭДОКлиент.ОткрытьАрхивЭДО();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыйИнтерфейсЭДО(Команда)
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.НовыйИнтерфейсЭДО");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
			
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект));
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
					
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)

	ИмяТаблицы = ТаблицаРаздела(ТекущийРаздел);

	ТекущаяТаблица = Элементы[ИмяТаблицы];
	Если ТипЗнч(ТекущаяТаблица) = Тип("ТаблицаФормы")
			И ТекущаяТаблица.ВыделенныеСтроки.Количество() > 0 Тогда

		Если ТекущаяТаблица = Элементы.ОзнакомитьсяЭД Тогда

			Строки = ТекущаяТаблица.ВыделенныеСтроки;
			ЭлектронныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);

		ИначеЕсли ТекущаяТаблица = Элементы.ВходящиеЭД
				ИЛИ ТекущаяТаблица = Элементы.ИсходящиеЭД Тогда

			ЭлектронныеДокументы = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент");

		Иначе
			ЭлектронныеДокументы = ТекущаяТаблица.ВыделенныеСтроки;
		КонецЕсли;

		ДополнитьДокументамиПакетов(ЭлектронныеДокументы);

		ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещение", ЭтотОбъект);	
		ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы, ОбработкаОповещения);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДокументамиПакетов(ЭлектронныеДокументы)
	
	ПакетыДокументовЭДО.ДополнитьДокументамиПакетов(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбработкаНеисправностейБЭДКлиент.ОткрытьСтраницуСервиса1СКоннект();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)

	Строки = Элементы.ОзнакомитьсяЭД.ВыделенныеСтроки;

	ЭлектронныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьВАрхив"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ЭлектронныеДокументы;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

	ОбновитьНавигациюПоРазделам();

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(Команда)	
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	ИнтерфейсДокументовЭДОКлиент.ОтклонитьОбъекты(ОбъектыДействий,
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект));
	
КонецПроцедуры


&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)

	ПоказатьСопоставлениеНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ПровестиУчетныеДокументы(Команда)

	ЭлектронныеДокументы = Новый Массив;

	Для Каждого СтрокаСписка Из Элементы.ВходящиеЭД.ВыделенныеСтроки Цикл

		Данные = Элементы.ВходящиеЭД.ДанныеСтроки(СтрокаСписка);
		ЭлектронныеДокументы.Добавить(Данные.ЭлектронныйДокумент);

	КонецЦикла;

	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для проведения необходимо выбрать электронный документ.'"));
		Возврат;
	КонецЕсли;

	НаборУчетныхДокументов = УчетныеДокументыНаКонтролеПроведенияЭД(ЭлектронныеДокументы);

	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбранных электронных документов проведение не требуется.'"));
		Возврат;
	КонецЕсли;

	ПоказатьВопросОПроведенииУчетныхДокументов(НаборУчетныхДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуруКонтрагентов(Команда)

	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСписокНоменклатурыКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)

	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействиеМК(Команда)

	ДеревоЗначенийСсылка = ДанныеДереваДействий();
	ПараметрыФормы = Новый Структура("ДеревоДействий", ДеревоЗначенийСсылка);
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеВыбораРазделаМК", ЭтотОбъект);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыборРазделаМК", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДиагностикуЭДО(Команда)
	ДиагностикаЭДОКлиент.ВыполнитьДиагностику();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронныйДокумент(Команда)
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД(
		"Обработка.ИнтерфейсДокументовЭДО.Форма.ПроверкаПодписей");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСРазделами

///////////////////////////////////////////////////////////////////////////////////////////////////
// Описание, реквизиты, команды и элементы разделов.

&НаКлиенте
Процедура ИзменитьПометкуУдаленияВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуУдаления(ДополнительныеПараметры.ЭлектронныйДокумент);
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаления(ЭлектронныйДокумент)
	
	ОбъектСсылка = ЭлектронныйДокумент.ПолучитьОбъект();
	ОбъектСсылка.УстановитьПометкуУдаления(Не ОбъектСсылка.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокРаздела(Знач Раздел)

	СпискиРазделов = Новый Соответствие;
	СпискиРазделов.Вставить("Входящие", "ВходящиеЭД");
	СпискиРазделов.Вставить("Обработать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Подписать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Исправить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СпискиРазделов.Вставить("НаКонтроле", "ВходящиеЭД");

	СпискиРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");

	СпискиРазделов.Вставить("Сформировать", "Сформировать");

	СпискиРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");

	СпискиРазделов.Вставить("Отправить", "ОтправитьЭД");
	СпискиРазделов.Вставить("Распаковать", "КонтейнерыЭД");
	СпискиРазделов.Вставить("Ошибки", "ОшибкиЭД");

	СпискиРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");

	СпискиРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");

	Список = СпискиРазделов.Получить(Раздел);

	Возврат Список;

КонецФункции

&НаСервереБезКонтекста
Функция СтраницаРаздела(Знач Раздел)

	Страница = Неопределено;

	СтраницыРазделов = Новый Соответствие;
	СтраницыРазделов.Вставить("Входящие", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Обработать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Подписать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Исправить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");

	СтраницыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");

	СтраницыРазделов.Вставить("Сформировать", "СформироватьЭД");

	СтраницыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");

	СтраницыРазделов.Вставить("Отправить", "ОтправитьЭД");
	СтраницыРазделов.Вставить("Распаковать", "КонтейнерыЭД");
	СтраницыРазделов.Вставить("Ошибки", "ОшибкиЭД");

	СтраницыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");

	СтраницыРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");

	Страница = СтраницыРазделов.Получить(Раздел);

	Если ЗначениеЗаполнено(Страница) Тогда
		Страница = "Страница" + СтраницыРазделов.Получить(Раздел);
	КонецЕсли;

	Возврат Страница;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаРаздела(Знач Раздел)

	ТаблицыРазделов = Новый Соответствие;
	ТаблицыРазделов.Вставить("Входящие", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Обработать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Подписать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Исправить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");

	ТаблицыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");

	ТаблицыРазделов.Вставить("Сформировать", "СформироватьЭД");

	ТаблицыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");

	ТаблицыРазделов.Вставить("Отправить", "ОтправитьЭД");
	ТаблицыРазделов.Вставить("Распаковать", "КонтейнерыЭД");
	ТаблицыРазделов.Вставить("Ошибки", "ОшибкиЭД");

	ТаблицыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");

	ТаблицыРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");

	Таблица = ТаблицыРазделов.Получить(Раздел);

	Возврат Таблица;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаменитьПоляРаздела(Знач СтрокаПолей, Знач ПараметрыЗамены)
	
	Если ПараметрыЗамены.Количество() = 0 Тогда
		Возврат СтрокаПолей;
	КонецЕсли;
	
	Поля = СтрРазделить(СтрЗаменить(СтрокаПолей, " ", ""), ",");
	
	Для Каждого Замена Из ПараметрыЗамены Цикл
		Позиция = Поля.Найти(Замена.Ключ);
		
		Если Позиция = Неопределено Тогда
			Продолжить; // Ключ отсутствует
		КонецЕсли;
		
		Поля[Позиция] = Замена.Значение;
	КонецЦикла;
	
	Возврат СтрСоединить(Поля, ",");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляРаздела(Знач Раздел, Знач ПакетноеОтображение)

	ПоляТаблицыВходящие = "ВидДокумента, ДатаПакета, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, ЭлектронныйДокумент";
	ПоляТаблицыИсходящие = "ВидДокумента, ДатаПакета, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, ЭлектронныйДокумент";
	ПоляТаблицыСформировать = "ВидДокумента, Дата, Номер, Документ, Контрагент, Организация, СуммаДокумента";
	ПоляТаблицыКонтейнерыЭД = "Дата, Контрагент, Организация, Соглашение, Статус, Ссылка";
	ПоляТаблицыПриглашения = "Контрагент, ИдентификаторКонтрагента,СпособОбменаЭД, НовыйКонтрагент, ИдентификаторОрганизации, Организация, СтатусПодключения, ЭлектроннаяПочта, ТекстПриглашения, ОписаниеОшибки, ДатаОтправки, ДатаПолучения";
	ПоляТаблицыОзнакомиться = "ВидДокумента, ДатаПакета, Дата, Номер, СостояниеЭДО, Организация, Контрагент, СуммаДокумента, ЭлектронныйДокумент";
	ПоляТаблицыОтправить = "ВидДокумента, ДатаПакета, Дата, Номер, Организация, Контрагент, СуммаДокумента, ЭлектронныйДокумент";
	ПоляТаблицыНоменклатураКонтрагентов = "Владелец, Сопоставить";
	ПоляТаблицыОшибки = "ВидДокумента, ДатаПакета, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, Ссылка";

	ПоляТаблицы = "";
	ПоляРаздела = "";

	Если Раздел = "Входящие" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Обработать" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, ОтражениеВУчете";

	ИначеЕсли Раздел = "Утвердить" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Подписать" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете"
		КонецЕсли;

	ИначеЕсли Раздел = "Исправить" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, ОтражениеВУчете";

	ИначеЕсли Раздел = "Аннулировать" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "НаКонтроле" Тогда

		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Исходящие" Тогда

		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Сформировать" Тогда

		ПоляТаблицы = ПоляТаблицыСформировать;
		ПоляРаздела = ПоляТаблицыСформировать;

	ИначеЕсли Раздел = "ПодписатьИсх" Тогда

		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "ИсправитьИсх" Тогда

		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";

	ИначеЕсли Раздел = "АннулироватьИсх" Тогда

		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда

		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Ознакомиться" Тогда

		ПоляТаблицы = ПоляТаблицыОзнакомиться;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СостояниеЭДО, Организация, Контрагент, СуммаДокумента";
		КонецЕсли;

	ИначеЕсли Раздел = "Отправить" Тогда

		ПоляТаблицы = ПоляТаблицыОтправить;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, ВидДокумента, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация";
		КонецЕсли;

	ИначеЕсли Раздел = "Распаковать" Тогда

		ПоляТаблицы = ПоляТаблицыКонтейнерыЭД;
		ПоляРаздела = "Дата, Контрагент, Организация, Соглашение, Ссылка";

	ИначеЕсли Раздел = "Ошибки" Тогда

		ПоляТаблицы = ПоляТаблицыОшибки;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";

	ИначеЕсли Раздел = "Приглашения" Тогда

		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, СтатусПодключения, ОписаниеОшибки";

	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда

		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, ТекстПриглашения, ОписаниеОшибки";

	ИначеЕсли Раздел = "ЖдемСогласия" Тогда

		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, СтатусПодключения, ДатаОтправки";

	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда

		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, ИдентификаторКонтрагента, Организация, ДатаПолучения";

	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда

		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, ИдентификаторКонтрагента, Организация, СтатусПодключения, ДатаПолучения";

	ИначеЕсли Раздел = "НоменклатураКонтрагентов" Тогда

		ПоляТаблицы = ПоляТаблицыНоменклатураКонтрагентов;
		ПоляРаздела = ПоляТаблицыНоменклатураКонтрагентов;

	КонецЕсли;

	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() И  ПакетноеОтображение Тогда
		
		РазделыБезДатыПакета = Новый Массив;
		РазделыБезДатыПакета.Добавить("Сформировать");
		РазделыБезДатыПакета.Добавить("Распаковать");
		
		Если РазделыБезДатыПакета.Найти(Раздел) = Неопределено Тогда
			ПараметрыЗамены = Новый Структура("Дата", "ДатаПакета");
			ПоляРаздела = ЗаменитьПоляРаздела(ПоляРаздела, ПараметрыЗамены);
		КонецЕсли;
				
	КонецЕсли;

	ПоляТаблицы = СтрЗаменить(ПоляТаблицы, " ", "");
	ПоляРаздела = СтрЗаменить(ПоляРаздела, " ", "");

	МассивПолеТаблицы = СтрРазделить(ПоляТаблицы, ",", Ложь);
	МассивПолейРаздела = СтрРазделить(ПоляРаздела, ",", Ложь);

	ВидимостьПолей = Новый Соответствие;
	Для каждого Поле Из МассивПолеТаблицы Цикл

		Видимость = (МассивПолейРаздела.Найти(Поле) <> Неопределено);
		ВидимостьПолей.Вставить(Поле, Видимость);

	КонецЦикла;

	Возврат ВидимостьПолей;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Настройка отображения разделов.
&НаСервере
Функция НастройкиОтображенияРазделов()

	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(Пользователи.АвторизованныйПользователь());
	Если РежимОтображения <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;

	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("РежимОтображения", РежимОтображения);
	НастройкиОтображения.Вставить("СписокПользователей", СписокПользователей);
	НастройкиОтображения.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", ОтправлятьВходящиеДокументыНаУтверждение);
	НастройкиОтображения.Вставить("ПоказыватьПомеченныеНаУдаление", ПоказыватьПомеченныеНаУдаление);

	Возврат НастройкиОтображения;

КонецФункции

&НаСервере
Процедура НастроитьСпискиРазделов()

	НастройкиОтображения = НастройкиОтображенияРазделов();

	УстановитьПараметрыСписковРазделов(НастройкиОтображения);

	СоздатьОтборПоРазделамВСпискахРазделов(НастройкиОтображения);

	СоздатьБыстрыйОтборВСпискахРазделов();

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписковРазделов(Знач НастройкиОтображения)

	Форма = ЭтотОбъект;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДатаПереходаНаВерсиюСПрочтенностью = РаботаСПрочтениямиВызовСервера.ПолучитьДатуПереходаНаВерсиюСПрочтенностью();

	ОграничениеОтбора = Новый Массив;
	ОграничениеОтбора.Добавить("СписокПользователей");
	ОграничениеОтбора.Добавить("ПараметрыДанных");

	ИмяСписка = СписокРаздела("Входящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаПереходаНаВерсиюСПрочтенностью", ДатаПереходаНаВерсиюСПрочтенностью);
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеНаУдаление", НастройкиОтображения.ПоказыватьПомеченныеНаУдаление);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);

	ИмяСписка = СписокРаздела("Исходящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаПереходаНаВерсиюСПрочтенностью", ДатаПереходаНаВерсиюСПрочтенностью);
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеНаУдаление", НастройкиОтображения.ПоказыватьПомеченныеНаУдаление);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
	ИмяСписка = СписокРаздела("Ознакомиться");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеНаУдаление", НастройкиОтображения.ПоказыватьПомеченныеНаУдаление);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
	ИмяСписка = СписокРаздела("Отправить");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеНаУдаление", НастройкиОтображения.ПоказыватьПомеченныеНаУдаление);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
	ИмяСписка = СписокРаздела("Ошибки");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьПомеченныеНаУдаление", НастройкиОтображения.ПоказыватьПомеченныеНаУдаление);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);

КонецПроцедуры

&НаСервере
Процедура СоздатьБыстрыйОтборВСпискахРазделов()

	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить(ВходящиеЭД);
	ВсеСписки.Добавить(ИсходящиеЭД);
	ВсеСписки.Добавить(ОтправитьЭД);
	ВсеСписки.Добавить(КонтейнерыЭД);
	ВсеСписки.Добавить(ПриглашенияЭД);
	ВсеСписки.Добавить(Сформировать);

	Для каждого Список Из ВсеСписки Цикл

		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьОтборПоРазделамВСпискахРазделов(Знач НастройкиОтображения)

// Исходящие
	Список = ИсходящиеЭД;

	Разделы = Новый Массив;
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Разделы.Добавить("Исходящие");
	КонецЕсли;

	Разделы.Добавить("ПодписатьИсх");
	Разделы.Добавить("ИсправитьИсх");
	Разделы.Добавить("АннулироватьИсх");
	Разделы.Добавить("НаКонтролеИсх");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);

	// Входящие
	Список = ВходящиеЭД;

	Разделы = Новый Массив;
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Разделы.Добавить("Входящие");
	КонецЕсли;
	Разделы.Добавить("Обработать");
	Разделы.Добавить("Утвердить");
	Разделы.Добавить("Подписать");
	Разделы.Добавить("Исправить");
	Разделы.Добавить("Аннулировать");
	Разделы.Добавить("НаКонтроле");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);

	// Ознакомиться
	Список = ОзнакомитьсяЭД;

	Разделы = Новый Массив;
	Разделы.Добавить("Ознакомиться");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);

	// Отправить
	Список = ОтправитьЭД;

	Разделы = Новый Массив;
	Разделы.Добавить("Отправить");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Контейнеры
	Список = КонтейнерыЭД;

	Разделы = Новый Массив;
	Разделы.Добавить("Распаковать");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);

	// Приглашения
	Список = ПриглашенияЭД;

	Разделы = Новый Массив;
	Разделы.Добавить("ТребуетсяПригласить");
	Разделы.Добавить("ЖдемСогласия");
	Разделы.Добавить("ТребуетсяСогласие");
	Разделы.Добавить("ПриглашенияОзнакомиться");

	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьГруппуОтбораПоРазделам(Знач Разделы,
		Знач НастройкиОтображения, Отбор)
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "ОтборПоРазделам", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	Для каждого Раздел Из Разделы Цикл		
				
		ГруппаРаздел = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтборПоРазделам, "Раздел"
			+ Раздел, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		СоздатьОтборПоРазделу(Раздел, НастройкиОтображения, ГруппаРаздел);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьОтборПоРазделу(Знач Раздел, Знач НастройкиОтображения,
		ГруппаОтбора)

		// Изменения в отборы вносить согласовано с текстами запросов количества элементов в разделе.
	// См. метод ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора.
	РежимОтображения = НастройкиОтображения.РежимОтображения;
	СписокПользователей = НастройкиОтображения.СписокПользователей;

	Если Раздел = "Входящие" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;
		
		ЗначенияСостояниеЭДО = Новый Массив;
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.Аннулирован"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершен"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", ЗначенияСостояниеЭДО, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);
	
	
	ИначеЕсли Раздел = "Обработать" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значение = Истина;

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ЕстьКонтрольОтражения", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.Аннулирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.НеСформирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеВСписке,, Истина);

	ИначеЕсли Раздел = "Утвердить" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значение = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение");

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли Раздел = "Подписать" Тогда

		Если РежимОтображения = "МоиДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значения = Новый Массив;
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значения, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "Исправить" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "Аннулировать" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значение = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования");

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ИначеЕсли Раздел = "НаКонтроле" Тогда

		Если РежимОтображения = "МоиДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "РежимОтображения", "КИсполнению", ВидСравненияКомпоновкиДанных.НеРавно, , Истина);

		ЗначенияСостояниеЭДО = Новый Массив;
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении"));
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", ЗначенияСостояниеЭДО, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "Исходящие" Тогда

		Если РежимОтображения = "МоиДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;		
		
		ЗначенияСостояниеЭДО = Новый Массив;
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.Аннулирован"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершен"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", ЗначенияСостояниеЭДО, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);
	
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда

		Если РежимОтображения = "МоиДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		ИначеЕсли РежимОтображения = "КИсполнению" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "НаПодпись", Истина, 
				ВидСравненияКомпоновкиДанных.Равно, , Истина);

		КонецЕсли;

		Значения = Новый Массив;
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значения, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "ИсправитьИсх" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "АннулироватьИсх" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;
		
		Значения = Новый Массив;
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", Значения, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда

		Если РежимОтображения = "МоиДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "РежимОтображения", "КИсполнению", ВидСравненияКомпоновкиДанных.НеРавно, , Истина);

		ЗначенияСостоянийЭДО = Новый Массив;
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение"));
		ЗначенияСостоянийЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СостояниеЭДО", ЗначенияСостоянийЭДО, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "Ознакомиться" Тогда

		Если РежимОтображения <> "ВсеДокументы" Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

		КонецЕсли;

	ИначеЕсли Раздел = "Отправить" Тогда

		
	ИначеЕсли Раздел = "Распаковать" Тогда

		Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Направление", Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);

		Значение = ТранспортныеКонтейнерыЭДО.СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Статус", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "ЖдемСогласия" Тогда

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.НастройкаРоуминга"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда

		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие"));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);

	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ознакомиться", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(Знач Раздел,
		ОтправлятьВходящиеДокументыНаУтверждение)

	// Изменения в тексты запросов вносить согласовано с отборами по разделу.
	// См. метод СоздатьОтборПоРазделу.

	ПараметрыТекущихЭД = ИнтерфейсДокументовЭДО.НовыеПараметрыОпределенияТекущихЭлектронныхДокументов();
	ПараметрыТекущихЭД.Раздел = Раздел;
	ПараметрыТекущихЭД.КоличествоПолучаемыхЗаписей = 1000;
	ПараметрыТекущихЭД.ОтправлятьВходящиеДокументыНаУтверждение = ОтправлятьВходящиеДокументыНаУтверждение;

	Запрос = ИнтерфейсДокументовЭДО.ЗапросКоличестваТекущихЭлектронныхДокументов(ПараметрыТекущихЭД);

	Возврат Запрос.Текст;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Навигация по разделам.
&НаКлиенте
Процедура ПриИзмененииРаздела(Знач НовыйРаздел)

// &ЗамерПроизводительности
	ИмяОперации = СтрШаблон("Обработка.РабочиеМестаЭДО.Форма.ТекущиеДела.ПоказатьРаздел.%1", НовыйРаздел);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяОперации);

	ПоказатьРаздел(НовыйРаздел);

КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(Знач Раздел)

	ТекущийРаздел = Раздел;

	ПоказатьКомандыРаздела(Раздел);
	ПоказатьСписокРаздела(Раздел);
	
	ОчиститьВыделениеСтрок(Элементы.СформироватьЭД);
	ОчиститьВыделениеСтрок(Элементы.ВходящиеЭД);
	ОчиститьВыделениеСтрок(Элементы.КонтейнерыЭД);
	ОчиститьВыделениеСтрок(Элементы.ОтправитьЭД);
	ОчиститьВыделениеСтрок(Элементы.ИсходящиеЭД);
	ОчиститьВыделениеСтрок(Элементы.СформироватьЭД);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьНазваниеРазделаМК();
	Иначе
		ПоказатьЭлементыРаздела(Раздел);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьВыделениеСтрок(Элемент)

	Если ЗначениеЗаполнено(Элемент.ВыделенныеСтроки) Тогда
		Строка = Элемент.ВыделенныеСтроки[0];
		Элемент.ВыделенныеСтроки.Очистить();
		Элемент.ВыделенныеСтроки.Добавить(Строка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьРазделСПроверкой(Знач Раздел)

	ОтборПоИмени = Новый Структура("Имя", Раздел);
	НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(ОтборПоИмени);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ПоказатьРаздел(Раздел);
	Иначе
		ШаблонИсключения = НСтр("ru = 'Неизвестный раздел текущих дел ЭДО: {%1}'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения, Раздел);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьКомандыРаздела(Знач Раздел)

	КомандыРазделов = Новый Соответствие;
	КомандыРазделов.Вставить("Входящие", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьПодписатьИОтправитьВх,
		|КомандыВходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Обработать", "Обновить, СопоставитьНоменклатуру, ПровестиУчетныеДокументы, 
		|ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Утвердить", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьЭД, 
		|ОтклонитьДокумент, ВходящиеЭДКонтекстноеМенюУтвердитьЭД, КомандыВходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Подписать", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьВх, ОтклонитьДокумент,
		|КомандыВходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Исправить", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Аннулировать", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, 
		|ОтклонитьАннулирование, ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование,КомандыВходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("НаКонтроле", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Исходящие", "Обновить, ЗакрытьПринудительно, СоздатьПроизвольныйДокумент, Перенаправить, 
		|УтвердитьПодписатьИОтправитьИсх, КомандыИсходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Сформировать", "Обновить, ЗакрытьПринудительно, ИзменитьДокумент, СформироватьЭД, 
		|СформироватьПодписатьИОтправить, КомандыСформироватьЭД, СоздатьПроизвольныйДокумент");
	КомандыРазделов.Вставить("ПодписатьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьИсх, 
		|ОтклонитьПодписаниеИсх, ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх, КомандыИсходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("ИсправитьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("АннулироватьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, 
		|ОтклонитьАннулирование, ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование, КомандыИсходящиеЭД, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("НаКонтролеИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, 
		|КомандыИсходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Ознакомиться", "ОтправитьВАрхив, Перенаправить, Обновить, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Отправить", "Обновить, ОтправитьЭД, ВернутьНаПодготовкуКОтправке, ЗакрытьПринудительно, 
		|ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Распаковать", "Обновить, РаспаковатьКонтейнеры, ОтменитьКонтейнеры, КомандыКонтейнерыЭД");
	КомандыРазделов.Вставить("Ошибки", "Обновить, ОтправитьПовторно, ЗакрытьПринудительно, Перенаправить, 
		|КомандыИсходящиеЭД, ПоказыватьПомеченныеНаУдаление");
	КомандыРазделов.Вставить("Приглашения", "Обновить, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяПригласить", "Обновить, ОтправитьПриглашения, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ЖдемСогласия", "Обновить, ОтозватьПриглашение, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяСогласие", "Обновить, ПринятьПриглашения, ОтклонитьПриглашения, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ПриглашенияОзнакомиться", "ВАрхивПриглашенияОтправить, Обновить, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("НоменклатураКонтрагентов", 
		"Обновить, СопоставитьНоменклатуру, ОткрытьНоменклатуруКонтрагентов, ПравилаПоискаПоЧастиНаименования");

	ЭлементыКоманд = Новый Соответствие;
	ЭлементыКоманд.Вставить("КомандыВходящиеЭД", Элементы.ГруппаКомандыВходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыИсходящиеЭД", Элементы.ГруппаКомандыИсходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыСформироватьЭД", Элементы.ГруппаКомандыСформироватьЭД);
	ЭлементыКоманд.Вставить("КомандыКонтейнерыЭД", Элементы.ГруппаКомандыКонтейнерыЭД);
	ЭлементыКоманд.Вставить("КомандыПриглашенияЭД", Элементы.ГруппаКомандыПриглашенияЭД);
	ЭлементыКоманд.Вставить("Обновить", Элементы.КомандаОбновить);
	ЭлементыКоманд.Вставить("ЗакрытьПринудительно", Элементы.КомандаЗакрытьПринудительно);
	ЭлементыКоманд.Вставить("Перенаправить", Элементы.КомандаПеренаправить);
	ЭлементыКоманд.Вставить("УтвердитьЭД", Элементы.КомандаУтвердитьЭД);
	ЭлементыКоманд.Вставить("ПодписатьВх", Элементы.КомандаПодписать);
	ЭлементыКоманд.Вставить("ПодписатьИсх", Элементы.КомандаПодписатьИсх);
	ЭлементыКоманд.Вставить("ОтклонитьПодписаниеИсх", Элементы.КомандаОтклонитьПодписаниеИсх);
	ЭлементыКоманд.Вставить("Аннулировать", Элементы.КомандаАннулировать);
	ЭлементыКоманд.Вставить("ОтклонитьДокумент", Элементы.КомандаОтклонитьДокумент);
	ЭлементыКоманд.Вставить("ОтклонитьАннулирование", Элементы.КомандаОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ИзменитьДокумент", Элементы.КомандаИзменитьДокумент);
	ЭлементыКоманд.Вставить("СформироватьЭД", Элементы.КомандаСформироватьЭД);
	ЭлементыКоманд.Вставить("СоздатьПроизвольныйДокумент", Элементы.КомандаСоздатьПроизвольныйДокумент);
	ЭлементыКоманд.Вставить("ОтправитьВАрхив", Элементы.КомандаОтправитьВАрхив);
	ЭлементыКоманд.Вставить("ОтправитьЭД", Элементы.КомандаОтправить);
	ЭлементыКоманд.Вставить("ВернутьНаПодготовкуКОтправке", Элементы.КомандаВернутьНаПодготовкуКОтправке);
	ЭлементыКоманд.Вставить("ОтменитьКонтейнеры", Элементы.КомандаОтменитьКонтейнеры);
	ЭлементыКоманд.Вставить("РаспаковатьКонтейнеры", Элементы.КомандаРаспаковатьКонтейнеры);
	ЭлементыКоманд.Вставить("ОтправитьПриглашения", Элементы.КомандаОтправитьПриглашения);
	ЭлементыКоманд.Вставить("ПринятьПриглашения", Элементы.КомандаПринятьПриглашения);
	ЭлементыКоманд.Вставить("ОтклонитьПриглашения", Элементы.КомандаОтклонитьПриглашения);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьВх", Элементы.КомандаУтвердитьПодписатьИОтправить);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьИсх", Элементы.КомандаУтвердитьПодписатьИОтправитьИсх);
	ЭлементыКоманд.Вставить("СформироватьПодписатьИОтправить", Элементы.КомандаСформироватьПодписатьИОтправить);
	ЭлементыКоманд.Вставить("СопоставитьНоменклатуру", Элементы.КомандаСопоставитьНоменклатуру);
	ЭлементыКоманд.Вставить("ОткрытьНоменклатуруКонтрагентов", Элементы.КомандаОткрытьНоменклатуруКонтрагентов);
	ЭлементыКоманд.Вставить("ПравилаПоискаПоЧастиНаименования", Элементы.ПравилаПоискаПоЧастиНаименования);
	ЭлементыКоманд.Вставить("ПровестиУчетныеДокументы", Элементы.КомандаПровестиУчетныеДокументы);
	ЭлементыКоманд.Вставить("ВАрхивПриглашенияОтправить", Элементы.КомандаОтправитьПриглашенияВАрхив);
	ЭлементыКоманд.Вставить("ОтозватьПриглашение", Элементы.КомандаОтозватьПриглашение);
	ЭлементыКоманд.Вставить("ВходящиеЭДКонтекстноеМенюУтвердитьЭД", Элементы.ВходящиеЭДКонтекстноеМенюУтвердитьЭД);
	ЭлементыКоманд.Вставить("ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование", 
		Элементы.ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх", 
		Элементы.ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх);
	ЭлементыКоманд.Вставить("ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование", 
		Элементы.ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ПоказыватьПомеченныеНаУдаление", Элементы.ПоказыватьПомеченныеНаУдаление);

	КомандыРаздела = КомандыРазделов.Получить(Раздел);

	Для каждого КлючЗначение Из ЭлементыКоманд Цикл

		ИмяКоманды = КлючЗначение.Ключ;
		ЭлементФормы = КлючЗначение.Значение;

		ЕстьКоманда = (СтрНайти(КомандыРаздела, ИмяКоманды) > 0);
		КомандаДоступна = (НедоступныеКоманды.НайтиПоЗначению(ИмяКоманды) = Неопределено);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", ЕстьКоманда
			И КомандаДоступна);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьСписокРаздела(Знач Раздел)

	ПоказатьСтраницуРаздела(Раздел);

	ПоказатьПоляРаздела(Раздел, ПакетноеОтображение);

	ПрименитьОтборыКРазделу(Раздел);

КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницуРаздела(Знач Раздел)

	ИмяСтраницы = СтраницаРаздела(Раздел);

	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.ПанельСписков.ТекущаяСтраница = Элементы[ИмяСтраницы];
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПоляРаздела(Знач Раздел, Знач ПакетноеОтображение)

	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;

	ПоляТаблицы = ПоляРаздела(Раздел, ПакетноеОтображение);

	Для каждого Поле Из ПоляТаблицы Цикл

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТаблицы
			+ Поле.Ключ, "Видимость", Поле.Значение);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНавигациюПоРазделамНаСервере(Знач ПересчитатьКоличество = Истина,
		Знач ПересчитатьКоличествоОтбор = Истина)

	РассчитатьКоличествоЭлементовВРазделах(ПересчитатьКоличество, ПересчитатьКоличествоОтбор);

	ОбновитьДеревоНавигации(ДеревоДействий.ПолучитьЭлементы());

	ПерейтиВТекущийРазделНаСервере();
	ОбновитьДинамическиеСписки();

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьНазваниеРазделаМК();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьДеревоНавигации(ЭлементыДереваНавигации)

	КОбработке = 0;

	Для каждого СтрокаНавигации Из ЭлементыДереваНавигации Цикл

		ОтборРаздела = Новый Структура("Имя", СтрокаНавигации.Значение);
		НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		Раздел = НайденныеСтроки[0];

		СтрокаНавигации.Представление = Раздел.Представление;

		ВложенныеЭлементы = СтрокаНавигации.ПолучитьЭлементы();
		ЕстьВложенныеЭлементы = (ВложенныеЭлементы.Количество() > 0);

		Если ЕстьВложенныеЭлементы Тогда

			КОбработкеВложенные = ОбновитьДеревоНавигации(ВложенныеЭлементы);
			КОбработке = КОбработке + КОбработкеВложенные;
			СтрокаНавигации.ТребуетсяОбработка = КОбработкеВложенные;
		ИначеЕсли Раздел.Видимость Тогда
			КОбработке = КОбработке + Раздел.Количество;
			СтрокаНавигации.ТребуетсяОбработка = (Раздел.Количество > 0);
		КонецЕсли;

		Если Раздел.РассчитыватьКоличество И Раздел.КоличествоРассчитано
				И Раздел.Количество > 0 Тогда

			КоличествоОтборСтрокой = ?(Раздел.КоличествоОтбор >= 1000, "999+", Формат(Раздел.КоличествоОтбор, "ЧН=0; ЧГ=0"));
			СтрокаНавигации.Представление = СтрокаНавигации.Представление + " ("
				+ КоличествоОтборСтрокой;

			Если Раздел.Количество <> Раздел.КоличествоОтбор Тогда

				КоличествоСтрокой = ?(Раздел.Количество >= 1000, "999+", Формат(Раздел.Количество, "ЧН=0; ЧГ=0"));
				СтрокаНавигации.Представление = СтрокаНавигации.Представление + "/"
					+ КоличествоСтрокой;

			КонецЕсли;

			СтрокаНавигации.Представление = СтрокаНавигации.Представление + ")";

		КонецЕсли;

	КонецЦикла;

	Возврат КОбработке;

КонецФункции

&НаКлиенте
Процедура ОбновитьНавигациюПоРазделам()

	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВТекущийРаздел()

	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);

	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерейтиВТекущийРазделНаСервере()

	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);

	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с отборами списков разделов.
&НаСервере
Процедура ПрименитьОтборыКРазделу(Знач Раздел)

	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];

	ПрименитьОтборыКСпискуРаздела(Раздел, Список);

	УстановитьТекстКнопкиБыстрыхОтборов(Раздел);

	УстановитьДоступностьСбросаОтбора(Раздел);

КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборыКСпискуРаздела(Знач Раздел, Список)

	УстановитьОтборПоРазделу(Раздел, Список);

	УстановитьБыстрыеОтборыПоРазделу(Раздел, БыстрыеОтборы, Список);

	ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Раздел, Список);

	ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Раздел, Список);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборПоРазделу(Знач Раздел, Список)

	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Включаем использование группы отбора, соответствующей разделу.
	РазделНайден = Ложь;
	Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл

		Если ГруппаРаздела.Представление = "Раздел" + Раздел Тогда
			ГруппаРаздела.Использование = Истина;
			РазделНайден = Истина;
		Иначе
			ГруппаРаздела.Использование = Ложь;
		КонецЕсли;

	КонецЦикла;
	// Если не удалось найти группу раздела, то включаем все разделы.
	Если Не РазделНайден Тогда
		Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
			ГруппаРаздела.Использование = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьБыстрыеОтборыПоРазделу(Знач Раздел, Знач БыстрыеОтборы,
		Список)

	Отбор = Список.Отбор;

	ПоляОтборов = Новый Соответствие;
	ПоляОтборов.Вставить("Организация", "Организация");
	ПоляОтборов.Вставить("Контрагент", "Контрагент");
	ПоляОтборов.Вставить("ВидДокумента", "ВидДокумента");
	ПоляОтборов.Вставить("Сумма_С", "СуммаДокумента");
	ПоляОтборов.Вставить("Сумма_По", "СуммаДокумента");
	ПоляОтборов.Вставить("Дата_С", "Дата");
	ПоляОтборов.Вставить("Дата_По", "Дата");
	ПоляОтборов.Вставить("Прочтен", "Прочтен");
	ПоляОтборов.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");

	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

	Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаБыстрыйОтбор.РежимОтображения = Режим;

	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл

		Имя = СтрокаОтбора.Параметр;
		Значение = СтрокаОтбора.Значение;
		Поле = ПоляОтборов[Имя];

		Если Не ПолеДоступноДляОтбора(Отбор, Поле) Тогда
			Продолжить;
		КонецЕсли;

		Если Имя = "Организация" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);

		ИначеЕсли Имя = "Контрагент" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);

		ИначеЕсли Имя = "ВидДокумента" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ТипДокумента = Неопределено;

			Если ТипДокумента = Неопределено Тогда
				ОбластьДобавления = ГруппаБыстрыйОтбор;
			Иначе
				ОбластьДобавления = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаБыстрыйОтбор, НСтр("ru = 'Вид документа'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);

				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, "ВидДокумента", ВидСравненияКомпоновкиДанных.Равно, ТипДокумента, , Использование, Режим);
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);

		ИначеЕсли Имя = "ДополнительнаяИнформация" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, "ДополнительнаяИнформация", ВидСравненияКомпоновкиДанных.Содержит, Значение, , Использование, Режим);

		ИначеЕсли Имя = "Дата_С" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(Значение), , Использование, Режим);

		ИначеЕсли Имя = "Дата_По" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Значение), , Использование, Режим);

		ИначеЕсли Имя = "Сумма_С" Тогда

			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Значение, , Использование, Режим);

		ИначеЕсли Имя = "Сумма_По" Тогда

			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Значение, , Использование, Режим);
		
		ИначеЕсли Имя = "Прочтен" Тогда

			Использование = ЗначениеЗаполнено(Значение);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Знач Раздел,
		Список)

	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);

	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВсеЭлементыОР = ЭлементыОтбора(ГруппаОтборПоРазделам);

	Для каждого ЭлементПО Из ВсеЭлементыПО Цикл

		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;

		Для каждого ЭлементОР Из ВсеЭлементыОР Цикл

			Если ЭлементПО.ЛевоеЗначение = ЭлементОР.ЛевоеЗначение Тогда

				ЭлементПО.Использование = Ложь;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Знач Раздел,
		Список)

	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);

	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "БыстрыйОтбор");
	Если ГруппаБыстрыйОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыБО = ЭлементыОтбора(ГруппаБыстрыйОтбор);

	Для каждого ЭлементПО Из ЭлементыПО Цикл

		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;

		Для каждого ЭлементБО Из ЭлементыБО Цикл

			Если ЭлементПО.ЛевоеЗначение = ЭлементБО.ЛевоеЗначение Тогда

				ЭлементБО.Использование = Ложь;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстКнопкиБыстрыхОтборов(Знач Раздел)

	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];

	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);

	// Определяем текст основной кнопки открытия настроек.
	КоличествоЭлементов = 0;
	Для каждого Элемент Из ВсеЭлементыПО Цикл
		Если Элемент.Использование Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;

	ТекстКнопкиПО = НСтр("ru = 'еще'");
	Если ЗначениеЗаполнено(КоличествоЭлементов) Тогда
		ТекстКнопкиПО = НСтр("ru = 'и еще'") + " " + Строка(КоличествоЭлементов);
	КонецЕсли;

	// Устанавливаем текст кнопок быстрого поиска (при пересечении с пользовательскими отборами).
	ПараметрыОтборовПолей = Новый Соответствие;
	ПараметрыОтборовПолей.Вставить("Организация", "Организация");
	ПараметрыОтборовПолей.Вставить("Контрагент", "Контрагент");
	ПараметрыОтборовПолей.Вставить("ВидДокумента", "ВидДокумента");
	ПараметрыОтборовПолей.Вставить("СуммаДокумента", "Сумма_С,Сумма_По");
	ПараметрыОтборовПолей.Вставить("Дата", "Дата_С,Дата_По");
	ПараметрыОтборовПолей.Вставить("Прочтен", "Прочтен");
	ПараметрыОтборовПолей.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");
	ПараметрыОтборовПолей.Вставить("ПричинаОтклонения", "ДополнительнаяИнформация");

	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл

		Если СтрокаОтбора.Параметр = "ПользовательскийОтбор" Тогда
			Если СтрокаОтбора.Кнопка <> ТекстКнопкиПО Тогда
				СтрокаОтбора.Кнопка = ТекстКнопкиПО;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		ТекстКнопки = "";
		УстановленПО = Ложь;

		Для каждого ЭлементПО Из ВсеЭлементыПО Цикл

			Если Не ЭлементПО.Использование Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоля = Строка(ЭлементПО.ЛевоеЗначение);
			ПараметрыОтбора = ПараметрыОтборовПолей[ИмяПоля];

			Если Не ЗначениеЗаполнено(ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;

			Если СтрНайти(ПараметрыОтбора, СтрокаОтбора.Параметр) <> 0 Тогда

				Если ЭлементПО.Родитель = Неопределено И Не УстановленПО Тогда

					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра + " "
						+ Строка(ЭлементПО.ВидСравнения) + " "
						+ Строка(ЭлементПО.ПравоеЗначение);

				Иначе

					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра + " "
						+ НСтр("ru = '(сложный фильтр)'");

				КонецЕсли;

				УстановленПО = Истина;

			КонецЕсли;

		КонецЦикла;

		Если СтрокаОтбора.Кнопка <> ТекстКнопки Тогда

			СтрокаОтбора.Кнопка = ТекстКнопки;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСбросаОтбора(Знач Раздел)

	ЕстьОтборы = Ложь;
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение)
				ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли
	КонецЦикла;

	Если Не ЕстьОтборы Тогда

		ИмяСписка = СписокРаздела(Раздел);
		Список = ЭтотОбъект[ИмяСписка];
		Отбор = ПользовательскийОтборСписка(Список);
		ВсеЭлементыОтбора = ЭлементыОтбора(Отбор);
		Для каждого ЭлементОтбора Из ВсеЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", ЕстьОтборы);

КонецПроцедуры

&НаСервере
Процедура СинхронизироватьПользовательскиеОтборы(Знач ИмяСпискаИсточника)

	ТекущийСписок = ИмяСпискаИсточника;
	СписокИсточник = ЭтотОбъект[ТекущийСписок];
	ОтборИсточник = ПользовательскийОтборСписка(СписокИсточник);

	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить("ВходящиеЭД");
	ВсеСписки.Добавить("ИсходящиеЭД");

	Если ВсеСписки.Найти(ТекущийСписок) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ИмяСписка Из ВсеСписки Цикл

		Если ИмяСписка = ТекущийСписок Тогда
			Продолжить;
		КонецЕсли;

		СписокПриемник = ЭтотОбъект[ИмяСписка];
		ОтборПриемник = ПользовательскийОтборСписка(СписокПриемник);
		ОтборПриемник.Элементы.Очистить();

		СкопироватьЭлементыОтбораРекурсивно(ОтборПриемник, ОтборПриемник, ОтборИсточник);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЕстьПользовательскийОтборПоРазделу(Знач Раздел)

	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];

	Отбор = ПользовательскийОтборСписка(Список);
	ЕстьПользовательскийОтбор = (Отбор.Элементы.Количество() > 0);

	ЕстьБыстрыйОтбор = Ложь;
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл

		Если ЗначениеЗаполнено(СтрокаОтбора.Значение)
				ИЛИ (СтрокаОтбора.Тип = "Число"
				И СтрокаОтбора.Значение <> Неопределено) Тогда

			ЕстьБыстрыйОтбор = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьПользовательскийОтбор ИЛИ ЕстьБыстрыйОтбор;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с быстрым поиском.
&НаКлиенте
Процедура ПриОкончанииНастройкиСписка(Настройки, ДопПараметры) Экспорт

	Раздел = ДопПараметры.Раздел;

	Если ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда

		ЗагрузитьПользовательскиеНастройкиПоРазделу(Раздел, Настройки);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройкиПоРазделу(Знач Раздел, Знач Настройки)

	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	СинхронизироватьПользовательскиеОтборы(ИмяСписка);
	ПриИзмененииОтбораНаСервере();

КонецПроцедуры

&НаСервере
Процедура СброситьПользовательскиеОтборы()

	СпискиРазделов = Новый Массив;
	СпискиРазделов.Добавить(ВходящиеЭД);
	СпискиРазделов.Добавить(ИсходящиеЭД);
	СпискиРазделов.Добавить(Сформировать);
	СпискиРазделов.Добавить(КонтейнерыЭД);
	СпискиРазделов.Добавить(ОтправитьЭД);
	СпискиРазделов.Добавить(ПриглашенияЭД);

	Для каждого Список Из СпискиРазделов Цикл

		Отбор = ПользовательскийОтборСписка(Список);
		Отбор.Элементы.Очистить();

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()

	ПриИзмененииОтбораНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()

	ОбновитьКэшРасчетовОтбор = Истина;
	ПрименитьОтборыКРазделу(ТекущийРаздел);
	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

&НаСервере
Процедура СброситьОтборНаСервере()

	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1, 1, 1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "СправочникСсылка.ВидыДокументовЭДО" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка."
				+ НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник."
				+ НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка."
				+ НазваниеСправочникаОрганизации Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник."
				+ НазваниеСправочникаОрганизации + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭДО" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;

	СброситьПользовательскиеОтборы();
	ПриИзмененииОтбораНаСервере();

	УстановитьДоступностьКомандыСбросаОтбора(Ложь);

	СохраняемыеВНастройкахДанныеМодифицированы = Истина;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с фиксированным отбором.
&НаСервере
Функция ЕстьФиксированныйОтборПоРазделу(Знач ИмяРаздела)

	ИмяСписка = СписокРаздела(ИмяРаздела);
	Список = ЭтотОбъект[ИмяСписка];

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборУчетныхДокументов");
	Если ГруппаОтбора <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборЭлектронныхДокументов");
	Если ГруппаОтбора <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьОтборУчетныхДокументов(Знач Отбор)

	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Список = Сформировать;
	ИмяГруппыОтбора = "ОтборУчетныхДокументов";

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;

	ГруппаОтбора.Элементы.Очистить();

	Для каждого ЭлементОтбора Из Отбор Цикл

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ЭлементОтбора.Поле,
			ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение, , Истина);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВходящихДокументов(Знач Отбор)

	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Список = ВходящиеЭД;
	ИмяГруппыОтбора = "ОтборЭлектронныхДокументов";

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;

	ГруппаОтбора.Элементы.Очистить();

	Для каждого ЭлементОтбора Из Отбор Цикл

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, 
			ЭлементОтбора.Поле, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение, , Истина);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИсходящихДокументов(Знач Отбор)

	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Список = ИсходящиеЭД;
	ИмяГруппыОтбора = "ОтборЭлектронныхДокументов";

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;

	ГруппаОтбора.Элементы.Очистить();

	Для каждого ЭлементОтбора Из Отбор Цикл

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			ЭлементОтбора.Поле, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение, , Истина);

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Расчет количества элементов в разделах.
&НаСервере
Процедура СброситьКэшРасчетов()

	Если Не (ОбновитьКэшРасчетовОбщий ИЛИ ОбновитьКэшРасчетовОтбор) Тогда
		Возврат;
	КонецЕсли;

	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);

	Для каждого КлючЗначение Из КэшРасчетов Цикл

		Раздел = КлючЗначение.Ключ;
		Макеты = КлючЗначение.Значение;

		Если ОбновитьКэшРасчетовОбщий Тогда
			Макеты.Общий = Неопределено;
		КонецЕсли;
		Если ОбновитьКэшРасчетовОтбор Тогда
			Макеты.Отбор = Неопределено;
		КонецЕсли;

		КэшРасчетов.Вставить(Раздел, Макеты);

	КонецЦикла;

	ОбновитьКэшРасчетовОбщий = Ложь;
	ОбновитьКэшРасчетовОтбор = Ложь;

	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);

КонецПроцедуры

&НаСервере
Функция МакетРасчетаПоРазделу(Знач Раздел,
		Знач УчитыватьПользовательскиеНастройки, КэшРасчетов)

		// Ищем макет в кэше.
	Макет = Неопределено;
	ИспользуемыйМакет = ?(УчитыватьПользовательскиеНастройки, "Отбор", "Общий");

	Макеты = КэшРасчетов[Раздел];

	Если Макеты = Неопределено Тогда
		Макеты = Новый Структура("Общий,Отбор");
	Иначе
		Макет = Макеты[ИспользуемыйМакет];
	КонецЕсли;

	Если Макет <> Неопределено Тогда
		Возврат Макет;
	КонецЕсли;

	// Не нашли в кэше, формируем новый.
	Форма = ЭтотОбъект;

	// Заполняем СписокЭД копией списка раздела, 
	// применяем к нему необходимые отборы,
	// получаем из него итоговые настройки.
	ИмяСписка = СписокРаздела(Раздел);
	Список = форма[ИмяСписка];

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	ЗаполнитьЗначенияСвойств(СписокЭД, СвойстваСписка);

	ФиксированныеНастройки = Список.КомпоновщикНастроек.ФиксированныеНастройки;
	СписокЭД.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройки);
	СписокЭД.Порядок.Элементы.Очистить();

	Если УчитыватьПользовательскиеНастройки Тогда
	// Добавляем пользовательские настройки.
		ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
		СписокЭД.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
	// Убираем пользовательские отборы.
		ПользовательскийОтбор = ПользовательскийОтборСписка(СписокЭД);
		ПользовательскийОтбор.Элементы.Очистить();
	КонецЕсли;

	ПрименитьОтборыКСпискуРаздела(Раздел, СписокЭД);

	Если Не УчитыватьПользовательскиеНастройки Тогда
	// Убираем быстрый поиск из настроек.
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокЭД.Отбор.Элементы, "БыстрыйОтбор");
		ГруппаБыстрыйОтбор.Использование = Ложь;
	КонецЕсли;

	Настройки = СписокЭД.КомпоновщикНастроек.ПолучитьНастройки();

	Настройки.Порядок.Элементы.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();

	// Определяем схему компоновки и меняем запрос.
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Форма.Элементы[ИмяТаблицы];
	Схема = Таблица.ПолучитьИсполняемуюСхемуКомпоновкиДанных();

	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных[0].Запрос);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество()
		- 1);
	Для каждого Оператор Из ПоследнийЗапрос.Операторы Цикл

		Оператор.КоличествоПолучаемыхЗаписей = 1000;
		ПолеСчетчик = Оператор.ВыбираемыеПоля.Добавить("1");

	КонецЦикла;
	КолонкаСчетчик = ПоследнийЗапрос.Колонки.Найти(ПолеСчетчик);
	КолонкаСчетчик.Псевдоним = "_Счетчик";

	Схема.НаборыДанных[0].Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();

	// Выбираем в настройках только поле-счетчик и выполняем схему.
	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("_Счетчик");

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);

	// Помещаем рассчитанный макет в кэш
	Макеты[ИспользуемыйМакет] = Макет;
	КэшРасчетов.Вставить(Раздел, Макеты);

	Возврат Макет;

КонецФункции

&НаСервере
Процедура РассчитатьКоличествоЭлементовВРазделах(Знач ПересчитатьКоличество = Истина,
		Знач ПересчитатьКоличествоОтбор = Истина)

	Если Не (ПересчитатьКоличество ИЛИ ПересчитатьКоличествоОтбор) Тогда
		Возврат;
	КонецЕсли;

	СброситьКэшРасчетов();

	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);

	ДанныеДляРасчета = Новый Массив;

	Для каждого Раздел Из ОписаниеРазделов Цикл

		Если Не (Раздел.РассчитыватьКоличество И Раздел.Видимость) Тогда
			Продолжить;
		КонецЕсли;

		Если ПересчитатьКоличество Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Ложь, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;

		Если ПересчитатьКоличествоОтбор
				И (ЕстьПользовательскийОтборПоРазделу(Раздел.Имя)
				ИЛИ ЕстьФиксированныйОтборПоРазделу(Раздел.Имя)) Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Истина, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;

	КонецЦикла;

	ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета, КэшРасчетов);

	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл

		ОтборРаздела = Новый Структура("Имя", ЭлементРасчета.Раздел);
		ВсеСтрокиРаздела = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);

		Для каждого СтрокаРаздела Из ВсеСтрокиРаздела Цикл

			Если ЭлементРасчета.УчитыватьОтбор Тогда
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			Иначе
				СтрокаРаздела.Количество = ЭлементРасчета.Количество;
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			КонецЕсли;

			СтрокаРаздела.КоличествоРассчитано = Истина;

		КонецЦикла;

	КонецЦикла;

	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета,
		КэшРасчетов)

	Если Не ЗначениеЗаполнено(ДанныеДляРасчета) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	ЧастиТекстаЗапроса = Новый Массив;

	НастройкиОтображения = НастройкиОтображенияРазделов();

	Запрос.УстановитьПараметр("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Запрос.УстановитьПараметр("СписокПользователей", НастройкиОтображения.СписокПользователей);

	ПоложениеРезультатовВПакете = Новый ТаблицаЗначений;
	ПоложениеРезультатовВПакете.Колонки.Добавить("Раздел");
	ПоложениеРезультатовВПакете.Колонки.Добавить("УчитыватьОтбор");
	ПоложениеРезультатовВПакете.Колонки.Добавить("Индекс");

	КоличествоЗапросовВПакете = 0;
	РазделительЗапросовВПакете = "
		|;
		|";

	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл

		Если ЭлементРасчета.УчитыватьОтбор Тогда

			Макет = МакетРасчетаПоРазделу(ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, КэшРасчетов);
			ТекстЗапроса = Макет.НаборыДанных[0].Запрос;

			// Обернем запрос в выборку количества
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
			Шаблон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КОЛИЧЕСТВО(1) КАК _Счетчик
				|ИЗ
				|	(%1) КАК _ВложенныйЗапрос";
			ТекстЗапроса = СтрШаблон(Шаблон, ТекстЗапроса);

			// Переименовываем и устанавливаем параметры запроса.
			Префикс = СтрШаблон("%1_%2_", ЭлементРасчета.Раздел, Формат(ЭлементРасчета.УчитыватьОтбор, "БЛ=Ложь; БИ=Истина"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&", "&" + Префикс);

			Для каждого Параметр Из Макет.ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Префикс + Параметр.Имя, Параметр.Значение);
			КонецЦикла;

		Иначе

			ТекстЗапроса = ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(ЭлементРасчета.Раздел, НастройкиОтображения.ОтправлятьВходящиеДокументыНаУтверждение);
			Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		// Добавляем уничтожение временных таблиц, чтобы избежать конфликта имен.
		КоличествоВТ = ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса);

		Если ЗначениеЗаполнено(ЧастиТекстаЗапроса) Тогда
			ЧастиТекстаЗапроса.Добавить(РазделительЗапросовВПакете);
		КонецЕсли;

		ТекстЗапросаВПакете = СтрШаблон("////////////////////////////////////////////////////////////////////////////
			|// %1 (%2)
			|
			|%3", ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, ТекстЗапроса);
		ЧастиТекстаЗапроса.Добавить(ТекстЗапросаВПакете);

		// Вычисляем положение результата по разделу в пакете.
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + 1 + КоличествоВТ * 2;

		СтрокаПоложения = ПоложениеРезультатовВПакете.Добавить();
		СтрокаПоложения.Раздел = ЭлементРасчета.Раздел;
		СтрокаПоложения.УчитыватьОтбор = ЭлементРасчета.УчитыватьОтбор;
		СтрокаПоложения.Индекс = КоличествоЗапросовВПакете - КоличествоВТ - 1;

	КонецЦикла;

	// Заполняем результаты по разделам по данным пакета.
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса);
	Результаты = Запрос.ВыполнитьПакет();

	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл

		ОтборСтрок = Новый Структура("Раздел,УчитыватьОтбор");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ЭлементРасчета);

		НайденныеСтроки = ПоложениеРезультатовВПакете.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;

		ИндексРезультата = НайденныеСтроки[0].Индекс;

		Результат = Результаты[ИндексРезультата];

		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		Выборка = Результат.Выбрать();
		КоличествоЭлементов = 0;
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементов = КоличествоЭлементов + Выборка._Счетчик;
		КонецЦикла;
		ЭлементРасчета.Количество = КоличествоЭлементов;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьЭлементыРаздела(Знач Раздел)

	Элементы.ВходящиеЭД.КартинкаСтрок = БиблиотекаКартинок.КоллекцияТиповДокументовЭДО;
	Элементы.ГруппаЛегенда.Видимость = ПоказыватьОбластьЛегенды;
	ОчиститьОбластьПросмотра();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросами

&НаСервере
Функция ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса)

	ВременныеТаблицы = Новый Массив;
	КоличествоВременныхТаблиц = 0;

	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);

	Для каждого ТекущийЗапрос Из Схема.ПакетЗапросов Цикл
		Если ТипЗнч(ТекущийЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		// Добавляем временную таблицу на уничтожение.
			Если ЗначениеЗаполнено(ТекущийЗапрос.ТаблицаДляПомещения) Тогда
				ВременныеТаблицы.Добавить(ТекущийЗапрос.ТаблицаДляПомещения);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц + 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Индекс = ВременныеТаблицы.Найти(ТекущийЗапрос.ИмяТаблицы);
			// Уже есть уничтожение временной таблицы.
			Если Индекс <> Неопределено Тогда
				ВременныеТаблицы.Удалить(Индекс);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для каждого ИмяТаблицы Из ВременныеТаблицы Цикл

		ЗапросУничтоженияВТ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросУничтоженияВТ.ИмяТаблицы = ИмяТаблицы;

	КонецЦикла;

	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();

	Возврат КоличествоВременныхТаблиц;

КонецФункции


#КонецОбласти

#Область РаботаСОтборами

&НаСервереБезКонтекста
Функция ПолеДоступноДляОтбора(Знач Отбор, Знач Поле)

	Если Поле = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;

	ДоступноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);

	Возврат (ДоступноеПоле <> Неопределено);

КонецФункции

&НаСервереБезКонтекста
Функция ПользовательскийОтборСписка(Знач Список)

	ИдентификаторНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);

	Если ПользовательскийОтбор = Неопределено Тогда
		ПользовательскийОтбор = Новый ОтборКомпоновкиДанных();
	КонецЕсли;

	Возврат ПользовательскийОтбор;

КонецФункции

&НаСервереБезКонтекста
Функция ЭлементыОтбора(Знач Отбор)

	НайденныеЭлементы = Новый Массив;

	Если Отбор = Неопределено Тогда
		Возврат НайденныеЭлементы;
	КонецЕсли;

	Для каждого Элемент Из Отбор.Элементы Цикл

		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда

			НайденныеЭлементыГруппы = ЭлементыОтбора(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайденныеЭлементыГруппы);

		Иначе

			НайденныеЭлементы.Добавить(Элемент);

		КонецЕсли;

	КонецЦикла;

	Возврат НайденныеЭлементы;

КонецФункции

&НаСервереБезКонтекста
Процедура СкопироватьЭлементыОтбораРекурсивно(Отбор, Приемник, Источник)

	Для каждого ЭлементОтбора Из Источник.Элементы Цикл

		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда

			ГруппаПриемник = Приемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаПриемник, ЭлементОтбора);

			СкопироватьЭлементыОтбораРекурсивно(Отбор, ГруппаПриемник, ЭлементОтбора);

		Иначе

			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);

			Если Не ПолеДоступноДляОтбора(Отбор, ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Приемник, ИмяПоля, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Представление, ЭлементОтбора.Использование, ЭлементОтбора.РежимОтображения, ЭлементОтбора.ИдентификаторПользовательскойНастройки);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ВыполнитьОтменуФормированияДокументовПослеВводаСтроки(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОВызовСервера.ОтменитьФормированиеДокументовПоОбъектамУчета(ДополнительныеПараметры.ОбъектыУчета, Комментарий);	
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПросмотраОкончание(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда

		РежимОтображения = Результат.РежимОтображения;
		ПакетноеОтображение = Результат.ПакетноеОтображение;
		
		ПоказыватьОбластьЛегенды = Результат.ОбластьЛегенды;
		ПоказыватьОбластьПросмотра = Результат.ОбластьПросмотра;
		
		РежимОтображенияПриИзмененииНаСервере();

		ПерейтиВТекущийРаздел();
		ПриИзмененииРаздела(ТекущийРаздел);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПриглашенийОповещениеОЗавершении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
	
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = Результат.КоличествоОтправленных;
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьНавигациюПоРазделам();
		
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиОтветовНаПриглашения(Результат, Контекст) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
		
		КоличествоОбработанныхПриглашений = Результат.КоличествоОбработанных;
		
		Если Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Принять() Тогда
			ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отозвать() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отзываются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отозвано приглашений: %1'");
		КонецЕсли;

		ТекстСообщения = СтрШаблон(ШаблонСообщения, КоличествоОбработанныхПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьНавигациюПоРазделам();
	
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);			
	КонецЕсли;

	РазблокироватьЗаблокированныеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспаковатьКонтейнерыОповещение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатыОтправки = Неопределено;
	
	КоличествоОтправленных = РезультатыОтправки.Успешные.Количество();
	
	ШаблонОповещения = НСтр("ru = 'Распаковано транспортных контейнеров: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);

	ЗаголовокОповещения = НСтр("ru = 'Распаковка транспортных контейнеров электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоОповещение(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда

		Если Результат.Свойство("КонтекстДиагностики")
			И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда

			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);	

		ИначеЕсли Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда

			ПараметрыОбработки = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
			ПараметрыОбработки.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(Результат.ОшибкиФормирования);
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("ОбъектыУчета") Тогда
				ПараметрыОбработки.СписокДокументовКОтправке = ДополнительныеПараметры.ОбъектыУчета;
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыПомощникаФормирования", ЭтотОбъект, ДополнительныеПараметры);
			ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОбработки);
	
		КонецЕсли;

	КонецЕсли;
	
	ОбновитьНавигациюПоРазделам();
	РазблокироватьЗаблокированныеЭлементыФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыПомощникаФормирования(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПакетами

&НаСервере
Процедура УстановитьУсловноеОформлениеПоИспользованиюПакетногоОтображения()
	
	Если ПакетноеОтображение Тогда	 
	
		УстановитьУсловноеОформлениеПакетногоРежима_ИсходящиеЭД();			
		УстановитьУсловноеОформлениеПакетногоРежима_ВходящиеЭД();		
		УстановитьУсловноеОформлениеПакетногоРежима_ОшибкиЭД();	
		УстановитьУсловноеОформлениеПакетногоРежима_ОтправитьЭД();	
		УстановитьУсловноеОформлениеПакетногоРежима_ОзнакомитьсяЭД();	
			
	Иначе
		
		Элемент = УсловноеОформление.Элементы.Добавить();		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДПредставлениеДокументовВнеОтбора.Имя);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДПредставлениеДокументовВнеОтбора.Имя);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭДПредставлениеДокументовВнеОтбора.Имя);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭДПредставлениеДокументовВнеОтбора.Имя);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭДПредставлениеДокументовВнеОтбора.Имя);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПакетногоРежима_ОзнакомитьсяЭД()
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭД.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.Четность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;		
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючДокумента");
	
	ГруппаОтбораВыбранныхПакетов = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВыбранныхПакетов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаЧередованияСтрокиБЭД);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючДокумента");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПакетаДокументов());
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭДПредставлениеДокументовВнеОтбора.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.ПредставлениеДокументовВнеОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭДКонтрагент.Имя);	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.ПервыйДокументПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;		
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОзнакомитьсяЭД.КлючСортировкиПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОзнакомитьсяЭДПредставлениеДокументовВнеОтбора.Имя);	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПакетногоРежима_ОтправитьЭД()
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭД.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.Четность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;		
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючДокумента");
	
	ГруппаОтбораВыбранныхПакетов = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВыбранныхПакетов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаЧередованияСтрокиБЭД);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючДокумента");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПакетаДокументов());
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭДПредставлениеДокументовВнеОтбора.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.ПредставлениеДокументовВнеОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭДКонтрагент.Имя);	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.ПервыйДокументПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;		
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтправитьЭД.КлючСортировкиПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправитьЭДПредставлениеДокументовВнеОтбора.Имя);	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформлениеПакетногоРежима_ОшибкиЭД()
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭД.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.Четность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;		
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючДокумента");
	
	ГруппаОтбораВыбранныхПакетов = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВыбранныхПакетов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаЧередованияСтрокиБЭД);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючДокумента");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПакетаДокументов());
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭДПредставлениеДокументовВнеОтбора.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.ПредставлениеДокументовВнеОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭДКонтрагент.Имя);	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.ПервыйДокументПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;		
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОшибкиЭД.КлючСортировкиПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиЭДПредставлениеДокументовВнеОтбора.Имя);	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформлениеПакетногоРежима_ВходящиеЭД()
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭД.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.Четность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;		
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючДокумента");
	
	ГруппаОтбораВыбранныхПакетов = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВыбранныхПакетов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаЧередованияСтрокиБЭД);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючДокумента");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПакетаДокументов());
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДПредставлениеДокументовВнеОтбора.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.ПредставлениеДокументовВнеОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДКонтрагент.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.ПервыйДокументПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;		
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.КлючСортировкиПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДПредставлениеДокументовВнеОтбора.Имя);	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПакетногоРежима_ИсходящиеЭД()
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭД.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.Четность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;		
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючДокумента");
	
	ГруппаОтбораВыбранныхПакетов = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВыбранныхПакетов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбораВыбранныхПакетов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаЧередованияСтрокиБЭД);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючДокумента");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючиВыбранныхПакетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючПакета");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПакетаДокументов());
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДПредставлениеДокументовВнеОтбора.Имя);	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.ПредставлениеДокументовВнеОтбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДКонтрагент.Имя);	
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.ПервыйДокументПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;		
			
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.КлючСортировкиПакета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");		
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДПредставлениеДокументовВнеОтбора.Имя);	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьДополнительныеПоляПакетов(Строки)
	
	ПакетноеОтображение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО", "ПакетноеОтображение", Истина);
	
	КоличествоОтображаемыхДокументовПакета = Новый Соответствие;
	ИдентификаторыДокументовПакетов = Новый Соответствие;
	
	Четное = Ложь;
	
	ДанныеЧетности = Новый ТаблицаЗначений;
	ДанныеЧетности.Колонки.Добавить("Дата");
	ДанныеЧетности.Колонки.Добавить("Идентификатор");
	ДанныеЧетности.Колонки.Добавить("Номер");
	ДанныеЧетности.Колонки.Добавить("ПорядокСортировкиВПакете");
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;

		СтрДанныеЧетности = ДанныеЧетности.Добавить();
		
		СтрДанныеЧетности.Дата = ДанныеСтроки.ДатаПакета;
		СтрДанныеЧетности.Идентификатор = ДанныеСтроки.КлючСортировкиПакета;
		СтрДанныеЧетности.ПорядокСортировкиВПакете = ДанныеСтроки.ПорядокСортировкиВПакете;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) Тогда
			СтрДанныеЧетности.Номер = ДанныеСтроки.НомерСлужебный;
			Продолжить;
		КонецЕсли;
		
		ТекущееКоличествоДокументовВПакете = КоличествоОтображаемыхДокументовПакета[ДанныеСтроки.КлючСортировкиПакета];
		Если ТекущееКоличествоДокументовВПакете = Неопределено Тогда
			ТекущееКоличествоДокументовВПакете = 0;	
		КонецЕсли;
		КоличествоОтображаемыхДокументовПакета.Вставить(ДанныеСтроки.КлючСортировкиПакета, ТекущееКоличествоДокументовВПакете + 1);
	
		СписокДокументов = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета];
		Если СписокДокументов = Неопределено Тогда
			СписокДокументов = Новый ТаблицаЗначений;
			СписокДокументов.Колонки.Добавить("ПорядокСортировкиВПакете");
			СписокДокументов.Колонки.Добавить("НомерСлужебный");
		КонецЕсли;		
				
		Документ = СписокДокументов.Добавить();
		Документ.ПорядокСортировкиВПакете = ДанныеСтроки.ПорядокСортировкиВПакете;
		Документ.НомерСлужебный = ДанныеСтроки.НомерСлужебный;
		
		ИдентификаторыДокументовПакетов.Вставить(ДанныеСтроки.КлючСортировкиПакета, СписокДокументов);	
		
	КонецЦикла;	
		
	ДанныеЧетности.Сортировать("Дата Возр, Идентификатор Возр, ПорядокСортировкиВПакете Возр, Номер Возр");
	ДанныеЧетности.Свернуть("Номер, Дата, Идентификатор");	
	ДанныеЧетности.Индексы.Добавить("Идентификатор");
	ДанныеЧетности.Индексы.Добавить("Номер");
	ДанныеЧетности.Колонки.Добавить("Четность");
	
	Для Каждого Стр Из ДанныеЧетности Цикл
		Стр.Четность = Четное;
		Четное = Не Четное;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;
		
		ДанныеСтроки.КлючДокумента = Строка(ДанныеСтроки.ЭлектронныйДокумент.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторПакета) Тогда
			ДанныеСтроки.КлючПакета = Строка(ДанныеСтроки.ИдентификаторПакета);
		Иначе
			ДанныеСтроки.КлючПакета = "";
		КонецЕсли;
		
		ТекущиеИдентификаторы = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета];
		
		Если ТекущиеИдентификаторы <> Неопределено Тогда
			ТекущиеИдентификаторы.Сортировать("ПорядокСортировкиВПакете Возр, НомерСлужебный Возр");
				
			ТекущаяСтрока.Значение.Данные.ПервыйДокументПакета = ДанныеСтроки.НомерСлужебный = ТекущиеИдентификаторы[0].НомерСлужебный;
			ДанныеСтроки.Четность = ДанныеЧетности.Найти(ДанныеСтроки.КлючСортировкиПакета,"Идентификатор").Четность;	
			
			ДанныеСтроки.ИндексКартинкиПакета = 0;			
		 
			Если ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) И ПакетноеОтображение Тогда
				ДанныеСтроки.ИндексКартинкиПакета = 1;
			ИначеЕсли Не ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) И ПакетноеОтображение Тогда
				
				ДанныеСтроки.ИндексКартинкиПакета = 0;
				Если ДанныеСтроки.Свойство("ДатаПакета") Тогда
					ДанныеСтроки.ДатаПакета = ""; 
				КонецЕсли;
				Если ДанныеСтроки.Свойство("СостояниеЭДО") Тогда
					ДанныеСтроки.СостояниеЭДО = "";
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Ответственный") Тогда
					ДанныеСтроки.Ответственный = "";
				КонецЕсли;
				Если ДанныеСтроки.Свойство("ДополнительнаяИнформация") Тогда
					ДанныеСтроки.ДополнительнаяИнформация = "";
				КонецЕсли;
				
			КонецЕсли; 
			
			КоличествоОтображаемыхДокументов = КоличествоОтображаемыхДокументовПакета.Получить(ДанныеСтроки.КлючСортировкиПакета);
			
			Если ДанныеСтроки.НомерСлужебный = ТекущиеИдентификаторы[ТекущиеИдентификаторы.Количество()-1].НомерСлужебный
				И ДанныеСтроки.КоличествоДокументовВПакете > КоличествоОтображаемыхДокументов Тогда
				
				КоличествоСкрытыхДокументов = ДанныеСтроки.КоличествоДокументовВПакете - КоличествоОтображаемыхДокументов;
				ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
				
				ПредставлениеСкрытыхДокументов = СтрокаСЧислом(
					ШаблонСтроки,
					КоличествоСкрытыхДокументов,
					ВидЧисловогоЗначения.Количественное);
				
				ДанныеСтроки.ПредставлениеДокументовВнеОтбора = СтрШаблон("%1%2%3",
					НСтр("ru = 'и еще'"),
					Символы.НПП,
					ПредставлениеСкрытыхДокументов);
					
			КонецЕсли;
		Иначе
			
			ДанныеСтроки.ПервыйДокументПакета = Истина;
			ДанныеСтроки.ИндексКартинкиПакета = 0; 
			ДанныеСтроки.Четность = ДанныеЧетности.Найти(ДанныеСтроки.НомерСлужебный,"Номер").Четность;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьПросмотрПомеченныхНаУдаление()
	
	ПоказыватьПомеченныеНаУдаление = Не ПоказыватьПомеченныеНаУдаление;
	
	НастройкиОтображения = НастройкиОтображенияРазделов();
	УстановитьПараметрыСписковРазделов(НастройкиОтображения);
	
	ОбновитьЗаголовкиЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУтвержденияВходящихДокументов()

	ОтправлятьВходящиеДокументыНаУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	Если Не ОтправлятьВходящиеДокументыНаУтверждение Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;
	ИнициализироватьДерево();
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	НастроитьСпискиРазделов();
	ПоказатьРаздел("Входящие");

	ОбновитьНавигациюПоРазделамНаСервере(Истина, Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ИспользоватьПрочтениеДокументовЭДО = ПолучитьФункциональнуюОпцию("ИспользоватьПрочтениеДокументовЭДО");

	// Очистка установленного ранее условного оформления
	УсловноеОформление.Элементы.Очистить();
	ИменаСписков = "ВходящиеЭД,ИсходящиеЭД,ОзнакомитьсяЭД,ОтправитьЭД,ОшибкиЭД";
	ИменаСписков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСписков);
	Для каждого ИмяСписка Из ИменаСписков Цикл
		ЭтотОбъект[ИмяСписка].УсловноеОформление.Элементы.Очистить();
	КонецЦикла;

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧН=");

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Сформировать";

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидДокумента");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Отправить";

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидДокумента");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Распаковать";

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидДокумента");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяТекущейСтраницы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "СтраницаНаРучномРазборе";

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидДокумента");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	СписокЗначений.Добавить("Контрагент");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.ТребуетсяОбработка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь, ));

	// Скрытие строк дерева действий
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийНомерКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.Скрыть");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Видимость колонок редактирования быстрого отбора
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Видимость колонки с кнопкой
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыКнопка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Невалидные подписи по МЧД
	ИменаСписков = "ВходящиеЭД,ИсходящиеЭД,ОзнакомитьсяЭД,ОтправитьЭД,ОшибкиЭД";
	ИменаСписков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСписков);
	Для каждого ИмяСписка Из ИменаСписков Цикл

		Элемент = ЭтотОбъект[ИмяСписка].УсловноеОформление.Элементы.Добавить();
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеУдачнаяПроверкаМЧД);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьНевалидныеПодписиПоМЧД");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
		Если ЭтотОбъект[ИмяСписка].УсловноеОформление.ДоступныеПоляПолей.НайтиПоле(ПолеПометкаУдаления) <> Неопределено Тогда

			Шрифт = Новый Шрифт(ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);
	
			Элемент = ЭтотОбъект[ИмяСписка].УсловноеОформление.Элементы.Добавить();
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
	
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("Прочтен");
			Если ЭтотОбъект[ИмяСписка].УсловноеОформление.ДоступныеПоляПолей.НайтиПоле(ПолеПометкаУдаления) <> Неопределено
				И ИспользоватьПрочтениеДокументовЭДО Тогда
				
				Шрифт = Новый Шрифт(ШрифтыСтиля.ЗачеркнутыйШрифтБЭД, , , Истина, Ложь, Ложь, Истина);
	
				Элемент = ЭтотОбъект[ИмяСписка].УсловноеОформление.Элементы.Добавить();
	
				Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
	
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;
	
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтен");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Ложь;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;

	// Цвет гиперссылки по умолчанию
	Элемент = ВходящиеЭД.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтражениеВУчете");
	Элемент = ИсходящиеЭД.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтражениеВУчете");

	// Условное оформление списков документов.
	Элемент = ВходящиеЭД.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтражениеВУчете");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольОтраженияВУчете");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	Если ИспользоватьПрочтениеДокументовЭДО Тогда

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДОтражениеВУчете.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДКонтрагент.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДВидДокумента.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДДата.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();  
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДДатаПакета.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДНомер.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДСуммаДокумента.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДОрганизация.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДСостояниеЭДО.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеЭДОтветственный.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.Прочтен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВходящиеЭД.ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДОтражениеВУчете.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДКонтрагент.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДВидДокумента.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДДата.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить(); 
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДДатаПакета.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДНомер.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДСуммаДокумента.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДОрганизация.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДСостояниеЭДО.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеЭДОтветственный.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.Прочтен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеЭД.ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
	
	КонецЕсли;
	
	УстановитьУсловноеОформлениеПоИспользованиюПакетногоОтображения();

КонецПроцедуры

&НаКлиенте
Функция ДанныеВыделенныхСтрокРаздела(Знач Раздел, Знач ПутьКДанным,
		ПолучатьКлючСтроки = Ложь)

	МассивДанных = Новый Массив;
	ИспользоватьМассивРеквизитов = Ложь;

	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Элементы[ИмяТаблицы];

	Реквизиты = СтрЗаменить(ПутьКДанным, " ", "");
	МассивРеквизитов = СтрРазделить(Реквизиты, ",", Ложь);

	Если МассивРеквизитов.Количество() > 1 Или ПолучатьКлючСтроки Тогда
		ИспользоватьМассивРеквизитов = Истина;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Таблица.ВыделенныеСтроки Цикл

		Данные = Таблица.ДанныеСтроки(СтрокаТаблицы);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ИспользоватьМассивРеквизитов Тогда

			Результат = Новый Структура;

			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Результат.Вставить(Реквизит, Данные[Реквизит]);
			КонецЦикла;
			Результат.Вставить("КлючСтроки", СтрокаТаблицы);
			МассивДанных.Добавить(Результат);

		Иначе
			МассивДанных.Добавить(Данные[ПутьКДанным]);
		КонецЕсли;

	КонецЦикла;

	Возврат МассивДанных;

КонецФункции

&НаКлиенте
Функция ОбъектыДействий(СтрокиРаздела)

	Результат = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	
	Для Каждого СтрокаРаздела Из СтрокиРаздела Цикл
		
		ИдентификаторПакета = СтрокаРаздела.ИдентификаторПакета;
		
		Если ЗначениеЗаполнено(ИдентификаторПакета) И ПакетноеОтображение
			И Результат.ПакетыДокументов.Найти(ИдентификаторПакета) = Неопределено Тогда
			
			Результат.ПакетыДокументов.Добавить(ИдентификаторПакета);
		
		Иначе
			Результат.ЭлектронныеДокументы.Добавить(СтрокаРаздела.ЭлектронныйДокумент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДинамическиеСписки(ПеречитыватьДанные = Истина)

	ИмяСписка = СтрЗаменить(Элементы.ПанельСписков.ТекущаяСтраница.Имя, "Страница", "");

	Если ПеречитыватьДанные Тогда
		Элементы[ИмяСписка].Обновить();
	Иначе
		Элементы[ИмяСписка].ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусТранспортныхКонтейнеров(Знач МассивКонтейнеров, Знач СтатусКонтейнера,
		КоличествоИзмененных, КонтекстДиагностики)

	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивКонтейнеров Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если СинхронизацияЭДО.ИзменитьСтатусТранспортногоКонтейнера(СтрокаТаблицы.Ссылка, СтатусКонтейнера) Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
			КонецЕсли;
			КоличествоИзмененных = КоличествоИзмененных + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОперации = НСтр("ru = 'Изменение статуса транспортных контейнеров ЭД'");
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", СтрокаТаблицы.Ссылка);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ТекстОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДополнительныеПараметрыОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
				
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	Дерево.Строки.Очистить();

	СтрокаВходящие = Дерево.Строки.Добавить();
	СтрокаВходящие.Значение = "Входящие";
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Обработать";
	КонецЕсли;
	Если ОтправлятьВходящиеДокументыНаУтверждение Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Утвердить";
	КонецЕсли;
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Исправить";
	КонецЕсли;
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";

	СтрокаИсходящие = Дерево.Строки.Добавить();
	СтрокаИсходящие.Значение = "Исходящие";
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "Сформировать";
	КонецЕсли;
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ПодписатьИсх";
	КонецЕсли;
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ИсправитьИсх";
	КонецЕсли;

	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "АннулироватьИсх";
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтролеИсх";

	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "НоменклатураКонтрагентов";
	КонецЕсли;

	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Ознакомиться";

	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Отправить";
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Распаковать";
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Ошибки";

		СтрокаПриглашения = Дерево.Строки.Добавить();
		СтрокаПриглашения.Значение = "Приглашения";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ТребуетсяПригласить";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ЖдемСогласия";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ТребуетсяСогласие";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ПриглашенияОзнакомиться";

	КонецЕсли;

	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()

	БыстрыеОтборы.Очистить();

	НазваниеСправочникаКонтрагенты = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	ИспользуетсяНесколькоОрганизацийЭД = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();

	Если ИспользуетсяНесколькоОрганизацийЭД Тогда

		НазваниеСправочникаОрганизации = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Организации");
		Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
			НазваниеСправочникаОрганизации = "Организации";
		КонецЕсли;

		НоваяСтрока = БыстрыеОтборы.Добавить();
		НоваяСтрока.Параметр = "Организация";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
		НоваяСтрока.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации;
		НоваяСтрока.Значение = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации");
		НоваяСтрока.Кнопка = "";
	КонецЕсли;

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Контрагенты");
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1, 1, 1);
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1, 1, 1);
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидДокумента";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "СправочникСсылка.ВидыДокументовЭДО";
	НоваяСтрока.Значение = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	НоваяСтрока.Кнопка = "";

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "";

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтениеДокументовЭДО") Тогда
		
		НоваяСтрока = БыстрыеОтборы.Добавить();
		НоваяСтрока.Параметр = "Прочтен";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Прочтен:'");
		НоваяСтрока.Тип = "Булево";
		НоваяСтрока.Значение = Неопределено;
		НоваяСтрока.Кнопка = "";
		
	КонецЕсли;

	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ПользовательскийОтбор";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дополнительно'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "еще";

КонецПроцедуры

&НаСервере
Процедура РежимОтображенияПриИзмененииНаСервере()

	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	ОбновитьНавигациюПоРазделамНаСервере();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "ПакетноеОтображение", ПакетноеОтображение);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "РежимОтображения", РежимОтображения);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "ПоказыватьОбластьПросмотра", ПоказыватьОбластьПросмотра);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "ПоказыватьОбластьЛегенды", ПоказыватьОбластьЛегенды);

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ИзменитьНазваниеКнопкиНастройкиОтображения();
	Иначе
		ОбновитьЗаголовокФормы();
	КонецЕсли;	
				
	УстановитьВариантОтображенияДокументовСписка("ИсходящиеЭД");
	УстановитьВариантОтображенияДокументовСписка("ВходящиеЭД");
	УстановитьВариантОтображенияДокументовСписка("ОшибкиЭД");
	УстановитьВариантОтображенияДокументовСписка("ОтправитьЭД");
	УстановитьВариантОтображенияДокументовСписка("ОзнакомитьсяЭД");
	
	ОбновитьВидимостьОбластей();
	
	НастроитьСпискиРазделов();		
	УстановитьУсловноеОформление();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПрименитьОтборыКРазделу(ТекущийРаздел);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОбластей()
	
	Элементы.ГруппаЛегенда.Видимость = ПоказыватьОбластьЛегенды;
	Элементы.ГруппаОбластьПросмотра.Видимость = ПоказыватьОбластьПросмотра;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОтображенияДокументовСписка(ИмяСписка)

	ПоляОграничения = Новый Массив;	
			
	Если ПакетноеОтображение Тогда	

		БазовыеНастройкиКомпоновки = Новый КомпоновщикНастроекКомпоновкиДанных;
		БазовыеНастройкиКомпоновки.ЗагрузитьНастройки(ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки);
		БазовыеНастройкиКомпоновки.Настройки.Порядок.Элементы.Очистить();
		
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(БазовыеНастройкиКомпоновки.ПользовательскиеНастройки);
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
		ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаПакета");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("КлючСортировкиПакета");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокСортировкиВПакете");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("НомерСлужебный");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементПорядка.Использование = Истина;
		
		СлужебныеПоляПорядка = Новый Массив;
		СлужебныеПоляПорядка.Добавить("КлючСортировкиПакета");
		СлужебныеПоляПорядка.Добавить("ДатаПакета");
		СлужебныеПоляПорядка.Добавить("ПорядокСортировкиВПакете");
		СлужебныеПоляПорядка.Добавить("НомерСлужебный");
	
		Для Каждого ПолеПорядка Из ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
			ИмяПоля = Строка(ПолеПорядка.Поле);
			Если СлужебныеПоляПорядка.Найти(ИмяПоля) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПоляОграничения.Добавить(ИмяПоля);
		КонецЦикла;	
		
		Если ПоляОграничения.Количество() > 0 Тогда
			ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВПорядке(ПоляОграничения);
		КонецЕсли;	
		
	Иначе	
		
		ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВПорядке(ПоляОграничения);	
			
	КонецЕсли;	
			
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()

	Если РежимОтображения = "КИсполнению" Тогда
		СуффиксЗаголовка = НСтр("ru = 'к исполнению'");
	ИначеЕсли РежимОтображения = "МоиДокументы" Тогда
		СуффиксЗаголовка = НСтр("ru = 'мои документы'");
	ИначеЕсли РежимОтображения = "ВсеДокументы" Тогда
		СуффиксЗаголовка = НСтр("ru = 'весь документооборот'");
	Иначе
		СуффиксЗаголовка = "";
	КонецЕсли;

	Если ПакетноеОтображение Тогда
		СуффиксЗаголовка = СуффиксЗаголовка + НСтр("ru = ', по пакетам'");
	Иначе
		СуффиксЗаголовка = СуффиксЗаголовка + НСтр("ru = ', по документам'");
	КонецЕсли;

	Заголовок = СтрШаблон(НСтр("ru = 'Текущие дела ЭДО (%1)'"), СуффиксЗаголовка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиЭлементов()

	Если НастройкиЭДО.ИспользуютсяВнутренниеДокументы() Тогда
		ЗаголовокКолонкиКонтрагентИсходящихЭД = НСтр("ru = 'Контрагент / Организация'");
	Иначе
		ЗаголовокКолонкиКонтрагентИсходящихЭД = НСтр("ru = 'Контрагент'");
	КонецЕсли;
	
	Элементы.ИсходящиеЭДКонтрагент.Заголовок = ЗаголовокКолонкиКонтрагентИсходящихЭД;
	Элементы.СформироватьЭДКонтрагент.Заголовок = ЗаголовокКолонкиКонтрагентИсходящихЭД;
	
	Если НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов() Тогда
		Элементы.КомандаОтправить.Заголовок = НСтр("ru = 'Подготовить к отправке'");
	Иначе
		Элементы.КомандаОтправить.Заголовок = НСтр("ru = 'Отправить'");
	КонецЕсли;
	
	Если ПоказыватьПомеченныеНаУдаление Тогда
		Элементы.ПоказыватьПомеченныеНаУдаление.Заголовок = НСтр("ru = 'Скрыть помеченные на удаление'");
	Иначе
		Элементы.ПоказыватьПомеченныеНаУдаление.Заголовок = НСтр("ru = 'Показывать помеченные на удаление'");		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРазделовДерева(Дерево, РежимОтображения)

	РазделыСПеременнойВидимостью = Новый Структура;

	Скрыть = РежимОтображения = "КИсполнению";
	РазделыСПеременнойВидимостью.Вставить("НаКонтроле", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("НаКонтролеИсх", Скрыть);

	Скрыть = РежимОтображения = "МоиДокументы";
	РазделыСПеременнойВидимостью.Вставить("Сформировать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Приглашения", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяПригласить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяСогласие", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ПриглашенияОзнакомиться", Скрыть);

	Скрыть = РежимОтображения <> "ВсеДокументы";
	РазделыСПеременнойВидимостью.Вставить("Отправить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Распаковать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ЖдемСогласия", Скрыть);

	Скрыть = Не ИспользоватьЭП;
	РазделыСПеременнойВидимостью.Вставить("Подписать", Скрыть);

	Скрыть = Не НастройкиЭДО.ОзнакомлениеСЭлектроннымиДокументами();
	РазделыСПеременнойВидимостью.Вставить("Ознакомиться", Скрыть);

	Для Каждого Раздел Из РазделыСПеременнойВидимостью Цикл
		УстановитьЗначениеРеквизитаДерева(Дерево, Раздел.Ключ, "Скрыть", Раздел.Значение);
	КонецЦикла;

	Для каждого Раздел Из ОписаниеРазделов Цикл

		Скрыть = Ложь;
		Если РазделыСПеременнойВидимостью.Свойство(Раздел.Имя, Скрыть) Тогда
			Раздел.Видимость = Не Скрыть;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРеквизитаДерева(Дерево, ИмяДействия, ИмяРеквизита,
		Значение, Установлено = Ложь)

	Для Каждого ПодчиненнаяСтрока Из Дерево.ПолучитьЭлементы() Цикл
		Если ПодчиненнаяСтрока.Значение = ИмяДействия Тогда
			ПодчиненнаяСтрока[ИмяРеквизита] = Значение;
			Установлено = Ложь;
		Иначе
			УстановитьЗначениеРеквизитаДерева(ПодчиненнаяСтрока, ИмяДействия, ИмяРеквизита, Значение, Установлено);
		КонецЕсли;

		Если Установлено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)

	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Количество = 0;
	УстановитьСтатусТранспортныхКонтейнеров(МассивЭД, ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Отменен"), Количество, КонтекстДиагностики);
	ТекстОповещения = НСтр("ru = 'Изменен статус транспортного контейнера на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьНавигациюПоРазделам();
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВидовДокументовДляОтбора()
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(ИнтерфейсДокументовЭДО.ВидыЭлектронныхДокументовДоступныеДляОтборов());
	Возврат СписокВозврата;

КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", Доступность);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяПрикладногоСправочника(Название)

	Возврат ИнтеграцияЭДО.ИмяПрикладногоСправочника(Название);

КонецФункции

&НаКлиенте
Процедура ВыполнитьОтправкуПриглашенийВАрхив()

	ВыбранныеИдентификаторы = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "КлючПриглашения, ИдентификаторОрганизации, ИдентификаторКонтрагента");
	Если ВыбранныеИдентификаторы.Количество() > 0 Тогда
		Отправлено = ВыполнитьОтправкуПриглашенийВАрхивНаСервере(ВыбранныеИдентификаторы);
		Если Отправлено > 0 Тогда
			Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 приглашение;;%1 приглашения;%1 приглашений;%1 приглашения'"), Отправлено);
			Шаблон = НСтр("ru = 'В архив отправлено %1'");
			ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'"), , СтрШаблон(Шаблон, Строка));
		КонецЕсли;
		РазблокироватьЗаблокированныеЭлементыФормы();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьОтправкуПриглашенийВАрхивНаСервере(Знач ВыбранныеИдентификаторы)
	Отправлено = ОтправитьПриглашенияВАрхив(ВыбранныеИдентификаторы);
	ОбновитьНавигациюПоРазделамНаСервере();
	Возврат Отправлено;	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьПриглашенияВАрхив(ВыбранныеИдентификаторы)

	Возврат ПриглашенияЭДО.ОтправитьПриглашенияВАрхив(ВыбранныеИдентификаторы);

КонецФункции

&НаКлиенте
Процедура НачатьПринятиеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Принять());

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтклонениеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отклонить());

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтзывПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отозвать());

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашения(Действие)

	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
"КлючПриглашения, ИдентификаторОрганизации, Организация, ИдентификаторКонтрагента, СпособОбменаЭД, Контрагент, НовыйКонтрагент");
	
	ВходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл
		ВходящееПриглашение = СинхронизацияЭДОКлиент.НовоеВходящееПриглашение();
		ЗаполнитьЗначенияСвойств(ВходящееПриглашение, ДанныеПриглашения, , "Контрагент");
		Если ТипЗнч(ДанныеПриглашения.Контрагент) = ТипЗнч(ПустойКонтрагент) Тогда
			ВходящееПриглашение.Контрагент = ДанныеПриглашения.Контрагент;
		Иначе
			ВходящееПриглашение.Контрагент = ПустойКонтрагент;
		КонецЕсли;
		ВходящееПриглашение.СпособОбмена = ДанныеПриглашения.СпособОбменаЭД;
		ВходящиеПриглашения.Добавить(ВходящееПриглашение);
	КонецЦикла;

	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОтветовНаПриглашения", ЭтотОбъект, Новый Структура("ОтветНаПриглашение", Действие));

	Если Действие = ОтветНаПриглашение_Принять() Тогда
		СинхронизацияЭДОКлиент.ПринятьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отклонить() Тогда
		СинхронизацияЭДОКлиент.ОтклонитьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отозвать() Тогда
		СинхронизацияЭДОКлиент.ОтозватьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУтвердитьПодписатьИОтправить()

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;
		
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыйПоиск()

	Элементы.ЗаголовокОтбора.Заголовок = НСтр("ru = 'Быстрый поиск'")
		+ ?(ПоказатьБыстрыйПоиск, " " + НСтр("ru = '(скрыть)'"), " "
		+ НСтр("ru = '(показать)'"));

	Элементы.БыстрыеОтборы.Видимость = ПоказатьБыстрыйПоиск;

КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьЗаблокированныеЭлементыФормы()

	Для Каждого ЗаблокированныйЭлементыФормы Из ЗаблокированныеЭлементыФормы Цикл

		Элементы[ЗаблокированныйЭлементыФормы.Значение].Доступность = Истина;

	КонецЦикла;

	ЗаблокированныеЭлементыФормы.Очистить();

КонецПроцедуры

&НаКлиенте
Функция ЭлектронныеДокументыНаОзнакомление(Знач ИдентификаторыСтрок)

	ЭлектронныеДокументы = Новый Массив;

	Для каждого Идентификатор Из ИдентификаторыСтрок Цикл

		Строка = Элементы.ОзнакомитьсяЭД.ДанныеСтроки(Идентификатор);
		ЭлектронныеДокументы.Добавить(Строка.ЭлектронныйДокумент);

	КонецЦикла;

	Возврат ЭлектронныеДокументы;

КонецФункции

&НаКлиенте
Процедура ОтправкаПолучениеЭДЗавершение(Результат, Контекст) Экспорт

	Элементы.ОтправитьИПолучитьЭД.Доступность = Истина;

	#Если МобильныйКлиент Тогда
	Элементы.ОтправитьИПолучитьЭД.Картинка = БиблиотекаКартинок.Обновить;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытьЭлектронныйДокументДляПросмотра");

	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ДанныеСтроки.ЭлектронныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПереопределяемыхЭлементовФормы()

	МетаданныеСопоставления = СопоставлениеНоменклатурыКонтрагентовСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	Элементы.НоменклатураКонтрагентовВладелец.Заголовок = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.КомандаОткрытьНоменклатуруКонтрагентов.Заголовок = МетаданныеСопоставления.НоменклатураКонтрагентаПредставлениеСписка;

КонецПроцедуры

&НаСервере
Процедура УстановитьРежимОтображения(Знач НовыйРежимОтображения)

	ДопустимыеРежимы = Новый Массив;
	ДопустимыеРежимы.Добавить("ВсеДокументы");
	ДопустимыеРежимы.Добавить("МоиДокументы");
	ДопустимыеРежимы.Добавить("КИсполнению");

	Если ДопустимыеРежимы.Найти(НовыйРежимОтображения) = Неопределено Тогда

		ШаблонИсключения = НСтр("ru = 'Недопустимый режим отображения текущих дел ЭДО: {%1}'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения, НовыйРежимОтображения);

	Иначе
		РежимОтображения = НовыйРежимОтображения;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветФонаПакетаДокументов()
	Возврат Новый Цвет(254, 243, 199);
КонецФункции

&НаСервере
Процедура ВывестиВерсиюБЭД()
	
	ШаблонТекстВерсии = НСтр("ru = 'Версия модуля ЭДО: %1'");
	ТекстВерсии = СтрШаблон(ШаблонТекстВерсии, ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	Элементы.НадписьВерсияБЭД.Заголовок = ТекстВерсии;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранныеДанные()
	
	МассивВыбранныхСтрок = Новый Массив;
	МассивВыбранныхПакетов = Новый Массив;
	
	ВыбранныеДанные = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "КлючДокумента, КлючПакета");
	
	Для Каждого Данные Из ВыбранныеДанные Цикл
		
		МассивВыбранныхСтрок.Добавить(Данные.КлючДокумента);
		
		Если ЗначениеЗаполнено(Данные.КлючПакета) И ПакетноеОтображение Тогда
			МассивВыбранныхПакетов.Добавить(Данные.КлючПакета);
		КонецЕсли;
		
	КонецЦикла;
	
	КлючиВыбранныхДокументов = СтрСоединить(МассивВыбранныхСтрок, ",");
	КлючиВыбранныхПакетов = СтрСоединить(МассивВыбранныхПакетов, ",");
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПодбораОбъектовУчета()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ТекущийЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ВидДокумента", ТекущийЭлектронныйДокумент.ВидДокумента);
	ПараметрыФормы.Вставить("ДокументРаспознан", РаспознатьДокумент(ТекущийЭлектронныйДокумент));
	
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура РазвернутьУзлыДереваОтложенно()
	
	ОбщегоНазначенияБЭДКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоДействий");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВалидацииОтборов()
	Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	ШаблонТекста = НСтр(
		"ru = 'В форме текущих дел ЭДО не установлен отбор ""[Параметр]"".
		|Тип значения параметра ""[ТипЗначения]"" не соответствует типу отбора ""[Тип]""'");
	ШаблонПредупреждения = Новый Структура;
	ШаблонПредупреждения.Вставить("ШаблонТекста", ШаблонТекста);
	ШаблонПредупреждения.Вставить("Подсистема", Подсистема);

	ПараметрыВалидацииОтборов = Новый Структура;
	ПараметрыВалидацииОтборов.Вставить("РегистрироватьПредупреждение", Истина);
	ПараметрыВалидацииОтборов.Вставить("ШаблонПредупреждения", ШаблонПредупреждения);
	Возврат ПараметрыВалидацииОтборов;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПредупреждение(Данные, ШаблонПредупреждения)
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредупреждения.ШаблонТекста,
		Данные);
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения, ШаблонПредупреждения.Подсистема,
		УровеньЖурналаРегистрации.Предупреждение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементОтбораВалиден(ЭлементОтбора, ПараметрыВалидацииОтборов)
	ЭлементОтбораВалиден = Истина;

	ОписаниеТипов = Новый ОписаниеТипов(ЭлементОтбора.Тип);
	ТипЗначения = ТипЗнч(ЭлементОтбора.Значение);
	Если ЭлементОтбора.Значение <> Неопределено И Не ОписаниеТипов.СодержитТип(ТипЗначения) Тогда
		ЭлементОтбораВалиден = Ложь;
		Если ПараметрыВалидацииОтборов.РегистрироватьПредупреждение Тогда
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("Параметр", ЭлементОтбора.Параметр);
			ПараметрыПредупреждения.Вставить("Тип", ЭлементОтбора.Тип);
			ПараметрыПредупреждения.Вставить("ТипЗначения", ТипЗначения);
			ЗарегистрироватьПредупреждение(ПараметрыПредупреждения, ПараметрыВалидацииОтборов.ШаблонПредупреждения);
		КонецЕсли;
	КонецЕсли;

	Возврат ЭлементОтбораВалиден;
КонецФункции

&НаСервере
Процедура ЗагрузитьОтборы()
	ПараметрыВалидацииОтборов = ПараметрыВалидацииОтборов();
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	СтруктураПоиска = Новый Структура("Параметр, Тип", Неопределено, "");
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если Не ЭлементОтбораВалиден(ЭлементОтбора, ПараметрыВалидацииОтборов) Тогда
			СохраняемыеВНастройкахДанныеМодифицированы = Истина;
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементОтбора);
		НайденныеСтроки = БыстрыеОтборы.НайтиСтроки(СтруктураПоиска);
		Для Каждого ЭлементКоллекции Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтраженияВУчете

///////////////////////////////////////////////////////////////////////////////////
// Создание учетного документа
&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()

	ТекущиеДанные = Элементы.ВходящиеЭД.ТекущиеДанные;
	
	Если ТекущийРаздел = "Исходящие" Тогда
		ТекущиеДанные = Элементы.ИсходящиеЭД.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);
	
	ДокументРаспознан = РаспознатьДокумент(ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ДокументРаспознан", ДокументРаспознан);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознатьДокумент(ЭлектронныйДокумент)
	
 	Результат = Ложь;
 	
 	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
 	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
 		И ЭлектронныйДокумент.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
 		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
 		РезультатРаспознавания =
 			МодульЭлектронноеАктированиеЕИС.РаспознатьСообщение(СообщениеОтправителя);
 		Результат = ЗначениеЗаполнено(РезультатРаспознавания);
 	Иначе
 		Результат = ЗначениеЗаполнено(ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя));
 	КонецЕсли;
 	
 	Возврат Результат;
 	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Открытие учетного документа
&НаКлиенте
Процедура ПоказатьУчетныйДокумент(Знач ИмяТаблицы = "ВходящиеЭД")

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НаборУчетныхДокументов = ОбъектыУчетаЭлектронногоДокумента(ТекущиеДанные.ЭлектронныйДокумент);

	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные);
		Возврат;
	КонецЕсли;

	Если НаборУчетныхДокументов.Количество() = 1 Тогда

		ПоказатьЗначение(, НаборУчетныхДокументов[0]);

	Иначе

		СписокУчетныхДокументов = Новый СписокЗначений;
		СписокУчетныхДокументов.ЗагрузитьЗначения(НаборУчетныхДокументов);
		Обработка = Новый ОписаниеОповещения("ОбработатьВыборУчетногоДокументаДляПоказа", ЭтотОбъект);
		СписокУчетныхДокументов.ПоказатьВыборЭлемента(Обработка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУчетногоДокументаДляПоказа(Знач ВыбранныйЭлемент,
		Знач ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыУчетаЭлектронногоДокумента(Знач ЭлектронныйДокумент)

	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);

	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Основания;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Проведение учетного документа
&НаСервереБезКонтекста
Функция УчетныеДокументыНаКонтролеПроведенияЭД(Знач ЭлектронныеДокументы)

	ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаНаКонтролеПроведения(ЭлектронныеДокументы);

	Возврат ОбъектыУчета;

КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОПроведенииУчетныхДокументов(Знач НаборУчетныхДокументов)

	ШаблонВопроса = НСтр("ru = 'Провести учетные документы (%1)?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, НаборУчетныхДокументов.Количество());

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НаборУчетныхДокументов", НаборУчетныхДокументов);

	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОПроведенииУчетныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОПроведенииУчетныхДокументов(Знач Ответ,
		Знач ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	НаборУчетныхДокументов = ДополнительныеПараметры.НаборУчетныхДокументов;

	НепроведенныеДокументы = ПровестиДокументы(НаборУчетныхДокументов);
	ОбновитьНавигациюПоРазделам();

	ВсегоДокументов = НаборУчетныхДокументов.Количество();
	ПроведеноДокументов = ВсегоДокументов - НепроведенныеДокументы.Количество();

	ТекстОповещения = НСтр("ru = 'Проведение учетных документов'");
	ШаблонПояснения = НСтр("ru = 'Проведено %1 из %2.'");
	ТекстПояснения = СтрШаблон(ШаблонПояснения, ПроведеноДокументов, ВсегоДокументов);
	ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПровестиДокументы(Знач НаборДокументов)

	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(НаборДокументов);

	Для Каждого Описание Из НепроведенныеДокументы Цикл

		ШаблонСообщения = НСтр("ru = 'Не удалось провести %1 по причине:'")
			+ Символы.ПС + Описание.ОписаниеОшибки;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Описание.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецЦикла;

	Возврат НепроведенныеДокументы;

КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

&НаКлиенте
Процедура ПоказатьСопоставлениеНоменклатуры()

	НоменклатураДляСопоставления = Новый Массив;

	Если ТекущийРаздел = "НоменклатураКонтрагентов" Тогда

		Владельцы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.НоменклатураКонтрагентов.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.НоменклатураКонтрагентов.ДанныеСтроки(СтрокаСписка);
			Владельцы.Добавить(ДанныеСтроки.Владелец);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоВладельцам(Владельцы);

	Иначе

		ЭлектронныеДокументы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.ВходящиеЭД.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВходящиеЭД.ДанныеСтроки(СтрокаСписка);
			ЭлектронныеДокументы.Добавить(ДанныеСтроки.ЭлектронныйДокумент);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоЭД(ЭлектронныеДокументы);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
		ТекстСообщения = НСтр("ru = 'Сопоставление номенклатуры не требуется.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("НоменклатураДляСопоставления", НоменклатураДляСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьСопоставлениеНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НоменклатураДляСопоставления, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставлениеНоменклатуры(Результат,
		ДополнительныеПараметры) Экспорт

	ОбновитьНавигациюПоРазделам();

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураПоЭД(Знач ЭлектронныеДокументы)


	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныеДокументы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоВладельцам(Знач Владельцы)

	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(, Владельцы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

#КонецОбласти

#Область ПеречислениеОтветовНаПриглашение

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Принять()
	Возврат "Принять";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отклонить()
	Возврат "Отклонить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отозвать()
	Возврат "Отозвать";
КонецФункции

#КонецОбласти

#Область МобильныйКлиент

&НаКлиенте
Процедура ПослеВыбораРазделаМК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		НовыйРаздел = Результат;
		Если НовыйРаздел <> ТекущийРаздел Тогда
			ПриИзмененииРаздела(НовыйРаздел);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОформитьИнтерфейсДляМобильногоКлиентаНаСервере()

	ИнтерфейсДокументовЭДО.СкрытьВсеЭлементыФормы(Элементы);
	
	Заголовок = НСтр("ru = 'Документы ЭДО'");

	ВидимыеЭлементы = "ГруппаОсновная, ОтправитьИПолучитьЭД, ГруппаПраво, ГруппаКоманды, ВыбратьДействиеМК,
		|ГруппаКомандыОбщие, ИзменитьРежимПросмотра, ПанельСписков, СтраницаВходящиеЭД, ВходящиеЭД,
		|ВходящиеЭДКонтекстноеМенюУтвердитьЭД, ВернутьНаПодготовкуКОтправке, ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование,
		|ВходящиеЭДКонтекстноеМенюЗакрытьПринудительно, ВходящиеЭДКонтекстноеМенюПеренаправить,
		|ВходящиеЭДКонтекстноеМенюГруппа, ВходящиеЭДСуммаДокумента, ВходящиеЭДКонтрагент,
		|ВходящиеЭДСостояниеЭДО, ВходящиеЭДЭлектронныйДокумент, СтраницаИсходящиеЭД, ИсходящиеЭД,
		|ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование, ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх,
		|ИсходящиеЭДКонтекстноеМенюЗакрытьПринудительно, ИсходящиеЭДКонтекстноеМенюПеренаправить,
		|ИсходящиеЭДКонтекстноеМенюГруппа, ИсходящиеЭДСуммаДокумента, ИсходящиеЭДКонтрагент,
		|ИсходящиеЭДСостояниеЭДО, ИсходящиеЭДЭлектронныйДокумент, СтраницаОзнакомитьсяЭД, ОзнакомитьсяЭД,
		|ОзнакомитьсяЭДОтправитьВАрхив, ОзнакомитьсяЭДПеренаправить, ОзнакомитьсяЭДГруппа,
		|ОзнакомитьсяЭДСостояниеЭДО, ОзнакомитьсяЭДКонтрагент, ОзнакомитьсяЭДСуммаДокумента,
		|ОзнакомитьсяЭДЭлектронныйДокумент, ОбработкаЭлектронныеДокументыАрхивЭДООткрыть";
	
	ИнтерфейсДокументовЭДО.УстановитьВидимостьЭлементов(Элементы, ВидимыеЭлементы);
	
	ОтправитьИПолучитьЭД = Элементы.Найти("ОтправитьИПолучитьЭД");
	Если ОтправитьИПолучитьЭД <> Неопределено Тогда
		ОтправитьИПолучитьЭД.Заголовок = НСтр("ru = 'Синхронизировать'");
		ИнтерфейсДокументовЭДО.ПереместитьЭлемент(Элементы, "ОтправитьИПолучитьЭД", "ГруппаПраво")
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправитьИПолучитьЭД", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПраво", "ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправитьИПолучитьЭД", "Шрифт", ШрифтыСтиля.КрупныйШрифтТекста);
	Команды["ИзменитьРежимПросмотра"].Отображение = ОтображениеКнопки.Текст;
	ИзменитьНазваниеКнопкиНастройкиОтображения();

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "Шапка", Ложь);

	ТекстЗапроса = СтрЗаменить(ВходящиеЭД.ТекстЗапроса, """КартинкаМК""", ТекстЗапросаКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ВходящиеЭД, СтруктураСвойствДинамическогоСписка);

	ТекстЗапроса = СтрЗаменить(ИсходящиеЭД.ТекстЗапроса, """КартинкаМК""", ТекстЗапросаКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ИсходящиеЭД, СтруктураСвойствДинамическогоСписка);

	ТекстЗапроса = СтрЗаменить(ОзнакомитьсяЭД.ТекстЗапроса, """КартинкаМК""", ТекстЗапросаОзнакомитьсяКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ОзнакомитьсяЭД, СтруктураСвойствДинамическогоСписка);

	ИнтерфейсДокументовЭДО.ПереместитьЭлемент(Элементы, "ВходящиеЭДКонтрагент", "ВходящиеЭД", "ВходящиеЭДСуммаДокумента");
	ИнтерфейсДокументовЭДО.ПереместитьЭлемент(Элементы, "ИсходящиеЭДКонтрагент", "ИсходящиеЭД", "ИсходящиеЭДСуммаДокумента");
	ИнтерфейсДокументовЭДО.ПереместитьЭлемент(Элементы, "ОзнакомитьсяЭДКонтрагент", "ОзнакомитьсяЭД", "ОзнакомитьсяЭДЭлектронныйДокумент");
	ИнтерфейсДокументовЭДО.ПереместитьЭлемент(Элементы, "ОзнакомитьсяЭДСуммаДокумента", "ОзнакомитьсяЭД", "ОзнакомитьсяЭДЭлектронныйДокумент");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "ПутьКДаннымКартинкиСтроки", "ВходящиеЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "ПутьКДаннымКартинкиСтроки", "ИсходящиеЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "ПутьКДаннымКартинкиСтроки", "ОзнакомитьсяЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);

КонецПроцедуры

&НаСервере
Процедура ИзменитьНазваниеКнопкиНастройкиОтображения()

	Если РежимОтображения = "КИсполнению" Тогда
		ЗаголовокКнопки = НСтр("ru = 'К исполнению'");
	ИначеЕсли РежимОтображения = "МоиДокументы" Тогда
		ЗаголовокКнопки = НСтр("ru = 'Мои документы'");
	Иначе
		ЗаголовокКнопки = НСтр("ru = 'Все документы'");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИзменитьРежимПросмотра", "Заголовок", ЗаголовокКнопки);

КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий()

	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДействий");
	Возврат ПоместитьВоВременноеХранилище(ДеревоЗначений, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбновитьНазваниеРазделаМК()

	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДействий");
	НайденнаяСтрока = ДеревоЗначений.Строки.Найти(ТекущийРаздел, "Значение", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьДействиеМК", "Заголовок", НайденнаяСтрока.Представление);

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаКартинкаМК()

	Возврат "
		|ВЫБОР
		|	КОГДА СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован))
		|		ТОГДА 0
		|	КОГДА  СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.УдалитьОжидаетсяОтправкаПолучателю), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора))
		|		ТОГДА 1
		|	КОГДА  СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение))
		|			ИЛИ НЕ СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения))
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовЭДО.Утвержден)
		|	ТОГДА 2
		|	ИНАЧЕ 4
		|КОНЕЦ"
КонецФункции

&НаСервере
Функция ТекстЗапросаОзнакомитьсяКартинкаМК()

	Возврат "
		|ВЫБОР
		|	КОГДА СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован)
		|		ТОГДА 0
		|	КОГДА СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
		|		ТОГДА 3
		|	ИНАЧЕ 4
		|КОНЕЦ"
КонецФункции

#КонецОбласти

#Область КонтекстныеПодсказки

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;

	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьПросмотра

&НаКлиенте
Процедура ОчиститьОбластьПросмотраЕслиСписокПуст()

	ТекущийСписок = ПолучитьТекущийСписок();
	Если ТекущийСписок = Неопределено Или ТекущийСписок.ТекущиеДанные = Неопределено Тогда
		ОчиститьОбластьПросмотра();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийСписок() 
		
	Если Элементы.ПанельСписков.ТекущаяСтраница = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ИмяСписка = СтрЗаменить(Элементы.ПанельСписков.ТекущаяСтраница.Имя, "Страница", "");
		Возврат Элементы[ИмяСписка]; 
	КонецЕсли;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ДанныеОтраженияВУчете(Знач ТекущийЭлектронныйДокумент, 	Знач ДанныеВходящегоЭлектронногоДокумента)

	ДанныеОтражения = Новый Структура;
	ДанныеОтражения.Вставить("Ссылка", Неопределено);
	ДанныеОтражения.Вставить("Представление", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ТекущийЭлектронныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	ОснованияЭД = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ОснованияЭД) Тогда

		КоличествоОснований = ОснованияЭД.Количество();
		Если КоличествоОснований = 1 Тогда
			ДанныеОтражения.Представление = Строка(ОснованияЭД[0].ОбъектУчета);
			ДанныеОтражения.Ссылка = ОснованияЭД[0].ОбъектУчета;
		Иначе
			ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
			ДанныеОтражения.Представление = СтрокаСЧислом(ШаблонСтроки, КоличествоОснований, ВидЧисловогоЗначения.Количественное);
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ТекущийЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
	
			Если ДанныеВходящегоЭлектронногоДокумента = Неопределено Тогда
				Возврат ДанныеОтражения;
			КонецЕсли;
		
			Если ДанныеВходящегоЭлектронногоДокумента.КонтрольОтраженияВУчете = 0 Тогда
				ДанныеОтражения.Представление = НСтр("ru = 'Сопоставить номенклатуру'");
			ИначеЕсли ДанныеВходящегоЭлектронногоДокумента.КонтрольОтраженияВУчете = 1 Тогда
				Если ДанныеВходящегоЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
					ДанныеОтражения.Представление = НСтр("ru = 'Создать контракт'");
				Иначе
					ДанныеОтражения.Представление = НСтр("ru = 'Создать документы'");
				КонецЕсли;
			ИначеЕсли ДанныеВходящегоЭлектронногоДокумента.КонтрольОтраженияВУчете = 2 Тогда
				ДанныеОтражения.Представление = НСтр("ru = 'Провести документы'");
			Иначе
				ДанныеОтражения.Представление = НСтр("ru = '<Не требуется>'");
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеОтражения;

КонецФункции

&НаСервере
Процедура ОчиститьОбластьПросмотра()
	
	Элементы.ГруппаФайл.Видимость = Ложь;
	Элементы.ТекущийДокументУчетаПредставление.Видимость = Ложь;
	ТекущийДокументТабличныйДокумент = Новый ТабличныйДокумент;
	
	Элементы.ТекущееСостояниеЭДОФайл.Видимость = Ложь;
	Элементы.ТекущееСостояниеЭДОУчет.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураЭлементаСхемыРегламента()
	ЭлементСхемыРегламента = Новый Структура;
	ЭлементСхемыРегламента.Вставить("АдресОписанияСообщения", "");
	ЭлементСхемыРегламента.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("ДатаИзмененияСтатуса", '00010101');
	ЭлементСхемыРегламента.Вставить("ДополнительнаяИнформация", "");
	ЭлементСхемыРегламента.Вставить("Доступность", Ложь);
	ЭлементСхемыРегламента.Вставить("Наименование", "");
	ЭлементСхемыРегламента.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("ПрисоединенныйФайл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("Сообщение", Документы.СообщениеЭДО.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("Статус", Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ЭлементСхемыРегламента.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Возврат ЭлементСхемыРегламента;
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураДанныхОбластиПросмотра()
	ДанныеОбластиПросмотра = Новый Структура;
	ДанныеОбластиПросмотра.Вставить("ФайлСсылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ДанныеОбластиПросмотра.Вставить("ФайлНомерИконки", 0);
	ДанныеОбластиПросмотра.Вставить("ФайлПредставление", "");
	ДанныеОбластиПросмотра.Вставить("ПредставлениеДокумента", Новый ТабличныйДокумент);
	ДанныеОбластиПросмотра.Вставить("ДокументУчетаПредставление", "");
	ДанныеОбластиПросмотра.Вставить("ДокументУчета", Неопределено);
	ДанныеОбластиПросмотра.Вставить("ТекущееСостояниеЭДО", "");
	ДанныеОбластиПросмотра.Вставить("Статус", "Выполнено");
	ДанныеОбластиПросмотра.Вставить("ПрочтениеДолжноБытьУстановлено", Ложь);
	ДанныеОбластиПросмотра.Вставить("ФормированиеПредставления", Неопределено);
	ДанныеОбластиПросмотра.Вставить("ЭлементСхемыРегламента", СтруктураЭлементаСхемыРегламента());
	Возврат ДанныеОбластиПросмотра;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеОбластиПросмотраПоФайлу(СтруктураВозврата, ПараметрыФормирования)
	ЭлементСхемыРегламента = СтруктураВозврата.ЭлементСхемыРегламента;
	
	СтруктураВозврата.ФайлСсылка = ЭлементСхемыРегламента.ПрисоединенныйФайл;
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ПараметрыФормирования.УникальныйИдентификатор;
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл, ПараметрыДанныхФайла);
	СтруктураВозврата.ФайлПредставление = ДанныеФайла.ИмяФайла;
	Расширение = ДанныеФайла.Расширение;
	СтруктураВозврата.ФайлНомерИконки = ИнтеграцияБСПБЭД.ИндексПиктограммыФайла(Расширение);

	Если Не ПараметрыФормирования.ЕстьОтборПоНепрочтенным Тогда
		СвойствоПрочтен = РаботаСПрочтениямиВызовСервера.ПолучитьСвойствоПрочтен(
			ПараметрыФормирования.ТекущийЭлектронныйДокумент);
		Если СвойствоПрочтен <> Неопределено Тогда
			СтруктураВозврата.ПрочтениеДолжноБытьУстановлено = Не СвойствоПрочтен;
		Иначе
			СтруктураВозврата.ПрочтениеДолжноБытьУстановлено = Ложь;
		КонецЕсли;
	КонецЕсли;

	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФормирования.ТекущийЭлектронныйДокумент,
		"ДатаДокумента, Контрагент, Организация, НомерДокумента, СуммаДокумента, ВидДокумента");

	ИмяМакета = "ПросмотрПроизвольногоДокумента_%1";
	ИмяМакета = СтрШаблон(ИмяМакета, ОбщегоНазначения.КодОсновногоЯзыка());
	МакетПроизв = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет(ИмяМакета);
	МакетПроизв.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = МакетПроизв.ПолучитьОбласть("ОбластьПараметры");

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("Организация", ПараметрыДокумента.Организация);
	ЗначенияПараметров.Вставить("Контрагент", ПараметрыДокумента.Контрагент);
	ЗначенияПараметров.Вставить("Номер", ПараметрыДокумента.НомерДокумента);
	ЗначенияПараметров.Вставить("Дата", Формат(ПараметрыДокумента.ДатаДокумента, НСтр("ru='ДФ=дд.ММ.гггг;'")));
	ЗначенияПараметров.Вставить("Сумма", Формат(ПараметрыДокумента.СуммаДокумента, "ЧДЦ=2"));
	ЗначенияПараметров.Вставить("ВидДокумента", ПараметрыДокумента.ВидДокумента);

	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ПредставлениеПроизвольногоДокумента = Новый ТабличныйДокумент;
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ПредставлениеПроизвольногоДокумента, ОбластьШапка,
		"ОбластьПараметры");
	СтруктураВозврата.ПредставлениеДокумента = ПредставлениеПроизвольногоДокумента;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеОбластиПросмотраПоДокументуУчета(СтруктураВозврата, ПараметрыФормирования)

	ЭлементСхемыРегламента = СтруктураВозврата.ЭлементСхемыРегламента;

	ПараметрыВизуализацииДокумента = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализацииДокумента.ВыводитьБанковскиеРеквизиты = ЭлементСхемыРегламента.ТипДокумента
		= Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	ПараметрыВизуализацииДокумента.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализацииДокумента.ВыводитьКопияВерна = Ложь;

	СтруктураВозврата.ФормированиеПредставления = ИнтерфейсДокументовЭДО.ЗапуститьФормированиеПредставленияДанныхДокумента(
		ЭлементСхемыРегламента, ПараметрыФормирования.УникальныйИдентификатор, ПараметрыВизуализацииДокумента);

	ПредставлениеДокумента = Новый ТабличныйДокумент;
	СтруктураВозврата.Статус = "";
	ОбновитьПредставлениеДокумента(ПараметрыФормирования.ТекущийЭлектронныйДокумент,
		СтруктураВозврата.ФормированиеПредставления, ЭлементСхемыРегламента, ПредставлениеДокумента,
		СтруктураВозврата.Статус, СтруктураВозврата.ПрочтениеДолжноБытьУстановлено,
		ПараметрыФормирования.ЕстьОтборПоНепрочтенным);
	СтруктураВозврата.ПредставлениеДокумента = ПредставлениеДокумента;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПопыткаЗаполнитьЭлементСхемыРегламента(СтруктураВозврата, ПараметрыФормирования)
	ЭтоВходящийЭДО = ТипЗнч(ПараметрыФормирования.ТекущийЭлектронныйДокумент) = Тип(
		"ДокументСсылка.ЭлектронныйДокументВходящийЭДО");
	ДанныеЭлектронногоДокумента = ИнтерфейсДокументовЭДО.ДанныеФормыПросмотраЭлектронногоДокумента(
		ПараметрыФормирования.ТекущийЭлектронныйДокумент, ЭтоВходящийЭДО);

	Если Не ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы) Тогда
		Возврат Ложь;
	КонецЕсли;

	ИнформацияОтправителя = Неопределено;
	ЭлементСхемыРегламента = СтруктураВозврата.ЭлементСхемыРегламента;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		ТипРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыФормирования.ТекущийЭлектронныйДокумент,
			"ТипРегламента");
		МодульОбменСГИСЭПД.ПриОпределенииИнформацииОтправителя(ТипРегламента,
			ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы, ИнформацияОтправителя);
	КонецЕсли;

	Если ИнформацияОтправителя = Неопределено Тогда
		ИнформацияОтправителя = ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
	КонецЕсли;

	Если ИнформацияОтправителя <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементСхемыРегламента, ИнформацияОтправителя);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭлементСхемыРегламента, ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы[0]);
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеОтраженияВУчете(СтруктураВозврата, ПараметрыФормирования)
	ДанныеОтраженияВУчете = ДанныеОтраженияВУчете(ПараметрыФормирования.ТекущийЭлектронныйДокумент,
		ПараметрыФормирования.ДанныеВходящегоЭлектронногоДокумента);
	СтруктураВозврата.ДокументУчета = ДанныеОтраженияВУчете.Ссылка;
	СтруктураВозврата.ДокументУчетаПредставление = ДанныеОтраженияВУчете.Представление;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОбластиПросмотра(Знач ПараметрыФормирования)

	ТекущийЭлектронныйДокумент = ПараметрыФормирования.ТекущийЭлектронныйДокумент;

	СтруктураВозврата = СтруктураДанныхОбластиПросмотра();	
	СтруктураВозврата.ТекущееСостояниеЭДО = ПолучитьСостояниеДокументаЭДО(ТекущийЭлектронныйДокумент);
	ЗаполнитьДанныеОтраженияВУчете(СтруктураВозврата, ПараметрыФормирования);
	ЭлементСхемыРегламентаЗаполнен = ПопыткаЗаполнитьЭлементСхемыРегламента(СтруктураВозврата, ПараметрыФормирования);
	Если ЭлементСхемыРегламентаЗаполнен Тогда
		ЭлементСхемыРегламента = СтруктураВозврата.ЭлементСхемыРегламента;
		
		Если ТекущийЭлектронныйДокумент.ВидДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
 			ДокументРаспознан = РаспознатьДокумент(ТекущийЭлектронныйДокумент);
 		Иначе
 			ДокументРаспознан = Ложь;
		КонецЕсли;
		
		Если Не ДокументРаспознан И ЭлементСхемыРегламента.Направление <> Перечисления.НаправленияЭДО.Внутренний
			И ЭлементСхемыРегламента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прикладной Тогда
			ЗаполнитьДанныеОбластиПросмотраПоФайлу(СтруктураВозврата, ПараметрыФормирования);
		Иначе
			ЗаполнитьДанныеОбластиПросмотраПоДокументуУчета(СтруктураВозврата, ПараметрыФормирования);
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;

КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьПредставлениеДокумента(ТекущийДокументЭДО, ФормированиеПредставления, 
	ЭлементСхемыРегламента, ПредставлениеДокумента, Статус, ПрочтениеДолжноБытьУстановлено,
	ЕстьОтборПоНепрочтенным)
	
	Если ФормированиеПредставления = Неопределено
		ИЛИ ФормированиеПредставления.Статус = "Ошибка" Тогда
		
		ФормированиеПредставления = Неопределено;
		Статус = "Ошибка";
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполнено" Тогда

		Статус = ФормированиеПредставления.Статус;
		ПодготовитьПредставлениеДокумента(ТекущийДокументЭДО, ФормированиеПредставления, 
			ЭлементСхемыРегламента, ПредставлениеДокумента, ПрочтениеДолжноБытьУстановлено,
			ЕстьОтборПоНепрочтенным);
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполняется" Тогда
		
		Статус = ФормированиеПредставления.Статус;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьПредставлениеДокумента(ТекущийЭлектронныйДокумент, ФормированиеПредставления, 
	ЭлементСхемыРегламента, ПредставлениеДокумента, ПрочтениеДолжноБытьУстановлено,
	ЕстьОтборПоНепрочтенным)
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФормированиеПредставления.АдресРезультата);
	Если РезультатФормирования = Неопределено
		ИЛИ РезультатФормирования.ПредставлениеДокумента = Неопределено Тогда
		ФормированиеПредставления = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПредставлениеДокумента = РезультатФормирования.ПредставлениеДокумента;
	ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(
		ПредставлениеДокумента, ЭлементСхемыРегламента.Сообщение);	
	
	ФормированиеПредставления = Неопределено;
	
	Если Не ЕстьОтборПоНепрочтенным Тогда
		СвойствоПрочтен = РаботаСПрочтениямиВызовСервера.ПолучитьСвойствоПрочтен(ТекущийЭлектронныйДокумент);
		Если СвойствоПрочтен <> Неопределено Тогда
			ПрочтениеДолжноБытьУстановлено = Не СвойствоПрочтен;
		Иначе
			ПрочтениеДолжноБытьУстановлено = Ложь;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированияПредставленияДокумента()
	
	Если ФормированиеПредставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеДанныхДокументаПослеФормирования", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеДанныхДокументаПослеФормирования(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеПредставления = Результат;
	ПредставлениеДокумента = Неопределено;
	Статус = "";
	ПрочтениеДолжноБытьУстановлено = Ложь;
	ОбновитьПредставлениеДокумента(ТекущийЭлектронныйДокумент, ФормированиеПредставления, 
		ЭлементСхемыРегламента, ПредставлениеДокумента, Статус, ПрочтениеДолжноБытьУстановлено,
		ЕстьОтборПоНепрочтенным);
		
	Если ПредставлениеДокумента <> Неопределено Тогда
		ТекущийДокументТабличныйДокумент = ПредставлениеДокумента;
	КонецЕсли;	
	
	УстановитьСтраницуПредставления(Статус);
	Если ПрочтениеДолжноБытьУстановлено Тогда
		ПодключитьОбработчикОжидания("УстановитьПрочтенность", 3, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеДокументаЭДО(ТекущийЭлектронныйДокумент)

	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ТекущийЭлектронныйДокумент);

	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(ТекущийЭлектронныйДокумент);
		ПредставлениеСостояния = СтрШаблон(ШаблонПредставления, СостояниеДокументаПодробное.Значение,
			СостояниеДокументаПодробное.Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеДокументаПодробное.Значение) Тогда
		ПредставлениеСостояния = СостояниеДокументаПодробное.Значение;
	Иначе
		ПредставлениеСостояния = ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;

	Возврат ПредставлениеСостояния;

КонецФункции

&НаКлиенте
Процедура УстановитьСтраницуПредставления(Статус)

	Если Статус = "Выполнено" Тогда
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
	ИначеЕсли Статус = "Выполняется" Тогда
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Иначе
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОшибка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормированияДанныхОбластиПросмотра()
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТекущийЭлектронныйДокумент", ТекущийЭлектронныйДокумент);
	ПараметрыФормирования.Вставить("ДанныеВходящегоЭлектронногоДокумента", Элементы.ВходящиеЭД.ТекущиеДанные);
	ПараметрыФормирования.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормирования.Вставить("ЕстьОтборПоНепрочтенным", ЕстьОтборПоНепрочтенным);
	ПараметрыФормирования.Вставить("ФормированиеПредставления", ФормированиеПредставления);
	Возврат ПараметрыФормирования;
КонецФункции

&НаКлиенте
Процедура ОбновитьОбластьПросмотра()

	Если Не ПоказыватьОбластьПросмотра Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормирования = ПараметрыФормированияДанныхОбластиПросмотра();
	ДанныеПросмотра = ДанныеОбластиПросмотра(ПараметрыФормирования);

	ФормированиеПредставления = ДанныеПросмотра.ФормированиеПредставления;
	ЭлементСхемыРегламента = ДанныеПросмотра.ЭлементСхемыРегламента;
	ТекущийДокументТабличныйДокумент = ДанныеПросмотра.ПредставлениеДокумента;
	ТекущийФайл = ДанныеПросмотра.ФайлСсылка;
	ТекущийФайлПредставление = ДанныеПросмотра.ФайлПредставление;
	ТекущаяКартинкаФайла = ДанныеПросмотра.ФайлНомерИконки;
	ТекущееСостояниеЭДО = ДанныеПросмотра.ТекущееСостояниеЭДО;
	ТекущийДокументУчета = ДанныеПросмотра.ДокументУчета;
	ТекущийДокументУчетаПредставление = ДанныеПросмотра.ДокументУчетаПредставление;

	ПоказатьФайл = ЗначениеЗаполнено(ДанныеПросмотра.ФайлСсылка);
	ПоказатьДокументУчета = ЗначениеЗаполнено(ТекущийДокументУчетаПредставление);

	Элементы.ГруппаФайл.Видимость = ПоказатьФайл;
	Элементы.ТекущееСостояниеЭДОФайл.Видимость = ПоказатьФайл;

	Элементы.ТекущийДокументУчетаПредставление.Видимость = ПоказатьДокументУчета;
	Элементы.ТекущееСостояниеЭДОУчет.Видимость = ПоказатьДокументУчета;

	ОжидатьФормированияПредставленияДокумента();
	УстановитьСтраницуПредставления(ДанныеПросмотра.Статус);

	Если ДанныеПросмотра.ПрочтениеДолжноБытьУстановлено Тогда
		ПодключитьОбработчикОжидания("УстановитьПрочтенность", 3, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПрочтенность() 
	УстановитьПрочтенностьСервер(ТекущийЭлектронныйДокумент);
КонецПроцедуры

&НаСервере
Процедура УстановитьПрочтенностьСервер(ТекущийДокументЭДО)
	РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(ТекущийДокументЭДО, Истина);
	ОбновитьДинамическиеСписки();
КонецПроцедуры

#КонецОбласти
#КонецОбласти