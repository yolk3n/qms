
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
		"РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам", ЭтотОбъект);
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
		"РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами", ЭтотОбъект);
	
	НавигационнаяСсылка = "e1cib/app/" + ИмяФормы;
	
	ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
		
	ЕстьОтборПоНепрочитанным = Ложь;
	
	ПакетноеОтображение = Истина;
	
	ПустойКонтрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение();
	
	ОтображатьУдаленные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтерфейсЭДО", 
		"ОтображатьУдаленные", Ложь);
	Элементы.ОтображатьУдаленныеВходящие.Пометка = ОтображатьУдаленные; 
	Элементы.ОтображатьУдаленныеИсходящие.Пометка = ОтображатьУдаленные;
	
	ОтображатьОбластьПредпросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтерфейсЭДО", 
		"ОтображатьОбластьПредпросмотра", Истина);
	Элементы.ГруппаОбластьПросмотра.Видимость = ОтображатьОбластьПредпросмотра;
	
	Элементы.Состояние.СписокВыбора.Вставить(0, 
		"ТребуетВнимания", "Требует внимания", , БиблиотекаКартинок.ТребуетВниманияЖелтыйШарБЭД);
	Элементы.СтатусПриглашения.СписокВыбора.Вставить(0, 
		"ТребуетВнимания", "Требует внимания", , БиблиотекаКартинок.ТребуетВниманияЖелтыйШарБЭД);
	
	Если Не НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение() Тогда
		ЗначениеУтвердить = Элементы.Состояние.СписокВыбора.НайтиПоЗначению("Утвердить");	
		Элементы.Состояние.СписокВыбора.Удалить(ЗначениеУтвердить);
	КонецЕсли;
		
	ОтображениеОрганизации();
	
	Элементы.ПроверитьПодписиВходящие.Видимость = ОбщегоНазначенияБЭД.ЕстьПравоАдминистрирования();
	Элементы.ПроверитьПодписиИсходящие.Видимость = ОбщегоНазначенияБЭД.ЕстьПравоАдминистрирования();
	
	УстановитьПараметрыСписков();

	КоличествоДокументов();
	
	УстановитьВидимостьКомандФормыПоПравам();
							
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтображениеОбластиПросмотра" Тогда			
		
		ОтображатьОбластьПредпросмотра = Параметр;
		Элементы.ГруппаОбластьПросмотра.Видимость = ОтображатьОбластьПредпросмотра;
		
	ИначеЕсли СобытиеОбновитьСписки(ИмяСобытия) Тогда
		
		ОбновитьДинамическийСписокТекущегоРаздела();
	
	ИначеЕсли ИмяСобытия = "ВыполнитьСинхронизацию" Тогда
		
		Активизировать();
		ПолучитьОтправитьОбновить();								
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийЭлектронныйДокумент = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийЭлектронныйДокумент = Неопределено;	
	КонецЕсли;
	
	Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;			
	Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Ложь;
	Элементы.КомандаПодписатьОтправить.Видимость = Ложь; 
	
	ВидимостьЭлементовИКоманд();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БоковоеМенюПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредыдущийРаздел = ТекущийРаздел; 
	
	Если ДанныеСобытия.Element.id = "inbox-button" Тогда
		
		ТекущийЭлемент = Элементы.ВходящиеЭлектронныеДокументы;
		
		Заголовок = НСтр("ru = 'ЭДО: Входящие документы'");
		ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
					
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящиеИсходящие; 
		Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы;
		
		ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущийЭлектронныйДокумент <> Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент 
				И (ПредыдущийРаздел = "Сформировать" ИЛИ ПредыдущийРаздел = "Приглашения") Тогда
				Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОжидание;	
			КонецЕсли;
			
			ТекущийЭлектронныйДокумент = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент;
			
		Иначе
			
			ТекущийЭлектронныйДокумент = Неопределено;
			Предпросмотр = Неопределено; 
			ТекущийДокументУчетаПредставление = Неопределено;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.1, Истина);
	 
	ИначеЕсли ДанныеСобытия.Element.id = "sent-button" Тогда 
		
		ТекущийЭлемент = Элементы.ИсходящиеЭлектронныеДокументы;
		
		Заголовок = НСтр("ru = 'ЭДО: Исходящие документы'");
		ТекущийРаздел = "ИсходящиеЭлектронныеДокументы";		 
			
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящиеИсходящие; 
		Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаИсходящиеЭлектронныеДокументы;
		
		ТекущиеДанные = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущийЭлектронныйДокумент <> Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент 
				И (ПредыдущийРаздел = "Сформировать" ИЛИ ПредыдущийРаздел = "Приглашения") Тогда
				Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОжидание;	
			КонецЕсли;
			ТекущийЭлектронныйДокумент = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент;
		Иначе
			ТекущийЭлектронныйДокумент = Неопределено;
			Предпросмотр = Неопределено;
			ТекущийДокументУчетаПредставление = Неопределено;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.1, Истина);
				
	ИначеЕсли ДанныеСобытия.Element.id = "create-button" Тогда
		
		ТекущийЭлемент = Элементы.Сформировать;
		
		Заголовок = НСтр("ru = 'ЭДО: Отправить'");
		ТекущийРаздел = "Сформировать";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСформировать;
				
	ИначеЕсли ДанныеСобытия.Element.id = "invitation-button" Тогда
		
		ТекущийЭлемент = Элементы.Приглашения;
		
		Заголовок = НСтр("ru = 'ЭДО: Приглашения'");
		ТекущийРаздел = "Приглашения";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриглашения;
		
	ИначеЕсли ДанныеСобытия.Element.id = "error-button" Тогда
		
		Заголовок = НСтр("ru = 'ЭДО: Ошибки'");
		ТекущийРаздел = "Ошибки";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибки;
	
	КонецЕсли; 
	
	ВидимостьЭлементовИКоманд();

КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборы();

КонецПроцедуры 

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	УстановитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	УстановитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОтборПриИзменении(Элемент)
		
	УстановитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УстановитьОтборы();

КонецПроцедуры 

&НаКлиенте
Процедура ТекущийФайлПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДляРедактирования = Ложь;
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФайл(ТекущийФайл, УникальныйИдентификатор, ДляРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийДокументТабличныйДокументПередПечатью(Элемент, ДиалогПечати, Отказ)
	
	ВывестиНаПечать();
	Отказ = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийДокументУчетаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы[ТекущийРаздел].ТекущиеДанные;
	
	Если ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда
		
		ПоказатьУчетныйДокумент(ТекущийРаздел);
		Возврат;	
		
	КонецЕсли;
	
	ЭтоКаталогТоваров = (ДанныеСтроки.ТипДокумента = ПредопределенноеЗначение(
		"Перечисление.ТипыДокументовЭДО.КаталогТоваров"));

	Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 И Не ЭтоКаталогТоваров Тогда
		
		ПоказатьСопоставлениеНоменклатуры();
		
	ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
		
		ПоказатьРасширенныйПодборДокументовУчета();
		
	Иначе
		
		ПоказатьУчетныйДокумент(ТекущийРаздел);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументИнформацияОтправителяВыбор(Элемент, Область, СтандартнаяОбработка)
		
	Если Область.Имя = "ДокументУчета" Тогда
		
		ДанныеСтроки = Элементы[ТекущийРаздел].ТекущиеДанные;
		
		Если ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			Возврат;	
			
		КонецЕсли;
		
		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда
			
			ПоказатьСопоставлениеНоменклатуры();
			
		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
			
			ПоказатьРасширенныйПодборДокументовУчета();
			
		Иначе
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеЭлектронныеДокументы

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторПакета = ТекущиеДанные.КлючСортировкиПакета;
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийИдентификаторПакета = "";
		ТекущийЭлектронныйДокумент = Неопределено;	
	КонецЕсли;
	
	ЗаполнитьВыбранныеДанные();
		
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.ВходящиеЭлектронныеДокументыОтражениеВУчете Тогда
		
		ДанныеСтроки = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
				
		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда
			
			ПоказатьСопоставлениеНоменклатуры();
			
		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
			
			ПоказатьРасширенныйПодборДокументовУчета();
			
		Иначе
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			
		КонецЕсли;			
		
	Иначе
		
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные.ЭлектронныйДокумент);
		
	КонецЕсли;	
 	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВходящиеЭлектронныеДокументыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыПриИзменении(Элемент)
	
	КоличествоДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеЭлектронныеДокументы

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.ИсходящиеЭлектронныеДокументыОтражениеВУчете Тогда		
		ПоказатьУчетныйДокумент(ТекущийРаздел);
	Иначе	
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные.ЭлектронныйДокумент);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущийРаздел = "ИсходящиеЭлектронныеДокументы";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторПакета = ТекущиеДанные.КлючСортировкиПакета;
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийИдентификаторПакета = "";
		ТекущийЭлектронныйДокумент = Неопределено;
	КонецЕсли;
		
	ЗаполнитьВыбранныеДанные();
		
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);  
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсходящиеЭлектронныеДокументыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
		
	ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыПриИзменении(Элемент)
	
	КоличествоДокументов();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформировать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыПриглашения

&НаКлиенте
Процедура ПриглашенияПриАктивизацииСтроки(Элемент)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.СтатусПодключения = 
		ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие") Тогда
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаПринятьПриглашение;
			
	ИначеЕсли ТекущиеДанные.СтатусПодключения = 
		ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить") Тогда
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаОтправить;
		
	Иначе
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаНетДействийСПриглашением;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриглашенияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КартинкиСостояний = СоответствиеИндексовКартинокСостоянийЭДО();
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;
		Если ДанныеСтроки.СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие
			ИЛИ ДанныеСтроки.СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить Тогда
			ДанныеСтроки.ИндексКартинкиСостояния = КартинкиСостояний.Получить("ТребуетВнимания");
		Иначе
			ДанныеСтроки.ИндексКартинкиСостояния = КартинкиСостояний.Получить("НеТребуетВнимания");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(ТекущийИдентификаторПакета) Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийИдентификаторПакета);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", 
			Массив);	
	Иначе
		МассивТекущийЭлектронныйДокумент = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", 
			МассивТекущийЭлектронныйДокумент);
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОАннулировать = ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОАннулировать);
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));	
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДОАннулировать);
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, 
		ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйДокументСДиска(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзФайлаНаДискеЗавершить", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, , , , УникальныйИдентификатор);
					
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПолучитьОтправитьОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		
		Если Элементы.ВходящиеЭлектронныеДокументы.ВыделенныеСтроки.Количество() Тогда
			ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
		КонецЕсли;	
		
	Иначе
		
		Если Элементы.ИсходящиеЭлектронныеДокументы.ВыделенныеСтроки.Количество() Тогда
			
			ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоиск(Команда)
	
	РасширенныйПоискРаскрыт = Не РасширенныйПоискРаскрыт;
	Счетчик = 0;
	
	Элементы.ГруппаБыстрыеОтборы.Видимость = Не Элементы.ГруппаБыстрыеОтборы.Видимость;

	Если Элементы.ГруппаБыстрыеОтборы.Видимость Тогда
		
		ЗаголовокКоманды = "Фильтры ▲";
		
	Иначе
		
		ЗаголовокКоманды = "Фильтры ("; 
		СокращенныйЗаголовок = Ложь;
		ЕстьДокументыКОбработкеСкрытьПанель = Ложь;
		
		Для каждого Отбор Из ПоляФильтров() Цикл
			
			Если ЗначениеЗаполнено(ЭтотОбъект[Отбор]) И Отбор <> "Новые" Тогда
				
				Счетчик = Счетчик + 1;
				
				Если Счетчик = 1 Тогда
					
					ПредставлениеОтбора = СтрШаблон("%1: %2", Элементы[Отбор].Заголовок, Строка(ЭтотОбъект[Отбор]));
					ЕстьДокументыКОбработкеСкрытьПанель = Истина;
					
				Иначе
					
					СокращенныйЗаголовок = Истина;
					Продолжить;	
					
				КонецЕсли;
				
				ЗаголовокКоманды = ЗаголовокКоманды + ПредставлениеОтбора;		

			КонецЕсли;
			
		КонецЦикла;
		
		Если СокращенныйЗаголовок Тогда
			
			ЗаголовокКоманды = СтрШаблон("%1 %2 %3", ЗаголовокКоманды, НСтр("ru='и еще'"), Счетчик - 1);
			
		КонецЕсли;
		
		ЗаголовокКоманды = СтрШаблон("%1) %2", ЗаголовокКоманды, "▼");
		
	КонецЕсли;
	
	Если Счетчик > 0 Тогда		
		Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Истина;
	Иначе
		Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Ложь;	
	КонецЕсли;
	
	Если Счетчик = 0 И Не Элементы.ГруппаБыстрыеОтборы.Видимость Тогда
		ЗаголовокКоманды = НСтр("ru='Фильтры ▼'");	
	КонецЕсли;
	
	Элементы.РаскрытьФильтры.Заголовок = ЗаголовокКоманды;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьБыстрыеОтборы(Команда)
	
	Для каждого Отбор Из ПоляФильтров() Цикл
		
		ЭтотОбъект[Отбор] = Неопределено;
		
	КонецЦикла;
	
	УстановитьОтборы();
	
	Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Ложь;
	Элементы.РаскрытьФильтры.Заголовок = НСтр("ru='Фильтры ▼'");
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	Если Элементы.Сформировать.ВыделенныеСтроки.Количество() Тогда
		ПодключитьОбработчикОжидания("ВыполнитьСформироватьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспаковатьКонтейнеры(Команда)

	СинхронизацияЭДОКлиент.РаспаковатьТранспортныеКонтейнеры(Элементы.Ошибки.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененКонтейнера(Команда)
	
	УстановитьСтатусОтменен(Элементы.Ошибки.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)  
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
	
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОУтвердить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОУтвердить);
	ДействияПоЭДОСформироватьОтвет = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОСформироватьОтвет);
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТекущийРаздел = "Сформировать" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьОтменуФормированияДокументовПослеВводаСтроки", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ОбъектыУчета = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Документ");
		ДополнительныеПараметры.Вставить("ОбъектыУчета", ОбъектыУчета);
		
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
			ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
			"ЭлектронныйДокумент, ИдентификаторПакета");
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
		ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОЗакрытьПринудительно = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОЗакрытьПринудительно);
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДОЗакрытьПринудительно);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину закрытия документооборота'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть электронный документ'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтПодписания(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
			"ЭлектронныйДокумент, ИдентификаторПакета");
		
		Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
			Возврат;
		КонецЕсли;
		
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		ИнтерфейсДокументовЭДОКлиент.ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);
		
	Иначе
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
			"ЭлектронныйДокумент, ИдентификаторПакета");
		
		Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
			Возврат;
		КонецЕсли;
		
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
			"ЭлектронныйДокумент, ИдентификаторПакета");
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
			ОписаниеОповещения);
		
		НаборДействий = Новый Соответствие;	
		
		ДействияПоЭДООтклонитьПодписание = ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьПодписание");
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтклонитьПодписание);
		
		ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
		ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДООтклонитьПодписание);
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
			ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
		
		ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
		ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения документа'");
		ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
		ДополнительныеПараметры.Многострочность = Истина;
		ДополнительныеПараметры.Обязательность = Истина;
		ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания по выбранным ЭД необходимо указать причину.'");
		ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"КлючПриглашения, ИдентификаторОрганизации, ИдентификаторКонтрагента, Контрагент, Организация");

	ИсходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл	
		ИсходящееПриглашение = СинхронизацияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
		ЗаполнитьЗначенияСвойств(ИсходящееПриглашение, ДанныеПриглашения);	
		ИсходящиеПриглашения.Добавить(ИсходящееПриглашение);
	КонецЦикла;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправкаПриглашенийОповещениеОЗавершении", ЭтотОбъект);
		
	СинхронизацияЭДОКлиент.ОтправитьПриглашения(ИсходящиеПриглашения, ЭтотОбъект, ОбработчикОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	Если Элементы.Приглашения.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПринятьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПринятьПриглашения");
		ПодключитьОбработчикОжидания("НачатьПринятиеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	Если Элементы.Приглашения.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтклонитьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтклонитьПриглашения");
		ПодключитьОбработчикОжидания("НачатьОтклонениеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	ПоказатьСопоставлениеНоменклатуры(); 
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
		
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОПодготовитьКОтправке);
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ОтложеннаяОтправкаЭлектронныхДокументов() Тогда
		ДействияПоЭДООтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
			ДействияПоЭДООтправить);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаПодготовкуКОтправке(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДООтменитьОтправку = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтменитьОтправку");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтменитьОтправку);
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочитанное(Команда)
	
	ТекущийСписок = Элементы[ТекущийРаздел];
	
	Если ТекущийСписок <> Неопределено Тогда
		
		ИнтерфейсДокументовЭДОКлиент.ПометитьКакПрочтенные(ТекущийСписок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭДО(Команда)
	
	НастройкиЭДОКлиент.ОткрытьФормуНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьИдея(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьСтраницуОпроса();

КонецПроцедуры

&НаКлиенте
Процедура Техподдержка(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://1c-edo.ru/handbook");
	
КонецПроцедуры

&НаКлиенте
Процедура ОМодулеЭДО(Команда)
			
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ОМодулеЭДО", , , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	
	ОтображатьУдаленныеСервер();
	ОбновитьДинамическиеСпискиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	НаборДействий = Новый Соответствие;	
	
	ДействияПоЭДОПринятьАннулирование = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПринятьАннулирование);
	
	ДействияПоЭДОПодписать = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодписать);
	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
			
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
		ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;
		
	ДействияПоЭДООтклонитьАннулирование = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтклонитьАннулирование);
	
	ДействияПоЭДОПодписать = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодписать);
	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДООтклонитьАннулирование);
					
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
		ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭлектронныеДокументы(Команда)
		
	ВывестиНаПечать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеПДФ(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМашиночитаемыеДоверенности(Команда)

	МашиночитаемыеДоверенностиКлиент.ОткрытьОбщуюФормуСписковМЧД();
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьФормуТекущиеДелаЭДО(Команда)
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО");
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеПриглашение(Команда)
	
	ПараметрыПриглашения = СинхронизацияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыПриглашения.Контрагент = Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПриглашения.Организация = Организация;
	КонецЕсли;
	
	СинхронизацияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(ПараметрыПриглашения);

КонецПроцедуры

&НаКлиенте
Процедура ВсегдаИспользоватьТрадиционныйИнтерфейс(Команда)
	
	ТекстВопроса = НСтр("ru='Будет использоваться традиционный интерфейс ЭДО по умолчанию. Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросПереходНаТрадиционныйИнтерфейс", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ОКОтмена, 
		60, 
		КодВозвратаДиалога.ОК, , 
		КодВозвратаДиалога.Отмена);
			
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД(
		"Обработка.ИнтерфейсДокументовЭДО.Форма.ПроверкаПодписей");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСоСписками

&НаСервере
Процедура ОтображениеОрганизации()

	НесколькоОрганизаций = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		
		НесколькоОрганизаций = Истина;	
	
	КонецЕсли;
	
	Элементы.ВходящиеЭлектронныеДокументыОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.ИсходящиеЭлектронныеДокументыОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.СформироватьОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.ПриглашенияОрганизация.Видимость = НесколькоОрганизаций;	
	
КонецПроцедуры

 &НаСервере
Процедура УстановитьПараметрыСписков()
		
	РежимОтображения = "ВсеДокументы";
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(Пользователи.АвторизованныйПользователь());
	Если РежимОтображения <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	
	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("РежимОтображения", РежимОтображения);
	НастройкиОтображения.Вставить("СписокПользователей", СписокПользователей);
	НастройкиОтображения.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ДатаПереходаНаВерсиюСПрочтенностью = РаботаСПрочтениямиВызовСервера.ПолучитьДатуПереходаНаВерсиюСПрочтенностью();
	
	СостоянияЭДОЗакрыт = Новый Массив;
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
	
	СостоянияЭДООжидается = Новый Массив;
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение);
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
	
	СостоянияЭДОТребуетсяДействие = Новый Массив;
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
	
	Для каждого ИмяСписка Из ИменаСписковФормы() Цикл
		
		Если ИмяСписка = "Сформировать" Тогда
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "Дата");	
			Продолжить;
			
		ИначеЕсли ИмяСписка = "Приглашения" Тогда
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "ДатаИзмененияСтатуса");	
			Продолжить;	
			
		Иначе
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "ДатаПолучения");	
			
		КонецЕсли;
		
		Список = ЭтотОбъект[ИмяСписка];
		
		Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
		Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
		Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаПереходаНаВерсиюСПрочтенностью",
			ДатаПереходаНаВерсиюСПрочтенностью); 
		
		УстановитьВариантОтображенияДокументовСписка(ИмяСписка);
	
	КонецЦикла;  
		
	Сформировать.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", 
		ПустойКонтрагент);
	
	Приглашения.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", 
		ПустойКонтрагент);
	Приглашения.Параметры.УстановитьЗначениеПараметра("ИНН", 
		НСтр("ru = 'ИНН'"));
	
	СтатусыНеРаспакованныхТранспортныхСообщенийБЭД = СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
	Контейнеры.Параметры.УстановитьЗначениеПараметра("СтатусыНеРаспакованныхТранспортныхСообщенийБЭД",
		СтатусыНеРаспакованныхТранспортныхСообщенийБЭД);
	
	НаправлениеВходящий = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	Контейнеры.Параметры.УстановитьЗначениеПараметра("Направление",
		НаправлениеВходящий);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОтображенияДокументовСписка(ИмяСписка, НаправлениеСортировки = Неопределено)
		
	ПоляОграничения = Новый Массив;
	
	БазовыеНастройкиКомпоновки = Новый КомпоновщикНастроекКомпоновкиДанных;
	БазовыеНастройкиКомпоновки.ЗагрузитьНастройки(ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки);
	БазовыеНастройкиКомпоновки.Настройки.Порядок.Элементы.Очистить();
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(
		БазовыеНастройкиКомпоновки.ПользовательскиеНастройки);
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаПолучения");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("КлючСортировкиПакета");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокСортировкиВПакете");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("НомерСлужебный");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина; 
		
	СлужебныеПоляПорядка = Новый Массив;
	СлужебныеПоляПорядка.Добавить("ДатаПолучения");
	СлужебныеПоляПорядка.Добавить("КлючСортировкиПакета");
	СлужебныеПоляПорядка.Добавить("ПорядокСортировкиВПакете");
	СлужебныеПоляПорядка.Добавить("НомерСлужебный");
	
	Для Каждого ПолеПорядка Из 
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		ИмяПоля = Строка(ПолеПорядка.Поле);
		Если СлужебныеПоляПорядка.Найти(ИмяПоля) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПоляОграничения.Добавить(ИмяПоля);
	КонецЦикла;	
	
	Если ПоляОграничения.Количество() > 0 Тогда
		ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВПорядке(ПоляОграничения);
	КонецЕсли;
		
	СлужебныеПоляОтбора = Новый Массив;
	СлужебныеПоляОтбора.Добавить("Контрагент"); 
	СлужебныеПоляОтбора.Добавить("Организация"); 
	СлужебныеПоляОтбора.Добавить("ДатаПолучения");
	СлужебныеПоляОтбора.Добавить("СуммаДокумента");
	СлужебныеПоляОтбора.Добавить("СостояниеЭДО");
	СлужебныеПоляОтбора.Добавить("ТипДокумента");
	СлужебныеПоляОтбора.Добавить("Ответственный");
	СлужебныеПоляОтбора.Добавить("ВидДокумента");
	СлужебныеПоляОтбора.Добавить("ИдентификаторПакета");
	СлужебныеПоляОтбора.Добавить("ТипРегламента");
		
	ПоляОграничения = Новый Массив;
	
	Для Каждого ПолеПорядка Из 
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		ИмяПоля = Строка(ПолеПорядка.Поле);
		Если СлужебныеПоляОтбора.Найти(ИмяПоля) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПоляОграничения.Добавить(ИмяПоля);
	КонецЦикла;	
	
	Если ПоляОграничения.Количество() > 0 Тогда
		ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВОтборе(ПоляОграничения);
	КонецЕсли;
			
	Элементы[ИмяСписка].Обновить();
		
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформлениеСписков(ИмяСписка, ИмяПоляДаты)
	
	Если ИмяСписка <> "Сформировать" И ИмяСписка <> "Приглашения" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтениеДокументовЭДО") Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Представление = НСтр("ru = 'Отображение непрочитанных документов'");
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Контрагент"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "СуммаДокумента"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Вложение"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ЭлектронныйДокумент"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ДатаПолучения"].Имя);
			
			Если НесколькоОрганизаций Тогда
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Организация"].Имя);
			КонецЕсли;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + ".Прочтен");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			Шрифт = Метаданные.ЭлементыСтиля.ЖирныйШрифтБЭД.Значение;
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
			
			Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
				УсловноеОформление.Элементы.Удалить(Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент = УсловноеОформление.Элементы.Добавить();				
		Элемент.Представление = НСтр("ru = 'Отображение помеченных на удаление электронных документов'");
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Контрагент"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "СуммаДокумента"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Вложение"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ЭлектронныйДокумент"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ДатаПолучения"].Имя); 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Состояние"].Имя);
		
		Если НесколькоОрганизаций Тогда
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Организация"].Имя);
		КонецЕсли;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + ".ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Шрифт = Метаданные.ЭлементыСтиля.ЗачеркнутыйШрифтБЭД.Значение;
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 
			Метаданные.ЭлементыСтиля.ЦветРамкиПредпросмотраЭлектронногоДокумента.Значение);
			
	КонецЕсли;
	
	Если ИмяСписка <> "Приглашения" Тогда
			
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
		ОтборЭлемента.Использование = Истина;
	
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
			
		Элемент.Представление = 
			НСтр("ru = 'Отображать дату сегодняшних писем только в виде времени ""09:46"" (стандартная настройка)'");

		Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
			УсловноеОформление.Элементы.Удалить(Элемент);
		КонецЕсли;
	
	КонецЕсли;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ОтборЭлемента.Использование = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd MMMM'");
			
	Элемент.Представление = 
		НСтр("ru = 'Отображать дату писем за эту неделю в виде ""Вт 10.06"" (стандартная настройка)'");
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
		УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЕсли;

	Элемент = УсловноеОформление.Элементы.Добавить(); 
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца);
	ОтборЭлемента.Использование = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM'");
	
	Элемент.Представление = НСтр("ru = 'Отображать дату писем за этот год в виде ""10.06"" (стандартная настройка)'");
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
		УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЕсли;
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yy'");
			
	Элемент.Представление = НСтр("ru = 'Отображать дату писем за период более ранний, чем этот год в виде ""10.06.2022"" 
		|(стандартная настройка)'");
	
КонецПроцедуры

&НаСервере
Функция ИменаСписковФормы()
	
	ИменаСписковФормы = Новый Массив;
	
	ИменаСписковФормы.Добавить("ВходящиеЭлектронныеДокументы");
	ИменаСписковФормы.Добавить("ИсходящиеЭлектронныеДокументы");
	ИменаСписковФормы.Добавить("Сформировать");
	ИменаСписковФормы.Добавить("Приглашения");
	
	Возврат ИменаСписковФормы; 
	
КонецФункции

&НаСервере
Функция ПоляФильтров()
	
	ПоляФильтров = Новый Массив;
	ПоляФильтров.Добавить("Организация");
	ПоляФильтров.Добавить("Контрагент"); 
	ПоляФильтров.Добавить("Состояние");
	ПоляФильтров.Добавить("Период");
	ПоляФильтров.Добавить("ТипДокумента");
	ПоляФильтров.Добавить("Ответственный");
	ПоляФильтров.Добавить("ТипРегламента");
	ПоляФильтров.Добавить("СтатусПриглашения");
	
	Возврат ПоляФильтров; 
	
КонецФункции

&НаСервере
Процедура УстановитьОтборы()
	
	Для каждого Список Из ИменаСписковФормы() Цикл
		
		Отбор = ЭтотОбъект[Список].Отбор;
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаБыстрыйОтбор.РежимОтображения = Режим;
		
		Для каждого Отбор Из ПоляФильтров() Цикл
			
			Значение = ЭтотОбъект[Отбор];
			Поле = Отбор;
			
			Если Отбор = "Организация" 
				Или Отбор = "Контрагент" 
				Или (Отбор = "Ответственный" 
					И ЭтоВходящиеИсходящие(Список)) Тогда
				
				Использование = ЗначениеЗаполнено(Значение);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
				Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);
						
			ИначеЕсли Отбор = "Состояние" 
				И ЭтоВходящиеИсходящие(Список) Тогда
					
				Если Значение = "Все" Тогда
					
					Значение = "";
					ЭтотОбъект[Отбор] = Значение;
							
				КонецЕсли;
				
				УстановитьОтборПоСостоянию(Значение, ГруппаБыстрыйОтбор, Режим);
				
			ИначеЕсли Отбор = "Период" Тогда
				
				Использование = ЗначениеЗаполнено(Значение);
				ДатаНачала = Период.ДатаНачала;
				ДатаОкончания = Период.ДатаОкончания;
				
				Если Список <> "Сформировать" Тогда
					Поле = "ДатаПолучения";
				Иначе
					Поле = "Дата";
				КонецЕсли;
				
				НачалоПериода = НачалоДня(ДатаНачала);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоПериода, , Использование, Режим);
				
				КонецПериода = КонецДня(ДатаОкончания);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецПериода, , Использование, Режим);
				
			ИначеЕсли Отбор = "ТипДокумента" 
				И Список <> "Сформировать"
				И Список <> "Приглашения" Тогда
				
				Использование = ЗначениеЗаполнено(Значение);
				
				Если Список = "Сформировать" Тогда
					Использование = Ложь;
				КонецЕсли;
				
				Поле = "ВидДокумента";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
				Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);				
				
			ИначеЕсли Отбор = "ВидДокумента" И Список = "Сформировать" Тогда
				
				Использование = ЗначениеЗаполнено(Значение);
				
				Поле = "Документ.ВидДокумента";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);
					
			ИначеЕсли Отбор = "СтатусПриглашения" И Список = "Приглашения" Тогда
				
				ЭтоСписок = Ложь;
				
				Если Значение = "Все" Тогда
					
					Значение = "";
					ЭтотОбъект[Отбор] = Значение;
				
				ИначеЕсли Значение = "ТребуетсяОтправить" Тогда
					Значение = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
				ИначеЕсли Значение = "Принято" Тогда
					Значение = Перечисления.СтатусыПриглашений.Принято;
				ИначеЕсли Значение = "Отклонено" Тогда
					Значение = Перечисления.СтатусыПриглашений.Отклонено;
				ИначеЕсли Значение = "ОжидаемСогласия" Тогда
					Значение = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
				ИначеЕсли Значение = "ТребуетсяСогласие" Тогда
					Значение = Перечисления.СтатусыПриглашений.ТребуетсяСогласие;
				ИначеЕсли Значение = "НастройкаРоуминга" Тогда
					Значение = Перечисления.СтатусыПриглашений.НастройкаРоуминга;
				ИначеЕсли Значение = "Ошибка" Тогда
					Значение = Перечисления.СтатусыПриглашений.Ошибка;
				ИначеЕсли Значение = "НеТребуется" Тогда
					Значение = Перечисления.СтатусыПриглашений.НеТребуется;
				ИначеЕсли Значение = "ТребуетВнимания" Тогда
					
					ЭтоСписок = Истина;
					Значение = Новый СписокЗначений;
					Значение.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяОтправить);
					Значение.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
						
				КонецЕсли;

				Поле = "СтатусПодключения";
				
				Если ЭтоСписок Тогда
					Использование = Значение.Количество() > 0;
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.ВСписке, Значение, , Использование, Режим);		
				Иначе
					Использование = ЗначениеЗаполнено(Значение);
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
						Поле, ВидСравненияКомпоновкиДанных.Равно, Значение, , Использование, Режим);					
				КонецЕсли;
			
			ИначеЕсли Отбор = "ТипРегламента" И ЭтоВходящиеИсходящие(Список) Тогда
				
				Если Значение = "Все" Тогда
					
					Значение = "";
					ЭтотОбъект[Отбор] = Значение;
					
				КонецЕсли; 
				
				Использование = ЗначениеЗаполнено(Значение); 
				
				Если Значение = "Только произвольные документы" Тогда
					ЗначениеОтбора = Перечисления.ТипыРегламентовЭДО.Неформализованный;	
				КонецЕсли;
								
				Поле = "ТипРегламента";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.Равно, ЗначениеОтбора, , Использование, Режим);				
										
				СписокВидовДокументов = Новый СписокЗначений;
				Виды = ЭлектронныеДокументыЭДО.ВидыДокументовДляПроизвольногоФормата();
				
				Для каждого Вид Из Виды Цикл
		
						СписокВидовДокументов.Добавить(Вид);
					 	
				КонецЦикла;

				Поле = "ВидДокумента";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
					Поле, ВидСравненияКомпоновкиДанных.ВСписке, СписокВидовДокументов, , Использование, Режим);
					
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостоянию(Знач Значение, ГруппаБыстрыйОтбор, Знач Режим)

	СписокСостояний = Новый СписокЗначений;
	
	Поле = "СостояниеЭДО";
	Если Значение = "Утвердить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
		
	ИначеЕсли Значение = "Подписать" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
		
	ИначеЕсли Значение = "Аннулировать" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		
	ИначеЕсли Значение = "Исправить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		
	ИначеЕсли Значение = "Завершен" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением); 
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
		
	ИначеЕсли Значение = "Отправлен" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению); 
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора); 
		
	ИначеЕсли Значение = "Отправить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
		
	ИначеЕсли Значение = "ТребуетВнимания" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		
	КонецЕсли;
	
	Использование = СписокСостояний.Количество();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, 
		Поле, ВидСравненияКомпоновкиДанных.ВСписке, СписокСостояний, , Использование, Режим);
		
КонецПроцедуры

&НаСервере
Функция ЭтоВходящиеИсходящие(Знач Список)
	
	Возврат Список <> "Сформировать" И Список <> "Приглашения" И Список <> "Ошибки";
				
КонецФункции

&НаСервереБезКонтекста
Процедура ПредставлениеСостояния(ДанныеСтроки)
	
	Если ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение 
		И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) 
		Тогда
			
		ДанныеСтроки.Состояние = НСтр("ru = 'Утвердить пакет'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Утвердить'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать аннулирование'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать отклонение'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Исправить'");
				
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Аннулировать'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправить'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправлен на аннулирование'");
		
	ИначеЕсли СтрНайти(ДанныеСтроки.СостояниеЭДО, "Ожидается") <> 0 Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправлен'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Не сформирован'");
		
	ИначеЕсли ДокументВСостоянииЗавершен(ДанныеСтроки) Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Аннулирован'");
			
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен с отклонением'");
	 				
	Иначе
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен'");
		
	КонецЕсли;
		
	КартинкиСостояний = СоответствиеИндексовКартинокСостоянийЭДО();
	
	Если ДанныеСтроки.Свойство("КартинкаСтатуса") Тогда 
		
		ДанныеСтроки.КартинкаСтатуса = 0;
		
		Если ДанныеСтроки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
			
			Если ДокументТребуетВнимания(ДанныеСтроки) Тогда
				
				ДанныеСтроки.КартинкаСтатуса = КартинкиСостояний.Получить("ТребуетВнимания");
							
			Иначе
				
				ДанныеСтроки.КартинкаСтатуса = КартинкиСостояний.Получить("НеТребуетВнимания");
			
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеИндексовКартинокСостоянийЭДО()
	
	КартинкиСостояний = Новый Соответствие;
	КартинкиСостояний.Вставить("ТребуетВнимания", 1);
	КартинкиСостояний.Вставить("НеТребуетВнимания", 0);
	
	Возврат КартинкиСостояний
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументТребуетВнимания(Знач ДанныеСтроки)
	
	Возврат ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение 
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение 
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
				ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
КонецФункции

&НаСервереБезКонтекста
Функция ДокументВСостоянииЗавершен(Знач ДанныеСтроки)
	
	Возврат ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно 
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
		
КонецФункции

&НаСервере
Процедура ОбновитьДинамическийСписокТекущегоРаздела(ПеречитыватьДанные = Истина)
		
	Если ПеречитыватьДанные Тогда
		Элементы[ТекущийРаздел].Обновить();
	КонецЕсли;
	
	КоличествоДокументов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки)
			
	ИдентификаторыДокументовПакетов = Новый Соответствие;
		
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные; 
				
		СписокДокументов = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета];
		
		Если СписокДокументов = Неопределено Тогда
			
			СписокДокументов = Новый ТаблицаЗначений;
			СписокДокументов.Колонки.Добавить("ПорядокСортировкиВПакете");
			СписокДокументов.Колонки.Добавить("НомерСлужебный");
			
		КонецЕсли;		
		
		Документ = СписокДокументов.Добавить();
		Документ.ПорядокСортировкиВПакете = ДанныеСтроки.ПорядокСортировкиВПакете;
		Документ.НомерСлужебный = ДанныеСтроки.НомерСлужебный;
		
		ИдентификаторыДокументовПакетов.Вставить(ДанныеСтроки.КлючСортировкиПакета, СписокДокументов);	
		
	КонецЦикла;	
		
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;
		
		Основания = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ДанныеСтроки.ЭлектронныйДокумент);  
		
		Если ЗначениеЗаполнено(Основания) Тогда
		
			КоличествоОснований = Основания.Количество();

			ШаблонСтроки = НСтр("ru = 'Учтен (%1)'");
			ДанныеСтроки.ОтражениеВУчете = СтрШаблон(ШаблонСтроки, КоличествоОснований);		
			
		Иначе
			
			ДанныеСтроки.ОтражениеВУчете = "";	
		
		КонецЕсли;
					
		ПредставлениеСостояния(ДанныеСтроки);
							
		ДанныеСтроки.КлючДокумента = Строка(ДанныеСтроки.ЭлектронныйДокумент.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторПакета) Тогда
			ДанныеСтроки.КлючПакета = Строка(ДанныеСтроки.ИдентификаторПакета);
		Иначе
			ДанныеСтроки.КлючПакета = "";
		КонецЕсли;
		
		ТекущиеИдентификаторы = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета]; 
		
		Если ТекущиеИдентификаторы <> Неопределено И ДанныеСтроки.КлючСортировкиПакета <> "" Тогда
			
			НачалоДня = НачалоДня(ДанныеСтроки.ВремяПолучения);
			ДатаПолученияСоВременем = ДанныеСтроки.ДатаПолучения + (ДанныеСтроки.ВремяПолучения - НачалоДня); 
			ДанныеСтроки.ДатаПолучения = ДатаПолученияСоВременем;
									
			ТекущиеИдентификаторыСвернута = Новый ТаблицаЗначений;
			ТекущиеИдентификаторыСвернута.Колонки.Добавить("ПорядокСортировкиВПакете");
			
			Для Индекс = 0 По ТекущиеИдентификаторы.Количество() - 1 Цикл 
				ТекущиеИдентификаторыСвернута.Добавить();	
			КонецЦикла;
			
			ЗначениеКолонки = ТекущиеИдентификаторы.ВыгрузитьКолонку("ПорядокСортировкиВПакете");
			ТекущиеИдентификаторыСвернута.ЗагрузитьКолонку(ЗначениеКолонки, "ПорядокСортировкиВПакете");
			
			ТекущиеИдентификаторыСвернута.Свернуть("ПорядокСортировкиВПакете");
			
			Если ТекущиеИдентификаторыСвернута.Количество() = 1 Тогда 
				ТекущиеИдентификаторы.Сортировать("НомерСлужебный Убыв");
			Иначе
				ТекущиеИдентификаторы.Сортировать("ПорядокСортировкиВПакете Возр");
			КонецЕсли;
			
			ДанныеСтроки.ПервыйДокументПакета = ДанныеСтроки.НомерСлужебный = ТекущиеИдентификаторы[0].НомерСлужебный;
			 						
			ДанныеСтроки.ИндексКартинкиПакета = 0;			
			
			Если ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) Тогда
				
				ДанныеСтроки.ИндексКартинкиПакета = 1;
				
			ИначеЕсли Не ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) Тогда
				
				Если ДанныеСтроки.Свойство("ДатаПолучения") Тогда
					ДанныеСтроки.ДатаПолучения = "";	
				КонецЕсли;
				Если ДанныеСтроки.Свойство("КартинкаСтатуса") Тогда
					ДанныеСтроки.КартинкаСтатуса = 0;	
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Контрагент") Тогда
					ДанныеСтроки.Контрагент = ""; 
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Организация") Тогда
					ДанныеСтроки.Организация = ""; 
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Ответственный") Тогда
					ДанныеСтроки.Ответственный = "";
				КонецЕсли; 
				Если ДанныеСтроки.Свойство("Состояние") Тогда
					ДанныеСтроки.Состояние = "";
					ДанныеСтроки.КартинкаСтатуса = 0;
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Вложение") Тогда
					ДанныеСтроки.Вложение = "";
				КонецЕсли;
			
			КонецЕсли; 
				
		Иначе
			
			ДанныеСтроки.ПервыйДокументПакета = Истина;
			ДанныеСтроки.ИндексКартинкиПакета = 0;
			
		КонецЕсли;  
					
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер()

	Элементы.ОтображатьУдаленныеВходящие.Пометка = ОтображатьУдаленные;
	Элементы.ОтображатьУдаленныеИсходящие.Пометка = ОтображатьУдаленные;
	
	Для каждого ИмяСписка Из ИменаСписковФормы() Цикл
		Если ИмяСписка = "Сформировать" ИЛИ ИмяСписка = "Приглашения" Тогда
			Продолжить;
		КонецЕсли;
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	КонецЦикла;
			
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтерфейсЭДО", "ОтображатьУдаленные", ОтображатьУдаленные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеСпискиФормы()
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяСписка Из ИменаСписковФормы() Цикл

		Элементы[ИмяСписка].Обновить();

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходКТрадиционномуИнтерфейсу

&НаКлиенте
Процедура ПослеОтветаНаВопросПереходНаТрадиционныйИнтерфейс(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда 
    	ПерейтиНаТрадиционныйИнтерфейс();
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО");
		Закрыть();
    КонецЕсли;	
 
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаТрадиционныйИнтерфейс()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтерфейсЭДО", "ВсегдаИспользоватьНовыйИнтерфейс", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПриглашениями

&НаКлиенте
Процедура ОтправкаПриглашенийОповещениеОЗавершении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
	
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = Результат.КоличествоОтправленных;
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ОтправленоПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьДинамическийСписокТекущегоРаздела();
		
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПринятиеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Принять());

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашения(Действие)

	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
	"КлючПриглашения, ИдентификаторОрганизации, Организация, ИдентификаторКонтрагента, СпособОбменаЭД, Контрагент, НовыйКонтрагент");
	
	ВходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл
		ВходящееПриглашение = СинхронизацияЭДОКлиент.НовоеВходящееПриглашение();
		ЗаполнитьЗначенияСвойств(ВходящееПриглашение, ДанныеПриглашения, , "Контрагент");
		Если ТипЗнч(ДанныеПриглашения.Контрагент) = ТипЗнч(ПустойКонтрагент) Тогда
			ВходящееПриглашение.Контрагент = ДанныеПриглашения.Контрагент;
		Иначе
			ВходящееПриглашение.Контрагент = ПустойКонтрагент;
		КонецЕсли;
		ВходящееПриглашение.СпособОбмена = ДанныеПриглашения.СпособОбменаЭД;
		ВходящиеПриглашения.Добавить(ВходящееПриглашение);
	КонецЦикла;
	
	ДополнительныеПараметрыОповещения = Новый Структура("ОтветНаПриглашение", Действие);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОтветовНаПриглашения", ЭтотОбъект, 
		ДополнительныеПараметрыОповещения);

	Если Действие = ОтветНаПриглашение_Принять() Тогда
		СинхронизацияЭДОКлиент.ПринятьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отклонить() Тогда
		СинхронизацияЭДОКлиент.ОтклонитьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отозвать() Тогда
		СинхронизацияЭДОКлиент.ОтозватьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	Иначе
		Возврат;
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Принять()
	Возврат "Принять";
КонецФункции  

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отклонить()
	Возврат "Отклонить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отозвать()
	Возврат "Отозвать";
КонецФункции

&НаКлиенте
Процедура ПослеОтправкиОтветовНаПриглашения(Результат, Контекст) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
		
		КоличествоОбработанныхПриглашений = Результат.КоличествоОбработанных;
		
		Если Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Принять() Тогда
			ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отозвать() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отзываются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отозвано приглашений: %1'");
		Иначе
			Возврат;
		КонецЕсли;

		ТекстСообщения = СтрШаблон(ШаблонСообщения, КоличествоОбработанныхПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьДинамическийСписокТекущегоРаздела();
	
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтклонениеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отклонить());

КонецПроцедуры

#КонецОбласти

#Область ПредпросмотрЭлектронногоДокумента

&НаКлиенте
Процедура ОбновитьОбластьПросмотра()
	
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные;	
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ОтображатьОбластьПредпросмотра Тогда
		Возврат;	
	КонецЕсли;
	 
	ОбновитьВидимостьКомандТекущейСтроки(ТекущиеДанные);

	Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОжидание;
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаНеВыбранДокумент;
		Возврат;	
	КонецЕсли;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаПредставлениеПомеченногоНаУдаление;
		Возврат;	
	КонецЕсли;
		
	КонтрольОтраженияВУчете = Неопределено;
	Если Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные <> Неопределено Тогда
		КонтрольОтраженияВУчете = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные.КонтрольОтраженияВУчете;
	КонецЕсли;
	
	ДанныеОбластиПросмотра = ИнтерфейсДокументовЭДОВызовСервераПовтИсп.ДанныеОбластиПросмотра(ТекущийЭлектронныйДокумент, 
		КонтрольОтраженияВУчете);
	
	Если Не ДанныеОбластиПросмотра.Распознан И Не ДанныеОбластиПросмотра.Внутренний
		И Не ДанныеОбластиПросмотра.ПредставлениеДокумента <> Неопределено Тогда
		
		ТекущийФайл = ДанныеОбластиПросмотра.ФайлСсылка;
		ТекущийФайлНомерИконки = ДанныеОбластиПросмотра.ФайлНомерИконки;
		ТекущийФайлПредставление = ДанныеОбластиПросмотра.ФайлПредставление;
		
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаФайл;
		
		Предпросмотр = Неопределено;
				
	Иначе
		
		Если ДанныеОбластиПросмотра.ПредставлениеДокумента <> Неопределено Тогда
			
			Предпросмотр = ДанныеОбластиПросмотра.ПредставлениеДокумента;
			
			Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаТабличныйДокументИнформацияОтправителя; 
			
			#Если Не ВебКлиент Тогда
				
				МассивВыделенныеОбластей = Новый Массив;
				МассивВыделенныеОбластей.Добавить("R1C1");
				Элементы.ТабличныйДокументИнформацияОтправителя.УстановитьВыделенныеОбласти(МассивВыделенныеОбластей);
			
			#КонецЕсли 
			
		Иначе
			
			Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОшибка;
				
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознатьДокумент(ЭлектронныйДокумент)
		
	Результат = Ложь;
	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
		И ЭлектронныйДокумент.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		РезультатРаспознавания =
		МодульЭлектронноеАктированиеЕИС.РаспознатьСообщение(СообщениеОтправителя);
		Результат = ЗначениеЗаполнено(РезультатРаспознавания);
	Иначе 
		Попытка
			Результат = ЗначениеЗаполнено(ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя));
		Исключение
			Результат = Ложь;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

 #Область ВидимостьЭлементовФормы
 
 &НаСервере
Процедура КоличествоДокументов()
	
	КоличествоНовыхВходящие 	= 0;			
	КоличествоНовыхИсходящие 	= 0;
	КоличествоПриглашений		= 0;	
	КоличествоСоздать 			= 0;
	
	СостоянияЭДО = Новый СписокЗначений;
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение); 
		
	Запрос = Новый Запрос;
	ТекстЗапросаВходящиеТребуютВнимания(Запрос);
	Запрос.УстановитьПараметр("Состояние", СостоянияЭДО);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоНовыхВходящие = ВыборкаДетальныеЗаписи.Количество();
	
	Запрос = Новый Запрос;
	ТекстЗапросаИсходящиеТребуютВнимания(Запрос);
	Запрос.УстановитьПараметр("Состояние", СостоянияЭДО);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоНовыхИсходящие = ВыборкаДетальныеЗаписи.Количество();
		
	Запрос = Новый Запрос;
	ТекстЗапросаСоздатьНовый(Запрос);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоСоздать = ВыборкаДетальныеЗаписи.Количество();
	
	Если КоличествоСоздать = 0 Тогда
		Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
	Иначе
		Элементы.КомандаПодписатьОтправить.Видимость = Истина;
	КонецЕсли;
	
	СтатусыПриглашений = Новый СписокЗначений; 
	СтатусыПриглашений.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
	СтатусыПриглашений.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяОтправить);
	ПустойКонтрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновнаяТаблица.Ключ КАК КлючПриглашения,
		|	ОсновнаяТаблица.Статус КАК СтатусПодключения,
		|	ВЫБОР
		|		КОГДА ОсновнаяТаблица.Контрагент = &ПустойКонтрагент
		|				ИЛИ ОсновнаяТаблица.Контрагент = НЕОПРЕДЕЛЕНО
		|			ТОГДА ОсновнаяТаблица.Наименование + "" ("" + &ИНН + "": "" + ОсновнаяТаблица.ИНН + "")""
		|		ИНАЧЕ ОсновнаяТаблица.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ОсновнаяТаблица.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ОсновнаяТаблица.Ознакомиться КАК Ознакомиться,
		|	ОсновнаяТаблица.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВЫБОР
		|		КОГДА ОсновнаяТаблица.Контрагент = &ПустойКонтрагент
		|				ИЛИ ОсновнаяТаблица.Контрагент = НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НовыйКонтрагент
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ОсновнаяТаблица.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ОсновнаяТаблица.Контрагент <> &ПустойКонтрагент
		|	И ОсновнаяТаблица.ДатаИзмененияСтатуса <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ОсновнаяТаблица.Статус В (&СтатусыПриглашений)";
	
	Запрос.УстановитьПараметр("ПустойКонтрагент", ПустойКонтрагент); 
	Запрос.УстановитьПараметр("СтатусыПриглашений", СтатусыПриглашений);
	Запрос.УстановитьПараметр("ИНН", НСтр("ru = 'ИНН'"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоПриглашений = ВыборкаДетальныеЗаписи.Количество();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	НЕ ТранспортныйКонтейнерЭДО.ПометкаУдаления
		|	И НЕ ТранспортныйКонтейнерЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
		|	И ТранспортныйКонтейнерЭДО.Статус В(&СтатусыНеРаспакованныхТранспортныхСообщенийБЭД)
		|	И ТранспортныйКонтейнерЭДО.Направление = &Направление
		|{ГДЕ
		|	ТранспортныйКонтейнерЭДО.Направление}";
	
	СтатусыНеРаспакованныхТранспортныхСообщений = СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
	Запрос.УстановитьПараметр("СтатусыНеРаспакованныхТранспортныхСообщенийБЭД",
		СтатусыНеРаспакованныхТранспортныхСообщений); 
	
	ВходящееНаправление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	Запрос.УстановитьПараметр("Направление",  
		ВходящееНаправление);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	КоличествоНераспакованныхКонтейнеров = ВыборкаДетальныеЗаписи.Количество();
	
	ПанельНавигации = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет("ПанельНавигации_ru").ПолучитьТекст();
	
	Если ТекущийРаздел = "ВходящиеЭлектронныеДокументы" Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "inbox");		
	ИначеЕсли ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "sent");
	ИначеЕсли ТекущийРаздел = "Сформировать" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "create");
	ИначеЕсли ТекущийРаздел = "Приглашения" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "invitation");
	ИначеЕсли ТекущийРаздел = "Ошибки" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "error");
	КонецЕсли;
			
	Если КоличествоСоздать = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоСоздать", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоСоздать", КоличествоСоздать);	
	КонецЕсли;
	
	Если КоличествоПриглашений = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоПриглашений", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоПриглашений", КоличествоПриглашений);	
	КонецЕсли;
	
	Если КоличествоНовыхВходящие = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоВходящих", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоВходящих", КоличествоНовыхВходящие);	
	КонецЕсли;
	
	Если КоличествоНовыхИсходящие = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоИсходящих", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоИсходящих", КоличествоНовыхИсходящие);	
	КонецЕсли;

	Если КоличествоНераспакованныхКонтейнеров = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "скрыть", "hidden");
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоНераспакованныхКонтейнеров", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоНераспакованныхКонтейнеров", 
			КоличествоНераспакованныхКонтейнеров);	
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаСоздатьНовый(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияЭД.СсылкаНаОбъект КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ТранспортныйКонтейнерЭДО
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
		|	И СостоянияЭД.Вид <> """"";
		
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаИсходящиеТребуютВнимания(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеДокументыПереопределяемый.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныеДокументыПереопределяемый.Ответственный КАК Ответственный,
		|	СостоянияЭДОПереопределяемый.Состояние КАК СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныеДокументыПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДОПереопределяемый
		|		ПО (СостоянияЭДОПереопределяемый.ЭлектронныйДокумент = ЭлектронныеДокументыПереопределяемый.Ссылка)
		|ГДЕ
		|	НЕ ЭлектронныеДокументыПереопределяемый.ПометкаУдаления
		|	И СостоянияЭДОПереопределяемый.Состояние В(&Состояние)";
		
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаВходящиеТребуютВнимания(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеДокументыПереопределяемый.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныеДокументыПереопределяемый.Ответственный КАК Ответственный,
		|	СостоянияЭДОПереопределяемый.Состояние КАК СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныеДокументыПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДОПереопределяемый
		|		ПО (СостоянияЭДОПереопределяемый.ЭлектронныйДокумент = ЭлектронныеДокументыПереопределяемый.Ссылка)
		|ГДЕ
		|	НЕ ЭлектронныеДокументыПереопределяемый.ПометкаУдаления
		|	И СостоянияЭДОПереопределяемый.Состояние В(&Состояние)";

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКомандТекущейСтроки(ТекущиеДанные)
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Свойство("СостояниеЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаУтвердить; 
		
	ИначеЕсли ТекущиеДанные.СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание") 
		ИЛИ ТекущиеДанные.СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования")
		ИЛИ ТекущиеДанные.СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения")
		
		Тогда			
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаПодписать;
			
	ИначеЕсли ТекущиеДанные.СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаАннулировать;
		
	ИначеЕсли ТекущиеДанные.СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаПодготовитьКОтправке;
		
	Иначе
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаНедоступныеКоманды;	
			
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("КонтрольОтраженияВУчете") 
		И ТекущиеДанные.КонтрольОтраженияВУчете = 0 Тогда
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаСопоставитьНоменклатуру;	
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовИКоманд()
	
	ТекущиеДанные = Неопределено;
			
	Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Ложь;
	
	Элементы.Ответственный.Видимость = Истина;
	Элементы.Состояние.Видимость = Истина;
	Элементы.ТипДокумента.Видимость = Истина;
	Элементы.ТипРегламента.Видимость = Истина;
	Элементы.СтатусПриглашения.Видимость = Ложь;

	Если ТекущийРаздел = "ВходящиеЭлектронныеДокументы" Тогда
		
		ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыВходящиеИсходящие;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаВходящие;
				
		Элементы.ТипДокумента.Видимость = Истина;

		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
			
	
	ИначеЕсли ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда
		
		ТекущиеДанные = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыВходящиеИсходящие;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаИсходящие;
						
		Элементы.ТипДокумента.Видимость = Истина;

		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
				
	ИначеЕсли ТекущийРаздел = "Сформировать" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыСформировать;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаСоздатьНовый; 
		
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
		
		Если КоличествоСоздать = 0 Тогда
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
		Иначе
			Элементы.КомандаПодписатьОтправить.Видимость = Истина;
		КонецЕсли;
		
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.Состояние.Видимость = Ложь;
		Элементы.ТипДокумента.Видимость = Ложь;
		Элементы.ТипРегламента.Видимость = Ложь;
					
	ИначеЕсли ТекущийРаздел = "Приглашения" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыПриглашения;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаПриглашения; 
		
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
		
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.Состояние.Видимость = Ложь;
		Элементы.ТипДокумента.Видимость = Ложь;
		Элементы.ТипРегламента.Видимость = Ложь;
		Элементы.СтатусПриглашения.Видимость = Истина;
			
	ИначеЕсли ТекущийРаздел = "Ошибки" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыОшибки;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаПриглашения;
				 
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Ложь;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
	
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьВидимостьКомандТекущейСтроки(ТекущиеДанные);
				
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандФормыПоПравам()
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	
	Элементы.ГруппаКнопокПодписать.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокАннулировать.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокНедоступныеКоманды.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокСопоставитьНоменклатуру.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокУтвердить.Видимость = ЕстьПравоОбработкиДокументов;

	Элементы.РаспаковатьКонтейнеры.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.УстановитьСтатусОтмененКонтейнера.Видимость = ЕстьПравоОбработкиДокументов;

	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюГруппаОсновныеКоманды.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюГруппаОсновныеКоманды.Видимость = ЕстьПравоОбработкиДокументов; 
	
	Элементы.СформироватьКонтекстноеМенюПодписатьОтправить.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.ГруппаКнопокПринять.Видимость = ЕстьПравоНастройкиОбмена;
	Элементы.НовоеПриглашение.Видимость = ЕстьПравоНастройкиОбмена;
	Элементы.КомандаОтправитьПриглашение.Видимость = ЕстьПравоНастройкиОбмена;
		
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

&НаКлиенте
Процедура ПоказатьСопоставлениеНоменклатуры()

	НоменклатураДляСопоставления = Новый Массив;

	Если ТекущийРаздел = "НоменклатураКонтрагентов" Тогда

		Владельцы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.НоменклатураКонтрагентов.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.НоменклатураКонтрагентов.ДанныеСтроки(СтрокаСписка);
			Владельцы.Добавить(ДанныеСтроки.Владелец);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоВладельцам(Владельцы);

	Иначе

		ЭлектронныеДокументы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.ВходящиеЭлектронныеДокументы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВходящиеЭлектронныеДокументы.ДанныеСтроки(СтрокаСписка);
			ЭлектронныеДокументы.Добавить(ДанныеСтроки.ЭлектронныйДокумент);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоЭД(ЭлектронныеДокументы);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
		ТекстСообщения = НСтр("ru = 'Сопоставление номенклатуры не требуется.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("НоменклатураДляСопоставления", 
		НоменклатураДляСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьСопоставлениеНоменклатуры", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НоменклатураДляСопоставления, , 
		ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставлениеНоменклатуры(Результат,
		ДополнительныеПараметры) Экспорт

	ОбновитьДинамическийСписокТекущегоРаздела();

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураПоЭД(Знач ЭлектронныеДокументы)

	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныеДокументы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоВладельцам(Знач Владельцы)

	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(, Владельцы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

#КонецОбласти

#Область ДействияСДокументами

 &НаКлиенте
Процедура ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПолучениеЭДЗавершение(Результат, Контекст) Экспорт
	
	ОбновитьДинамическиеСпискиФормы();
	
	Элементы.Обновить.Доступность = Истина;
	
	КоличествоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформироватьПодписатьИОтправить()
	
	ВыделенныеСтроки = Элементы.Сформировать.ВыделенныеСтроки;
	НаборОбъектовУчета = Новый Массив(ВыделенныеСтроки.Количество());
	
	Для Индекс = 0 По НаборОбъектовУчета.ВГраница() Цикл
		НаборОбъектовУчета[Индекс] = Элементы.Сформировать.ДанныеСтроки(ВыделенныеСтроки[Индекс]).Документ;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбъектыУчета", НаборОбъектовУчета);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД(НаборОбъектовУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандаПодписать()	
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
	
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОУтвердить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОУтвердить);
	ДействияПоЭДОСформироватьОтвет = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОСформироватьОтвет);
	ДействияПоЭДОПодписать = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОПодписать);
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОПодготовитьКОтправке);
	ДействияПоЭДООтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДООтправить);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда

		Если Результат.Свойство("КонтекстДиагностики")
			И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда

			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);	

		ИначеЕсли Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда

			ПараметрыОбработки = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
			ПараметрыОбработки.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(Результат.ОшибкиФормирования);
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("ОбъектыУчета") Тогда
				ПараметрыОбработки.СписокДокументовКОтправке = ДополнительныеПараметры.ОбъектыУчета;
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыПомощникаФормирования", 
				ЭтотОбъект, ДополнительныеПараметры);
			ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОбработки);
	
		КонецЕсли;

	КонецЕсли; 
	
	ОбновитьДинамическийСписокТекущегоРаздела();
	
	ОбновитьВидимостьКомандТекущейСтроки(Элементы[ТекущийРаздел].ТекущиеДанные);
	
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыПомощникаФормирования(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, 
			ДополнительныеПараметры);
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуФормированияДокументовПослеВводаСтроки(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОВызовСервера.ОтменитьФормированиеДокументовПоОбъектамУчета(
		ДополнительныеПараметры.ОбъектыУчета, Комментарий);	
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНераспакованнымиКонтейнерами

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)

	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Количество = 0;
	СтатусыТранспортныхСообщенийБЭДОтменен = 
		ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Отменен");
	УстановитьСтатусТранспортныхКонтейнеров(МассивЭД, СтатусыТранспортныхСообщенийБЭДОтменен, Количество, 
		КонтекстДиагностики);
	ТекстОповещения = НСтр("ru = 'Изменен статус транспортного контейнера на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	Текст = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(Текст, , ТекстОповещения);
	ОбновитьДинамическийСписокТекущегоРаздела();
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусТранспортныхКонтейнеров(Знач МассивКонтейнеров, Знач СтатусКонтейнера,
		КоличествоИзмененных, КонтекстДиагностики)

	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивКонтейнеров Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если СинхронизацияЭДО.ИзменитьСтатусТранспортногоКонтейнера(СтрокаТаблицы.Ссылка, СтатусКонтейнера) Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
			КонецЕсли;
			КоличествоИзмененных = КоличествоИзмененных + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОперации = НСтр("ru = 'Изменение статуса транспортных контейнеров ЭД'");
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", СтрокаТаблицы.Ссылка);
			ВидОшибкиНеизвестнаяОшибка = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
			ИнформацияОшибки = ИнформацияОбОшибке();
			ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(
				ИнформацияОшибки);
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОшибки);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ТекстОперации, ВидОшибкиНеизвестнаяОшибка, 
				ПодробноеОписаниеОшибки, КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
			ПодсистемаБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ПодсистемаБЭД.ОбменСКонтрагентами);
				
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ДобавитьИзФайлаНаДискеЗавершить(ФайлПомещен, АдресВХранилище, ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
 	Если ФайлПомещен Тогда
	
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВыбранныйФайл", СтруктураИмениФайла.Имя);
		ПараметрыОповещения.Вставить("АдресВХранилище", АдресВХранилище);

		ОповещениеОЗавершении = 
			Новый ОписаниеОповещения("ДобавитьИзФайлаНаДискеПослеВыбораФайла", 
				ЭтотОбъект, ПараметрыОповещения);
				
		РаботаСФайламиБЭДКлиент.СкорректироватьИмяФайлаСУчетомКодировки(ОповещениеОЗавершении, СтруктураИмениФайла.Имя);		

	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьИзФайлаНаДискеПослеВыбораФайла(ИмяФайла, Параметры) Экспорт
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Параметры.ВыбранныйФайл = ИмяФайла;	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотра", Параметры);
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗаполнитьВыбранныеДанные()
	
	МассивВыбранныхСтрок = Новый Массив;
	МассивВыбранныхПакетов = Новый Массив;
	
	ВыбранныеДанные = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "КлючДокумента, КлючПакета");
	
	Для Каждого Данные Из ВыбранныеДанные Цикл
		
		МассивВыбранныхСтрок.Добавить(Данные.КлючДокумента);
		
		Если ЗначениеЗаполнено(Данные.КлючПакета) И ПакетноеОтображение Тогда
			МассивВыбранныхПакетов.Добавить(Данные.КлючПакета);
		КонецЕсли;
		
	КонецЦикла;
	
	КлючиВыбранныхДокументов = СтрСоединить(МассивВыбранныхСтрок, ",");
	КлючиВыбранныхПакетов = СтрСоединить(МассивВыбранныхПакетов, ",");
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеВыделенныхСтрокРаздела(Знач Раздел, Знач ПутьКДанным, ПолучатьКлючСтроки = Ложь)
	
	МассивДанных = Новый Массив;
	ИспользоватьМассивРеквизитов = Ложь;
	
	Таблица = Элементы[Раздел];
	
	Реквизиты = СтрЗаменить(ПутьКДанным, " ", "");
	МассивРеквизитов = СтрРазделить(Реквизиты, ",", Ложь);
	
	Если МассивРеквизитов.Количество() > 1 Или ПолучатьКлючСтроки Тогда
		ИспользоватьМассивРеквизитов = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица.ВыделенныеСтроки Цикл
		
		Данные = Таблица.ДанныеСтроки(СтрокаТаблицы);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИспользоватьМассивРеквизитов Тогда
			
			Результат = Новый Структура;
			
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Результат.Вставить(Реквизит, Данные[Реквизит]);
			КонецЦикла;
			Результат.Вставить("КлючСтроки", СтрокаТаблицы);
			МассивДанных.Добавить(Результат);
			
		Иначе
			МассивДанных.Добавить(Данные[ПутьКДанным]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции
 
&НаКлиенте
Функция ОбъектыДействий(СтрокиРаздела)
	
	Результат = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	
	Для Каждого СтрокаРаздела Из СтрокиРаздела Цикл
		
		ИдентификаторПакета = СтрокаРаздела.ИдентификаторПакета;
		
		Если ЗначениеЗаполнено(ИдентификаторПакета) И ПакетноеОтображение
			И Результат.ПакетыДокументов.Найти(ИдентификаторПакета) = Неопределено Тогда
			
			Результат.ПакетыДокументов.Добавить(ИдентификаторПакета);
			
		Иначе
			Результат.ЭлектронныеДокументы.Добавить(СтрокаРаздела.ЭлектронныйДокумент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьДублирующийсяЭлемент(Элементы, ЭлементПоиска)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент <> ЭлементПоиска Тогда
			
			Если Элемент.Оформление.Элементы.Количество() <> ЭлементПоиска.Оформление.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			НайденОтличающийсяЭлемент = Ложь;
			
			ЧислоЭлементов = Элемент.Оформление.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Оформление.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Оформление.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Параметр <> Элемент2.Параметр ИЛИ Элемент1.Значение <> Элемент2.Значение Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Отбор.Элементы.Количество() <> ЭлементПоиска.Отбор.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ЧислоЭлементов = Элемент.Отбор.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Отбор.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Отбор.Элементы[Индекс];
				
				ЭлементыРавны = СравнитьЭлементыОтбора(Элемент1, Элемент2);
				Если Не ЭлементыРавны Тогда
					НайденОтличающийсяЭлемент = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СравнитьЭлементыОтбора(Элемент1, Элемент2)
	
	Если Элемент1.Использование = Элемент2.Использование
		И ТипЗнч(Элемент1) = ТипЗнч(Элемент2) Тогда
		
		Если ТипЗнч(Элемент1) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения
				ИЛИ Элемент1.ЛевоеЗначение <> Элемент2.ЛевоеЗначение
				ИЛИ Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			ЧислоЭлементов = Элемент1.Элементы.Количество();
			Если Элемент1.ТипГруппы <> Элемент2.ТипГруппы
				ИЛИ ЧислоЭлементов <> Элемент2.Элементы.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				ПодчиненныйЭлемент1 = Элемент1.Элементы[Индекс];
				ПодчиненныйЭлемент2 = Элемент2.Элементы[Индекс];
				ЭлементыРавны = СравнитьЭлементыОтбора(ПодчиненныйЭлемент1, ПодчиненныйЭлемент2);
				
				Если Не ЭлементыРавны Тогда
					Возврат ЭлементыРавны;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()

	ТекущиеДанные = Элементы[ТекущийРаздел].ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);
	
	ДокументРаспознан = РаспознатьДокумент(ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ДокументРаспознан", ДокументРаспознан);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУчетныйДокумент(Знач ИмяТаблицы = "ВходящиеЭлектронныеДокументы")

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НаборУчетныхДокументов = ОбъектыУчетаЭлектронногоДокумента(ТекущиеДанные.ЭлектронныйДокумент);

	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ПоказатьРасширенныйПодборДокументовУчета();
		Возврат;
	КонецЕсли;

	Если НаборУчетныхДокументов.Количество() = 1 Тогда

		ПоказатьЗначение(, НаборУчетныхДокументов[0]);

	Иначе

		СписокУчетныхДокументов = Новый СписокЗначений;
		СписокУчетныхДокументов.ЗагрузитьЗначения(НаборУчетныхДокументов);
		Обработка = Новый ОписаниеОповещения("ОбработатьВыборУчетногоДокументаДляПоказа", ЭтотОбъект);
		СписокУчетныхДокументов.ПоказатьВыборЭлемента(Обработка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУчетногоДокументаДляПоказа(Знач ВыбранныйЭлемент,
		Знач ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыУчетаЭлектронногоДокумента(Знач ЭлектронныйДокумент)

	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);

	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Основания;

КонецФункции  

&НаСервере
Функция СтатусыНеРаспакованныхТранспортныхСообщенийБЭД()
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Неизвестный"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке"));
	
	Возврат МассивСтатусов;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьОтправитьОбновить()
	Перем Оповещение;
	Элементы.Обновить.Доступность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.НачатьОтправкуПолучениеДокументов(ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНаПечать()
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для печати необходимо выбрать электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДОВызовСервера.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(ТекущийЭлектронныйДокумент, 
		ПараметрыВизуализации);
	
КонецПроцедуры

&НаКлиенте
Функция СобытиеОбновитьСписки(Знач ИмяСобытия)
	
	Возврат ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений"
		Или ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО()
		Или ИмяСобытия = "ПрочтениеОбновитьСписок";
		
КонецФункции

#КонецОбласти

#КонецОбласти