#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();	
	
	Параметры.Свойство("НеОтправлять", НеОтправлять);
	Параметры.Свойство("ИсправляемыйДокумент", ИсправляемыйДокумент);
	
	Параметры.Свойство("РежимПодписатьОтправить", ПодписатьОтправить);
	Элементы.ГруппаИзмененыНастройки.Видимость = Ложь;
	
	СпособУказанияМаршрута = "ЗадатьВручную";
	
	МассивДокументов = Неопределено;
	Если Не Параметры.Свойство("СписокДокументовКОтправке", МассивДокументов) Тогда
		МассивДокументов = Новый Массив;
	КонецЕсли;
	
	СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
	 
	ДополнительныеДанные = Неопределено;
	Если Параметры.Свойство("ДополнительныеДанные", ДополнительныеДанные)
			И ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
		КэшДополнительныхДанных = Новый ФиксированнаяСтруктура(ДополнительныеДанные);
	КонецЕсли;
	
	МассовыйРежим = СписокДокументов.Количество() > 1;
	
	Если СписокДокументов.Количество() = 1 Тогда
		Элементы.ГруппаДокумент.Видимость = Истина;
		Элементы.ДекорацияПредставление.Заголовок = СформироватьЗаголовокДокумента(СписокДокументов[0]);
	Иначе
		Элементы.ГруппаДокумент.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВариантРаботы(ЭтотОбъект, Ложь);
	
	ПодготовитьФормуНаСервере(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДоступностьЭлементовВыбораМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УдалитьИзСпискаДокументовДляФормированияОтветногоТитула" Тогда 
		ЭтотОбъект["СписокДокументовДляФормированияОтветногоТитула"].Удалить(
			ЭтотОбъект["СписокДокументовДляФормированияОтветногоТитула"].Индекс(
				Элементы.СписокДокументовДляФормированияОтветногоТитула.ТекущиеДанные));
		Если ЭтотОбъект["СписокДокументовДляФормированияОтветногоТитула"].Количество() = 0 Тогда
			Закрыть();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьТребованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "НастройкаЗаполненияДополнительныхПолей" Тогда
		Если ДокументыКОтправке.Количество() > 0 Тогда
			
			КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
			КлючНастроек.Отправитель = ДокументыКОтправке[0].Организация;
			КлючНастроек.Получатель = ДокументыКОтправке[0].Контрагент;
			КлючНастроек.Договор = ДокументыКОтправке[0].ДоговорКонтрагента;
			КлючНастроек.ВидДокумента = ДокументыКОтправке[0].ВидДокумента;
			КлючНастроек.Вставить("ЭтоНастройкаОтправки", Истина);
			КлючНастроек.Вставить("Формат", ДокументыКОтправке[0].Формат);
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
			НастройкиЭДОКлиент.ОткрытьНастройкиЗаполненияДополнительныхПолей(КлючНастроек, Оповещение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоОрганизациям

&НаКлиенте
Процедура СписокПоОрганизациямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПоОрганизациям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.СписокПоОрганизациямРезультат
			И ТекущиеДанные.ЕстьПредупреждения Тогда
				
		КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправки.Отправитель = ТекущиеДанные.Организация;
		КлючНастроекОтправки.Получатель = ТекущиеДанные.Контрагент;
		КлючНастроекОтправки.Договор = ТекущиеДанные.ДоговорКонтрагента;
		КлючНастроекОтправки.ВидДокумента = ТекущиеДанные.ВидДокумента;
		
		ОткрытьРасшифровкуПредупреждений(КлючНастроекОтправки);
	ИначеЕсли Поле = Элементы.СписокПоОрганизациямНастройки Тогда
		
		Если ТекущиеДанные.ЭтоВнутреннийЭДО Тогда
			Если ТекущиеДанные.ЕстьНастройкиОтправки Тогда
				НастройкиЭДОКлиент.ОткрытьНастройкиВнутреннегоЭлектронногоДокументооборота(ТекущиеДанные.Организация);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеИзмененияНастроекВнутреннегоЭДО", ЭтотОбъект);
				ОписаниеВида = НастройкиЭДОКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
				ОписаниеВида.ОбъектУчета = ТекущиеДанные.ИдентификаторОбъектаУчета;
				НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
					ТекущиеДанные.Организация, ОписаниеВида, Оповещение);	
			КонецЕсли;
			
		Иначе
				
			ОткрытьНастройкиОбменаСКонтрагентом(ТекущиеДанные.Организация, ТекущиеДанные.Контрагент,
				ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Направление);
			
		КонецЕсли;

	ИначеЕсли Поле = Элементы.СписокПоОрганизациямКонтрагент
		Или Поле = Элементы.СписокПоОрганизациямОрганизация Тогда
		
		СсылкаНаОбъект = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, Элемент.Имя, "")];
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПоказатьЗначение(,СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПоОрганизациямВыбранПриИзменении(Элемент)
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеОшибкиДокументов

&НаКлиенте
Процедура ОбщиеОшибкиДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбщиеОшибкиДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КлючСообщения) Тогда
		ПоказатьЗначение(, ТекущиеДанные.КлючСообщения);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьЗначениеЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеЗавершение()
	
	ТекущиеДанные = Элементы.ОбщиеОшибкиДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеОшибки Из ТекущиеДанные.СписокОшибок Цикл
		Поле = "";
		ПутьКДанным = "";
		Если ЗначениеЗаполнено(ОписаниеОшибки.Представление) Тогда
			СоставляющиеПути = СтрРазделить(ОписаниеОшибки.Представление, ".");
			Если СоставляющиеПути.Количество() = 1 Тогда
				Поле = СоставляющиеПути[0];
			Иначе
				ПутьКДанным = СоставляющиеПути[0];
				СоставляющиеПути.Удалить(0);
				Поле = СтрСоединить(СоставляющиеПути, ".");
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОписаниеОшибки.Значение, ТекущиеДанные.КлючСообщения, Поле, ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКОтправке

&НаКлиенте
Процедура ДокументовКОтправкеВыбранПриИзменении(Элемент)
	СформироватьЗаголовокКомандыПодписать(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДокументовКОтправкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКОтправке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДокументыКОтправкеРезультат Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ЕстьОшибки Или ТекущиеДанные.ЕстьПредупреждения Тогда
			ОткрытьФормуИсправленияОшибок(ТекущиеДанные.Документ, ТекущиеДанные.ОписаниеОшибок.ВыгрузитьЗначения());
		Иначе
			ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчета(ТекущиеДанные.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодписантов

&НаКлиенте
Процедура СписокПодписантовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования
		ИЛИ МассовыйРежим
		ИЛИ Не ЗначениеЗаполнено(СписокДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Документ", СписокДокументов[0]);
	НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	
	СтрокаТаблицы.ГотовКОтправке = ЗначениеЗаполнено(СписокПодписантов) Или ЗначениеЗаполнено(Маршрут);
	СтрокаТаблицы.ЕстьОшибки = Не СтрокаТаблицы.ГотовКОтправке;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.Организация = СтрокаТаблицы.Организация;
	ТекущиеДанные.ВидДокумента = СтрокаТаблицы.ВидДокумента;

	СформироватьЗаголовокКомандыПодписать(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументовДляФормированияОтветногоТитула

&НаКлиенте
Процедура СписокДокументовДляФормированияОтветногоТитулаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытьЭлектронныйДокументДляПросмотра");

	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ДанныеСтроки.ЭлектронныйДокумент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПечатныхФорм

&НаКлиенте
Процедура СписокПечатныхФормПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПечатныхФормПометкаПриИзменении(Элемент)
	ИдентификаторПечатнойФормы = Элементы.СписокПечатныхФорм.ТекущиеДанные.Значение;
	Для Каждого СтрокаТаблицы Из СписокПечатныхФорм Цикл
		СтрокаТаблицы.Пометка = (СтрокаТаблицы.Значение = ИдентификаторПечатнойФормы);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	МассивДокументов = ЗаполнитьГотовКОтправкеПоОрганизации();
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
		ДокументыКОтправке.Очистить();
		
		Оповещение = Новый ОписаниеОповещения("ОбщийПослеФормированияЭД", ЭтотОбъект, МассивДокументов);
		НачатьФормированиеЭД(МассивДокументов, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьГотовКОтправкеПоОрганизации()
	
	Для Каждого СтрокаСписка Из СписокПоОрганизациям Цикл
		
		Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,
			|ЭтоВнутреннийЭДО, ИдентификаторОбъектаУчета, ВидДокумента, Направление");
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаСписка);
			
		НайденныеДокументы = ДокументыКОтправке.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаДокумент Из НайденныеДокументы Цикл
			
			СтрокаДокумент.ГотовКОтправке = СтрокаСписка.ГотовКОтправке;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПолучитьДокументыКОтправке(ДокументыКОтправке, Истина);
	
КонецФункции

&НаКлиенте
Процедура ПомощникДалее(Команда)
	
	НоваяСтраница = Неопределено;
	Если ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Истина, НоваяСтраница) = Ложь Тогда
		МассивДокументов = ПолучитьДокументыКОтправке(ДокументыКОтправке, Истина);
		
		Если МассивДокументов.Количество() > 0 Тогда
			
			СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
			ДокументыКОтправке.Очистить();
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИндексТекущейСтраницы", НоваяСтраница);
			ДопПараметры.Вставить("Документ", СписокДокументов);
			
			Оповещение = Новый ОписаниеОповещения("ПомощникУстраненияОшибокПослеФормированияЭД", ЭтотОбъект, ДопПараметры);
			НачатьФормированиеЭД(МассивДокументов, Оповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	Если Не ПроверитьЗаполнениеТекущегоЭтапа() Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	МассивОбъектовУчета = Новый Массив;
	
	ПараметрыДокументов = ПараметрыДокументовКОтправке();
	МассивОбъектовУчета = ПараметрыДокументов.МассивСсылок;
	ПараметрыДокументов = ПараметрыДокументов.ПараметрыФормированияДокументов;
	
	Если Не ЗначениеЗаполнено(МассивОбъектовУчета) Тогда
		Закрыть();
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыДокументов.ПодписантыОбъектов) Тогда
		ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов = ПараметрыДокументов.ПодписантыОбъектов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументов.КлючиНастроекОбъектов) Тогда
		ПараметрыВыполненияДействийПоЭДО.КлючиНастроекОбъектов = ПараметрыДокументов.КлючиНастроекОбъектов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументов.МаршрутыПодписанияОбъектов) Тогда
		ПараметрыВыполненияДействийПоЭДО.МаршрутыПодписанияОбъектов = ПараметрыДокументов.МаршрутыПодписанияОбъектов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументов.ИдентификаторыПечатныхФормОбъектов) Тогда
		ПараметрыВыполненияДействийПоЭДО.ИдентификаторыПечатныхФормОбъектов = 
			ПараметрыДокументов.ИдентификаторыПечатныхФормОбъектов;
	КонецЕсли;
	
	ДополнительныеДанные = ДанныеДополнительныхПолей();
	
	Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		Для каждого ОбъектДопДанных Из МассивОбъектовУчета Цикл
			ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(ОбъектДопДанных, ДополнительныеДанные);
		КонецЦикла;
	ИначеЕсли КэшДополнительныхДанных <> Неопределено Тогда
		Для каждого ОбъектДопДанных Из МассивОбъектовУчета Цикл
			ПараметрыВыполненияДействийПоЭДО.Вставить(ОбъектДопДанных, Новый Структура(КэшДополнительныхДанных));
		КонецЦикла;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
		
	Если ПодписатьОтправить Тогда
				
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Сформировать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Подписать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отправить"));
			
	Иначе
		Если ЗначениеЗаполнено(ИсправляемыйДокумент) Тогда
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
				"Перечисление.ДействияПоЭДО.СформироватьИсправление"));
		Иначе			
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
				"Перечисление.ДействияПоЭДО.Сформировать"));
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИсправляемыйДокумент) Тогда
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ИсправляемыйДокумент);	
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = МассивОбъектовУчета;	
	КонецЕсли;
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;	
	
	Закрыть(ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямНастройки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьНастройкиОтправки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямНастройки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьНастройкиОтправки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямВыбран");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ДокументовКОтправке");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументыКОтправкеВыбран");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сформирован'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументыКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументыКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументыКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Идет формирование документа...'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументыКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.Обновление");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(ИндексНовойСтраницы)
	
	Элементы.Назад.Видимость               = Ложь;
	Элементы.ПомощникДалее.Видимость       = Ложь;
	Элементы.ПодписатьИОтправить.Видимость = Ложь;
	
	Если ДокументыКОтправке.НайтиСтроки(Новый Структура("НастройкиСозданы", Ложь)).Количество() > 0 Тогда
		// Проверка на необходимость показать страницу "Общая по организации/контрагенту"
		
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаВариантОбщий;
		УстановитьВариантРаботы(ЭтотОбъект, "ПоОрганизации");
		ЗаполнитьСписокПоОрганизациям()
		
	ИначеЕсли СписокДокументовДляФормированияОтветногоТитула.Количество() > 0 Тогда
		
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаПомощникФормированияОтветногоТитула;
		
	Иначе
		УстановитьВариантРаботы(ЭтотОбъект, "ПомощникУстраненияОшибок");
		Если ДокументыКОтправке.Количество() > 0 Тогда 
		
		ТаблицаПредупреждений = Новый ТаблицаЗначений;
		ТаблицаПредупреждений.Колонки.Добавить("ТекстОшибки");
		ТаблицаПредупреждений.Колонки.Добавить("Блокирующее");
		
		ОбщиеОшибкиДокументов.Очистить();
		
		Если ДокументыКОтправке.Количество() > 1 Тогда
			МассовыйРежим = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ДокументыКОтправке Цикл
			
			СтрокаТЧ.ЕстьОшибки = Ложь;
			
			Если Не МассовыйРежим И СтрокаТЧ.ПредупрежденияПоДокументу.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьПредупреждения = Истина;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаТЧ.ПредупрежденияПоДокументу, ТаблицаПредупреждений);
			КонецЕсли;
			
			Если Не МассовыйРежим И СтрокаТЧ.ДополнительныеПоля.Количество() > 0 Тогда
				ДанныеДокумента = Новый Структура;
				ДанныеДокумента.Вставить("Организация"             , СтрокаТЧ.Организация);
				ДанныеДокумента.Вставить("Контрагент"              , СтрокаТЧ.Контрагент);
				ДанныеДокумента.Вставить("ДоговорКонтрагента"      , СтрокаТЧ.ДоговорКонтрагента);
				ДанныеДокумента.Вставить("ВидЭлектронногоДокумента", СтрокаТЧ.ВидДокумента);
				ДанныеДокумента.Вставить("Формат"                  , СтрокаТЧ.Формат);
				
				ПодготовитьДополнительныеПоляДляЗаполнения(СтрокаТЧ.ДополнительныеПоля[0].Значение, ДанныеДокумента);
			ИначеЕсли СтрокаТЧ.ДополнительныеПоля.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если СтрокаТЧ.ОшибкиЗаполнения.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				Для Каждого Ошибка Из СтрокаТЧ.ОшибкиЗаполнения Цикл
					
					Если ЗначениеЗаполнено(Ошибка.КлючСообщения) Тогда
						КлючСообщения = Ошибка.КлючСообщения;
					Иначе
						КлючСообщения = СтрокаТЧ.Документ;
					КонецЕсли;
					
					ТекущаяСтрока = Неопределено;
					Если ЗначениеЗаполнено(КлючСообщения) Тогда
						НайденныеСтроки = ОбщиеОшибкиДокументов.НайтиСтроки(Новый Структура("КлючСообщения", КлючСообщения));
						Если НайденныеСтроки.Количество() > 0 Тогда
							ТекущаяСтрока = НайденныеСтроки[0];
						КонецЕсли;
					КонецЕсли;
					
					Если ТекущаяСтрока = Неопределено Тогда
						ТекущаяСтрока = ОбщиеОшибкиДокументов.Добавить();
						Если ЗначениеЗаполнено(КлючСообщения) Тогда
							ТекущаяСтрока.КлючСообщения = КлючСообщения;
							ТекущаяСтрока.Представление = ПолучитьПредставлениеКлючаСообщения(КлючСообщения);
						ИначеЕсли ЗначениеЗаполнено(Ошибка.КраткийТекстОшибки) Тогда
							ТекущаяСтрока.Представление = Ошибка.КраткийТекстОшибки;
						Иначе
							ТекущаяСтрока.Представление = Ошибка.ТекстОшибки;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекущаяСтрока.СписокДокументов.НайтиПоЗначению(СтрокаТЧ.Документ) = Неопределено Тогда
						ТекущаяСтрока.СписокДокументов.Добавить(СтрокаТЧ.Документ);
					КонецЕсли;
					
					Если ТекущаяСтрока.СписокОшибок.НайтиПоЗначению(Ошибка.ТекстОшибки) = Неопределено Тогда
						ТекущаяСтрока.СписокОшибок.Добавить(Ошибка.ТекстОшибки, Ошибка.ПутьКДаннымСообщения);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаТЧ.ТребуетсяУказатьПодписантов Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				Если Не МассовыйРежим Тогда
					УказатьПодписантов = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧ.ФормированиеЗапрещено Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ФормированиеЗапрещено = Истина;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ВидДокумента", СтрокаТЧ.ВидДокумента);
				Отбор.Вставить("Отправитель", СтрокаТЧ.Организация);
				Отбор.Вставить("Получатель", СтрокаТЧ.Контрагент);
				Отбор.Вставить("Договор", СтрокаТЧ.ДоговорКонтрагента);
						
				НайденныеСтроки = СписокЗапрещенныхКФормированию.НайтиСтроки(Отбор);

				Если НайденныеСтроки.Количество() = 0 Тогда
					Если СтрокаТЧ.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
						Шаблон = НСтр("ru = '%1 • %2 (%3)'");
						Представление = СтрШаблон(Шаблон, СтрокаТЧ.Организация, СтрокаТЧ.ВидДокумента,
							Метаданные.РегистрыСведений.НастройкиВнутреннегоЭДО.Представление());
					Иначе
						Шаблон = НСтр("ru = '%1 • %2 (%3)'");
						Представление = СтрШаблон(Шаблон, СтрокаТЧ.Организация, СтрокаТЧ.Контрагент,
							Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Представление());
					КонецЕсли;
					
					ТекущаяСтрока = СписокЗапрещенныхКФормированию.Добавить();
					ТекущаяСтрока.ВидДокумента = СтрокаТЧ.ВидДокумента;
					ТекущаяСтрока.ИдентификаторОбъектаУчета = СтрокаТЧ.ИдентификаторОбъектаУчета;
					ТекущаяСтрока.Отправитель = СтрокаТЧ.Организация;
					ТекущаяСтрока.Получатель = СтрокаТЧ.Контрагент;
					ТекущаяСтрока.Договор = СтрокаТЧ.ДоговорКонтрагента;
					ТекущаяСтрока.Направление = СтрокаТЧ.Направление;
					ТекущаяСтрока.Представление = Представление;
					
				КонецЕсли;

			КонецЕсли;
			
			Если СтрокаТЧ.ОсновнойВидНеУстановлен Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ОсновнойВидНеУстановлен = Истина;
				
				ИдентификаторОбъекта = СтрокаТЧ.ИдентификаторОбъектаУчета;
				
				Отбор = Новый Структура;
				Отбор.Вставить("Организация", СтрокаТЧ.Организация);
				Отбор.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
						
				НайденныеСтроки = СписокОсновнойВидНеУстановлен.НайтиСтроки(Отбор);

				Если НайденныеСтроки.Количество() = 0 Тогда
										
					Шаблон = НСтр("ru = '%1 • %2 (%3)'");
						Представление = СтрШаблон(Шаблон, СтрокаТЧ.Организация, ИдентификаторОбъекта,
							Метаданные.РегистрыСведений.НастройкиВнутреннегоЭДО.Представление());
						ТекущаяСтрока = СписокОсновнойВидНеУстановлен.Добавить();
						ТекущаяСтрока.ИдентификаторОбъекта = ИдентификаторОбъекта;
						ТекущаяСтрока.Организация = СтрокаТЧ.Организация;
						ТекущаяСтрока.Представление = Представление;

				КонецЕсли;

			КонецЕсли;
			
			Если СтрокаТЧ.ПечатнаяФормаНеУказана Тогда
				СтрокаТЧ.ЕстьОшибки = Ложь;
				Если Не МассовыйРежим Тогда
					ПечатнаяФормаНеУказана = Истина;
					НаборКомандПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(СтрокаТЧ.Документ.Метаданные());
					Для Каждого КомандаПечати Из НаборКомандПечати Цикл
						СписокПечатныхФорм.Добавить(КомандаПечати.Идентификатор, КомандаПечати.Представление);
					КонецЦикла;
					Если СписокПечатныхФорм.Количество() Тогда
						СписокПечатныхФорм[0].Пометка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьПредупреждения(ТаблицаПредупреждений);
		КонецЕсли;
		
		ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Неопределено, ИндексНовойСтраницы);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьВыбранныйЛистПомощника(Форма, ПереходВперед, НовыйИндекс = 0)
	
	СписокСтраниц        = Новый СписокЗначений;
	Элементы             = Форма.Элементы;
	Пометка              = Ложь;
	ТолькоПредупреждения = Ложь;
	
	Если Элементы.ГруппаЭлементовПредупреждений.ПодчиненныеЭлементы.Количество() > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПредупреждения);
		ТолькоПредупреждения = Истина;
	КонецЕсли;
	
	Если Форма.ОбщиеОшибкиДокументов.Количество() > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаОбщиеОшибки);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если (Элементы.ГруппаРазделовШапка.ПодчиненныеЭлементы.Количество()
			+ Элементы.ГруппаРазделовТаблица.ПодчиненныеЭлементы.Количество()) > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаДополнительныеПоля);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если Форма.УказатьПодписантов Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПодписанты);
	КонецЕсли;
	
	Если Форма.ФормированиеЗапрещено Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаФормированиеЗапрещено);
	КонецЕсли;
	
	Если Форма.ОсновнойВидНеУстановлен Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаОсновнойВидНеУстановлен);
	КонецЕсли;
	
	Если Форма.ПечатнаяФормаНеУказана Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПечатнаяФормаНеУказана);
	КонецЕсли;
	
	Если Форма.МассовыйРежим Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПоДокументам,, Истина);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если СписокСтраниц.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	СтрокаТекущейСтраницы = СписокСтраниц.НайтиПоЗначению(ТекущаяСтраница);
	
	Если СтрокаТекущейСтраницы = Неопределено Тогда
		Если ПереходВперед = Неопределено Тогда 
			Индекс = 0;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Индекс = СписокСтраниц.Индекс(СтрокаТекущейСтраницы);
	КонецЕсли;
	
	Если ПереходВперед = Истина Тогда
		Индекс = Индекс + 1;
	ИначеЕсли ПереходВперед = Ложь Тогда
		Индекс = Индекс - 1;
	Иначе
		Индекс = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйИндекс) Тогда 
		Индекс = НовыйИндекс;
	КонецЕсли;

	Если Индекс < 0 Или Индекс > СписокСтраниц.Количество() - 1 Тогда
		Индекс = СписокСтраниц.Количество() - 1;
	КонецЕсли;
	
	ПоследняяСтраница = Индекс = СписокСтраниц.Количество() - 1;
	
	Элементы.Назад.Видимость                       = Индекс > 0;
	Элементы.ПомощникДалее.Видимость               = Не ПоследняяСтраница;
	Элементы.ПодписатьИОтправить.Видимость         = ((ПоследняяСтраница
		И Не Форма.ТолькоПросмотр) Или ТолькоПредупреждения) И Не Форма.НеОтправлять;
	Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = ПоследняяСтраница;
	Элементы.ПомощникДалее.КнопкаПоУмолчанию       = Не ПоследняяСтраница;
	
	Если ПоследняяСтраница
			И Не Элементы.ПодписатьИОтправить.Видимость Тогда
		Элементы.Итоги2Закрыть.КнопкаПоУмолчанию       = Истина;
	КонецЕсли;
	
	СформироватьЗаголовокКомандыПодписать(Форма);
	
	НоваяСтраница = СписокСтраниц[Индекс].Значение;
	Если Не ЗначениеЗаполнено(НовыйИндекс) Тогда
		Пометка       = СписокСтраниц[Индекс].Пометка;
	КонецЕсли;
	
	Если Не Пометка Или СписокСтраниц.Количество() = 1 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	НовыйИндекс = Индекс;
	Форма.ИндексТекущейСтраницы = НовыйИндекс;
	
	Возврат Не Пометка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантРаботы(Форма, ТекущийВариантРаботы)
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаВариантОбщий.Видимость             = ТекущийВариантРаботы = "ПоОрганизации";
	Элементы.ГруппаПомощникУстраненияОшибок.Видимость = ТекущийВариантРаботы = "ПомощникУстраненияОшибок";
	
	Если ТекущийВариантРаботы = "ПоОрганизации" Тогда
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаВариантОбщий;
		Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущийВариантРаботы = "ПомощникУстраненияОшибок" Тогда
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаПомощникУстраненияОшибок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГотовоКФормированию(Форма)
	
	КФормированию = 0;
	Всего = Форма.СписокПоОрганизациям.Итог("ВсегоДокументов");
	Шрифт = Форма.Элементы.ГотовоКФормированию.Шрифт;
	Отбор = Новый Структура("ГотовКОтправке", Истина);
	
	НайденоСтрок = Форма.СписокПоОрганизациям.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТЧ Из НайденоСтрок Цикл
		КФормированию = КФормированию + СтрокаТЧ.ДокументовКОтправке;
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Готово к формированию документов:'"), Шрифт));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(КФормированию), Шрифт, WebЦвета.ЗеленыйЛес));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(НСтр("ru = 'из'"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Всего), Шрифт));
	
	Форма.Элементы.ГотовоКФормированию.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокОжидания(КоличествоДокументов)
	
	Шаблон = НСтр("ru = 'Выполняется формирование электронных документов.
	|Примерная продолжительность формирования %1.'");
	
	ВремяВСекундах = КоличествоДокументов * 1.5; // 1.5 примерное время формирования 1 ЭД
	
	ВсегоМинут = Цел(ВремяВСекундах / 60);
	Секунд = ВремяВСекундах - ВсегоМинут * 60;
	ВсегоЧасов = Цел(ВсегоМинут / 60);
	Минут = ВсегоМинут - ВсегоЧасов * 60;
	
	Если ВсегоЧасов > 0 Тогда
		ШаблонВремени = НСтр("ru = '%3 ч %2 мин %1 сек'");
		
	ИначеЕсли Минут > 0 Тогда
		ШаблонВремени = НСтр("ru = '%2 мин %1 сек'");
	Иначе
		ШаблонВремени = НСтр("ru = '%1 сек'");
	КонецЕсли;
	
	Время = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВремени,
		Формат(Секунд, "ЧН=0; ЧГ="),
		Формат(Минут, "ЧН=0; ЧГ="),
		Формат(ВсегоЧасов, "ЧГ="));
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Время);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаСообщения(КлючСообщения)
	
	МетаданныеКлюча = КлючСообщения.Метаданные();
	Представление = МетаданныеКлюча.Представление();
	
	Если ТипЗнч(КлючСообщения) = Тип("РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументовПоВидам") Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(КлючСообщения.Получатель);
		
		Если ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций() Тогда
			МассивСтрок.Добавить(КлючСообщения.Отправитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючСообщения.Договор) Тогда
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'По договору ""%1""'"), КлючСообщения.Договор));
		КонецЕсли;
		
		Представление = СтрСоединить(МассивСтрок, " • ");
		ПредставлениеОбъекта = МетаданныеКлюча.Представление();
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеКлюча)
		Или Метаданные.Документы.Содержит(МетаданныеКлюча) Тогда
		
		Представление = Строка(КлючСообщения);
		ПредставлениеОбъекта = МетаданныеКлюча.ПредставлениеОбъекта;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		ТекстОтвета = СтрШаблон(НСтр("ru = '%1 (%2)'"), Представление, ПредставлениеОбъекта);
	Иначе
		ТекстОтвета = СтрШаблон(НСтр("ru = '%1'"), Представление);
	КонецЕсли;
	
	Возврат ТекстОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьЗаголовокДокумента(СсылкаНаДокумент)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Документ:'"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СсылкаНаДокумент),,,,
		ПолучитьНавигационнуюСсылку(СсылкаНаДокумент)));
		
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокКомандыПодписать(Форма)
	
	Текст = НСтр("ru = 'Готово'");
	КоличествоВсего   = Форма.ДокументыКОтправке.Количество();
	КоличествоВыбрано = Форма.ДокументыКОтправке.НайтиСтроки(Новый Структура("ГотовКОтправке, ЕстьОшибки", Истина, Ложь)).Количество();
	
	Если Форма.ПодписатьОтправить Тогда
		Если КоличествоВсего = 0 И КоличествоВыбрано = 0 Тогда
			Текст = НСтр("ru = 'Подписать и отправить документы'");
		Иначе
			Текст = СтрШаблон(НСтр("ru = 'Подписать и отправить документы (%1 из %2)'"), КоличествоВыбрано, КоличествоВсего);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПодписатьИОтправить.Заголовок = Текст;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПредупреждениями

&НаСервере
Процедура СформироватьПредупреждения(ТаблицаПредупреждений)
	
	Для Каждого Элемент Из Элементы.ГруппаЭлементовПредупреждений.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если ТаблицаПредупреждений.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаПредупреждений Цикл
			СформироватьЭлементПредупреждения(СтрокаТЧ.Блокирующее, СтрокаТЧ.ТекстОшибки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементПредупреждения(Знач Регламент, Знач ТекстПредупреждения)
	
	Ключ = "Ключ" + СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-", "");
	НоваяГруппа = Элементы.Добавить(Ключ, Тип("ГруппаФормы"), Элементы.ГруппаЭлементовПредупреждений);
	НоваяГруппа.Вид                    = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка            = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.ОтображатьЗаголовок    = Ложь;
	НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	НоваяКартинка = Элементы.Добавить(Ключ + "Картинка", Тип("ДекорацияФормы"), НоваяГруппа);
	НоваяКартинка.Вид      = ВидДекорацииФормы.Картинка;
	НоваяКартинка.Картинка = ?(Регламент, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Предупреждение32);
	
	НовыйТекст = Элементы.Добавить(Ключ + "Надпись", Тип("ДекорацияФормы"), НоваяГруппа);
	НовыйТекст.Вид                   = ВидДекорацииФормы.Надпись;
	НовыйТекст.Заголовок              = ТекстПредупреждения;
	НовыйТекст.АвтоМаксимальнаяШирина = Ложь;
	НовыйТекст.Ширина                 = 70;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере(ПараметрыФормы)
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	АдресСведенийОбОшибках  = Неопределено;
	Предупреждения  = Неопределено;
	ПараметрыФормы.Свойство("АдресСведенийОбОшибках", АдресСведенийОбОшибках);
	ПараметрыФормы.Свойство("Предупреждения", Предупреждения);
	
	Если ЗначениеЗаполнено(АдресСведенийОбОшибках) Тогда
		
		ОшибкиПриФормированииДокументов = ПолучитьИзВременногоХранилища(АдресСведенийОбОшибках);
		
		УдалитьИзВременногоХранилища(АдресСведенийОбОшибках);
		
		ЗаполнитьТаблицуОтправляемыхДокументов(ОшибкиПриФормированииДокументов, ПараметрыФормы.СписокДокументовКОтправке);
	
	ИначеЕсли ЗначениеЗаполнено(Предупреждения) Тогда

		Если Предупреждения.Количество() > 0 Тогда
			ТаблицаПредупреждений = Новый ТаблицаЗначений;
			ТаблицаПредупреждений.Колонки.Добавить("ТекстОшибки");
			ТаблицаПредупреждений.Колонки.Добавить("Блокирующее");
				
			Для Каждого Предупреждение Из Предупреждения Цикл
				НоваяСтрока = ТаблицаПредупреждений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Предупреждение);
			КонецЦикла;
			
			СформироватьПредупреждения(ТаблицаПредупреждений);
			ТолькоПросмотр = ПодписатьОтправить = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтраница = Неопределено;
	ПараметрыФормы.Свойство("ТекущаяСтраница", ТекущаяСтраница);
	
	УправлениеФормой(ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтправляемыхДокументов(ОшибкиПриФормированииДокументов, СписокДокументовКОтправке)
	
	ОбработанныеДокументы = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ОшибкиПриФормированииДокументов) Тогда
	
		Для Каждого ОшибкиПриФормированииДокумента Из ОшибкиПриФормированииДокументов Цикл
			
			Если ОшибкиПриФормированииДокумента.Свойство("ОшибкаФормированияВПрикладнойЧасти") Тогда
				Если ОшибкиПриФормированииДокумента.ОшибкаФормированияВПрикладнойЧасти <> Неопределено Тогда 
					СтрокаТаблицы = СписокДокументовДляФормированияОтветногоТитула.Добавить();
					СтрокаТаблицы.ЭлектронныйДокумент = ОшибкиПриФормированииДокумента.ОшибкаФормированияВПрикладнойЧасти.ЭлектронныйДокумент;
					СтрокаТаблицы.ОшибкиПриФормированииДокумента = ОшибкиПриФормированииДокумента;
	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ОшибкиПриФормированииДокумента.Свойство("ОписаниеОбъектаУчета") Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеОбъектаУчета = ОшибкиПриФормированииДокумента.ОписаниеОбъектаУчета;
			ОбъектУчета = ОписаниеОбъектаУчета.ОбъектУчета;
			
			ВидДокумента = Неопределено;
			ОшибкиПриФормированииДокумента.Свойство("ВидДокумента", ВидДокумента);
			
			ДанныеДокумента = ДанныеОтправляемогоДокумента(ОбъектУчета, ОписаниеОбъектаУчета);
			
			Если Не ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
				ЗаполнитьДанныеОтправляемогоДокумента(ДанныеДокумента, ОбъектУчета, ОписаниеОбъектаУчета, ВидДокумента);
			КонецЕсли;
			
			ЗаполнитьИнформациюОбОшибкахДокумента(ДанныеДокумента, ОшибкиПриФормированииДокумента);
			
			ОбработанныеДокументы.Вставить(ОбъектУчета, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Документ Из СписокДокументовКОтправке Цикл
		
		Если ОбработанныеДокументы[Документ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(Документ);
		
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			
			ДанныеДокумента = ДанныеОтправляемогоДокумента(Документ, СтрокаОписания);
			ЗаполнитьДанныеОтправляемогоДокумента(ДанныеДокумента, Документ, СтрокаОписания, Неопределено);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОтправляемогоДокумента(СтрокаТаблицы, ОбъектУчета, ОписаниеОбъектаУчета, ВидДокумента)
	
	СтрокаТаблицы.Документ             = ОбъектУчета;
	СтрокаТаблицы.Организация          = ОписаниеОбъектаУчета.Организация;
	СтрокаТаблицы.Контрагент           = ОписаниеОбъектаУчета.Контрагент;
	СтрокаТаблицы.Направление          = ОписаниеОбъектаУчета.Направление;
	СтрокаТаблицы.ГотовКОтправке       = Истина;
	СтрокаТаблицы.Результат            = "";
	СтрокаТаблицы.НастройкиСозданы     = Ложь;
	СтрокаТаблицы.НастройкиОтправки    = НСтр("ru = 'Не настроен'");
	СтрокаТаблицы.ЕстьОшибки           = Ложь;
	СтрокаТаблицы.ЕстьПредупреждения   = Ложь;
	СтрокаТаблицы.Обновление           = Ложь;
	СтрокаТаблицы.ДополнительныеПоля.Очистить();
	СтрокаТаблицы.ПредупрежденияПоИдентификатору.Очистить();
	СтрокаТаблицы.ПредупрежденияПоДокументу.Очистить();
	СтрокаТаблицы.ОшибкиЗаполнения.Очистить();
	СтрокаТаблицы.ОписаниеОшибок.Очистить();
	СтрокаТаблицы.ЭтоВнутреннийЭДО = ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний;
	СтрокаТаблицы.ТребуетсяУказатьПодписантов = Ложь;
	СтрокаТаблицы.ПечатнаяФормаНеУказана = Ложь;
	СтрокаТаблицы.ВидДокумента = ВидДокумента;
	СтрокаТаблицы.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	
	Если СтрокаТаблицы.ЭтоВнутреннийЭДО Тогда
		МетаданныеДокумента = СтрокаТаблицы.Документ.Метаданные();
		СтрокаТаблицы.ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеДокумента);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидДокумента) Тогда
			Настройки = ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО(
				СтрокаТаблицы.Организация, СтрокаТаблицы.ВидДокумента);
			СтрокаТаблицы.ВидДокумента = Настройки.ВидДокумента;
			СтрокаТаблицы.ВидПодписи = Настройки.ВидПодписи;
			
		Иначе
			
			Настройки = ИнтерфейсДокументовЭДО.НастройкиОсновногоВидаВнутреннегоДокумента(СтрокаТаблицы.Организация, ОбъектУчета);

			Если ЗначениеЗаполнено(Настройки) 
				И Настройки.ЭтоОсновнойВидДокумента Тогда
				СтрокаТаблицы.ВидДокумента = Настройки.ВидДокумента;
				СтрокаТаблицы.ВидПодписи = Настройки.ВидПодписи;
				
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.НастройкиСозданы = ЗначениеЗаполнено(Настройки);
		
		Если Не СтрокаТаблицы.НастройкиСозданы Тогда
			СтрокаТаблицы.НастройкиОтправки = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Не настроен'"), МетаданныеДокумента.Синоним);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ВидДокумента) Тогда
			СтрокаТаблицы.НастройкиОтправки = Строка(СтрокаТаблицы.ВидДокумента);
		Иначе
			СтрокаТаблицы.НастройкиОтправки = СтрШаблон(НСтр("ru = 'Не указана основная печатная форма (%1)'"),
				МетаданныеДокумента.Синоним);
		КонецЕсли;
	Иначе 
		Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
			КлючНастроекОтправки.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
			КлючНастроекОтправки.Отправитель = ОписаниеОбъектаУчета.Организация;
			КлючНастроекОтправки.Получатель = ОписаниеОбъектаУчета.Контрагент;
			КлючНастроекОтправки.Договор = ОписаниеОбъектаУчета.Договор;			
		Иначе
			КлючНастроекОтправки = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючНастроекОтправки) Тогда 
			НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
			СтрокаТаблицы.ВидДокумента = КлючНастроекОтправки.ВидДокумента;
		Иначе
			СтрокаТаблицы.НастройкиСозданы = Истина; 	
		КонецЕсли;

		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			Возврат;
		КонецЕсли;
	
		Шаблон = НСтр("ru = 'По договору ""%1""'");
		ТекстНастройки = ?(ЗначениеЗаполнено(НастройкиОтправки.Договор), СтрШаблон(Шаблон, Строка(
			НастройкиОтправки.Договор)), НСтр("ru = '<По всем договорам>'"));
	
		СтрокаТаблицы.ДоговорКонтрагента	   = НастройкиОтправки.Договор;
		СтрокаТаблицы.ИдентификаторПолучателя  = НастройкиОтправки.ИдентификаторПолучателя;
		СтрокаТаблицы.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
		СтрокаТаблицы.ВидДокумента             = НастройкиОтправки.ВидДокумента;
		СтрокаТаблицы.Формат           		   = НастройкиОтправки.Формат;
		СтрокаТаблицы.НастройкиОтправки        = ТекстНастройки;
		СтрокаТаблицы.НастройкиСозданы         = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияМаршрутаПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовВыбораМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовВыбораМаршрута()
	
	Элементы.МаршрутПодписания.Доступность = СпособУказанияМаршрута = "ВыбратьСуществующий";
	Элементы.СписокПодписантов.Доступность = СпособУказанияМаршрута = "ЗадатьВручную";

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбОшибкахДокумента(СтрокаТаблицы, ОшибкиПриФормированииДокумента)
	
	СтрокаТаблицы.ОписаниеОшибок.Добавить(ОшибкиПриФормированииДокумента);
		
	Если ОшибкиПриФормированииДокумента.Свойство("ОтсутствуютНастройки")
		И ОшибкиПриФормированииДокумента.ОтсутствуютНастройки Тогда

		СтрокаТаблицы.ГотовКОтправке = Ложь;
		СтрокаТаблицы.НастройкиСозданы = Ложь;

	ИначеЕсли ОшибкиПриФормированииДокумента.Свойство("ОшибкиДанных")
		И ОшибкиПриФормированииДокумента.ОшибкиДанных <> Неопределено
	 	И ОшибкиПриФормированииДокумента.ОшибкиДанных.Свойство("ЗаполнениеДанных") 
	 	И ЗначениеЗаполнено(ОшибкиПриФормированииДокумента.ОшибкиДанных.ЗаполнениеДанных) Тогда

		Для Каждого СтрокаОшибки Из ОшибкиПриФормированииДокумента.ОшибкиДанных.ЗаполнениеДанных Цикл

			НоваяСтрока = СтрокаТаблицы.ОшибкиЗаполнения.Добавить();

			Если ЗначениеЗаполнено(СтрокаОшибки.КлючСообщения) Тогда
				НоваяСтрока.КлючСообщения  = СтрокаОшибки.КлючСообщения;
			Иначе
				НоваяСтрока.КлючСообщения  = ОшибкиПриФормированииДокумента.ОписаниеОбъектаУчета.ОбъектУчета;
			КонецЕсли;

			НоваяСтрока.ТекстОшибки          = СтрокаОшибки.ТекстОшибки;
			НоваяСтрока.КраткийТекстОшибки   = СтрокаОшибки.ТекстОшибки;
			НоваяСтрока.ПутьКДаннымСообщения = СтрокаОшибки.ПутьКДаннымСообщения;
			НоваяСтрока.ОбщаяОшибка          = СписокДокументов.Найти(НоваяСтрока.КлючСообщения) = Неопределено;
		КонецЦикла;

	ИначеЕсли ОшибкиПриФормированииДокумента.Свойство("ФормированиеЗапрещено")
		И ОшибкиПриФормированииДокумента.ФормированиеЗапрещено Тогда

		СтрокаТаблицы.ГотовКОтправке = Ложь;
		СтрокаТаблицы.ФормированиеЗапрещено = Истина;
		СтрокаТаблицы.НастройкиСозданы = Истина;
		
	ИначеЕсли ОшибкиПриФормированииДокумента.Свойство("ОсновнойВидНеУстановлен")
		И ОшибкиПриФормированииДокумента.ОсновнойВидНеУстановлен Тогда

		СтрокаТаблицы.ОсновнойВидНеУстановлен = Истина;
		СтрокаТаблицы.ГотовКОтправке = Ложь;
		СтрокаТаблицы.НастройкиСозданы = Истина;
		
	ИначеЕсли ОшибкиПриФормированииДокумента.Свойство("ПечатнаяФормаНеУказана")
		И ОшибкиПриФормированииДокумента.ПечатнаяФормаНеУказана Тогда
		
		СтрокаТаблицы.ПечатнаяФормаНеУказана = Истина;
		СтрокаТаблицы.ГотовКОтправке = Истина;
		СтрокаТаблицы.НастройкиСозданы = Истина;
		
	Иначе
		
		Если ОшибкиПриФормированииДокумента.Свойство("ОшибкиДанных")
	 		И ОшибкиПриФормированииДокумента.ОшибкиДанных <> Неопределено
	 		И ОшибкиПриФормированииДокумента.ОшибкиДанных.Свойство("ЗначенияДополнительныхПолей") 
	 		И ЗначениеЗаполнено(ОшибкиПриФормированииДокумента.ОшибкиДанных.ЗначенияДополнительныхПолей) Тогда
	 		
	 		Значение = ОшибкиПриФормированииДокумента.ОшибкиДанных.ЗначенияДополнительныхПолей;
	 			
			СтрокаТаблицы.ДополнительныеПоля.Добавить(Значение);
			СтрокаТаблицы.Формат = Значение.Формат;
			
		КонецЕсли;		
				
		Если ОшибкиПриФормированииДокумента.Свойство("ОтсутствуютПодписанты")
			И ОшибкиПриФормированииДокумента.ОтсутствуютПодписанты Тогда
	
			СтрокаТаблицы.ТребуетсяУказатьПодписантов = Истина;
	
		КонецЕсли;		
			
		Если ОшибкиПриФормированииДокумента.Свойство("Предупреждения") Тогда
	
			Для Каждого СтрокаОшибки Из ОшибкиПриФормированииДокумента.Предупреждения Цикл
				НоваяСтрока = СтрокаТаблицы.ПредупрежденияПоИдентификатору.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОшибки);
				НоваяСтрока.КраткийТекстОшибки   = СтрокаОшибки.ТекстОшибки;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеОшибок  = Неопределено;
	КоличествоОшибок = СтрокаТаблицы.ОшибкиЗаполнения.Количество()
		+ СтрокаТаблицы.ДополнительныеПоля.Количество()
		+ СтрокаТаблицы.ТребуетсяУказатьПодписантов
		+ СтрокаТаблицы.ФормированиеЗапрещено
		+ СтрокаТаблицы.ОсновнойВидНеУстановлен
		+ СтрокаТаблицы.ПечатнаяФормаНеУказана;
	КоличествоПредупреждений = СтрокаТаблицы.ПредупрежденияПоДокументу.Количество();
	
	Если КоличествоОшибок = 0 И КоличествоПредупреждений = 0 Тогда
		ПредставлениеОшибок = НСтр("ru = 'Отсутствуют'");
	ИначеЕсли (КоличествоОшибок > 1 Или КоличествоПредупреждений > 1)
		Или (КоличествоОшибок = 1 И КоличествоПредупреждений = 1) Тогда
		Ошибок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка;;%1 ошибки;%1 ошибок;%1 ошибки'"), КоличествоОшибок);
		
		Предупреждений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 предупреждение;;%1 предупреждений;%1 предупреждений;%1 предупреждения'"), КоличествоПредупреждений);
		
		МассивСтрок = Новый Массив;
		Если КоличествоПредупреждений > 0 И КоличествоОшибок > 0 Тогда 
			МассивСтрок.Добавить(Предупреждений);
			МассивСтрок.Добавить(Ошибок);
		ИначеЕсли КоличествоПредупреждений > 0 Тогда
			МассивСтрок.Добавить(Предупреждений);
		Иначе
			МассивСтрок.Добавить(Ошибок);
		КонецЕсли;
		
		ПредставлениеОшибок = СтрСоединить(МассивСтрок, НСтр("ru = '/'"));
	ИначеЕсли СтрокаТаблицы.ФормированиеЗапрещено Тогда
		ПредставлениеОшибок = НСтр("ru = 'ФормированиеЗапрещено'");	
	ИначеЕсли СтрокаТаблицы.ОшибкиЗаполнения.Количество() Тогда
		ПредставлениеОшибок = СтрокаТаблицы.ОшибкиЗаполнения[0].ТекстОшибки;
	ИначеЕсли СтрокаТаблицы.ПредупрежденияПоДокументу.Количество() Тогда
		ПредставлениеОшибок = СтрокаТаблицы.ПредупрежденияПоДокументу[0].ТекстОшибки;
	ИначеЕсли СтрокаТаблицы.ДополнительныеПоля.Количество() Тогда
		ПредставлениеОшибок = НСтр("ru = 'Не заполнены дополнительные поля'");
	ИначеЕсли СтрокаТаблицы.ТребуетсяУказатьПодписантов Тогда
		ПредставлениеОшибок = НСтр("ru = 'Не указаны подписанты'");
	ИначеЕсли СтрокаТаблицы.ОсновнойВидНеУстановлен Тогда
		ПредставлениеОшибок = НСтр("ru = 'Основной вид не установлен'");
	ИначеЕсли СтрокаТаблицы.ПечатнаяФормаНеУказана Тогда
		ПредставлениеОшибок = НСтр("ru = 'Не указана печатная форма'");
	КонецЕсли;
	
	СтрокаТаблицы.Результат = ПредставлениеОшибок;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Документ", СписокДокументов[0]);
	НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	
	Оповещение = Новый ОписаниеОповещения("ВыборМаршрутаЗавершение", ЭтотОбъект);
	
	Отбор = МаршрутыПодписанияБЭДКлиент.НовыйОтборМаршрутовПодписания();
	Отбор.Организация = СтрокаТаблицы.Организация;
	Если СтрокаТаблицы.ВидПодписи <> ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.Простая") Тогда
		Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ОднойДоступнойПодписью"));
	КонецЕсли;
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ПоПравилам"));
	Отбор.ВидПодписи = СтрокаТаблицы.ВидПодписи;
	
	МаршрутыПодписанияБЭДКлиент.ВыбратьМаршрутПодписания(Отбор, Маршрут,
		ЭтотОбъект.УникальныйИдентификатор, Оповещение); 
КонецПроцедуры

&НаКлиенте
Процедура ВыборМаршрутаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Маршрут <> Результат Тогда 
		Маршрут = Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Документ", СписокДокументов[0]);
	НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	
	СтрокаТаблицы.ГотовКОтправке = ЗначениеЗаполнено(СписокПодписантов) Или ЗначениеЗаполнено(Маршрут);
	СтрокаТаблицы.ЕстьОшибки = Не СтрокаТаблицы.ГотовКОтправке;
		
	СформироватьЗаголовокКомандыПодписать(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПодписантовПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(СписокДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Документ", СписокДокументов[0]);
	НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	
	СтрокаТаблицы.ГотовКОтправке = ЗначениеЗаполнено(СписокПодписантов) Или ЗначениеЗаполнено(Маршрут);
	СтрокаТаблицы.ЕстьОшибки = Не СтрокаТаблицы.ГотовКОтправке;

	СформироватьЗаголовокКомандыПодписать(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПоОрганизациям()
	
	ТаблицаГруппировки = ДокументыКОтправке.Выгрузить(,
		"Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО, ИдентификаторОбъектаУчета, ВидДокумента, Направление");
	ТаблицаГруппировки.Свернуть("Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО,
		|ИдентификаторОбъектаУчета, ВидДокумента, Направление");	
	
	СписокПоОрганизациям.Очистить();
	
	Для Каждого СтрокаГруппировки Из ТаблицаГруппировки Цикл
		
		Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО,
			|ВидДокумента");
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаГруппировки);
		
		СтрокиТаблицы = ДокументыКОтправке.НайтиСтроки(Отбор);
		
		ТаблицаПредупреждений = Новый ТаблицаЗначений;
		ТаблицаПредупреждений.Колонки.Добавить("ТекстПредупреждения");
		
		ТаблицаНастройкиОтправки = Новый ТаблицаЗначений;
		ТаблицаНастройкиОтправки.Колонки.Добавить("НастройкиОтправки");
		
		НоваяСтрока = СписокПоОрганизациям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
		
		НоваяСтрока.ВсегоДокументов       = СтрокиТаблицы.Количество();
		НоваяСтрока.ЕстьНастройкиОтправки = Истина;
		
		// Расчет значения полей "ЕстьНастройкиОтправки", "ЕстьПредупреждения", "Предупреждения", "ДокументовКОтправке", "Выбран"
		Для Каждого СтрокаТЧ Из СтрокиТаблицы Цикл
			
			НоваяСтрока.ЕстьНастройкиОтправки    = Мин(НоваяСтрока.ЕстьНастройкиОтправки, СтрокаТЧ.НастройкиСозданы);
			НоваяСтрока.ИдентификаторПолучателя = СтрокаТЧ.ИдентификаторПолучателя;
			
			ТаблицаНастройкиОтправки.Добавить().НастройкиОтправки = СтрокаТЧ.НастройкиОтправки;
			
			Если СтрокаТЧ.ГотовКОтправке Тогда
				НоваяСтрока.ДокументовКОтправке = НоваяСтрока.ДокументовКОтправке + 1;
				НоваяСтрока.ГотовКОтправке = Истина;
			КонецЕсли;
			
			Для Каждого Строка Из СтрокаТЧ.ПредупрежденияПоИдентификатору Цикл
				ТаблицаПредупреждений.Добавить().ТекстПредупреждения = Строка.КраткийТекстОшибки;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаПредупреждений.Свернуть("ТекстПредупреждения");
		НоваяСтрока.ЕстьПредупреждения = Истина;
		
		Если ТаблицаПредупреждений.Количество() = 1 Тогда
			
			НоваяСтрока.Предупреждения = ТаблицаПредупреждений[0].ТекстПредупреждения;
			
		ИначеЕсли ТаблицаПредупреждений.Количество() = 0 Тогда
			
			НоваяСтрока.Предупреждения = НСтр("ru = 'отсутствуют'");
			НоваяСтрока.ЕстьПредупреждения = Ложь;
			
		Иначе
			
			Предупреждений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 предупреждение;;%1 предупреждения;%1 предупреждений;%1 предупреждения'"),
				ТаблицаПредупреждений.Количество());
				
			НоваяСтрока.Предупреждения = Предупреждений;
			
		КонецЕсли;
		
		// Расчет значения поля "НастройкиОтправки"
		ТаблицаНастройкиОтправки.Свернуть("НастройкиОтправки");
		
		Если ТаблицаНастройкиОтправки.Количество() = 1 Тогда
			НоваяСтрока.НастройкиОтправки = ТаблицаНастройкиОтправки[0].НастройкиОтправки;
		Иначе
			НоваяСтрока.НастройкиОтправки    = НСтр("ru = 'Расширенная настройка'");
			НоваяСтрока.РасширеннаяНастройка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеДругихФорм

&НаКлиенте
Процедура ОткрытьРасшифровкуПредупреждений(КлючНастроекОтправки)	
	
	ПараметрыФормы = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыФормы.Предупреждения = ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки);
		
	ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Новый ОписаниеОповещения, ПараметрыФормы)
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки)
	Возврат ИнтерфейсДокументовЭДО.ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки);
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиОбменаСКонтрагентом(Организация, Контрагент, Договор, Направление)
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Организация;
	КлючНастроекОтправки.Получатель = Контрагент;
	КлючНастроекОтправки.Договор = Договор;
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Интеркампани") Тогда
		НастройкиЭДОКлиент.ОткрытьНастройкиИнтеркампани(Организация);
	Иначе
		НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроекОтправки, Новый ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДокументПослеИзмененияНастроекВнутреннегоЭДО(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокПоОрганизациям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастройки = Результат.КлючНастройки;
	
	Если ЗначениеЗаполнено(Результат.Подписанты) Тогда
		Для Каждого Подписант Из Результат.Подписанты Цикл
			СтрокаТаблицы = СписокПодписантов.Добавить();
			СтрокаТаблицы.Подписант = Подписант;
			СтрокаТаблицы.Организация = КлючНастройки.Организация;
			СтрокаТаблицы.ВидДокумента = КлючНастройки.ВидДокумента;
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ТекущиеДанные.Организация);
		Отбор.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);

		НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.ВидДокумента = КлючНастройки.ВидДокумента
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьНастройкиОтправки   = Истина;
	ТекущиеДанные.ГотовКОтправке          = Истина;
	ТекущиеДанные.НастройкиОтправки       = КлючНастройки.ВидВнутреннегоДокумента;
	ТекущиеДанные.ВидДокумента = КлючНастройки.ВидВнутреннегоДокумента;
	ТекущиеДанные.ДокументовКОтправке     = ТекущиеДанные.ВсегоДокументов;
	
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсправленияОшибок(Документ, ОписаниеОшибок)

	Оповещение = Новый ОписаниеОповещения("ПроверкаПослеИсправленияОшибок", ЭтотОбъект);
	
	ПараметрыПроблемПриОбработкеДокументов = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыПроблемПриОбработкеДокументов.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписаниеОшибок);
	ПараметрыПроблемПриОбработкеДокументов.СписокДокументовКОтправке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	
	ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыПроблемПриОбработкеДокументов)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПослеИсправленияОшибок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДокументыКОтправке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Обновление = Истина;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИндексТекущейСтраницы", ИндексТекущейСтраницы);
	ДопПараметры.Вставить("Документ", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Документ));
	
	Оповещение = Новый ОписаниеОповещения("ПомощникУстраненияОшибокПослеФормированияЭД", ЭтотОбъект, ДопПараметры);
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументыКОтправке(Знач ДокументовКОтправке, Знач ГотовКОтправке)
	
	Отбор = Новый Структура("ГотовКОтправке", ГотовКОтправке);
	Таблица = ДокументовКОтправке.Выгрузить(Отбор, "Документ");
	Возврат Таблица.ВыгрузитьКолонку("Документ")
	
КонецФункции

&НаСервере
Функция ДанныеОтправляемогоДокумента(Документ, ОписаниеОбъектаУчета)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Документ", Документ);
	Отбор.Вставить("Организация", ОписаниеОбъектаУчета.Организация);
	Отбор.Вставить("Контрагент", ОписаниеОбъектаУчета.Контрагент);
	Если ЗначениеЗаполнено(ОписаниеОбъектаУчета.Договор) Тогда
		Отбор.Вставить("ДоговорКонтрагента", ОписаниеОбъектаУчета.Договор);
	КонецЕсли;
	
	Найдено = ДокументыКОтправке.НайтиСтроки(Отбор);
	
	Если ЗначениеЗаполнено(Найдено) Тогда
		СтрокаТаблицы = Найдено[0];
	Иначе
		СтрокаТаблицы = ДокументыКОтправке.Добавить();
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЭД

&НаКлиенте
Процедура НачатьФормированиеЭД(МассивДокументов, Оповещение, ОтображатьГруппуФормирования = Истина, ДополнительныеДанные = Неопределено)
	
	Элементы.ДекорацияНадписьОжидание.Заголовок = СформироватьЗаголовокОжидания(МассивДокументов.Количество());
	Если ОтображатьГруппуФормирования Тогда
		Элементы.ГруппаФормированиеЭД.Видимость            = Истина;
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаФормированиеЭД;
	КонецЕсли;
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));

	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = МассивДокументов;
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;	
	
	Если ДополнительныеДанные = Неопределено Тогда
		ДополнительныеДанные = ДанныеДополнительныхПолей();
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПослеФормированияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда		
		УстановитьВариантРаботы(ЭтотОбъект, "ПоОрганизации");
		Возврат;
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат.ОшибкиФормирования);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСведенийОбОшибках", АдресРезультата);
	ПараметрыОткрытия.Вставить("СписокДокументовКОтправке", ДополнительныеПараметры);
	ПодготовитьФормуНаСервере(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникУстраненияОшибокПослеФормированияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Неопределено);		
		Возврат;
		
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат.ОшибкиФормирования);
	ОбъектыКОтправке = ДополнительныеПараметры.Документ;
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСведенийОбОшибках", АдресРезультата);
	ПараметрыОткрытия.Вставить("СписокДокументовКОтправке", ОбъектыКОтправке);
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", ДополнительныеПараметры.ИндексТекущейСтраницы);
	
	ПодготовитьФормуНаСервере(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДополнительнымиПолями

&НаСервере
Процедура ПодготовитьДополнительныеПоляДляЗаполнения(ДополнительныеПоля, ДанныеДокумента)
	
	МассивРеквизитовПоРазделам = Новый Массив;
	
	ТекстОшибки = Неопределено;
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = ДанныеДокумента.Организация;
	КлючНастроекОтправки.Получатель = ДанныеДокумента.Контрагент;
	КлючНастроекОтправки.ВидДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
	КлючНастроекОтправки.Договор = ДанныеДокумента.ДоговорКонтрагента;	
	
	НастройкаОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	
	КлючНастройкиДопПолей = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
	КлючНастройкиДопПолей.ВидДокумента = НастройкаОтправки.ВидДокумента;
	КлючНастройкиДопПолей.Договор = НастройкаОтправки.Договор;
	КлючНастройкиДопПолей.Отправитель = НастройкаОтправки.Отправитель;
	КлючНастройкиДопПолей.Получатель = НастройкаОтправки.Получатель;
	
	НастройкаЗаполнения = НастройкиЭДО.НастройкаЗаполненияДополнительныхПолей(КлючНастройкиДопПолей, ДополнительныеПоля.Формат);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НастройкаЗаполнения) Тогда
		Возврат;
	КонецЕсли;	
	
	РазделыДополнительныхПолей = ЭлектронныеДокументыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
		НастройкаОтправки.ВидДокумента, НастройкаОтправки.Формат);
	ТипыРазделовДополнительныхПолей =  ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого Раздел Из РазделыДополнительныхПолей Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", Раздел.Имя);
		НастройкиПолей = НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если НастройкиПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Раздел.Тип = ТипыРазделовДополнительныхПолей.Шапка Тогда
			СоздатьРеквизитыДополнительныхПолейШапки(НастройкиПолей, ДобавляемыеРеквизиты);
		ИначеЕсли Раздел.Тип = ТипыРазделовДополнительныхПолей.Таблица Тогда
			СоздатьРеквизитыДополнительныхПолейТаблицы(НастройкиПолей, ДобавляемыеРеквизиты);
		КонецЕсли;
		
		ЗаполнитьИменаРеквизитовПоРазделу(МассивРеквизитовПоРазделам, НастройкиПолей, Раздел);
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ИменаРеквизитовПоРазделам = Новый ФиксированныйМассив(МассивРеквизитовПоРазделам);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из РазделыДополнительныхПолей Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", Раздел.Имя);
		НастройкиПолей = НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если НастройкиПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПоля.Данные, Раздел.Имя);
		ОшибкиРаздела = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПоля.Ошибки, Раздел.Имя);
		
		Если Раздел.Тип = ТипыРазделовДополнительныхПолей.Шапка Тогда

			СоздатьЭлементыДополнительныхПолейШапки(НастройкиПолей, Раздел);
			
			ЗаполнитьДанныеДополнительныхПолейШапки(НастройкиПолей, ДанныеРаздела);
			
			ПоказатьОшибкиВычисленияДополнительныхПолейШапки(ОшибкиРаздела);
			
		ИначеЕсли Раздел.Тип = ТипыРазделовДополнительныхПолей.Таблица Тогда

			СоздатьЭлементыДополнительныхПолейТаблицы(НастройкиПолей, Раздел);
			
			ЗаполнитьДанныеДополнительныхПолейТаблицы(НастройкиПолей, ДанныеРаздела, Раздел);
			
			ПоказатьОшибкиВычисленияДополнительныхПолейТаблицы(ОшибкиРаздела, Раздел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтрШаблон(НСтр("ru = '%1 требует заполнения дополнительных данных в электронных документах.'"), ДанныеДокумента.Контрагент)));
	
	Если НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
	
		МассивСтрок.Добавить(Символы.ПС);
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Заполните их вручную или настройте'")));
		
		МассивСтрок.Добавить(" ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'правила автоматического заполнения.'"),,,,
			"НастройкаЗаполненияДополнительныхПолей"));
		
	КонецЕсли;
	
	Элементы.НадписьТребование.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыДополнительныхПолейШапки(НастройкиПолей, ДобавляемыеРеквизиты)
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			НастройкаПоля.Идентификатор, ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля)));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыДополнительныхПолейТаблицы(НастройкиПолей, ДобавляемыеРеквизиты)
	
	ИмяТаблицыРаздела = "Таблица" + НастройкиПолей[0].Раздел;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		ИмяТаблицыРаздела, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерСтроки", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)), ИмяТаблицыРаздела));
	
	Если НастройкиПолей[0].Раздел = "ТоварыУслуги" Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Номенклатура",
			Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика",
			Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Упаковка",
			Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Сумма",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), ИмяТаблицыРаздела));
	КонецЕсли;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НастройкаПоля.Идентификатор,
			ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля), ИмяТаблицыРаздела));
		Если НастройкаПоля.Заполнение = "ИзСписка" Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НастройкаПоля.Идентификатор + "Представление",
				Новый ОписаниеТипов("Строка"), ИмяТаблицыРаздела));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля)
	
	Если НастройкаПоля.Заполнение = "ВручнуюДатой" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ИначеЕсли НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда
		Если ЗначениеЗаполнено(НастройкаПоля.Значение) Тогда
			ПараметрыЧисла = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(
				СтрЗаменить(НастройкаПоля.Значение,"'",""));
			Длина = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЧисла, "ЧЦ", 15);
			Точность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЧисла, "ЧДЦ", 0);
			ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Длина, Точность));
		Иначе
			ТипРеквизита = Новый ОписаниеТипов("Число");
		КонецЕсли;
	Иначе
		ТипРеквизита = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	
	Возврат ТипРеквизита;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаРеквизитовПоРазделу(МассивРеквизитовПоРазделам, НастройкиПолей, Раздел)
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ИменаРеквизитов.Добавить(НастройкаПоля.Идентификатор);
	КонецЦикла;
	
	РеквизитыРаздела = Новый Структура;
	РеквизитыРаздела.Вставить("ИмяРаздела", Раздел.Имя);
	РеквизитыРаздела.Вставить("ТипРаздела", Раздел.Тип);
	РеквизитыРаздела.Вставить("ИменаРеквизитов", ИменаРеквизитов);
	
	МассивРеквизитовПоРазделам.Добавить(РеквизитыРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДополнительныхПолейШапки(НастройкиПолей, Раздел)
	
	ГруппаРаздела = Элементы.Добавить("Группа" + Раздел.Имя, Тип("ГруппаФормы"), Элементы.ГруппаРазделовШапка);
	ГруппаРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРаздела.Заголовок = Раздел.Представление;
	ГруппаРаздела.ОтображатьЗаголовок = Ложь;
	ГруппаРаздела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	ГруппаРазделаЛево = Элементы.Добавить("ГруппаЛево" + Раздел.Имя, Тип("ГруппаФормы"), ГруппаРаздела);
	ГруппаРазделаЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазделаЛево.ОтображатьЗаголовок = Ложь;
	ГруппаРазделаЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаРазделаПраво = Элементы.Добавить("ГруппаПраво" + Раздел.Имя, Тип("ГруппаФормы"), ГруппаРаздела);
	ГруппаРазделаПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазделаПраво.ОтображатьЗаголовок = Ложь;
	ГруппаРазделаПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	КоличествоЭлементовВГруппе = Окр(НастройкиПолей.Количество() / 2);
	
	НомерЭлемента = 1;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ГруппаЭлементов = ?(НомерЭлемента <= КоличествоЭлементовВГруппе, ГруппаРазделаЛево, ГруппаРазделаПраво);
		ИмяЭлемента = НастройкаПоля.Идентификатор;
		ЭлементГруппы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
		ЗаполнитьСвойстваПоляФормы(ЭлементГруппы, НастройкаПоля, ИмяЭлемента);
		
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДополнительныхПолейТаблицы(НастройкиПолей, Раздел)
	
	СтраницаРаздела = Элементы.Добавить("Страница" + Раздел.Имя, Тип("ГруппаФормы"), Элементы.ГруппаРазделовТаблица);
	СтраницаРаздела.Вид = ВидГруппыФормы.Страница;
	СтраницаРаздела.Заголовок = Раздел.Представление;
	СтраницаРаздела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	ТаблицаРаздела = Элементы.Добавить(ИмяТаблицыРаздела, Тип("ТаблицаФормы"), СтраницаРаздела);
	ТаблицаРаздела.ПутьКДанным = ИмяТаблицыРаздела;
	ТаблицаРаздела.ИзменятьСоставСтрок  = Ложь;
	ТаблицаРаздела.ИзменятьПорядокСтрок = Ложь;
	ТаблицаРаздела.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "НомерСтроки", Тип("ПолеФормы"), ТаблицаРаздела);
	КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".НомерСтроки";
	КолонкаТаблицы.Заголовок = НСтр("ru = 'N'");
	
	Если Раздел.Имя = "ТоварыУслуги" Тогда
		ГруппаКолонок = Элементы.Добавить(ИмяТаблицыРаздела + "ГруппаНоменклатура", Тип("ГруппаФормы"), ТаблицаРаздела);
		ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Номенклатура", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Номенклатура";
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Характеристика", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Характеристика";
		КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Упаковка", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Упаковка";
		КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Сумма", Тип("ПолеФормы"), ТаблицаРаздела);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Сумма";
		КолонкаТаблицы.Ширина = 7;
	КонецЕсли;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		КолонкаТаблицы = Элементы.Добавить(НастройкаПоля.Идентификатор, Тип("ПолеФормы"), ТаблицаРаздела);
		ЗаполнитьСвойстваПоляФормы(КолонкаТаблицы, НастройкаПоля, ИмяТаблицыРаздела + "." + НастройкаПоля.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДополнительныхПолейШапки(НастройкиПолей, ДанныеРаздела)
	
	Если Не ЗначениеЗаполнено(ДанныеРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДополнительныхПолейТаблицы(НастройкиПолей, ДанныеРаздела, Раздел)
	
	Если Не ЗначениеЗаполнено(ДанныеРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	
	НомерСтроки = 1;
	
	Для Каждого ДанныеСтроки Из ДанныеРаздела Цикл
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицыРаздела].Добавить();
		
		ЗначениеСвойства = Неопределено;
		Если ДанныеСтроки.Свойство("КлючСтроки", ЗначениеСвойства) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСвойства);
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("ЗначенияПолей", ЗначениеСвойства) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСвойства);
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВычисленияДополнительныхПолейШапки(ОшибкиРаздела)
	
	Если Не ЗначениеЗаполнено(ОшибкиРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ошибка Из ОшибкиРаздела Цикл
		ОбщегоНазначения.СообщитьПользователю(Ошибка.Значение,,Ошибка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВычисленияДополнительныхПолейТаблицы(ОшибкиРаздела, Раздел)
	
	Если Не ЗначениеЗаполнено(ОшибкиРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	
	Для Каждого ОшибкиПоСтроке Из ОшибкиРаздела Цикл
		Для Каждого Ошибка Из ОшибкиПоСтроке.Значение Цикл
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицыРаздела, ОшибкиПоСтроке.Ключ, Ошибка.Ключ);
			ОбщегоНазначения.СообщитьПользователю(Ошибка.Значение,,Поле);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваПоляФормы(Элемент, НастройкаПоля, ПутьКДанным)
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ПутьКДанным;
	Если ЗначениеЗаполнено(НастройкаПоля.Представление) Тогда
		Элемент.Заголовок = НастройкаПоля.Представление;
	Иначе
		Элемент.Заголовок = НастройкаПоля.Имя;
	КонецЕсли;
	Элемент.Подсказка = НастройкаПоля.Описание;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если НастройкаПоля.Заполнение = "ВручнуюДатой"
		ИЛИ НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда
		Элемент.Формат = НастройкаПоля.Значение;
		Элемент.ФорматРедактирования = НастройкаПоля.Значение;
	ИначеЕсли НастройкаПоля.Заполнение = "ИзСписка" Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Если ЗначениеЗаполнено(НастройкаПоля.Значение) Тогда
			Для Каждого Вариант Из НастройкаПоля.Значение Цикл
				ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), Вариант);
			КонецЦикла;
		КонецЕсли;
		Если СтрНайти(ПутьКДанным, ".") Тогда
			УстановитьУсловноеОформлениеДляЭлементаСВыборомИзСписка(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляЭлементаСВыборомИзСписка(Элемент)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным + "Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ОтборЭлемента.ЛевоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДополнительныхПолей()
	
	ДополнительныеДанные = Новый Структура;
	ТипыРазделовДополнительныхПолей = ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();
	
	Если ЗначениеЗаполнено(ИменаРеквизитовПоРазделам) Тогда 
		
		Для Каждого РеквизитыРаздела Из ИменаРеквизитовПоРазделам Цикл
			
			Если РеквизитыРаздела.ТипРаздела = ТипыРазделовДополнительныхПолей.Шапка Тогда
				ДанныеРаздела = ДанныеДополнительныхПолейШапки(РеквизитыРаздела.ИменаРеквизитов);				
			ИначеЕсли РеквизитыРаздела.ТипРаздела = ТипыРазделовДополнительныхПолей.Таблица Тогда
				ДанныеРаздела = ДанныеДополнительныхПолейТаблицы(РеквизитыРаздела.ИменаРеквизитов, РеквизитыРаздела.ИмяРаздела);
			КонецЕсли;
			
			ДополнительныеДанные.Вставить(РеквизитыРаздела.ИмяРаздела, ДанныеРаздела);
			
		КонецЦикла;
		
	КонецЕсли;	
		
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаКлиенте
Функция ДанныеДополнительныхПолейШапки(ИменаРеквизитов)
	
	ДанныеРаздела = Новый Структура;
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		ДанныеРаздела.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);
	КонецЦикла;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаКлиенте
Функция ДанныеДополнительныхПолейТаблицы(ИменаРеквизитов, ИмяРаздела)
	
	ДанныеРаздела = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект["Таблица" + ИмяРаздела] Цикл
		
		ДанныеСтроки = Новый Структура;
		
		Если ИмяРаздела = "ТоварыУслуги" Тогда
			КлючСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Сумма");
			ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаТаблицы);
			ДанныеСтроки.Вставить("КлючСтроки", КлючСтроки);
		КонецЕсли;
		
		ЗначенияПолей = Новый Структура;
		Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			ЗначенияПолей.Вставить(ИмяРеквизита, СтрокаТаблицы[ИмяРеквизита]);
		КонецЦикла;
		ДанныеСтроки.Вставить("ЗначенияПолей", ЗначенияПолей);
		
		ДанныеРаздела.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаКлиенте
Процедура ГруппаЭлементовПредупрежденийРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "НастройкаЗаполненияДополнительныхПолей" Тогда
		
		КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправки.Организация = ДокументыКОтправке[0].Организация;
		КлючНастроекОтправки.Контрагент = ДокументыКОтправке[0].Контрагент;
		КлючНастроекОтправки.Договор = ДокументыКОтправке[0].ДоговорКонтрагента;
		КлючНастроекОтправки.ВидДокумента = ДокументыКОтправке[0].ВидДокумента;
		
		НастройкиОтправки = НастройкиЭДОКлиент.НастройкиОтправки(КлючНастроекОтправки);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
	
		НастройкиЭДОКлиент.ОткрытьНастройкиЗаполненияДополнительныхПолей(НастройкиОтправки, Оповещение);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Изменены настройки заполнения дополнительных полей.'"));
	МассивСтрок.Добавить(
		СтрШаблон(НСтр("ru = 'Для того чтобы сформировать документ с новыми настройками, нажмите ""%1"".'")
		,?(МассовыйРежим, НСтр("ru = 'Подписать и отправить'"), НСтр("ru = 'Готово'"))));
	
	Элементы.НадписьИзмененыНастройки.Заголовок = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Элементы.ГруппаИзмененыНастройки.Видимость = Истина;
	Элементы.ГруппаРазделовШапка.Доступность = Ложь;
	Элементы.ГруппаРазделовТаблица.Доступность = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьЗаполнениеТекущегоЭтапа()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодписанты Тогда
		
		Если Не ЗначениеЗаполнено(СписокПодписантов) И Не ЗначениеЗаполнено(Маршрут) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указаны подписанты электронного документа'"),,
				Элементы.СписокПодписантов.Имя,,Отказ);
			Возврат Не Отказ;
		КонецЕсли;
		
		ДублиПодписантов = Новый Соответствие;
		
		НомерСтроки = 1;
		Для Каждого СтрокаТаблицы Из СписокПодписантов Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Подписант) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не указан подписант в строке %1'"), НомерСтроки),,
					СтрШаблон("СписокПодписантов[%1].Подписант", НомерСтроки - 1) , , Отказ);
			КонецЕсли;
			
			Если ДублиПодписантов[СтрокаТаблицы.Подписант] = Неопределено Тогда
				ДублиПодписантов.Вставить(СтрокаТаблицы.Подписант, Истина);
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Обнаружен дубль подписанта ""%1"" в строке %2'"),
					СтрокаТаблицы.Подписант, НомерСтроки),,
					СтрШаблон("СписокПодписантов[%1].Подписант", НомерСтроки - 1) , , Отказ);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Функция ПараметрыДокументовКОтправке()
	
	Отбор = Новый Структура("ГотовКОтправке, ЕстьОшибки", Истина, Ложь);
	Таблица = ДокументыКОтправке.Выгрузить(Отбор, "Документ");
	МассивСсылок =  Таблица.ВыгрузитьКолонку("Документ");
	
	ПараметрыФормированияДокументов = ПараметрыФормированияДокументов(ЭтотОбъект, МассивСсылок);
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыДокументов.Вставить("ПараметрыФормированияДокументов", ПараметрыФормированияДокументов);
	
	Возврат ПараметрыДокументов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормированияДокументов(Форма, МассивДокументов)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("МаршрутыПодписанияОбъектов", Новый Соответствие);	
	ПараметрыФормирования.Вставить("ПодписантыОбъектов", Новый Соответствие);
	ПараметрыФормирования.Вставить("КлючиНастроекОбъектов", Новый Соответствие);
	ПараметрыФормирования.Вставить("ИдентификаторыПечатныхФормОбъектов", Новый Соответствие);
	
	Отбор = Новый Структура("Документ");
	ОтборПодписантов = Новый Структура("Организация, ВидДокумента");
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		Отбор.Документ = Документ;
		НайденныеСтроки = Форма.ДокументыКОтправке.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			СтрокаТаблицы = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоВнутреннийЭДО
			И ЗначениеЗаполнено(СтрокаТаблицы.ВидДокумента) Тогда
			КлючНастройки = Новый Структура;
			КлючНастройки.Вставить("Организация", СтрокаТаблицы.Организация);
			КлючНастройки.Вставить("ВидВнутреннегоДокумента", СтрокаТаблицы.ВидДокумента);
			ПараметрыФормирования.КлючиНастроекОбъектов.Вставить(СтрокаТаблицы.Документ, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки));		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СписокПодписантов) Тогда
			Подписанты = Новый Массив;
			ОтборПодписантов.Организация = СтрокаТаблицы.Организация;
			ОтборПодписантов.ВидДокумента = СтрокаТаблицы.ВидДокумента;
			НайденныеПодписанты = Форма.СписокПодписантов.НайтиСтроки(ОтборПодписантов);
			Для Каждого СтрокаПодписантов Из НайденныеПодписанты Цикл
				Подписанты.Добавить(СтрокаПодписантов.Подписант);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Подписанты) Тогда
				ПараметрыФормирования.ПодписантыОбъектов.Вставить(Документ, Подписанты);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Маршрут) Тогда
			ПараметрыФормирования.МаршрутыПодписанияОбъектов.Вставить(Документ, Форма.Маршрут);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СписокПечатныхФорм) Тогда
			ИдентификаторПечатнойФормы = "";
			Для Каждого СтрокаТаблицы Из Форма.СписокПечатныхФорм Цикл
				Если СтрокаТаблицы.Пометка Тогда
					ИдентификаторПечатнойФормы = СтрокаТаблицы.Значение;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ИдентификаторПечатнойФормы) Тогда
				ПараметрыФормирования.ИдентификаторыПечатныхФормОбъектов.Вставить(Документ, ИдентификаторПечатнойФормы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыФормирования;
	
КонецФункции

&НаКлиенте
Процедура СписокЗапрещенныхКФормированиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокЗапрещенныхКФормированию.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	

	ПараметрыФормы = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастроекОтправки();
	ПараметрыФормы.КлючНастроекОтправки.Отправитель = ТекущиеДанные.Отправитель;
	ПараметрыФормы.КлючНастроекОтправки.Получатель = ТекущиеДанные.Получатель;
	ПараметрыФормы.КлючНастроекОтправки.Договор = ТекущиеДанные.Договор;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = ЭтаФорма;
	
	Если ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
		НастройкиЭДОКлиент.ОткрытьНастройкиВнутреннегоЭлектронногоДокументооборота(ТекущиеДанные.Отправитель);
	ИначеЕсли ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Интеркампани") Тогда 
		ПараметрыФормы = НастройкиОтправкиЭДОКлиент.НовыеПараметрыФормыНастроекИнтеркампани();
		ПараметрыФормы.Отправитель = ТекущиеДанные.Отправитель;
		ПараметрыФормы.Получатель = ТекущиеДанные.Получатель;
		
		ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
		ПараметрыОткрытия.Владелец = ЭтотОбъект;
	
		НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуИнтеркампани(ПараметрыФормы, ПараметрыОткрытия);
	Иначе
		НастройкиОтправкиЭДОКлиент.ОткрытьНастройкуОтправки(ПараметрыФормы, ПараметрыОткрытия);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОткрытиеНастроекЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНеУстановленОсновнойВид(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОсновнойВидНеУстановлен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	

	НастройкиЭДОКлиент.ОткрытьНастройкиВнутреннегоЭлектронногоДокументооборота(ТекущиеДанные.Организация);
	
	ПодключитьОбработчикОжидания("ОткрытиеНастроекВнутреннегоДокументооборотаЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеНастроекЗавершение()
	
	ТекущиеДанные = Элементы.СписокЗапрещенныхКФормированию.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Организация", ТекущиеДанные.Отправитель);
		ЗначенияКлюча.Вставить("ВидВнутреннегоДокумента", ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка"));
	
		ОписаниеОшибки = ОписаниеОшибкиЗапретаФормированияВнутреннегоДокумента(ЗначенияКлюча, ТекущиеДанные.ИдентификаторОбъектаУчета);	
	
	Иначе
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Отправитель"     , ТекущиеДанные.Отправитель);
		ЗначенияКлюча.Вставить("Получатель"      , ТекущиеДанные.Получатель);
		ЗначенияКлюча.Вставить("Договор"         , ТекущиеДанные.Договор);
		ЗначенияКлюча.Вставить("ВидДокумента"    , ТекущиеДанные.ВидДокумента);
		ЗначенияКлюча.Вставить("УдалитьВидДокумента", ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ПустаяСсылка"));
		ЗначенияКлюча.Вставить("УдалитьПрикладнойВидЭД", Неопределено);
				
		ОписаниеОшибки = ОписаниеОшибкиЗапретаФормированияДокумента(ЗначенияКлюча);	
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		ОписаниеОшибки.ТекстОшибки, ОписаниеОшибки.КлючСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеНастроекВнутреннегоДокументооборотаЗавершение()
	
	ТекущиеДанные = Элементы.СписокОсновнойВидНеУстановлен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗначенияКлюча = Новый Структура;
	ЗначенияКлюча.Вставить("Организация", ТекущиеДанные.Организация);
	ЗначенияКлюча.Вставить("ВидВнутреннегоДокумента", ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка"));
	
	ОписаниеОшибки = ОписаниеОшибкиОсновнойВидНеУстановлен(ЗначенияКлюча, ТекущиеДанные.ИдентификаторОбъекта);	
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		ОписаниеОшибки.ТекстОшибки, ОписаниеОшибки.КлючСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОшибкиЗапретаФормированияДокумента(ЗначенияКлюча)

	Ошибка = Новый Структура;
	ТипРегистра = Тип("РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументовПоВидам");
	КлючЗаписи = ОбщегоНазначенияБЭДКлиент.КлючЗаписиРегистраСведений(ТипРегистра, ЗначенияКлюча);
	Ошибка.Вставить("КлючСообщения", КлючЗаписи);
	Ошибка.Вставить("ТекстОшибки", НСтр("ru = 'Документ заблокирован для отправки'"));
	Возврат Ошибка;

КонецФункции

&НаКлиенте
Функция ОписаниеОшибкиЗапретаФормированияВнутреннегоДокумента(ЗначенияКлюча, ИдентификаторОбъектаУчета)
	
	Ошибка = Новый Структура;
	ТипРегистра = Тип("РегистрСведенийКлючЗаписи.НастройкиВнутреннегоЭДО");
	КлючЗаписи = ОбщегоНазначенияБЭДКлиент.КлючЗаписиРегистраСведений(ТипРегистра, ЗначенияКлюча);
	Ошибка.Вставить("КлючСообщения", КлючЗаписи);
	Ошибка.Вставить("ТекстОшибки", СтрШаблон(НСтр("ru = 'Формирование документов на основании %1 запрещено'"),
		ИдентификаторОбъектаУчета));
	Возврат Ошибка;

КонецФункции

&НаКлиенте
Функция ОписаниеОшибкиОсновнойВидНеУстановлен(ЗначенияКлюча, ИдентификаторОбъекта)

	Ошибка = Новый Структура;
	ТипРегистра = Тип("РегистрСведенийКлючЗаписи.НастройкиВнутреннегоЭДО");
	КлючЗаписи = ОбщегоНазначенияБЭДКлиент.КлючЗаписиРегистраСведений(ТипРегистра, ЗначенияКлюча);
	Ошибка.Вставить("КлючСообщения", КлючЗаписи);
	Ошибка.Вставить("ТекстОшибки", СтрШаблон(НСтр(
		"ru = 'Не указана печатная форма по умолчанию для вида документа ""%1""'"), ИдентификаторОбъекта));
	Возврат Ошибка;

КонецФункции

#КонецОбласти