
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОформитьИнтерфейсДляМобильногоКлиентаНаСервере();
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "Видимость", Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеЭДОСтрокой) Тогда
		НаправлениеЭДОСтрокой = "ПустаяСсылка";
	КонецЕсли;
	
	СостоянияЗавершенногоЭДО.ЗагрузитьЗначения(ЭлектронныеДокументыЭДО.СостоянияЗавершенногоЭДО());
	
	ЗаполнитьСписокВыбораВидовДокументов();
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	УстановитьЗначениеПустогоКонтрагента();
	
	ПоляСОграничениями = СтрРазделить("Флаг,ИндексКартинки", ",");
	Список.УстановитьОграниченияИспользованияВОтборе(ПоляСОграничениями);
	Список.УстановитьОграниченияИспользованияВПорядке(ПоляСОграничениями);
	
	УстановитьУсловноеОформление();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПанельКонтекстныхНовостей);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "ВидЭД", Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "СостояниеЭДО", Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "Период", Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "НаправлениеЭДО", Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "ОтраженВУчете", Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО() Тогда
		
		Элементы.Список.Обновить();
		Элементы.ВсеКонтейнеры.Обновить();
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда
		
		Элементы.ВсеПриглашения.Обновить();
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидимостьОтборов();
	ОбновитьКнопкиОтборовДокументов();
	ОбновитьВидимостьДоступностьКомандКонтейнеров();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЭДПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоВидуЭлектронногоДокумента("Список", "ВидЭД");
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеЭДОПриИзменении(Элемент)
	
	НаправлениеЭДО = ПредопределенноеЗначение("Перечисление.НаправленияЭДО." + НаправлениеЭДОСтрокой);
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "НаправлениеЭДО", НаправлениеЭДО);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоСостояниюЭДОКлиентСервер(Список, "СостояниеЭДО", СостояниеЭДО, СостоянияЗавершенногоЭДО);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтраженВУчетеПриИзменении(Элемент)
	
	УстановитьОтборВСпискеОтраженВУчетеКлиентСервер(Список, "ОтраженВУчете", ОтраженВУчете);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриглашенияПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Организация", ОрганизацияПриглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриглашенияПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Контрагент", КонтрагентПриглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриглашенияПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Статус", СтатусПриглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Контрагент", Контрагент);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Организация", Организация);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоПериодуКлиентСервер(Список, "ДатаДокумента", Период);
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеКонтейнеры, "Организация", ОрганизацияКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеКонтейнеры, "Контрагент", КонтрагентКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеКонтейнеры, "Направление", НаправлениеКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеКонтейнеры, "Статус", СтатусКонтейнера);
	ОбновитьВидимостьДоступностьКомандКонтейнеров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СписокФлаг Тогда
		
		ИзменитьПометкуДокумента(ТекущиеДанные.Документооборот);
		ОбновитьОтображениеВыбранныхДокументов();
		
	Иначе
		
		ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ТекущиеДанные.Документооборот);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("ВыбранныеДокументы") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеДокументы = Настройки.ДополнительныеСвойства.ВыбранныеДокументы;
	
	Для каждого Строка Из Строки Цикл
		ДанныеСтроки = Строка.Значение.Данные;
		ДанныеСтроки.Флаг = ВыбранныеДокументы.Найти(ДанныеСтроки.Документооборот) <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ТекущиеДанные.Документооборот;
	ПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ДополнительныеПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПометкуУдаленияВопрос", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияБЭДКлиент.ЗадатьВопросНаУстановкуПометкиУдаления(ПометкаУдаления, ОписаниеОповещения);
 
КонецПроцедуры

&НаКлиенте
Процедура Распечатать(Команда)
	
	Если Не ПроверитьВыбранныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(ВыбранныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	Если Не ПроверитьВыбранныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Документообороты = ВыбранныеДокументы.ВыгрузитьЗначения();
	
	ДополнительныеПараметры = Новый Структура("КоличествоКОбработке", Документообороты.Количество());
	
	ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещениеОЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(Документообороты, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьКомандКонтейнеров()
	
	Элементы.ВсеКонтейнерыРаспаковатьВыделенныеКонтейнеры.Видимость = СтатусКонтейнера = ПредопределенноеЗначение(
		"Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке");
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	НераспакованныеКонтейнерыСписок = Элементы.ВсеКонтейнеры.ВыделенныеСтроки;
	
	СинхронизацияЭДОКлиент.РаспаковатьТранспортныеКонтейнеры(НераспакованныеКонтейнерыСписок);
 	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКРаспаковке(Команда)
	
	ТаблицаКонтейнеров = "СписокНераспакованныеКонтейнеры";
	Количество = 0;
	СтатусКРаспаковке = ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке");
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, СтатусКРаспаковке, Количество);
	
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""К распаковке""'") + ": (%1)";
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(Команда)
	
	Если Команда.Имя = "УстановитьСтатусОтмененНеРаспакованныеКонтейнеры" Тогда
		ТаблицаКонтейнеров = "СписокНераспакованныеКонтейнеры";
	Иначе
		ТаблицаКонтейнеров = "СписокНеотправленныеКонтейнеры";
	КонецЕсли;
	
	Количество = 0;
	СтатусОтменен = ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Отменен");
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, СтатусОтменен, Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""Отменен""'") + ": (%1)";
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПодготовленКОтправке(Команда)
	
	ТаблицаКонтейнеров = "СписокНеотправленныеКонтейнеры";
	Количество = 0;
	СтатусПодготовленКОтправке = ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.ПодготовленКОтправке");
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, СтатусПодготовленКОтправке, Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""Подготовлен к отправке""'" + ": (%1)");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонтейнерыЭДНаДиск(Команда)
	
	ДанныеФайлов = ПолучитьДанныеПрисоединенныхФайловКонтейнеровЭДНаСервере(
		Элементы.ВсеКонтейнеры.ВыделенныеСтроки, УникальныйИдентификатор);
	
	МассивФайлов = Новый Массив;
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
			ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		МассивФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если МассивФайлов.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьКонтейнерыЭДНаДискПослеУстановкиРасширения", ЭтотОбъект, МассивФайлов);
		ТекстСообщения = НСтр("ru = 'Для сохранения контейнеров ЭД необходимо установить расширение работы с файлами.'");
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонтейнерыЭДНаДискПослеУстановкиРасширения(РасширениеПодключено, МассивФайлов) Экспорт
	
	Если РасширениеПодключено Тогда
		ПустойОбработчик = Новый ОписаниеОповещения;
		НачатьПолучениеФайлов(ПустойОбработчик, МассивФайлов);
	Иначе
		ДанныеФайла = МассивФайлов[0];
		ПолучитьФайл(ДанныеФайла.Хранение, ДанныеФайла.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьВыбранныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ВыбранныеДокументы.ВыгрузитьЗначения();
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьВыбранныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ВыбранныеДокументы.ВыгрузитьЗначения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЭлектронныеДокументыДляФНСЗавершение", ЭтотОбъект);
	
	Если ЕстьНезавершенныеДокументы(ЭлектронныеДокументы) Тогда
		Если ЭлектронныеДокументы.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для документа не завершен электронный документооборот.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для некоторых документов не завершен электронный документооборот.'");
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + " " + НСтр("ru = 'Продолжить выгрузку?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ВыбранныеДокументы.ВыгрузитьЗначения();
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьВыбранныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ВыбранныеДокументы.ВыгрузитьЗначения();
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	ОтображатьОтборы = Не ОтображатьОтборы;
	ОбновитьВидимостьОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДокументов(Команда)
	
	Документообороты = ЭлектронныеДокументыСписка();
	ВыбранныеДокументы.ЗагрузитьЗначения(Документообороты);
	ОбновитьОтображениеВыбранныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДокументов(Команда)
	
	ВыбранныеДокументы.Очистить();	
	ОбновитьОтображениеВыбранныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользовательскиеОтборыДокументов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриОкончанииНастройкиСпискаДокументов", ЭтотОбъект);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтборовСписка(Оповещение, ЭтотОбъект, Список.КомпоновщикНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьПометкуУдаленияВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуУдаления(ДополнительныеПараметры);
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО(), , ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаления(ДополнительныеПараметры)
	
	СсылкаОбъект = ДополнительныеПараметры.ЭлектронныйДокумент.ПолучитьОбъект();
	СсылкаОбъект.УстановитьПометкуУдаления(Не ДополнительныеПараметры.ПометкаУдаления);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыбранныеДокументы()
	
	Если ВыбранныеДокументы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПустогоКонтрагента()
	
	ПустойКонтрагент = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Контрагенты");
	ПустаяОрганизация = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации");
	
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", ПустойКонтрагент);
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ПустаяОрганизация", ПустаяОрганизация);
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ПустойУчастникЭДО", Неопределено);
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ИНН", НСтр("ru = 'ИНН'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДанных, ВидЭлемента,
		ЗначениеЭлемента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВСпискеПоПериодуКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента)
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		СписокДанных.Отбор.Элементы, "ГруппаОтбораПериод");
	Если ГруппаБыстрыйОтбор = Неопределено Тогда
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			СписокДанных.Отбор.Элементы, "ГруппаОтбораПериод", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, ВидЭлемента,
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ЗначениеЭлемента.ДатаНачала, "ОтборПериодДатаНачала");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, ВидЭлемента,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ЗначениеЭлемента.ДатаОкончания, "ОтборПериодДатаОкончания");
	КонецЕсли;
	
	ГруппаБыстрыйОтбор.Использование = ЗначениеЗаполнено(ЗначениеЭлемента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Неопределено, ЗначениеЭлемента.ДатаНачала,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, "ОтборПериодДатаНачала", ЗначениеЗаполнено(ЗначениеЭлемента));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Неопределено, ЗначениеЭлемента.ДатаОкончания,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,"ОтборПериодДатаОкончания" , ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВСпискеОтраженВУчетеКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДанных, ВидЭлемента,
		ЗначениеЭлемента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЭлемента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВСпискеПоСостояниюЭДОКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента, СостоянияЗавершенногоЭДО)
	
	Если ЗначениеЭлемента = 2 Тогда
		ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеВСписке;
	Иначе
		ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДанных, ВидЭлемента,
		СостоянияЗавершенногоЭДО, ВидСравненияЭлемента,, ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСпискеПоВидуЭлектронногоДокумента(Знач ИмяСписка, Знач ИмяРеквизита)
	
	СписокДанных = ЭтотОбъект[ИмяСписка];
	ВидДокумента = ЭтотОбъект[ИмяРеквизита];
	ИмяГруппыОтбора = "ГруппаОтбора" + ИмяРеквизита;
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокДанных.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ГруппаБыстрыйОтбор.Использование = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаБыстрыйОтбор, "ВидДокумента", ВидСравненияКомпоновкиДанных.Равно, ВидДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	#Если Не ТолстыйКлиентУправляемоеПриложение И Не ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.СравнитьДанныеЭД.Видимость = Ложь;
	#КонецЕсли
	
	Если Не ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Элементы.УстановитьОтветственного.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДанныеЭД(Команда)
	
	#Если ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
			
		Если ВыбранныеДокументы.Количество() <> 2 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать 2 документа.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Документообороты = ВыбранныеДокументы.ВыгрузитьЗначения();
		Представления = ПредставлениеЭлектронныхДокументов(Документообороты);
		
		ИмяФайла1 = ПолучитьИмяВременногоФайла("mxl");
		ИмяФайла2 = ПолучитьИмяВременногоФайла("mxl");
		
		Представления[0].Записать(ИмяФайла1);
		Представления[1].Записать(ИмяФайла2);
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
		Сравнение.ПервыйФайл = ИмяФайла1;
		Сравнение.ВторойФайл = ИмяФайла2;
		Сравнение.ПоказатьРазличияМодально();
		
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(), ИмяФайла1);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(), ИмяФайла2);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеЭлектронныхДокументов(Знач Документообороты)
	
	МассивПредставлений = Новый Массив;
	
	Для Каждого Документооборот Из Документообороты Цикл
		ЭД = ЭлектронныеДокументыЭДО.СообщениеОтправителя(Документооборот);
		Представление = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(ЭД);
		МассивПредставлений.Добавить(Представление);
	КонецЦикла;
	
	Возврат МассивПредставлений;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, СтатусКонтейнера, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из Элементы[ТаблицаКонтейнеров].ВыделенныеСтроки Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Если СинхронизацияЭДО.ИзменитьСтатусТранспортногоКонтейнера(СтрокаТаблицы.Ссылка, СтатусКонтейнера) Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработкаНеисправностейБЭД.ОбработатьОшибку(
				НСтр("ru = 'изменение статуса контейнеров ЭД'"), ТекстОшибки, ТекстСообщения,, СтрокаТаблицы.Ссылка);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрисоединенныхФайловКонтейнеровЭДНаСервере(Знач КонтейнерыЭД, УникальныйИдентификатор)
	
	ФайлыКонтейнеровЭД = СинхронизацияЭДО.ПрисоединенныеФайлыТранспортныхКонтейнеров(КонтейнерыЭД);
	
	ДанныеФайлов = Новый Массив;
	Для Каждого ФайлКонтейнера Из ФайлыКонтейнеровЭД Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлКонтейнера, УникальныйИдентификатор);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

&НаСервере
Процедура ОтборПоЭлементуПриЗагрузкеИзНастроек(Форма, ИмяСписка, ВидЭлемента, Настройки)
	
	СписокДанных = ЭтотОбъект[ИмяСписка];
	ЗначениеЭлемента = Настройки.Получить(ВидЭлемента);
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Форма[ВидЭлемента] = ЗначениеЭлемента;
		
		Если НРег(ВидЭлемента) = "видэд" Тогда
			УстановитьОтборВСпискеПоВидуЭлектронногоДокумента(ИмяСписка, ВидЭлемента);
		ИначеЕсли НРег(ВидЭлемента) = "период" Тогда
			УстановитьОтборВСпискеПоПериодуКлиентСервер(Список, "ДатаДокумента", ЗначениеЭлемента);
		ИначеЕсли НРег(ВидЭлемента) = "состояниеэдо" Тогда
			УстановитьОтборВСпискеПоСостояниюЭДОКлиентСервер(Список, "СостояниеЭДО", ЗначениеЭлемента, СостоянияЗавершенногоЭДО);
		ИначеЕсли НРег(ВидЭлемента) = "отраженвучете" Тогда
			УстановитьОтборВСпискеОтраженВУчетеКлиентСервер(Список, "ОтраженВУчете", ЗначениеЭлемента);
		Иначе
			УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ВидЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьОтборов()
	
	Элементы.ГруппаДокументыОтборы.Видимость = ОтображатьОтборы;
	Элементы.ПоказатьСкрытьОтборы.Пометка = ОтображатьОтборы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтборовДокументов()
	
	Если ВыбранныеДокументы.Количество() <> 0 Тогда
		ВыбранныеДокументыИзменены = АктуализироватьВыбранныеДокументы();
		Если ВыбранныеДокументыИзменены Тогда
			ОбновитьОтображениеВыбранныхДокументов();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКнопкиОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииНастройкиСпискаДокументов(Настройки, ДопПараметры) Экспорт
	
	Если ТипЗнч(Настройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	
	ОбработатьПересеченияПользовательскихИБыстрыхОтборов();
	
	ПриИзмененииОтборовДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиОтборовДокументов()
	
	КоличествоПользовательскихОтборов = 0;
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	Для каждого ЭлементОтбора Из ПользовательскийОтбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			КоличествоПользовательскихОтборов = КоличествоПользовательскихОтборов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоПользовательскихОтборов) Тогда
		ТекстКнопкиПО = НСтр("ru = 'и еще'") + " " + Строка(КоличествоПользовательскихОтборов);
	Иначе
		ТекстКнопкиПО = НСтр("ru = 'еще'");	
	КонецЕсли;
	Элементы.ОткрытьПользовательскиеОтборыДокументов.Заголовок = ТекстКнопкиПО;
	
	КоличествоОтборов = КоличествоПользовательскихОтборов;
	
	ПоляБыстрыхОтборов = "Период,Организация,Контрагент,ВидЭД,НаправлениеЭДО,ОтраженВУчете,СостояниеЭДО";
	Для Каждого ПолеБыстрогоОтбора Из СтрРазделить(ПоляБыстрыхОтборов, ",") Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект[ПолеБыстрогоОтбора])
			И ЭтотОбъект[ПолеБыстрогоОтбора] <> Ложь Тогда
			КоличествоОтборов = КоличествоОтборов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоОтборов) Тогда
		ТекстКнопкиОтбора = НСтр("ru = 'Отбор (%1)'");
		ТекстКнопкиОтбора = СтрШаблон(ТекстКнопкиОтбора, Строка(КоличествоОтборов));
	Иначе
		ТекстКнопкиОтбора = НСтр("ru = 'Отбор'");	
	КонецЕсли;
	Элементы.ПоказатьСкрытьОтборы.Заголовок = ТекстКнопкиОтбора;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПользовательскийОтборСписка(Знач Список)

	ИдентификаторНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);

	Если ПользовательскийОтбор = Неопределено Тогда
		ПользовательскийОтбор = Новый ОтборКомпоновкиДанных();
	КонецЕсли;

	Возврат ПользовательскийОтбор;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЗачеркнутыйШрифтБЭД);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// Невалидные подписи по МЧД
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеУдачнаяПроверкаМЧД);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьНевалидныеПодписиПоМЧД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
КонецПроцедуры

#Область ПересечениеПользовательскихИБыстрыхОтборов

&НаКлиенте
Процедура ОбработатьПересеченияПользовательскихИБыстрыхОтборов()
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	
	ЭлементыОтбора = Новый Соответствие;
	ЗаполнитьЭлементыДляОбработкиПересеченийПользовательскихИБыстрыхОтборов(ЭлементыОтбора, ПользовательскийОтбор);
	
	ЭлементыУдалить = Новый Массив;
	
	Для каждого КлючЗначениеЭлементаОтбора Из ЭлементыОтбора Цикл
		
		ПолеОтбора = КлючЗначениеЭлементаОтбора.Ключ;
		ЭлементыОтбора = КлючЗначениеЭлементаОтбора.Значение;
		
		Если Не ОбработатьПересечениеОтборов(ПолеОтбора, ЭлементыОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементыУдалить.Добавить(ЭлементОтбора);
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьПользовательскиеОтборы(ЭлементыУдалить, ПользовательскийОтбор);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьПересечениеОтборов(ПолеОтбора, ЭлементыОтбора)
	
	Если ПолеОтбора = Новый ПолеКомпоновкиДанных("ДатаДокумента") Тогда
		Возврат ОбработатьПересечениеОтборовПериод(ЭлементыОтбора);
	КонецЕсли;
	
	Если ЭлементыОтбора.Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыОтбора[0];
	
	Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		И ЭлементОтбора.ПравоеЗначение.Количество() = 1 Тогда
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение[0].Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравоеЗначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация")
		И Элементы.Организация.Видимость Тогда
		Организация = ПравоеЗначение;
		УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Организация", Организация);
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Контрагент") Тогда
		Контрагент = ПравоеЗначение;
		УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Контрагент", Контрагент);
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("ВидДокумента") Тогда
		ВидЭД = ПравоеЗначение;
		УстановитьОтборВСпискеПоВидуЭлектронногоДокумента("Список", "ВидЭД");
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("ОтраженВУчете")
		И ПравоеЗначение = Истина Тогда
		ОтраженВУчете = ПравоеЗначение;
		УстановитьОтборВСпискеОтраженВУчетеКлиентСервер(Список, "ОтраженВУчете", ОтраженВУчете);
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеЭДО") Тогда
		Возврат ОбработатьПересечениеОтборовНаправлениеЭДО(ЭлементОтбора, ПравоеЗначение);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбработатьПересечениеОтборовПериод(ЭлементыОтбора)
	
	Если ЭлементыОтбора.Количество() > 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаНачалаПериода = Неопределено;
	ДатаОкончанияПериода = Неопределено;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			ДатаНачалаПериода = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			ДатаОкончанияПериода = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЭлементыОтбора.Количество() = 1 Тогда
			ДатаНачалаПериода = ЭлементОтбора.ПравоеЗначение;
			ДатаОкончанияПериода = ЭлементОтбора.ПравоеЗначение;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементыОтбора.Количество() = 2
		И (ДатаНачалаПериода = Неопределено Или ДатаОкончанияПериода = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Период.ДатаНачала = ?(ДатаНачалаПериода = Неопределено, Дата(1, 1, 1), ДатаНачалаПериода);
	Период.ДатаОкончания = ?(ДатаОкончанияПериода = Неопределено, Дата(1, 1, 1), ДатаОкончанияПериода);
	УстановитьОтборВСпискеПоПериодуКлиентСервер(Список, "ДатаДокумента", Период);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбработатьПересечениеОтборовНаправлениеЭДО(ЭлементОтбора, ПравоеЗначение)
	
	Если ПравоеЗначение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий") Тогда
		НаправлениеЭДОСтрокой = "Входящий";
	ИначеЕсли ПравоеЗначение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий") Тогда
		НаправлениеЭДОСтрокой = "Исходящий";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	НаправлениеЭДО = ПравоеЗначение;
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "НаправлениеЭДО", НаправлениеЭДО);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭлементыДляОбработкиПересеченийПользовательскихИБыстрыхОтборов(ЭлементыОтбора, ГруппаОтборов)
		
	Для каждого ЭлементОтбора Из ГруппаОтборов.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			ЗаполнитьЭлементыДляОбработкиПересеченийПользовательскихИБыстрыхОтборов(ЭлементыОтбора, ЭлементОтбора);
			Продолжить;
		КонецЕсли; 
		
		ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		
		Если ЭлементыОтбора[ПолеОтбора] = Неопределено Тогда
			ЭлементыОтбора[ПолеОтбора] = Новый Массив;
		КонецЕсли;
		ЭлементыОтбора[ПолеОтбора].Добавить(ЭлементОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользовательскиеОтборы(ЭлементыОтбора, ПользовательскийОтбор)
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И ЭлементОтбора.Элементы.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.Родитель <> Неопределено Тогда
			Если ЭлементыОтбора.Найти(ЭлементОтбора.Родитель) = Неопределено Тогда
				ЭлементыОтбора.Добавить(ЭлементОтбора.Родитель);
			КонецЕсли;
			ЭлементОтбора.Родитель.Элементы.Удалить(ЭлементОтбора);
		Иначе
			ПользовательскийОтбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

&НаСервереБезКонтекста
Функция ЕстьНезавершенныеДокументы(Знач ЭлектронныеДокументы)
	
	Возврат ЭлектронныеДокументыЭДО.НезавершенныеДокументы(ЭлектронныеДокументы).Количество() <> 0;
	
КонецФункции

#КонецОбласти

#Область ФлагиВСписке

&НаКлиенте
Процедура ИзменитьПометкуДокумента(Документ)
	
	НайденныйИндекс = ВыбранныеДокументы.НайтиПоЗначению(Документ);
	Если НайденныйИндекс = Неопределено Тогда
		ВыбранныеДокументы.Добавить(Документ);
	Иначе
		ВыбранныеДокументы.Удалить(НайденныйИндекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеВыбранныхДокументов()
	
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыбранныеДокументы",
		ВыбранныеДокументы.ВыгрузитьЗначения());
	
	ШаблонЗаголовка = НСтр("ru = 'Выбрано: %1'");
	Элементы.ДекорацияВыбранныеДокументы.Заголовок = СтрШаблон(ШаблонЗаголовка, ВыбранныеДокументы.Количество());
	
КонецПроцедуры

&НаСервере
Функция ЭлектронныеДокументыСписка()
	
	ПоляВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документооборот");
	ДанныеСписка = ДанныеДинамическогоСписка("Список", ПоляВыбора);
	
	Результат = ДанныеСписка.ВыгрузитьКолонку("Документооборот");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция АктуализироватьВыбранныеДокументы()
	
	Если ВыбранныеДокументы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоляВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документооборот");
	
	ОписаниеОтбора = Новый Структура;
	ОписаниеОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Документооборот"));
	ОписаниеОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.ВСписке);
	ОписаниеОтбора.Вставить("ПравоеЗначение", ВыбранныеДокументы.ВыгрузитьЗначения());
	Отборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеОтбора);
	
	ДанныеСписка = ДанныеДинамическогоСписка("Список", ПоляВыбора, Отборы);
	
	АктуальныеВыбранныеДокументы = ДанныеСписка.ВыгрузитьКолонку("Документооборот");
	
	Если ВыбранныеДокументы.Количество() <> АктуальныеВыбранныеДокументы.Количество() Тогда
		ВыбранныеДокументы.ЗагрузитьЗначения(АктуальныеВыбранныеДокументы);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УстановитьОтветственногоОповещениеОЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = Результат.КоличествоОбработанных.КоличествоДокументов;
	Ответственный = Результат.КоличествоОбработанных.Ответственный;
	
	Если КоличествоОбработанных > 0 Тогда
		
		Элементы.Список.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
		|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%", ДополнительныеПараметры.КоличествоКОбработке);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидовДокументов()
	
	ВидыДокументов = ИнтерфейсДокументовЭДО.ВидыЭлектронныхДокументовДоступныеДляОтборов();
	Элементы.ВидЭД.СписокВыбора.ЗагрузитьЗначения(ВидыДокументов);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДинамическогоСписка(Знач ИмяЭлемента, Знач ПоляВыбора = Неопределено, Знач Отборы = Неопределено)
	
	СписокДанных = Элементы[ИмяЭлемента];
	
	Настройки = СписокДанных.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если ПоляВыбора <> Неопределено Тогда
		
		ВыбранныеПоля = Настройки.Структура[0].Выбор.Элементы;
		ВыбранныеПоля.Очистить();
		
		Для каждого ПолеВыбора Из ПоляВыбора Цикл
			ВыбранноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбора);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из Отборы Цикл
			НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйОтбор, ОписаниеОтбора);
		КонецЦикла;
		
	КонецЕсли;
	
	Схема = СписокДанных.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	ТипГенератораМакета = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, ТипГенератораМакета);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции

#Область КонтекстныеПодсказки

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область МобильныйКлиент

&НаСервере
Процедура ОформитьИнтерфейсДляМобильногоКлиентаНаСервере()
	
	ИнтерфейсДокументовЭДО.СкрытьВсеЭлементыФормы(Элементы);
	
	ВидимыеЭлементы = "Страницы, ЭлектронныеДокументы, ГруппаДокументыОтборы, Период, Организация, Контрагент, ВидЭД,
		|НаправлениеЭДО, СостояниеЭД, ОтраженВУчете, Список, СписокВидДокумента, СписокНаправлениеЭДО,
		|СписокНомерДокумента, СписокДатаДокумента, СписокКонтрагент, СписокОрганизация, СписокСостояниеЭДО";
	
	ИнтерфейсДокументовЭДО.УстановитьВидимостьЭлементов(Элементы, ВидимыеЭлементы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", "ПутьКДаннымКартинкиСтроки", "");
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
