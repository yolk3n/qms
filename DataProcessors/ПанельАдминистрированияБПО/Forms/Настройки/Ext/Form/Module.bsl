
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// создание элемента Распределенная фискализация
	Элемент = Элементы.Добавить(
		"ИспользоватьРаспределеннуюФискализацию", 
		Тип("ПолеФормы"), 
		Элементы.ГруппаУправлениеПодключаемымОборудованиемПерваяСтрока);
	Элемент.Вид                  = ВидПоляФормы.ПолеФлажка;
	Элемент.Заголовок            = НСтр("ru = 'Использовать распределенную фискализацию'");
	Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользоватьРаспределеннуюФискализациюПриИзменении");
	Подсказка = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Распределенная фискализация доступна при использовании подсистемы '"),
		Новый ФорматированнаяСтрока(НСтр("ru = '""Обсуждения""'"),,,,"Обсуждения"),
		".",
		Символы.ПС,
		НСтр("ru = 'В настройках экземпляра подключаемого оборудования с типом ""ККТ с передачей данных"" должен быть установлен флаг ""Автоматическая фискализация чеков из очереди чеков"".'"));
	Элемент.РасширеннаяПодсказка.Заголовок = Подсказка;
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Если МенеджерОборудования.ИспользуетсяБСП() И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
			МодульСертификатыНУЦМинцифры  = ОбщегоНазначения.ОбщийМодуль("СертификатыНУЦМинцифры");
			ДоверенныеСертификаты = Новый Структура();
			ДоверенныеСертификаты.Вставить("Список", МодульСертификатыНУЦМинцифры.СписокДоверенныхСертификатов());
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимостьРазделов();
	
	МенеджерОборудованияВызовСервераПереопределяемый.ПанельАдминистрированияПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка);
	МенеджерОборудования.ПанельАдминистрированияПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьПроверкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Обсуждения" Тогда
		СтандартнаяОбработка = Ложь;
		Если СуществуетПанельАдминистрированияБСП() Тогда
			ИмяФормыОткрытия = "Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы";
			ОткрытьФорму(
				ИмяФормыОткрытия,
				Новый Структура("Обсуждения", Истина),
				ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокХраненияОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	Если Элемент = Элементы.СрокХраненияПлатежныхОпераций Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииПлатежныхОпераций");
	ИначеЕсли Элемент = Элементы.СрокХраненияОперацийОчередьЧеков Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииОперацийОчередиЧеков");
	ИначеЕсли Элемент = Элементы.СрокХраненияФискальныхОпераций Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииФискальныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользоватьРаспределеннуюФискализациюПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	МенеджерОборудованияКлиент.ПодключениеСистемыВзаимодействия();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	ПараметрыВыполненияКоманды.Вставить("Окно",);
	ПараметрыФормы = Новый Структура();
	
	Если Команда = Команды.ОткрытьРабочиеМеста Тогда
		МенеджерОборудованияКлиент.ОткрытьРабочиеМеста(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ВыбратьРМТекущегоСеанса Тогда
		МенеджерОборудованияКлиент.ВыбратьРМТекущегоСеанса(Неопределено, Неопределено);
	ИначеЕсли Команда = Команды.ОткрытьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьДрайверыОборудования Тогда
		МенеджерОборудованияКлиент.ОткрытьДрайверыОборудования(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьОфлайнОборудование Тогда
		МодульМенеджерОфлайнОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОфлайнОборудованияКлиент");
		МодульМенеджерОфлайнОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьПлатежныеОперации Тогда
		МенеджерОборудованияКлиент.ОткрытьПлатежныеОперации(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьОчередьЧеков Тогда
		МенеджерОборудованияКлиент.ОткрытьОчередьЧеков(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьФискальныеОперации Тогда
		МенеджерОборудованияКлиент.ОткрытьФискальныеОперации(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьПечатьЭтикетокИЦенников Тогда
		ИмяФормыДляОткрытия = "Обработка.ПечатьЭтикетокИЦенниковБПО.Форма.Форма";
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	ИначеЕсли Команда = Команды.ОткрытьШаблоныЭтикетокИЦенников Тогда
		ИмяФормыДляОткрытия = "Справочник.ШаблоныЭтикетокИЦенниковБПО.ФормаСписка";
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОчисткиОпераций(Команда)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ИмяЗадания", "");
	Контекст.Вставить("ИмяРеквизита", "");
	Если Команда = Команды.НастроитьРасписаниеОчисткиОперацийОчередиЧеков Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииОперацийОчередиЧеков";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиОперацийОчередиЧеков";
	ИначеЕсли Команда = Команды.НастроитьРасписаниеОчисткиПлатежныхОпераций Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииПлатежныхОпераций";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиПлатежныхОпераций";
	ИначеЕсли Команда = Команды.НастроитьРасписаниеОчисткиФискальныхОпераций Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииФискальныхОпераций";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиФискальныхОпераций";
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = ЭтаФорма[Контекст.ИмяРеквизита];
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиОпераций", ЭтотОбъект, Контекст);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьОчередь Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииОперацийОчередиЧеков";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьПлатежныеОперации Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииПлатежныхОпераций";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьФискальныеОперации Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииФискальныхОпераций";
	КонецЕсли;
	
	Результат = ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		МодульДлительныеОперацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДлительныеОперацииКлиент");
		МодульДлительныеОперацииКлиент.ОжидатьЗавершение(Результат);
	Иначе
		Если Результат Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры(Команда)
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьУстановкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры_Завершение(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеСертификатов(РезультатОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МенеджерОборудованияКлиент.НачатьВыполнениеКомандыПанелиАдминистрирования(ЭтотОбъект, Команда, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МенеджерОборудования.ВыполнитьКомандуПанелиАдминистрирования(ЭтотОбъект, ПараметрыВыполнения, НаборКонстант);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиОпераций(РасписаниеЗадания, Контекст) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[Контекст.ИмяРеквизита] = РасписаниеЗадания;
	ИзменитьРасписаниеЗадания(Контекст.ИмяЗадания, РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСертификатов(РезультатОперации)
	
	Если РезультатОперации.Результат И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Текст = "";
		Для Каждого Сертификат Из ДоверенныеСертификаты.Список Цикл // см. СертификатыНУЦМинцифрыПовтИсп.НовыйДоверенныйСертификат
			Текст = Текст
				+ СтрШаблон(НСтр("ru = '%1 установлен, действителен до %2'") + Символы.ПС,
				Сертификат.Наименование,
				Формат(Сертификат.ДействителенДо, НСтр("ru = 'ДЛФ=DD'")));
		КонецЦикла;
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Ложь;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Истина;
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта '"),
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			Текст
			);
		Элементы.ДекорацияСертификатыНУЦМинцифрыУстановленыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
		
	Иначе
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Истина;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Ложь;
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта '"),
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			РезультатОперации.ОписаниеОшибки
			);
		Элементы.УстановитьСертификатыНУЦМинцифрыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуществуетПанельАдминистрированияБСП()
	Возврат Метаданные.Обработки.Найти("ПанельАдминистрированияБСП")<>Неопределено;
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
		
		// Сохранения значения константы.
		Если КонстантаИмя <> "" Тогда
			
			КонстантаМенеджер = Константы[КонстантаИмя];
			КонстантаЗначение = НаборКонстант[КонстантаИмя];
			
		КонецЕсли;
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если Метаданные.Константы.Найти(РеквизитПутьКДанным)<>Неопределено Тогда
			КонстантаМенеджер = Константы[РеквизитПутьКДанным];
			КонстантаЗначение = ЭтаФорма[РеквизитПутьКДанным];
		КонецЕсли;
	КонецЕсли;
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ИспользоватьРаспределеннуюФискализацию"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Если Элементы.Найти("ИспользоватьРаспределеннуюФискализацию") <> Неопределено Тогда
			Элементы.ИспользоватьРаспределеннуюФискализацию.Доступность = СистемаВзаимодействия.ИспользованиеДоступно();
		КонецЕсли;
	КонецЕсли;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ПанельАдминистрированияУстановкаДоступности(ЭтаФорма, РеквизитПутьКДанным);
		
	УстановитьНастройкиЗаданий();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРазделов()
	
	Если Не МенеджерОборудованияВызовСервера.ИспользуетсяЧекопечатающиеУстройства() Тогда
		Элементы.ГруппаФискальныеОперации.Видимость = Ложь;
		Элементы.ГруппаОперацииОчередьЧеков.Видимость = Ложь;
	КонецЕсли;
	
	Если Не МенеджерОборудованияВызовСервера.ИспользуетсяПлатежныеСистемы() Тогда
		Элементы.ГруппаПлатежныеОперации.Видимость = Ложь;
	КонецЕсли;
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяОфлайнОборудование() Тогда
		Элементы.ГруппаУправлениеОфлайнОборудование.Видимость = Истина;
	Иначе
		Элементы.ГруппаУправлениеОфлайнОборудование.Видимость = Ложь;
	КонецЕсли;
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяПечатьЭтикетокИЦенников() Тогда
		Элементы.ГруппаПечатьЭтикетокИЦенников.Видимость = Истина;
	Иначе
		Элементы.ГруппаПечатьЭтикетокИЦенников.Видимость = Ложь;
	КонецЕсли;
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяСертификатыНУЦМинцифры()
		И МенеджерОборудования.ИспользуетсяБСП() 
		И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
		МодульСертификатыНУЦМинцифры  = ОбщегоНазначения.ОбщийМодуль("СертификатыНУЦМинцифры");
		Элементы.ГруппаСертификатыНУЦМинцифры.Видимость = МодульСертификатыНУЦМинцифры.ВерсияБСПДопустимаДляУстановкиКорневыхСертификатов();
	Иначе
		Элементы.ГруппаСертификатыНУЦМинцифры.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		МодульРегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
		РегЗадание.Расписание = РасписаниеРегламентногоЗадания;
		РегЗадание.Записать();
	КонецЕсли;
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания)
	
	ИмяПроцедуры = СтрШаблон("МенеджерОборудования.%1", ИмяФоновогоЗадания);
	
	Если МенеджерОборудования.ИспользуетсяБСП() Тогда
		МодульДлительныеОперации     = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
		ПараметрыВыполненияПроцедуры = МодульДлительныеОперации.ПараметрыВыполненияПроцедуры();
		Возврат МодульДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполненияПроцедуры, ИмяПроцедуры);
	Иначе
		Задание = ФоновыеЗадания.Выполнить(ИмяПроцедуры,,,ИмяФоновогоЗадания);
		Задание = Задание.ОжидатьЗавершенияВыполнения(2);
		Возврат Задание.Состояние = СостояниеФоновогоЗадания.Активно ;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Если Задание = Неопределено Тогда
		ТекстРасписания = НСтр("ru = '<Расписание очистки не задано>'");
	Иначе
		ТекстЗадания = НСтр("ru = 'Расписание'");
		
		Если Задание.Использование Тогда
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1: %2'"), ТекстЗадания, Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1 (НЕ АКТИВНО)'"), ТекстЗадания);
		КонецЕсли;
	КонецЕсли;
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеОчисткиОпераций(ИмяЗадания)
	
	Если ИмяЗадания = "ОчисткаИсторииПлатежныхОпераций" Тогда
		СрокХранения = НаборКонстант.СрокХраненияПлатежныхОпераций;
	ИначеЕсли ИмяЗадания = "ОчисткаИсторииОперацийОчередиЧеков" Тогда
		СрокХранения = НаборКонстант.СрокХраненияОперацийОчередиЧеков;
	ИначеЕсли ИмяЗадания = "ОчисткаИсторииФискальныхОпераций" Тогда
		СрокХранения = НаборКонстант.СрокХраненияФискальныхОпераций;
	КонецЕсли;
	
	Если СрокХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя 
		Или Не ЗначениеЗаполнено(СрокХранения) Тогда
		Использование = Ложь;
	Иначе
		Использование = Истина;
	КонецЕсли;
	
	ИзменитьИспользованиеЗадания(ИмяЗадания, Использование);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина И Использование);
		МодульРегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
		РегЗадание.Использование = Использование;
		РегЗадание.Записать();
	КонецЕсли;
	
	Элемент = Элементы[ИмяЗадания];
	Элемент.Доступность = РегЗадание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	Если МенеджерОборудованияВызовСервера.ИспользуетсяПлатежныеСистемы() Тогда
		УстановитьНастройкуЗадания("ОчисткаИсторииПлатежныхОпераций", РасписаниеОчисткиПлатежныхОпераций);
	КонецЕсли;
	Если МенеджерОборудованияВызовСервера.ИспользуетсяЧекопечатающиеУстройства() Тогда
		УстановитьНастройкуЗадания("ОчисткаИсторииФискальныхОпераций", РасписаниеОчисткиФискальныхОпераций);
		УстановитьНастройкуЗадания("ОчисткаИсторииОперацийОчередиЧеков", РасписаниеОчисткиОперацийОчередиЧеков);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуЗадания(ИмяЗадания, РеквизитФормыРасписание)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
	КонецЕсли;
	
	РеквизитФормыРасписание = РегЗадание.Расписание;
	
	Элемент = Элементы[ИмяЗадания];
	Элемент.Доступность = РегЗадание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(
		РегЗадание,
		Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктивностьФоновыхЗаданийНаСервере()
	Результат = Новый Структура();
	
	Отбор = Новый Структура();

	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииПлатежныхОпераций");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьПлатежныеОперации", Массив.Количество()>0);
	
	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииФискальныхОпераций");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьФискальныеОперации", Массив.Количество()>0);

	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииОперацийОчередиЧеков");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьОчередь", Массив.Количество()>0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьДоступностьКнопокОчистка()
	
	АктивностьФоновыхЗаданий = АктивностьФоновыхЗаданийНаСервере();
	Если АктивностьФоновыхЗаданий.ОчиститьОчередь Тогда
		Элементы.ОчиститьОчередь.Доступность = Ложь;
		Элементы.ОчиститьОчередь.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьОчередь.Доступность = Истина;
		Элементы.ОчиститьОчередь.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	Если АктивностьФоновыхЗаданий.ОчиститьПлатежныеОперации Тогда
		Элементы.ОчиститьПлатежныеОперации.Доступность = Ложь;
		Элементы.ОчиститьПлатежныеОперации.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьПлатежныеОперации.Доступность = Истина;
		Элементы.ОчиститьПлатежныеОперации.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	Если АктивностьФоновыхЗаданий.ОчиститьФискальныеОперации Тогда
		Элементы.ОчиститьФискальныеОперации.Доступность = Ложь;
		Элементы.ОчиститьФискальныеОперации.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьФискальныеОперации.Доступность = Истина;
		Элементы.ОчиститьФискальныеОперации.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	
	
	Если АктивностьФоновыхЗаданий.ОчиститьОчередь
		Или АктивностьФоновыхЗаданий.ОчиститьПлатежныеОперации
		Или АктивностьФоновыхЗаданий.ОчиститьФискальныеОперации Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
