
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Недостаточно прав для выполнения операции'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	КартинкиВыполненияЭтаповСвертки = Новый Структура;
	КартинкиВыполненияЭтаповСвертки.Вставить("Пустая"     , Новый Картинка);
	КартинкиВыполненияЭтаповСвертки.Вставить("Выполняется", БиблиотекаКартинок.ДлительнаяОперация48);
	КартинкиВыполненияЭтаповСвертки.Вставить("Выполнено"  , БиблиотекаКартинок.Успешно32);
	КартинкиВыполненияЭтаповСвертки.Вставить("Ошибка"     , БиблиотекаКартинок.Ошибка32);
	
	ПараметрыСвертки = Константы.ПараметрыСверткиИнформационнойБазы.Получить().Получить();
	Если ТипЗнч(ПараметрыСвертки) = Тип("Структура") Тогда
		Объект.ДатаСвертки  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСвертки, "ДатаСвертки");
		ЭтапСверткиЗапущен  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСвертки, "ЭтапСверткиЗапущен");
		ЭтапСверткиЗавершен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСвертки, "ЭтапСверткиЗавершен");
		ИзмененыДокументы   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСвертки, "ИзмененыДокументы");
	КонецЕсли;
	
	Элементы.ГруппаСинхронизацияДанных.Видимость              = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	Элементы.ДекорацияНадписьПовторноеОткрытиеФормы.Видимость = Ложь;
	Элементы.ДекорацияНадписьГотово.Видимость                 = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	
	Если ЭтапСверткиЗапущен > 0 Тогда
		РежимСвертки = 1;
		ВыполняетсяОткрытиеФормы = Истина;
		УстановитьПорядковыйНомерПерехода(3);
		ВыполняетсяОткрытиеФормы = Ложь;
	Иначе
		УстановитьПорядковыйНомерПерехода(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстСообщения = НСтр("ru = 'Завершить работу с помощником?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстСообщения, "ЗакрытьФормуБезПодтверждения");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаСостояниеСвертки И ЭтапСверткиЗавершен <> 3 Тогда
		ПередНачаломСвертки();
		ПодключитьОбработчикОжидания("ОбработчикОжиданияСвертка", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗаполнитьПараметрыСвертки("", Неопределено);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗаполнитьПараметрыСвертки("ДатаСвертки", Объект.ДатаСвертки);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РезервнаяКопияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанныхНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
		МодульОбменДаннымиКлиент.ОткрытьНастройкиСинхронизацииДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграниченияСверткиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаСвертки", Объект.ДатаСвертки);
	
	ОткрытьФорму("Обработка.СверткаИнформационнойБазы.Форма.ОграниченияСвертки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВводаОстатковНажатие(Элемент)
	
	ОткрытьФорму("Документ.ВводОстатков.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналРегистрацииНажатие(Элемент)
	
	ИмяСобытия = НСтр("ru = 'Свертка информационной базы'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("СобытиеЖурналаРегистрации", ИмяСобытия));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхОбъектовНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма.ОсновнаяФорма");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Раздел инициализации переходов помощника
#Область ИнициализацияПереходовПомощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаНачало"           , "СтраницаНавигацииНачало"           , "СтраницаДекорацииПомощника", "СтраницаНачало_ПриОткрытии"      , "СтраницаНачало_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаРежимСвертки"     , "СтраницаНавигацииРежимСвертки"     , "СтраницаДекорацииПомощника", "СтраницаРежимСвертки_ПриОткрытии", "СтраницаРежимСвертки_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаСостояниеСвертки" , "СтраницаНавигацииСостояниеСвертки" , "СтраницаДекорацииПомощника", "СтраницаСостояниеСвертки_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаЗавершениеСвертки", "СтраницаНавигацииЗавершениеСвертки", "СтраницаДекорацииПомощника", "СтраницаЗавершениеСвертки_ПриОткрытии");
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) - Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) - Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) - Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			Выполнить(ИмяПроцедуры);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
КонецПроцедуры

#КонецОбласти // ИнициализацияПереходовПомощника

////////////////////////////////////////////////////////////////////////////////
// Раздел обработчиков событий перехода
#Область ОбработчикиСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаПриветствие"
//
// Параметры:
//
//Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад
&НаКлиенте
Процедура Подключаемый_СтраницаНачало_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПриветствие"
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура Подключаемый_СтраницаНачало_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДатаСвертки) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Дата свертки");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ДатаСвертки",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "РежимСвертки"
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаРежимСвертки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее4.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаОграничения.Видимость = ЕстьОграниченияСвертки();
	
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "РежимСвертки"
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура Подключаемый_СтраницаРежимСвертки_ПриПереходеДалее(Отказ)
	
	ИзменитьДатуНачалаВыгрузкиДокументов(Отказ);
	
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания"
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура Подключаемый_СтраницаСостояниеСвертки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если ЭтапСверткиЗапущен = 3 И ЭтапСверткиЗавершен = 3 Тогда
		// Все сделали.
		ПропуститьСтраницу = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПродолжениеСвертки.Видимость = Ложь;
	Элементы.КомандаДалее3.КнопкаПоУмолчанию = Истина;
	
	// Прорисовать состояние свертки.
	ОтобразитьСостояниеСвертки();
	
	ЗапуститьСвертку = Истина;
	Если ВыполняетсяОткрытиеФормы Тогда
		
		Элементы.ГруппаПродолжениеСвертки.Видимость = Истина;
		Элементы.СтраницыСостоянияСвертки.ТекущаяСтраница = Элементы.СтраницаСверткаОстановлена;
		Элементы.ДекорацияНадписьПовторноеОткрытиеФормы.Видимость = РежимСвертки = 1;
		
		ЗапуститьСвертку = Ложь;
		
	КонецЕсли;
	
	// Проверим текущее состояние.
	Если ЭтапСверткиЗапущен > ЭтапСверткиЗавершен Тогда
		
		ЗапуститьСвертку = Ложь;
		Если РежимСвертки = 0 Тогда
			РежимСвертки = 1;
		КонецЕсли;
		
		ВключитьКартинкуЭтапа(ЭтапСверткиЗапущен, "Ошибка");
		
		Элементы.СтраницыСостоянияСвертки.ТекущаяСтраница = Элементы.СтраницаОшибкиСвертки;
		Элементы.ДекорацияНадписьСледующийЭтапОшибкиСвертки.Видимость = Истина;
		Элементы.ДекорацияНадписьСверткаНевозможнаОшибкиСвертки.Видимость = Ложь;
		
		// Были ошибки. Надо проверить, можно ли сворачивать дальше.
		// Этапы 2 и 3 можно продолжать без проблем.
		// Для этапа 1 нужны специальные проверки.
		Если ЭтапСверткиЗапущен = 1 Тогда
			Если ИзмененыДокументы Тогда
				Элементы.ДекорацияНадписьСледующийЭтапОшибкиСвертки.Видимость = Ложь;
				Элементы.ДекорацияНадписьСверткаНевозможнаОшибкиСвертки.Видимость = Истина;
				Элементы.КомандаДалее3.Доступность = Ложь;
			Иначе
				ЭтапСверткиЗапущен = 0;
				УдалитьДокументыВводаОстатков = Истина;
			КонецЕсли;
		Иначе
			ЭтапСверткиЗапущен = ЭтапСверткиЗапущен - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗапуститьСвертку Тогда
		Возврат;
	КонецЕсли;
	
	ПередНачаломСвертки();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСвертка", 0.1, Истина);
	
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаЗавершение"
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаЗавершениеСвертки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.ДекорацияНадписьПовторноеОткрытиеФормы.Видимость = Ложь;
	Элементы.ДекорацияНадписьГотово.Видимость = Истина;
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийПерехода

////////////////////////////////////////////////////////////////////////////////
// Процедуры связанные с обменами данными
#Область ПроцедурыСвязанныеСОбменамиДанными

&НаСервере
Процедура ИзменитьДатуНачалаВыгрузкиДокументов(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	БГУ2.Ссылка,
	|	БГУ2.ДатаНачалаВыгрузкиДокументов,
	|	БГУ2.ПометкаУдаления
	|ПОМЕСТИТЬ УзлыОбмена
	|ИЗ
	|	ПланОбмена.ОбменБАБГУ2 КАК БГУ2
	|ГДЕ
	|	БГУ2.Ссылка <> &ЭтотУзелБГУ2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УФ.Ссылка,
	|	УФ.ДатаНачалаВыгрузкиДокументов,
	|	УФ.ПометкаУдаления
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК УФ
	|ГДЕ
	|	УФ.Ссылка <> &ЭтотУзелУФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыОбмена.Ссылка
	|ИЗ
	|	УзлыОбмена КАК УзлыОбмена
	|ГДЕ
	|	УзлыОбмена.ДатаНачалаВыгрузкиДокументов <= &ДатаСвертки");
	
	Запрос.УстановитьПараметр("ДатаСвертки" , Объект.ДатаСвертки);
	Запрос.УстановитьПараметр("ЭтотУзелБГУ2", ПланыОбмена.ОбменБАБГУ2.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУФ"  , ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Текст = НСтр("ru = 'Не удалось заблокировать %1 по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.Ссылка);
			Обработки.СверткаИнформационнойБазы.ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), Выборка.Ссылка, Отказ);
			Прервать;
		КонецПопытки;
		
		УзелОбмена = Выборка.Ссылка.ПолучитьОбъект();
		УзелОбмена.ДатаНачалаВыгрузкиДокументов = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Объект.ДатаСвертки, "День", 1);
		
		Попытка
			УзелОбмена.ДополнительныеСвойства.Вставить("Загрузка", Истина);
			УзелОбмена.Записать();
		Исключение
			Текст = НСтр("ru = 'Не удалось записать %1 по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.Ссылка);
			Обработки.СверткаИнформационнойБазы.ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), Выборка.Ссылка, Отказ);
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти // ПроцедурыСвязанныеСОбменамиДанными

////////////////////////////////////////////////////////////////////////////////
// Процедуры связанные с выполнением свертки
#Область ПроцедурыСвязанныеСВыполнениемСвертки

&НаКлиенте
Процедура ПередНачаломСвертки()
	
	Если ЭтапСверткиЗавершен = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыСостоянияСвертки.ТекущаяСтраница = Элементы.СтраницаВыполняетсяСвертка;
	Элементы.ДекорацияНадписьПовторноеОткрытиеФормы.Видимость = Ложь;
	
	Если РежимСвертки = 0 Тогда
		Элементы.КомандаДалее3.Видимость = Ложь;
	Иначе
		Элементы.КомандаДалее3.Доступность = Ложь;
	КонецЕсли;
	Элементы.КомандаОтмена3.Доступность = Ложь;
	
	ОтобразитьСостояниеСвертки();
	
	Если ЭтапСверткиЗапущен = 0 Тогда
		ЭтапСверткиЗапущен = 1;
	ИначеЕсли ЭтапСверткиЗапущен = ЭтапСверткиЗавершен Тогда
		ЭтапСверткиЗапущен = ЭтапСверткиЗапущен + 1;
	КонецЕсли;
	
	ОтобразитьСостояниеСвертки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСвертка()
	
	Если ЭтапСверткиЗавершен = 3 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьСостояниеСвертки();
	
	Если РежимСвертки = 0 И ЭтапСверткиЗапущен = 1 Тогда
		
		// Последовательное выполнение этапов.
		Для Счетчик = 1 По 3 Цикл
			ЭтапСверткиЗапущен = Счетчик;
			ОтобразитьСостояниеСвертки();
			ВыполнитьЭтапСвертки();
		КонецЦикла;
		
	Иначе
		ВыполнитьЭтапСвертки();
	КонецЕсли;
	
	ОтобразитьСостояниеСвертки();
	
	Элементы.СтраницыСостоянияСвертки.ТекущаяСтраница         = Элементы.СтраницаСверткаОстановлена;
	Элементы.ДекорацияНадписьПовторноеОткрытиеФормы.Видимость = РежимСвертки = 1;
	
	Элементы.КомандаДалее3.Доступность                        = РежимСвертки = 1;
	Элементы.КомандаОтмена3.Доступность                       = Истина;
	Элементы.Справка3.Доступность                             = Истина;
	
	Если ЭтапСверткиЗавершен = 3 Тогда
		КомандаДалее(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЭтапСвертки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьПараметрыСвертки("ЭтапСверткиЗапущен", ЭтапСверткиЗапущен);
	
	Менеджер = Обработки.СверткаИнформационнойБазы;
	
	Если ЭтапСверткиЗапущен = 1 Тогда
		// На первом этапе запоминаем дату свертки.
		ЗаполнитьПараметрыСвертки("ДатаСвертки", Объект.ДатаСвертки);
		Менеджер.СоздатьДокументыФормирующиеОстатки(Объект.ДатаСвертки, УдалитьДокументыВводаОстатков);
	ИначеЕсли ЭтапСверткиЗапущен = 2 Тогда
		Менеджер.УдалитьОбъектыИнформационнойБазы(Объект.ДатаСвертки)
	ИначеЕсли ЭтапСверткиЗапущен = 3 Тогда
		Менеджер.ПровестиДокументыФормирующиеОстатки(Объект.ДатаСвертки);
	КонецЕсли;
	
	ЭтапСверткиЗавершен = ЭтапСверткиЗапущен;
	ЗаполнитьПараметрыСвертки("ЭтапСверткиЗавершен", ЭтапСверткиЗавершен);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСвертки(ИмяПараметра, ЗначениеПараметра)
	
	Если ИмяПараметра = "" Тогда
		// Очистка состояния свертки.
		Константы.ПараметрыСверткиИнформационнойБазы.Установить(Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыСвертки = Константы.ПараметрыСверткиИнформационнойБазы.Получить().Получить();
	Если ТипЗнч(ПараметрыСвертки) <> Тип("Структура") Тогда
		ПараметрыСвертки = Новый Структура;
	КонецЕсли;
	ПараметрыСвертки.Вставить(ИмяПараметра, ЗначениеПараметра);
	Константы.ПараметрыСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(ПараметрыСвертки));
	
КонецПроцедуры

#КонецОбласти // ПроцедурыСвязанныеСВыполнениемСвертки

////////////////////////////////////////////////////////////////////////////////
// Ограничения свертки
#Область ОграниченияСвертки

&НаСервере
Функция ЕстьОграниченияСвертки()
	
	Возврат Обработки.СверткаИнформационнойБазы.ПроверитьНаличиеОграниченийСвертки(Объект.ДатаСвертки);
	
КонецФункции

#КонецОбласти // ОграниченияСвертки

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаКлиенте
Процедура ОтобразитьСостояниеСвертки()
	
	Для Счетчик = ЭтапСверткиЗавершен + 1 По 3 Цикл
		ВключитьКартинкуЭтапа(Счетчик, "Пустая");
	КонецЦикла;
	
	Если ЭтапСверткиЗавершен > 0 Тогда
		Для Счетчик = 1 По ЭтапСверткиЗавершен Цикл
			ВключитьКартинкуЭтапа(Счетчик, "Выполнено");
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтапСверткиЗапущен > ЭтапСверткиЗавершен Тогда
		ВключитьКартинкуЭтапа(ЭтапСверткиЗапущен, "Выполняется");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьКартинкуЭтапа(НомерЭтапа, КлючКартинки)
	
	Элементы["ГруппаЭтап" + НомерЭтапа].ПодчиненныеЭлементы["ДекорацияКартинкаЭтап" + НомерЭтапа].Картинка = КартинкиВыполненияЭтаповСвертки[КлючКартинки];
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
