#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Процедура СоздатьДокументыФормирующиеОстатки(ДатаСвертки, ПовторныйЗапуск = Ложь) Экспорт
	
	Если ПовторныйЗапуск Тогда
		
		// Механизм создания документов, формирующих остатки, запускается повторно после ошибки.
		// Необходимо удалить документы, созданные на предыдущем этапе.
		// Удаляются те документы, у которых комментарий равен Комментарий_СформированСверткойБазы().
		
		УдаляемыеДокументы = ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие_Удаление());
		Для Каждого ДокументСсылка Из УдаляемыеДокументы Цикл
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Удалить();
		КонецЦикла;
		
	Иначе
		
		// Механизм создания документов, формирующих остатки, запускается первый раз
		// или свертка уже была успешно выполнена до этого.
		// Необходимо очистить комментарии документов, формирующих остатки, которые были созданы предыдущими свертками,
		// что бы они не были восприняты программой как новые документы, формирующие остатки.
		
		ДокументыПредыдущихПериодов = ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие_Исключение());
		Для Каждого ДокументСсылка Из ДокументыПредыдущихПериодов Цикл
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Комментарий = "";
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Данные = ПолучитьДанныеДляДокументовФормирующихОстатки(ДатаСвертки);
	
	ОтраженоИзменениеДокументов = Ложь;
	
	СоздатьДокументыВводОстатковТоваровНаСкладах(Данные);
	СоздатьДокументыРазмещенияТоваровПоМестамХранения(Данные);
	СоздатьДокументыУстановкаЦенНоменклатуры(Данные);
	СоздатьДокументыВводОстатковДенежныхСредствВКассах(Данные);
	ОбработатьДокументыОприходованиеТоваров(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыСпецификацииКДоговору(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыЗаказПоставщику(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыНазначениеВрача(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыТребованиеОтделения(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыЗаказНаПеремещение(Данные, ОтраженоИзменениеДокументов);
	ОбработатьДокументыФормулярныйСписокНоменклатуры(Данные, ОтраженоИзменениеДокументов);
	
КонецПроцедуры

Процедура УдалитьОбъектыИнформационнойБазы(ДатаСвертки) Экспорт
	
	// Получение документов, которые не нужно удалять,
	// т.к. они используются для формирования остатков.
	НеудаляемыеДокументы = ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие_Исключение());
	
	// Получение документов, у которых нужно отменить проведение и хранить только в сохраненном виде,
	// для использования в качестве ссылок документов оприходования Партий.
	ПартияОбразующиеДокументы = ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие_Сохраненные());
	
	УдалитьЗаписиРегистровНакопления(ДатаСвертки);
	УдалитьЗаписиРегистровСведений(ДатаСвертки, НеудаляемыеДокументы);
	УдалитьДокументы(ДатаСвертки, НеудаляемыеДокументы);
	ОтменитьПроведениеДокументов(ПартияОбразующиеДокументы);
	УдалитьЗадачи(ДатаСвертки);
	УдалитьБизнесПроцессы(ДатаСвертки);
	
КонецПроцедуры

Процедура ПровестиДокументыФормирующиеОстатки(ДатаСвертки) Экспорт
	
	// Получение документов, которые нужно провести, для формирования остатков.
	ДокументыФормирующиеОстатки = ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие_Проведение());
	Для каждого ДокументСсылка Из ДокументыФормирующиеОстатки Цикл
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Текст = НСтр("ru = 'Документ проведен: %1'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
				ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст,, ДокументОбъект.Ссылка);
				
			Исключение
				
				Текст = НСтр("ru = 'Не удалось провести документ: %1'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
				ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
				
			КонецПопытки;
			
		Иначе
			
			Текст = НСтр("ru = 'Не удалось провести документ: %1'");
			Пояснение = НСтр("ru = 'Поля документа не заполнены.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, Пояснение, ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьНаличиеОграниченийСвертки(ДатаСвертки) Экспорт
	
	Данные = ПолучитьДанныеДляПечатиОграниченийСвертки(ДатаСвертки, Истина);
	Для Каждого КлючИЗначение Из Данные Цикл
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	ДанныеРасшифровкиОбъект = Неопределено;
	
	Данные = ПолучитьДанныеДляПечатиОграниченийСвертки(ПараметрыОтчета.ДатаСвертки);
	
	ИдентификаторМакета = Метаданные.Обработки.СверткаИнформационнойБазы.Макеты.ОграниченияСвертки.Имя;
	СхемаКомпоновкиДанных = ПолучитьМакет(ИдентификаторМакета);
	
	// Удаление несуществующих ограничений.
	СхемыОграничений = СхемаКомпоновкиДанных.ВложенныеСхемыКомпоновкиДанных;
	Граница = СхемыОграничений.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		СхемаОграничения = СхемыОграничений[Граница - Индекс];
		Если Не Данные.Свойство(СхемаОграничения.Имя) Тогда
			СхемыОграничений.Удалить(СхемаОграничения);
		КонецЕсли;
	КонецЦикла;
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	УстановитьМакетОформленияВРежимеТакси(Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровкиОбъект);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Данные, ДанныеРасшифровкиОбъект, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Помещение расшифровки во временное хранилище, для дальнейшего использования в форме.
	ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект);
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
	
	ОтчетыБольничнаяАптека.ОбработкаРезультатаОтчета(ИдентификаторМакета, Результат);
	
	РезультатФормированияОтчета = Новый Структура;
	РезультатФормированияОтчета.Вставить("Результат", Результат);
	РезультатФормированияОтчета.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	ПоместитьВоВременноеХранилище(РезультатФормированияОтчета, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных для документов формирующих остатки
#Область ПолучениеДанныхДляДокументовФормирующихОстатки

Функция ПолучитьДанныеДляДокументовФормирующихОстатки(ДатаСвертки)
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("СхемаЗапроса"        , Новый СхемаЗапроса);
	ОписаниеДанных.Вставить("ИдентификаторыДанных", Новый Структура);
	
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОстаткиТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОстаткиТоваровБезМестХранения());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаАналитикаУчетаНоменклатурыПоОстаткам());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОстаткиСебестоимостиТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаВнешниеПоступленияТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаПодразделенияИОтделенияСкладов());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОстаткиЗаказов());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОстаткиЗаказовНаПеремещение());
	
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаТоварыНаСкладах()              , КлючДанных_ТоварыНаСкладах());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаТоварыПоМестамХранения()       , КлючДанных_ТоварыПоМестамХранения());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаЦеныНоменклатуры()             , КлючДанных_ЦеныНоменклатуры());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаДенежныеСредстваВКассах()      , КлючДанных_ДенежныеСредстваВКассах());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаДокументыОприходованияТоваров(), КлючДанных_ДокументыОприходованияТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаСпецификацииКДоговору()        , КлючДанных_СпецификацияКДоговору());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаЗаказыПоставщикам()            , КлючДанных_ЗаказПоставщику());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаНазначенияВрачей()             , КлючДанных_НазначениеВрача());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаТребованияОтделений()          , КлючДанных_ТребованиеОтделения());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаЗаказыНаПеремещения()          , КлючДанных_ЗаказНаПеремещение());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаФормулярныеСпискиНоменклатуры(), КлючДанных_ФормулярныйСписокНоменклатуры());
	
	Запрос = Новый Запрос(ОписаниеДанных.СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатков"   , КонецДня(ДатаСвертки));
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("ДатаСвертки", ДатаСвертки);
	Для Каждого КлючИЗначение Из ОписаниеДанных.ИдентификаторыДанных Цикл
		Данные.Вставить(КлючИЗначение.Ключ, РезультатыЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапроса, ИмяТаблицы = "")
	
	ПакетЗапросов        = ОписаниеДанных.СхемаЗапроса.ПакетЗапросов;
	ИдентификаторыДанных = ОписаниеДанных.ИдентификаторыДанных;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	Для Каждого ДобавляемыйЗапрос Из СхемаЗапроса.ПакетЗапросов Цикл
		
		ТипЗапроса = ТипЗнч(ДобавляемыйЗапрос);
		ЗапросОбъект = ПакетЗапросов.Добавить(ТипЗапроса);
		Если ТипЗапроса = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			ЗапросОбъект.УстановитьТекстЗапроса(ДобавляемыйЗапрос.ПолучитьТекстЗапроса());
			
			Если ПустаяСтрока(ДобавляемыйЗапрос.ТаблицаДляПомещения) Тогда
				
				Если ПустаяСтрока(ИмяТаблицы) Тогда
					ВызватьИсключение НСтр("ru = 'Не задано имя основной таблицы'");
				КонецЕсли;
				Если ИдентификаторыДанных.Свойство(ИмяТаблицы) Тогда
					ВызватьИсключение СтрЗаменить(НСтр("ru = 'Добавляемая таблица (%1) уже существует'"), "%1", ИмяТаблицы);
				КонецЕсли;
				
				// Для получения индекса запроса отнимаем 2, так как первый запрос в пакете пустой.
				ИдентификаторыДанных.Вставить(ИмяТаблицы, ПакетЗапросов.Количество() - 2);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ЗапросОбъект.ИмяТаблицы = ДобавляемыйЗапрос.ИмяТаблицы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОстаткиТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)  КАК РазделУчета,
	|	ОстаткиНаСкладах.Организация                                             КАК Организация,
	|	ОстаткиНаСкладах.Склад                                                   КАК Склад,
	|	ОстаткиНаСкладах.ИсточникФинансирования                                  КАК ИсточникФинансирования,
	|	ОстаткиНаСкладах.МестоХранения                                           КАК МестоХранения,
	|	ОстаткиНаСкладах.Номенклатура                                            КАК Номенклатура,
	|	ОстаткиНаСкладах.СерияНоменклатуры                                       КАК СерияНоменклатуры,
	|	ОстаткиНаСкладах.Партия                                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА ОстаткиНаСкладах.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                    КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаПартий = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям)
	|			ТОГДА ОстаткиНаСкладах.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                    КАК ПартияДляСебестоимости,
	|	ОстаткиНаСкладах.КоличествоОстаток                                       КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОстатков,) КАК ОстаткиНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО
	|			ВидыНоменклатуры.Ссылка = ОстаткиНаСкладах.Номенклатура.ВидНоменклатуры
	|ГДЕ
	|	ОстаткиНаСкладах.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях)  КАК РазделУчета,
	|	ОстаткиВОтделениях.Организация                                             КАК Организация,
	|	ОстаткиВОтделениях.Склад                                                   КАК Склад,
	|	ОстаткиВОтделениях.ИсточникФинансирования                                  КАК ИсточникФинансирования,
	|	ОстаткиВОтделениях.МестоХранения                                           КАК МестоХранения,
	|	ОстаткиВОтделениях.Номенклатура                                            КАК Номенклатура,
	|	ОстаткиВОтделениях.СерияНоменклатуры                                       КАК СерияНоменклатуры,
	|	ОстаткиВОтделениях.Партия                                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерийВОтделениях = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА ОстаткиВОтделениях.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                      КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаПартийВОтделениях = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям)
	|			ТОГДА ОстаткиВОтделениях.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                      КАК ПартияДляСебестоимости,
	|	ОстаткиВОтделениях.КоличествоОстаток                                       КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладахВОтделениях.Остатки(&ГраницаОстатков,) КАК ОстаткиВОтделениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО
	|			ВидыНоменклатуры.Ссылка = ОстаткиВОтделениях.Номенклатура.ВидНоменклатуры
	|ГДЕ
	|	ОстаткиВОтделениях.КоличествоОстаток > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиТоваровБезМестХранения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиТоваров.РазделУчета                        КАК РазделУчета,
	|	ОстаткиТоваров.Организация                        КАК Организация,
	|	ОстаткиТоваров.Склад                              КАК Склад,
	|	ОстаткиТоваров.ИсточникФинансирования             КАК ИсточникФинансирования,
	|	ОстаткиТоваров.Номенклатура                       КАК Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры                  КАК СерияНоменклатуры,
	|	ОстаткиТоваров.Партия                             КАК Партия,
	|	ОстаткиТоваров.СерияНоменклатурыДляСебестоимости  КАК СерияНоменклатурыДляСебестоимости,
	|	ОстаткиТоваров.ПартияДляСебестоимости             КАК ПартияДляСебестоимости,
	|	СУММА(ОстаткиТоваров.КоличествоОстаток)           КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиТоваровБезМестХранения
	|ИЗ
	|	ОстаткиТоваров КАК ОстаткиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.РазделУчета,
	|	ОстаткиТоваров.Организация,
	|	ОстаткиТоваров.Склад,
	|	ОстаткиТоваров.ИсточникФинансирования,
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры,
	|	ОстаткиТоваров.Партия,
	|	ОстаткиТоваров.СерияНоменклатурыДляСебестоимости,
	|	ОстаткиТоваров.ПартияДляСебестоимости
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАналитикаУчетаНоменклатурыПоОстаткам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиТоваров.Номенклатура       КАК Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ОстаткиТоваров.Партия             КАК Партия
	|ПОМЕСТИТЬ АналитикаУчетаНоменклатурыПоОстаткам
	|ИЗ
	|	ОстаткиТоваров КАК ОстаткиТоваров
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиСебестоимостиТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиСебестоимостиТоваров.РазделУчета                     КАК РазделУчета,
	|	КлючиВидаУчета.Организация                                  КАК Организация,
	|	КлючиВидаУчета.Склад                                        КАК Склад,
	|	КлючиВидаУчета.ИсточникФинансирования                       КАК ИсточникФинансирования,
	|	КлючиУчетаНоменклатуры.Номенклатура                         КАК Номенклатура,
	|	КлючиУчетаНоменклатуры.СерияНоменклатуры                    КАК СерияНоменклатуры,
	|	КлючиУчетаНоменклатуры.Партия                               КАК Партия,
	|	ОстаткиСебестоимостиТоваров.КоличествоОстаток               КАК КоличествоОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьОстаток                КАК СтоимостьОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьБезНДСОстаток          КАК СтоимостьБезНДСОстаток,
	|	ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток         КАК СуммаДопРасходовОстаток,
	|	ОстаткиСебестоимостиТоваров.СуммаДопРасходовБезНДСОстаток   КАК СуммаДопРасходовБезНДСОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьРеглОстаток            КАК СтоимостьРеглОстаток
	|ПОМЕСТИТЬ ОстаткиСебестоимостиТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОстатков,) КАК ОстаткиСебестоимостиТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК КлючиВидаУчета
	|		ПО
	|			КлючиВидаУчета.КлючАналитики = ОстаткиСебестоимостиТоваров.АналитикаВидаУчета
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиУчетаНоменклатуры
	|		ПО
	|			КлючиУчетаНоменклатуры.КлючАналитики = ОстаткиСебестоимостиТоваров.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ОстаткиСебестоимостиТоваров.КоличествоОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия,
	|	Склад,
	|	ИсточникФинансирования,
	|	Организация,
	|	РазделУчета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВнешниеПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)  КАК РазделУчета,
	|	ВнешниеПоступленияТоваров.Организация                                    КАК Организация,
	|	ВнешниеПоступленияТоваров.ИсточникФинансирования                         КАК ИсточникФинансирования,
	|	ВнешниеПоступленияТоваров.Номенклатура                                   КАК Номенклатура,
	|	ВнешниеПоступленияТоваров.СерияНоменклатуры                              КАК СерияНоменклатуры,
	|	ВнешниеПоступленияТоваров.Поставщик                                      КАК Поставщик,
	|	ВнешниеПоступленияТоваров.ДокументПоступления                            КАК ДокументПоступления,
	|	ВнешниеПоступленияТоваров.КоличествоОборот                               КАК КоличествоОприходования,
	|	ВнешниеПоступленияТоваров.ДокументПоступления.МоментВремени              КАК ПорядокПоступлений
	|ПОМЕСТИТЬ ВнешниеПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.ДанныеПоступленийДляПроектаПоМониторингуЦен.Обороты(, &ГраницаОстатков, , Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВнешниеПоступленияТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	ИсточникФинансирования,
	|	Организация,
	|	РазделУчета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодразделенияИОтделенияСкладов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПодразделенияИОтделенияСкладов.Склад                    КАК Склад,
	|	МАКСИМУМ(ПодразделенияИОтделенияСкладов.Подразделение)  КАК Подразделение,
	|	МАКСИМУМ(ПодразделенияИОтделенияСкладов.Отделение)      КАК Отделение
	|ПОМЕСТИТЬ ПодразделенияИОтделенияСкладов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОстаткиТоваров.Склад                                    КАК Склад,
	|		ПодразделенияОрганизаций.Ссылка                         КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.ОтделенияОрганизаций.ПустаяСсылка)  КАК Отделение
	|	ИЗ
	|		ОстаткиТоваров КАК ОстаткиТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|			ПО
	|				ПодразделенияОрганизаций.ОсновнойСклад = ОстаткиТоваров.Склад
	|	ГДЕ
	|		НЕ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОстаткиТоваров.Склад                                        КАК Склад,
	|		ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)  КАК Подразделение,
	|		ОтделенияОрганизаций.Ссылка                                 КАК Отделение
	|	ИЗ
	|		ОстаткиТоваров КАК ОстаткиТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				Справочник.ОтделенияОрганизаций КАК ОтделенияОрганизаций
	|			ПО
	|				ОтделенияОрганизаций.ОсновнойСклад = ОстаткиТоваров.Склад
	|	ГДЕ
	|		НЕ ОтделенияОрганизаций.Ссылка ЕСТЬ NULL
	|	) КАК ПодразделенияИОтделенияСкладов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияИОтделенияСкладов.Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиЗаказов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.ЗаказПоставщику        КАК ЗаказПоставщику,
	|	ОстаткиЗаказов.КодСтроки              КАК КодСтроки,
	|	ОстаткиЗаказов.Номенклатура           КАК Номенклатура,
	|	ОстаткиЗаказов.Спецификация           КАК Спецификация,
	|	ОстаткиЗаказов.КодСтрокиСпецификации  КАК КодСтрокиСпецификации,
	|	ОстаткиЗаказов.ПоСпецификацииОстаток  КАК ПоСпецификацииОстаток,
	|	ОстаткиЗаказов.ЗаказаноОстаток        КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ОстаткиЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ГраницаОстатков, ) КАК ОстаткиЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиЗаказовНаПеремещение()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотыЗаказовНаПеремещение.Регистратор         КАК Регистратор,
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|	ОборотыЗаказовНаПеремещение.ЗаказаноОборот      КАК ЗаказаноОборот
	|ПОМЕСТИТЬ ОборотыЗаказовНаПеремещение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(, &ГраницаОстатков, Регистратор) КАК ОборотыЗаказовНаПеремещение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение     КАК ЗаказНаПеремещение,
	|	ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры      КАК ОтборНоменклатуры,
	|	КлючиОтбораНоменклатуры.Номенклатура               КАК Номенклатура,
	|	КлючиОтбораНоменклатуры.ДействующиеВеществаМНН     КАК ДействующиеВеществаМНН,
	|	КлючиОтбораНоменклатуры.ТорговоеНаименование       КАК ТорговоеНаименование,
	|	КлючиОтбораНоменклатуры.ФормаВыпуска               КАК ФормаВыпуска,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
	|	ОстаткиЗаказовНаПеремещение.КодСтроки              КАК КодСтроки,
	|	СУММА(ОстаткиЗаказовНаПеремещение.ЗаказаноОборот)  КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ОстаткиЗаказовНаПеремещение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|		ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|		ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|		ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|		ОборотыЗаказовНаПеремещение.ЗаказаноОборот      КАК ЗаказаноОборот
	|	ИЗ
	|		ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|	ГДЕ
	|		ОборотыЗаказовНаПеремещение.Регистратор = ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|		ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|		ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|		ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|		ОборотыЗаказовНаПеремещение.ЗаказаноОборот      КАК ЗаказаноОборот
	|	ИЗ
	|		ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|	ГДЕ
	|		ОборотыЗаказовНаПеремещение.Регистратор <> ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|		И ОборотыЗаказовНаПеремещение.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|	) КАК ОстаткиЗаказовНаПеремещение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК КлючиОтбораНоменклатуры
	|		ПО
	|			КлючиОтбораНоменклатуры.КлючАналитики = ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры
	|	
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение,
	|	ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры,
	|	КлючиОтбораНоменклатуры.Номенклатура,
	|	КлючиОтбораНоменклатуры.ДействующиеВеществаМНН,
	|	КлючиОтбораНоменклатуры.ТорговоеНаименование,
	|	КлючиОтбораНоменклатуры.ФормаВыпуска,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения,
	|	ОстаткиЗаказовНаПеремещение.КодСтроки
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиЗаказовНаПеремещение.ЗаказаноОборот) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровБезМестХранения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ                                                                         КАК Порядок,
	|	ОстаткиТоваровБезМестХранения.РазделУчета                                     КАК РазделУчета,
	|	ОстаткиТоваровБезМестХранения.Организация                                     КАК Организация,
	|	ОстаткиТоваровБезМестХранения.Склад                                           КАК Склад,
	|	ОстаткиТоваровБезМестХранения.ИсточникФинансирования                          КАК ИсточникФинансирования,
	|	ОстаткиТоваровБезМестХранения.Номенклатура                                    КАК Номенклатура,
	|	ОстаткиТоваровБезМестХранения.СерияНоменклатуры                               КАК СерияНоменклатуры,
	|	ОстаткиТоваровБезМестХранения.Партия                                          КАК Партия,
	|	ОстаткиТоваровБезМестХранения.Партия.Поставщик                                КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровБезМестХранения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|			И НЕ ПодразделенияИОтделенияСкладов.Подразделение ЕСТЬ NULL
	|			ТОГДА ПодразделенияИОтделенияСкладов.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ                                                                         КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровБезМестХранения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях)
	|			И НЕ ПодразделенияИОтделенияСкладов.Отделение ЕСТЬ NULL
	|			ТОГДА ПодразделенияИОтделенияСкладов.Отделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОтделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ                                                                         КАК Отделение,
	|	ОстаткиТоваровБезМестХранения.КоличествоОстаток                               КАК КоличествоОстаток,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.КоличествоОстаток, 0)                    КАК КоличествоОстатокСебестоимость,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьОстаток, 0)
	|		+ ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток, 0)        КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьОстаток, 0)
	|		+ ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток, 0)
	|		- ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьБезНДСОстаток, 0)
	|		- ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СуммаДопРасходовБезНДСОстаток, 0)  КАК СтоимостьНДСОстаток,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьРеглОстаток, 0)                 КАК СтоимостьРеглОстаток
	|ПОМЕСТИТЬ ТоварыНаСкладах
	|ИЗ
	|	ОстаткиТоваровБезМестХранения КАК ОстаткиТоваровБезМестХранения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОстаткиСебестоимостиТоваров КАК ОстаткиСебестоимостиТоваров
	|		ПО
	|			ОстаткиСебестоимостиТоваров.РазделУчета              = ОстаткиТоваровБезМестХранения.РазделУчета
	|			И ОстаткиСебестоимостиТоваров.Организация            = ОстаткиТоваровБезМестХранения.Организация
	|			И ОстаткиСебестоимостиТоваров.Склад                  = ОстаткиТоваровБезМестХранения.Склад
	|			И ОстаткиСебестоимостиТоваров.ИсточникФинансирования = ОстаткиТоваровБезМестХранения.ИсточникФинансирования
	|			И ОстаткиСебестоимостиТоваров.Номенклатура           = ОстаткиТоваровБезМестХранения.Номенклатура
	|			И ОстаткиСебестоимостиТоваров.СерияНоменклатуры      = ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости
	|			И ОстаткиСебестоимостиТоваров.Партия                 = ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПодразделенияИОтделенияСкладов КАК ПодразделенияИОтделенияСкладов
	|		ПО
	|			ПодразделенияИОтделенияСкладов.Склад = ОстаткиТоваровБезМестХранения.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Расчетные остатки товаров, распределенные по внешним поступлениям.
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Порядок                                         КАК Порядок,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров)
	|	КОНЕЦ                                                           КАК ТипОперации,
	|	ТоварыНаСкладах.Организация                                     КАК Организация,
	|	ТоварыНаСкладах.Склад                                           КАК Склад,
	|	ТоварыНаСкладах.ИсточникФинансирования                          КАК ИсточникФинансирования,
	|	ТоварыНаСкладах.Номенклатура                                    КАК Номенклатура,
	|	ТоварыНаСкладах.СерияНоменклатуры                               КАК СерияНоменклатуры,
	|	ТоварыНаСкладах.Партия                                          КАК Партия,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыНаСкладах.Контрагент ЕСТЬ NULL
	|			ТОГДА ТоварыНаСкладах.Контрагент
	|		ИНАЧЕ ЕСТЬNULL(ВнешниеПоступленияТоваров.Поставщик,
	|			ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ                                                           КАК Контрагент,
	|	ТоварыНаСкладах.Подразделение                                   КАК Подразделение,
	|	ТоварыНаСкладах.Отделение                                       КАК Отделение,
	|	ИСТИНА                                                          КАК ЦенаВключаетНДС,
	|	ТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВнешниеПоступленияТоваров.КоличествоОприходования, 0)  КАК КоличествоОприходования,
	|	ТоварыНаСкладах.КоличествоОстатокСебестоимость                  КАК КоличествоОстатокСебестоимость,
	|	ТоварыНаСкладах.СтоимостьОстаток                                КАК СтоимостьОстаток,
	|	ТоварыНаСкладах.СтоимостьНДСОстаток                             КАК СтоимостьНДСОстаток,
	|	ТоварыНаСкладах.СтоимостьРеглОстаток                            КАК СтоимостьРеглОстаток,
	|	ВнешниеПоступленияТоваров.ПорядокПоступлений                    КАК ПорядокПоступлений
	|ИЗ
	|	ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВнешниеПоступленияТоваров КАК ВнешниеПоступленияТоваров
	|		ПО
	|			ТоварыНаСкладах.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			И ВнешниеПоступленияТоваров.РазделУчета            = ТоварыНаСкладах.РазделУчета
	|			И ВнешниеПоступленияТоваров.Организация            = ТоварыНаСкладах.Организация
	|			И ВнешниеПоступленияТоваров.ИсточникФинансирования = ТоварыНаСкладах.ИсточникФинансирования
	|			И ВнешниеПоступленияТоваров.Номенклатура           = ТоварыНаСкладах.Номенклатура
	|			И ВнешниеПоступленияТоваров.СерияНоменклатуры      = ТоварыНаСкладах.СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Расчетные остатки товаров, оприходованные не внешними поступлениями.
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Порядок                             КАК Порядок,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров)
	|	КОНЕЦ                                               КАК ТипОперации,
	|	ТоварыНаСкладах.Организация                         КАК Организация,
	|	ТоварыНаСкладах.Склад                               КАК Склад,
	|	ТоварыНаСкладах.ИсточникФинансирования              КАК ИсточникФинансирования,
	|	ТоварыНаСкладах.Номенклатура                        КАК Номенклатура,
	|	ТоварыНаСкладах.СерияНоменклатуры                   КАК СерияНоменклатуры,
	|	ТоварыНаСкладах.Партия                              КАК Партия,
	|	ЕСТЬNULL(ТоварыНаСкладах.Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))  КАК Контрагент,
	|	ТоварыНаСкладах.Подразделение                       КАК Подразделение,
	|	ТоварыНаСкладах.Отделение                           КАК Отделение,
	|	ИСТИНА                                              КАК ЦенаВключаетНДС,
	|	ТоварыНаСкладах.КоличествоОстаток                   КАК КоличествоОстаток,
	|	0                                                   КАК КоличествоОприходования,
	|	ТоварыНаСкладах.КоличествоОстатокСебестоимость      КАК КоличествоОстатокСебестоимость,
	|	ТоварыНаСкладах.СтоимостьОстаток                    КАК СтоимостьОстаток,
	|	ТоварыНаСкладах.СтоимостьНДСОстаток                 КАК СтоимостьНДСОстаток,
	|	ТоварыНаСкладах.СтоимостьРеглОстаток                КАК СтоимостьРеглОстаток,
	|	ДАТАВРЕМЯ(1,1,1)                                    КАК ПорядокПоступлений
	|ИЗ
	|	ТоварыНаСкладах КАК ТоварыНаСкладах
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладах.Порядок,
	|	Организация,
	|	Склад,
	|	ИсточникФинансирования,
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия УБЫВ,
	|	ПорядокПоступлений УБЫВ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыПоМестамХранения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиТоваров.РазделУчета                                   КАК РазделУчета,
	|	ОстаткиТоваров.Организация                                   КАК Организация,
	|	ОстаткиТоваров.Склад                                         КАК Склад,
	|	ОстаткиТоваров.ИсточникФинансирования                        КАК ИсточникФинансирования,
	|	ОстаткиТоваров.МестоХранения                                 КАК МестоХраненияНовое,
	|	ОстаткиТоваров.Номенклатура                                  КАК Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры                             КАК СерияНоменклатуры,
	|	ОстаткиТоваров.Партия                                        КАК Партия,
	|	ЕСТЬNULL(ПодразделенияИОтделенияСкладов.Отделение,
	|		ЗНАЧЕНИЕ(Справочник.ОтделенияОрганизаций.ПустаяСсылка))  КАК Отделение,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииРазмещенияПоМестамХраненияВОтделении.РазмещениеПоМестамХранения)  КАК ХозяйственнаяОперация,
	|	ОстаткиТоваров.КоличествоОстаток                             КАК Количество
	|ИЗ
	|	ОстаткиТоваров КАК ОстаткиТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПодразделенияИОтделенияСкладов КАК ПодразделенияИОтделенияСкладов
	|		ПО
	|			ПодразделенияИОтделенияСкладов.Склад = ОстаткиТоваров.Склад
	|ГДЕ
	|	ОстаткиТоваров.МестоХранения <> ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделУчета,
	|	Организация,
	|	Склад
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЦеныНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаУчетаНоменклатурыПоОстаткам.Номенклатура       КАК Номенклатура,
	|	АналитикаУчетаНоменклатурыПоОстаткам.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	АналитикаУчетаНоменклатурыПоОстаткам.Партия             КАК Партия,
	|	СрезЦенНоменклатуры.ВидЦены                             КАК ВидЦены,
	|	СрезЦенНоменклатуры.Упаковка                            КАК ЕдиницаИзмерения,
	|	СрезЦенНоменклатуры.Валюта                              КАК Валюта,
	|	СрезЦенНоменклатуры.Цена                                КАК Цена
	|ИЗ
	|	АналитикаУчетаНоменклатурыПоОстаткам КАК АналитикаУчетаНоменклатурыПоОстаткам
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ГраницаОстатков, ) КАК СрезЦенНоменклатуры
	|		ПО
	|			СрезЦенНоменклатуры.Номенклатура        = АналитикаУчетаНоменклатурыПоОстаткам.Номенклатура
	|			И СрезЦенНоменклатуры.СерияНоменклатуры = АналитикаУчетаНоменклатурыПоОстаткам.СерияНоменклатуры
	|			И СрезЦенНоменклатуры.Партия            = АналитикаУчетаНоменклатурыПоОстаткам.Партия
	|ГДЕ
	|	ЕСТЬNULL(СрезЦенНоменклатуры.Цена, 0) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДенежныеСредстваВКассах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке)  КАК ТипОперации,
	|	ДенежныеСредстваВКассахККМОстатки.Организация                                                   КАК Организация,
	|	ДенежныеСредстваВКассахККМОстатки.КассаККМ                                                      КАК КассаККМ,
	|	ДенежныеСредстваВКассахККМОстатки.СуммаОстаток                                                  КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ГраницаОстатков, ) КАК ДенежныеСредстваВКассахККМОстатки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыОприходованияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаУчетаНоменклатурыПоОстаткам.Партия.ДокументОприходования  КАК ДокументОприходования
	|ИЗ
	|	АналитикаУчетаНоменклатурыПоОстаткам КАК АналитикаУчетаНоменклатурыПоОстаткам
	|ГДЕ
	|	ЕСТЬNULL(АналитикаУчетаНоменклатурыПоОстаткам.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСпецификацииКДоговору()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.Спецификация                                                   КАК Спецификация,
	|	ОстаткиЗаказов.КодСтрокиСпецификации                                          КАК КодСтроки,
	|	ОстаткиЗаказов.Номенклатура                                                   КАК Номенклатура,
	|	ЕСТЬNULL(Товары.НоменклатураПоставщика,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка))                КАК НоменклатураПоставщика,
	|	СУММА(ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток)  КАК Количество,
	|	СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Количество, 0) <> 0 И ОстаткиЗаказов.КодСтрокиСпецификации <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|						ТОГДА (ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток) * Товары.Сумма / Товары.Количество
	|					ИНАЧЕ Товары.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ)                                                                        КАК Сумма,
	|	Товары.СтавкаНДС                                                              КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Количество, 0) <> 0 И ОстаткиЗаказов.КодСтрокиСпецификации <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|						ТОГДА (ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток) * Товары.СуммаНДС / Товары.Количество
	|					ИНАЧЕ Товары.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ)                                                                        КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Количество, 0) <> 0 И ОстаткиЗаказов.КодСтрокиСпецификации <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|						ТОГДА (ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток) * Товары.СуммаСНДС / Товары.Количество
	|					ИНАЧЕ Товары.СуммаСНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ)                                                                        КАК СуммаСНДС,
	|	Товары.Штрихкод                                                               КАК Штрихкод
	|ИЗ
	|	ОстаткиЗаказов КАК ОстаткиЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.СпецификацияКДоговору.Товары КАК Товары
	|		ПО
	|			Товары.Ссылка = ОстаткиЗаказов.Спецификация
	|			И Товары.КодСтроки = ОстаткиЗаказов.КодСтрокиСпецификации
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗаказов.Спецификация,
	|	ОстаткиЗаказов.Спецификация.МоментВремени,
	|	ОстаткиЗаказов.КодСтрокиСпецификации,
	|	ОстаткиЗаказов.Номенклатура,
	|	ЕСТЬNULL(Товары.НоменклатураПоставщика,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)),
	|	Товары.СтавкаНДС,
	|	Товары.Штрихкод
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиЗаказов.ПоСпецификацииОстаток + ОстаткиЗаказов.ЗаказаноОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиЗаказов.Спецификация.МоментВремени,
	|	КодСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.ЗаказПоставщику                                     КАК ЗаказПоставщику,
	|	ОстаткиЗаказов.КодСтроки                                           КАК КодСтроки,
	|	ОстаткиЗаказов.Номенклатура                                        КАК Номенклатура,
	|	ЕСТЬNULL(Товары.НоменклатураПоставщика,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка))     КАК НоменклатураПоставщика,
	|	ОстаткиЗаказов.ЗаказаноОстаток                                     КАК Количество,
	|	ВЫБОР
	|		КОГДА ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|			ТОГДА ОстаткиЗаказов.ЗаказаноОстаток * Товары.Сумма / Товары.Количество
	|		ИНАЧЕ Товары.Сумма
	|	КОНЕЦ                                                              КАК Сумма,
	|	Товары.СтавкаНДС                                                   КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|			ТОГДА ОстаткиЗаказов.ЗаказаноОстаток * Товары.СуммаНДС / Товары.Количество
	|		ИНАЧЕ Товары.СуммаНДС
	|	КОНЕЦ                                                              КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиЗаказов.ЗаказаноОстаток <> Товары.Количество
	|			ТОГДА ОстаткиЗаказов.ЗаказаноОстаток * Товары.СуммаСНДС / Товары.Количество
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ                                                              КАК СуммаСНДС,
	|	ЛОЖЬ                                                               КАК Отменено,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка)  КАК ПричинаОтмены,
	|	Товары.ДатаПоступления                                             КАК ДатаПоступления,
	|	Товары.КодСтрокиСпецификации                                       КАК КодСтрокиСпецификации,
	|	Товары.Штрихкод                                                    КАК Штрихкод
	|ИЗ
	|	ОстаткиЗаказов КАК ОстаткиЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаказПоставщику.Товары КАК Товары
	|		ПО
	|			Товары.Ссылка = ОстаткиЗаказов.ЗаказПоставщику
	|			И Товары.КодСтроки = ОстаткиЗаказов.КодСтроки
	|ГДЕ
	|	ОстаткиЗаказов.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ОстаткиЗаказов.ЗаказаноОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику,
	|	КодСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНазначенияВрачей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиНазначенийВрачей.НазначениеВрача                      КАК НазначениеВрача,
	|	ОстаткиНазначенийВрачей.АналитикаОписанияОтбораНоменклатуры  КАК АналитикаОписанияОтбораНоменклатуры,
	|	КлючиОтбораНоменклатуры.Номенклатура                         КАК Номенклатура,
	|	КлючиОтбораНоменклатуры.ДействующиеВеществаМНН               КАК ДействующиеВеществаМНН,
	|	КлючиОтбораНоменклатуры.ТорговоеНаименование                 КАК ТорговоеНаименование,
	|	КлючиОтбораНоменклатуры.ФормаВыпуска                         КАК ФормаВыпуска,
	|	ОстаткиНазначенийВрачей.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ОстаткиНазначенийВрачей.ИсточникФинансирования               КАК ИсточникФинансирования,
	|	ОстаткиНазначенийВрачей.НазначеноОстаток                     КАК НазначеноОстаток,
	|	ОстаткиНазначенийВрачей.КОформлениюОстаток                   КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ОстаткиНазначенийВрачей
	|ИЗ
	|	РегистрНакопления.РецептурныеНазначенияВрачей.Остатки(&ГраницаОстатков, ) КАК ОстаткиНазначенийВрачей
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК КлючиОтбораНоменклатуры
	|		ПО
	|			КлючиОтбораНоменклатуры.КлючАналитики = ОстаткиНазначенийВрачей.АналитикаОписанияОтбораНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНазначенийВрачей.НазначениеВрача                      КАК НазначениеВрача,
	|	ОстаткиНазначенийВрачей.Номенклатура                         КАК Номенклатура,
	|	ОстаткиНазначенийВрачей.ДействующиеВеществаМНН               КАК ДействующиеВеществаМНН,
	|	ОстаткиНазначенийВрачей.ТорговоеНаименование                 КАК ТорговоеНаименование,
	|	ОстаткиНазначенийВрачей.ФормаВыпуска                         КАК ФормаВыпуска,
	|	ОстаткиНазначенийВрачей.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ОстаткиНазначенийВрачей.ИсточникФинансирования               КАК ИсточникФинансирования,
	|	Назначения.КлючСтроки                                        КАК КлючСтроки,
	|	Назначения.УИДНазначения                                     КАК УИДНазначения,
	|	РасписанияНазначений.ДатаИсполнения                          КАК ДатаИсполнения,
	|	РасписанияНазначений.Количество                              КАК КоличествоНазначено,
	|	РасписанияНазначений.КоличествоИсполнено                     КАК КоличествоИсполнено,
	|	РасписанияНазначений.КоличествоОтменено                      КАК КоличествоОтменено,
	|	ОстаткиНазначенийВрачей.КОформлениюОстаток                   КАК КоличествоКСписанию
	|ИЗ
	|	ОстаткиНазначенийВрачей КАК ОстаткиНазначенийВрачей
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.НазначениеВрача.ЛС_Назначения КАК Назначения
	|		ПО
	|			Назначения.Ссылка                   = ОстаткиНазначенийВрачей.НазначениеВрача
	|			И Назначения.Номенклатура           = ОстаткиНазначенийВрачей.Номенклатура
	|			И Назначения.ДействующиеВеществаМНН = ОстаткиНазначенийВрачей.ДействующиеВеществаМНН
	|			И Назначения.ТорговоеНаименование   = ОстаткиНазначенийВрачей.ТорговоеНаименование
	|			И Назначения.ФормаВыпуска           = ОстаткиНазначенийВрачей.ФормаВыпуска
	|			И Назначения.ЕдиницаИзмерения       = ОстаткиНазначенийВрачей.ЕдиницаИзмерения
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.НазначениеВрача.РасписаниеНазначения КАК РасписанияНазначений
	|		ПО
	|			РасписанияНазначений.Ссылка = Назначения.Ссылка
	|			И РасписанияНазначений.КлючСтроки = Назначения.КлючСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НазначениеВрача,
	|	КлючСтроки,
	|	ДатаИсполнения УБЫВ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТребованияОтделений()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение                      КАК ТребованиеОтделения,
	|	ОстаткиЗаказовНаПеремещение.КодСтроки                               КАК КодСтроки,
	|	ОстаткиЗаказовНаПеремещение.Номенклатура                            КАК Номенклатура,
	|	ОстаткиЗаказовНаПеремещение.ДействующиеВеществаМНН                  КАК ДействующиеВеществаМНН,
	|	ОстаткиЗаказовНаПеремещение.ТорговоеНаименование                    КАК ТорговоеНаименование,
	|	ОстаткиЗаказовНаПеремещение.ФормаВыпуска                            КАК ФормаВыпуска,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения                        КАК ЕдиницаИзмерения,
	|	ОстаткиЗаказовНаПеремещение.ЗаказаноОстаток                         КАК КоличествоВЕдиницахИзмерения,
	|	Товары.КлючСвязиПациентов                                           КАК КлючСвязиПациентов,
	|	ЛОЖЬ                                                                КАК Отменено,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыТребованийОтделений.ПустаяСсылка)  КАК ПричинаОтмены,
	|	Товары.СтатусУказанияПациентов                                      КАК СтатусУказанияПациентов,
	|	Товары.ДатаПоступления                                              КАК ДатаПоступления,
	|	Товары.Пациент                                                      КАК Пациент
	|ИЗ
	|	ОстаткиЗаказовНаПеремещение КАК ОстаткиЗаказовНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ТребованиеОтделения.Товары КАК Товары
	|		ПО
	|			Товары.Ссылка = ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение
	|			И Товары.КодСтроки = ОстаткиЗаказовНаПеремещение.КодСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыНаПеремещения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение      КАК ЗаказНаПеремещение,
	|	ОстаткиЗаказовНаПеремещение.КодСтроки               КАК КодСтроки,
	|	ОстаткиЗаказовНаПеремещение.Номенклатура            КАК Номенклатура,
	|	ОстаткиЗаказовНаПеремещение.ДействующиеВеществаМНН  КАК ДействующиеВеществаМНН,
	|	ОстаткиЗаказовНаПеремещение.ТорговоеНаименование    КАК ТорговоеНаименование,
	|	ОстаткиЗаказовНаПеремещение.ФормаВыпуска            КАК ФормаВыпуска,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	ОстаткиЗаказовНаПеремещение.ЗаказаноОстаток         КАК КоличествоВЕдиницахИзмерения,
	|	ЛОЖЬ                                                КАК Отменено
	|ИЗ
	|	ОстаткиЗаказовНаПеремещение КАК ОстаткиЗаказовНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ЗаказНаПеремещение.Товары КАК Товары
	|		ПО
	|			Товары.Ссылка = ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение
	|			И Товары.КодСтроки = ОстаткиЗаказовНаПеремещение.КодСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаФормулярныеСпискиНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ФормулярныеСпискиНоменклатуры.Ссылка  КАК ФормулярныйСписокНоменклатуры
	|ИЗ
	|	Документ.ФормулярныйСписокНоменклатуры КАК ФормулярныеСпискиНоменклатуры
	|ГДЕ
	|	ФормулярныеСпискиНоменклатуры.ДатаОкончания > &ДатаОстатков
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхДляДокументовФормирующихОстатки

////////////////////////////////////////////////////////////////////////////////
// Создание и обработка документов формирующих остатки
#Область СозданиеИОбработкаДокументовФормирующихОстатки

Процедура СоздатьДокументыВводОстатковТоваровНаСкладах(Данные)
	
	ТоварыНаСкладах = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ТоварыНаСкладах());
	Если ТоварыНаСкладах = Неопределено Или ТоварыНаСкладах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ТипОперации, Организация, Склад, ИсточникФинансирования";
	ТоварыНаСкладах.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ТоварыНаСкладах.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС());
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ТоварыНаСкладах.НайтиСтроки(КлючДокумента);
		
		ДокументыВводаОстатков            = Новый Соответствие;
		ТекущийТовар                      = Неопределено;
		ТекущаяСерия                      = Неопределено;
		ТекущаяПартия                     = Неопределено;
		КоличествоОстаток                 = 0;
		КоличествоОстатокПоСуммовомуУчету = 0;
		СтоимостьОстаток                  = 0;
		СтоимостьНДСОстаток               = 0;
		СтоимостьРеглОстаток              = 0;
		
		Для Каждого Товар Из Товары Цикл
			
			// Инициализация расчетных показателей, при обработке новой номенклатуры.
			Если Товар.Номенклатура <> ТекущийТовар
			 Или Товар.СерияНоменклатуры <> ТекущаяСерия
			 Или Товар.Партия <> ТекущаяПартия Тогда
				ТекущийТовар                      = Товар.Номенклатура;
				ТекущаяСерия                      = Товар.СерияНоменклатуры;
				ТекущаяПартия                     = Товар.Партия;
				КоличествоОстаток                 = Товар.КоличествоОстаток;
				КоличествоОстатокПоСуммовомуУчету = Товар.КоличествоОстатокСебестоимость;
				СтоимостьОстаток                  = Товар.СтоимостьОстаток;
				СтоимостьНДСОстаток               = Товар.СтоимостьНДСОстаток;
				СтоимостьРеглОстаток              = Товар.СтоимостьРеглОстаток;
			КонецЕсли;
			
			// Начало механизма расчета количественных и суммовых показателей,
			// учитывая настройки политики ведения учета по партиям.
			
			Если КоличествоОстаток <= 0 Или КоличествоОстатокПоСуммовомуУчету <= 0 Тогда
				
				// Весь количественный остаток распределен по поставщикам (партионный учет не ведется),
				// все остальное количество поступлений текущего товара вышло из оборота ранее.
				// В случае если партионный учет ведется, тогда условие должно всегда возвращать Ложь,
				// т.к. остатки, которые меньше-равны нулю исключаются в тексте запроса.
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Товар.Контрагент) И Товар.Партия = Справочники.ПартииНоменклатуры.ПустаяСсылка() Тогда
				Количество = Мин(КоличествоОстаток, Товар.КоличествоОприходования);
			Иначе
				Количество = КоличествоОстаток;
			КонецЕсли;
			КоличествоОстаток = КоличествоОстаток - Количество;
			
			Если КоличествоОстатокПоСуммовомуУчету > Количество Тогда
				Сумма     = Количество * СтоимостьОстаток / КоличествоОстатокПоСуммовомуУчету;
				СуммаСНДС = Сумма;
				СуммаНДС  = Количество * СтоимостьНДСОстаток / КоличествоОстатокПоСуммовомуУчету;
				СуммаРегл = Количество * СтоимостьРеглОстаток / КоличествоОстатокПоСуммовомуУчету;
			Иначе
				Сумма     = СтоимостьОстаток;
				СуммаСНДС = Сумма;
				СуммаНДС  = СтоимостьНДСОстаток;
				СуммаРегл = СтоимостьРеглОстаток;
			КонецЕсли;
			КоличествоОстатокПоСуммовомуУчету = КоличествоОстатокПоСуммовомуУчету - Количество;
			СтоимостьОстаток                  = СтоимостьОстаток - Сумма;
			СтоимостьНДСОстаток               = СтоимостьНДСОстаток - СуммаНДС;
			СтоимостьРеглОстаток              = СтоимостьРеглОстаток - СуммаРегл;
			
			// Начало механизма создания и кэширования документов "Ввод остатков".
			ДокументОбъект = ДокументыВводаОстатков.Получить(Товар.Контрагент);
			Если ДокументОбъект = Неопределено
			 Или ДокументОбъект.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков() Тогда
				
				Если ДокументОбъект <> Неопределено Тогда
					Попытка
						ДокументОбъект.Товары.Свернуть("Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, Коэффициент, Штрихкод, СтатусУказанияСерий, СтатусУказанияПартий",
							"КоличествоВЕдиницахИзмерения, Сумма, СуммаНДС, СуммаСНДС, Количество, ЦенаПроизводителя, СуммаРегл, НДСРегл");
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Текст = НСтр("ru = 'Не удалось записать документ: %1'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
						ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
					КонецПопытки;
				КонецЕсли;
				
				ДокументОбъект = Документы.ВводОстатков.СоздатьДокумент();
				ЗаполнитьШапкуДокумента(ДокументОбъект, Товар, Данные.ДатаСвертки);
				ДокументыВводаОстатков.Вставить(Товар.Контрагент, ДокументОбъект);
				
				ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ДокументОбъект));
				
			КонецЕсли;
			
			// Начало механизма заполнения табличной части документа "Ввод остатков".
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
			
			СтрокаТовараВДокументе.Количество = Количество;
			СтрокаТовараВДокументе.Сумма      = ?(Сумма     > 0, Сумма    , 0);
			СтрокаТовараВДокументе.СуммаСНДС  = ?(СуммаСНДС > 0, СуммаСНДС, 0);
			СтрокаТовараВДокументе.СуммаНДС   = ?(СуммаНДС  > 0, СуммаНДС , 0);
			СтрокаТовараВДокументе.СуммаРегл  = ?(СуммаРегл > 0, СуммаРегл, 0);
			
			СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовараВДокументе, СтруктураДействий, Неопределено);
			
			Если СтрокаТовараВДокументе.СуммаНДС = 0
			 Или Не ЗначениеЗаполнено(СтрокаТовараВДокументе.СтавкаНДС) Тогда
				СтрокаТовараВДокументе.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ДокументыВводаОстатков Цикл
			
			ДокументОбъект = КлючИЗначение.Значение;
			
			Попытка
				ДокументОбъект.Товары.Свернуть("Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, Коэффициент, Штрихкод, СтатусУказанияСерий, СтатусУказанияПартий",
					"КоличествоВЕдиницахИзмерения, Сумма, СуммаНДС, СуммаСНДС, Количество, ЦенаПроизводителя, СуммаРегл, НДСРегл");
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Текст = НСтр("ru = 'Не удалось записать документ: %1'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
				ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Сформированы документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ВводОстатков.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура СоздатьДокументыРазмещенияТоваровПоМестамХранения(Данные)
	
	ТоварыПоМестамХранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ТоварыПоМестамХранения());
	Если ТоварыПоМестамХранения = Неопределено Или ТоварыПоМестамХранения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "РазделУчета, Организация, Склад, Отделение, ХозяйственнаяОперация";
	ТоварыПоМестамХранения.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ТоварыПоМестамХранения.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ТоварыПоМестамХранения.НайтиСтроки(КлючДокумента);
		
		Если КлючДокумента.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях Тогда
			ДокументОбъект = Документы.РазмещениеТоваровПоМестамХраненияВОтделении.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.РазмещениеТоваровПоМестамХранения.СоздатьДокумент();
		КонецЕсли;
		ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
		
		ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ДокументОбъект));
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
		
		Для Каждого Товар Из Товары Цикл
			
			Если ДокументОбъект.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков() Тогда
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Текст = НСтр("ru = 'Не удалось записать документ: %1'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
				КонецПопытки;
				
				Если КлючДокумента.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях Тогда
					ДокументОбъект = Документы.РазмещениеТоваровПоМестамХраненияВОтделении.СоздатьДокумент();
				Иначе
					ДокументОбъект = Документы.РазмещениеТоваровПоМестамХранения.СоздатьДокумент();
				КонецЕсли;
				ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
				
			КонецЕсли;
			
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовараВДокументе, СтруктураДействий, Неопределено);
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось записать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Сформированы документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.РазмещениеТоваровПоМестамХранения.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
	Текст = НСтр("ru = 'Сформированы документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.РазмещениеТоваровПоМестамХраненияВОтделении.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура СоздатьДокументыУстановкаЦенНоменклатуры(Данные)
	
	ЦеныНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ЦеныНоменклатуры());
	Если ЦеныНоменклатуры = Неопределено Или ЦеныНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ВидЦены";
	ЦеныНоменклатуры.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ЦеныНоменклатуры.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ЦеныНоменклатуры.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
		ДокументОбъект.Согласован = Истина;
		
		ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ДокументОбъект));
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
		
		Для Каждого Товар Из Товары Цикл
			
			Если ДокументОбъект.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков() Тогда
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Текст = НСтр("ru = 'Не удалось записать документ: %1'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
				КонецПопытки;
				
				ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
				ДокументОбъект.Согласован = Истина;
				
			КонецЕсли;
			
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовараВДокументе, СтруктураДействий, Неопределено);
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось записать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Сформированы документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.УстановкаЦенНоменклатуры.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура СоздатьДокументыВводОстатковДенежныхСредствВКассах(Данные)
	
	ДенежныеСредстваВКассах = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ДенежныеСредстваВКассах());
	Если ДенежныеСредстваВКассах = Неопределено Или ДенежныеСредстваВКассах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ТипОперации, Организация";
	ДенежныеСредстваВКассах.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ДенежныеСредстваВКассах.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		КассыККМ = ДенежныеСредстваВКассах.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = Документы.ВводОстатков.СоздатьДокумент();
		ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
		
		Для Каждого Касса Из КассыККМ Цикл
			
			Если ДокументОбъект.КассыККМ.Количество() >= КоличествоСтрокВДокументеВводаОстатков() Тогда
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Текст = НСтр("ru = 'Не удалось записать документ: %1'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
				КонецПопытки;
				
				ДокументОбъект = Документы.ВводОстатков.СоздатьДокумент();
				ЗаполнитьШапкуДокумента(ДокументОбъект, КлючДокумента, Данные.ДатаСвертки);
				
			КонецЕсли;
			
			СтрокаВДокументе = ДокументОбъект.КассыККМ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВДокументе, Касса);
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось записать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Сформированы документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ВводОстатков.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыОприходованиеТоваров(Данные, ОтраженоИзменениеДокументов)
	
	ДокументыОприходованияТоваров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ДокументыОприходованияТоваров());
	Если ДокументыОприходованияТоваров = Неопределено Или ДокументыОприходованияТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументОприходования Из ДокументыОприходованияТоваров Цикл
		
		ДокументОбъект = ДокументОприходования.ДокументОприходования.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "Сохранять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
			ДокументОбъект.ЗаказПоставщику = Неопределено;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Товары") Тогда
			ДокументОбъект.Товары.Очистить();
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ оприходования товаров: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы оприходования товаров'");
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыСпецификацииКДоговору(Данные, ОтраженоИзменениеДокументов)
	
	СпецификацииКДоговору = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_СпецификацияКДоговору());
	Если СпецификацииКДоговору = Неопределено Или СпецификацииКДоговору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "Спецификация";
	СпецификацииКДоговору.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = СпецификацииКДоговору.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = СпецификацииКДоговору.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = КлючДокумента.Спецификация.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого Товар Из Товары Цикл
			
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовараВДокументе, СтруктураДействий, Неопределено);
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.СпецификацияКДоговору.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыЗаказПоставщику(Данные, ОтраженоИзменениеДокументов)
	
	ЗаказыПоставщикам = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ЗаказПоставщику());
	Если ЗаказыПоставщикам = Неопределено Или ЗаказыПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ЗаказПоставщику";
	ЗаказыПоставщикам.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ЗаказыПоставщикам.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ЗаказыПоставщикам.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = КлючДокумента.ЗаказПоставщику.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого Товар Из Товары Цикл
			
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовараВДокументе, СтруктураДействий, Неопределено);
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ЗаказПоставщику.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыНазначениеВрача(Данные, ОтраженоИзменениеДокументов)
	
	НазначенияВрачей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_НазначениеВрача());
	Если НазначенияВрачей = Неопределено Или НазначенияВрачей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "НазначениеВрача";
	НазначенияВрачей.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = НазначенияВрачей.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Назначения = НазначенияВрачей.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = КлючДокумента.НазначениеВрача.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		ДокументОбъект.ЛС_Назначения.Очистить();
		ДокументОбъект.РасписаниеНазначения.Очистить();
		
		КлючНазначения = Неопределено;
		КоличествоКСписанию = 0;
		
		Для Каждого Назначение Из Назначения Цикл
			
			Если Назначение.КлючСтроки <> КлючНазначения Тогда
				КлючНазначения = Назначение.КлючСтроки;
				КоличествоКСписанию = Назначение.КоличествоКСписанию;
			КонецЕсли;
			
			КоличествоОсталосьИсполнить = Назначение.КоличествоНазначено - Назначение.КоличествоИсполнено - Назначение.КоличествоОтменено;
			КоличествоОсталосьСписать = Мин(КоличествоКСписанию, Назначение.КоличествоИсполнено);
			КоличествоНазначено = КоличествоОсталосьИсполнить + КоличествоОсталосьСписать;
			КоличествоКСписанию = КоличествоКСписанию - КоличествоОсталосьСписать;
			КоличествоКСписанию = ?(КоличествоКСписанию > 0, КоличествоКСписанию, 0);
			
			Если КоличествоНазначено > 0 Тогда
				
				СтрокаВДокументе = ДокументОбъект.РасписаниеНазначения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВДокументе, Назначение);
				
				СтрокаВДокументе.Количество             = КоличествоНазначено;
				СтрокаВДокументе.КоличествоИсполнено    = КоличествоОсталосьСписать;
				СтрокаВДокументе.КоличествоОтменено     = 0;
				СтрокаВДокументе.КоличествоДозИсполнено = 1;
				
			КонецЕсли;
			
			Отбор = Новый Структура("КлючСтроки", КлючНазначения);
			Если ДокументОбъект.РасписаниеНазначения.НайтиСтроки(Отбор).Количество() > 0
			   И ДокументОбъект.ЛС_Назначения.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокаВДокументе = ДокументОбъект.ЛС_Назначения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВДокументе, Назначение);
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.НазначениеВрача.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыТребованиеОтделения(Данные, ОтраженоИзменениеДокументов)
	
	ТребованияОтделений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ТребованиеОтделения());
	Если ТребованияОтделений = Неопределено Или ТребованияОтделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ТребованиеОтделения";
	ТребованияОтделений.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ТребованияОтделений.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ТребованияОтделений.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = КлючДокумента.ТребованиеОтделения.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого Товар Из Товары Цикл
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
		КонецЦикла;
		
		// Удаление пациентов, требование по которым выполнено
		// (нет остатков требований по товару для пациента).
		Пациенты = ДокументОбъект.Пациенты;
		Граница = Пациенты.Количество() - 1;
		Для Индекс = 0 По Граница Цикл
			СтрокаПациентаВДокументе = Пациенты[Граница - Индекс];
			Отбор = Новый Структура("КлючСвязиПациентов", СтрокаПациентаВДокументе.КлючСвязиПациентов);
			Если ДокументОбъект.Товары.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Пациенты.Удалить(Граница - Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ТребованиеОтделения.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыЗаказНаПеремещение(Данные, ОтраженоИзменениеДокументов)
	
	ЗаказыНаПеремещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ЗаказНаПеремещение());
	Если ЗаказыНаПеремещения = Неопределено Или ЗаказыНаПеремещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКлючаДокумента = "ЗаказНаПеремещение";
	ЗаказыНаПеремещения.Индексы.Добавить(ПоляКлючаДокумента);
	
	ЗначенияКлючейДокументов = ЗаказыНаПеремещения.Скопировать(, ПоляКлючаДокумента);
	ЗначенияКлючейДокументов.Свернуть(ПоляКлючаДокумента);
	
	Для Каждого ЗначенияКлючаДокумента Из ЗначенияКлючейДокументов Цикл
		
		КлючДокумента = Новый Структура(ПоляКлючаДокумента);
		ЗаполнитьЗначенияСвойств(КлючДокумента, ЗначенияКлючаДокумента);
		Товары = ЗаказыНаПеремещения.НайтиСтроки(КлючДокумента);
		
		ДокументОбъект = КлючДокумента.ЗаказНаПеремещение.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого Товар Из Товары Цикл
			СтрокаТовараВДокументе = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараВДокументе, Товар);
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ЗаказНаПеремещение.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

Процедура ОбработатьДокументыФормулярныйСписокНоменклатуры(Данные, ОтраженоИзменениеДокументов)
	
	ФормулярныеСпискиНоменклатуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, КлючДанных_ФормулярныйСписокНоменклатуры());
	Если ФормулярныеСпискиНоменклатуры = Неопределено Или ФормулярныеСпискиНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФормулярныйСписокНоменклатуры Из ФормулярныеСпискиНоменклатуры Цикл
		
		ДокументОбъект = ФормулярныйСписокНоменклатуры.ФормулярныйСписокНоменклатуры.ПолучитьОбъект();
		ЗаполнитьШапкуДокумента(ДокументОбъект,,, "НеУдалять");
		ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Текст = НСтр("ru = 'Не удалось обработать документ: %1'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
			ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Текст = НСтр("ru = 'Обработаны документы %1'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Метаданные.Документы.ФормулярныйСписокНоменклатуры.Представление());
	ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
	
КонецПроцедуры

#КонецОбласти // СозданиеИОбработкаДокументовФормирующихОстатки

////////////////////////////////////////////////////////////////////////////////
// Удаление объектов информационной базы
#Область УдалениеОбъектовИнформационнойБазы

Процедура УдалитьЗаписиРегистровНакопления(ДатаСвертки)
	
	ТекстЗапросаШаблон = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	#Регистр КАК Регистр
	|ГДЕ
	|	Регистр.Период <= &ДатаОстатков
	|";
	
	ВидРегистраОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	
	МетаданныеОбъектов = Метаданные.РегистрыНакопления;
	Для Каждого МетаданныеОбъекта Из МетаданныеОбъектов Цикл
		
		Текст = НСтр("ru = 'Начало операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		
		Если МетаданныеОбъекта.ВидРегистра = ВидРегистраОбороты Тогда
			ИспользованиеИтогов = Ложь;
			Для Каждого ИзмерениеРегистра Из МетаданныеОбъекта.Измерения Цикл
				Если ИзмерениеРегистра.ИспользованиеВИтогах Тогда
					ИспользованиеИтогов = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ИспользованиеИтогов = Истина;
		КонецЕсли;
		
		Если ИспользованиеИтогов Тогда
			Менеджер.УстановитьИспользованиеИтогов(Ложь);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "#Регистр", МетаданныеОбъекта.ПолноеИмя());
		ПредыдущееКоличествоВыборки = 0;
		Пока Истина Цикл
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаСвертки));
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			
			ТекущееКоличествоВыборки = Выборка.Количество();
			Если ТекущееКоличествоВыборки < 10000 И ТекущееКоличествоВыборки = ПредыдущееКоличествоВыборки Тогда
				// Предотвращение зацикливания.
				Прервать;
			Иначе
				ПредыдущееКоличествоВыборки = ТекущееКоличествоВыборки;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					Набор = Менеджер.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Набор.ОбменДанными.Загрузка = Истина;
					Набор.Записать();
				Исключение
					Текст = НСтр("ru = 'Не удалось выполнить удаление записей регистра накопления:'");
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), Набор);
					Если ИспользованиеИтогов Тогда
						Менеджер.УстановитьИспользованиеИтогов(Истина);
					КонецЕсли;
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ИспользованиеИтогов Тогда
			Менеджер.УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
		
		Текст = НСтр("ru = 'Окончание операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиРегистровСведений(ДатаСвертки, НеудаляемыеДокументы)
	
	ТекстЗапросаШаблон = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	#Регистр КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор НЕ В (&НеудаляемыеДокументы)
	|	И &УсловиеПоПериоду
	|";
	
	РежимЗаписиПодчинениеРегистратору    = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	ПериодичностьРегистраНепериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	МетаданныеОбъектов = Метаданные.РегистрыСведений;
	Для Каждого МетаданныеОбъекта Из МетаданныеОбъектов Цикл
		
		Если МетаданныеОбъекта.РежимЗаписи <> РежимЗаписиПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = НСтр("ru = 'Начало операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "#Регистр", МетаданныеОбъекта.ПолноеИмя());
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений = ПериодичностьРегистраНепериодический Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "Регистр.Регистратор.Дата <= &ДатаОстатков");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "Регистр.Период <= &ДатаОстатков");
		КонецЕсли;
		
		ПредыдущееКоличествоВыборки = 0;
		Пока Истина Цикл
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДатаОстатков"        , КонецДня(ДатаСвертки));
			Запрос.УстановитьПараметр("НеудаляемыеДокументы", НеудаляемыеДокументы);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			
			ТекущееКоличествоВыборки = Выборка.Количество();
			Если ТекущееКоличествоВыборки < 10000 И ТекущееКоличествоВыборки = ПредыдущееКоличествоВыборки Тогда
				// Предотвращение зацикливания.
				Прервать;
			Иначе
				ПредыдущееКоличествоВыборки = ТекущееКоличествоВыборки;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					Набор = Менеджер.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Набор.ОбменДанными.Загрузка = Истина;
					Набор.Записать();
				Исключение
					Текст = НСтр("ru = 'Не удалось выполнить удаление записей регистра сведений:'");
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), Набор);
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Текст = НСтр("ru = 'Окончание операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДокументы(ДатаСвертки, НеудаляемыеДокументы)
	
	ТекстЗапросаШаблон = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	#Документ КАК Документ
	|ГДЕ
	|	НЕ Документ.ПометкаУдаления
	|	И Документ.Дата <= &ДатаОстатков
	|	И Документ.Ссылка НЕ В (&НеудаляемыеДокументы)
	|";
	
	МетаданныеОбъектов = Метаданные.Документы;
	Для Каждого МетаданныеОбъекта Из МетаданныеОбъектов Цикл
		
		Если МетаданныеОбъекта.Имя = "ЧекККМ" Или МетаданныеОбъекта.Имя = "ЧекККМВозврат" Тогда
			// Чеки ККМ можно удалить только специальной обработкой архивирования и удаления чеков ККМ.
			Продолжить;
		КонецЕсли;
		
		Текст = НСтр("ru = 'Начало операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "#Документ", МетаданныеОбъекта.ПолноеИмя());
		ПредыдущееКоличествоВыборки = 0;
		Пока Истина Цикл
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДатаОстатков"        , КонецДня(ДатаСвертки));
			Запрос.УстановитьПараметр("НеудаляемыеДокументы", НеудаляемыеДокументы);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			
			ТекущееКоличествоВыборки = Выборка.Количество();
			Если ТекущееКоличествоВыборки < 10000 И ТекущееКоличествоВыборки = ПредыдущееКоличествоВыборки Тогда
				// Предотвращение зацикливания.
				Прервать;
			Иначе
				ПредыдущееКоличествоВыборки = ТекущееКоличествоВыборки;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
					Для Каждого Движение Из ДокументОбъект.Движения Цикл
						Движение.Прочитать();
						Если Движение.Количество() > 0 Тогда
							Текст = НСтр("ru = 'По документу %1 есть движения по регистрам.'");
							Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДокументОбъект.Ссылка);
							ВызватьИсключение Текст;
						КонецЕсли;
					КонецЦикла;
					
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					
				Исключение
					Текст = НСтр("ru = 'Не удалось пометить на удаление документ:'");
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Текст = НСтр("ru = 'Окончание операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьПроведениеДокументов(ПартияОбразующиеДокументы)
	
	ДокументыПоТипам = ОбщегоНазначенияБольничнаяАптека.РазложитьМассивСсылокПоТипам(ПартияОбразующиеДокументы);
	Для Каждого КлючИЗначение Из ДокументыПоТипам Цикл
		
		ПолноеИмяДокумента = КлючИЗначение.Ключ;
		ДокументыТипа      = КлючИЗначение.Значение;
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
		
		Текст = НСтр("ru = 'Начало операции отмены проведения: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		Для Каждого ДокументСсылка Из ДокументыТипа Цикл
			
			Попытка
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Текст = НСтр("ru = 'Не удалось отменить проведение документ:'");
				ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ДокументОбъект.Ссылка);
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		Текст = НСтр("ru = 'Окончание операции отмены проведения: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗадачи(ДатаСвертки)
	
	ТекстЗапросаШаблон = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	#Задача КАК Задача
	|ГДЕ
	|	НЕ Задача.ПометкаУдаления
	|	И Задача.Дата <= &ДатаОстатков
	|	И Задача.БизнесПроцесс.Завершен
	|	И Задача.Выполнена
	|	И &УсловиеПоТипуЗадачи
	|";
	
	МетаданныеОбъектов = Метаданные.Задачи;
	Для Каждого МетаданныеОбъекта Из МетаданныеОбъектов Цикл
		
		Текст = НСтр("ru = 'Начало операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "#Задача", МетаданныеОбъекта.ПолноеИмя());
		Если МетаданныеОбъекта.Имя = "ЗадачаИсполнителя" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипуЗадачи", "Задача.СрокИсполнения <= &ДатаОстатков");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипуЗадачи", "ИСТИНА");
		КонецЕсли;
		
		ПредыдущееКоличествоВыборки = 0;
		Пока Истина Цикл
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаСвертки));
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			
			ТекущееКоличествоВыборки = Выборка.Количество();
			Если ТекущееКоличествоВыборки < 10000 И ТекущееКоличествоВыборки = ПредыдущееКоличествоВыборки Тогда
				// Предотвращение зацикливания.
				Прервать;
			Иначе
				ПредыдущееКоличествоВыборки = ТекущееКоличествоВыборки;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
					Текст = НСтр("ru = 'Не удалось пометить на удаление задачу:'");
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), ЗадачаОбъект.Ссылка);
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Текст = НСтр("ru = 'Окончание операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьБизнесПроцессы(ДатаСвертки)
	
	ТекстЗапросаШаблон = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	#БизнесПроцесс КАК БизнесПроцесс
	|ГДЕ
	|	НЕ БизнесПроцесс.ПометкаУдаления
	|	И БизнесПроцесс.Предмет.ПометкаУдаления
	|	И БизнесПроцесс.Дата <= &ДатаОстатков
	|";
	
	МетаданныеОбъектов = Метаданные.БизнесПроцессы;
	Для Каждого МетаданныеОбъекта Из МетаданныеОбъектов Цикл
		
		Текст = НСтр("ru = 'Начало операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "#БизнесПроцесс", МетаданныеОбъекта.ПолноеИмя());
		ПредыдущееКоличествоВыборки = 0;
		Пока Истина Цикл
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаСвертки));
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			
			ТекущееКоличествоВыборки = Выборка.Количество();
			Если ТекущееКоличествоВыборки < 10000 И ТекущееКоличествоВыборки = ПредыдущееКоличествоВыборки Тогда
				// Предотвращение зацикливания.
				Прервать;
			Иначе
				ПредыдущееКоличествоВыборки = ТекущееКоличествоВыборки;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					БизнесПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
					БизнесПроцессОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
					Текст = НСтр("ru = 'Не удалось пометить на удаление бизнес-процесс:'");
					ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Ошибка, Текст, ИнформацияОбОшибке(), БизнесПроцессОбъект.Ссылка);
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Текст = НСтр("ru = 'Окончание операции удаления: %1'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеОбъекта.Представление());
		ЗапротоколироватьСобытие(УровеньЖурналаРегистрации.Информация, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // УдалениеОбъектовИнформационнойБазы

////////////////////////////////////////////////////////////////////////////////
// Общие методы свертки
#Область ОбщиеМетодыСвертки

Функция ПолучитьДокументыФормирующиеОстатки(ДатаСвертки, Действие)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Операторы = СхемаЗапроса.ПакетЗапросов[0].Операторы;
	
	Если ВРег(Действие) = Действие_Проведение() Тогда
		
		ВыражениеОтбора = "Документ.Дата <= &ДатаОкончания
			|И НЕ Документ.ПометкаУдаления
			|И (Документ.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
			|ИЛИ Документ.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
		
	ИначеЕсли ВРег(Действие) = Действие_Удаление() Тогда
		
		ВыражениеОтбора = "Документ.Дата <= &ДатаОкончания
			|И Документ.Дата >= &ДатаНачала
			|И НЕ Документ.ПометкаУдаления
			|И Документ.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
		
	ИначеЕсли ВРег(Действие) = Действие_Исключение() Тогда
		
		ВыражениеОтбора = "Документ.Дата <= &ДатаОкончания
			|И Документ.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
			|ИЛИ Документ.Комментарий ПОДОБНО &Комментарий_СохранитьПриСверткеБазы
			|ИЛИ Документ.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы";
		
	ИначеЕсли ВРег(Действие) = Действие_Сохраненные() Тогда
		
		ВыражениеОтбора = "Документ.Дата <= &ДатаОкончания
			|И Документ.Проведен
			|И Документ.Комментарий ПОДОБНО &Комментарий_СохранитьПриСверткеБазы";
		
	КонецЕсли;
	
	ИменаДокументовОстатков = Новый Массив;
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.РазмещениеТоваровПоМестамХранения.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.РазмещениеТоваровПоМестамХраненияВОтделении.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.УстановкаЦенНоменклатуры.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.СпецификацияКДоговору.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.НазначениеВрача.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.ТребованиеОтделения.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя());
	ИменаДокументовОстатков.Добавить(Метаданные.Документы.ФормулярныйСписокНоменклатуры.ПолноеИмя());
	Для Каждого ТипДокумента Из Метаданные.РегистрыСведений.АналитикаУчетаПартий.Измерения.ДокументОприходования.Тип.Типы() Цикл
		ИмяДокумента = Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя();
		Если ИменаДокументовОстатков.Найти(ИмяДокумента) = Неопределено Тогда
			ИменаДокументовОстатков.Добавить(ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяДокумента Из ИменаДокументовОстатков Цикл
		Оператор = Операторы.Добавить();
		Оператор.Источники.Добавить(ИмяДокумента, "Документ");
		Оператор.ВыбираемыеПоля.Добавить("Ссылка");
		Оператор.Отбор.Добавить(ВыражениеОтбора);
	КонецЦикла;
	Операторы.Удалить(0); // Удаление пустого оператора пакета запроса.
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("ДатаНачала"                         , НачалоДня(ДатаСвертки));
	Запрос.УстановитьПараметр("ДатаОкончания"                      , КонецДня(ДатаСвертки));
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%" + Комментарий_СформированСверткойБазы() + "%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%" + Комментарий_НеУдалятьПриСверткеБазы() + "%");
	Запрос.УстановитьПараметр("Комментарий_СохранитьПриСверткеБазы", "%" + Комментарий_СохранитьПриСверткеБазы() + "%");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеШапки = Неопределено, ДатаСвертки, ВидОбработкиДокумента = "")
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = КонецДня(ДатаСвертки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	Если ВРег(ВидОбработкиДокумента) = ВРег("НеУдалять") Тогда
		ДокументОбъект.Комментарий = Комментарий_НеУдалятьПриСверткеБазы();
	ИначеЕсли ВРег(ВидОбработкиДокумента) = ВРег("Сохранять") Тогда
		ДокументОбъект.Комментарий = Комментарий_СохранитьПриСверткеБазы();
	Иначе
		ДокументОбъект.Комментарий = Комментарий_СформированСверткойБазы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИзменениеДокументовВПараметрСвертки(ОтраженоИзменениеДокументов)
	
	Если ОтраженоИзменениеДокументов = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСвертки = Константы.ПараметрыСверткиИнформационнойБазы.Получить().Получить();
	Если ТипЗнч(ПараметрыСвертки) = Тип("Структура") И ПараметрыСвертки.Свойство("ИзмененыДокументы") И ПараметрыСвертки.ИзмененыДокументы Тогда
		ОтраженоИзменениеДокументов = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСвертки) <> Тип("Структура") Тогда
		ПараметрыСвертки = Новый Структура;
	КонецЕсли;
	
	ПараметрыСвертки.Вставить("ИзмененыДокументы", Истина);
	Константы.ПараметрыСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(ПараметрыСвертки));
	ОтраженоИзменениеДокументов = Истина;
	
КонецПроцедуры

Функция Действие_Проведение()
	
	Возврат ВРег("Проведение");
	
КонецФункции

Функция Действие_Удаление()
	
	Возврат ВРег("Удаление");
	
КонецФункции

Функция Действие_Исключение()
	
	Возврат ВРег("Исключение");
	
КонецФункции

Функция Действие_Сохраненные()
	
	Возврат ВРег("Сохраненные");
	
КонецФункции

Функция КлючДанных_ТоварыНаСкладах()
	
	Возврат "ТоварыНаСкладах";
	
КонецФункции

Функция КлючДанных_ТоварыПоМестамХранения()
	
	Возврат "ТоварыПоМестамХранения";
	
КонецФункции

Функция КлючДанных_ЦеныНоменклатуры()
	
	Возврат "ЦеныНоменклатуры";
	
КонецФункции

Функция КлючДанных_ДенежныеСредстваВКассах()
	
	Возврат "ДенежныеСредстваВКассах";
	
КонецФункции

Функция КлючДанных_СпецификацияКДоговору()
	
	Возврат "СпецификацияКДоговору";
	
КонецФункции

Функция КлючДанных_ЗаказПоставщику()
	
	Возврат "ЗаказПоставщику";
	
КонецФункции

Функция КлючДанных_ДокументыОприходованияТоваров()
	
	Возврат "ДокументыОприходованияТоваров";
	
КонецФункции

Функция КлючДанных_НазначениеВрача()
	
	Возврат "НазначениеВрача";
	
КонецФункции

Функция КлючДанных_ТребованиеОтделения()
	
	Возврат "ТребованиеОтделения";
	
КонецФункции

Функция КлючДанных_ЗаказНаПеремещение()
	
	Возврат "ЗаказНаПеремещение";
	
КонецФункции

Функция КлючДанных_ФормулярныйСписокНоменклатуры()
	
	Возврат "ФормулярныйСписокНоменклатуры";
	
КонецФункции

Функция Комментарий_НеУдалятьПриСверткеБазы()
	
	Возврат НСтр("ru='(Не удалять при свертке базы)'");
	
КонецФункции

Функция Комментарий_СформированСверткойБазы()
	
	Возврат НСтр("ru='(Сформирован обработкой свертки базы)'");
	
КонецФункции

Функция Комментарий_СохранитьПриСверткеБазы()
	
	Возврат НСтр("ru='(Сохранить при свертке базы)'");
	
КонецФункции

Функция КоличествоСтрокВДокументеВводаОстатков()
	
	Возврат 10000;
	
КонецФункции

Процедура ЗапротоколироватьСобытие(Уровень, Текст, Пояснение = Неопределено, Данные = Неопределено, Отказ = Ложь) Экспорт
	
	Если ТипЗнч(Пояснение) = Тип("ИнформацияОбОшибке") Тогда
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(Пояснение);
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(Пояснение);
	Иначе
		Если ТипЗнч(Пояснение) = Тип("Строка") И Не ПустаяСтрока(Пояснение) Тогда
			Текст = Текст + Символы.ПС + Пояснение;
		КонецЕсли;
		ТекстЖурналаРегистрации   = Текст;
		ТестСообщенияПользователю = Текст;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		ОбъектМетаданных = Данные.Метаданные();
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Свертка информационной базы'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, ТекстЖурналаРегистрации);
	
	Если Уровень = УровеньЖурналаРегистрации.Ошибка
	 Или Уровень = УровеньЖурналаРегистрации.Предупреждение Тогда
		ОбщегоНазначения.СообщитьПользователю(СокрЛП(ТестСообщенияПользователю), Данные,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбщиеМетодыСвертки

////////////////////////////////////////////////////////////////////////////////
// Получение данных для отчета ограничений свертки
#Область ПолучениеДанныхДляОтчетаОграниченийСвертки

Функция ПолучитьДанныеДляПечатиОграниченийСвертки(ДатаСвертки, ПроверкаНаличияОграничений = Ложь)
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("СхемаЗапроса"        , Новый СхемаЗапроса);
	ОписаниеДанных.Вставить("ИдентификаторыДанных", Новый Структура);
	
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОстаткиТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОстаткиТоваровБезМестХранения());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОстаткиСебестоимостиТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОстаткиЗаказов());
	
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОтрицательныеОстатки()                       , КлючДанных_ОтрицательныеОстатки());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_РасхожденияПоКоличественномуИСуммовомуУчету(), КлючДанных_РасхожденияПоКоличественномуИСуммовомуУчету());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_НекорректнаяСтоимостьТоваров()               , КлючДанных_НекорректнаяСтоимостьТоваров());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ТоварыВРезерве()                             , КлючДанных_ТоварыВРезерве());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ТоварыВПути()                                , КлючДанных_ТоварыВПути());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_НезавершенныеЗаказыНаПеремещение()           , КлючДанных_НезавершенныеЗаказыНаПеремещение());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_НезаказанныеСпецификацииПоДоговору()         , КлючДанных_НезаказанныеСпецификацииПоДоговору());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_НеоприходованныеЗаказы()                     , КлючДанных_НеоприходованныеЗаказы());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_АрхивированиеИУдалениеЧековККМ()             , КлючДанных_АрхивированиеИУдалениеЧековККМ());
	ДобавитьТекстЗапроса(ОписаниеДанных, ТекстЗапросаОграничения_ОформлениеИзлишковИНедостач()                , КлючДанных_ОформлениеИзлишковИНедостач());
	
	Если ПроверкаНаличияОграничений Тогда
		Для Каждого ЗапросОбъект Из ОписаниеДанных.СхемаЗапроса.ПакетЗапросов Цикл
			Если ТипЗнч(ЗапросОбъект) = Тип("ЗапросВыбораСхемыЗапроса")
			   И ПустаяСтрока(ЗапросОбъект.ТаблицаДляПомещения) Тогда
				Для Каждого Оператор Из ЗапросОбъект.Операторы Цикл
					Оператор.КоличествоПолучаемыхЗаписей = 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(ОписаниеДанных.СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("ГраницаОстатков"                 , Новый Граница(КонецДня(ДатаСвертки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатков"                    , КонецДня(ДатаСвертки));
	Запрос.УстановитьПараметр("ВестиСкладскойУчетВОтделениях"   , ПолучитьФункциональнуюОпцию("ВестиСкладскойУчетВОтделениях"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеДанных.ИдентификаторыДанных Цикл
		Ограничения = РезультатыЗапроса[КлючИЗначение.Значение].Выгрузить();
		Если Ограничения.Количество() > 0 Тогда
			Данные.Вставить(КлючИЗначение.Ключ, Ограничения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОстаткиТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)  КАК РазделУчета,
	|	ОстаткиНаСкладах.Организация                                             КАК Организация,
	|	ОстаткиНаСкладах.Склад                                                   КАК Склад,
	|	ОстаткиНаСкладах.ИсточникФинансирования                                  КАК ИсточникФинансирования,
	|	ОстаткиНаСкладах.МестоХранения                                           КАК МестоХранения,
	|	ОстаткиНаСкладах.Номенклатура                                            КАК Номенклатура,
	|	ОстаткиНаСкладах.СерияНоменклатуры                                       КАК СерияНоменклатуры,
	|	ОстаткиНаСкладах.Партия                                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА ОстаткиНаСкладах.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                    КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаПартий = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям)
	|			ТОГДА ОстаткиНаСкладах.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                    КАК ПартияДляСебестоимости,
	|	ОстаткиНаСкладах.КоличествоОстаток                                       КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОстатков,) КАК ОстаткиНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО
	|			ВидыНоменклатуры.Ссылка = ОстаткиНаСкладах.Номенклатура.ВидНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях)  КАК РазделУчета,
	|	ОстаткиВОтделениях.Организация                                             КАК Организация,
	|	ОстаткиВОтделениях.Склад                                                   КАК Склад,
	|	ОстаткиВОтделениях.ИсточникФинансирования                                  КАК ИсточникФинансирования,
	|	ОстаткиВОтделениях.МестоХранения                                           КАК МестоХранения,
	|	ОстаткиВОтделениях.Номенклатура                                            КАК Номенклатура,
	|	ОстаткиВОтделениях.СерияНоменклатуры                                       КАК СерияНоменклатуры,
	|	ОстаткиВОтделениях.Партия                                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерийВОтделениях = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА ОстаткиВОтделениях.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                      КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаПартийВОтделениях = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям)
	|			ТОГДА ОстаткиВОтделениях.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                      КАК ПартияДляСебестоимости,
	|	ОстаткиВОтделениях.КоличествоОстаток                                       КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладахВОтделениях.Остатки(&ГраницаОстатков,) КАК ОстаткиВОтделениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО
	|			ВидыНоменклатуры.Ссылка = ОстаткиВОтделениях.Номенклатура.ВидНоменклатуры
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОстаткиТоваровБезМестХранения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиТоваров.РазделУчета                        КАК РазделУчета,
	|	ОстаткиТоваров.Организация                        КАК Организация,
	|	ОстаткиТоваров.Склад                              КАК Склад,
	|	ОстаткиТоваров.ИсточникФинансирования             КАК ИсточникФинансирования,
	|	ОстаткиТоваров.Номенклатура                       КАК Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры                  КАК СерияНоменклатуры,
	|	ОстаткиТоваров.Партия                             КАК Партия,
	|	ОстаткиТоваров.СерияНоменклатурыДляСебестоимости  КАК СерияНоменклатурыДляСебестоимости,
	|	ОстаткиТоваров.ПартияДляСебестоимости             КАК ПартияДляСебестоимости,
	|	СУММА(ОстаткиТоваров.КоличествоОстаток)           КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиТоваровБезМестХранения
	|ИЗ
	|	ОстаткиТоваров КАК ОстаткиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.РазделУчета,
	|	ОстаткиТоваров.Организация,
	|	ОстаткиТоваров.Склад,
	|	ОстаткиТоваров.ИсточникФинансирования,
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СерияНоменклатуры,
	|	ОстаткиТоваров.Партия,
	|	ОстаткиТоваров.СерияНоменклатурыДляСебестоимости,
	|	ОстаткиТоваров.ПартияДляСебестоимости
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОстаткиСебестоимостиТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиСебестоимостиТоваров.РазделУчета                    КАК РазделУчета,
	|	КлючиВидаУчета.Организация                                 КАК Организация,
	|	КлючиВидаУчета.Склад                                       КАК Склад,
	|	КлючиВидаУчета.ИсточникФинансирования                      КАК ИсточникФинансирования,
	|	КлючиУчетаНоменклатуры.Номенклатура                        КАК Номенклатура,
	|	КлючиУчетаНоменклатуры.СерияНоменклатуры                   КАК СерияНоменклатуры,
	|	КлючиУчетаНоменклатуры.Партия                              КАК Партия,
	|	ОстаткиСебестоимостиТоваров.КоличествоОстаток              КАК КоличествоОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьОстаток               КАК СтоимостьОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьБезНДСОстаток         КАК СтоимостьБезНДСОстаток,
	|	ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток        КАК СуммаДопРасходовОстаток,
	|	ОстаткиСебестоимостиТоваров.СуммаДопРасходовБезНДСОстаток  КАК СуммаДопРасходовБезНДСОстаток,
	|	ОстаткиСебестоимостиТоваров.СтоимостьРеглОстаток           КАК СтоимостьРеглОстаток
	|ПОМЕСТИТЬ ОстаткиСебестоимостиТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОстатков,) КАК ОстаткиСебестоимостиТоваров
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК КлючиВидаУчета
	|		ПО
	|			КлючиВидаУчета.КлючАналитики = ОстаткиСебестоимостиТоваров.АналитикаВидаУчета
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиУчетаНоменклатуры
	|		ПО
	|			КлючиУчетаНоменклатуры.КлючАналитики = ОстаткиСебестоимостиТоваров.АналитикаУчетаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия,
	|	Склад,
	|	ИсточникФинансирования,
	|	Организация,
	|	РазделУчета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОстаткиЗаказов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.ЗаказПоставщику        КАК ЗаказПоставщику,
	|	ОстаткиЗаказов.КодСтроки              КАК КодСтроки,
	|	ОстаткиЗаказов.Номенклатура           КАК Номенклатура,
	|	ОстаткиЗаказов.Спецификация           КАК Спецификация,
	|	ОстаткиЗаказов.КодСтрокиСпецификации  КАК КодСтрокиСпецификации,
	|	ОстаткиЗаказов.ПоСпецификацииОстаток  КАК ПоСпецификацииОстаток,
	|	ОстаткиЗаказов.ЗаказаноОстаток        КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ОстаткиЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ГраницаОстатков, ) КАК ОстаткиЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОтрицательныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтрицательныеОстатки.Организация             КАК Организация,
	|	ОтрицательныеОстатки.Склад                   КАК Склад,
	|	ОтрицательныеОстатки.МестоХранения           КАК МестоХранения,
	|	ОтрицательныеОстатки.Номенклатура            КАК Номенклатура,
	|	ОтрицательныеОстатки.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ОтрицательныеОстатки.Партия                  КАК Партия,
	|	ОтрицательныеОстатки.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	ОтрицательныеОстатки.КоличествоОстаток       КАК КоличествоОстаток
	|ИЗ
	|	ОстаткиТоваров КАК ОтрицательныеОстатки
	|ГДЕ
	|	ОтрицательныеОстатки.КоличествоОстаток < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_РасхожденияПоКоличественномуИСуммовомуУчету()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиТоваровБезМестХранения.РазделУчета                             КАК РазделУчета,
	|	ОстаткиТоваровБезМестХранения.Организация                             КАК Организация,
	|	ОстаткиТоваровБезМестХранения.Склад                                   КАК Склад,
	|	ОстаткиТоваровБезМестХранения.ИсточникФинансирования                  КАК ИсточникФинансирования,
	|	ОстаткиТоваровБезМестХранения.Номенклатура                            КАК Номенклатура,
	|	ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости       КАК СерияНоменклатуры,
	|	ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости                  КАК Партия,
	|	СУММА(ОстаткиТоваровБезМестХранения.КоличествоОстаток)                КАК КоличествоОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиСебестоимостиТоваров.КоличествоОстаток, 0))  КАК КоличествоОстатокСебестоимость
	|ИЗ
	|	ОстаткиТоваровБезМестХранения КАК ОстаткиТоваровБезМестХранения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОстаткиСебестоимостиТоваров КАК ОстаткиСебестоимостиТоваров
	|		ПО
	|			ОстаткиСебестоимостиТоваров.РазделУчета              = ОстаткиТоваровБезМестХранения.РазделУчета
	|			И ОстаткиСебестоимостиТоваров.Организация            = ОстаткиТоваровБезМестХранения.Организация
	|			И ОстаткиСебестоимостиТоваров.Склад                  = ОстаткиТоваровБезМестХранения.Склад
	|			И ОстаткиСебестоимостиТоваров.ИсточникФинансирования = ОстаткиТоваровБезМестХранения.ИсточникФинансирования
	|			И ОстаткиСебестоимостиТоваров.Номенклатура           = ОстаткиТоваровБезМестХранения.Номенклатура
	|			И ОстаткиСебестоимостиТоваров.СерияНоменклатуры      = ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости
	|			И ОстаткиСебестоимостиТоваров.Партия                 = ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровБезМестХранения.РазделУчета,
	|	ОстаткиТоваровБезМестХранения.Организация,
	|	ОстаткиТоваровБезМестХранения.Склад,
	|	ОстаткиТоваровБезМестХранения.ИсточникФинансирования,
	|	ОстаткиТоваровБезМестХранения.Номенклатура,
	|	ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости,
	|	ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиТоваровБезМестХранения.КоличествоОстаток) <> МАКСИМУМ(ЕСТЬNULL(ОстаткиСебестоимостиТоваров.КоличествоОстаток, 0))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_НекорректнаяСтоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиТоваровБезМестХранения.Организация                         КАК Организация,
	|	ОстаткиТоваровБезМестХранения.Склад                               КАК Склад,
	|	ОстаткиТоваровБезМестХранения.ИсточникФинансирования              КАК ИсточникФинансирования,
	|	ОстаткиТоваровБезМестХранения.Номенклатура                        КАК Номенклатура,
	|	ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости   КАК СерияНоменклатуры,
	|	ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости              КАК Партия,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьОстаток, 0)         КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток, 0)  КАК СуммаДопРасходовОстаток,
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьРеглОстаток, 0)     КАК СтоимостьРеглОстаток
	|ИЗ
	|	ОстаткиТоваровБезМестХранения КАК ОстаткиТоваровБезМестХранения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОстаткиСебестоимостиТоваров КАК ОстаткиСебестоимостиТоваров
	|		ПО
	|			ОстаткиСебестоимостиТоваров.РазделУчета              = ОстаткиТоваровБезМестХранения.РазделУчета
	|			И ОстаткиСебестоимостиТоваров.Организация            = ОстаткиТоваровБезМестХранения.Организация
	|			И ОстаткиСебестоимостиТоваров.Склад                  = ОстаткиТоваровБезМестХранения.Склад
	|			И ОстаткиСебестоимостиТоваров.ИсточникФинансирования = ОстаткиТоваровБезМестХранения.ИсточникФинансирования
	|			И ОстаткиСебестоимостиТоваров.Номенклатура           = ОстаткиТоваровБезМестХранения.Номенклатура
	|			И ОстаткиСебестоимостиТоваров.СерияНоменклатуры      = ОстаткиТоваровБезМестХранения.СерияНоменклатурыДляСебестоимости
	|			И ОстаткиСебестоимостиТоваров.Партия                 = ОстаткиТоваровБезМестХранения.ПартияДляСебестоимости
	|		
	|ГДЕ
	|	ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьОстаток, 0) <= 0
	|	ИЛИ ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СуммаДопРасходовОстаток, 0) < 0
	|	ИЛИ ЕСТЬNULL(ОстаткиСебестоимостиТоваров.СтоимостьРеглОстаток, 0) <= 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ТоварыВРезерве()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТоварыВРезерве.Организация                  КАК Организация,
	|	ТоварыВРезерве.Склад                        КАК Склад,
	|	ТоварыВРезерве.ИсточникФинансирования       КАК ИсточникФинансирования,
	|	ТоварыВРезерве.Номенклатура                 КАК Номенклатура,
	|	ТоварыВРезерве.СерияНоменклатуры            КАК СерияНоменклатуры,
	|	ТоварыВРезерве.Партия                       КАК Партия,
	|	ТоварыВРезерве.МестоХранения                КАК МестоХранения,
	|	ТоварыВРезерве.ВРезервеСоСкладаОстаток      КАК ВРезервеСоСклада
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(&ГраницаОстатков,) КАК ТоварыВРезерве
	|ГДЕ
	|	ТоварыВРезерве.ВРезервеСоСкладаОстаток > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ТоварыВПути()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТоварыВПути.Регистратор      КАК Документ,
	|	-ТоварыВПути.ВНаличииОборот  КАК ВПути
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Обороты(, &ГраницаОстатков, Регистратор) КАК ТоварыВПути
	|ГДЕ
	|	ТоварыВПути.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	И ТоварыВПути.ВНаличииОборот < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПути.Регистратор      КАК Документ,
	|	-ТоварыВПути.ВНаличииОборот  КАК ВПути
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Обороты(, &ГраницаОстатков, Регистратор) КАК ТоварыВПути
	|ГДЕ
	|	ТоварыВПути.Регистратор ССЫЛКА Документ.ВозвратТоваровИзОтделения
	|	И ТоварыВПути.ВНаличииОборот < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПути.Регистратор      КАК Документ,
	|	-ТоварыВПути.ВНаличииОборот  КАК ВПути
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Обороты(, &ГраницаОстатков, Регистратор) КАК ТоварыВПути
	|ГДЕ
	|	ТоварыВПути.Регистратор ССЫЛКА Документ.ОтпускТоваровВОтделение
	|	И ТоварыВПути.ВНаличииОборот < 0
	|	И &ВестиСкладскойУчетВОтделениях
	|	И ТоварыВПути.Регистратор.Отделение.ВестиСкладскойУчет
	|	И ТоварыВПути.Регистратор.Отделение.ДатаНачалаВеденияСкладскогоУчета <= ТоварыВПути.Регистратор.Дата
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_НезавершенныеЗаказыНаПеремещение()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаказыНаПеремещениеОбороты.Регистратор         КАК Регистратор,
	|	ЗаказыНаПеремещениеОбороты.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ЗаказыНаПеремещениеОбороты.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ЗаказыНаПеремещениеОбороты.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ЗаказыНаПеремещениеОбороты.КодСтроки           КАК КодСтроки,
	|	ЗаказыНаПеремещениеОбороты.ЗаказаноОборот      КАК ЗаказаноОборот
	|ПОМЕСТИТЬ ОборотыЗаказовНаПеремещение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(, &ГраницаОстатков, Регистратор,) КАК ЗаказыНаПеремещениеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение     КАК Документ,
	|	ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры      КАК АналитикаОтбораНоменклатуры,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиЗаказовНаПеремещение.ЗаказаноОборот)  КАК ЗаказаноОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|		ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|		ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|		ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|		ОборотыЗаказовНаПеремещение.ЗаказаноОборот      КАК ЗаказаноОборот
	|	ИЗ
	|		ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|	ГДЕ
	|		ОборотыЗаказовНаПеремещение.Регистратор = ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|		ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|		ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|		ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|		ОборотыЗаказовНаПеремещение.ЗаказаноОборот      КАК ЗаказаноОборот
	|	ИЗ
	|		ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|	ГДЕ
	|		ОборотыЗаказовНаПеремещение.Регистратор <> ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|		И ОборотыЗаказовНаПеремещение.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|	) КАК ОстаткиЗаказовНаПеремещение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК КлючиОтбораНоменклатуры
	|		ПО
	|			КлючиОтбораНоменклатуры.КлючАналитики = ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры
	|	
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗаказовНаПеремещение.ЗаказНаПеремещение,
	|	ОстаткиЗаказовНаПеремещение.ОтборНоменклатуры,
	|	ОстаткиЗаказовНаПеремещение.ЕдиницаИзмерения
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиЗаказовНаПеремещение.ЗаказаноОборот) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_НезаказанныеСпецификацииПоДоговору()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.Спецификация           КАК Документ,
	|	ОстаткиЗаказов.Номенклатура           КАК Номенклатура,
	|	ОстаткиЗаказов.ПоСпецификацииОстаток  КАК ПоСпецификацииОстаток
	|ИЗ
	|	ОстаткиЗаказов КАК ОстаткиЗаказов
	|ГДЕ
	|	ОстаткиЗаказов.ПоСпецификацииОстаток > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_НеоприходованныеЗаказы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.ЗаказПоставщику  КАК Документ,
	|	ОстаткиЗаказов.Номенклатура     КАК Номенклатура,
	|	ОстаткиЗаказов.ЗаказаноОстаток  КАК ЗаказаноОстаток
	|ИЗ
	|	ОстаткиЗаказов КАК ОстаткиЗаказов
	|ГДЕ
	|	ОстаткиЗаказов.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ОстаткиЗаказов.ЗаказаноОстаток > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_АрхивированиеИУдалениеЧековККМ()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка  КАК Документ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Дата <= &ДатаОстатков
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОграничения_ОформлениеИзлишковИНедостач()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОформлениеИзлишковИНедостач.ДокументОснование                КАК Документ,
	|	ОформлениеИзлишковИНедостач.Организация                      КАК Организация,
	|	ОформлениеИзлишковИНедостач.Склад                            КАК Склад,
	|	ОформлениеИзлишковИНедостач.ИсточникФинансирования           КАК ИсточникФинансирования,
	|	ОформлениеИзлишковИНедостач.Номенклатура                     КАК Номенклатура,
	|	ОформлениеИзлишковИНедостач.СерияНоменклатуры                КАК СерияНоменклатуры,
	|	ОформлениеИзлишковИНедостач.Партия                           КАК Партия,
	|	ОформлениеИзлишковИНедостач.КОформлениюОприходованияОстаток  КАК КОприходованию,
	|	ОформлениеИзлишковИНедостач.КОформлениюСписанияОстаток       КАК КСписанию
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(&ГраницаОстатков,) КАК ОформлениеИзлишковИНедостач
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхДляОтчетаОграниченийСвертки

////////////////////////////////////////////////////////////////////////////////
// Общие методы формирования отчета ограничений свертки
#Область ОбщиеМетодыФормированияОтчетаОграниченийСвертки

Процедура УстановитьМакетОформленияВРежимеТакси(НастройкиКомпоновкиДанных)
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПараметрМакетОформления = НастройкиКомпоновкиДанных.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main"
		 Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = БиблиотекаМакетовОформленияКомпоновкиДанных.ОформлениеОтчетовБежевый.Имя;
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из НастройкиКомпоновкиДанных.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main"
				 Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = БиблиотекаМакетовОформленияКомпоновкиДанных.ОформлениеОтчетовБежевый.Имя;
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КлючДанных_ОтрицательныеОстатки()
	
	Возврат "ОтрицательныеОстатки";
	
КонецФункции

Функция КлючДанных_РасхожденияПоКоличественномуИСуммовомуУчету()
	
	Возврат "РасхожденияПоКоличественномуИСуммовомуУчету";
	
КонецФункции

Функция КлючДанных_НекорректнаяСтоимостьТоваров()
	
	Возврат "НекорректнаяСтоимостьТоваров";
	
КонецФункции

Функция КлючДанных_ТоварыВРезерве()
	
	Возврат "ТоварыВРезерве";
	
КонецФункции

Функция КлючДанных_ТоварыВПути()
	
	Возврат "ТоварыВПути";
	
КонецФункции

Функция КлючДанных_НезавершенныеЗаказыНаПеремещение()
	
	Возврат "НезавершенныеЗаказыНаПеремещение";
	
КонецФункции

Функция КлючДанных_НезаказанныеСпецификацииПоДоговору()
	
	Возврат "НезаказанныеСпецификацииПоДоговору";
	
КонецФункции

Функция КлючДанных_НеоприходованныеЗаказы()
	
	Возврат "НеоприходованныеЗаказы";
	
КонецФункции

Функция КлючДанных_АрхивированиеИУдалениеЧековККМ()
	
	Возврат "АрхивированиеИУдалениеЧековККМ";
	
КонецФункции

Функция КлючДанных_ОформлениеИзлишковИНедостач()
	
	Возврат "ОформлениеИзлишковИНедостач";
	
КонецФункции

#КонецОбласти // ОбщиеМетодыФормированияОтчетаОграниченийСвертки

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли