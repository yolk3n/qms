
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ВызватьИсключение НСтр("ru = 'Не найдена подсистема интернет поддержки пользователей'"); 
	КонецЕсли;	
	
	Если Не ОблачныеКлассификаторы.РаботаСОблачнымиКлассификаторамиРазрешена(,Истина) Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("РежимВыбораЭлемента",       РежимВыбораЭлемента);
	Параметры.Свойство("КодВыбранногоЭлемента",     КодВыбранногоЭлемента);
	Параметры.Свойство("ОткрытиеЧерезОбщуюКоманду", ОткрытиеЧерезОбщуюКоманду);
	Параметры.Свойство("ЗагружатьСИерархией",		ЗагружатьСИерархией);
	
	СтавитьФлагНаПодчиненных = Истина;
	
	ОтображатьУтратившиеСилу = Истина;
	
	ВесГрупповогоЭлемента = 0.3;
	
	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	ИнтернетПоддержкаПодключена = 
		МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнтернетПоддержкаПодключена Тогда
		ПостроитьДеревоПослеОткрытияЗавершение();
	Иначе
		ТекстВопроса = НСтр("ru='Для работы с облачным классификатором
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ДетиКэшированы Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если СтрокаДерева.ВОбработке
		Или КоличествоЗаданий > 10 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ВОбработке = Истина;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка = Неопределено Тогда
		РазвернутыеСтроки.Добавить(СтрокаДерева.Идентификатор,, Истина);
	КонецЕсли;
	
	ЭлементКлассификатора = Новый Структура("Код, ИдентификаторСтроки, Действие", СтрокаДерева.Код, Строка, "ЗагрузкаПотомков");
	ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередСворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийВыделенныйЭлемент = СтрокаДерева.Идентификатор;
	СостояниеФлажкаДоИзменения = СтрокаДерева.Пометка;
	
	Если ПредставлениеЭлементаВладелец <> СтрокаДерева.Идентификатор Тогда
		
		АдресКэшаТекущий = ?(Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево, АдресКэша, АдресКэшаРезультатПоиска);
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокаДерева.Идентификатор, СтрокаДерева.Код,	АдресКэшаТекущий);
		
		ПредставлениеЭлементаВладелец = СтрокаДерева.Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПометкаПриИзменении(Элемент)
	
	Если Элементы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	
	ПереопределитьСостояниеФлажка(ТекущаяСтрокаДерева);
	
	Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
		СписокПометкаПриИзмененииНаСервере();
	Иначе	
		ДеревоПометкаПриИзмененииНаСервере();
	КонецЕсли;
	
	СостояниеФлажкаДоИзменения = ТекущаяСтрокаДерева.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = Элементы.Дерево.ТекущиеДанные;
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список 
			И Не ЗагружатьСИерархией И НЕ РежимВыбораЭлемента Тогда
		Если ЭлементНайденВОсновномКэше(СтрокаДерева.Код, АдресКэша) Тогда
			ЭлементКлассификатора = Новый Структура("Действие", "ЗагрузкаРазделов");
		Иначе
			ЭлементКлассификатора = Новый Структура("Код, Действие", СтрокаДерева.Код, "ЗагрузкаВетки");
		КонецЕсли;
		
		ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
		СтрокаПоиска = "";
		Элементы.ГруппаПагинация.Видимость = Ложь;
	ИначеЕсли Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево 
		И НЕ РежимВыбораЭлемента Тогда	
		
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Если Элементы.Дерево.Развернут(ИдентификаторСтроки) Тогда
			Элементы.Дерево.Свернуть(ИдентификаторСтроки);
		Иначе
			Элементы.Дерево.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
	ИначеЕсли РежимВыбораЭлемента Тогда
		ОбработатьВыборЭлемента(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьПоискЭлементовПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВыполнитьПоискЭлементовПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ДеревоВОбработке Тогда
		ПодключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска",1,Ложь);
	Иначе
		ПриОчисткеСтрокиПоиска();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СокрЛП(СтрокаПоиска)) Тогда
		СтрокаПоиска = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУтратившиеСилуПриИзменении(Элемент)
	
	Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево Тогда
		Если Не Элементы.ТолькоВыбранные.Пометка Тогда
			ВосстановитьДерево();
		Иначе
			ВосстановитьДеревоПоРезультатамПоиска();
		КонецЕсли;
	Иначе
		ЗаполнитьДеревоПоРезультатамПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавитьФлагНаПодчиненныхПриИзменении(Элемент)
	
	Если СтавитьФлагНаПодчиненных Тогда
		Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево Тогда
			СтавитьФлагНаПодчиненныхПриИзмененииНаСервере();
			
			ВосстановитьДерево();
			Если Элементы.ТолькоВыбранные.Пометка Тогда
				УстановитьРежимТолькоВыбранные();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если Не ВыбранныеЭлементы.Количество() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны элементы для загрузки'"),, НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	Если ДеревоВОбработке Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса",1,Ложь);
	Иначе
		ЗагрузитьДанныеИзСервиса();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлемент(Команда)
	
	ОбработатьВыборЭлемента(Элементы.Дерево.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранные(Команда)
	
	Элементы.ТолькоВыбранные.Пометка = Не Элементы.ТолькоВыбранные.Пометка;
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УстановитьРежимТолькоВыбранные();
		Элементы.УстановитьФлажки.Доступность = Ложь;
		Элементы.СнятьФлажки.Доступность      = Ложь;
	Иначе
		ВосстановитьДерево();
		Элементы.УстановитьФлажки.Доступность = Истина;
		Элементы.СнятьФлажки.Доступность      = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияСледующая(Команда)
	
	СинхронизироватьКэши(АдресКэша, АдресКэшаРезультатПоиска, ВыбранныеЭлементы, Неопределено, УникальныйИдентификатор);
	
	ПагинацияНомерСтраницы = ПагинацияНомерСтраницы + 1;
	
	ПостроитьДеревоКлассификатора(Новый Структура("Код, Действие", СтрокаПоиска, "ПоискПоСтроке"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияПредыдущая(Команда)
	
	СинхронизироватьКэши(АдресКэша, АдресКэшаРезультатПоиска, ВыбранныеЭлементы, Неопределено, УникальныйИдентификатор);
	
	ПагинацияНомерСтраницы = Макс(ПагинацияНомерСтраницы - 1, 1);
	
	ПостроитьДеревоКлассификатора(Новый Структура("Код, Действие", СтрокаПоиска, "ПоискПоСтроке"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияВНачало(Команда)
	
	ПагинацияНомерСтраницы = 1;
	
	СинхронизироватьКэши(АдресКэша, АдресКэшаРезультатПоиска, ВыбранныеЭлементы, Неопределено, УникальныйИдентификатор);
	
	ПостроитьДеревоКлассификатора(Новый Структура("Код, Действие", СтрокаПоиска, "ПоискПоСтроке"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСИнтернетПоддержкой

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	Иначе	
		ВызватьИсключение НСтр("ru = 'Не найдена подсистема интернет поддержки пользователей'"); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)) Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПодключена = Истина;
	
	ПостроитьДеревоПослеОткрытияЗавершение();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВнешнегоВидаФормы

&НаСервере
Процедура НастроитьВнешнийВидФормы()

	Элементы.ЗагрузитьДанные.Видимость          = Не РежимВыбораЭлемента;
	Элементы.ЗагрузитьДанные.КнопкаПоУмолчанию  = Не РежимВыбораЭлемента;
	Элементы.КнопкиДерева.Видимость             = Не РежимВыбораЭлемента;
	Элементы.ДеревоПометка.Видимость            = Не РежимВыбораЭлемента;
	Элементы.СтавитьФлагНаПодчиненных.Видимость = ЗагружатьСИерархией И Не РежимВыбораЭлемента;
	Элементы.ВыбратьЭлемент.Видимость           = РежимВыбораЭлемента;
	Элементы.ВыбратьЭлемент.КнопкаПоУмолчанию   = РежимВыбораЭлемента;
	
	Если Не РежимВыбораЭлемента Тогда
		ЭтотОбъект.Заголовок = НСтр("ru = 'Загрузка классификатора ОКПД 2'");
		Элементы.ПодсказкаКФорме.Заголовок = НСтр("ru = 'Выберите элемент классификатора.'"); 
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Выберите элемент классификатора ОКПД 2'");
		Элементы.ПодсказкаКФорме.Заголовок = 
			НСтр("ru = 'Выберите необходимые элементы классификатора и загрузите их в базу, нажав кнопку Загрузить данные.'"); 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Флажки загруженных элементов	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
 	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.Загружен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.ПодчиненныеЗагружены");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПометка.Имя);
	
	// Цвет шрифта утративших силу позиций
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НепринятаяВерсия);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.ЭтоАктуальныйКод");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНаименование.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДереваКлассификатора

&НаСервере
Процедура СтавитьФлагНаПодчиненныхПриИзмененииНаСервере()
	
	ДанныеДерева = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ДанныеДерева Цикл
		СкорректироватьОтметкиПотомков(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура СкорректироватьОтметкиПотомков(СтрокаРодитель)
	
	ДанныеДерева = СтрокаРодитель.ПолучитьЭлементы();
	КоличествоДетейПометка = 0;
	
	Для Каждого СтрокаДерева Из ДанныеДерева Цикл
		Если СтрокаРодитель.Пометка = 1 Тогда
			СтрокаДерева.Пометка = 1;
		КонецЕсли;	
		
		КоличествоДетейПометка = КоличествоДетейПометка + 1;			
		
		СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДерева);
		
		СкорректироватьОтметкиПотомков(СтрокаДерева);
	КонецЦикла;	
	
	СтрокаРодитель.КоличествоДетейПометка = КоличествоДетейПометка;
	
	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаРодитель);
	
КонецПроцедуры			

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияЗавершение()
	
	ЭлементКлассификатора = Новый Структура("Код, Действие", 
		КодВыбранногоЭлемента, ?(ПустаяСтрока(КодВыбранногоЭлемента), "ЗагрузкаРазделов", "ЗагрузкаВетки"));
	
	ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКлассификатора(ЭлементКлассификатора)
	
	ДеревоВОбработке = Истина;
	
	ПопытокЗагрузить = 0;
	
	ПостроитьДеревоКлассификатораЗавершение = Новый ОписаниеОповещения("ПостроитьДеревоКлассификатораЗавершение",
		ЭтотОбъект, Новый Структура("ЭлементКлассификатора", ЭлементКлассификатора));
	
	Если ЭлементКлассификатора.Действие = "ЗагрузкаРазделов" Тогда
		
		Если ПустаяСтрока(АдресКэша) Тогда // Начальная загрузка разделов 
			ОблачныеКлассификаторыКлиент.ПолучитьРазделыОКПД2(ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,,
				КоличествоЗаданий);
		Иначе
			ВосстановитьДерево(); // Восстановление дерева из кэша и позиционирование в иерархии на выбранном элементе
		КонецЕсли;
		
	ИначеЕсли ЭлементКлассификатора.Действие = "ЗагрузкаПотомков" Тогда
		// Загрузка подчиненных элементов классификатора (детей)
		ОблачныеКлассификаторыКлиент.ПолучитьПодчиненныеЭлементыОКПД2(ЭлементКлассификатора.Код,
			ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	ИначеЕсли ЭлементКлассификатора.Действие = "ПоискПоСтроке" Тогда // Поиск по строке
		
		ОблачныеКлассификаторыКлиент.ОбработатьПоисковыйЗапросОКПД2(ЭлементКлассификатора.Код,
			ПагинацияНомерСтраницы-1, ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	ИначеЕсли ЭлементКлассификатора.Действие = "ЗагрузкаВетки" Тогда
		
		// Перед переходом от режима списка в режим дерева необходимо поместить в основной кэш 
		// выбранные элементы и загрузить по ним ветки
		СинхронизироватьКэши(АдресКэша, АдресКэшаРезультатПоиска, ВыбранныеЭлементы, 
			ПоследнийВыделенныйЭлемент, УникальныйИдентификатор);
		
		// Загрузка недостающих данных для позиционирования на выбранном элементе
		ОблачныеКлассификаторыКлиент.ПолучитьВеткуОКПД2(ЭлементКлассификатора.Код, АдресКэша, РежимВыбораЭлемента,
			ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = КоличествоЗаданий > 0;
	Элементы.ПагинацияСледующая.Доступность = Ложь;
	Элементы.ПагинацияПредыдущая.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКлассификатораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Или Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭлементКлассификатора.Действие = "ЗагрузкаВетки" Тогда
		АдресКэша = Результат.АдресРезультата;
		ВосстановитьДерево();
	Иначе
		ЗагрузитьДанныеДерева(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
		
	// Разворачивание загруженного не листового элемента
	Если ДополнительныеПараметры.ЭлементКлассификатора.Действие = "ЗагрузкаПотомков" Тогда
		Элементы.Дерево.Развернуть(ДополнительныеПараметры.ЭлементКлассификатора.ИдентификаторСтроки);
		Элементы.Дерево.ТекущаяСтрока = ДополнительныеПараметры.ЭлементКлассификатора.ИдентификаторСтроки;
	КонецЕсли;
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	Элементы.ДекорацияДлительнаяОперация.Видимость = КоличествоЗаданий > 0;
	ДеревоВОбработке = Ложь;
	ПопытокЗагрузить = 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДерева(АдресРезультата, ДополнительныеПараметры, Отказ = Ложь)
	
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементКлассификатора = ДополнительныеПараметры.ЭлементКлассификатора;
	
	ЭтоПоисковыйЗапрос = ЭлементКлассификатора.Действие = "ПоискПоСтроке";
	Кэш = ДополнитьКэшДаннымиСервиса(?(ЭтоПоисковыйЗапрос, АдресКэшаРезультатПоиска, АдресКэша), 
									УникальныйИдентификатор, ДанныеСервиса, ЭтоПоисковыйЗапрос);
	
									
	Если ЭлементКлассификатора.Действие = "ЗагрузкаРазделов" Тогда // Начальная загрузка разделов
		
		ЗаполнитьРазделы(Кэш);
		
	ИначеЕсли ЭлементКлассификатора.Действие = "ЗагрузкаПотомков" И ДанныеСервиса.Количество() > 0 Тогда
		
		СтрокаРодитель = Дерево.НайтиПоИдентификатору(ЭлементКлассификатора.ИдентификаторСтроки);
		СтрокаРодитель.ПолучитьЭлементы().Очистить();
		
		ДобавитьПодчиненныеЭлементы(Кэш, ЭлементКлассификатора);
		
	ИначеЕсли ЭлементКлассификатора.Действие = "ПоискПоСтроке" Тогда
		
		ЗаполнитьДеревоПоРезультатамПоиска(Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделы(Кэш)
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	Для Каждого СтрокаКэша Из Кэш Цикл
		СтрокаРаздел = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаздел, СтрокаКэша);
		
		Если СтрокаРаздел.Загружен Тогда
			СтрокаРаздел.ИндексКартинки = ?(РежимВыбораЭлемента,0,2);
		КонецЕсли;
		
		Если СтрокаРаздел.Пометка > 1 Тогда
			СтрокаРаздел.КоличествоДетейПометка = ВесГрупповогоЭлемента;
		КонецЕсли;	
		
		СтрокаРаздел.ЭтоРаздел = ПустаяСтрока(СтрокаКэша.КодРодителя);
		СтрокаРаздел.ЭтоАктуальныйКод = КодАктуален(СтрокаКэша.ДатаНачалаДействия, СтрокаКэша.ДатаОкончанияДействия);
		СтрокаРаздел.Представление = ПолучитьПредставлениеЭлементаДерева(СтрокаКэша, ОтображатьУтратившиеСилу);
		СтрокаРаздел.ПолучитьЭлементы().Добавить();
	КонецЦикла;
	
	Если СтрокиДерева.Количество() Тогда
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокиДерева[0].Идентификатор, СтрокиДерева[0].Код, Кэш);
		ПредставлениеЭлементаВладелец = СтрокиДерева[0].Идентификатор;
		Элементы.Дерево.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Кэш, ЭлементКлассификатора)
	
	Отбор = Новый Структура("КодРодителя", ЭлементКлассификатора.Код);
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	СтрокаРодитель = Дерево.НайтиПоИдентификатору(ЭлементКлассификатора.ИдентификаторСтроки);
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	ПодчиненныеСтроки.Очистить();
	КоличествоДетей = 0;
	КоличествоДетейПометка = 0;
	
	АктуальныеВерсии = Новый Соответствие;
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		ЭтоАктуальныйКод = КодАктуален(СтрокаКэша.ДатаНачалаДействия, СтрокаКэша.ДатаОкончанияДействия);
		
		Если Не ЭтоАктуальныйКод И Не ОтображатьУтратившиеСилу Тогда 
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ПодчиненныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);
		
		Если СтрокаРодитель.Пометка = 1 И СтавитьФлагНаПодчиненных Тогда
			НоваяСтрока.Пометка = 1;
		КонецЕсли;
		
		НоваяСтрока.ЭтоРаздел 	  = ПустаяСтрока(СтрокаКэша.КодРодителя);
		НоваяСтрока.ЭтоАктуальныйКод = ЭтоАктуальныйКод;
		НоваяСтрока.ЭтоЛистовой   = СтрокаКэша[?(ОтображатьУтратившиеСилу, "ПотомковИтого", "ПотомковАктуальных")] = 0;
		НоваяСтрока.Представление = ПолучитьПредставлениеЭлементаДерева(СтрокаКэша, ОтображатьУтратившиеСилу);
		
		Если НоваяСтрока.ЭтоЛистовой Тогда
			НоваяСтрока.ИндексКартинки = 1;
		Иначе
			Если НоваяСтрока.Загружен Тогда
				НоваяСтрока.ИндексКартинки = ?(РежимВыбораЭлемента,0,2);
			КонецЕсли;
			
			Если НоваяСтрока.Пометка > 1 Тогда
				НоваяСтрока.КоличествоДетейПометка = ВесГрупповогоЭлемента;
			КонецЕсли;	
			
			НоваяСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
				
		СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, НоваяСтрока);
		
		КоличествоДетей        = КоличествоДетей + 1;
		КоличествоДетейПометка = КоличествоДетейПометка + ?(НоваяСтрока.Пометка > 1, ВесГрупповогоЭлемента, НоваяСтрока.Пометка);
		
		Если Элементы.ТолькоВыбранные.Пометка
			И Не НоваяСтрока.Пометка Тогда
			ПодчиненныеСтроки.Удалить(НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, НоваяСтрока);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия < Дата('00011001') 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда	
			ПодчиненныеСтроки.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, НоваяСтрока);
			Продолжить;
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда
			ПодчиненныеСтроки.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, НоваяСтрока);
			Продолжить;
		Иначе	
			ПодчиненныеСтроки.Удалить(НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаРодитель.КоличествоДетей        = КоличествоДетей;
	СтрокаРодитель.КоличествоДетейПометка = КоличествоДетейПометка;
	СтрокаРодитель.ДетиКэшированы         = Истина;
	СтрокаРодитель.ВОбработке             = Ложь;
	
	Если ПредставлениеЭлементаВладелец <> СтрокаРодитель.Идентификатор Тогда
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокаРодитель.Идентификатор, СтрокаРодитель.Код, Кэш);
		ПредставлениеЭлементаВладелец = СтрокаРодитель.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатамПоиска(Кэш = Неопределено)
	
	Если Кэш = Неопределено Тогда
		УничтожитьКэш = Истина;
		Кэш = ИнициализироватьКэш(АдресКэшаРезультатПоиска);
	Иначе
		УничтожитьКэш = Ложь;
	КонецЕсли;
	
	ОсновнойКэш = ИнициализироватьКэш(АдресКэша);
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	АктуальныеВерсии = Новый Соответствие;
	
	Для Каждого СтрокаКэша Из Кэш Цикл
		
		ЭтоАктуальныйКод = КодАктуален(СтрокаКэша.ДатаНачалаДействия, СтрокаКэша.ДатаОкончанияДействия);
		
		Если Не ЭтоАктуальныйКод И Не ОтображатьУтратившиеСилу Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаКэша.КодРодителя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		СтрокаДерева.ЭтоЛистовой    = СтрокаКэша[?(ОтображатьУтратившиеСилу, "ПотомковИтого", "ПотомковАктуальных")] = 0;
		СтрокаДерева.Представление  = ПолучитьПредставлениеЭлементаДерева(СтрокаКэша, ОтображатьУтратившиеСилу);
		СтрокаДерева.ЭтоАктуальныйКод = ЭтоАктуальныйКод;
 
		Если СтрокаДерева.ЭтоЛистовой Тогда
			СтрокаДерева.ИндексКартинки = 1;
		Иначе	
			Если СтрокаДерева.Загружен Тогда
				СтрокаДерева.ИндексКартинки = ?(РежимВыбораЭлемента,0,2);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаДерева.Пометка = 1;
		КонецЕсли;
		
		ЭлементВОсновномКэше = ОсновнойКэш.Найти(СтрокаКэша.Код, "Код");
		Если ЭлементВОсновномКэше <> Неопределено Тогда
			ЭлементВОсновномКэше.Загружен = СтрокаДерева.Загружен;
			ЭлементВОсновномКэше.ПодчиненныеЗагружены = СтрокаДерева.ПодчиненныеЗагружены;
		КонецЕсли;	
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия < Дата('00011001') 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда	
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
			Продолжить;
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
			Продолжить;
		Иначе	
			СтрокиДерева.Удалить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Дерево.Отображение           = ОтображениеТаблицы.Список;
	Элементы.ДеревоПометка.ТолькоПросмотр = НЕ ЗагружатьСИерархией;
	
	Если ПагинацияНомерСтраницы > 1
		Или СтрокиДерева.Количество() = 100 Тогда
		ОтображатьГруппуПагинация = Истина;
	Иначе
		ОтображатьГруппуПагинация = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПагинация.Видимость = ОтображатьГруппуПагинация;
	
	Если Элементы.ГруппаПагинация.Видимость Тогда
		Элементы.ПагинацияНомерСтраницы.Заголовок = СтрШаблон(НСтр("ru = 'Страница %1'"), Строка(ПагинацияНомерСтраницы));
		Элементы.ПагинацияВНачало.Доступность = ПагинацияНомерСтраницы > 1;
		Элементы.ПагинацияПредыдущая.Доступность = ПагинацияНомерСтраницы > 1;
		Элементы.ПагинацияСледующая.Доступность = СтрокиДерева.Количество() = 100;
	КонецЕсли;
	
	Если УничтожитьКэш Тогда
		Кэш = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДерево()
	
	ИдентификаторыРазвернутых = Новый Массив;
	ВосстановитьДеревоИзКэша(ИдентификаторыРазвернутых);
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыРазвернутых Цикл
		Элементы.Дерево.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
	Элементы.Дерево.ТекущаяСтрока = ПоследнийВыделенныйЭлемент;
	
	ДеревоВОбработке = Ложь;
	ПопытокЗагрузить = 0;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДеревоПоРезультатамПоиска()

	ИдентификаторыРазвернутых = Новый Массив;
	УстановитьРежимТолькоВыбранные(Истина, ИдентификаторыРазвернутых);
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыРазвернутых Цикл
		Элементы.Дерево.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
	Элементы.Дерево.ТекущаяСтрока = ПоследнийВыделенныйЭлемент;
	ДеревоВОбработке = Ложь;
	ПопытокЗагрузить = 0;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьДеревоИзКэша(ИдентификаторыРазвернутых, СтрокаДереваКорень = Неопределено)
	
	Кэш = ИнициализироватьКэш(АдресКэша);
	
	Если СтрокаДереваКорень = Неопределено Тогда
		СтрокиДерева = Дерево.ПолучитьЭлементы();
		КодРодителя  = "";
	Иначе
		СтрокиДерева = СтрокаДереваКорень.ПолучитьЭлементы();
		КодРодителя  = СтрокаДереваКорень.Код;
	КонецЕсли;
	
	Отбор = Новый Структура("КодРодителя", КодРодителя);
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	СтрокиДерева.Очистить();
	
	РазвернутыеПодчиненные = Новый Массив;
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		ЭтоАктуальныйКод = КодАктуален(СтрокаКэша.ДатаНачалаДействия, СтрокаКэша.ДатаОкончанияДействия);
		
		Если Не ЭтоАктуальныйКод И Не ОтображатьУтратившиеСилу Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		СтрокаДерева.ЭтоРаздел     = ПустаяСтрока(СтрокаКэша.КодРодителя);
		СтрокаДерева.ЭтоЛистовой   = СтрокаКэша[?(ОтображатьУтратившиеСилу, "ПотомковИтого", "ПотомковАктуальных")] = 0;
		СтрокаДерева.Представление = ПолучитьПредставлениеЭлементаДерева(СтрокаКэша, ОтображатьУтратившиеСилу);
		СтрокаДерева.ЭтоАктуальныйКод = ЭтоАктуальныйКод;
		
		Если СтрокаДерева.ЭтоЛистовой Тогда
			СтрокаДерева.ИндексКартинки = 1;
		Иначе	
			Если СтрокаДерева.Загружен Тогда
				СтрокаДерева.ИндексКартинки = ?(РежимВыбораЭлемента,0,2);
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДерева, СтрокаКэша.Код, РазвернутыеПодчиненные);
		
		ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаДерева.Пометка = 1;
		КонецЕсли;
		
		Для каждого ИдентификаторСтроки Из РазвернутыеПодчиненные Цикл
			ИдентификаторыРазвернутых.Добавить(ИдентификаторСтроки);
		КонецЦикла;
		
	КонецЦикла;
		
	Если Не ПустаяСтрока(КодВыбранногоЭлемента) Тогда
		КодВыбранногоЭлемента = "";
	КонецЕсли;
		
	Элементы.Дерево.Отображение           = ОтображениеТаблицы.Дерево;
	Элементы.ДеревоПометка.ТолькоПросмотр = Ложь;
	Элементы.КнопкиДерева.Доступность     = Истина;
	Элементы.СтавитьФлагНаПодчиненных.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДереваРодитель, КодРодителя, ИдентификаторыРазвернутых)
	
	Отбор.КодРодителя = КодРодителя;
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	Если РежимВыбораЭлемента
		И Не ПустаяСтрока(КодВыбранногоЭлемента) Тогда
		Если СтрокаДереваРодитель.Код = КодВыбранногоЭлемента Тогда
			ПоследнийВыделенныйЭлемент = СтрокаДереваРодитель.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Если СтрокаДереваРодитель.Идентификатор = ПоследнийВыделенныйЭлемент Тогда
			ПоследнийВыделенныйЭлемент = СтрокаДереваРодитель.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Не МассивСтрок.Количество() Тогда
		Если СтрокаДереваРодитель.ИндексКартинки <> 1 Тогда
			СтрокаДереваРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Наличие хотя бы одного ребенка является однозначным признаком наличия в кэше всех детей.
	СтрокаДереваРодитель.ДетиКэшированы = Истина;
	АктуальныеВерсии = Новый Соответствие;
	СтрокиДерева = СтрокаДереваРодитель.ПолучитьЭлементы();

	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		ЭтоАктуальныйКод = КодАктуален(СтрокаКэша.ДатаНачалаДействия, СтрокаКэша.ДатаОкончанияДействия);
		
		Если Не ЭтоАктуальныйКод И Не ОтображатьУтратившиеСилу Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаДерева = СтрокиДерева.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		СтрокаДерева.ЭтоРаздел 	   = ПустаяСтрока(СтрокаКэша.КодРодителя);
		СтрокаДерева.ЭтоЛистовой   = СтрокаКэша[?(ОтображатьУтратившиеСилу, "ПотомковИтого", "ПотомковАктуальных")] = 0;
		СтрокаДерева.Представление = ПолучитьПредставлениеЭлементаДерева(СтрокаКэша, ОтображатьУтратившиеСилу);
		СтрокаДерева.ЭтоАктуальныйКод = ЭтоАктуальныйКод;
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия < Дата('00011001') 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда	
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
			Продолжить;
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия 
			И ПоследняяВерсия.ДатаОкончанияДействия > Дата('00011001') Тогда
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
			Продолжить;
		Иначе	
			СтрокиДерева.Удалить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		
		ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаДерева.Пометка = 1;
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоЛистовой Тогда
			СтрокаДерева.ИндексКартинки = 1;
		Иначе	
			Если СтрокаДерева.Загружен Тогда
				СтрокаДерева.ИндексКартинки = ?(РежимВыбораЭлемента,0,2);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДереваРодитель.Пометка = 1 И СтавитьФлагНаПодчиненных Тогда
			СтрокаДерева.Пометка = 1;			
		Иначе
			Если СтрокаДерева.Пометка = 0 Тогда
				ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
				СтрокаДерева.Пометка = ЭлементСписка <> Неопределено;
				Если Не СтрокаДерева.Пометка 
					И СтрокаДерева.Загружен Тогда
					СтрокаДерева.Пометка = ?(СтрокаДерева.Загружен И СтрокаДерева.ЭтоЛистовой,1,0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДерева, СтрокаКэша.Код, ИдентификаторыРазвернутых);
		
		СтрокаДереваРодитель.КоличествоДетей        = СтрокаДереваРодитель.КоличествоДетей + 1;
		СтрокаДереваРодитель.КоличествоДетейПометка = СтрокаДереваРодитель.КоличествоДетейПометка
			+ ?(СтрокаДерева.Пометка > 1, ВесГрупповогоЭлемента, СтрокаДерева.Пометка);
		
	КонецЦикла;
	
	Если СтрокаДереваРодитель.КоличествоДетейПометка Тогда
		Если СтрокаДереваРодитель.Пометка <> 1 Или СтавитьФлагНаПодчиненных Тогда
			СтрокаДереваРодитель.Пометка = 
				?(СтрокаДереваРодитель.КоличествоДетей = СтрокаДереваРодитель.КоличествоДетейПометка, 1, 2);
		КонецЕсли;	
	Иначе
		Если СтрокаДереваРодитель.Пометка <> 1 Или СтавитьФлагНаПодчиненных Тогда	
			СтрокаДереваРодитель.Пометка = 0;
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДереваРодитель.Идентификатор);
	Если ЭлементСписка <> Неопределено Тогда	
		Если ЭлементСписка.Пометка Тогда
			ИдентификаторыРазвернутых.Добавить(СтрокаДереваРодитель.ПолучитьИдентификатор());
		Иначе
			ИдентификаторыРазвернутых.Очистить();
		КонецЕсли;
	Иначе
		ИдентификаторыРазвернутых.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоВыбранные(ПредварительноВосстановить = Ложь, ИдентификаторыРазвернутых = Неопределено)
	
	Если ПредварительноВосстановить Тогда
		ВосстановитьДеревоИзКэша(?(ИдентификаторыРазвернутых = Неопределено, Новый Массив, ИдентификаторыРазвернутых));
	КонецЕсли;
	
	УдалитьСтрокиДереваБезПометки(Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтрокиДереваБезПометки(ДанныеДерева)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДанныеДерева Цикл
		Если Не СтрокаДерева.Пометка
			Или (СтрокаДерева.Загружен 
			  И СтрокаДерева.ПодчиненныеЗагружены ) Тогда
			СтрокиКУдалению.Добавить(СтрокаДерева);
		Иначе
			
			Если Не СтрокаДерева.Пометка = 1 Тогда
				
				ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
				УдалитьСтрокиДереваБезПометки(ПодчиненныеСтроки);
				
				Если Не ПодчиненныеСтроки.Количество() Тогда
					СтрокиКУдалению.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СтрокиКУдалению Цикл
		ДанныеДерева.Удалить(СтрокаДерева);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаДерева(ДанныеСервиса, ОтображатьУтратившиеСилу)
	
	Результат = ?(ПустаяСтрока(ДанныеСервиса.КодРодителя),"",СокрЛП(ДанныеСервиса.Код) + " ") 
				+ СокрЛП(ДанныеСервиса.Наименование) 
				+ ?(ДанныеСервиса.ПотомковИтого = 0,"", " (" + Формат(ДанныеСервиса.ПотомковИтого,"ЧГ=") + ")");
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция КодАктуален(НачалоПериодаДействия, КонецПериодаДействия)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если НачалоПериодаДействия > ТекущаяДата Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если КонецПериодаДействия > Дата('00011001') И КонецПериодаДействия < ТекущаяДата Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти

#Область ПредставлениеЭлементовКлассификатора

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлемента(ИдентификаторЭлемента, КодЭлемента, ДанныеКэша)
	
	Если ТипЗнч(ДанныеКэша) = Тип("ТаблицаЗначений") Тогда
		Кэш = ДанныеКэша;
	Иначе
		Кэш = ИнициализироватьКэш(ДанныеКэша);
	КонецЕсли;
	
	Отбор = Новый Структура("Код", КодЭлемента);
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	ДанныеЭлемента = Неопределено;
	ДанныеВерсий   = Кэш.СкопироватьКолонки();
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		Если СтрокаКэша.Идентификатор = ИдентификаторЭлемента Тогда
			ДанныеЭлемента = СтрокаКэша;
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеВерсий.Добавить(), СтрокаКэша);
		
	КонецЦикла;
	
	Если ДанныеЭлемента = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если ДанныеВерсий.Количество() Тогда
		ДанныеВерсий.Сортировать("ДатаНачалаДействия Убыв");
	КонецЕсли;
	
	Возврат СформироватьПредставлениеЭлемента(ДанныеЭлемента, ДанныеВерсий);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеЭлемента(ДанныеЭлемента, ДанныеВерсий)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.РаботаСОблачнымиКлассификаторами.ПолучитьМакет("ПФ_MXL_КарточкаОКПД2");
	
	ОбластьНаименование = Макет.ПолучитьОбласть("ОбластьНаименование");
	
	ОбластьНаименование.Параметры.Наименование = ДанныеЭлемента.Наименование;
	ТабличныйДокумент.Вывести(ОбластьНаименование);
	
	Если Не ПустаяСтрока(ДанныеЭлемента.КодРодителя) Тогда // не раздел
		
		ОбластьОсновнаяИнформация    = Макет.ПолучитьОбласть("ОбластьОсновнаяИнформация");
		ОбластьРасширеннаяИнформация = Макет.ПолучитьОбласть("ОбластьРасширеннаяИнформация");
		
		ОбластьОсновнаяИнформация.Параметры.Заполнить(ДанныеЭлемента);
		ТабличныйДокумент.Вывести(ОбластьОсновнаяИнформация);
		
		ОбластьРасширеннаяИнформация.Параметры.Заполнить(ДанныеЭлемента);
		ТабличныйДокумент.Вывести(ОбластьРасширеннаяИнформация);
		
		Если ДанныеВерсий.Количество() Тогда
			
			ОбластьВерсииЗаголовок   = Макет.ПолучитьОбласть("ОбластьВерсииЗаголовок");
			ОбластьВерсияГруппировка = Макет.ПолучитьОбласть("ОбластьВерсияГруппировка");
			ОбластьВерсия            = Макет.ПолучитьОбласть("ОбластьВерсия");
			
			ТабличныйДокумент.Вывести(ОбластьВерсииЗаголовок);
			
			Для Каждого Версия Из ДанныеВерсий Цикл
				
				ДатаНачалаДействия    = Формат(Версия.ДатаНачалаДействия, "ДЛФ=DD");
				ДатаОкончанияДействия = Формат(Версия.ДатаОкончанияДействия, "ДЛФ=DD");
				
				ОбластьВерсияГруппировка.Параметры.ЗаголовокГруппировки = СтрШаблон("%1 - %2", ДатаНачалаДействия,
					ДатаОкончанияДействия);
				ТабличныйДокумент.Вывести(ОбластьВерсияГруппировка);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				ОбластьВерсия.Параметры.Заполнить(Версия);
				ТабличныйДокумент.Вывести(ОбластьВерсия);
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ПустаяСтрока(ДанныеЭлемента.Описание) Тогда
			ОбластьОписание = Макет.ПолучитьОбласть("ОбластьОписание");
			ОбластьОписание.Параметры.Описание = ДанныеЭлемента.Описание;
			ТабличныйДокумент.Вывести(ОбластьОписание);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область УправлениеФлажками

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьСостояниеФлажка(СтрокаДерева)
	
	Если СтрокаДерева.Загружен Тогда
		СтрокаДерева.Пометка = ?(Не СтрокаДерева.Пометка, СтрокаДерева.Пометка + 1, СтрокаДерева.Пометка);
	Иначе
		СтрокаДерева.Пометка = ?(СтрокаДерева.Пометка > 1, 0, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПометкаПриИзмененииНаСервере()

	СтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	  
	Если Элементы.ТолькоВыбранные.Пометка
		И СтрокаДерева.Пометка = 1
		И СтрокаДерева.ДетиКэшированы Тогда
		ВосстановитьДеревоИзКэша(Новый Массив, СтрокаДерева);
	КонецЕсли;
	
	ПересчитатьСостоянияФлажковПредков(СтрокаДерева);
	
	УстановитьОтметкиПотомков(СтрокаДерева, СтавитьФлагНаПодчиненных);
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УстановитьРежимТолькоВыбранные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПометкаПриИзмененииНаСервере()
	
	ТекущаяСтрокаСписка = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	
	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, ТекущаяСтрокаСписка);

	Если Не СтавитьФлагНаПодчиненных Тогда
		Возврат;
	КонецЕсли;	
	
	ОсновнойКэш = ИнициализироватьКэш(АдресКэша);
	ПоисковыйКэш = ИнициализироватьКэш(АдресКэшаРезультатПоиска);
	
	ТекущийКод = СокрЛП(ТекущаяСтрокаСписка.Код);
	Для Каждого СтрокаСписка Из Дерево.ПолучитьЭлементы() Цикл
		КодЭлемента = СокрЛП(СтрокаСписка.Код);
		
		Если КодЭлемента = ТекущийКод Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаСписка.Загружен И (СтрокаСписка.ЭтоЛистовой 
			Или СтрокаСписка.ПодчиненныеЗагружены) Тогда	
			Продолжить;
		КонецЕсли;
		
		СтрокаКэша = ПоисковыйКэш.Найти(СтрокаСписка.Идентификатор, "Идентификатор");
		Если СтрокаКэша = Неопределено Тогда
			СтрокаКэша = ОсновнойКэш.Найти(СтрокаСписка.Идентификатор, "Идентификатор");
		КонецЕсли;	
		
		КоличествоПомеченных = 0;
		Если ТекущийКод = Лев(КодЭлемента, СтрДлина(ТекущийКод)) Тогда
			Если СтрокаСписка.Пометка <> ТекущаяСтрокаСписка.Пометка Тогда
				СтрокаСписка.Пометка = ТекущаяСтрокаСписка.Пометка;
				
				КоличествоПомеченных = КоличествоПомеченных + 1;
				СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаСписка);
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяСтрокаСписка.КоличествоДетейПометка = ТекущаяСтрокаСписка.КоличествоДетейПометка + КоличествоПомеченных;
		
		Если КодЭлемента = Лев(ТекущийКод, СтрДлина(КодЭлемента)) Тогда
			СтрокаСписка.КоличествоДетейПометка = ?(ТекущаяСтрокаСписка.Пометка,1,-1) + СтрокаСписка.КоличествоДетейПометка;
			
			Если СтрокаСписка.КоличествоДетейПометка = 0 Тогда
				СтрокаСписка.Пометка = 0;
			Иначе
				СтрокаСписка.Пометка = ?(СтрокаСписка.КоличествоДетейПометка = СтрокаКэша[?(ОтображатьУтратившиеСилу, "ПотомковИтого", "ПотомковАктуальных")], 1, 2);
				СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаСписка);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;

	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УстановитьРежимТолькоВыбранные();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтметкиПотомков(СтрокаДерева, Рекурсивно)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	КоличествоДетейПометка = 0;
	
	Для Каждого СтрокаДереваПодчиненная Из ПодчиненныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДереваПодчиненная.Код) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДереваПодчиненная.Загружен Тогда
			КоличествоДетейПометка = КоличествоДетейПометка 
				+ ?(СтрокаДереваПодчиненная.ЭтоЛистовой, 1, ВесГрупповогоЭлемента);
			Если СтрокаДереваПодчиненная.ЭтоЛистовой 
				Или СтрокаДереваПодчиненная.ПодчиненныеЗагружены Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Рекурсивно Тогда
			Если СтрокаДерева.Пометка = 1 Тогда
				
				СтрокаДереваПодчиненная.Пометка = 1;
				КоличествоДетейПометка = КоличествоДетейПометка 
					+ ?(СтрокаДереваПодчиненная.ЭтоЛистовой ИЛИ Рекурсивно, 1, ВесГрупповогоЭлемента);

				УстановитьОтметкиПотомков(СтрокаДереваПодчиненная, Рекурсивно);
			Иначе
				Если СтрокаДереваПодчиненная.ЭтоЛистовой Тогда
					СтрокаДереваПодчиненная.Пометка = СтрокаДереваПодчиненная.Загружен;
				Иначе	
					СтрокаДереваПодчиненная.Пометка = ?(СтрокаДереваПодчиненная.Загружен, 2, 0);
				КонецЕсли;	
				
				КоличествоДетейПометка = КоличествоДетейПометка 
					+ ?(СтрокаДереваПодчиненная.Пометка > 1, ВесГрупповогоЭлемента, СтрокаДереваПодчиненная.Пометка);
				УстановитьОтметкиПотомков(СтрокаДереваПодчиненная, Рекурсивно);
			КонецЕсли;
		КонецЕсли;
		
		СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДереваПодчиненная);
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоДетейПометка = КоличествоДетейПометка;
	
	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДерева);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСостоянияФлажковПредков(СтрокаДерева)
	
	СтрокаДереваРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаДереваРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеФлажкаРодителяДо = СтрокаДереваРодитель.Пометка;
	
	КоличествоДетейПометка = 0;
	Для Каждого СтрокаТекущегоУровня Из СтрокаДереваРодитель.ПолучитьЭлементы() Цикл
		КоличествоДетейПометка = КоличествоДетейПометка
				+ ?(СтрокаТекущегоУровня.Пометка > 1, ВесГрупповогоЭлемента, СтрокаТекущегоУровня.Пометка);
	КонецЦикла;
	
	СтрокаДереваРодитель.КоличествоДетейПометка = КоличествоДетейПометка;
	
	Если СтрокаДереваРодитель.КоличествоДетейПометка Тогда
		СтрокаДереваРодитель.Пометка = 
			?(СтрокаДереваРодитель.КоличествоДетей = СтрокаДереваРодитель.КоличествоДетейПометка 
			И СтавитьФлагНаПодчиненных, 1, 2);
	Иначе
		СтрокаДереваРодитель.Пометка = ?(СтрокаДереваРодитель.Загружен, 2, 0);
	КонецЕсли;

	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДереваРодитель);
	
	Если СостояниеФлажкаРодителяДо <> СтрокаДереваРодитель.Пометка Тогда
		ПересчитатьСостоянияФлажковПредков(СтрокаДереваРодитель);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, ДанныеЭлемента)
	
	Если ДанныеЭлемента.Идентификатор = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Элемент = ВыбранныеЭлементы.НайтиПоЗначению(ДанныеЭлемента.Идентификатор);
	
	Если Элемент = Неопределено И ДанныеЭлемента.Пометка = 1 
		И (НЕ ДанныеЭлемента.Загружен ИЛИ НЕ ДанныеЭлемента.ЭтоЛистовой) Тогда
			ВыбранныеЭлементы.Добавить(ДанныеЭлемента.Идентификатор);
	ИначеЕсли Элемент <> Неопределено И ДанныеЭлемента.Пометка <> 1 Тогда
		ВыбранныеЭлементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьФлажки(Пометка)
	
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Загружен 
			И (СтрокаДерева.ЭтоЛистовой Или СтрокаДерева.ПодчиненныеЗагружены) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева.Пометка = ?(Пометка, 0, 2);
		ПереопределитьСостояниеФлажка(СтрокаДерева);
		УстановитьОтметкиПотомков(СтрокаДерева, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеПоиском

&НаКлиенте
Процедура ВыполнитьПоискЭлементовПоСтроке()
	
	Если Не ДеревоВОбработке Тогда
		ОтключитьОбработчикОжидания("ВыполнитьПоискЭлементовПоСтроке");
		
		СтрокаПоиска = СокрЛП(Элементы.СтрокаПоиска.ТекстРедактирования);
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
				ПриОчисткеСтрокиПоиска();
			КонецЕсли;
			
			Возврат;
		ИначеЕсли СтрДлина(СтрокаПоиска) < 2 Тогда
			ТекстСообщения = НСтр("ru = 'Для поиска используйте строку длиной от двух символов'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтрокаПоиска");
			Возврат;
		КонецЕсли;
		
		Элементы.СтавитьФлагНаПодчиненных.Доступность = Ложь;
		Элементы.КнопкиДерева.Доступность = Ложь;
		
		ОбновитьИсториюПоиска();
		
		ПагинацияНомерСтраницы = 1;
		
		ПостроитьДеревоКлассификатора(Новый Структура("Код, Действие", СтрокаПоиска, "ПоискПоСтроке"));
		
	Иначе
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ВыполнитьПоискЭлементовПоСтроке");
			ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюПоиска()
	
	История        = Элементы.СтрокаПоиска.СписокВыбора;
	ЭлементИстории = История.НайтиПоЗначению(СтрокаПоиска);
	
	Если ЭлементИстории = Неопределено Тогда
		История.Вставить(0, СтрокаПоиска);
	Иначе
		ИндексЭлемента = История.Индекс(ЭлементИстории);
		История.Сдвинуть(ИндексЭлемента, -ИндексЭлемента);
	КонецЕсли;
	
	Если История.Количество() > 5 Тогда
		Для ИндексЭлемента = 5 По История.Количество() - 1 Цикл
			История.Удалить(ИндексЭлемента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеСтрокиПоиска()
	
	Если Не ДеревоВОбработке Тогда
		ОтключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска");
		
		ЭлементКлассификатора = Новый Структура("Действие", "ЗагрузкаРазделов");
		
		СтрокаДерева = Элементы.Дерево.ТекущиеДанные;
		
		Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
			Если СтрокаДерева <> Неопределено
				И НЕ ЭлементНайденВОсновномКэше(СтрокаДерева.Код, АдресКэша) Тогда
				ЭлементКлассификатора = Новый Структура("Код, Действие", СтрокаДерева.Код, "ЗагрузкаВетки");
			КонецЕсли;
			
			Если СтрокаДерева <> Неопределено Тогда
				ПоследнийВыделенныйЭлемент = СтрокаДерева.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
		
		Элементы.ГруппаПагинация.Видимость = Ложь;
		Элементы.СтавитьФлагНаПодчиненных.Доступность = Истина;
		Элементы.КнопкиДерева.Доступность = Истина;
	Иначе
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска");
		 	ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшем

// Получение описания кэша
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица для хранения кэшируемых данных.
//
&НаСервереБезКонтекста
Функция ПолучитьОписаниеКэша()
	
	ТаблицаКэша = ОблачныеКлассификаторыСлужебный.ОписаниеЭлементовОКПД2();
	
	ТаблицаКэша.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКэша.Колонки.Добавить("Загружен", Новый ОписаниеТипов("Булево"));
	ТаблицаКэша.Колонки.Добавить("ПодчиненныеЗагружены", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаКэша;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьКэш(АдресКэша = "")
	
	Если ЭтоАдресВременногоХранилища(АдресКэша) Тогда
		Кэш = ПолучитьИзВременногоХранилища(АдресКэша);
	Иначе
		Кэш = ПолучитьОписаниеКэша();
	КонецЕсли;
	
	Возврат Кэш;
	
КонецФункции

// Дополнение кэша данными сервиса
//
// Параметры:
//  АдресКэша              - Строка - адрес таблицы кэша во временном хранилище.
//  ИдентификаторФормы     - УникальныйИдентификатор - уникальный идентификатор формы.
//  ДанныеСервиса          - ТаблицаЗначений - данные, полученные в ответе сервиса.
//  ПредварительноОчистить - Булево - признак необходимости очистки таблицы кэша перед обновлением.
//
&НаСервереБезКонтекста
Функция ДополнитьКэшДаннымиСервиса(АдресКэша, ИдентификаторФормы, ДанныеСервиса, ПредварительноОчистить = Ложь)
	
	Если ПредварительноОчистить Тогда
		Кэш = ИнициализироватьКэш();
	Иначе
		Кэш = ИнициализироватьКэш(АдресКэша);
	КонецЕсли;
	
	Для Каждого СтрокаДанные Из ДанныеСервиса Цикл
		ЗаполнитьЗначенияСвойств(Кэш.Добавить(), СтрокаДанные);
	КонецЦикла;
	
	Если Не ПредварительноОчистить Тогда
		Кэш.Сортировать("Порядок Возр");
	КонецЕсли;
	
	АдресКэша = ПоместитьВоВременноеХранилище(Кэш, ?(ЭтоАдресВременногоХранилища(АдресКэша),
		ИдентификаторФормы, АдресКэша));
	
	Возврат Кэш;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементНайденВОсновномКэше(Код, АдресКэша)
	
	Кэш = ИнициализироватьКэш(АдресКэша);
	
	Кэш.Индексы.Добавить("Код");
	
	Возврат Кэш.Найти(Код, "Код") <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СинхронизироватьКэши(АдресОсновногоКэша, АдресДополнительногоКэша, ВыбранныеЭлементы, 
		ПоследнийВыделенныйЭлемент, ИдентификаторФормы)
	
	Если Не ЭтоАдресВременногоХранилища(АдресОсновногоКэша)
		Или Не ЭтоАдресВременногоХранилища(АдресДополнительногоКэша) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойКэш = ИнициализироватьКэш(АдресОсновногоКэша);
	ОсновнойКэш.Индексы.Добавить("Идентификатор");
	
	ДополнительныйКэш = ИнициализироватьКэш(АдресДополнительногоКэша);
	Если ДополнительныйКэш = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ДополнительныйКэш.Индексы.Добавить("Идентификатор");
	
	Для Каждого ВыделенныйКод Из ВыбранныеЭлементы Цикл
		СтрокаОсновногоКэша = ОсновнойКэш.Найти(ВыделенныйКод.Значение, "Идентификатор");
		Если СтрокаОсновногоКэша <> Неопределено Тогда
			СтрокаОсновногоКэша.Пометка = 1;
		Иначе
			СтрокаДополнительногоКэша = ДополнительныйКэш.Найти(ВыделенныйКод.Значение, "Идентификатор");
			Если СтрокаДополнительногоКэша <> Неопределено Тогда 
				СтрокаОсновногоКэша = ОсновнойКэш.Добавить(); 
				
				ЗаполнитьЗначенияСвойств(СтрокаОсновногоКэша, СтрокаДополнительногоКэша);
				
				СтрокаОсновногоКэша.Пометка = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОсновногоКэша Из ОсновнойКэш Цикл
		Если ВыбранныеЭлементы.НайтиПоЗначению(СтрокаОсновногоКэша.Идентификатор) = Неопределено
			И СтрокаОсновногоКэша.Пометка = 1 Тогда
			СтрокаОсновногоКэша.Пометка = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийВыделенныйЭлемент <> Неопределено
		И ОсновнойКэш.Найти(ПоследнийВыделенныйЭлемент, "Идентификатор") = Неопределено Тогда
		СтрокаДополнительногоКэша = ДополнительныйКэш.Найти(ПоследнийВыделенныйЭлемент, "Идентификатор");
		Если СтрокаДополнительногоКэша <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОсновнойКэш.Добавить(), СтрокаДополнительногоКэша);
		КонецЕсли;
	КонецЕсли;
	
	АдресОсновногоКэша = ПоместитьВоВременноеХранилище(ОсновнойКэш, ИдентификаторФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных

&НаКлиенте
Процедура ЗагрузитьДанныеИзСервиса()
	
	Если Не ДеревоВОбработке Тогда
		ОтключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса");
		
		Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
			СинхронизироватьКэши(АдресКэшаРезультатПоиска, АдресКэша, ВыбранныеЭлементы, Неопределено, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗагрузитьДанныеЗавершение = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект, Новый Структура);
		
		ПараметрыЗагрузки = Новый Структура(); 
		ПараметрыЗагрузки.Вставить("ВыбранныеЭлементы", ВыбранныеЭлементы.ВыгрузитьЗначения());
		ПараметрыЗагрузки.Вставить("АдресКэша", 
			?(Элементы.Дерево.Отображение = ОтображениеТаблицы.Список,АдресКэшаРезультатПоиска, АдресКэша));
		ПараметрыЗагрузки.Вставить("АдресДополнительногоКэша", 
			?(Элементы.Дерево.Отображение = ОтображениеТаблицы.Список,АдресКэша,АдресКэшаРезультатПоиска));
		ПараметрыЗагрузки.Вставить("ЗагружатьСИерархией", ЗагружатьСИерархией);
		ПараметрыЗагрузки.Вставить("ПереноситьПодчиненные", СтавитьФлагНаПодчиненных);
			
		ОблачныеКлассификаторыКлиент.ЗагрузитьВБазуДанныеОКПД2(ПараметрыЗагрузки, ЗагрузитьДанныеЗавершение, 
			ЭтотОбъект, Неопределено, ОткрытиеЧерезОбщуюКоманду);
			
	Иначе	
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса");
		 	ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;			
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ЗавершениеЗагрузкиДанныхОКПД2");
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Облачный классификатор'"),,
		НСтр("ru = 'Загрузка данных успешно завершена'"));
		
		Если ОткрытиеЧерезОбщуюКоманду Тогда
			Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
				АдресКэшаРезультатПоиска = Результат.АдресРезультата;
				
				ЗаполнитьДеревоПоРезультатамПоиска();
			Иначе
				АдресКэша = Результат.АдресРезультата;

				ВосстановитьДерево();
			КонецЕсли;
			ВыбранныеЭлементы.Очистить();
		Иначе
			Закрыть();
		КонецЕсли;
	Иначе
		ТекстОписания = НСтр("ru = 'В процессе загрузки данных произошла ошибка. Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОписания,,, "Объект");
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлемента(СтрокаДерева)

	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не выбраны элементы для загрузки'");
	ИначеЕсли СтрокаДерева.ЭтоРаздел Тогда
		ТекстОшибки = НСтр("ru = 'Раздел не может быть выбран.'");
	ИначеЕсли НЕ СтрокаДерева.ЭтоЛистовой И НЕ ЗагружатьСИерархией Тогда
		ТекстОшибки = НСтр("ru = 'Группа не может быть выбрана. Выберите конечный элемент.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки,, НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	ДанныеЭлемента = ПолучитьДанныеВыбранногоЭлемента(СтрокаДерева.Идентификатор, АдресКэша);
	
	Закрыть(ДанныеЭлемента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбранногоЭлемента(Идентификатор, АдресКэша)
	
	ДанныеЭлемента = Новый Структура;
		
	Кэш = ИнициализироватьКэш(АдресКэша);
	Если ТипЗнч(Кэш) = Тип("ТаблицаЗначений") Тогда
		Для Счетчик = 0 По Кэш.Колонки.Количество()- 6 Цикл
			ДанныеЭлемента.Вставить(Кэш.Колонки[Счетчик].Имя);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаКэша = Кэш.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаКэша <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЭлемента, СтрокаКэша);
	КонецЕсли;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

#КонецОбласти

#КонецОбласти