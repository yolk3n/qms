
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ВызватьИсключение НСтр("ru = 'Не найдена подсистема интернет поддержки пользователей'"); 
	КонецЕсли;
	
	Если Не ОблачныеКлассификаторы.РаботаСОблачнымиКлассификаторамиРазрешена(,Истина) Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("РежимВыбораЭлемента",       РежимВыбораЭлемента);
	Параметры.Свойство("КодВыбранногоЭлемента",     КодВыбранногоЭлемента);
	Параметры.Свойство("ОткрытиеЧерезОбщуюКоманду", ОткрытиеЧерезОбщуюКоманду);
	
	Если Не ПустаяСтрока(КодВыбранногоЭлемента) Тогда
		ОблачныеКлассификаторы.НормализоватьКодЭлементаТНВЭД(КодВыбранногоЭлемента);
	КонецЕсли;
	
	РазвернутыеСтрокиИндекс = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнтернетПоддержкаПодключена Тогда
		ПостроитьДеревоПослеОткрытияЗавершение();
	Иначе
		
		ПостроитьДеревоПослеОткрытияПродолжение =
			Новый ОписаниеОповещения("ПостроитьДеревоПослеОткрытияПродолжение", ЭтотОбъект);
		
		Владелец = ?(ЭтотОбъект.ВладелецФормы = Неопределено, ЭтотОбъект, ЭтотОбъект.ВладелецФормы);
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ПостроитьДеревоПослеОткрытияПродолжение, ЭтотОбъект.ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ТолькоВыбранные.Пометка      = Ложь;
	Элементы.УстановитьФлажки.Доступность = Истина;
	Элементы.СнятьФлажки.Доступность      = Истина;
	
	ВыполнитьПоискЭлементовПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Элементы.ТолькоВыбранные.Пометка      = Ложь;
	Элементы.УстановитьФлажки.Доступность = Истина;
	Элементы.СнятьФлажки.Доступность      = Истина;
	
	ВыполнитьПоискЭлементовПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ДеревоВОбработке Тогда
		ПодключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска",1,Ложь);
	Иначе
		ПриОчисткеСтрокиПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУтратившиеСилуПриИзменении(Элемент)
	
	Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево Тогда
		Если Не Элементы.ТолькоВыбранные.Пометка Тогда
			ВосстановитьДерево();
		Иначе
			ВосстановитьДеревоПоРезультатамПоиска();
		КонецЕсли;
	Иначе
		ЗаполнитьДеревоПоРезультатамПоиска();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ДетиКэшированы Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если СтрокаДерева.ВОбработке Или ДеревоВОбработке
		Или КоличествоЗаданий > 10 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ВОбработке = Истина;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка = Неопределено Тогда
		РазвернутыеСтроки.Добавить(СтрокаДерева.Идентификатор,, Истина);
	КонецЕсли;
	
	ЭлементКлассификатора = Новый Структура("Код, ИдентификаторСтроки", СтрокаДерева.Код, Строка);
	ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередСворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДерева.Идентификатор);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		ПредставлениеЭлемента = Новый ТабличныйДокумент;
		ПредставлениеЭлементаВладелец = 0;
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийВыделенныйЭлемент = СтрокаДерева.Идентификатор;
	СостояниеФлажкаДоИзменения = СтрокаДерева.Пометка;
	
	Если ПредставлениеЭлементаВладелец <> СтрокаДерева.Идентификатор Тогда
		
		АдресКэшаТекущий = ?(Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево, АдресКэша, АдресКэшаРезультатПоиска);
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокаДерева.Идентификатор, СтрокаДерева.Код,
			АдресКэшаТекущий);
		
		ПредставлениеЭлементаВладелец = СтрокаДерева.Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПометкаПриИзменении(Элемент)
	
	Если Элементы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	
	ПереопределитьСостояниеФлажка(ТекущаяСтрокаДерева);
	
	ДеревоПометкаПриИзмененииНаСервере();
	
	СостояниеФлажкаДоИзменения = ТекущаяСтрокаДерева.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = Элементы.Дерево.ТекущиеДанные;
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
		
		Если ЭлементНайденВОсновномКэше(СтрокаДерева.Код, АдресКэша) Тогда
			ЭлементКлассификатора = Неопределено;
		Иначе
			ЭлементКлассификатора = Новый Структура("Код, ЗагрузкаВетки", СтрокаДерева.Код);
		КонецЕсли;
		
		ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
		СтрокаПоиска = "";
		Элементы.ГруппаПагинация.Видимость = Ложь;
		
	Иначе
		ОбработатьВыборЭлемента(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если Не ВыбранныеЭлементы.Количество() Тогда	
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны элементы для загрузки'"),, НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	Если ДеревоВОбработке Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса",1,Ложь);
	Иначе
		ЗагрузитьДанныеИзСервиса();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлемент(Команда)
	
	ОбработатьВыборЭлемента(Элементы.Дерево.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранные(Команда)
	
	Элементы.ТолькоВыбранные.Пометка = Не Элементы.ТолькоВыбранные.Пометка;
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УстановитьРежимТолькоВыбранные();
		Элементы.УстановитьФлажки.Доступность = Ложь;
		Элементы.СнятьФлажки.Доступность      = Ложь;
	Иначе
		ВосстановитьДерево();
		Элементы.УстановитьФлажки.Доступность = Истина;
		Элементы.СнятьФлажки.Доступность      = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияСледующая(Команда)
	
	ПагинацияНомерСтраницы = ПагинацияНомерСтраницы + 1;
	
	УстановитьНедоступностьЭлементовПагинации();
	
	ПостроитьДеревоКлассификатора(Новый Структура("СтрокаПоиска", СтрокаПоиска));
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияПредыдущая(Команда)
	
	ПагинацияНомерСтраницы = ПагинацияНомерСтраницы - 1;
	
	УстановитьНедоступностьЭлементовПагинации();
	
	ПостроитьДеревоКлассификатора(Новый Структура("СтрокаПоиска", СтрокаПоиска));
	
КонецПроцедуры

&НаКлиенте
Процедура ПагинацияВНачало(Команда)
	
	ПагинацияНомерСтраницы = 1;
	
	УстановитьНедоступностьЭлементовПагинации();
	
	ПостроитьДеревоКлассификатора(Новый Структура("СтрокаПоиска", СтрокаПоиска));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаВнешнегоВидаФормы

&НаСервере
Процедура НастроитьВнешнийВидФормы()

	Элементы.ЗагрузитьДанные.Видимость         = Не РежимВыбораЭлемента;
	Элементы.ЗагрузитьДанные.КнопкаПоУмолчанию = Не РежимВыбораЭлемента;
	Элементы.КнопкиДерева.Видимость            = Не РежимВыбораЭлемента;
	Элементы.ДеревоПометка.Видимость           = Не РежимВыбораЭлемента;
	
	Элементы.ВыбратьЭлемент.Видимость          = РежимВыбораЭлемента;
	Элементы.ВыбратьЭлемент.КнопкаПоУмолчанию  = РежимВыбораЭлемента;
	
	Если Не РежимВыбораЭлемента Тогда
		ЭтотОбъект.Заголовок = НСтр("ru = 'Загрузка классификатора ТН ВЭД'");
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Выберите элемент классификатора ТН ВЭД'");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Флажки загруженных элементов	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.Загружен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПометка.Имя);
	
	// Цвет шрифта утративших силу позиций
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НепринятаяВерсия);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.ДатаОкончанияДействия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНаименование.Имя);
				
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДереваКлассификатора

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		ИнтернетПоддержкаПодключена = Истина;
		ПостроитьДеревоПослеОткрытияЗавершение();
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияЗавершение()
	
	Если Не ЗначениеЗаполнено(КодВыбранногоЭлемента) Тогда
		ПостроитьДеревоКлассификатора();
	Иначе
		ЭлементКлассификатора = Новый Структура("Код, ЗагрузкаВетки", КодВыбранногоЭлемента);	
		ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКлассификатора(ЭлементКлассификатора = Неопределено)
	
	ДеревоВОбработке = Истина;
	ПопытокЗагрузить = 0;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РаботаСОблачнымиКлассификаторами.Форма.КлассификаторТНВЭД.ПостроитьДеревоКлассификатора",
		Ложь, Истина);
		
	ПостроитьДеревоКлассификатораЗавершение = Новый ОписаниеОповещения("ПостроитьДеревоКлассификатораЗавершение",
		ЭтотОбъект, Новый Структура("ЭлементКлассификатора", ЭлементКлассификатора));
	
	Если ЭлементКлассификатора = Неопределено Тогда
		
		Если ПустаяСтрока(АдресКэша) Тогда // Начальная загрузка разделов
			ОблачныеКлассификаторыКлиент.ПолучитьРазделыТНВЭД(ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,,
				КоличествоЗаданий);
		Иначе
			ВосстановитьДерево(); // Восстановление дерева из кэша и позиционирование в иерархии на выбранном элементе
		КонецЕсли;
		
	ИначеЕсли ЭлементКлассификатора.Свойство("Код") И Не ЭлементКлассификатора.Свойство("ЗагрузкаВетки") Тогда
		// Загрузка подчиненных элементов классификатора (детей)
		ОблачныеКлассификаторыКлиент.ПолучитьПодчиненныеЭлементыТНВЭД(ЭлементКлассификатора.Код,
			ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	ИначеЕсли ЭлементКлассификатора.Свойство("СтрокаПоиска") Тогда // Поиск по строке
		
		ОблачныеКлассификаторыКлиент.ОбработатьПоисковыйЗапросТНВЭД(ЭлементКлассификатора.СтрокаПоиска,
			ПагинацияНомерСтраницы, ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	ИначеЕсли ЭлементКлассификатора.Свойство("ЗагрузкаВетки") Тогда
		// Загрузка недостающих данных для позиционирования на выбранном элементе
		ОблачныеКлассификаторыКлиент.ПолучитьВеткуТНВЭД(ЭлементКлассификатора.Код, АдресКэша, РежимВыбораЭлемента,
			ПостроитьДеревоКлассификатораЗавершение, ЭтотОбъект,, КоличествоЗаданий);
		
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = КоличествоЗаданий > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКлассификатораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ЭлементПослеПерестроения = Неопределено;
	АктуальныйИдентификатор = Неопределено;
	КодЭлемента = Неопределено;
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	Элементы.ДекорацияДлительнаяОперация.Видимость = КоличествоЗаданий > 0;
	
	Если ДополнительныеПараметры.ЭлементКлассификатора <> Неопределено Тогда
		
		ДополнительныеПараметры.ЭлементКлассификатора.Свойство("Код", КодЭлемента);
		ДополнительныеПараметры.ЭлементКлассификатора.Свойство("ИдентификаторСтроки", АктуальныйИдентификатор);
		
		ИдентификаторПослеПерестроения = РазвернутыеСтрокиИндекс.Получить(КодЭлемента);
		
	Иначе
		ИдентификаторПослеПерестроения = Неопределено;
	КонецЕсли;
	
	Если ИдентификаторПослеПерестроения <> Неопределено Тогда
		ЭлементПослеПерестроения = Дерево.НайтиПоИдентификатору(ИдентификаторПослеПерестроения);
		Если ЭлементПослеПерестроения <> Неопределено Тогда
			АктуальныйИдентификатор = ИдентификаторПослеПерестроения;
		КонецЕсли;
	КонецЕсли;
	
	Если АктуальныйИдентификатор <> Неопределено Тогда
		ЭлементДерева = Дерево.НайтиПоИдентификатору(АктуальныйИдентификатор);
		Если ЭлементДерева <> Неопределено Тогда
			ЭлементДерева.ВОбработке = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Статус")
		Или ВРег(Результат.Статус) <> "ВЫПОЛНЕНО" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Ошибка выполнения запроса к сервису. Повторите попытку позже.'"));
			
			ПопытокЗагрузить = 0;
			
			ДеревоВОбработке = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭлементКлассификатора <> Неопределено
		И ДополнительныеПараметры.ЭлементКлассификатора.Свойство("ЗагрузкаВетки") Тогда
		АдресКэша = Результат.АдресРезультата;
		ВосстановитьДерево();
	Иначе
		Если ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
			ЗагрузитьДанныеДерева(Результат.АдресРезультата, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	// Разворачивание загруженного нелистового элемента
	Если ДополнительныеПараметры.ЭлементКлассификатора <> Неопределено
		И ДополнительныеПараметры.ЭлементКлассификатора.Свойство("Код")
		И Не ДополнительныеПараметры.ЭлементКлассификатора.Свойство("ЗагрузкаВетки") Тогда
		Элементы.Дерево.Развернуть(АктуальныйИдентификатор);
		Элементы.Дерево.ТекущаяСтрока = АктуальныйИдентификатор;
	КонецЕсли;
	
	ПопытокЗагрузить = 0;
	
	ДеревоВОбработке = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДерева(АдресРезультата, ДополнительныеПараметры, Отказ = Ложь)
	
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеВременногоХранилища(АдресРезультата);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭлементКлассификатора <> Неопределено
		И Не ДополнительныеПараметры.ЭлементКлассификатора.Свойство("СтрокаПоиска") 
		И Не ДанныеСервиса.Количество() Тогда
		Если ДополнительныеПараметры.ЭлементКлассификатора.Свойство("Код") Тогда
			СтрокаРодитель = НайтиРазвернутыйЭлемент(ДополнительныеПараметры.ЭлементКлассификатора);
			СтрокаРодитель.ПолучитьЭлементы().Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьДанныеДерева(ДанныеСервиса, ДополнительныеПараметры.ЭлементКлассификатора);
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УдалитьСтрокиДереваБезПометки(Дерево.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеДерева(ДанныеСервиса, ЭлементКлассификатора)
	
	Если ЭлементКлассификатора = Неопределено Тогда
		Кэш = ДополнитьКэшДаннымиСервиса(АдресКэша, ЭтотОбъект.УникальныйИдентификатор, ДанныеСервиса);
	Иначе
		ЭтоПоисковыйЗапрос = ЭлементКлассификатора.Свойство("СтрокаПоиска");
		
		Кэш = ДополнитьКэшДаннымиСервиса(?(ЭтоПоисковыйЗапрос, АдресКэшаРезультатПоиска, АдресКэша),
			ЭтотОбъект.УникальныйИдентификатор, ДанныеСервиса, ЭтоПоисковыйЗапрос);
	КонецЕсли;
		
	Если ЭлементКлассификатора = Неопределено Тогда // Начальная загрузка разделов
		
		ЗаполнитьРазделы(Кэш);
		
	ИначеЕсли ЭлементКлассификатора.Свойство("Код") Тогда // Загрузка подчиненных элементов классификатора (детей)
		
		ДобавитьПодчиненныеЭлементы(Кэш, ЭлементКлассификатора);
		
	ИначеЕсли ЭлементКлассификатора.Свойство("СтрокаПоиска") Тогда // Поиск по строке
		
		ЗаполнитьДеревоПоРезультатамПоиска(Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделы(Кэш)
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	Для Каждого СтрокаКэша Из Кэш Цикл
		
		СтрокаРаздел = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаздел, СтрокаКэша);
		
		СтрокаРаздел.ПолучитьЭлементы().Добавить();
		
	КонецЦикла;
	
	Если СтрокиДерева.Количество() Тогда
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокиДерева[0].Идентификатор, СтрокиДерева[0].Код, Кэш);
		ПредставлениеЭлементаВладелец = СтрокиДерева[0].Идентификатор;
		Элементы.Дерево.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Кэш, ЭлементКлассификатора)
	
	Если Не ОтображатьУтратившиеСилу Тогда
		Отбор = Новый Структура("КодРодителя, ДатаОкончанияДействия", ЭлементКлассификатора.Код, Дата('00010101'));
	Иначе
		Отбор = Новый Структура("КодРодителя", ЭлементКлассификатора.Код);
	КонецЕсли;
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	СтрокаРодитель    = НайтиРазвернутыйЭлемент(ЭлементКлассификатора);
	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	ПодчиненныеСтроки.Очистить();
	КоличествоДетей = 0;
	КоличествоДетейПометка = 0;
	
	АктуальныеВерсии = Новый Соответствие;
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		НоваяСтрока = ПодчиненныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);
		
		Если СтрокаРодитель.Загружен = 1 Тогда
			НоваяСтрока.Загружен = 1;
		КонецЕсли;
		
		Если Лев(СтрокаКэша.Код, 1) <> "Н" И Лев(СтрокаКэша.Код, 1) <> "Р" Тогда
			НоваяСтрока.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"), СтрокаКэша.Код, СтрокаКэша.Наименование);
		КонецЕсли;
		
		Если СтрДлина(СтрокаКэша.Код) = 13 Тогда
			НоваяСтрока.ИндексКартинки = 3;
		Иначе
			НоваяСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		Если СтрокаРодитель.Пометка = 1 Тогда
			НоваяСтрока.Пометка = 1;
		КонецЕсли;
		
		СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, НоваяСтрока);
		
		КоличествоДетей        = КоличествоДетей + 1;
		КоличествоДетейПометка = КоличествоДетейПометка + ?(НоваяСтрока.Пометка > 1, 0.5, НоваяСтрока.Пометка);
		
		Если Элементы.ТолькоВыбранные.Пометка
			И Не НоваяСтрока.Пометка Тогда
			ПодчиненныеСтроки.Удалить(НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, НоваяСтрока);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия Тогда
			ПодчиненныеСтроки.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаРодитель.КоличествоДетей        = КоличествоДетей;
	СтрокаРодитель.КоличествоДетейПометка = КоличествоДетейПометка;
	СтрокаРодитель.ДетиКэшированы         = Истина;
	СтрокаРодитель.ВОбработке             = Ложь;
	
	Если ПредставлениеЭлементаВладелец <> СтрокаРодитель.Идентификатор Тогда
		ПредставлениеЭлемента = ПолучитьПредставлениеЭлемента(СтрокаРодитель.Идентификатор, СтрокаРодитель.Код, Кэш);
		ПредставлениеЭлементаВладелец = СтрокаРодитель.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатамПоиска(Кэш = Неопределено)
	
	Если Кэш = Неопределено Тогда
		УничтожитьКэш = Истина;
		Кэш = ИнициализироватьКэш(АдресКэшаРезультатПоиска);
	Иначе
		УничтожитьКэш = Ложь;
	КонецЕсли;
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	АктуальныеВерсии = Новый Соответствие;
	
	Для Каждого СтрокаКэша Из Кэш Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		Если Лев(СтрокаКэша.Код, 1) <> "Н" И Лев(СтрокаКэша.Код, 1) <> "Р" Тогда
			СтрокаДерева.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"), СтрокаКэша.Код, СтрокаКэша.Наименование);
		КонецЕсли;
		
		Если СтрДлина(СтрокаКэша.Код) = 13 Тогда
			СтрокаДерева.ИндексКартинки = 3;
		КонецЕсли;
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия Тогда
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Дерево.Отображение           = ОтображениеТаблицы.Список;
	Элементы.ДеревоПометка.ТолькоПросмотр = Истина;
	Элементы.КнопкиДерева.Доступность     = Ложь;
	Элементы.ЗагрузитьДанные.Доступность  = Ложь;
	Элементы.ВыбратьЭлемент.Доступность   = Ложь;
	
	Если ПагинацияНомерСтраницы > 1
		Или СтрокиДерева.Количество() = 100 Тогда
		ОтображатьГруппуПагинация = Истина;
	Иначе
		ОтображатьГруппуПагинация = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПагинация.Видимость = ОтображатьГруппуПагинация;
	
	Если Элементы.ГруппаПагинация.Видимость Тогда
		Элементы.ПагинацияНомерСтраницы.Заголовок = СтрШаблон(НСтр("ru = 'Страница %1'"), Строка(ПагинацияНомерСтраницы));
		Элементы.ПагинацияВНачало.Доступность = ПагинацияНомерСтраницы > 1;
		Элементы.ПагинацияПредыдущая.Доступность = ПагинацияНомерСтраницы > 1;
		Элементы.ПагинацияСледующая.Доступность = СтрокиДерева.Количество() = 100;
	КонецЕсли;
	
	Если УничтожитьКэш Тогда
		Кэш = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДерево()
	
	ИдентификаторыРазвернутых = Новый Массив;
	ВосстановитьДеревоИзКэша(ИдентификаторыРазвернутых);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыРазвернутых Цикл
		Элементы.Дерево.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
	ДеревоВОбработке = Ложь;
	ПопытокЗагрузить = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДеревоПоРезультатамПоиска()

	ИдентификаторыРазвернутых = Новый Массив;
	УстановитьРежимТолькоВыбранные(Истина, ИдентификаторыРазвернутых);
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыРазвернутых Цикл
		Элементы.Дерево.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
	Элементы.Дерево.ТекущаяСтрока = ПоследнийВыделенныйЭлемент;

	ДеревоВОбработке = Ложь;
	ПопытокЗагрузить = 0;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДеревоИзКэша(ИдентификаторыРазвернутых, СтрокаДереваКорень = Неопределено)
	
	Кэш = ИнициализироватьКэш(АдресКэша);
	
	Если СтрокаДереваКорень = Неопределено Тогда
		СтрокиДерева = Дерево.ПолучитьЭлементы();
		КодРодителя  = "";
	Иначе
		СтрокиДерева = СтрокаДереваКорень.ПолучитьЭлементы();
		КодРодителя  = СтрокаДереваКорень.Код;
	КонецЕсли;
	
	Если Не ОтображатьУтратившиеСилу Тогда
		Отбор = Новый Структура("КодРодителя, ДатаОкончанияДействия", КодРодителя, Дата('00010101'));
	Иначе
		Отбор = Новый Структура("КодРодителя", КодРодителя);
	КонецЕсли;
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	СтрокиДерева.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресКэшаРезультатПоиска) Тогда
		УдалитьИзВременногоХранилища(АдресКэшаРезультатПоиска);
	КонецЕсли;
	
	РазвернутыеПодчиненные = Новый Массив;
	РазвернутыеПодчиненныеИндекс = Новый Соответствие;
	
	АктуальныеВерсии = Новый Соответствие;
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		Если Лев(СтрокаКэша.Код, 1) <> "Н" И Лев(СтрокаКэша.Код, 1) <> "Р" Тогда
			СтрокаДерева.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"), СтрокаКэша.Код, СтрокаКэша.Наименование);
		КонецЕсли;
		
		Если СтрДлина(СтрокаКэша.Код) = 13 Тогда
			СтрокаДерева.ИндексКартинки = 3;
		КонецЕсли;
		
		ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДерева, СтрокаКэша.Код, РазвернутыеПодчиненные,
			РазвернутыеПодчиненныеИндекс);
		
		ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаДерева.Пометка = Истина;
		КонецЕсли;
		
		Для Каждого Идентификатор Из РазвернутыеПодчиненные Цикл
			ИдентификаторыРазвернутых.Добавить(Идентификатор);
		КонецЦикла;
		
		ПоследняяВерсия = АктуальныеВерсии[СтрокаКэша.Код];
		Если ПоследняяВерсия = Неопределено Тогда
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		ИначеЕсли СтрокаКэша.ДатаОкончанияДействия > ПоследняяВерсия.ДатаОкончанияДействия Тогда
			СтрокиДерева.Удалить(ПоследняяВерсия);
			АктуальныеВерсии.Вставить(СтрокаКэша.Код, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	РазвернутыеСтрокиИндекс = Новый ФиксированноеСоответствие(РазвернутыеПодчиненныеИндекс);
	
	Если Не ПустаяСтрока(КодВыбранногоЭлемента) Тогда
		КодВыбранногоЭлемента = "";
	КонецЕсли;
	
	Элементы.Дерево.Отображение           = ОтображениеТаблицы.Дерево;
	Элементы.ДеревоПометка.ТолькоПросмотр = Ложь;
	Элементы.КнопкиДерева.Доступность     = Истина;
	Элементы.ЗагрузитьДанные.Доступность  = Истина;
	Элементы.ВыбратьЭлемент.Доступность   = Истина;
	
	Элементы.Дерево.ТекущаяСтрока = ПоследнийВыделенныйЭлемент;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДереваРодитель, КодРодителя, ИдентификаторыРазвернутых,
		ИдентификаторыРазвернутыхИндекс)
	
	Отбор.КодРодителя = КодРодителя;
	
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	Если РежимВыбораЭлемента
		И Не ПустаяСтрока(КодВыбранногоЭлемента) Тогда
		Если СтрокаДереваРодитель.Код = КодВыбранногоЭлемента Тогда
			ПоследнийВыделенныйЭлемент = СтрокаДереваРодитель.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Если СтрокаДереваРодитель.Идентификатор = ПоследнийВыделенныйЭлемент Тогда
			ПоследнийВыделенныйЭлемент = СтрокаДереваРодитель.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Не МассивСтрок.Количество() Тогда
		
		Если Не СтрокаДереваРодитель.ИндексКартинки Тогда
			СтрокаДереваРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДереваРодитель.Идентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			ИдентификаторыРазвернутыхИндекс.Вставить(СтрокаДереваРодитель.Код, СтрокаДереваРодитель.ПолучитьИдентификатор());
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Наличие хотя бы одного ребенка является однозначным признаком наличия в кэше всех детей.
	СтрокаДереваРодитель.ДетиКэшированы = Истина;
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		СтрокаДерева = СтрокаДереваРодитель.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКэша);
		
		Если Лев(СтрокаКэша.Код, 1) <> "Н" И Лев(СтрокаКэша.Код, 1) <> "Р" Тогда
			СтрокаДерева.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"), СтрокаКэша.Код, СтрокаКэша.Наименование);
		КонецЕсли;
		
		Если СтрДлина(СтрокаКэша.Код) = 13 Тогда
			СтрокаДерева.ИндексКартинки = 3;
		КонецЕсли;
		
		Если СтрокаДереваРодитель.Пометка = 1 Тогда
			СтрокаДерева.Пометка = 1;
		Иначе
			ЭлементСписка = ВыбранныеЭлементы.НайтиПоЗначению(СтрокаДерева.Идентификатор);
			СтрокаДерева.Пометка = ЭлементСписка <> Неопределено;
			Если Не СтрокаДерева.Пометка 
				И СтрокаДерева.Загружен Тогда
				СтрокаДерева.Пометка = СтрокаДерева.Загружен;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьСтрокиДереваИзКэша(Отбор, Кэш, СтрокаДерева, СтрокаКэша.Код, ИдентификаторыРазвернутых,
			ИдентификаторыРазвернутыхИндекс);
		
		СтрокаДереваРодитель.КоличествоДетей        = СтрокаДереваРодитель.КоличествоДетей + 1;
		СтрокаДереваРодитель.КоличествоДетейПометка = СтрокаДереваРодитель.КоличествоДетейПометка
			+ ?(СтрокаДерева.Пометка > 1, 0.5, СтрокаДерева.Пометка);
		
	КонецЦикла;
	
	Если СтрокаДереваРодитель.КоличествоДетейПометка Тогда
		СтрокаДереваРодитель.Пометка = ?(СтрокаДереваРодитель.КоличествоДетей = СтрокаДереваРодитель.КоличествоДетейПометка,
			1, 2);
	Иначе
		СтрокаДереваРодитель.Пометка = 0;
	КонецЕсли;
	
	ЭлементСписка = РазвернутыеСтроки.НайтиПоЗначению(СтрокаДереваРодитель.Идентификатор);
	Если ЭлементСписка <> Неопределено Тогда
		Если ЭлементСписка.Пометка Тогда
			ИдентификаторСтрокиДерева = СтрокаДереваРодитель.ПолучитьИдентификатор();
			ИдентификаторыРазвернутых.Добавить(ИдентификаторСтрокиДерева);
			ИдентификаторыРазвернутыхИндекс.Вставить(СтрокаДереваРодитель.Код, ИдентификаторСтрокиДерева);
		Иначе
			ИдентификаторыРазвернутых.Очистить();
		КонецЕсли;
	Иначе
		ИдентификаторыРазвернутых.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоВыбранные(ПредварительноВосстановить = Ложь, ИдентификаторыРазвернутых = Неопределено)
	
	Если ПредварительноВосстановить Тогда
		ВосстановитьДеревоИзКэша(?(ИдентификаторыРазвернутых = Неопределено, Новый Массив, ИдентификаторыРазвернутых));
	КонецЕсли;
	
	УдалитьСтрокиДереваБезПометки(Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтрокиДереваБезПометки(ДанныеДерева)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДанныеДерева Цикл
		
		Если Не СтрокаДерева.Пометка
			Или СтрокаДерева.Загружен = 1 Тогда
			
			СтрокиКУдалению.Добавить(СтрокаДерева);
			
		Иначе
			
			Если Не СтрокаДерева.Пометка = 1 Тогда
				
				ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
				УдалитьСтрокиДереваБезПометки(ПодчиненныеСтроки);
				
				Если Не ПодчиненныеСтроки.Количество() Тогда
					СтрокиКУдалению.Добавить(СтрокаДерева);
				КонецЕсли;
				
			ИначеЕсли СтрокаДерева.Загружен = 2 Тогда
				
				ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
				
				Если ПодчиненныеСтроки.Количество()
					И ЗначениеЗаполнено(ПодчиненныеСтроки[0].Идентификатор) Тогда
					УдалитьСтрокиДереваБезПометки(ПодчиненныеСтроки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СтрокиКУдалению Цикл
		ДанныеДерева.Удалить(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиРазвернутыйЭлемент(ЭлементКлассификатора)
	
	СтрокаРодитель = Дерево.НайтиПоИдентификатору(ЭлементКлассификатора.ИдентификаторСтроки);
	
	Если СтрокаРодитель <> Неопределено Тогда
		Возврат СтрокаРодитель;
	Иначе
		ИдентификаторПослеПерестроения = РазвернутыеСтрокиИндекс[ЭлементКлассификатора.Код];
		Возврат Дерево.НайтиПоИдентификатору(ИдентификаторПослеПерестроения);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеЭлементовКлассификатора

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлемента(ИдентификаторЭлемента, КодЭлемента, ДанныеКэша)
	
	Если ТипЗнч(ДанныеКэша) = Тип("ТаблицаЗначений") Тогда
		Кэш = ДанныеКэша;
	Иначе
		Кэш = ИнициализироватьКэш(ДанныеКэша);
	КонецЕсли;
	
	Отбор = Новый Структура("Код", КодЭлемента);
	МассивСтрок = Кэш.НайтиСтроки(Отбор);
	
	ДанныеЭлемента = Неопределено;
	ДанныеВерсий   = Кэш.СкопироватьКолонки();
	
	Для Каждого СтрокаКэша Из МассивСтрок Цикл
		
		Если СтрокаКэша.Идентификатор = ИдентификаторЭлемента Тогда
			ДанныеЭлемента = СтрокаКэша;
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеВерсий.Добавить(), СтрокаКэша);
		
	КонецЦикла;
	
	Если ДанныеЭлемента = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если ДанныеВерсий.Количество() Тогда
		ДанныеВерсий.Сортировать("ДатаНачалаДействия Убыв");
	КонецЕсли;
	
	Возврат СформироватьПредставлениеЭлемента(ДанныеЭлемента, ДанныеВерсий);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеЭлемента(ДанныеЭлемента, ДанныеВерсий)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.РаботаСОблачнымиКлассификаторами.ПолучитьМакет("ПФ_MXL_КарточкаТНВЭД");
	
	ОбластьНаименование = Макет.ПолучитьОбласть("ОбластьНаименование");
	
	ОбластьНаименование.Параметры.Наименование = ДанныеЭлемента.Наименование;
	ТабличныйДокумент.Вывести(ОбластьНаименование);
	
	Если СтрДлина(ДанныеЭлемента.Код) = 13 Тогда // листовой элемент
		
		ОбластьОсновнаяИнформация    = Макет.ПолучитьОбласть("ОбластьОсновнаяИнформация");
		ОбластьРасширеннаяИнформация = Макет.ПолучитьОбласть("ОбластьРасширеннаяИнформация");
		
		ОбластьОсновнаяИнформация.Параметры.Заполнить(ДанныеЭлемента);
		ТабличныйДокумент.Вывести(ОбластьОсновнаяИнформация);
		
		ОбластьРасширеннаяИнформация.Параметры.Заполнить(ДанныеЭлемента);
		ТабличныйДокумент.Вывести(ОбластьРасширеннаяИнформация);
		
		Если ДанныеВерсий.Количество() Тогда
			
			ОбластьВерсииЗаголовок   = Макет.ПолучитьОбласть("ОбластьВерсииЗаголовок");
			ОбластьВерсияГруппировка = Макет.ПолучитьОбласть("ОбластьВерсияГруппировка");
			ОбластьВерсия            = Макет.ПолучитьОбласть("ОбластьВерсия");
			
			ТабличныйДокумент.Вывести(ОбластьВерсииЗаголовок);
			
			Для Каждого Версия Из ДанныеВерсий Цикл
				
				ДатаНачалаДействия    = Формат(Версия.ДатаНачалаДействия, "ДЛФ=DD");
				ДатаОкончанияДействия = Формат(Версия.ДатаОкончанияДействия, "ДЛФ=DD");
				
				ОбластьВерсияГруппировка.Параметры.ЗаголовокГруппировки = СтрШаблон("%1 - %2", ДатаНачалаДействия,
					ДатаОкончанияДействия);
				ТабличныйДокумент.Вывести(ОбластьВерсияГруппировка);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				ОбластьВерсия.Параметры.Заполнить(Версия);
				ТабличныйДокумент.Вывести(ОбластьВерсия);
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ПустаяСтрока(ДанныеЭлемента.Описание) Тогда
			ОбластьОписание = Макет.ПолучитьОбласть("ОбластьОписание");
			ОбластьОписание.Параметры.Описание = ДанныеЭлемента.Описание;
			ТабличныйДокумент.Вывести(ОбластьОписание);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область УправлениеФлажками

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьСостояниеФлажка(СтрокаДерева)
	
	Если СтрокаДерева.Загружен Тогда
		СтрокаДерева.Пометка = ?(Не СтрокаДерева.Пометка, СтрокаДерева.Пометка + 1, СтрокаДерева.Пометка);
	Иначе
		СтрокаДерева.Пометка = ?(СтрокаДерева.Пометка > 1, 0, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПометкаПриИзмененииНаСервере()

	СтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	
	Если Элементы.ТолькоВыбранные.Пометка
		И СтрокаДерева.Пометка = 1
		И СтрокаДерева.ДетиКэшированы Тогда
		ВосстановитьДеревоИзКэша(Новый Массив, СтрокаДерева);
	КонецЕсли;
	
	Изменения = Новый Структура("СостояниеФлажкаДо, СостояниеФлажкаТекущее", СостояниеФлажкаДоИзменения,
		СтрокаДерева.Пометка);
	ПересчитатьСостоянияФлажковПредков(СтрокаДерева, Изменения);
	УстановитьОтметкиПотомков(СтрокаДерева);
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		УстановитьРежимТолькоВыбранные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиПотомков(СтрокаДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	КоличествоДетейПометка = 0;
	
	Для Каждого СтрокаДереваПодчиненная Из ПодчиненныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДереваПодчиненная.Код) Тогда
			Продолжить;
		КонецЕсли;
				
		Если СтрокаДереваПодчиненная.Загружен = 1 Тогда
			КоличествоДетейПометка = КоличествоДетейПометка + 1;
			Продолжить;
		КонецЕсли;
				
		Если СтрокаДерева.Пометка = 1 Тогда
			СтрокаДереваПодчиненная.Пометка = 1;
			КоличествоДетейПометка = КоличествоДетейПометка + 1;
			УстановитьОтметкиПотомков(СтрокаДереваПодчиненная);
		Иначе
			СтрокаДереваПодчиненная.Пометка = СтрокаДереваПодчиненная.Загружен;
			КоличествоДетейПометка = КоличествоДетейПометка + ?(СтрокаДереваПодчиненная.Пометка > 1, 0.5,
				СтрокаДереваПодчиненная.Пометка);
			УстановитьОтметкиПотомков(СтрокаДереваПодчиненная);
		КонецЕсли;
		
		СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДереваПодчиненная);
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоДетейПометка = КоличествоДетейПометка;
	
	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДерева);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСостоянияФлажковПредков(СтрокаДерева, Изменения)
	
	СтрокаДереваРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если СтрокаДереваРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеФлажкаДо      = ?(Изменения.СостояниеФлажкаДо > 1, 0.5, Изменения.СостояниеФлажкаДо);
	СостояниеФлажкаТекущее = ?(Изменения.СостояниеФлажкаТекущее > 1, 0.5, Изменения.СостояниеФлажкаТекущее);
	
	СтрокаДереваРодитель.КоличествоДетейПометка = СтрокаДереваРодитель.КоличествоДетейПометка - СостояниеФлажкаДо
		+ СостояниеФлажкаТекущее;
	
	СостояниеФлажкаРодителяДо = СтрокаДереваРодитель.Пометка;
	
	Если СтрокаДереваРодитель.КоличествоДетейПометка Тогда
		СтрокаДереваРодитель.Пометка = ?(СтрокаДереваРодитель.КоличествоДетей = СтрокаДереваРодитель.КоличествоДетейПометка,
			1, 2);
	Иначе
		СтрокаДереваРодитель.Пометка = 0;
	КонецЕсли;
	
	СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, СтрокаДереваРодитель);
	
	Если СостояниеФлажкаРодителяДо <> СтрокаДереваРодитель.Пометка Тогда
		Изменения = Новый Структура("СостояниеФлажкаДо, СостояниеФлажкаТекущее", СостояниеФлажкаРодителяДо,
			СтрокаДереваРодитель.Пометка);
		ПересчитатьСостоянияФлажковПредков(СтрокаДереваРодитель, Изменения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкорректироватьВыбранныеЭлементы(ВыбранныеЭлементы, ДанныеЭлемента)
	
	Элемент = ВыбранныеЭлементы.НайтиПоЗначению(ДанныеЭлемента.Идентификатор);
	
	Если Элемент = Неопределено И ДанныеЭлемента.Пометка = 1 Тогда
		Если ДанныеЭлемента.Загружен <> 1 Тогда
			ВыбранныеЭлементы.Добавить(ДанныеЭлемента.Идентификатор);
		КонецЕсли;
	ИначеЕсли Элемент <> Неопределено И ДанныеЭлемента.Пометка <> 1 Тогда
		ВыбранныеЭлементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьФлажки(Пометка)
	
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Загружен = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева.Пометка = ?(Пометка, 0, 2);
		ПереопределитьСостояниеФлажка(СтрокаДерева);
		УстановитьОтметкиПотомков(СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеПоиском

&НаКлиенте
Процедура ВыполнитьПоискЭлементовПоСтроке()
	
	Если Не ДеревоВОбработке Тогда
		
		ПопытокЗагрузить = 0;
		
		ОтключитьОбработчикОжидания("ВыполнитьПоискЭлементовПоСтроке");
		
		СтрокаПоиска = СокрЛП(Элементы.СтрокаПоиска.ТекстРедактирования);
		
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список Тогда
				ПриОчисткеСтрокиПоиска();
			КонецЕсли;
			Возврат;
		ИначеЕсли СтрДлина(СтрокаПоиска) < 2 Тогда
			ТекстСообщения = НСтр("ru = 'Для поиска используйте строку длиной от двух символов'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СтрокаПоиска");
			Возврат;
		КонецЕсли;
		
		ОбновитьИсториюПоиска();
		
		ПагинацияНомерСтраницы = 1;
		
		ПостроитьДеревоКлассификатора(Новый Структура("СтрокаПоиска", СтрокаПоиска));
		
	Иначе
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ВыполнитьПоискЭлементовПоСтроке");
			ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюПоиска()
	
	История        = Элементы.СтрокаПоиска.СписокВыбора;
	ЭлементИстории = История.НайтиПоЗначению(СтрокаПоиска);
	
	Если ЭлементИстории = Неопределено Тогда
		История.Вставить(0, СтрокаПоиска);
	Иначе
		ИндексЭлемента = История.Индекс(ЭлементИстории);
		История.Сдвинуть(ИндексЭлемента, -ИндексЭлемента);
	КонецЕсли;
	
	Если История.Количество() > 5 Тогда
		Для ИндексЭлемента = 5 По История.Количество() - 1 Цикл
			История.Удалить(ИндексЭлемента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеСтрокиПоиска()
	
	Если Не ДеревоВОбработке Тогда
		
		ПопытокЗагрузить = 0;
		
		ОтключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска");
		
		ЭлементКлассификатора = Неопределено;
		
		СтрокаДерева = Элементы.Дерево.ТекущиеДанные;
		
		Если Элементы.Дерево.Отображение = ОтображениеТаблицы.Список
			И СтрокаДерева <> Неопределено
			И Не ЭлементНайденВОсновномКэше(СтрокаДерева.Код, АдресКэша) Тогда
			ЭлементКлассификатора = Новый Структура("Код, ЗагрузкаВетки", СтрокаДерева.Код);
		КонецЕсли;
		
		ПостроитьДеревоКлассификатора(ЭлементКлассификатора);
		
		Элементы.ГруппаПагинация.Видимость = Ложь;
	Иначе
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ПриОчисткеСтрокиПоиска");
		 	ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНедоступностьЭлементовПагинации()
	
	Если Элементы.ПагинацияСледующая.Доступность Тогда
		Элементы.ПагинацияСледующая.Доступность = Ложь;
	КонецЕсли;
	
	Если Элементы.ПагинацияПредыдущая.Доступность Тогда
		Элементы.ПагинацияПредыдущая.Доступность = Ложь;
	КонецЕсли;
	
	Если Элементы.ПагинацияВНачало.Доступность Тогда
		Элементы.ПагинацияВНачало.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшем

// Получение описания кэша
// См. методы ОблачныеКлассификаторыСлужебный.ОписаниеЭлементовТНВЭД() и
// ОблачныеКлассификаторы.ОпределитьЗагруженныеЭлементыТНВЭД().
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица для хранения кэшируемых данных.
//
&НаСервереБезКонтекста
Функция ПолучитьОписаниеКэша()
	
	ТаблицаКэша = ОблачныеКлассификаторыСлужебный.ОписаниеЭлементовТНВЭД();
	
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	
	ТаблицаКэша.Колонки.Добавить("Пометка",  ТипЧисло);
	ТаблицаКэша.Колонки.Добавить("Загружен", ТипЧисло);
	
	ТаблицаКэша.Индексы.Добавить("КодРодителя, ДатаОкончанияДействия");
	ТаблицаКэша.Индексы.Добавить("КодРодителя");
	ТаблицаКэша.Индексы.Добавить("Код");
	
	Возврат ТаблицаКэша;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьКэш(АдресКэша = "")
	
	Если ЭтоАдресВременногоХранилища(АдресКэша) Тогда
		Кэш = ПолучитьИзВременногоХранилища(АдресКэша);
	Иначе
		Кэш = ПолучитьОписаниеКэша();
	КонецЕсли;
	
	Возврат Кэш;
	
КонецФункции

// Дополнение кэша данными сервиса
//
// Параметры:
//  АдресКэша              - Строка - адрес таблицы кэша во временном хранилище.
//  ИдентификаторФормы     - УникальныйИдентификатор - уникальный идентификатор формы.
//  ДанныеСервиса          - ТаблицаЗначений - данные, полученные в ответе сервиса.
//  ПредварительноОчистить - Булево - признак необходимости очистки таблицы кэша перед обновлением.
//
&НаСервереБезКонтекста
Функция ДополнитьКэшДаннымиСервиса(АдресКэша, ИдентификаторФормы, ДанныеСервиса, ПредварительноОчистить = Ложь)
	
	Если ПредварительноОчистить Тогда
		Кэш = ИнициализироватьКэш();
	Иначе
		Кэш = ИнициализироватьКэш(АдресКэша);
	КонецЕсли;
	
	Для Каждого СтрокаДанные Из ДанныеСервиса Цикл
		ЗаполнитьЗначенияСвойств(Кэш.Добавить(), СтрокаДанные);
	КонецЦикла;
	
	Если Не ПредварительноОчистить Тогда
		Кэш.Сортировать("Порядок Возр");
	КонецЕсли;
	
	АдресКэша = ПоместитьВоВременноеХранилище(Кэш, ?(ЭтоАдресВременногоХранилища(АдресКэша),
		ИдентификаторФормы, АдресКэша));
	
	Возврат Кэш;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементНайденВОсновномКэше(Код, АдресКэша)
	
	Кэш = ИнициализироватьКэш(АдресКэша);
	
	Возврат Кэш.Найти(Код, "Код") <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбработкаДанных

&НаКлиенте
Процедура ЗагрузитьДанныеИзСервиса()
	
	Если Не ДеревоВОбработке Тогда
		
		ПопытокЗагрузить = 0;
		
		ОтключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса");
		
		ЗагрузитьДанныеЗавершение = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект, Новый Структура);
		
		ОблачныеКлассификаторыКлиент.ЗагрузитьВБазуДанныеТНВЭД(АдресКэша, ВыбранныеЭлементы.ВыгрузитьЗначения(),
			ЗагрузитьДанныеЗавершение, ЭтотОбъект, Неопределено, ОткрытиеЧерезОбщуюКоманду);
	Иначе	
		Если ПопытокЗагрузить >= 10 Тогда
			ОтключитьОбработчикОжидания("ЗагрузитьДанныеИзСервиса");
		 	ПоказатьПредупреждение(,
				НСтр("ru = 'Превышен интервал ожидания обработки классификатора. Повторите попытку позже.'"),60);
		Иначе
			ПопытокЗагрузить = ПопытокЗагрузить + 1;			
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ЗавершениеЗагрузкиДанныхТНВЭД");
	
	Если Результат.Свойство("Статус") И Результат.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Классификатор ТН ВЭД'"),,
			НСтр("ru = 'Загрузка данных успешно завершена'"));
		
		Если ОткрытиеЧерезОбщуюКоманду Тогда
			АдресКэша = Результат.АдресРезультата;
			ВосстановитьДерево();
			ВыбранныеЭлементы.Очистить();
		Иначе
			Закрыть();
		КонецЕсли;
		
	Иначе
		ТекстОписания = НСтр("ru = 'В процессе загрузки данных произошла ошибка. Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОписания,,, "Объект");
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлемента(СтрокаДерева)
	
	Если Не РежимВыбораЭлемента Тогда
		
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		Если Элементы.Дерево.Развернут(ИдентификаторСтроки) Тогда
			Элементы.Дерево.Свернуть(ИдентификаторСтроки);
		Иначе
			Элементы.Дерево.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаДерева = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбраны элементы для загрузки'");
		
	ИначеЕсли Лев(СтрокаДерева.Код, 1) = "Н"
		Или Лев(СтрокаДерева.Код, 1) = "Р"
		Или СтрДлина(СтрокаДерева.Код) <> 13 Тогда
		
		ТекстОшибки = НСтр("ru = 'Группа не может быть выбрана. Выберите конечный элемент (товарную подсубпозицию).'");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки,, НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецЕсли;
	
	ДанныеЭлемента = ПолучитьДанныеВыбранногоЭлемента(СтрокаДерева.Идентификатор, АдресКэша);
	
	Закрыть(ДанныеЭлемента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбранногоЭлемента(Идентификатор, АдресКэша)
	
	Кэш = ИнициализироватьКэш(АдресКэша);
	
	СтрокаКэша = Кэш.Найти(Идентификатор, "Идентификатор");
	
	ДанныеЭлемента = Новый Структура;
	ДанныеЭлемента.Вставить("Идентификатор");
	ДанныеЭлемента.Вставить("Код");
	ДанныеЭлемента.Вставить("КодРодителя");
	ДанныеЭлемента.Вставить("Порядок");
	ДанныеЭлемента.Вставить("ДатаНачалаДействия");
	ДанныеЭлемента.Вставить("ДатаОкончанияДействия");
	ДанныеЭлемента.Вставить("Наименование");
	ДанныеЭлемента.Вставить("НаименованиеПолное");
	ДанныеЭлемента.Вставить("Описание");
	ДанныеЭлемента.Вставить("КодОКЕИ");
	ДанныеЭлемента.Вставить("Сырьевой");
	ДанныеЭлемента.Вставить("ТаможеннаяПошлина");
	ДанныеЭлемента.Вставить("СтавкаНДС");
	ДанныеЭлемента.Вставить("ПодлежитУтилизации");
	ДанныеЭлемента.Вставить("ИзменениеСоставаТоваров");
	
	Если СтрокаКэша <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЭлемента, СтрокаКэша);
	КонецЕсли;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

#КонецОбласти

#КонецОбласти
