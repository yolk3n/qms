
#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеНомеровУпаковокСтрокДерева;

&НаКлиенте
Перем ОчередьОбработкиШтрихкодов;

&НаКлиенте
Перем ОчередьОбработкиШтрихкодовТСД;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РежимПросмотра = Параметры.РежимПросмотра;
	
	ПроверяемыйДокумент = Параметры.ПроверяемыйДокумент;
	РежимПодбораСуществующихУпаковок = Параметры.РежимПодбораСуществующихУпаковок;
	ДобавлятьОтсутствующиеВДокументе = Параметры.ДобавлятьОтсутствующиеВДокументе;
	ПриЗавершенииСохранятьРезультатыПроверки = Параметры.ПриЗавершенииСохранятьРезультатыПроверки;
	НачальныйСтатусПроверки = Параметры.НачальныйСтатусПроверки;
	СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов = Параметры.СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов;
	Если Не ЗначениеЗаполнено(НачальныйСтатусПроверки) Тогда
		НачальныйСтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась;
	КонецЕсли;
	
	ПодключитьМеханизмПроверкиКМ();
	
	ИнициализироватьПараметрыПроверки();
	
	ЗагрузитьУпаковки();
	
	ПересчитатьВсеИтогиФормы();
	
	УправлениеЭлементамиФормыПриСоздании();
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеНомеровУпаковокСтрокДерева) Тогда
		СоответствиеНомеровУпаковокСтрокДерева = ПолучитьИзВременногоХранилища(АдресСоответствиеНомеровУпаковокСтрокДерева);
	КонецЕсли;
	
	ОчередьОбработкиШтрихкодов = Новый Массив;
	ОчередьОбработкиШтрихкодовТСД = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			// Штрихкоды помещаются в очередь, т.к. может использоваться сканер с памятью.
			ОчередьОбработкиШтрихкодов.Добавить(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "СохранениеРезультатовВыборочногоКонтроляМДЛП" И Параметр = ПроверяемыйДокумент Тогда
		ПолучитьРезультатыПроверкиКМ(СоответствиеНомеровУпаковокСтрокДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ПеренестиРезультатПриЗакрытии", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Обработчик, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт
	
	Если СохранитьПромежуточныеРезультатыПроверкиНаСервере(ВладелецФормы.УникальныйИдентификатор) Тогда
		Оповестить("ПредварительноеСохранениеРезультатовПроверкиИПодбораМДЛП", ПроверяемыйДокумент);
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
	
	ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	Иначе
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено
		   И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			УстановитьСтатусОтсутствуетДляПодчиненных(ТекущиеДанные);
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущиеДанные, Ложь);
			
		КонецЕсли;
		
		ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(ТекущиеДанные);
		УстановитьИндексКартинкиСтатусаПроверки(ТекущиеДанные);
		
		ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущиеДанные);
		ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	Если ДеревоМаркированнойПродукции.ПолучитьЭлементы().Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Проверка не может быть завершена, так как отсутствуют проверяемые товары.'");
	КонецЕсли;
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
				 Или ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
					КоличествоНепроверенных = КоличествоНепроверенных + 1;
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
					КоличествоОтложенных = КоличествоОтложенных + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
		 Или СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных    + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего         + СтрокаДерева.КоличествоПодчиненныхВсего;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			КоличествоОтложенных = КоличествоОтложенных + 1;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	Если КоличествоНепроверенных > 0
	 Или КоличествоОтложенных > 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КоличествоНепроверенных", КоличествоНепроверенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтложенных"   , КоличествоОтложенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоВсего"        , КоличествоВсего);
		
		Обработчик = Новый ОписаниеОповещения("ОтветНаВопросПриЗавершенииПроверки", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборУпаковокМДЛП.Форма.ВопросПередСохранениемРезультатовПроверки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			Истина,
			,
			,
			Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ЗавершитьПроверку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПромежуточныеРезультатыПроверки(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		Если СохранитьПромежуточныеРезультатыПроверкиНаСервере(ВладелецФормы.УникальныйИдентификатор) Тогда
			Модифицированность = Ложь;
			Оповестить("ПредварительноеСохранениеРезультатовПроверкиИПодбораМДЛП", ПроверяемыйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЗаново(Команда)
	
	ОчиститьСообщения();
	
	Обработчик = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Результаты проверки будут очищены. Продолжить?'");
	
	ПоказатьВопрос(Обработчик, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Обработчик = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	СобытияФормМДЛПКлиент.ПоказатьВводШтрихкода(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаСтатуса

&НаКлиенте
Процедура УстановитьСтатусПроверкиВНаличии(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиНеПроверялась(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтложена(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтсутствует(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует"));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СкрытьПроверенные(Команда)
	
	СкрытьПроверенные = Не СкрытьПроверенные;
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенныеНаСервере();
	КонецЕсли;
	
	//ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборочныйКонтрольМДЛП(Команда)
	
	ЗаписатьРезультатыПроверкиКМ(СоответствиеНомеровУпаковокСтрокДерева);
	
	ТипУпаковкиМаркированныйТовар = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар");
	
	НомераУпаковокВыборочногоКонтроляКМ = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеНомеровУпаковокСтрокДерева Цикл
		
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(КлючИЗначение.Значение);
		Если СтрокаДерева = Неопределено Или СтрокаДерева.ТипУпаковки <> ТипУпаковкиМаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		НомераУпаковокВыборочногоКонтроляКМ.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверяемыйДокумент", ПроверяемыйДокумент);
	ПараметрыФормы.Вставить("НомераУпаковок"     , НомераУпаковокВыборочногоКонтроляКМ);
	
	ОткрытьФорму("Обработка.ВыборочныйКонтрольКММДЛП.Форма.ВыборочныйКонтроль", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
#Область СтатусПроверки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки"), Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки"), Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки"), Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки"), ТипУпаковкиГруппаТоваров());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки"), Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась);
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	СписокСостояний.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СостояниеПодтверждения"), СписокСостояний);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
		Новый ПолеКомпоновкиДанных("РежимПросмотра"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	СписокСостояний.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СостояниеПодтверждения"), СписокСостояний);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("РежимПодбораСуществующихУпаковок"), Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
#КонецОбласти
	
#Область ПроверкаСодержимого
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок"), 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПотребительскихУпаковок"), 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтложено"), 0, ВидСравненияКомпоновкиДанных.Больше);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует"), 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки"), Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует"), 0, ВидСравненияКомпоновкиДанных.Больше);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ВсяУпаковкаПроверена"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииМДЛП);
	
#КонецОбласти
	
#Область СодержимоеУпаковки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеПроверялось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВНаличии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтсутствует.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеЧислилось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтложено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВсего.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки"), Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок"), 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПотребительскихУпаковок"), 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки"), Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки"), Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти
	
#Область НомерСтикераОтложена
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки"), Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена, ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НомерСтикераОтложено"), "");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не помечена>'"));
	
#КонецОбласти
	
#Область Отборы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("СкрытьПроверенные"), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору"), Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти
	
КонецПроцедуры

#Область НачальноеЗаполнение

&НаСервере
Процедура ИнициализироватьПараметрыПроверки()
	
	ИдентификаторТекущейПроверяемойУпаковки = -1;
	СледующийСтикерОтложено                 = 1;
	
	ДеревоМаркированнойПродукции.ПолучитьЭлементы().Очистить();
	
	Если ПроверяемыйДокумент.Метаданные().Реквизиты.Найти("МестоДеятельности") <> Неопределено Тогда
		РеквизитыПроверяемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроверяемыйДокумент, "Организация, МестоДеятельности");
		ПроверяемыйДокумент_Организация = РеквизитыПроверяемогоДокумента.Организация;
		ПроверяемыйДокумент_МестоДеятельности = РеквизитыПроверяемогоДокумента.МестоДеятельности;
	Иначе
		ПроверяемыйДокумент_Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУпаковки()
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки) Тогда
		ДанныеПроверки = ПолучитьИзВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки);
	Иначе
		ДанныеПроверки = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПроверки) <> Тип("Структура")
	 Или Не ВосстановитьСохраненныеРезультатыПроверки(ДанныеПроверки) Тогда
		
		ДеревоУпаковок = ПолучитьВходящееДеревоУпаковок();
		СоответствиеНомеровУпаковокСтрокДерева = Новый Соответствие;
		ЗагрузитьДеревоМаркированнойПродукции(ДеревоУпаковок, СоответствиеНомеровУпаковокСтрокДерева);
		АдресСоответствиеНомеровУпаковокСтрокДерева = ПоместитьВоВременноеХранилище(СоответствиеНомеровУпаковокСтрокДерева, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ПолучитьРезультатыПроверкиКМ();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВходящееДеревоУпаковок()
	
	ДеревоУпаковок = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроверяемыйДокумент).ВходящееДеревоУпаковок(ПроверяемыйДокумент);
	Если Не ДобавлятьОтсутствующиеВДокументе И ДеревоУпаковок.Строки.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для проверки.'");
	КонецЕсли;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

&НаСервере
Функция ВосстановитьСохраненныеРезультатыПроверки(ДанныеПроверки)
	
	СохраненноеДеревоМаркированнойПродукции = ДанныеПроверки.ДеревоМаркированнойПродукции;
	
	ДеревоДокумента = ПолучитьВходящееДеревоУпаковок();
	
	Попытка
		
		СохраненноеДеревоМаркированнойПродукции.Колонки.Добавить("СтрокаНайдена", Новый ОписаниеТипов("Булево"));
		
		ДополнитьДеревоМаркированнойПродукцииПоДаннымДокумента(СохраненноеДеревоМаркированнойПродукции, ДеревоДокумента);
		ОтсутствующиеСтроки = СохраненноеДеревоМаркированнойПродукции.Строки.НайтиСтроки(Новый Структура("СтрокаНайдена", Ложь), Истина);
		Для Каждого СтрокаДерева Из ОтсутствующиеСтроки Цикл
			СтрокаДерева.НеСодержитсяВДанныхДокумента = Истина;
		КонецЦикла;
		
		СохраненноеДеревоМаркированнойПродукции.Колонки.Удалить("СтрокаНайдена");
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СохраненноеДеревоМаркированнойПродукции.Колонки, "РезультатПроверкиКМ") Тогда
			СохраненноеДеревоМаркированнойПродукции.Колонки.Добавить("РезультатПроверкиКМ"       , Новый ОписаниеТипов());
			СохраненноеДеревоМаркированнойПродукции.Колонки.Добавить("КодСтатусаПроверкиКМ"      , ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
			СохраненноеДеревоМаркированнойПродукции.Колонки.Добавить("ПояснениеСтатусаПроверкиКМ", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(СохраненноеДеревоМаркированнойПродукции, "ДеревоМаркированнойПродукции");
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	СоответствиеНомеровУпаковокСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеНомеровУпаковокСтрокДерева);
	
	СледующийСтикерОтложено = ДанныеПроверки.СледующийСтикерОтложено;
	
	НомерТекущейПроверяемойУпаковки = ДанныеПроверки.НомерПроверяемойУпаковки;
	Если ЗначениеЗаполнено(НомерТекущейПроверяемойУпаковки) Тогда
		
		ИдентификаторТекущейПроверяемойУпаковки = СоответствиеНомеровУпаковокСтрокДерева.Получить(НомерТекущейПроверяемойУпаковки);
		Если ИдентификаторТекущейПроверяемойУпаковки <> Неопределено Тогда
			Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторТекущейПроверяемойУпаковки;
			ДанныеТекущейСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
			ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ДанныеТекущейСтроки);
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
		
	КонецЕсли;
	
	АдресСоответствиеНомеровУпаковокСтрокДерева = ПоместитьВоВременноеХранилище(
		СоответствиеНомеровУпаковокСтрокДерева, УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДополнитьДеревоМаркированнойПродукцииПоДаннымДокумента(СохраненноеДерево, ДеревоДокумента)
	
	Для Каждого ПодчиненнаяСтрока Из ДеревоДокумента.Строки Цикл
		
		Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			СохраненнаяСтрока = СохраненноеДерево.Строки.Найти(ПодчиненнаяСтрока.НомерУпаковки, "НомерУпаковки");
			Если СохраненнаяСтрока = Неопределено Тогда
				Если ТипЗнч(СохраненноеДерево) = Тип("ДеревоЗначений") Тогда
					СохраненнаяСтрока = СохраненноеДерево.Строки.Найти(ПодчиненнаяСтрока.НомерУпаковки, "НомерУпаковки", Истина);
				Иначе
					СохраненнаяСтрока = СохраненноеДерево.Владелец().Строки.Найти(ПодчиненнаяСтрока.НомерУпаковки, "НомерУпаковки", Истина);
				КонецЕсли;
				Если СохраненнаяСтрока <> Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Упаковка была перемещена.'");
				КонецЕсли;
				СохраненнаяСтрока = СохраненноеДерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СохраненнаяСтрока, ПодчиненнаяСтрока);
				СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СохраненнаяСтрока);
			Иначе
				ЗаполнитьЗначенияСвойств(СохраненнаяСтрока, ПодчиненнаяСтрока,, "СтатусПроверки");
			КонецЕсли;
			
			СохраненнаяСтрока.СтрокаНайдена = Истина;
			
			Если ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка Тогда
				ДополнитьДеревоМаркированнойПродукцииПоДаннымДокумента(СохраненнаяСтрока, ПодчиненнаяСтрока);
			КонецЕсли;
			
		Иначе
			
			СохраненнаяСтрока = СохраненноеДерево.Строки.Найти(ПодчиненнаяСтрока.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СохраненнаяСтрока = Неопределено Тогда
				СохраненнаяСтрока = СохраненноеДерево.Строки.Вставить(0);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СохраненнаяСтрока, ПодчиненнаяСтрока);
			СохраненнаяСтрока.СтрокаНайдена = Истина;
			
			ДополнитьДеревоМаркированнойПродукцииПоДаннымДокумента(СохраненнаяСтрока, ПодчиненнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеНомеровУпаковокСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ТипУпаковкиГруппаТоваров() Тогда
			СоответствиеНомеровУпаковокСтрокДерева.Вставить(СтрокаДерева.НомерУпаковки, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
		
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеНомеровУпаковокСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоМаркированнойПродукции(ДеревоПоДаннымДокумента, СоответствиеНомеровУпаковокСтрокДерева = Неопределено)
	
	КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Для каждого СтрокаПоДаннымДокумента Из ДеревоПоДаннымДокумента.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПоДаннымДокумента, КоллекцияСтрокПриемника, СоответствиеНомеровУпаковокСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, СоответствиеНомеровУпаковокСтрокДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаИсточника.ТипУпаковки) Тогда
		
		НоваяСтрока = КоллекцияСтрокПриемника.Вставить(0);
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	Если НоваяСтрока.ТипУпаковки <> ТипУпаковкиГруппаТоваров() И Не ЗначениеЗаполнено(НоваяСтрока.СтатусПроверки) Тогда
		НоваяСтрока.СтатусПроверки = НачальныйСтатусПроверки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.НомерУпаковки) Тогда
		СоответствиеНомеровУпаковокСтрокДерева.Вставить(НоваяСтрока.НомерУпаковки, НоваяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокДобавленнойСтроки, СоответствиеНомеровУпаковокСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Если РежимПросмотра Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Результаты подбора упаковок'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Заголовок                                  = НСтр("ru = 'Результаты проверки упаковок'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документе'");
		КонецЕсли;
		
		Элементы.ФормаПроверкаЗавершена.Видимость                        = Ложь;
		Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость = Ложь;
		Элементы.ФормаНачатьПроверкуЗаново.Видимость                     = Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Подбор и проверка упаковок'");
			Элементы.ФормаПроверкаЗавершена.Заголовок  = НСтр("ru = 'Завершить подбор'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Заголовок                                  = НСтр("ru = 'Проверка поступивших упаковок'");
			Элементы.ФормаПроверкаЗавершена.Заголовок  = НСтр("ru = 'Проверка завершена'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документе'");
		КонецЕсли;
		
		Элементы.ФормаЗакрыть.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеВопросаОНачалеПроверкиЗаново(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		НачатьПроверкуЗановоНаСервере(СоответствиеНомеровУпаковокСтрокДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуЗановоНаСервере(СоответствиеНомеровУпаковокСтрокДерева)
	
	ИнициализироватьПараметрыПроверки();
	
	ДеревоУпаковок = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроверяемыйДокумент).ВходящееДеревоУпаковок(ПроверяемыйДокумент);
	СоответствиеНомеровУпаковокСтрокДерева = Новый Соответствие;
	ЗагрузитьДеревоМаркированнойПродукции(ДеревоУпаковок, СоответствиеНомеровУпаковокСтрокДерева);
	
	ПересчитатьВсеИтогиФормы();
	
	ПолучитьРезультатыПроверкиКМ(СоответствиеНомеровУпаковокСтрокДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеИтогиФормы()
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
	//Если Не ЗначениеЗаполнено(РежимПроверки) Тогда
	//	ПредставлениеРежимаПроверки = ПредставлениеРежимаПроверки(РежимПроверки);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 5;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  0;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  1;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  2;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  3;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  4;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева)
	
	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхВсего;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является групповой упаковкой>'");
		
	ИначеЕсли СтрокаДерева.НеСодержитсяВДанныхДокумента Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
		
	ИначеЕсли ВсегоПодчиненных = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<информация о составе отсутствует>'");
		
	Иначе
		
		КоличествоПроверено =
			СтрокаДерева.КоличествоПодчиненныхВНаличии
			+ СтрокаДерева.КоличествоПодчиненныхОтложено
			+ СтрокаДерева.КоличествоПодчиненныхНеЧислилось
			+ СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокиПредставления = Новый Массив;
		СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверено %1 из %2'"), КоличествоПроверено, ВсегоПодчиненных));
		Если СтрокаДерева.КоличествоПодчиненныхОтсутствует > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'отсутствует %1'"), СтрокаДерева.КоличествоПодчиненныхОтсутствует));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхОтложено > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'отложено %1'"), СтрокаДерева.КоличествоПодчиненныхОтложено));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхНеЧислилось > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'не числилось %1'"), СтрокаДерева.КоличествоПодчиненныхНеЧислилось));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева)

	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + СтрокаДерева.КоличествоПодчиненныхУпаковок;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.НомерУпаковки;
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0
			И СтрокаДерева.КоличествоПодчиненныхУпаковок = 0 Тогда
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<информация о составе отсутствует>'");
		КонецЕсли;
	
	ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		
	Иначе
		
		СтрокиПредставления = Новый Массив;
		Если СтрокаДерева.КоличествоПодчиненныхУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'групповых упаковок - %1'"), СтрокаДерева.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'потребительских упаковок -  %1'"), СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТовара(СтрокаДерева)
	
	СтрокиПредставления = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокиПредставления.Добавить(Строка(СтрокаДерева.Номенклатура));
		Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Серия));
		Иначе
			Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
				СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
				ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
				СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			СтрокиПредставления.Добавить(СтрокаДерева.GTIN);
		Иначе
			СтрокиПредставления.Добавить(Лев(СтрокаДерева.GTIN, 14));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
			ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПредставления, ", ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		СтрокаДерева.Представление = НСтр("ru = '<товар без коробки>'");
	Иначе
		СтрокаДерева.Представление = СтрокаДерева.НомерУпаковки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОчередьОбработкиШтрихкодов.Добавить(ДанныеШтрихкода);
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкодыИзТСД(РезультатВыполнения.ТаблицаТоваров);
		ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыИзТСД(ДанныеШтрихкодов)
	
	ТранспортныеУпаковки = Новый Массив;
	Упаковки = Новый Массив;
	НомераТранспортныхУпаковок = Новый Массив;
	
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодов Цикл
		
		Попытка
			ДанныеРазбора = ИнтеграцияМДЛПКлиентСервер.ДанныеШтрихкода(ДанныеШтрихкода.Штрихкод);
		Исключение
			ТекстОшибки = НСтр("ru = 'Некорректный штрихкод %1:
				|%2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, ДанныеШтрихкода.Штрихкод, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
		Если ДанныеРазбора.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
			ТранспортныеУпаковки.Добавить(ДанныеРазбора);
			НомераТранспортныхУпаковок.Добавить(ДанныеРазбора.SSCC);
		Иначе
			Упаковки.Добавить(ДанныеРазбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Упаковки.Количество() = 0 Тогда
		Если ТранспортныеУпаковки.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'В считанных штриховых кодах нет данных ни по упаковкам, ни по лекарственным препаратам.'");
		КонецЕсли;
		
		МассивПредполагаемыхРодителей = Новый Массив;
		Для Каждого ДанныеУпаковки Из ТранспортныеУпаковки Цикл
			НомерУпаковки = ДанныеУпаковки.SSCC;
			ИдентификаторСтроки = СоответствиеНомеровУпаковокСтрокДерева.Получить(НомерУпаковки);
			Если ИдентификаторСтроки <> Неопределено Тогда
				СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если СтрокаДерева <> Неопределено Тогда
					
					СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
					Если СтрокаРодитель = Неопределено Тогда
						ШтриховойКодПредполагаемогоРодителя = Неопределено;
					Иначе
						ШтриховойКодПредполагаемогоРодителя = СтрокаРодитель.НомерУпаковки;
					КонецЕсли;
					
					Если МассивПредполагаемыхРодителей.Найти(ШтриховойКодПредполагаемогоРодителя) = Неопределено Тогда
						МассивПредполагаемыхРодителей.Добавить(ШтриховойКодПредполагаемогоРодителя);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивПредполагаемыхРодителей.Количество() > 2 Тогда
			
			ВызватьИсключение(НСтр("ru = 'Для считанных упаковок не удалось определить упаковку, в которой содержатся другие упаковки.'"));
			
		ИначеЕсли МассивПредполагаемыхРодителей.Количество() = 2 Тогда
			КоличествоЭлементов = МассивПредполагаемыхРодителей.Количество();
			Для Сч = 1 По КоличествоЭлементов Цикл
				Индекс = КоличествоЭлементов - Сч;
				Если НомераТранспортныхУпаковок.Найти(МассивПредполагаемыхРодителей[Индекс]) = Неопределено Тогда
					МассивПредполагаемыхРодителей.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
			Если МассивПредполагаемыхРодителей.Количество() <> 1 Тогда
				ВызватьИсключение(НСтр("ru = 'Для считанных упаковок не удалось определить упаковку, в которой содержатся другие упаковки.'"));
			КонецЕсли;
			Индекс = НомераТранспортныхУпаковок.Найти(МассивПредполагаемыхРодителей[0]);
			ТранспортныеУпаковки.Удалить(Индекс);
			ТранспортныеУпаковки.Вставить(0, МассивПредполагаемыхРодителей[0]);
			
		ИначеЕсли МассивПредполагаемыхРодителей.Количество() = 1 Тогда
			
			ТранспортныеУпаковки.Вставить(0, МассивПредполагаемыхРодителей[0]);
			
		Иначе
			
			ТранспортныеУпаковки.Вставить(0, Неопределено);
			
		КонецЕсли;
		
	Иначе
		Если ТранспортныеУпаковки.Количество() > 1 Тогда
			ВызватьИсключение(НСтр("ru = 'Одновременно считана маркируемая продукция и несколько упаковок. Данные обработаны не будут.'"));
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Новый Структура;
	ЗагрузкаДанныхТСД.Вставить("ИдентификаторУпаковки", -1);
	Если Упаковки.Количество() > 0 Тогда
		Если ТранспортныеУпаковки.Количество() > 0 Тогда
			ЗагрузкаДанныхТСД.Вставить("ТекущаяОперация", "УпаковкаСВложениями");
			ТекстОшибки = ПроверитьУпаковкуВДеревеМаркированнойПродукции(ТранспортныеУпаковки[0], ЗагрузкаДанныхТСД);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ЗагрузкаДанныхТСД.Вставить("ТекущаяОперация", "Упаковки");
		Для Каждого ДанныеУпаковки Из Упаковки Цикл
			ТекстОшибки = ПроверитьУпаковкуВДеревеМаркированнойПродукции(ДанныеУпаковки, ЗагрузкаДанныхТСД);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Иначе
				ОчередьОбработкиШтрихкодовТСД.Добавить(ДанныеУпаковки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		ВнешняяУпаковка = ТранспортныеУпаковки[0];
		Если ЗначениеЗаполнено(ВнешняяУпаковка) Тогда
			ЗагрузкаДанныхТСД.Вставить("ТекущаяОперация", "УпаковкаСВложениями");
			ДанныеУпаковки = Новый Структура;
			ДанныеУпаковки.Вставить("SSCC", ВнешняяУпаковка);
			ДанныеУпаковки.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка"));
			ТекстОшибки = ПроверитьУпаковкуВДеревеМаркированнойПродукции(ДанныеУпаковки, ЗагрузкаДанныхТСД);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ЗагрузкаДанныхТСД.Вставить("ТекущаяОперация", "Упаковки");
		Для Индекс = 1 По ТранспортныеУпаковки.ВГраница() Цикл
			ДанныеУпаковки = ТранспортныеУпаковки[Индекс];
			ТекстОшибки = ПроверитьУпаковкуВДеревеМаркированнойПродукции(ДанныеУпаковки, ЗагрузкаДанныхТСД);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыОтложенно()
	
	ОтключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно");
	
	// Обрабатывать штрихкоды из очереди будем по одному.
	Если ОчередьОбработкиШтрихкодов.Количество() > 0 Тогда
		
		ДанныеШтрихкода = ОчередьОбработкиШтрихкодов[0];
		ОчередьОбработкиШтрихкодов.Удалить(0);
		ОбработатьШтрихкоды(ДанныеШтрихкода);
		
	ИначеЕсли ОчередьОбработкиШтрихкодовТСД.Количество() > 0 Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ДанныеШтрихкода Из ОчередьОбработкиШтрихкодовТСД Цикл
			ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		КонецЦикла;
		ОчередьОбработкиШтрихкодовТСД.Очистить();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект);
		НачатьПроверкуКМ(ДанныеШтрихкодов, ОповещениеОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкода)
	
	Попытка
		ДанныеРазбора = ИнтеграцияМДЛПКлиентСервер.ДанныеШтрихкода(ДанныеШтрихкода.Штрихкод);
	Исключение
		ТекстОшибки = НСтр("ru = 'Некорректный штрихкод %1:
			|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ДанныеШтрихкода.Штрихкод, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ТекстОшибки = ПроверитьУпаковкуВДеревеМаркированнойПродукции(ДанныеРазбора);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		НачатьПроверкуКМ(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРазбора), ОповещениеОЗавершении);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуШтрихкодов(Результат, Контекст) Экспорт
	
	// Когда была обработана очередная порция данных, можно обрабатывать следующую.
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУпаковкуВДеревеМаркированнойПродукции(ДанныеУпаковки, ЗагрузкаДанныхТСД = Неопределено)
	
	Если ДанныеУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		НомерУпаковки = ДанныеУпаковки.SSCC;
	Иначе
		НомерУпаковки = ДанныеУпаковки.sgtin;
	КонецЕсли;
	
	ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоНомеруУпаковки(НомерУпаковки);
	Если РежимПросмотра Тогда
		Если ИдентификаторНайденнойСтроки <> -1 Тогда
			СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
			Если СтрокаДерева <> Неопределено Тогда
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	ДанныеУпаковки.Вставить("НомерУпаковки", НомерУпаковки);
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ТекстОшибки = ОбработатьСканированиеИмеющейсяВДеревеУпаковки(
			ДанныеУпаковки,
			ТекущаяСтрокаДерева,
			ИдентификаторНайденнойСтроки,
			ЗагрузкаДанныхТСД);
		
	ИначеЕсли РежимПодбораСуществующихУпаковок Тогда
		
		ТекстОшибки = ДобавитьДанныеСуществующейУпаковкиВДеревоМаркированнойПродукции(
			НомерУпаковки,
			СоответствиеНомеровУпаковокСтрокДерева);
		
	Иначе
		
		ТекстОшибки = ОбработатьНеНайденнуюВДеревеУпаковку(ДанныеУпаковки, ТекущаяСтрокаДерева);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторСтрокиДереваПоНомеруУпаковки(НомерУпаковки)
	
	Если СоответствиеНомеровУпаковокСтрокДерева = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Идентификатор = СоответствиеНомеровУпаковокСтрокДерева.Получить(НомерУпаковки);
	Если Идентификатор = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Функция ОбработатьСканированиеИмеющейсяВДеревеУпаковки(ДанныеУпаковки, ТекущаяСтрокаДерева, ИдентификаторНайденнойСтроки, ЗагрузкаДанныхТСД = Неопределено)
	
	НайденнаяСтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НайденнаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	Иначе
		РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя().ПолучитьРодителя();
	КонецЕсли;
	
	НомерУпаковкиГдеНашли = Неопределено;
	ОбработкаДанныхТСД = ЗагрузкаДанныхТСД <> Неопределено;
	Если ОбработкаДанныхТСД Тогда
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, ЗагрузкаДанныхТСД);
	Иначе
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект);
	КонецЕсли;
	
	ТребуетсяОткрытиеФормыВыбораДействия = Истина;
	Если НайденнаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		
		Если ОбработкаДанныхТСД Тогда
			
			Если ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаСВложениями" Тогда
				ЗагрузкаДанныхТСД.ИдентификаторУпаковки = НайденнаяСтрокаДерева.ПолучитьИдентификатор();
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				Если НайденнаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
					ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				КонецЕсли;
			Иначе
				Если РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
					ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
					ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			
			СнятьПризнакПроверкиУпаковки(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
			Если НайденнаяСтрокаДерева = ТекущаяСтрокаДерева Тогда
				УстановитьПризнакПроверкиУпаковки(НайденнаяСтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТребуетсяОткрытиеФормыВыбораДействия Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сначала завершите проверку групповой упаковки %1.'"), СтрокаПроверяемойУпаковки.НомерУпаковки);
		Если РодительНайденнойСтроки = Неопределено Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Потом повторно отсканируйте текущую упакоку.'");
		Иначе
			ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Потом перейдите к проверке упаковки %1 и повторно отсканируйте текущую упакоку.'"), РодительНайденнойСтроки.НомерУпаковки);
		КонецЕсли;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сначала перейдите к проверке упаковки %1, потом повторно отсканируйте текущую упаковку.'"), РодительНайденнойСтроки.НомерУпаковки);
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Функция ДобавитьДанныеСуществующейУпаковкиВДеревоМаркированнойПродукции(НомерУпаковки, СоответствиеНомеровУпаковокСтрокДерева)
	
	
	
КонецФункции

&НаКлиенте
Функция ОбработатьНеНайденнуюВДеревеУпаковку(ДанныеУпаковки, ТекущаяСтрокаДерева)
	
	Если Не ДобавлятьОтсутствующиеВДокументе Тогда
		Возврат  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Упаковка с номером %1 отсутствует в документе.'"), ДанныеУпаковки.НомерУпаковки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПризнакПроверкиУпаковки(СтрокаДерева)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если СтрокаРодитель.ИдетПроверкаДаннойУпаковки Тогда
			Прервать;
		Иначе
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Истина;
			УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		КонецЕсли;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Истина;
	Модифицированность                      = Истина;
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ИдентификаторТекущейПроверяемойУпаковки = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакПроверкиУпаковки(СтрокаДерева, ВключаяРодителей = Ложь)
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
	Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			СнятьПризнакПроверкиУпаковки(ПодчиненнаяСтрока);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.КоличествоПодчиненныхВсего > 6
	   И СтрокаДерева.КоличествоПодчиненныхНеПроверялось < 4 Тогда
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
				
				ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует");
				УстановитьСтатусОтсутствуетДляПодчиненных(ПодчиненнаяСтрока);
				
			КонецЕсли;
			
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
			ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ВключаяРодителей Тогда
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Ложь;
			УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
			Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаРодитель.ПолучитьИдентификатор());
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		ИдентификаторТекущейПроверяемойУпаковки = -1;
		
	Иначе
		
		Если СтрокаРодитель = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = СтрокаРодитель.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует");
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДляВыделенныхСтрок(ВыделенныеСтроки, НовыйСтатус)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
		 Или ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			Если Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
			
		Иначе
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			Если РодительскаяСтрока <> Неопределено
			   И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			
		КонецЕсли;
		
		УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(ДанныеСтроки);
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	Если СкрытьПроверенные
	   И КоличествоОбработанныхСтрок > 0 Тогда
		СкрытьПроверенныеНаСервере();
	КонецЕсли;
	
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакНайденную(СтрокаДерева)
	
	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии")
	 Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась")
	 Или СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
	 Или СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии");
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего)
	
	Если КоличествоОбработанных > 0 Тогда
		
		ШаблонЗаголовкаОбработано   = НСтр("ru = 'Статус проверки ""%1"" установлен'");
		ШаблонСообщенияОбработано   = НСтр("ru = 'Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбработано,
			КоличествоОбработанных,
			КоличествоВсего,
			НовыйСтатус);
		
	Иначе
		
		ШаблонЗаголовкаНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен'");
		ШаблонСообщенияНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен ни для одной строки.'");;
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПроверенныеНаСервере()
	
	Если СкрытьПроверенные Тогда
		
		СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьПроверенныеВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПроверенныеВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)
	
	Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(СтрокаДерева);
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьПроверенныеВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		ТекущаяСтрокаСоответствуетОтбору =
			СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии")
			И СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась");
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева)
	
	Если Не СкрытьПроверенные Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	СкрытьПроверенныеВСтрокеДерева(СтрокаДерева.ПолучитьИдентификатор(), СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		
		Если СтрокаДерева.Свойство("ИдетПроверкаДаннойУпаковки")
		   И СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			СтрокаДерева.ИндексКартинкиШтрихкод = 3;
		Иначе
			СтрокаДерева.ИндексКартинкиШтрихкод = 0;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 1;
		
	Иначе
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 2;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковки(Форма)
	
	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковкиТСД(Форма, ЗагрузкаДанныхТСД)
	
	Если ЗагрузкаДанныхТСД.ИдентификаторУпаковки = - 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ЗагрузкаДанныхТСД.ИдентификаторУпаковки);
	
КонецФункции

#Область ПересчетИтогов

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции)
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные)
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок                = 0;
	СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего                   = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок ;
		СтрокаДерева.КоличествоПодчиненныхУпаковок                = СтрокаДерева.КоличествоПодчиненныхУпаковок                + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	СтрокаДерева.ВсяУпаковкаПроверена =
		Не СтрокаДерева.НеСодержитсяВДанныхДокумента
		И (СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхВНаличии)
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева)
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущиеДанные)
	
	Элементы = Форма.Элементы;
	
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = "";
		Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
		
	Иначе
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = ТекущиеДанные.ПредставлениеПроверкиПодчиненных;
		
		Если ТекущиеДанные.КоличествоПодчиненныхОтсутствует > 0 Тогда
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхКрасный;
			
		ИначеЕсли ТекущиеДанные.КоличествоПодчиненныхОтложено > 0 Тогда
		
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхЖелтый;
			
		Иначе
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГруппаТоваров()
	Возврат ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ПустаяСсылка");
КонецФункции

#КонецОбласти

#Область РезультатыПроверки

&НаКлиенте
Процедура ЗавершитьПроверку(СтатусПроверки = Неопределено)
	
	АдресВоВременномХранилище = РезультатПроверкиИПодбора(СтатусПроверки, ВладелецФормы.УникальныйИдентификатор);
	
	Модифицированность = Ложь;
	Закрыть(АдресВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриЗавершенииПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ПеречислениеСсылка.СтатусыПроверкиНаличияУпаковкиМДЛП") Тогда
		ЗавершитьПроверку(Результат);
	ИначеЕсли Результат = Истина Тогда
		ЗавершитьПроверку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьПромежуточныеРезультатыПроверкиНаСервере(УникальныйИдентификаторВладельцаФормы)
	
	ДокументОснованиеОбъект = ПроверяемыйДокумент.ПолучитьОбъект();
	
	ВернутьБлокировку = Ложь;
	Попытка
		ДокументОснованиеОбъект.Заблокировать();
	Исключение
		
		Если Не СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),, "ПроверяемыйДокумент");
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			
			// Из документации к платформе, на сайте ИТС:
			// В тот момент, когда пользователь начинает модификацию объекта в форме, расширение формы устанавливает пессимистическую блокировку.
			// Когда пользователь, редактировавший объект, закроет форму объекта, расширение формы снимет пессимистическую блокировку.
			// Более подробно см. на сайте ИТС, в разделе Разработка и администрирование - 1С:Предприятие 8.3.х.Документация.
			// В документации нет информации о том, что пессиместическая объектная блокировка снимается после записи объекта.
			// Об этом свидетельствует так же вызов исключения при попытке заблокировать экземпляр объекта.
			// По этому, при необходимости, блокировку экземпляра записанного объекта нужно снять вручную,
			// с указанием идентификатора формы, в которой был заблолкирован объект.
			РазблокироватьДанныеДляРедактирования(ПроверяемыйДокумент, УникальныйИдентификаторВладельцаФормы);
			ДокументОснованиеОбъект.Заблокировать();
			ВернутьБлокировку = Истина;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),, "ПроверяемыйДокумент");
			Возврат Ложь;
		КонецПопытки;
		
	КонецПопытки;
	
	ДокументОснованиеОбъект.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеРезультатовПроверки());
	
	Если ПроверяемыйДокумент.Метаданные().Реквизиты.Найти("СтатусПроверкиИПодбора") <> Неопределено Тогда
		ДокументОснованиеОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.Выполняется;
	КонецЕсли;
	
	ДокументОснованиеОбъект.Записать(?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
	ДокументОснованиеОбъект.Разблокировать();
	Если ВернутьБлокировку Тогда
		// Возвращаем пессимистическую блокировку экземпляра объекта в исходное состояние.
		ЗаблокироватьДанныеДляРедактирования(ПроверяемыйДокумент,, УникальныйИдентификаторВладельцаФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДанныеРезультатовПроверки()
	
	РезультатыПроверки = Новый Структура;
	РезультатыПроверки.Вставить("ДеревоМаркированнойПродукции", РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	РезультатыПроверки.Вставить("СледующийСтикерОтложено"     , СледующийСтикерОтложено);
	РезультатыПроверки.Вставить("НомерПроверяемойУпаковки"    , НомерПроверяемойУпаковки());
	
	Возврат РезультатыПроверки;
	
КонецФункции

&НаСервере
Функция НомерПроверяемойУпаковки()
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		СтрокаСПроверяемойУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		Если СтрокаСПроверяемойУпаковкой <> Неопределено Тогда
			Возврат СтрокаСПроверяемойУпаковкой.НомерУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция РезультатПроверкиИПодбора(СтатусПроверки, УникальныйИдентификаторФормыВладельца)
	
	Если СтатусПроверки <> Неопределено Тогда
		Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, СтатусПроверки, Ложь);
		КонецЦикла;
		ПересчитатьВсеИтогиФормы();
	КонецЕсли;
	
	РезультатПроверки = Новый ТаблицаЗначений;
	РезультатПроверки.Колонки.Добавить("НомерУпаковки" , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	РезультатПроверки.Колонки.Добавить("ТипУпаковки"   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковокМДЛП"));
	РезультатПроверки.Колонки.Добавить("СтатусПроверки", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияУпаковкиМДЛП"));
	
	Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаПроверяемого.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			
			Для Каждого СтрокаПотребительскихУпаковок Из СтрокаПроверяемого.ПолучитьЭлементы() Цикл
				НоваяСтрока = РезультатПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребительскихУпаковок);
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПроверяемого);
			Если СтрокаПроверяемого.КоличествоПодчиненныхОтсутствует > 0 Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
			КонецЕсли;
			
		КонецЕсли
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПроверки", РезультатПроверки);
	
	Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
		Результат.Вставить(
			"АдресДанныхРезультатаПроверки", 
			ПоместитьВоВременноеХранилище(ДанныеРезультатовПроверки(), УникальныйИдентификаторФормыВладельца));
	КонецЕсли;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификаторФормыВладельца);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, СтатусПроверки, УстанавливатьБезусловно)
	
	Если СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком
	 Или СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
	
	ИначеЕсли УстанавливатьБезусловно Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусПроверки)
			И (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась
				Или СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена) Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка
			И СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, СтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКМ

&НаСервере
Процедура ПодключитьМеханизмПроверкиКМ()
	
	ПараметрыПодключения = КонтрольКодовМаркировкиМДЛП.ПараметрыПодключенияПроверкиКМ(ЭтотОбъект);
	ПараметрыПодключения.ДокументСсылка = ПроверяемыйДокумент;
	КонтрольКодовМаркировкиМДЛП.ПодключитьМеханизмПроверкиКМ(ПараметрыПодключения);
	
	МеханизмПодключен = КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМПодключен(ЭтотОбъект);
	
	Элементы.ДеревоМаркированнойПродукцииГруппаПроверкиКМ.Видимость = МеханизмПодключен;
	Элементы.ДеревоМаркированнойПродукцииВыборочныйКонтрольМДЛП.Видимость = МеханизмПодключен;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуКМ(ДанныеШтрихкодов, ОповещениеОЗавершении)
	
	Если Не КонтрольКодовМаркировкиМДЛПКлиент.МеханизмПроверкиКМИспользуется(ЭтотОбъект) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроверки = Новый Массив;
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодов Цикл
		
		Если ДанныеШтрихкода.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода.ШтрихкодBase64 = СтрЗаменить(СтрЗаменить(ДанныеШтрихкода.ШтрихкодBase64, Символы.ПС, ""), Символы.ВК, "");
		
		ЭлементДанных = КонтрольКодовМаркировкиМДЛПКлиент.ЭлементДанныхДляПроверки();
		ЭлементДанных.КодМаркировки         = ДанныеШтрихкода.SGTIN;
		ЭлементДанных.ПолныйКодМаркировки   = ДанныеШтрихкода.ШтрихкодBase64;
		ЭлементДанных.ИдентификаторЭлемента = ДанныеШтрихкода.SGTIN;
		
		ДанныеДляПроверки.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Если ДанныеДляПроверки.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Доступность = Ложь;
	
	ОповещениеОЗавершенииПроверкиКМ = Новый ОписаниеОповещения("ЗакончитьПроверкуКМ", ЭтотОбъект, ОповещениеОЗавершении);
	
	ПараметрыПроверкиКМ = КонтрольКодовМаркировкиМДЛПКлиент.ПараметрыПроверкиКМ(ЭтотОбъект);
	ПараметрыПроверкиКМ.ОповещениеОЗавершении     = ОповещениеОЗавершенииПроверкиКМ;
	
	ПараметрыПроверкиКМ.Организация               = ПроверяемыйДокумент_Организация;
	ПараметрыПроверкиКМ.МестоДеятельности         = ПроверяемыйДокумент_МестоДеятельности;
	ПараметрыПроверкиКМ.ДанныеДляПроверки         = ДанныеДляПроверки;
	
	ПараметрыПроверкиКМ.ИнтерактивныйРежим        = Ложь;
	ПараметрыПроверкиКМ.СообщатьОбОшибкахПроверки = Истина;
	
	КонтрольКодовМаркировкиМДЛПКлиент.НачатьПроверкуКМ(ПараметрыПроверкиКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуКМ(РезультатПроверки, ОповещениеОЗавершении) Экспорт
	
	Доступность = Истина;
	
	ФлагМодифицированность = Ложь;
	ВерхнеуровневыеУпаковки = Новый Соответствие;
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		
		Для Каждого КлючИЗначение Из РезультатПроверки.ДанныеПроверки Цикл
			
			SGTIN = КлючИЗначение.Ключ;
			ДанныеШтрихкодаИсточник = КлючИЗначение.Значение;
			
			ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоНомеруУпаковки(SGTIN);
			Если ИдентификаторНайденнойСтроки = -1 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеШтрихкодаИсточник);
			
			ПолучитьВерхнеуровневыеУпаковкиДляФормированияРезультатовПроверкиКМ(СтрокаДерева, ВерхнеуровневыеУпаковки);
			
			ФлагМодифицированность = Истина;
			
		КонецЦикла;
		
		СформироватьРезультатыПроверкиКМДляВерхнеуровневыхУпаковок(ЭтотОбъект, ВерхнеуровневыеУпаковки);
		
	КонецЕсли;
	
	Если ФлагМодифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРезультатыПроверкиКМ(СоответствиеНомеровУпаковокСтрокДерева)
	
	Если Не КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМИспользуется(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = КонтрольКодовМаркировкиМДЛП.ПараметрыЗаписиРезультатовПроверкиКМ(ЭтотОбъект);
	
	Если СоответствиеНомеровУпаковокСтрокДерева = Неопределено Тогда
		СоответствиеНомеровУпаковокСтрокДерева = ПолучитьИзВременногоХранилища(АдресСоответствиеНомеровУпаковокСтрокДерева);
	КонецЕсли;
	Для Каждого КлючИЗначение Из СоответствиеНомеровУпаковокСтрокДерева Цикл
		
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(КлючИЗначение.Значение);
		Если СтрокаДерева = Неопределено Или СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультата = ПараметрыЗаписи.ТаблицаРезультатовПроверкиКМ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДерева);
		
	КонецЦикла;
	
	КонтрольКодовМаркировкиМДЛП.ЗаписатьРезультатыПроверкиКМ(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатыПроверкиКМ(СоответствиеНомеровУпаковокСтрокДерева = Неопределено)
	
	Если Не КонтрольКодовМаркировкиМДЛП.МеханизмПроверкиКМПодключен(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствиеНомеровУпаковокСтрокДерева = Неопределено Тогда
		СоответствиеНомеровУпаковокСтрокДерева = ПолучитьИзВременногоХранилища(АдресСоответствиеНомеровУпаковокСтрокДерева);
	КонецЕсли;
	
	ПараметрыПолучения = КонтрольКодовМаркировкиМДЛП.ПараметрыПолученияРезультатовПроверкиКМ();
	Для Каждого КлючИЗначение Из СоответствиеНомеровУпаковокСтрокДерева Цикл
		
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(КлючИЗначение.Значение);
		Если СтрокаДерева = Неопределено Или СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПолучения.НомераУпаковок.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	ТаблицаРезультатовПроверкиКМ = КонтрольКодовМаркировкиМДЛП.ПолучитьРезультатыПроверкиКМ(ПараметрыПолучения);
	Если Не ЗначениеЗаполнено(ТаблицаРезультатовПроверкиКМ) Тогда
		Возврат;
	КонецЕсли;
	
	ВерхнеуровневыеУпаковки = Новый Соответствие;
	Для Каждого СтрокаРезультатовПроверкиКМ Из ТаблицаРезультатовПроверкиКМ Цикл
		
		ИдентификаторСтрокиДерева = СоответствиеНомеровУпаковокСтрокДерева[СтрокаРезультатовПроверкиКМ.НомерУпаковкиПроверки];
		Если ИдентификаторСтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаРезультатовПроверкиКМ);
		
		КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеРезультатаПроверкиКМ(ЭтотОбъект, СтрокаДерева);
		
		ПолучитьВерхнеуровневыеУпаковкиДляФормированияРезультатовПроверкиКМ(СтрокаДерева, ВерхнеуровневыеУпаковки);
		
	КонецЦикла;
	
	СформироватьРезультатыПроверкиКМДляВерхнеуровневыхУпаковок(ЭтотОбъект, ВерхнеуровневыеУпаковки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьВерхнеуровневыеУпаковкиДляФормированияРезультатовПроверкиКМ(СтрокаДерева, ВерхнеуровневыеУпаковки)
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Если РодительскаяСтрока <> Неопределено Тогда
		Если ВерхнеуровневыеУпаковки.Получить(РодительскаяСтрока) = Неопределено Тогда
			ВерхнеуровневыеУпаковки.Вставить(РодительскаяСтрока, РодительскаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьРезультатыПроверкиКМДляВерхнеуровневыхУпаковок(Форма, ВерхнеуровневыеУпаковки)
	
	Для Каждого КлючИЗначение Из ВерхнеуровневыеУпаковки Цикл
		
		РодительскаяСтрока = КлючИЗначение.Значение;
		Пока РодительскаяСтрока <> Неопределено Цикл
			
			РодительскаяСтрока.КодСтатусаПроверкиКМ       = Неопределено;
			РодительскаяСтрока.ПояснениеСтатусаПроверкиКМ = Неопределено;
			
			ПодчиненныеСтроки = РодительскаяСтрока.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				
				КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеИтоговогоРезультатаПроверкиГруппыКМ(Форма, РодительскаяСтрока, ПодчиненнаяСтрока);
				
				// Если статус принял значение "ошибки проверки", продолжать не нужно.
				Если РодительскаяСтрока.КодСтатусаПроверкиКМ = 2 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
