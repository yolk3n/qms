
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ABC классификация
	ПериодABCКлассификации = Константы.ПериодABCКлассификацииНоменклатуры.Получить();
	КоличествоПериодовABCКлассификации = Константы.КоличествоПериодовABCКлассификацииНоменклатуры.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеФормы();
	ОбновитьОписания();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьABCКлассификациюЧастоИспользуемыеВозможности(Команда)
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполняется ABC/XYZ классификация...'"), БиблиотекаКартинок.Информация32);
	
	ВыполнитьABCКлассификациюНаСервереЧастоИспользуемыеВозможности();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполнена ABC/XYZ классификация.'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаABCКлассификации(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаABCКлассификацииЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.Классификация.Форма.НастройкаПараметровКлассификацииНоменклатуры",, ЭтотОбъект ,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаABCКлассификацииЗавершение(Настройки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ПериодABCКлассификации = Настройки.ПериодABCКлассификации;
		КоличествоПериодовABCКлассификации = Настройки.КоличествоПериодовABCКлассификации;
		
		ОбновитьОписания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьABCКлассификацию(Команда)
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполняется ABC классификация...'"), БиблиотекаКартинок.Информация32);
	
	ВыполнитьABCКлассификациюНаСервере(ПериодABCКлассификации);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполнена ABC классификация.'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьABCКлассификацию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьABCКлассификациюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Вся информация об ABC классификации номенклатуры будет очищена. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьABCКлассификациюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполняется очистка ABC классификации...'"), БиблиотекаКартинок.Информация32);
		ОчиститьABCКлассификациюНаСервере();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Классификация номенклатуры'"),, НСтр("ru = 'Выполнена очистка ABC классификации.'"), БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияПолныеЧастоИспользуемыеВозможностиНажатие(Элемент)
	
	ПолныеВозможности = НЕ ПолныеВозможности;
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьОтображениеФормы()
	
	Если ПолныеВозможности Тогда
		
		// Переключение к полным возможностям
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПолныеВозможности;
		
		// Изменение заголовка формы и заголовка декорации
		Заголовок = НСтр("ru = 'Классификация номенклатуры - полные возможности'");
		Элементы.ДекорацияПолныеЧастоИспользуемыеВозможности.Заголовок = НСтр("ru = 'Часто используемые возможности'");
		
	Иначе
		
		 // Переключение к часто используемым возможностям
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЧастоИспользуемыеВозможности;
		
		// Изменение заголовка формы и заголовка декорации
		Заголовок = НСтр("ru = 'Классификация номенклатуры - часто используемые возможности'");
		Элементы.ДекорацияПолныеЧастоИспользуемыеВозможности.Заголовок = НСтр("ru = 'Полные возможности'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписания()
	
	ABCОписаниеЧастоИспользуемыеВозможности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнить ABC классификацию по данным за %1'"), ПолучитьОписаниеНастройки(ПериодABCКлассификации, КоличествоПериодовABCКлассификации));
	ABCОписаниеПолныеВозможности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнить ABC классификацию за все периоды по данным за %1'"), ПолучитьОписаниеНастройки(ПериодABCКлассификации, КоличествоПериодовABCКлассификации));
	
	// Часто используемые возможности
	Элементы.ДекорацияABCКлассификацияОписаниеЧастоИспользуемыеВозможности.Заголовок = ABCОписаниеЧастоИспользуемыеВозможности;
	
	// Полные возможности
	Элементы.ДекорацияABCКлассификацияВыполнить.Заголовок = ABCОписаниеПолныеВозможности;
	Элементы.ДекорацияABCКлассификацияОчистить.Заголовок = НСтр("ru = 'Очистить ABC классификацию за все периоды.'");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеНастройки(Период, КоличествоПериодов, Подпериод = Неопределено)
	
	ПредставлениеНастройки = "";
	
	Если НЕ ЗначениеЗаполнено(КоличествоПериодов) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		
		Возврат ПредставлениеНастройки;
		
	КонецЕсли;
	
	ПараметрыПредметаИсчисления = "";
	
	Если Период = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий день, предыдущих дня, предыдущих дней, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущую неделю, предыдущих недели, предыдущих недель, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущую декаду, предыдущих декады, предыдущих декад, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий месяц, предыдущих месяца, предыдущих месяцев, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий квартал, предыдущих квартала, предыдущих кварталов, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущее полугодие, предыдущих полугодий, предыдущих полугодия, с,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий год, предыдущих года, предыдущих лет, м,,,,, 0'");
		
	Иначе
		
		ПараметрыПредметаИсчисления = "";
		
	КонецЕсли;
	
	ПредставлениеНастройки = НРег(ЧислоПрописью(КоличествоПериодов,, ПараметрыПредметаИсчисления));
	
	Если ЗначениеЗаполнено(Подпериод) Тогда
		
		Если Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по дням).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по неделям).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по декадам).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по месяцам).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по кварталам).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по полугодиям).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по годам).'");
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеНастройки = ПредставлениеНастройки + ".";
		
	КонецЕсли;
	
	Возврат ПредставлениеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьABCКлассификациюНаСервереЧастоИспользуемыеВозможности()
	
	РегистрыСведений.ABCКлассификацияНоменклатуры.ВыполнитьABCКлассификацию(ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьABCКлассификациюНаСервере(ПериодABCКлассификации)
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Закупки.Период КАК Период
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДатаКлассификации
		= КлассификацияБольничнаяАптека.РасширенныйПериод(Выборка.Период, ПериодABCКлассификации, 0).ДатаОкончания + 1;
	МаксимальнаяДатаКлассификации = ТекущаяДатаСеанса();
	
	Пока ДатаКлассификации <= МаксимальнаяДатаКлассификации Цикл
		
		РегистрыСведений.ABCКлассификацияНоменклатуры.ВыполнитьABCКлассификацию(ДатаКлассификации);
		ДатаКлассификации
			= КлассификацияБольничнаяАптека.РасширенныйПериод(ДатаКлассификации, ПериодABCКлассификации, 0).ДатаОкончания + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьABCКлассификациюНаСервере()
	
	РегистрыСведений.ABCКлассификацияНоменклатуры.ОчиститьABCКлассификацию();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
