
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Формула           = Параметры.Формула;
	ИсходнаяФормула   = Параметры.Формула;
	УбиратьИмяТаблицы = Параметры.УбиратьИмяТаблицы;
	ИспользоватьПредставлениеФормулы = Параметры.ИспользоватьПредставлениеФормулы;
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.Операнды) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов ""Конструктора формул"": не заданы операнды.'");
	КонецЕсли;
	
	Операнды = ПолучитьИзВременногоХранилища(Параметры.Операнды);
	Если ТипЗнч(Операнды) = Тип("ТаблицаЗначений") Тогда
		
		ВычислятьФормулу = Параметры.ВычислятьФормулу;
		Элементы.ГруппаОперандыСтраницы.ТекущаяСтраница = Элементы.СтраницаОперандыТаблица;
		
		ОперандыТаблица.Загрузить(Операнды);
		Для каждого ТекущаяСтрока Из ОперандыТаблица Цикл
			
			Если ТекущаяСтрока.ПометкаУдаления Тогда
				ТекущаяСтрока.ИндексКартинки = 3;
			Иначе
				ТекущаяСтрока.ИндексКартинки = 2;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Тип) Тогда
				ТекущаяСтрока.Тип = Новый ОписаниеТипов("Число");
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущаяСтрока.Представление) Тогда
				ТекущаяСтрока.Представление = ТекущаяСтрока.Идентификатор;
			КонецЕсли;
			
			ТекущаяСтрока.Значение = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.Значение);
			
		КонецЦикла;
		
		Если ВычислятьФормулу Тогда
			РезультатВычисления = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьПредставлениеВычисленияПоФормуле(Формула, ОперандыТаблица);
		КонецЕсли;
		
		Элементы.ОперандыТаблицаЗначение.Видимость = ВычислятьФормулу;
		Элементы.ОперандыТаблица.Шапка =ВычислятьФормулу;
		
	ИначеЕсли ТипЗнч(Операнды) = Тип("СхемаКомпоновкиДанных") Тогда
		
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОперандыСтраницы",
			"ТекущаяСтраница",
			Элементы.СтраницаОперандыДоступныеОтборыКомпоновщика);
		
		Если Параметры.ПараметрыДанных <> Неопределено Тогда
			Для Каждого Параметр Из Параметры.ПараметрыДанных Цикл
				Операнды.Параметры[Параметр.Ключ].Значение = Параметр.Значение;
			КонецЦикла;
		КонецЕсли;
		
		ОперандыКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(
			ПоместитьВоВременноеХранилище(Операнды, УникальныйИдентификатор)));
		
	Иначе
		ВызватьИсключение НСтр("ru='Некорректный вызов ""Конструктора формул"": некорректный тип операндов.'");
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.Операторы) Тогда
		ДеревоОператоров = ПолучитьИзВременногоХранилища(Параметры.Операторы);
	Иначе
		ДеревоОператоров = КонструкторФормулБольничнаяАптека.ПолучитьСтандартноеДеревоОператоров();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
	Если Не ПустаяСтрока(Параметры.ОперандыЗаголовок) Тогда
		Элементы.ГруппаОперанды.Заголовок = Параметры.ОперандыЗаголовок;
		Элементы.ГруппаОперанды.Подсказка = Параметры.ОперандыЗаголовок;
	КонецЕсли;
	
	Если Не ИспользоватьПредставлениеФормулы Тогда
		Элементы.Представление.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Пояснение) Тогда
		Элементы.ДекорацияПояснение.Заголовок = Параметры.Пояснение;
	Иначе
		Элементы.ДекорацияПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияРасчетПоФормуле.Видимость = ВычислятьФормулу;
	Элементы.РезультатВычисления.Видимость = ВычислятьФормулу;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если СокрЛП(ИсходнаяФормула) <> СокрЛП(Формула) Тогда
		ТекстВопроса = НСтр("ru='Формула была изменена. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемОкончание", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстВопроса, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьФормулу();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();
	Если ПроверитьФормулу() Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'В формуле ошибок не обнаружено'"),
			,
			,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьФормулу();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Список "Операторы"
#Область Операторы

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОператорВФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Оператор) Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Оператор;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.Оператор = "Формат(,)" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		Оповещение = Новый ОписаниеОповещения("ВставитьОператорВФормулуЗавершение", ЭтотОбъект);
		ФорматСтроки.Показать(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Операторы

////////////////////////////////////////////////////////////////////////////////
// Список "Операнды"
#Область Операнды

&НаКлиенте
Процедура ОперандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = Элементы.ОперандыТаблицаЗначение.Имя Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		Оповещение = Новый ОписаниеОповещения("ВставитьОперандВФормулуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный элемент помечен на удаление'") + Символы.ПС + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ВставитьОперандВФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.Значение = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьТекстОперандаДляВставки(Элемент.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВставитьОперандВФормулуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный элемент помечен на удаление'") + Символы.ПС + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыТаблицаЗначениеПриИзменении(Элемент)
	
	РезультатВычисления = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьПредставлениеВычисленияПоФормуле(Формула, ОперандыТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Операнд = ПолучитьОперанд(ВыбраннаяСтрока);
	ВставитьТекстВФормулу(КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьТекстОперандаДляВставки(Операнд));
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Операнд = ПолучитьОперанд(Элемент.ТекущаяСтрока);
	ПараметрыПеретаскивания.Значение = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьТекстОперандаДляВставки(Операнд);
	
КонецПроцедуры

#КонецОбласти // Операнды

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	Если ВычислятьФормулу Тогда
		РезультатВычисления = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьПредставлениеВычисленияПоФормуле(Формула, ОперандыТаблица);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьОперанд(ИдентификаторОперанда)
	
	Операнд = Строка(ОперандыКомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.ПолучитьОбъектПоИдентификатору(ИдентификаторОперанда).Поле);
	Если УбиратьИмяТаблицы Тогда
		ПозицияТочки = Найти(Операнд, ".");
		Если ПозицияТочки Тогда
			Операнд = Сред(Операнд, ПозицияТочки + 1);
		КонецЕсли;
	КонецЕсли;
	
	Операнд = СтрЗаменить(Операнд, "[", "");
	Операнд = СтрЗаменить(Операнд, "]", "");
	
	Возврат Операнд;
	
КонецФункции

&НаКлиенте
Процедура ВставитьОперандВФормулу()
	
	ВставитьТекстВФормулу(КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьТекстОперандаДляВставки(Элементы.ОперандыТаблица.ТекущиеДанные.Идентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулу()
	
	Если Элементы.Операторы.ТекущиеДанные.Наименование = "Формат" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		Оповещение = Новый ОписаниеОповещения("ВставитьОператорВФормулуЗавершение", ЭтотОбъект);
		ФорматСтроки.Показать(Оповещение);
	Иначе
		ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулуЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ТекстДляВставки = "Формат( , """ + Текст + """)";
		ВставитьТекстВФормулу(ТекстДляВставки, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	Иначе
		ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОперандВФормулуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВставитьОперандВФормулу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)
	
	СтрокаНач = 0;
	СтрокаКон = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	
	Если Сдвиг <> 0 Тогда
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Элементы.Формула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьФормулу()
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	Если Не КонструкторФормулБольничнаяАптекаКлиентСервер.ПроверитьФормулу(Формула, ПолучитьДоступныеОперанды(), ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru='В формуле обнаружены ошибки:'") + " " + ТекстОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Формула",, ЕстьОшибки);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДоступныеОперанды()
	
	ДоступныеОперанды = Новый Соответствие;
	
	Если Элементы.ГруппаОперандыСтраницы.ТекущаяСтраница = Элементы.СтраницаОперандыТаблица Тогда
		Для каждого Операнд Из ОперандыТаблица Цикл
			ДоступныеОперанды.Вставить(Операнд.Идентификатор, Операнд.Тип);
		КонецЦикла;
	Иначе
		ОперандыФормулы = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьОперандыФормулы(Формула);
		ДоступныеПоля = ОперандыКомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
		ПрефиксОперандов = ?(ДоступныеПоля.Элементы.Количество() = 1, Строка(ДоступныеПоля.Элементы[0].Поле) + ".", "");
		Для каждого Операнд Из ОперандыФормулы Цикл
			ДоступноеПоле = ДоступныеПоля.НайтиПоле(
				Новый ПолеКомпоновкиДанных(ПрефиксОперандов + Операнд));
			Если ДоступноеПоле <> Неопределено Тогда
				ДоступныеОперанды.Вставить(Операнд, ДоступноеПоле.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДоступныеОперанды;
	
КонецФункции

&НаКлиенте
Процедура СохранитьФормулу()
	
	ОчиститьСообщения();
	Если ПроверитьФормулу() Тогда
		
		Если ИспользоватьПредставлениеФормулы Тогда
			Результат = Новый Структура;
			Результат.Вставить("Формула", Формула);
			Результат.Вставить("Представление", Представление);
		Иначе
			Результат = Формула;
		КонецЕсли;
		
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		
		Модифицированность = Ложь;
		Закрыть(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
