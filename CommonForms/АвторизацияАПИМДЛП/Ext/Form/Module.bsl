
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыПодключения = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Самостоятельное открытие формы не поддерживается.'");
	КонецЕсли;
	
	ПараметрыПодключения = Параметры.ПараметрыПодключения;
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Авторизация: %1'"),
		?(ПараметрыПодключения.Свойство("Представление"), ПараметрыПодключения.Представление, ПараметрыПодключения.ИдентификаторОрганизации));
	
	Если ПараметрыПодключения.ТипАутентификации <> Перечисления.ТипыАутентификацииМДЛП.Пароль Тогда
		ВызватьИсключение НСтр("ru = 'Неверный тип аутентификации'");
	КонецЕсли;
	
	Если Параметры.ЗапомнитьПароль Тогда
		ЗапомнитьМеня = Истина;
		Элементы.ЗапомнитьМеня.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.ЗаголовокКнопкиВойти) Тогда
		Элементы.ФормаКомандаВойти.Заголовок = Параметры.ЗаголовокКнопкиВойти;
	КонецЕсли;
	
	ПодключениеАвтоматическогоОбмена = Параметры.ПодключениеАвтоматическогоОбмена;
	Если ПодключениеАвтоматическогоОбмена Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтеграцияМДЛП.ДанныеАутентификацииПользователяАПИ(Параметры.ИдентификаторОрганизации);
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин = ДанныеАутентификации.Логин;
		КонецЕсли;
		
	Иначе
		
		Пользователь = Пользователи.ТекущийПользователь();
		Идентификатор = СтрЗаменить(ПараметрыПодключения.ИдентификаторОрганизации, "-", "");
		
		УстановитьПривилегированныйРежим(Истина);
		Логин  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователь, СтрШаблон("Логин_%1", Идентификатор));
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователь, СтрШаблон("Пароль_%1", Идентификатор));
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль) Тогда
			Результат = ВойтиНаСервере();
			Если Результат.Статус <> "Ошибка" Тогда
				РезультатАвторизации = Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РезультатАвторизации <> Неопределено Тогда
		// Нужно подождать пока отработают все накопленные вызовы,
		// т.к. при немедленном закрытии обработчик оповещения не получает результат закрытия.
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВойти(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Результат = ВойтиНаСервере();
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ОписаниеОшибки;
		КонецЕсли;
		РезультатАвторизации = Результат;
		
		// Нужно подождать пока отработают все накопленные вызовы,
		// т.к. при немедленном закрытии обработчик оповещения не получает результат закрытия.
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВойтиНаСервере()
	
	ПараметрыПодключения.Вставить("ИдентификаторПользователя", Логин);
	Результат = ТранспортМДЛПАПИКлиентСервер.АвторизоватьсяЧерезПароль(ПараметрыПодключения, Пароль);
	Если Результат.Статус = "Ошибка" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПодключениеАвтоматическогоОбмена Тогда
		
		ДанныеАутентификации = Новый Структура("Логин, Пароль");
		ЗаполнитьЗначенияСвойств(ДанныеАутентификации, ЭтотОбъект);
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияМДЛП.СохранитьДанныеАутентификацииПользователяАПИ(Параметры.ИдентификаторОрганизации, ДанныеАутентификации);
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		Пользователь = Пользователи.ТекущийПользователь();
		Идентификатор = СтрЗаменить(ПараметрыПодключения.ИдентификаторОрганизации, "-", "");
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователь, Логин, СтрШаблон("Логин_%1", Идентификатор));
		Если ЗапомнитьМеня Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователь, Пароль, СтрШаблон("Пароль_%1", Идентификатор));
		Иначе
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователь, СтрШаблон("Пароль_%1", Идентификатор));
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть(РезультатАвторизации);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
