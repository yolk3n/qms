///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЗагружатьРасширенияКонфигурации.Видимость = Не РаботаВМоделиСервиса.РазделениеВключено();
	
	ОбработатьПрерваннуюПроцедуруЗагрузки();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ХешСуммаФайла) Тогда
		ОткрытьВыборФайла(
			НСтр("ru = 'Для продолжения необходимо повторно загрузить файл'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаЗагрузкаДанныхКлиент.ПоказатьДиалогПрерваннойЗагрузкиПриНеобходимости();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОткрытьФормуАктивныхПользователей(Элемент)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.АктивныеПользователи");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСКаркасамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБезКаркасовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасширения Тогда
		ПроверкаРежимаВыгрузкиДляТехническойПоддержки();
	Иначе
		ОткрытьВыборФайла(
			НСтр("ru = 'Загрузка файла'"));
	КонецЕсли;
		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьВидимостьПредупрежденийПоРасширениям(Расширения)
	
	ОтображатьБезКаркасов = Расширения.БезКаркасов.Количество() > 0;
	Элементы.ДекорацияБезКаркасов.Видимость = ОтображатьБезКаркасов;
	Элементы.ДекорацияБезКаркасовНиз.Видимость = ОтображатьБезКаркасов;
	Элементы.ГруппаСписокБезКаркасов.Видимость = ОтображатьБезКаркасов;
	Если Расширения.БезКаркасов.Количество() > 0 Тогда
		
		Элементы.ДекорацияСписокБезКаркасов.Заголовок = СтрСоединить(Расширения.БезКаркасов, Символы.ПС);
		
	КонецЕсли;
		
	ОтображатьСКаркасами = Расширения.СКаркасами.Количество() > 0;
	Элементы.ДекорацияСКаркасами.Видимость = ОтображатьСКаркасами;
	Элементы.ГруппаСписокКаркасов.Видимость = ОтображатьСКаркасами;
	Если Расширения.СКаркасами.Количество() > 0 Тогда
		
		Элементы.ДекорацияСписокКаркасов.Заголовок = СтрСоединить(Расширения.СКаркасами, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборФайла(Заголовок)

	ИмяФайлаВременногоХранилища = ПолучитьФайлВременногоХранилища(УникальныйИдентификатор);

	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПомещенияФайла();
	ПараметрыПередачи.ИмяФайлаИлиАдрес = ИмяФайлаВременногоХранилища;
	ПараметрыПередачи.ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОбработатьПомещениеФайла", ЭтотОбъект);
	ПараметрыПередачи.БлокируемаяФорма = ЭтотОбъект;
	ПараметрыПередачи.ЗаголовокДиалогаВыбора = Заголовок;
	ПараметрыПередачи.ФильтрДиалогаВыбора = СтрШаблон(НСтр("ru = 'Архивы %1'"), "(*.zip)|*.zip");
	ПараметрыПередачи.ИмяФайлаДиалогаВыбора = ВыгрузкаЗагрузкаДанныхКлиентСервер.ИмяФайлаВыгрузкиДанных();

	ФайлыБТСКлиент.ПоместитьФайлИнтерактивно(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПомещениеФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХешСуммаФайла) Тогда
		
		Если ХешСуммаВременногоФайлаСовпадает(ИмяФайлаВременногоХранилища, ХешСуммаФайла) Тогда
			ЗавершитьЗагрузкуДанных();	
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеЗагрузкиДругогоФайлаЗавершение", ЭтотОбъект);
		
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Файл данных не совпадает с тем из которого загрузка запускалась ранее. Продолжение загрузки будет не возможно и она будет запущена с начала.
				|Продолжить?'"),
				РежимДиалогаВопрос.ОКОтмена,,
				КодВозвратаДиалога.Отмена);
		
		КонецЕсли;
		
	Иначе		
		
		ОбработатьПодтверждениеФайла();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗагрузкиДругогоФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ХешСуммаФайла = Неопределено;
	Элементы.ЗагружатьРасширенияКонфигурации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	ОбработатьПодтверждениеФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеФайла() Экспорт
	
	РезультатПроверки = ПроверитьКонфигурациюВыгрузки(ИмяФайлаВременногоХранилища);
	
	Если Не РезультатПроверки.Успех Тогда

		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);

		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.Ошибка32;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Ошибка загрузки файла'");

		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			Неопределено,
			РезультатПроверки.ТекстОшибкиПроверки,
			РежимДиалогаВопрос.ОК,
			ПараметрыВопроса);

		Возврат;
	КонецЕсли;

	Если ФайлДанныхСодержитПоставляемыеРасширения() Тогда

		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасширения;

	Иначе

		ПроверкаРежимаВыгрузкиДляТехническойПоддержки();

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКонфигурациюВыгрузки(ИмяФайлаВременногоХранилища) Экспорт
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);	
	
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);

	Попытка
		РезультатПроверки = ПроверитьКонфигурациюВыгрузкиВнутр(ЧтениеДанныхАрхива)
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
		
	Возврат РезультатПроверки;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьКонфигурациюВыгрузкиВнутр(ЧтениеДанныхАрхива) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("ТекстОшибкиПроверки", "");

	ПутьКФайлуСодержимого = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "PackageContents.xml");
	Если ПутьКФайлуСодержимого = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В архиве отсутствует файл содержимого (%1)'"), "PackageContents.xml");
	КонецЕсли;

	ТекстИсключенияОтсутствиеИнформацииОВыгрузке = СтрШаблон(
		НСтр("ru = 'В архиве отсутствует файл информации о выгрузке (%1)'"), "DumpInfo.xml");
	ИмяФайлаИнформацииОВыгрузке = ПолучитьИмяФайлаПоДаннымСодержимого(
		ПутьКФайлуСодержимого, 
		ВыгрузкаЗагрузкаДанныхСлужебный.DumpInfo(), 
		Неопределено); 
	Если ИмяФайлаИнформацииОВыгрузке = Неопределено Тогда
		ВызватьИсключение ТекстИсключенияОтсутствиеИнформацииОВыгрузке;
	КонецЕсли;
	
	ПутьКФайлуИнформацииОВыгрузке = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаИнформацииОВыгрузке);
	Если ПутьКФайлуИнформацииОВыгрузке = Неопределено Тогда
		ВызватьИсключение ТекстИсключенияОтсутствиеИнформацииОВыгрузке;
	КонецЕсли;
	
	ИнформацияОВыгрузке =  ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектXDTOИзФайла(
		ПутьКФайлуИнформацииОВыгрузке,
		ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo"));
	
	УдалитьФайлыВПопытке(ПутьКФайлуИнформацииОВыгрузке);
	
	//Проверка выполняется только между идентичными версиями конфигурации	
	Если ИнформацияОВыгрузке.Configuration.Name <> Метаданные.Имя 
		Или ИнформацияОВыгрузке.Configuration.Version <> Метаданные.Версия Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	ИмяФайлаСхемыКонфигурации = ПолучитьИмяФайлаПоДаннымСодержимого(
		ПутьКФайлуСодержимого, 
		"CustomData", 
		"ConfigScheme"); 
	
	УдалитьФайлыВПопытке(ПутьКФайлуСодержимого);

	Если ИмяФайлаСхемыКонфигурации = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Конфигурация поддерживает проверку схемы данных, но файл схемы не найден в файле выгрузки.
					 | Структура файла выгрузки не соответствует ожидаемой.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстПредупреждения);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПутьКФайлуСхемыКонфигурацииВыгрузки = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаСхемыКонфигурации); 
	Если ПутьКФайлуСхемыКонфигурацииВыгрузки = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	ДвоичныеДанныеСхемыКонфигурации = СхемаКонфигурации.ДвоичныеДанныеСхемы(Ложь, Ложь);	

	ХешированиеДанныхСхемыКонфигурации = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанныхСхемыКонфигурации.Добавить(ДвоичныеДанныеСхемыКонфигурации);
	
	Если ХешированиеДанныхСхемыКонфигурации.ХешСумма = ХешСуммаФайла(ПутьКФайлуСхемыКонфигурацииВыгрузки) Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуСхемыКонфигурацииВыгрузки);
		Возврат СтруктураВозврата;
	КонецЕсли;
	 	
	ОписанияРазличий = АнализСхемКонфигурации.ОписанияРазличийСхемКонфигураций(
		ДвоичныеДанныеСхемыКонфигурации,
		Новый ДвоичныеДанные(ПутьКФайлуСхемыКонфигурацииВыгрузки)); 
	
	УдалитьФайлыВПопытке(ПутьКФайлуСхемыКонфигурацииВыгрузки);
	
	Если ЗначениеЗаполнено(ОписанияРазличий) Тогда
		
		ЧастиТекстаОшибки = Новый Массив;	
		
		ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Файл выгрузки не может быть загружен в информационную базу: его конфигурация отличается от конфигурации информационной базы. 
			|Для устранения различий необходимо обратиться к своей обслуживающей организации или администратору информационной базы.'"));		
		
		ЧастиТекстаОшибки.Добавить(Символы.ПС);
		ЧастиТекстаОшибки.Добавить(Символы.ПС);

		Для Каждого ОписанияРазличия Из ОписанияРазличий Цикл
			ЧастиТекстаОшибки.Добавить("● ");
			ЧастиТекстаОшибки.Добавить(ОписанияРазличия);
			ЧастиТекстаОшибки.Добавить(Символы.ПС);
		КонецЦикла;
		
		СтруктураВозврата.ТекстОшибкиПроверки = СтрСоединить(ЧастиТекстаОшибки);
		СтруктураВозврата.Успех = Ложь;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиенте
Процедура ПроверкаРежимаВыгрузкиДляТехническойПоддержки()
	
	Если ВыгрузкаДляТехническойПоддержки(ИмяФайлаВременногоХранилища) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаРежимаВыгрузкиДляТехническойПоддержкиЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Файл данных создан в режиме выгрузки для технической поддержки.
      		|Приложение полученное из такой выгрузки предназначено только для целей тестирования и разбора проблем. Продолжить загрузку?'"),
			РежимДиалогаВопрос.ОКОтмена,,
			КодВозвратаДиалога.Отмена);
		
	Иначе		
		ЗавершитьЗагрузкуДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРежимаВыгрузкиДляТехническойПоддержкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЗагрузкуДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПрерваннуюПроцедуруЗагрузки()
		
	Если Не Параметры.ПрерванаПроцедураЗагрузки Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Получить().Получить();	
	Если ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки);	
	
	Элементы.ЗагружатьРасширенияКонфигурации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗагрузкуДанных()
	
	Состояние(
		НСтр("ru = 'Выполняется загрузка данных из сервиса.
		|Операция может занять продолжительное время, пожалуйста, подождите...'"),);
	
	ВыполнитьЗагрузку(
		ИмяФайлаВременногоХранилища,
		ЗагружатьРасширенияКонфигурации);
	УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
	ПрекратитьРаботуСистемы(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища)

	Если Не ЗначениеЗаполнено(ИмяФайлаВременногоХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ФайлыБТС.УдалитьФайлВременногоХранилища(ИмяФайлаВременногоХранилища);

КонецПроцедуры

&НаСервере
Функция ФайлДанныхСодержитПоставляемыеРасширения()
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);	
	
	ПутьКФайлуРасширений = ИзвлечьФайлИзZipАрхива(ИмяФайлаНаСервере, "Extensions.xml");
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуРасширений);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
		Возврат Ложь;
	КонецЕсли;
	
	МассивВерсий = Новый Массив;
	Расширения = Новый Структура("СКаркасами, БезКаркасов", Новый Массив, Новый Массив);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда		
			Продолжить;	
		КонецЕсли;
		
		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		Наименование = XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		
		Если НЕ ИзменяетСтруктуруДанных Тогда
			Продолжить;
		КонецЕсли;

		МассивВерсий.Добавить(Наименование);
		Если ЧтениеXML.ЗначениеАтрибута("IsFrame") <> Неопределено Тогда
			Если XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("IsFrame")) = Истина Тогда
				Расширения.СКаркасами.Добавить(Наименование);
			Иначе
				Расширения.БезКаркасов.Добавить(Наименование);
			КонецЕсли;
		Иначе
			Расширения.БезКаркасов.Добавить(Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастроитьВидимостьПредупрежденийПоРасширениям(Расширения);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьЗагрузку(Знач ИмяФайлаВременногоХранилища, Знач ЗагружатьРасширенияКонфигурации)
	
	УстановитьМонопольныйРежим(Истина);
	
	Попытка
			
		ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);
		
		ВыгрузкаЗагрузкаОбластейДанных.ПроверитьВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИмяФайлаНаСервере);
		
		ДанныеРасширений = Неопределено;
		Если ЗагружатьРасширенияКонфигурации Тогда
			РасширенияДляВосстановления = РасширенияДляВосстановления(ИмяФайлаНаСервере);
			Если ЗначениеЗаполнено(РасширенияДляВосстановления) Тогда
				ДанныеРасширений = Новый Структура("РасширенияДляВосстановления",
					РасширенияДляВосстановления);
			КонецЕсли;
		КонецЕсли;
		
		КаркасыРасширенийДляВосстановления = КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере);
		Если ЗначениеЗаполнено(КаркасыРасширенийДляВосстановления) Тогда
			Если ЗначениеЗаполнено(ДанныеРасширений) Тогда
				ДанныеРасширений.Вставить("КаркасыРасширенийДляВосстановления", КаркасыРасширенийДляВосстановления);
			Иначе
				ДанныеРасширений = Новый Структура("КаркасыРасширенийДляВосстановления",
					КаркасыРасширенийДляВосстановления);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Новый Структура();
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить("ХешСуммаФайла",
			ХешСуммаФайла(ИмяФайлаНаСервере));
		ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить("ЗагружатьРасширенияКонфигурации",
			ЗагружатьРасширенияКонфигурации);
		Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(
			Новый ХранилищеЗначения(ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки));	
				
		ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьИзАрхива(ИмяФайлаНаСервере, 
			Истина, 
			Истина,, 
			ДанныеРасширений);
		
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		
		Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(
			Неопределено);	
			
		УстановитьМонопольныйРежим(Ложь);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		УстановитьМонопольныйРежим(Ложь);
		
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		
		ШаблонЗаписиЖР = НСтр("ru = 'При загрузке данных произошла ошибка:
                               |
                               |-----------------------------------------
                               |%1
                               |-----------------------------------------'");
		ТекстЗаписиЖР = СтрШаблон(ШаблонЗаписиЖР, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстЗаписиЖР);

		ШаблонИсключения = НСтр("ru = 'При загрузке данных произошла ошибка: %1.
                                 |
                                 |Расширенная информация для службы поддержки записана в журнал регистрации. Если причина ошибки неизвестна - рекомендуется обратиться в службу технической поддержки, предоставив для расследования выгрузку журнала регистрации и файл, из которого предпринималась попытка загрузить данные.'");

		ВызватьИсключение СтрШаблон(ШаблонИсключения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере)
	
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);
	
	Попытка
		РасширенияДляВосстановления = КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
	
	Возврат РасширенияДляВосстановления; 
	
КонецФункции

&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива)
	
	РасширенияДляВосстановления = Новый Массив;

	ПутьКФайлуРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "Extensions.xml");
	Если ПутьКФайлуРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуРасширений);
	ЧтениеXML.ПерейтиКСодержимому();

	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	Пока ЧтениеXML.Прочитать() Цикл

		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда
			Продолжить;
		КонецЕсли;

		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		Наименование = XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		АтрибутКаркас = ЧтениеXML.ЗначениеАтрибута("IsFrame");
		АтрибутИмяФайла = ЧтениеXML.ЗначениеАтрибута("FileName");
		Если Не ИзменяетСтруктуруДанных Или АтрибутКаркас = Неопределено Или АтрибутИмяФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЭтоКаркас = XMLЗначение(Тип("Булево"), АтрибутКаркас);
		ИмяФайлаРасширения = XMLЗначение(Тип("Строка"), АтрибутИмяФайла);

		Если Не ЗначениеЗаполнено(ИмяФайлаРасширения) Или Не ЭтоКаркас Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуРасширения = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаРасширения);
		Если ПутьКФайлуРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"), ИмяФайлаРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Имя", Наименование);
		
		ДанныеФайлаПользовательскогоРасширения = Новый ДвоичныеДанные(ПутьКФайлуРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуРасширения);
		
	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
	
	Возврат РасширенияДляВосстановления;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДайджестВыгрузки(ИмяФайлаВременногоХранилища)
	
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);		
	
	ПутьКФайлуДайджеста = ИзвлечьФайлИзZipАрхива(ИмяФайлаНаСервере, "Digest.xml");

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуДайджеста);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	УдалитьФайлыВПопытке(ПутьКФайлуДайджеста);

	Возврат ДокументDOM;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузкаДляТехническойПоддержки(ИмяФайлаВременногоХранилища)
	
	ДайджестВыгрузки = ДайджестВыгрузки(ИмяФайлаВременногоХранилища); // ДокументDOM
	
	Если ДайджестВыгрузки <> Неопределено Тогда
		СписокЭлементов = ДайджестВыгрузки.ПолучитьЭлементыПоИмени("DataDumpType");
		ВыгрузкаДляТехническойПоддержки = ЗначениеЗаполнено(СписокЭлементов) И СписокЭлементов[0].ТекстовоеСодержимое = "TechnicalSupport";	
	Иначе
		ВыгрузкаДляТехническойПоддержки = Ложь;
	КонецЕсли;
	
	Возврат ВыгрузкаДляТехническойПоддержки;

КонецФункции  

// Хеш сумма временного файла совпадает.
// 
// Параметры:
//  ИмяФайлаВременногоХранилища - Строка - Имя временного файла
//  ХешСуммаФайла - Число - Хеш сумма файла
// 
// Возвращаемое значение:
//  Булево - Хеш сумма временного файла совпадает
&НаСервереБезКонтекста
Функция ХешСуммаВременногоФайлаСовпадает(ИмяФайлаВременногоХранилища, ХешСуммаФайла) Экспорт
		
	ПолноеИмяФайлаВСеансе = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);

	Возврат ХешСуммаФайла(ПолноеИмяФайлаВСеансе) = ХешСуммаФайла;
	
КонецФункции

// Хеш сумма файла.
// 
// Параметры: 
//  ИмяФайла - Строка - Имя файла
// 
// Возвращаемое значение: 
//  Число - Хеш сумма файла
&НаСервереБезКонтекста
Функция ХешСуммаФайла(ИмяФайла) Экспорт
			
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.ДобавитьФайл(ИмяФайла);
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьФайлыВПопытке(ИмяПапкиИлиФайла)
	
	// @skip-check module-nstr-camelcase - ошибка проверки
	ИмяСобытияЖР = НСтр("ru = 'Удаление файла.Загрузка файла выгрузки'", ОбщегоНазначения.КодОсновногоЯзыка());
	ФайлыБТС.УдалитьФайлыВПопытке(ИмяПапкиИлиФайла, ИмяСобытияЖР);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасширенияДляВосстановления(ИмяФайлаНаСервере)

	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);

	Попытка
		РасширенияДляВосстановления = РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
		
	Возврат РасширенияДляВосстановления;
КонецФункции

&НаСервереБезКонтекста
Функция РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива)

	РасширенияДляВосстановления = Новый Массив;

	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");

	ПутьКФайлуПользовательскихРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "CustomExtensions.json");
	Если ПутьКФайлуПользовательскихРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеФайлаПользовательскихРасширений = Новый ЧтениеJSON;
	ЧтениеФайлаПользовательскихРасширений.ОткрытьФайл(ПутьКФайлуПользовательскихРасширений);

	ИнформацияОПользовательскихРасширениях = ПрочитатьJSON(ЧтениеФайлаПользовательскихРасширений);
	ЧтениеФайлаПользовательскихРасширений.Закрыть();

	Для Каждого ИнформацияОПользовательскомРасширении Из ИнформацияОПользовательскихРасширениях Цикл

		ИмяФайлаПользовательскогоРасширения = Неопределено;
		Если Не ИнформацияОПользовательскомРасширении.Свойство("FileName", ИмяФайлаПользовательскогоРасширения)
			Или Не ЗначениеЗаполнено(ИмяФайлаПользовательскогоРасширения) Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуПользовательскогоРасширения = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива,
			ИмяФайлаПользовательскогоРасширения);
		Если ПутьКФайлуПользовательскогоРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"),
				ИмяФайлаПользовательскогоРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Активно", ИнформацияОПользовательскомРасширении.Active);
		РасширениеДляВосстановления.Вставить("БезопасныйРежим", ИнформацияОПользовательскомРасширении.SafeMode);

		ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ИнформацияОПользовательскомРасширении.UnsafeOperationWarnings;
		РасширениеДляВосстановления.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);

		РасширениеДляВосстановления.Вставить("Имя", ИнформацияОПользовательскомРасширении.Name);
		РасширениеДляВосстановления.Вставить("ИспользоватьОсновныеРолиДляВсехПользователей",
			ИнформацияОПользовательскомРасширении.UseDefaultRolesForAllUsers);
		РасширениеДляВосстановления.Вставить("ИспользуетсяВРаспределеннойИнформационнойБазе",
			ИнформацияОПользовательскомРасширении.UsedInDistributedInfoBase);
		РасширениеДляВосстановления.Вставить("Синоним", ИнформацияОПользовательскомРасширении.Synonym);
		РасширениеДляВосстановления.Вставить("ИзменяетСтруктуруДанных",
			ИнформацияОПользовательскомРасширении.ModifiesDataStructure);
		РасширениеДляВосстановления.Вставить("УникальныйИдентификатор", XMLЗначение(ТипУникальныйИдентификатор,
			ИнформацияОПользовательскомРасширении.UUID));
		ДанныеФайлаПользовательскогоРасширения =  Новый ДвоичныеДанные(ПутьКФайлуПользовательскогоРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуПользовательскогоРасширения);

	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуПользовательскихРасширений);
		
	Возврат РасширенияДляВосстановления;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлВременногоХранилища(ИдентификаторЭтойФормы)
	
	ИмяФайла = ФайлыБТС.НовыйФайлВременногоХранилища("xml2data", "zip", 120);
	ФайлыБТС.ЗаблокироватьФайлВременногоХранилища(ИмяФайла, ИдентификаторЭтойФормы);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФайлаПоДаннымСодержимого(ПутьКФайлуСодержимого, ТипФайла, ТипДаных) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуСодержимого);

	ЧтениеXML.ПерейтиКСодержимому();

	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'");
	КонецЕсли;

	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		Если ОбъектXDTO.Type = ТипФайла И (ТипДаных = Неопределено Или ОбъектXDTO.Свойства().Получить("DataType")
			<> Неопределено И ОбъектXDTO.DataType = ТипДаных) Тогда

			Возврат ОбъектXDTO.Name;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьФайлИзZipАрхива(АрхивИлиЧтение, ИмяФайла)

	Если ТипЗнч(АрхивИлиЧтение) = Тип("ЧтениеZipФайла") Тогда
		ЧтениеДанныхАрхива = АрхивИлиЧтение;
	Иначе
		ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(АрхивИлиЧтение);
	КонецЕсли;
	
	Попытка
		ПутьКФайлу = ИзвлечьФайлИзZipАрхиваВнутр(ЧтениеДанныхАрхива, ИмяФайла)
	Исключение
		Если ТипЗнч(АрхивИлиЧтение) <> Тип("ЧтениеZipФайла") Тогда
			ЧтениеДанныхАрхива.Закрыть();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТипЗнч(АрхивИлиЧтение) <> Тип("ЧтениеZipФайла") Тогда
		ЧтениеДанныхАрхива.Закрыть();
	КонецЕсли;	
		
	Возврат ПутьКФайлу;

КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьФайлИзZipАрхиваВнутр(ЧтениеДанныхАрхива, ИмяФайла)
	
	ЭлементZip = ЧтениеДанныхАрхива.Элементы.Найти(ИмяФайла);
	Если ЭлементZip = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
	ЧтениеДанныхАрхива.Извлечь(ЭлементZip, ИмяВременногоКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПереместитьФайл(ИмяВременногоКаталога + ПолучитьРазделительПути() + ИмяФайла, ИмяВременногоФайла);
	
	УдалитьФайлыВПопытке(ИмяВременногоКаталога);	
				
	Возврат ИмяВременногоФайла;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Загрузка данных из сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти