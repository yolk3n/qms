&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.Список.ОбновлениеПриИзмененииДанных=ОбновлениеПриИзмененииДанных.Авто;
КонецПроцедуры



&НаСервере
Процедура ИзменитьПолеРегистраНаСервере(КлючЗаписи,Имяполя,Значение)
	НачатьТранзакцию();
	
	Если НЕ Метаданные.РегистрыСведений.СостоянияТребованийОтделений.Измерения.Найти(Имяполя)=Неопределено
		 ИЛИ НЕ Метаданные.РегистрыСведений.СостоянияТребованийОтделений.Ресурсы.Найти(Имяполя)=Неопределено 
		 ИЛИ НЕ Метаданные.РегистрыСведений.СостоянияТребованийОтделений.Реквизиты.Найти(Имяполя)=Неопределено Тогда
		 
		Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Рег,КлючЗаписи);
		Рег.Прочитать();
		
		Если ИмяПоля="Состояние" И ТипЗнч(Рег.Требование)=Тип("ДокументСсылка.сок_НеФормализованноеТребованиеОтделения") Тогда
			Если Значение=Перечисления.СостоянияТребований.Требование Тогда
				Значение=Перечисления.СостоянияТребований.ТребованиеНеФормализованное;
				РегБ=РегистрыСведений.сок_БуферНеформальныхТребований.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегБ,Рег);
				РегБ.Записать(Истина);
			КонецЕсли;	
		КонецЕсли;	
		
		Рег[ИмяПоля]=Значение;
		Рег.Записать(Истина);
	КонецЕсли;	 
	
	
	Рег = РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Рег,КлючЗаписи);
	Рег.Прочитать();
	Если ИмяПоля="Состояние" Тогда
		Рег.Удалить();
	Иначе	
		Рег[ИмяПоля]=Значение;
		Если ИмяПоля="Пометка" И Значение=Истина Тогда
			Рег.Менеджер=Параметрысеанса.ТекущийПользователь;
		КонецЕсли;	
		Рег.Записать(Истина);
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	
&НаКлиенте
Процедура ИзменитьПолеОднимНажатием(КлючЗаписи,ИмяПоля,Значение)
	ИзменитьПолеРегистраНаСервере(КлючЗаписи,ИмяПоля,Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСписокБезКонтекста(Форма)
	ТС = Форма.Элементы.Список.ТекущаяСтрока;
	Форма.Элементы.Список.Обновить();
	Форма.Элементы.Список.ТекущаяСтрока=ТС;
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокНаСервере()
	ОбновитьСписокБезКонтекста(Этаформа);
КонецПроцедуры	

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	//Если НЕ Элементы.Список.ТекущиеДанные=Неопределено И НЕ Элементы.Список.ТекущийЭлемент=Неопределено И Элементы.Список.ТекущийЭлемент.Имя="СписокПометка" Тогда
	//	
	//	ОбновитьСписокНаСервере();
	//КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	//Если НЕ Элементы.Список.ТекущиеДанные=Неопределено И НЕ Элементы.Список.ТекущийЭлемент=Неопределено И Элементы.Список.ТекущийЭлемент.Имя="СписокПометка" Тогда
	//	ИзменитьПолеОднимНажатием(Элементы.Список.ТекущаяСтрока,"Пометка",НЕ Элементы.Список.ТекущиеДанные.Пометка);
	//	ОбновитьСписокНаСервере();
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СсылкаНаТребование()                         
	Возврат  Элементы.Список.ТекущиеДанные.Требование;
	
КонецФункции	

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя="СписокПометка" Тогда
		ИзменитьПолеОднимНажатием(Элементы.Список.ТекущаяСтрока,"Пометка",НЕ Элементы.Список.ТекущиеДанные.Пометка);
		ОбновитьСписокНаСервере();
	ИначеЕсли Поле.Имя="СписокНоменклатура" Тогда
		ОписаниеОповещенияОЗакрытии=Новый ОписаниеОповещения("ВыборНоменклатурыЗавершение",Этаформа,Новый структура("КлючЗаписи",Элементы.Список.ТекущаяСтрока));
		Открытьформу("Справочник.Номенклатура.ФормаВыбора",Новый структура("ТекущаяСтрока",Элементы.Список.ТекущиеДанные.Номенклатура),Этаформа,,,,ОписаниеОповещенияОЗакрытии);
	ИначеЕсли Поле.Имя="СписокПоставщик" Тогда	
		ОписаниеОповещенияОЗакрытии=Новый ОписаниеОповещения("ВыборПоставщикаЗавершение",Этаформа,Новый структура("КлючЗаписи",Элементы.Список.ТекущаяСтрока));
		Открытьформу("Справочник.Контрагенты.ФормаВыбора",Новый структура("ТекущаяСтрока",Элементы.Список.ТекущиеДанные.Номенклатура),Этаформа,,,,ОписаниеОповещенияОЗакрытии);
	ИначеЕсли Поле.Имя="СписокЦенаЗакупки" Тогда		
		ОписаниеОповещенияОЗакрытии=Новый ОписаниеОповещения("ВыборЦеныЗакупкиЗавершение",Этаформа,Новый структура("КлючЗаписи",Элементы.Список.ТекущаяСтрока));
		ЦенаЗакупки=Элементы.Список.ТекущиеДанные.ЦенаЗакупки;
		ПоказатьВводЧисла(ОписаниеОповещенияОЗакрытии,ЦенаЗакупки,"Укажите цену",14,2);
	ИначеЕсли Поле.Имя="СписокЗаказПоставщику" Тогда
		//Если НЕ Элементы.Список.ТекущиеДанные.ЗаказПоставщику.Пустая() Тогда
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта",Новый структура("Ключ",Элементы.Список.ТекущиеДанные.ЗаказПоставщику));
		//КонецЕсли;	
	ИначеЕсли Поле.Имя="СписокТребованиеОтделения" Тогда
		Требование=Элементы.Список.ТекущиеДанные.Требование;
		Если ТипЗнч(Требование)=Тип("ДокументСсылка.ТребованиеОтделения") Тогда
			ОткрытьФорму("Документ.ТребованиеОтделения.ФормаОбъекта",Новый структура("Ключ",Требование));
		ИначеЕсли ТипЗнч(Требование)=Тип("ДокументСсылка.сок_НеФормализованноеТребованиеОтделения") Тогда
			ОткрытьФорму("Документ.сок_НеФормализованноеТребованиеОтделения.ФормаОбъекта",Новый структура("Ключ",Требование));
		ИначеЕсли ТипЗнч(Требование)=Тип("ДокументСсылка.ЗаявкаНаЗакупку") Тогда
			ОткрытьФорму("Документ.ЗаявкаНаЗакупку.ФормаОбъекта",Новый структура("Ключ",Требование));
		КонецЕсли;	
	ИначеЕсли Поле.Имя="СписокМенеджер" Тогда			
		ОписаниеОповещенияОЗакрытии=Новый ОписаниеОповещения("ВыборМенеджераЗавершение",Этаформа,Новый структура("КлючЗаписи",Элементы.Список.ТекущаяСтрока));
		Открытьформу("Справочник.Пользователи.ФормаВыбора",Новый структура("ТекущаяСтрока",Элементы.Список.ТекущиеДанные.Номенклатура),Этаформа,,,,ОписаниеОповещенияОЗакрытии);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНоменклатурыЗавершение(Рез,Парам) Экспорт
	Если НЕ Рез = Неопределено Тогда
		 ИзменитьПолеРегистраНаСервере(Парам.КлючЗаписи,"Номенклатура",Рез);
		 ТС = Элементы.Список.ТекущаяСтрока;
		 ОбновитьСписокНаСервере();
		 Элементы.Список.ТекущаяСтрока=ТС;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоставщикаЗавершение(Рез,Парам) Экспорт
	Если НЕ Рез = Неопределено Тогда
		 ИзменитьПолеРегистраНаСервере(Парам.КлючЗаписи,"Поставщик",Рез);
		 ТС = Элементы.Список.ТекущаяСтрока;
		 ОбновитьСписокНаСервере();
		 Элементы.Список.ТекущаяСтрока=ТС;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦеныЗакупкиЗавершение(Рез,Парам) Экспорт
	Если НЕ Рез = Неопределено Тогда
		 ИзменитьПолеРегистраНаСервере(Парам.КлючЗаписи,"ЦенаЗакупки",Рез);
		 ТС = Элементы.Список.ТекущаяСтрока;
		 ОбновитьСписокНаСервере();
		 Элементы.Список.ТекущаяСтрока=ТС;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборМенеджераЗавершение(Рез,Парам) Экспорт
	Если НЕ Рез = Неопределено Тогда
		 ИзменитьПолеРегистраНаСервере(Парам.КлючЗаписи,"Менеджер",Рез);
		 ТС = Элементы.Список.ТекущаяСтрока;
		 ОбновитьСписокНаСервере();
		 Элементы.Список.ТекущаяСтрока=ТС;
	КонецЕсли;	
КонецПроцедуры



&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	//Вернуть отказ
//	Отказ=Истина;
КонецПроцедуры

&НаСервере
Процедура ПометкаУстановитьНаСервере(Значение)
	
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
		             |	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
		             |	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа,
		             |	сок_БуферДляЗакупки.Требование КАК Требование,
		             |	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		             |	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
		             |	сок_БуферДляЗакупки.Количество КАК Количество,
		             |	сок_БуферДляЗакупки.Пометка КАК Пометка,
		             |	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
		             |	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
		             |	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки
		             |ИЗ
		             |	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
		             |ГДЕ
		             |	сок_БуферДляЗакупки.ИдентификаторСтроки = &ИдентификаторСтроки
		             |	И сок_БуферДляЗакупки.КодСтроки = &КодСтроки";
		Запрос.УстановитьПараметр("ИдентификаторСтроки",Стр.ИдентификаторСтроки);
		Запрос.УстановитьПараметр("КодСтроки",Стр.КодСтроки);
		
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
			МенеджерЗаписи=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Пометка=Значение;
			Если Значение=Истина Тогда
				МенеджерЗаписи.Менеджер=ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;	
			МенеджерЗаписи.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПометкаСнятьНаСервере()
	
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
		             |	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
		             |	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа,
		             |	сок_БуферДляЗакупки.Требование КАК Требование,
		             |	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		             |	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
		             |	сок_БуферДляЗакупки.Количество КАК Количество,
		             |	сок_БуферДляЗакупки.Пометка КАК Пометка,
		             |	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
		             |	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
		             |	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки
		             |ИЗ
		             |	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
		             |ГДЕ
		             |	сок_БуферДляЗакупки.ИдентификаторСтроки = &ИдентификаторСтроки
		             |	И сок_БуферДляЗакупки.КодСтроки = &КодСтроки";
		Запрос.УстановитьПараметр("ИдентификаторСтроки",Стр.ИдентификаторСтроки);
		Запрос.УстановитьПараметр("КодСтроки",Стр.КодСтроки);
		
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
			МенеджерЗаписи=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Пометка=Ложь;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаСнять(Команда)
	
	ПометкаУстановитьНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУстановить(Команда)
	
	ПометкаУстановитьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("ПослеВыбораНоменклатуры",ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНоменклатуры(Результат, ДопПараметры) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьНоменклатуруНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьНоменклатуруНаСервере(Номенклатура)
	
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
			ИзменитьПолеРегистраНаСервере(Стр,"Номенклатура",Номенклатура);			
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьПоставщика(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("ПослеВыбораПоставщика",ЭтотОбъект);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоставщика(Результат, ДопПараметры) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьПоставщикаНаСервере(Результат);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаменитьПоставщикаНаСервере(Поставщик)
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		ИзменитьПолеРегистраНаСервере(Стр,"Поставщик",Поставщик);			
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтроки(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()=1  Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыВеделеныхСтрокСовпадают() Тогда
		СвернутьСтрокиНаСервере();
	Иначе
		ПоказатьПредупреждение(,"Свернуть можно только строки с одинаковым id",,"Ошибка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторыВеделеныхСтрокСовпадают()
	
	УИД=Элементы.Список.ВыделенныеСтроки[0].ИдентификаторСтроки;
	
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		Если НЕ Стр.ИдентификаторСтроки=УИД Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СвернутьСтрокиНаСервере()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
	             |	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
	             |	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа,
	             |	сок_БуферДляЗакупки.Требование КАК Требование,
	             |	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	             |	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
	             |	сок_БуферДляЗакупки.Количество КАК Количество,
	             |	сок_БуферДляЗакупки.Пометка КАК Пометка,
	             |	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
	             |	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
	             |	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки
	             |ИЗ
	             |	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
	             |ГДЕ
	             |	сок_БуферДляЗакупки.ИдентификаторСтроки = &ИдентификаторСтроки
	             |	И сок_БуферДляЗакупки.КодСтроки = &КодСтроки";
	Запрос.УстановитьПараметр("ИдентификаторСтроки",Элементы.Список.ВыделенныеСтроки[0].ИдентификаторСтроки);
	Запрос.УстановитьПараметр("КодСтроки",Элементы.Список.ВыделенныеСтроки[0].КодСтроки);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Что-то пошло не так");
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	СуммКоличество=Выборка.Количество;
	
	Для П=1 По Элементы.Список.ВыделенныеСтроки.Количество()-1 Цикл
		Запрос.УстановитьПараметр("КодСтроки",Элементы.Список.ВыделенныеСтроки[П].КодСтроки);
		
		ВыборкаСтр=Запрос.Выполнить().Выбрать();
		Если НЕ ВыборкаСтр.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		СуммКоличество=СуммКоличество+ВыборкаСтр.Количество;
		
		МенеджерЗаписиУдалить=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить,ВыборкаСтр);
		МенеджерЗаписиУдалить.Прочитать();
		МенеджерЗаписиУдалить.Удалить();
	КонецЦикла;
	
	МенеджерЗаписи=РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
	МенеджерЗаписи.Количество=СуммКоличество;
	МенеджерЗаписи.Записать(Истина);
	
	//То же самое в рег СостоянияТребованийОтделений
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СостоянияТребованийОтделений.Требование КАК Требование,
	             |	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	             |	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	             |	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	             |	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	             |	СостоянияТребованийОтделений.Состояние КАК Состояние,
	             |	СостоянияТребованийОтделений.Описание КАК Описание,
	             |	СостоянияТребованийОтделений.Количество КАК Количество
	             |ИЗ
	             |	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	             |ГДЕ
	             |	СостоянияТребованийОтделений.ИдентификаторСтроки = &ИдентификаторСтроки
	             |	И СостоянияТребованийОтделений.КодСтроки = &КодСтроки";
	Запрос.УстановитьПараметр("ИдентификаторСтроки",Элементы.Список.ВыделенныеСтроки[0].ИдентификаторСтроки);
	Запрос.УстановитьПараметр("КодСтроки",Элементы.Список.ВыделенныеСтроки[0].КодСтроки);
	
	ВыборкаСостояния=Запрос.Выполнить().Выбрать();
	Если НЕ ВыборкаСостояния.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Что-то пошло не так");
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ВыборкаСостояния);
	МенеджерЗаписи.Количество=СуммКоличество;
	МенеджерЗаписи.Записать(Истина);
	
	Для П=1 По Элементы.Список.ВыделенныеСтроки.Количество()-1 Цикл
		Запрос.УстановитьПараметр("КодСтроки",Элементы.Список.ВыделенныеСтроки[П].КодСтроки);
		
		ВыборкаСтр=Запрос.Выполнить().Выбрать();
		Если НЕ ВыборкаСтр.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписиУдалить=РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить,ВыборкаСтр);
		МенеджерЗаписиУдалить.Прочитать();
		МенеджерЗаписиУдалить.Удалить();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура РазбитьСтрокуНаСервере(НоваястрокаКоличество,СтараяСтрокаКоличество,КлючЗаписи)
	ИзменитьПолеРегистраНаСервере(КлючЗаписи,"Количество",СтараяСтрокаКоличество);
	КодСтроки = сок_Сервер.ПолучитьНовыйКодСтрокиИдентификатораТребования(КлючЗаписи.ИдентификаторСтроки);
	Рег = Регистрысведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
	Рег2 = Регистрысведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Рег,КлючЗаписи);
	Рег.Прочитать();
	ЗаполнитьЗначенияСвойств(Рег2,Рег);
	Рег2.КодСтроки= КодСтроки;
	Рег2.Количество=НоваястрокаКоличество;
	Рег2.Записать(Истина);

	Рег = Регистрысведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
	Рег2 = Регистрысведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Рег,КлючЗаписи);
	Рег.Прочитать();
	ЗаполнитьЗначенияСвойств(Рег2,Рег);
	Рег2.КодСтроки= КодСтроки;
	Рег2.Количество=НоваястрокаКоличество;
	Рег2.Записать(Истина);
	
КонецПроцедуры	

&НаКлиенте                    
Процедура РазбитьСтроку(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("РазбитьСтрокуЗавершение",Этаформа,Новый структура("КлючЗаписи,Количество,",Элементы.Список.ТекущаяСтрока,Элементы.Список.ТекущиеДанные.Количество));
	ПоказатьВводЧисла(ОписаниеОповещения,Элементы.Список.ТекущиеДанные.Количество,"Укажите количество в новой строке",14,3);
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(Результат,Параметр) Экспорт
	Если НЕ Результат=Неопределено И Результат>0 И Результат<Параметр.Количество Тогда
		РазбитьСтрокуНаСервере(Результат,Параметр.Количество-Результат,Параметр.КлючЗаписи)
	КонецЕсли;	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВТребования(Команда)
	Для Каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		ИзменитьПолеРегистраНаСервере(Стр,"Состояние",ПредопределенноеЗначение("Перечисление.СостоянияТребований.Требование"));			
		
	КонецЦикла;	
	Элементы.Список.Обновить();
	Оповестить("ТребуетсяПерерисоватьБуферНеформальныхТребований");
КонецПроцедуры


&НаСервере
Процедура СоздатьЗаказПоставщикуНаСервере(ДанныеФормы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
	|	сок_БуферДляЗакупки.Требование КАК Требование,
	|	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
	|	сок_БуферДляЗакупки.Количество КАК Количество,
	|	сок_БуферДляЗакупки.Пометка КАК Пометка,
	|	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
	|	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
	|	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки,
	|	сок_БуферДляЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа
	|ИЗ
	|	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
	|ГДЕ
	|	сок_БуферДляЗакупки.Менеджер = &Менеджер
	|	И сок_БуферДляЗакупки.Пометка";
	Рег = Запрос.Выполнить().Выгрузить();
	Если Рег.Количество()>0 Тогда
		
		Элемент = Документы.ЗаказПоставщику.СоздатьДокумент();
		ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(Элемент, Неопределено, "Организация, Склад");
		ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(Элемент, Неопределено, "ПодразделениеОрганизации", "Организация");
		Элемент.Автор=ПараметрыСеанса.ТекущийПользователь;
		Элемент.Валюта=Константы.ВалютаРегламентированногоУчета.Получить();
		Элемент.Дата=ТекущаяДата();
		Элемент.ЖелаемаяДатаПоступления=ТекущаяДата();
		Элемент.Контрагент=Рег[0].Поставщик;
		Элемент.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Элемент.НовыйСпособУчета=Истина;
		Элемент.Приоритет=Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		Элемент.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Элемент.Согласован=Ложь;
		Элемент.Статус=Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		Элемент.ЦенаВключаетНДС=Истина;
		//Элемент.Партнер=
		Элемент.Организация=Рег[0].Требование.Организация;
		Элемент.ИсточникФинансирования=Рег[0].Требование.ИсточникФинансирования;
		//Элемент.ДоговорКонтрагента=
		Для Каждого Стр из Рег Цикл
			СтрДок=Элемент.Товары.Найти(Стр.Номенклатура,"Номенклатура");
			Если СтрДок=Неопределено Тогда
				СтрДок = Элемент.Товары.Добавить();
				СтрДок.Номенклатура=Стр.Номенклатура;
				СтрДок.КодСтроки=СтрДок.НомерСтроки;
				СтрДок.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета;
				СтрДок.Количество=0;
				СтрДок.Коэффициент=сок_Сервер.ПолучитьКоэффициентЕдиницыИзмерения(СтрДок.Номенклатура,СтрДок.ЕдиницаИзмерения,СтрДок.Номенклатура.ЕдиницаИзмерения);
				СтрДок.СтавкаНДС=СтрДок.Номенклатура.СтавкаНДС;
				СтрДок.Цена=Стр.ЦенаЗакупки;
			КонецЕсли;	
			СтрДок.КоличествоВЕдиницахИзмерения=СтрДок.КоличествоВЕдиницахИзмерения+Стр.Количество;
			СтрДок.Количество=СтрДок.Количество+Стр.Количество*СтрДок.Коэффициент;
			
			СтрТЗ=Элемент.ТоварыТребований.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЗ,Стр);
		КонецЦикла;	
		Для Каждого Стр из Элемент.Товары Цикл
			Стр.Сумма=Стр.КоличествоВЕдиницахИзмерения*Стр.Цена;
			Стр.СуммаНДС=Стр.Сумма;
			Если Стр.СтавкаНДС=Перечисления.СтавкиНДС.НДС20 Тогда
				Стр.СуммаСНДС=Стр.Сумма*20/120;
			ИначеЕсли Стр.СтавкаНДС=Перечисления.СтавкиНДС.НДС10 Тогда	
				Стр.СуммаСНДС=Стр.Сумма*10/110;
			Иначе	
				Стр.СуммаСНДС=0;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Элемент.СуммаДокумента=Элемент.Товары.Итог("Сумма");
		ЗначениеВДанныеФормы(Элемент,ДанныеФормы); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВсеСкладыОдинаковые() 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_БуферДляЗакупки.Требование.СкладОтправитель КАК ТребованиеСкладОтправитель,
	|	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
	|	сок_БуферДляЗакупки.Требование.ИсточникФинансирования КАК ТребованиеИсточникФинансирования
	|ИЗ
	|	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
	|ГДЕ
	|	сок_БуферДляЗакупки.Пометка
	|	И сок_БуферДляЗакупки.Менеджер = &Менеджер
	|
	|СГРУППИРОВАТЬ ПО
	|	сок_БуферДляЗакупки.Требование.СкладОтправитель,
	|	сок_БуферДляЗакупки.Поставщик,
	|	сок_БуферДляЗакупки.Требование.ИсточникФинансирования";
	Возврат Запрос.Выполнить().Выгрузить().Количество()=1;
КонецФункции	

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	Если НЕ ВсеСкладыОдинаковые() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выбранных позициях разные склады-отправители, источник финансирования или поставщики . Как будет осуществляться передача в отделение думайте сами.");
	КонецЕсли;	
	Форма = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта");
	ДанныеФормы = Форма.Объект; 
	СоздатьЗаказПоставщикуНаСервере(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ТребуетсяПерерисоватьБуферЗакупки"	Тогда
		Элементы.Список.Обновить();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура УстановитьМенеджераНаСервере(Результат)
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		ИзменитьПолеРегистраНаСервере(Стр,"Менеджер",Результат);			
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьМенеджера(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("УстановитьМенеджераЗавершение",ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМенеджераЗавершение(Результат,Параметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		УстановитьМенеджераНаСервере(Результат);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ДобавитьВЗаказПоставщикуНаСервере(СсылкаНаОбъект)
	
	Элемент = СсылкаНаОбъект.ПолучитьОбъект();
	Если Ложь Тогда Элемент = Документы.ЗаказПоставщику.СоздатьДокумент(); КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Менеджер",ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура,
	|	сок_БуферДляЗакупки.Требование КАК Требование,
	|	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки,
	|	сок_БуферДляЗакупки.Количество КАК Количество,
	|	сок_БуферДляЗакупки.Пометка КАК Пометка,
	|	сок_БуферДляЗакупки.Менеджер КАК Менеджер,
	|	сок_БуферДляЗакупки.Поставщик КАК Поставщик,
	|	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки,
	|	сок_БуферДляЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа,
	|	сок_БуферДляЗакупки.НоменклатураЗаказа КАК НоменклатураЗаказа1,
	|	сок_БуферДляЗакупки.Номенклатура КАК Номенклатура1,
	|	сок_БуферДляЗакупки.Требование КАК Требование1,
	|	сок_БуферДляЗакупки.ИдентификаторСтроки КАК ИдентификаторСтроки1,
	|	сок_БуферДляЗакупки.КодСтроки КАК КодСтроки1,
	|	сок_БуферДляЗакупки.Количество КАК Количество1,
	|	сок_БуферДляЗакупки.Пометка КАК Пометка1,
	|	сок_БуферДляЗакупки.Менеджер КАК Менеджер1,
	|	сок_БуферДляЗакупки.Поставщик КАК Поставщик1,
	|	сок_БуферДляЗакупки.ЦенаЗакупки КАК ЦенаЗакупки1,
	|	сок_БуферДляЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления1,
	|	сок_БуферДляЗакупки.ДатаЗаказа КАК ДатаЗаказа1
	|ИЗ
	|	РегистрСведений.сок_БуферДляЗакупки КАК сок_БуферДляЗакупки
	|ГДЕ
	|	сок_БуферДляЗакупки.Пометка
	|	И сок_БуферДляЗакупки.Менеджер = &Менеджер";
	Выборка = Запрос.Выполнить().Выгрузить();
	КэшированныеЗначения=Неопределено;
	Для Каждого Стр из Выборка Цикл
		
		Масс=Элемент.ТоварыТребований.НайтиСтроки(Новый структура("ИдентификаторСтроки,КодСтроки",Стр.ИдентификаторСтроки,Стр.КодСтроки));
		Если Масс.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекущаяСтрока=Элемент.Товары.Найти(Стр.Номенклатура,"Номенклатура");
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		СтруктураДействий = Новый Структура;
		
		Если ТекущаяСтрока=Неопределено Тогда  
			ТекущаяСтрока=Элемент.Товары.Добавить();
			ТекущаяСтрока.Номенклатура=Стр.Номенклатура;
			ТекущаяСтрока.ЕдиницаИзмерения=ТекущаяСтрока.Номенклатура.ОсновнаяЕдиницаУчета;
			ТекущаяСтрока.КоличествоВЕдиницахИзмерения=Стр.Количество;
			ТекущаяСтрока.Цена = Стр.ЦенаЗакупки;
			СтруктураДействий.Вставить(
				Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
				Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
					Элемент,
					Истина));
			СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
			СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
			СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Элемент.НалогообложениеНДС);
			
		КонецЕсли;
		
		
		ТекущаяСтрока.Количество=ТекущаяСтрока.Количество+Стр.Количество;
		СтрДок=Элемент.ТоварыТребований.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДок,Стр);
		
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Элемент);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	КонецЦикла;	
	Элемент.Записать();
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьВЗаказПоставщику(Команда)
	ОписаниеОповещения=Новый ОписаниеОповещения("ДобавитьВЗаказПоставщикуЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора",Новый Структура("Отбор",Новый Структура("НовыйСпособУчета,Статус",Истина,ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован"))),ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЗаказПоставщикуЗавершение(Значение,Парам) Экспорт
	Если НЕ Значение=Неопределено Тогда
		ДобавитьВЗаказПоставщикуНаСервере(Значение);
		ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта",Новый структура("Ключ",Значение));
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ПоместитьВСтатусОтменаНаСервере(Описание)
	
	НачатьТранзакцию();
	
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Рег,Стр);
		Рег.Прочитать();
		Рег.Описание=Описание;
		Рег.Состояние=Перечисления.СостоянияТребований.Отменено;
		Рег.Записать(Истина);
		
		
		Элемент = Рег.Требование.ПолучитьОбъект();
		СтрН=Элемент.Товары.Найти(Рег.ИдентификаторСтроки,"ИдентификаторСтроки");
		СтрН.Отменено=Истина;
		СтрН.ПричинаОтмены=Описание;
		Элемент.ОбменДанными.Загрузка=Истина;
		Элемент.Записать();
		
		РегБ = РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(РегБ,Стр);
		РегБ.Прочитать();
		РегБ.Удалить();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВСтатусОтмена(Команда)
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ПослеВводаОписанияДляПометкиВСтатусУдаление",ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения,,"Установите описание",,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОписанияДляПометкиВСтатусУдаление(Результат,ДопПараметры) Экспорт
	
	Если Результат=Неопределено ИЛИ ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВСтатусОтменаНаСервере(Результат);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВСтатусОжиданиеПриходаБезЗаказа(Команда)
	КС=Элементы.Список.ВыделенныеСтроки.Количество();
	НПП=1;
	Для Каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		Состояние("Изменяю статус "+НПП+" из "+КС,НПП/КС*100);
		НПП=НПП+1;
		 ИзменитьПолеРегистраНаСервере(Стр,"Состояние",ПредопределенноеЗначение("Перечисление.СостоянияТребований.ОжиданиеПриходаБезЗаказа"));			
	КонецЦикла;	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПроверитьИИсправитьБуферНаСервере(Исправлять)
	
	сок_Проверки.ПроверитьИИсправитьБуферЗакупки(Исправлять);
КонецПроцедуры                                                        

&НаКлиенте
Процедура ПроверитьБуфер(Команда)
	ПроверитьИИсправитьБуферНаСервере(Ложь);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьБуфер(Команда)
	ПроверитьИИсправитьБуферНаСервере(Истина);
	Элементы.Список.Обновить();
КонецПроцедуры

















