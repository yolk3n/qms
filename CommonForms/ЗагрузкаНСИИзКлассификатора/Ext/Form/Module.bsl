
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотОбъект.Идентификатор = Параметры.Идентификатор;
	ЭтотОбъект.Наименование = Параметры.Наименование;
	ЭтотОбъект.ПараметрыЗагрузки = Параметры.ПараметрыЗагрузки;
	
	Если Параметры.ИмяОбъекта <> "" И Параметры.ИмяОбъекта <> Неопределено Тогда
		
		ЭтотОбъект.ИмяОбъекта = Параметры.ИмяОбъекта;
		
		МенеджерОбъекта_ = МенеджерОбъектаПоИмени(ЭтотОбъект.ИмяОбъекта);
		
		ЭтотОбъект.Заголовок = Параметры.ЗаголовокФормы;
		
		Таблица_ = Неопределено;
		Если Параметры.ЗагружатьИзИнтернета Тогда
			// Выполняем запрос версий классификатора
			Попытка
				Если Не ЗначениеЗаполнено(ЭтотОбъект.Идентификатор) Тогда
					ПараметрыЗапроса_ = МенеджерОбъекта_.ПолучитьПараметрыЗапроса();
					ЭтотОбъект.Идентификатор = ПараметрыЗапроса_.OID;
				КонецЕсли;
				
				Если Параметры.ТолькоАктуальнаяВерсия Тогда
					ЭтотОбъект.Версия = НСИРосМинздрав.ЗапроситьАктуальнуюВерсиюКлассификатора(ЭтотОбъект.Идентификатор);
				Иначе
					ТаблицаВерсий_ = НСИРосМинздрав.ЗапроситьВерсииКлассификатора(
						ЭтотОбъект.Идентификатор
					);
					
					Если ТипЗнч(ТаблицаВерсий_) = Тип("ТаблицаЗначений") Тогда
						ЭтотОбъект.ВерсииКлассификатора.Загрузить(ТаблицаВерсий_);
					КонецЕсли;
				КонецЕсли;
			Исключение
				ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			Если Параметры.Свойство("ТекстXML") И ЗначениеЗаполнено(Параметры.ТекстXML) Тогда
				Таблица_ = МенеджерОбъекта_.ПрочитатьXMLВТаблицуИзМакета(Параметры.ТекстXML);
			Иначе
				Таблица_ = МенеджерОбъекта_.ПрочитатьXMLВТаблицуИзМакета();
			КонецЕсли;
			СтруктураДанныхКлассификатора_ = ОбщегоНазначенияНСИ.СопоставитьЗагружаемыеДанныеСЭлементамиВБазе(
				Таблица_, ИмяОбъекта, Идентификатор, ЭтотОбъект.ПараметрыЗагрузки
			);
			ИнициализироватьСписокДаннымиКлассификатора(СтруктураДанныхКлассификатора_);
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаКлассификатора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		__ПРОВЕРКА__(
			ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ТаблицаФормы"), "Неправильный тип владельца формы"
		);
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Версия) Тогда
		ДлительнаяОперация_ = ЗагрузитьВерсиюКлассификатораНаСервере();
		Если ДлительнаяОперация_.Статус <> "Выполняется" Тогда
			ЗагрузитьВерсиюКлассификатораЗавершение(ДлительнаяОперация_);
		Иначе
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьВерсиюКлассификатораЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация_, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема Архивирование
	Если ИмяСобытия = Архивирование.ИмяОповещения() Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Для каждого Элемент_ Из Параметр Цикл
				ЭлементДерева_ = АлгоритмыДляКоллекций.НайтиВДереве(
					ЭтотОбъект.СписокНеактуальное, Новый Структура("Ссылка", Элемент_)
				);
			КонецЦикла;
			
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
				МодульСообщенияПользователю = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияПользователю");
				ТекстОповещения_ = МодульСообщенияПользователю.Получить("Классификаторы_АрхивностьУстановленаДляЭлемента",
					Новый Структура(
						"ТекстЭлемент",
						СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Параметр.Количество(), "элемент, элемента, элементов")
					)
				);
			Иначе
				ТекстОповещения_ = стрШаблон("Архивность установлена для «%1»", СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Параметр.Количество(), "элемент, элемента, элементов"));
			КонецЕсли;

			ПоказатьОповещениеПользователя(ТекстОповещения_);
		КонецЕсли;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	// конец Подсистема Архивирование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбранПриИзменении(Элемент)
	Элемент_ = Элементы.Список.ТекущиеДанные;
	Если Элемент_ <> Неопределено Тогда
		ПоставитьОтметку(Элемент_, Элемент_.Выбран);
		ПоставитьОтметкуРодителю(Элемент_, Элемент_.Выбран);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВерсииКлассификатораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЭтотОбъект.Версия = Элементы.ВерсииКлассификатора.ТекущиеДанные.НомерВерсии;
	Если ЗначениеЗаполнено(ЭтотОбъект.Версия) Тогда
		ДлительнаяОперация_ = ЗагрузитьВерсиюКлассификатораНаСервере();
		Если ДлительнаяОперация_.Статус <> "Выполняется" Тогда
			ЗагрузитьВерсиюКлассификатораЗавершение(ДлительнаяОперация_);
		Иначе
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьВерсиюКлассификатораЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация_, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
////
 // Процедура: Добавить
 //   Обработчик команды Добавить.
 ///
&НаКлиенте
Процедура Добавить(Команда)
	ДлительнаяОперация_ = ДобавитьВОбъект();
	Если ДлительнаяОперация_.Статус <> "Выполняется" Тогда
		ДобавитьЗавершение(ДлительнаяОперация_);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.Интервал = 5;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ДобавитьЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация_, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВАрхив(Команда)

	Элементы_ = Новый Массив;
	ЭлементСписка_ = Неопределено;
	Пока АлгоритмыДляКоллекций.ОбходДерева_Следующий(ЭтотОбъект.СписокНеактуальное, ЭлементСписка_) Цикл
		Если ЭлементСписка_.Выбран Тогда
			Элементы_.Добавить(ЭлементСписка_.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	АрхивированиеКлиент.КомандаИзменитьАрхивность(ЭтотОбъект, Элементы_, Истина);

КонецПроцедуры

////
 // Процедура: ВыбратьВсе
 //   Обработчик команды ВыбратьВсе.
 ///
&НаКлиенте
Процедура ВыбратьВсе(Команда)
	ПоставитьОтметку(ЭтотОбъект.Список, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеНеактуальное(Команда)
	ПоставитьОтметку(ЭтотОбъект.СписокНеактуальное, Истина);
КонецПроцедуры

////
 // Процедура: ИсключитьВсе
 //   Обработчик команды ИсключитьВсе.
 ///
&НаКлиенте
Процедура ИсключитьВсе(Команда)
	ПоставитьОтметку(ЭтотОбъект.Список, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеНеактуальное(Команда)
	ПоставитьОтметку(ЭтотОбъект.СписокНеактуальное, Ложь);
КонецПроцедуры

////
 // Процедура: ВыбратьВыделенные
 //   Обработчик команды ВыбратьВыделенные.
 ///
&НаКлиенте
Процедура ВыбратьВыделенные(Команда)
	ИдентификаторыЭлементов_ = Элементы.Список.ВыделенныеСтроки;
	Для Каждого ИдентификаторЭлемента_ Из ИдентификаторыЭлементов_ Цикл
		ЭлементСписка_ = ЭтотОбъект.Список.НайтиПоИдентификатору(ИдентификаторЭлемента_);
		Если ЭлементСписка_ <> Неопределено Тогда
			ЭлементСписка_.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеНеактуальное(Команда)
	ИдентификаторыЭлементов_ = Элементы.СписокНеактуальное.ВыделенныеСтроки;
	Для Каждого ИдентификаторЭлемента_ Из ИдентификаторыЭлементов_ Цикл
		ЭлементСписка_ = ЭтотОбъект.СписокНеактуальное.НайтиПоИдентификатору(ИдентификаторЭлемента_);
		Если ЭлементСписка_ <> Неопределено Тогда
			ЭлементСписка_.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////
 // Процедура: ИсключитьВыделенные
 //   Обработчик команды ИсключитьВыделенные.
 ///
&НаКлиенте
Процедура ИсключитьВыделенные(Команда)
	ИдентификаторыЭлементов_ = Элементы.Список.ВыделенныеСтроки;
	Для Каждого ИдентификаторЭлемента_ Из ИдентификаторыЭлементов_ Цикл
		ЭлементСписка_ = ЭтотОбъект.Список.НайтиПоИдентификатору(ИдентификаторЭлемента_);
		Если ЭлементСписка_ <> Неопределено Тогда
			ЭлементСписка_.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеНеактуальное(Команда)
	ИдентификаторыЭлементов_ = Элементы.СписокНеактуальное.ВыделенныеСтроки;
	Для Каждого ИдентификаторЭлемента_ Из ИдентификаторыЭлементов_ Цикл
		ЭлементСписка_ = ЭтотОбъект.СписокНеактуальное.НайтиПоИдентификатору(ИдентификаторЭлемента_);
		Если ЭлементСписка_ <> Неопределено Тогда
			ЭлементСписка_.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВерсию(Команда)
	Если Не Элементы.ВерсииКлассификатора.ТекущиеДанные = Неопределено Тогда
		ЭтотОбъект.Версия = Элементы.ВерсииКлассификатора.ТекущиеДанные.НомерВерсии;
		Если ЗначениеЗаполнено(ЭтотОбъект.Версия) Тогда
			Если ПараметрЗагрузки(ЭтотОбъект.ПараметрыЗагрузки, "БыстраяЗагрузка", Ложь) Тогда
				Оповещение_ = Новый ОписаниеОповещения("ЗагрузитьВерсиюЗавершение", ЭтотОбъект);
				ПоказатьВопрос(
					Оповещение_,
					"Использовать ускоренную загрузку?
					|Вы не сможете использовать предварительный просомтр данных и выбирать отдельные записи.",
					РежимДиалогаВопрос.ДаНетОтмена,
					,
					КодВозвратаДиалога.Нет,
					НСтр("ru = 'Предупреждение: загружаемый справочник содержит большой объем данных'")
				);
			Иначе
				ДлительнаяОперация_ = ЗагрузитьВерсиюКлассификатораНаСервере();
				Если ДлительнаяОперация_.Статус <> "Выполняется" Тогда
					ЗагрузитьВерсиюКлассификатораЗавершение(ДлительнаяОперация_);
				Иначе
					ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
					ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьВерсиюКлассификатораЗавершение", ЭтотОбъект);
					ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация_, ОповещениеОЗавершении, ПараметрыОжидания);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ЗагрузкаКлассификатора

////
 // Процедура: ЗаполнитьСписок
 //   Заполняет список данными из макета для указанного объекта. Возвращает Ложь в случае ошибки.
 ///
&НаСервере
Процедура ЗаполнитьСписок(Таблица)
	Попытка
		МакетТаблица_ = Таблица;
		МассивДобавляемыхРеквизитов_ = Новый Массив();
		ЗаполнитьМассивДобавляемыхРеквизитов(МакетТаблица_, "Список", МассивДобавляемыхРеквизитов_, ЭтоДанныеМинздрава, ЭтоДанныеОМС);
		ЭтотОбъект.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов_);
		
		СписокРеквизитов_ = ОбщегоНазначенияНСИ.СписокРеквизитовДерева("Список", ЭтоДанныеМинздрава, ЭтоДанныеОМС);
		ИнфОбъекта_ = ОбщегоНазначенияНСИ.РеквизитыОбъектаПоИмени(ЭтотОбъект.ИмяОбъекта);
		Для Каждого Колонка_ Из МакетТаблица_.Колонки Цикл
			Если СписокРеквизитов_.Найти(Колонка_.Имя) = Неопределено
				И Колонка_.Имя <> "Родитель" И Колонка_.Имя <> "ЭтоГруппа" 
				И НЕ Колонка_.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))
			Тогда
				Элемент_ = Элементы.Добавить("Список" + Колонка_.Имя, Тип("ПолеФормы"), Элементы.Список);
				Элемент_.ПутьКДанным = "Список" + "." + Колонка_.Имя;
				Элемент_.АвтоВысотаЯчейки = Истина;
				Элемент_.Видимость = Не СкрыватьКолонку(Колонка_.Имя, ИнфОбъекта_);
			КонецЕсли;
		КонецЦикла;
		
		Если Иерархия Тогда
			ПостроитьДерево(ЭтотОбъект.Список, МакетТаблица_);
			Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		Иначе
			СписокСвойств_ = Неопределено;
			МассивИменТаблиц_ = Неопределено;
			Для Каждого СтрокаМакета_ Из МакетТаблица_ Цикл
				ЭлементСписка_ = ЭтотОбъект.Список.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияВСтрокеРеквизитаПоСтрокеТаблицыДанных(ЭлементСписка_, СтрокаМакета_, СписокСвойств_, МассивИменТаблиц_); 
			КонецЦикла;
		КонецЕсли;
	Исключение
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивДобавляемыхРеквизитов(Таблица, Путь, МассивДобавляемыхРеквизитов, ЭтоДанныеМинздрава, ЭтоДанныеОМС)
	СписокСуществующихРеквизитов_ = ОбщегоНазначенияНСИ.СписокРеквизитовДерева(Путь, ЭтоДанныеМинздрава, ЭтоДанныеОМС);
	Для Каждого Колонка_ Из Таблица.Колонки Цикл
		ИмяРеквизита_ = Колонка_.Имя;
		Если СписокСуществующихРеквизитов_.Найти(ИмяРеквизита_) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизит_ = Новый РеквизитФормы(
			ИмяРеквизита_, 
			Колонка_.ТипЗначения,
			Путь, 
			ВыбратьЗаполненное(Колонка_.Заголовок, Колонка_.Имя)
		);
		МассивДобавляемыхРеквизитов.Добавить(Реквизит_);
		Если Колонка_.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			Если Таблица.Количество() > 0 Тогда
				ЗаполнитьМассивДобавляемыхРеквизитов(Таблица[0][Колонка_.Имя], Путь + "." + Колонка_.Имя, МассивДобавляемыхРеквизитов, Ложь, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНеактуальных(Таблица)

	Попытка
	
		СписокРеквизитов_ = ОбщегоНазначенияНСИ.СписокРеквизитовДерева("СписокНеактуальное", ЭтоДанныеМинздрава, ЭтоДанныеОМС);
		МассивДобавляемыхРеквизитов_ = Новый Массив;
		Для Каждого Колонка_ Из Таблица.Колонки Цикл
			Если СписокРеквизитов_.Найти(Колонка_.Имя) = Неопределено Тогда
				МассивДобавляемыхРеквизитов_.Добавить(
						Новый РеквизитФормы(Колонка_.Имя,
							Колонка_.ТипЗначения,
							"СписокНеактуальное", Колонка_.Имя)
						);
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов_);
		
		Для Каждого Колонка_ Из Таблица.Колонки Цикл
			Если СписокРеквизитов_.Найти(Колонка_.Имя) = Неопределено
				И Колонка_.Имя <> "Родитель" И Колонка_.Имя <> "ЭтоГруппа" 
			Тогда
				Элемент_ = Элементы.Добавить("СписокНеактуальное" + Колонка_.Имя, Тип("ПолеФормы"), Элементы.СписокНеактуальное);
				Элемент_.ПутьКДанным = "СписокНеактуальное." + Колонка_.Имя;
				Элемент_.АвтоВысотаЯчейки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы_ Из Таблица Цикл
			ЭлементСписка_ = ЭтотОбъект.СписокНеактуальное.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементСписка_, СтрокаТаблицы_); 
		КонецЦикла;
	
	Исключение
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

///
// Функция: ДобавитьВОбъект
//   Добавляет в объект выбранные элементы списка. Возвращает длительную операцию.
//                                            
// Возврат: {Структура} 
///
&НаСервере
Функция ДобавитьВОбъект()
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("МенеджерОбъекта", МенеджерОбъектаПоИмени(ЭтотОбъект.ИмяОбъекта));
	ПараметрыПроцедуры.Вставить("Список", ДанныеФормыВЗначение(ЭтотОбъект.Список, Тип("ДеревоЗначений")));
	ПараметрыПроцедуры.Вставить(
		"СвойстваОбъекта",
		ОбщегоНазначенияНСИ.ПолучитьСвойстваОбъекта(
			ЭтотОбъект.ИмяОбъекта, РеквизитФормыВЗначение("Список"), ЭтоДанныеМинздрава, ЭтоДанныеОМС
		)
	);
	ПараметрыПроцедуры.Вставить("Иерархия", ЭтотОбъект.Иерархия);
	ПараметрыПроцедуры.Вставить("ИерархияГрупп", ЭтотОбъект.ИерархияГрупп);
	ПараметрыПроцедуры.Вставить(
		"ОбновитьПринудительно",
		ПараметрЗагрузки(ЭтотОбъект.ПараметрыЗагрузки, "ОбновитьПринудительно", Ложь)
	);
	ПараметрыПроцедуры.Вставить(
		"ИмяОсновногоКода",
		ПараметрЗагрузки(ЭтотОбъект.ПараметрыЗагрузки, "ИмяОсновногоКода", Неопределено)
	);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных классификатора'");
	ДлительнаяОперация_ = ДлительныеОперации.ВыполнитьВФоне(
		"ОбщегоНазначенияНСИ.ДобавитьВОбъектВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения
	);
	Возврат ДлительнаяОперация_;
	
КонецФункции

/// Оповещает о результате выполнения команды "Добавить".
//
// Параметры:
//   ДлительнаяОперация - Структура -
//     Структура с описанием длительной операции.
//   ДополнительныеПараметры - Структура -
//     Дополнительные параметры длительной операции.
///
&НаКлиенте
Процедура ДобавитьЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		Элементы_ = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если Элементы_.Количество() < 6 Тогда
			Для Каждого Элемент_ Из Элементы_ Цикл
				НавигационнаяСсылка_ = ПолучитьНавигационнуюСсылку(Элемент_);
				ПоказатьОповещениеПользователя(
					"Создание (изменение):",
					НавигационнаяСсылка_,
					Элемент_,
					БиблиотекаКартинок.Информация32
				);
				ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка_);
			КонецЦикла;
		Иначе
			Для Каждого Элемент_ Из Элементы_ Цикл
				НавигационнаяСсылка_ = ПолучитьНавигационнуюСсылку(Элемент_);
				ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка_);
			КонецЦикла;
			ПоказатьОповещениеПользователя(
				"Создание (изменение):",,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					";%1 элемент;;%1 элемента;%1 элементов;%1 элементов", Элементы_.Количество()
				) + " обработано",
				БиблиотекаКартинок.Информация32
			);
		КонецЕсли;
		Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ТаблицаФормы") Тогда
			ЭтотОбъект.ВладелецФормы.Обновить();
		КонецЕсли;

		Если ПараметрЗагрузки(ЭтотОбъект.ПараметрыЗагрузки, "ОбновитьИндексыПолнотекстногоПоиска", Ложь) Тогда
			ОбщегоНазначенияНСИ.ОбновитьИндексПолнотекстовогоПоиска();
		КонецЕсли;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокДаннымиКлассификатора(СтруктураДанныхКлассификатора)
	
	Если СтруктураДанныхКлассификатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Иерархия = СтруктураДанныхКлассификатора.Иерархия;
	ИерархияГрупп = СтруктураДанныхКлассификатора.ИерархияГрупп;
	ЭтоДанныеМинздрава = СтруктураДанныхКлассификатора.ЭтоДанныеМинздрава;
	ЭтоДанныеОМС = СтруктураДанныхКлассификатора.ЭтоДанныеОМС;
	ИмяОсновногоКода = СтруктураДанныхКлассификатора.ИмяОсновногоКода;
	
	Элементы.СписокКодПоОМС.Видимость = ЭтоДанныеОМС;
	Элементы.СписокКодМинздрава.Видимость = ЭтоДанныеМинздрава;
	Элементы.СписокНеактуальноеКодПоОМС.Видимость = ЭтоДанныеОМС;
	Элементы.СписокНеактуальноеКодМинздрава.Видимость = ЭтоДанныеМинздрава;
	
	ЗаполнитьСписок(СтруктураДанныхКлассификатора.Актуальное);
	ЗаполнитьСписокНеактуальных(СтруктураДанныхКлассификатора.Неактуальное);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатИзВременногоХранилища(АдресРезультата)
	ЗакрытьФорму_ = Истина;
	Результат_ = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат_ <> Неопределено Тогда
		ИнициализироватьСписокДаннымиКлассификатора(Результат_);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаКлассификатора;
		ЗакрытьФорму_ = Ложь;
	КонецЕсли;
	
	Возврат ЗакрытьФорму_;
КонецФункции

/// Процедура построения дерева элементов
&НаСервере
Процедура ПостроитьДерево(НачальныйЭлемент, ТаблицаДанных, Родитель = Неопределено)
	Если Родитель <> Неопределено И Родитель = "" Тогда
		Возврат;
	КонецЕсли;
	Дерево_ = НачальныйЭлемент.ПолучитьЭлементы();
	П_ = Новый Структура("Родитель", ?(Родитель = Неопределено,"",Родитель));
	СтрокиПоиска_ = ТаблицаДанных.НайтиСтроки(П_);
	СписокСвойств_ = Неопределено;
	МассивИменТаблиц_ = Неопределено;
	Для Каждого Строка_ Из СтрокиПоиска_ Цикл
		НоваяСтрока_ = Дерево_.Добавить();
		ЗаполнитьЗначенияВСтрокеРеквизитаПоСтрокеТаблицыДанных(НоваяСтрока_, Строка_, СписокСвойств_, МассивИменТаблиц_);
		ПостроитьДерево(НоваяСтрока_, ТаблицаДанных, Строка_[ИмяОсновногоКода]);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВСтрокеРеквизитаПоСтрокеТаблицыДанных(СтрокаРеквизита, СтрокаТаблицыДанных, СписокСвойств, МассивИменТаблиц)
	Если СписокСвойств = Неопределено Тогда
		СписокСвойств = "";
		МассивИменТаблиц = Новый Массив();
		Для Каждого Колонка_ Из СтрокаТаблицыДанных.Владелец().Колонки Цикл 
			Если Колонка_.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				МассивИменТаблиц.Добавить(Колонка_.Имя);
			Иначе
				СписокСвойств = СписокСвойств + ?(ЗначениеЗаполнено(СписокСвойств), ",", "") + Колонка_.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтрокаТаблицыДанных, СписокСвойств);
	Для Каждого ИмяТаблицы_ Из МассивИменТаблиц Цикл 
		Для Каждого СтрокаСтроки_ Из СтрокаТаблицыДанных[ИмяТаблицы_] Цикл 
			НоваяСтрокаСтроки_ = СтрокаРеквизита[ИмяТаблицы_].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСтроки_, СтрокаСтроки_);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

/// Процедура установки отметки выбора для дочерних элементов
&НаКлиенте
Процедура ПоставитьОтметку(НачальныйЭлемент, Пометка)
	Дерево_ = НачальныйЭлемент.ПолучитьЭлементы();
	Для Каждого Элемент_ Из Дерево_ Цикл
		Элемент_.Выбран = Пометка;
		ПоставитьОтметку(Элемент_, Пометка);
	КонецЦикла;
КонецПроцедуры

/// Процедура устоновки отметки выбора для Родителя элемента
&НаКлиенте
Процедура ПоставитьОтметкуРодителю(НачальныйЭлемент, Пометка)
	Родитель_ = НачальныйЭлемент.ПолучитьРодителя();
	Если Родитель_ <> Неопределено Тогда
		Если Пометка Тогда
			Родитель_.Выбран = Пометка;
			ПоставитьОтметкуРодителю(Родитель_, Пометка);
		Иначе
			ЕстьПометки = Ложь;
			ПроверитьНаличиеВыбранныхЭлементов(Родитель_, ЕстьПометки);
			Если Не ЕстьПометки Тогда
				Родитель_.Выбран = Пометка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыбранныхЭлементов(НачальныйЭлемент, ЕстьВыбранные)
	Дерево_ = НачальныйЭлемент.ПолучитьЭлементы();
	Для Каждого Элемент_ Из Дерево_ Цикл
		Если Элемент_.Выбран Тогда
			ЕстьВыбранные = Истина;
		КонецЕсли;
		ПроверитьНаличиеВыбранныхЭлементов(Элемент_, ЕстьВыбранные);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбменНСИРосминздрава

&НаСервере
Функция ЗагрузитьВерсиюКлассификатораНаСервере()
	
	МенеджерОбъекта_ = МенеджерОбъектаПоИмени(ЭтотОбъект.ИмяОбъекта);
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("Наименование", ЭтотОбъект.Наименование);
	ПараметрыПроцедуры.Вставить("ИмяОбъекта", ЭтотОбъект.ИмяОбъекта);
	ПараметрыПроцедуры.Вставить("Идентификатор", ЭтотОбъект.Идентификатор);
	ПараметрыПроцедуры.Вставить("НомерВерсии", ЭтотОбъект.Версия);
	ПараметрыПроцедуры.Вставить("МенеджерОбъекта", МенеджерОбъекта_);
	ПараметрыПроцедуры.Вставить("ПараметрыЗагрузки", ЭтотОбъект.ПараметрыЗагрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных классификатора'");
	ДлительнаяОперация_ = ДлительныеОперации.ВыполнитьВФоне(
		"НСИРосМинздрав.ЗапроситьКлассификаторВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения
	);
	Возврат ДлительнаяОперация_;
	
КонецФункции

/// Обрабатывает ответ на вопрос об использовании ускоренной загрузки справочника.
&НаКлиенте
Процедура ЗагрузитьВерсиюЗавершение(Знач Результат, Знач Дополнительные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания_ = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.ПараметрыЗагрузки.Удалить("БыстраяЗагрузка")
	КонецЕсли;
	
	ДлительнаяОперация_ = ЗагрузитьВерсиюКлассификатораНаСервере();
	Если ДлительнаяОперация_.Статус <> "Выполняется" Тогда
		ЗагрузитьВерсиюКлассификатораЗавершение(ДлительнаяОперация_);
	Иначе
		ОповещениеОЗавершении_ = Новый ОписаниеОповещения("ЗагрузитьВерсиюКлассификатораЗавершение", ЭтотОбъект);
		ПараметрыОжидания_.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания_.Интервал = 10;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация_, ОповещениеОЗавершении_, ПараметрыОжидания_);
	КонецЕсли;
КонецПроцедуры

/// Оповещает о результате загрузки версии классификатора.
// Если классификатор загружен успешно, открывает страницу с выбором загружаемых элементов
// Параметры:
//   ДлительнаяОперация - Структура -
//     Структура с описанием длительной операции.
//   ДополнительныеПараметры - Структура -
//     Дополнительные параметры длительной операции.
///
&НаКлиенте
Процедура ЗагрузитьВерсиюКлассификатораЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗакрытьФорму_ = ОбработатьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если ЗакрытьФорму_ Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция МенеджерОбъектаПоИмени(ИмяОбъекта)
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	КонецЕсли;
	
	ВызватьИсключение("Невозможно определить менеджер объекта");
КонецФункции

//если колонки нету среди реквизитов объекта, то это дополнительные свойства записи, их видеть не нужно
Функция СкрыватьКолонку(ИмяКолонки, СтруктураИменРеквизитовОбъекта)
	
	Возврат Булево(
		СтруктураИменРеквизитовОбъекта.Реквизиты.Найти(ИмяКолонки) = Неопределено И
		СтруктураИменРеквизитовОбъекта.СтандартныеРеквизиты.Найти(ИмяКолонки) = Неопределено И
		СтруктураИменРеквизитовОбъекта.ТабличныеЧасти.Найти(ИмяКолонки) = Неопределено);
		
	КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрЗагрузки(СтруктураПараметров, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	Результат_ = ЗначениеПоУмолчанию;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда 
		Если НЕ СтруктураПараметров.Свойство(ИмяПараметра, Результат_) Тогда 
			Результат_ = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

#КонецОбласти
