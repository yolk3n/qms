
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = Параметры.ЗаголовокФормыВыбора;
	СтруктураЗаполняемыхЗначений = Новый Структура("ИмяТаблицыДляЗаполнения, ИмяКолонкиДляЗаполнения", Параметры.ИмяЭлементаФормыДляЗаполнения, Параметры.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Если Параметры.ПараметрыВнешнегоСоединения = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.МассивВыбранныхЗначений) Тогда
			МассивПереданныхЗначений = Параметры.МассивВыбранныхЗначений;
		Иначе
			МассивПереданныхЗначений = Новый Массив();
		КонецЕсли;
		
		ЗаполнитьСписокДоступныхЗначений(МассивПереданныхЗначений, Параметры.ИмяТаблицыВыбора, Параметры.КоллекцияФильтров);
		ЗаполнитьИдентификаторВДереве(СписокВыбираемыхЗначений);
		
	Иначе
		
		Если Параметры.ПараметрыВнешнегоСоединения.ТипСоединения = "ВнешнееСоединение" Тогда
			
			РезультатСоединения = ОбменДаннымиСервер.ВнешнееСоединениеСБазой(Параметры.ПараметрыВнешнегоСоединения);
			
			Если РезультатСоединения.Соединение = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(РезультатСоединения.ПодробноеОписаниеОшибки,,,, Отказ);
				Возврат;
			КонецЕсли;
			
			ВнешнееСоединение = РезультатСоединения.Соединение;
			
			СвойстваОбъектаМетаданных = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.СвойстваОбъектаМетаданных(Параметры.ИмяТаблицыВыбора);
			
			Если ЗначениеЗаполнено(Параметры.МассивВыбранныхЗначений) Тогда
				МассивПереданныхЗначений = Параметры.МассивВыбранныхЗначений;
			Иначе
				МассивПереданныхЗначений = Новый Массив();
			КонецЕсли;
			
			Если Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_1_1_7
			 Или Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_0_1_6 Тогда
				ТаблицаБазыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы_2_0_1_6(Параметры.ИмяТаблицыВыбора));
			Иначе
				ТаблицаБазыКорреспондента = ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы(Параметры.ИмяТаблицыВыбора));
			КонецЕсли;
			
		ИначеЕсли Параметры.ПараметрыВнешнегоСоединения.ТипСоединения = "ВебСервис" Тогда
			
			СтрокаСообщенияОбОшибке = "";
			
			Если Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_1_1_7 Тогда
				
				WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(Параметры.ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке);
				
			ИначеЕсли Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_0_1_6 Тогда
				
				WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(Параметры.ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке);
				
			Иначе
				
				WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(Параметры.ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке);
				
			КонецЕсли;
			
			Если WSПрокси = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
				Возврат;
			КонецЕсли;
			
			Если Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_1_1_7
			 Или Параметры.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_0_1_6 Тогда
				
				ДанныеБазыКорреспондента = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBData(Параметры.ИмяТаблицыВыбора));
				
				СвойстваОбъектаМетаданных = ДанныеБазыКорреспондента.СвойстваОбъектаМетаданных;
				ТаблицаБазыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеБазыКорреспондента.ТаблицаБазыКорреспондента);
				
			Иначе
				
				ДанныеБазыКорреспондента = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBData(Параметры.ПолноеИмяТаблицыБазыКорреспондента));
				
				СвойстваОбъектаМетаданных = ЗначениеИзСтрокиВнутр(ДанныеБазыКорреспондента.СвойстваОбъектаМетаданных);
				ТаблицаБазыКорреспондента = ЗначениеИзСтрокиВнутр(ДанныеБазыКорреспондента.ТаблицаБазыКорреспондента);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.МассивВыбранныхЗначений) Тогда
				МассивПереданныхЗначений = Параметры.МассивВыбранныхЗначений;
			Иначе
				МассивПереданныхЗначений = Новый Массив();
			КонецЕсли;
			
			ПереинициализироватьИдентификаторСсылки(ТаблицаБазыКорреспондента);
			
		Иначе
			ВызватьИсключение СтрЗаменить(НСтр("ru = 'Тип соединения (%1) не поддерживается.'"), "%1", Параметры.ПараметрыВнешнегоСоединения.ТипСоединения);
		КонецЕсли;
		
		ДеревоВыбираемыхЗначений = РеквизитФормыВЗначение("СписокВыбираемыхЗначений");
		ЗаполнитьСписокДоступныхЗначенийВнешнееСоединение(ДеревоВыбираемыхЗначений, МассивПереданныхЗначений, ТаблицаБазыКорреспондента);
		ЗначениеВРеквизитФормы(ДеревоВыбираемыхЗначений, "СписокВыбираемыхЗначений");
		
		Если ЗначениеЗаполнено(Параметры.КоллекцияФильтров) Тогда
			
			ПроверитьПрохождениеФильтраВнешнееСоединение(Параметры.КоллекцияФильтров);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаВариантВыбораЗначений.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ПараметрыЗакрытияФормы = Новый Структура();
	ПараметрыЗакрытияФормы.Вставить("АдресТаблицыВоВременномХранилище", СформироватьТаблицуВыбранныхЗначений());
	ПараметрыЗакрытияФормы.Вставить("ИмяТаблицыДляЗаполнения",          СтруктураЗаполняемыхЗначений.ИмяТаблицыДляЗаполнения);
	ПараметрыЗакрытияФормы.Вставить("ИмяКолонкиДляЗаполнения",          СтруктураЗаполняемыхЗначений.ИмяКолонкиДляЗаполнения);
	
	ОповеститьОВыборе(ПараметрыЗакрытияФормы);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	ЗаполнитьОтметки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	ЗаполнитьОтметки(Истина);
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбираемыхЗначенийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбираемыхЗначенийПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДоступныхЗначений(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия = Неопределено)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВидСправочника);
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
			
			Если ОбъектМетаданных.Иерархический Тогда
				
				Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					ЗаполнитьСписокДоступныхЗначенийИерархияГруппИЭлементов(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия);
				Иначе
					ЗаполнитьСписокДоступныхЗначенийИерархияЭлементов(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия);
				КонецЕсли;
				
			Иначе
				ЗаполнитьСписокДоступныхЗначенийНеиерархическогоСправочника(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхЗначенийИерархияГруппИЭлементов(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия) 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"""" КАК Ключ,
	|	"""" КАК Идентификатор,
	|	СправочникДляВыбораОтборов.Ссылка КАК Представление,
	|	ВЫБОР
	|		КОГДА СправочникДляВыбораОтборов.Ссылка В (&МассивПереданныхЗначений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	ВЫБОР
	|		КОГДА    ЭтоГруппа И НЕ ПометкаУдаления ТОГДА 0
	|		КОГДА    ЭтоГруппа И    ПометкаУдаления ТОГДА 1
	|		КОГДА НЕ ЭтоГруппа И НЕ ПометкаУдаления ТОГДА 2
	|		КОГДА НЕ ЭтоГруппа И    ПометкаУдаления ТОГДА 3
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	%ВидСправочника% КАК СправочникДляВыбораОтборов
	|ГДЕ
	|	ИСТИНА
	|");
	
	Если ЗначениеЗаполнено(ДополнительныеУсловия) Тогда
		Для Каждого Фильтр Из ДополнительныеУсловия Цикл
			Запрос.Текст = ДобавитьТекстУсловия(Запрос.Текст, " СправочникДляВыбораОтборов.", "И", Фильтр);
			Запрос.УстановитьПараметр(Фильтр.ИмяПараметра, Фильтр.ЗначениеПараметра);
		КонецЦикла; 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%", ВидСправочника);
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Наименование
	|";
	Запрос.УстановитьПараметр("МассивПереданныхЗначений", МассивПереданныхЗначений);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "СписокВыбираемыхЗначений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхЗначенийИерархияЭлементов(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия) 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"""" КАК Ключ,
	|	"""" КАК Идентификатор,
	|	СправочникДляВыбораОтборов.Ссылка КАК Представление,
	|	ВЫБОР
	|		КОГДА СправочникДляВыбораОтборов.Ссылка В (&МассивПереданныхЗначений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	ВЫБОР
	|		КОГДА ПометкаУдаления ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	%ВидСправочника% КАК СправочникДляВыбораОтборов
	|ГДЕ
	|	ИСТИНА");
	
	Если ЗначениеЗаполнено(ДополнительныеУсловия) Тогда
		Для Каждого Фильтр Из ДополнительныеУсловия Цикл
			Запрос.Текст = ДобавитьТекстУсловия(Запрос.Текст, " СправочникДляВыбораОтборов.", "И", Фильтр);
			Запрос.УстановитьПараметр(Фильтр.ИмяПараметра, Фильтр.ЗначениеПараметра);
		КонецЦикла; 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%", ВидСправочника);
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование ИЕРАРХИЯ
	|";
	Запрос.УстановитьПараметр("МассивПереданныхЗначений", МассивПереданныхЗначений);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "СписокВыбираемыхЗначений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхЗначенийНеиерархическогоСправочника(МассивПереданныхЗначений, ВидСправочника, ДополнительныеУсловия) 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"""" КАК Ключ,
	|	"""" КАК Идентификатор,
	|	СправочникДляВыбораОтборов.Ссылка КАК Представление,
	|	ВЫБОР
	|		КОГДА СправочникДляВыбораОтборов.Ссылка В (&МассивПереданныхЗначений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка,
	|	ВЫБОР
	|		КОГДА ПометкаУдаления ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	%ВидСправочника% КАК СправочникДляВыбораОтборов
	|ГДЕ
	|	ИСТИНА
	|");
	
	Если ЗначениеЗаполнено(ДополнительныеУсловия) Тогда
		Для Каждого Фильтр Из ДополнительныеУсловия Цикл
			Запрос.Текст = ДобавитьТекстУсловия(Запрос.Текст, " СправочникДляВыбораОтборов.", "И", Фильтр);
			Запрос.УстановитьПараметр(Фильтр.ИмяПараметра, Фильтр.ЗначениеПараметра);
		КонецЦикла; 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%", ВидСправочника);
	Запрос.УстановитьПараметр("МассивПереданныхЗначений", МассивПереданныхЗначений);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "СписокВыбираемыхЗначений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторВДереве(Дерево)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Строка.Идентификатор = Строка(Строка.Представление.УникальныйИдентификатор());
		ЗаполнитьИдентификаторВДереве(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхЗначенийВнешнееСоединение(ТаблицаЗначенийБазыКорреспондента, МассивПереданныхЗначений, ДеревоЗначений)
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		НоваяСтрока = ТаблицаЗначенийБазыКорреспондента.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если МассивПереданныхЗначений.Найти(НоваяСтрока.Идентификатор) <> Неопределено Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокДоступныхЗначенийВнешнееСоединение(НоваяСтрока, МассивПереданныхЗначений, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуВыбранныхЗначений()
	
	ВыбранныеЗначения = Неопределено;
	СформироватьТаблицуВыбранныхЗначенийРекурсивно(СписокВыбираемыхЗначений, ВыбранныеЗначения);
	Возврат ПоместитьВоВременноеХранилище(ВыбранныеЗначения, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуВыбранныхЗначенийРекурсивно(ДанныеФормыДерево, ВыбранныеЗначения)
	
	Если ВыбранныеЗначения = Неопределено Тогда
		ВыбранныеЗначения = Новый ТаблицаЗначений;
		ВыбранныеЗначения.Колонки.Добавить("Представление", Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), "Строка"));
		ВыбранныеЗначения.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	СтрокиДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Пометка Тогда
			ЗаполнитьЗначенияСвойств(ВыбранныеЗначения.Добавить(), СтрокаДерева);
		КонецЕсли;
		СформироватьТаблицуВыбранныхЗначенийРекурсивно(СтрокаДерева, ВыбранныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтметки(ЗначениеОтметки, Знач ДанныеФормыДерево = Неопределено)
	
	Если ДанныеФормыДерево = Неопределено Тогда
		ДанныеФормыДерево = СписокВыбираемыхЗначений;
	КонецЕсли;
	
	СтрокиДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Пометка = ЗначениеОтметки;
		ЗаполнитьОтметки(ЗначениеОтметки, СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПрохождениеФильтраВнешнееСоединение(КоллекцияФильтров)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаЗначений.Представление,
	|	ТаблицаЗначений.Пометка,
	|	ТаблицаЗначений.Ключ,
	|	ТаблицаЗначений.Идентификатор,
	|	ТаблицаЗначений.ИндексКартинки
	|ПОМЕСТИТЬ СписокОтфильтрованныхЭлементов
	|ИЗ
	|	&СписокОтобранныхЗначений КАК ТаблицаЗначений
	|ГДЕ
	|	ИСТИНА
	|");
	
	Запрос.УстановитьПараметр("СписокОтобранныхЗначений", СписокВыбираемыхЗначенийТаблицей());
	
	Если ЗначениеЗаполнено(КоллекцияФильтров) Тогда
		Для Каждого Фильтр Из КоллекцияФильтров Цикл
			Запрос.Текст = ДобавитьТекстУсловия(Запрос.Текст, " ТаблицаЗначений.", "И", Фильтр);
			Запрос.УстановитьПараметр(Фильтр.ИмяПараметра, Фильтр.ЗначениеПараметра);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|ВЫБРАТЬ
	|	СписокОтфильтрованныхЭлементов.Представление,
	|	СписокОтфильтрованныхЭлементов.Пометка,
	|	СписокОтфильтрованныхЭлементов.Ключ,
	|	СписокОтфильтрованныхЭлементов.Идентификатор,
	|	СписокОтфильтрованныхЭлементов.ИндексКартинки
	|ИЗ
	|	СписокОтфильтрованныхЭлементов КАК СписокОтфильтрованныхЭлементов
	|";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "СписокВыбираемыхЗначений");
	
КонецПроцедуры

&НаСервере
Функция СписокВыбираемыхЗначенийТаблицей(Дерево = Неопределено, Таблица = Неопределено)
	
	Если Дерево = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение("СписокВыбираемыхЗначений");
	КонецЕсли;
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Строки.Количество() > 0 Тогда
			СписокВыбираемыхЗначенийТаблицей(Строка, Таблица);
		Иначе
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Функция ДобавитьТекстУсловия(ТекстЗапроса, ИмяТаблицы, СоединительУсловий, Фильтр)
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + " " + СоединительУсловий
		+ ИмяТаблицы
		+ Фильтр.РеквизитОтбора
		+ " " + Фильтр.Условие
		+ ?(Фильтр.Условие = "В", " (","")
		+ " &"
		+ Фильтр.ИмяПараметра
		+ ?(Фильтр.Условие = "В", ") ","");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ПереинициализироватьИдентификаторСсылки(ТаблицаБазыКорреспондента)
	
	Для Каждого Строка Из ТаблицаБазыКорреспондента.Строки Цикл
		
		Строка.Идентификатор = ИдентификаторСсылки(Строка.Идентификатор);
		Если Строка.Строки.Количество() > 0 Тогда
			ПереинициализироватьИдентификаторСсылки(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСсылки(Знач СтрокаВнутр)
	
	СтрокаУИД = Сред(СтрокаВнутр, 1 + СтрНайти(СтрокаВнутр, ":"), 32);
	
	Идентификатор =
		Сред(СтрокаУИД, 25, 8) 
		+ "-" + Сред(СтрокаУИД, 21, 4) 
		+ "-" + Сред(СтрокаУИД, 17, 4) 
		+ "-" + Сред(СтрокаУИД, 1, 4)
		+ "-" + Сред(СтрокаУИД, 5, 12);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
