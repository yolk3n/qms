
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(
		ЭтотОбъект,
		Объект,
		Элементы.ГруппаСостояние,
		Элементы.ДатаИсполнения);
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененыРеквизитыНевыполненныхЗадач" И Параметр = Объект.БизнесПроцесс И Не Объект.Выполнена Тогда
		ДатаИсполнения = Объект.ДатаИсполнения;
		Прочитать();
		Объект.ДатаИсполнения = ДатаИсполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") И ПараметрыЗаписи.ВыполнитьЗадачу Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано И Не ПараметрыЗаписи.ПовторитьСогласование Тогда
			ДополнительныеПараметры = Неопределено;
			ПараметрыЗаписи.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
			БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(ТекущийОбъект.Предмет, "Закрыт", ДополнительныеПараметры);
		КонецЕсли;
		
		ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.БизнесПроцесс);
		СогласованиеОбъект = ТекущийОбъект.БизнесПроцесс.ПолучитьОбъект();
		СогласованиеОбъект.ПовторитьСогласование = ПараметрыЗаписи.ПовторитьСогласование;
		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(ТекущийОбъект.Ссылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ПараметрыЗаписи.ПовторитьСогласование;
		СогласованиеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить(Команда)
	
	ОчиститьСообщения();
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:",
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить(Команда)
	
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:",
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомился(Команда)
	
	ОбработатьРезультатСогласованияПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	Модифицированность = Ложь;
	
	Закрыть();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.БизнесПроцесс);
	ПараметрыФормы.Вставить("ЗадачаОзнакомления", Объект.Ссылка);
	ПараметрыФормы.Вставить("РезультатВыполнения", Объект.РезультатВыполнения);
	ОткрытьФорму("БизнесПроцесс.Согласование.Форма.ФормаИзменениеПараметров", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	ПараметрыФормы = Новый Структура("ЗадачаСсылка", Объект.Ссылка);
	ОткрытьФорму("БизнесПроцесс.Согласование.Форма.ФормаИсторияСогласования", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистСогласования(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.МенеджерПечати",
		"ЛистСогласования",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.БизнесПроцесс),
		ЭтотОбъект,
		Новый Структура("Задача", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ПоказатьЗначение(, Объект.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсполнительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ПоказатьЗначение(, Объект.Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Предмет);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформлениеСписка = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьУсловноеОформлениеДинамическогоСписка(ХодИсполнения);
	
	// Цвет текста строк списка ХодИсполнения
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	
	РезультатыСогласования = Новый СписокЗначений;
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.Согласовано);
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"РезультатСогласования", ВидСравненияКомпоновкиДанных.ВСписке, РезультатыСогласования);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	
	// Цвет текста строк списка ХодИсполнения
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"РезультатСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РезультатыСогласования.НеСогласовано);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	НачальныйПризнакВыполнения = Объект.Выполнена;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ФормаЗадачиИнициализировать(ЭтотОбъект, Объект, Элементы.СрокИсполнения, Элементы.Предмет);
	
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.ХодИсполненияДатаИсполнения);
	
	// номер итерации
	НайденнаяСтрока = Объект.БизнесПроцесс.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерации = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат согласования
	РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
	СтрокиИтерации = Объект.БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
			Прервать;
		КонецЕсли;
		
		Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
			РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
		КонецЕсли;
	КонецЦикла;
	
	// цвет результата
	Если (РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано) 
	 Или (РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями) Тогда 
		Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		
	ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
		Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		
	КонецЕсли;
	
	// динамический список
	ТочкиМаршрута = Новый Массив;
	ТочкиМаршрута.Добавить(БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	ХодИсполнения.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", ТочкиМаршрута);
	ХодИсполнения.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.БизнесПроцесс);
	ХодИсполнения.Параметры.УстановитьЗначениеПараметра("НомерИтерации", НомерИтерации);
	
	// заголовки кнопок
	Если РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
		Элементы.Ознакомился.Заголовок = НСтр("ru = 'Завершить согласование'");
	Иначе	
		Элементы.Повторить.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение текста результата выполнения для выполненной задачи
	НайденнаяСтрока = Объект.БизнесПроцесс.РезультатыОзнакомлений.Найти(Объект.Ссылка, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Если НайденнаяСтрока.ОтправленоНаПовторноеСогласование Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Отправлено на повторное согласование.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Иначе
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерации.Видимость = Ложь;
		Элементы.История.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСогласованияПредмета()
	
	Если ЗначениеЗаполнено(Объект.Предмет)
	   И РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуПослеПроверкиПредмета", ЭтотОбъект, Новый Структура);
		БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПередУстановкойСтатусаПредметаЗакрыт(Объект.Предмет, Оповещение);
	Иначе
		ВыполнитьЗадачуОзнакомления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПослеПроверкиПредмета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьЗадачуОзнакомления(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуОзнакомления(ДополнительныеПараметры = Неопределено)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ВыполнитьЗадачу", Истина);
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ПараметрыЗаписи.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена",, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.Ссылка);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
