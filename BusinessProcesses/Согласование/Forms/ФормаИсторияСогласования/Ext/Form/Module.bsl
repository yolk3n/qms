
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.ИсторияЦикловДатаИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.ИсторияИсполнителяДатаИсполнения);
	
	ЗадачаСсылка = Параметры.ЗадачаСсылка;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задача.БизнесПроцесс КАК БизнесПроцесс,
	|	Задача.БизнесПроцесс.НомерИтерации КАК ТекущийНомерИтерации,
	|	Задача.БизнесПроцесс.Автор КАК АвторСогласования,
	|	Задача.БизнесПроцесс.ВариантСогласования КАК ВариантСогласования,
	|	Задача.Автор КАК Автор,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Предмет КАК Предмет,
	|	Задача.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВЫБОР
	|		КОГДА Задача.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться ТОГДА
	|			Ознакомление.НомерИтерации - 1
	|		КОГДА Задача.ТочкаМаршрута = &ТочкаМаршрутаСогласовать ТОГДА
	|			Согласование.НомерИтерации
	|	КОНЕЦ КАК НомерИтерации
	|ПОМЕСТИТЬ ОсновныеДанные
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задача
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК Ознакомление
	|	ПО
	|		Задача.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться
	|		И Задача.БизнесПроцесс = Ознакомление.Ссылка
	|		И Задача.Ссылка = Ознакомление.ЗадачаИсполнителя
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БизнесПроцесс.Согласование.РезультатыСогласования КАК Согласование
	|	ПО
	|		Задача.ТочкаМаршрута = &ТочкаМаршрутаСогласовать
	|		И Задача.БизнесПроцесс = Согласование.Ссылка
	|		И Задача.Ссылка = Согласование.ЗадачаИсполнителя
	|ГДЕ
	|	Задача.Ссылка = &ЗадачаИсполнителя
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеДанные.БизнесПроцесс КАК БизнесПроцесс,
	|	ОсновныеДанные.ВариантСогласования КАК ВариантСогласования,
	|	ОсновныеДанные.АвторСогласования КАК АвторСогласования,
	|	ОсновныеДанные.Автор КАК Автор,
	|	ОсновныеДанные.Исполнитель КАК Исполнитель,
	|	ОсновныеДанные.Предмет КАК Предмет,
	|	ОсновныеДанные.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ОсновныеДанные.ТекущийНомерИтерации КАК ТекущийНомерИтерации,
	|	ОсновныеДанные.НомерИтерации КАК НомерИтерации
	|ИЗ
	|	ОсновныеДанные КАК ОсновныеДанные
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеДанные.ТекущийНомерИтерации КАК ТекущийНомерИтерации,
	|	РезультатыСогласования.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
	|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
	|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
	|	РезультатыСогласования.НомерИтерации КАК НомерИтерации,
	|	РезультатыСогласования.ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
	|	РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
	|ИЗ
	|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОсновныеДанные
	|	ПО
	|		РезультатыСогласования.Ссылка = ОсновныеДанные.БизнесПроцесс
	|		И РезультатыСогласования.НомерИтерации <= ОсновныеДанные.НомерИтерации
	|УПОРЯДОЧИТЬ ПО
	|	НомерИтерации УБЫВ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	НомерИтерации
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнители.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
	|	Исполнители.ПорядокСогласования КАК ПорядокСогласования,
	|	Исполнители.Пройден КАК Пройден,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	Исполнители.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
	|ИЗ
	|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОсновныеДанные
	|	ПО
	|		ОсновныеДанные.ТочкаМаршрута = &ТочкаМаршрутаСогласовать
	|		И Исполнители.Ссылка = ОсновныеДанные.БизнесПроцесс
	|		И ОсновныеДанные.НомерИтерации = ОсновныеДанные.ТекущийНомерИтерации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	Запрос.УстановитьПараметр("ЗадачаИсполнителя", ЗадачаСсылка);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОзнакомиться", БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
	Запрос.УстановитьПараметр("ТочкаМаршрутаСогласовать", БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗадачи = РезультатыЗапроса[1].Выбрать();
	ДанныеЗадачи.Следующий();
	РезультатыСогласований = РезультатыЗапроса[2];
	
	БизнесПроцесс = ДанныеЗадачи.БизнесПроцесс;
	АвторСогласования = ДанныеЗадачи.АвторСогласования;
	Если Не ЗначениеЗаполнено(ЗадачаСсылка)
		Или ДанныеЗадачи.Исполнитель <> Пользователи.ТекущийПользователь()
		Или ДанныеЗадачи.Автор = Пользователи.ТекущийПользователь() Тогда
		Элементы.АвторСогласования.Видимость = Ложь;
	КонецЕсли;
	Предмет = ДанныеЗадачи.Предмет;
	Если ЗначениеЗаполнено(Предмет) Тогда 
		ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Предмет);
	Иначе
		Элементы.ПредметИсторияЦиклов.Видимость = Ложь;
		Элементы.ПредметИсторияИсполнителя.Видимость = Ложь;
	КонецЕсли;
	
	Если ДанныеЗадачи.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		// заполнить дерево
		ДеревоИсторияЦиклов = РеквизитФормыВЗначение("ИсторияЦиклов");
		
		НомераИтераций = РезультатыСогласований.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока НомераИтераций.Следующий() Цикл
			
			СтрокаДереваЦикл = ДеревоИсторияЦиклов.Строки.Добавить();
			СтрокаДереваЦикл.Исполнитель = НСтр("ru = 'Цикл'") + " " + НомераИтераций.НомерИтерации;
			СтрокаДереваЦикл.НомерИтерации = НомераИтераций.НомерИтерации;
			
			РезультатыСогласования = НомераИтераций.Выбрать();
			Пока РезультатыСогласования.Следующий() Цикл
				
				СтрокаДереваИсполнитель = СтрокаДереваЦикл.Строки.Добавить();
				СтрокаДереваИсполнитель.ЗадачаИсполнителя = РезультатыСогласования.ЗадачаИсполнителя;
				СтрокаДереваИсполнитель.РезультатСогласования = РезультатыСогласования.РезультатСогласования;
				СтрокаДереваИсполнитель.ДатаИсполнения = РезультатыСогласования.ДатаИсполнения;
				СтрокаДереваИсполнитель.РезультатВыполнения = РезультатыСогласования.РезультатВыполнения;
				СтрокаДереваИсполнитель.НомерИтерации = РезультатыСогласования.НомерИтерации;
				
				Если ЗначениеЗаполнено(РезультатыСогласования.Исполнитель) Тогда
					СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.Исполнитель;
				Иначе
					СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.РольИсполнителя;
					СтрокаДереваИсполнитель.ОсновнойОбъектАдресации = РезультатыСогласования.ОсновнойОбъектАдресации;
					СтрокаДереваИсполнитель.ДополнительныйОбъектАдресации = РезультатыСогласования.ДополнительныйОбъектАдресации;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоИсторияЦиклов, "ИсторияЦиклов");
		
		Элементы.ГруппаИсторияЦиклов.Видимость = Истина;
		Элементы.ГруппаИсторияИсполнителя.Видимость = Ложь;
		Заголовок = НСтр("ru = 'История согласования'");
		
	ИначеЕсли ДанныеЗадачи.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		
		ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(БизнесПроцесс);
		
		ВариантСогласования = ДанныеЗадачи.ВариантСогласования;
		Если ВариантСогласования <> Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
			Элементы.ИсторияИсполнителяПорядокСогласования.Видимость = Ложь;
		КонецЕсли;
		Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			Элементы.ПереместитьВверх.Видимость = Ложь;
			Элементы.ПереместитьВниз.Видимость = Ложь;
			Элементы.КонтекстноеМенюПереместитьВверх.Видимость = Ложь;
			Элементы.КонтекстноеМенюПереместитьВниз.Видимость = Ложь;
		КонецЕсли;
		
		Если ДанныеЗадачи.НомерИтерации <> ДанныеЗадачи.ТекущийНомерИтерации Или Не ДоступностьПоШаблону Тогда
			Элементы.ДобавитьСогласующего.Видимость = Ложь;
			Элементы.ПереместитьВверх.Видимость = Ложь;
			Элементы.ПереместитьВниз.Видимость = Ложь;
			
			Элементы.КонтекстноеМенюДобавитьСогласующего.Видимость = Ложь;
			Элементы.КонтекстноеМенюПереместитьВверх.Видимость = Ложь;
			Элементы.КонтекстноеМенюПереместитьВниз.Видимость = Ложь;
			Элементы.КонтекстноеМенюУдалитьСогласующего.Видимость = Ложь;
			
			Элементы.ИсторияИсполнителяИсполнитель.ТолькоПросмотр = Истина;
			Элементы.ИсторияИсполнителяПорядокСогласования.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		// заполнить дерево
		ДеревоИсторияИсполнителя = РеквизитФормыВЗначение("ИсторияИсполнителя");
		
		НомераИтераций = РезультатыСогласований.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока НомераИтераций.Следующий() Цикл
			
			Если НомераИтераций.НомерИтерации = ДанныеЗадачи.ТекущийНомерИтерации Тогда
				
				СтрокаДереваЦикл = ДеревоИсторияИсполнителя.Строки.Добавить();
				СтрокаДереваЦикл.Исполнитель = НСтр("ru = 'Цикл'") + " " + НомераИтераций.НомерИтерации + " (" + НРег(ДанныеЗадачи.ВариантСогласования) + ")";
				СтрокаДереваЦикл.НомерИтерации = НомераИтераций.НомерИтерации;
				
				Исполнители = РезультатыЗапроса[3].Выбрать();
				РезультатыСогласования = НомераИтераций.Выбрать();
				
				Пока Исполнители.Следующий() Цикл
					СтрокаДереваИсполнитель = СтрокаДереваЦикл.Строки.Добавить();
					СтрокаДереваИсполнитель.ЗадачаИсполнителя = Исполнители.ЗадачаИсполнителя;
					СтрокаДереваИсполнитель.ПорядокСогласования = Исполнители.ПорядокСогласования;
					СтрокаДереваИсполнитель.НомерИтерации = НомераИтераций.НомерИтерации;
					СтрокаДереваИсполнитель.Пройдена = Исполнители.Пройден;
					
					Если ЗначениеЗаполнено(Исполнители.ЗадачаИсполнителя) Тогда
						
						РезультатыСогласования.Сбросить();
						Если РезультатыСогласования.НайтиСледующий(Новый Структура("ЗадачаИсполнителя", Исполнители.ЗадачаИсполнителя)) Тогда
							
							СтрокаДереваИсполнитель.ДатаИсполнения = РезультатыСогласования.ДатаИсполнения;
							СтрокаДереваИсполнитель.РезультатВыполнения = РезультатыСогласования.РезультатВыполнения;
							СтрокаДереваИсполнитель.РезультатСогласования = РезультатыСогласования.РезультатСогласования;
							
							Если ЗначениеЗаполнено(РезультатыСогласования.Исполнитель) Тогда 
								СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.Исполнитель;
							Иначе
								СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.РольИсполнителя;
								СтрокаДереваИсполнитель.ОсновнойОбъектАдресации = РезультатыСогласования.ОсновнойОбъектАдресации;
								СтрокаДереваИсполнитель.ДополнительныйОбъектАдресации = РезультатыСогласования.ДополнительныйОбъектАдресации;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						СтрокаДереваИсполнитель.Исполнитель = Исполнители.Исполнитель;
						СтрокаДереваИсполнитель.ОсновнойОбъектАдресации = Исполнители.ОсновнойОбъектАдресации;
						СтрокаДереваИсполнитель.ДополнительныйОбъектАдресации = Исполнители.ДополнительныйОбъектАдресации;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				СтрокаДереваЦикл = ДеревоИсторияИсполнителя.Строки.Добавить();
				СтрокаДереваЦикл.Исполнитель = НСтр("ru = 'Цикл'") + " " + НомераИтераций.НомерИтерации;
				СтрокаДереваЦикл.НомерИтерации = НомераИтераций.НомерИтерации;
				
				РезультатыСогласования = НомераИтераций.Выбрать();
				Пока РезультатыСогласования.Следующий() Цикл
					
					СтрокаДереваИсполнитель = СтрокаДереваЦикл.Строки.Добавить();
					СтрокаДереваИсполнитель.ЗадачаИсполнителя = РезультатыСогласования.ЗадачаИсполнителя;
					СтрокаДереваИсполнитель.РезультатСогласования = РезультатыСогласования.РезультатСогласования;
					СтрокаДереваИсполнитель.ДатаИсполнения = РезультатыСогласования.ДатаИсполнения;
					СтрокаДереваИсполнитель.РезультатВыполнения = РезультатыСогласования.РезультатВыполнения;
					СтрокаДереваИсполнитель.НомерИтерации = РезультатыСогласования.НомерИтерации;
					СтрокаДереваИсполнитель.Пройдена = Истина;
					
					Если ЗначениеЗаполнено(РезультатыСогласования.Исполнитель) Тогда
						СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.Исполнитель;
					Иначе
						СтрокаДереваИсполнитель.Исполнитель = РезультатыСогласования.РольИсполнителя;
						СтрокаДереваИсполнитель.ОсновнойОбъектАдресации = РезультатыСогласования.ОсновнойОбъектАдресации;
						СтрокаДереваИсполнитель.ДополнительныйОбъектАдресации = РезультатыСогласования.ДополнительныйОбъектАдресации;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоИсторияИсполнителя, "ИсторияИсполнителя");
		
		Элементы.ГруппаИсторияЦиклов.Видимость = Ложь;
		Элементы.ГруппаИсторияИсполнителя.Видимость = Истина;
		Заголовок = НСтр("ru = 'Ход согласования'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭлементыДерева = ИсторияИсполнителя.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() > 0 Тогда 
		ЭлементДерева = ЭлементыДерева[0];
		Элементы.ИсторияИсполнителя.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСогласующего(Команда)
	
	ДобавитьСтрокуСогласующего();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Добавлена Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Можно передвинуть только строки созданные самостоятельно.'"));
		Возврат;
	КонецЕсли;
	
	
	ЭлементДерева = ИсторияИсполнителя.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если ЭлементРодитель <> Неопределено Тогда 
		ЭлементыДерева = ЭлементРодитель.ПолучитьЭлементы();
		
		Индекс = ЭлементыДерева.Индекс(ЭлементДерева);
		Если Индекс = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементыДерева[Индекс-1].ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача предыдущего исполнителя уже сформирована, изменение порядка строки невозможно.'"));
			Возврат;
		КонецЕсли;
		
		ЭлементыДерева.Сдвинуть(Индекс, -1); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Добавлена Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Можно передвинуть только строки созданные самостоятельно.'"));
		Возврат;
	КонецЕсли;
	
	
	ЭлементДерева = ИсторияИсполнителя.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если ЭлементРодитель <> Неопределено Тогда 
		ЭлементыДерева = ЭлементРодитель.ПолучитьЭлементы();
		Индекс = ЭлементыДерева.Индекс(ЭлементДерева);
		Если Индекс < ЭлементыДерева.Количество()-1 Тогда 
			ЭлементыДерева.Сдвинуть(Индекс, 1); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИсторияЦиклов Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ИсторияИсполнителя.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда 
		Закрыть();
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ЭлементыДерева[0];
	ЭлементыСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	
	// Удаление пустых строк
	КоличествоСтрокДерева = ЭлементыСтрокиДерева.Количество();
	Для Инд = 1 По КоличествоСтрокДерева Цикл
		Строка = ЭлементыСтрокиДерева[КоличествоСтрокДерева - Инд];
		Если Строка.Добавлена И Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			ЭлементыСтрокиДерева.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка добавленных строк
	ЕстьДобавленныеСтроки = Ложь;
	Для Каждого Строка Из ЭлементыСтрокиДерева Цикл
		Если Строка.Добавлена Тогда
			ЕстьДобавленныеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьДобавленныеСтроки Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	// проверка дублей
	ОчиститьСообщения();
	
	КоличествоИсполнителей = ЭлементыСтрокиДерева.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = ЭлементыСтрокиДерева[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = ЭлементыСтрокиДерева[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих.'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИсторияИсполнителя");
					
				Возврат;
				
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка1.ДополнительныйОбъектАдресации) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке согласующих.'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации),
						Строка(Строка1.ДополнительныйОбъектАдресации));
					
				ИначеЕсли ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке согласующих.'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации));
					
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих.'"), 
						Строка(Строка1.Исполнитель));
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИсторияИсполнителя");
				
				Возврат;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстВопроса = НСтр("ru = 'В список согласующих были добавлены новые исполнители. Будет выполнено обновление процесса.
		|Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОКПродолжениеПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПродолжениеПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьБизнесПроцесс();
	
	Оповестить("ИзмененСоставСогласующих", БизнесПроцесс);
	Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", БизнесПроцесс);
	
	ПоказатьОповещениеПользователя(
		"Изменение:", 
		ПолучитьНавигационнуюСсылку(БизнесПроцесс),
		Строка(БизнесПроцесс),
		БиблиотекаКартинок.Информация32);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсторияИсполнителяИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(
		Элемент,
		ТекущиеДанные.Исполнитель,
		Ложь, // ТолькоПростыеРоли
		Истина); // БезВнешнихРолей
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяИсполнительПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		ТекущаяСтрока,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Добавлена Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗадачаИсполнителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ИсторияИсполнителя.ПолучитьЭлементы();
	ЭлементДерева = ИсторияИсполнителя.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыДерева.Индекс(ЭлементДерева) = 0 Тогда
		ДобавитьСтрокуСогласующего();
		Возврат;
	КонецЕсли;
	
	РодительЭлементаДерева = ЭлементДерева.ПолучитьРодителя();
	Если ЭлементыДерева.Индекс(РодительЭлементаДерева) = 0 Тогда
		ДобавитьСтрокуСогласующего();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Добавлена Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Можно удалить только строки созданные самостоятельно.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЦикловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияЦиклов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗадачаИсполнителя);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияИсполнителя.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Элементы.ИсторияИсполнителя.Развернут(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
			Элементы.ИсторияИсполнителя.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
		Иначе
			Элементы.ИсторияИсполнителя.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Добавлена Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗадачаИсполнителя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Цвет текста поля ИсторияИсполнителяРезультатСогласования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияИсполнителяРезультатСогласования.Имя);
	
	РезультатыСогласования = Новый СписокЗначений;
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.Согласовано);
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ИсторияИсполнителя.РезультатСогласования", ВидСравненияКомпоновкиДанных.ВСписке, РезультатыСогласования);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	
	// Цвет текста поля ИсторияИсполнителяРезультатСогласования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияИсполнителяРезультатСогласования.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ИсторияИсполнителя.РезультатСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РезультатыСогласования.НеСогласовано);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	
	// Цвет текста поля ИсторияЦикловРезультатСогласования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияЦикловРезультатСогласования.Имя);
	
	РезультатыСогласования = Новый СписокЗначений;
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.Согласовано);
	РезультатыСогласования.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ИсторияЦиклов.РезультатСогласования", ВидСравненияКомпоновкиДанных.ВСписке, РезультатыСогласования);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	
	// Цвет текста поля ИсторияЦикловРезультатСогласования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияЦикловРезультатСогласования.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ИсторияЦиклов.РезультатСогласования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РезультатыСогласования.НеСогласовано);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	
	// Шрифт полей ИсторияИсполнителяИсполнитель, ИсторияИсполнителяОсновнойОбъектАдресации, ИсторияИсполнителяДополнительныйОбъектАдресации
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияИсполнителяИсполнитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияИсполнителяОсновнойОбъектАдресации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияИсполнителяДополнительныйОбъектАдресации.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ИсторияИсполнителя.Добавлена", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБизнесПроцесс()

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоИсторияИсполнителя = РеквизитФормыВЗначение("ИсторияИсполнителя");
	Если ДеревоИсторияИсполнителя.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаСсылка = Параметры.ЗадачаСсылка;
	БизнесПроцесс = ЗадачаСсылка.БизнесПроцесс;
	
	НачатьТранзакцию();
	Попытка
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
		
		СтарыеИсполнители = БизнесПроцессОбъект.Исполнители.Выгрузить();
		
		СтрокиДерева = ДеревоИсторияИсполнителя.Строки[0].Строки;
		Для Каждого Строка Из СтрокиДерева Цикл
			Если Строка.Добавлена Тогда 
				Индекс = СтрокиДерева.Индекс(Строка);
				НоваяСтрока = БизнесПроцессОбъект.Исполнители.Вставить(Индекс);
				НоваяСтрока.Исполнитель = Строка.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
				НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
			КонецЕсли;
		КонецЦикла;
		
		БизнесПроцессОбъект.Записать();
		БизнесПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеИсполнители, Новый Структура);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуСогласующего()
	
	ЭлементыДерева = ИсторияИсполнителя.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() > 0 Тогда 
		СтрокаДерева = ЭлементыДерева[0];
		ЭлементыСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		
		ВсеПройдены = Истина;
		Для Каждого Строка Из ЭлементыСтрокиДерева Цикл
			Если ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) И Не Строка.Пройдена Тогда 
				ВсеПройдены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеПройдены Тогда 
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Все исполнители завершили свои задачи, добавление строки невозможно.'"));
			Отказ = Истина;
		КонецЕсли;
		
		
		НоваяСтрока = ЭлементыСтрокиДерева.Добавить();
		НоваяСтрока.Добавлена = Истина;
		НоваяСтрока.Исполнитель = ПользователиПустаяСсылка;
		
		Если ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
			Индекс = ЭлементыСтрокиДерева.Индекс(НоваяСтрока);
			Если Индекс > 0 Тогда 
				ПредыдущаяСтрока = ЭлементыСтрокиДерева.Получить(Индекс-1);
				НоваяСтрока.ПорядокСогласования = ПредыдущаяСтрока.ПорядокСогласования;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ИсторияИсполнителя.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.ИсторияИсполнителя.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
