
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаБизнесПроцесса_ПриСозданииНаСервере(ЭтотОбъект);
	
	ЗакрытьФормуВладельцаПоИмени = Параметры.ЗакрытьФормуВладельцаПоИмени;
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не Копирование Тогда 
			
			ШаблоныПоПредмету.ЗагрузитьЗначения(ШаблоныБизнесПроцессов.ПолучитьШаблоныПоПредмету(Объект.Предмет, ТипЗнч(Объект.Шаблон)));
			
			Если ШаблоныПоПредмету.Количество() = 1 Тогда 
				ЗаполнитьПоШаблонуНаСервере(ШаблоныПоПредмету[0].Значение);
			КонецЕсли;
			
		КонецЕсли;
		
		ИнициализацияФормы();
		
	КонецЕсли;
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	ВариантСогласованияПараллельно = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	ВариантСогласованияПоследовательно = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
	ВариантСогласованияСмешанно = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	ПорядокСогласованияВместеСПредыдущим = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
	ПорядокСогласованияПослеПредыдущего = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаБизнесПроцесса_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИнициализацияФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() И Не Копирование Тогда
		Если ШаблоныПоПредмету.Количество() > 1 Тогда
			ПодключитьОбработчикОжидания("ВыбратьШаблонБизнесПроцессаПриОткрытии", 0.2, Истина);
		КонецЕсли;
	Иначе
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") И ВладелецФормы.ИмяФормы = ЗакрытьФормуВладельцаПоИмени И ВладелецФормы.Открыта() Тогда
		ВладелецФормы.Закрыть();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" И Параметр.БизнесПроцесс = Объект.Ссылка Тогда
		ОбработатьИзменениеОтложенногоСтарта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПроверитьСрокВыполненияПроцессаПередСтартом(
			Объект, ЭтотОбъект, ПараметрыЗаписи, Отказ);
	ИначеЕсли Объект.Стартован И ИзменятьЗаданияЗаднимЧислом И Модифицированность Тогда
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	ИначеЕсли Не Объект.Стартован Тогда
		БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПроверитьКорректностиЗаполненияОтложенногоПроцесса(
			ЭтотОбъект, Объект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		СтарыеУчастникиПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Исполнители").Выгрузить();
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаБизнесПроцесса_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ОбновитьДоступностьПолейСостояния(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьШаг(Объект.Исполнители);
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		ИнформацияОЗапуске = Новый Структура();
		ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
		ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Объект.Предмет);
		
		Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
		Если ЗначениеЗаполнено(Объект.Предмет) Тогда
			ОповеститьОбИзменении(Объект.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
	ПараметрыЗаписи.Вставить("Старт", Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтотОбъект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = Объект.Исполнители.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.УстановитьГлавнуюЗадачуБизнесПроцессаИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ШаблоныПоПредмету.ЗагрузитьЗначения(ПолучитьШаблоныПоПредмету(Объект.Предмет, ТипЗнч(Объект.Шаблон), Ложь));
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(ТипЗнч(Объект.Шаблон), ШаблоныПоПредмету,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		УстановитьДоступностьПоШаблону();
		УстановитьДоступность();
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтложенныйСтарт(Команда)
	
	ОткрытьНастройкуОтложенногоСтарта();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ГлавнаяЗадачаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Объект.Предмет);
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Исполнители"
#Область Исполнители

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Исполнители.ТекущиеДанные;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		ТекущаяСтрока,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ПоказатьПредупреждение(, НРег("ru = 'Задача по текущей строке уже завершена, удаление невозможно.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(
		Элемент,
		Элементы.Исполнители.ТекущиеДанные.Исполнитель,
		Ложь, // ТолькоПростыеРоли
		Истина); // БезВнешнихРолей
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		
		Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда 
			ТекущаяСтрока = Объект.Исполнители.НайтиПоИдентификатору(Элементы.Исполнители.ТекущаяСтрока);
			ИндексСтроки = Объект.Исполнители.Индекс(ТекущаяСтрока);
			Если ИндексСтроки > 0 Тогда 
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = Объект.Исполнители[ИндексСтроки-1].ПорядокСогласования;
			Иначе
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;	
		КонецЕсли;
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ПредыдущийВариантСогласования = ВариантСогласованияПоследовательно Тогда
				Строка.ПорядокСогласования = ПорядокСогласованияПослеПредыдущего;
			ИначеЕсли ПредыдущийВариантСогласования = ВариантСогласованияПараллельно Тогда
				Строка.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

#КонецОбласти // Исполнители

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	Элементы.Предмет.Гиперссылка = Объект.Предмет <> Неопределено И Не Объект.Предмет.Пустая();
	ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	
	// результат согласования
	Инд = Объект.РезультатыОзнакомлений.Количество() - 1;
	Если Инд >= 0 Тогда 
		Если Объект.НомерИтерации = Объект.РезультатыОзнакомлений[Инд].НомерИтерации Тогда 
			
			ПараметрыОтбора = Новый Структура(
				"НомерИтерации, РезультатСогласования",
				Объект.НомерИтерации,
				Перечисления.РезультатыСогласования.НеСогласовано);
			РезультатНеСогласовано = Объект.РезультатыСогласования.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый Структура(
				"НомерИтерации, РезультатСогласования",
				Объект.НомерИтерации,
				Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			РезультатСогласованоСЗамечаниями = Объект.РезультатыСогласования.НайтиСтроки(ПараметрыОтбора);
			
			Если РезультатНеСогласовано.Количество() > 0 Тогда 
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Не согласовано'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			ИначеЕсли РезультатСогласованоСЗамечаниями.Количество() > 0 Тогда 
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Согласовано с замечаниями'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Иначе
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Согласовано'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
			
		Иначе
			Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'На согласовании'");
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
	Иначе
		Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'На согласовании'");
		Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(выполнялся %1)",
				НРег(БизнесПроцессыИЗадачиБольничнаяАптека.ДлительностьПроцесса(Объект.ДатаНачала, Объект.ДатаЗавершения)));
		Иначе
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(выполняется %1)",
				НРег(БизнесПроцессыИЗадачиБольничнаяАптека.ДлительностьПроцесса(Объект.ДатаНачала, ТекущаяДатаСеанса())));
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ГлавнаяЗадача = Неопределено Или Объект.ГлавнаяЗадача.Пустая() Тогда
		Элементы.ГлавнаяЗадача.Гиперссылка = Ложь;
		ГлавнаяЗадачаСтрокой = НСтр("ru = 'не задана'");
	Иначе
		ГлавнаяЗадачаСтрокой = Строка(Объект.ГлавнаяЗадача);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы") Тогда
		Элементы.ГлавнаяЗадача.Видимость = Ложь;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ОбновитьДоступностьПолейСостояния(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если Объект.Завершен Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ПодписыватьЭП.Доступность = ЭлектроннаяПодписьБольничнаяАптека.ИспользоватьЭлектронныеПодписи(Объект.Предмет);
	
	Если Объект.Стартован Тогда
		Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
			Элементы.Исполнители.ИзменятьСоставСтрок = Ложь;
			Элементы.Исполнители.ИзменятьПорядокСтрок = Ложь;
			Элементы.Подобрать.Доступность = Ложь;
			Элементы.ПереместитьВверх.Видимость = Ложь;
			Элементы.ПереместитьВниз.Видимость = Ложь;
		ИначеЕсли Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
			Элементы.Исполнители.ИзменятьПорядокСтрок = Ложь;
			Элементы.ПереместитьВверх.Видимость = Ложь;
			Элементы.ПереместитьВниз.Видимость = Ложь;
		КонецЕсли;
		Элементы.Предмет.ТолькоПросмотр = Истина;
		Элементы.ВариантСогласования.ТолькоПросмотр = Истина;
		Элементы.ЗаполнитьПоШаблону.Доступность = Ложь;
		Элементы.ПодписыватьЭП.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	
	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		Элементы.ПорядокСогласования.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	Иначе
		Элементы.ПорядокСогласования.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	Объект.Исполнители.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда 
		Элементы.СрокИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполнения.ТолькоПросмотр = Ложь;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		Элементы.Исполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
		Элементы.ВариантСогласования.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.ПереместитьВверх.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВниз.Доступность = ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Подобрать.Доступность = Истина;
		Элементы.ВариантСогласования.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьШаг(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Шаг = 0;
	КонецЦикла;
	
	КоличествоСтрок = Таблица.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		
		Строка = Таблица[Инд];
		Если Не ЗначениеЗаполнено(Строка.ПорядокСогласования) Тогда
			Прервать;
		КонецЕсли;
		
		Если Инд = 0 Тогда 
			Строка.Шаг = 1;
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяСтрока = Таблица[Инд-1];
		Если Строка.ПорядокСогласования = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим") Тогда
			Строка.Шаг = ПредыдущаяСтрока.Шаг;
		ИначеЕсли Строка.ПорядокСогласования = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего") Тогда
			Строка.Шаг = ПредыдущаяСтрока.Шаг + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШаблоныПоПредмету(Знач Предмет, Знач ТипШаблона, Знач ТолькоНастроенные = Истина)
	
	Возврат ШаблоныБизнесПроцессов.ПолучитьШаблоныПоПредмету(Предмет, ТипШаблона, ТолькоНастроенные)
	
КонецФункции

&НаКлиенте
Процедура ВыбратьШаблонБизнесПроцессаПриОткрытии()
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьШаблонБизнесПроцессаПриОткрытииЗавершение", ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(ТипЗнч(Объект.Шаблон), ШаблоныПоПредмету,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонБизнесПроцессаПриОткрытииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда 
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
	УстановитьДоступностьПоШаблону();
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтложенногоСтарта()
	
	Если ПроверитьЗаполнение() Тогда
		БизнесПроцессыИЗадачиКлиент.НастроитьОтложенныйСтарт(Объект.Ссылка, Объект.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтложенногоСтарта()
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ОбновитьДоступностьПолейСостояния(ЭтотОбъект);
	НастройкаФормБольничнаяАптека.ОбновитьСостояниеБизнесПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
