#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		ИмяФормы = "БизнесПроцесс.Согласование.Форма.ДействиеСогласовать";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		ИмяФормы = "БизнесПроцесс.Согласование.Форма.ДействиеОзнакомиться";
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// устанавливаем значения по умолчанию для пакетного выполнения задач
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "ПодписыватьЭП") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Задачу ""%1"" необходимо подписать ЭП. Выполнение возможно только из формы задачи.'"),
				ЗадачаСсылка);
		КонецЕсли;
		
		СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
		НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		СогласованиеОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
		
		Предмет = СогласованиеОбъект.Предмет;
		Если ЗначениеЗаполнено(Предмет) Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ОтправленоНаДоработку
			|ИЗ
			|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК РезультатыОзнакомлений
			|	ПО
			|		РезультатыСогласования.НомерИтерации = РезультатыОзнакомлений.НомерИтерации
			|		И РезультатыОзнакомлений.ЗадачаИсполнителя = &ЗадачаИсполнителя
			|ГДЕ
			|	РезультатыСогласования.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
			|";
			Запрос.УстановитьПараметр("ЗадачаИсполнителя", ЗадачаСсылка);
			Если Не Запрос.Выполнить().Пустой() Тогда
				БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "Закрыт");
			КонецЕсли;
			
		КонецЕсли;
		
		СогласованиеОбъект.ПовторитьСогласование = Ложь;
		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = Ложь;
		СогласованиеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	// Изменяем бизнес-процесс
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект = НоваяЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	Строка = БизнесПроцессОбъект.ДополнительныеИсполнители.Добавить();
	Если ЗначениеЗаполнено(НоваяЗадачаСсылка.Исполнитель) Тогда
		Строка.Исполнитель = НоваяЗадачаСсылка.Исполнитель;
	Иначе
		Строка.Исполнитель = НоваяЗадачаСсылка.РольИсполнителя;
	КонецЕсли;
	Строка.ОсновнойОбъектАдресации = НоваяЗадачаСсылка.ОсновнойОбъектАдресации;
	Строка.ДополнительныйОбъектАдресации = НоваяЗадачаСсылка.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Строка.ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
	Иначе
		Строка.ГруппаДоступаИсполнителей = Строка.Исполнитель;
	КонецЕсли;
	
	Если НоваяЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыОзнакомлений.НайтиСтроки(Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка));
	Иначе
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыСогласования.НайтиСтроки(Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка));
	КонецЕсли;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ЗадачаИсполнителя = НоваяЗадачаСсылка;
	КонецЦикла;
	
	БизнесПроцессОбъект.Записать();
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения =
		БизнесПроцессыИЗадачиБольничнаяАптека.РезультатВыполненияПриПеренаправлении(ЗадачаОбъект)
		+ ЗадачаОбъект.РезультатВыполнения;
	ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
	ЗадачаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "Автор"));
	
	Возврат МассивПользователей;
	
КонецФункции

// Добавляет команду создания на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Команда = КомандыСоздатьНаОсновании.Добавить();
	Команда.Менеджер      = ПустаяСсылка().Метаданные().ПолноеИмя();
	Команда.Представление = НСтр("ru = 'Согласовать'");
	Команда.Подменю       = "ПодменюБизнесПроцессы";
	Команда.ПараметрыФормы = Новый Структура;
	Команда.ПараметрыФормы.Вставить("ЗакрытьФормуВладельцаПоИмени");
	
	Возврат Команда;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Согласование
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.Исполнители КАК ТаблицаИсполнители
	|ПО
	|	ТаблицаИсполнители.Ссылка = Согласование.Ссылка
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ПО
	|	ИсполнителиЗадач.РольИсполнителя = ТаблицаИсполнители.Исполнитель
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = ТаблицаИсполнители.ОсновнойОбъектАдресации
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ТаблицаИсполнители.ДополнительныйОбъектАдресации
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.ДополнительныеИсполнители КАК ТаблицаДополнительныеИсполнители
	|ПО
	|	ТаблицаДополнительныеИсполнители.Ссылка = Согласование.Ссылка
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ДополнительныеИсполнителиЗадач
	|ПО
	|	ДополнительныеИсполнителиЗадач.РольИсполнителя = ТаблицаДополнительныеИсполнители.Исполнитель
	|	И ДополнительныеИсполнителиЗадач.ОсновнойОбъектАдресации = ТаблицаДополнительныеИсполнители.ОсновнойОбъектАдресации
	|	И ДополнительныеИсполнителиЗадач.ДополнительныйОбъектАдресации = ТаблицаДополнительныеИсполнители.ДополнительныйОбъектАдресации
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|		ИЛИ ЧтениеОбъектаРазрешено(Предмет КРОМЕ Задача.ЗадачаИсполнителя, Неопределено КАК Истина, Задача.ЗадачаИсполнителя КАК Истина)
	|		И(
	|				ЗначениеРазрешено(ТаблицаИсполнители.Исполнитель КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(ИсполнителиЗадач.Исполнитель)
	|			ИЛИ ЗначениеРазрешено(ТаблицаДополнительныеИсполнители.Исполнитель КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(ДополнительныеИсполнителиЗадач.Исполнитель)
	|		)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ЛистСогласования", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ЛистСогласования.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ЛистСогласования);
	ПечатнаяФорма.Параметризуемая = Истина;
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатьЛистСогласования(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Запрос = Новый Запрос;
	Если ПараметрыПечати.Свойство("Задача") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Согласование.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(Ознакомление.НомерИтерации, Согласование.НомерИтерации) КАК НомерИтерации
		|ПОМЕСТИТЬ втНомераИтераций
		|ИЗ
		|	БизнесПроцесс.Согласование КАК Согласование
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК Ознакомление
		|	ПО
		|		Согласование.Ссылка = Ознакомление.Ссылка
		|		И Ознакомление.ЗадачаИсполнителя = &Задача
		|ГДЕ
		|	Согласование.Ссылка = &БизнесПроцесс
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыСогласования.Ссылка КАК Ссылка,
		|	РезультатыСогласования.Ссылка.Предмет КАК Предмет,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РезультатыСогласования.ЗадачаИсполнителя.Исполнитель) = ТИП(Справочник.Пользователи)
		|				И РезультатыСогласования.ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА РезультатыСогласования.ЗадачаИсполнителя.Исполнитель
		|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|				+ "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "", ""
		|				+ РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации.Наименование + "")""
		|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|				+ "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "")""
		|		ИНАЧЕ """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|	КОНЕЦ КАК Исполнитель,
		|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	"""" КАК Должность,
		|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		втНомераИтераций КАК втНомераИтераций
		|	ПО
		|		РезультатыСогласования.Ссылка = втНомераИтераций.Ссылка
		|		И РезультатыСогласования.НомерИтерации = втНомераИтераций.НомерИтерации
		|ГДЕ
		|	РезультатыСогласования.Ссылка = &БизнесПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИсполнения
		|ИТОГИ ПО
		|	Ссылка
		|";
		
		БизнесПроцесс = МассивОбъектов[0];
		Задача = ПараметрыПечати.Задача;
		
		Запрос.Параметры.Вставить("БизнесПроцесс", БизнесПроцесс);
		Запрос.Параметры.Вставить("Задача", Задача);
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РезультатыСогласования.Ссылка КАК Ссылка,
		|	РезультатыСогласования.Ссылка.Предмет КАК Предмет,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РезультатыСогласования.ЗадачаИсполнителя.Исполнитель) = ТИП(Справочник.Пользователи)
		|				И РезультатыСогласования.ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА РезультатыСогласования.ЗадачаИсполнителя.Исполнитель
		|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|				+ "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "", ""
		|				+ РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации.Наименование + "")""
		|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|				+ "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "")""
		|		ИНАЧЕ """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
		|	КОНЕЦ КАК Исполнитель,
		|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	"""" КАК Должность,
		|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|ГДЕ
		|	РезультатыСогласования.Ссылка В(&МассивОбъектов)
		|	И РезультатыСогласования.НомерИтерации = РезультатыСогласования.Ссылка.НомерИтерации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИсполнения
		|ИТОГИ ПО
		|	Ссылка
		|";
		
		Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Предмет = Выборка.Предмет;
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбластьШапка.Параметры.Предмет = ОбщегоНазначения.ПредметСтрокой(Предмет);
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
		ВыборкаИсполнители = Выборка.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			ОбластьИсполнители.Параметры.Заполнить(ВыборкаИсполнители);
			ТабличныйДокумент.Вывести(ОбластьИсполнители);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти // Печать

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли