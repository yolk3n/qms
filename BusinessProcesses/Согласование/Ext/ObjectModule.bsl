#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеИсполнители, ПараметрыЗаписи) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления
		|	И Задачи.Выполнена
		|";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
				Если ЗначениеЗаполнено(Предмет) Тогда
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования ""%1""'"),
						Строка(Предмет));
				Иначе
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования: %1'"),
						Наименование);
				КонецЕсли;
			Иначе
				НаименованиеЗадачи = Наименование;
				СрокИсполненияЗадачи = СрокИсполнения;
				
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи
			   И ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачи
			   И ЗадачаОбъект.Важность = Важность
			   И ЗадачаОбъект.Описание = Описание
			   И ЗадачаОбъект.Автор = Автор Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.Наименование   = НаименованиеЗадачи;
			ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачи;
			ЗадачаОбъект.Важность       = Важность;
			ЗадачаОбъект.Описание       = Описание;
			ЗадачаОбъект.Автор          = Автор;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		// обновление исполнителей
		ДобавленныеСтроки = Новый Массив;
		УдаленныеСтроки   = Новый Массив;
		ИзмененныеСтроки  = Новый Массив;
		
		КоличествоСтрок = СтарыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда
				СтарыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		НовыеИсполнители = Исполнители.Выгрузить();
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = НовыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Тогда
				НовыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 0 По КоличествоСтрок-1 Цикл
			Строка = НовыеИсполнители[Инд];
			
			Если Инд > 0 Тогда
				ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
			Иначе
				ПредыдущаяСтрока = Неопределено;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда
				
				Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
					ДобавленныеСтроки.Добавить(Строка);
				ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно
						И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
					
					Если ПредыдущаяСтрока = Неопределено 
					 Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя)
					 Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда
					
						ДобавленныеСтроки.Добавить(Строка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из НовыеИсполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель
				Или Строка.ОсновнойОбъектАдресации <> НайденнаяСтрока.ОсновнойОбъектАдресации
				Или Строка.ДополнительныйОбъектАдресации <> НайденнаяСтрока.ДополнительныйОбъектАдресации Тогда
				ИзмененныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из СтарыеИсполнители Цикл
			НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда
				УдаленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		// добавленные строки
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗаполнитьЗадачуСогласовать(Задача, Строка);
			Задача.Записать();
			
			НайденнаяСтрока = Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			КонецЕсли;
			
			НоваяСтрока = РезультатыСогласования.Добавить();
			НоваяСтрока.НомерИтерации = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда
			Записать();
		КонецЕсли;
		
		// измененные строки
		Для Каждого Строка Из ИзмененныеСтроки Цикл
			Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
				Задача.РольИсполнителя = Неопределено;
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			Иначе
				Задача.Исполнитель = Неопределено;
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			Задача.Записать();
		КонецЦикла;
		
		// удаленные строки
		Если УдаленныеСтроки.Количество() > 0 Тогда
			
			Для Каждого Строка Из УдаленныеСтроки Цикл
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ВыполнитьЗадачу();
				Задача.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			Прочитать();
			
			Для Каждого Строка Из УдаленныеСтроки Цикл
				НайденнаяСтрока = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатыСогласования.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Шаблон = ШаблонБизнесПроцесса;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// срок исполнения
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения)
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения * 24 * 3600 + ШаблонБизнесПроцесса.СрокИсполненияЧас * 3600;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения * 24 * 3600;
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП И ЭлектроннаяПодписьБольничнаяАптека.ИспользоватьЭлектронныеПодписи(Предмет);
	КонецЕсли;
	
	ВариантСогласования = ШаблонБизнесПроцесса.ВариантСогласования;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда
		Исполнители.Очистить();
	КонецЕсли;
	
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если ШаблонБизнесПроцесса.ИспользоватьУсловия И ЗначениеЗаполнено(Строка.Условие) Тогда
			Если Не Справочники.УсловияМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Строка.Условие) Тогда
				Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
			
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
		   И НоваяСтрока.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании предмета
//
Процедура ЗаполнитьПоПредмету(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	
	СтандартнаяОбработка = Истина;
	
	Параметры = Новый Массив(3);
	Параметры[0] = ЭтотОбъект;
	Параметры[1] = Предмет;
	Параметры[2] = СтандартнаяОбработка;
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПредмета, "ПриЗаполненииБизнесПроцессаСогласование", Параметры);
	
	СтандартнаяОбработка = Параметры[2];
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Предмет.Ссылка           КАК Предмет,
	|	&СрокИсполнения          КАК СрокИсполнения,
	|	&Важность                КАК Важность,
	|	&Статус                  КАК Статус,
	|	&ЕстьОшибкиСтатус        КАК ЕстьОшибкиСтатус,
	|	&ЕстьОшибкиПроведен      КАК ЕстьОшибкиПроведен,
	|	Предмет.ПометкаУдаления  КАК ЕстьОшибкиПометкаУдаления
	|ИЗ
	|	#Предмет КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Предмет
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет"           , Предмет);
	Запрос.УстановитьПараметр("СрокИсполнения"    , '00010101');
	Запрос.УстановитьПараметр("Важность"          , Перечисления.ВариантыВажностиЗадачи.Обычная);
	Запрос.УстановитьПараметр("Статус"            , Неопределено);
	Запрос.УстановитьПараметр("ЕстьОшибкиСтатус"  , Ложь);
	Запрос.УстановитьПараметр("ЕстьОшибкиПроведен", Ложь);
	
	МетаданныеПредмета = Предмет.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Предмет", МетаданныеПредмета.ПолноеИмя());
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаСогласования", МетаданныеПредмета) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СрокИсполнения", "Предмет.ДатаСогласования");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Приоритет", МетаданныеПредмета)
	   И МетаданныеПредмета.Реквизиты.Приоритет.Тип.СодержитТип(Тип("СправочникСсылка.Приоритеты")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Важность", "
		|	ВЫБОР
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Обычная)
		|	КОНЕЦ");
	КонецЕсли;
	
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет);
	ДопустимыеСтатусы = Новый Массив;
	Если ИспользоватьСтатусы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "Предмет.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиСтатус", "
		|	ВЫБОР
		|		КОГДА Предмет.Статус В (&ДопустимыеСтатусы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		СтатусыПредмета = Перечисления[Метаданные.НайтиПоТипу(МетаданныеПредмета.Реквизиты.Статус.Тип.Типы()[0]).Имя];
		ДопустимыеСтатусы.Добавить(СтатусыПредмета.НеСогласован);
		Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета)
	   И МетаданныеПредмета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиПроведен", "НЕ Предмет.Проведен");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		ИспользоватьСтатусы И Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	Если Выборка.ЕстьОшибкиПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Предмет %Предмет% помечен на удаление. Ввод на основании помеченного на удаление предмета невозможен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%", Предмет);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыСогласования.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДополнительныеИсполнители.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатСогласования = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ИнициализироватьБизнесПроцесс();
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Предмет = ДанныеЗаполнения.Предмет;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьБизнесПроцессПоОтбору(ДанныеЗаполнения);
	Иначе
		Предмет = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		ЗаполнитьПоПредмету(Предмет);
		
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Согласовать ""%1""'"),
			Строка(Предмет));
		
	Иначе
		Наименование = НСтр("ru = 'Согласовать'") + " ";
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокСогласования");
	КонецЕсли;
	
	Для Каждого Строка Из Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Строка.Исполнитель.ВнешняяРоль Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Внешняя роль не может быть использована в данном поле.'"),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Исполнители", Строка.НомерСтроки, "Исполнитель"),
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Исполнители Цикл
		Если Не БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					Строка.Исполнитель,
					Строка.ОсновнойОбъектАдресации,
					Строка.ДополнительныйОбъектАдресации,
					"Исполнители",
					"Исполнитель",
					Строка.НомерСтроки - 1) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	// Проверка возможности снятия пометки удаления
	Если Стартован И Не Завершен И Не ПометкаУдаления И ПредыдущаяПометкаУдаления Тогда
		
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
			Предмет, Ссылка);
		
	КонецЕсли;
	
	// Исполнители (табличная часть)
	Для каждого Элемент Из Исполнители Цикл
		Если ТипЗнч(Элемент.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Элемент.ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
				Элемент.Исполнитель,
				Элемент.ОсновнойОбъектАдресации,
				Элемент.ДополнительныйОбъектАдресации);
		Иначе
			Элемент.ГруппаДоступаИсполнителей = Элемент.Исполнитель;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если ГлавнаяЗадача.БизнесПроцесс = Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута
#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	ДатаНачала = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "НаСогласовании");
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьСогласование = Ложь;
	Для Каждого Строка Из Исполнители Цикл
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;
	Записать();
	
КонецПроцедуры

Процедура СогласоватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Новый Массив;
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок.Добавить(Строка);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Если Строки.Количество() > 0 Тогда
			МассивСтрок.Добавить(Строки[0]);
		КонецЕсли;
		
		Для Инд = 1 По Строки.ВГраница() Цикл
			Если Строки[Инд].ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
				МассивСтрок.Добавить(Строки[Инд]);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуСогласовать(Задача, Строка);
		
		Задача.Записать();
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = Задача.Ссылка;
		НоваяСтрока = РезультатыСогласования.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура СогласоватьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловиеОбходЗавершен(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Результат = Истина;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;
				
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				ЕстьНеСогласовано = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Или ЕстьНеСогласовано Тогда
			Результат = Истина;
			Возврат;
		КонецЕсли;
		
		Результат = Ложь;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Тогда
			Результат = Истина;
			Возврат;
		КонецЕсли;
			
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего И ЕстьНеСогласовано Тогда 
				Результат = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				ЕстьНеСогласовано = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат согласования
	Если РезультатыСогласования.Количество() > 0 Тогда
		
		РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		Для Каждого Элемент Из РезультатыСогласования Цикл
			Если Элемент.НомерИтерации = НомерИтерации Тогда
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Записать();
	
	ПредметСогласован = (РезультатСогласования <> Перечисления.РезультатыСогласования.НеСогласовано);
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, ?(ПредметСогласован, "Согласован", "НеСогласован"));
	
	Если ЗначениеЗаполнено(Предмет) И Не ПредметСогласован И ПодписыватьЭП Тогда
		ЭлектроннаяПодписьБольничнаяАптека.УдалитьПодписиПредмета(Предмет)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// для вложенного бизнес-процесса
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	Задача.Записать();
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации     = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
	Записать();
	
КонецПроцедуры

Процедура ПовторитьСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьСогласование;
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

#КонецОбласти // КартаМаршрута

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьБизнесПроцесс()

	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	НомерИтерации = 0;
	ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = ДанныеЗаполнения.Предмет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Процедура ЗаполнитьЗадачуСогласовать(Задача, Строка)
	
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Автор    = Автор;
	Задача.Описание = Описание;
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.Наименование  = Наименование;
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
	Иначе
		Задача.РольИсполнителя = Строка.Исполнитель;
		Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	Задача.СрокИсполнения = СрокИсполнения;
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Автор    = Автор;
	Задача.Описание = Описание;
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.Исполнитель 	  = Автор;
	Задача.СрокИсполнения = '00010101'; 
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться;
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом согласования ""%1""'"),
			Строка(Предмет));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом согласования: %1'"),
			Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:                Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	// Добавления, Изменения: Автор
	
	// Реквизит ГруппаДоступаИсполнителей содержит либо "Исполнителя" либо 
	// "СправочникСсылка.ГруппыДоступаИсполнителей"
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор №2.
	ТекущийНомерНабора = 2;
	Для каждого Элемент Из Исполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	// Чтение:
	Для каждого Элемент Из ДополнительныеИсполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(
		ЭтотОбъект,
		Таблица,
		ТекущийНомерНабора);
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Если УправлениеДоступом.ВозможноЗаполнитьНаборыЗначенийДоступа(Предмет) Тогда
			
			НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
			НаборыПредмета = НаборыПредмета.Скопировать(НаборыПредмета.НайтиСтроки(Новый Структура("Чтение", Истина)));
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли