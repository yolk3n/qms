#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	ИмяФормы = "БизнесПроцесс.ОбработкаВнутреннегоДокумента.Форма.ФормаВедущейЗадачи";
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	ВызватьИсключение НСтр("ru='Интерактивное выполнение задачи запрещено.'");
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	ВызватьИсключение НСтр("ru='Перенаправление задачи запрещено.'");
	
КонецПроцедуры

// Проверяет корректность заполнения шаблона бизнес-процесса
//
Функция ПроверитьШаблон(СтруктураРеквизитов) Экспорт
	
	Ошибки = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонСогласования"])
	   И Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонУтверждения"])
	   И Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонРегистрации"])
	   И Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонРассмотрения"])
	   И Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонИсполненияОзнакомления"])
	   И Не ЗначениеЗаполнено(СтруктураРеквизитов["ШаблонПоручения"]) Тогда
		
		Ошибки.Добавить("", НСтр("ru = 'Не указано ни одного шаблона подчиненных бизнес-процессов'"));
		
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "Автор"));
	
	Возврат МассивПользователей;
	
КонецФункции

// Добавляет команду создания на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Команда= КомандыСоздатьНаОсновании.Добавить();
	Команда.Менеджер       = ПустаяСсылка().Метаданные().ПолноеИмя();
	Команда.Представление  = НСтр("ru = 'Запустить составной бизнес-процесс'");
	Команда.Подменю        = "ПодменюБизнесПроцессы";
	Команда.ПараметрыФормы = Новый Структура;
	Команда.ПараметрыФормы.Вставить("ЗакрытьФормуВладельцаПоИмени");
	
	Возврат Команда;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|	ИЛИ ЧтениеОбъектаРазрешено(Предмет КРОМЕ Задача.ЗадачаИсполнителя, Неопределено КАК Истина, Задача.ЗадачаИсполнителя КАК Истина)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли