#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьПоШаблонуСоставногоБизнесПроцесса(ШаблонБизнесПроцесса, ЭтотОбъект);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании предмета
//
Процедура ЗаполнитьПоПредмету(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, БизнесПроцессы.Согласование.ПустаяСсылка());
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, БизнесПроцессы.Исполнение.ПустаяСсылка());
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	
	СтандартнаяОбработка = Истина;
	
	Параметры = Новый Массив(3);
	Параметры[0] = ЭтотОбъект;
	Параметры[1] = Предмет;
	Параметры[2] = СтандартнаяОбработка;
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПредмета, "ПриЗаполненииБизнесПроцессаОбработкаВнутреннегоДокумента", Параметры);
	
	СтандартнаяОбработка = Параметры[2];
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Предмет.Ссылка           КАК Предмет,
	|	&СрокИсполнения          КАК СрокИсполнения,
	|	&Важность                КАК Важность,
	|	&Статус                  КАК Статус,
	|	&ЕстьОшибкиСтатус        КАК ЕстьОшибкиСтатус,
	|	&ЕстьОшибкиПроведен      КАК ЕстьОшибкиПроведен,
	|	Предмет.ПометкаУдаления  КАК ЕстьОшибкиПометкаУдаления
	|ИЗ
	|	#Предмет КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Предмет
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет"           , Предмет);
	Запрос.УстановитьПараметр("СрокИсполнения"    , '00010101');
	Запрос.УстановитьПараметр("Важность"          , Перечисления.ВариантыВажностиЗадачи.Обычная);
	Запрос.УстановитьПараметр("Статус"            , Неопределено);
	Запрос.УстановитьПараметр("ЕстьОшибкиСтатус"  , Ложь);
	Запрос.УстановитьПараметр("ЕстьОшибкиПроведен", Ложь);
	
	МетаданныеПредмета = Предмет.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Предмет", МетаданныеПредмета.ПолноеИмя());
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Приоритет", МетаданныеПредмета)
	   И МетаданныеПредмета.Реквизиты.Приоритет.Тип.СодержитТип(Тип("СправочникСсылка.Приоритеты")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Важность", "
		|	ВЫБОР
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Обычная)
		|	КОНЕЦ");
	КонецЕсли;
	
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет);
	ДопустимыеСтатусы = Новый Массив;
	Если ИспользоватьСтатусы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "Предмет.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиСтатус", "
		|	ВЫБОР
		|		КОГДА Предмет.Статус В (&ДопустимыеСтатусы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		СтатусыПредмета = Перечисления[Метаданные.НайтиПоТипу(МетаданныеПредмета.Реквизиты.Статус.Тип.Типы()[0]).Имя];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтатусыПредмета, "НеСогласован") Тогда
			ДопустимыеСтатусы.Добавить(СтатусыПредмета.НеСогласован);
		КонецЕсли;
		Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета)
	   И МетаданныеПредмета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиПроведен", "НЕ Предмет.Проведен");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		ИспользоватьСтатусы И Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	Если Выборка.ЕстьОшибкиПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Предмет %Предмет% помечен на удаление. Ввод на основании помеченного на удаление предмета невозможен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%", Предмет);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьБизнесПроцесс();
	
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ИнициализироватьБизнесПроцесс();
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Предмет = ДанныеЗаполнения.Предмет;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьБизнесПроцессПоОтбору(ДанныеЗаполнения);
	Иначе
		Предмет = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		ЗаполнитьПоПредмету(Предмет);
		
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка ""%1""'"), Строка(Предмет));
		
	Иначе
		Наименование = НСтр("ru = 'Обработка'") + " ";
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТипЗначенияПредмета = ТипЗнч(Предмет);
	
	Если ТипЗначенияПредмета = Тип("ДокументСсылка.ТребованиеОтделения") Тогда
		
		ПроверяемыеРеквизиты.Добавить("ШаблонСогласования");
		ПроверяемыеРеквизиты.Добавить("ШаблонИсполнения");
		
	ИначеЕсли ТипЗначенияПредмета = Тип("ДокументСсылка.ФормулярныйСписокНоменклатуры") Тогда
		
		ПроверяемыеРеквизиты.Добавить("ШаблонСогласования");
		ПроверяемыеРеквизиты.Добавить("ШаблонУтверждения");
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ШаблонСогласования)
		   И Не ЗначениеЗаполнено(ШаблонИсполнения) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано ни одного шаблона подчиненных бизнес-процессов.'"),,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСогласования) Тогда
		Если ШаблонСогласования.Исполнители.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В шаблоне согласования не указаны исполнители.'"),
				ЭтотОбъект,
				"ШаблонСогласования",
				,
				Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из ШаблонСогласования.Исполнители Цикл
			ПредметДоступенПользователю =
				БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					Строка.Исполнитель,
					Строка.ОсновнойОбъектАдресации,
					Строка.ДополнительныйОбъектАдресации,
					"ШаблонСогласования");
			Если Не ПредметДоступенПользователю Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонУтверждения) Тогда
		Если Не ЗначениеЗаполнено(ШаблонУтверждения.Исполнитель) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В шаблоне утверждения не указан исполнитель.'"),
				ЭтотОбъект,
				"ШаблонУтверждения",
				,
				Отказ);
		Иначе
			ПредметДоступенПользователю =
				БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					ШаблонУтверждения.Исполнитель,
					ШаблонУтверждения.ОсновнойОбъектАдресации,
					ШаблонУтверждения.ДополнительныйОбъектАдресации,
					"ШаблонУтверждения");
			Если Не ПредметДоступенПользователю Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонИсполнения) Тогда
		Если ШаблонИсполнения.Исполнители.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В шаблоне исполнения не указаны исполнители.'"), ЭтотОбъект, "ШаблонИсполнения",,Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из ШаблонИсполнения.Исполнители Цикл
			ПредметДоступенПользователю =
				БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					Строка.Исполнитель,
					Строка.ОсновнойОбъектАдресации,
					Строка.ДополнительныйОбъектАдресации,
					"ШаблонИсполнения");
			Если Не ПредметДоступенПользователю Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияПредмета = Тип("ДокументСсылка.ТребованиеОтделения")
		   И Не ЗначениеЗаполнено(ШаблонИсполнения.Проверяющий) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В шаблоне исполнения не указан проверяющий.'"), ЭтотОбъект, "ШаблонИсполнения",,Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонИсполнения.Проверяющий) Тогда
			ПредметДоступенПользователю =
				БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					ШаблонИсполнения.Проверяющий,
					ШаблонИсполнения.ОсновнойОбъектАдресацииПроверяющего,
					ШаблонИсполнения.ДополнительныйОбъектАдресацииПроверяющего,
					"ШаблонИсполнения");
			Если Не ПредметДоступенПользователю Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонИсполнения.Контролер) Тогда
			ПредметДоступенПользователю =
				БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ЭтотОбъект,
					Предмет,
					"Чтение",
					ШаблонИсполнения.Контролер,
					ШаблонИсполнения.ОсновнойОбъектАдресацииКонтролера,
					ШаблонИсполнения.ДополнительныйОбъектАдресацииКонтролера,
					"ШаблонИсполнения");
			Если Не ПредметДоступенПользователю Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	// Проверка возможности снятия пометки удаления
	Если Стартован И Не Завершен И Не ПометкаУдаления И ПредыдущаяПометкаУдаления Тогда
		
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
			Предмет, Ссылка);
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
			Предмет, БизнесПроцессы.Согласование.ПустаяСсылка());
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
			Предмет, БизнесПроцессы.Исполнение.ПустаяСсылка());
		
	КонецЕсли;
	
	Если ГлавнаяЗадача.БизнесПроцесс = Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута
#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, БизнесПроцессы.Согласование.ПустаяСсылка());
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, БизнесПроцессы.Исполнение.ПустаяСсылка());
		
	ДатаНачала = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

// согласование
Процедура НаСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗначениеЗаполнено(ШаблонСогласования);
	
КонецПроцедуры

Процедура СогласованиеПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	СогласованиеОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
	СогласованиеОбъект.Дата = ТекущаяДатаСеанса();
	СогласованиеОбъект.Автор = Автор;
	СогласованиеОбъект.Предмет = Предмет;
	СогласованиеОбъект.ЗаполнитьПоШаблону(ШаблонСогласования);
	СогласованиеОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 ""%2""'"), 
		?(ПустаяСтрока(СогласованиеОбъект.Наименование), "Согласовать", СогласованиеОбъект.Наименование),
		Строка(Предмет));
	
	Если Не СогласованиеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось заполнить обязательные поля процесса согласования по шаблону.'");
	КонецЕсли;
	
	ФормируемыеБизнесПроцессы.Добавить(СогласованиеОбъект);
	
КонецПроцедуры

Процедура ПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Для Каждого БизнесПроцесс Из ФормируемыеБизнесПроцессы Цикл
		БизнесПроцесс.ГлавнаяЗадача = БизнесПроцесс.ВедущаяЗадача;
	КонецЦикла;
	
КонецПроцедуры

Процедура СогласованиеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ведущая задача - Согласовать ""%1""'"),
			Строка(Предмет));
		Задача.Автор = Автор;
	КонецЦикла;
	
КонецПроцедуры

Процедура СогласованПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если Не ЗначениеЗаполнено(ШаблонСогласования) Тогда
		Результат = Истина;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	БизнесПроцесс.Согласование КАК Согласование
		|ГДЕ
		|	Согласование.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
		|	И Согласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.НеСогласовано)
		|";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецПроцедуры

// исполнение
Процедура НаУтверждениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗначениеЗаполнено(ШаблонУтверждения);
	
КонецПроцедуры

Процедура УтверждениеПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	УтверждениеОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
	УтверждениеОбъект.Дата = ТекущаяДатаСеанса();
	УтверждениеОбъект.Автор = Автор;
	УтверждениеОбъект.Предмет = Предмет;
	УтверждениеОбъект.ЗаполнитьПоШаблону(ШаблонУтверждения);
	УтверждениеОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 ""%2""'"),
		?(ПустаяСтрока(УтверждениеОбъект.Наименование), "Утвердить", УтверждениеОбъект.Наименование),
		Строка(Предмет));
	
	Если Не УтверждениеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось заполнить обязательные поля процесса утверждения по шаблону.'");
	КонецЕсли;
	
	ФормируемыеБизнесПроцессы.Добавить(УтверждениеОбъект);
	
КонецПроцедуры

Процедура УтверждениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ведущая задача - Утвердить ""%1""'"),
			Строка(Предмет));
		Задача.Автор = Автор;
	КонецЦикла;
	
КонецПроцедуры

Процедура УтвержденПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если Не ЗначениеЗаполнено(ШаблонУтверждения) Тогда
		Результат = Истина;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	БизнесПроцесс.Утверждение КАК Утверждение
		|ГДЕ
		|	Утверждение.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
		|	И Утверждение.РезультатУтверждения = ЗНАЧЕНИЕ(Перечисление.РезультатыУтверждения.НеУтверждено)
		|";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецПроцедуры

// исполнение
Процедура НаИсполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗначениеЗаполнено(ШаблонИсполнения);
	
КонецПроцедуры

Процедура ИсполнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ведущая задача - Исполнить ""%1""'"),
			Строка(Предмет));
		Задача.Автор = Автор;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсполнениеПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	НаименованиеПоУмолчанию = НСтр("ru = 'Исполнить'");
	
	ИсполнениеОбъект.Дата = ТекущаяДатаСеанса();
	ИсполнениеОбъект.Автор = Автор;
	ИсполнениеОбъект.Предмет = Предмет;
	ИсполнениеОбъект.ЗаполнитьПоШаблону(ШаблонИсполнения);
	ИсполнениеОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 ""%2""'"),
		?(ПустаяСтрока(ИсполнениеОбъект.Наименование), НаименованиеПоУмолчанию, ИсполнениеОбъект.Наименование),
		Строка(Предмет));
	
	Если Не ИсполнениеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось заполнить обязательные поля процесса исполнения по шаблону.'");
	КонецЕсли;
	
	ФормируемыеБизнесПроцессы.Добавить(ИсполнениеОбъект);
	
КонецПроцедуры

#КонецОбласти // КартаМаршрута

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьБизнесПроцесс()
	
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоОтбору(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = ДанныеЗаполнения.Предмет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ТекущийНомерНабора = 1;
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = ТекущийНомерНабора;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	ТекущийНомерНабора = ТекущийНомерНабора + 1;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(
		ЭтотОбъект,
		Таблица,
		ТекущийНомерНабора);
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Если УправлениеДоступом.ВозможноЗаполнитьНаборыЗначенийДоступа(Предмет) Тогда
			
			НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
			НаборыПредмета = НаборыПредмета.Скопировать(НаборыПредмета.НайтиСтроки(Новый Структура("Чтение", Истина)));
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли