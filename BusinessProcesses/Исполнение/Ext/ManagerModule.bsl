#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ДействиеИсполнить";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ДействиеОтветственноеИсполнение";	
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ДействиеКонтролировать";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ДействиеПроверить";
		
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Предмет");
		БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "Закрыт");
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	// Изменяем бизнес-процесс
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	Строка = БизнесПроцессОбъект.ДополнительныеИсполнители.Добавить();
	Если ЗначениеЗаполнено(ЗадачаСсылка.Исполнитель) Тогда
		Строка.Исполнитель = ЗадачаСсылка.Исполнитель;
	Иначе
		Строка.Исполнитель = ЗадачаСсылка.РольИсполнителя;
	КонецЕсли;
	Строка.ОсновнойОбъектАдресации = ЗадачаСсылка.ОсновнойОбъектАдресации;
	Строка.ДополнительныйОбъектАдресации = ЗадачаСсылка.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Строка.ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
	Иначе
		Строка.ГруппаДоступаИсполнителей = Строка.Исполнитель;
	КонецЕсли;
	
	Если НоваяЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или НоваяЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыИсполнения.НайтиСтроки(Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗадачаИсполнителя = НоваяЗадачаСсылка;
		КонецЦикла;
		
	ИначеЕсли НоваяЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыПроверки.НайтиСтроки(Новый Структура("ЗадачаПроверяющего", ЗадачаСсылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗадачаПроверяющего = НоваяЗадачаСсылка;
		КонецЦикла;
		
	КонецЕсли;
	
	БизнесПроцессОбъект.Записать();
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения =
		БизнесПроцессыИЗадачиБольничнаяАптека.РезультатВыполненияПриПеренаправлении(ЗадачаОбъект)
		+ ЗадачаОбъект.РезультатВыполнения;
	ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
	ЗадачаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "Автор"));
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "ГруппаДоступаКонтролера"));
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "ГруппаДоступаПроверяющего"));
			
	Возврат МассивПользователей;
	
КонецФункции

// Добавляет команду создания на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Команда = КомандыСоздатьНаОсновании.Добавить();
	Команда.Менеджер       = ПустаяСсылка().Метаданные().ПолноеИмя();
	Команда.Представление  = НСтр("ru = 'Исполнить'");
	Команда.Подменю        = "ПодменюБизнесПроцессы";
	Команда.ПараметрыФормы = Новый Структура;
	Команда.ПараметрыФормы.Вставить("ЗакрытьФормуВладельцаПоИмени");
	
	Возврат Команда;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	//Ограничение.Текст = "";
	//Возврат;
	Ограничение.Текст = 
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Исполнение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Исполнители КАК ТаблицаИсполнители
	|ПО
	|	ТаблицаИсполнители.Ссылка = Исполнение.Ссылка
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ПО
	|	ИсполнителиЗадач.РольИсполнителя = ТаблицаИсполнители.Исполнитель
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = ТаблицаИсполнители.ОсновнойОбъектАдресации
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ТаблицаИсполнители.ДополнительныйОбъектАдресации
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК КонтролерыЗадач
	|ПО
	|	КонтролерыЗадач.РольИсполнителя = Исполнение.Контролер
	|	И КонтролерыЗадач.ОсновнойОбъектАдресации = Исполнение.ОсновнойОбъектАдресацииКонтролера
	|	И КонтролерыЗадач.ДополнительныйОбъектАдресации = Исполнение.ДополнительныйОбъектАдресацииКонтролера
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ПроверяющиеЗадач
	|ПО
	|	ПроверяющиеЗадач.РольИсполнителя = Исполнение.Проверяющий
	|	И ПроверяющиеЗадач.ОсновнойОбъектАдресации = Исполнение.ОсновнойОбъектАдресацииПроверяющего
	|	И ПроверяющиеЗадач.ДополнительныйОбъектАдресации = Исполнение.ДополнительныйОбъектАдресацииПроверяющего
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|		ИЛИ ЧтениеОбъектаРазрешено(Предмет КРОМЕ Задача.ЗадачаИсполнителя, Неопределено КАК Истина, Задача.ЗадачаИсполнителя КАК Истина)
	|		И(
	|				ЗначениеРазрешено(Контролер КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(КонтролерыЗадач.Исполнитель)
	|			ИЛИ ЗначениеРазрешено(Проверяющий КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(ПроверяющиеЗадач.Исполнитель)
	|			ИЛИ ЗначениеРазрешено(ТаблицаИсполнители.Исполнитель КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(ИсполнителиЗадач.Исполнитель)
	|		)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли