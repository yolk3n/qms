#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
				Если ЗначениеЗаполнено(Предмет) Тогда 
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать исполнение ""%1""'"),
						Строка(Предмет));
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать: %1'"),
						Наименование);
				КонецЕсли;
					
				ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать:'") + " " + Описание, Описание);
				ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
				Если ЗначениеЗаполнено(Предмет) Тогда 
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверить исполнение ""%1""'"),
						Строка(Предмет));
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверить: %1'"), 
						Наименование);
				КонецЕсли;
				
				ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Проверить:'") + " " + Описание, Описание);
				ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
				ЗадачаОбъект.Наименование = Наименование + " " + НСтр("ru = '(ответственный исполнитель)'");
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(НайденнаяСтрока.Описание), НайденнаяСтрока.Описание, Описание);
					ЗадачаОбъект.СрокИсполнения = ?(
						ЗначениеЗаполнено(НайденнаяСтрока.СрокИсполнения),
						НайденнаяСтрока.СрокИсполнения,
						СрокИсполнения);
				КонецЕсли;
			Иначе	
				ЗадачаОбъект.Наименование = Наименование;
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(НайденнаяСтрока.Описание), НайденнаяСтрока.Описание, Описание);
					ЗадачаОбъект.СрокИсполнения = ?(
						ЗначениеЗаполнено(НайденнаяСтрока.СрокИсполнения),
						НайденнаяСтрока.СрокИсполнения,
						СрокИсполнения);
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор 	  = Автор;
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Шаблон = ШаблонБизнесПроцесса;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если ШаблонБизнесПроцесса.ИспользоватьУсловия И ЗначениеЗаполнено(Строка.Условие) Тогда
			Если Не Справочники.УсловияМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Строка.Условие) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") <> Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
				НоваяСтрока.Описание = Строка.Описание;
				НоваяСтрока.Ответственный = Строка.Ответственный;
				НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
				
				// срок исполнения
				Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
					Если ЗначениеЗаполнено(Строка.СрокИсполнения) Или ЗначениеЗаполнено(Строка.СрокИсполненияЧас) Тогда 
						НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600 + Строка.СрокИсполненияЧас*3600;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
						НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600;
						НоваяСтрока.СрокИсполнения = КонецДня(НоваяСтрока.СрокИсполнения);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") <> Неопределено Тогда 
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = Исполнители.Добавить();
						НоваяСтрока.Исполнитель = ЭлементМассива;
						НоваяСтрока.Описание = Строка.Описание;
						НоваяСтрока.Ответственный = Строка.Ответственный;
						НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
						
						// срок исполнения
						Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
							Если ЗначениеЗаполнено(Строка.СрокИсполнения) Или ЗначениеЗаполнено(Строка.СрокИсполненияЧас) Тогда 
								НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600 + Строка.СрокИсполненияЧас*3600;
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
								НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600;
								НоваяСтрока.СрокИсполнения = КонецДня(НоваяСтрока.СрокИсполнения);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			// срок исполнения
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
				Если ЗначениеЗаполнено(Строка.СрокИсполнения) Или ЗначениеЗаполнено(Строка.СрокИсполненияЧас) Тогда 
					НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600 + Строка.СрокИсполненияЧас*3600;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
					НоваяСтрока.СрокИсполнения = Дата + Строка.СрокИсполнения*24*3600;
					НоваяСтрока.СрокИсполнения = КонецДня(НоваяСтрока.СрокИсполнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда 
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Контролер,
			ЭтотОбъект);
		Если АвтоподстановкаКонтролер <> Неопределено Тогда 
			Контролер = АвтоподстановкаКонтролер;
		КонецЕсли;
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
		ОсновнойОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииКонтролера;
		ДополнительныйОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	// заполнение проверяющего
	Если ТипЗнч(ШаблонБизнесПроцесса.Проверяющий) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Проверяющий) Тогда 
		АвтоподстановкаПроверяющий = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Проверяющий,
			ЭтотОбъект);
		Если АвтоподстановкаПроверяющий <> Неопределено Тогда 
			Проверяющий = АвтоподстановкаПроверяющий;
		КонецЕсли;
	Иначе
		Проверяющий = ШаблонБизнесПроцесса.Проверяющий;
		ОсновнойОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииПроверяющего;
		ДополнительныйОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;
	
	// общий срок исполнения
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) 
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда 
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения*24*3600 + ШаблонБизнесПроцесса.СрокИсполненияЧас*3600;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения*24*3600;
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании предмета
//
Процедура ЗаполнитьПоПредмету(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	
	СтандартнаяОбработка = Истина;
	
	Параметры = Новый Массив(3);
	Параметры[0] = ЭтотОбъект;
	Параметры[1] = Предмет;
	Параметры[2] = СтандартнаяОбработка;
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПредмета, "ПриЗаполненииБизнесПроцессаИсполнение", Параметры);
	
	СтандартнаяОбработка = Параметры[2];
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Предмет.Ссылка           КАК Предмет,
	|	&СрокИсполнения          КАК СрокИсполнения,
	|	&Важность                КАК Важность,
	|	&Статус                  КАК Статус,
	|	&ЕстьОшибкиСтатус        КАК ЕстьОшибкиСтатус,
	|	&ЕстьОшибкиПроведен      КАК ЕстьОшибкиПроведен,
	|	Предмет.ПометкаУдаления  КАК ЕстьОшибкиПометкаУдаления
	|ИЗ
	|	#Предмет КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Предмет
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет"           , Предмет);
	Запрос.УстановитьПараметр("СрокИсполнения"    , '00010101');
	Запрос.УстановитьПараметр("Важность"          , Перечисления.ВариантыВажностиЗадачи.Обычная);
	Запрос.УстановитьПараметр("Статус"            , Неопределено);
	Запрос.УстановитьПараметр("ЕстьОшибкиСтатус"  , Ложь);
	Запрос.УстановитьПараметр("ЕстьОшибкиПроведен", Ложь);
	
	МетаданныеПредмета = Предмет.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Предмет", МетаданныеПредмета.ПолноеИмя());
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаИсполнения", МетаданныеПредмета) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СрокИсполнения", "Предмет.ДатаИсполнения");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Приоритет", МетаданныеПредмета)
	   И МетаданныеПредмета.Реквизиты.Приоритет.Тип.СодержитТип(Тип("СправочникСсылка.Приоритеты")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Важность", "
		|	ВЫБОР
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Обычная)
		|	КОНЕЦ");
	КонецЕсли;
	
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет);
	ДопустимыеСтатусы = Новый Массив;
	Если ИспользоватьСтатусы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "Предмет.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиСтатус", "
		|	ВЫБОР
		|		КОГДА Предмет.Статус В (&ДопустимыеСтатусы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		СтатусыПредмета = Перечисления[Метаданные.НайтиПоТипу(МетаданныеПредмета.Реквизиты.Статус.Тип.Типы()[0]).Имя];
		ДопустимыеСтатусы.Добавить(СтатусыПредмета.Согласован);
		Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета)
	   И МетаданныеПредмета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиПроведен", "НЕ Предмет.Проведен");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		ИспользоватьСтатусы И Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	Если Выборка.ЕстьОшибкиПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Предмет %Предмет% помечен на удаление. Ввод на основании помеченного на удаление предмета невозможен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%", Предмет);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	НомерИтерации = 0;
	РезультатыИсполнения.Очистить();
	РезультатыПроверки.Очистить();
	ДополнительныеИсполнители.Очистить();
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ИнициализироватьБизнесПроцесс();
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Предмет = ДанныеЗаполнения.Предмет;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьБизнесПроцессПоОтбору(ДанныеЗаполнения);
	Иначе
		Предмет = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		ЗаполнитьПоПредмету(Предмет);
		
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Исполнить ""%1""'"),
			Строка(Предмет));
		
	Иначе
		Наименование = НСтр("ru = 'Исполнить'") + " ";
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") И Проверяющий.ВнешняяРоль Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Внешняя роль не может быть использована в данном поле.'"),
			ЭтотОбъект,
			"Проверяющий",
			,
			Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ТребованиеОтделения") Тогда
		ПроверяемыеРеквизиты.Добавить("Проверяющий");
	КонецЕсли;
	
	Для Каждого Строка Из Исполнители Цикл
		ПредметДоступенПользователю =
			БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
				ЭтотОбъект,
				Предмет,
				"Чтение",
				Строка.Исполнитель,
				Строка.ОсновнойОбъектАдресации,
				Строка.ДополнительныйОбъектАдресации,
				"Исполнители",
				"Исполнитель",
				Строка.НомерСтроки - 1);
		Если Не ПредметДоступенПользователю Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		ПредметДоступенПользователю =
			БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
				ЭтотОбъект,
				Предмет,
				"Чтение",
				Проверяющий,
				ОсновнойОбъектАдресацииПроверяющего,
				ДополнительныйОбъектАдресацииПроверяющего,
				"Проверяющий");
		Если Не ПредметДоступенПользователю Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контролер) Тогда
		ПредметДоступенПользователю =
			БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
				ЭтотОбъект,
				Предмет,
				"Чтение",
				Контролер,
				ОсновнойОбъектАдресацииКонтролера,
				ДополнительныйОбъектАдресацииКонтролера,
				"Контролер");
		Если Не ПредметДоступенПользователю Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	// Проверка возможности снятия пометки удаления
	Если Стартован И Не Завершен И Не ПометкаУдаления И ПредыдущаяПометкаУдаления Тогда
		
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
			Предмет, Ссылка);
		
	КонецЕсли;
	
	// Исполнители (табличная часть)
	Для каждого Элемент Из Исполнители Цикл
		Если ТипЗнч(Элемент.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Элемент.ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
				Элемент.Исполнитель, Элемент.ОсновнойОбъектАдресации, Элемент.ДополнительныйОбъектАдресации);
		Иначе
			Элемент.ГруппаДоступаИсполнителей = Элемент.Исполнитель;
		КонецЕсли;
	КонецЦикла;
	
	// Контролер 
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ГруппаДоступаКонтролера = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Контролер, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера);
	Иначе
		ГруппаДоступаКонтролера = Контролер;
	КонецЕсли;
	
	// Проверяющий
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ГруппаДоступаПроверяющего = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Проверяющий, ОсновнойОбъектАдресацииПроверяющего, ДополнительныйОбъектАдресацииПроверяющего);
	Иначе
		ГруппаДоступаПроверяющего = Проверяющий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда 
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если ГлавнаяЗадача.БизнесПроцесс = Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута
#Область ОбработчикиСобытийЭлементовКартыМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	
	ДатаНачала = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

Процедура ПодготовкаИтерацииОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "КВыполнению");
	
	НомерИтерации = НомерИтерации + 1;
	Записать();
	
КонецПроцедуры

Процедура ОтветственноеИсполнениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатыПроверки.Количество() > 0 Тогда // возврат на доработку
		
		Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
			
			Если (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) И СтрокаПроверки.ОтправленоНаДоработку Тогда 
				
				Если НЕ СтрокаПроверки.ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
					Продолжить;
				КонецЕсли;
				Строка = Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.Дата  = ТекущаяДатаСеанса();
				Задача.Автор = Автор;
				
				Если Строка <> Неопределено Тогда 
					Задача.Описание = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
					Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
				Иначе
					Задача.Описание = СтрокаПроверки.ЗадачаИсполнителя.Описание;
					Задача.СрокИсполнения = СтрокаПроверки.ЗадачаИсполнителя.СрокИсполнения;
				КонецЕсли;
				
				Задача.Предмет 	= Предмет;
				Задача.Важность = Важность;
				
				Задача.Наименование   = Наименование + " " + НСтр("ru = '(ответственный исполнитель)'");
				Задача.БизнесПроцесс  = Ссылка;
				Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
				Задача.Исполнитель    = СтрокаПроверки.ЗадачаИсполнителя.Исполнитель;
				
				Если ЗначениеЗаполнено(СтрокаПроверки.КомментарийПроверяющего) Тогда 
					Задача.Описание = Строка(СтрокаПроверки.ЗадачаПроверяющего.Исполнитель) + " "
						+ Формат(СтрокаПроверки.ЗадачаПроверяющего.ДатаИсполнения, "ДЛФ=D") + Символы.ПС
						+ СтрокаПроверки.КомментарийПроверяющего + Символы.ПС + Символы.ПС
						+ Задача.Описание;
				КонецЕсли;	
				
				Задача.Записать();
				ФормируемыеЗадачи.Добавить(Задача);
				
				Если Строка <> Неопределено Тогда 
					Строка.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;
				НоваяСтрока = РезультатыИсполнения.Добавить();
				НоваяСтрока.НомерИтерации 	  = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				
				УстановитьПривилегированныйРежим(Истина);
				Записать();
				Прервать;
			КонецЕсли;	   
			
		КонецЦикла;
		
	Иначе	
		
		Для Каждого Строка Из Исполнители Цикл
			
			Если Не Строка.Ответственный Тогда
				Продолжить;
			КонецЕсли;	
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата  	= ТекущаяДатаСеанса();
			Задача.Автор 	= Автор;
			Задача.Описание = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
			Задача.Предмет 	= Предмет;
			Задача.Важность = Важность;
			
			Задача.Наименование   = Наименование + " " + НСтр("ru = '(ответственный исполнитель)'");
			Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
			Задача.БизнесПроцесс  = Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
			Иначе	
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;	
			
			Задача.Записать();
			ФормируемыеЗадачи.Добавить(Задача);
			
			Строка.ЗадачаИсполнителя = Задача.Ссылка;
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации 	  = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			
			УстановитьПривилегированныйРежим(Истина);
			Записать();
			
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатыПроверки.Количество() > 0 Тогда // возврат на доработку
		
		Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
			
			Если (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) И СтрокаПроверки.ОтправленоНаДоработку Тогда 
				
				Если СтрокаПроверки.ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
					Продолжить;
				КонецЕсли;
				Строка = Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.Дата     = ТекущаяДатаСеанса();
				Задача.Автор    = Автор;
				Задача.Предмет  = Предмет;
				Задача.Важность = Важность;
				
				Если Строка <> Неопределено Тогда 
					Задача.Описание       = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
					Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
					
					Если ЗначениеЗаполнено(Строка.НаименованиеЗадачи) Тогда 
						Если ЗначениеЗаполнено(Предмет) Тогда 
							Задача.Наименование = Строка.НаименованиеЗадачи + " (" + Строка(Предмет) + ")";
						Иначе
							Задача.Наименование = Строка.НаименованиеЗадачи;
						КонецЕсли;
					Иначе
						Задача.Наименование = Наименование;
					КонецЕсли;
				Иначе
					Задача.Описание       = СтрокаПроверки.ЗадачаИсполнителя.Описание;
					Задача.СрокИсполнения = СтрокаПроверки.ЗадачаИсполнителя.СрокИсполнения;
					Задача.Наименование   = СтрокаПроверки.ЗадачаИсполнителя.Наименование;
				КонецЕсли;
				
				Задача.БизнесПроцесс  = Ссылка;
				Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
				Задача.Исполнитель	  = СтрокаПроверки.ЗадачаИсполнителя.Исполнитель;
				
				Если ЗначениеЗаполнено(СтрокаПроверки.КомментарийПроверяющего) Тогда 
					Задача.Описание = Строка(СтрокаПроверки.ЗадачаПроверяющего.Исполнитель) + " "
						+ Формат(СтрокаПроверки.ЗадачаПроверяющего.ДатаИсполнения, "ДЛФ=D") + Символы.ПС
						+ СтрокаПроверки.КомментарийПроверяющего + Символы.ПС + Символы.ПС
						+ Задача.Описание;
				КонецЕсли;
				
				Задача.Записать();
				ФормируемыеЗадачи.Добавить(Задача);
				
				Если Строка <> Неопределено Тогда 
					Строка.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;	
				НоваяСтрока = РезультатыИсполнения.Добавить();
				НоваяСтрока.НомерИтерации     = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из Исполнители Цикл
			
			Если Строка.Ответственный Тогда
				Продолжить;
			КонецЕсли;
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата     = ТекущаяДатаСеанса();
			Задача.Автор    = Автор;
			Задача.Предмет  = Предмет;
			Задача.Важность = Важность;
			Задача.Описание = ?(ЗначениеЗаполнено(Строка.Описание), Строка.Описание, Описание);
			
			Если ЗначениеЗаполнено(Строка.НаименованиеЗадачи) Тогда 
				Если ЗначениеЗаполнено(Предмет) Тогда 
					Задача.Наименование = Строка.НаименованиеЗадачи + " (" + Строка(Предмет) + ")";
				Иначе	
					Задача.Наименование = Строка.НаименованиеЗадачи;
				КонецЕсли;
			Иначе
				Задача.Наименование = Наименование;
			КонецЕсли;
			
			Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
			Задача.БизнесПроцесс  = Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
			Иначе	
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			Задача.Записать();
			ФормируемыеЗадачи.Добавить(Задача);
			
			Строка.ЗадачаИсполнителя = Задача.Ссылка;
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации     = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура ОбработкаИсполненияОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "Исполнен");
	
КонецПроцедуры

Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда 
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Автор    = Автор;
	Задача.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Проверить:'") + " " + Описание, Описание);
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверить исполнение ""%1""'"),
			Строка(Предмет));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверить: %1'"), 
			Наименование);
	КонецЕсли;
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Проверяющий;
	Иначе
		Задача.РольИсполнителя = Проверяющий;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;
	
	Задача.Записать();
	ФормируемыеЗадачи.Добавить(Задача);
	
	ПараметрыОтбора = Новый Структура("НомерИтерации", НомерИтерации);
	НайденныеСтроки = РезультатыИсполнения.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = РезультатыПроверки.Добавить();
		НоваяСтрока.ЗадачаИсполнителя 	= НайденнаяСтрока.ЗадачаИсполнителя;
		НоваяСтрока.ЗадачаПроверяющего 	= Задача.Ссылка;
		НоваяСтрока.НомерИтерации 		= НомерИтерации;
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура КонтролироватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Автор    = Автор;
	Задача.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать:'") + " " + Описание, Описание);
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать исполнение ""%1""'"),
			Строка(Предмет));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать: %1'"),
			Наименование);
	КонецЕсли;
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ВернутьНаДоработкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	ПараметрыОтбора = Новый Структура("НомерИтерации, ОтправленоНаДоработку", НомерИтерации, Истина);
	Результат = (РезультатыПроверки.НайтиСтроки(ПараметрыОтбора).Количество() > 0);
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Контролер) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовКартыМаршрута

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение
#Область ИнициализацияИЗаполнение

// Инициализирует документ
//
Процедура ИнициализироватьБизнесПроцесс()

	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	НомерИтерации = 0;
	Проверяющий = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Заполняет исполнение в соответствии с отбором.
//
// Параметры:
//		ДанныеЗаполнения - Структура - Структура со значениями отбора
//
Процедура ЗаполнитьБизнесПроцессПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = ДанныеЗаполнения.Предмет;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Управления доступом
#Область УправленияДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:                Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	// Добавления, Изменения: Автор
	
	// Реквизит ГруппаДоступаИсполнителей содержит либо "Исполнителя" либо 
	// "СправочникСсылка.ГруппыДоступаИсполнителей"
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Контролер
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаДоступаКонтролера;
	
	// Проверяющий
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 3;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаДоступаПроверяющего;
	
	// Чтение: набор №4.
	ТекущийНомерНабора = 4;
	Для каждого Элемент Из Исполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	// Чтение:
	Для каждого Элемент Из ДополнительныеИсполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(
		ЭтотОбъект,
		Таблица,
		ТекущийНомерНабора);
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Если УправлениеДоступом.ВозможноЗаполнитьНаборыЗначенийДоступа(Предмет) Тогда
			
			НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
			НаборыПредмета = НаборыПредмета.Скопировать(НаборыПредмета.НайтиСтроки(Новый Структура("Чтение", Истина)));
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // УправленияДоступом

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли