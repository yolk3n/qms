#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		ИмяФормы = "БизнесПроцесс.Утверждение.Форма.ДействиеУтвердить";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		ИмяФормы = "БизнесПроцесс.Утверждение.Форма.ДействиеОзнакомиться";
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// устанавливаем значения по умолчанию для пакетного выполнения задач
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "ПодписыватьЭП") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Задачу ""%1"" необходимо подписать ЭП. Выполнение возможно только из формы задачи.'"),
				ЗадачаСсылка);
		КонецЕсли;
		
		УтверждениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(УтверждениеОбъект.Ссылка);
		НайденнаяСтрока = УтверждениеОбъект.РезультатыУтверждения.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
		УтверждениеОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		
		УтверждениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(УтверждениеОбъект.Ссылка);
		УтверждениеОбъект.ПовторитьУтверждение = Ложь;
		НайденнаяСтрока = УтверждениеОбъект.РезультатыОзнакомлений.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеУтверждение = Ложь;
		УтверждениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	// Изменяем бизнес-процесс
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект = НоваяЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	Строка = БизнесПроцессОбъект.ДополнительныеИсполнители.Добавить();
	Если ЗначениеЗаполнено(НоваяЗадачаСсылка.Исполнитель) Тогда
		Строка.Исполнитель = НоваяЗадачаСсылка.Исполнитель;
	Иначе
		Строка.Исполнитель = НоваяЗадачаСсылка.РольИсполнителя;
	КонецЕсли;
	Строка.ОсновнойОбъектАдресации = НоваяЗадачаСсылка.ОсновнойОбъектАдресации;
	Строка.ДополнительныйОбъектАдресации = НоваяЗадачаСсылка.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Строка.ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
	Иначе
		Строка.ГруппаДоступаИсполнителей = Строка.Исполнитель;
	КонецЕсли;
	
	Если НоваяЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыОзнакомлений.НайтиСтроки(Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка));
	Иначе
		НайденныеСтроки = БизнесПроцессОбъект.РезультатыУтверждения.НайтиСтроки(Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка));
	КонецЕсли;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ЗадачаИсполнителя = НоваяЗадачаСсылка;
	КонецЦикла;
	
	БизнесПроцессОбъект.Записать();
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения =
		БизнесПроцессыИЗадачиБольничнаяАптека.РезультатВыполненияПриПеренаправлении(ЗадачаОбъект)
		+ ЗадачаОбъект.РезультатВыполнения;
	ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
	ЗадачаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущийБизнесПроцесс, "Автор"));
	
	Возврат МассивПользователей;
	
КонецФункции

// Добавляет команду создания на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Команда = КомандыСоздатьНаОсновании.Добавить();
	Команда.Менеджер      = ПустаяСсылка().Метаданные().ПолноеИмя();
	Команда.Представление = НСтр("ru = 'Утвердить'");
	Команда.Подменю       = "ПодменюБизнесПроцессы";
	Команда.ПараметрыФормы = Новый Структура;
	Команда.ПараметрыФормы.Вставить("ЗакрытьФормуВладельцаПоИмени");
	
	Возврат Команда;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	// Имеющиеся ограничения доступа в ролях:
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Утверждение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ПО
	|	ИсполнителиЗадач.РольИсполнителя = Утверждение.Исполнитель
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = Утверждение.ОсновнойОбъектАдресации
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Утверждение.ДополнительныйОбъектАдресации
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|		ИЛИ ЧтениеОбъектаРазрешено(Предмет КРОМЕ Задача.ЗадачаИсполнителя, Неопределено КАК Истина, Задача.ЗадачаИсполнителя КАК Истина)
	|		И(
	|				ЗначениеРазрешено(Исполнитель КРОМЕ Справочник.РолиИсполнителей)
	|			ИЛИ ЗначениеРазрешено(ИсполнителиЗадач.Исполнитель)
	|		)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли