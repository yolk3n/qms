#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ
		|";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
				Если ЗначениеЗаполнено(Предмет) Тогда
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом утверждения ""%1""'"),
						Строка(Предмет));
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом утверждения: %1'"),
						Наименование);
				КонецЕсли;
			Иначе
				ЗадачаОбъект.Наименование = Наименование;
				ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Описание = Описание;
			ЗадачаОбъект.Автор 	  = Автор;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Шаблон = ШаблонБизнесПроцесса;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда
		АвтоподстановкаИсполнитель =
			ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		Если АвтоподстановкаИсполнитель <> Неопределено Тогда
			Исполнитель = АвтоподстановкаИсполнитель;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
		ОсновнойОбъектАдресации = ШаблонБизнесПроцесса.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресации = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	// срок исполнения
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения)
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения * 24 * 3600 + ШаблонБизнесПроцесса.СрокИсполненияЧас * 3600;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда
			СрокИсполнения = Дата + ШаблонБизнесПроцесса.СрокИсполнения * 24 * 3600;
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП И ЭлектроннаяПодписьБольничнаяАптека.ИспользоватьЭлектронныеПодписи(Предмет);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании предмета
//
Процедура ЗаполнитьПоПредмету(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(
		Предмет, Ссылка);
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	
	СтандартнаяОбработка = Истина;
	
	Параметры = Новый Массив(3);
	Параметры[0] = ЭтотОбъект;
	Параметры[1] = Предмет;
	Параметры[2] = СтандартнаяОбработка;
	ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерПредмета, "ПриЗаполненииБизнесПроцессаУтверждение", Параметры);
	
	СтандартнаяОбработка = Параметры[2];
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Предмет.Ссылка           КАК Предмет,
	|	&СрокИсполнения          КАК СрокИсполнения,
	|	&Важность                КАК Важность,
	|	&Статус                  КАК Статус,
	|	&ЕстьОшибкиСтатус        КАК ЕстьОшибкиСтатус,
	|	&ЕстьОшибкиПроведен      КАК ЕстьОшибкиПроведен,
	|	Предмет.ПометкаУдаления  КАК ЕстьОшибкиПометкаУдаления
	|ИЗ
	|	#Предмет КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Предмет
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет"           , Предмет);
	Запрос.УстановитьПараметр("СрокИсполнения"    , '00010101');
	Запрос.УстановитьПараметр("Важность"          , Перечисления.ВариантыВажностиЗадачи.Обычная);
	Запрос.УстановитьПараметр("Статус"            , Неопределено);
	Запрос.УстановитьПараметр("ЕстьОшибкиСтатус"  , Ложь);
	Запрос.УстановитьПараметр("ЕстьОшибкиПроведен", Ложь);
	
	МетаданныеПредмета = Предмет.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Предмет", МетаданныеПредмета.ПолноеИмя());
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаУтверждения", МетаданныеПредмета) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СрокИсполнения", "Предмет.ДатаУтверждения");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Приоритет", МетаданныеПредмета)
	   И МетаданныеПредмета.Реквизиты.Приоритет.Тип.СодержитТип(Тип("СправочникСсылка.Приоритеты")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Важность", "
		|	ВЫБОР
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|		КОГДА Предмет.Приоритет В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Приоритеты.Ссылка КАК Приоритет
		|				ИЗ
		|					Справочник.Приоритеты КАК Приоритеты
		|				УПОРЯДОЧИТЬ ПО
		|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Обычная)
		|	КОНЕЦ");
	КонецЕсли;
	
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет);
	ДопустимыеСтатусы = Новый Массив;
	Если ИспользоватьСтатусы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "Предмет.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиСтатус", "
		|	ВЫБОР
		|		КОГДА Предмет.Статус В (&ДопустимыеСтатусы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		СтатусыПредмета = Перечисления[Метаданные.НайтиПоТипу(МетаданныеПредмета.Реквизиты.Статус.Тип.Типы()[0]).Имя];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтатусыПредмета, "Согласован") Тогда
			ДопустимыеСтатусы.Добавить(СтатусыПредмета.Согласован);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтатусыПредмета, "НеУтвержден") Тогда
			ДопустимыеСтатусы.Добавить(СтатусыПредмета.НеУтвержден);
		КонецЕсли;
		Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеПредмета)
	   И МетаданныеПредмета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОшибкиПроведен", "НЕ Предмет.Проведен");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		ИспользоватьСтатусы И Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	Если Выборка.ЕстьОшибкиПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Предмет %Предмет% помечен на удаление. Ввод на основании помеченного на удаление предмета невозможен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%", Предмет);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыУтверждения.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДополнительныеИсполнители.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатУтверждения = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ИнициализироватьБизнесПроцесс();
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Предмет = ДанныеЗаполнения.Предмет;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьБизнесПроцессПоОтбору(ДанныеЗаполнения);
	Иначе
		Предмет = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		
		ЗаполнитьПоПредмету(Предмет);
		
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Утвердить ""%1""'"),
			Строка(Предмет));
		
	Иначе
		Наименование = НСтр("ru = 'Утвердить'") + " ";
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Исполнитель.ВнешняяРоль Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Внешняя роль не может быть использована в данном поле.'"),
			ЭтотОбъект,
			"Исполнитель",
			,
			Отказ);
	КонецЕсли;
	
	Если Не БизнесПроцессыИЗадачиБольничнаяАптека.ЕстьПравоДоступаУчастникаБизнесПроцесса(
				ЭтотОбъект,
				Предмет,
				"Чтение",
				Исполнитель,
				ОсновнойОбъектАдресации,
				ДополнительныйОбъектАдресации,
				"Исполнитель") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	// Проверка возможности снятия пометки удаления
	Если Стартован И Не Завершен И Не ПометкаУдаления И ПредыдущаяПометкаУдаления Тогда
		
		БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(Предмет, Ссылка);
		
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ГруппаДоступаИсполнителей = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
			Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	Иначе
		ГруппаДоступаИсполнителей = Исполнитель;
	КонецЕсли;
	
	Если ГлавнаяЗадача.БизнесПроцесс = Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута
#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессыИЗадачиБольничнаяАптека.ПроверитьОтсутствиеНезавершенногоБизнесПроцессаПоПредмету(Предмет, Ссылка);
	ДатаНачала = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, "НаУтверждении");
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьУтверждение = Ложь;
	Записать();
	
КонецПроцедуры

Процедура УтвердитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Автор    = Автор;
	Задача.Описание = Описание;
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.Наименование   = Наименование;
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	Задача.Записать();
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыУтверждения.Добавить();
	НоваяСтрока.НомерИтерации     = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
	Записать();
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат утверждения
	РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
	Для Каждого Элемент Из РезультатыУтверждения Цикл
		Если Элемент.НомерИтерации = НомерИтерации Тогда
			
			Если Элемент.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Записать();
	
	ПредметУтвержден = (РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено);
	БизнесПроцессыИЗадачиБольничнаяАптека.УстановитьСтатусПредмета(Предмет, ?(ПредметУтвержден, "Утвержден", "НеУтвержден"));
	
КонецПроцедуры

Процедура ПовторитьУтверждениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьУтверждение;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// для вложенного бизнес-процесса
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		Если РезультатУтверждения <> Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата     = ТекущаяДатаСеанса();
	Задача.Описание = Описание;
	Задача.Предмет  = Предмет;
	Задача.Важность = Важность;
	
	Задача.Исполнитель    = Автор;
	Задача.СрокИсполнения = '00010101';
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом утверждения ""%1""'"),
			Строка(Предмет));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом утверждения: %1'"),
			Наименование);
	КонецЕсли;
	
	// автор
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Автор = Исполнитель;
	Иначе
		НайденнаяСтрока = РезультатыУтверждения.Найти(НомерИтерации, "НомерИтерации");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Задача.Автор = НайденнаяСтрока.ЗадачаИсполнителя.Исполнитель;
		КонецЕсли;
	КонецЕсли;
	
	Задача.Записать();
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации     = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
	Записать();
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

#КонецОбласти // КартаМаршрута

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение
#Область ИнициализацияИЗаполнение

// Инициализирует документ
//
Процедура ИнициализироватьБизнесПроцесс()

	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	НомерИтерации = 0;
	
КонецПроцедуры

// Заполняет согласование заказа в соответствии с отбором.
//
// Параметры:
//		ДанныеЗаполнения - Структура - Структура со значениями отбора
//
Процедура ЗаполнитьБизнесПроцессПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = ДанныеЗаполнения.Предмет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет таблицу
// НаборыЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление)
// по проверяемому объекту.
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:                Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	// Добавления, Изменения: Автор
	
	// Реквизит ГруппаДоступаИсполнителей содержит либо "Исполнителя" либо 
	// "СправочникСсылка.ГруппыДоступаИсполнителей"
	
	// Чтение, Добавление, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор №2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаДоступаИсполнителей;
	
	ТекущийНомерНабора = 3;
	// Чтение:
	Для каждого Элемент Из ДополнительныеИсполнители Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = ТекущийНомерНабора;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Элемент.ГруппаДоступаИсполнителей;
		
		ТекущийНомерНабора = ТекущийНомерНабора + 1;
	КонецЦикла;
	
	БизнесПроцессыИЗадачиБольничнаяАптека.ЗаполнитьЗначенияДоступаДочернегоБизнесПроцесса(
		ЭтотОбъект,
		Таблица,
		ТекущийНомерНабора);
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Если УправлениеДоступом.ВозможноЗаполнитьНаборыЗначенийДоступа(Предмет) Тогда
			
			НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
			НаборыПредмета = НаборыПредмета.Скопировать(НаборыПредмета.НайтиСтроки(Новый Структура("Чтение", Истина)));
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли