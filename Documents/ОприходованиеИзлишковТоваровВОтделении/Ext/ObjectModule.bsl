#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладеВОтделении") Тогда
		
		ИнвентаризацияТоваровВОтделении = ДанныеЗаполнения;
		ЗаполнитьДокументНаОснованииИнвентаризацииТоваровВОтделении();
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнвентаризацияТоваровВОтделении = Документы.ИнвентаризацияТоваровНаСкладеВОтделении.ПустаяСсылка();
	
	ИнициализироватьДокумент();
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	СкладыСервер.ПроверитьВедениеСкладскогоУчетаВОтделении(ЭтотОбъект, Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект,, НепроверяемыеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ПараметрыУчетаНоменклатуры);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьПоляПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоляПоУмолчанию()
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Отделение, Организация);
	Склад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Склад, Отделение);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад, СтатьяДоходов");
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Отделение", "Организация");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ОбщегоНазначенияБольничнаяАптека.ПроверитьЗаполнениеПодразделенияОрганизации(ЭтотОбъект, "Отделение");
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИнвентаризацииТоваровВОтделении() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                  КАК Ссылка,
	|	Документ.Организация             КАК Организация,
	|	Документ.Отделение               КАК Отделение,
	|	Документ.Склад                   КАК Склад,
	|	Документ.МестоХранения           КАК МестоХранения,
	|	Документ.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	НЕ Документ.Проведен             КАК ЕстьОшибкиПроведен,
	|	Документ.Статус                  КАК Статус,
	|	ВЫБОР
	|		КОГДА Документ.Статус В (&ДоступныеСтатусы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                            КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладеВОтделении КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Инвентаризация
	|");
	
	Запрос.УстановитьПараметр("Инвентаризация", ИнвентаризацияТоваровВОтделении);
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыИнвентаризацииТоваров.Выполнено);
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ДоступныеСтатусы);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Ссылка,
		Шапка.ЕстьОшибкиПроведен,
		Шапка.Статус,
		Шапка.ЕстьОшибкиСтатус,
		ДоступныеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	
	ЗаполнитьТабличнуюЧастьТовары();
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ИнвентаризацияТоваровВОтделении);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыКОформлению.Партия КАК Партия,
	|	ТоварыКОформлению.ИсточникФинансирования КАК ИсточникФинансирования,
	|	СУММА(ТоварыКОформлению.КОформлениюОприходованияОстаток) КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлению.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ТоварыКОформлению.Партия КАК Партия,
	|		ТоварыКОформлению.ИсточникФинансирования КАК ИсточникФинансирования,
	|		ТоварыКОформлению.КОформлениюОприходованияОстаток КАК КОформлениюОприходованияОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
	|				,
	|				ДокументОснование = &ДокументОснование
	|					И Склад = &Склад
	|					И Организация = &Организация) КАК ТоварыКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура,
	|		ТоварыКОформлению.СерияНоменклатуры,
	|		ТоварыКОформлению.Партия,
	|		ТоварыКОформлению.ИсточникФинансирования,
	|		ТоварыКОформлению.КОформлениюОприходования
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
	|	ГДЕ
	|		ТоварыКОформлению.Регистратор = &Ссылка
	|		И ТоварыКОформлению.ДокументОснование = &ДокументОснование
	|		И ТоварыКОформлению.Активность = ИСТИНА) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|		ТоварыКОформлению.СерияНоменклатуры,
	|		ТоварыКОформлению.Партия,
	|		ТоварыКОформлению.ИсточникФинансирования
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.КОформлениюОприходованияОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.Партия КАК Партия,
	|	Товары.ИсточникФинансирования КАК ИсточникФинансирования,
	|	МАКСИМУМ(Товары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ЕдиницыИзмеренияТовара
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладеВОтделении.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТоварыКОформлению КАК ТоварыКОформлению
	|		ПО
	|			ТоварыКОформлению.Номенклатура = Товары.Номенклатура
	|			И ТоварыКОформлению.СерияНоменклатуры = Товары.СерияНоменклатуры
	|			И ТоварыКОформлению.Партия = Товары.Партия
	|			И ТоварыКОформлению.ИсточникФинансирования = Товары.ИсточникФинансирования
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.СерияНоменклатуры,
	|	Товары.Партия,
	|	Товары.ИсточникФинансирования
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Товары.ЕдиницаИзмерения) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыКОформлению.Партия КАК Партия,
	|	ТоварыКОформлению.ИсточникФинансирования КАК ИсточникФинансирования,
	|	ТоварыКОформлению.Количество КАК Количество,
	|	ЕСТЬNULL(ЕдиницыИзмеренияТовара.ЕдиницаИзмерения,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ЕдиницыИзмеренияТовара КАК ЕдиницыИзмеренияТовара
	|		ПО
	|			ЕдиницыИзмеренияТовара.Номенклатура = ТоварыКОформлению.Номенклатура
	|			И ЕдиницыИзмеренияТовара.СерияНоменклатуры = ТоварыКОформлению.СерияНоменклатуры
	|			И ЕдиницыИзмеренияТовара.Партия = ТоварыКОформлению.Партия
	|			И ЕдиницыИзмеренияТовара.ИсточникФинансирования = ТоварыКОформлению.ИсточникФинансирования
	|";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Товары.Загрузить(Результат.Выгрузить());
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Товары, СтруктураДействий, Неопределено);
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ИнвентаризацияТоваровВОтделении);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
		РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РегистрыДляКонтроля.Добавить(Движения.ТоварыКОформлениюИзлишковНедостач);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли