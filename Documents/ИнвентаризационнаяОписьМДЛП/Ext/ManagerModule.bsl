
#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	СобытияФормМДЛППереопределяемый.ПриПолученииФормыДокумента(ПустаяСсылка().Метаданные().Имя, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка());
		ВыбраннаяФорма = Метаданные.Документы.ИнвентаризационнаяОписьМДЛП.Формы.ФормаСпискаДокументов;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка());
		ВыбраннаяФорма = Метаданные.Документы.ИнвентаризационнаяОписьМДЛП.Формы.ФормаВыбораДокументов;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатус(ДокументСсылка) Экспорт
	
	ДальнейшиеДействия = ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка);
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	Если ДальнейшиеДействия.Количество() = 0 Тогда
		
		Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
		
	Иначе
		
		Если ДальнейшиеДействия.Количество() = 1 Тогда
			Если ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте Тогда
				Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
			ИначеЕсли ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки Тогда
				Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Черновик;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
			Иначе
				Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.КОформлению;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
			КонецЕсли;
		Иначе
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.КОформлению;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНезавершенныеДокументыИнвентаризации
	|ПОМЕСТИТЬ НезавершенныеДокументыИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП КАК ДокументыИнвентаризации
	|ГДЕ
	|	ДокументыИнвентаризации.ИнвентаризационнаяОпись = &Ссылка
	|	И ДокументыИнвентаризации.СостояниеПодтверждения <> ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Завершено)
	|	И НЕ ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	
	|	ВЫБОР
	|		КОГДА Документ.СостояниеПодтверждения В (&КонечныеСостояния)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ВзаимодействиеЗавершено,
	
	|	ВЫБОР
	|		КОГДА Документ.СостояниеПодтверждения В (&МожноЗагрузитьОстатки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК МожноЗагрузитьОстатки,
	
	|	ВЫБОР
	|		КОГДА Документ.СостояниеПодтверждения В (&МожноОформитьИнвентаризациюИлиЗакрыть)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК МожноОформитьИнвентаризацию,
	
	|	ВЫБОР
	|		КОГДА Документ.СостояниеПодтверждения В (&МожноОформитьИнвентаризациюИлиЗакрыть)
	|			И НезавершенныеДокументыИнвентаризации.ЕстьНезавершенныеДокументыИнвентаризации ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК МожноЗакрыть
	
	|ИЗ
	|	Документ.ИнвентаризационнаяОписьМДЛП КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НезавершенныеДокументыИнвентаризации КАК НезавершенныеДокументыИнвентаризации
	|		ПО
	|			ИСТИНА
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СтатусЗавершено", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Завершено);
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	
	МожноЗагрузитьОстатки = Новый Массив;
	МожноЗагрузитьОстатки.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КОбработке);
	МожноЗагрузитьОстатки.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОформитьИнвентаризацию);
	Запрос.УстановитьПараметр("МожноЗагрузитьОстатки", МожноЗагрузитьОстатки);
	
	МожноОформитьИнвентаризациюИлиЗакрыть = Новый Массив;
	МожноОформитьИнвентаризациюИлиЗакрыть.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОформитьИнвентаризацию);
	Запрос.УстановитьПараметр("МожноОформитьИнвентаризациюИлиЗакрыть", МожноОформитьИнвентаризациюИлиЗакрыть);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДальнейшиеДействия = Новый Массив;
	Если Выборка.ВзаимодействиеЗавершено Тогда
		
	Иначе
		
		Если Выборка.МожноОформитьИнвентаризацию Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеИнвентаризацию);
		КонецЕсли;
		
		Если Выборка.МожноЗагрузитьОстатки Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки);
		КонецЕсли;
		
		Если Выборка.МожноЗакрыть Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;
	
КонецФункции

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризационнойОписиМДЛП(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	ПустойТипСообщения = Перечисления.ТипыСообщенийМДЛП.ПустаяСсылка();
	ПустаяОперация = Перечисления.ОперацииОбменаМДЛП.ПустаяСсылка();
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, ПустойТипСообщения, ПустаяОперация);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияИнвентаризационнойОписиМДЛП(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеИнвентаризацию);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.ИнвентаризационнаяОписьМДЛП,
		НСтр("ru = 'Инвентаризационная опись'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделИнвентаризация());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Ложь;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИнвентаризационнаяОписьМДЛПТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.ИнвентаризационнаяОписьМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(Метаданные.Документы.ИнвентаризационнаяОписьМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.ИнвентаризационнаяОписьТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать инвентаризационную опись МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьИнвентаризационнаяОписьМДЛП";
	ВозвращаемоеЗначение.КомандаСвязать                       = НСтр("ru = 'Связать с инвентаризационной описью МДЛП (%1)'");
	ВозвращаемоеЗначение.ИмяКомандыСвязать                    = "СвязатьИнвентаризационнаяОписьМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьИнвентаризационнаяОписьМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Инвентаризационная опись МДЛП не создана'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Инвентаризационная опись МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Инвентаризационная опись МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
