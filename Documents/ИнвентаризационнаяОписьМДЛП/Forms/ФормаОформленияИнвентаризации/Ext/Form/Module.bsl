
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Документ = Параметры.Документ;
	РежимПросмотра = Параметры.РежимПросмотра;
	
	ОбновитьДеревоДокументов();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИнвентаризацияПотребительскихУпаковокМДЛП"
	   И Параметр.ИнвентаризационнаяОпись = Документ Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьДеревоДокументовОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДокументПредставление Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ДокументПредставление = Строка_Создать() Тогда
			
			Если РежимПросмотра Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФормыДокумента = ТекущиеДанные.ДокументПолноеИмя + ".ФормаОбъекта";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Документ);
			
			ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.Документ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументПредставление.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ДеревоДокументов.Уровень", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументТип.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ДеревоДокументов.Уровень", 1, ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусДокумента.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеДокумента.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ДеревоДокументов.Документ",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДокументов.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ДеревоДокументов.Уровень", 1, ВидСравненияКомпоновкиДанных.Равно);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"ДеревоДокументов.Документ",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"РежимПросмотра", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#Область ОбновлениеДанных

&НаКлиенте
Процедура ОбновитьДеревоДокументовОтложенно()
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоДокументов()
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаДокументыИнвентаризации());
	ТекстыЗапроса.Добавить(ТекстЗапросаНовыеДокументыИнвентаризации());
	ТекстыЗапроса.Добавить(ТекстЗапросаСводныеДанные());
	ТекстыЗапроса.Добавить(ТекстЗапросаДеревоДокументов());
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ЗаполнитьДеревоДокументов(Результаты[Результаты.ВГраница()].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДокументыИнвентаризации()
	
	ШаблонТекстаЗапросаДокумента = "
	|ВЫБРАТЬ
	|	Документ.Ссылка               КАК Документ,
	|	ТИПЗНАЧЕНИЯ(Документ.Ссылка)  КАК ДокументТип
	|ИЗ
	|	#Документ КАК Документ
	|ГДЕ
	|	Документ.ИнвентаризационнаяОпись = &Документ
	|	И НЕ Документ.ПометкаУдаления
	|";
	
	ТекстОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстыЗапроса = Новый Массив;
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументИнвентаризацииМДЛП.Тип.Типы();
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		ТекстыЗапроса.Добавить(СтрЗаменить(ШаблонТекстаЗапросаДокумента, "#Документ", Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя()));
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ТекстОбъединитьВсе);
	ИнвентаризацияМДЛП.ДобавитьИмяВременнойТаблицыПоследнемуЗапросуПакета(ТекстЗапроса, "ДокументыИнвентаризации");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаНовыеДокументыИнвентаризации()
	
	Если Не РежимПросмотра Тогда
		
		ШаблонТекстаЗапросаДокумента = "
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО                                     КАК Документ,
		|	ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Документ.%1.ПустаяСсылка))  КАК ДокументТип
		|";
		
	Иначе
		
		ШаблонТекстаЗапросаДокумента = "
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО                                     КАК Документ,
		|	ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Документ.%1.ПустаяСсылка))  КАК ДокументТип
		|ГДЕ
		|	ЛОЖЬ
		|";
		
	КонецЕсли;
	
	ТекстОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстыЗапроса = Новый Массив;
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументИнвентаризацииМДЛП.Тип.Типы();
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		ТекстыЗапроса.Добавить(СтрШаблон(ШаблонТекстаЗапросаДокумента, Метаданные.НайтиПоТипу(ТипДокумента).Имя));
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ТекстОбъединитьВсе);
	ИнвентаризацияМДЛП.ДобавитьИмяВременнойТаблицыПоследнемуЗапросуПакета(ТекстЗапроса, "НовыеДокументыИнвентаризации");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСводныеДанные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДокументыИнвентаризации.Документ       КАК Документ,
	|	ДокументыИнвентаризации.ДокументТип    КАК ДокументТип
	|ПОМЕСТИТЬ СводныеДанные
	|ИЗ
	|	ДокументыИнвентаризации КАК ДокументыИнвентаризации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыИнвентаризации.Документ       КАК Документ,
	|	ДокументыИнвентаризации.ДокументТип    КАК ДокументТип
	|ИЗ
	|	НовыеДокументыИнвентаризации КАК ДокументыИнвентаризации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДеревоДокументов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СводныеДанные.ДокументТип                     КАК ДокументТип,
	|	СводныеДанные.Документ                        КАК Документ,
	|	СтатусыИнформирования.Статус                  КАК СтатусДокумента,
	|	СтатусыИнформирования.ДальнейшееДействие1     КАК ДальнейшееДействиеДокумента
	|ИЗ
	|	СводныеДанные КАК СводныеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СтатусыИнформированияМДЛП КАК СтатусыИнформирования
	|		ПО
	|			СтатусыИнформирования.Документ = СводныеДанные.Документ
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ДокументТип,
	|	Документ УБЫВ
	|ИТОГИ ПО
	|	ДокументТип
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДокументов(ИсходноеДерево)
	
	ИсходноеДерево.Колонки.Добавить("ДокументПредставление");
	ИсходноеДерево.Колонки.Добавить("ДокументПолноеИмя");
	ИсходноеДерево.Колонки.Добавить("Уровень");
	
	ПараметрыОбхода = ИнтеграцияМДЛП.ПараметрыОбходаДерева(ИсходноеДерево);
	Пока Истина Цикл
		
		ЭлементДерева = ИнтеграцияМДЛП.ПолучитьОчереднойЭлементДерева(ПараметрыОбхода);
		Если ЭлементДерева = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементДерева.ДокументПолноеИмя = Метаданные.НайтиПоТипу(ЭлементДерева.ДокументТип).ПолноеИмя();
		
		ЭлементДерева.Уровень = ЭлементДерева.Уровень();
		Если ЭлементДерева.Уровень = 1 Тогда
			
			Если ЗначениеЗаполнено(ЭлементДерева.Документ) Тогда
				ЭлементДерева.ДокументПредставление = ЭлементДерева.Документ;
			Иначе
				ЭлементДерева.ДокументПредставление = Строка_Создать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоДокументов");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция Строка_Создать()
	
	Возврат НСтр("ru = 'Создать'");
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
