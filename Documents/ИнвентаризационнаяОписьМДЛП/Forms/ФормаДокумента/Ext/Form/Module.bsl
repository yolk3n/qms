
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПодключения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДоступноОснование = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	Элементы.Основание.Видимость = ДоступноОснование;
	Элементы.ТекстИнвентаризационнаяОписьТоваров.Видимость = ДоступноОснование;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ИнвентаризацияПотребительскихУпаковокМДЛП"
	   И Параметр.ИнвентаризационнаяОпись = Объект.Ссылка Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьСтатусОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Основание = НовыйОбъект;
		Записать();
		ОбновитьТекстИнвентаризационнаяОписьТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.ИнвентаризационнаяОписьМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусУведомления();
	ОбновитьТекстИнвентаризационнаяОписьТоваров();
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_ИнвентаризационнаяОписьМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗагрузитьОстатки" Тогда
		СтандартнаяОбработка = Ложь;
		ЗагрузитьОстаткиСЗаписью();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьИнвентаризацию" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОформленияИнвентаризации();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Закрыть" Тогда
		Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Завершено");
		Объект.ДатаОкончания = ОбщегоНазначенияКлиент.ДатаСеанса();
		Модифицированность = Истина;
		ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуОформленияДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуОформленияИнвентаризации" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОформленияИнвентаризации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьДокументИнвентаризационнаяОпись();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ОбновитьТекстИнвентаризационнаяОписьТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьДокументИнвентаризационнаяОпись();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнвентаризационнаяОписьТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если "ОформитьИнвентаризационнуюОпись" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		СоздатьДокументИнвентаризационнаяОпись();
		
	ИначеЕсли "СвязатьСИнвентаризационнойОписью" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьДокументИнвентаризационнаяОпись();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьЗагрузкуОстатковКоменда(Команда)
	
	ОтменитьЗагрузкуОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзменение = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	Типы = Объект.Ссылка.Метаданные().Реквизиты.Основание.Тип.Типы();
	Для Каждого Тип Из Типы Цикл
		МетаданныеОснования = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеОснования <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОснования) Тогда
			ЕстьПравоСозданияИнвентаризационнойОписиТоваров = ЕстьПравоСозданияИнвентаризационнойОписиТоваров Или ПравоДоступа("Добавление", МетаданныеОснования);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСтатусУведомления();
	ОбновитьТекстИнвентаризационнаяОписьТоваров();
	ОбновитьТекстДекорацииГраницаЗагрузкиОстатков();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
	РедактированиеФормыНедоступно = Ложь;
	Если Не ЕстьПравоИзменение Или Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Завершено Тогда
		РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	ИменаЭлементовТолькоПросмотр = Новый Массив;
	ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Организация.Имя);
	ИменаЭлементовТолькоПросмотр.Добавить(Элементы.МестоДеятельности.Имя);
	ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ДатаНачала.Имя);
	ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ДатаОкончания.Имя);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовТолькоПросмотр Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", РедактированиеФормыНедоступно);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОткрытьФормуОформленияДокументов",
		"Доступность",
		Объект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.КОбработке);
	
КонецПроцедуры

#Область ДокументыОснование

&НаСервере
Процедура ОбновитьТекстИнвентаризационнаяОписьТоваров()
	
	Строки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		
		КоличествоДокументов = ИнтеграцияМДЛППереопределяемый.ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект);
		
		Если ЕстьПравоСозданияИнвентаризационнойОписиТоваров Тогда
			Строки.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить инвентаризационную опись'"),,,, "ОформитьИнвентаризационнуюОпись"));
			Строки.Добавить("    ");
		КонецЕсли;
		
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Связать с инвентаризационной описью (%1)'"), КоличествоДокументов),
				,
				,
				,
				"СвязатьСИнвентаризационнойОписью"));
		
	КонецЕсли;
	
	ТекстИнвентаризационнаяОписьТоваров = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИнвентаризационнаяОпись()
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуСозданияДокументаИнвентаризационнаяОписьТоваровНаОсновании", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияДокументаИнвентаризационнаяОписьТоваровНаОсновании(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуСозданияДокументаИнвентаризационнаяОписьТоваровНаОсновании(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументИнвентаризационнаяОпись()
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуВыбораДокументаИнвентаризационнаяОписьТоваров(
		ЭтотОбъект, Объект, Новый ОписаниеОповещения("ПослеВыбораДокументаИнвентаризационнаяОпись", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаИнвентаризационнаяОпись(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Если ИнтеграцияМДЛПВызовСервера.ЕстьРасхожденияМеждуУведомлениемИОснованием(Объект.Ссылка, ВыбранныйДокумент) Тогда
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ДокументИнвентаризационнаяОпись", ВыбранныйДокумент);
			
			Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОРасхождениях", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='В инвентаризационной описи МДЛП есть расхождения с выбранной инвентаризационной описью. Продолжить выбор?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьВыборДокументаИнвентаризационнаяОпись(ВыбранныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОРасхождениях(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборДокументаИнвентаризационнаяОпись(ДополнительныеПараметры.ДокументИнвентаризационнаяОпись);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаИнвентаризационнаяОпись(ДокументИнвентаризационнаяОпись)
	
	Если ЗначениеЗаполнено(ДокументИнвентаризационнаяОпись) Тогда
		
		Объект.Основание = ДокументИнвентаризационнаяОпись;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьТекстИнвентаризационнаяОписьТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОстатков

&НаКлиенте
Процедура ЗагрузитьОстаткиСЗаписью()
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьОстатки_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстатки_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстатки()
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельности));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьОстатки_ПослеПопыткиАвторизации", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ПолучитьТекущийКлючСессии(ДоступныйТранспорт[0].ПараметрыПодключения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстатки_ПослеПопыткиАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Если РезультатАвторизации.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатАвторизации.ОписаниеОшибки;
	КонецЕсли;
	
	ПараметрыПодключения = РезультатАвторизации.ТранспортныйМодуль;
	
	ОтменитьЗагрузкуОстатков();
	
	ОтобразитьВыполнениеЗагрузкиОстатков("Начало");
	
	ПодключитьОбработчикОжидания("ЗагрузитьОстаткиПотребительскихУпаковок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстаткиПотребительскихУпаковок()
	
	ИдентификаторМестаДеятельности = ИдентификаторМестаДеятельности(Объект.МестоДеятельности);
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыЗагрузкиОстатковПотребительскихУпаковок(Строка(УникальныйИдентификатор));
	ПараметрыМетода.Отбор.ИдентификаторМестаДеятельности = ИдентификаторМестаДеятельности;
	ПараметрыМетода.Отбор.НачалоПериодаВыполненияПоследнейОперации = ИнтеграцияМДЛПВызовСервера.ПолучитьГраницуЗагрузкиОстатковПотребительскихУпаковок(ИдентификаторМестаДеятельности);
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемЗагрузкиОстатков", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуОстатковПотребительскихУпаковок", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.НачатьЗагрузкуОстатковПотребительскихУпаковок(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуОстатковПотребительскихУпаковок(Результат, Контекст) Экспорт
	
	ИдентификаторЗаданияЗагрузкиОстатков = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОтобразитьВыполнениеЗагрузкиОстатков("Конец");
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		
		Информация = ОбработатьЗагрузкуОстатковПотребительскихУпаковокНаСервере(АдресРезультатаМетодаАПИ);
		ОтобразитьВыполнениеЗагрузкиОстатков("Конец", Информация);
		
	КонецЕсли;
	
	ОтобразитьВыполнениеЗагрузкиОстатков("Начало");
	
	ПодключитьОбработчикОжидания("ЗагрузитьОстаткиГрупповыхУпаковок", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьЗагрузкуОстатковПотребительскихУпаковокНаСервере(Знач АдресРезультата)
	
	Информация = Новый Структура;
	Информация.Вставить("КоличествоЗаписей"            , 0);
	Информация.Вставить("КоличествоОбработанныхЗаписей", 0);
	Информация.Вставить("ОшибкиЗаписей"                , Новый Массив);
	Информация.Вставить("ДатаАктуальности"             , Дата(1, 1, 1));
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		ЗаполнитьЗначенияСвойств(Информация, Данные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОстаткиГрупповыхУпаковок()
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыЗагрузкиОстатковГрупповыхУпаковок();
	ПараметрыМетода.Отбор.ИдентификаторМестаДеятельности = ИдентификаторМестаДеятельности(Объект.МестоДеятельности);
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемЗагрузкиОстатков", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуОстатковГрупповыхУпаковок", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.НачатьЗагрузкуОстатковГрупповыхУпаковок(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуОстатковГрупповыхУпаковок(Результат, Контекст) Экспорт
	
	ИдентификаторЗаданияЗагрузкиОстатков = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОтобразитьВыполнениеЗагрузкиОстатков("Конец");
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		
		Информация = ОбработатьЗагрузкуОстатковГрупповыхУпаковокНаСервере(АдресРезультатаМетодаАПИ);
		ОтобразитьВыполнениеЗагрузкиОстатков("Конец", Информация);
		
	Иначе
		ОтобразитьВыполнениеЗагрузкиОстатков("Конец");
	КонецЕсли;
	
	Если Модифицированность Тогда
		// Изменение реквизита СостояниеПодтверждения выполняется только если ранее он не был уже установлен в значение Завершено.
		Если Объект.СостояниеПодтверждения <> ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Завершено") Тогда
			Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОформитьИнвентаризацию");
			ОбновитьСтатус();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьЗагрузкуОстатковГрупповыхУпаковокНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		Информация = Новый Структура;
		Информация.Вставить("КоличествоЗаписей"            , 0);
		Информация.Вставить("КоличествоОбработанныхЗаписей", 0);
		Информация.Вставить("ОшибкиЗаписей"                , Новый Массив);
		Информация.Вставить("ДатаАктуальности"             , Дата(1, 1, 1));
		
		ЗаполнитьЗначенияСвойств(Информация, Данные);
		
		Модифицированность = Истина;
		
	Иначе
		Информация = Неопределено;
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции


&НаСервере
Процедура ОтменитьЗагрузкуОстатков()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияЗагрузкиОстатков) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияЗагрузкиОстатков);
		ИдентификаторЗаданияЗагрузкиОстатков = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемЗагрузкиОстатков(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияЗагрузкиОстатков = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеЗагрузкиОстатков(Состояние, Информация = Неопределено)
	
	Если Состояние = "Начало" Тогда
		
		Элементы.ДекорацияГраницаЗагрузкиОстатков.Видимость = ЗначениеЗаполнено(Элементы.ДекорацияГраницаЗагрузкиОстатков.Заголовок);
		Элементы.ОтменитьЗагрузкуОстатков.Видимость = Истина;
		
		Элементы.СтатусПредставление.Доступность = Ложь;
		Элементы.Организация.Доступность = Ложь;
		Элементы.МестоДеятельности.Доступность = Ложь;
		Элементы.ДекорацияОткрытьФормуОформленияДокументов.Доступность = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Загрузка остатков'");
		ПояснениеОповещения = НСтр("ru = 'Выполнение загрузки остатков запущено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Элементы.ДекорацияГраницаЗагрузкиОстатков.Видимость = Ложь;
		Элементы.ОтменитьЗагрузкуОстатков.Видимость = Ложь;
		
		Элементы.СтатусПредставление.Доступность = Истина;
		Элементы.Организация.Доступность = Истина;
		Элементы.МестоДеятельности.Доступность = Истина;
		Элементы.ДекорацияОткрытьФормуОформленияДокументов.Доступность = Истина;
		
		ТекстОповещения = НСтр("ru = 'Загрузка остатков'");
		ПоясненияОповещения = Новый Массив;
		ПоясненияОповещения.Добавить(НСтр("ru = 'Выполнение загрузки остатков завершено'"));
		
		Если ЗначениеЗаполнено(Информация) Тогда
			
			Если ЗначениеЗаполнено(Информация.КоличествоЗаписей) Тогда
				ПоясненияОповещения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обработано записей %1 из %2'"),
						Информация.КоличествоОбработанныхЗаписей,
						Информация.КоличествоЗаписей));
			КонецЕсли;
			Если ЗначениеЗаполнено(Информация.ДатаАктуальности) Тогда
				ПоясненияОповещения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата актуальности: %1'"),
						Формат(Информация.ДатаАктуальности, "ДЛФ=DT")));
			КонецЕсли;
			
			Для Каждого Ошибка Из Информация.ОшибкиЗаписей Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
			КонецЦикла;
			
		КонецЕсли;
		
		ПояснениеОповещения = СтрСоединить(ПоясненияОповещения, Символы.ПС);
		
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Важное, Строка(Новый УникальныйИдентификатор));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторМестаДеятельности(МестоДеятельности)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоДеятельности, "Идентификатор");
	
КонецФункции

&НаСервере
Процедура ОбновитьТекстДекорацииГраницаЗагрузкиОстатков()
	
	ГраницаЗагрузкиОстатков = ИнтеграцияМДЛПВызовСервера.ПолучитьГраницуЗагрузкиОстатковПотребительскихУпаковок(ИдентификаторМестаДеятельности(Объект.МестоДеятельности));
	Если ЗначениеЗаполнено(ГраницаЗагрузкиОстатков) Тогда
		ЗаголовокДекорации = НСтр("ru = 'Выполняется загрузка остатков начиная с %1'");
		ЗаголовокДекорации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДекорации, Формат(ГраницаЗагрузкиОстатков, "ДЛФ=D"));
		Элементы.ДекорацияГраницаЗагрузкиОстатков.Заголовок = ЗаголовокДекорации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеУведомлений

&НаКлиенте
Процедура ОткрытьФормуОформленияИнвентаризации() Экспорт
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуОформленияИнвентаризации_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОформленияИнвентаризации_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбновитьСтатус(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Документ", Объект.Ссылка);
	ПараметрыПроверки.Вставить("РежимПросмотра", Не ЕстьПравоИзменение Или Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Завершено"));
	
	ОткрытьФорму("Документ.ИнвентаризационнаяОписьМДЛП.Форма.ФормаОформленияИнвентаризации", ПараметрыПроверки, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСтатуса

&НаКлиенте
Процедура ОбновитьСтатусОтложенно()
	
	ОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатус(Отказ = Ложь)
	
	НачатьТранзакцию();
	Попытка
		
		Если Модифицированность Тогда
			Если Не Записать() Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
			КонецЕсли;
		КонецЕсли;
		
		НовыйСтатус = Документы.ИнвентаризационнаяОписьМДЛП.ОбновитьСтатус(Объект.Ссылка);
		
		Если НовыйСтатус = Перечисления.СтатусыИнформированияМДЛП.Закрыто Тогда
			
			Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Завершено;
			Объект.ДатаОкончания = ТекущаяДатаСеанса();
			
			Если Не Записать() Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить статус документа: %1 по причине: %2'"),
			Объект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
