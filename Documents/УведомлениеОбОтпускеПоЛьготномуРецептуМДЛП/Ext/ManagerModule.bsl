
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление состояния подтверждения строк документа.
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ Тогда
		
		ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(Сообщение);
		ОбъектXDTO = ИнтеграцияМДЛП.ПолучитьОбъектXDTOИзТекстаСообщения(ТекстСообщения);
		
		Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
			ДанныеДокумента = ОбъектXDTO.skzkm_recipe;
		ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ Тогда
			ДанныеДокумента = ОбъектXDTO.skzkm_code_error_recipe;
		КонецЕсли;
		
		СписокТоваров = ДанныеДокумента.order_details.union;
		Для Каждого Данные Из СписокТоваров Цикл
			
			НомерУпаковки = Данные.sgtin;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
				Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ Тогда
					Строка.Отклонено = Истина;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Новый Структура("КодОшибки, ТекстОшибки", 0, НСтр("ru = 'Ошибка'")));
				Иначе
					Строка.Отклонено = Ложь;
					Строка.ПричинаОтказа = "";
				КонецЕсли;
			Иначе
				Строка.Отклонено = Истина;
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
		
		ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(Сообщение);
		ДанныеДокумента = ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(ТекстСообщения, Ложь);
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
		КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
		
		СписокТоваров = ДанныеДокумента.Марки;
		Для Индекс = 0 По СписокТоваров.ВГраница() Цикл
			
			Данные = СписокТоваров[Индекс];
			
			НомерУпаковки = Данные.НомерКИЗ;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[Индекс] = Неопределено Тогда
				Строка.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
				Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ Тогда
					Строка.Отклонено = Истина;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Новый Структура("КодОшибки, ТекстОшибки", 0, НСтр("ru = 'Ошибка'")));
				Иначе
					Строка.Отклонено = Ложь;
					Строка.ПричинаОтказа = "";
				КонецЕсли;
			Иначе
				Строка.Отклонено = Истина;
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[Индекс]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(Сообщение);
		ОбъектXDTO = ИнтеграцияМДЛП.ПолучитьОбъектXDTOИзТекстаСообщения(ТекстСообщения);
		
		ДанныеДокумента = ОбъектXDTO.recipe;
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
		КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
		
		СписокТоваров = ДанныеДокумента.order_details.union;
		Для Каждого Данные Из СписокТоваров Цикл
			
			НомерУпаковки = Данные.sgtin;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
				Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ Тогда
					Строка.Отклонено = Истина;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Новый Структура("КодОшибки, ТекстОшибки", 0, НСтр("ru = 'Ошибка'")));
				Иначе
					Строка.Отклонено = Ложь;
					Строка.ПричинаОтказа = "";
				КонецЕсли;
			Иначе
				Строка.Отклонено = Истина;
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Расчет состояния подтверждения документа.
	СостоянияПодтвержденияСтрок = Новый Структура("ЕстьОжидающиеОтвета, ЕстьПринятыеСОтклонениемОтТребований, ЕстьПринятые, ЕстьОтклоненные", Ложь, Ложь, Ложь, Ложь);
	Для Каждого Строка Из ДокументОбъект.НомераУпаковок Цикл
		
		ПринятоСОтклонениемОтТребований = Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований;
		ПринятоГИСМ                     = Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		ОтклоненоГИСМ                   = Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		
		Если Не ПринятоСОтклонениемОтТребований И Не ПринятоГИСМ И Не ОтклоненоГИСМ Тогда
			СостоянияПодтвержденияСтрок.ЕстьОжидающиеОтвета = Истина;
		ИначеЕсли ПринятоСОтклонениемОтТребований Тогда
			СостоянияПодтвержденияСтрок.ЕстьПринятыеСОтклонениемОтТребований = Истина;
		ИначеЕсли ПринятоГИСМ Тогда
			СостоянияПодтвержденияСтрок.ЕстьПринятые = Истина;
		ИначеЕсли ОтклоненоГИСМ Тогда
			СостоянияПодтвержденияСтрок.ЕстьОтклоненные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
	
	ЕстьПринятые   = СостоянияПодтвержденияСтрок.ЕстьПринятыеСОтклонениемОтТребований Или СостоянияПодтвержденияСтрок.ЕстьПринятые;
	ЕстьНеПринятые = СостоянияПодтвержденияСтрок.ЕстьОтклоненные Или СостоянияПодтвержденияСтрок.ЕстьОжидающиеОтвета;
	Если ЕстьПринятые И ЕстьНеПринятые Тогда
		НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоЧастично;
	ИначеЕсли ЕстьПринятые Тогда
		Если СостоянияПодтвержденияСтрок.ЕстьПринятыеСОтклонениемОтТребований И СостоянияПодтвержденияСтрок.ЕстьПринятые Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований;
		ИначеЕсли СостоянияПодтвержденияСтрок.ЕстьПринятыеСОтклонениемОтТребований Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований;
		ИначеЕсли СостоянияПодтвержденияСтрок.ЕстьПринятые Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		КонецЕсли;
	ИначеЕсли ЕстьНеПринятые Тогда
		Если СостоянияПодтвержденияСтрок.ЕстьОтклоненные И СостоянияПодтвержденияСтрок.ЕстьОжидающиеОтвета Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПереданоЧастично;
		ИначеЕсли СостоянияПодтвержденияСтрок.ЕстьОжидающиеОтвета Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СостоянияПодтвержденияСтрок.ЕстьОтклоненные Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = НовоеСостояние;
	
	// Очистка ШтрихкодBase64 в принятых строках.
	Для Каждого Строка Из ДокументОбъект.НомераУпаковок Цикл
		Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ
		 Или Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований Тогда
			Строка.ШтрихкодBase64 = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтпускеПоЛьготномуРецепту(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	ПередачаСведенийЧерезСКЗКМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ПередачаСведенийЧерезСКЗКМ");
	Если ПередачаСведенийЧерезСКЗКМ = Истина Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ);
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ);
		Операция.КвитанцияПринят = Ложь;
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ);
		Операция.КвитанцияПринят = Ложь;
	Иначе
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептам);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОбОтпускеПоЛьготномуРецепту(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеСтатусЗаданияОтРВ);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП,
		НСтр("ru = 'Отпуск по льготным рецептам'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделПродажи());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 30;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОбОтпускеПоЛьготномуРецептуТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОбОтпускеПоЛьготномуРецептуТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОбОтпускеПоЛьготномуРецепту(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
		Возврат ОпределитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ Тогда
		Возврат ОпределитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
		ЗагрузитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ Тогда
		ЗагрузитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление об отпуске по льготному рецепту МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОбОтпускеПоЛьготномуРецептуМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОбОтпускеПоЛьготномуРецептуМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление об отпуске по льготному рецепту МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление об отпуске по льготному рецепту МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление об отпуске по льготному рецепту МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОбОтпускеПоЛьготномуРецепту(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептам;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена     КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                           КАК Ссылка,
	|	Шапка.Основание                        КАК Основание,
	|	Шапка.Дата                             КАК Дата,
	|	Шапка.МестоДеятельности.Идентификатор  КАК ИдентификаторОрганизации,
	|	Шапка.НомерДокумента                   КАК НомерДокумента,
	|	Шапка.ДатаДокумента                    КАК ДатаДокумента,
	|	Шапка.СерияДокумента                   КАК СерияДокумента,
	|	Шапка.ПередачаСведенийЧерезСКЗКМ       КАК ПередачаСведенийЧерезСКЗКМ
	|ИЗ
	|	Документ.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Передано),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПереданоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                    КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                        КАК НомерКиЗ,
	|	НомераУпаковок.ДоляОтВторичнойУпаковки         КАК ДоляОтВторичнойУпаковки,
	|	НомераУпаковок.КоличествоПервичныхУпаковок     КАК КоличествоПервичныхУпаковок,
	|	Товары.КоличествоПервичныхУпаковокВоВторичной  КАК КоличествоПервичныхУпаковокВоВторичной
	|ИЗ
	|	Документ.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Передано),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	
	Если Не Шапка.Следующий() Или Товары.Количество() = 0 Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	Если Не Шапка.ПередачаСведенийЧерезСКЗКМ Тогда
		ТекстСообщения = УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП(Шапка, Товары, СообщениеКПередаче);
	Иначе
		ТекстСообщения = УведомлениеОбОтпускеПоЛьготномуРецептуСКЗКМ(Шапка, Товары, СообщениеКПередаче);
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ;
	КонецЕсли;
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	СообщениеКПередаче.ПередачаСведенийЧерезСКЗКМ = Шапка.ПередачаСведенийЧерезСКЗКМ;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП(Шапка, Товары, СообщениеКПередаче)
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "recipe";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_series", Шапка.СерияДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.order_details, "union") Тогда
			НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sold_part") Тогда
				Если НоваяСтрока.Тип().Свойства.Получить("sold_part").Тип.Имя = "decimal_type" Тогда
					Если ЗначениеЗаполнено(Строка.ДоляОтВторичнойУпаковки) Тогда
						ДоляУпаковки = Строка.ДоляОтВторичнойУпаковки;
					ИначеЕсли ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковок) И ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковокВоВторичной) Тогда
						ДоляУпаковки = Окр(Строка.КоличествоПервичныхУпаковок / Строка.КоличествоПервичныхУпаковокВоВторичной, 5);
					Иначе
						ДоляУпаковки = 0;
					КонецЕсли;
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sold_part", ДоляУпаковки, СообщениеКПередаче);
				ИначеЕсли ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковок) И ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковокВоВторичной) Тогда
					ДоляУпаковки = СтрШаблон("%1/%2", Формат(Строка.КоличествоПервичныхУпаковок, "ЧГ="), Формат(Строка.КоличествоПервичныхУпаковокВоВторичной, "ЧГ="));
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sold_part", ДоляУпаковки, СообщениеКПередаче);
				КонецЕсли;
			КонецЕсли;
			Уведомление.order_details.union.Добавить(НоваяСтрока);
		Иначе
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция УведомлениеОбОтпускеПоЛьготномуРецептуСКЗКМ(Шапка, Товары, СообщениеКПередаче)
	
	РеквизитыДокумента = ТранспортМДЛПРВКлиентСервер.ПустаяСтруктураДынныхРецепта();
	РеквизитыДокумента.НомерДокумента = Шапка.НомерДокумента;
	РеквизитыДокумента.ДатаДокумента = Шапка.ДатаДокумента;
	РеквизитыДокумента.СерияДокумента = Шапка.СерияДокумента;
	
	Для Каждого Строка Из Товары Цикл
		ДанныеМарки = ТранспортМДЛПРВКлиентСервер.ПустаяСтруктураМарки();
		ДанныеМарки.НомерКИЗ = Строка.НомерКИЗ;
		Если ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковок) И ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковокВоВторичной) Тогда
			ДанныеМарки.ДоляОтВторичнойУпаковки = СтрШаблон(
				"%1/%2",
				Формат(Строка.КоличествоПервичныхУпаковок, "ЧГ="),
				Формат(Строка.КоличествоПервичныхУпаковокВоВторичной, "ЧГ="));
		КонецЕсли;
		РеквизитыДокумента.Марки.Добавить(ДанныеМарки);
	КонецЦикла;
	
	Возврат ТранспортМДЛПКлиентСервер.ПреобразоватьЗначениеВJSON(РеквизитыДокумента);
	
КонецФункции

Функция ОпределитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента)
	
	ИнформацияОбУстройстве = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "device_info");
	ИдентификаторЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОбУстройстве, "skzkm_report_id");
	ИдентификаторМестаДеятельности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМДЛП.Исходящее);
	Отбор.Вставить("Операция", Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ);
	Отбор.Вставить("ИдентификаторКвитанции", ИдентификаторЗапроса);
	Сообщение = ИнтеграцияМДЛП.НайтиСообщениеОбмена(Отбор);
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ВладелецФайла"));
	КонецЕсли;
	
	СерийныйНомерМБ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОбУстройстве, "device_id");
	
	Если ИнтеграцияМДЛП.РегистраторИспользуетсяВАвтономномРежиме(СерийныйНомерМБ) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	КонецЕсли;
	
	// По данным, полученным из МДЛП, определяем ссылку на уведомление,
	// если сообщение по каким-то причиным не было зафиксировано в базе.
	ДатаОперации                   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	НомерДокумента                 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
	ДанныеПотребительскихУпаковок  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "union", Новый Массив);
	
	НомераПотребительскихУпаковок = Новый ТаблицаЗначений;
	НомераПотребительскихУпаковок.Колонки.Добавить("НомерКИЗ"                              , Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
	НомераПотребительскихУпаковок.Колонки.Добавить("КоличествоПервичныхУпаковокВоВторичной", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	НомераПотребительскихУпаковок.Колонки.Добавить("КоличествоПервичныхУпаковок"           , Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Для Каждого ДанныеУпаковки Из ДанныеПотребительскихУпаковок Цикл
		НомерУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "sgtin");
		Если ЗначениеЗаполнено(НомерУпаковки) Тогда
			Строка = НомераПотребительскихУпаковок.Добавить();
			Строка.НомерКИЗ = НомерУпаковки;
			ЧастичноеВыбытие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "sold_part", "");
			Если Не ПустаяСтрока(ЧастичноеВыбытие) Тогда
				Части = СтрРазделить(ЧастичноеВыбытие, "/");
				Строка.КоличествоПервичныхУпаковокВоВторичной = Число(Части[1]);
				Строка.КоличествоПервичныхУпаковок = Число(Части[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераПотребительскихУпаковок.НомерКИЗ                                КАК НомерКИЗ,
	|	НомераПотребительскихУпаковок.КоличествоПервичныхУпаковокВоВторичной  КАК КоличествоПервичныхУпаковокВоВторичной,
	|	НомераПотребительскихУпаковок.КоличествоПервичныхУпаковок             КАК КоличествоПервичныхУпаковок,
	|	НомераПотребительскихУпаковок.КоличествоПервичныхУпаковокВоВторичной > 0
	|		И НомераПотребительскихУпаковок.КоличествоПервичныхУпаковок > 0   КАК ИскатьПоДолям
	|ПОМЕСТИТЬ НомераПотребительскихУпаковок
	|ИЗ
	|	&НомераПотребительскихУпаковок КАК НомераПотребительскихУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.Ссылка                                 КАК Документ,
	|	Упаковки.Ссылка.Дата                            КАК Дата,
	|	Упаковки.НомерКИЗ                               КАК НомерКИЗ,
	|	ВЫБОР
	|		КОГДА Упаковки.Ссылка.НомерДокумента = &НомерДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК НомерДокументаСовпадает,
	|	ВЫБОР
	|		КОГДА НомераПотребительскихУпаковок.ИскатьПоДолям
	|			ТОГДА Товары.КоличествоПервичныхУпаковокВоВторичной = НомераПотребительскихУпаковок.КоличествоПервичныхУпаковокВоВторичной
	|				И Упаковки.КоличествоПервичныхУпаковок = НомераПотребительскихУпаковок.КоличествоПервичныхУпаковок
	// Доли упаковок (простая дробь) могут быть сокращены. Переводим простую дробь в десятичную (число не может быть больше 1) с округлением до четырех знаков после запятой.
	|			ИЛИ ВЫРАЗИТЬ(Упаковки.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(5, 4)) =
	|				ВЫРАЗИТЬ(НомераПотребительскихУпаковок.КоличествоПервичныхУпаковок / НомераПотребительскихУпаковок.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(5, 4))
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                           КАК ДолиСовпадают,
	|	ВЫБОР
	|		КОГДА Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК УпаковкаПринятаРанее
	|ПОМЕСТИТЬ УпаковкиВДокументах
	|ИЗ
	|	НомераПотребительскихУпаковок КАК НомераПотребительскихУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП.НомераУпаковок КАК Упаковки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|					Документ.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП.Товары КАК Товары
	|				ПО
	|					Упаковки.Ссылка = Товары.Ссылка
	|					И Упаковки.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|		ПО
	|			Упаковки.НомерКИЗ = НомераПотребительскихУпаковок.НомерКИЗ
	|ГДЕ
	|	Упаковки.Ссылка.МестоДеятельности.Идентификатор = &ИдентификаторМестаДеятельности
	|	И Упаковки.Ссылка.Дата <= &ДатаОперации
	|	И Упаковки.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиВДокументах.Документ                        КАК Документ,
	|	УпаковкиВДокументах.Дата                            КАК Дата,
	|	МАКСИМУМ(УпаковкиВДокументах.УпаковкаПринятаРанее)  КАК ВДокументеЕстьУпаковкиПринятыеРанее
	|ИЗ
	|	УпаковкиВДокументах КАК УпаковкиВДокументах
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиВДокументах.Документ,
	|	УпаковкиВДокументах.Дата,
	|	УпаковкиВДокументах.НомерДокументаСовпадает
	|ИМЕЮЩИЕ
	// Все упаковки из сообщения должны быть в документе.
	// Доли упаковок должны совпадать или быть неуказаными.
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиВДокументах.НомерКИЗ) = &КоличествоПотребительскихУпаковок
	|	И МИНИМУМ(УпаковкиВДокументах.ДолиСовпадают) = ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	// В первую очередь подходит документ, в котором номер документа совпадает с номером документа из сообщения.
	// Во вторую очередь подходит документ, в котором еще не было принято упаковок из сообщения.
	// В третью очередь подходит документ более поздний по моменту времени.
	|	НомерДокументаСовпадает УБЫВ,
	|	ВДокументеЕстьУпаковкиПринятыеРанее ВОЗР,
	|	Дата УБЫВ,
	|	Документ УБЫВ
	|");
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"                , КонечныеСостояния);
	Запрос.УстановитьПараметр("ИдентификаторМестаДеятельности"   , ИдентификаторМестаДеятельности);
	Запрос.УстановитьПараметр("НомераПотребительскихУпаковок"    , НомераПотребительскихУпаковок);
	Запрос.УстановитьПараметр("КоличествоПотребительскихУпаковок", НомераПотребительскихУпаковок.Количество());
	Запрос.УстановитьПараметр("ДатаОперации"                     , ДатаОперации);
	Запрос.УстановитьПараметр("НомерДокумента"                   , НомерДокумента);
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Если Не ЗначениеЗаполнено(ДокументыСУпаковками) Тогда
		ДокументыСУпаковками.Добавить(ПолучитьСсылку());
	КонецЕсли;
	
	Возврат ДокументыСУпаковками;
	
КонецФункции

Процедура ЗагрузитьУведомлениеОбОтпускеПоЛьготномуРецепту(ДанныеДокумента, ДокументСсылка)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
	ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
	СерияДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_series");
	
	Документ = СоздатьДокумент();
	Документ.УстановитьСсылкуНового(ДокументСсылка);
	Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
	Документ.НомерДокумента = НомерДокумента;
	Документ.ДатаДокумента = ДатаДокумента;
	Документ.СерияДокумента = СерияДокумента;
	Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	Документ.ПередачаСведенийЧерезСКЗКМ = Истина;
	Документ.ДанныеПолученыИзМДЛП = Истина;
	
	Для Каждого Товар Из ДанныеДокумента.order_details.union Цикл
		
		КоличествоПервичныхУпаковокВоВторичной = 0;
		КоличествоПервичныхУпаковок = 0;
		
		ЧастичноеВыбытие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part", "");
		Если Не ПустаяСтрока(ЧастичноеВыбытие) Тогда
			Части = СтрРазделить(ЧастичноеВыбытие, "/");
			КоличествоПервичныхУпаковокВоВторичной = Число(Части[1]);
			КоличествоПервичныхУпаковок = Число(Части[0]);
		КонецЕсли;
		
		GTIN = Лев(Товар.sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN", GTIN));
		СтрокаТовара = Неопределено;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
				СтрокаТовара = НайденныеСтроки[0];
			Иначе
				Для Каждого Строка Из НайденныеСтроки Цикл
					Если Строка.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной Тогда
						СтрокаТовара = Строка;
						Прервать;
					КонецЕсли;
					Если СтрокаТовара = Неопределено И Строка.КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
						СтрокаТовара = Строка;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаТовара <> Неопределено Тогда
					СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если СтрокаТовара = Неопределено Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной;
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
		СтрокаУпаковки.КоличествоПервичныхУпаковок = КоличествоПервичныхУпаковок;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОВыбытии(Документ);
	
	РезультатОбработки = ДанныеДокумента.Квитанция.result.operation_result;
	Если РезультатОбработки = "Accepted" Или РезультатОбработки = "Partial" Тогда
		Документ.Проведен = Истина;
		// Упаковки будут зарезервированы при проведении
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	Иначе
		// Резервировать не требуется, так как отказано в регистрации сведений.
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыМДЛП.ЗарегистрироватьДокументыДляЗаполненияМестДеятельности(ПустаяСсылка().Метаданные().ПолноеИмя(), Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьМестаДеятельностиВДокументах(ПустаяСсылка().Метаданные().ПолноеИмя(), Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли