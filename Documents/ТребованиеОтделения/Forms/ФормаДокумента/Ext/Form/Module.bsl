
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	ЭлектроннаяПодписьБольничнаяАптека.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаЭлектронныеПодписи);
	// Конец ЭлектроннаяПодпись
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	ИспользоватьПричиныОтменыТребованийОтделений = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыТребованийОтделений");
	Элементы.ТоварыГруппаОтменено.Видимость = ИспользоватьПричиныОтменыТребованийОтделений;
	Элементы.ТоварыОтмененоПричиныОтменыНеИспользуются.Видимость = Не ИспользоватьПричиныОтменыТребованийОтделений;
	
	ИспользоватьСтатусыДокумента = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Объект.Ссылка);
	РазрешеноРучноеИзменениеСтатуса = ОбщегоНазначенияБольничнаяАптека.РазрешеноРучноеИзменениеСтатусаОбъекта(Объект.Ссылка);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Статус",
		"Доступность",
		РазрешеноРучноеИзменениеСтатуса);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыТребованийОтделений.ПустаяСсылка();
	КонецЕсли;
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СкрытьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрытьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументПоступления(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборОписанийТоваров(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
	// Если документ проводится, предложим дозаполнить данные, если они некорректны
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.КВыполнению")
		 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.Исполнен")
		 ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.Закрыт") Тогда
			ЗаполнитьПустыеДатыПоступления();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыТребованийОтделений.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьТекущееСостояниеСервер();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьЗавершение", ЭтотОбъект);
	МожноИзменитьДокумент(Оповещение);
	
КонецПроцедуры

// Продолжение процедуры Изменить.
//
// Параметры:
//  МожноИзменить - Булево - признак того, что изменять документ разрешено.
//
&НаКлиенте
Процедура ИзменитьЗавершение(МожноИзменить, ДополнительныеПараметры) Экспорт
	
	Если МожноИзменить = Истина Тогда
		
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "Товары"
#Область Товары

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезРазрезовУчета", Истина);
	Если ЗначениеЗаполнено(Объект.ГруппаПКУ) Тогда
		ПараметрыПодбора.Вставить("Отбор", Новый Структура("ГруппаПКУ", Объект.ГруппаПКУ));
		ПараметрыПодбора.Вставить("ОтборТолькоПросмотр", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ГруппаПКУ"));
	КонецЕсли;
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборФОЛС(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	Если ЗначениеЗаполнено(Объект.ГруппаПКУ) Тогда
		ПараметрыПодбора.Вставить("Отбор", Новый Структура("ГруппаПКУ", Объект.ГруппаПКУ));
		ПараметрыПодбора.Вставить("ОтборТолькоПросмотр", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ГруппаПКУ"));
	КонецЕсли;
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборОписанийТоваров(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПоФормулярномуСписку(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	Если ЗначениеЗаполнено(Объект.ГруппаПКУ) Тогда
		ПараметрыПодбора.Вставить("Отбор", Новый Структура("ГруппаПКУ", Объект.ГруппаПКУ));
		ПараметрыПодбора.Вставить("ОтборТолькоПросмотр", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ГруппаПКУ"));
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ПодборПоФормулярномуСписку", Истина);
	ПараметрыПодбора.Вставить("ТипФормуляра", "ФормулярОтделения");
	ПараметрыПодбора.Вставить("Отделение", Объект.Отделение);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборОписанийТоваров(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиПациентов(Команда)
	
	ТолькоПросмотрПациентов =
		ТолькоПросмотр
		Или Объект.Согласован
		Или Объект.ПодписанЭП
		Или (СтатусДокумента = Объект.Статус
			И СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НаСогласовании"));
		
	ВзаимодействиеСПользователемКлиент.ВвестиПациентовВТЧ(
		ЭтотОбъект,
		Объект.Пациенты,
		Элементы.Товары.ТекущиеДанные,
		Объект.Организация,
		Объект.Отделение,
		ТолькоПросмотрПациентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица затребованных товаров не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице затребованных товаров отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиОкончание", ЭтотОбъект);
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыТребованийОтделений.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыТребованийОтделений Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыТребованийОтделений.ФормаВыбора",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОтменитьВыделенныеСтроки.
//
// Параметры:
//  ПричинаОтмены   - СправочникСсылка.ПричиныОтменыТребованийОтделений - причина отмены строки.
//
&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиОкончание(ПричинаОтмены, ПараметрыОтмены) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены'"),
		,
		НСтр("ru='Выделенные строки требования отменены.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтроки(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица затребованных товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмененныеСтроки = Ложь;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ТекСтрока.Отменено Тогда
			ЕстьНеотмененныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеотмененныеСтроки Тогда
		ПоказатьПредупреждение(, НСтр("ru='Все строки отменены.'"));
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		
		ТекстВопроса =
			НСтр("ru='Требование не проведено, поступление по требованию не запланировано. Будут отменены все строки. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиПродолжение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НеСогласован")
	      Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НаСогласовании")
	      Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.Согласован") Тогда
		
		ТекстВопроса =
			НСтр("ru='Требование проведено в статусе %Статус%, поступление по заказу не запланировано. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", СтатусДокумента);
		
		Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиПродолжение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОтменитьНепоставленныеСтрокиПродолжение(КодВозвратаДиалога.Да, Истина);
	
КонецПроцедуры

// Продолжение процедуры ОтменитьНепоставленныеСтроки.
//
// Параметры:
//  Ответ            - КодВозвратаДиалога
//  ПроверятьОстатки - Булево - признак необходимости проверки остатков.
//
&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиПродолжение(Ответ, ПроверятьОстатки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиОкончание", ЭтотОбъект, ПроверятьОстатки);
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыТребованийОтделений.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыТребованийОтделений Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыТребованийОтделений.ФормаВыбора",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОтменитьНепоставленныеСтрокиПродолжение.
//
// Параметры:
//  ПричинаОтмены    - ПричиныОтменыТребованийОтделений - причина отмены непоставленных строк.
//  ПроверятьОстатки - Булево - признак необходимости проверки остатков.
//
&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиОкончание(ПричинаОтмены, ПроверятьОстатки) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокОтменено = ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам требования оформлено поступление. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32);
			
	Иначе
		
		Если ПроверятьОстатки Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все не поставленные строки требования отменены.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все строки требования отменены.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтмененныеСтроки(Команда)
	
	СкрытьОтмененныеСтроки = Не СкрытьОтмененныеСтроки;
	
	Если СкрытьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрытьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияДляВыделенныхСтрок(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.Товары.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "ЭП"
#Область ЭП

&НаКлиенте
Процедура Подписать(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект);
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПодписатьОбъектВФорме(ЭтотОбъект, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОткрытьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Проверить(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПроверитьВсе(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_СохранитьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.СохранитьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	
	Коллекция = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(ЭтотОбъект).ПолучитьЭлементы();
	Элемент = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект);
	Для Каждого Строка Из Коллекция Цикл
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЭП

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОбработатьИзменениеПодразделения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтделения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован
	   И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НеСогласован") Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		// В статусе отличном от "НеСогласован" - поставим все не отмененные строки в ожидаемое поступление
		// и предложим пользователю заполнить дату поступления в строках, в которых эта дата не заполнена.
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.КВыполнению")
		 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.Исполнен")
		 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.Закрыт") Тогда
			ЗаполнитьПустыеДатыПоступления();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПКУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
	   И ВыбранноеЗначение <> Объект.ГруппаПКУ
	   И Объект.Товары.Количество() Тогда
		
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ГруппаПКУОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
		ТекстВопроса = НСтр("ru='При изменении группы ПКУ табличная часть будет очищена.'");
		ПоказатьВопрос(
			Оповещение,
			ТекстВопроса,
			ВзаимодействиеСПользователемКлиент.ПолучитьКнопкиДаНет(НСтр("ru='Очистить'"), НСтр("ru='Отменить'")));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПКУОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ГруппаПКУ = ВыбранноеЗначение;
		Объект.Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ОбработатьИзменениеПоступлениеОднойДатой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатуПоступленияВТаблице(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыНоменклатура"
	 Или Поле.Имя = "ТоварыТорговоеНаименование"
	 Или Поле.Имя = "ТоварыДействующиеВеществаМНН"
	 Или Поле.Имя = "ТоварыФормаВыпуска" Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ЗапретРедактирования =
			ТолькоПросмотр
			Или Объект.Согласован
			Или Объект.ПодписанЭП
			Или (СтатусДокумента = Объект.Статус
				И СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НаСогласовании"));
		
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
		ПараметрыВыбораФОЛС = Новый Структура(ОбрабатываемыеПоля);
		ЗаполнитьЗначенияСвойств(ПараметрыВыбораФОЛС, ТекущаяСтрока);
		ПараметрыВыбораФОЛС.Вставить("ТолькоПросмотр", ЗапретРедактирования);
		
		ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.ФормаВыбора", ПараметрыВыбораФОЛС, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение, ОбрабатываемыеПоля);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.КлючСвязиПациентов = 0;
		ТекущаяСтрока.СтатусУказанияПациентов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыТребованийОтделений.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПациентПриИзменении(Элемент)
	
	ОбработатьИзменениеПациента(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПациентОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработатьОчисткуПациента(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОбработатьИзменениеКоличества(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Электронные подписи"
#Область ЭП

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПриАктивизацииСтроки(Элемент)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.УстановитьДоступностьКомандСпискаПодписей(ЭтотОбъект, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭП

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьДатПоступления(ЭтотОбъект);
	
	ОсновнойСкладОтделения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Объект.Отделение);
	ОсновнойСкладПодразделения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладАптекиПоУмолчанию(Неопределено, Объект.ПодразделениеОрганизации);
	
	ОбновитьТекущееСостояниеСервер();
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	ДокументТребования = РеквизитФормыВЗначение("Объект");
	КоличествоОтмененныхСтрок = ДокументТребования.ОтменитьНепоставленныеСтроки(ПричинаОтмены, ПроверятьОстатки);
	ЗначениеВРеквизитФормы(ДокументТребования, "Объект");
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ДоступностьЭлементов = РазрешеноИзменятьДокумент();
	
	Если ТолькоПросмотр Или Не ДоступностьЭлементов Тогда
		ТекстЗаголовкаКнопкиВвестиПациентов = НСтр("ru = 'Посмотреть пациентов'");
	Иначе
		ТекстЗаголовкаКнопкиВвестиПациентов = НСтр("ru = 'Указать пациентов'");
	КонецЕсли;
	Элементы.ТоварыКомандаВвестиПациентов.Заголовок =  ТекстЗаголовкаКнопкиВвестиПациентов;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Отделение");
	МассивЭлементов.Добавить("СкладПолучатель");
	МассивЭлементов.Добавить("СкладОтправитель");
	МассивЭлементов.Добавить("ПодразделениеОрганизации");
	МассивЭлементов.Добавить("ИсточникФинансирования");
	МассивЭлементов.Добавить("ГруппаПКУ");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("ТоварыПациент");
	МассивЭлементов.Добавить("ТоварыКоличество");
	МассивЭлементов.Добавить("ТоварыЕдиницаИзмерения");
	МассивЭлементов.Добавить("ТоварыДатаПоступления");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("ТоварыКомандаПодбор");
	МассивЭлементов.Добавить("ТоварыКомандаПодборФОЛС");
	МассивЭлементов.Добавить("ТоварыКомандаПодборПоФормулярномуСписку");
	МассивЭлементов.Добавить("ТоварыЗаполнитьДатуПоступленияДляВыделенныхСтрок");
	
	// БуферОбменаТоварами
	МассивЭлементов.Добавить("ТоварыБуферОбменаВставить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюБуферОбменаВставить");
	МассивЭлементов.Добавить("ТоварыБуферОбмена");
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	СписокЭлементов = ЭлектроннаяПодписьБольничнаяАптека.ИменаЭлементовПодписываемыхДанных(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, СписокЭлементов, Истина);
	// Конец ЭлектроннаяПодпись
	
	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, МассивЭлементов, Не ДоступностьЭлементов);
	
	Элементы.Изменить.Доступность = Не ДоступностьЭлементов;
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ТоварыОтменитьВыделенныеСтроки");
	МассивЭлементов.Добавить("ТоварыОтменитьНепоставленныеСтроки");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтроку");
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ДоступностьЭлементов Или Не ИспользоватьСтатусыДокумента Или Объект.Статус <> Перечисления.СтатусыТребованийОтделений.Закрыт);
	
КонецПроцедуры

&НаСервере
Функция РазрешеноИзменятьДокумент()
	
	ДоступностьЭлементов = Истина;
	
	Если Объект.ПодписанЭП Тогда
		ДоступностьЭлементов = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыТребованийОтделений.НаСогласовании Тогда
		ДоступностьЭлементов = Не Объект.Проведен;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыТребованийОтделений.Согласован
	      Или Объект.Статус = Перечисления.СтатусыТребованийОтделений.КВыполнению
	      Или Объект.Статус = Перечисления.СтатусыТребованийОтделений.Исполнен
	      Или Объект.Статус = Перечисления.СтатусыТребованийОтделений.Закрыт Тогда
		ДоступностьЭлементов = Не Объект.Согласован;
	КонецЕсли;
	
	Возврат ДоступностьЭлементов;
	
КонецФункции

&НаКлиенте
Процедура МожноИзменитьДокумент(Оповещение)
	
	Если Объект.ПодписанЭП Тогда
		ТекстСообщения = НСтр(
			"ru='Документ подписан электронной подписью.
			|Изменение документа запрещено.
			|Чтобы изменить документ нужно удалить подписи документа.
			|'");
		ПоказатьПредупреждение(, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	Если ИспользоватьСтатусыДокумента И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НеСогласован") Тогда
		Если Не РазрешеноРучноеИзменениеСтатуса Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru='Документ будет переведен в статус не согласован.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ОповещениеПродолжения = Новый ОписаниеОповещения("МожноИзменитьДокументЗавершение", ЭтотОбъект, Оповещение);
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры МожноИзменитьДокумент.
//
// Параметры:
//  Ответ      - КодВозвратаДиалога
//  Оповещение - ОписаниеОповещения - описание завершения изменения документа.
//
&НаКлиенте
Процедура МожноИзменитьДокументЗавершение(Ответ, Оповещение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Если ИспользоватьСтатусыДокумента Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТребованийОтделений.НеСогласован");
		КонецЕсли;
		Модифицированность = Истина;
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлючСвязиПациентов(Пациенты, КлючСвязиПациентов)
	
	Если ЗначениеЗаполнено(КлючСвязиПациентов) Тогда
		Возврат КлючСвязиПациентов;
	КонецЕсли;
	
	МаксимальныйКлючСвязи = 0;
	Для Каждого ТекущийПациент Из Пациенты Цикл
		Если МаксимальныйКлючСвязи < ТекущийПациент.КлючСвязиПациентов Тогда
			МаксимальныйКлючСвязи = ТекущийПациент.КлючСвязиПациентов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальныйКлючСвязи + 1;
	
КонецФункции

&НаСервере
Процедура ОбновитьТекущееСостояниеСервер()
	
	РегистрыСведений.СостоянияВнутреннихЗаказов.ЗаполнитьТекущееСостояние(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
	
	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, НеИспользуется) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектроннаяПодписьБольничнаяАптека.ЗаполнитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект).ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УдалитьПодписиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок()
	
	ЭлектроннаяПодписьБольничнаяАптека.УдалитьПодписиИОбновитьСписок(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Обработка дат поступления
#Область ДатыПоступления

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)
	
	ДатаПоступления = ПолучитьЖелаемуюДатуПоступления();
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение", ЭтотОбъект, МассивВыделенныхСтрок);
	ВзаимодействиеСПользователемКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата, Оповещение)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ДатаПоступления, МассивВыделенныхСтрок) Экспорт
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления);
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Не СтрокаТЧ.Отменено Тогда
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВзаимодействиеСПользователемКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(
		ДатаПоступления,
		(МассивВыделенныхСтрок <> Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПустыеДатыПоступления() Тогда
			
		ДатаПоступления = ПолучитьЖелаемуюДатуПоступления();
		Если Объект.ПоступлениеОднойДатой Тогда
			Объект.ДатаПоступления = ДатаПоступления;
			ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления);
		Иначе
			Для каждого СтрокаТовара Из Объект.Товары Цикл
				Если Не СтрокаТовара.Отменено И Не ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) Тогда
					СтрокаТовара.ДатаПоступления = ДатаПоступления;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления)
	
	Для каждого СтрокаТовара Из Объект.Товары Цикл
		Если Не СтрокаТовара.Отменено Тогда
			СтрокаТовара.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПустыеДатыПоступления()
	
	Для каждого ТекСтрока Из Объект.Товары Цикл
		
		Если Не ТекСтрока.Отменено
		   И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЖелаемуюДатуПоступления()
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= НачалоДня(Объект.Дата) Тогда
		ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	Иначе
		ДатаПоступления = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаПоступления;
	
КонецФункции

&НаКлиенте 
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Товары Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДатПоступления(Форма)
	
	Форма.Элементы.ТоварыДатаПоступления.Видимость = НЕ Форма.Объект.ПоступлениеОднойДатой;
	Форма.Элементы.ТоварыГруппаДатаПоступления.Видимость = НЕ Форма.Объект.ПоступлениеОднойДатой;
	Форма.Элементы.ДатаПоступления.Видимость = Форма.Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

#КонецОбласти // ДатыПоступления

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Объект.Отделение, Объект.Организация);
	Если Объект.Отделение <> Отделение Тогда
		Объект.Отделение = Отделение;
		ОбработатьИзменениеОтделения();
	КонецЕсли;
	
	Подразделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(Объект.ПодразделениеОрганизации, Объект.Организация, Истина);
	Если Объект.ПодразделениеОрганизации <> Подразделение Тогда
		Объект.ПодразделениеОрганизации = Подразделение;
		ОбработатьИзменениеПодразделения();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПодразделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(
		Объект.ПодразделениеОрганизации, Объект.СкладОтправитель, ОсновнойСкладПодразделения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(
		Объект.Отделение, Объект.СкладПолучатель, ОсновнойСкладОтделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоступлениеОднойДатой()
	
	Если Объект.ПоступлениеОднойДатой Тогда
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		ЗаполнитьДатуПоступленияВТаблице(Объект.ДатаПоступления);
	КонецЕсли;
	
	УстановитьВидимостьДатПоступления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	НоваяСтрока.КодСтроки = 0;
	
	НоваяСтрока.КлючСвязиПациентов = 0;
	НоваяСтрока.СтатусУказанияПациентов = 0;
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличества(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязиПациентов) Тогда
		
		НайденныеПациенты = Объект.Пациенты.НайтиСтроки(Новый Структура("КлючСвязиПациентов", ТекущаяСтрока.КлючСвязиПациентов));
		Если НайденныеПациенты.Количество() = 1 Тогда
			НайденныеПациенты[0].Количество = ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
		Иначе
			КоличествоПоПациентам = 0;
			Для Каждого ТекущийПациент Из НайденныеПациенты Цикл
				КоличествоПоПациентам = КоличествоПоПациентам + ТекущийПациент.Количество;
			КонецЦикла;
			
			Если КоличествоПоПациентам = ТекущаяСтрока.КоличествоВЕдиницахИзмерения Тогда
				ТекущаяСтрока.СтатусУказанияПациентов = 2;
			Иначе
				ТекущаяСтрока.СтатусУказанияПациентов = 3;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПациента(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Пациент) Тогда
		
		КлючСвязиПациентов = ПолучитьКлючСвязиПациентов(Объект.Пациенты, ТекущаяСтрока.КлючСвязиПациентов);
		
		НайденныеПациенты = Объект.Пациенты.НайтиСтроки(Новый Структура("КлючСвязиПациентов", КлючСвязиПациентов));
		Если НайденныеПациенты.Количество() = 0 Тогда
			ДанныеПациента = Объект.Пациенты.Добавить();
			ДанныеПациента.КлючСвязиПациентов = КлючСвязиПациентов;
		Иначе
			ДанныеПациента = НайденныеПациенты[0];
		КонецЕсли;
		
		ДанныеПациента.Пациент = ТекущаяСтрока.Пациент;
		ДанныеПациента.Количество = ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
		
		Для Индекс = 1 По НайденныеПациенты.ВГраница() Цикл
			Объект.Пациенты.Удалить(НайденныеПациенты[Индекс]);
		КонецЦикла;
		
		ТекущаяСтрока.КлючСвязиПациентов = КлючСвязиПациентов;
		ТекущаяСтрока.СтатусУказанияПациентов = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчисткуПациента(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязиПациентов) Тогда
		
		НайденныеПациенты = Объект.Пациенты.НайтиСтроки(Новый Структура("КлючСвязиПациентов", ТекущаяСтрока.КлючСвязиПациентов));
		Для Индекс = 0 По НайденныеПациенты.ВГраница() Цикл
			Объект.Пациенты.Удалить(НайденныеПациенты[Индекс]);
		КонецЦикла;
		
		ТекущаяСтрока.КлючСвязиПациентов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Условное оформление
#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Справочники.Приоритеты.УстановитьУсловноеОформление(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеОтбораНоменклатуры(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеСостоянияДокумента(ЭтотОбъект, Перечисления.СостоянияВнутреннихЗаказов.Закрыт);
	
	ОбязательныеСтатусы = Новый СписокЗначений;
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыТребованийОтделений.КВыполнению);
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыТребованийОтделений.Исполнен);
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыТребованийОтделений.Закрыт);
	ЗаказыСервер.УстановитьОформлениеДатыПоступления(ЭтотОбъект, Элементы.ДатаПоступления.Имя, ОбязательныеСтатусы, "ВсеСтрокиОтменены");
	ЗаказыСервер.УстановитьОформлениеДатыПоступления(ЭтотОбъект, Элементы.ТоварыДатаПоступления.Имя, ОбязательныеСтатусы, "Объект.Товары.Отменено");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, Элементы.Товары);
	
	УстановитьОформлениеПациента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПациента()
	
	// не отмечать пустой склад получатель, если складской учет в отделении не ведется
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	Поле = ЭлементОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПациент.Имя);
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияПациентов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	Отбор.ПравоеЗначение = 1;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Указано несколько пациентов>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

#КонецОбласти // УсловноеОформление

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	СтруктураДействий = Новый Структура;
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, Знач ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
